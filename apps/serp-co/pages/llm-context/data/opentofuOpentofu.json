[
  {
    "owner": "opentofu",
    "repo": "opentofu",
    "content": "TITLE: Using the OpenTofu Apply Command\nDESCRIPTION: The basic syntax for the OpenTofu apply command, which can be used either in automatic plan mode or with a saved plan file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/apply.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntofu apply [options] [plan file]\n```\n\n----------------------------------------\n\nTITLE: Complete AWS Network Configuration Example\nDESCRIPTION: Shows a comprehensive example of defining AWS network infrastructure including VPC and subnets, demonstrating variable usage, provider configuration, and resource dependencies.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 1.0.4\"\n    }\n  }\n}\n\nvariable \"aws_region\" {}\n\nvariable \"base_cidr_block\" {\n  description = \"A /16 CIDR range definition, such as 10.1.0.0/16, that the VPC will use\"\n  default = \"10.1.0.0/16\"\n}\n\nvariable \"availability_zones\" {\n  description = \"A list of availability zones in which to create subnets\"\n  type = list(string)\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n\nresource \"aws_vpc\" \"main\" {\n  # Referencing the base_cidr_block variable allows the network address\n  # to be changed without modifying the configuration.\n  cidr_block = var.base_cidr_block\n}\n\nresource \"aws_subnet\" \"az\" {\n  # Create one subnet for each given availability zone.\n  count = length(var.availability_zones)\n\n  # For each subnet, use one of the specified availability zones.\n  availability_zone = var.availability_zones[count.index]\n\n  # By referencing the aws_vpc.main object, OpenTofu knows that the subnet\n  # must be created only after the VPC is created.\n  vpc_id = aws_vpc.main.id\n\n  # Built-in functions and operators can be used for simple transformations of\n  # values, such as computing a subnet address. Here we create a /20 prefix for\n  # each subnet, using consecutive addresses for each availability zone,\n  # such as 10.1.16.0/20 .\n  cidr_block = cidrsubnet(aws_vpc.main.cidr_block, 4, count.index+1)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance with Import Block in HCL\nDESCRIPTION: Demonstrates the basic syntax for an import block, importing an AWS EC2 instance into OpenTofu state. The example includes both the import block and the corresponding resource block.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/import/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nimport {\n  to = aws_instance.example\n  id = \"i-abcd1234\"\n}\n\nresource \"aws_instance\" \"example\" {\n  name = \"hashi\"\n  # (other resource arguments...)\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Instance Validation with Pre/Postconditions\nDESCRIPTION: Demonstrates AWS EC2 instance configuration with preconditions for AMI architecture validation and postconditions for DNS hostname and volume encryption verification. Shows how to properly validate resource attributes and dependencies.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_ami\" \"example\" {\n  owners = [\"amazon\"]\n\n  filter {\n    name   = \"image-id\"\n    values = [\"ami-abc123\"]\n  }\n}\n\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t3.micro\"\n  ami           = data.aws_ami.example.id\n\n  lifecycle {\n    precondition {\n      condition     = data.aws_ami.example.architecture == \"x86_64\"\n      error_message = \"The selected AMI must be for the x86_64 architecture.\"\n    }\n\n    postcondition {\n      condition     = self.public_dns != \"\"\n      error_message = \"EC2 instance must be in a VPC that has public DNS hostnames enabled.\"\n    }\n  }\n}\n\ndata \"aws_ebs_volume\" \"example\" {\n  filter {\n    name = \"volume-id\"\n    values = [aws_instance.example.root_block_device.volume_id]\n  }\n\n  lifecycle {\n    postcondition {\n      condition     = self.encrypted\n      error_message = \"The server's root volume is not encrypted.\"\n    }\n  }\n}\n\noutput \"api_base_url\" {\n  value = \"https://${aws_instance.example.private_dns}:8433/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data-only Network Module with Kubernetes Cluster in OpenTofu HCL\nDESCRIPTION: This snippet illustrates the use of a data-only module to retrieve network information, which is then used in configuring a Kubernetes cluster. It demonstrates how to share infrastructure information across subsystems.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-16_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"network\" {\n  source = \"./modules/join-network-aws\"\n\n  environment = \"production\"\n}\n\nmodule \"k8s_cluster\" {\n  source = \"./modules/aws-k8s-cluster\"\n\n  subnet_ids = module.network.aws_subnet_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Resource with Custom Postcondition in OpenTofu HCL\nDESCRIPTION: Example of a data resource with a postcondition that validates the AMI has the expected tag value, helping to enforce configuration integrity.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/data-sources/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_ami\" \"example\" {\n  id = var.aws_ami_id\n\n  lifecycle {\n    # The AMI ID must refer to an existing AMI that has the tag \"nomad-server\".\n    postcondition {\n      condition     = self.tags[\"Component\"] == \"nomad-server\"\n      error_message = \"tags[\\\"Component\\\"] must be \\\"nomad-server\\\".\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DNS Record Abstraction in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates how to create a lightweight abstraction for DNS records using OpenTofu modules. It defines recordsets and uses a module to deploy them to Amazon Route53.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"webserver\" {\n  source = \"./modules/webserver\"\n}\n\nlocals {\n  fixed_recordsets = [\n    {\n      name = \"www\"\n      type = \"CNAME\"\n      ttl  = 3600\n      records = [\n        \"webserver01\",\n        \"webserver02\",\n        \"webserver03\",\n      ]\n    },\n  ]\n  server_recordsets = [\n    for i, addr in module.webserver.public_ip_addrs : {\n      name    = format(\"webserver%02d\", i)\n      type    = \"A\"\n      records = [addr]\n    }\n  ]\n}\n\nmodule \"dns_records\" {\n  source = \"./modules/route53-dns-records\"\n\n  route53_zone_id = var.route53_zone_id\n  recordsets      = concat(local.fixed_recordsets, local.server_recordsets)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Input Variables in OpenTofu HCL\nDESCRIPTION: Examples of declaring input variables with different types and default values in OpenTofu's HCL syntax. Demonstrates string, list, and complex object type variables.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/variables.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type = string\n}\n\nvariable \"availability_zone_names\" {\n  type    = list(string)\n  default = [\"us-west-1a\"]\n}\n\nvariable \"docker_ports\" {\n  type = list(object({\n    internal = number\n    external = number\n    protocol = string\n  }))\n  default = [\n    {\n      internal = 8300\n      external = 8300\n      protocol = \"tcp\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Conditions in OpenTofu\nDESCRIPTION: Demonstrates the use of custom conditions for validating resource configurations and ensuring guarantees.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"api_base_url\" {\n  value = \"https://${aws_instance.example.private_dns}:8433/\"\n\n  precondition {\n    condition     = data.aws_ebs_volume.example.encrypted\n    error_message = \"The server's root volume is not encrypted.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic AWS Instance Resource in OpenTofu HCL\nDESCRIPTION: This code snippet demonstrates the basic syntax for defining an AWS EC2 instance resource in OpenTofu. It specifies the AMI and instance type as required configuration arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/syntax.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  ami           = \"ami-a1b2c3d4\"\n  instance_type = \"t2.micro\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Provider Configuration in OpenTofu\nDESCRIPTION: Demonstrates basic provider configuration for Google Cloud Platform, setting project and region values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/configuration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"google\" {\n  project = \"acme-app\"\n  region  = \"us-central1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using for_each with a Map in OpenTofu HCL\nDESCRIPTION: Demonstrates how to use for_each with a map to create multiple Azure resource groups. Each key-value pair in the map creates a separate resource group instance.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azurerm_resource_group\" \"rg\" {\n  for_each = {\n    a_group = \"eastus\"\n    another_group = \"westus2\"\n  }\n  name     = each.key\n  location = each.value\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Sequence Elements with 'can' Function in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates how to use the 'can' function to test if a variable is a sequence with at least one element by checking if the first index exists.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-16_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\ncondition = can(var.example[0])\n# (although it would typically be clearer to write this as a\n# test like length(var.example) > 0 to better represent the\n# intent of the condition.)\n```\n\n----------------------------------------\n\nTITLE: Multi-Region Module Configuration with Provider Mapping in OpenTofu\nDESCRIPTION: This code shows how to set up provider configurations for multiple AWS regions and pass them to a module that requires providers for both source and destination regions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  alias  = \"usw1\"\n  region = \"us-west-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"usw2\"\n  region = \"us-west-2\"\n}\n\nmodule \"tunnel\" {\n  source    = \"./tunnel\"\n  providers = {\n    aws.src = aws.usw1\n    aws.dst = aws.usw2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioner Connection Examples for SSH and WinRM in OpenTofu\nDESCRIPTION: These examples demonstrate how to configure connection blocks for file provisioners using both SSH (for Linux) and WinRM (for Windows) connections. The examples show how to specify connection parameters like type, user, password, and host.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/connection.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Copies the file as the root user using SSH\nprovisioner \"file\" {\n  source      = \"conf/myapp.conf\"\n  destination = \"/etc/myapp.conf\"\n\n  connection {\n    type     = \"ssh\"\n    user     = \"root\"\n    password = \"${var.root_password}\"\n    host     = \"${var.host}\"\n  }\n}\n\n# Copies the file as the Administrator user using WinRM\nprovisioner \"file\" {\n  source      = \"conf/myapp.conf\"\n  destination = \"C:/App/myapp.conf\"\n\n  connection {\n    type     = \"winrm\"\n    user     = \"Administrator\"\n    password = \"${var.admin_password}\"\n    host     = \"${var.host}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Splitting Users by Admin Status Using For Expressions in OpenTofu HCL\nDESCRIPTION: This example defines a variable for user objects and uses 'for' expressions with filtering to split users into admin and regular user collections based on the is_admin attribute.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/for.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"users\" {\n  type = map(object({\n    is_admin = bool\n  }))\n}\n\nlocals {\n  admin_users = {\n    for name, user in var.users : name => user\n    if user.is_admin\n  }\n  regular_users = {\n    for name, user in var.users : name => user\n    if !user.is_admin\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Infrastructure Changes with OpenTofu\nDESCRIPTION: Shows the confirmation step and execution of actual infrastructure provisioning after a plan has been reviewed and approved.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/core-workflow.mdx#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nDo you want to perform these actions?\n\n  OpenTofu will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n  Enter a value: yes\n\n# ...\n\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n```\n\n----------------------------------------\n\nTITLE: For Expression Syntax in OpenTofu HCL\nDESCRIPTION: Example of a for expression that transforms list elements by applying the upper() function.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n[for s in var.list : upper(s)]\n```\n\n----------------------------------------\n\nTITLE: Resource Block Reference in OpenTofu\nDESCRIPTION: Shows the basic structure of a resource block in OpenTofu configurations, which is used to declare infrastructure objects with specific settings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/behavior.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource\n```\n\n----------------------------------------\n\nTITLE: Dynamic Block Implementation\nDESCRIPTION: Demonstrates how to use dynamic blocks to generate multiple setting blocks based on a variable input in an AWS Elastic Beanstalk environment configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/dynamic-blocks.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_elastic_beanstalk_environment\" \"tfenvtest\" {\n  name                = \"tf-test-name\"\n  application         = \"${aws_elastic_beanstalk_application.tftest.name}\"\n  solution_stack_name = \"64bit Amazon Linux 2018.03 v2.11.4 running Go 1.12.6\"\n\n  dynamic \"setting\" {\n    for_each = var.settings\n    content {\n      namespace = setting.value[\"namespace\"]\n      name = setting.value[\"name\"]\n      value = setting.value[\"value\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Preconditions in OpenTofu Resource Configuration\nDESCRIPTION: This code snippet illustrates how to add custom precondition checks to a resource using the lifecycle block. It validates that the selected AMI is for the x86_64 architecture before creating the resource.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/syntax.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t2.micro\"\n  ami           = \"ami-abc123\"\n\n  lifecycle {\n    # The AMI ID must refer to an AMI that contains an operating system\n    # for the `x86_64` architecture.\n    precondition {\n      condition     = data.aws_ami.example.architecture == \"x86_64\"\n      error_message = \"The selected AMI must be for the x86_64 architecture.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Versioned Module Configuration in OpenTofu\nDESCRIPTION: Demonstrates how to specify version constraints when using modules from a registry. Shows module configuration with source and version specification.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/syntax.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmodule \"consul\" {\n  source  = \"hashicorp/consul/aws\"\n  version = \"0.0.5\"\n\n  servers = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Provider Inheritance Example in OpenTofu\nDESCRIPTION: This example demonstrates implicit provider inheritance where a root module defines an AWS provider configuration and instantiates a child module without explicitly passing the provider.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region = \"us-west-1\"\n}\n\nmodule \"child\" {\n  source = \"./child\"\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Modules with Dynamic Provider Instances in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates how to use for_each with provider blocks to create multiple provider instances, and then instantiate a module for each provider instance, passing the appropriate provider configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/module-providers.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"aws_regions\" {\n  type = map(object({\n    vpc_cidr_block = string\n  }))\n}\n\nprovider \"aws\" {\n  alias    = \"by_region\"\n  for_each = var.aws_regions\n\n  region = each.key\n}\n\nmodule \"per_region\" {\n  source = \"./per-region\"\n  # This expression filters var.aws_regions to include only\n  # the elements whose value is not null. Refer to the\n  # warning in the text below for more information.\n  for_each = {\n    for region, config in var.aws_regions : region => config\n    if config != null\n  }\n  providers = {\n    aws = aws.by_region[each.key]\n  }\n\n  region_name    = each.key\n  vpc_cidr_block = each.value.vpc_cidr_block\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Nullable Variable in OpenTofu HCL\nDESCRIPTION: Example of declaring a string variable with nullable set to false, which prevents the variable from having a null value when used in the module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/variables.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"example\" {\n  type     = string\n  nullable = false\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Provider Requirements in OpenTofu Module\nDESCRIPTION: This snippet shows how to specify required provider versions in a module using the required_providers block. It establishes a minimum version constraint for the AWS provider.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \">= 2.7.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Output Usage in OpenTofu\nDESCRIPTION: Shows how to reference output values from a child module in the parent configuration. Example uses module outputs in an AWS ELB resource configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/syntax.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_elb\" \"example\" {\n  # ...\n\n  instances = module.servers.instance_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Using the sort Function in OpenTofu\nDESCRIPTION: This example demonstrates how to use the sort function to sort a list of strings lexicographically. The function takes an input list and returns a new list with the strings arranged in ascending order based on Unicode codepoints.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/sort.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsort([\"e\", \"d\", \"a\", \"x\"])\n[\n  \"a\",\n  \"d\",\n  \"e\",\n  \"x\",\n]\n```\n\n----------------------------------------\n\nTITLE: Output Value with Precondition Check\nDESCRIPTION: Shows how to add a precondition check to an output value to ensure an EC2 instance has an encrypted root volume before exposing the API base URL.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/outputs.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"api_base_url\" {\n  value = \"https://${aws_instance.example.private_dns}:8433/\"\n\n  # The EC2 instance must have an encrypted root volume.\n  precondition {\n    condition     = data.aws_ebs_volume.example.encrypted\n    error_message = \"The server's root volume is not encrypted.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using depends_on with AWS Resources in OpenTofu HCL\nDESCRIPTION: Example demonstrating the use of depends_on meta-argument with AWS resources, showing how to handle hidden dependencies between IAM roles, instance profiles, policies, and EC2 instances. The example illustrates both implicit dependencies through reference expressions and explicit dependencies using depends_on.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/depends_on.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_iam_role\" \"example\" {\n  name = \"example\"\n\n  # assume_role_policy is omitted for brevity in this example. Refer to the\n  # documentation for aws_iam_role for a complete example.\n  assume_role_policy = \"...\"\n}\n\nresource \"aws_iam_instance_profile\" \"example\" {\n  # Because this expression refers to the role, OpenTofu can infer\n  # automatically that the role must be created first.\n  role = aws_iam_role.example.name\n}\n\nresource \"aws_iam_role_policy\" \"example\" {\n  name   = \"example\"\n  role   = aws_iam_role.example.name\n  policy = jsonencode({\n    \"Statement\" = [{\n      # This policy allows software running on the EC2 instance to\n      # access the S3 API.\n      \"Action\" = \"s3:*\",\n      \"Effect\" = \"Allow\",\n    }],\n  })\n}\n\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-a1b2c3d4\"\n  instance_type = \"t2.micro\"\n\n  # OpenTofu can infer from this that the instance profile must\n  # be created before the EC2 instance.\n  iam_instance_profile = aws_iam_instance_profile.example\n\n  # However, if software running in this EC2 instance needs access\n  # to the S3 API in order to boot properly, there is also a \"hidden\"\n  # dependency on the aws_iam_role_policy that OpenTofu cannot\n  # automatically infer, so it must be declared explicitly:\n  depends_on = [\n    aws_iam_role_policy.example\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Health Check Using Check Block\nDESCRIPTION: Implements a health check assertion using OpenTofu's check block functionality to verify website availability by checking HTTP status code.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"health_check\" {\n  data \"http\" \"opentofu_org\" {\n    url = \"https://www.opentofu.org\"\n  }\n\n  assert {\n    condition = data.http.opentofu_org.status_code == 200\n    error_message = \"${data.http.opentofu_org.url} returned an unhealthy status code\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic OpenTofu Block Structure\nDESCRIPTION: Demonstrates the fundamental syntax of OpenTofu language blocks, showing the basic structure with block type, labels, and arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_vpc\" \"main\" {\n  cidr_block = var.base_cidr_block\n}\n\n<BLOCK TYPE> \"<BLOCK LABEL>\" \"<BLOCK LABEL>\" {\n  # Block body\n  <IDENTIFIER> = <EXPRESSION> # Argument\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Provisioners with terraform_data for AWS Cluster Setup in HCL\nDESCRIPTION: This example demonstrates using a terraform_data resource to run provisioners on an AWS cluster. It uses triggers_replace to ensure re-provisioning when any cluster instance changes, and establishes a connection to the first instance to execute a bootstrap script that configures the entire cluster.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/null_resource.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"cluster\" {\n  count = 3\n\n  # ...\n}\n\nresource \"terraform_data\" \"cluster\" {\n  # Replacement of any instance of the cluster requires re-provisioning\n  triggers_replace = aws_instance.cluster.[*].id\n\n  # Bootstrap script can run on any instance of the cluster\n  # So we just choose the first in this case\n  connection {\n    host = aws_instance.cluster.[0].public_ip\n  }\n\n  provisioner \"remote-exec\" {\n    # Bootstrap script called with private_ip of each node in the cluster\n    inline = [\n      \"bootstrap-cluster.sh ${join(\" \", aws_instance.cluster.*.private_ip)}\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using for_each with a Set in OpenTofu HCL\nDESCRIPTION: Shows how to use for_each with a set of strings to create multiple AWS IAM users. Each string in the set becomes a separate user instance.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_iam_user\" \"the-accounts\" {\n  for_each = toset( [\"Todd\", \"James\", \"Alice\", \"Dottie\"] )\n  name     = each.key\n}\n```\n\n----------------------------------------\n\nTITLE: Using Locals in S3 Backend Configuration in HCL\nDESCRIPTION: Demonstrates how to define and use local variables in an S3 backend configuration. The example creates a local variable for the AWS region and references it in the backend configuration, showing the syntax for defining backend settings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/configuration.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n\tregion = \"us-east-1\"\n}\n\nterraform {\n\tbackend \"s3\" {\n\t\tregion = local.region\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing OpenTofu Plan Command\nDESCRIPTION: The basic usage of the 'tofu plan' command to create an execution plan. This command looks in the current working directory for the root module configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/plan.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntofu plan [options]\n```\n\n----------------------------------------\n\nTITLE: Documenting Input Variables in OpenTofu\nDESCRIPTION: Example of adding a description to an input variable declaration to provide documentation for users of the module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/variables.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type        = string\n  description = \"The id of the machine image (AMI) to use for the server.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Provider with its Local Name in Configuration\nDESCRIPTION: Example showing how to declare a required provider and then use that same local name when configuring the provider in an OpenTofu configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/requirements.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    mycloud = {\n      source  = \"mycorp/mycloud\"\n      version = \"~> 1.0\"\n    }\n  }\n}\n\nprovider \"mycloud\" {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Validation with Basic AMI ID Check\nDESCRIPTION: Demonstrates input variable validation for AWS AMI IDs using string length and prefix checking. The validation ensures the image_id starts with 'ami-' and has a minimum length.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type        = string\n  description = \"The id of the machine image (AMI) to use for the server.\"\n\n  validation {\n    condition     = length(var.image_id) > 4 && substr(var.image_id, 0, 4) == \"ami-\"\n    error_message = \"The image_id value must be a valid AMI id, starting with \\\"ami-\\\".\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Data Source Attributes in Resource Configuration\nDESCRIPTION: Example of using attributes from a data source within a resource configuration, specifically referencing an AMI ID in an AWS instance resource.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/data-sources/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  ami           = data.aws_ami.web.id\n  instance_type = \"t1.micro\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Instance with remote-exec Provisioner in OpenTofu\nDESCRIPTION: Example demonstrating how to configure an AWS EC2 instance with the remote-exec provisioner using SSH connection. The provisioner executes inline commands to run Puppet and join a Consul cluster.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/remote-exec.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  # Establishes connection to be used by all\n  # generic remote provisioners (i.e. file/remote-exec)\n  connection {\n    type     = \"ssh\"\n    user     = \"root\"\n    password = var.root_password\n    host     = self.public_ip\n  }\n\n  provisioner \"remote-exec\" {\n    inline = [\n      \"puppet apply\",\n      \"consul join ${aws_instance.web.private_ip}\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the distinct Function in OpenTofu (HCL)\nDESCRIPTION: This example demonstrates how to use the 'distinct' function to remove duplicate elements from a list. The function preserves the first occurrence of each value and maintains the original order of elements.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/distinct.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> distinct([\"a\", \"b\", \"a\", \"c\", \"d\", \"b\"])\n[\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Module Call in OpenTofu\nDESCRIPTION: Example of calling a child module in OpenTofu configuration. Shows basic module block syntax with source specification and variable assignment.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/syntax.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"servers\" {\n  source = \"./app-cluster\"\n\n  servers = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Using terraform_data for Provisioning\nDESCRIPTION: Example demonstrating terraform_data as a replacement for null_resource, using it as a container for provisioner actions triggered by changes to other resources.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/tf-data.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n}\n\nresource \"aws_instance\" \"database\" {\n  # ...\n}\n\n# A use-case for terraform_data is as a do-nothing container\n# for arbitrary actions taken by a provisioner.\nresource \"terraform_data\" \"bootstrap\" {\n  triggers_replace = [\n    aws_instance.web.id,\n    aws_instance.database.id\n  ]\n\n  provisioner \"local-exec\" {\n    command = \"bootstrap-hosts.sh\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Latest Available AMI with Filters in OpenTofu HCL\nDESCRIPTION: Example of using the aws_ami data source with multiple filters to find the most recent available AMI with a specific component tag.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/data-sources/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# Find the latest available AMI that is tagged with Component = web\ndata \"aws_ami\" \"web\" {\n  filter {\n    name   = \"state\"\n    values = [\"available\"]\n  }\n\n  filter {\n    name   = \"tag:Component\"\n    values = [\"web\"]\n  }\n\n  most_recent = true\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Module Resources from State in OpenTofu HCL\nDESCRIPTION: This code snippet demonstrates how to remove an entire module and its resources from OpenTofu's state while preserving the infrastructure objects. It uses the 'removed' block with a module address.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/syntax.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nremoved {\n  from = module.some_module\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying File Checksums on macOS with shasum\nDESCRIPTION: Bash script to verify the integrity of an OpenTofu download on macOS systems using shasum. The script checks the SHA256 hash of the downloaded file against official checksums.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/standalone.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Replace YOURVERSION with the version you downloaded, for example, 1.6.0-alpha1\n# Replace YOURFILE with the file you downloaded, for example, tofu_1.6.0-alpha1_darwin_amd64.zip\nshasum -a 256 --check --ignore-missing tofu_YOURVERSION_SHA256SUMS\n```\n\n----------------------------------------\n\nTITLE: Basic Argument Syntax in OpenTofu HCL\nDESCRIPTION: Demonstrates the basic syntax for defining an argument in OpenTofu configuration. Arguments assign values to named identifiers using the equals sign operator.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/syntax/configuration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nimage_id = \"abc123\"\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Expressions in Local Values\nDESCRIPTION: Shows how to create local values using dynamic expressions that reference other resources and combine values. Includes examples of concatenating instance IDs and creating common tag maps.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/locals.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  # Ids for multiple sets of EC2 instances, merged together\n  instance_ids = concat(aws_instance.blue.*.id, aws_instance.green.*.id)\n}\n\nlocals {\n  # Common tags to be assigned to all resources\n  common_tags = {\n    Service = local.service_name\n    Owner   = local.owner\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTofu State Management Commands Reference\nDESCRIPTION: Documentation detailing the main state management commands in OpenTofu - state mv, state rm, and state replace-provider. These commands help in managing resource tracking and movement between states without destroying the underlying infrastructure.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/state/move.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [The `tofu state mv` command](../commands/state/mv.mdx) changes\\n  which resource address in your configuration is associated with a particular\\n  real-world object.\\n\\n- [The `tofu state rm` command](../commands/state/rm.mdx) tells\\n  OpenTofu to stop managing a resource as part of the current working directory\\n  and workspace.\\n\\n- [The `tofu state replace-provider` command](../commands/state/replace-provider.mdx)\\n  transfers existing resources to a new provider without requiring them to be\\n  re-created.\n```\n\n----------------------------------------\n\nTITLE: Basic OpenTofu Test Configuration Example\nDESCRIPTION: A simple example showing a main.tf file and its accompanying test file that creates a test.txt file and verifies its existence.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf content\n# SimpleMain placeholder - actual code would show resource creation\n```\n\n----------------------------------------\n\nTITLE: Using Init with Backend Configuration\nDESCRIPTION: Initializes the backend with partial configuration provided via command line arguments. Useful for dynamic or sensitive backend settings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/init.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntofu init -backend-config=...\n```\n\n----------------------------------------\n\nTITLE: Running the OpenTofu Import Command for an AWS Instance\nDESCRIPTION: A shell command example showing how to import an existing AWS EC2 instance with ID i-abcd1234 into the previously defined resource block.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/import/usage.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu import aws_instance.example i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Provider Instance Selection in HCL Modules\nDESCRIPTION: Demonstrates how to configure dynamic provider instance selection using for_each in provider and module blocks. Shows how provider instances can be mapped to module instances based on dynamic keys.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  alias    = \"by_region\"\n  for_each = var.aws_regions\n\n  # ...\n}\n\nmodule \"example\" {\n  source   = \"./example\"\n  for_each = var.aws_regions\n  providers = {\n    aws = aws.by_region[each.key]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterative Development with OpenTofu Plan\nDESCRIPTION: Demonstrates the feedback loop of making edits to configuration files and running plan commands to check for syntax errors and preview infrastructure changes during development.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/core-workflow.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Make edits to config\n$ vim main.tf\n\n# Review plan\n$ tofu plan\n\n# Make additional edits, and repeat\n$ vim main.tf\n```\n\n----------------------------------------\n\nTITLE: Basic Output Value Declaration in OpenTofu\nDESCRIPTION: Demonstrates how to declare a basic output value that exposes a private IP address from an AWS instance resource.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/outputs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"instance_ip_addr\" {\n  value = aws_instance.server.private_ip\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Required Providers in OpenTofu Configuration\nDESCRIPTION: Example of a required_providers block within a terraform block that specifies a provider's local name, source location, and version constraint.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/requirements.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    mycloud = {\n      source  = \"mycorp/mycloud\"\n      version = \"~> 1.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reviewing Final Plan Before Infrastructure Provisioning\nDESCRIPTION: Demonstrates running the apply command which shows the plan for final review before committing to infrastructure changes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/core-workflow.mdx#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ tofu apply\n\nAn execution plan has been generated and is shown below.\n# ...\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Path Module in OpenTofu HCL\nDESCRIPTION: Demonstrates how to reference a module from a local path in OpenTofu configuration. Local paths must begin with './' or '../' to distinguish them from registry addresses.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"./consul\"\n}\n```\n\n----------------------------------------\n\nTITLE: Output Value with Explicit Dependencies\nDESCRIPTION: Shows how to use the depends_on argument to create explicit dependencies for output values when implicit dependency detection is insufficient.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/outputs.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"instance_ip_addr\" {\n  value       = aws_instance.server.private_ip\n  description = \"The private IP address of the main server instance.\"\n\n  depends_on = [\n    # Security group rule must be created before this IP address could\n    # actually be used, otherwise the services will be unreachable.\n    aws_security_group_rule.local_access,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 String in OpenTofu\nDESCRIPTION: This example demonstrates how to use the base64decode function to decode a Base64 encoded string. The function takes a Base64 encoded string as input and returns the original decoded string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/base64decode.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> base64decode(\"SGVsbG8gV29ybGQ=\")\nHello World\n```\n\n----------------------------------------\n\nTITLE: Using count with List Variables in OpenTofu\nDESCRIPTION: Example showing how to derive count from a list length and use count.index to access list elements. This approach creates one EC2 instance for each subnet ID in the provided list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/count.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"subnet_ids\" {\n  type = list(string)\n}\n\nresource \"aws_instance\" \"server\" {\n  # Create one instance for each subnet\n  count = length(var.subnet_ids)\n\n  ami           = \"ami-a1b2c3d4\"\n  instance_type = \"t2.micro\"\n  subnet_id     = var.subnet_ids[count.index]\n\n  tags = {\n    Name = \"Server ${count.index}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining for_each Between Resources in OpenTofu HCL\nDESCRIPTION: Demonstrates how to chain for_each between resources, creating an AWS Internet Gateway for each VPC. This pattern explicitly declares the relationship between the resources.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"vpcs\" {\n  type = map(object({\n    cidr_block = string\n  }))\n}\n\nresource \"aws_vpc\" \"example\" {\n  # One VPC for each element of var.vpcs\n  for_each = var.vpcs\n\n  # each.value here is a value from var.vpcs\n  cidr_block = each.value.cidr_block\n}\n\nresource \"aws_internet_gateway\" \"example\" {\n  # One Internet Gateway per VPC\n  for_each = aws_vpc.example\n\n  # each.value here is a full aws_vpc object\n  vpc_id = each.value.id\n}\n\noutput \"vpc_ids\" {\n  value = {\n    for k, v in aws_vpc.example : k => v.id\n  }\n\n  # The VPCs aren't fully functional until their\n  # internet gateways are running.\n  depends_on = [aws_internet_gateway.example]\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Files Using Cloud-Init Configuration in OpenTofu\nDESCRIPTION: This example demonstrates how to use the cloudinit_config data source to provision files to a server during initialization. The configuration uses YAML encoding to create a cloud-init configuration that writes multiple files to the system without requiring SSH access.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/syntax.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"cloudinit_config\" \"my_cloud_config\" {\n  gzip          = false\n  base64_encode = false\n\n  part {\n    content_type = \"text/cloud-config\"\n    filename     = \"cloud.conf\"\n    content = yamlencode(\n      {\n        \"write_files\" : [\n          {\n            \"path\" : \"/etc/foo.conf\",\n            \"content\" : \"foo contents\",\n          },\n          {\n            \"path\" : \"/etc/bar.conf\",\n            \"content\" : file(\"bar.conf\"),\n          },\n          {\n            \"path\" : \"/etc/baz.conf\",\n            \"content\" : templatefile(\"baz.tpl.conf\", { SOME_VAR = \"qux\" }),\n          },\n        ],\n      }\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic Data Resource in OpenTofu HCL\nDESCRIPTION: Example of declaring a data resource block using aws_ami data source to find a specific AMI based on ownership and tags.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/data-sources/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_ami\" \"example\" {\n  most_recent = true\n\n  owners = [\"self\"]\n  tags = {\n    Name   = \"app-server\"\n    Tested = \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple OpenTofu Tests with Assertions\nDESCRIPTION: This example demonstrates how to write a basic OpenTofu test file with an assert block that validates infrastructure. The assert block checks a condition and provides an error message if the test fails.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nrun \"test\" {\n  assert {\n    condition     = local_file.foo.content == \"hello\\n\"\n    error_message = \"Content of the file does not match the expected content\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'each' and 'count' Objects in Resource Chain Expansion in OpenTofu\nDESCRIPTION: This comprehensive example demonstrates how to use 'each' objects to refer to other resources expanded in a chain using 'for_each'. It creates internet gateways for VPCs filtered by CIDR blocks with a precondition check.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-16_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"vpc_cidrs\" {\n  type = set(string)\n}\n\ndata \"aws_vpc\" \"example\" {\n  for_each = var.vpc_cidrs\n\n  filter {\n    name   = \"cidr\"\n    values = [each.key]\n  }\n}\n\nresource \"aws_internet_gateway\" \"example\" {\n  for_each = data.aws_vpc.example\n  vpc_id = each.value.id\n\n  lifecycle {\n    precondition {\n      condition     = data.aws_vpc.example[each.key].state == \"available\"\n      error_message = \"VPC ${each.key} must be available.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SCP-like Syntax for Git SSH Module Sources in OpenTofu\nDESCRIPTION: This snippet demonstrates how to use the alternative SCP-like syntax for Git repositories over SSH when specifying a module source. This format omits the 'ssh://' prefix but includes the 'git::' selector.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"storage\" {\n  source = \"git::username@example.com:storage.git\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance into Resource with For-Each (Linux/Mac)\nDESCRIPTION: Shell command for Linux, Mac OS, and UNIX systems that imports an AWS EC2 instance with ID 'i-abcd1234' into the 'example' instance of 'aws_instance.baz' configured with the 'for_each' meta-argument.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/import.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu import 'aws_instance.baz[\"example\"]' i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: Using Variables and Locals for Module Sources in OpenTofu\nDESCRIPTION: This example demonstrates how to use local variables to define common module repository and version information, making it easier to update versions or switch repositories for multiple modules in a mono-repo pattern.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n\tmodules_repo = \"github.com/myorg/tofu-modules/\"\n\tmodules_version = \"?ref=v1.20.4\"\n}\n\nmodule \"storage\" {\n  source = \"${local.modules_repo}/storage${local.modules_version}\"\n}\n\nmodule \"compute\" {\n  source = \"${local.modules_repo}/compute${local.modules_version}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu using winget on Windows\nDESCRIPTION: Command to install OpenTofu using Windows Package Manager (winget). If installation issues occur, the user should verify that the WinGet Links directory is in their PATH environment variable.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/windows.mdx#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install OpenTofu.Tofu\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Check in OpenTofu\nDESCRIPTION: Example showing how to implement a basic health check that validates a website's HTTP status code using a check block with a scoped data source and assertion.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/checks/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"health_check\" {\n  data \"http\" \"opentofu_org\" {\n    url = \"https://www.opentofu.org\"\n  }\n\n  assert {\n    condition = data.http.opentofu_org.status_code == 200\n    error_message = \"${data.http.opentofu_org.url} returned an unhealthy status code\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Creation Example in OpenTofu\nDESCRIPTION: Demonstrates creating and using an AMI resource in a module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_ami_copy\" \"example\" {\n  name              = \"local-copy-of-ami\"\n  source_ami_id     = \"ami-abc123\"\n  source_ami_region = \"eu-west-1\"\n}\n\nmodule \"example\" {\n  source = \"./modules/example\"\n\n  ami = aws_ami_copy.example\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for S3 Bucket Access Control in JSON\nDESCRIPTION: This JSON snippet shows an example IAM policy that grants fine-grained access to a specific state object within an S3 bucket. It allows listing the bucket and read/write access to a specific state file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/s3.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListBucket\",\n      \"Resource\": \"arn:aws:s3:::myorg-tofu-states\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:GetObject\", \"s3:PutObject\"],\n      \"Resource\": \"arn:aws:s3:::myorg-tofu-states/myapp/production/tfstate\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Resource Configuration in HCL\nDESCRIPTION: Example of a generated configuration for an AWS IoT thing resource. This HCL code is created by OpenTofu based on the import block and existing resource state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/import/generating-configuration.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource aws_iot_thing \"bar\" {\n  name = \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Backend in OpenTofu\nDESCRIPTION: Example of configuring a remote backend with organization and workspace settings in OpenTofu configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/configuration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"remote\" {\n    organization = \"example_corp\"\n\n    workspaces {\n      name = \"my-app-prod\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Dynamic Blocks Implementation\nDESCRIPTION: Shows how to implement nested dynamic blocks for creating complex hierarchical configurations with multiple levels of blocks.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/dynamic-blocks.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n  dynamic \"origin_group\" {\n    for_each = var.load_balancer_origin_groups\n    content {\n      name = origin_group.key\n\n      dynamic \"origin\" {\n        for_each = origin_group.value.origins\n        content {\n          hostname = origin.value.hostname\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Testing with Plan Command and Options in OpenTofu\nDESCRIPTION: Shows how to use the plan command instead of apply in tests, along with plan_options to control refresh and target behavior, useful for testing configuration without creating actual infrastructure.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nrun \"validate_image\" {\n  # Only validate the plan instead of applying it.\n  command = \"plan\"\n\n  variables {\n    name = \"test\"\n    reference = \"ubuntu:jammy\"\n  }\n\n  # This block contains additional options for planning.\n  plan_options {\n    # Only target a specific resource, not the whole configuration.\n    target = [docker_image.build]\n  }\n\n  assert {\n    condition     = docker_image.build.name == \"ubuntu:jammy\"\n    error_message = \"Invalid image name\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Resources from State in OpenTofu HCL\nDESCRIPTION: This code snippet shows how to remove a resource from OpenTofu's state without destroying the underlying infrastructure. It uses the 'removed' block to specify which resource to forget.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/syntax.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nremoved {\n  from = aws_instance.web\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Variable Structure Definition\nDESCRIPTION: Defines a complex variable structure for load balancer origin groups that will be used with dynamic blocks.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/dynamic-blocks.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"load_balancer_origin_groups\" {\n  type = map(object({\n    origins = set(object({\n      hostname = string\n    }))\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sets with for_each in OpenTofu HCL\nDESCRIPTION: Shows how to use the toset function to convert a list to a set for use with for_each. This example creates an AWS instance for each subnet ID in the set.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  subnet_ids = toset([\n    \"subnet-abcdef\",\n    \"subnet-012345\",\n  ])\n}\n\nresource \"aws_instance\" \"server\" {\n  for_each = local.subnet_ids\n\n  ami           = \"ami-a1b2c3d4\"\n  instance_type = \"t2.micro\"\n  subnet_id     = each.key # note: each.key and each.value are the same for a set\n\n  tags = {\n    Name = \"Server ${each.key}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Scaling Resources Based on Workspace in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates how to conditionally set the count parameter for resources based on the current workspace. For the default workspace, it creates 5 instances, while for other workspaces it creates only 1 instance.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/workspaces.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  count = \"${terraform.workspace == \"default\" ? 5 : 1}\"\n\n  # ... other arguments\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Local Values in OpenTofu HCL\nDESCRIPTION: Demonstrates how to declare simple local values using a locals block, assigning static values to named variables that can be reused throughout the module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/locals.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  service_name = \"forum\"\n  owner        = \"Community Team\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AES-GCM Encryption Method in OpenTofu\nDESCRIPTION: Example configuration for setting up the AES-GCM encryption method in OpenTofu. This is the only encryption method currently supported by OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_22\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  encryption {\n    // ...\n    method \"aes-gcm\" \"my_method\" {\n      key_provider = key_provider.my_provider\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remote State Using 'remote' Backend in OpenTofu\nDESCRIPTION: Example configuration showing how to use the terraform_remote_state data source with a remote backend to access outputs from another workspace. The configuration specifies organization and workspace name parameters, then references an output value from that remote state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/remote-state-data.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"vpc\" {\n  backend = \"remote\"\n\n  config = {\n    organization = \"hashicorp\"\n    workspaces = {\n      name = \"vpc-prod\"\n    }\n  }\n}\n\nresource \"aws_instance\" \"foo\" {\n  # ...\n  subnet_id = data.terraform_remote_state.vpc.outputs.subnet_id\n}\n```\n\n----------------------------------------\n\nTITLE: Using Version Constraint Operators for Provider Versions\nDESCRIPTION: Example showing how to use the ~> operator to allow patch releases within a specific minor release, which is recommended for root modules.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/requirements.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    mycloud = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 1.0.4\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Backend in OpenTofu\nDESCRIPTION: Basic configuration for setting up an S3 backend in OpenTofu, specifying the bucket, key path, and AWS region.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/s3.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    bucket = \"mybucket\"\n    key    = \"path/to/my/key\"\n    region = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Interpolation in OpenTofu HCL\nDESCRIPTION: A quoted string with interpolation, which evaluates the expression inside ${...} and inserts its value into the final string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/strings.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n\"Hello, ${var.name}!\"\n```\n\n----------------------------------------\n\nTITLE: Exposing Module Outputs as Root Outputs in OpenTofu\nDESCRIPTION: Example showing how to make a nested module's output accessible via terraform_remote_state by explicitly configuring a passthrough in the root module. This pattern is necessary because remote state can only access root-level outputs.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/remote-state-data.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"app\" {\n  source = \"...\"\n}\n\noutput \"app_value\" {\n  value = module.app.example\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum Provider Version Constraint\nDESCRIPTION: Example showing how to specify a minimum version constraint for a provider, which is recommended for reusable modules to ensure compatibility.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/requirements.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    mycloud = {\n      source  = \"hashicorp/aws\"\n      version = \">= 1.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple EC2 Instances with count in OpenTofu\nDESCRIPTION: Example of using the count meta-argument to create four similar EC2 instances in AWS, demonstrating how to use count.index to assign unique names to each instance.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/count.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"server\" {\n  count = 4 # create four similar EC2 instances\n\n  ami           = \"ami-a1b2c3d4\"\n  instance_type = \"t2.micro\"\n\n  tags = {\n    Name = \"Server ${count.index}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching ZIP Archives via HTTP URLs as Module Sources\nDESCRIPTION: This example demonstrates how to reference a ZIP archive directly as a module source using an HTTP URL. OpenTofu will automatically detect common archive extensions and use the contents as the module source code.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"https://example.com/vpc-module.zip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Encryption Configuration for New OpenTofu Projects\nDESCRIPTION: Provides a sample configuration for setting up passphrase-based encryption in a new OpenTofu project.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  encryption {\n    key_provider \"local\" {\n      method \"aes_gcm\" {\n        static_key = \"THISISNOTASECUREPASSPHRASE\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Provider Aliases Within Modules in OpenTofu\nDESCRIPTION: This code demonstrates how to declare provider aliases within a module using the configuration_aliases argument. This allows a module to use multiple configurations of the same provider.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \">= 2.7.0\"\n      configuration_aliases = [ aws.alternate ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote State Data Source in HCL\nDESCRIPTION: Configuration for the terraform_remote_state data source to access state from a remote backend, enabling data sharing between OpenTofu configurations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/remote.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"remote\"\n\n  config = {\n    organization = \"company\"\n\n    workspaces = {\n      name = \"workspace\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Instances for Child Modules in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates how to configure default and alternate provider instances for AWS, and how to pass a specific provider configuration to a child module using the providers meta-argument.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/module-providers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# The default \"aws\" configuration is used for AWS resources in the root\n# module where no explicit provider instance is selected.\nprovider \"aws\" {\n  region = \"us-west-1\"\n}\n\n# An alternate configuration is also defined for a different\n# region, using the alias \"usw2\".\nprovider \"aws\" {\n  alias  = \"usw2\"\n  region = \"us-west-2\"\n}\n\n# An example child module is instantiated with the alternate configuration,\n# so any AWS resources it defines will use the us-west-2 region.\nmodule \"example\" {\n  source    = \"./example\"\n  providers = {\n    aws = aws.usw2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Backend with Web Identity Token and IAM Policy Constraints\nDESCRIPTION: Extended S3 backend configuration that includes IAM policy constraints in the assume_role_with_web_identity block. This limits the assumed role's permissions to only allow S3 operations on the specific bucket containing the state file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/s3.mdx#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    bucket = \"mybucket\"\n    key    = \"my/key.tfstate\"\n    region = \"us-east-1\"\n\n    assume_role_with_web_identity = {\n      role_arn           = \"arn:aws:iam::ACCOUNT-ID:role/Opentofu\"\n      web_identity_token = \"<token value>\"\n      policy             = <<-JSON\n\t\t\t{\n\t\t\t\t\"Version\": \"2012-10-17\",\n\t\t\t\t\"Statement\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Effect\": \"Allow\",\n\t\t\t\t\t\t\"Action\": \"s3:*\",\n\t\t\t\t\t\t\"Resource\": [\n\t\t\t\t\t\t\t\"arn:aws:s3:::mybucket/*\",\n\t\t\t\t\t\t\t\"arn:aws:s3:::mybucket\"\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t\tJSON\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replace Triggered By Configuration in OpenTofu\nDESCRIPTION: Demonstrates how to use replace_triggered_by to force resource replacement when referenced resources change.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/lifecycle.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_appautoscaling_target\" \"ecs_target\" {\n  # ...\n  lifecycle {\n    replace_triggered_by = [\n      # Replace `aws_appautoscaling_target` each time this instance of\n      # the `aws_ecs_service` is replaced.\n      aws_ecs_service.svc.id\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using for_each with Child Modules in OpenTofu HCL\nDESCRIPTION: Illustrates how to use for_each to create multiple instances of a child module. Each set member creates a separate module instance with a unique name.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# my_buckets.tf\nmodule \"bucket\" {\n  for_each = toset([\"assets\", \"media\"])\n  source   = \"./publish_bucket\"\n  name     = \"${each.key}_bucket\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# publish_bucket/bucket-and-cloudfront.tf\nvariable \"name\" {} # this is the input parameter of the module\n\nresource \"aws_s3_bucket\" \"example\" {\n  # Because var.name includes each.key in the calling\n  # module block, its value will be different for\n  # each instance of this module.\n  bucket = var.name\n\n  # ...\n}\n\nresource \"aws_iam_user\" \"deploy_user\" {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Git Revision for Module in OpenTofu HCL\nDESCRIPTION: Shows how to select a specific revision (tag or commit) when using a Git repository as a module source. The 'ref' argument can be used to specify a tag, branch, or commit hash.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# select a specific tag\nmodule \"vpc\" {\n  source = \"git::https://example.com/vpc.git?ref=v1.2.0\"\n}\n\n# directly select a commit using its SHA-1 hash\nmodule \"storage\" {\n  source = \"git::https://example.com/storage.git?ref=51d462976d84fdea54b47d80dcabbf680badcdb8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Configuration Aliases for Provider in Child Module\nDESCRIPTION: This snippet shows how a child module declares the provider configuration aliases it expects to receive from its parent module. It specifies that it requires two AWS provider configurations named 'src' and 'dst'.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \">= 2.7.0\"\n      configuration_aliases = [ aws.src, aws.dst ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recordset Variable Type in OpenTofu HCL\nDESCRIPTION: This code defines the input variable type for recordsets in a DNS records module. It specifies the structure of the recordset object, including name, type, TTL, and records.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-16_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"recordsets\" {\n  type = list(object({\n    name    = string\n    type    = string\n    ttl     = number\n    records = list(string)\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Variable Overrides in Different Scopes\nDESCRIPTION: This example demonstrates how to set variables at different scopes in OpenTofu tests. Variables can be defined at the file level and overridden in specific run blocks to test different scenarios.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nvariables {\n  content = \"hello\\n\"\n}\n\nrun \"create_file\" {\n  assert {\n    condition     = local_file.foo.content == \"hello\\n\"\n    error_message = \"Content of the file does not match 'hello'\"\n  }\n}\n\nrun \"create_file_with_different_content\" {\n  variables {\n    content = \"world\\n\"\n  }\n\n  assert {\n    condition     = local_file.foo.content == \"world\\n\"\n    error_message = \"Content of the file does not match 'world'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Sensitive Input Variables in OpenTofu\nDESCRIPTION: Example of marking an input variable as sensitive to prevent its value from being displayed in plan or apply output, useful for handling confidential information.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/variables.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"user_information\" {\n  type = object({\n    name    = string\n    address = string\n  })\n  sensitive = true\n}\n\nresource \"some_resource\" \"a\" {\n  name    = var.user_information.name\n  address = var.user_information.address\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Providers in OpenTofu Module\nDESCRIPTION: This snippet demonstrates how to configure required providers in an OpenTofu module, specifying the AWS provider with a version constraint.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/provider-references.md#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    modaws = {\n      source = \"aws\"\n      version = \">= 0.1\"\n    }\n  }\n}\n\n\nresource \"aws_s3_bucket\" \"foo\" {\n  bucket_name = \"foo\"\n  provider = modaws\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Resource into Module in HCL\nDESCRIPTION: Demonstrates how to import a resource into a specific module using the import block syntax.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/import/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nimport {\n  to = module.instances.aws_instance.example\n  id = \"i-abcd1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Output Variables in OpenTofu HCL\nDESCRIPTION: Example of defining output variables in OpenTofu HCL configuration, including a regular output, a load balancer address output, and a sensitive password output.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/output.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"instance_ips\" {\n  value = aws_instance.web.*.public_ip\n}\n\noutput \"lb_address\" {\n  value = aws_alb.web.public_dns\n}\n\noutput \"password\" {\n  sensitive = true\n  value = var.secret_password\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Subnet Addresses with cidrsubnet Function in HCL\nDESCRIPTION: This code snippet demonstrates the usage of the cidrsubnet function in HCL. It shows examples of calculating subnet addresses for both IPv4 and IPv6 network prefixes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/cidrsubnet.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncidrsubnet(\"172.16.0.0/12\", 4, 2)\ncidrsubnet(\"10.1.2.0/24\", 4, 15)\ncidrsubnet(\"fd00:fd12:3456:7890::/56\", 16, 162)\n```\n\n----------------------------------------\n\nTITLE: Using can() in Variable Validation Rules in OpenTofu HCL\nDESCRIPTION: Example of using the can function in a variable validation block to check if a timestamp string is valid. The function tests if formatdate can successfully process the input, returning true for valid timestamps and false otherwise.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/can.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"timestamp\" {\n  type        = string\n\n  validation {\n    # formatdate fails if the second argument is not a valid timestamp\n    condition     = can(formatdate(\"\", var.timestamp))\n    error_message = \"The timestamp argument requires a valid RFC 3339 timestamp.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Provider Configuration in OpenTofu HCL\nDESCRIPTION: Demonstrates how to specify an alternate provider configuration for a resource using the provider meta-argument with an alias.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/configuration.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"foo\" {\n  provider = aws.west\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Object Using For Expression in OpenTofu HCL\nDESCRIPTION: This snippet shows how to use curly braces to create an object from a list, where each element becomes a key mapped to its uppercase version.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/for.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n{for s in var.list : s => upper(s)}\n```\n\n----------------------------------------\n\nTITLE: Using Module Outputs with Workspace Reference in OpenTofu HCL\nDESCRIPTION: This example demonstrates how to create a module reference that uses the workspace name as a prefix for uniqueness. This pattern is recommended over using workspace variables directly within shared modules.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/references.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"example\" {\n  # ...\n\n  name_prefix = \"app-${terraform.workspace}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tuple Using For Expression in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates a basic 'for' expression that iterates over each element of var.list and creates a tuple containing the uppercase version of each element.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/for.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n[for s in var.list : upper(s)]\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Installation Methods in OpenTofu\nDESCRIPTION: Example of a provider_installation block that specifies a filesystem mirror for providers from example.com and direct installation for all other providers. This configuration overrides OpenTofu's default installation behavior.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/config-file.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nprovider_installation {\n  filesystem_mirror {\n    path    = \"/usr/share/terraform/providers\"\n    include = [\"example.com/*/*\"]\n  }\n  direct {\n    exclude = [\"example.com/*/*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple AWS Provider Configurations Using Alias\nDESCRIPTION: Shows how to configure multiple provider instances for different AWS regions using the alias meta-argument.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/configuration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# The default provider configuration; resources that begin with `aws_` will use\n# it as the default, and it can be referenced as `aws`.\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\n# Alternate provider configuration for west coast region; resources can\n# reference this as `aws.west`.\nprovider \"aws\" {\n  alias  = \"west\"\n  region = \"us-west-2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Provider Aliases for Different Provider Configurations in Tests\nDESCRIPTION: Shows how to use provider aliases in tests to switch between different provider configurations, allowing testing with different provider setups within the same test file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"docker\" {\n  # Default docker provider setup\n  host = \"unix:///var/run/docker.sock\"\n}\n\nprovider \"docker\" {\n  # Alternative provider configuration\n  alias = \"socket\"\n  host  = \"tcp://127.0.0.1:2375\"\n}\n\nrun \"sockettest\" {\n  # The docker provider references in this module are replaced with\n  # docker.socket from the main test file.\n  providers = {\n    docker = docker.socket\n  }\n\n  variables {\n    name = \"test\"\n  }\n\n  assert {\n    condition     = docker_container.test.name == \"test\"\n    error_message = \"Invalid container name\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Precondition Check in OpenTofu\nDESCRIPTION: Shows how to implement custom precondition checks within a lifecycle block to validate resource configurations before creation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/lifecycle.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t2.micro\"\n  ami           = \"ami-abc123\"\n\n  lifecycle {\n    # The AMI ID must refer to an AMI that contains an operating system\n    # for the `x86_64` architecture.\n    precondition {\n      condition     = data.aws_ami.example.architecture == \"x86_64\"\n      error_message = \"The selected AMI must be for the x86_64 architecture.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Encryption Method in OpenTofu\nDESCRIPTION: Example configuration for setting up an external command encryption method in OpenTofu. This allows for custom encryption implementations through external programs.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_23\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  encryption {\n    // ...\n    method \"external\" \"my_method\" {\n      encrypt_command = [\"/path/to/encrypt\", \"--param1\", \"--param2\"]\n      decrypt_command = [\"/path/to/decrypt\", \"--param1\", \"--param2\"]\n      keys           = key_provider.my_provider\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Renaming Example in OpenTofu Configuration (HCL)\nDESCRIPTION: Example showing how to rename a resource in OpenTofu configuration by changing the resource identifier from 'worker' to 'helper' while maintaining the same resource type.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n-resource \"packet_device\" \"worker\" {\n+resource \"packet_device\" \"helper\" {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Set Variable for for_each in OpenTofu HCL\nDESCRIPTION: Demonstrates how to define an input variable of type set(string) for use with for_each in a module. This avoids the need for explicit type conversion.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/for_each.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"subnet_ids\" {\n  type = set(string)\n}\n\nresource \"aws_instance\" \"server\" {\n  for_each = var.subnet_ids\n\n  # (and the other arguments as above)\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Postcondition Example in OpenTofu\nDESCRIPTION: Alternative implementation using a postcondition block to validate website status, demonstrating the difference between check blocks and postconditions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/checks/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"http\" \"opentofu_org\" {\n  url = \"https://www.opentofu.org\"\n\n  lifecycle {\n    postcondition {\n        condition = self.status_code == 200\n        error_message = \"${self.url} returned an unhealthy status code\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sensitive Output Value Configuration\nDESCRIPTION: Shows how to mark an output value as sensitive to prevent it from being displayed in CLI output.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/outputs.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"db_password\" {\n  value       = aws_db_instance.db.password\n  description = \"The password for logging in to the database.\"\n  sensitive   = true\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Configuration with OpenTofu CLI\nDESCRIPTION: Use the OpenTofu CLI to generate configuration for resources defined in import blocks that don't exist in the current configuration. The generated HCL is written to a specified output file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/import/generating-configuration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu plan -generate-config-out=generated_resources.tf\n```\n\n----------------------------------------\n\nTITLE: Basic Lifecycle Configuration in OpenTofu\nDESCRIPTION: Demonstrates basic usage of the lifecycle block within a resource block to enable create_before_destroy functionality.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/lifecycle.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"azurerm_resource_group\" \"example\" {\n  # ...\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Line Variable Assignment in OpenTofu\nDESCRIPTION: Examples of specifying variable values using the -var option when running OpenTofu commands for simple strings, lists, and maps.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/variables.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntofu apply -var=\"image_id=ami-abc123\"\ntofu apply -var='image_id_list=[\"ami-abc123\",\"ami-def456\"]' -var=\"instance_type=t2.micro\"\ntofu apply -var='image_id_map={\"us-east-1\":\"ami-abc123\",\"us-east-2\":\"ami-def456\"}'\n```\n\n----------------------------------------\n\nTITLE: Using Key-Value Pairs in For Expression with Map Input in OpenTofu HCL\nDESCRIPTION: This snippet shows how to access both keys and values from a map in a 'for' expression, calculating the combined length of each key and value pair.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/for.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n[for k, v in var.map : length(k) + length(v)]\n```\n\n----------------------------------------\n\nTITLE: Custom Validation for Input Variables in OpenTofu\nDESCRIPTION: Demonstration of adding custom validation rules to an input variable to ensure the value meets specific criteria, such as a valid AMI ID format.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/variables.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type        = string\n  description = \"The id of the machine image (AMI) to use for the server.\"\n\n  validation {\n    condition     = length(var.image_id) > 4 && substr(var.image_id, 0, 4) == \"ami-\"\n    error_message = \"The image_id value must be a valid AMI id, starting with \\\"ami-\\\".\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Version Constraints in HCL for OpenTofu Dependencies\nDESCRIPTION: This snippet demonstrates the syntax for specifying version constraints in OpenTofu configuration. The example shows how to require a version that is at least 1.2.0 but less than 2.0.0, which would allow all 1.x versions that are at least 1.2.0.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/version-constraints.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nversion = \">= 1.2.0, < 2.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu using scoop on Windows\nDESCRIPTION: Command to install OpenTofu using the Scoop package manager for Windows. This requires Scoop to be previously installed on the system.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/windows.mdx#2025-04-16_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nscoop install opentofu\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu using Convenience Script on RPM-based Linux\nDESCRIPTION: This script automatically installs OpenTofu on RPM-based Linux distributions. It sets up the repository and installs the package.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/rpm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n${RpmConvenienceScript}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Array Output Values\nDESCRIPTION: Example demonstrating how to retrieve an output value that contains an array of instance IP addresses.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/output.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shellsession\nCODE:\n```\n$ tofu output instance_ips\ninstance_ips = [\n  \"54.43.114.12\",\n  \"52.122.13.4\",\n  \"52.4.116.53\"\n]\n```\n\n----------------------------------------\n\nTITLE: Using File Provisioner with AWS Instances in OpenTofu\nDESCRIPTION: This example demonstrates various ways to use the file provisioner with an AWS EC2 instance. It shows how to copy individual files, write content directly, and transfer entire directories to the target instance using both relative and absolute paths.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/file.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  # Copies the myapp.conf file to /etc/myapp.conf\n  provisioner \"file\" {\n    source      = \"conf/myapp.conf\"\n    destination = \"/etc/myapp.conf\"\n  }\n\n  # Copies the string in content into /tmp/file.log\n  provisioner \"file\" {\n    content     = \"ami used: ${self.ami}\"\n    destination = \"/tmp/file.log\"\n  }\n\n  # Copies the configs.d folder to /etc/configs.d\n  provisioner \"file\" {\n    source      = \"conf/configs.d\"\n    destination = \"/etc\"\n  }\n\n  # Copies all files and folders in apps/app1 to D:/IIS/webapp1\n  provisioner \"file\" {\n    source      = \"apps/app1/\"\n    destination = \"D:/IIS/webapp1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Backend for OpenTofu State Storage\nDESCRIPTION: This snippet demonstrates how to configure the HTTP backend for OpenTofu state storage. It specifies the address for state operations and separate addresses for locking and unlocking.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/http.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"http\" {\n    address = \"http://myrest.api.com/foo\"\n    lock_address = \"http://myrest.api.com/foo\"\n    unlock_address = \"http://myrest.api.com/foo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating csvdecode with for_each to Create AWS Instances from CSV Data\nDESCRIPTION: This example demonstrates how to use csvdecode with the for_each meta-argument to create multiple AWS instances based on CSV data. The function converts CSV data to a list of objects, which are then transformed into a map using local_id as the unique key.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/csvdecode.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  # We've included this inline to create a complete example, but in practice\n  # this is more likely to be loaded from a file using the \"file\" function.\n  csv_data = <<-CSV\n    local_id,instance_type,ami\n    foo1,t2.micro,ami-54d2a63b\n    foo2,t2.micro,ami-54d2a63b\n    foo3,t2.micro,ami-54d2a63b\n    bar1,m3.large,ami-54d2a63b\n  CSV\n\n  instances = csvdecode(local.csv_data)\n}\n\nresource \"aws_instance\" \"example\" {\n  for_each = { for inst in local.instances : inst.local_id => inst }\n\n  instance_type = each.value.instance_type\n  ami           = each.value.ami\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption in OpenTofu HCL\nDESCRIPTION: Demonstrates the basic structure for configuring encryption in OpenTofu using HCL syntax. It defines the encryption block with key providers and encryption methods.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  encryption {\n    key_provider \"local\" {\n      method \"aes_gcm\" {\n        static_key = \"THISISNOTASECUREPASSPHRASE\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Directive in String Templates in OpenTofu HCL\nDESCRIPTION: A string template using the if/else/endif directive to conditionally include content based on whether var.name is empty, demonstrating conditional logic within strings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/strings.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n\"Hello, %{ if var.name != \"\" }${var.name}%{ else }unnamed%{ endif }!\"\n```\n\n----------------------------------------\n\nTITLE: Variable Validation with Regex Pattern\nDESCRIPTION: Shows how to validate an AWS AMI ID using regex pattern matching with the 'can' function to handle potential regex matching failures gracefully.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"image_id\" {\n  type        = string\n  description = \"The id of the machine image (AMI) to use for the server.\"\n\n  validation {\n    condition     = can(regex(\"^ami-\", var.image_id))\n    error_message = \"The image_id value must be a valid AMI id, starting with \\\"ami-\\\".\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Public Registry Module in OpenTofu HCL\nDESCRIPTION: Shows how to use a module from the Public OpenTofu Registry. The source address format is <NAMESPACE>/<NAME>/<PROVIDER>, and a version constraint can be specified.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"hashicorp/consul/aws\"\n  version = \"0.1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Set Symmetric Difference Example\nDESCRIPTION: Shows how to compute the symmetric difference between two sets using setsubtract and setunion functions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/setsubtract.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nsetunion(setsubtract([\"a\", \"b\", \"c\"], [\"a\", \"c\", \"d\"]), setsubtract([\"a\", \"c\", \"d\"], [\"a\", \"b\", \"c\"]))\ntoset([\n  \"b\",\n  \"d\",\n])\n```\n\n----------------------------------------\n\nTITLE: Module with Sensitive Output Usage\nDESCRIPTION: Demonstrates using sensitive outputs in a module and root configuration, showing how they interact with resource attributes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/outputs.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\n\nmodule \"foo\" {\n  source = \"./mod\"\n}\n\nresource \"test_instance\" \"x\" {\n  some_attribute = module.foo.a # resource attribute references a sensitive output\n}\n\noutput \"out\" {\n  value     = \"xyz\"\n  sensitive = true\n}\n\n# mod/main.tf, our module containing a sensitive output\n\noutput \"a\" {\n  value     = \"secret\"\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: S3 IAM Permissions for OpenTofu State Management\nDESCRIPTION: AWS IAM policy that grants the necessary permissions for OpenTofu to manage state in an S3 bucket, including listing the bucket and getting, putting, and deleting objects.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/s3.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"s3:ListBucket\",\n      \"Resource\": \"arn:aws:s3:::mybucket\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"s3:GetObject\", \"s3:PutObject\", \"s3:DeleteObject\"],\n      \"Resource\": \"arn:aws:s3:::mybucket/path/to/my/key\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu Package on Debian-based Systems\nDESCRIPTION: Commands to update the package cache and install the OpenTofu package from the configured repository. This is the final step in the installation process.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/deb.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n{DebStep4Script}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Backend Integration in HCL\nDESCRIPTION: This snippet demonstrates how to set up a cloud block in the OpenTofu configuration to specify which cloud backend workspaces to use. It shows configuration for organization, hostname, project, and tags.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/cloud/settings.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  cloud {\n    organization = \"my-org\"\n    hostname = \"app.example.org\"\n\n    workspaces {\n      project = \"networking-development\"\n      tags = [\"networking\", \"source:cli\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Boolean with tobool Function in OpenTofu\nDESCRIPTION: Examples demonstrating the usage of tobool function including successful conversions of boolean values, string literals, null values, and error cases for invalid inputs. The function only accepts boolean values, null, and the exact strings \"true\" and \"false\".\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/tobool.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> tobool(true)\ntrue\n> tobool(\"true\")\ntrue\n> tobool(null)\nnull\n> tobool(\"no\")\nError: Invalid function argument\n\nInvalid value for \"v\" parameter: cannot convert \"no\" to bool: only the strings\n\"true\" or \"false\" are allowed.\n\n> tobool(1)\nError: Invalid function argument\n\nInvalid value for \"v\" parameter: cannot convert number to bool.\n```\n\n----------------------------------------\n\nTITLE: Listing OpenTofu Workspaces\nDESCRIPTION: Example showing the output of the tofu workspace list command. The asterisk (*) indicates the current active workspace. The example shows three workspaces: default, development (currently active), and jsmith-test.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/workspace/list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu workspace list\n  default\n* development\n  jsmith-test\n```\n\n----------------------------------------\n\nTITLE: Configuring COS Backend with Assume Role in HCL\nDESCRIPTION: Example configuration for COS backend with assume role functionality, allowing OpenTofu to assume a specific role using the supplied credentials.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/cos.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"cos\" {\n    region = \"ap-guangzhou\"\n    bucket = \"bucket-for-tofu-state-{appid}\"\n    prefix = \"tofu/state\"\n    assume_role {\n      role_arn = \"qcs::cam::uin/xxx:roleName/yyy\"\n      session_name = \"my-session-name\"\n      session_duration = 3600\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HCL Variable Definition File Syntax\nDESCRIPTION: Example of a .tfvars file using HCL syntax to define variable values including a string and a list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/variables.mdx#2025-04-16_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nimage_id = \"ami-abc123\"\navailability_zone_names = [\n  \"us-east-1a\",\n  \"us-west-1c\",\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Splat Expression in OpenTofu HCL\nDESCRIPTION: Demonstrates a basic splat expression to extract the 'id' attribute from all elements in a list. This is equivalent to using a 'for' expression for the same operation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/splat.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvar.list[*].id\n```\n\n----------------------------------------\n\nTITLE: Referencing Input Variables in OpenTofu Resources\nDESCRIPTION: Example of how to access a declared variable within a resource block using the var namespace.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/variables.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t2.micro\"\n  ami           = var.image_id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OSS Backend with TableStore State Locking in OpenTofu\nDESCRIPTION: Basic configuration for storing OpenTofu state in Alibaba Cloud OSS with state locking enabled via TableStore. This requires an existing OSS bucket and TableStore table with a 'LockID' primary key of type String.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/oss.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"oss\" {\n    bucket = \"bucket-for-tofu-state\"\n    prefix   = \"path/mystate\"\n    key   = \"version-1.tfstate\"\n    region = \"cn-beijing\"\n    tablestore_endpoint = \"https://tofu-remote.cn-hangzhou.ots.aliyuncs.com\"\n    tablestore_table = \"statelock\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Source Postcondition Check\nDESCRIPTION: Demonstrates how to add a postcondition to an AWS AMI data source to verify the component tag matches the expected value, ensuring the correct AMI is being used.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_ami\" \"example\" {\n  id = var.aws_ami_id\n\n  lifecycle {\n    postcondition {\n      condition     = self.tags[\"Component\"] == \"nomad-server\"\n      error_message = \"tags[\\\"Component\\\"] must be \\\"nomad-server\\\".\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Block with Splat Expression in OpenTofu HCL\nDESCRIPTION: Illustrates the use of a splat expression in a dynamic block's for_each argument. This example demonstrates how splat expressions can be used with optional input variables to conditionally create nested blocks.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/splat.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"website_setting\" {\n  type = object({\n    index_document = string\n    error_document = string\n  })\n  default = null\n}\n\nresource \"aws_s3_bucket\" \"example\" {\n  # ...\n\n  dynamic \"website\" {\n    for_each = var.website_setting[*]\n    content {\n      index_document = website.value.index_document\n      error_document = website.value.error_document\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Multiple Resources with For_Each in HCL\nDESCRIPTION: Shows how to use for_each in an import block to import multiple resources. This example imports random_id resources based on a variable list of server IDs.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/import/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: HCL\nCODE:\n```\nvariable \"server_ids\" {\n  type = list(string)\n}\n\nresource \"random_id\" \"test_id\" {\n  byte_length = 8\n  count = 2\n}\n\nimport {\n  to = random_id.test_id[tonumber(each.key)]\n  id = each.value\n  for_each = {\n    for idx, item in var.server_ids: idx => item\n  }\n}\n\noutput \"id\" {\n  value = random_id.test_id.*.b64_url\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Local-Exec Provisioner in HCL\nDESCRIPTION: Demonstrates how to add a local-exec provisioner to an AWS instance resource to execute a command locally when the resource is created. Uses the self object to reference the instance's private IP.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/syntax.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo The server's IP address is ${self.private_ip}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Minimal Module Structure in Shell\nDESCRIPTION: This shell command uses the 'tree' utility to display the file structure of a minimal OpenTofu module following the standard structure. It shows the recommended files: README.md, main.tf, variables.tf, and outputs.tf.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/structure.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ tree minimal-module/\n.\n├── README.md\n├── main.tf\n├── variables.tf\n├── outputs.tf\n```\n\n----------------------------------------\n\nTITLE: Flattening Network Structure for Subnet Creation in OpenTofu HCL\nDESCRIPTION: Comprehensive example showing how to use flatten function to transform a nested network structure into a flat list suitable for for_each when creating subnet resources.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/flatten.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  # flatten ensures that this local value is a flat list of objects, rather\n  # than a list of lists of objects.\n  network_subnets = flatten([\n    for network_key, network in var.networks : [\n      for subnet_key, subnet in network.subnets : {\n        network_key = network_key\n        subnet_key  = subnet_key\n        network_id  = aws_vpc.example[network_key].id\n        cidr_block  = subnet.cidr_block\n      }\n    ]\n  ])\n}\n\nresource \"aws_subnet\" \"example\" {\n  # local.network_subnets is a list, so we must now project it into a map\n  # where each key is unique. We'll combine the network and subnet keys to\n  # produce a single unique key per instance.\n  for_each = {\n    for subnet in local.network_subnets : \"${subnet.network_key}.${subnet.subnet_key}\" => subnet\n  }\n\n  vpc_id            = each.value.network_id\n  availability_zone = each.value.subnet_key\n  cidr_block        = each.value.cidr_block\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Docker Container with Module Override\nDESCRIPTION: This test file shows how to test a Docker container by loading a test-harness module that creates an HTTP data source to check if the Nginx webserver is responding properly.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nrun \"nginx\" {\n  command = apply\n\n  variables {\n    container_name = \"nginx\"\n    container_port = 8080\n  }\n\n  module {\n    source = \"./test-harness\"\n  }\n\n  assert {\n    condition     = data.http.nginx.status_code == 200\n    error_message = \"Status code is not 200\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling For_Each for a Resource in OpenTofu HCL\nDESCRIPTION: Demonstrates how to convert a single-instance resource to use 'for_each' and add a 'moved' block to preserve the existing object.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  instances = tomap({\n    big = {\n      instance_type = \"m3.large\"\n    }\n    small = {\n      instance_type = \"t2.medium\"\n    }\n  })\n}\n\nresource \"aws_instance\" \"a\" {\n  for_each = local.instances\n\n  instance_type = each.value.instance_type\n  # (other resource-type-specific configuration)\n}\n\nmoved {\n  from = aws_instance.a\n  to   = aws_instance.a[\"small\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OCI Mirror Provider Installation in OpenTofu\nDESCRIPTION: Configuration block that specifies how to use an OCI registry as a provider mirror. The example demonstrates setting up a mirror for providers from registry.opentofu.org using a repository template and include pattern.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/oci_registries/provider-mirror.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nprovider_installation {\n  oci_mirror {\n    repository_template = \"example.com/opentofu-providers/${namespace}/${type}\"\n    include             = [\"registry.opentofu.org/*/*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables with local-exec Provisioner in OpenTofu HCL\nDESCRIPTION: This example shows how to use environment variables with the local-exec provisioner. It sets custom environment variables and uses them in the executed command.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo $FOO $BAR $BAZ >> env_vars.txt\"\n\n    environment = {\n      FOO = \"bar\"\n      BAR = 1\n      BAZ = \"true\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of timeadd Function Use in OpenTofu HCL\nDESCRIPTION: Shows a practical example of the timeadd function adding 10 minutes to a timestamp. The input timestamp is in RFC 3339 format, and the function returns a new timestamp with the duration added.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/timeadd.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> timeadd(\"2017-11-22T00:00:00Z\", \"10m\")\n2017-11-22T00:10:00Z\n```\n\n----------------------------------------\n\nTITLE: Explicit Type Conversion in Conditionals\nDESCRIPTION: Example demonstrating explicit type conversion using the tostring function to make type handling clearer in conditional expressions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/conditionals.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvar.example ? tostring(12) : \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of local-exec Provisioner in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates the basic usage of the local-exec provisioner within an AWS instance resource. It executes a command to append the instance's private IP to a local file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo ${self.private_ip} >> private_ips.txt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Composition Pattern in OpenTofu\nDESCRIPTION: Shows how to compose modules using a flat hierarchy, demonstrating dependency injection between network and consul cluster modules.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"network\" {\n  source = \"./modules/aws-network\"\n\n  base_cidr_block = \"10.0.0.0/8\"\n}\n\nmodule \"consul_cluster\" {\n  source = \"./modules/aws-consul-cluster\"\n\n  vpc_id     = module.network.vpc_id\n  subnet_ids = module.network.subnet_ids\n}\n```\n\n----------------------------------------\n\nTITLE: Using tofu destroy as an alias for apply -destroy in OpenTofu\nDESCRIPTION: The `tofu destroy` command is an alias for `tofu apply -destroy`, which destroys all remote objects managed by the OpenTofu configuration. This is useful for cleaning up ephemeral infrastructure in development environments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/destroy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu apply -destroy\n```\n\n----------------------------------------\n\nTITLE: Using Merge Function for Optional Arguments in Module Input in HCL\nDESCRIPTION: Demonstrates a pattern for handling optional arguments when creating a reusable module. The merge function is used to populate any attributes the user didn't explicitly set.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/attr-as-blocks.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nexample = [\n  for ex in var.examples: merge({\n    foo = null # (or any other suitable default value)\n  }, ex)\n]\n```\n\n----------------------------------------\n\nTITLE: Using length function with different data types in OpenTofu\nDESCRIPTION: Examples showing how the length function works with empty lists, populated lists, maps, and strings. The function returns the number of elements in collections or the number of characters in strings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/length.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> length([])\n0\n> length([\"a\", \"b\"])\n2\n> length({\"a\" = \"b\"})\n1\n> length(\"hello\")\n5\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Provider in OpenTofu Configuration\nDESCRIPTION: A Terraform configuration block that specifies a required in-house provider with a custom source address and version constraint. This example uses a placeholder domain for an internal provider.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/requirements.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    mycloud = {\n      source  = \"tofu.example.com/examplecorp/ourcloud\"\n      version = \">= 1.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Import Block in HCL\nDESCRIPTION: Add an import block to your OpenTofu configuration to specify the resource to be imported. This block includes the resource address and import ID.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/import/generating-configuration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nimport {\n  to = aws_iot_thing.bar\n  id = \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu using the Convenience Script on Debian-based Systems\nDESCRIPTION: A convenience script that automates the installation process of OpenTofu on Debian-based Linux systems. This script handles all the necessary steps including repository setup and package installation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/deb.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{DebConvenienceScript}\n```\n\n----------------------------------------\n\nTITLE: Using GitHub SSH URL as Module Source in OpenTofu HCL\nDESCRIPTION: Demonstrates how to use a GitHub SSH URL as a module source for cloning over SSH instead of HTTPS.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"git@github.com:hashicorp/example.git\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Non-Default Provider for Data Source in OpenTofu HCL\nDESCRIPTION: Example of using the provider meta-argument to specify a non-default provider configuration for a data source.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/data-sources/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_ami\" \"web\" {\n  provider = aws.west\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Attributes in OpenTofu\nDESCRIPTION: Demonstrates the syntax for referencing resource attributes within OpenTofu configurations. This pattern allows accessing both user-specified and read-only attributes of resources.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/behavior.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n<RESOURCE TYPE>.<NAME>.<ATTRIBUTE>\n```\n\n----------------------------------------\n\nTITLE: Running tofu providers lock with Multiple Platforms\nDESCRIPTION: This command runs 'tofu providers lock' specifying three target platforms: 64-bit Windows, macOS, and Linux. It ensures that providers support these platforms and pre-populates the lock file with necessary checksums.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/providers/lock.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu providers lock \\\n  -platform=windows_amd64 \\ # 64-bit Windows\n  -platform=darwin_amd64 \\  # 64-bit macOS\n  -platform=linux_amd64     # 64-bit Linux\n```\n\n----------------------------------------\n\nTITLE: Basic Regex Function Syntax in HCL\nDESCRIPTION: Basic syntax for the regex function that takes a pattern and string as arguments. The function returns either a single string, a list of captured substrings, or a map of named captures depending on the capture groups used.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/regex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nregex(pattern, string)\n```\n\n----------------------------------------\n\nTITLE: Defining a Map in HCL\nDESCRIPTION: This snippet demonstrates how to define a map (object) in HashiCorp Configuration Language (HCL). It shows the syntax for key-value pairs within curly braces, where keys are strings and values can be of any type.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/types.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n{\n  name = \"John\"\n  age  = 52\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Values in Resource Blocks\nDESCRIPTION: Demonstrates how to reference local values within resource configurations using the local.name syntax.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/locals.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  # ...\n\n  tags = local.common_tags\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Attribute-only Splat Expression in OpenTofu HCL\nDESCRIPTION: Shows the older, legacy form of splat expressions using '.*' syntax. This form has different behavior compared to the modern '[*]' syntax and is not recommended for new configurations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/splat.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvar.list.*.interfaces[0].name\n```\n\n----------------------------------------\n\nTITLE: Variable Type Normalization with try Function in HCL\nDESCRIPTION: Demonstrates using try function to normalize variable input that could be either a string or a list into a consistent list format.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/try.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"example\" {\n  type = any\n}\n\nlocals {\n  example = try(\n    [tostring(var.example)],\n    tolist(var.example),\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using timecmp in Resource Lifecycle Postcondition\nDESCRIPTION: Example of using timecmp in a resource postcondition to verify that a TLS certificate doesn't expire within 30 days of apply.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/timecmp.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n  lifecycle {\n    postcondition {\n      condition     = timecmp(timestamp(), timeadd(self.expiration_timestamp, \"-720h\")) < 0\n      error_message = \"Certificate will expire in less than 30 days.\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Format Function with Simple Verbs in OpenTofu HCL\nDESCRIPTION: Examples of using the format function with simple verbs like %s for strings and %d for integers. It also compares format function usage with template interpolation syntax.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/format.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> format(\"Hello, %s!\", \"Ander\")\nHello, Ander!\n> format(\"There are %d lights\", 4)\nThere are 4 lights\n\n> format(\"Hello, %s!\", var.name)\nHello, Valentina!\n> \"Hello, ${var.name}!\"\nHello, Valentina!\n```\n\n----------------------------------------\n\nTITLE: Provider Requirements Configuration\nDESCRIPTION: Demonstrates how to specify required providers with version constraints and source addresses in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      version = \">= 2.7.0\"\n      source = \"hashicorp/aws\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using formatlist with Mixed Arguments in OpenTofu HCL\nDESCRIPTION: Shows how to use formatlist with both a string argument and a list argument to create a formatted list of greetings with a constant prefix.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/formatlist.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> formatlist(\"%s, %s!\", \"Salutations\", [\"Valentina\", \"Ander\", \"Olivia\", \"Sam\"])\n[\n  \"Salutations, Valentina!\",\n  \"Salutations, Ander!\",\n  \"Salutations, Olivia!\",\n  \"Salutations, Sam!\",\n]\n```\n\n----------------------------------------\n\nTITLE: External Key Provider Input JSON Format\nDESCRIPTION: JSON input format that OpenTofu sends to external key providers. This can be null for encryption or contain metadata for decryption operations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": \"base64-encoded-metadata\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstration of sensitive function with different data types in OpenTofu\nDESCRIPTION: Examples showing how the sensitive function works with different data types (number, string, list). All values are displayed as '(sensitive value)' in CLI output regardless of the underlying data type.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/sensitive.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> sensitive(1)\n(sensitive value)\n> sensitive(\"hello\")\n(sensitive value)\n> sensitive([])\n(sensitive value)\n```\n\n----------------------------------------\n\nTITLE: Child Module Resource Using Inherited Provider in OpenTofu\nDESCRIPTION: This snippet shows a child module that uses the AWS provider inherited from its parent module without additional configuration. The resource automatically uses the provider configuration from the parent.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = \"provider-inherit-example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Two Maps in OpenTofu HCL\nDESCRIPTION: This example demonstrates merging two maps with overlapping keys. The second map's values take precedence for duplicate keys.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/merge.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmerge({a=\"b\", c=\"d\"}, {e=\"f\", c=\"z\"})\n```\n\n----------------------------------------\n\nTITLE: Grouping Results in For Expression Using Ellipsis Operator in OpenTofu HCL\nDESCRIPTION: This example shows how to use the grouping mode with the ellipsis operator (...) to create a map where multiple values can be assigned to the same key, grouping users by their roles.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/for.mdx#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"users\" {\n  type = map(object({\n    role = string\n  }))\n}\n\nlocals {\n  users_by_role = {\n    for name, user in var.users : user.role => name...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Run Block Outputs to Variables in OpenTofu Tests\nDESCRIPTION: Demonstrates how to use outputs from a previous run block as input variables for subsequent test blocks, useful for creating test dependencies and passing values between test cases.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nvariables {\n  name = \"test-bucket\"\n}\n\nrun \"create_bucket\" {\n  variables {\n    name = var.name\n  }\n\n  # Load and apply the configuration in this directory.\n  assert {\n    condition = module.aws_s3_bucket.test_bucket.bucket == var.name\n    error_message = \"Invalid bucket name in create_bucket test\"\n  }\n}\n\nrun \"ensure_bucket_exists\" {\n  # Variables can be taken from the outputs of a previously executed run block\n  variables {\n    name = run.create_bucket.name\n  }\n\n  assert {\n    condition = module.aws_s3_bucket.test_bucket.bucket == var.name\n    error_message = \"Invalid bucket name in ensure_bucket_exists test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: External Key Provider Output JSON Format\nDESCRIPTION: JSON output format that external key providers must return to OpenTofu. This includes encryption/decryption keys and optional metadata to be stored with encrypted data.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"base64-encoded-key\",\n  \"metadata\": \"base64-encoded-metadata\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nested CIDR Subnets with For Expression\nDESCRIPTION: Illustrates advanced usage combining nested cidrsubnets calls with for expressions to create grouped network address blocks.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/cidrsubnets.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> [for cidr_block in cidrsubnets(\"10.0.0.0/8\", 8, 8, 8, 8) : cidrsubnets(cidr_block, 4, 4)]\n[\n  [\n    \"10.0.0.0/20\",\n    \"10.0.16.0/20\",\n  ],\n  [\n    \"10.1.0.0/20\",\n    \"10.1.16.0/20\",\n  ],\n  [\n    \"10.2.0.0/20\",\n    \"10.2.16.0/20\",\n  ],\n  [\n    \"10.3.0.0/20\",\n    \"10.3.16.0/20\",\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Testing Resource Lifecycle Failures in OpenTofu Tests\nDESCRIPTION: Demonstrates how to test expected failures in resource configurations using expect_failures with lifecycle conditions, ensuring that health checks and other validation conditions work as intended.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nrun \"validate_health_check\" {\n  command = \"plan\"\n\n  variables {\n    name = \"test-service\"\n    port = 8080\n    expected_endpoint = \"/health\"\n    # Use a different endpoint than what is expected\n    implementation_endpoint = \"/ping\"\n  }\n\n  expect_failures = [\n    # we expect the below healthcheck to fail as we're using the wrong endpoint.\n    docker_container.service.healthcheck,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance with Resource Configuration in HCL\nDESCRIPTION: Shows how to add a resource block that corresponds to an import block. The resource address in the resource block must match the 'to' argument in the import block.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/import/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nimport {\n  to = aws_instance.example\n  id = \"i-abcd1234\"\n}\n\nresource \"aws_instance\" \"example\" {\n  name = \"renderer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Template File Using List Variables in OpenTofu\nDESCRIPTION: Example of a template file (backends.tftpl) that iterates through a list of IP addresses to generate backend configurations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n%{ for addr in ip_addrs ~}\nbackend ${addr}:${port}\n%{ endfor ~}\n```\n\n----------------------------------------\n\nTITLE: Normalizing YAML Data with try Function in HCL\nDESCRIPTION: Example showing how to use try function to normalize data retrieved from YAML file, ensuring consistent data structure by providing default values for potentially missing attributes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/try.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  raw_value = yamldecode(file(\"${path.module}/example.yaml\"))\n  normalized_value = {\n    name   = tostring(try(local.raw_value.name, null))\n    groups = try(local.raw_value.groups, [])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using filesha256 Function in OpenTofu\nDESCRIPTION: The filesha256 function computes the SHA256 hash of the contents of a given file and encodes it as hex. It is a variant of sha256 that works with file contents rather than literal strings, and can be used with binary files unlike the file function.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/filesha256.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `filesha256` Function\n\n`filesha256` is a variant of [`sha256`](../../language/functions/sha256.mdx)\nthat hashes the contents of a given file rather than a literal string.\n\nThis is similar to `sha256(file(filename))`, but\nbecause [`file`](../../language/functions/file.mdx) accepts only UTF-8 text it cannot be used to\ncreate hashes for binary files.\n```\n\n----------------------------------------\n\nTITLE: Rendering a List-based Template in OpenTofu\nDESCRIPTION: Example of how to use the templatefile function with a list of IP addresses.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntemplatefile(\"${path.module}/backends.tftpl\", { port = 8080, ip_addrs = [\"10.0.0.1\", \"10.0.0.2\"] })\n```\n\n----------------------------------------\n\nTITLE: Using tonumber Function in OpenTofu\nDESCRIPTION: Examples demonstrating the usage of tonumber function for converting different value types to numbers. Shows successful conversions with numbers, numeric strings, and null values, as well as an error case with invalid input.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/tonumber.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> tonumber(1)\n1\n> tonumber(\"1\")\n1\n> tonumber(null)\nnull\n> tonumber(\"no\")\nError: Invalid function argument\n\nInvalid value for \"v\" parameter: cannot convert \"no\" to number: string must be\na decimal representation of a number.\n```\n\n----------------------------------------\n\nTITLE: Adding count to a Module Call with moved Block in HCL\nDESCRIPTION: Demonstrates how to add a count meta-argument to an existing module while preserving the original resources by using a moved block to map the original module to a specific instance in the new structure.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"a\" {\n  source = \"../modules/example\"\n  count  = 3\n\n  # (module arguments)\n}\n\nmoved {\n  from = module.a\n  to   = module.a[2]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Private Registry Module in OpenTofu HCL\nDESCRIPTION: Demonstrates how to reference a module from a private registry. The source address is prefixed with the registry's hostname.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"app.terraform.io/example-corp/k8s-cluster/azurerm\"\n  version = \"1.1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Whitespace Control in Template Directives in OpenTofu HCL\nDESCRIPTION: A heredoc string with template directives that use the tilde (~) strip markers to control whitespace, removing newlines after directives for cleaner output formatting.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/strings.mdx#2025-04-16_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n<<EOT\n%{ for ip in aws_instance.example[*].private_ip ~}\nserver ${ip}\n%{ endfor ~}\nEOT\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Overrides for Provider Developers\nDESCRIPTION: This snippet demonstrates how to configure development overrides for provider development. It allows developers to use a local development build of a provider instead of a published version, bypassing version and checksum verifications.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/config-file.mdx#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nprovider_installation {\n\n  # Use /home/developer/tmp/terraform-null as an overridden package directory\n  # for the hashicorp/null provider. This disables the version and checksum\n  # verifications for this provider and forces OpenTofu to look for the\n  # null provider plugin in the given directory.\n  dev_overrides {\n    \"hashicorp/null\" = \"/home/developer/tmp/terraform-null\"\n  }\n\n  # For all other providers, install them directly from their origin provider\n  # registries as normal. If you omit this, OpenTofu will _only_ use\n  # the dev_overrides block, and so no other providers will be available.\n  direct {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Change Ignoring in OpenTofu\nDESCRIPTION: Shows how to use ignore_changes within a lifecycle block to prevent OpenTofu from updating specific resource attributes during plan execution.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/lifecycle.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  # ...\n\n  lifecycle {\n    ignore_changes = [\n      # Ignore changes to tags, e.g. because a management agent\n      # updates these based on some ruleset managed elsewhere.\n      tags,\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Keys from a Map in OpenTofu\nDESCRIPTION: This example demonstrates how to use the keys function to extract a sorted list of keys from a map. The keys are returned in lexicographical order for consistent results.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/keys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nkeys({a=1, c=2, d=3})\n```\n\n----------------------------------------\n\nTITLE: Enabling Encryption for Existing Unencrypted OpenTofu Projects\nDESCRIPTION: Shows how to configure encryption for an existing OpenTofu project with unencrypted state, using a fallback to the 'unencrypted' method.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  encryption {\n    key_provider \"local\" {\n      method \"aes_gcm\" {\n        static_key = \"THISISNOTASECUREPASSPHRASE\"\n      }\n    }\n    fallback {\n      key_provider \"local\" {\n        method \"unencrypted\" {}\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using setunion Function with Multiple Sets in HCL\nDESCRIPTION: This example demonstrates how to use the setunion function with multiple sets in OpenTofu. It combines three sets and returns a single set with all unique elements.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/setunion.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> setunion([\"a\", \"b\"], [\"b\", \"c\"], [\"d\"])\n[\n  \"d\",\n  \"b\",\n  \"c\",\n  \"a\",\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements in For Expression in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates using the 'if' clause within a 'for' expression to filter elements, only including non-empty strings in the resulting tuple.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/for.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n[for s in var.list : upper(s) if s != \"\"]\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Expressions with Attribute Syntax in HCL\nDESCRIPTION: Illustrates how to use attribute syntax to assign arbitrary dynamic expressions. This example uses a for expression to generate a list of objects based on a variable.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/attr-as-blocks.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nexample = [\n  for name in var.names: {\n    foo = name\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using Variable Files with Init\nDESCRIPTION: Shows how to provide multiple input variables using a variable definitions file when initializing the working directory.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/init.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntofu init -var-file=FILENAME\n```\n\n----------------------------------------\n\nTITLE: Azure Backend Configuration with Access Key\nDESCRIPTION: Configuration for Azure backend using Storage Account Access Key authentication.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/azurerm.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    storage_account_name = \"abcd1234\"\n    container_name       = \"tfstate\"\n    key                  = \"prod.terraform.tfstate\"\n    access_key = \"abcdefghijklmnopqrstuvwxyz0123456789...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional with Automatic Type Conversion in OpenTofu\nDESCRIPTION: Example showing how OpenTofu handles mixed types in conditional expressions by automatically converting numbers to strings when needed.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/conditionals.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvar.example ? 12 : \"hello\"\n```\n\n----------------------------------------\n\nTITLE: Using Index in For Expression with List Input in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates using the index position along with values when iterating through a list, creating a formatted string for each element.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/for.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n[for i, v in var.list : \"${i} is ${v}\"]\n```\n\n----------------------------------------\n\nTITLE: Calculating Host IP Addresses with cidrhost Function in HCL\nDESCRIPTION: The cidrhost function takes a CIDR prefix and a host number as arguments. It returns a full host IP address within the given network. The function works with both IPv4 and IPv6 addresses.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/cidrhost.mdx#2025-04-16_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ncidrhost(prefix, hostnum)\n```\n\n----------------------------------------\n\nTITLE: Executing Scripts with Arguments using file and remote-exec Provisioners\nDESCRIPTION: Example showing how to pass arguments to scripts by first transferring the script file to the remote resource with the file provisioner, then executing it with arguments using remote-exec provisioner.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/remote-exec.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"file\" {\n    source      = \"script.sh\"\n    destination = \"/tmp/script.sh\"\n  }\n\n  provisioner \"remote-exec\" {\n    inline = [\n      \"chmod +x /tmp/script.sh\",\n      \"/tmp/script.sh args\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Providers for Testing in OpenTofu\nDESCRIPTION: Demonstrates how to use mock_provider blocks to replace actual provider implementations with mocked versions, allowing tests to run without real infrastructure while still testing configuration logic.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nmock_provider \"aws\" {\n  # Mocked version of AWS provider, with defaults for the S3 bucket\n  mock_resource \"aws_s3_bucket\" {\n    defaults = {\n      hosted_zone_id   = \"Z3BJ6K6RIION7M\"\n      region           = \"us-west-2\"\n      website_endpoint = \"s3-website-us-west-2.amazonaws.com\"\n    }\n  }\n}\n\nrun \"validate_bucket\" {\n  command = \"plan\"\n\n  variables {\n    bucket_name = \"test-bucket\"\n  }\n\n  assert {\n    condition     = aws_s3_bucket.test_bucket.bucket == var.bucket_name\n    error_message = \"Incorrect bucket name\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single and Multiple Workspaces with Remote Backend in HCL\nDESCRIPTION: Example HCL configuration showing how to set up the remote backend with either a single workspace or multiple workspaces using the prefix option.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/remote.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Using a single workspace:\nterraform {\n  backend \"remote\" {\n    hostname = \"app.example.io\"\n    organization = \"company\"\n\n    workspaces {\n      name = \"my-app-prod\"\n    }\n  }\n}\n\n# Using multiple workspaces:\nterraform {\n  backend \"remote\" {\n    hostname = \"app.example.io\"\n    organization = \"company\"\n\n    workspaces {\n      prefix = \"my-app-\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple OCI Provider Mirrors in HCL\nDESCRIPTION: Example configuration showing how to set up multiple OCI mirrors for different provider sources with exclusions for direct installation. Uses repository templates to map provider addresses to OCI paths.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/4-providers.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nprovider_installation {\n  oci_mirror {\n    repository_template = \"example.com/examplenet-mirror/${namespace}-${type}\"\n    include             = [\"example.net/*/*\"]\n  }\n  oci_mirror {\n    repository_template = \"example.com/exampleorg-mirror/${namespace}-${type}\"\n    include             = [\"example.org/*/*\"]\n  }\n  direct {\n    exclude = [\"example.net/*/*\", \"example.org/*/*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Moved Block in OpenTofu HCL\nDESCRIPTION: Demonstrates the basic syntax for a 'moved' block in OpenTofu, which records that a resource has been renamed from 'aws_instance.a' to 'aws_instance.b'.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmoved {\n  from = aws_instance.a\n  to   = aws_instance.b\n}\n```\n\n----------------------------------------\n\nTITLE: Moving a Resource in State with Command Line (Shell)\nDESCRIPTION: Shell command to move a resource in OpenTofu state from one address to another, allowing for resource renaming without destroying and recreating the infrastructure.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntofu state mv packet_device.worker packet_device.helper\n```\n\n----------------------------------------\n\nTITLE: Azure Backend Configuration with MSI\nDESCRIPTION: Configuration for Azure backend using Managed Service Identity (MSI) authentication including subscription and tenant IDs.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/azurerm.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    resource_group_name  = \"StorageAccount-ResourceGroup\"\n    storage_account_name = \"abcd1234\"\n    container_name       = \"tfstate\"\n    key                  = \"prod.terraform.tfstate\"\n    use_msi              = true\n    subscription_id      = \"00000000-0000-0000-0000-000000000000\"\n    tenant_id            = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using filebase64sha512 Function in OpenTofu\nDESCRIPTION: The filebase64sha512 function computes the SHA512 hash of a file's contents and encodes it with Base64. It can handle binary files, unlike the file function which is limited to UTF-8 text.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/filebase64sha512.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `filebase64sha512` Function\n\n`filebase64sha512` is a variant of [`base64sha512`](../../language/functions/base64sha512.mdx)\nthat hashes the contents of a given file rather than a literal string.\n\nThis is similar to `base64sha512(file(filename))`, but\nbecause [`file`](../../language/functions/file.mdx) accepts only UTF-8 text it cannot be used to\ncreate hashes for binary files.\n```\n\n----------------------------------------\n\nTITLE: Configuring Operation Timeouts for AWS Database Instance in OpenTofu\nDESCRIPTION: This code snippet shows how to configure custom timeouts for specific operations on an AWS database instance resource. It sets longer timeout durations for create and delete operations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/syntax.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_db_instance\" \"example\" {\n  # ...\n\n  timeouts {\n    create = \"60m\"\n    delete = \"2h\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PowerShell Interpreter with local-exec Provisioner in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates the use of the local-exec provisioner with a PowerShell interpreter. It executes a PowerShell command to write the current date to a file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"terraform_data\" \"example2\" {\n  provisioner \"local-exec\" {\n    command = \"Get-Date > completed.txt\"\n    interpreter = [\"PowerShell\", \"-Command\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Init with Module Source\nDESCRIPTION: Initializes a working directory by copying a configuration from a module source. This allows creating a new configuration based on an existing module or example.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/init.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntofu init -from-module=MODULE-SOURCE\n```\n\n----------------------------------------\n\nTITLE: Using anytrue Function in OpenTofu HCL\nDESCRIPTION: The anytrue function accepts a list as its parameter and returns true if any element in the list is true or \"true\". It returns false if the collection is empty.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/anytrue.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nanytrue(list)\n```\n\n----------------------------------------\n\nTITLE: Complex Splat Expression in OpenTofu HCL\nDESCRIPTION: Shows a more complex splat expression that accesses nested attributes and indexes from a list of complex types. This extracts the 'name' attribute from the first interface of each element in the list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/splat.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvar.list[*].interfaces[0].name\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple AWS Instances with For_Each in OpenTofu\nDESCRIPTION: This HCL snippet demonstrates how to create multiple AWS EC2 instances using the for_each meta-argument. It creates instances based on a map of key-value pairs.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/state/resource-addressing.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n  for_each = {\n    \"tofu\": \"value1\",\n    \"resource\":  \"value2\",\n    \"indexing\":  \"value3\",\n    \"example\":   \"value4\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating contains Function with Examples in OpenTofu HCL\nDESCRIPTION: Examples of the contains function usage in OpenTofu, showing a case where the value is found in the list (returning true) and a case where the value is not found (returning false).\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/contains.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> contains([\"a\", \"b\", \"c\"], \"a\")\ntrue\n> contains([\"a\", \"b\", \"c\"], \"d\")\nfalse\n```\n\n----------------------------------------\n\nTITLE: IPv6 CIDR Subnets Example\nDESCRIPTION: Shows how to use cidrsubnets with an IPv6 prefix to create multiple subnets with different prefix lengths.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/cidrsubnets.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> cidrsubnets(\"fd00:fd12:3456:7890::/56\", 16, 16, 16, 32)\n[\n  \"fd00:fd12:3456:7800::/72\",\n  \"fd00:fd12:3456:7800:100::/72\",\n  \"fd00:fd12:3456:7800:200::/72\",\n  \"fd00:fd12:3456:7800:300::/88\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using issensitive to Separate Sensitive and Non-sensitive Values in OpenTofu HCL\nDESCRIPTION: This example demonstrates how to use the issensitive function to separate sensitive from non-sensitive environment variables in a map. The code defines a variable that may contain both types of values and uses list comprehensions with the issensitive function to filter them into separate collections.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/issensitive.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"environment_variables\" {\n  description = \"A list of environment variables that may contain both sensitive and non-sensitive values\"\n  type        = map(string)\n  sensitive   = true\n}\n\nlocals {\n  sensitive_variables = [for key, value in var.environment_variables: key if issensitive(value)]\n  nonsensitive_variables = [for key, value in var.environment_variables: key if !issensitive(value)]\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Provisioners Example\nDESCRIPTION: Illustrates how to define multiple provisioners within a single resource. The provisioners are executed in the order they are defined in the configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/syntax.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command = \"echo first\"\n  }\n\n  provisioner \"local-exec\" {\n    command = \"echo second\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Backend in OpenTofu\nDESCRIPTION: Example configuration for setting up Consul as a backend for OpenTofu state storage. Demonstrates basic setup with address, scheme, and path settings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/consul.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"consul\" {\n    address = \"consul.example.com\"\n    scheme  = \"https\"\n    path    = \"full/path\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Backend with Web Identity Token\nDESCRIPTION: Configuration example showing how to set up an S3 backend with assume_role_with_web_identity authentication. This allows OpenTofu to assume an IAM role using a web identity token for authentication when accessing the S3 bucket for state storage.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/s3.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    bucket = \"mybucket\"\n    key    = \"my/key.tfstate\"\n    region = \"us-east-1\"\n\n    assume_role_with_web_identity = {\n      role_arn           = \"arn:aws:iam::ACCOUNT-ID:role/Opentofu\"\n      web_identity_token = \"<token value>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single OCI Provider Mirror for OpenTofu Registry\nDESCRIPTION: Configuration example for mirroring all providers from registry.opentofu.org to a private OCI registry using a standardized repository naming scheme.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/4-providers.md#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider_installation {\n  oci_mirror {\n    repository_template = \"example.com/opentofu-provider-mirror/${namespace}_${type}\"\n    include             = [\"registry.opentofu.org/*/*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IPv4 CIDR Subnets Example\nDESCRIPTION: Demonstrates using cidrsubnets with an IPv4 prefix to generate multiple subnets of varying sizes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/cidrsubnets.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> cidrsubnets(\"10.1.0.0/16\", 4, 4, 8, 4)\n[\n  \"10.1.0.0/20\",\n  \"10.1.16.0/20\",\n  \"10.1.32.0/24\",\n  \"10.1.48.0/20\",\n]\n```\n\n----------------------------------------\n\nTITLE: OpenTofu File Extension Examples\nDESCRIPTION: Example of OpenTofu file extension precedence showing that .tofu files take priority over .tf files when both exist with the same base name.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/files/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfoo.tf\nfoo.tofu\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Blocks with Logical Keys in HCL\nDESCRIPTION: Hypothetical example showing how to define nested blocks with logical keys within a resource, which can be referenced using index syntax in OpenTofu expressions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/references.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n  device \"foo\" {\n    size = 2\n  }\n  device \"bar\" {\n    size = 4\n  }\n```\n\n----------------------------------------\n\nTITLE: Parsing Integers with Different Bases in OpenTofu\nDESCRIPTION: Examples demonstrating the parseint function usage with various bases including decimal (base 10), hexadecimal (base 16), binary (base 2), and base 62. The function supports parsing both positive and negative numbers and throws errors for invalid inputs.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/parseint.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> parseint(\"100\", 10)\n100\n\n> parseint(\"FF\", 16)\n255\n\n> parseint(\"-10\", 16)\n-16\n\n> parseint(\"1011111011101111\", 2)\n48879\n\n> parseint(\"aA\", 62)\n656\n\n> parseint(\"12\", 2)\n\nError: Invalid function argument\n\nInvalid value for \"number\" parameter: cannot parse \"12\" as a base 2 integer.\n```\n\n----------------------------------------\n\nTITLE: Coalesce Type Conversion Examples\nDESCRIPTION: Illustrates type conversion behavior when using coalesce with mixed types, including successful conversions and error cases.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/coalesce.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> coalesce(1, \"hello\")\n\"1\"\n> coalesce(true, \"hello\")\n\"true\"\n> coalesce({}, \"hello\")\n\nError: Error in function call\n\nCall to function \"coalesce\" failed: all arguments must have the same type.\n```\n\n----------------------------------------\n\nTITLE: Including Workspace Name in Resource Tags in OpenTofu HCL\nDESCRIPTION: This snippet shows how to incorporate the workspace name into resource tags. It sets a 'Name' tag that includes the workspace name, making it easy to identify which workspace a resource belongs to.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/workspaces.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  tags = {\n    Name = \"web - ${terraform.workspace}\"\n  }\n\n  # ... other arguments\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote State Data Source for COS Backend in HCL\nDESCRIPTION: Example of how to configure a terraform_remote_state data source to access state stored in a Tencent Cloud Object Storage (COS) backend from another configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/cos.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"cos\"\n\n  config = {\n    region = \"ap-guangzhou\"\n    bucket = \"bucket-for-tofu-state-1258798060\"\n    prefix = \"tofu/state\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using cidrcontains Function in OpenTofu\nDESCRIPTION: Examples of using the cidrcontains function to check if IP addresses or CIDR ranges are contained within a specified network prefix. The function returns true if the second argument is contained within the first argument's network range.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/cidrcontains.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> cidrcontains(\"192.168.2.0/20\", \"192.168.2.1\")\ntrue\n> cidrcontains(\"192.168.2.0/20\", \"192.168.2.0/22\")\ntrue\n> cidrcontains(\"192.168.2.0/20\", \"192.126.2.1\")\nfalse\n> cidrcontains(\"192.168.2.0/20\", \"192.126.2.0/18\")\nfalse\n> cidrcontains(\"fe80::/48\", \"fe80::1\")\ntrue\n> cidrcontains(\"fe80::/48\", \"fe81::1\")\nfalse\n```\n\n----------------------------------------\n\nTITLE: Examples of Using cidrhost Function in HCL\nDESCRIPTION: These examples demonstrate the usage of the cidrhost function with different CIDR prefixes and host numbers for both IPv4 and IPv6 addresses.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/cidrhost.mdx#2025-04-16_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\n> cidrhost(\"10.12.112.0/20\", 16)\n10.12.112.16\n> cidrhost(\"10.12.112.0/20\", 268)\n10.12.113.12\n> cidrhost(\"fd00:fd12:3456:7890:00a2::/72\", 34)\nfd00:fd12:3456:7890::22\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Role Assumption in HCL\nDESCRIPTION: Example demonstrating how to configure IAM role assumption in the backend configuration using the assume_role block. Shows setting the role ARN for cross-account access.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/s3.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    bucket = \"mybucket\"\n    key    = \"my/key.tfstate\"\n    region = \"us-east-1\"\n    assume_role = {\n      role_arn = \"arn:aws:iam::ACCOUNT-ID:role/Opentofu\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioner with Failure Handling\nDESCRIPTION: Demonstrates how to configure failure behavior for a provisioner using the on_failure setting. This example shows continuing execution even if the provisioner fails.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/syntax.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    command    = \"echo The server's IP address is ${self.private_ip}\"\n    on_failure = continue\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Integration in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates how to set up cloud integration in OpenTofu using HCL. It defines local variables and configures the cloud block with organization, hostname, and workspace tags.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/tf-cloud.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n\torg = \"example_corp\"\n}\n\nterraform {\n  cloud {\n    organization = local.org\n    hostname = \"app.example.io\"\n\n    workspaces {\n      tags = [\"app\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using jsondecode Function in OpenTofu\nDESCRIPTION: Examples demonstrating how to use the jsondecode function to parse JSON strings into OpenTofu language values. The first example parses a JSON object with a hello-world key-value pair, and the second example parses a simple boolean value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/jsondecode.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> jsondecode(\"{\\\"hello\\\": \\\"world\\\"}\")\n{\n  \"hello\" = \"world\"\n}\n> jsondecode(\"true\")\ntrue\n```\n\n----------------------------------------\n\nTITLE: Using S3 Buckets as Module Sources in OpenTofu\nDESCRIPTION: This example demonstrates how to reference an archive stored in an AWS S3 bucket as a module source using the 's3::' prefix followed by the S3 bucket object URL. OpenTofu will handle AWS authentication automatically.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"s3::https://s3-eu-west-1.amazonaws.com/examplecorp-tofu-modules/vpc.zip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Git Repository as Module Source in OpenTofu HCL\nDESCRIPTION: Demonstrates how to use arbitrary Git repositories as module sources by prefixing the address with 'git::'. Both HTTPS and SSH protocols are supported.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"git::https://example.com/vpc.git\"\n}\n\nmodule \"storage\" {\n  source = \"git::ssh://username@example.com/storage.git\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting String Array to List with tolist Function in OpenTofu HCL\nDESCRIPTION: This example demonstrates how to use the tolist function to convert an array of strings to a list in OpenTofu. The function preserves the order of elements in the original array.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/tolist.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntolist([\"a\", \"b\", \"c\"])\n```\n\n----------------------------------------\n\nTITLE: Various Resource Instance Key Changes in OpenTofu HCL\nDESCRIPTION: Provides examples of 'moved' blocks for different scenarios involving changes to resource instance keys, including renaming keys and switching between count and for_each.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# Both old and new configuration used \"for_each\", but the\n# \"small\" element was renamed to \"tiny\".\nmoved {\n  from = aws_instance.b[\"small\"]\n  to   = aws_instance.b[\"tiny\"]\n}\n\n# The old configuration used \"count\" and the new configuration\n# uses \"for_each\", with the following mappings from\n# index to key:\nmoved {\n  from = aws_instance.c[0]\n  to   = aws_instance.c[\"small\"]\n}\nmoved {\n  from = aws_instance.c[1]\n  to   = aws_instance.c[\"tiny\"]\n}\n\n# The old configuration used \"count\", and the new configuration\n# uses neither \"count\" nor \"for_each\", and you want to keep\n# only the object at index 2.\nmoved {\n  from = aws_instance.d[2]\n  to   = aws_instance.d\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'one' Function with Splat Operator in OpenTofu HCL\nDESCRIPTION: This example shows how the 'one' function can be used in conjunction with the splat operator to handle a nullable EC2 instance type. It demonstrates the relationship between the splat operator and the 'one' function.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/one.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"ec2_instance_type\" {\n  description = \"The type of instance to create. If set to null, no instance will be created.\"\n\n  type    = string\n  default = null\n}\n\nresource \"aws_instance\" \"example\" {\n  count = length(var.ec2_instance_type[*])\n\n  instance_type = var.ec2_instance_type\n  # (other resource arguments...)\n}\n\noutput \"instance_ip_address\" {\n  value = one(aws_instance.example[*].private_ip)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Block Structure\nDESCRIPTION: Example showing a basic resource block with a static nested block structure for AWS Elastic Beanstalk environment.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/dynamic-blocks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_elastic_beanstalk_environment\" \"tfenvtest\" {\n  name = \"tf-test-name\" # can use expressions here\n\n  setting {\n    # but the \"setting\" block is always a literal block\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Decoding in OpenTofu\nDESCRIPTION: Simple examples of using yamldecode function to convert YAML strings to OpenTofu values, including basic key-value pairs, boolean values, and anchors/references.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/yamldecode.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> yamldecode(\"hello: world\")\n{\n  \"hello\" = \"world\"\n}\n\n> yamldecode(\"true\")\ntrue\n\n> yamldecode(\"{a: &foo [1, 2, 3], b: *foo}\")\n{\n  \"a\" = [\n    1,\n    2,\n    3,\n  ]\n  \"b\" = [\n    1,\n    2,\n    3,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GCS Backend Configuration Parameters\nDESCRIPTION: Comprehensive list of configuration variables for GCS backend including bucket name, credentials, service account impersonation, encryption keys, and custom endpoint settings. Each parameter is documented with its requirements, format, and usage context.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/gcs.mdx#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- `bucket` - (Required) The name of the GCS bucket.  This name must be\n  globally unique.  For more information, see [Bucket Naming\n  Guidelines](https://cloud.google.com/storage/docs/bucketnaming.html#requirements).\n- `credentials` / `GOOGLE_BACKEND_CREDENTIALS` / `GOOGLE_CREDENTIALS` -\n  (Optional) Local path to Google Cloud Platform account credentials in JSON\n  format. If unset, the path uses [Google Application Default Credentials](https://developers.google.com/identity/protocols/application-default-credentials).  The provided credentials must have the Storage Object Admin role on the bucket.\n  **Warning**: if using the Google Cloud Platform provider as well, it will\n  also pick up the `GOOGLE_CREDENTIALS` environment variable.\n- `impersonate_service_account` / `GOOGLE_BACKEND_IMPERSONATE_SERVICE_ACCOUNT` / `GOOGLE_IMPERSONATE_SERVICE_ACCOUNT` - (Optional) The service account to impersonate for accessing the State Bucket.\n  You must have `roles/iam.serviceAccountTokenCreator` role on that account for the impersonation to succeed.\n  If you are using a delegation chain, you can specify that using the `impersonate_service_account_delegates` field.\n- `impersonate_service_account_delegates` - (Optional) The delegation chain for an impersonating a service account as described [here](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-delegated).\n- `access_token` - (Optional) A temporary [OAuth 2.0 access token] obtained\n  from the Google Authorization server, i.e. the `Authorization: Bearer` token\n  used to authenticate HTTP requests to GCP APIs. This is an alternative to\n  `credentials`. If both are specified, `access_token` will be used over the\n  `credentials` field.\n- `prefix` - (Optional) GCS prefix inside the bucket. Named states for\n  workspaces are stored in an object called `<prefix>/<name>.tfstate`.\n- `encryption_key` / `GOOGLE_ENCRYPTION_KEY` - (Optional) A 32 byte base64\n  encoded 'customer-supplied encryption key' used when reading and writing state files in the bucket. For\n  more information see [Customer-supplied Encryption\n  Keys](https://cloud.google.com/storage/docs/encryption/customer-supplied-keys).\n- `kms_encryption_key` / `GOOGLE_KMS_ENCRYPTION_KEY` - (Optional) A Cloud KMS key ('customer-managed encryption key')\n  used when reading and writing state files in the bucket.\n  Format should be `projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{name}}`.\n  For more information, including IAM requirements, see [Customer-managed Encryption\n  Keys](https://cloud.google.com/storage/docs/encryption/customer-managed-keys).\n- `storage_custom_endpoint` / `GOOGLE_BACKEND_STORAGE_CUSTOM_ENDPOINT` / `GOOGLE_STORAGE_CUSTOM_ENDPOINT` - (Optional) A URL containing three parts: the protocol, the DNS name pointing to a Private Service Connect endpoint, and the path for the Cloud Storage API (`/storage/v1/b`, [see here](https://cloud.google.com/storage/docs/json_api/v1/buckets/get#http-request)). You can either use [a DNS name automatically made by the Service Directory](https://cloud.google.com/vpc/docs/configure-private-service-connect-apis#configure-p-dns) or a [custom DNS name](https://cloud.google.com/vpc/docs/configure-private-service-connect-apis#configure-dns-default) made by you. For example, if you create an endpoint called `xyz` and want to use the automatically-created DNS name, you should set the field value as `https://storage-xyz.p.googleapis.com/storage/v1/b`. For help creating a Private Service Connect endpoint using OpenTofu, [see this guide](https://cloud.google.com/vpc/docs/configure-private-service-connect-apis#terraform_1).\n```\n\n----------------------------------------\n\nTITLE: Configuring COS Backend for OpenTofu State Storage in HCL\nDESCRIPTION: Example configuration for setting up Tencent Cloud Object Storage (COS) as a backend for OpenTofu state files, specifying region, bucket, and prefix path.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/cos.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"cos\" {\n    region = \"ap-guangzhou\"\n    bucket = \"bucket-for-tofu-state-1258798060\"\n    prefix = \"tofu/state\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: formatdate Function Examples in OpenTofu\nDESCRIPTION: A collection of examples demonstrating how to use the formatdate function with different format specifications to format timestamps in various ways, including different date and time representations with timezone information.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/formatdate.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> formatdate(\"DD MMM YYYY hh:mm ZZZ\", \"2018-01-02T23:12:01Z\")\n02 Jan 2018 23:12 UTC\n> formatdate(\"EEEE, DD-MMM-YY hh:mm:ss ZZZ\", \"2018-01-02T23:12:01Z\")\nTuesday, 02-Jan-18 23:12:01 UTC\n> formatdate(\"EEE, DD MMM YYYY hh:mm:ss ZZZ\", \"2018-01-02T23:12:01-08:00\")\nTue, 02 Jan 2018 23:12:01 -0800\n> formatdate(\"MMM DD, YYYY\", \"2018-01-02T23:12:01Z\")\nJan 02, 2018\n> formatdate(\"HH:mmaa\", \"2018-01-02T23:12:01Z\")\n11:12pm\n```\n\n----------------------------------------\n\nTITLE: Using csvdecode Function to Parse CSV Data in OpenTofu\nDESCRIPTION: This example shows how csvdecode transforms a CSV string into a list of maps. The first line is interpreted as the header row, with its values becoming the keys in the resulting maps.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/csvdecode.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> csvdecode(\"a,b,c\\n1,2,3\\n4,5,6\")\n[\n  {\n    \"a\" = \"1\"\n    \"b\" = \"2\"\n    \"c\" = \"3\"\n  },\n  {\n    \"a\" = \"4\"\n    \"b\" = \"5\"\n    \"c\" = \"6\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Migrating Multiple Workspaces from Remote Backend to Cloud Block in OpenTofu\nDESCRIPTION: This snippet shows how to convert a 'backend \"remote\"' block using the 'prefix' argument for multiple workspaces to a 'cloud' block using the 'tags' argument. It replaces the prefix-based workspace selection with a tag-based approach.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/cloud/migrating.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n-  backend \"remote\" {\n+  cloud {\n     organization = \"my-org\"\n\n    workspaces {\n-      prefix = \"my-app-\"\n+      tags = [\"app:mine\"]\n    }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Specifying Variables with -var in Unix-style Shell\nDESCRIPTION: Demonstrates how to specify input variables using the -var flag in Unix-style shells like those on Linux or macOS. Shows basic usage and how to handle values containing single quotes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/plan.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntofu plan -var 'name=value'\n```\n\nLANGUAGE: bash\nCODE:\n```\ntofu plan -var 'name=va'\\''\\'lue'\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Value from a Map in OpenTofu Console\nDESCRIPTION: Example of accessing a specific value from a map variable in the OpenTofu console, showing how to reference nested map elements.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/console.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> var.apps.foo\n{\n  \"region\" = \"us-east-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Format Function in OpenTofu HCL\nDESCRIPTION: Demonstrates the basic syntax of the format function in OpenTofu HCL. It takes a specification string and one or more values to format.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/format.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nformat(spec, values...)\n```\n\n----------------------------------------\n\nTITLE: Consuming a Module from the OpenTofu Registry in HCL\nDESCRIPTION: This snippet demonstrates how to reference and use a module from the OpenTofu Registry in a configuration file. It shows the basic module block syntax with the source attribute pointing to a registry module path.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/publish.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"hashicorp/consul/aws\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Mixed-Type Array to List with tolist Function in OpenTofu HCL\nDESCRIPTION: This example shows how the tolist function handles mixed-type arrays in OpenTofu. When converting an array with different data types, all elements are converted to the most general type, which is often a string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/tolist.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntolist([\"a\", \"b\", 3])\n```\n\n----------------------------------------\n\nTITLE: Initializing a Working Directory for Validation\nDESCRIPTION: Command to initialize a working directory for validation without accessing any configured backend.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/validate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu init -backend=false\n```\n\n----------------------------------------\n\nTITLE: Using strcontains Function Syntax in OpenTofu HCL\nDESCRIPTION: The basic syntax for the strcontains function, which takes two string arguments and returns a boolean indicating whether the second string is contained within the first.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/strcontains.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrcontains(string, substr)\n```\n\n----------------------------------------\n\nTITLE: Base Azure Storage Configuration Variables in OpenTofu\nDESCRIPTION: Core configuration variables required for Azure backend storage, including storage account, container name, and key settings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/azurerm.mdx#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* `storage_account_name` - (Required) The Name of the Storage Account.\n* `container_name` - (Required) The Name of the Storage Container within the Storage Account.\n* `key` - (Required) The name of the Blob used to retrieve/store OpenTofu's State file inside the Storage Container.\n```\n\n----------------------------------------\n\nTITLE: Azure Backend Configuration with OIDC\nDESCRIPTION: Configuration for Azure backend using OpenID Connect (OIDC) authentication method.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/azurerm.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    resource_group_name  = \"StorageAccount-ResourceGroup\"\n    storage_account_name = \"abcd1234\"\n    container_name       = \"tfstate\"\n    key                  = \"prod.terraform.tfstate\"\n    use_oidc             = true\n    subscription_id      = \"00000000-0000-0000-0000-000000000000\"\n    tenant_id            = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Expect_Failures for Variable Validation Testing in OpenTofu\nDESCRIPTION: Shows how to test expected failures in OpenTofu using expect_failures to validate that variable constraints are enforced correctly, ensuring validation works properly when invalid input is provided.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nrun \"invalid_instance_count\" {\n  command = \"plan\"\n\n  variables {\n    instances = -1\n  }\n\n  expect_failures = [\n    # This variable has a validation rule for a minimum value of 1\n    var.instances,\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from a Map using OpenTofu's 'values' Function\nDESCRIPTION: This example demonstrates how to use the 'values' function in OpenTofu to extract a list of values from a map. The function returns the values in lexicographical order based on their corresponding keys.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/values.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> values({a=3, c=2, d=1})\n[\n  3,\n  2,\n  1,\n]\n```\n\n----------------------------------------\n\nTITLE: Using JSON Output with jq for Automation\nDESCRIPTION: Example showing how to use the -json flag with jq to extract specific values for automation purposes, retrieving the first instance IP.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/output.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shellsession\nCODE:\n```\n$ tofu output -json instance_ips | jq -r '.[0]'\n54.43.114.12\n```\n\n----------------------------------------\n\nTITLE: Enforcing Encryption in OpenTofu Configuration\nDESCRIPTION: Shows how to enforce encryption in OpenTofu configuration to prevent unencrypted data from being written when environment variables are absent.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  encryption {\n    require_encryption = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional File Content Loading in OpenTofu (HCL)\nDESCRIPTION: Example of using fileexists in a ternary operation to conditionally load file content if it exists, otherwise fall back to a default value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/fileexists.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nfileexists(\"custom-section.sh\") ? file(\"custom-section.sh\") : local.default_content\n```\n\n----------------------------------------\n\nTITLE: Using GitHub Repository as Module Source in OpenTofu HCL\nDESCRIPTION: Shows how to use a GitHub repository as a module source. OpenTofu automatically recognizes unprefixed github.com URLs.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"github.com/hashicorp/example\"\n}\n```\n\n----------------------------------------\n\nTITLE: For Loop Directive in Heredoc String in OpenTofu HCL\nDESCRIPTION: A heredoc string template using a for loop directive to iterate over a collection and generate dynamic content for each element, creating server entries from IP addresses.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/strings.mdx#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n<<EOT\n%{ for ip in aws_instance.example[*].private_ip }\nserver ${ip}\n%{ endfor }\nEOT\n```\n\n----------------------------------------\n\nTITLE: Running OpenTofu as a Docker Container\nDESCRIPTION: This code snippet shows how to run OpenTofu as a Docker container. It mounts the current directory to /workspace in the container and runs the 'tofu init' command.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/docker.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -t -v \"$(pwd)\":/workspace -w /workspace ghcr.io/opentofu/opentofu:latest init\n```\n\n----------------------------------------\n\nTITLE: File Function Example with Path Module\nDESCRIPTION: Example showing how to use the file function with the path.module variable to read a text file named hello.txt.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/file.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> file(\"${path.module}/hello.txt\")\nHello World\n```\n\n----------------------------------------\n\nTITLE: Using the 'self' Object in Resource Postconditions in OpenTofu\nDESCRIPTION: This example shows how to use the 'self' object in a postcondition block to refer to attributes of the current resource instance. It verifies that an EC2 instance is in the 'running' state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-16_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t2.micro\"\n  ami           = \"ami-abc123\"\n\n  lifecycle {\n    postcondition {\n      condition     = self.instance_state == \"running\"\n      error_message = \"EC2 instance must be running.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Attribute Existence with 'can' Function in OpenTofu HCL\nDESCRIPTION: This example shows how to use the 'can' function to test if a variable has a specific attribute named 'foo'.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-16_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\ncondition = can(var.example.foo)\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration Aliases in Required Providers Block\nDESCRIPTION: Demonstrates how to declare configuration aliases within a module using the required_providers block.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/configuration.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    mycloud = {\n      source  = \"mycorp/mycloud\"\n      version = \"~> 1.0\"\n      configuration_aliases = [ mycloud.alternate ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended JSON Output Commands for OpenTofu State\nDESCRIPTION: Examples of OpenTofu CLI commands that produce JSON-formatted output intended for external software consumption. These commands provide structured access to state information and output values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu output -json\\ntofu show -json\n```\n\n----------------------------------------\n\nTITLE: Using the 'can' Function with List Conversion in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates using the 'can' function with tolist to verify if a remote state output value can be converted to a list type.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\ncondition = can(tolist(data.terraform_remote_state.example.outputs[\"items\"]))\n```\n\n----------------------------------------\n\nTITLE: Using base64sha256 Function in OpenTofu\nDESCRIPTION: Demonstrates how to use the base64sha256 function to compute the SHA256 hash of a string and encode it with Base64. The function applies SHA256 algorithm to the UTF-8 encoded input string and returns the result in Base64 encoding.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/base64sha256.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> base64sha256(\"hello world\")\nuU0nuZNNPgilLlLX2n2r+sSE7+N6U4DukIj3rOLvzek=\n```\n\n----------------------------------------\n\nTITLE: Split Function Syntax in OpenTofu HCL\nDESCRIPTION: The basic syntax pattern for the split function in OpenTofu, showing the function name and its required parameters: a separator string and the input string to be split.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/split.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsplit(separator, string)\n```\n\n----------------------------------------\n\nTITLE: Basic Quoted String in OpenTofu HCL\nDESCRIPTION: A simple quoted string literal enclosed in double quotes, representing the most basic form of string declaration in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/strings.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n\"hello\"\n```\n\n----------------------------------------\n\nTITLE: Selecting an Alternate Provider Configuration for a Resource in OpenTofu\nDESCRIPTION: Example showing how to define a default provider configuration and an alternate configuration with an alias, then select the alternate configuration for a specific resource using the provider meta-argument.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/resource-provider.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# default configuration\nprovider \"google\" {\n  region = \"us-central1\"\n}\n\n# alternate configuration, whose alias is \"europe\"\nprovider \"google\" {\n  alias  = \"europe\"\n  region = \"europe-west1\"\n}\n\nresource \"google_compute_instance\" \"example\" {\n  # This \"provider\" meta-argument selects the google provider\n  # configuration whose alias is \"europe\", rather than the\n  # default configuration.\n  provider = google.europe\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using cidrnetmask Function with IPv4 CIDR Notation in HCL\nDESCRIPTION: Illustrates an example of using the cidrnetmask function with an IPv4 address in CIDR notation. The function converts the CIDR notation to a subnet mask in dotted-decimal format.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/cidrnetmask.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> cidrnetmask(\"172.16.0.0/12\")\n255.240.0.0\n```\n\n----------------------------------------\n\nTITLE: Date Pattern Extraction with Capture Groups\nDESCRIPTION: Demonstrates using capture groups to extract components of a date string in YYYY-MM-DD format. Returns an array of captured values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/regex.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nregex(\"(\\\\d\\\\d\\\\d\\\\d)-(\\\\d\\\\d)-(\\\\d\\\\d)\", \"2019-02-01\")\n# Returns: [\"2019\", \"02\", \"01\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Terraform Block Structure\nDESCRIPTION: Basic syntax for defining a terraform configuration block in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Maps with Different Value Types in OpenTofu HCL\nDESCRIPTION: This example shows merging three maps where the value types differ for the same key. The resulting map contains the latest value for each key, preserving the type of the last specified value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/merge.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmerge({a=\"b\"}, {a=[1,2], c=\"z\"}, {d=3})\n```\n\n----------------------------------------\n\nTITLE: Azure Backend Configuration with CLI/Service Principal\nDESCRIPTION: Configuration for Azure backend using Azure CLI or Service Principal authentication with required storage account details.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/azurerm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    resource_group_name  = \"StorageAccount-ResourceGroup\"\n    storage_account_name = \"abcd1234\"\n    container_name       = \"tfstate\"\n    key                  = \"prod.terraform.tfstate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Plugin Cache in HCL\nDESCRIPTION: This snippet demonstrates how to enable the provider plugin cache by configuring the plugin_cache_dir setting in the OpenTofu CLI configuration file. This allows multiple configurations to share provider plugins instead of downloading separate copies.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/config-file.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nplugin_cache_dir = \"$HOME/.terraform.d/plugin-cache\"\n```\n\n----------------------------------------\n\nTITLE: Using formatlist with a List Argument in OpenTofu HCL\nDESCRIPTION: Demonstrates how to use formatlist with a single list argument to create a formatted list of greetings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/formatlist.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> formatlist(\"Hello, %s!\", [\"Valentina\", \"Ander\", \"Olivia\", \"Sam\"])\n[\n  \"Hello, Valentina!\",\n  \"Hello, Ander!\",\n  \"Hello, Olivia!\",\n  \"Hello, Sam!\",\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing an OpenTofu Project as an Individual\nDESCRIPTION: Shows the process of creating a new Git repository, writing initial OpenTofu configuration, and initializing OpenTofu to prepare the environment for infrastructure management.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/core-workflow.mdx#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Create repository\n$ git init my-infra && cd my-infra\n\nInitialized empty Git repository in /.../my-infra/.git/\n\n# Write initial config\n$ vim main.tf\n\n# Initialize OpenTofu\n$ tofu init\n\nInitializing provider plugins...\n# ...\nOpenTofu has been successfully initialized!\n```\n\n----------------------------------------\n\nTITLE: Configuring Offline Testing with Provider Overrides in OpenTofu\nDESCRIPTION: Demonstrates how to create fully offline tests by overriding provider settings and using mock mode, allowing tests to run without requiring actual cloud infrastructure or credentials.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region                      = \"us-east-1\"\n  skip_credentials_validation = true\n  skip_metadata_api_check     = true\n  skip_requesting_account_id  = true\n\n  # This allows us to run the AWS provider fully offline\n  s3_use_path_style = true\n\n  # Local development endpoint, set to any value to make the AWS provider happy\n  endpoints {\n    s3 = \"http://localhost:4566\"\n  }\n}\n\nrun \"validate_bucket\" {\n  command = \"plan\"\n\n  variables {\n    bucket_name = \"test-bucket\"\n  }\n\n  assert {\n    condition     = aws_s3_bucket.test_bucket.bucket == var.bucket_name\n    error_message = \"Incorrect bucket name\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining join Function Syntax in OpenTofu HCL\nDESCRIPTION: Shows the syntax for using the join function in OpenTofu. It takes two parameters: a separator string and a list of strings to be joined.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/join.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\njoin(separator, list)\n```\n\n----------------------------------------\n\nTITLE: Extended Variable Description with Deprecation Notice in HCL\nDESCRIPTION: Demonstrates an alternative approach (rejected by TSC) using @deprecated annotation in the variable description to indicate deprecation status and migration path.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241118-module-vars-and-outputs-deprecation.md#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"this_is_my_variable\" {\n  type = string\n  description = \"This is a variable for the old way of configuring things. @deprecated{ This variable will be removed on 2024-12-31. Use another_variable instead. }\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'can' Function with Type Conversion in OpenTofu HCL\nDESCRIPTION: This example shows how to use the 'can' function with the tostring conversion function to test if a remote state output value can be used as a string, which includes strings, numbers, and boolean values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\ncondition = can(tostring(data.terraform_remote_state.example.outputs[\"name\"]))\n```\n\n----------------------------------------\n\nTITLE: Configuring OCI Registry Credentials in HCL\nDESCRIPTION: Example configuration block for specifying OCI Registry credentials with username and password authentication. This configuration is part of the OpenTofu CLI configuration file and allows direct specification of credentials for a specific registry domain.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/oci_registries/credentials.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\noci_credentials \"example.com\" {\n  username = \"example\"\n  password = \"example\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Range Function Examples in OpenTofu\nDESCRIPTION: Examples of using the range function with various arguments, showing the resulting sequences including simple ranges, custom starts, custom steps, and negative step ranges.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/range.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> range(3)\n[\n  0,\n  1,\n  2,\n]\n\n> range(1, 4)\n[\n  1,\n  2,\n  3,\n]\n\n> range(1, 8, 2)\n[\n  1,\n  3,\n  5,\n  7,\n]\n\n> range(1, 4, 0.5)\n[\n  1,\n  1.5,\n  2,\n  2.5,\n  3,\n  3.5,\n]\n\n> range(4, 1)\n[\n  4,\n  3,\n  2,\n]\n\n> range(10, 5, -2)\n[\n  10,\n  8,\n  6,\n]\n```\n\n----------------------------------------\n\nTITLE: Using the refresh command alternative with review option\nDESCRIPTION: The recommended alternative to `tofu refresh` that provides an opportunity to review changes before applying them to the state. This command presents an interactive prompt for confirming detected changes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/refresh.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu apply -refresh-only\n```\n\n----------------------------------------\n\nTITLE: Using Google Cloud Storage Buckets as Module Sources\nDESCRIPTION: This snippet shows how to use archives stored in Google Cloud Storage as module sources using the 'gcs::' prefix followed by a GCS bucket object URL. OpenTofu will use Google Cloud SDK for authentication.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"gcs::https://www.googleapis.com/storage/v1/modules/foomodule.zip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'one' Function with Conditional EC2 Instance in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates how to use the 'one' function to handle the output of a conditionally created EC2 instance. It returns either the private IP address of the instance or null if no instance was created.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/one.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"include_ec2_instance\" {\n  type    = bool\n  default = true\n}\n\nresource \"aws_instance\" \"example\" {\n  count = var.include_ec2_instance ? 1 : 0\n\n  # (other resource arguments...)\n}\n\noutput \"instance_ip_address\" {\n  value = one(aws_instance.example[*].private_ip)\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of 'one' Function Usage in OpenTofu HCL\nDESCRIPTION: This snippet provides examples of using the 'one' function with different inputs, including an empty list, a single-element list, and an invalid multi-element list. It demonstrates the function's behavior in various scenarios.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/one.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> one([])\nnull\n> one([\"hello\"])\n\"hello\"\n> one([\"hello\", \"goodbye\"])\n\nError: Invalid function argument\n\nInvalid value for \"list\" parameter: must be a list, set, or tuple value with\neither zero or one elements.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of slice Function in OpenTofu\nDESCRIPTION: Demonstrates practical use of the slice function. This example shows how to extract elements from index 1 to 2 (before index 3) from a list of strings, resulting in [\"b\", \"c\"].\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/slice.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> slice([\"a\", \"b\", \"c\", \"d\"], 1, 3)\n[\n  \"b\",\n  \"c\",\n]\n```\n\n----------------------------------------\n\nTITLE: Showing For-Each Resource State in OpenTofu - Unix/Mac\nDESCRIPTION: Example showing how to display state information for a resource using for_each meta-argument on Unix-like systems.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/show.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state show 'packet_device.worker[\"example\"]'\n```\n\n----------------------------------------\n\nTITLE: Using fileset with for_each in Resource Blocks\nDESCRIPTION: Example showing how to combine the fileset function with the for_each meta-argument to create one resource instance per matched file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/fileset.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"example_thing\" \"example\" {\n  for_each = fileset(path.module, \"files/*\")\n\n  # other configuration using each.value\n}\n```\n\n----------------------------------------\n\nTITLE: Using replace Function for Simple String Replacement in OpenTofu HCL\nDESCRIPTION: Shows an example of using the replace function to replace all occurrences of '+' with '-' in a string. This demonstrates basic string replacement functionality.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/replace.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> replace(\"1 + 2 + 3\", \"+\", \"-\")\n1 - 2 - 3\n```\n\n----------------------------------------\n\nTITLE: Basic can() Function Usage Examples in OpenTofu HCL\nDESCRIPTION: Examples demonstrating the can function behavior. It returns true when accessing an existing property and false when accessing a non-existent property of a local value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/can.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> local.foo\n{\n  \"bar\" = \"baz\"\n}\n> can(local.foo.bar)\ntrue\n> can(local.foo.boop)\nfalse\n```\n\n----------------------------------------\n\nTITLE: Using coalescelist Function with Direct Lists in OpenTofu\nDESCRIPTION: Example of using the coalescelist function with direct list arguments in OpenTofu. It returns the first non-empty list from the provided arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/coalescelist.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> coalescelist([\"a\", \"b\"], [\"c\", \"d\"])\n[\n  \"a\",\n  \"b\",\n]\n> coalescelist([], [\"c\", \"d\"])\n[\n  \"c\",\n  \"d\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using tofu state push Command in OpenTofu\nDESCRIPTION: The basic usage of the 'tofu state push' command to manually upload a local state file to the configured backend. It includes safety checks and options for force pushing and lock management.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/push.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu state push [options] PATH\n```\n\n----------------------------------------\n\nTITLE: Importing Resource with For_Each Meta-Argument in HCL\nDESCRIPTION: Illustrates how to import a resource that uses the for_each meta-argument in its configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/import/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: HCL\nCODE:\n```\nimport {\n  to = aws_instance.example[\"foo\"]\n  id = \"i-abcd1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic matchkeys Example with Instance IDs and Regions\nDESCRIPTION: A simple example showing how to filter instance IDs based on matching regions, returning only instances in the us-east region.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/matchkeys.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> matchkeys([\"i-123\", \"i-abc\", \"i-def\"], [\"us-west\", \"us-east\", \"us-east\"], [\"us-east\"])\n[\n  \"i-abc\",\n  \"i-def\",\n]\n```\n\n----------------------------------------\n\nTITLE: Showing Count-Based Resource State in OpenTofu\nDESCRIPTION: Example showing how to display state information for a resource that uses the count meta-argument.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/show.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state show 'packet_device.worker[0]'\n```\n\n----------------------------------------\n\nTITLE: Using jsonencode to Convert OpenTofu Object to JSON String\nDESCRIPTION: This example demonstrates how to use the jsonencode function to convert an OpenTofu object to a JSON string. The function takes a map with a key-value pair and returns the corresponding JSON representation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/jsonencode.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> jsonencode({\"hello\"=\"world\"})\n{\"hello\":\"world\"}\n```\n\n----------------------------------------\n\nTITLE: Concatenating Lists with OpenTofu Concat Function\nDESCRIPTION: Example showing how to use the concat function to combine two lists containing string elements. The function takes multiple list arguments and returns a single combined list while preserving the original order of elements.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/concat.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nconcat([\"a\", \"\"], [\"b\", \"c\"])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Element of List in OpenTofu HCL\nDESCRIPTION: Illustrates how to combine the element and length functions to retrieve the last element of a list dynamically.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/element.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nelement([\"a\", \"b\", \"c\"], length([\"a\", \"b\", \"c\"])-1)\n```\n\n----------------------------------------\n\nTITLE: Set Intersection Example Usage in HCL\nDESCRIPTION: Example demonstrating how setintersection finds common elements across multiple sets. In this case, it shows how the function returns only the element 'b' which appears in all three input arrays.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/setintersection.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nsetintersection([\"a\", \"b\"], [\"b\", \"c\"], [\"b\", \"d\"])\n[\n  \"b\",\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Provider Name Conflicts in OpenTofu\nDESCRIPTION: Example demonstrating how to handle local name conflicts by creating compound local names when using multiple providers with the same type name.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/requirements.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    # In the rare situation of using two providers that\n    # have the same type name -- \"http\" in this example --\n    # use a compound local name to distinguish them.\n    hashicorp-http = {\n      source  = \"hashicorp/http\"\n      version = \"~> 2.0\"\n    }\n    mycorp-http = {\n      source  = \"mycorp/http\"\n      version = \"~> 1.0\"\n    }\n  }\n}\n\n# References to these providers elsewhere in the\n# module will use these compound local names.\nprovider \"mycorp-http\" {\n  # ...\n}\n\ndata \"http\" \"example\" {\n  provider = hashicorp-http\n  #...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the index Function in OpenTofu HCL\nDESCRIPTION: The 'index' function finds the zero-based index of a given value in a list. It returns an error if the value is not present in the list. This function is useful for determining the position of an element in a list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/index_function.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nindex(list, value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Encryption in OpenTofu (HCL)\nDESCRIPTION: Demonstrates how to set up basic encryption configuration in OpenTofu using HCL. It includes specifying a key provider, encryption method, and encryption settings for state and plan files.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/state_encryption.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl2\nCODE:\n```\nterraform {\n  encryption {\n    key_provider \"static\" \"foo\" {\n      key = \"6f6f706830656f67686f6834616872756f3751756165686565796f6f72653169\"\n    }\n    method \"aes_gcm\" \"bar\" {\n      key_provider = key_provider.static.foo\n    }\n    state {\n      method = method.aes_gcm.abc\n    }\n    plan {\n      method = method.aes_gcm.cde\n    }\n    remote_state_data_sources {\n      default {\n        method = method.aes_gcm.ghi\n      }\n      remote_state_data_source \"some_module.remote_data_source.foo\" {\n        method = method.aes_gcm.ijk\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: bcrypt Function Example with Default Cost\nDESCRIPTION: Shows a practical example of using the bcrypt function to hash the string 'hello world' using the default cost factor of 10. The output shows the resulting hash in Modular Crypt Format.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/bcrypt.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> bcrypt(\"hello world\")\n$2a$10$D5grTTzcsqyvAeIAnY/mYOIqliCoG7eAMX0/oFcuD.iErkksEbcAa\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption with HCL in OpenTofu\nDESCRIPTION: Example of configuring encryption using HCL format, specifying a static key provider and AES GCM encryption method for the state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/state_encryption.md#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nkey_provider \"static\" \"my_key\" {\n  key = \"this is my encryption key\"\n}\nmethod \"aes_gcm\" \"foo\" {\n  key_provider = key_provider.static.my_key\n}\nstate {\n  method = method.aes_gcm.foo\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Examples of issensitive Function Usage in OpenTofu\nDESCRIPTION: Simple examples showing the return values of the issensitive function with different inputs. The function returns false for regular values and true for values explicitly marked as sensitive using the sensitive function.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/issensitive.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> issensitive(1)\nfalse\n> issensitive(\"hello\")\nfalse\n> issensitive(sensitive(\"hello\"))\ntrue\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum of Numbers in OpenTofu HCL\nDESCRIPTION: This example demonstrates how to use the sum function in OpenTofu to calculate the total of a list of numbers. The function accepts a list or set of numbers as input and returns their sum.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/sum.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> sum([10, 13, 6, 4.5])\n33.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption Fallback in OpenTofu\nDESCRIPTION: Demonstrates how to set up a fallback encryption configuration for key and method rollover scenarios in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  encryption {\n    key_provider \"local\" {\n      method \"aes_gcm\" {\n        static_key = \"NEWPASSPHRASE\"\n      }\n    }\n    fallback {\n      key_provider \"local\" {\n        method \"aes_gcm\" {\n          static_key = \"OLDPASSPHRASE\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: URL Parsing with Named Capture Groups\nDESCRIPTION: Shows how to use named capture groups to extract URL components (scheme and authority). Returns a map of named captures and their values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/regex.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nregex(\"^(?:(?P<scheme>[^:/?#]+):)?(?://(?P<authority>[^/?#]*))?\", \"https://example.com/docs/\")\n# Returns: {\n#   \"authority\" = \"example.com\"\n#   \"scheme\" = \"https\"\n# }\n```\n\n----------------------------------------\n\nTITLE: Indented Heredoc in OpenTofu HCL\nDESCRIPTION: An indented heredoc string using the <<- marker, which automatically strips leading whitespace based on the line with the smallest indentation, improving readability in nested blocks.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/strings.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nblock {\n  value = <<-EOT\n  hello\n    world\n  EOT\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of setproduct Function in HCL\nDESCRIPTION: Demonstrates the basic usage of the setproduct function to find combinations of environments and applications.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsetproduct([\"development\", \"staging\", \"production\"], [\"app1\", \"app2\"])\n```\n\n----------------------------------------\n\nTITLE: Basic Pattern Matching with regex Function\nDESCRIPTION: Example of matching a simple alphabetic pattern in a string containing mixed alphanumeric characters. Returns the first match of lowercase letters.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/regex.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nregex(\"[a-z]+\", \"53453453.345345aaabbbccc23454\")\n# Returns: aaabbbccc\n```\n\n----------------------------------------\n\nTITLE: Using abspath Function in OpenTofu to Convert Relative Paths\nDESCRIPTION: This example demonstrates how the abspath function converts a path (in this case path.root) to an absolute filesystem path. The function joins non-absolute paths with the current working directory.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/abspath.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> abspath(path.root)\n/home/user/some/tofu/root\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider with Workspace-Specific IAM Roles in HCL\nDESCRIPTION: This snippet demonstrates how to set up the AWS provider in OpenTofu to use different IAM roles based on the selected workspace. It uses a variable to map workspaces to their corresponding IAM role ARNs.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/s3.mdx#2025-04-16_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"workspace_iam_roles\" {\n  default = {\n    staging    = \"arn:aws:iam::STAGING-ACCOUNT-ID:role/OpenTofu\"\n    production = \"arn:aws:iam::PRODUCTION-ACCOUNT-ID:role/OpenTofu\"\n  }\n}\n\nprovider \"aws\" {\n  # No credentials explicitly set here because they come from either the\n  # environment or the global credentials file.\n\n  assume_role {\n    role_arn = \"${var.workspace_iam_roles[terraform.workspace]}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Practical Range Function Application in OpenTofu HCL\nDESCRIPTION: A practical example showing how the range function can be used with for expressions to create multiple named resources based on a count map variable.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/range.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"name_counts\" {\n  type    = map(number)\n  default = {\n    \"foo\" = 2\n    \"bar\" = 4\n  }\n}\n\nlocals {\n  expanded_names = {\n    for name, count in var.name_counts : name => [\n      for i in range(count) : format(\"%s%02d\", name, i)\n    ]\n  }\n}\n\noutput \"expanded_names\" {\n  value = local.expanded_names\n}\n\n# Produces the following expanded_names value when run with the default\n# \"name_counts\":\n#\n# {\n#   \"bar\" = [\n#     \"bar00\",\n#     \"bar01\",\n#     \"bar02\",\n#     \"bar03\",\n#   ]\n#   \"foo\" = [\n#     \"foo00\",\n#     \"foo01\",\n#   ]\n# }\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Handling in substr Function\nDESCRIPTION: Shows how substr handles Unicode characters by counting them as single characters rather than bytes when extracting a substring.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/substr.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> substr(\"🤔🤷\", 0, 1)\n🤔\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance into Resource with Count\nDESCRIPTION: Shell command that imports an AWS EC2 instance with ID 'i-abcd1234' into the first instance of 'aws_instance.baz' configured with the 'count' meta-argument.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/import.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu import 'aws_instance.baz[0]' i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: Resource Block Organization with Meta-Arguments in HCL\nDESCRIPTION: Shows the recommended organization of a resource block including meta-arguments, regular arguments, nested blocks, and meta-argument blocks. Demonstrates proper spacing and grouping conventions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/syntax/style.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  count = 2 # meta-argument first\n\n  ami           = \"abc123\"\n  instance_type = \"t2.micro\"\n\n  network_interface {\n    # ...\n  }\n\n  lifecycle { # meta-argument block last\n    create_before_destroy = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Heredoc String Syntax in OpenTofu HCL\nDESCRIPTION: A heredoc-style string literal that allows for clear expression of multi-line strings using the EOT delimiter, which begins with << and ends with the same delimiter on its own line.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/strings.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n<<EOT\nhello\nworld\nEOT\n```\n\n----------------------------------------\n\nTITLE: Basic CIDR Subnets Function Syntax\nDESCRIPTION: Shows the basic syntax for using the cidrsubnets function to calculate IP address ranges within a CIDR prefix.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/cidrsubnets.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncidrsubnets(prefix, newbits...)\n```\n\n----------------------------------------\n\nTITLE: File Function Syntax in OpenTofu HCL\nDESCRIPTION: Basic syntax for the file function that reads file contents. Takes a path parameter and returns the file contents as a UTF-8 encoded string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/file.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfile(path)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Chunklist Function Usage with Examples in HCL\nDESCRIPTION: Provides two examples of using the chunklist function. The first example splits a list of 5 elements into chunks of size 2, while the second example splits the same list into chunks of size 1.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/chunklist.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> chunklist([\"a\", \"b\", \"c\", \"d\", \"e\"], 2)\n[\n  [\n    \"a\",\n    \"b\",\n  ],\n  [\n    \"c\",\n    \"d\",\n  ],\n  [\n    \"e\",\n  ],\n]\n> chunklist([\"a\", \"b\", \"c\", \"d\", \"e\"], 1)\n[\n  [\n    \"a\",\n  ],\n  [\n    \"b\",\n  ],\n  [\n    \"c\",\n  ],\n  [\n    \"d\",\n  ],\n  [\n    \"e\",\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Examples of anytrue Function in OpenTofu\nDESCRIPTION: Examples demonstrating the anytrue function with different inputs, including string \"true\", boolean true, mixed boolean values, and an empty list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/anytrue.mdx#2025-04-16_snippet_1\n\nLANGUAGE: command\nCODE:\n```\n> anytrue([\"true\"])\ntrue\n> anytrue([true])\ntrue\n> anytrue([true, false])\ntrue\n> anytrue([])\nfalse\n```\n\n----------------------------------------\n\nTITLE: Using the compact function to filter out null and empty string values in OpenTofu HCL\nDESCRIPTION: This example demonstrates how the compact function removes null and empty string elements from a list, returning only the non-empty string values. The function takes a list containing mixed values and returns a clean list with only valid strings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/compact.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncompact([\"a\", \"\", \"b\", null, \"c\"])\n```\n\n----------------------------------------\n\nTITLE: Computing SHA512 Hash in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates how to use the sha512 function in OpenTofu to compute the SHA512 hash of a string. The function takes a string input, encodes it as UTF-8, applies the SHA512 algorithm, and returns the result as lowercase hexadecimal digits.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/sha512.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> sha512(\"hello world\")\n309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f\n```\n\n----------------------------------------\n\nTITLE: Declaring the Built-in Provider in HCL\nDESCRIPTION: Example of how to declare the built-in terraform provider in the required_providers block to access provider functions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/builtin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    terraform = {\n      source = \"terraform.io/builtin/terraform\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using trimspace Function in OpenTofu\nDESCRIPTION: Example of using the trimspace function to remove leading and trailing space characters from a string. This function follows the Unicode definition of \"space\", which includes regular spaces, tabs, newline characters, and other space-like characters.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/trimspace.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> trimspace(\"  hello\\n\\n\")\nhello\n```\n\n----------------------------------------\n\nTITLE: Defining an AWS Instance Resource in HCL for Import\nDESCRIPTION: An example HCL resource block for an AWS instance that will be used as the target for importing an existing resource. The configuration details can be filled in later after import.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/import/usage.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  # ...instance configuration...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating floor Function Usage in OpenTofu\nDESCRIPTION: Examples showing how the floor function works with integer and fractional inputs. The function returns the closest whole number less than or equal to the given value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/floor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> floor(5)\n5\n> floor(4.9)\n4\n```\n\n----------------------------------------\n\nTITLE: Basic slice Function Syntax in OpenTofu HCL\nDESCRIPTION: Shows the basic syntax and parameter structure of the slice function. It takes a list, a startindex (inclusive), and an endindex (exclusive). Returns an error if indices are out of bounds.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/slice.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nslice(list, startindex, endindex)\n```\n\n----------------------------------------\n\nTITLE: Using terraform_data with replace_triggered_by\nDESCRIPTION: Example showing how to use terraform_data to trigger replacement of resources based on a revision variable. This pattern is useful when you need to force replacement based on plain values that can't be directly used in replace_triggered_by.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/tf-data.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"revision\" {\n  default = 1\n}\n\nresource \"terraform_data\" \"replacement\" {\n  input = var.revision\n}\n\n# This resource has no convenient attribute which forces replacement,\n# but can now be replaced by any change to the revision variable value.\nresource \"example_database\" \"test\" {\n  lifecycle {\n    replace_triggered_by = [terraform_data.replacement]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Variable Definition File Syntax\nDESCRIPTION: Example of a .tfvars.json file using JSON syntax to define the same variable values as the HCL example.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/variables.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"image_id\": \"ami-abc123\",\n  \"availability_zone_names\": [\"us-west-1a\", \"us-west-1c\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variables and Locals with Complex Types in OpenTofu HCL\nDESCRIPTION: This code snippet defines a variable with an empty list default and a local variable with a structured list containing nested objects. It demonstrates how complex type structures are defined in OpenTofu configurations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/type.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"list\" {\n  default = []\n}\n\nlocals {\n  default_list = [\n    {\n      foo = \"bar\"\n      map = { bleep = \"bloop\" }\n    },\n    {\n      beep = \"boop\"\n    },\n  ]\n}\n\noutput \"list\" {\n  value = var.list != [] ? var.list : local.default_list\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Indent Function Syntax in HCL\nDESCRIPTION: Shows the basic syntax for using the 'indent' function in HCL. It takes two parameters: the number of spaces to indent and the string to be indented.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/indent.mdx#2025-04-16_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nindent(num_spaces, string)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remote State Using 'local' Backend in OpenTofu\nDESCRIPTION: Example configuration showing how to use the terraform_remote_state data source with a local backend. This approach specifies a path to a local state file, then references an output value from that state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/remote-state-data.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"vpc\" {\n  backend = \"local\"\n\n  config = {\n    path = \"...\"\n  }\n}\n\nresource \"aws_instance\" \"foo\" {\n  # ...\n  subnet_id = data.terraform_remote_state.vpc.outputs.subnet_id\n}\n```\n\n----------------------------------------\n\nTITLE: Change Representation Schema in OpenTofu\nDESCRIPTION: JSON schema that describes changes to objects in OpenTofu. It includes action types (create, read, update, delete, etc.), before/after states, unknown values handling, and sensitive data management. The schema helps track and represent resource state transitions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/json-format.mdx#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"actions\": [\"update\"],\n\n  \"before\": \"<value-representation>\",\n  \"after\": \"<value-representation>\",\n\n  \"after_unknown\": {\n    \"id\": true\n  },\n\n  \"before_sensitive\": {},\n  \"after_sensitive\": {\n    \"triggers\": {\n      \"boop\": true\n    }\n  },\n\n  \"replace_paths\": [[\"triggers\"]]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PBKDF2 Key Provider in OpenTofu\nDESCRIPTION: Example configuration for the PBKDF2 passphrase key provider, showing how to set up passphrase-based encryption with options for key length, iterations, hash function, and salt length. The provider can use a direct passphrase or chain from another key provider.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/encryption/keyprovider/pbkdf2/README.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl2\nCODE:\n```\nterraform {\n    encryption {\n        key_provider \"pbkdf2\" \"myprovider\" {\n            passphrase = \"enter a long and complex passphrase here\"\n            \n            # Alternatively, chain the passphrase from an upstream key provider:\n            chain = key_provider.other.provider\n            \n            # Adapt the key length to your encryption method needs,\n            # check the method documentation for the right key length\n            key_length = 32\n            \n            # Provide the number of iterations that should be performed.\n            # See https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html#pbkdf2\n            # for recommendations\n            iterations = 600000 \n\t\n            # Pick the hashing function. Can be sha256 or sha512.\n            hash_function = \"sha512\"\n\t        \n            # Pick the salt length in bytes.\n            salt_length = 32\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Filename Using Basename in OpenTofu\nDESCRIPTION: Demonstrates using the basename function to extract the filename 'baz.txt' from a full filesystem path. The function removes all directory components, leaving only the final portion of the path.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/basename.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> basename(\"foo/bar/baz.txt\")\nbaz.txt\n```\n\n----------------------------------------\n\nTITLE: Module Resource Replacement Command\nDESCRIPTION: Example command showing how to use the -replace option to force replacement of a resource within a nested module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/syntax.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu plan -replace=module.example.aws_instance.example\n```\n\n----------------------------------------\n\nTITLE: File Matching Examples Using fileset in OpenTofu\nDESCRIPTION: Examples demonstrating various pattern matching capabilities of the fileset function including basic wildcards, alternatives, and directory traversal.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/fileset.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> fileset(path.module, \"files/*.txt\")\n[\n  \"files/hello.txt\",\n  \"files/world.txt\",\n]\n\n> fileset(path.module, \"files/{hello,world}.txt\")\n[\n  \"files/hello.txt\",\n  \"files/world.txt\",\n]\n\n> fileset(\"${path.module}/files\", \"*\")\n[\n  \"hello.txt\",\n  \"world.txt\",\n]\n\n> fileset(\"${path.module}/files\", \"**\")\n[\n  \"hello.txt\",\n  \"world.txt\",\n  \"subdirectory/anotherfile.txt\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using the min Function with Spread Operator in Terraform\nDESCRIPTION: Example showing how to use the min function with a list or set value by using the spread operator (...) to expand the collection into individual arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/min.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> min([12, 54, 3]...)\n3\n```\n\n----------------------------------------\n\nTITLE: Split Function Examples in OpenTofu HCL\nDESCRIPTION: Examples demonstrating various use cases of the split function, including splitting a comma-separated string, splitting a string with no separators, and splitting an empty string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/split.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> split(\",\", \"foo,bar,baz\")\n[\n  \"foo\",\n  \"bar\",\n  \"baz\",\n]\n> split(\",\", \"foo\")\n[\n  \"foo\",\n]\n> split(\",\", \"\")\n[\n  \"\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using max function with direct arguments in OpenTofu\nDESCRIPTION: This example demonstrates how to use the max function with direct number arguments to find the greatest value among them.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/max.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> max(12, 54, 3)\n54\n```\n\n----------------------------------------\n\nTITLE: Basic templatefile Function Syntax in OpenTofu\nDESCRIPTION: Demonstrates the basic syntax for using the templatefile function in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntemplatefile(path, vars)\n```\n\n----------------------------------------\n\nTITLE: Inline JSON Generation in OpenTofu\nDESCRIPTION: Example of generating JSON directly in the main configuration without a separate template file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  backend_config_json = jsonencode({\n    \"backends\": [for addr in ip_addrs : \"${addr}:${port}\"],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating alltrue Function Examples in OpenTofu HCL\nDESCRIPTION: Examples showing the alltrue function's behavior with different inputs, including a list with string \"true\" and boolean true values, and a list with mixed boolean values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/alltrue.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> alltrue([\"true\", true])\ntrue\n> alltrue([true, false])\nfalse\n```\n\n----------------------------------------\n\nTITLE: Overriding Module Outputs in OpenTofu Tests (HCL)\nDESCRIPTION: Demonstrates how to use the override_module block in an OpenTofu test file to mock module outputs without actually calling the module. This example tests if a bucket name is correctly passed from a module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\noverride_module {\n  target = module.bucket_meta\n  outputs = {\n    bucket_name = \"overridden-bucket-name\"\n  }\n}\n\nrun \"check_bucket_name\" {\n  assert {\n    condition = aws_s3_bucket.example.bucket == \"overridden-bucket-name\"\n    error_message = \"incorrect bucket name\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Title Case Conversion in OpenTofu HCL\nDESCRIPTION: This example shows how to use the 'title' function to convert a string to title case, where the first letter of each word is capitalized. The function uses Unicode's definition of letters and case.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/title.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> title(\"hello world\")\nHello World\n```\n\n----------------------------------------\n\nTITLE: Calling a Built-in Function in OpenTofu HCL\nDESCRIPTION: Demonstrates the syntax for calling a built-in function (max) in OpenTofu HCL. This example shows how to use the max function to find the highest value among given arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmax(5, 12, 9)\n```\n\n----------------------------------------\n\nTITLE: Using dirname Function for Path Extraction in OpenTofu\nDESCRIPTION: Example of using the dirname function to extract the directory path from a file path. This function returns all but the last portion of a path, dependent on the host platform's path separator.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/dirname.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> dirname(\"foo/bar/baz.txt\")\nfoo/bar\n```\n\n----------------------------------------\n\nTITLE: Example Resource Reference Links\nDESCRIPTION: HashiCorp Consul resource and data source references for state management\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/remote.mdx#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nconsul_key_prefix\nconsul_keys\n```\n\n----------------------------------------\n\nTITLE: Using the chomp Function in OpenTofu\nDESCRIPTION: Examples demonstrating how the chomp function removes various types of newline characters at the end of strings. This is useful when working with strings read from files that might have trailing newline characters.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/chomp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> chomp(\"hello\\n\")\nhello\n> chomp(\"hello\\r\\n\")\nhello\n> chomp(\"hello\\n\\n\")\nhello\n```\n\n----------------------------------------\n\nTITLE: Using Expansion Symbol for Merging in OpenTofu HCL\nDESCRIPTION: This example demonstrates the use of the expansion symbol (...) to transform a list of maps into separate arguments for the merge function, effectively merging all maps in the list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/merge.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmerge([{a=\"b\", c=\"d\"}, {}, {e=\"f\", c=\"z\"}]...)\n```\n\n----------------------------------------\n\nTITLE: Defining Outputs with Interpolation in JSON Configuration\nDESCRIPTION: This snippet demonstrates how to define an output in OpenTofu using JSON syntax, including the use of interpolation to reference a resource value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/syntax/json.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": {\n    \"example\": {\n      \"value\": \"${aws_instance.example}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Log Function Basic Examples\nDESCRIPTION: Shows examples of using the log function with base 10 and base 2, demonstrating both decimal and integer results.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/log.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> log(50, 10)\n1.6989700043360185\n> log(16, 2)\n4\n```\n\n----------------------------------------\n\nTITLE: IAM Policy for DynamoDB State Locking in JSON\nDESCRIPTION: This JSON snippet demonstrates an IAM policy that allows the backend operations role to perform necessary actions on a DynamoDB table used for state locking. It includes conditions to restrict access to specific partition keys.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/s3.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n      {\n        \"Effect\" : \"Allow\",\n        \"Action\" : [\n          \"dynamodb:DeleteItem\",\n          \"dynamodb:GetItem\",\n          \"dynamodb:PutItem\",\n          \"dynamodb:Query\",\n          \"dynamodb:UpdateItem\"\n        ],\n        \"Resource\" : [\"arn:aws:dynamodb:*:*:table/myorg-state-lock-table\"],\n        \"Condition\" : {\n          \"ForAllValues:StringEquals\" : {\n            \"dynamodb:LeadingKeys\" : [\n              \"myorg-tofu-states/myapp/production/tfstate\",\n              \"myorg-tofu-states/myapp/production/tfstate-md5\"\n            ]\n          }\n        }\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying List Variables in Unix-style Shell and Windows Command Prompt\nDESCRIPTION: Demonstrates how to specify list-type input variables using the -var flag in both Unix-style shells and Windows Command Prompt.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/plan.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Unix-style shell\ntofu plan -var 'name=[\"a\", \"b\", \"c\"]'\n\n# Windows Command Prompt (do not use PowerShell on Windows)\ntofu plan -var \"name=[\\\"a\\\", \\\"b\\\", \\\"c\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: State Pull with Variable File\nDESCRIPTION: Command example demonstrating how to pull state while loading variables from a tfvars file using the -var-file flag.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/pull.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntofu state pull -var-file=FILENAME\n```\n\n----------------------------------------\n\nTITLE: Using sensitive function with file content in OpenTofu HCL\nDESCRIPTION: Example of using the sensitive function to mark file content as sensitive in a local variable. This prevents the content from being displayed in CLI output or logs.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/sensitive.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  sensitive_content = sensitive(file(\"${path.module}/sensitive.txt\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Map-based Template in OpenTofu\nDESCRIPTION: Example of using the templatefile function with a map of configuration values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ntemplatefile(\n               \"${path.module}/config.tftpl\",\n               {\n                 config = {\n                   \"x\"   = \"y\"\n                   \"foo\" = \"bar\"\n                   \"key\" = \"value\"\n                 }\n               }\n              )\n```\n\n----------------------------------------\n\nTITLE: Using yamlencode Function with Maps and Lists in OpenTofu\nDESCRIPTION: Examples of using the yamlencode function to convert OpenTofu values into YAML block syntax. The examples show encoding simple key-value maps, maps with lists, and nested structures.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/yamlencode.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> yamlencode({\"a\":\"b\", \"c\":\"d\"})\n\"a\": \"b\"\n\"c\": \"d\"\n\n> yamlencode({\"foo\":[1, 2, 3], \"bar\": \"baz\"})\n\"bar\": \"baz\"\n\"foo\":\n- 1\n- 2\n- 3\n\n> yamlencode({\"foo\":[1, {\"a\":\"b\",\"c\":\"d\"}, 3], \"bar\": \"baz\"})\n\"bar\": \"baz\"\n\"foo\":\n- 1\n- \"a\": \"b\"\n  \"c\": \"d\"\n- 3\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Conversion to Uppercase in OpenTofu HCL\nDESCRIPTION: This code snippet shows examples of using the upper function in OpenTofu to convert strings to uppercase. It demonstrates the function's ability to handle both Latin and non-Latin characters.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/upper.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> upper(\"hello\")\nHELLO\n> upper(\"алло!\")\nАЛЛО!\n```\n\n----------------------------------------\n\nTITLE: Argument Alignment Example in HCL\nDESCRIPTION: Demonstrates proper alignment of equals signs for multiple arguments with single-line values appearing on consecutive lines at the same nesting level.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/syntax/style.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nami           = \"abc123\"\ninstance_type = \"t2.micro\"\n```\n\n----------------------------------------\n\nTITLE: OpenTofu Directory Layout for Testing\nDESCRIPTION: Examples of different directory structures for organizing OpenTofu test files, showing both flat and nested layouts.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# FlatLayout placeholder - would show directory structure with test files next to source files\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n# FlatLayoutModule placeholder - would show module directory structure with flat test layout\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n# NestedLayout placeholder - would show directory structure with tests in separate folder\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n# NestedLayoutModule placeholder - would show module directory structure with nested test layout\n```\n\n----------------------------------------\n\nTITLE: Retrieving List Element by Index in OpenTofu HCL\nDESCRIPTION: Demonstrates how to use the element function to retrieve the second item (index 1) from a list of strings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/element.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nelement([\"a\", \"b\", \"c\"], 1)\n```\n\n----------------------------------------\n\nTITLE: Using Format Function with JSON Encoding in OpenTofu HCL\nDESCRIPTION: Demonstrates the use of %#v verb for JSON encoding of various data types including strings, booleans, numbers, objects, arrays, and null values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/format.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> format(\"%#v\", \"hello\")\n\"\\\"hello\\\"\"\n> format(\"%#v\", true)\n\"true\"\n> format(\"%#v\", 1)\n\"1\"\n> format(\"%#v\", {a = 1})\n\"{\\\"a\\\":1}\"\n> format(\"%#v\", [true])\n\"[true]\"\n> format(\"%#v\", null)\n\"null\"\n```\n\n----------------------------------------\n\nTITLE: Log Function with Ceil for Binary Digits Calculation\nDESCRIPTION: Demonstrates how to combine the log and ceil functions to calculate the minimum number of binary digits needed to represent different quantities of distinct values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/log.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> ceil(log(15, 2))\n4\n> ceil(log(16, 2))\n4\n> ceil(log(17, 2))\n5\n```\n\n----------------------------------------\n\nTITLE: Using urlencode Function with Various String Types in HCL\nDESCRIPTION: Examples demonstrating the urlencode function with regular strings, special characters, and integrating the result into URL construction. The function encodes special characters using percent encoding and handles UTF-8 characters appropriately.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/urlencode.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> urlencode(\"Hello World!\")\nHello+World%21\n> urlencode(\"☃\")\n%E2%98%83\n> \"http://example.com/search?q=${urlencode(\"tofu urlencode\")}\"\nhttp://example.com/search?q=tofu+urlencode\n```\n\n----------------------------------------\n\nTITLE: Illustrating Resource Spec Structure in OpenTofu\nDESCRIPTION: This snippet demonstrates the structure of a resource specification in a resource address. It includes the resource type, name, and optional index for multiple instances.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/state/resource-addressing.mdx#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nresource_type.resource_name[instance index]\n```\n\n----------------------------------------\n\nTITLE: Defining RSA Decryption Function in OpenTofu HCL\nDESCRIPTION: Defines the rsadecrypt function which takes two parameters: ciphertext (base64-encoded) and privatekey (PEM-encoded RSA private key). The function decrypts the ciphertext using PKCS #1 v1.5 padding scheme.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/rsadecrypt.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrsadecrypt(ciphertext, privatekey)\n```\n\n----------------------------------------\n\nTITLE: Standard Heredoc in a Block Context in OpenTofu HCL\nDESCRIPTION: Example of a standard heredoc string within a block construct, showing how the indentation in the file affects the string content.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/strings.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nblock {\n  value = <<EOT\nhello\nworld\nEOT\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Resources in OpenTofu Tests\nDESCRIPTION: Shows how to use override_resource blocks to mock specific resources without using the real provider, allowing focused testing of configuration logic without creating actual infrastructure.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\noverride_resource \"aws_s3_bucket.test_bucket\" {\n  # Values to use for the bucket's computed fields\n  values = {\n    hosted_zone_id   = \"Z3BJ6K6RIION7M\"\n    region           = \"us-west-2\"\n    website_endpoint = \"s3-website-us-west-2.amazonaws.com\"\n  }\n}\n\nrun \"validate_bucket\" {\n  command = \"plan\"\n\n  variables {\n    bucket_name = \"test-bucket\"\n  }\n\n  assert {\n    condition     = aws_s3_bucket.test_bucket.bucket == var.bucket_name\n    error_message = \"Incorrect bucket name\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing For-Each Resource State in OpenTofu - PowerShell\nDESCRIPTION: Example showing how to display state information for a resource using for_each meta-argument in PowerShell.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/show.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state show 'packet_device.worker[\\\"example\\\"]'\n```\n\n----------------------------------------\n\nTITLE: Data Source Usage in OpenTofu\nDESCRIPTION: Illustrates how to use data sources to fetch existing infrastructure information instead of creating new resources.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_vpc\" \"main\" {\n  tags = {\n    Environment = \"production\"\n  }\n}\n\ndata \"aws_subnet_ids\" \"main\" {\n  vpc_id = data.aws_vpc.main.id\n}\n\nmodule \"consul_cluster\" {\n  source = \"./modules/aws-consul-cluster\"\n\n  vpc_id     = data.aws_vpc.main.id\n  subnet_ids = data.aws_subnet_ids.main.ids\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a UUID with the uuid Function in OpenTofu\nDESCRIPTION: Demonstrates how to use the uuid function to generate a random Version 4 UUID. This example shows the function call and the format of the returned UUID string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/uuid.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> uuid()\nb5ee72a3-54dd-c4b8-551c-4bdc0204cedb\n```\n\n----------------------------------------\n\nTITLE: Specifying Variables with -var in Windows Command Prompt\nDESCRIPTION: Shows how to specify input variables using the -var flag in Windows Command Prompt (cmd.exe). Includes both simple values and values containing double quotes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/plan.mdx#2025-04-16_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\ntofu plan -var \"name=value\"\n```\n\nLANGUAGE: cmd\nCODE:\n```\ntofu plan -var \"name=va\\\"lue\"\n```\n\n----------------------------------------\n\nTITLE: Using zipmap Function to Create a Map in HCL\nDESCRIPTION: Illustrates an example of using the zipmap function to create a map from two lists. The first list contains string keys, and the second list contains integer values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/zipmap.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> zipmap([\"a\", \"b\"], [1, 2])\n{\n  \"a\" = 1\n  \"b\" = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Logical AND in OpenTofu\nDESCRIPTION: Demonstrates the logical AND operator that returns true only if both boolean values are true.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\na && b\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenTofu GPG Key on Debian-based Systems\nDESCRIPTION: Commands to download and configure the OpenTofu GPG key, which verifies package authenticity and ensures they haven't been tampered with during the installation process.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/deb.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n{DebStep2Script}\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Instance Resource with Nested Blocks in HCL\nDESCRIPTION: Example of an AWS EC2 instance resource definition with nested ebs_block_device blocks that shows the structure used for later reference examples.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/references.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-abc123\"\n  instance_type = \"t2.micro\"\n\n  ebs_block_device {\n    device_name = \"sda2\"\n    volume_size = 16\n  }\n  ebs_block_device {\n    device_name = \"sda3\"\n    volume_size = 20\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Complete Module Structure in Shell\nDESCRIPTION: This shell command uses the 'tree' utility to display the file structure of a complete OpenTofu module following the standard structure. It includes all optional elements, showing the root module files, nested modules directory, and examples directory.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/structure.mdx#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ tree complete-module/\n.\n├── README.md\n├── main.tf\n├── variables.tf\n├── outputs.tf\n├── ...\n├── modules/\n│   ├── nestedA/\n│   │   ├── README.md\n│   │   ├── variables.tf\n│   │   ├── main.tf\n│   │   ├── outputs.tf\n│   ├── nestedB/\n│   ├── .../\n├── examples/\n│   ├── exampleA/\n│   │   ├── main.tf\n│   ├── exampleB/\n│   ├── .../\n```\n\n----------------------------------------\n\nTITLE: Parsing Resource Drift Message in OpenTofu JSON Output\nDESCRIPTION: This snippet demonstrates the structure of a resource_drift message in OpenTofu's JSON output. It includes information about detected changes to a resource made outside of OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"random_pet.animal: Drift detected (update)\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.705503-04:00\",\n  \"change\": {\n    \"resource\": {\n      \"addr\": \"random_pet.animal\",\n      \"module\": \"\",\n      \"resource\": \"random_pet.animal\",\n      \"implied_provider\": \"random\",\n      \"resource_type\": \"random_pet\",\n      \"resource_name\": \"animal\",\n      \"resource_key\": null\n    },\n    \"action\": \"update\"\n  },\n  \"type\": \"resource_drift\"\n}\n```\n\n----------------------------------------\n\nTITLE: External Encryption Method Output JSON Format\nDESCRIPTION: JSON output format that external encryption methods must return to OpenTofu. This includes the encrypted or decrypted data and metadata necessary for decryption.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": \"base64-encoded-result\",\n  \"metadata\": \"base64-encoded-metadata\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Complex Variable Types with Environment Variables\nDESCRIPTION: Example of setting a complex variable type (list) using environment variables, requiring specific syntax and escaping.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/variables.mdx#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ export TF_VAR_image_id='ami-abc123'\n$ export TF_VAR_availability_zone_names='[\"us-west-1b\",\"us-west-1d\"]'\n```\n\n----------------------------------------\n\nTITLE: Creating OpenTofu Repository Source List on Debian\nDESCRIPTION: Commands to create the OpenTofu source list configuration file for apt, which tells the package manager where to find the OpenTofu packages.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/deb.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n{DebStep3Script}\n```\n\n----------------------------------------\n\nTITLE: Pushing OpenTofu State in PowerShell (Windows)\nDESCRIPTION: Example of pushing OpenTofu state using PowerShell on Windows, ensuring UTF-8 encoding without BOM using the Set-Content cmdlet.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/push.mdx#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ntofu state push | sc terraform.tfstate\n```\n\n----------------------------------------\n\nTITLE: PowerShell State Pull with UTF-8 Encoding\nDESCRIPTION: PowerShell-specific command for pulling state and saving it to a file with proper UTF-8 encoding using Set-Content.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/pull.mdx#2025-04-16_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ntofu state pull | sc terraform.tfstate\n```\n\n----------------------------------------\n\nTITLE: Listing All Outputs with tofu output\nDESCRIPTION: Shell command example showing how to list all outputs from a state file, displaying regular outputs and indicating sensitive values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/output.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\n$ tofu output\ninstance_ips = [\n  \"54.43.114.12\",\n  \"52.122.13.4\",\n  \"52.4.116.53\"\n]\nlb_address = \"my-app-alb-1657023003.us-east-1.elb.amazonaws.com\"\npassword = <sensitive>\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Relationship in OpenTofu HCL\nDESCRIPTION: Demonstrates a simple flat configuration showing relationship between AWS VPC and subnet resources using OpenTofu expressions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_vpc\" \"example\" {\n  cidr_block = \"10.1.0.0/16\"\n}\n\nresource \"aws_subnet\" \"example\" {\n  vpc_id = aws_vpc.example.id\n\n  availability_zone = \"us-west-2b\"\n  cidr_block        = cidrsubnet(aws_vpc.example.cidr_block, 4, 1)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of flatten Function in OpenTofu HCL\nDESCRIPTION: Simple example demonstrating how the flatten function eliminates nested lists from a list to produce a single-level list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/flatten.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> flatten([[\"a\", \"b\"], [], [\"c\"]])\n[\"a\", \"b\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: Using FileExists Function in OpenTofu (HCL)\nDESCRIPTION: The basic syntax for the fileexists function which takes a path parameter and returns a boolean indicating if the file exists. This function works only with regular files and is evaluated during configuration parsing.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/fileexists.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfileexists(path)\n```\n\n----------------------------------------\n\nTITLE: Using the sha1 Function in OpenTofu\nDESCRIPTION: This example demonstrates how to use the sha1 function to compute the SHA1 hash of a string. The function takes a string input (\"hello world\"), applies the SHA1 algorithm, and returns the result as a lowercase hexadecimal string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/sha1.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> sha1(\"hello world\")\n2aae6c35c94fcfb415dbe95f408b9ce91ee846ed\n```\n\n----------------------------------------\n\nTITLE: Equivalent Filtering Using For Expression with Map\nDESCRIPTION: An alternative approach to matchkeys using a for expression with a map, which achieves similar results but with different ordering of the output elements.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/matchkeys.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> [for i, z in {\"i-123\"=\"us-west\",\"i-abc\"=\"us-east\",\"i-def\"=\"us-east\"}: i if z == \"us-east\"]\n[\n  \"i-def\",\n  \"i-abc\",\n]\n```\n\n----------------------------------------\n\nTITLE: Using Signum Function in HCL\nDESCRIPTION: Demonstrates usage of the signum function with different numeric inputs. Shows examples with negative numbers (-13), zero (0), and positive numbers (344), returning -1, 0, and 1 respectively.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/signum.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsignum(-13)\n-1\nsignum(0)\n0\nsignum(344)\n1\n```\n\n----------------------------------------\n\nTITLE: Using the base64gzip Function in OpenTofu\nDESCRIPTION: The base64gzip function compresses a string with gzip and then encodes the result in Base64 encoding. It first encodes the characters from the string as UTF-8, applies gzip compression, and finally applies Base64 encoding.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/base64gzip.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`base64gzip` compresses a string with gzip and then encodes the result in\nBase64 encoding.\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Expression Syntax in HCL\nDESCRIPTION: The fundamental syntax for conditional expressions in OpenTofu, showing the structure of condition, true value, and false value separated by question mark and colon.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/conditionals.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncondition ? true_val : false_val\n```\n\n----------------------------------------\n\nTITLE: Variable Type Definition in OpenTofu\nDESCRIPTION: Shows how to define an input variable with specific type constraints for an AMI object.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"ami\" {\n  type = object({\n    id           = string\n    architecture = string\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Instances of a Resource with tofu state rm\nDESCRIPTION: This command removes all instances of a packet_device resource named 'worker' from the OpenTofu state, causing OpenTofu to forget about these resources without actually destroying them in the remote system.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state rm 'packet_device.worker'\n```\n\n----------------------------------------\n\nTITLE: Using the timeadd Function Syntax in OpenTofu HCL\nDESCRIPTION: Demonstrates the basic syntax of the timeadd function which takes a timestamp and a duration as arguments. The timestamp must be in RFC 3339 format, and the duration is expressed as a combination of time units.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/timeadd.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntimeadd(timestamp, duration)\n```\n\n----------------------------------------\n\nTITLE: Using endswith Function in HCL\nDESCRIPTION: These examples demonstrate how to use the endswith function in OpenTofu. The function returns true if the first string ends with the exact suffix provided, and false otherwise.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/endswith.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> endswith(\"hello world\", \"world\")\ntrue\n\n> endswith(\"hello world\", \"hello\")\nfalse\n```\n\n----------------------------------------\n\nTITLE: Converting Mixed-Type Elements to a Set in OpenTofu\nDESCRIPTION: Shows how mixed-type elements (strings and numbers) in a list are converted to the most general type when creating a set. In this case, the number is converted to a string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/toset.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntoset([\"a\", \"b\", 3])\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Data Source in OpenTofu\nDESCRIPTION: Example configuration for setting up a Consul remote state data source in OpenTofu. Shows how to reference state stored in Consul.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/consul.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"consul\"\n  config = {\n    path = \"full/path\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Template String Function Syntax\nDESCRIPTION: Demonstrates the basic syntax of the templatestring function which takes a string and variables map as arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatestring.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntemplatestring(str, vars)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu Package on Fedora Using DNF\nDESCRIPTION: Command to install the OpenTofu package from the Fedora repository using the DNF package manager. This will download and install the OpenTofu RPM package and its dependencies.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/fedora.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndnf install opentofu\n```\n\n----------------------------------------\n\nTITLE: Using alltrue Function Syntax in OpenTofu HCL\nDESCRIPTION: The basic syntax for using the alltrue function in OpenTofu configuration files, which takes a list as its parameter.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/alltrue.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nalltrue(list)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating join Function Usage in OpenTofu HCL\nDESCRIPTION: Provides examples of using the join function with different separators and lists. It shows how to join multiple strings and a single-element list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/join.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> join(\"-\", [\"foo\", \"bar\", \"baz\"])\n\"foo-bar-baz\"\n> join(\", \", [\"foo\", \"bar\", \"baz\"])\nfoo, bar, baz\n> join(\", \", [\"foo\"])\nfoo\n```\n\n----------------------------------------\n\nTITLE: Filtering Resources by ID in OpenTofu State\nDESCRIPTION: This example shows how to use the '-id' option with 'tofu state list' to find a specific resource by its ID in the OpenTofu state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/list.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu state list -id=sg-1234abcd\nmodule.elb.aws_security_group.sg\n```\n\n----------------------------------------\n\nTITLE: Demonstrating abs Function Usage in OpenTofu\nDESCRIPTION: This code snippet shows examples of using the abs function with different numeric inputs. It demonstrates how the function handles positive, zero, and negative values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/abs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> abs(23)\n23\n> abs(0)\n0\n> abs(-12.4)\n12.4\n```\n\n----------------------------------------\n\nTITLE: Basic try Function Usage Examples in HCL\nDESCRIPTION: Simple examples showing try function usage with object attributes and fallback values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/try.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> local.foo\n{\n  \"bar\" = \"baz\"\n}\n> try(local.foo.bar, \"fallback\")\nbaz\n> try(local.foo.boop, \"fallback\")\nfallback\n```\n\n----------------------------------------\n\nTITLE: Example Usage of lookup Function in OpenTofu\nDESCRIPTION: Demonstrates practical examples of using the lookup function to retrieve values from maps, showing both a successful lookup and a default value fallback when the key doesn't exist.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/lookup.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> lookup({a=\"ay\", b=\"bee\"}, \"a\", \"what?\")\nay\n> lookup({a=\"ay\", b=\"bee\"}, \"c\", \"what?\")\nwhat?\n```\n\n----------------------------------------\n\nTITLE: Using base64encode Function with String in OpenTofu\nDESCRIPTION: This example demonstrates how to use the base64encode function to encode a string in Base64 format. The function first encodes the input string as UTF-8 and then applies Base64 encoding to the result.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/base64encode.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> base64encode(\"Hello World\")\nSGVsbG8gV29ybGQ=\n```\n\n----------------------------------------\n\nTITLE: Using the Type Function in OpenTofu Console\nDESCRIPTION: This example demonstrates how to use the `type` function in the OpenTofu console to inspect variable types. It shows the output of checking types for both an empty tuple and a complex tuple with nested objects, which helps explain inconsistent type errors.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/type.mdx#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n> type(var.list)\ntuple\n> type(local.default_list)\ntuple([\n    object({\n        foo: string,\n        map: object({\n            bleep: string,\n        }),\n    }),\n    object({\n        beep: string,\n    }),\n])\n```\n\n----------------------------------------\n\nTITLE: Using the tostring Function with Various Data Types in OpenTofu\nDESCRIPTION: Example showing how the tostring function converts different data types to strings. The function accepts strings, numbers, booleans, and null values, but throws an error for non-primitive types like tuples or lists.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/tostring.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> tostring(\"hello\")\n\"hello\"\n> tostring(1)\n\"1\"\n> tostring(true)\n\"true\"\n> tostring(null)\ntostring(null)\n> tostring([])\nError: Invalid function argument\n\nInvalid value for \"v\" parameter: cannot convert tuple to string.\n```\n\n----------------------------------------\n\nTITLE: Defining the Chunklist Function Syntax in HCL\nDESCRIPTION: Shows the basic syntax for using the chunklist function. It takes a list and a chunk size as arguments, returning a list of lists.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/chunklist.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nchunklist(list, chunk_size)\n```\n\n----------------------------------------\n\nTITLE: Using replace Function with Regular Expression in OpenTofu HCL\nDESCRIPTION: Illustrates how to use the replace function with a regular expression. In this example, it replaces a pattern matching 'w' followed by any characters up to 'd' with 'everybody'.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/replace.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> replace(\"hello world\", \"/w.*d/\", \"everybody\")\nhello everybody\n```\n\n----------------------------------------\n\nTITLE: Defining Fixed Object Collection Using Block Syntax in HCL\nDESCRIPTION: Demonstrates how to define a fixed collection of objects using nested block syntax in HCL. This is the recommended approach for readability when specifying a known set of sub-objects.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/attr-as-blocks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nexample {\n  foo = \"bar\"\n}\nexample {\n  foo = \"baz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Function Call Syntax in OpenTofu\nDESCRIPTION: Demonstrates the basic syntax for calling functions in OpenTofu configurations. Shows the standard pattern of function name followed by parentheses containing arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/function-calls.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n<FUNCTION NAME>(<ARGUMENT 1>, <ARGUMENT 2>)\n```\n\n----------------------------------------\n\nTITLE: Applying OpenTofu Configuration with Resource Replacement\nDESCRIPTION: This command demonstrates how to apply an OpenTofu configuration while replacing a specific resource instance, even if it's not marked as tainted.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/untaint.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu apply -replace=\"aws_instance.example[0]\"\n```\n\n----------------------------------------\n\nTITLE: Trim Function Examples in HCL\nDESCRIPTION: Examples demonstrating how the trim function removes specified characters from the start and end of strings in different scenarios.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/trim.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> trim(\"?!hello?!\", \"!?\")\n\"hello\"\n\n> trim(\"foobar\", \"far\")\n\"oob\"\n\n> trim(\"   hello! world.!  \", \"! \")\n\"hello! world.\"\n```\n\n----------------------------------------\n\nTITLE: Using coalescelist Function with List Expansion in OpenTofu\nDESCRIPTION: Example showing how to use the coalescelist function with the spread operator (...) to expand a list of lists as individual arguments to the function.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/coalescelist.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> coalescelist([[], [\"c\", \"d\"]]...)\n[\n  \"c\",\n  \"d\",\n]\n```\n\n----------------------------------------\n\nTITLE: regexall Usage Examples\nDESCRIPTION: Demonstrates various use cases of the regexall function including pattern matching, length checking, and boolean validation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/regexall.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> regexall(\"[a-z]+\", \"1234abcd5678efgh9\")\n[\n  \"abcd\",\n  \"efgh\",\n]\n\n> length(regexall(\"[a-z]+\", \"1234abcd5678efgh9\"))\n2\n\n> length(regexall(\"[a-z]+\", \"123456789\")) > 0\nfalse\n```\n\n----------------------------------------\n\nTITLE: Recursive Flattening of Deeply Nested Lists in OpenTofu HCL\nDESCRIPTION: Example showing how deeply nested lists are recursively flattened into a single-level list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/flatten.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> flatten([[[\"a\", \"b\"], []], [\"c\"]])\n[\"a\", \"b\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Credential Environment Variables\nDESCRIPTION: Shell commands for setting up PostgreSQL credentials as environment variables\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/pg.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shellsession\nCODE:\n```\n$ export PGUSER=user\n$ read -s PGPASSWORD\n$ export PGPASSWORD\n$ tofu init\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: Examples of setting various OpenTofu variables through environment variables\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_VAR_region=us-west-1\nexport TF_VAR_ami=ami-049d8641\nexport TF_VAR_alist='[1,2,3]'\nexport TF_VAR_amap='{ foo = \"bar\", baz = \"qux\" }'\n```\n\n----------------------------------------\n\nTITLE: Computing MD5 Hash of a String in OpenTofu\nDESCRIPTION: This example demonstrates how to use the md5 function in OpenTofu to compute the MD5 hash of a string. The function takes a string input, computes its MD5 hash, and returns the result as a lowercase hexadecimal string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/md5.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> md5(\"hello world\")\n5eb63bbbe01eeed093cb22bb8f5acdc3\n```\n\n----------------------------------------\n\nTITLE: Using 'one' Function with Sets in OpenTofu HCL\nDESCRIPTION: This example demonstrates the use of the 'one' function with sets in OpenTofu. It shows how to extract a single element from a set with zero or one elements, and the error that occurs when used with a multi-element set.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/one.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> one(toset([]))\nnull\n> one(toset([\"hello\"]))\n\"hello\"\n> one(toset([\"hello\",\"goodbye\"]))\n\nError: Invalid function argument\n\nInvalid value for \"list\" parameter: must be a list, set, or tuple value with\neither zero or one elements.\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Provider Instances for a Module in OpenTofu HCL\nDESCRIPTION: This snippet shows how to configure multiple provider instances for AWS in different regions and pass them to a child module that requires both source and destination configurations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/meta-arguments/module-providers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  alias  = \"usw1\"\n  region = \"us-west-1\"\n}\n\nprovider \"aws\" {\n  alias  = \"usw2\"\n  region = \"us-west-2\"\n}\n\nmodule \"tunnel\" {\n  source    = \"./tunnel\"\n  providers = {\n    aws.src = aws.usw1\n    aws.dst = aws.usw2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Main Module Configuration with For_Each\nDESCRIPTION: Example showing a module with for_each that creates multiple instances with different parameter values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation/module-expansion.md#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"test\" {\n  for_each = {\"a\": \"first\", \"b\": \"second\" }\n  source = \"./mod\"\n  name = each.key\n  description = each.value\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resources in a Specific Module in OpenTofu State\nDESCRIPTION: This example demonstrates how to list resources within a specific module and its submodules using the 'tofu state list' command.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/list.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu state list module.elb\nmodule.elb.aws_elb.main\nmodule.elb.module.secgroups.aws_security_group.sg\n```\n\n----------------------------------------\n\nTITLE: Handling Unicode characters with length function in OpenTofu\nDESCRIPTION: Example demonstrating how the length function counts Unicode characters (grapheme clusters) rather than bytes. The function counts emoji characters correctly according to Unicode Standard Annex #29.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/length.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> length(\"👾🕹️\")\n2\n```\n\n----------------------------------------\n\nTITLE: Basic Workspace Commands in OpenTofu CLI\nDESCRIPTION: Essential commands for managing OpenTofu workspaces, including listing available workspaces, creating new workspaces, deleting workspaces, and selecting the active workspace.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/workspaces/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu workspace list\ntofu workspace new\ntofu workspace delete\ntofu workspace select\n```\n\n----------------------------------------\n\nTITLE: Using max function with a collection in OpenTofu\nDESCRIPTION: This example shows how to use the max function with a list or set value by using the spread operator (...) to expand the collection into individual arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/max.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> max([12, 54, 3]...)\n54\n```\n\n----------------------------------------\n\nTITLE: Basic lookup Function Syntax in OpenTofu\nDESCRIPTION: The lookup function retrieves a value from a map using a specific key. If the key doesn't exist, it returns the specified default value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/lookup.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlookup(map, key, default)\n```\n\n----------------------------------------\n\nTITLE: Defining replace Function Syntax in OpenTofu HCL\nDESCRIPTION: Demonstrates the syntax for using the replace function in OpenTofu. It takes three arguments: the original string, the substring to replace, and the replacement string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/replace.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nreplace(string, substring, replacement)\n```\n\n----------------------------------------\n\nTITLE: Basic SetSubtract Function Syntax\nDESCRIPTION: Shows the basic syntax for using the setsubtract function in OpenTofu HCL.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/setsubtract.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsetsubtract(a, b)\n```\n\n----------------------------------------\n\nTITLE: Examples of the startswith Function in OpenTofu HCL\nDESCRIPTION: These examples demonstrate the startswith function in OpenTofu, showing how it returns true when a string begins with the specified prefix and false otherwise.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/startswith.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> startswith(\"hello world\", \"hello\")\ntrue\n\n> startswith(\"hello world\", \"world\")\nfalse\n```\n\n----------------------------------------\n\nTITLE: Using contains Function Syntax in OpenTofu HCL\nDESCRIPTION: The contains function signature that accepts a list and a value parameter, returning a boolean indicating whether the value exists in the list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/contains.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncontains(list, value)\n```\n\n----------------------------------------\n\nTITLE: Using the min Function with Multiple Arguments in Terraform\nDESCRIPTION: Basic example of the min function that takes multiple numeric arguments and returns the smallest value (3).\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/min.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> min(12, 54, 3)\n3\n```\n\n----------------------------------------\n\nTITLE: Referencing Commands to Run Root Modules in OpenTofu\nDESCRIPTION: Examples of OpenTofu CLI commands that are used to run the root module. These commands are tofu plan and tofu apply, which are executed in the working directory containing .tf and/or .tofu files.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu plan\n```\n\nLANGUAGE: bash\nCODE:\n```\ntofu apply\n```\n\n----------------------------------------\n\nTITLE: Using Min Function with Multiple Arguments\nDESCRIPTION: Example showing how to use the min function with multiple direct number arguments to find the smallest value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/function-calls.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmin(55, 3453, 2)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu using Homebrew\nDESCRIPTION: This command installs OpenTofu using the Homebrew package manager. It assumes Homebrew is already installed on the system.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/homebrew.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install opentofu\n```\n\n----------------------------------------\n\nTITLE: Removing Prefix Using trimprefix Function in OpenTofu\nDESCRIPTION: Demonstrates successful removal of a prefix from a string where the prefix exists at the start.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/trimprefix.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntrimprefix(\"helloworld\", \"hello\")\n```\n\n----------------------------------------\n\nTITLE: Logical NOT in OpenTofu\nDESCRIPTION: Demonstrates the logical NOT operator that inverts a boolean value, returning true if the value is false and vice versa.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\n!a\n```\n\n----------------------------------------\n\nTITLE: Certificate Expiration Check Using Plantimestamp\nDESCRIPTION: Example showing how to use plantimestamp in a custom condition to verify TLS certificate expiration\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/plantimestamp.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncheck \"opentofu_org_certificate\" {\n  data \"tls_certificate\" \"opentofu_org\" {\n    url = \"https://www.opentofu.org/\"\n  }\n\n  assert {\n    condition = timecmp(plantimestamp(), data.tls_certificate.opentofu_org.certificates[0].not_after) < 0\n    error_message = \"opentofu.org certificate has expired\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Module Path Structure in OpenTofu\nDESCRIPTION: This snippet shows the general structure of a module path in a resource address. It includes the module keyword, module name, and optional index for multiple instances.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/state/resource-addressing.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodule.module_name[module index]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom CLI Config File Path\nDESCRIPTION: Specifies a custom location for the OpenTofu CLI configuration file\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_CLI_CONFIG_FILE=\"$HOME/.tofurc-custom\"\n```\n\n----------------------------------------\n\nTITLE: List Variable Template Example\nDESCRIPTION: Shows how to use templatestring with a list variable, joining the elements with commas.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatestring.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"result\" {\n  value = templatestring(\"List Items: $${join(\\\", \\\", list)}\", { list=[\"value1\",\"value2\",\"value3\"] })\n}\n```\n\n----------------------------------------\n\nTITLE: Using formatdate Function in OpenTofu\nDESCRIPTION: Basic syntax for the formatdate function that converts a timestamp into a different time format. It takes a format specification and a timestamp string in RFC 3339 format as arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/formatdate.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nformatdate(spec, timestamp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Client Timeout\nDESCRIPTION: Sets the timeout duration for remote registry client requests\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_REGISTRY_CLIENT_TIMEOUT=15\n```\n\n----------------------------------------\n\nTITLE: Explicitly Passing Providers to Modules in OpenTofu\nDESCRIPTION: This example shows how to explicitly pass provider configurations to a child module using the providers argument in the module block. It defines multiple AWS provider configurations and passes a specific one to the child module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/providers.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# The default \"aws\" configuration is used for AWS resources in the root\n# module where no explicit provider instance is selected.\nprovider \"aws\" {\n  region = \"us-west-1\"\n}\n\n# An alternate configuration is also defined for a different\n# region, using the alias \"usw2\".\nprovider \"aws\" {\n  alias  = \"usw2\"\n  region = \"us-west-2\"\n}\n\n# An example child module is instantiated with the alternate configuration,\n# so any AWS resources it defines will use the us-west-2 region.\nmodule \"example\" {\n  source    = \"./example\"\n  providers = {\n    aws = aws.usw2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Wrap-Around Behavior in OpenTofu HCL Element Function\nDESCRIPTION: Shows how the element function handles an index greater than the list length by wrapping around to the beginning of the list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/element.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nelement([\"a\", \"b\", \"c\"], 3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Backend with CLI Input in HCL\nDESCRIPTION: Example showing how to configure the remote backend using CLI input with a separate backend configuration file, useful for keeping sensitive information out of version control.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/remote.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\nterraform {\n  required_version = \"~> 0.12.0\"\n\n  backend \"remote\" {}\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# config.remote.tfbackend\nworkspaces { name = \"workspace\" }\nhostname     = \"app.example.io\"\norganization = \"company\"\n```\n\n----------------------------------------\n\nTITLE: Template File Using Map Variables in OpenTofu\nDESCRIPTION: Example of a template file (config.tftpl) that iterates through a map to generate configuration settings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n%{ for config_key, config_value in config }\nset ${config_key} = ${config_value}\n%{ endfor ~}\n```\n\n----------------------------------------\n\nTITLE: Handling Mixed Sensitive and Non-Sensitive JSON Data in OpenTofu HCL\nDESCRIPTION: This example shows how to handle a JSON string containing both sensitive and non-sensitive data. It demonstrates declaring a sensitive variable, decoding JSON, and selectively exposing non-sensitive parts using the nonsensitive function.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/nonsensitive.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"mixed_content_json\" {\n  description = \"A JSON string containing a mixture of sensitive and non-sensitive values.\"\n  type        = string\n  sensitive   = true\n}\n\nlocals {\n  # mixed_content is derived from var.mixed_content_json, so it\n  # is also considered to be sensitive.\n  mixed_content = jsondecode(var.mixed_content_json)\n\n  # password_from_json is derived from mixed_content, so it's\n  # also considered to be sensitive.\n  password_from_json = local.mixed_content[\"password\"]\n\n  # username_from_json would normally be considered to be\n  # sensitive too, but system-specific knowledge tells us\n  # that the username is a non-sensitive fragment of the\n  # original document, and so we can override OpenTofu's\n  # determination.\n  username_from_json = nonsensitive(local.mixed_content[\"username\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Using filesha512 Function in OpenTofu\nDESCRIPTION: The filesha512 function computes SHA512 hash of file contents. This is a variant of sha512 that works on files rather than literal strings and supports binary files unlike the file function which accepts only UTF-8 text.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/filesha512.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`filesha512` is a variant of [`sha512`](../../language/functions/sha512.mdx) that hashes the contents of a given file rather than a literal string.\n```\n\n----------------------------------------\n\nTITLE: Example of filebase64 Function in OpenTofu\nDESCRIPTION: This example demonstrates reading a file named hello.txt from the current module directory and converting its contents to a base64-encoded string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/filebase64.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> filebase64(\"${path.module}/hello.txt\")\nSGVsbG8gV29ybGQ=\n```\n\n----------------------------------------\n\nTITLE: Using timecmp Function in OpenTofu HCL\nDESCRIPTION: The basic syntax for the timecmp function, which takes two timestamp arguments and returns a number representing their ordering.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/timecmp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntimecmp(timestamp_a, timestamp_b)\n```\n\n----------------------------------------\n\nTITLE: Handling Non-matching Prefix with trimprefix Function in OpenTofu\nDESCRIPTION: Shows behavior when the specified prefix does not match the start of the string, returning the original string unchanged.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/trimprefix.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntrimprefix(\"helloworld\", \"cat\")\n```\n\n----------------------------------------\n\nTITLE: Using textencodebase64 Function in OpenTofu HCL\nDESCRIPTION: The textencodebase64 function takes a string and an encoding name as arguments, and returns the base64-encoded representation of the string after encoding it with the specified character encoding.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/textencodebase64.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntextencodebase64(string, encoding_name)\n```\n\n----------------------------------------\n\nTITLE: strcontains Function Example with True Result in OpenTofu\nDESCRIPTION: Example demonstrating the strcontains function returning true when the substring \"wor\" is found in the string \"hello world\".\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/strcontains.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> strcontains(\"hello world\", \"wor\")\ntrue\n```\n\n----------------------------------------\n\nTITLE: Using OpenTofu Workspace Command\nDESCRIPTION: Shows the basic syntax for using the tofu workspace command with subcommands and optional arguments. The command is used to manage OpenTofu workspaces.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/workspace/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu workspace <subcommand> [options] [args]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of timecmp Function in OpenTofu\nDESCRIPTION: Examples showing the return values of timecmp when comparing various timestamps, including timestamps with different UTC offsets.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/timecmp.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> timecmp(\"2017-11-22T00:00:00Z\", \"2017-11-22T00:00:00Z\")\n0\n> timecmp(\"2017-11-22T00:00:00Z\", \"2017-11-22T01:00:00Z\")\n-1\n> timecmp(\"2017-11-22T01:00:00Z\", \"2017-11-22T00:00:00Z\")\n1\n> timecmp(\"2017-11-22T01:00:00Z\", \"2017-11-22T00:00:00-01:00\")\n0\n```\n\n----------------------------------------\n\nTITLE: Expanding List Arguments in Functions\nDESCRIPTION: Demonstrates how to expand a list into individual arguments using the spread operator (...) in function calls.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/function-calls.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmin([55, 2453, 2]...)\n```\n\n----------------------------------------\n\nTITLE: Defining Provider Metadata in a Module\nDESCRIPTION: Shows how to specify provider metadata in a module by adding a provider_meta block within the terraform configuration block. This example passes a simple key-value pair to a provider named 'my-provider'.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/provider-meta.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  provider_meta \"my-provider\" {\n    hello = \"world\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Subtraction in OpenTofu\nDESCRIPTION: Demonstrates the subtraction operator that subtracts the second value from the first value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\na - b\n```\n\n----------------------------------------\n\nTITLE: Using encode_tfvars Function with the Built-in Provider\nDESCRIPTION: Example of using the encode_tfvars function to convert an object into a .tfvars format string. The keys in the object must be valid identifiers.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/builtin.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  object = {\n    key1 = \"value1\"\n    key2 = \"value2\"\n  }\n  encoded = provider::terraform::encode_tfvars(local.object) # Returns string\n}\n```\n\n----------------------------------------\n\nTITLE: Trim Function Syntax in HCL\nDESCRIPTION: The basic syntax for the trim function, which takes a string and a set of characters to remove from both ends of the string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/trim.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntrim(string, str_character_set)\n```\n\n----------------------------------------\n\nTITLE: Using Ceil Function in OpenTofu\nDESCRIPTION: Demonstrates the usage of the ceil function which returns the closest whole number greater than or equal to the input value. The examples show both integer and decimal inputs.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/ceil.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> ceil(5)\n5\n> ceil(5.1)\n6\n```\n\n----------------------------------------\n\nTITLE: Removing All Resources in a Module\nDESCRIPTION: This command removes all resources that exist within all instances of a module named 'foo' from the OpenTofu state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state rm 'module.foo'\n```\n\n----------------------------------------\n\nTITLE: FileExists Example with Path Module in OpenTofu (HCL)\nDESCRIPTION: Example showing how to check if a file exists at a path constructed using the path.module variable, returning a boolean result.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/fileexists.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> fileexists(\"${path.module}/hello.txt\")\ntrue\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Lowercase using Lower Function\nDESCRIPTION: Examples demonstrating the lower function converting uppercase strings to lowercase, including both Latin and Cyrillic characters. The function follows Unicode's definition of letter cases.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/lower.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> lower(\"HELLO\")\nhello\n> lower(\"АЛЛО!\")\nалло!\n```\n\n----------------------------------------\n\nTITLE: Consul Backend Configuration File\nDESCRIPTION: Example of a backend configuration file for Consul showing address, path and scheme settings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/configuration.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\naddress = \"demo.consul.io\"\npath    = \"example_app/terraform_state\"\nscheme  = \"https\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Indent Function Usage in HCL\nDESCRIPTION: Provides an example of using the 'indent' function to insert a multi-line string into an already-indented context. It shows how the function affects the formatting of the input string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/indent.mdx#2025-04-16_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\n> \"  items: ${indent(2, \"[\\n  foo,\\n  bar,\\n]\\n\")}\"\n  items: [\n    foo,\n    bar,\n  ]\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Resource Instance Using count\nDESCRIPTION: This command removes a specific instance (with index 0) of a resource that uses the count meta-argument from the OpenTofu state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state rm 'packet_device.worker[0]'\n```\n\n----------------------------------------\n\nTITLE: Logical OR in OpenTofu\nDESCRIPTION: Demonstrates the logical OR operator that returns true if either of the boolean values is true.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\na || b\n```\n\n----------------------------------------\n\nTITLE: JSON Generation Template in OpenTofu\nDESCRIPTION: Example of a template that uses jsonencode to generate JSON output from a structured expression.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n${jsonencode({\n  \"backends\": [for addr in ip_addrs : \"${addr}:${port}\"],\n})}\n```\n\n----------------------------------------\n\nTITLE: Converting a List to a Set in OpenTofu\nDESCRIPTION: Demonstrates basic conversion of a list of strings to a set, which preserves all elements while discarding their original order.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/toset.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntoset([\"a\", \"b\", \"c\"])\n```\n\n----------------------------------------\n\nTITLE: Removing Sensitivity from SHA256 Hash in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates how to use the nonsensitive function to output a SHA256 hash of a sensitive value. It assumes that the hash is safe to expose based on the system's threat model.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/nonsensitive.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"sensitive_example_hash\" {\n  value = nonsensitive(sha256(var.sensitive_example))\n}\n```\n\n----------------------------------------\n\nTITLE: Using filebase64 Function in OpenTofu HCL\nDESCRIPTION: The filebase64 function takes a path parameter and returns the contents of the file as a base64-encoded string. This is useful for including binary data in OpenTofu configurations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/filebase64.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfilebase64(path)\n```\n\n----------------------------------------\n\nTITLE: Using UUIDv5 with Custom Namespace\nDESCRIPTION: Example of using the uuidv5 function with a custom namespace UUID for specialized use cases outside of the standard RFC 4122 namespaces.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/uuidv5.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> uuidv5(\"743ac3c0-3bf7-4a5b-9e6c-59360447c757\", \"LIBS:diskfont.library\")\nede1a974-df7e-5f17-84b9-76208818b2c8\n```\n\n----------------------------------------\n\nTITLE: Splat Expression Syntax in OpenTofu HCL\nDESCRIPTION: Example of a splat expression that extracts id values from a list of objects.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvar.list[*].id\n```\n\n----------------------------------------\n\nTITLE: Example Usage of textdecodebase64 Function\nDESCRIPTION: An example demonstrating how to decode a UTF-16LE encoded string from Base64 format to plaintext.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/textdecodebase64.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> textdecodebase64(\"SABlAGwAbABvACAAVwBvAHIAbABkAA==\", \"UTF-16LE\")\nHello World\n```\n\n----------------------------------------\n\nTITLE: Defining cidrnetmask Function Syntax in HCL\nDESCRIPTION: Demonstrates the syntax for using the cidrnetmask function in OpenTofu. The function takes an IPv4 address prefix in CIDR notation and returns a subnet mask address.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/cidrnetmask.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncidrnetmask(prefix)\n```\n\n----------------------------------------\n\nTITLE: Basic State Pull Command\nDESCRIPTION: Basic command to pull state from remote or local storage and output it to stdout. This command downloads the state, upgrades it to the latest compatible version, and outputs in raw format.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/pull.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu state pull\n```\n\n----------------------------------------\n\nTITLE: Deduplicating List Elements with toset in OpenTofu\nDESCRIPTION: Demonstrates how duplicate values in the input list are automatically coalesced when converted to a set, and how the original ordering is not preserved.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/toset.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntoset([\"c\", \"b\", \"b\"])\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTofu Variables with Environment Variables\nDESCRIPTION: Example of using environment variables with the TF_VAR_ prefix to set variable values in a Unix-like shell.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/variables.mdx#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ export TF_VAR_image_id=ami-abc123\n$ tofu plan\n...\n```\n\n----------------------------------------\n\nTITLE: Using OSS Remote State in Another OpenTofu Configuration\nDESCRIPTION: Example of using the terraform_remote_state data source to access outputs from state stored in Alibaba Cloud OSS. This allows one OpenTofu configuration to reference data from another configuration's state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/oss.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"network\" {\n    backend   = \"oss\"\n    config    = {\n        bucket = \"remote-state-dns\"\n        key    = \"terraform.tfstate\"\n        prefix = \"mystate/state\"\n        region = \"cn-beijing\"\n    }\n    outputs   = {}\n    workspace = \"default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Equality Operator in OpenTofu\nDESCRIPTION: Demonstrates the equality operator that returns true if both values are of the same type and have the same value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\na == b\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of External Key Provider\nDESCRIPTION: Example implementation of an OpenTofu external key provider in Python. This demonstrates the protocol exchange and key generation process.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python3\n\nimport sys\nimport json\nimport base64\nimport os\n\n# Write header\nheader = {\n    \"protocol\": \"opentofu-key-provider-external\",\n    \"version\": 1\n}\n\nprint(json.dumps(header))\nsys.stdout.flush()\n\n# Read input\ninput_data = sys.stdin.buffer.read()\n\n# Parse input if available\nif input_data:\n    try:\n        input_json = json.loads(input_data)\n    except json.JSONDecodeError as e:\n        print(f\"Error decoding JSON: {e}\", file=sys.stderr)\n        sys.exit(1)\nelse:\n    input_json = None\n\n# Generate key\nkey = os.urandom(32)\n\n# Output result\noutput = {\n    \"key\": base64.b64encode(key).decode(\"utf-8\"),\n    \"metadata\": None\n}\n\nprint(json.dumps(output))\nsys.stdout.flush()\n```\n\n----------------------------------------\n\nTITLE: Converting to Map in OpenTofu\nDESCRIPTION: This example demonstrates how to use the tomap function to convert a value to a map. It shows a simple key-value pair conversion.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/tomap.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> tomap({\"a\" = 1, \"b\" = 2})\n{\n  \"a\" = 1\n  \"b\" = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing a Provider in OpenTofu State\nDESCRIPTION: This example demonstrates how to replace the standard 'hashicorp/aws' provider with a custom fork by 'acme' hosted in a private registry. This is useful when moving resources to use a custom or alternative provider implementation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/replace-provider.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state replace-provider hashicorp/aws registry.acme.corp/acme/aws\n```\n\n----------------------------------------\n\nTITLE: Greater Than or Equal Comparison in OpenTofu\nDESCRIPTION: Demonstrates the greater than or equal to operator that returns true if the first number value is greater than or equal to the second.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\na >= b\n```\n\n----------------------------------------\n\nTITLE: Demonstrating pathexpand Function Usage in OpenTofu\nDESCRIPTION: These examples show how the pathexpand function handles paths with and without a leading tilde (~). It expands the tilde to the user's home directory in the first example, while leaving the second path unchanged.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/pathexpand.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> pathexpand(\"~/.ssh/id_rsa\")\n/home/steve/.ssh/id_rsa\n> pathexpand(\"/etc/resolv.conf\")\n/etc/resolv.conf\n```\n\n----------------------------------------\n\nTITLE: Bucket Metadata Module for OpenTofu Testing (HCL)\nDESCRIPTION: Defines a simple module that outputs a bucket name. This module is the target of the override_module block in the test file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"bucket_name\" {\n  value = \"my-bucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Single Workspace from Remote Backend to Cloud Block in OpenTofu\nDESCRIPTION: This snippet demonstrates how to replace a 'backend \"remote\"' block with an equivalent 'cloud' block for a single workspace configuration in OpenTofu. It preserves the organization and workspace name while changing the block type.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/cloud/migrating.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n-  backend \"remote\" {\n+  cloud {\n    organization = \"my-org\"\n\n    workspaces {\n    name = \"my-app-prod\"\n    }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: JSON/YAML Generation Example\nDESCRIPTION: Shows how to generate formatted output using templatestring with locals and YAML encoding.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatestring.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  list = [\"Value1\", \"Value2\", \"Value3\"]\n  formatted_list = \"%{ for value in local.list ~}${value} %{ endfor ~}\"\n}\n\noutput \"result\" {\n  value = templatestring(yamlencode(local.formatted_list), {})\n}\n```\n\n----------------------------------------\n\nTITLE: Output Value with Description\nDESCRIPTION: Demonstrates adding documentation to an output value using the description argument to explain its purpose.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/outputs.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"instance_ip_addr\" {\n  value       = aws_instance.server.private_ip\n  description = \"The private IP address of the main server instance.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Division in OpenTofu\nDESCRIPTION: Demonstrates the division operator that divides the first value by the second value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\na / b\n```\n\n----------------------------------------\n\nTITLE: Computing SHA256 Hash with hexadecimal encoding in OpenTofu\nDESCRIPTION: This example demonstrates how to use the sha256 function to compute the SHA256 hash of the string \"hello world\". The result is returned as lowercase hexadecimal digits.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/sha256.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> sha256(\"hello world\")\nb94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\n```\n\n----------------------------------------\n\nTITLE: Error Handling in YAML Decoding\nDESCRIPTION: Examples of error cases when using yamldecode, including invalid anchor references and unsupported tags, demonstrating how OpenTofu handles YAML parsing errors.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/yamldecode.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> yamldecode(\"{a: &foo [1, *foo, 3]}\")\n\nError: Error in function call\n\nCall to function \"yamldecode\" failed: cannot refer to anchor \"foo\" from inside\nits own definition.\n\n> yamldecode(\"{a: !not-supported foo}\")\n\nError: Error in function call\n\nCall to function \"yamldecode\" failed: unsupported tag \"!not-supported\".\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote State Basic Setup\nDESCRIPTION: Basic configuration syntax for remote state data source with encryption setup.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n{RemoteState}\n```\n\n----------------------------------------\n\nTITLE: Using base64sha512 Function in OpenTofu\nDESCRIPTION: Example showing how to use the base64sha512 function with a simple string input (\"hello world\"), resulting in a Base64-encoded SHA512 hash output.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/base64sha512.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> base64sha512(\"hello world\")\nMJ7MSJwS1utMxA9QyQLytNDtd+5RGnx6m808qG1M2G+YndNbxf9JlnDaNCVbRbDP2DDoH2Bdz33FVC6TrpzXbw==\n```\n\n----------------------------------------\n\nTITLE: Literal Character Examples in formatdate Function\nDESCRIPTION: Examples showing how to include literal characters in the format specification by using single quotes. To include a literal quote, escape it by doubling the quotes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/formatdate.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> formatdate(\"h'h'mm\", \"2018-01-02T23:12:01-08:00\")\n23h12\n> formatdate(\"H 'o''clock'\", \"2018-01-02T23:12:01-08:00\")\n11 o'clock\n```\n\n----------------------------------------\n\nTITLE: Importing Resource with Count Meta-Argument in HCL\nDESCRIPTION: Shows how to import a resource that uses the count meta-argument in its configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/import/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\nimport {\n  to = aws_instance.example[0]\n  id = \"i-abcd1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Empty List Check in OpenTofu\nDESCRIPTION: Shows a clearer way to check if a list is empty by using the length function instead of direct comparison.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nlength(var.list) == 0\n```\n\n----------------------------------------\n\nTITLE: Using UUIDv5 with Direct UUID Namespaces\nDESCRIPTION: Examples of using the uuidv5 function with explicit namespace UUIDs rather than keywords, including using standard namespaces and custom namespaces.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/uuidv5.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> uuidv5(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\", \"www.opentofu.org\")\ndf1e675d-b743-5f6c-9952-6311d0f141df\n```\n\n----------------------------------------\n\nTITLE: Filtering a Map with For Expression in OpenTofu Console\nDESCRIPTION: Demonstrates using a for expression with a conditional filter to select specific items from a map based on a property value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/console.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> { for key, value in var.apps : key => value if value.region == \"us-east-1\" }\n{\n  \"foo\" = {\n    \"region\" = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using trimsuffix Function in OpenTofu\nDESCRIPTION: Demonstrates how to use the trimsuffix function to remove a specific suffix from the end of a string. In this example, it removes 'world' from 'helloworld'.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/trimsuffix.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntrimsuffix(\"helloworld\", \"world\")\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Multiplication in OpenTofu\nDESCRIPTION: Demonstrates the multiplication operator that multiplies two number values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\na * b\n```\n\n----------------------------------------\n\nTITLE: Improved Pattern: Using Different for_each Expressions for Provider and Resource\nDESCRIPTION: A safer approach that uses a local variable to filter the for_each collection for resources based on an 'enabled' attribute. This allows providers to exist independently of their resources when elements are removed from the collection.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n    }\n  }\n}\n\nvariable \"aws_regions\" {\n  type = map(object({\n    vpc_cidr_block = string\n    enabled        = optional(bool, true)\n  }))\n}\n\nlocals {\n  # enabled_regions includes only the elements of var.aws_regions\n  # where enabled = true, and thus resource instances should be\n  # declared.\n  enabled_regions = tomap({\n    for region, config in var.aws_regions : region => config\n    if config.enabled\n  })\n}\n\nprovider \"aws\" {\n  alias    = \"by_region\"\n  for_each = var.aws_regions\n\n  region = each.key\n}\n\nresource \"aws_vpc\" \"example\" {\n  for_each = local.enabled_regions\n  provider = aws.by_region[each.key]\n\n  cidr_block = each.value.vpc_cidr_block\n}\n```\n\n----------------------------------------\n\nTITLE: Mixed Type Handling in setproduct Function\nDESCRIPTION: Demonstrates how setproduct handles mixed types, converting numbers to strings for consistency.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nsetproduct([\"staging\", \"production\"], [\"a\", 2])\n```\n\n----------------------------------------\n\nTITLE: Executing OpenTofu Providers Command\nDESCRIPTION: This snippet demonstrates the execution and output of the 'tofu providers' command. It shows the providers required by both the configuration and the state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/providers/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu providers\n\nProviders required by configuration:\n.\n└── module.submodule\n    ├── provider[registry.opentofu.org/hashicorp/tfcoremock]\n    └── module.nested\n\nProviders required by state:\n\n    provider[registry.opentofu.org/hashicorp/tfcoremock]\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Output Value\nDESCRIPTION: Example showing how to query a specific output value by name, retrieving just the load balancer address.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/output.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shellsession\nCODE:\n```\n$ tofu output lb_address\n\"my-app-alb-1657023003.us-east-1.elb.amazonaws.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining Element Function Syntax in OpenTofu HCL\nDESCRIPTION: Shows the basic syntax for calling the element function, which takes a list and an index as arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/element.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nelement(list, index)\n```\n\n----------------------------------------\n\nTITLE: OpenTofu State Push with Variable File\nDESCRIPTION: Example of using the 'tofu state push' command with a variable file to set multiple input variables at once.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/push.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntofu state push -var-file=FILENAME PATH\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Resource Instance Using for_each (Unix-style)\nDESCRIPTION: This command demonstrates how to remove a specific instance of a resource that uses the for_each meta-argument in Unix-style shells (Linux/macOS).\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state rm 'packet_device.worker[\"example\"]'\n```\n\n----------------------------------------\n\nTITLE: Using JSON Encoding in OpenTofu HCL\nDESCRIPTION: Instead of using heredocs for JSON, this example shows the recommended approach of using the jsonencode function to create valid JSON from HCL objects.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/strings.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n  example = jsonencode({\n    a = 1\n    b = \"hello\"\n  })\n```\n\n----------------------------------------\n\nTITLE: Dynamic Provider Instances Using For_Each\nDESCRIPTION: Shows how to create multiple provider instances dynamically using for_each based on a variable input of AWS regions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/configuration.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"aws_regions\" {\n  type = map(object({\n    vpc_cidr_block = string\n  }))\n}\n\nprovider \"aws\" {\n  alias    = \"by_region\"\n  for_each = var.aws_regions\n\n  region = each.key\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\naws_regions = {\n  eu-central-2 = {\n    vpc_cidr_block = \"10.1.0.0/16\"\n  }\n  ap-northeast-1 = {\n    vpc_cidr_block = \"10.2.0.0/16\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider with Variables in HCL\nDESCRIPTION: Example HCL configuration that sets up an AWS provider using input variables. This configuration can be used with the 'tofu import' command to specify provider credentials for the import process.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/import.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"access_key\" {}\nvariable \"secret_key\" {}\n\nprovider \"aws\" {\n  access_key = \"${var.access_key}\"\n  secret_key = \"${var.secret_key}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Moving a Module Into Another Module (Shell)\nDESCRIPTION: Shell command to refactor a module by moving it inside another module in the OpenTofu state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntofu state mv module.app module.parent.module.app\n```\n\n----------------------------------------\n\nTITLE: Transposing Map Keys and Values in OpenTofu/HCL\nDESCRIPTION: Demonstrates how to use the transpose function to swap keys and values in a map of string lists. The function takes a map with string keys and list values, and returns a new map where the original values become keys and the original keys become list values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/transpose.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntranspose({\"a\" = [\"1\", \"2\"], \"b\" = [\"2\", \"3\"]})\n{\n  \"1\" = [\n    \"a\",\n  ],\n  \"2\" = [\n    \"a\",\n    \"b\",\n  ],\n  \"3\" = [\n    \"b\",\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Length Greater Than Remaining Characters\nDESCRIPTION: Shows how substr behaves when the specified length exceeds the number of available characters, returning all remaining characters after the offset.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/substr.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n> substr(\"hello world\", 6, 10)\nworld\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance into Module Resource\nDESCRIPTION: Shell command that imports an AWS EC2 instance with ID 'i-abcd1234' into a resource inside a module, specifically 'module.foo.aws_instance.bar'.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/import.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu import module.foo.aws_instance.bar i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: Syntax for textdecodebase64 Function in OpenTofu\nDESCRIPTION: The basic syntax for the textdecodebase64 function, which takes a Base64-encoded string and an encoding name as arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/textdecodebase64.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntextdecodebase64(string, encoding_name)\n```\n\n----------------------------------------\n\nTITLE: Converting Mixed Types to Map in OpenTofu\nDESCRIPTION: This example shows how tomap handles mixed-type elements by converting them to the most general type. In this case, boolean true is converted to string \"true\".\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/tomap.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> tomap({\"a\" = \"foo\", \"b\" = true})\n{\n  \"a\" = \"foo\"\n  \"b\" = \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Key Provider in OpenTofu\nDESCRIPTION: Example configuration for setting up an external command key provider in OpenTofu. The command is specified as an array where each parameter is an item in the array.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  encryption {\n    // ...\n    key_provider \"external\" \"my_provider\" {\n      command = [\"/path/to/program\", \"--param1\", \"--param2\"]\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Single Element Arguments in setproduct Function\nDESCRIPTION: Illustrates the result when all arguments to setproduct have only one element.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nsetproduct([\"a\"], [\"b\"])\n```\n\n----------------------------------------\n\nTITLE: Converting For Expression Result to Set Type in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates converting the result of a 'for' expression to a set type using the toset function, which is useful when working with unordered collections.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/for.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\ntoset([for e in var.set : e.example])\n```\n\n----------------------------------------\n\nTITLE: Configuring GCS Backend for OpenTofu State Storage\nDESCRIPTION: Example configuration for setting up Google Cloud Storage as a backend for OpenTofu state. This specifies a bucket and prefix where the state file will be stored.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/gcs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"gcs\" {\n    bucket  = \"tf-state-prod\"\n    prefix  = \"tofu/state\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limitations of can() Function in OpenTofu HCL\nDESCRIPTION: Example showing that the can function cannot catch errors from references to undeclared resources or values. It only handles dynamic errors that occur during runtime evaluation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/can.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> can(local.nonexist)\n\nError: Reference to undeclared local value\n\nA local value with the name \"nonexist\" has not been declared.\n```\n\n----------------------------------------\n\nTITLE: Less Than Comparison in OpenTofu\nDESCRIPTION: Demonstrates the less than operator that returns true if the first number value is less than the second.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\na < b\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration with For_Each in OpenTofu\nDESCRIPTION: An example demonstrating how locals and for_each could be used with provider configurations to create multiple regional AWS providers and pass them to modules. This would be enabled by the Init-time Constant Evaluation feature.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/TSC_SUMMARY.md#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n    region = {\"primary\": \"us-east-1\", \"secondary\": \"us-east-2\", \"fallback\": \"us-west-1\"}\n}\nprovider \"aws\" {\n    for_each = locals.region\n    alias = each.key\n    region = each.value\n}\nmodule \"aws_resource\" {\n    source = \"./per-region-module/\"\n    for_each = local.region\n    providers = {\n        aws = aws[each.key]\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Range Function Algorithm in Pseudocode\nDESCRIPTION: Pseudocode demonstrating the sequence-building algorithm for the range function, showing how numbers are generated and appended to the sequence.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/range.mdx#2025-04-16_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\nlet num = start\nwhile num < limit: (or, for negative step, num > limit)\n  append num to the sequence\n  num = num + step\nreturn the sequence\n```\n\n----------------------------------------\n\nTITLE: Mixed Configuration with Environment Variables\nDESCRIPTION: Combined approach using both configuration file and environment variables\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/pg.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"pg\" {\n    conn_str = \"postgres://db.example.com/tofu_backend\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Sensitive Output Values\nDESCRIPTION: Example showing how OpenTofu handles sensitive output values by redacting them in the command output.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/output.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shellsession\nCODE:\n```\n$ tofu output password\npassword = <sensitive>\n```\n\n----------------------------------------\n\nTITLE: OpenTofu Project Directory Structure\nDESCRIPTION: Tree view showing the organization of OpenTofu configuration files (.tf) and their associated test files (.tftest.hcl). Each configuration file has a corresponding test file with the same base name, following the convention of appending .tftest.hcl to the test files.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/flat-layout.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── main.tf\n├── main.tftest.hcl\n├── foo.tf\n├── foo.tftest.hcl\n├── bar.tf\n└── bar.tftest.hcl\n```\n\n----------------------------------------\n\nTITLE: Modulo Operation in OpenTofu\nDESCRIPTION: Demonstrates the modulo operator that returns the remainder of dividing the first value by the second value. Most useful with whole numbers.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\na % b\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance into Resource with For-Each (PowerShell)\nDESCRIPTION: PowerShell command that imports an AWS EC2 instance with ID 'i-abcd1234' into the 'example' instance of 'aws_instance.baz' configured with the 'for_each' meta-argument.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/import.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu import 'aws_instance.baz[\\\"example\\\"]' i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Backend in OpenTofu HCL\nDESCRIPTION: Basic configuration for the local backend in OpenTofu. The optional 'path' parameter specifies where to store the terraform.tfstate file relative to the root module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/local.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"local\" {\n    path = \"relative/path/to/terraform.tfstate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic bcrypt Function Syntax in HCL\nDESCRIPTION: Demonstrates the basic syntax for the bcrypt function which takes a string and optional cost parameter. The cost parameter defaults to 10 if not specified.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/bcrypt.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nbcrypt(string, cost)\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenTofu Lock File Update Message\nDESCRIPTION: This snippet shows the message OpenTofu displays when it has made changes to the provider dependency selections in the lock file. It informs users to review and commit these changes if they are intentional.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOpenTofu has made some changes to the provider dependency selections recorded\nin the .terraform.lock.hcl file. Review those changes and commit them to your\nversion control system if they represent changes you intended to make.\n```\n\n----------------------------------------\n\nTITLE: UUIDv5 Function Syntax\nDESCRIPTION: The basic syntax for the uuidv5 function, which takes a namespace and name parameter to generate a name-based UUID.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/uuidv5.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nuuidv5(namespace, name)\n```\n\n----------------------------------------\n\nTITLE: Set Intersection Function Syntax in HCL\nDESCRIPTION: Basic syntax declaration for the setintersection function that takes multiple sets as arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/setintersection.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsetintersection(sets...)\n```\n\n----------------------------------------\n\nTITLE: Resource Block Reference with Removal\nDESCRIPTION: References the removed block concept in OpenTofu, used to specify resources that should be forgotten rather than destroyed when removed from configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/behavior.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nremoved\n```\n\n----------------------------------------\n\nTITLE: Basic fileset Function Syntax in HCL\nDESCRIPTION: The basic syntax for the fileset function which takes a path and pattern parameter to enumerate matching files.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/fileset.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfileset(path, pattern)\n```\n\n----------------------------------------\n\nTITLE: Handling Sensitive Data in Functions\nDESCRIPTION: Example showing how sensitive data is handled when using functions like keys() and values() with objects containing sensitive information.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/function-calls.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n> local.baz\n{\n  \"a\" = (sensitive value)\n  \"b\" = \"dog\"\n}\n> keys(local.baz)\n[\n  \"a\",\n  \"b\",\n]\n> values(local.baz)\n[\n  (sensitive value),\n  \"dog\",\n]\n```\n\n----------------------------------------\n\nTITLE: External Key Provider Header JSON Format\nDESCRIPTION: JSON header format that external key providers must output to be recognized by OpenTofu. This header identifies the provider and its version.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"protocol\": \"opentofu-key-provider-external\",\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Moving and Renaming a Resource Into a Module (Shell)\nDESCRIPTION: Shell command to move a resource into a module while simultaneously renaming it in the OpenTofu state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntofu state mv packet_device.worker module.worker.packet_device.main\n```\n\n----------------------------------------\n\nTITLE: Creating a speculative destroy plan in OpenTofu\nDESCRIPTION: This command creates a speculative destroy plan using `tofu plan -destroy`, which shows the proposed destroy changes without executing them. This allows you to preview the effects of destroying resources before actually doing so.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/destroy.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntofu plan -destroy\n```\n\n----------------------------------------\n\nTITLE: Azure Backend Configuration with Azure AD\nDESCRIPTION: Configuration for Azure backend using Azure AD authentication, requiring Storage Blob Data Owner role.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/azurerm.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    storage_account_name = \"abcd1234\"\n    container_name       = \"tfstate\"\n    key                  = \"prod.terraform.tfstate\"\n    use_azuread_auth     = true\n    subscription_id      = \"00000000-0000-0000-0000-000000000000\"\n    tenant_id            = \"00000000-0000-0000-0000-000000000000\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Log Function Syntax in HCL\nDESCRIPTION: Demonstrates the basic syntax of the log function which takes two parameters: the number to calculate the logarithm of and the base to use.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/log.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlog(number, base)\n```\n\n----------------------------------------\n\nTITLE: Understanding the refresh command equivalence\nDESCRIPTION: Shows that the `tofu refresh` command is effectively an alias for `tofu apply -refresh-only -auto-approve`, highlighting that it automatically approves changes without review.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/refresh.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntofu apply -refresh-only -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Setting Encryption Configuration\nDESCRIPTION: Configures encryption settings using environment variable\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-16_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_ENCRYPTION='key_provider \"static\" \"mykp\" { key = \"6f6f706830656f67686f6834616872756f3751756165686565796f6f72653169\" }'\n```\n\n----------------------------------------\n\nTITLE: Defining the substr Function Syntax in OpenTofu HCL\nDESCRIPTION: Shows the syntax for the substr function which takes three parameters: a string, an offset position, and a length to extract.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/substr.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsubstr(string, offset, length)\n```\n\n----------------------------------------\n\nTITLE: External Encryption Method Input JSON Format\nDESCRIPTION: JSON input format that OpenTofu sends to external encryption methods. This includes the key material and data to be processed for encryption or decryption.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"base64-encoded-key\",\n  \"data\": \"base64-encoded-data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Negation Operation in OpenTofu\nDESCRIPTION: Demonstrates the unary negation operator that multiplies a number by -1.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\n-a\n```\n\n----------------------------------------\n\nTITLE: Filtering Resources by Name in OpenTofu State\nDESCRIPTION: This example shows how to filter the state list to only show resources with a specific name using the 'tofu state list' command.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/list.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu state list aws_instance.bar\naws_instance.bar[0]\naws_instance.bar[1]\n```\n\n----------------------------------------\n\nTITLE: Basic OpenTofu Version Command Usage\nDESCRIPTION: Demonstrates the basic usage of the 'tofu version' command, which displays the OpenTofu version, platform information, and installed providers.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/version.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n$ tofu version\nOpenTofu v1.6.0\non darwin_amd64\n+ provider registry.opentofu.org/hashicorp/null v3.0.0\n```\n\n----------------------------------------\n\nTITLE: Updating Existing Provider Version in OpenTofu Lock File\nDESCRIPTION: Example diff demonstrating version update of an existing Azure provider from 2.1.0 to 2.0.0, including changes to version constraints and package checksums.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n--- .terraform.lock.hcl\t2020-10-07 16:44:25.819579509 -0700\n+++ .terraform.lock.hcl\t2020-10-07 16:43:42.785665945 -0700\n@@ -7,22 +7,22 @@\n }\n\n provider \"registry.opentofu.org/hashicorp/azurerm\" {\n-  version     = \"2.1.0\"\n-  constraints = \"~> 2.1.0\"\n+  version     = \"2.0.0\"\n+  constraints = \"2.0.0\"\n   hashes      = [\n-    \"h1:EOJImaEaVThWasdqnJjfYc6/P8N/MRAq1J7avx5ZbV4=\",\n-    \"zh:0015b491cf9151235e57e35ea6b89381098e61bd923f56dffc86026d58748880\",\n-    \"zh:4c5682ba1e0fc7e2e602d3f103af1638f868c31fe80cc1a884a97f6dad6e1c11\",\n-    \"zh:57bac885b108c91ade4a41590062309c832c9ab6bf6a68046161636fcaef1499\",\n-    \"zh:5810d48f574c0e363c969b3f45276369c8f0a35b34d6202fdfceb7b85b3ac597\",\n-    \"zh:5c6e37a44462b8662cf9bdd29ce30523712a45c27c5d4711738705be0785db41\",\n-    \"zh:64548940a3387aa3a752e709ee9eb9982fa820fe60eb60e5f212cc1d2c58549e\",\n-    \"zh:7f46749163da17330bbb5293dc825333c86304baa0a7c6256650ac536b4567c8\",\n-    \"zh:8f8970f2df75ac43ffdd112055ee069d8bd1030f7eb4367cc4cf494a1fa802c3\",\n-    \"zh:9ad693d00dc5d7d455d06faba70e716bce727c6706f7293288e87fd7956b8fe0\",\n-    \"zh:b6e3cb55e6aec62b47edd0d2bd5e14bd6a2bcfdac65930a6e9e819934734c57b\",\n-    \"zh:d6a3f3b9b05c28ecf3919e9e7afa185805a6d7442fc4b3eedba749c2731d1f0e\",\n-    \"zh:d81fb624a357c57c7ea457ce543d865b39b12f26c2edd58a2f7cd43326c91010\",\n+    \"h1:bigGXBoRbp7dv79bEEn+aaju8575qEXHQ57XHVPJeB8=\",\n+    \"zh:09c603c8904ca4a5bc19e82335afbc2837dcc4bee81e395f9daccef2f2cba1c8\",\n+    \"zh:194a919d4836d6c6d4ce598d0c66cce00ddc0d0b5c40d01bb32789964d818b42\",\n+    \"zh:1f269627df4e266c4e0ef9ee2486534caa3c8bea91a201feda4bca525005aa0a\",\n+    \"zh:2bae3071bd5f8e553355c4b3a547d6efe1774a828142b762e9a4e85f79be7f63\",\n+    \"zh:6c98dfa5c3468e8d02e2b3af7c4a8a14a5d469ce5a642909643b413a17ca338b\",\n+    \"zh:7af78f61666fd45fbf428161c061ea2623162d601b79dc71d6a5158756853ffa\",\n+    \"zh:883c2df86ae9ba2a5c167cf5c2c7deca0239171a224d6d335f0fd6dd9c283830\",\n+    \"zh:a2028379078577d8ff5ecfca6e8a8b25a25ffb1686de0ee52a7fe8011783488b\",\n+    \"zh:abe6ef399552fd3861a454a839cd978c1d15735658fdc00f9054435aff0f4620\",\n+    \"zh:c30b1bf14077913c3cdf34979b1434dbb1353cb5995eb3956b191c50538b64a9\",\n+    \"zh:ca64ae2ad9793e5631e3b0b9327f7cb22cb5d8e9de57be7d85821791b1d5a375\",\n+    \"zh:fffe56904a38109bb8d613b02808a177c3ddfac19f03b3aac799281fea38f475\",\n   ]\n }\n```\n\n----------------------------------------\n\nTITLE: Using Perl Interpreter with local-exec Provisioner in OpenTofu HCL\nDESCRIPTION: This example shows how to use the local-exec provisioner with a Perl interpreter. It executes a Perl command to write the current local time to a file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"terraform_data\" \"example1\" {\n  provisioner \"local-exec\" {\n    command = \"open WFH, '>completed.txt' and print WFH scalar localtime\"\n    interpreter = [\"perl\", \"-e\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic String Literal Expression in OpenTofu HCL\nDESCRIPTION: Example of a simple string literal expression in OpenTofu configuration language.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n\"hello\"\n```\n\n----------------------------------------\n\nTITLE: String Interpolation with Variable\nDESCRIPTION: Demonstrates string interpolation by inserting a variable value into the template using the ${} syntax.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatestring.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"result\" {\n  value = templatestring(\"Hello, $${name}!\", { name = \"Alice\" })\n}\n```\n\n----------------------------------------\n\nTITLE: Example of textencodebase64 with UTF-16LE Encoding in OpenTofu\nDESCRIPTION: This example demonstrates converting the string \"Hello World\" to UTF-16LE encoding and then base64 encoding the result, which is particularly useful when working with Windows API or PowerShell.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/textencodebase64.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> textencodebase64(\"Hello World\", \"UTF-16LE\")\nSABlAGwAbABvACAAVwBvAHIAbABkAA==\n```\n\n----------------------------------------\n\nTITLE: Defining zipmap Function Syntax in HCL\nDESCRIPTION: Demonstrates the syntax for using the zipmap function in OpenTofu. It takes two parameters: keyslist (a list of strings) and valueslist (a list of any type). Both lists must be of the same length.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/zipmap.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nzipmap(keyslist, valueslist)\n```\n\n----------------------------------------\n\nTITLE: Using UUIDv5 with Namespace Keywords\nDESCRIPTION: Examples of using the uuidv5 function with predefined namespace keywords (dns, url, oid, x500) to generate UUIDs from different types of names.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/uuidv5.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> uuidv5(\"dns\", \"www.opentofu.org\")\ndf1e675d-b743-5f6c-9952-6311d0f141df\n\n> uuidv5(\"url\", \"https://www.opentofu.org/\")\nace93eea-1a2c-5eed-b41b-718be15d2e50\n\n> uuidv5(\"oid\", \"1.3.6.1.4\")\naf9d40a5-7a36-5c07-b23a-851cd99fbfa5\n\n> uuidv5(\"x500\", \"CN=Example,C=GB\")\n84e09961-4aa4-57f8-95b7-03edb1073253\n```\n\n----------------------------------------\n\nTITLE: Defining setunion Function Syntax in HCL\nDESCRIPTION: This snippet shows the syntax for using the setunion function in OpenTofu. It takes multiple sets as arguments and returns a single set containing all unique elements from the input sets.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/setunion.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsetunion(sets...)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Workspace in OpenTofu\nDESCRIPTION: This command demonstrates how to delete a workspace named 'example' using the tofu workspace delete command. It shows the basic usage and the output message upon successful deletion.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/workspace/delete.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu workspace delete example\nDeleted workspace \"example\".\n```\n\n----------------------------------------\n\nTITLE: Coalesce with List Expansion\nDESCRIPTION: Shows how to use coalesce with a list of values using the spread operator (...) to expand the list as arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/coalesce.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> coalesce([\"\", \"b\"]...)\nb\n```\n\n----------------------------------------\n\nTITLE: Moving a Specific Resource Instance with Count Index (Shell)\nDESCRIPTION: Shell command to move a specific indexed instance of a resource that uses the count meta-argument in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state mv 'packet_device.worker[0]' 'packet_device.helper[0]'\n```\n\n----------------------------------------\n\nTITLE: Setting Input Variables via Command Line\nDESCRIPTION: Example of how to set input variables when running the 'tofu plan' command. This allows specifying values for variables declared in the root module of the configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/plan.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntofu plan -var 'NAME=VALUE'\n```\n\n----------------------------------------\n\nTITLE: Moving a Resource with for_each in Windows Command Prompt (Shell)\nDESCRIPTION: Command for Windows Command Prompt to move a specific instance of a resource that uses the for_each meta-argument in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ntofu state mv packet_device.worker[\\\"example123\\\"] packet_device.helper[\\\"example456\\\"]\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Encryption in OpenTofu Configuration\nDESCRIPTION: Demonstrates how to configure OpenTofu to migrate from encrypted to unencrypted state and plan files using the 'unencrypted' method.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  encryption {\n    key_provider \"local\" {\n      method \"unencrypted\" {}\n    }\n    fallback {\n      key_provider \"local\" {\n        method \"aes_gcm\" {\n          static_key = \"THISISNOTASECUREPASSPHRASE\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Top-level Resource Creation with for_each in OpenTofu HCL\nDESCRIPTION: Example of using the networks variable directly with for_each to create VPC resources, without needing to flatten the structure.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/flatten.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_vpc\" \"example\" {\n  for_each = var.networks\n\n  cidr_block = each.value.cidr_block\n}\n```\n\n----------------------------------------\n\nTITLE: Using Module Block to Override Main Module for Testing\nDESCRIPTION: This example shows how to use the module block within a run block to override the main module with a test harness. This technique allows creating additional resources or data sources for more complex testing scenarios.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nrun \"test\" {\n  module {\n    source = \"./some-module\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw Output for Scripts\nDESCRIPTION: Example showing how to use the -raw flag to get a plain string output without formatting, ideal for shell scripts.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/output.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shellsession\nCODE:\n```\n$ tofu output -raw lb_address\nmy-app-alb-1657023003.us-east-1.elb.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Map Iteration Template Example\nDESCRIPTION: Demonstrates iterating over key-value pairs in a map using template directives.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatestring.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"result\" {\n  value = templatestring(\"%%{ for key, value in list ~}  $${key}:$${value} %%{ endfor ~}\", { list={key1=\"value1\", key2=\"value2\", key3=\"value3\"} })\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration for Network Structure in OpenTofu HCL\nDESCRIPTION: Example variable declaration for a hierarchical network structure with subnets, used to demonstrate a use case for the flatten function.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/flatten.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"networks\" {\n  type = map(object({\n    cidr_block = string\n    subnets    = map(object({ cidr_block = string }))\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenTofu Checksum Verification Error\nDESCRIPTION: This snippet demonstrates the error message OpenTofu displays when it fails to install a provider due to mismatched checksums. It indicates that the current package doesn't match any previously recorded checksums in the lock file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Failed to install provider\n\nError while installing hashicorp/azurerm v2.1.0: the current package for\nregistry.opentofu.org/hashicorp/azurerm 2.1.0 doesn't match any of the\nchecksums previously recorded in the dependency lock file.\n```\n\n----------------------------------------\n\nTITLE: Checking Resource Values in OpenTofu Console\nDESCRIPTION: Shows how the console indicates values that won't be known until apply time when referencing resources that haven't been created yet.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/console.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> random_pet.example\n(known after apply)\n```\n\n----------------------------------------\n\nTITLE: Verifying File Checksums on Linux with sha256sum\nDESCRIPTION: Bash script to verify the integrity of an OpenTofu download on Linux systems using sha256sum. This script compares the SHA256 hash of the downloaded file against the official checksums to ensure file integrity.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/standalone.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Replace YOURVERSION with the version you downloaded, for example, 1.6.0-alpha1\n# Replace YOURFILE with the file you downloaded, for example, tofu_1.6.0-alpha1_darwin_amd64.zip\nsha256sum --check --ignore-missing tofu_YOURVERSION_SHA256SUMS\n```\n\n----------------------------------------\n\nTITLE: Equivalent HCL Configuration for Lifecycle Block\nDESCRIPTION: This snippet shows the equivalent HCL syntax for the nested 'lifecycle' block within a resource, as previously defined in JSON.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/syntax/json.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple AWS Instances with Count in OpenTofu\nDESCRIPTION: This HCL snippet shows how to define multiple instances of an AWS EC2 instance using the count meta-argument. It creates 4 instances of the 'web' resource.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/state/resource-addressing.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n  count = 4\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Archive Interpretation for HTTP URLs without Standard Extensions\nDESCRIPTION: This snippet shows how to force OpenTofu to interpret an HTTP URL as an archive using the 'archive' parameter, even when the URL doesn't have a standard archive file extension.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"https://example.com/vpc-module?archive=zip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Substring Extraction Example in OpenTofu HCL\nDESCRIPTION: Demonstrates extracting a substring 'ello' from 'hello world' starting at offset 1 with length 4.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/substr.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> substr(\"hello world\", 1, 4)\nello\n```\n\n----------------------------------------\n\nTITLE: Parsing Version Message in OpenTofu JSON Output\nDESCRIPTION: This snippet shows the structure of a version message in OpenTofu's JSON output. It includes information about the OpenTofu version and the UI schema version used for the following messages.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"OpenTofu 0.15.4\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.275359-04:00\",\n  \"tofu\": \"0.15.4\",\n  \"type\": \"version\",\n  \"ui\": \"0.1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Addition in OpenTofu\nDESCRIPTION: Demonstrates the addition operator that adds two number values together and returns their sum.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\na + b\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Decoding with urldecode Function in OpenTofu\nDESCRIPTION: These examples show how the urldecode function decodes various URL-encoded strings, including simple ASCII characters, UTF-8 encoded characters, and complex URL components.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/urldecode.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> urldecode(\"Hello+World%21\")\nHello World!\n> urldecode(\"%E2%98%83\")\n☃\n> urldecode(\"foo%3Abar%40localhost%3Ffoo%3Dbar%26bar%3Dbaz\")\nfoo:bar@localhost?foo=bar&bar=baz\n```\n\n----------------------------------------\n\nTITLE: OpenTofu Project Directory Structure\nDESCRIPTION: A directory tree showing the organization of an OpenTofu project with configuration files in the root directory and test files in a dedicated tests subdirectory. The structure follows the conventional pattern of separating infrastructure code from test files.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/nested-layout.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── main.tf\n├── foo.tf\n├── bar.tf\n└── tests\n     ├── main.tftest.hcl\n     ├── foo.tftest.hcl\n     └── bar.tftest.hcl\n```\n\n----------------------------------------\n\nTITLE: Renaming a Resource with Count in OpenTofu HCL\nDESCRIPTION: Shows how to rename a resource that uses 'count' and add a corresponding 'moved' block to maintain backward compatibility.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"b\" {\n  count = 2\n\n  # (resource-type-specific configuration)\n}\n\nmoved {\n  from = aws_instance.a\n  to   = aws_instance.b\n}\n```\n\n----------------------------------------\n\nTITLE: Moving a Resource with for_each in Unix-style Shells (Shell)\nDESCRIPTION: Shell command for Unix-style shells to move a specific instance of a resource that uses the for_each meta-argument in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ntofu state mv 'packet_device.worker[\"example123\"]' 'packet_device.helper[\"example456\"]'\n```\n\n----------------------------------------\n\nTITLE: Setting Input Variables with Init\nDESCRIPTION: Demonstrates how to set input variables when running the init command, which is required when using variables in module sources or backend configurations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/init.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntofu init -var 'NAME=VALUE'\n```\n\n----------------------------------------\n\nTITLE: Showing Basic Resource State in OpenTofu\nDESCRIPTION: Example showing how to display state information for a packet_device resource named 'worker' using the tofu state show command.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/show.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state show 'packet_device.worker'\n# packet_device.worker:\nresource \"packet_device\" \"worker\" {\n    billing_cycle = \"hourly\"\n    created       = \"2015-12-17T00:06:56Z\"\n    facility      = \"ewr1\"\n    hostname      = \"prod-xyz01\"\n    id            = \"6015bg2b-b8c4-4925-aad2-f0671d5d3b13\"\n    locked        = false\n}\n```\n\n----------------------------------------\n\nTITLE: Credentials Configuration in HCL\nDESCRIPTION: Example showing how to configure API credentials for OpenTofu network services using a credentials block.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/config-file.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncredentials \"app.opentofu.org\" {\n  token = \"xxxxxx.atlasv1.zzzzzzzzzzzzz\"\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Generation Template in OpenTofu\nDESCRIPTION: Example of a template that uses yamlencode to generate YAML output from a structured expression.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatefile.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n${yamlencode({\n  \"backends\": [for addr in ip_addrs : \"${addr}:${port}\"],\n})}\n```\n\n----------------------------------------\n\nTITLE: Displaying the Current Workspace with OpenTofu CLI\nDESCRIPTION: This example demonstrates how to use the 'tofu workspace show' command to display the name of the currently active workspace. In this example, the output shows that the current workspace is named 'development'.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/workspace/show.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu workspace show\ndevelopment\n```\n\n----------------------------------------\n\nTITLE: Using the startswith Function in OpenTofu HCL\nDESCRIPTION: This snippet shows the syntax for the startswith function in OpenTofu HCL, which takes a string to check and a prefix string, returning true if the string begins with the exact prefix.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/startswith.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstartswith(string, prefix)\n```\n\n----------------------------------------\n\nTITLE: Defining formatlist Function Syntax in OpenTofu HCL\nDESCRIPTION: Shows the basic syntax for using the formatlist function in OpenTofu. It takes a specification string and a variable number of values as arguments.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/formatlist.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nformatlist(spec, values...)\n```\n\n----------------------------------------\n\nTITLE: Using S3 Remote State in Other Configurations\nDESCRIPTION: Example of how to reference an S3 remote state from another OpenTofu configuration using the terraform_remote_state data source.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/s3.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"network\" {\n  backend = \"s3\"\n  config = {\n    bucket = \"tofu-state-prod\"\n    key    = \"network/terraform.tfstate\"\n    region = \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Apply Complete in OpenTofu\nDESCRIPTION: Example of the JSON structure for apply_complete message that indicates successful completion of a resource operation. Includes resource identification, action taken, resource ID, and elapsed time.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"random_pet.animal: Creation complete after 0s [id=smart-lizard]\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.826179-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"random_pet.animal\",\n      \"module\": \"\",\n      \"resource\": \"random_pet.animal\",\n      \"implied_provider\": \"random\",\n      \"resource_type\": \"random_pet\",\n      \"resource_name\": \"animal\",\n      \"resource_key\": null\n    },\n    \"action\": \"create\",\n    \"id_key\": \"id\",\n    \"id_value\": \"smart-lizard\",\n    \"elapsed_seconds\": 0\n  },\n  \"type\": \"apply_complete\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Workspace Environment\nDESCRIPTION: Selects a specific OpenTofu workspace using environment variable\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_WORKSPACE=your_workspace\n```\n\n----------------------------------------\n\nTITLE: Basic Providers Mirror Command Usage\nDESCRIPTION: The basic syntax for using the tofu providers mirror command to create a local provider mirror directory.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/providers/mirror.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu providers mirror [options] <target-dir>\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTofu Zypper Repository for openSUSE\nDESCRIPTION: This command creates the OpenTofu repository configuration file for Zypper-based systems like openSUSE.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/rpm.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n${ZypperRepoScript}\n```\n\n----------------------------------------\n\nTITLE: Parsing Planned Change Message in OpenTofu JSON Output\nDESCRIPTION: This snippet shows the structure of a planned_change message in OpenTofu's JSON output. It includes details about a planned change to a single resource, such as the resource address and the planned action.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"random_pet.animal: Plan to create\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.705503-04:00\",\n  \"change\": {\n    \"resource\": {\n      \"addr\": \"random_pet.animal\",\n      \"module\": \"\",\n      \"resource\": \"random_pet.animal\",\n      \"implied_provider\": \"random\",\n      \"resource_type\": \"random_pet\",\n      \"resource_name\": \"animal\",\n      \"resource_key\": null\n    },\n    \"action\": \"create\"\n  },\n  \"type\": \"planned_change\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Provider Download Retry Count\nDESCRIPTION: Configures the maximum number of retry attempts for provider downloads\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_PROVIDER_DOWNLOAD_RETRY=3\n```\n\n----------------------------------------\n\nTITLE: Using RSA Decryption Function in OpenTofu HCL\nDESCRIPTION: Demonstrates how to use the rsadecrypt function in OpenTofu. It decrypts a ciphertext stored in a file using a private key from another file, returning the decrypted message.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/rsadecrypt.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nrsadecrypt(filebase64(\"${path.module}/ciphertext\"), file(\"privatekey.pem\"))\n```\n\n----------------------------------------\n\nTITLE: Moving a Resource with for_each in PowerShell (Shell)\nDESCRIPTION: PowerShell command to move a specific instance of a resource that uses the for_each meta-argument in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ntofu state mv 'packet_device.worker[\\\"example123\\\"]' 'packet_device.helper[\\\"example456\\\"]'\n```\n\n----------------------------------------\n\nTITLE: Testing Built-in Functions in OpenTofu Console\nDESCRIPTION: Example of using the OpenTofu console to test built-in functions, specifically using the cidrnetmask function to compute a subnet mask from CIDR notation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/console.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n> cidrnetmask(\"172.16.0.0/12\")\n\"255.240.0.0\"\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Apply Progress in OpenTofu\nDESCRIPTION: Example of the JSON structure for apply_progress message that periodically shows elapsed time during a resource operation. Includes resource identification, action, and elapsed time in seconds.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[4]: Still creating... [30s elapsed]\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-03-17T09:34:26.222465-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[4]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[4]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 4\n    },\n    \"action\": \"create\",\n    \"elapsed_seconds\": 30\n  },\n  \"type\": \"apply_progress\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying No Pending Changes in OpenTofu\nDESCRIPTION: Run tofu plan to ensure there are no pending changes after migration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.6.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu plan\n\n...\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your\nconfiguration and found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Using Provider-defined Functions in OpenTofu HCL\nDESCRIPTION: Illustrates how to use provider-defined functions in OpenTofu 1.7.0+. This example shows the required_providers block configuration and how to call a provider-defined function (echo) from the myhelper provider.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    myhelper = {\n      # yantrio/helpers registers a function named \"echo\"\n      source = \"yantrio/helpers\"\n    }\n  }\n}\n\nlocals {\n  myval = provider::myhelper::echo(\"Hello Functions!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Module Configuration with For_Each in OpenTofu HCL\nDESCRIPTION: Shows how to use for_each in module configuration and explains the limitations of using for_each with fields that must be statically known.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation.md#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"version\" {\n    type = string\n}\n\nmodule \"common\" {\n    for_each = {first = \"us-east-1\", second = \"us-east-2\"}\n    source = \"./common\"\n    version = \"${var.version}_${each.key}\"\n    region = each.value\n}\n```\n\n----------------------------------------\n\nTITLE: Remote State Data Source Configuration\nDESCRIPTION: Configuration for accessing PostgreSQL remote state from another configuration\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/pg.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"network\" {\n  backend = \"pg\"\n  config = {\n    conn_str = \"postgres://localhost/tofu_backend\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Module Resource State in OpenTofu\nDESCRIPTION: Example demonstrating how to show state information for a resource within a module using the tofu state show command.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/show.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state show 'module.foo.packet_device.worker'\n```\n\n----------------------------------------\n\nTITLE: Basic OpenTofu Show Command Usage\nDESCRIPTION: Shows the basic command syntax for using the tofu show command to display state or plan file contents. The command can be used with an optional file path and supports flags for JSON output and color control.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/show.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu show [options] [file]\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Resource Instance Using for_each (Windows CMD)\nDESCRIPTION: This command demonstrates how to remove a specific instance of a resource that uses the for_each meta-argument in Windows Command Prompt.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state rm packet_device.worker[\\\"example\\\"]\n```\n\n----------------------------------------\n\nTITLE: OpenTofu Version Command with JSON Output\nDESCRIPTION: Shows how to use the 'tofu version' command with the -json flag to output version information in JSON format, including terraform version, platform, and provider selections.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/version.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\n$ tofu version -json\n{\n  \"terraform_version\": \"0.16.0-alpha2\",\n  \"platform\": \"darwin_amd64\",\n  \"provider_selections\": {\n    \"registry.opentofu.org/hashicorp/null\": \"3.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling Example with try Function in HCL\nDESCRIPTION: Example showing how try function handles reference errors that cannot be caught at runtime.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/try.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> try(local.nonexist, \"fallback\")\n\nError: Reference to undeclared local value\n\nA local value with the name \"nonexist\" has not been declared.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the tofu taint Command\nDESCRIPTION: Shows the basic syntax for using the tofu taint command. The command requires specifying the address of the resource to mark as tainted in the OpenTofu state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/taint.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu taint [options] <address>\n```\n\n----------------------------------------\n\nTITLE: Using filebase64sha256 Function in OpenTofu\nDESCRIPTION: The filebase64sha256 function computes the SHA256 hash of a file's contents and encodes it with Base64. It's related to base64sha256 but operates on file contents rather than literal strings, and works with binary files unlike the file function.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/filebase64sha256.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfilebase64sha256(filename)\n```\n\n----------------------------------------\n\nTITLE: Range Function Syntax in OpenTofu HCL\nDESCRIPTION: Shows the three forms of the range function in OpenTofu HCL: with only max limit, with start and limit, and with start, limit and step values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/range.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrange(max)\nrange(start, limit)\nrange(start, limit, step)\n```\n\n----------------------------------------\n\nTITLE: OpenBao Transit Engine Configuration\nDESCRIPTION: Example configuration for OpenBao Transit Secret Engine key provider.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\n{OpenBao}\n```\n\n----------------------------------------\n\nTITLE: Using Remote State Data Source with GCS Backend\nDESCRIPTION: Example of accessing remote state stored in GCS using the terraform_remote_state data source. This allows retrieving outputs from another OpenTofu configuration stored in GCS.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/gcs.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"gcs\"\n  config = {\n    bucket  = \"tofu-state\"\n    prefix  = \"prod\"\n  }\n}\n\nresource \"local_file\" \"foo\" {\n  content  = data.terraform_remote_state.foo.outputs.greeting\n  filename = \"${path.module}/outputs.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Schema Representation JSON Structure\nDESCRIPTION: Defines the structure of a schema representation that pairs a provider or resource schema with its version number.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/providers/schema.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // \"version\" is the schema version, not the provider version\n  \"version\": int64,\n  \"block\": <block-representation>\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Terraform Plan Status\nDESCRIPTION: Command to verify that there are no pending changes in Terraform before migration\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.7.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n\n...\n\nNo changes. Your infrastructure matches the configuration.\n\nTerraform has compared your real infrastructure against your\nconfiguration and found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Data Source Example in OpenTofu\nDESCRIPTION: Shows how to use a data source to reference an existing AMI in a module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"aws_ami\" \"example\" {\n  owner = \"9999933333\"\n\n  tags = {\n    application = \"example-app\"\n    environment = \"dev\"\n  }\n}\n\nmodule \"example\" {\n  source = \"./modules/example\"\n\n  ami = data.aws_ami.example\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Kubernetes Backend State\nDESCRIPTION: Example showing how to reference state stored in a Kubernetes backend using terraform_remote_state data source.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/kubernetes.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"kubernetes\"\n  config = {\n    secret_suffix    = \"state\"\n    load_config_file = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: strcontains Function Example with False Result in OpenTofu\nDESCRIPTION: Example demonstrating the strcontains function returning false when the substring \"wod\" is not found in the string \"hello world\".\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/strcontains.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n> strcontains(\"hello world\", \"wod\")\nfalse\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for COS Backend with Assume Role\nDESCRIPTION: Example of setting environment variables for COS backend configuration with assume role, including credentials, region, and assume role parameters.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/cos.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ export TENCENTCLOUD_SECRET_ID=\"my-secret-id\"\n$ export TENCENTCLOUD_SECRET_KEY=\"my-secret-key\"\n$ export TENCENTCLOUD_REGION=\"ap-guangzhou\"\n$ export TENCENTCLOUD_ASSUME_ROLE_ARN=\"qcs::cam::uin/xxx:roleName/yyy\"\n$ export TENCENTCLOUD_ASSUME_ROLE_SESSION_NAME=\"my-session-name\"\n$ export TENCENTCLOUD_ASSUME_ROLE_SESSION_DURATION=3600\n$ tofu plan\n```\n\n----------------------------------------\n\nTITLE: Child Module Resource Definition (Proposed Structure)\nDESCRIPTION: Child module definition under the proposed structure showing variable usage.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation/module-expansion.md#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"key\" {}\nvariable \"value\" {}\nresource \"tfcoremock_resource\" { string = var.key, other = var.value }\n```\n\n----------------------------------------\n\nTITLE: Defining the strrev Function Signature in HCL\nDESCRIPTION: Shows the function signature for strrev which takes a string parameter and returns the reversed string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/strrev.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstrrev(string)\n```\n\n----------------------------------------\n\nTITLE: Simple Plantimestamp Usage Example\nDESCRIPTION: Basic example showing the output format of the plantimestamp function call\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/plantimestamp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> plantimestamp()\n2018-05-13T07:44:12Z\n```\n\n----------------------------------------\n\nTITLE: Invalid Backend Configuration with Dynamic Resource in OpenTofu HCL\nDESCRIPTION: Shows an example of attempting to use a dynamic resource value in backend configuration, which is not allowed and will produce an error.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation.md#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"mycloud_account\" {\n}\n\nlocals {\n    account_id = mycloud.account.id\n}\n\nterraform {\n  backend \"somebackend\" {\n    account_id = local.account_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Connection with Relative Script Path\nDESCRIPTION: Shows how to configure an SSH connection with a relative script path that will place temporary scripts in the remote user's home directory when using SCP for file transfer.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/connection.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nconnection {\n  type = \"ssh\"\n  # ...\n  script_path = \"tofu_provisioner_%RAND%.sh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting a Workspace in OpenTofu CLI\nDESCRIPTION: This example demonstrates how to list available workspaces and then select a specific workspace using the OpenTofu CLI. It shows the output of the 'tofu workspace list' command followed by the 'tofu workspace select' command to switch to the 'default' workspace.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/workspace/select.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu workspace list\n  default\n* development\n  jsmith-test\n\n$ tofu workspace select default\nSwitched to workspace \"default\".\n```\n\n----------------------------------------\n\nTITLE: Showing For-Each Resource State in OpenTofu - Windows CMD\nDESCRIPTION: Example showing how to display state information for a resource using for_each meta-argument in Windows Command Prompt.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/show.mdx#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state show packet_device.worker[\\\"example\\\"]\n```\n\n----------------------------------------\n\nTITLE: Setting TF_LOG Debug Level\nDESCRIPTION: Enables detailed debug logging to stderr for OpenTofu operations\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_LOG=trace\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance into Resource\nDESCRIPTION: Shell command that imports an AWS EC2 instance with ID 'i-abcd1234' into the 'aws_instance.foo' resource address in OpenTofu state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/import.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu import aws_instance.foo i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: Using the 'can' Function with Regex in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates how to use the 'can' function with regex to test if a string matches a pattern. The condition will return true if the variable 'name' contains only lowercase letters.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/custom-conditions.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ncondition = can(regex(\"^[a-z]+$\", var.name))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Resource Dependencies in HCL for OpenTofu Exclude Flag\nDESCRIPTION: This HCL snippet shows a configuration with four null_resources and their dependencies, used to illustrate how the proposed -exclude flag would work in different scenarios.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240725-exclude-resources.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# In this example there are 4 null_resources, with the following dependency graph:\n# A <---- [B,C] <---- D\n\nresource \"null_resource\" \"a\" {\n  \n}\n\nresource \"null_resource\" \"b\" {\n  triggers = {\n    a = null_resource.a.id\n  }\n}\n\nresource \"null_resource\" \"c\" {\n  triggers = {\n    a = null_resource.a.id\n  }\n}\n\nresource \"null_resource\" \"d\" {\n  triggers = {\n    b = null_resource.b.id\n    c = null_resource.c.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in regex Function\nDESCRIPTION: Demonstrates error handling when the regex pattern doesn't match any part of the input string. Shows the error message format.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/regex.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nregex(\"[a-z]+\", \"53453453.34534523454\")\n\nError: Error in function call\n\nCall to function \"regex\" failed: pattern did not match any part of the given\nstring.\n```\n\n----------------------------------------\n\nTITLE: Calculating Exponents with pow Function in OpenTofu\nDESCRIPTION: The pow function in OpenTofu raises its first argument to the power of the second argument. It is used for exponentiation calculations within OpenTofu configurations or expressions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/pow.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> pow(3, 2)\n9\n> pow(4, 0)\n1\n```\n\n----------------------------------------\n\nTITLE: Equivalent HCL Configuration for Variables and Resources\nDESCRIPTION: This snippet shows the equivalent HCL (HashiCorp Configuration Language) syntax for the previously defined JSON configurations, demonstrating variables and resources in native OpenTofu syntax.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/syntax/json.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"example\" {\n  default = \"hello\"\n}\n\nresource \"aws_instance\" \"example\" {\n  instance_type = \"t2.micro\"\n  ami           = \"ami-abc123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Object Structure in OpenTofu\nDESCRIPTION: Example of the resource object structure used to identify resources in OpenTofu configuration, showing a module-nested resource with a for_each key.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addr\": \"module.pets.random_pet.pet[\\\"friend\\\"]\",\n  \"module\": \"module.pets\",\n  \"resource\": \"random_pet.pet[\\\"friend\\\"]\",\n  \"implied_provider\": \"random\",\n  \"resource_type\": \"random_pet\",\n  \"resource_name\": \"pet\",\n  \"resource_key\": \"friend\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu CLI Shell Tab-completion\nDESCRIPTION: This bash command installs tab-completion for OpenTofu CLI commands in bash or zsh shells.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntofu -install-autocomplete\n```\n\n----------------------------------------\n\nTITLE: Using the Recommended -replace Option with tofu apply\nDESCRIPTION: Example showing how to use the recommended -replace option with the apply command to force replacement of a resource. This approach is preferred over taint as it allows reviewing changes in the plan before taking action.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/taint.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu apply -replace=\"aws_instance.example[0]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring External Encryption Method in OpenTofu using HCL\nDESCRIPTION: This snippet demonstrates how to configure the external encryption method in an OpenTofu configuration file. It specifies the encryption method, key provider, and the commands to be executed for encryption and decryption operations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/encryption/method/external/README.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  encryption {\n    method \"external\" \"foo\" {\n      keys = key_provider.some.provider\n      encrypt_command = [\"/path/to/binary\", \"arg1\", \"arg2\"]\n      decrypt_command = [\"/path/to/binary\", \"arg1\", \"arg2\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Provider Instances with for_each in Resources and Modules\nDESCRIPTION: Shows how to use provider instances with for_each in both resources and modules, demonstrating how each.key can be used to reference the appropriate provider instance.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  regions = {\"us\": \"us-east-1\", \"eu\": \"eu-west-1\"}\n}\n\nprovider \"aws\" {\n  alias    = \"by_region\"\n  for_each = local.regions\n\n  region = each.value\n}\n\nresource \"aws_s3_bucket\" \"primary\" {\n  for_each = local.regions\n  provider = aws.by_region[each.key]\n\n  # ...\n}\n\nmodule \"mod\" {\n  source   = \"./mod\"\n  for_each = local.regions\n  providers = {\n    aws = aws.by_region[each.key]\n  }\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing OCI Module in OpenTofu HCL\nDESCRIPTION: This snippet demonstrates how to reference a module from an OCI registry in OpenTofu configuration. It uses the 'oci://' prefix to specify the source address.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/5-modules.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"foo\" {\n  source = \"oci://example.com/opentofu-vpc-module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Checksums with Cosign on Linux/MacOS/BSD\nDESCRIPTION: Script to verify the authenticity of the checksums file using Cosign on POSIX systems. This provides an additional security layer by verifying the digital signature of the checksums file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/standalone.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Replace YOURVERSION with the version you downloaded, for example, 1.6.0-alpha1\n\n# Verify the signature on the checksum file\ncosign verify-blob \\\n  --certificate-identity \"https://github.com/opentofu/opentofu/.github/workflows/release.yml@refs/tags/v${YOURVERSION}\" \\\n  --certificate-oidc-issuer \"https://token.actions.githubusercontent.com\" \\\n  --cert \"tofu_${YOURVERSION}_SHA256SUMS.pem\" \\\n  --signature \"tofu_${YOURVERSION}_SHA256SUMS.sig\" \\\n  \"tofu_${YOURVERSION}_SHA256SUMS\"\n```\n\n----------------------------------------\n\nTITLE: Defining Resources in JSON Configuration for OpenTofu\nDESCRIPTION: This snippet shows how to define an AWS EC2 instance resource in OpenTofu using JSON syntax. It demonstrates the nested structure required for resources with multiple labels.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/syntax/json.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource\": {\n    \"aws_instance\": {\n      \"example\": {\n        \"instance_type\": \"t2.micro\",\n        \"ami\": \"ami-abc123\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using strrev Function with Examples in HCL\nDESCRIPTION: Demonstrates how the strrev function works with both ASCII and Unicode strings. The function correctly handles Unicode characters like snowman emoji.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/strrev.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> strrev(\"hello\")\nolleh\n> strrev(\"a ☃\")\n☃ a\n```\n\n----------------------------------------\n\nTITLE: Using Variable Definition Files\nDESCRIPTION: Demonstrates how to use a 'tfvars' file to set multiple input variables when running the 'tofu plan' command. This is useful for managing sets of variable values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/plan.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntofu plan -var-file=FILENAME\n```\n\n----------------------------------------\n\nTITLE: Less Than or Equal Comparison in OpenTofu\nDESCRIPTION: Demonstrates the less than or equal to operator that returns true if the first number value is less than or equal to the second.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\na <= b\n```\n\n----------------------------------------\n\nTITLE: Basic Numeric Literal Expression in OpenTofu HCL\nDESCRIPTION: Example of a simple numeric literal expression in OpenTofu configuration language.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n5\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Script Path in OpenTofu Connection Block\nDESCRIPTION: Demonstrates how to override the default script path for remote provisioner execution using the connection block. This example shows setting a custom path on a Windows system using forward slashes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/connection.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconnection {\n  # ...\n  script_path = \"H:/tofu-temp/script_%RAND%.sh\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variables and Resources in OpenTofu HCL\nDESCRIPTION: A basic OpenTofu configuration defining a map variable 'apps' with nested objects and a resource that uses for_each to create multiple random_pet resources based on the map entries.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/console.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"apps\" {\n  type = map(any)\n  default = {\n    \"foo\" = {\n      \"region\" = \"us-east-1\",\n    },\n    \"bar\" = {\n      \"region\" = \"eu-west-1\",\n    },\n    \"baz\" = {\n      \"region\" = \"ap-south-1\",\n    },\n  }\n}\n\nresource \"random_pet\" \"example\" {\n  for_each = var.apps\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Workspace from Existing State in OpenTofu\nDESCRIPTION: This snippet shows how to create a new workspace named 'example' from a pre-existing local state file using the 'tofu workspace new' command with the '-state' option.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/workspace/new.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu workspace new -state=old.terraform.tfstate example\nCreated and switched to workspace \"example\".\n\nYou're now on a new, empty workspace. Workspaces isolate their state,\nso if you run \"tofu plan\" OpenTofu will not see any existing state\nfor this configuration.\n```\n\n----------------------------------------\n\nTITLE: Using OpenTofu Login Command\nDESCRIPTION: Basic command syntax for logging into OpenTofu-compatible services. The command can optionally take a hostname parameter to specify the target service.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/login.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu login [hostname]\n```\n\n----------------------------------------\n\nTITLE: Removing All Instances of a Resource in a Module\nDESCRIPTION: This command removes all instances of a packet_device resource named 'worker' that exists within a module named 'foo' from the OpenTofu state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state rm 'module.foo.packet_device.worker'\n```\n\n----------------------------------------\n\nTITLE: Chained moved Blocks in HCL\nDESCRIPTION: Demonstrates how to implement chained moved blocks to record a sequence of moves for the same resource, maintaining a complete migration history for different upgrade paths.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-16_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nmoved {\n  from = aws_instance.a\n  to   = aws_instance.b\n}\n\nmoved {\n  from = aws_instance.b\n  to   = aws_instance.c\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend with Variables and Locals in OpenTofu HCL\nDESCRIPTION: Demonstrates how to use variables and locals in backend configuration, including potential error scenarios and variable provision methods.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"key\" {\n    type = string\n}\n\nlocals {\n    region = \"us-east-1\"\n    key_check = md5sum(var.key)\n}\n\nterraform {\n  backend \"somebackend\" {\n    region = local.region\n    key = var.key\n    key_check = local.key_check\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example terraform.tfstate Path\nDESCRIPTION: Default local path where OpenTofu stores state data when not configured for remote storage.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/remote.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nterraform.tfstate\n```\n\n----------------------------------------\n\nTITLE: Simple SetSubtract Example\nDESCRIPTION: Demonstrates removing elements 'a' and 'c' from a set containing 'a', 'b', and 'c', resulting in a new set with only 'b'.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/setsubtract.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nsetsubtract([\"a\", \"b\", \"c\"], [\"a\", \"c\"])\ntoset([\n  \"b\",\n])\n```\n\n----------------------------------------\n\nTITLE: Creating a New Workspace in OpenTofu\nDESCRIPTION: This snippet demonstrates how to create a new workspace named 'example' using the 'tofu workspace new' command. It shows the basic usage and the output of the command.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/workspace/new.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu workspace new example\nCreated and switched to workspace \"example\"!\n\nYou're now on a new, empty workspace. Workspaces isolate their state,\nso if you run \"tofu plan\" OpenTofu will not see any existing state\nfor this configuration.\n```\n\n----------------------------------------\n\nTITLE: Constant List-of-Objects Expression in HCL\nDESCRIPTION: Demonstrates a valid but not recommended way to define a constant list-of-objects using attribute syntax. This approach requires all attributes to be explicitly set.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/attr-as-blocks.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nexample = [\n  {\n    foo = \"bar\"\n  },\n  {\n    foo = \"baz\"\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Using -chdir Option with OpenTofu CLI\nDESCRIPTION: This snippet demonstrates how to use the -chdir option to run OpenTofu commands from a different directory than the root module directory.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntofu -chdir=environments/production apply\n```\n\n----------------------------------------\n\nTITLE: Configuring External Key Provider in OpenTofu\nDESCRIPTION: Configuration block for setting up an external key provider in OpenTofu. Specifies the command and arguments to execute the external provider binary.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/encryption/keyprovider/external/README.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  encryption {\n    key_provider \"external\" \"foo\" {\n      command = [\"/path/to/binary\", \"arg1\", \"arg2\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking OpenTofu Version\nDESCRIPTION: Verify the successful installation of OpenTofu by checking its version. This command displays the version number and system information.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.9.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu --version\nOpenTofu v1.9.0\non linux_amd64\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Backend with Conditional Write Locking in Terraform\nDESCRIPTION: Example backend configuration that demonstrates how to enable the new S3-based locking feature using the 'use_lockfile' attribute in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20250211-s3-locking-with-conditional-writes.md#2025-04-16_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    bucket = \"tofu-state-backend\"\n    key = \"statefile\"\n    region = \"us-east-1\"\n    dynamodb_table = \"tofu_locking\"\n    use_lockfile = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining endswith Function Syntax in HCL\nDESCRIPTION: This snippet shows the syntax for using the endswith function in OpenTofu. It takes two parameters: a string to check and a suffix string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/endswith.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nendswith(string, suffix)\n```\n\n----------------------------------------\n\nTITLE: Referencing Mercurial Repositories as Module Sources in OpenTofu\nDESCRIPTION: This example shows how to use a Mercurial repository as a module source by prefixing the address with 'hg::' followed by any valid Mercurial URL. OpenTofu will use the hg clone command to fetch the module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"hg::http://example.com/vpc.hg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Version Configuration in Docusaurus\nDESCRIPTION: JavaScript code snippets for updating the version configuration in the Docusaurus config file. This includes updating the previous latest version and adding the new version.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/CONTRIBUTING.RELEASE.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"vX.Y-1\": {\n  label: \"X.Y-1.x\",\n  path: \"vX.Y-1\",\n  banner: \"none\",\n},\n```\n\nLANGUAGE: javascript\nCODE:\n```\n\"vX.Y\": {\n  label: \"X.Y.x\",\n  path: \"\",\n},\n```\n\nLANGUAGE: javascript\nCODE:\n```\nitems: [\n   {\n     label: \"vX.Y.x (current)\",\n     href: \"/docs/\"\n   },\n   {\n     label: \"vX.Y-1.x\",\n     href: \"/docs/vX.Y-1/\"\n   },\n   // ...\n   {\n     label: \"Development\",\n     href: \"/docs/main/\"\n   },\n ],\n```\n\n----------------------------------------\n\nTITLE: Allowing Provider Cache to Break Dependency Lock File in HCL\nDESCRIPTION: This configuration setting allows OpenTofu to treat a package in the cache directory as valid even without an entry in the dependency lock file. This is meant for exceptional situations where teams don't preserve the dependency lock file in version control.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/config-file.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nplugin_cache_may_break_dependency_lock_file = true\n```\n\n----------------------------------------\n\nTITLE: Specifying Empty Object Collection Using Attribute Syntax in HCL\nDESCRIPTION: Shows how to explicitly specify zero objects for an argument that supports the attributes-as-blocks behavior. This uses attribute syntax with an empty list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/attr-as-blocks.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nexample = []\n```\n\n----------------------------------------\n\nTITLE: Configuring State Persistence Interval\nDESCRIPTION: Sets the interval between state persistence operations\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_STATE_PERSIST_INTERVAL=300\n```\n\n----------------------------------------\n\nTITLE: Azure Backend Configuration with SAS Token\nDESCRIPTION: Configuration for Azure backend using SAS Token authentication method.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/azurerm.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"azurerm\" {\n    storage_account_name = \"abcd1234\"\n    container_name       = \"tfstate\"\n    key                  = \"prod.terraform.tfstate\"\n    sas_token = \"abcdefghijklmnopqrstuvwxyz0123456789...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating OpenTofu Installation\nDESCRIPTION: This command checks the installed version of OpenTofu to verify that the installation was successful.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/homebrew.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntofu --version\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenTofu CLI Usage and Subcommands\nDESCRIPTION: This snippet shows the output of running the 'tofu' command without arguments, listing all available subcommands and global options.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage: tofu [global options] <subcommand> [args]\n\nThe available commands for execution are listed below.\nThe primary workflow commands are given first, followed by\nless common or more advanced commands.\n\nMain commands:\n  init          Prepare your working directory for other commands\n  validate      Check whether the configuration is valid\n  plan          Show changes required by the current configuration\n  apply         Create or update infrastructure\n  destroy       Destroy previously-created infrastructure\n\nAll other commands:\n  console       Try OpenTofu expressions at an interactive command prompt\n  fmt           Reformat your configuration in the standard style\n  force-unlock  Release a stuck lock on the current workspace\n  get           Install or upgrade remote OpenTofu modules\n  graph         Generate a Graphviz graph of the steps in an operation\n  import        Associate existing infrastructure with a OpenTofu resource\n  login         Obtain and save credentials for a remote host\n  logout        Remove locally-stored credentials for a remote host\n  metadata      Metadata related commands\n  output        Show output values from your root module\n  providers     Show the providers required for this configuration\n  refresh       Update the state to match remote systems\n  show          Show the current state or a saved plan\n  state         Advanced state management\n  taint         Mark a resource instance as not fully functional\n  untaint       Remove the 'tainted' state from a resource instance\n  version       Show the current OpenTofu version\n  workspace     Workspace management\n\nGlobal options (use these before the subcommand, if any):\n  -chdir=DIR    Switch to a different working directory before executing the\n                given subcommand.\n  -help         Show this help output, or the help for a specified subcommand.\n  -version      An alias for the \"version\" subcommand.\n```\n\n----------------------------------------\n\nTITLE: Using the OpenTofu Logout Command\nDESCRIPTION: Demonstrates the usage syntax for the 'tofu logout' command. It allows for an optional hostname parameter to specify which credentials to remove.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/logout.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nUsage: `tofu logout [hostname]`\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Resource Instance Using for_each (PowerShell)\nDESCRIPTION: This command demonstrates how to remove a specific instance of a resource that uses the for_each meta-argument in PowerShell.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/rm.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state rm 'packet_device.worker[\\\"example\\\"]'\n```\n\n----------------------------------------\n\nTITLE: Renaming a Module Call in OpenTofu HCL\nDESCRIPTION: Shows how to rename a module call and add a 'moved' block to maintain backward compatibility for all resources within the module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"b\" {\n  source = \"../modules/example\"\n\n  # (module arguments)\n}\n\nmoved {\n  from = module.a\n  to   = module.b\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTofu with Backend Configuration File\nDESCRIPTION: Command to initialize OpenTofu with a separate backend configuration file, allowing for dynamic configuration and separation of sensitive data.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/remote.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ntofu init -backend-config=config.remote.tfbackend\n```\n\n----------------------------------------\n\nTITLE: Example Usage of index Function in OpenTofu HCL\nDESCRIPTION: This example demonstrates how to use the 'index' function to find the position of the string 'b' in a list of strings. The function returns 1, indicating that 'b' is at index 1 (the second position) in the list.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/index_function.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n> index([\"a\", \"b\", \"c\"], \"b\")\n1\n```\n\n----------------------------------------\n\nTITLE: Using the force-unlock command in OpenTofu\nDESCRIPTION: Basic usage of the force-unlock command which manually unlocks the state for a defined configuration without modifying infrastructure. The command requires a LOCK_ID parameter.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/force-unlock.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu force-unlock [options] LOCK_ID\n```\n\n----------------------------------------\n\nTITLE: Using encode_expr Function with the Built-in Provider\nDESCRIPTION: Example of using the encode_expr function to convert an arbitrary expression into a string with valid OpenTofu syntax.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/builtin.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  expression = {\n    key1 = \"value1\"\n    key2 = \"value2\"\n  }\n  encoded = provider::terraform::encode_expr(local.expression) # Returns string\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenTofu Installation\nDESCRIPTION: Command to verify OpenTofu installation and version\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.7.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu --version\nOpenTofu v1.7.1\non linux_amd64\n```\n\n----------------------------------------\n\nTITLE: Listing platform-specific tags in OCI Image Layout\nDESCRIPTION: Shows how to list all platform-specific tags created in the local OCI Image Layout after pushing all packages.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/oci_registries/provider-mirror.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shellsession\nCODE:\n```\n$ oras repo tags --oci-layout tmp-layout\ndarwin_amd64\nlinux_386\nlinux_amd64\nlinux_arm\nlinux_arm64\nwindows_386\nwindows_amd64\nwindows_arm\nwindows_arm64\n```\n\n----------------------------------------\n\nTITLE: Setting Encryption Configuration via Environment Variable in Bash\nDESCRIPTION: Example of setting encryption configuration using the TF_ENCRYPTION environment variable in Bash with a JSON string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/state_encryption.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_ENCRYPTION='{\"key_provider\":{...},\"method\":{...},\"state\":{...}}'\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenTofu Project Directory Structure\nDESCRIPTION: A directory tree visualization showing how an OpenTofu project is organized with multiple modules, each containing Terraform configuration files and their corresponding test files.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/flat-layout-module.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── module1\n│    ├── main.tf\n│    ├── main.tftest.hcl\n│    ├── foo.tf\n│    ├── foo.tftest.hcl\n│    ├── bar.tf\n│    └── bar.tftest.hcl\n└── module2\n     └── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Installation for Network Mirror in HCL\nDESCRIPTION: Example HCL configuration for setting up a provider network mirror in the OpenTofu CLI configuration. This specifies the base URL for the mirror service.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/provider-network-mirror-protocol.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nprovider_installation {\n  network_mirror {\n    url = \"https://tofu.example.com/providers/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic regexall Function Syntax\nDESCRIPTION: Shows the basic syntax for calling the regexall function which takes a pattern and string parameter.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/regexall.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nregexall(pattern, string)\n```\n\n----------------------------------------\n\nTITLE: Default Provider Configuration in OpenTofu HCL\nDESCRIPTION: Shows the equivalent of omitting the provider argument, which defaults to the provider matching the resource type prefix.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/configuration.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"foo\" {\n  provider = aws\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing OpenTofu Installation Methods\nDESCRIPTION: Bash commands for testing different OpenTofu installation methods including Snapcraft, Deb, and Standalone. These commands install, verify, and uninstall OpenTofu using various distribution methods.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/CONTRIBUTING.RELEASE.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo snap install opentofu --classic\ntofu --version\nsudo snap uninstall opentofu\n```\n\nLANGUAGE: bash\nCODE:\n```\n./install-opentofu.sh --install-method deb\ntofu --version\napt remove --purge tofu\n```\n\nLANGUAGE: bash\nCODE:\n```\n./install-opentofu.sh --install-method standalone --opentofu-version X.Y.Z\n/usr/local/bin/tofu --version\nsudo rm -rf /opt/opentofu /usr/local/bin/tofu\n```\n\n----------------------------------------\n\nTITLE: Experimental Features Configuration\nDESCRIPTION: Shows how to enable experimental features in OpenTofu using the experiments argument.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  experiments = [example]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Kubernetes Cluster Hostname in OpenTofu HCL\nDESCRIPTION: This snippet shows how to export the hostname of a Kubernetes cluster as an output value in an OpenTofu module. This allows for abstraction across different Kubernetes implementations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-16_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"hostname\" {\n  value = azurerm_kubernetes_cluster.main.fqdn\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu on FreeBSD using ports\nDESCRIPTION: Commands to install OpenTofu on FreeBSD using the ports system. This method fetches and extracts port snapshots, then builds and installs the OpenTofu port from the sysutils category.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/bsd.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nportsnap fetch extract\nmake -C /usr/ports/sysutils/opentofu install clean\n```\n\n----------------------------------------\n\nTITLE: Filtering with For Expression on List of Objects\nDESCRIPTION: An example showing how to filter elements from a list of objects based on attribute values, which is a more readable alternative to matchkeys in many scenarios.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/matchkeys.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> [for x in [{id=\"i-123\",zone=\"us-west\"},{id=\"i-abc\",zone=\"us-east\"}]: x.id if x.zone == \"us-east\"]\n[\n  \"i-abc\",\n]\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenTofu installation on Windows\nDESCRIPTION: Command to verify that OpenTofu has been successfully installed by checking its version. This confirms that the installation was successful and OpenTofu is accessible from the command line.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/windows.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntofu --version\n```\n\n----------------------------------------\n\nTITLE: Enabling Ignore Tracing\nDESCRIPTION: Enables debug output for ignored files and folders\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_IGNORE=trace\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format for OpenTofu Functions Metadata\nDESCRIPTION: A pseudo-JSON representation of the output format returned by `tofu metadata functions -json`. It shows the top-level structure including format_version and function_signatures with their descriptions, return types, and parameters.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/functions-meta.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"format_version\": \"1.0\",\n\n  // \"function_signatures\" describes the signatures for all\n  // available functions.\n  \"function_signatures\": {\n    // keys in this map are the function names, such as \"abs\"\n    \"example_function\": {\n      // \"description\" is an English-language description of\n      // the purpose and usage of the function in Markdown.\n      \"description\": \"string\",\n\n      // \"return_type\" is a representation of a type specification\n      // that the function returns.\n      \"return_type\": \"string\",\n\n      // \"parameters\" is an optional list of the positional parameters\n      // that the function accepts.\n      \"parameters\": [\n        <parameter-representation>,\n        …\n      ],\n\n      // \"variadic_parameter\" is an optional representation of the\n      // additional arguments that the function accepts after those\n      // matching with the fixed parameters.\n      \"variadic_parameter\": <parameter-representation>\n    },\n    \"example_function_two\": { … }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: State Pull with Variable Assignment\nDESCRIPTION: Command example showing how to pull state while setting input variables using the -var flag. This allows specifying values for variables declared in the root module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/pull.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntofu state pull -var 'NAME=VALUE'\n```\n\n----------------------------------------\n\nTITLE: Complex setproduct Usage for Resource Creation\nDESCRIPTION: Shows a complex example of using setproduct to create subnet resources for multiple networks.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"networks\" {\n  type = map(object({\n    base_cidr_block = string\n  }))\n}\n\nvariable \"subnets\" {\n  type = map(object({\n    number = number\n  }))\n}\n\nresource \"aws_vpc\" \"example\" {\n  for_each = var.networks\n\n  cidr_block = each.value.base_cidr_block\n}\n\nlocals {\n  networks = [\n    for key, network in var.networks : {\n      key        = key\n      cidr_block = network.cidr_block\n    }\n  ]\n  subnets = [\n    for key, subnet in var.subnets : {\n      key    = key\n      number = subnet.number\n    }\n  ]\n\n  network_subnets = [\n    for pair in setproduct(local.networks, local.subnets) : {\n      network_key = pair[0].key\n      subnet_key  = pair[1].key\n      network_id  = aws_vpc.example[pair[0].key].id\n      cidr_block = cidrsubnet(pair[0].cidr_block, 4, pair[1].number)\n    }\n  ]\n}\n\nresource \"aws_subnet\" \"example\" {\n  for_each = {\n    for subnet in local.network_subnets : \"${subnet.network_key}.${subnet.subnet_key}\" => subnet\n  }\n\n  vpc_id            = each.value.network_id\n  availability_zone = each.value.subnet_key\n  cidr_block        = each.value.cidr_block\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Output Path\nDESCRIPTION: Specifies a file path for OpenTofu log output\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_LOG_PATH=./terraform.log\n```\n\n----------------------------------------\n\nTITLE: Basic Coalesce Function Usage\nDESCRIPTION: Demonstrates basic usage of coalesce function with strings and numbers. Shows how the function returns the first non-empty value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/coalesce.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> coalesce(\"a\", \"b\")\na\n> coalesce(\"\", \"b\")\nb\n> coalesce(1,2)\n1\n```\n\n----------------------------------------\n\nTITLE: Importing AWS Instance into Resource with For-Each (Windows CMD)\nDESCRIPTION: Windows cmd.exe command that imports an AWS EC2 instance with ID 'i-abcd1234' into the 'example' instance of 'aws_instance.baz' configured with the 'for_each' meta-argument.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/import.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu import aws_instance.baz[\\\"example\\\"] i-abcd1234\n```\n\n----------------------------------------\n\nTITLE: GCP KMS Provider Configuration\nDESCRIPTION: Minimal configuration example for Google Cloud Key Management Service provider.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\n{GCPKMS}\n```\n\n----------------------------------------\n\nTITLE: Parameter Representation Format for OpenTofu Functions\nDESCRIPTION: A JSON format that describes a parameter to a function in the OpenTofu metadata functions output. It includes the parameter name, description, and type specification.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/functions-meta.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // \"name\" is the internal name of the parameter\n  \"name\": \"string\",\n\n  // \"description\" is an optional English-language description of\n  // the purpose and usage of the parameter in Markdown.\n  \"description\": \"string\",\n\n  // \"type\" is a representation of a type specification\n  // that the parameter's value must conform to.\n  \"type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Encryption Interface in Go\nDESCRIPTION: Interface definition for the encryption component in Go, providing methods to obtain encryption tools for different purposes like state and plan files.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/state_encryption.md#2025-04-16_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Encryption interface {\n\tState() StateEncryption\n\tPlan() PlanEncryption\n\tRemoteState(string) StateEncryption\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB IAM Permissions for OpenTofu State Locking\nDESCRIPTION: AWS IAM policy that grants the necessary permissions for OpenTofu to use DynamoDB for state locking, including describing the table and performing item operations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/s3.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"dynamodb:DescribeTable\",\n        \"dynamodb:GetItem\",\n        \"dynamodb:PutItem\",\n        \"dynamodb:DeleteItem\"\n      ],\n      \"Resource\": \"arn:aws:dynamodb:*:*:table/mytable\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic OpenTofu Configuration Example\nDESCRIPTION: Example of a basic AWS instance configuration in the main configuration file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/files/override.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  instance_type = \"t2.micro\"\n  ami           = \"ami-408c7f28\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Tainted Resource State in OpenTofu\nDESCRIPTION: Shows the plan output when OpenTofu detects a tainted resource that needs replacement. The output indicates that the AWS instance will be destroyed and recreated due to its tainted status.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/state/taint.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\n  # aws_instance.example is tainted, so it must be replaced\n-/+ resource \"aws_instance\" \"example\" {\n      # ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Using the OpenTofu get command\nDESCRIPTION: Basic usage of the 'tofu get' command which downloads modules into a .terraform subdirectory. This subdirectory should not be committed to version control.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/get.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntofu get [options]\n```\n\n----------------------------------------\n\nTITLE: Test Summary Message Format in OpenTofu\nDESCRIPTION: Example of the JSON message structure for overall test execution summary, including statistics for passed, failed, errored, and skipped tests.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"@level\": \"info\",\n    \"@message\": \"Success! 1 passed, 0 failed.\",\n    \"@module\": \"tofu.ui\",\n    \"@timestamp\": \"2024-04-20T17:24:48.716977+10:00\",\n    \"test_summary\": {\n        \"status\": \"pass\",\n        \"passed\": 1,\n        \"failed\": 0,\n        \"errored\": 0,\n        \"skipped\": 0\n    },\n    \"type\": \"test_summary\"\n}\n```\n\n----------------------------------------\n\nTITLE: POSIX Shell Implementation of External Key Provider\nDESCRIPTION: Example implementation of an OpenTofu external key provider in POSIX Shell. This demonstrates the protocol exchange and key generation process using standard Unix tools.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\n\n# Write header\necho '{\"protocol\":\"opentofu-key-provider-external\",\"version\":1}'\n\n# Read input (if any)\ninput=$(cat)\n\n# Generate key (32 bytes)\nkey=$(dd if=/dev/urandom bs=32 count=1 2>/dev/null | base64)\n\n# Output result\necho \"{\\\"key\\\":\\\"$key\\\",\\\"metadata\\\":null}\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu on Alpine Linux using the APK Package\nDESCRIPTION: This snippet demonstrates how to install an OpenTofu APK package after downloading it from the GitHub releases page. The command uses the --allow-untrusted flag since the package may not be signed by an Alpine-trusted key.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/alpine.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napk add --allow-untrusted tofu_*.apk\n```\n\n----------------------------------------\n\nTITLE: Filtering AWS Instances by Availability Zone\nDESCRIPTION: A practical example of filtering AWS instance IDs by availability zone using a for expression, which is recommended over matchkeys for better readability in configuration files.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/matchkeys.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n> [for x in aws_instance.example: x.id if x.availability_zone == \"us-east-1a\"]\n[\n  \"i-abc123\",\n  \"i-def456\",\n]\n```\n\n----------------------------------------\n\nTITLE: Checking OpenTofu Version\nDESCRIPTION: Command to verify the installed version of OpenTofu after upgrading\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/upgrading.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu --version\nOpenTofu v1.10.0\non linux_amd64\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom AWS API Endpoints in HCL\nDESCRIPTION: Example showing how to set custom endpoint URLs for AWS services like DynamoDB and S3 in the backend configuration. This is useful when working with local endpoints or custom AWS API implementations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/s3.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"s3\" {\n    endpoints = {\n      dynamodb = \"http://localhost:4569\"\n      s3       = \"http://localhost:4572\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Output Values in OpenTofu\nDESCRIPTION: Example of the JSON structure for outputs message that contains root module output values after a successful plan or apply. Shows output name, value, type, and sensitivity flag.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"Outputs: 1\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.869280-04:00\",\n  \"outputs\": {\n    \"pets\": {\n      \"sensitive\": false,\n      \"type\": \"string\",\n      \"value\": \"smart-lizard\"\n    }\n  },\n  \"type\": \"outputs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Resource Replacement in OpenTofu using -replace Option\nDESCRIPTION: Demonstrates how to use the -replace flag with tofu apply command to force the replacement of a specific AWS instance resource. This command will mark the resource for replacement regardless of its current state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/state/taint.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shellsession\nCODE:\n```\n$ tofu apply -replace=\"aws_instance.example\"\n# ...\n\n  # aws_instance.example will be replaced, as requested\n-/+ resource \"aws_instance\" \"example\" {\n      # ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Output from OpenTofu Apply Operation\nDESCRIPTION: This snippet demonstrates the JSON output structure from running 'tofu apply -json'. It includes various message types such as version info, planned changes, apply progress, and output summaries.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"@level\":\"info\",\n  \"@message\":\"OpenTofu 1.6.0\",\n  \"@module\":\"tofu.ui\",\n  \"@timestamp\":\"2021-05-25T13:32:41.275359-04:00\",\n  \"tofu\":\"0.15.4\",\n  \"type\":\"version\",\n  \"ui\":\"0.1.0\"\n}\n{\n  \"@level\":\"info\",\n  \"@message\":\"random_pet.animal: Plan to create\",\n  \"@module\":\"tofu.ui\",\n  \"@timestamp\":\"2021-05-25T13:32:41.705503-04:00\",\n  \"change\":{\n    \"resource\":{\n      \"addr\":\"random_pet.animal\",\n      \"module\":\"\",\n      \"resource\":\"random_pet.animal\",\n      \"implied_provider\":\"random\",\n      \"resource_type\":\"random_pet\",\n      \"resource_name\":\"animal\",\n      \"resource_key\":null\n    },\n    \"action\":\"create\"\n  },\n  \"type\":\"planned_change\"\n}\n{\n  \"@level\":\"info\",\n  \"@message\":\"Plan: 1 to add, 0 to change, 0 to destroy.\",\n  \"@module\":\"tofu.ui\",\n  \"@timestamp\":\"2021-05-25T13:32:41.705638-04:00\",\n  \"changes\":{\n    \"add\":1,\n    \"change\":0,\n    \"remove\":0,\n    \"operation\":\"plan\"\n  },\n  \"type\":\"change_summary\"\n}\n{\n  \"@level\":\"info\",\n  \"@message\":\"random_pet.animal: Creating...\",\n  \"@module\":\"tofu.ui\",\n  \"@timestamp\":\"2021-05-25T13:32:41.825308-04:00\",\n  \"hook\":{\n    \"resource\":{\n      \"addr\":\"random_pet.animal\",\n      \"module\":\"\",\n      \"resource\":\"random_pet.animal\",\n      \"implied_provider\":\"random\",\n      \"resource_type\":\"random_pet\",\n      \"resource_name\":\"animal\",\n      \"resource_key\":null\n    },\n    \"action\":\"create\"\n  },\n  \"type\":\"apply_start\"\n}\n{\n  \"@level\":\"info\",\n  \"@message\":\"random_pet.animal: Creation complete after 0s [id=smart-lizard]\",\n  \"@module\":\"tofu.ui\",\n  \"@timestamp\":\"2021-05-25T13:32:41.826179-04:00\",\n  \"hook\":{\n    \"resource\":{\n      \"addr\":\"random_pet.animal\",\n      \"module\":\"\",\n      \"resource\":\"random_pet.animal\",\n      \"implied_provider\":\"random\",\n      \"resource_type\":\"random_pet\",\n      \"resource_name\":\"animal\",\n      \"resource_key\":null\n    },\n    \"action\":\"create\",\n    \"id_key\":\"id\",\n    \"id_value\":\"smart-lizard\",\n    \"elapsed_seconds\":0\n  },\n  \"type\":\"apply_complete\"\n}\n{\n  \"@level\":\"info\",\n  \"@message\":\"Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\",\n  \"@module\":\"tofu.ui\",\n  \"@timestamp\":\"2021-05-25T13:32:41.869168-04:00\",\n  \"changes\":{\n    \"add\":1,\n    \"change\":0,\n    \"remove\":0,\n    \"operation\":\"apply\"\n  },\n  \"type\":\"change_summary\"\n}\n{\n  \"@level\":\"info\",\n  \"@message\":\"Outputs: 1\",\n  \"@module\":\"tofu.ui\",\n  \"@timestamp\":\"2021-05-25T13:32:41.869280-04:00\",\n  \"outputs\":{\n    \"pets\":{\n      \"sensitive\":false,\n      \"type\":\"string\",\n      \"value\":\"smart-lizard\"\n    }\n  },\n  \"type\":\"outputs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Module Definition with Dynamic Source Path\nDESCRIPTION: Example showing a module definition using for_each to create multiple instances with different source paths based on the iterator value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation/module-expansion.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"mod\" {\n        for_each = {\"us\" = \"first\", \"eu\" = \"second\"}\n        source = \"./my-mod-${each.value}\"\n        name = each.key\n}\n```\n\n----------------------------------------\n\nTITLE: Moving a Resource Into a Module with Command Line (Shell)\nDESCRIPTION: Shell command to move a resource from the root module into a child module in OpenTofu state, preserving the existing remote infrastructure.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntofu state mv packet_device.worker module.worker.packet_device.worker\n```\n\n----------------------------------------\n\nTITLE: Greater Than Comparison in OpenTofu\nDESCRIPTION: Demonstrates the greater than operator that returns true if the first number value is greater than the second.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\na > b\n```\n\n----------------------------------------\n\nTITLE: Resource Refresh Start Message Format in OpenTofu\nDESCRIPTION: Example of the JSON message structure when a resource refresh operation starts, showing the hook object structure with resource identification details.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: Refreshing state... [id=1971614370559474622]\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-03-26T14:18:06.508915-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"id_key\": \"id\",\n    \"id_value\": \"1971614370559474622\"\n  },\n  \"type\": \"refresh_start\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing artifacts to remote repository\nDESCRIPTION: Demonstrates how to push all artifacts from the local OCI Image Layout to a remote repository using ORAS.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/oci_registries/provider-mirror.mdx#2025-04-16_snippet_8\n\nLANGUAGE: shellsession\nCODE:\n```\n$ oras cp \\\n   --from-oci-layout tmp-layout:4.0.6 \\\n   example.com/opentofu-providers/hashicorp/tls:4.0.6\n\n✓ Copied  terraform-provider-tls_4.0.6_linux_amd64.zip\n  └─ sha256:5f12d51fa9e87b6d29275fa58d1cd8681c0177a1d3a71a4e6c78ad7b011fa065\n[...]\n✓ Copied  application/vnd.oci.image.config.v1+json\n  └─ sha256:9d99a75171aea000c711b34c0e5e3f28d3d537dd99d110eafbfbc2bd8e52c2bf\n✓ Copied  application/vnd.oci.image.manifest.v1+json\n  └─ sha256:01d3ccf9747dd604ebaa314efbacf12e18a248f8bf1c783f5cbb220754954e67\n✓ Copied  application/vnd.oci.image.index.v1+json\n  └─ sha256:da13ebaa32ba856d75da18e38daabc7a65ac8853230dfcc817f8ccbac15b639a\nCopied [oci-layout] tmp-layout:4.0.6 => [registry] example.com/opentofu-providers/hashicorp/tls:4.0.6\nDigest: sha256:da13ebaa32ba856d75da18e38daabc7a65ac8853230dfcc817f8ccbac15b639a\n```\n\n----------------------------------------\n\nTITLE: Configuring XOR-based Dual-Custody Key Provider in OpenTofu\nDESCRIPTION: This snippet demonstrates how to configure the XOR-based dual-custody key provider in OpenTofu. It shows the setup of two PBKDF2 key providers and their combination using the XOR key provider. The input keys must have the same length.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/encryption/keyprovider/xor/README.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl2\nCODE:\n```\nterraform {\n    encryption {\n        key_provider \"pbkdf2\" \"a\" {\n            passphrase = \"This is passphrase 1\"\n        }\n        key_provider \"pbkdf2\" \"b\" {\n            passphrase = \"This is passphrase 2\"\n        }\n        key_provider \"xor\" \"myprovider\" {\n            a = key_provider.pbkdf2.a\n            b = key_provider.pbkdf2.b\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Provider Checksums in Lock File (Diff)\nDESCRIPTION: Example diff showing how OpenTofu adds a new checksum (h1 format) to an existing provider block in the lock file as it transitions between different hashing schemes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-16_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n--- .terraform.lock.hcl\t2020-10-07 17:24:23.397892140 -0700\n+++ .terraform.lock.hcl\t2020-10-07 17:24:57.423130253 -0700\n@@ -10,6 +10,7 @@\n   version     = \"2.1.0\"\n   constraints = \"~> 2.1.0\"\n   hashes = [\n+    \"h1:1xvaS5D8B8t6J6XmXxX8spo97tAzjhacjedFX1B47Fk=\",\n     \"h1:EOJImaEaVThWasdqnJjfYc6/P8N/MRAq1J7avx5ZbV4=\",\n     \"zh:0015b491cf9151235e57e35ea6b89381098e61bd923f56dffc86026d58748880\",\n     \"zh:4c5682ba1e0fc7e2e602d3f103af1638f868c31fe80cc1a884a97f6dad6e1c11\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Provider Aliases in OpenTofu Child Module\nDESCRIPTION: This snippet demonstrates how to configure multiple provider aliases in a child module of an OpenTofu configuration, using the configuration_aliases attribute in required_providers.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/provider-references.md#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    modaws = {\n      source = \"aws\"\n      version = \">= 0.1\"\n      configuration_aliases = [ modaws.foo, modaws.bar ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Schema.Attribute Mapping for JSON in OpenTofu\nDESCRIPTION: A table defining how different OpenTofu type constraints (string, number, bool, list, set, map, object, tuple, dynamic) are serialized to JSON. It details the JSON representation for each type pattern and includes special handling for null values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/plugin-protocol/object-wire-format.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| `type` Pattern | JSON Representation |\n|---|---|\n| `\"string\"` | A JSON string containing the Unicode characters from the string value. |\n| `\"number\"` | A JSON number representing the number value. OpenTofu numbers are arbitrary-precision floating point, so the value may have a larger mantissa than can be represented by a 64-bit float. |\n| `\"bool\"` | Either JSON `true` or JSON `false`, depending on the boolean value. |\n| `[\"list\",T]` | A JSON array with the same number of elements as the list value, each of which is represented by the result of applying these same mapping rules to the nested type `T`. |\n| `[\"set\",T]` | Identical in representation to `[\"list\",T]`, but the order of elements is undefined because OpenTofu sets are unordered. |\n| `[\"map\",T]` | A JSON object with one property per element of the map value, where the element key is serialized as the property name string and the element value is represented by a property value constructed by applying these same mapping rules to the nested type `T`. |\n| `[\"object\",ATTRS]` | A JSON object with one property per attribute defined in the `ATTRS` object. The attribute name is serialized as the property name string and the attribute value is represented by a property value constructed by applying these same mapping rules to each attribute's own type. |\n| `[\"tuple\",TYPES]` | A JSON array with one element per element described by the `TYPES` array. The element values are constructed by applying these same mapping rules to the corresponding element of `TYPES`. |\n| `\"dynamic\"` | A JSON object with two properties: `\"type\"` specifying one of the `type` patterns described in this table in-band, giving the exact runtime type of the value, and `\"value\"` specifying the result of applying these same mapping rules to the table for the specified runtime type. This special type constraint represents values whose types will be decided only at runtime. |\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Links with DocCardList in JSX for OpenTofu Migration Guide\nDESCRIPTION: This code snippet uses the DocCardList component to create a navigation menu of links to different migration guides based on Terraform version. It structures the migration paths for users coming from Terraform versions 1.9, 1.8, 1.7, 1.6, and 1.5 or lower.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n    items={[\n        {\n            type: \"link\",\n            href: \"terraform-1.9/\",\n            label: \"Terraform 1.9\",\n        },\n        {\n            type: \"link\",\n            href: \"terraform-1.8/\",\n            label: \"Terraform 1.8\",\n        },\n        {\n            type: \"link\",\n            href: \"terraform-1.7/\",\n            label: \"Terraform 1.7\",\n        },\n        {\n            type: \"link\",\n            href: \"terraform-1.6/\",\n            label: \"Terraform 1.6\",\n        },\n        {\n            type: \"link\",\n            href: \"terraform-1.5-or-lower/\",\n            label: \"Terraform 1.5 or lower\",\n        },\n    ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Pushing OpenTofu State from Standard Input\nDESCRIPTION: Example of pushing OpenTofu state data from standard input using the 'tofu state push' command. This is useful for programmatically generated state data.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/push.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntofu state push -\n```\n\n----------------------------------------\n\nTITLE: Comparing Basic Variable Definitions in .tf and .tofu Files\nDESCRIPTION: Example showing how a variable definition differs between a standard .tf file and an OpenTofu-specific .tofu file that includes the deprecated attribute, which is an OpenTofu-specific feature.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240529-OpenTofu-Specific-Code-Override.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n// vars.tf\n\nvariable \"region\" {\n  type = string\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n// vars.tofu\n\nvariable \"region\" {\n  type = string\n  deprecated = \"Reason this was deprecated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Create Before Destroy Dependency Graph\nDESCRIPTION: Graphviz DOT diagram showing incorrect dependency resolution when only one resource has create_before_destroy, resulting in cyclic dependencies.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/destroying.md#2025-04-16_snippet_9\n\nLANGUAGE: dot\nCODE:\n```\ndigraph replacement {\n    subgraph create {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B create\"];\n        a -> b [dir=back];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n        b_d [label=\"B destroy\"];\n        a_d -> b_d;\n    }\n\n    a -> a_d;\n    a -> b_d [style=dotted];\n    b -> a_d [style=dotted];\n    b -> b_d [dir=back];\n}\n```\n\n----------------------------------------\n\nTITLE: Credentials Helper Configuration in HCL\nDESCRIPTION: Example demonstrating how to configure a credentials helper for alternative credentials storage mechanism.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/config-file.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ncredentials_helper \"example\" {\n  args = []\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling OpenTofu Docker Image from GitHub Packages Registry\nDESCRIPTION: This code snippet demonstrates how to pull the OpenTofu Docker image from the GitHub Packages registry. It uses the 'docker pull' command to retrieve the latest version of the OpenTofu image.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/docker.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/opentofu/opentofu:latest\n```\n\n----------------------------------------\n\nTITLE: Fetching an Index Manifest with curl\nDESCRIPTION: Example curl command to fetch an index manifest from an OCI registry. This demonstrates how to use the previously obtained bearer token to access a specific versioned artifact.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: Bearer djE6b3Blb...\" https://ghcr.io/v2/opentofu/opentofu/manifests/1.8.0\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of OpenTofu Init Command\nDESCRIPTION: The basic command syntax for initializing an OpenTofu working directory. This is the first command that should be run after writing a new configuration or cloning an existing one.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/init.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntofu init [options]\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Version Control\nDESCRIPTION: Shows the process of committing OpenTofu configuration changes to a Git repository before applying them to create infrastructure.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/core-workflow.mdx#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ git add main.tf\n$ git commit -m 'Managing infrastructure as code!'\n\n[main (root-commit) f735520] Managing infrastructure as code!\n 1 file changed, 1 insertion(+)\n```\n\n----------------------------------------\n\nTITLE: Example of platform-specific manifest descriptor\nDESCRIPTION: Shows an example of a platform-specific manifest descriptor that should be included in the multi-platform index manifest JSON file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/oci_registries/provider-mirror.mdx#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"artifactType\": \"application/vnd.opentofu.provider-target\",\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"digest\": \"sha256:01d3ccf9747dd604ebaa314efbacf12e18a248f8bf1c783f5cbb220754954e67\",\n  \"size\": 606,\n  \"platform\": {\n    \"os\": \"linux\",\n    \"architecture\": \"amd64\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom OpenTofu Docker Image Using Multi-stage Build\nDESCRIPTION: This Dockerfile demonstrates how to build a custom OpenTofu Docker image using a multi-stage build. It copies the OpenTofu binary from the minimal image to an Alpine Linux base image.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/docker.mdx#2025-04-16_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/opentofu/opentofu:minimal AS tofu\n\nFROM alpine\n\nCOPY --from=tofu /usr/local/bin/tofu /usr/local/bin/tofu\n\n# Your other build instructions\n```\n\n----------------------------------------\n\nTITLE: Setting Encryption Configuration via Environment Variable (Linux/UNIX)\nDESCRIPTION: Shows how to set the OpenTofu encryption configuration using the TF_ENCRYPTION environment variable in a Linux/UNIX shell.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_ENCRYPTION='{\"key_provider\":{\"local\":{\"method\":{\"aes_gcm\":{\"static_key\":\"THISISNOTASECUREPASSPHRASE\"}}}}}\n'\n```\n\n----------------------------------------\n\nTITLE: Referencing Provider Instances in Resources\nDESCRIPTION: Demonstrates how to reference provider instances created with for_each in resource blocks, showing the extended reference format with instance keys.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_s3_bucket\" \"primary\" {\n  for_each = local.regions\n  provider = aws.by_region[\"us\"] # Extends the existing reference format with an instance key\n}\n\nlocals {\n  region = \"eu\"\n}\n\nmodule \"mod\" {\n  source = \"./mod\"\n  providers = {\n    # The new instance key segment can use arbitrary expressions in the index brackets.\n    aws = aws.by_region[local.region]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource and Module Interdependency Example in OpenTofu\nDESCRIPTION: Illustrates how modules can depend on resource attributes through expressions, showing why some evaluations must be deferred until graph evaluation. The example shows resources with count and modules with for_each depending on those resources.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation.md#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  name  = \"server-${count.index}\"\n  count = 5\n  # (other resource arguments...)\n}\n\nmodule \"dnsentries\" {\n  source   = \"./dnsentries\"\n  hostname = each.value\n  for_each = toset(aws_instance.example.*.name)\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying File Checksums on Windows with PowerShell\nDESCRIPTION: PowerShell script to verify the integrity of an OpenTofu download on Windows systems. It calculates the hash of the downloaded file and compares it with the expected value from the checksums file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/standalone.mdx#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Replace YOURVERSION with the version you downloaded, for example, 1.6.0-alpha1\n# Replace YOURFILE with the file you downloaded, for example, tofu_1.6.0-alpha1_windows_amd64.zip\n\n# Get the expected hash from the checksums file\n$expectedHash = Get-Content \"tofu_YOURVERSION_SHA256SUMS\" | Where-Object { $_ -like \"*YOURFILE*\" } | ForEach-Object { ($_ -split \"\\s+\")[0] }\n\n# Calculate the hash of the downloaded file\n$actualHash = (Get-FileHash -Path \"YOURFILE\" -Algorithm SHA256).Hash.ToLower()\n\n# Compare the hashes\nif ($expectedHash -eq $actualHash) {\n    Write-Output \"Checksum verification passed!\"\n} else {\n    Write-Error \"Checksum verification failed!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Platform for Provider Packages\nDESCRIPTION: Command option for specifying which platform's provider packages to download when creating the mirror.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/providers/mirror.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-platform=OS_ARCH\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Provision Progress in OpenTofu\nDESCRIPTION: Example of the JSON structure for provision_progress message that shows output from a provisioner during execution. Includes resource identification, provisioner type, and output log.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: (local-exec): Executing: [\\\"/bin/sh\\\" \\\"-c\\\" \\\"sleep 10 && exit 1\\\"]\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-03-26T16:38:43.997869-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"provisioner\": \"local-exec\",\n    \"output\": \"Executing: [\\\"/bin/sh\\\" \\\"-c\\\" \\\"sleep 10 && exit 1\\\"]\"\n  },\n  \"type\": \"provision_progress\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Negative Indices with substr Function\nDESCRIPTION: Demonstrates using negative offset and length values, where negative offset counts from the end of the string and -1 length returns all remaining characters.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/substr.mdx#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n> substr(\"hello world\", -5, -1)\nworld\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Revision in Mercurial Repository Sources\nDESCRIPTION: This snippet demonstrates how to specify a non-default branch or tag when using a Mercurial repository as a module source, using the optional 'ref' argument in the URL query string.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc\" {\n  source = \"hg::http://example.com/vpc.hg?ref=v1.2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Test File Execution Message Format in OpenTofu\nDESCRIPTION: Example of the JSON message structure for test file execution results, including path and status information.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"@level\": \"info\",\n    \"@message\": \"main.tftest.hcl... pass\",\n    \"@module\": \"tofu.ui\",\n    \"@testfile\": \"main.tftest.hcl\",\n    \"@timestamp\": \"2024-04-20T17:24:48.588473+10:00\",\n    \"test_file\": {\n        \"path\": \"main.tftest.hcl\",\n        \"status\": \"pass\"\n    },\n    \"type\": \"test_file\"\n}\n```\n\n----------------------------------------\n\nTITLE: RFC File Path Structure\nDESCRIPTION: Demonstrates the file naming convention and structure for RFC documents in the OpenTofu repository. RFCs are stored as markdown files with ISO date and title in the filename.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240524-OpenTofu-RFC-Process.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n./rfc/${isodate}-${rfc title}.md\n```\n\n----------------------------------------\n\nTITLE: OpenTofu State Push with Variable Assignment\nDESCRIPTION: Example of using the 'tofu state push' command with variable assignment for configurations that use variables in module sources, backend configuration, or encryption blocks.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/push.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntofu state push -var 'NAME=VALUE' PATH\n```\n\n----------------------------------------\n\nTITLE: Static Module Output References in HCL\nDESCRIPTION: Example demonstrating how module outputs could be used to reference component sources across multiple projects within an organization. Shows the potential future capability of pulling in dependency definitions from a central source module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation.md#2025-04-16_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"mycompany\" {\n  source = \"git::.../sources\"\n}\n\nmodule \"capability\" {\n  source = ${module.mycompany.some_component}\n}\n\nmodule \"other_capability\" {\n  source = ${module.mycompany.other_component}\n}\n```\n\n----------------------------------------\n\nTITLE: Destroy Then Update Graph in DOT Format\nDESCRIPTION: A DOT language graph representation showing the dependency relationship when destroying a resource (B) before updating its dependency (A).\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/destroying.md#2025-04-16_snippet_5\n\nLANGUAGE: dot\nCODE:\n```\ndigraph destroy_then_update {\n    subgraph update {\n        rank=same;\n        a [label=\"A update\"];\n    }\n    subgraph destroy {\n        rank=same;\n        b_d [label=\"B destroy\"];\n    }\n\n    a -> b_d;\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Download Response JSON Structure\nDESCRIPTION: The JSON response from the provider download endpoint containing protocol versions, download URLs, checksum information, and GPG signing keys for package verification.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/provider-registry-protocol.mdx#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"protocols\": [\"4.0\", \"5.1\"],\n  \"os\": \"linux\",\n  \"arch\": \"amd64\",\n  \"filename\": \"terraform-provider-random_2.0.0_linux_amd64.zip\",\n  \"download_url\": \"https://releases.example.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_linux_amd64.zip\",\n  \"shasums_url\": \"https://releases.example.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_SHA256SUMS\",\n  \"shasums_signature_url\": \"https://releases.example.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_SHA256SUMS.sig\",\n  \"shasum\": \"5f9c7aa76b7c34d722fc9123208e26b22d60440cb47150dd04733b9b94f4541a\",\n  \"signing_keys\": {\n    \"gpg_public_keys\": [\n      {\n        \"key_id\": \"51852D87348FFC4C\",\n        \"ascii_armor\": \"-----BEGIN PGP PUBLIC KEY BLOCK-----\\nVersion: GnuPG v1\\n\\nmQENBFMORM0BCADBRyKO1MhCirazOSVwcfTr1xUxjPvfxD3hjUwHtjsOy/bT6p9f\\nW2mRPfwnq2JB5As+paL3UGDsSRDnK9KAxQb0NNF4+eVhr/EJ18s3wwXXDMjpIifq\\nfIm2WyH3G+aRLTLPIpscUNKDyxFOUbsmgXAmJ46Re1fn8uKxKRHbfa39aeuEYWFA\\n3drdL1WoUngvED7f+RnKBK2G6ZEpO+LDovQk19xGjiMTtPJrjMjZJ3QXqPvx5wca\\nKSZLr4lMTuoTI/ZXyZy5bD4tShiZz6KcyX27cD70q2iRcEZ0poLKHyEIDAi3TM5k\\nSwbbWBFd5RNPOR0qzrb/0p9ksKK48IIfH2FvABEBAAG0K0hhc2hpQ29ycCBTZWN1\\ncml0eSA8c2VjdXJpdHlAaGFzaGljb3JwLmNvbT6JATgEEwECACIFAlMORM0CGwMG\\nCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEFGFLYc0j/xMyWIIAIPhcVqiQ59n\\nJc07gjUX0SWBJAxEG1lKxfzS4Xp+57h2xxTpdotGQ1fZwsihaIqow337YHQI3q0i\\nSqV534Ms+j/tU7X8sq11xFJIeEVG8PASRCwmryUwghFKPlHETQ8jJ+Y8+1asRydi\\npsP3B/5Mjhqv/uOK+Vy3zAyIpyDOMtIpOVfjSpCplVRdtSTFWBu9Em7j5I2HMn1w\\nsJZnJgXKpybpibGiiTtmnFLOwibmprSu04rsnP4ncdC2XRD4wIjoyA+4PKgX3sCO\\nklEzKryWYBmLkJOMDdo52LttP3279s7XrkLEE7ia0fXa2c12EQ0f0DQ1tGUvyVEW\\nWmJVccm5bq25AQ0EUw5EzQEIANaPUY04/g7AmYkOMjaCZ6iTp9hB5Rsj/4ee/ln9\\nwArzRO9+3eejLWh53FoN1rO+su7tiXJA5YAzVy6tuolrqjM8DBztPxdLBbEi4V+j\\n2tK0dATdBQBHEh3OJApO2UBtcjaZBT31zrG9K55D+CrcgIVEHAKY8Cb4kLBkb5wM\\nskn+DrASKU0BNIV1qRsxfiUdQHZfSqtp004nrql1lbFMLFEuiY8FZrkkQ9qduixo\\nmTT6f34/oiY+Jam3zCK7RDN/OjuWheIPGj/Qbx9JuNiwgX6yRj7OE1tjUx6d8g9y\\n0H1fmLJbb3WZZbuuGFnK6qrE3bGeY8+AWaJAZ37wpWh1p0cAEQEAAYkBHwQYAQIA\\nCQUCUw5EzQIbDAAKCRBRhS2HNI/8TJntCAClU7TOO/X053eKF1jqNW4A1qpxctVc\\nz8eTcY8Om5O4f6a/rfxfNFKn9Qyja/OG1xWNobETy7MiMXYjaa8uUx5iFy6kMVaP\\n0BXJ59NLZjMARGw6lVTYDTIvzqqqwLxgliSDfSnqUhubGwvykANPO+93BBx89MRG\\nunNoYGXtPlhNFrAsB1VR8+EyKLv2HQtGCPSFBhrjuzH3gxGibNDDdFQLxxuJWepJ\\nEK1UbTS4ms0NgZ2Uknqn1WRU1Ki7rE4sTy68iZtWpKQXZEJa0IGnuI2sSINGcXCJ\\noEIgXTMyCILo34Fa/C6VCm2WBgz9zZO8/rHIiQm1J5zqz0DrDwKBUM9C\\n=LYpS\\n-----END PGP PUBLIC KEY BLOCK-----\",\n        \"trust_signature\": \"\",\n        \"source\": \"ExampleCorp\",\n        \"source_url\": \"https://www.examplecorp.com/security.html\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a List Diff in OpenTofu JSON Formatter\nDESCRIPTION: This code demonstrates how to create a new computed Diff object for a list of primitives in the OpenTofu JSON formatter. It creates a list with various operations (NoOp, Delete, Create) on numeric values and prepares it for rendering.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/command/jsonformat/README.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nlistDiff := computed.NewDiff(renderers.List([]computed.Diff{\n    computed.NewDiff(renderers.Primitive(0.0, 0.0, cty.Number), plans.NoOp, false),\n    computed.NewDiff(renderers.Primitive(1.0, nil, cty.Number), plans.Delete, false),\n    computed.NewDiff(renderers.Primitive(nil, 4.0, cty.Number), plans.Create, false),\n    computed.NewDiff(renderers.Primitive(2.0, 2.0, cty.Number), plans.NoOp, false)\n}, plans.Update, false))\n```\n\n----------------------------------------\n\nTITLE: Module Source Configuration with Variables in OpenTofu HCL\nDESCRIPTION: Illustrates how to use variables in module source configuration, which will be subject to static evaluation during init.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation.md#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"version\" {\n    type = string\n}\n\nmodule \"helper\" {\n    source = \"git@github.com:org/my-utils?ref=${var.version}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Encryption Configuration via Environment Variable (PowerShell)\nDESCRIPTION: Demonstrates setting the OpenTofu encryption configuration using the TF_ENCRYPTION environment variable in PowerShell.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$env:TF_ENCRYPTION='{\"key_provider\":{\"local\":{\"method\":{\"aes_gcm\":{\"static_key\":\"THISISNOTASECUREPASSPHRASE\"}}}}}\n'\n```\n\n----------------------------------------\n\nTITLE: State Representation Format in OpenTofu JSON Output\nDESCRIPTION: Defines the JSON structure returned by 'tofu show -json <STATE FILE>' command. This format includes the values from the state and the OpenTofu version, providing a complete machine-readable representation of the state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/json-format.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // \"values\" is a values representation object derived from the values in the\n  // state. Because the state is always fully known, this is always complete.\n  \"values\": <values-representation>\n\n  // The key here is left unchanged in OpenTofu for compatibility reasons.\n  \"terraform_version\": \"version.string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Tools for OpenTofu Repository Setup on Debian\nDESCRIPTION: Commands to install the necessary tools for adding the OpenTofu repository on Debian-based systems. These tools typically include apt-transport-https, ca-certificates, curl, and gnupg.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/deb.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n{DebStep1Script}\n```\n\n----------------------------------------\n\nTITLE: Pushing Infrastructure Code to Remote Repository\nDESCRIPTION: Demonstrates pushing the committed OpenTofu configuration to a remote Git repository for safekeeping after successfully applying changes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/core-workflow.mdx#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ git remote add origin https://github.com/*user*/*repo*.git\n$ git push origin main\n```\n\n----------------------------------------\n\nTITLE: Complex Module Configuration with Child Modules in OpenTofu HCL\nDESCRIPTION: Demonstrates a more complex scenario with child modules and variable passing, showcasing potential error messages for unresolved variables.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation.md#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# main.tf\nvariable \"version\" {\n    type = string\n}\n\nmodule \"common_first\" {\n    source = \"./common\"\n    version = var.version\n    region = \"us-east-1\"\n}\nmodule \"common_second\" {\n    source = \"./common\"\n    version = var.version\n    region = \"us-east-2\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# ./common/main.tf\nvariable \"version\" {\n    type = string\n}\nvariable \"region\" {\n    type = string\n}\n\nmodule \"helper\" {\n    source = \"git@github.com:org/my-utils?ref=${var.version}\"\n    region = var.region\n}\n```\n\n----------------------------------------\n\nTITLE: Building Configuration Tree from Modules in OpenTofu\nDESCRIPTION: Pseudocode showing how OpenTofu builds the configuration tree by installing modules, loading them, and recursively building child modules. This process creates a Config structure representing the entire project's module hierarchy.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation.md#2025-04-16_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Pseudocode\n// https://github.com/opentofu/opentofu/blob/290fbd66d3f95d3fa413534c4d5e14ef7d95ea2e/internal/configs/config_build.go#L27\nfunc buildConfig(source string) configs.Config {\n    c := configs.Config{}\n\n    // https://github.com/opentofu/opentofu/blob/290fbd66d3f95d3fa413534c4d5e14ef7d95ea2e/internal/initwd/module_install.go#L147\n    path = installModule(source)\n    c.module = loadModule(path) // https://github.com/opentofu/opentofu/blob/290fbd66d3f95d3fa413534c4d5e14ef7d95ea2e/internal/configs/parser_config_dir.go#L41-L58\n\n    // https://github.com/opentofu/opentofu/blob/290fbd66d3f95d3fa413534c4d5e14ef7d95ea2e/internal/configs/config_build.go#L132\n    for name, call := range c.module.calls {\n        c.children[name] = buildConfig(call.source)\n    }\n    return c\n}\n\nroot = buildConfig(\".\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Composite Keys in OpenTofu (HCL)\nDESCRIPTION: Demonstrates how to create and use composite keys in OpenTofu encryption configuration. This example shows chaining key providers to create a derivative key.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/state_encryption.md#2025-04-16_snippet_2\n\nLANGUAGE: hcl2\nCODE:\n```\nterraform {\n  encryption {\n    key_provider \"static\" \"my_passphrase\" {\n      key = \"this is my encryption key\"\n    }\n    key_provider \"some_derivative_key_provider\" \"my_derivative_key\" {\n      key_providers = [key_provider.static.my_passphrase]\n    }\n    method \"aes_gcm\" \"foo\" {\n      key_provider = key_provider.some_derivative_key_provider.my_derivative_key\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Provision Start in OpenTofu\nDESCRIPTION: Example of the JSON structure for provision_start message that is emitted when OpenTofu begins provisioning a resource. Includes resource identification and provisioner type.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: Provisioning with 'local-exec'...\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-03-26T16:38:43.997431-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"provisioner\": \"local-exec\"\n  },\n  \"type\": \"provision_start\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Credentials Helper in OpenTofu\nDESCRIPTION: Example configuration for setting up a credentials helper named 'credstore' with additional arguments in OpenTofu CLI configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/credentials-helpers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncredentials_helper \"credstore\" {\n  args = [\"--host=credstore.example.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Locking In-house Providers with Filesystem Mirror\nDESCRIPTION: This command creates a lock entry for an in-house provider available only in a local filesystem mirror. It specifies the mirror location and target platforms, and locks only the specified provider.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/providers/lock.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntofu providers lock \\\n  -fs-mirror=/usr/local/tofu/providers\n  -platform=windows_amd64 \\\n  -platform=darwin_amd64 \\\n  -platform=linux_amd64 \\\n  tf.example.com/ourcompany/ourplatform\n```\n\n----------------------------------------\n\nTITLE: Git Repository Update Commands\nDESCRIPTION: Commands for initializing and updating git submodules in the documentation repository\nSOURCE: https://github.com/opentofu/opentofu/blob/main/CONTRIBUTING.RELEASE.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule init\ngit submodule update\n```\n\n----------------------------------------\n\nTITLE: Using Bitbucket Repository as Module Source in OpenTofu HCL\nDESCRIPTION: Shows how to use a Bitbucket repository as a module source. OpenTofu automatically recognizes unprefixed bitbucket.org URLs for public repositories.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"consul\" {\n  source = \"bitbucket.org/example-corp/tofu-consul-aws\"\n}\n```\n\n----------------------------------------\n\nTITLE: Module Versions Response Example\nDESCRIPTION: Sample JSON response listing available versions for a specific module from the registry API.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/module-registry-protocol.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"modules\": [\n      {\n         \"versions\": [\n            {\"version\": \"1.0.0\"},\n            {\"version\": \"1.1.0\"},\n            {\"version\": \"2.0.0\"}\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Meta Tag for HTTP URL Redirection in Module Sources\nDESCRIPTION: This snippet shows how to use a meta element in an HTML response to provide a module source address when using HTTP URLs. OpenTofu will look for this meta tag when processing HTTP-based module sources.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/sources.mdx#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"tofu-get\" content=\"github.com/hashicorp/example\" />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the timestamp Function in OpenTofu\nDESCRIPTION: This example shows the output of the timestamp function which returns the current UTC time in RFC 3339 format. The function takes no arguments and produces a string that will change on every execution.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/timestamp.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n> timestamp()\n2018-05-13T07:44:12Z\n```\n\n----------------------------------------\n\nTITLE: Local Variables with Module Source Example in OpenTofu\nDESCRIPTION: Shows the currently unsupported but desired functionality of using local values in module source attributes, which would require evaluation during config loading phase.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation.md#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nlocal {\n  gitrepo = \"git://...\"\n}\nmodule \"mymodule\" {\n  source = locals.gitrepo\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Installation in Meta Type\nDESCRIPTION: A GitHub link to the current implementation of module installation in the Meta type, which will be extended to accept the package fetcher as a parameter.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/8-auth-implementation-details.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[`command.Meta.installModules` currently calls `initwd.NewModuleInstaller` directly](https://github.com/opentofu/opentofu/blob/ffa43acfcdc4431f139967198faa2dd20a2752ea/internal/command/meta_config.go#L294)\n```\n\n----------------------------------------\n\nTITLE: List Available Versions Response Example in JSON\nDESCRIPTION: Sample JSON response from the \"List Available Versions\" endpoint. This shows the available versions for a provider with an empty object for each version for forward compatibility.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/provider-network-mirror-protocol.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versions\": {\n    \"2.0.0\": {},\n    \"2.0.1\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Backend in OpenTofu\nDESCRIPTION: Basic configuration example for setting up Kubernetes as a backend state storage using secret_suffix and config_path parameters.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/kubernetes.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"kubernetes\" {\n    secret_suffix    = \"state\"\n    config_path      = \"~/.kube/config\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Provider Download Request Using curl\nDESCRIPTION: Example curl command for requesting a provider download from the OpenTofu registry, specifying the namespace, type, version, OS, and architecture.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/provider-registry-protocol.mdx#2025-04-16_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl 'https://registry.opentofu.org/v1/providers/examplecorp/random/2.0.0/download/linux/amd64'\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Configured Providers (Current Approach)\nDESCRIPTION: Demonstrates the current approach of configuring multiple providers of the same type using separate provider blocks with different aliases, and referencing them in resources and modules.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  alias = \"us\"\n  region = \"us-east-1\"\n}\n// Copy pasted from above provider, with minor changes\nprovider \"aws\" {\n  alias = \"eu\"\n  region = \"eu-west-1\"\n}\n\nresource \"aws_s3_bucket\" \"primary_us\" {\n  provider = aws.us\n}\n// Copy pasted from above resource, with minor changes\nresource \"aws_s3_bucket\" \"primary_eu\" {\n  provider = aws.eu\n}\n\nmodule \"mod_us\" {\n  source = \"./mod\"\n  providers {\n    aws = aws.us\n  }\n}\n// Copy pasted from above module, with minor changes\nmodule \"mod_eu\" {\n  source = \"./mod\"\n  providers {\n    aws = aws.eu\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Provider Plugin Cache Directory with Environment Variable\nDESCRIPTION: This snippet shows how to set the TF_PLUGIN_CACHE_DIR environment variable to enable caching or override an existing cache directory in a shell session. This is an alternative to the configuration file approach.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/config-file.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_PLUGIN_CACHE_DIR=\"$HOME/.terraform.d/plugin-cache\"\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of External Encryption Method\nDESCRIPTION: Example implementation of an OpenTofu external encryption method in Go. This demonstrates the protocol exchange and AES-GCM encryption/decryption process.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_27\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"crypto/rand\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\t// Write header\n\theader := map[string]interface{}{\n\t\t\"protocol\": \"opentofu-encryption-method-external\",\n\t\t\"version\":  1,\n\t}\n\n\theaderBytes, err := json.Marshal(header)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Println(string(headerBytes))\n\n\t// Read input\n\tvar input struct {\n\t\tKey  string `json:\"key\"`\n\t\tData string `json:\"data\"`\n\t}\n\n\tinputBytes, err := io.ReadAll(os.Stdin)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tif len(inputBytes) > 0 {\n\t\tif err := json.Unmarshal(inputBytes, &input); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\n\t// Parse key\n\tkey, err := base64.StdEncoding.DecodeString(input.Key)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\t// Parse data\n\tdata, err := base64.StdEncoding.DecodeString(input.Data)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\t// Check if this is an encrypt or decrypt operation\n\tvar result []byte\n\tvar metadata []byte\n\n\tif len(data) == 0 {\n\t\t// Encrypt\n\t\tblock, err := aes.NewCipher(key)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\tgcm, err := cipher.NewGCM(block)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\tnonce := make([]byte, gcm.NonceSize())\n\t\tif _, err := rand.Read(nonce); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\tresult = gcm.Seal(nil, nonce, []byte(\"sample plaintext\"), nil)\n\t\tmetadata = nonce\n\t} else {\n\t\t// Decrypt\n\t\tblock, err := aes.NewCipher(key)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\tgcm, err := cipher.NewGCM(block)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\tnonceSize := gcm.NonceSize()\n\t\tif len(data) < nonceSize {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error: ciphertext too short\\n\")\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\tnonce, ciphertext := data[:nonceSize], data[nonceSize:]\n\t\tresult, err = gcm.Open(nil, nonce, ciphertext, nil)\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tmetadata = nil\n\t}\n\n\t// Output result\n\toutput := map[string]interface{}{\n\t\t\"data\":     base64.StdEncoding.EncodeToString(result),\n\t\t\"metadata\": base64.StdEncoding.EncodeToString(metadata),\n\t}\n\n\toutputBytes, err := json.Marshal(output)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Println(string(outputBytes))\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenTofu Plan with No Changes\nDESCRIPTION: After migration, run 'tofu plan' to ensure there are no unexpected changes. The output should indicate that no changes are needed and the infrastructure matches the configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.8.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu plan\n\n...\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your\nconfiguration and found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Pre-Populating Provider Checksums with tofu providers lock Command\nDESCRIPTION: Command to pre-populate provider checksums for multiple platforms to avoid ongoing additions to the lock file. This command downloads and verifies packages for specified platforms and records both zh and h1 checksums.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntofu providers lock \\\n  -platform=linux_arm64 \\\n  -platform=linux_amd64 \\\n  -platform=darwin_amd64 \\\n  -platform=windows_amd64\n```\n\n----------------------------------------\n\nTITLE: Multiple Provisioners in JSON Configuration\nDESCRIPTION: This snippet shows how to represent multiple provisioners for a resource using JSON syntax in OpenTofu, preserving the order of execution.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/syntax/json.mdx#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource\": {\n    \"aws_instance\": {\n      \"example\": {\n        \"provisioner\": [\n          {\n            \"local-exec\": {\n              \"command\": \"echo 'Hello World' >example.txt\"\n            }\n          },\n          {\n            \"file\": {\n              \"source\": \"example.txt\",\n              \"destination\": \"/tmp/example.txt\"\n            }\n          },\n          {\n            \"remote-exec\": {\n              \"inline\": [\"sudo install-something -f /tmp/example.txt\"]\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Provider Instance References without Instance Keys in HCL\nDESCRIPTION: Examples of invalid provider references where the instance key is omitted. When working with a provider configuration that has for_each, you must always specify which instance you want to use.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"example\" {\n  alias    = \"foo\"\n  for_each = toset([\"bar\", \"baz\"])\n\n  # ...\n}\n\nresource \"example_thing\" \"a\" {\n  # The following is invalid: must include the instance key part to\n  # tell OpenTofu how to select exactly one provider instance.\n  provider = example.foo\n}\n\nmodule \"child\" {\n  source = \"./child\"\n  providers = {\n    # The right-hand side of this item is invalid: must include the\n    # instance key part to tell OpenTofu how to select exactly one\n    # provider instance.\n    example.foo = example.foo\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Encryption Method in OpenTofu (HCL)\nDESCRIPTION: Shows how to configure a fallback encryption method for state decryption in OpenTofu. This allows for key and method rollover by specifying a secondary decryption method.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/state_encryption.md#2025-04-16_snippet_1\n\nLANGUAGE: hcl2\nCODE:\n```\nterraform {\n  encryption {\n    state {\n      method = method.aes_gcm.bar\n      fallback {\n        method = method.aes_gcm.baz\n      } \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Discovery JSON Response\nDESCRIPTION: Example JSON response for a service discovery document implementing only the provider registry protocol. Shows the base URL configuration for provider registry endpoints.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/provider-registry-protocol.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"providers.v1\": \"/tofu/providers/v1/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-instance Provider Configuration in OpenTofu Module\nDESCRIPTION: This snippet demonstrates how to define a module with a multi-instance provider configuration using for_each. It includes the required providers block, variable definition, provider block with for_each, and a resource block.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n    }\n  }\n}\n\nvariable \"aws_regions\" {\n  type = map(object({\n    enabled = optional(bool, true)\n  }))\n}\n\nprovider \"aws\" {\n  alias    = \"by_region\"\n  for_each = var.aws_regions\n\n  region = each.key\n}\n\nresource \"aws_instance\" \"example\" {\n  for_each = {\n    for k, v in var.aws_regions : k => v\n    if v.enabled\n  }\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Refresh Complete Message Format in OpenTofu\nDESCRIPTION: Example of the JSON message structure when a resource refresh operation completes, including the hook object with resource details.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: Refresh complete [id=1971614370559474622]\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-03-26T14:18:06.509371-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"id_key\": \"id\",\n    \"id_value\": \"1971614370559474622\"\n  },\n  \"type\": \"refresh_complete\"\n}\n```\n\n----------------------------------------\n\nTITLE: External Encryption Method Header JSON Format\nDESCRIPTION: JSON header format that external encryption methods must output to be recognized by OpenTofu. This header identifies the method and its version.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"protocol\": \"opentofu-encryption-method-external\",\n  \"version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PackageAuthenticationResult in Go\nDESCRIPTION: Defines the new package authentication result structure that contains the collection of hash dispositions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20250327-providerinst-auth-hashes.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype PackageAuthenticationResult struct {\n\thashes HashDispositions\n}\n```\n\n----------------------------------------\n\nTITLE: OpenID Connect (OIDC) Authentication Configuration\nDESCRIPTION: Configuration variables for OIDC authentication with Azure.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/azurerm.mdx#2025-04-16_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n* `oidc_request_url` - (Optional) The URL for the OIDC provider from which to request an ID token.\n* `oidc_request_token` - (Optional) The bearer token for the request to the OIDC provider.\n* `oidc_token` - (Optional) The ID token when authenticating using OpenID Connect.\n* `use_oidc` - (Optional) Should OIDC authentication be used?\n```\n\n----------------------------------------\n\nTITLE: OpenTofu Plan Command\nDESCRIPTION: Command used to generate an execution plan in OpenTofu, allowing operators to preview infrastructure changes before applying them.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/vs/cloudformation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntofu plan\n```\n\n----------------------------------------\n\nTITLE: OpenTofu Graph Command\nDESCRIPTION: Command used to visualize the dependency graph of resources in an OpenTofu execution plan.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/vs/cloudformation.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntofu graph\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS KMS Key Provider in OpenTofu\nDESCRIPTION: This snippet demonstrates how to configure the AWS KMS Key Provider in OpenTofu. It specifies the key provider type as 'aws_kms' and sets the 'kms_key_id' option to reference the desired AWS KMS key.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/encryption/keyprovider/aws_kms/README.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl2\nCODE:\n```\nterraform {\n    encryption {\n        key_provider \"aws_kms\" \"myprovider\" {\n           kms_key_id = \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message: Provider Version Incompatibility - Downgrade Required\nDESCRIPTION: Example error message shown when a provider version is too new for the current OpenTofu version, suggesting the latest compatible version to use.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/plugin-protocol/README.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nProvider \"aws\" v3.0.0 is not compatible with OpenTofu v0.12.0.\nProvider version v2.34.0 is the latest compatible version. Select \nit with the following constraint:\n\n    version = \"~> 2.34.0\"\n\nAlternatively, upgrade to the latest version of OpenTofu for compatibility with newer provider releases.\n```\n\n----------------------------------------\n\nTITLE: Using decode_tfvars Function with the Built-in Provider\nDESCRIPTION: Example of using the decode_tfvars function to parse a .tfvars file content into an object. This function requires the built-in provider to be declared.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/builtin.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  content = file(\"./example_file.tfvars\")\n  decoded = provider::terraform::decode_tfvars(local.content) # Returns object\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Based PostgreSQL Backend Configuration\nDESCRIPTION: Configuration example using environment variables for sensitive credentials\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/pg.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"pg\" {}\n}\n```\n\n----------------------------------------\n\nTITLE: New Module X Definition in HCL\nDESCRIPTION: Defines the first new module 'x' which contains two AWS instance resources extracted from the original module. This is part of the module splitting process.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# module \"x\"\n\nresource \"aws_instance\" \"a\" {\n  # (other resource-type-specific configuration)\n}\n\nresource \"aws_instance\" \"b\" {\n  # (other resource-type-specific configuration)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing downloaded provider packages\nDESCRIPTION: Lists the downloaded .zip packages for different platforms of a provider in the current directory.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/oci_registries/provider-mirror.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shellsession\nCODE:\n```\n$ ls -1\nterraform-provider-tls_4.0.6_darwin_amd64.zip\nterraform-provider-tls_4.0.6_linux_386.zip\nterraform-provider-tls_4.0.6_linux_amd64.zip\nterraform-provider-tls_4.0.6_linux_arm.zip\nterraform-provider-tls_4.0.6_linux_arm64.zip\nterraform-provider-tls_4.0.6_windows_386.zip\nterraform-provider-tls_4.0.6_windows_amd64.zip\nterraform-provider-tls_4.0.6_windows_arm.zip\nterraform-provider-tls_4.0.6_windows_arm64.zip\n```\n\n----------------------------------------\n\nTITLE: Checks Representation Schema in OpenTofu\nDESCRIPTION: JSON schema for representing the state of checkable objects in OpenTofu configuration. It includes resource and output value checks, handling of multiple instances, and problem reporting for failed conditions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/json-format.mdx#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    \"address\": {\n      \"kind\": \"resource\",\n      \"to_display\": \"aws_instance.example\",\n      \"mode\": \"managed\",\n      \"type\": \"aws_instance\",\n      \"name\": \"example\"\n    },\n    \"status\": \"fail\",\n    \"instances\": [\n      {\n        \"address\": {\n          \"to_display\": \"aws_instance.example[0]\",\n          \"instance_key\": 0\n        },\n        \"status\": \"fail\",\n        \"problems\": [\n          {\n            \"message\": \"Server does not have a public IPv6 address.\"\n          }\n        ]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration with Alias\nDESCRIPTION: Example showing provider configuration with alias for multiple provider instances.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/provider-references.md#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region = \"us-east-1\"\n  alias = \"default\"\n}\n\nresource \"aws_s3_bucket\" \"foo\" {\n  bucket_name = \"foo\"\n  provider = aws.default\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach Using Separate Deprecation Block in HCL\nDESCRIPTION: Another alternative implementation using a separate 'deprecation' block to define deprecation details. This approach was considered but rejected for being too verbose and not aligning with OpenTofu language design.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241118-module-vars-and-outputs-deprecation.md#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"this_is_my_variable\" {\n  type = string\n  description = \"This is a variable for the old way of configuring things.\"\n}\n\ndeprecation \"this_is_my_variable\" {\n  type = \"variable\"\n  message = \"This variable will be removed on 2024-12-31. Use another_variable instead.\"\n}\n```\n\n----------------------------------------\n\nTITLE: PBKDF2 Key Provider Configuration\nDESCRIPTION: Configuration for PBKDF2 key provider using passphrase for key generation with AES-GCM encryption.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\n{PBKDF2}\n```\n\n----------------------------------------\n\nTITLE: List Available Installation Packages Response Example in JSON\nDESCRIPTION: Sample JSON response from the \"List Available Installation Packages\" endpoint. This shows available download URLs and hashes for different platform-specific packages of a provider version.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/provider-network-mirror-protocol.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"archives\": {\n    \"darwin_amd64\": {\n      \"url\": \"terraform-provider-random_2.0.0_darwin_amd64.zip\",\n      \"hashes\": [\n        \"h1:4A07+ZFc2wgJwo8YNlQpr1rVlgUDlxXHhPJciaPY5gs=\"\n      ]\n    },\n    \"linux_amd64\": {\n      \"url\": \"terraform-provider-random_2.0.0_linux_amd64.zip\",\n      \"hashes\": [\n        \"h1:lCJCxf/LIowc2IGS9TPjWDyXY4nOmdGdfcwwDQCOURQ=\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Parsing Modules in OpenTofu\nDESCRIPTION: Pseudocode demonstrating how OpenTofu loads a module by parsing all HCL/JSON files in a directory into File structures, then merging them into a Module structure. It also shows how individual files are processed.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation.md#2025-04-16_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// Pseudocode\n// https://github.com/opentofu/opentofu/blob/290fbd66d3f95d3fa413534c4d5e14ef7d95ea2e/internal/configs/parser_config_dir.go#L41-L58\n// https://github.com/opentofu/opentofu/blob/290fbd66d3f95d3fa413534c4d5e14ef7d95ea2e/internal/configs/module.go#L122\nfunc loadModule(path string) configs.Module {\n    var files = []file.File\n    for filepath in range(list_files(path)) {\n        files = append(files, loadFile(filepath))\n    }\n    module := configs.Module{}\n    for _, file in range(files) {\n        module.appendFile(file) // https://github.com/opentofu/opentofu/blob/290fbd66d3f95d3fa413534c4d5e14ef7d95ea2e/internal/configs/module.go#L205\n    }\n    return module\n}\n\n// https://github.com/opentofu/opentofu/blob/290fbd66d3f95d3fa413534c4d5e14ef7d95ea2e/internal/configs/parser_config.go#L54\nfunc loadFile(filepath string) configs.File {\n    file := configs.File{}\n\n    hclBody = hcl.parse(filepath)\n    for _, hclBlock in range(hclBody) {\n        switch (hclBlock.Type) {\n            case \"module\":\n                file.ModuleCalls = append(file.ModuleCalls, decodeModuleCall(hclBlock))\n            case \"variable\":\n                file.Variables = append(file.Variables, decodeVariable(hclBlock))\n            // omitted cases pattern for all remaining supported blocks\n        }\n    }\n\n    return file\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Change Summary in OpenTofu\nDESCRIPTION: Example of the JSON structure for a change summary message output after completing an apply operation in OpenTofu. This shows the format with metadata and count of resources added, changed, or destroyed.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"Apply complete! Resources: 1 added, 0 changed, 0 destroyed.\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.869168-04:00\",\n  \"changes\": {\n    \"add\": 1,\n    \"change\": 0,\n    \"remove\": 0,\n    \"operation\": \"apply\"\n  },\n  \"type\": \"change_summary\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in JSON Configuration for OpenTofu\nDESCRIPTION: This snippet demonstrates how to define a variable in OpenTofu using JSON syntax. It shows the structure for creating a variable named 'example' with a default value.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/syntax/json.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variable\": {\n    \"example\": {\n      \"default\": \"hello\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Authentication curl Command Example\nDESCRIPTION: Example curl command to retrieve a token from ghcr.io without providing credentials. This is useful for accessing public repositories that still require anonymous authentication.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v 'https://ghcr.io/token?service=ghcr.io&scope=repository:opentofu/opentofu:pull'\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration Block Structure\nDESCRIPTION: Example provider block structure that will support for_each iteration. This enables creating multiple provider instances with unique configurations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"type\" {}\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of External Encryption Method\nDESCRIPTION: Example implementation of an OpenTofu external encryption method in Python. This demonstrates the protocol exchange and encryption/decryption process.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python3\n\nimport sys\nimport json\nimport base64\nimport os\nfrom cryptography.hazmat.primitives.ciphers.aead import AESGCM\n\n# Write header\nheader = {\n    \"protocol\": \"opentofu-encryption-method-external\",\n    \"version\": 1\n}\n\nprint(json.dumps(header))\nsys.stdout.flush()\n\n# Read input\ninput_data = sys.stdin.buffer.read()\n\n# Parse input\ntry:\n    input_json = json.loads(input_data)\nexcept json.JSONDecodeError as e:\n    print(f\"Error decoding JSON: {e}\", file=sys.stderr)\n    sys.exit(1)\n\n# Get key and data\nkey = base64.b64decode(input_json.get(\"key\", \"\"))\ndata = base64.b64decode(input_json.get(\"data\", \"\"))\n\n# Initialize AESGCM\naesgcm = AESGCM(key)\n\n# Check if this is an encrypt or decrypt operation\nif not data:\n    # Encrypt\n    nonce = os.urandom(12)  # 96 bits is recommended for GCM\n    plaintext = b\"sample plaintext\"\n    ciphertext = aesgcm.encrypt(nonce, plaintext, None)\n    \n    result = ciphertext\n    metadata = nonce\nelse:\n    # Decrypt - assuming nonce is first 12 bytes\n    nonce = data[:12]\n    ciphertext = data[12:]\n    \n    try:\n        plaintext = aesgcm.decrypt(nonce, ciphertext, None)\n        result = plaintext\n        metadata = None\n    except Exception as e:\n        print(f\"Decryption error: {e}\", file=sys.stderr)\n        sys.exit(1)\n\n# Output result\noutput = {\n    \"data\": base64.b64encode(result).decode(\"utf-8\"),\n    \"metadata\": base64.b64encode(metadata).decode(\"utf-8\") if metadata else None\n}\n\nprint(json.dumps(output))\nsys.stdout.flush()\n```\n\n----------------------------------------\n\nTITLE: Disabling TF_LOG Debug Output\nDESCRIPTION: Disables debug logging by setting TF_LOG to off\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_LOG=off\n```\n\n----------------------------------------\n\nTITLE: Basic PostgreSQL Backend Configuration in OpenTofu\nDESCRIPTION: Basic configuration for setting up PostgreSQL as a backend using a connection string\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/pg.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"pg\" {\n    conn_str = \"postgres://user:pass@db.example.com/tofu_backend\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structure of Configuration Representation in JavaScript\nDESCRIPTION: The complete structure for representing OpenTofu configuration as a JSON object. It includes provider configurations, root module details, resources, outputs, and module calls in a hierarchical structure.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/json-format.mdx#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // \"provider_configs\" describes all of the provider configurations throughout\n  // the configuration tree, flattened into a single map for convenience since\n  // provider configurations are the one concept in OpenTofu that can span\n  // across module boundaries.\n  \"provider_config\": {\n\n    // Keys in the provider_configs map are to be considered opaque by callers,\n    // and used just for lookups using the \"provider_config_key\" property in each\n    // resource object.\n    \"opaque_provider_ref_aws\": {\n\n      // \"name\" is the name of the provider without any alias\n      \"name\": \"aws\",\n\n      // \"full_name\" is the fully-qualified provider name\n      \"full_name\": \"registry.opentofu.org/hashicorp/aws\",\n\n      // \"alias\" is the alias set for a non-default configuration, or unset for\n      // a default configuration.\n      \"alias\": \"foo\",\n\n      // \"module_address\" is included only for provider configurations that are\n      // declared in a descendent module, and gives the opaque address for the\n      // module that contains the provider configuration.\n      \"module_address\": \"module.child\",\n\n      // \"expressions\" describes the provider-specific content of the\n      // configuration block, as a block expressions representation (see section\n      // below).\n      \"expressions\": <block-expressions-representation>\n    }\n  },\n\n  // \"root_module\" describes the root module in the configuration, and serves\n  // as the root of a tree of similar objects describing descendent modules.\n  \"root_module\": {\n\n    // \"outputs\" describes the output value configurations in the module.\n    \"outputs\": {\n\n      // Property names here are the output value names\n      \"example\": {\n        \"expression\": <expression-representation>,\n        \"sensitive\": false\n      }\n    },\n\n    // \"resources\" describes the \"resource\" and \"data\" blocks in the module\n    // configuration.\n    \"resources\": [\n      {\n        // \"address\" is the opaque absolute address for the resource itself.\n        \"address\": \"aws_instance.example\",\n\n        // \"mode\", \"type\", and \"name\" have the same meaning as for the resource\n        // portion of a value representation.\n        \"mode\": \"managed\",\n        \"type\": \"aws_instance\",\n        \"name\": \"example\",\n\n        // \"provider_config_key\" is the key into \"provider_configs\" (shown\n        // above) for the provider configuration that this resource is\n        // associated with. If the provider configuration was passed into\n        // this module from the parent module, the key will point to the\n        // original provider config block.\n        \"provider_config_key\": \"opaque_provider_ref_aws\",\n\n        // \"provisioners\" is an optional field which describes any provisioners.\n        // Connection info will not be included here.\n        \"provisioners\": [\n          {\n            \"type\": \"local-exec\",\n\n            // \"expressions\" describes the provisioner configuration\n            \"expressions\": <block-expressions-representation>\n          },\n        ],\n\n        // \"expressions\" describes the resource-type-specific content of the\n        // configuration block.\n        \"expressions\": <block-expressions-representation>,\n\n        // \"schema_version\" is the schema version number indicated by the\n        // provider for the type-specific arguments described in \"expressions\".\n        \"schema_version\": 2,\n\n        // \"count_expression\" and \"for_each_expression\" describe the expressions\n        // given for the corresponding meta-arguments in the resource\n        // configuration block. These are omitted if the corresponding argument\n        // isn't set.\n        \"count_expression\": <expression-representation>,\n        \"for_each_expression\": <expression-representation>\n      },\n    ],\n\n    // \"module_calls\" describes the \"module\" blocks in the module. During\n    // evaluation, a module call with count or for_each may expand to multiple\n    // module instances, but in configuration only the block itself is\n    // represented.\n    \"module_calls\": {\n\n      // Key is the module call name chosen in the configuration.\n      \"child\": {\n\n        // \"resolved_source\" is the resolved source address of the module, after\n        // any normalization and expansion. This could be either a\n        // go-getter-style source address or a local path starting with \"./\" or\n        // \"../\". If the user gave a registry source address then this is the\n        // final location of the module as returned by the registry, after\n        // following any redirect indirection.\n        \"resolved_source\": \"./child\"\n\n        // \"expressions\" describes the expressions for the arguments within the\n        // block that correspond to input variables in the child module.\n        \"expressions\": <block-expressions-representation>,\n\n        // \"count_expression\" and \"for_each_expression\" describe the expressions\n        // given for the corresponding meta-arguments in the module\n        // configuration block. These are omitted if the corresponding argument\n        // isn't set.\n        \"count_expression\": <expression-representation>,\n        \"for_each_expression\": <expression-representation>,\n\n        // \"module\" is a representation of the configuration of the child module\n        // itself, using the same structure as the \"root_module\" object,\n        // recursively describing the full module tree.\n        \"module\": <module-configuration-representation>\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Provider References with Aliases\nDESCRIPTION: Configuration showing provider references with aliases in both main and child modules.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/provider-references.md#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    awsname = { # name added for clarity, usually Type == LocalName\n      #source = \"aws\"\n      #source = \"hashicorp/aws\"\n      source = \"registry.opentofu.org/hashicorp/aws\"\n      version = \"0.124\"\n    }\n  }\n}\n\nprovider \"awsname\" {\n  region = \"us-east-1\"\n  alias = \"default\"\n}\n\nmodule \"my_mod\" {\n  source = \"./mod\"\n  providers = {\n    modaws = awsname.default\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Encryption in OpenTofu HCL Configuration\nDESCRIPTION: Example of enforcing encryption for state and plan files in the HCL configuration using the enforced option to prevent accidental disabling.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/state_encryption.md#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  encryption {\n    //...\n    state {\n      enforced = true\n    }\n    plan {\n      enforced = true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource with Provider Instance References using for_each in HCL\nDESCRIPTION: Example of using a provider with for_each and referencing specific provider instances in a resource block. The example shows how each resource instance must reference a specific provider instance from the same provider configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"example\" {\n  alias    = \"foo\"\n  for_each = toset([\"bar\", \"baz\"])\n\n  # ...\n}\n\nresource \"example_thing\" \"example\" {\n  for_each = toset([\"bar\", \"baz\"])\n\n  # The part in brackets is dynamic, but the initial reference to the\n  # provider configuration block remains static, so effectively all\n  # of the instances of this resource _must_ belong to the one\n  # single provider configuration block above.\n\n  # The following would be valid because \"example.foo\" is statically known...\n  provider = example.foo[each.key]\n\n  # ...but something like the following is not supported as it could refer\n  # to many potential provider configurations depending on the result of\n  # local.alias:\n  # provider = example[local.alias][each.key]\n}\n```\n\n----------------------------------------\n\nTITLE: Copying OCI Image Layout index file\nDESCRIPTION: Copies the index.json file from the OCI Image Layout to create an editable version for the multi-platform index manifest.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/oci_registries/provider-mirror.mdx#2025-04-16_snippet_4\n\nLANGUAGE: shellsession\nCODE:\n```\n$ cp tmp-layout/index.json terraform-provider-tls_4.0.6.json\n```\n\n----------------------------------------\n\nTITLE: Service Principal Authentication Configuration\nDESCRIPTION: Configuration variables for Service Principal authentication using client certificate or secret.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/azurerm.mdx#2025-04-16_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n* `client_id` - (Optional) The Client ID of the Service Principal.\n* `client_certificate_password` - (Optional) The password associated with the Client Certificate.\n* `client_certificate_path` - (Optional) The path to the PFX file used as the Client Certificate.\n* `client_secret` - (Optional) The Client Secret of the Service Principal.\n```\n\n----------------------------------------\n\nTITLE: Disabling Ambient Credentials Discovery in OpenTofu OCI Configuration\nDESCRIPTION: This snippet demonstrates how to disable automatic credential discovery from ambient sources like Docker configuration files by configuring the oci_default_credentials block with the discover_ambient_credentials setting.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/6-authentication.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\noci_default_credentials {\n  # Setting discover_ambient_credentials to false completely disables\n  # all automatic credentials discovery, forcing OpenTofu to use\n  # only credentials provided directly in its own CLI configuration\n  # (as described in the next section).\n  discover_ambient_credentials = false\n}\n```\n\n----------------------------------------\n\nTITLE: Module Provider References - Main Configuration\nDESCRIPTION: Example of provider configuration in the main module with explicit provider passing to child module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/provider-references.md#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region = \"us-east-1\"\n  alias = \"default\"\n  version = 0.124 # Deprecated by required_providers\n}\n\nmodule \"my_mod\" {\n  source = \"./mod\"\n  # Only the \"unaliased\" providers are passed if this is omitted.\n  providers = {\n    aws = aws.default\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Child Module Resource Definition\nDESCRIPTION: Child module definition showing variable declarations and resource configuration using those variables.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation/module-expansion.md#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"name\" {}\nvariable \"description\" {}\nresource \"tfcoremock_resource\" { string = var.name, other = var.description }\n```\n\n----------------------------------------\n\nTITLE: Module Download Response with Body Example\nDESCRIPTION: Example HTTP response for module download with JSON body containing location.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/module-registry-protocol.mdx#2025-04-16_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHTTP/2 200\nContent-Length: 81\n\n{\"location\": \"git::https://github.com/foo/terraform-baz-bar?ref=v0.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Docker-Style Config Files for OCI Authentication\nDESCRIPTION: This snippet shows how to specify custom locations for Docker-style configuration files, overriding the default search paths that OpenTofu would normally use for discovering OCI registry credentials.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/6-authentication.md#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\noci_default_credentials {\n  # Setting docker_style_config_files overrides the default search\n  # locations for Docker-style configuration files, allowing\n  # OpenTofu to interoperate with other tools in the ecosystem\n  # that use Docker's file format but a different filepath for\n  # the configuration files.\n  docker_style_config_files = [\n    \"/etc/awesome-oci-tool/auth.json\",\n  ]\n\n  # When this argument is set, the default search locations are\n  # disabled: only exactly the listed files will be searched.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Kubernetes Cluster Module with Monitoring Tools in OpenTofu HCL\nDESCRIPTION: This code demonstrates how to use a Kubernetes cluster module and pass its hostname to a monitoring tools module. It showcases the interchangeability of different Kubernetes implementations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/composition.mdx#2025-04-16_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"k8s_cluster\" {\n  source = \"modules/azurerm-k8s-cluster\"\n\n  # (Azure-specific configuration arguments)\n}\n\nmodule \"monitoring_tools\" {\n  source = \"modules/monitoring_tools\"\n\n  cluster_hostname = module.k8s_cluster.hostname\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Variable Definition Files in OpenTofu\nDESCRIPTION: Example of using the -var-file option to load variable values from a .tfvars file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/values/variables.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntofu apply -var-file=\"testing.tfvars\"\n```\n\n----------------------------------------\n\nTITLE: ORAS CLI Commands for Pushing and Fetching Manifests\nDESCRIPTION: Command line instructions for pushing provider artifacts to a local registry and fetching their manifests using ORAS\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\noras push \\\n    --artifact-type application/vnd.opentofu.provider \\ \n    localhost:5000/oras:latest \\\n    terraform-provider-aws_5.84.0_linux_amd64.zip:archive/zip\n\noras manifest fetch localhost:5000/oras:latest --pretty\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Arguments in setproduct Function\nDESCRIPTION: Shows how the setproduct function handles empty arguments, resulting in an empty output.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/setproduct.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nsetproduct([\"development\", \"staging\", \"production\"], [])\n```\n\n----------------------------------------\n\nTITLE: Building Custom OpenTofu Docker Image Using Installation Script\nDESCRIPTION: This Dockerfile shows how to build a custom OpenTofu Docker image using the installation script. It creates an installation stage and then copies the OpenTofu binary to the final image.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/docker.mdx#2025-04-16_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:3.20 AS tofu\n\nADD install-opentofu.sh /install-opentofu.sh\nRUN chmod +x /install-opentofu.sh\nRUN apk add gpg gpg-agent\nRUN ./install-opentofu.sh --install-method standalone --install-path / --symlink-path -\n\n## This is your stage:\nFROM ubuntu\nCOPY --from=tofu /tofu /usr/local/bin/tofu\n\n# Add your commands here\n```\n\n----------------------------------------\n\nTITLE: Empty Backend Configuration for Consul\nDESCRIPTION: Minimal backend configuration example showing empty consul backend block for partial configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/configuration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"consul\" {}\n}\n```\n\n----------------------------------------\n\nTITLE: Remote State Project A Configuration\nDESCRIPTION: Example configuration for creating certificates in project A with encryption setup.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\n{RemoteStateFullA}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Data Source for OpenTofu Remote State\nDESCRIPTION: This snippet shows how to configure a data source to access remote state stored using the HTTP backend. It specifies the backend type and the address of the REST API.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/http.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"http\"\n  config = {\n    address = \"http://my.rest.api.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying No Pending Changes in Terraform\nDESCRIPTION: Run terraform plan to ensure there are no pending changes before migration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.6.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n\n...\n\nNo changes. Your infrastructure matches the configuration.\n\nTerraform has compared your real infrastructure against your\nconfiguration and found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration with For_Each Example\nDESCRIPTION: Example of using for_each in provider configuration blocks to create multiple dynamically-chosen provider instances\nSOURCE: https://github.com/opentofu/opentofu/blob/main/CONTRIBUTING.RELEASE.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  alias    = \"by_region\"\n  for_each = var.aws_regions\n\n  region = each.key\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon ECR as Provider Mirror\nDESCRIPTION: Example configuration showing how to use Amazon ECR as a provider mirror, demonstrating the mapping of provider addresses to ECR repository format.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/4-providers.md#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nprovider_installation {\n  oci_mirror {\n    repository_template = \"YOUR_AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/${namespace}_${type}\"\n    include             = [\"registry.opentofu.org/*/*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Instance Map Structure\nDESCRIPTION: Go type definition showing the mapping between provider instance keys and repetition data for dynamic provider instances.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nmap[addrs.InstanceKey]instances.RepetitionData\n```\n\n----------------------------------------\n\nTITLE: Setting Input Variables for Providers Mirror\nDESCRIPTION: Examples of command options for setting input variables when running the providers mirror command.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/providers/mirror.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-var 'NAME=VALUE'\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu using Snap on Linux\nDESCRIPTION: Command to install OpenTofu via Snapcraft with classic confinement. This allows OpenTofu to have the necessary system access for infrastructure operations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/snap.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsnap install --classic opentofu\n```\n\n----------------------------------------\n\nTITLE: Setting Default Docker Credentials Helper for OCI Authentication\nDESCRIPTION: This snippet demonstrates how to configure a default Docker-style credentials helper to be used for any OCI repository that doesn't have more specific credentials configured elsewhere.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/6-authentication.md#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\noci_default_credentials {\n  docker_credentials_helper = \"osxkeychain\"\n}\n```\n\n----------------------------------------\n\nTITLE: State Encryption Interface in Go\nDESCRIPTION: Interface for state encryption in Go, providing methods to encrypt and decrypt state files with appropriate error handling.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/state_encryption.md#2025-04-16_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype StateEncryption interface {\n    DecryptState([]byte) ([]byte, error)\t\n\tEncryptState([]byte) ([]byte, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Block and Attribute Structure in OpenTofu HCL\nDESCRIPTION: Demonstrates the basic structure of blocks and attributes in OpenTofu's HCL configuration format, showing how a block can contain attributes with simple values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation.md#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nsome_block {\n    some_attribute = \"some value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Repository-Specific OCI Credentials in OpenTofu\nDESCRIPTION: This snippet shows how to explicitly configure username and password credentials for a specific OCI repository prefix using the oci_credentials block, allowing for OpenTofu-specific authentication separate from other tools.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/6-authentication.md#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\noci_credentials \"example.com/foo/bar\" {\n  # These credentials are for any repository whose path starts with\n  # \"foo/bar\" in the registry \"example.com\".\n  username = \"foobar\"\n  password = \"example\"\n}\n```\n\n----------------------------------------\n\nTITLE: OCI Module Registry Location Response Example\nDESCRIPTION: Example JSON response from a module registry showing how to return an OCI-based module location. The response includes a location property with an OCI URL containing a SHA256 digest.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/5-modules.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"location\":\"oci://example.com/repository?digest=sha256:1d57d25084effd3fdfd902eca00020b34b1fb020253b84d7dd471301606015ac\"}\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Credentials in OpenTofu\nDESCRIPTION: The JSON structure used by OpenTofu's credentials helper protocol to represent API token credentials. This format corresponds to the credentials blocks in the CLI configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/credentials-helpers.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"example-token-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Environment Variable Setup Commands\nDESCRIPTION: Shell commands for setting up PostgreSQL connection environment variables\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/pg.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shellsession\nCODE:\n```\n$ export PG_CONN_STR=postgres://user:pass@db.example.com/tofu_backend\n$ tofu init\n```\n\n----------------------------------------\n\nTITLE: OCI Registry Tags List Response\nDESCRIPTION: Example JSON response from the tags listing endpoint showing repository name and available tags including versioned releases and signatures.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"opentofu/opentofu\",\n  \"tags\": [\n    \"1.6.0-alpha1-arm64\",\n    \"1.6.0-alpha1-amd64\",\n    \"1.6.0-alpha1-arm\",\n    \"1.6.0-alpha1-386\",\n    \"1.6.0-alpha1\",\n    \"1.6\",\n    \"1\",\n    \"latest\",\n    \"sha256-722da07b0cdf5b6bdf12aff9339f7c274f70552144a0a28c0d2b970c083ffa5c.sig\",\n    \"sha256-9b9662dbe859f81779d04ba0f8d2b415b09961d5e5435a25e2ba4566873058f0.sig\",\n    \"sha256-d1aa9cfa30744d52a486b1dd58b7a65dd9d1ae9b79fc9b6ee5d0528ef9cfd54c.sig\",\n    \"sha256-cd67ab05739a47503450c8d2da4abf89d5418f800d093f43a996de64a0d2fc33.sig\",\n    \"sha256-28f8c87d6583f570acf7dd33afa6b17888e7f15ae595d74e16cbd4c82921f0d0.sig\",\n    \"...\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Installation Options with DocCardList in JSX\nDESCRIPTION: This code snippet uses the DocCardList component to display a list of installation options for OpenTofu. Each option is represented as an object with properties for the link, label, and description.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n    items={[\n        {\n            type: \"link\",\n            href: \"alpine/\",\n            label: \"Alpine Linux (.apk)\",\n            description: \"Install OpenTofu from an .apk package directly.\",\n        },\n        {\n            type: \"link\",\n            href: \"deb/\",\n            label: \"Debian Linux and derivatives (.deb)\",\n            description:\n                \"Install OpenTofu on Debian, Ubuntu, or any other .deb-based Linux distribution using your package manager.\",\n        },\n        {\n            type: \"link\",\n            href: \"bsd/\",\n            label: \"FreeBSD\",\n            description:\n                \"Use OpenTofu without installation on FreeBSD.\",\n        },\n        {\n            type: \"link\",\n            href: \"fedora/\",\n            label: \"Fedora\",\n            description: \"Installing OpenTofu on Fedora.\",\n        },\n        {\n            type: \"link\",\n            href: \"rpm/\",\n            label: \"RHEL and derivatives (.rpm)\",\n            description:\n                \"Install OpenTofu on RHEL, openSUSE, AlmaLinux, or any other .rpm-based Linux distribution using your package manager.\",\n        },\n        {\n            type: \"link\",\n            href: \"snap/\",\n            label: \"Ubuntu Linux (Snap)\",\n            description:\n                \"Install OpenTofu on Ubuntu, Manjaro, or any other Linux distribution using Snap.\",\n        },\n        {\n            type: \"link\",\n            href: \"homebrew/\",\n            label: \"MacOS or Linux (Homebrew)\",\n            description: \"Install OpenTofu on MacOS or Linux using Homebrew.\",\n        },\n        {\n            type: \"link\",\n            href: \"windows/\",\n            label: \"Windows\",\n            description: \"Install OpenTofu on Windows.\",\n        },\n        {\n            type: \"link\",\n            href: \"docker/\",\n            label: \"OCI container image\",\n            description:\n                \"Use official OCI container image available on GitHub Container Registry.\",\n        },\n        {\n            type: \"link\",\n            href: \"standalone/\",\n            label: \"Standalone (Linux/MacOS/Windows/BSD)\",\n            description:\n                \"Use OpenTofu without installation on Linux, MacOS, Windows or FreeBSD.\",\n        },\n    ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Listing all tags in OCI Image Layout after pushing index manifest\nDESCRIPTION: Shows how to list all tags in the OCI Image Layout after pushing both platform-specific artifacts and the multi-platform index manifest.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/oci_registries/provider-mirror.mdx#2025-04-16_snippet_7\n\nLANGUAGE: shellsession\nCODE:\n```\n$ oras repo tags --oci-layout tmp-layout\n4.0.6\ndarwin_amd64\nlinux_386\nlinux_amd64\nlinux_arm\nlinux_arm64\nwindows_386\nwindows_amd64\nwindows_arm\nwindows_arm64\n```\n\n----------------------------------------\n\nTITLE: Schema.NestedBlock Mapping for MessagePack in OpenTofu\nDESCRIPTION: A table showing how different nesting values (SINGLE, LIST, SET, MAP, GROUP) in Schema.NestedBlock are represented in MessagePack serialization. It explains the representation rules for each nesting mode and how block values are collected.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/plugin-protocol/object-wire-format.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| `nesting` Value | MessagePack Representation |\n|---|---|\n| `SINGLE` | The block value of the single block of this type, or nil if there is no block of that type. |\n| `LIST` | A MessagePack array of all of the block values, preserving the order of definition of the blocks in the configuration. |\n| `SET` | A MessagePack array of all of the block values in no particular order. |\n| `MAP` | A MessagePack map with one key-value pair per block value, where the key is the block label and the value is the block value. |\n| `GROUP` | The same as with `SINGLE`, except that if there is no block of that type OpenTofu will synthesize a block value by pretending that all of the declared attributes are null and that there are zero blocks of each declared block type. |\n```\n\n----------------------------------------\n\nTITLE: Defining OpenTofu RFC Structure in Markdown\nDESCRIPTION: A markdown template that outlines the structure and required sections for submitting an RFC to the OpenTofu project. Includes placeholders for issue links, problem description, background, proposed solution, documentation, and technical details.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/yyyymmdd-template.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# RFC Title\n\nIssue: https://github.com/OpenTofu/{ Repository }/issues/{ issue number } <!-- Ideally, this issue will have the \"needs-rfc\" label added by the Core Team during triage -->\n\nA short description of the problem that is trying to be solved. Include links to existing documentation, code examples, and links to existing code. Written such that a non-technical user or someone unfamiliar with the OpenTofu code will be able to understand and discuss it.\n\nBackground on the issue with links to similar problems which have been resolved in the past.\n\n## Proposed Solution\n\nOverview of the Proposed Solution to introduce the User Documentation and Technical Approach.\n\n### User Documentation\n\nDescribe what the user would encounter when attempting to interact with what is being proposed. Provide clear and detailed descriptions, code examples, diagrams, etc... Starting point for the documentation that will be added during implementation.\n\nThis documentation will help the community have a better understanding how they will be interacting with this proposal and have an easier time discussing it in depth.\n\n### Technical Approach\n\nTechnical summary, easy to understand by someone unfamiliar with the codebase.\n\nLink to existing documentation and code, include diagrams if helpful.\n\nInclude pseudocode or link to a Proof of Concept if applicable.\n\nDescribe potential limitations or impacts on other areas of the codebase.\n\n### Open Questions\n\nList questions that should be discussed and answered during the RFC process.\n\n### Future Considerations\n\nWhat are some potential future paths this solution could take?  What other features may interact with this solution, what should be kept in mind during implementation?\n\n## Potential Alternatives\n\nList different approaches and briefly compare with the proposal in this RFC. It's important to explore and understand possible alternatives before agreeing on a solution.\n```\n\n----------------------------------------\n\nTITLE: Configuring OSS Backend for OpenTofu State Storage\nDESCRIPTION: Basic configuration for storing OpenTofu state in Alibaba Cloud OSS without state locking. Specifies the bucket, prefix, key, and region for the state file location.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/oss.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  backend \"oss\" {\n    bucket = \"remote-state-dns\"\n    prefix = \"mystate/state\"\n    key    = \"terraform.tfstate\"\n    region = \"cn-beijing\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Submodules for Point Release\nDESCRIPTION: Bash script to update submodules for supported versions during a point release. This script iterates through version directories, pulls the latest changes, and stages them for commit.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/CONTRIBUTING.RELEASE.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd opentofu-repo\nfor ver in $(ls); do\n  cd \"${ver}\"\n  git pull origin \"${ver}\" \n  cd ..\n  git add \"${ver}\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Module Source Using Variables in OpenTofu\nDESCRIPTION: An example of using variables in module source paths, which would be enabled by the proposed Init-time Constant Evaluation feature. This allows dynamically setting a GitHub repository tag when sourcing a module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/TSC_SUMMARY.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"library_version\" {\n    type = string\n}\nmodule \"my-mod\" {\n    source = \"github.com/org/common-library?tag=${var.library_version}\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Different Required Versions for OpenTofu and Terraform\nDESCRIPTION: Example showing how to set different required version constraints for OpenTofu and Terraform using separate .tf and .tofu files, allowing module authors to specify different minimum versions for each tool.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240529-OpenTofu-Specific-Code-Override.md#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_version = \">= x.x.x\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Provider Aliases in OpenTofu Root Module\nDESCRIPTION: This snippet shows how to configure multiple provider aliases in the root module of an OpenTofu configuration, including provider blocks and module calls with explicit provider mappings.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/provider-references.md#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    awsname = { # name added for clarity, usually Type == LocalName\n      source = \"registry.opentofu.org/hashicorp/aws\"\n      version = \"0.124\"\n    }\n  }\n}\n\nprovider \"awsname\" {\n  region = \"us-east-1\"\n  alias = \"default\"\n}\n\nmodule \"my_mod\" {\n  source = \"./mod\"\n  providers = {\n    modaws.foo = awsname.default\n    modaws.bar = awsname\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remote State Project B Configuration\nDESCRIPTION: Example configuration for referencing certificates from project A in project B.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n{RemoteStateFullB}\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTofu Yum Repository for RHEL/AlmaLinux\nDESCRIPTION: This command creates the OpenTofu repository configuration file for Yum-based systems like RHEL and AlmaLinux.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/rpm.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n${YumRepoScript}\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch for Team Collaboration\nDESCRIPTION: Shows how to create a new branch in Git when working in a team to avoid conflicts with other team members' work on the same infrastructure code.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/core-workflow.mdx#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ git checkout -b add-load-balancer\n\nSwitched to a new branch 'add-load-balancer'\n```\n\n----------------------------------------\n\nTITLE: Reference Management Transform Example - Go\nDESCRIPTION: Example showing reference to ReferenceTransformer, which analyzes configuration to establish resource dependencies.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/architecture.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nReferenceTransformer\n```\n\n----------------------------------------\n\nTITLE: Referencing OCI Module with Subdirectory in OpenTofu HCL\nDESCRIPTION: This example shows how to reference a module from a subdirectory within an OCI artifact. It combines the OCI source address with the subdirectory syntax.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/5-modules.md#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"foo\" {\n  source  = \"oci://example.com/opentofu-vpc-module//subnets\"\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Layer ORAS Manifest Configuration\nDESCRIPTION: Example manifest showing ORAS configuration for multiple provider artifacts with separate layers for different architectures\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"artifactType\": \"application/vnd.opentofu.provider\",\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.empty.v1+json\",\n    \"digest\": \"sha256:44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a\",\n    \"size\": 2,\n    \"data\": \"e30=\"\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"archive/zip\",\n      \"digest\": \"sha256:54b0178fd0fcbd60ce806b2569974694af59faaf0b2c734f703753f1fdfb1f21\",\n      \"size\": 146839280,\n      \"annotations\": {\n        \"org.opencontainers.image.title\": \"terraform-provider-aws_5.84.0_linux_amd64.zip\"\n      }\n    },\n    {\n      \"mediaType\": \"archive/zip\",\n      \"digest\": \"sha256:aa50fb3769355eeddfec7614bae674d0841c3b0b771e5183ac2db4dfc04b9423\",\n      \"size\": 132401007,\n      \"annotations\": {\n        \"org.opencontainers.image.title\": \"terraform-provider-aws_5.84.0_linux_arm64.zip\"\n      }\n    }\n  ],\n  \"annotations\": {\n    \"org.opencontainers.image.created\": \"2025-02-03T12:00:46Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Config ORAS Manifest\nDESCRIPTION: Example manifest showing ORAS configuration with a custom config manifest using the --config option\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"artifactType\": \"application/vnd.opentofu.provider\",\n  \"config\": {\n    \"mediaType\": \"text/plain+SHA256SUMS\",\n    \"digest\": \"sha256:2bc757edf7a4532ebe70d994963dd51532fd9907e27a95ffd57763b5795170e0\",\n    \"size\": 1122\n  },\n  \"layers\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Header Example for OCI Registry\nDESCRIPTION: Example of the WWW-Authenticate header returned by ghcr.io when accessing a protected endpoint. This shows the format of authentication requirements including realm, service, and scope information.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nwww-authenticate: Bearer realm=\"https://ghcr.io/token\",service=\"ghcr.io\",scope=\"repository:opentofu/opentofu:pull\"\n```\n\n----------------------------------------\n\nTITLE: Update and Destroy with Create Before Destroy Graph in DOT Format\nDESCRIPTION: A DOT language graph representation showing the dependency relationship when updating a resource (B) before destroying its dependency (A) that has create_before_destroy set.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/destroying.md#2025-04-16_snippet_8\n\nLANGUAGE: dot\nCODE:\n```\ndigraph update {\n    subgraph create {\n        rank=same;\n        b [label=\"B update\"];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n    }\n\n    b -> a_d [dir=back];\n}\n```\n\n----------------------------------------\n\nTITLE: Token Response from OCI Registry\nDESCRIPTION: Example JSON response from an OCI registry after successful authentication. The response contains a bearer token that can be used for subsequent requests to access protected resources.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"token\":\"djE6b3Blb...\"}\n```\n\n----------------------------------------\n\nTITLE: Pushing multi-platform index manifest to OCI Image Layout\nDESCRIPTION: Demonstrates how to push the edited multi-platform index manifest into the OCI Image Layout using ORAS.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/oci_registries/provider-mirror.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shellsession\nCODE:\n```\n$ oras manifest push --oci-layout tmp-layout:4.0.6 terraform-provider-tls_4.0.6.json \nUploading da13ebaa32ba application/vnd.oci.image.index.v1+json\nUploaded  da13ebaa32ba application/vnd.oci.image.index.v1+json\nPushed: [oci-layout] tmp-layout:4.0.6\nDigest: sha256:da13ebaa32ba856d75da18e38daabc7a65ac8853230dfcc817f8ccbac15b639a\n```\n\n----------------------------------------\n\nTITLE: Generating SVG Graph from OpenTofu Configuration\nDESCRIPTION: Command to generate an SVG visualization of a OpenTofu configuration by piping the graph output through GraphViz's dot utility.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/graph.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntofu graph | dot -Tsvg > graph.svg\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration with Version\nDESCRIPTION: Provider configuration example with version constraint (deprecated approach).\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/provider-references.md#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region = \"us-east-1\"\n  alias = \"default\"\n  version = 0.124 # Deprecated by required_providers\n}\n\nresource \"aws_s3_bucket\" \"foo\" {\n  bucket_name = \"foo\"\n  provider = aws.default\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Backend Data Source in OpenTofu HCL\nDESCRIPTION: Configuration for accessing local backend state as a data source. The 'path' parameter points to the location of an existing terraform.tfstate file to read data from.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/local.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"terraform_remote_state\" \"foo\" {\n  backend = \"local\"\n\n  config = {\n    path = \"${path.module}/../../terraform.tfstate\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Registry Entry via GitHub CLI\nDESCRIPTION: Example command showing how to create a registry entry using GitHub CLI, though noted as not currently supported due to GitHub CLI limitations with issue forms.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20231123-registry-submission-via-github-issues.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh issue create -R 'opentofu/registry-stable' -T provider.yml\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Repository Folder Structure\nDESCRIPTION: Illustrates the proposed folder structure for the OpenTofu registry repository, showing the organization of modules and providers with sharding based on namespace first characters.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20231106-registry-repository-folder-structure.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── modules\n│   ├── ≈ (first letter of the module namespace)\n│   │   ├── bridgecrewio (module namespace that starts with \"b\")\n│   │   │   ├── apigateway-cors\n│   │   │   │   ├── aws.json \n│   │   │   ├── bridgecrew-read-only\n│   │   │   │   ├── aws.json \n│   ├── c (first letter of the module namespace)\n│   │   ├── claranet (module namespace that starts with \"c\")\n│   │   │   ├── detectors\n│   │   │   │   ├── signalfx.json \n├── providers\n│   ├── a (first letter of the module namespace)\n│   │   ├── aliyun (module namespace that starts with \"a\")\n│   │   │   ├── alibabacloudstack.json\n│   │   │   ├── alicloud.json\n│   ├── o (first letter of the module namespace)\n│   │   ├── oracle (module namespace that starts with \"o\")\n│   │   │   ├── oci.json\n```\n\n----------------------------------------\n\nTITLE: Updating OpenTofu's Supported Plugin Protocols in Go\nDESCRIPTION: Modify the SupportedPluginProtocols variable in OpenTofu's internal/getproviders/registry_client.go file to include the new protocol version. This allows OpenTofu to download providers that support the new protocol version during 'tofu init'.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/plugin-protocol/releasing-new-version.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nSupportedPluginProtocols\n```\n\n----------------------------------------\n\nTITLE: Creating OCIMirrorSource for OCI Registry Provider Installation in Go\nDESCRIPTION: Function signature for creating a new OCIMirrorSource that implements getproviders.Source for the oci_mirror installation method. It requires functions to resolve provider addresses to OCI repository paths and to obtain registry clients.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/9-provider-implementation-details.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewOCIMirrorSource(\n    getRepositoryAddress(addrs.Provider) (registryDomainName, repositoryPath string, err error),\n    getRegistryClient func(ctx context.Context, registryDomainName, repositoryPath string) (*orasregistry.Registry, error),\n) *OCIMirrorSource\n```\n\n----------------------------------------\n\nTITLE: AWS KMS Provider Configuration\nDESCRIPTION: Minimal configuration example for AWS Key Management Service provider.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\n{AWSKMS}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Provider Version Configuration Example in HCL\nDESCRIPTION: Example of potential future support for variables in required_providers block, showing version configuration using variables.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"version\" {\n  type = string\n}\n\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = var.aws_version\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Interactive Prompts\nDESCRIPTION: Disables interactive prompts for variable input\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/environment-variables.mdx#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport TF_INPUT=0\n```\n\n----------------------------------------\n\nTITLE: Example Discovery Document for Module Registry Protocol in JSON\nDESCRIPTION: A sample JSON discovery document that declares support for version 1 of the module registry protocol. This document would be served at the well-known URL path '/.well-known/terraform.json' on the service host.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/remote-service-discovery.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"modules.v1\": \"https://modules.example.com/v1/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Single Layer ORAS Manifest Configuration\nDESCRIPTION: Example manifest showing ORAS configuration for a single provider artifact with custom media type and layer descriptor for zip archives\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"artifactType\": \"application/vnd.opentofu.provider\",\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.empty.v1+json\",\n    \"digest\": \"sha256:44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a\",\n    \"size\": 2,\n    \"data\": \"e30=\"\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"archive/zip\",\n      \"digest\": \"sha256:54b0178fd0fcbd60ce806b2569974694af59faaf0b2c734f703753f1fdfb1f21\",\n      \"size\": 146839280,\n      \"annotations\": {\n        \"org.opencontainers.image.title\": \"terraform-provider-aws_5.84.0_linux_amd64.zip\"\n      }\n    }\n  ],\n  \"annotations\": {\n    \"org.opencontainers.image.created\": \"2025-02-03T11:47:34Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing OCI Registry Tags Example\nDESCRIPTION: Example of retrieving a list of tags from an OCI registry using cURL, showing authentication and pagination headers.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -H \"Authorization: Bearer djE6b3Blb...\" https://ghcr.io/v2/opentofu/opentofu/tags/list\n```\n\n----------------------------------------\n\nTITLE: Authenticating with OCI Registry using curl\nDESCRIPTION: Shell command demonstrating how to authenticate against an OCI registry using curl. This example shows how to exchange credentials for a bearer token by making a GET request to the authentication endpoint.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u user:password 'https://ghcr.io/token?service=ghcr.io&scope=repository:opentofu/opentofu:pull'\n```\n\n----------------------------------------\n\nTITLE: Simple Resource Destruction Graph in DOT Format\nDESCRIPTION: A DOT language graph representation showing the dependency relationships for resource destruction, which follows the inverse order of resource creation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/destroying.md#2025-04-16_snippet_2\n\nLANGUAGE: dot\nCODE:\n```\ndigraph destroy {\n    subgraph nodes {\n        rank=same;\n        a [label=\"A destroy\"];\n        b [label=\"B destroy\"];\n        c [label=\"C destroy\"];\n        a -> b;\n        b -> c;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Complexity Linters in YAML Configuration\nDESCRIPTION: List of complexity-related linters that are proposed to be temporarily disabled in the golangci-lint configuration, including cyclop, funlen, gocognit, gocyclo, and nestif.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241113-pragmatic-complexity-linting.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- cyclop\n- funlen\n- gocognit\n- gocyclo\n- nestif\n```\n\n----------------------------------------\n\nTITLE: Implementing HashDisposition Structure in Go\nDESCRIPTION: Defines a structure for tracking how each package hash was authenticated, including GPG signatures, registry verification, and local verification status.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20250327-providerinst-auth-hashes.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype HashDisposition struct {\n\tSignedByGPGKeyIDs collections.Set[string]\n\tReportedByRegistry bool\n\tVerifiedLocally bool\n}\n\ntype HashDispositions map[Hash]*HashDisposition\n```\n\n----------------------------------------\n\nTITLE: Test Abstract Message Format in OpenTofu\nDESCRIPTION: Example of the JSON message structure for test abstract information, showing discovered test files and run blocks.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"@level\": \"info\",\n    \"@message\": \"Found 1 file and 1 run block\",\n    \"@module\": \"tofu.ui\",\n    \"@timestamp\": \"2024-04-20T17:24:48.418126+10:00\",\n    \"test_abstract\": {\n        \"main.tftest.hcl\": [\n            \"test\"\n        ]\n    },\n    \"type\": \"test_abstract\"\n}\n```\n\n----------------------------------------\n\nTITLE: RFC Folder Structure for Complex RFCs\nDESCRIPTION: Shows the folder structure for RFCs that require additional supplementary materials like diagrams or technical details.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240524-OpenTofu-RFC-Process.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n./rfc/${isodate}-${rfc title}\n```\n\n----------------------------------------\n\nTITLE: Managed Service Identity (MSI) Configuration\nDESCRIPTION: Configuration variables specific to MSI authentication method in Azure.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/azurerm.mdx#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n* `resource_group_name` - (Required) The Name of the Resource Group in which the Storage Account exists.\n* `msi_endpoint` - (Optional) The path to a custom Managed Service Identity endpoint.\n* `subscription_id` - (Optional) The Subscription ID in which the Storage Account exists.\n* `tenant_id` - (Optional) The Tenant ID in which the Subscription exists.\n* `use_msi` - (Optional) Should Managed Service Identity authentication be used?\n```\n\n----------------------------------------\n\nTITLE: Error Message: Local Provider Version Incompatibility\nDESCRIPTION: Example error message shown when a locally installed provider is incompatible with the current OpenTofu version.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/plugin-protocol/README.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nThe installed version of provider \"example\" is not compatible with OpenTofu v0.12.0.\n\nThis provider was loaded from:\n     /usr/local/bin/terraform-provider-example_v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Unsupported Pattern: Provider References as Normal Values\nDESCRIPTION: An example of trying to assign a provider reference to a local variable, which is not currently supported in OpenTofu. Provider references are handled as special cases through HCL static analysis.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  my_provider = aws.by_region[\"us\"]\n}\n\nresource \"aws_s3_bucket\" \"primary\" {\n  provider = local.my_provider\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Development Server for OpenTofu Documentation\nDESCRIPTION: Command to start a local development server using Docker Compose from the website directory. The server will be available at http://localhost:3000/docs/main/.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Go Implementation of External Key Provider\nDESCRIPTION: Example implementation of an OpenTofu external key provider in Go. This demonstrates the protocol exchange and key generation process.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/state/encryption.mdx#2025-04-16_snippet_19\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"crypto/rand\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\t// Write header\n\theader := map[string]interface{}{\n\t\t\"protocol\": \"opentofu-key-provider-external\",\n\t\t\"version\":  1,\n\t}\n\n\theaderBytes, err := json.Marshal(header)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Println(string(headerBytes))\n\n\t// Read input if available\n\tinput := make(map[string]interface{})\n\n\tinputBytes, err := io.ReadAll(os.Stdin)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tif len(inputBytes) > 0 {\n\t\tif err := json.Unmarshal(inputBytes, &input); err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\n\t// Generate key\n\tkey := make([]byte, 32)\n\tif _, err := rand.Read(key); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\t// Output result\n\toutput := map[string]interface{}{\n\t\t\"key\":      base64.StdEncoding.EncodeToString(key),\n\t\t\"metadata\": nil,\n\t}\n\n\toutputBytes, err := json.Marshal(output)\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Println(string(outputBytes))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Providers with for_each\nDESCRIPTION: Shows how to use for_each in provider configurations to create multiple provider instances with a single block. This requires static evaluation and must define an alias.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  regions = {\"us\": \"us-east-1\", \"eu\": \"eu-west-1\"}\n}\n\nprovider \"aws\" {\n  alias    = \"by_region\"\n  for_each = local.regions\n\n  region = each.value\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying No Planned Changes with Terraform\nDESCRIPTION: Command to verify that there are no planned changes in Terraform before migrating to OpenTofu. This ensures a clean migration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.5-or-lower.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n\n...\n\nNo changes. Your infrastructure matches the configuration.\n\nTerraform has compared your real infrastructure against your\nconfiguration and found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Flow Diagram for GPG Validation Process in Mermaid\nDESCRIPTION: This diagram illustrates the decision flow for GPG validation in OpenTF. It shows how the process handles cases where the provider registry supplies keys or not, and how the OPENTF_ENFORCE_GPG_VALIDATION environment variable affects the validation process.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20230905-provider-gpgkey-missing.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n\n    Start[\"Start\"] -->|Retrieve Provider Metadata| A[Does provider registry supply keys?]\n    A -->|Yes| B[Perform GPG Validation]\n    A -->|No| C[Is OPENTF_ENFORCE_GPG_VALIDATION set to true?]\n    C -->|Yes| D[Attempt GPG Validation]\n    D --> Error[\"Error\"]\n    C -->|No| E[Bypass GPG Validation]\n    B --> End[\"End\"]\n    E --> End\n```\n\n----------------------------------------\n\nTITLE: Shim Module with moved Blocks in HCL\nDESCRIPTION: Shows a backward-compatibility shim that calls the new modules and uses moved blocks to indicate where resources have been moved. This allows existing users to upgrade without resource recreation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-16_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"x\" {\n  source = \"../modules/x\"\n\n  # ...\n}\n\nmodule \"y\" {\n  source = \"../modules/y\"\n\n  # ...\n}\n\nmoved {\n  from = aws_instance.a\n  to   = module.x.aws_instance.a\n}\n\nmoved {\n  from = aws_instance.b\n  to   = module.x.aws_instance.b\n}\n\nmoved {\n  from = aws_instance.c\n  to   = module.y.aws_instance.c\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling OpenTofu CLI Shell Tab-completion\nDESCRIPTION: This bash command uninstalls the previously installed tab-completion for OpenTofu CLI commands.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntofu -uninstall-autocomplete\n```\n\n----------------------------------------\n\nTITLE: Structuring Provider JSON Metadata\nDESCRIPTION: Defines the JSON structure for provider metadata, including repository information, versions, protocols, and download details for different platforms.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20231106-registry-repository-folder-structure.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"repository\": \"https://github.com/aliyun/terraform-provider-alibabacloudstack\",\n  \"versions\": [\n    {\n      \"version\": \"1.0.19\",\n      \"protocols\": [\n        \"5.0\"\n      ],\n      \"shasums_url\": \"https://github.com/aliyun/terraform-provider-alibabacloudstack/releases/download/v1.0.19/terraform-provider-alibabacloudstack_1.0.19_SHA256SUMS\",\n      \"shasums_signature_url\": \"https://github.com/aliyun/terraform-provider-alibabacloudstack/releases/download/v1.0.19/terraform-provider-alibabacloudstack_1.0.19_SHA256SUMS.sig\",\n      \"targets\": [\n        {\n          \"os\": \"windows\",\n          \"arch\": \"amd64\",\n          \"filename\": \"terraform-provider-alibabacloudstack_1.0.19_windows_amd64.zip\",\n          \"download_url\": \"https://github.com/aliyun/terraform-provider-alibabacloudstack/releases/download/v1.0.19/terraform-provider-alibabacloudstack_1.0.19_windows_amd64.zip\",\n          \"shasum\": \"f6644af3c6c5d41819315e7a80466f403d185c11fbf3d25bd4fad7cf208a3033\"\n        },\n        {\n          \"os\": \"linux\",\n          \"arch\": \"386\",\n          \"filename\": \"terraform-provider-alibabacloudstack_1.0.19_linux_386.zip\",\n          \"download_url\": \"https://github.com/aliyun/terraform-provider-alibabacloudstack/releases/download/v1.0.19/terraform-provider-alibabacloudstack_1.0.19_linux_386.zip\",\n          \"shasum\": \"e7f8e9327fc706865dbcbbaa5adda2f350beae904bee386a9ee452280126d9db\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Arguments in List-of-Objects Expression in HCL\nDESCRIPTION: Shows how to handle optional arguments when using attribute syntax for list-of-objects. In this case, all arguments must be assigned a value, even if it's null.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/attr-as-blocks.mdx#2025-04-16_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nexample = [\n  {\n    # Cannot omit foo in this case, even though it would be optional in the\n    # nested block syntax.\n    foo = null\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Simple Resource Updates Graph in DOT Format\nDESCRIPTION: A DOT language graph representation showing the dependency relationships for resource updates, following the same pattern as resource creation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/destroying.md#2025-04-16_snippet_1\n\nLANGUAGE: dot\nCODE:\n```\ndigraph update {\n    subgraph nodes {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B update\"];\n        c [label=\"C update\"];\n        b -> c [dir=back];\n        a -> b [dir=back];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Proposed Static Evaluation Context Implementation in OpenTofu\nDESCRIPTION: Pseudocode for a proposed implementation that adds static evaluation context to the config loading process. This would enable tracking references and values in different scopes during configuration loading, with support for variable resolution.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation.md#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Pseudocode\nfunc buildConfig(source string, ctx StaticContext) configs.Config {\n    c := configs.Config{}\n\n    path = installModule(source)\n    c.module = loadModule(path, ctx)\n\n    for name, call := range c.module.calls {\n        // Should have the required information at this point to evaluate the child's source field\n        source := ctx.Evaluate(call.source)\n\n        // Build a new StaticContext based on the call's configuration attributes.\n        childCtx = ctx.FromModuleCall(call.Name, call.Config)\n\n        c.children[name] = buildConfig(source, childCtx)\n    }\n    return c\n}\n\nfunc loadModule(path string, ctx StaticContext) configs.Module {\n    var files = []file.File\n    for filepath in range(list_files(path)) {\n        files = append(files, loadFile(filepath))\n    }\n    module := configs.Module{}\n    for _, file in range(files) {\n        module.appendFile(file)\n    }\n\n    // Link in current variables and locals\n    ctx.AddVariables(module.Variables)\n    ctx.AddLocals(module.Locals)\n\n    // Additional processing of module's fields can be done here using the StaticContext\n\n    return module\n}\n\n\nroot = buildConfig(\".\", StaticContextFromTFVars(command.TFVars))\n```\n\n----------------------------------------\n\nTITLE: Defining CredentialsConfig Interface in Go\nDESCRIPTION: Interface definition for objects that can provide credential sources for OCI registries. Implementations include Docker CLI-style and OpenTofu CLI configuration sources.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/8-auth-implementation-details.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype CredentialsConfig interface {\n    CredentialsSourcesForRepository(ctx context.Context, registryDomain string, repositoryPath string) iter.Seq2[CredentialsSource, error]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu using Yum on RHEL/AlmaLinux\nDESCRIPTION: This command installs OpenTofu using the Yum package manager on RHEL, AlmaLinux, and similar distributions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/rpm.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n${YumInstallScript}\n```\n\n----------------------------------------\n\nTITLE: Provider Versions JSON Response\nDESCRIPTION: Example JSON response for listing available versions of a provider. Includes version numbers, supported protocol versions, and available platform information.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/provider-registry-protocol.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versions\": [\n    {\n      \"version\": \"2.0.0\",\n      \"protocols\": [\"4.0\", \"5.1\"],\n      \"platforms\": [\n        {\"os\": \"darwin\", \"arch\": \"amd64\"},\n        {\"os\": \"linux\", \"arch\": \"amd64\"},\n        {\"os\": \"linux\", \"arch\": \"arm\"},\n        {\"os\": \"windows\", \"arch\": \"amd64\"}\n      ]\n    },\n    {\n      \"version\": \"2.0.1\",\n      \"protocols\": [\"5.2\"],\n      \"platforms\": [\n        {\"os\": \"darwin\", \"arch\": \"amd64\"},\n        {\"os\": \"linux\", \"arch\": \"amd64\"},\n        {\"os\": \"linux\", \"arch\": \"arm\"},\n        {\"os\": \"windows\", \"arch\": \"amd64\"}\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Indirect Dependencies in HCL for OpenTofu Exclude Flag\nDESCRIPTION: This HCL snippet demonstrates how indirect dependencies through locals are considered when using the -exclude flag, showing that excluding a resource also excludes resources indirectly dependent on it.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240725-exclude-resources.md#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  b = null_resource.a.id\n}\n\nresource \"null_resource\" \"a\" {\n  \n}\n\nresource \"null_resource\" \"c\" {\n  triggers = {\n    b = local.b\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AES-GCM Encryption Method in OpenTofu\nDESCRIPTION: Example HCL2 configuration block for setting up the AES-GCM encryption method in OpenTofu. It demonstrates how to specify the encryption method, provide encryption keys through a key provider, and optionally set Additional Authenticated Data (AAD).\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/encryption/method/aesgcm/README.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl2\nCODE:\n```\nterraform {\n  encryption {\n    method \"aes_gcm\" \"mymethod\" {\n      # Pass the key provider with a 16, 24, or 32 byte encryption key here:\n      keys = key_provider.someprovider.somename\n      \n      # Leave the AAD empty unless needed. Pass as a list of bytes if needed:  \n      aad  = [1,2,3,4,...]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Create Before Destroy Dependency Graph\nDESCRIPTION: Graphviz DOT diagram showing correct dependency resolution when create_before_destroy is properly propagated to all dependent resources.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/destroying.md#2025-04-16_snippet_10\n\nLANGUAGE: dot\nCODE:\n```\ndigraph replacement {\n    subgraph create {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B create\"];\n        a -> b [dir=back];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n        b_d [label=\"B destroy\"];\n        a_d -> b_d;\n    }\n\n    a -> a_d [dir=back];\n    a -> b_d [dir=back, style=dotted];\n    b -> a_d [dir=back, style=dotted];\n    b -> b_d [dir=back];\n}\n```\n\n----------------------------------------\n\nTITLE: Building OpenTofu Artifacts with Dockerfile\nDESCRIPTION: Example Dockerfile showing the originally considered approach for building OpenTofu artifacts using container image tooling. This approach was ultimately not adopted to maintain checksum compatibility with existing provider registries.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/3-design-considerations.md#2025-04-16_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM scratch\nADD * /\nLABEL \"org.opentofu.artifact-type\"=\"provider\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Announcement Template\nDESCRIPTION: Template for creating stable release announcements with feature highlights and relevant links\nSOURCE: https://github.com/opentofu/opentofu/blob/main/CONTRIBUTING.RELEASE.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nWe're proud to announce that OpenTofu 1.8.0 is now officially out! 🎉\n\n## What's New?\n* Early variable/locals evaluation\n* Provider mocking in `tofu test`\n* Resource overrides in `tofu test`\n* Override files for OpenTofu: keeping compatibility\n* Deprecation: `use_legacy_workflow` has been removed from the S3 backend-backend\n\nSee the launch post on our blog: https://opentofu.org/blog/opentofu-1-8-0/\n\nFor all the features, see the [detailed changelog](https://github.com/opentofu/opentofu/blob/v1.8.0/CHANGELOG.md).\n\nYou can find the full diff [here](https://github.com/opentofu/opentofu/compare/v1.7..v1.8.0).\n```\n\n----------------------------------------\n\nTITLE: Fetching a Platform-Specific Image Manifest with curl\nDESCRIPTION: Example curl command to fetch a platform-specific image manifest from an OCI registry. This shows how to access the details of an image for a specific architecture.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H \"Authorization: Bearer djE6b3Blb...\" https://ghcr.io/v2/opentofu/opentofu/manifests/1.8.0-amd64\n```\n\n----------------------------------------\n\nTITLE: Basic CLI Configuration Example in HCL\nDESCRIPTION: Example showing basic CLI configuration syntax using HCL to set the plugin cache directory.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/config/config-file.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nplugin_cache_dir   = \"$HOME/.terraform.d/plugin-cache\"\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenTofu Plan Status\nDESCRIPTION: Command to verify that there are no pending changes in OpenTofu after migration\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.7.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu plan\n\n...\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your\nconfiguration and found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Generating Python gRPC Stubs from OpenTofu Protocol Buffers\nDESCRIPTION: This command uses the protoc compiler to generate Python stubs from the tfplugin5.1.proto file. It produces both the basic Python protobuf code (--python_out) and the gRPC service definitions (--grpc_python_out) needed for implementing an OpenTofu plugin SDK in Python.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/plugin-protocol/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nprotoc --python_out=. --grpc_python_out=. tfplugin5.1.proto\n```\n\n----------------------------------------\n\nTITLE: Adding New Provider Dependency in OpenTofu Lock File\nDESCRIPTION: Example diff showing the addition of a new Azure provider dependency to the lock file. The change includes version constraints, exact version selection, and package checksums for different platforms.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- .terraform.lock.hcl\t2020-10-07 16:12:07.539570634 -0700\n+++ .terraform.lock.hcl\t2020-10-07 16:12:15.267487237 -0700\n@@ -6,6 +6,26 @@\n   ]\n }\n\n+provider \"registry.opentofu.org/hashicorp/azurerm\" {\n+  version     = \"2.30.0\"\n+  constraints = \"~> 2.12\"\n+  hashes = [\n+    \"h1:FJwsuowaG5CIdZ0WQyFZH9r6kIJeRKts9+GcRsTz1+Y=\",\n+    \"h1:c/ntSXrDYM1mUir2KufijYebPcwKqS9CRGd3duDSGfY=\",\n+    \"h1:yre4Ph76g9H84MbuhZ2z5MuldjSA4FsrX6538O7PCcY=\",\n+    \"zh:04f0a50bb2ba92f3bea6f0a9e549ace5a4c13ef0cbb6975494cac0ef7d4acb43\",\n+    \"zh:2082e12548ebcdd6fd73580e83f626ed4ed13f8cdfd51205d8696ffe54f30734\",\n+    \"zh:246bcc449e9a92679fb30f3c0a77f05513886565e2dcc66b16c4486f51533064\",\n+    \"zh:24de3930625ac9014594d79bfa42d600eca65e9022b9668b54bfd0d924e21d14\",\n+    \"zh:2a22893a576ff6f268d9bf81cf4a56406f7ba79f77826f6df51ee787f6d2840a\",\n+    \"zh:2b27485e19c2aaa9f15f29c4cff46154a9720647610171e30fc6c18ddc42ec28\",\n+    \"zh:435f24ce1fb2b63f7f02aa3c84ac29c5757cd29ec4d297ed0618423387fe7bd4\",\n+    \"zh:7d99725923de5240ff8b34b5510569aa4ebdc0bdb27b7bac2aa911a8037a3893\",\n+    \"zh:7e3b5d0af3b7411dd9dc65ec9ab6caee8c191aee0fa7f20fc4f51716e67f50c0\",\n+    \"zh:da0af4552bef5a29b88f6a0718253f3bf71ce471c959816eb7602b0dadb469ca\",\n+  ]\n+}\n\n provider \"registry.opentofu.org/newrelic/newrelic\" {\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal\nDESCRIPTION: Create a service principal with Owner role for testing\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/backend/remote-state/azure/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz ad sp create-for-rbac --role=\"Owner\" --scopes=\"/subscriptions/<subscription_id>\"\n```\n\n----------------------------------------\n\nTITLE: Key Provider Configuration Structure in Go\nDESCRIPTION: Example Go struct for key provider configuration, using HCL struct tags for automatic mapping from HCL/JSON configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/state_encryption.md#2025-04-16_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\tKey string `hcl:\"key\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing getproviders.Source Interface in Go\nDESCRIPTION: A link to the Go documentation for the getproviders.Source interface that will be implemented for OCI registry support in the provider installer.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/8-auth-implementation-details.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[`getproviders.Source`](https://pkg.go.dev/github.com/opentofu/opentofu/internal/getproviders#Source)\n```\n\n----------------------------------------\n\nTITLE: Verifying No Pending Changes in Terraform\nDESCRIPTION: Run terraform plan to ensure there are no pending changes before migration. This command compares the real infrastructure against the configuration to confirm no differences.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.9.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n\n...\n\nNo changes. Your infrastructure matches the configuration.\n\nTerraform has compared your real infrastructure against your\nconfiguration and found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Rendering Version Badge for OpenTofu Documentation\nDESCRIPTION: Displays a version badge for the OpenTofu documentation using a custom React component.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocVersionBadge />\n```\n\n----------------------------------------\n\nTITLE: Checking OpenTofu Version\nDESCRIPTION: Verify the successful installation of OpenTofu by running 'tofu --version'. This command displays the installed version of OpenTofu and the system architecture.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.8.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu --version\nOpenTofu v1.8.2\non linux_amd64\n```\n\n----------------------------------------\n\nTITLE: Mapping OpenTofu Schema.Attribute Types to MessagePack Representations\nDESCRIPTION: A table describing how different OpenTofu Schema.Attribute types are serialized into MessagePack format. It covers primitive types, collections, objects, tuples, and dynamic types.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/plugin-protocol/object-wire-format.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| `type` Pattern | MessagePack Representation                                                                                                                                                                                                                                                                                                                                                                                       |\n|---|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `\"string\"` | A MessagePack string containing the Unicode characters from the string value serialized as normalized UTF-8.                                                                                                                                                                                                                                                                                                     |\n| `\"number\"` | Either MessagePack integer, MessagePack float, or MessagePack string representing the number. If a number is represented as a string then the string contains a decimal representation of the number which may have a larger mantissa than can be represented by a 64-bit float.                                                                                                                                 |\n| `\"bool\"` | A MessagePack boolean value corresponding to the value.                                                                                                                                                                                                                                                                                                                                                          |\n| `[\"list\",T]` | A MessagePack array with the same number of elements as the list value, each of which is represented by the result of applying these same mapping rules to the nested type `T`.                                                                                                                                                                                                                                  |\n| `[\"set\",T]` | Identical in representation to `[\"list\",T]`, but the order of elements is undefined because OpenTofu sets are unordered.                                                                                                                                                                                                                                                                                         |\n| `[\"map\",T]` | A MessagePack map with one key-value pair per element of the map value, where the element key is serialized as the map key (always a MessagePack string) and the element value is represented by a value constructed by applying these same mapping rules to the nested type `T`.                                                                                                                                |\n| `[\"object\",ATTRS]` | A MessagePack map with one key-value pair per attribute defined in the `ATTRS` object. The attribute name is serialized as the map key (always a MessagePack string) and the attribute value is represented by a value constructed by applying these same mapping rules to each attribute's own type.                                                                                                            |\n| `[\"tuple\",TYPES]` | A MessagePack array with one element per element described by the `TYPES` array. The element values are constructed by applying these same mapping rules to the corresponding element of `TYPES`.                                                                                                                                                                                                                |\n| `\"dynamic\"` | A MessagePack array with exactly two elements. The first element is a MessagePack binary value containing a JSON-serialized type constraint in the same format described in this table. The second element is the result of applying these same mapping rules to the value with the type given in the first element. This special type constraint represents values whose types will be decided only at runtime. |\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenTofu Installation\nDESCRIPTION: Command to verify the successful installation of OpenTofu 1.6.2 by checking its version.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.5-or-lower.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu --version\nOpenTofu v1.6.2\non linux_amd64\n```\n\n----------------------------------------\n\nTITLE: Cleanup Commands\nDESCRIPTION: Commands for cleaning up Azure resources after testing\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/backend/remote-state/azure/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\naz group list --subscription <subscription_id> --query \"[].name\"\naz group delete --subscription <subscription_id> --name <resource_group_name> --yes --no-wait --force-deletion-types \"Microsoft.Compute/virtualMachines\"\naz ad sp delete --id {APP_ID}\naz role assignment list --subscription <subscription_id> --query \"[?principalType=='ServicePrincipal']\"\naz role assignment delete --subscription <subscription_id> --id {ASSIGNMENT_ID}\n```\n\n----------------------------------------\n\nTITLE: Block Representation JSON Structure\nDESCRIPTION: Details the structure of a block representation containing attributes and nested block types, including their properties such as type, description, and constraints.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/providers/schema.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // \"attributes\" describes any attributes that appear directly inside the\n  // block. Keys in this map are the attribute names.\n  \"attributes\":  {\n    \"example_attribute_name\": {\n      // \"type\" is a representation of a type specification\n      // that the attribute's value must conform to.\n      \"type\": \"string\",\n\n      // \"description\" is an English-language description of\n      // the purpose and usage of the attribute.\n      \"description\": \"string\",\n\n      // \"required\", if set to true, specifies that an\n      // omitted or null value is not permitted.\n      \"required\": bool,\n\n      // \"optional\", if set to true, specifies that an\n      // omitted or null value is permitted.\n      \"optional\": bool,\n\n      // \"computed\", if set to true, indicates that the\n      // value comes from the provider rather than the\n      // configuration.\n      \"computed\": bool,\n\n      // \"sensitive\", if set to true, indicates that the\n      // attribute may contain sensitive information.\n      \"sensitive\": bool\n    },\n  },\n  // \"block_types\" describes any nested blocks that appear directly\n  // inside the block.\n  // Keys in this map are the names of the block_type.\n  \"block_types\": {\n    \"example_block_name\": {\n      // \"nesting_mode\" describes the nesting mode for the\n      // child block, and can be one of the following:\n      // \tsingle\n      // \tlist\n      // \tset\n      // \tmap\n    \"nesting_mode\": \"list\",\n    \"block\": <block-representation>,\n\n    // \"min_items\" and \"max_items\" set lower and upper\n    // limits on the number of child blocks allowed for\n    // the list and set modes. These are\n    // omitted for other modes.\n    \"min_items\": 1,\n    \"max_items\": 3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Group\nDESCRIPTION: Create resource group for test VM\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/backend/remote-state/azure/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz group create --name myResourceGroup --location eastus\n```\n\n----------------------------------------\n\nTITLE: Publishing Module Package to OCI Registry using ORAS CLI\nDESCRIPTION: This command demonstrates how to use the ORAS CLI to push a module package to an OCI registry. It specifies the artifact type and the ZIP archive containing the module.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/5-modules.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\noras push \\\n    --artifact-type application/vnd.opentofu.modulepkg \\\n    example.com/opentofu-vpc-module:latest \\\n    opentofu-vpc-module.zip:archive/zip\n```\n\n----------------------------------------\n\nTITLE: OpenTofu Infrastructure Inspection Commands\nDESCRIPTION: List of OpenTofu CLI commands for infrastructure inspection, including commands for visualization (graph), output retrieval, state inspection, and resource management. Each command serves a specific purpose in understanding and managing infrastructure configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/inspect/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [The `tofu graph` command](../commands/graph.mdx) creates a visual\n  representation of a configuration or a set of planned changes.\n- [The `tofu output` command](../commands/output.mdx) can get the\n  values for the top-level [output values](../../language/values/outputs.mdx) of\n  a configuration, which are often helpful when making use of the infrastructure\n  OpenTofu has provisioned.\n- [The `tofu show` command](../commands/show.mdx) can generate\n  human-readable versions of a state file or plan file, or generate\n  machine-readable versions that can be integrated with other tools.\n- [The `tofu state list` command](../commands/state/list.mdx) can list\n  the resources being managed by the current working directory and workspace,\n  providing a complete or filtered list.\n- [The `tofu state show` command](../commands/state/show.mdx) can print\n  all of the attributes of a given resource being managed by the current working\n  directory and workspace, including generated read-only attributes like the\n  unique ID assigned by the cloud provider.\n```\n\n----------------------------------------\n\nTITLE: Resource State Management Documentation in Markdown\nDESCRIPTION: Comprehensive documentation describing the OpenTofu provider resource lifecycle, state management, and import process. Includes details about state transitions, data validation, and provider implementation requirements.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/resource-instance-change-lifecycle.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### ApplyResourceChange\n\nThe `ApplyResourceChange` function is responsible for making calls into the\nremote system to make remote objects match the **Final Planned State**. During\nthat operation, the provider should decide on final values for any attributes\nthat were left unknown in the **Final Planned State**, and thus produce the\n**New State** object.\n\n`ApplyResourceChange` also receives the **Prior State** so that it can use it\nto potentially implement more \"surgical\" changes to particular parts of\nthe remote objects by detecting portions that are unchanged, in cases where the\nremote API supports partial-update operations.\n\nThe **New State** object returned from the provider must meet the following\nconstraints:\n\n* Any attribute that had a known value in the **Final Planned State** must have\n  an identical value in the new state. In particular, if the remote API\n  returned a different serialization of the same value then the provider must\n  preserve the form the user wrote in the configuration, and _must not_ return\n  the normalized form produced by the provider.\n\n* Any attribute that had an unknown value in the **Final Planned State** must\n  take on a known value whose type conforms to the type constraint of the\n  unknown value. No unknown values are permitted in the **New State**.\n\nAfter calling `ApplyResourceChange` for each resource instance in the plan,\nand dealing with any other bookkeeping to return the results to the user,\na single OpenTofu run is complete. OpenTofu Core saves the **New State**\nin a state snapshot for the entire configuration, so it'll be preserved for\nuse on the next run.\n\nWhen the user subsequently runs OpenTofu again, the **New State** becomes\nthe **Previous Run State** verbatim, and passes into `UpgradeResourceState`.\n```\n\n----------------------------------------\n\nTITLE: Go Unicode Version Reference\nDESCRIPTION: Go package import path showing how to access the Unicode version information from the Go standard library.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/unicode.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nunicode.Version\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Service Discovery for OpenTofu Login\nDESCRIPTION: JSON configuration for the login.v1 service discovery endpoint that defines OAuth client settings including client ID, grant types, authorization and token endpoints, and allowed port ranges for the redirect URI.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/login-protocol.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"login.v1\": {\n    \"client\": \"tofu-cli\",\n    \"grant_types\": [\"authz_code\"],\n    \"authz\": \"/oauth/authorization\",\n    \"token\": \"/oauth/token\",\n    \"ports\": [10000, 10010]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Subscription\nDESCRIPTION: Configure Azure CLI to use a specific subscription\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/backend/remote-state/azure/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naz account set --subscription <subscription_id>\n```\n\n----------------------------------------\n\nTITLE: Schema.NestedBlock Mapping for JSON in OpenTofu\nDESCRIPTION: A table describing how different nesting values (SINGLE, LIST, SET, MAP, GROUP) in Schema.NestedBlock are represented in JSON serialization. It explains the representation rules for each nesting mode and how block values are collected for JSON output.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/plugin-protocol/object-wire-format.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| `nesting` Value | JSON Representation |\n|---|---|\n| `SINGLE` | The block value of the single block of this type, or `null` if there is no block of that type. |\n| `LIST` | A JSON array of all of the block values, preserving the order of definition of the blocks in the configuration. |\n| `SET` | A JSON array of all of the block values in no particular order. |\n| `MAP` | A JSON object with one property per block value, where the property name is the block label and the value is the block value. |\n| `GROUP` | The same as with `SINGLE`, except that if there is no block of that type OpenTofu will synthesize a block value by pretending that all of the declared attributes are null and that there are zero blocks of each declared block type. |\n```\n\n----------------------------------------\n\nTITLE: Referencing Provider Source Field in Meta Structure\nDESCRIPTION: A GitHub link to the existing field in the Meta type that holds the provider source, which will be used as a pattern for adding the module package fetcher.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/8-auth-implementation-details.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[the existing field for a `getproviders.Source`](https://github.com/opentofu/opentofu/blob/ffa43acfcdc4431f139967198faa2dd20a2752ea/internal/command/meta.go#L127-L130)\n```\n\n----------------------------------------\n\nTITLE: Configuring golangci-lint for OpenTofu with Legacy Exclusions\nDESCRIPTION: YAML configuration for golangci-lint that excludes legacy files and packages from linting. The configuration specifically excludes internal/ipaddr/, internal/legacy/, and version upgrade files which contain backward-compatibility code that should remain unchanged to minimize risk.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20250303-linter-policy.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nissues:\n  exclude-files:\n    # We have a few patterns that are excluded from linting completely because\n    # they contain effectively-frozen code that we're preserving for backward\n    # compatibility, where changes would be risky and that risk isn't warranted\n    # since we don't expect to be doing any significant maintenence on these.\n    - \"^internal/ipaddr/\"\n    - \"^internal/legacy/\"\n    - \"^internal/states/statefile/version\\\\d+_upgrade\\\\.go$\"\n```\n\n----------------------------------------\n\nTITLE: Merged OpenTofu Configuration Result\nDESCRIPTION: The resulting configuration after merging the main configuration with the override file.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/files/override.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  instance_type = \"t2.micro\"\n  ami           = \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Proposed Naming Convention for Context Variables in Go\nDESCRIPTION: Defines standardized variable names for different types of context objects used in OpenTofu, including Go's context.Context, tofu.Context, tofu.EvalContext, and hcl.EvalContext.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20250108-naming-convention-for-context-vars.md#2025-04-16_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ncontext.Context as ctx\ntofu.Context as tofuCtx\ntofu.EvalContext as evalCtx\nhcl.EvalContext as hclCtx\n```\n\n----------------------------------------\n\nTITLE: State Management Transform Example - Go\nDESCRIPTION: Example showing reference to StateTransformer, which creates graph vertices for resource instances in state tracking.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/architecture.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nStateTransformer\n```\n\n----------------------------------------\n\nTITLE: Verifying Terraform Plan with No Changes\nDESCRIPTION: Run 'terraform plan' to ensure there are no pending changes before migration. The output should indicate that no changes are needed and the infrastructure matches the configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.8.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n\n...\n\nNo changes. Your infrastructure matches the configuration.\n\nTerraform has compared your real infrastructure against your\nconfiguration and found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Markdown Headers and List Items\nDESCRIPTION: Markdown formatted weekly development updates, including headers for dates and nested lists for status updates and project progress\nSOURCE: https://github.com/opentofu/opentofu/blob/main/WEEKLY_UPDATES.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2023-12-05\n\n- Current Status and Up Next\n  - Registry\n    - The [stable registry implementation] is now active\n    - CloudFlare R2 implementation details\n  - Tofu Migration\n    - Migration path documentation\n\n## 2023-11-21\n\n- Current Status and Up Next\n  - Registry\n    - Implementation progress\n    - CloudFlare R2 hosting details\n  - Various bug-fixes\n```\n\n----------------------------------------\n\nTITLE: Defining OpenTofu Plan JSON Structure in JavaScript\nDESCRIPTION: This code snippet outlines the complete JSON structure for an OpenTofu plan. It includes representations of the prior state, configuration, planned values, resource changes, output changes, and other important plan components. The structure allows for detailed analysis of planned infrastructure changes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/json-format.mdx#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"format_version\": \"1.0\",\n\n  // \"prior_state\" is a representation of the state that the configuration is\n  // being applied to, using the state representation described above.\n  \"prior_state\":  <state-representation>,\n\n  // \"configuration\" is a representation of the configuration being applied to the\n  // prior state, using the configuration representation described above.\n  \"configuration\": <configuration-representation>,\n\n  // \"planned_values\" is a description of what is known so far of the outcome in\n  // the standard value representation, with any as-yet-unknown values omitted.\n  \"planned_values\": <values-representation>,\n\n  // \"proposed_unknown\" is a representation of the attributes, including any\n  // potentially-unknown attributes. Each value is replaced with \"true\" or\n  // \"false\" depending on whether it is known in the proposed plan.\n  \"proposed_unknown\": <values-representation>,\n\n  // \"variables\" is a representation of all the variables provided for the given\n  // plan. This is structured as a map similar to the output map so we can add\n  // additional fields in later.\n  \"variables\": {\n    \"varname\": {\n      \"value\": \"varvalue\"\n    },\n  },\n\n  // \"resource_changes\" is a description of the individual change actions that\n  // OpenTofu plans to use to move from the prior state to a new state\n  // matching the configuration.\n  \"resource_changes\": [\n    // Each element of this array describes the action to take\n    // for one instance object. All resources in the\n    // configuration are included in this list.\n    {\n      // \"address\" is the full absolute address of the resource instance this\n      // change applies to, in the same format as addresses in a value\n      // representation.\n      \"address\": \"module.child.aws_instance.foo[0]\",\n\n      // \"previous_address\" is the full absolute address of this resource\n      // instance as it was known after the previous OpenTofu run.\n      // Included only if the address has changed, e.g. by handling\n      // a \"moved\" block in the configuration.\n      \"previous_address\": \"module.instances.aws_instance.foo[0]\",\n\n      // \"module_address\", if set, is the module portion of the above address.\n      // Omitted if the instance is in the root module.\n      \"module_address\": \"module.child\",\n\n      // \"mode\", \"type\", \"name\", and \"index\" have the same meaning as in a\n      // value representation.\n      \"mode\": \"managed\",\n      \"type\": \"aws_instance\",\n      \"name\": \"foo\",\n      \"index\": 0,\n\n      // \"deposed\", if set, indicates that this action applies to a \"deposed\"\n      // object of the given instance rather than to its \"current\" object.\n      // Omitted for changes to the current object. \"address\" and \"deposed\"\n      // together form a unique key across all change objects in a particular\n      // plan. The value is an opaque key representing the specific deposed\n      // object.\n      \"deposed\": \"deadbeef\",\n\n      // \"change\" describes the change that will be made to the indicated\n      // object. The <change-representation> is detailed in a section below.\n      \"change\": <change-representation>,\n\n      // \"action_reason\" is some optional extra context about why the\n      // actions given inside \"change\" were selected. This is the JSON\n      // equivalent of annotations shown in the normal plan output like\n      // \"is tainted, so it must be replaced\" as opposed to just \"must be\n      // replaced\".\n      //\n      // These reason codes are display hints only and the set of possible\n      // hints may change over time. Users of this must be prepared to\n      // encounter unrecognized reasons and treat them as unspecified reasons.\n      //\n      // The current set of possible values is:\n      // - \"replace_because_tainted\": the object in question is marked as\n      //   \"tainted\" in the prior state, so OpenTofu planned to replace it.\n      // - \"replace_because_cannot_update\": the provider indicated that one\n      //   of the requested changes isn't possible without replacing the\n      //   existing object with a new object.\n      // - \"replace_by_request\": the user explicitly called for this object\n      //   to be replaced as an option when creating the plan, which therefore\n      //   overrode what would have been a \"no-op\" or \"update\" action otherwise.\n      // - \"delete_because_no_resource_config\": OpenTofu found no resource\n      //   configuration corresponding to this instance.\n      // - \"delete_because_no_module\": The resource instance belongs to a\n      //   module instance that's no longer declared, perhaps due to changing\n      //   the \"count\" or \"for_each\" argument on one of the containing modules.\n      // - \"delete_because_wrong_repetition\": The instance key portion of the\n      //   resource address isn't of a suitable type for the corresponding\n      //   resource's configured repetition mode (count, for_each, or neither).\n      // - \"delete_because_count_index\": The corresponding resource uses count,\n      //   but the instance key is out of range for the currently-configured\n      //   count value.\n      // - \"delete_because_each_key\": The corresponding resource uses for_each,\n      //   but the instance key doesn't match any of the keys in the\n      //   currently-configured for_each value.\n      // - \"read_because_config_unknown\": For a data resource, OpenTofu cannot\n      //   read the data during the plan phase because of values in the\n      //   configuration that won't be known until the apply phase.\n      // - \"read_because_dependency_pending\": For a data resource, OpenTofu\n      //   cannot read the data during the plan phase because the data\n      //   resource depends on at least one managed resource that also has\n      //   a pending change in the same plan.\n      //\n      // If there is no special reason to note, OpenTofu will omit this\n      // property altogether.\n      action_reason: \"replace_because_tainted\"\n    }\n  ],\n\n  // \"resource_drift\" is a description of the changes OpenTofu detected\n  // when it compared the most recent state to the prior saved state.\n  \"resource_drift\": [\n    {\n        // \"resource_drift\" uses the same object structure as\n        // \"resource_changes\".\n    }\n  ],\n\n  // \"relevant_attributes\" lists the sources of all values contributing to\n  // changes in the plan. You can use \"relevant_attributes\" to filter\n  // \"resource_drift\" and determine which external changes may have affected the\n  // plan result.\n  \"relevant_attributes\": [\n    {\n      \"resource\": \"aws_instance.foo\",\n      \"attribute\": \"attr\",\n    }\n  ]\n\n  // \"output_changes\" describes the planned changes to the output values of the\n  // root module.\n  \"output_changes\": {\n    // Keys are the defined output value names.\n    \"foo\": {\n\n      // \"change\" describes the change that will be made to the indicated output\n      // value, using the same representation as for resource changes except\n      // that the only valid actions values are:\n      //   [\"create\"]\n      //   [\"update\"]\n      //   [\"delete\"]\n      // OpenTofu is not yet fully able to\n      // track changes to output values, so the actions indicated may not be\n      // fully accurate, but the \"after\" value will always be correct.\n      \"change\": <change-representation>,\n    }\n  },\n\n  // \"checks\" describes the partial results for any checkable objects, such as\n  // resources with postconditions, with as much information as OpenTofu can\n  // recognize at plan time. Some objects will have status \"unknown\" to\n  // indicate that their status will only be determined after applying the plan.\n  \"checks\" <checks-representation>,\n\n  // \"errored\" indicates whether planning failed. An errored plan cannot be applied,\n  // but the actions planned before failure may help to understand the error.\n  \"errored\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: Execute the compiled integration tests\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/backend/remote-state/azure/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./azure.test -test.v -test.timeout 99999s\n```\n\n----------------------------------------\n\nTITLE: Setting Test Environment Variables\nDESCRIPTION: Configure environment variables required for testing\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/backend/remote-state/azure/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_AZURE_TEST=1\nexport TF_RUNNING_IN_AZURE=1\nexport ARM_SUBSCRIPTION_ID=<subscription_id>\nexport ARM_LOCATION=eastus\nexport ARM_ENVIRONMENT=public\nexport ARM_TENANT_ID={TENANT}\nexport ARM_CLIENT_ID={APP_ID}\nexport ARM_CLIENT_SECRET={PASSWORD}\nexport ARM_CLIENT_CERTIFICATE_PATH=/home/azureuser/client.pfx\n```\n\n----------------------------------------\n\nTITLE: Block Structure Syntax in OpenTofu HCL\nDESCRIPTION: Shows the structure of a block in OpenTofu configuration, including block type, labels, and nested arguments and blocks. This example demonstrates a resource block with a nested network interface block.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/syntax/configuration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  ami = \"abc123\"\n\n  network_interface {\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Replacement Graph in DOT Format\nDESCRIPTION: A DOT language graph representation showing the dependency relationships when replacing all resources in a dependency chain, where B depends on A.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/destroying.md#2025-04-16_snippet_3\n\nLANGUAGE: dot\nCODE:\n```\ndigraph replacement {\n    subgraph create {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B create\"];\n        a -> b [dir=back];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n        b_d [label=\"B destroy\"];\n        a_d -> b_d;\n    }\n\n    a -> a_d;\n    a -> b_d [style=dotted];\n    b -> a_d [style=dotted];\n    b -> b_d;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Module JSON Metadata\nDESCRIPTION: Specifies the JSON structure for module metadata, listing available versions of the module in semver format.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20231106-registry-repository-folder-structure.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versions\": [\n    {\n      \"version\": \"v1.0.0\"\n    },\n    {\n      \"version\": \"v1.0.1\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Provider/Module JSON Structure for OpenTofu Registry\nDESCRIPTION: This JSON structure defines the format for provider and module files in the proposed OpenTofu registry. It includes version information, protocol compatibility, download URLs, and cryptographic signatures for security.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20231017-homebrew-like-registry-design.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\" [\"<PUBLIC_KEY_1>\", \"<PUBLIC_KEY_2>\"],\n  \"versions\": [{\n    \"version\": \"v3.0.352\",\n    \"protocols\": [\"4.2\", \"5.0\"],\n    \"shasum_url\": \"https://example.com/download/v3.0.352/SHASUM\",\n    \"shasum_sig_url\": \"https://example.com/download/v3.0.352/SHASUM.sig\",\n\n    \"targets\": [{\n      \"os\": \"darwin\",\n      \"arch\": \"amd64\",\n      \"download_url\": \"https://example.com/download/v3.0.352/my-provider-darwin-amd64.zip\",\n      \"file_name\": \"my-provider-darwin-amd64.zip\",\n      \"shasum\": \"1\"\n    }, \n    {\n      \"os\": \"darwin\",\n      \"arch\": \"arm64\",\n      \"download_url\": \"https://example.com/download/v3.0.352/my-provider-darwin-arm64.zip\",\n      \"file_name\": \"my-provider-darwin-amd64.zip\",\n      \"shasum\": \"2\"\n    }]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Checksums with Cosign on Windows\nDESCRIPTION: PowerShell script to verify the authenticity of the checksums file using Cosign on Windows systems. This ensures the checksums file itself hasn't been tampered with by verifying its digital signature.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/standalone.mdx#2025-04-16_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n# Replace YOURVERSION with the version you downloaded, for example, 1.6.0-alpha1\n\n# Verify the signature on the checksum file\ncosign verify-blob `\n  --certificate-identity \"https://github.com/opentofu/opentofu/.github/workflows/release.yml@refs/tags/v${YOURVERSION}\" `\n  --certificate-oidc-issuer \"https://token.actions.githubusercontent.com\" `\n  --cert \"tofu_${YOURVERSION}_SHA256SUMS.pem\" `\n  --signature \"tofu_${YOURVERSION}_SHA256SUMS.sig\" `\n  \"tofu_${YOURVERSION}_SHA256SUMS\"\n```\n\n----------------------------------------\n\nTITLE: Error Message: Provider Version Incompatibility - New Version Required\nDESCRIPTION: Example error message shown when a provider version is too old for the current OpenTofu version, suggesting the minimum compatible version to use.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/plugin-protocol/README.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nProvider \"aws\" v1.0.0 is not compatible with OpenTofu v0.12.0.\n\nProvider version v2.0.0 is the earliest compatible version.\nSelect it with the following version constraint:\n\n    version = \"~> 2.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Example Encrypted State File Format in JSON\nDESCRIPTION: Example structure of an encrypted state file in JSON format, showing the encryption metadata that indicates the file is encrypted.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/state_encryption.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"encryption\": {\n    \"method\": \"aes_gcm\",\n    \"key_provider\": \"static.my_key\"\n  },\n  // ... Additional keys here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated Field in Variable and Output Blocks in HCL\nDESCRIPTION: Example showing how module authors can mark variables and outputs as deprecated by adding a 'deprecated' field with a warning message that will be displayed to users.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241118-module-vars-and-outputs-deprecation.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"this_is_my_variable\" {\n  type        = string\n  description = \"This is a variable for the old way of configuring things.\"\n  deprecated  = \"This variable will be removed on 2024-12-31. Use another_variable instead.\"\n}\n\noutput \"this_is_my_output\" {\n  value       = some_resource.some_name.some_field\n  description = \"This is an output for the old way of using things.\"\n  deprecated  = \"This output will be removed on 2024-12-31. Use another_output instead.\"\n}\n```\n\n----------------------------------------\n\nTITLE: DynamicValue Protocol Structure in OpenTofu\nDESCRIPTION: The MessagePack serialization uses a map structure to represent block content, with key-value pairs for attributes and nested blocks following Schema.Block mapping rules.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/plugin-protocol/object-wire-format.md#2025-04-16_snippet_0\n\nLANGUAGE: messagepack\nCODE:\n```\n{\n  \"attribute_key\": value,     // Based on Schema.Attribute rules\n  \"nested_block_key\": value  // Based on Schema.NestedBlock rules\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Main Package's Meta Instantiation\nDESCRIPTION: A GitHub link to where the main package instantiates the Meta object, which will be modified to include the new package fetcher dependency.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/8-auth-implementation-details.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[`package main` directly instantiates `command.Meta`](https://github.com/opentofu/opentofu/blob/ffa43acfcdc4431f139967198faa2dd20a2752ea/cmd/tofu/commands.go#L89-L115)\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Navigation Cards with React\nDESCRIPTION: Uses the DocCardList component to create a navigation menu for different sections of the OpenTofu documentation, including Getting Started, Language, CLI Documentation, and Internals.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n    items={[\n        {\n            type: \"link\",\n            href: \"intro/\",\n            label: \"Getting started\",\n            description:\n                \"Get started with OpenTofu or migrate from a previous version. This section has all the info you need.\",\n        },\n        {\n            type: \"link\",\n            href: \"language/\",\n            label: \"Language\",\n            description:\n                \"Use the OpenTofu configuration language to describe the infrastructure that OpenTofu manages.\",\n        },\n        {\n            type: \"link\",\n            href: \"cli/\",\n            label: \"CLI Documentation\",\n            description:\n                \"Learn OpenTofu's CLI-based workflows. You can use the CLI alone or with cloud backends.\",\n        },\n        {\n            type: \"link\",\n            href: \"internals/\",\n            label: \"Internals\",\n            description:\n                \"Learn how OpenTofu generates the resource dependency graph and executes other internal processes.\",\n        },\n    ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Apply Errored in OpenTofu\nDESCRIPTION: Example of the JSON structure for apply_errored message that is emitted when an error occurs during a resource operation. Includes resource identification, action attempted, and elapsed time.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: Creation errored after 10s\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-03-26T16:38:54.013910-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"action\": \"create\",\n    \"elapsed_seconds\": 10\n  },\n  \"type\": \"apply_errored\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NewOCIGetter Function for OCI Distribution in Go\nDESCRIPTION: This code snippet defines a function to create a new OCI Getter for go-getter. It takes a function parameter to obtain a registry client, which integrates with OpenTofu's OCI repository authentication design.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/10-module-implementation-details.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewOCIGetter(\n    getRegistryClient func(ctx context.Context, registryDomainName, repositoryPath string) (*orasregistry.Registry, error),\n) getter.Getter\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach Using HCL Comments for Deprecation\nDESCRIPTION: An alternative implementation using HCL comments with special syntax to mark items as deprecated. This approach was considered but rejected as OpenTofu doesn't currently treat comments as having special meaning.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241118-module-vars-and-outputs-deprecation.md#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# @deprecated: This variable will be removed on 2024-12-31. Use another_variable instead.\nvariable \"this_is_my_variable\" {\n  type = string\n  description = \"This is a variable for the old way of configuring things.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Block Expressions Representation in JavaScript\nDESCRIPTION: Structure for representing block expressions in OpenTofu configuration. Shows how attribute arguments and nested block arguments are mapped in the JSON representation, with different nesting modes.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/json-format.mdx#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Attribute arguments are mapped directly with the attribute name as key and\n  // an <expression-representation> as value.\n  \"ami\": <expression-representation>,\n  \"instance_type\": <expression-representation>,\n\n  // Nested block arguments are mapped as either a single nested\n  // <block-expressions-representation> or an array object of these, depending on the\n  // block nesting mode chosen in the schema.\n  //  - \"single\" nesting is a direct <block-expressions-representation>\n  //  - \"list\" and \"set\" produce arrays\n  //  - \"map\" produces an object\n  \"root_block_device\": <expression-representation>,\n  \"ebs_block_device\": [\n    <expression-representation>\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu on FreeBSD using pkg\nDESCRIPTION: Commands to install OpenTofu on FreeBSD using the pkg package manager. This method first updates the package repository forcefully and then installs the OpenTofu package.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/bsd.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npkg update -f\npkg install opentofu\n```\n\n----------------------------------------\n\nTITLE: Initializing Graph Transform Example - Go\nDESCRIPTION: Example showing reference to ConfigTransformer, which creates graph vertices for resource blocks in configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/architecture.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nConfigTransformer\n```\n\n----------------------------------------\n\nTITLE: Current State Snapshot Format in JSON\nDESCRIPTION: Example of the current state snapshot format showing resource-level provider configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resources\": [{\n    \"module\": \"module.example\",\n    \"type\": \"aws_instance\",\n    \"name\": \"example\",\n    \"provider\": \"module.example.provider[\\\"registry.opentofu.org/hashicorp/aws\\\"].by_region\",\n    \"instances\": [\n      {\n        \"index_key\": \"first\"\n      },\n      {\n        \"index_key\": \"second\"\n      }\n    ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VM Identity\nDESCRIPTION: Assign and configure managed identity for VM\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/backend/remote-state/azure/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naz vm identity assign --resource-group myResourceGroup --name myVM\naz role assignment create --assignee \"{IDENTITY}\" --role Owner --scope \"/subscriptions/<subscription_id>\"\n```\n\n----------------------------------------\n\nTITLE: Replace Dependency Graph in DOT Format\nDESCRIPTION: A DOT language graph representation showing the dependency relationships when replacing only one resource (A) while updating its dependent resource (B).\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/destroying.md#2025-04-16_snippet_4\n\nLANGUAGE: dot\nCODE:\n```\ndigraph replacement {\n    subgraph create {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B update\"];\n        a -> b [dir=back];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n    }\n\n    a -> a_d;\n    b -> a_d [style=dotted];\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying No Planned Changes with OpenTofu\nDESCRIPTION: Command to verify that there are no planned changes in OpenTofu after migration from Terraform.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.5-or-lower.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu plan\n\n...\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your\nconfiguration and found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Verifying No Pending Changes in OpenTofu\nDESCRIPTION: Run tofu plan to ensure there are no pending changes after migration. This command compares the real infrastructure against the configuration to confirm no differences.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.9.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu plan\n\n...\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your\nconfiguration and found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Azure Environment and Timeout Configuration\nDESCRIPTION: Optional configuration variables for Azure environment settings and timeout parameters.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/settings/backends/azurerm.mdx#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n* `environment` - (Optional) The Azure Environment which should be used. Possible values are `public`, `china`, `german`, `stack` and `usgovernment`. Defaults to `public`.\n* `endpoint` - (Optional) The Custom Endpoint for Azure Resource Manager.\n* `timeout_seconds` - (Optional) The number of seconds before a timeout is reached. Defaults to `300`.\n```\n\n----------------------------------------\n\nTITLE: Main Module with For_Each (Proposed Structure)\nDESCRIPTION: Example module configuration under the proposed structure showing for_each usage.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation/module-expansion.md#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"test\" {\n  for_each = {\"a\": \"first\", \"b\": \"second\" }\n  source = \"./mod\"\n  key = each.key\n  value = each.value\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Resource with Custom Provider in HCL\nDESCRIPTION: Demonstrates how to import a resource using a custom provider configuration. The example uses an AWS provider with a specific region.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/import/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: HCL\nCODE:\n```\nprovider \"aws\" {\n  alias = \"europe\"\n  region = \"eu-west-1\"\n}\n\nimport {\n  provider = aws.europe\n  to = aws_instance.example[\"foo\"]\n  id = \"i-abcd1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for OpenTofu Documentation\nDESCRIPTION: Imports custom React components used for displaying documentation cards and version badges in the OpenTofu documentation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from \"@theme/DocCardList\";\nimport DocVersionBadge from \"@theme/DocVersionBadge\";\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Provision Complete in OpenTofu\nDESCRIPTION: Example of the JSON structure for provision_complete message that indicates successful completion of a provisioning operation. Includes resource identification and provisioner type.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: (local-exec) Provisioning complete\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-03-17T09:34:06.239043-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"provisioner\": \"local-exec\"\n  },\n  \"type\": \"provision_complete\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CredentialsSource Interface in Go\nDESCRIPTION: Interface for obtaining a single set of credentials with specificity information for precedence determination.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/8-auth-implementation-details.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype CredentialsSource interface {\n\tCredentialsSpecificity() CredentialsSpecificity\n\tCredentials(ctx context.Context) (Credentials, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Module Calls with Provider Instance References in HCL\nDESCRIPTION: Example of passing provider instances to a module using for_each. Each module instance receives a different provider instance, but all instances must come from the same provider configuration block.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"example\" {\n  alias    = \"foo\"\n  for_each = toset([\"bar\", \"baz\"])\n\n  # ...\n}\n\nmodule \"example\" {\n  source   = \"./example\"\n  for_each = toset([\"bar\", \"baz\"])\n\n  providers = {\n    # All of the resource blocks in this module can just assume there's\n    # a default (unaliased) \"example\" provider instance available to\n    # use. Each one is bound to a different instance from the provider\n    # block above, but they must still nonetheless all be bound to\n    # the same block.\n    example = example.foo[each.key] # Supported\n\n    # However, if we add uncertainty to which provider configuration is\n    # being referenced, the above assertions do not hold and become much\n    # more complex to reason about:\n    # example = example[local.alias][each.key] # Unsupported\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Discovery Protocol Example\nDESCRIPTION: Example JSON response for a service discovery document implementing only the module registry protocol.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/module-registry-protocol.mdx#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"modules.v1\": \"/tofu/modules/v1/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Golangci Linter Output - Go Code Complexity Issues\nDESCRIPTION: Output from golangci linter showing various code complexity violations across the OpenTofu codebase. Issues include functions exceeding cyclomatic complexity limits, excessive function lengths, complex nested if statements, and high cognitive complexity scores.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241113-pragmatic-complexity-linting.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ninternal/addrs/map_test.go:12:1                                      cyclop    calculated cyclomatic complexity for function TestMap is 21, max is 20\ninternal/backend/local/backend_apply.go:48                           funlen    Function 'opApply' has too many statements (108 > 50)\ninternal/backend/local/backend_apply.go:114:2                        nestif    `if op.PlanFile == nil` has complex nested blocks (complexity: 27)\ninternal/backend/local/backend_local.go:44                           funlen    Function 'localRun' has too many statements (55 > 50)\ninternal/backend/local/backend_local.go:236                          funlen    Function 'localRunForPlanFile' is too long (122 > 100)\ninternal/backend/local/backend_plan.go:25                            funlen    Function 'opPlan' has too many statements (81 > 50)\ninternal/backend/local/hook_state.go:78:2                            nestif    `if h.StateMgr != nil` has complex nested blocks (complexity: 8)\ninternal/backend/local/hook_state_test.go:40:1                       cyclop    calculated cyclomatic complexity for function TestStateHookStopping is 22, max is 20\ninternal/backend/remote-state/azure/backend.go:18                    funlen    Function 'New' is too long (165 > 100)\ninternal/backend/remote-state/azure/backend_state.go:109:2           nestif    `if v == nil` has complex nested blocks (complexity: 10)\ninternal/backend/remote-state/cos/backend.go:59                      funlen    Function 'New' is too long (131 > 100)\ninternal/backend/remote-state/cos/backend_state.go:103:2             nestif    `if !exists` has complex nested blocks (complexity: 9)\ninternal/backend/remote-state/http/backend_test.go:23:1              cyclop    calculated cyclomatic complexity for function TestHTTPClientFactory is 27, max is 20\ninternal/backend/remote-state/kubernetes/backend.go:40               funlen    Function 'New' is too long (142 > 100)\ninternal/backend/remote-state/kubernetes/backend.go:306              funlen    Function 'tryLoadingConfigFile' has too many statements (51 > 50)\ninternal/backend/remote-state/kubernetes/backend_state.go:95:2       nestif    `if v == nil` has complex nested blocks (complexity: 6)\ninternal/backend/remote-state/oss/backend.go:551:1                   cyclop    calculated cyclomatic complexity for function getConfigFromProfile is 23, max is 20\ninternal/backend/remote-state/pg/backend_test.go:233:1               gocognit  cognitive complexity 51 of func `TestBackendConfigSkipOptions` is high (> 50)\ninternal/backend/remote-state/s3/backend.go:61                       funlen    Function 'ConfigSchema' is too long (384 > 100)\ninternal/backend/remote-state/s3/backend.go:464                      funlen    Function 'PrepareConfig' is too long (167 > 100)\ninternal/backend/remote-state/s3/backend.go:644                      funlen    Function 'Configure' has too many statements (63 > 50)\ninternal/backend/remote-state/s3/backend.go:676:2                    nestif    `if ok` has complex nested blocks (complexity: 9)\ninternal/backend/remote-state/s3/backend_complete_test.go:150:1      gocognit  cognitive complexity 63 of func `TestBackendConfig_Authentication` is high (> 50)\ninternal/backend/remote-state/s3/backend_state.go:182:2              nestif    `if !exists` has complex nested blocks (complexity: 9)\ninternal/backend/remote-state/s3/backend_test.go:1163:4              nestif    `if testCase.expectedErr != \"\"` has complex nested blocks (complexity: 7)\ninternal/backend/remote-state/s3/backend_test.go:1227:4              nestif    `if testCase.expectedErr != \"\"` has complex nested blocks (complexity: 7)\ninternal/backend/remote-state/s3/backend_test.go:1255:1              cyclop    calculated cyclomatic complexity for function TestBackendExtraPaths is 24, max is 20\ninternal/backend/remote/backend_common.go:466:1                      gocognit  cognitive complexity 83 of func `(*Remote).confirm` is high (> 50)\ninternal/checks/state_test.go:20:1                                   cyclop    calculated cyclomatic complexity for function TestChecksHappyPath is 26, max is 20\ninternal/cloud/backend.go:262                                        funlen    Function 'Configure' has too many statements (53 > 50)\ninternal/cloud/backend.go:646                                        funlen    Function 'StateMgr' has too many statements (52 > 50)\ninternal/cloud/backend.go:692:2                                      nestif    `if err == tfe.ErrResourceNotFound` has complex nested blocks (complexity: 11)\ninternal/cloud/backend.go:780                                        funlen    Function 'Operation' has too many statements (61 > 50)\ninternal/cloud/backend.go:905:2                                      nestif    `if r.Actions.IsCancelable` has complex nested blocks (complexity: 13)\ninternal/cloud/backend.go:1011:2                                     nestif    `if remoteVersion != nil && remoteVersion.Prerelease() == \"\"` has complex nested blocks (complexity: 9)\ninternal/cloud/backend_apply.go:25                                   funlen    Function 'opApply' has too many statements (53 > 50)\ninternal/cloud/backend_apply.go:97:2                                 nestif    `if ok` has complex nested blocks (complexity: 20)\ninternal/cloud/backend_apply.go:233:2                                nestif    `if b.CLI != nil` has complex nested blocks (complexity: 12)\ninternal/cloud/backend_apply_test.go:1948:4                          nestif    `if tc.wantErr != \"\"` has complex nested blocks (complexity: 14)\ninternal/cloud/backend_common.go:50                                  funlen    Function 'waitForRun' is too long (144 > 100)\ninternal/cloud/backend_common.go:83:3                                nestif    `if b.CLI != nil && (i == 0 || current.Sub(updated).Seconds() > 30)` has complex nested blocks (complexity: 29)\ninternal/cloud/backend_common.go:227                                 funlen    Function 'costEstimate' has too many statements (57 > 50)\ninternal/cloud/backend_common.go:322                                 funlen    Function 'checkPolicy' has too many statements (57 > 50)\ninternal/cloud/backend_common.go:403:4                               nestif    `if op.AutoApprove` has complex nested blocks (complexity: 8)\ninternal/cloud/backend_common.go:442:1                               gocognit  cognitive complexity 84 of func `(*Cloud).confirm` is high (> 50)\ninternal/cloud/backend_common.go:524:3                               nestif    `if v != keyword` has complex nested blocks (complexity: 8)\ninternal/cloud/backend_context.go:26                                 funlen    Function 'LocalRun' is too long (114 > 100)\ninternal/cloud/backend_context.go:92:2                               nestif    `if op.AllowUnsetVariables` has complex nested blocks (complexity: 22)\ninternal/cloud/backend_context_test.go:218:4                         nestif    `if test.WantError != \"\"` has complex nested blocks (complexity: 6)\ninternal/cloud/backend_plan.go:120                                   funlen    Function 'plan' has too many statements (100 > 50)\ninternal/cloud/backend_plan.go:145:2                                 nestif    `if op.ConfigDir != \"\"` has complex nested blocks (complexity: 7)\ninternal/cloud/backend_plan.go:298:2                                 nestif    `if lockTimeout > 0` has complex nested blocks (complexity: 6)\ninternal/cloud/backend_plan.go:438                                   funlen    Function 'renderPlanLogs' has too many statements (51 > 50)\ninternal/cloud/backend_plan.go:444:2                                 nestif    `if b.CLI != nil` has complex nested blocks (complexity: 13)\ninternal/cloud/backend_plan.go:599:2                                 nestif    `if b.client.IsEnterprise()` has complex nested blocks (complexity: 6)\ninternal/cloud/backend_taskStages_test.go:261:3                      nestif    `if c.isError` has complex nested blocks (complexity: 6)\ninternal/cloud/e2e/main_test.go:76:1                                 gocognit  cognitive complexity 72 of func `testRunner` is high (> 50)\ninternal/cloud/e2e/migrate_state_remote_backend_to_tfc_test.go:15:1  cyclop    calculated cyclomatic complexity for function Test_migrate_remote_backend_single_org is 25, max is 20\ninternal/cloud/state.go:176:2                                        nestif    `if s.readState != nil` has complex nested blocks (complexity: 6)\ninternal/cloud/tfe_client_mock.go:1201:1                             cyclop    calculated cyclomatic complexity for function ReadWithOptions is 22, max is 20\ninternal/command/cliconfig/credentials_test.go:20:1                  cyclop    calculated cyclomatic complexity for function TestCredentialsForHost is 24, max is 20\ninternal/command/cliconfig/credentials_test.go:200:1                 cyclop    calculated cyclomatic complexity for function TestCredentialsStoreForget is 27, max is 20\ninternal/command/clistate/local_state.go:139:2                       nestif    `if !s.written && (s.stateFileOut == nil || s.Path != s.PathOut)` has complex nested blocks (complexity: 6)\ninternal/command/e2etest/primary_test.go:28:1                        cyclop    calculated cyclomatic complexity for function TestPrimarySeparatePlan is 22, max is 20\n```\n\n----------------------------------------\n\nTITLE: Unicode Table Generation Command for HCL\nDESCRIPTION: Command reference for generating Unicode tables in HCL using the unicode2ragel.rb script and go generate command.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/unicode.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo generate ./hclsyntax\n```\n\n----------------------------------------\n\nTITLE: Compiling Tests for Linux\nDESCRIPTION: Cross-compile tests for Linux environment\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/backend/remote-state/azure/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGOOS=linux GOARCH=amd64 go test -c .\n```\n\n----------------------------------------\n\nTITLE: Checking OpenTofu Version\nDESCRIPTION: Verify the installed OpenTofu version using the tofu command.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/migration/terraform-1.6.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu --version\nOpenTofu v1.6.2\non linux_amd64\n```\n\n----------------------------------------\n\nTITLE: Verifying No Pending Changes in OpenTofu Plan\nDESCRIPTION: Command to verify that there are no pending infrastructure changes before migration\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/upgrading.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu plan\n\n...\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your\nconfiguration and found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Displaying OpenTofu Project Directory Tree Structure\nDESCRIPTION: Visual representation of a project directory structure showing the organization of OpenTofu modules and test files. Demonstrates the conventional layout with main.tf, specialized configuration files, and corresponding test files in a tests subdirectory.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/nested-layout-module.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── module1\n│    ├── main.tf\n│    ├── foo.tf\n│    ├── bar.tf\n│    └── tests\n│         ├── main.tftest.hcl\n│         ├── foo.tftest.hcl\n│         └── bar.tftest.hcl\n└── module2\n     └── ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Variable Validation with Warning Message in HCL\nDESCRIPTION: Shows how to implement a custom validation block for a variable with a warning message about future deprecation. The validation ensures the variable is not null while providing a warning about its planned removal date.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241118-module-vars-and-outputs-deprecation.md#2025-04-16_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"this_is_my_variable\" {\n  type = string\n  description = \"This is a variable for the old way of configuring things.\"\n  \n  validation {\n    condition     = var.this_is_my_variable != null\n    warning_message = \"This variable will be removed on 2024-12-31. Use another_variable instead.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Pattern: Using the Same for_each in Provider and Resource\nDESCRIPTION: An example of using identical for_each expressions in both a provider configuration and its associated resources. This pattern works for creation but is problematic when removing elements from the collection as the provider would be removed along with its resources.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    aws = {\n      source = \"hashicorp/aws\"\n    }\n  }\n}\n\nvariable \"aws_regions\" {\n  type = map(object({\n    vpc_cidr_block = string\n  }))\n}\n\nprovider \"aws\" {\n  alias    = \"by_region\"\n  for_each = var.aws_regions\n\n  region = each.key\n}\n\nresource \"aws_vpc\" \"example\" {\n  for_each = var.aws_regions\n  provider = aws.by_region[each.key]\n\n  cidr_block = each.value.vpc_cidr_block\n}\n```\n\n----------------------------------------\n\nTITLE: Using the reverse Function in Terraform\nDESCRIPTION: Demonstrates how to use the reverse function to reverse the elements in an array. The function takes an array as input and returns a new array with the same elements in reverse order.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/reverse.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nreverse([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Defining Credentials Specificity Constants in Go\nDESCRIPTION: Constants and function for representing credential matching specificity levels, used in precedence determination.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/8-auth-implementation-details.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst NoCredentialsSpecificity CredentialsSpecificity\n\nconst GlobalCredentialsSpecificity CredentialsSpecificity\n\nconst DomainCredentialsSpecificity CredentialsSpecificity\n\nfunc RepositoryCredentialsSpecificity(pathSegments uint) CredentialsSpecificity\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Provision Errored in OpenTofu\nDESCRIPTION: Example of the JSON structure for provision_errored message that is emitted when an error occurs during provisioning. Includes resource identification and provisioner type.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"null_resource.none[0]: (local-exec) Provisioning errored\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-03-26T16:38:54.013572-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"null_resource.none[0]\",\n      \"module\": \"\",\n      \"resource\": \"null_resource.none[0]\",\n      \"implied_provider\": \"null\",\n      \"resource_type\": \"null_resource\",\n      \"resource_name\": \"none\",\n      \"resource_key\": 0\n    },\n    \"provisioner\": \"local-exec\"\n  },\n  \"type\": \"provision_errored\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing PackageFetcher Interface in Go\nDESCRIPTION: A link to the Go documentation for the getmodules.PackageFetcher interface that will be used in the module package installer implementation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/8-auth-implementation-details.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[`getmodules.PackageFetcher`](https://pkg.go.dev/github.com/opentofu/opentofu/internal/getmodules#PackageFetcher)\n```\n\n----------------------------------------\n\nTITLE: Pulling OCI Blob Example with cURL\nDESCRIPTION: Example of pulling a blob from an OCI registry using cURL, demonstrating authentication headers and expected redirect response.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/1-oci-primer.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v -H \"Authorization: Bearer djE6b3Blb...\" https://ghcr.io/v2/opentofu/opentofu/blobs/sha256:22b79cf4f0efedf6423a10f5200cde934aaa8d6c7ece5a45939e87bb5af12e22\n```\n\n----------------------------------------\n\nTITLE: Implementing S3 Conditional Write Locking in Go\nDESCRIPTION: Code snippet showing how to implement S3 conditional write locking using AWS SDK for Go. This uses the 'IfNoneMatch' header to ensure the lock file is only created if it doesn't already exist.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20250211-s3-locking-with-conditional-writes.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ninput := &s3.PutObjectInput{\n    Bucket:            aws.String(bucket),\n    Key:               aws.String(key),\n    Body:              bytes.NewReader([]byte(lockInfo)),\n    IfNoneMatch:       aws.String(\"*\"),\n}\n_, err := actor.S3Client.PutObject(ctx, input)\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificate\nDESCRIPTION: Generate SSL certificate pair for service principal authentication\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/backend/remote-state/azure/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -subj '/CN=myclientcertificate/O=MyCompany, Inc./ST=CA/C=US' \\\n -new -newkey rsa:4096 -sha256 -days 3 -nodes -x509 -keyout client.key -out client.crt\nopenssl pkcs12 -certpbe PBE-SHA1-3DES -keypbe PBE-SHA1-3DES -export -macalg sha1 -password \"pass:\" -out client.pfx -inkey client.key -in client.crt\n```\n\n----------------------------------------\n\nTITLE: Running OpenTofu Tests with Environment Variables\nDESCRIPTION: Command to run OpenTofu tests with required environment variables TFE_TOKEN and TFE_HOSTNAME. The command includes test configuration for external network calls and custom prerelease version specification using ldflags.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/cloud/e2e/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTFE_TOKEN=<token> TFE_HOSTNAME=<hostname> TF_ACC=1 go test  ./internal/cloud/e2e/... -ldflags \"-X \\\"github.com/opentofu/opentofu/version.Prerelease=<PRE-RELEASE>\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Proposed State Snapshot Format in JSON\nDESCRIPTION: Example of the proposed state snapshot format with instance-level provider configuration and instance keys.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resources\": [{\n    \"module\": \"module.example\",\n    \"type\": \"aws_instance\",\n    \"name\": \"example\",\n    \"instances\": [\n      {\n        \"index_key\": \"first\",\n        \"provider\": \"module.example.provider[\\\"registry.opentofu.org/hashicorp/aws\\\"].by_region[\\\"us-west-2\\\"]\"\n      },\n      {\n        \"index_key\": \"second\",\n        \"provider\": \"module.example.provider[\\\"registry.opentofu.org/hashicorp/aws\\\"].by_region[\\\"eu-east-1\\\"]\"\n      }\n    ]\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Provider from Lock File (Diff)\nDESCRIPTION: Example diff showing how OpenTofu removes a provider entry from the lock file when the provider is no longer required in both configuration and state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/files/dependency-lock.mdx#2025-04-16_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n--- .terraform.lock.hcl\t2020-10-07 16:12:07.539570634 -0700\n+++ .terraform.lock.hcl\t2020-10-07 16:12:15.267487237 -0700\n@@ -6,26 +6,6 @@\n   ]\n }\n\n-provider \"registry.opentofu.org/hashicorp/azurerm\" {\n-  version     = \"2.30.0\"\n-  constraints = \"~> 2.12\"\n-  hashes = [\n-    \"h1:FJwsuowaG5CIdZ0WQyFZH9r6kIJeRKts9+GcRsTz1+Y=\",\n-    \"h1:c/ntSXrDYM1mUir2KufijYebPcwKqS9CRGd3duDSGfY=\",\n-    \"h1:yre4Ph76g9H84MbuhZ2z5MuldjSA4FsrX6538O7PCcY=\",\n-    \"zh:04f0a50bb2ba92f3bea6f0a9e549ace5a4c13ef0cbb6975494cac0ef7d4acb43\",\n-    \"zh:2082e12548ebcdd6fd73580e83f626ed4ed13f8cdfd51205d8696ffe54f30734\",\n-    \"zh:246bcc449e9a92679fb30f3c0a77f05513886565e2dcc66b16c4486f51533064\",\n-    \"zh:24de3930625ac9014594d79bfa42d600eca65e9022b9668b54bfd0d924e21d14\",\n-    \"zh:2a22893a576ff6f268d9bf81cf4a56406f7ba79f77826f6df51ee787f6d2840a\",\n-    \"zh:2b27485e19c2aaa9f15f29c4cff46154a9720647610171e30fc6c18ddc42ec28\",\n-    \"zh:435f24ce1fb2b63f7f02aa3c84ac29c5757cd29ec4d297ed0618423387fe7bd4\",\n-    \"zh:7d99725923de5240ff8b34b5510569aa4ebdc0bdb27b7bac2aa911a8037a3893\",\n-    \"zh:7e3b5d0af3b7411dd9dc65ec9ab6caee8c191aee0fa7f20fc4f51716e67f50c0\",\n-    \"zh:da0af4552bef5a29b88f6a0718253f3bf71ce471c959816eb7602b0dadb469ca\",\n-  ]\n-}\n-\n provider \"registry.opentofu.org/newrelic/newrelic\" {\n   version     = \"2.1.2\"\n   constraints = \"~> 2.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Simple Resource Creation Graph in DOT Format\nDESCRIPTION: A DOT language graph representation showing the dependency relationships for resource creation, where A has no dependencies, B depends on A, and C depends on B.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/destroying.md#2025-04-16_snippet_0\n\nLANGUAGE: dot\nCODE:\n```\ndigraph create {\n    subgraph nodes {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B create\"];\n        c [label=\"C create\"];\n        b -> c [dir=back];\n        a -> b [dir=back];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Submodule for New Release in Git\nDESCRIPTION: Command to add a submodule for the new release to the website repository. This is used for stable releases to incorporate the new version's documentation.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/CONTRIBUTING.RELEASE.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule add -b vX.Y https://github.com/opentofu/opentofu opentofu-repo/vX.Y\n```\n\n----------------------------------------\n\nTITLE: Test Run Message Format in OpenTofu\nDESCRIPTION: Example of the JSON message structure for individual test run results, including test name and execution status.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"@level\": \"info\",\n    \"@message\": \"  \\\"test\\\"... pass\",\n    \"@module\": \"tofu.ui\",\n    \"@testfile\": \"main.tftest.hcl\",\n    \"@testrun\": \"test\",\n    \"@timestamp\": \"2024-04-20T17:24:48.588519+10:00\",\n    \"test_run\": {\n        \"path\": \"main.tftest.hcl\",\n        \"run\": \"test\",\n        \"status\": \"pass\"\n    },\n    \"type\": \"test_run\"\n}\n```\n\n----------------------------------------\n\nTITLE: Destroy-Time Provisioner Configuration\nDESCRIPTION: Shows how to configure a destroy-time provisioner that runs before the resource is destroyed. The provisioner executes a local command during resource destruction.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/resources/provisioners/syntax.mdx#2025-04-16_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  # ...\n\n  provisioner \"local-exec\" {\n    when    = destroy\n    command = \"echo 'Destroy-time provisioner'\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Package Authentication Interfaces in Go\nDESCRIPTION: Defines the core interfaces for package authentication in OpenTofu, including PackageAuthentication for basic package verification and PackageAuthenticationHashes for managing acceptable hash sets. These interfaces are used to implement trust-on-first-use authentication for provider packages.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20250327-providerinst-auth-hashes.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype PackageAuthentication interface {\n\t// AuthenticatePackage takes the local location of a package (which may or\n\t// may not be the same as the original source location), and returns a\n\t// PackageAuthenticationResult, or an error if the authentication checks\n\t// fail.\n\t//\n\t// The local location is guaranteed not to be a PackageHTTPURL: a remote\n\t// package will always be staged locally for inspection first.\n\tAuthenticatePackage(localLocation PackageLocation) (*PackageAuthenticationResult, error)\n}\n\ntype PackageAuthenticationHashes interface {\n\tPackageAuthentication\n\n\t// AcceptableHashes returns a set of hashes that this authenticator\n\t// considers to be valid for the current package or, where possible,\n\t// equivalent packages on other platforms. The order of the items in\n\t// the result is not significant, and it may contain duplicates\n\t// that are also not significant.\n\t//\n\t// This method's result should only be used to create a \"lock\" for a\n\t// particular provider if an earlier call to AuthenticatePackage for\n\t// the corresponding package succeeded. A caller might choose to apply\n\t// differing levels of trust for the acceptable hashes depending on\n\t// the authentication result: a \"verified checksum\" result only checked\n\t// that the downloaded package matched what the source claimed, which\n\t// could be considered to be less trustworthy than a check that includes\n\t// verifying a signature from the origin registry, depending on what the\n\t// hashes are going to be used for.\n\t//\n\t// Implementations of PackageAuthenticationHashes may return multiple\n\t// hashes with different schemes, which means that all of them are equally\n\t// acceptable. Implementors may also return hashes that use schemes the\n\t// current version of the authenticator would not allow but that could be\n\t// accepted by other versions of OpenTofu, e.g. if a particular hash\n\t// scheme has been deprecated.\n\t//\n\t// Authenticators that don't use hashes as their authentication procedure\n\t// will either not implement this interface or will have an implementation\n\t// that returns an empty result.\n\tAcceptableHashes() []Hash\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure VM\nDESCRIPTION: Create Ubuntu VM for running tests\nSOURCE: https://github.com/opentofu/opentofu/blob/main/internal/backend/remote-state/azure/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naz vm create --resource-group myResourceGroup --name myVM --image Ubuntu2204 --generate-ssh-keys --admin-username azureuser --admin-password <long password with lower and upper letters, numbers and symbols>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for OpenTofu Provider Acceptance Tests\nDESCRIPTION: Environment variables needed to run acceptance tests for providers against the OpenTofu CLI. These settings specify the path to the OpenTofu binary, the provider namespace, and the registry host.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/providers/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTF_ACC_TERRAFORM_PATH=\"/path/to/opentofu\"\nTF_ACC_PROVIDER_NAMESPACE=\"hashicorp\"\nTF_ACC_PROVIDER_HOST=\"registry.opentofu.org\"\n```\n\n----------------------------------------\n\nTITLE: Pushing provider package to OCI Image Layout\nDESCRIPTION: Uses ORAS to push a provider package to a local OCI Image Layout, generating its manifest. This command should be repeated for each platform-specific package.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/oci_registries/provider-mirror.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shellsession\nCODE:\n```\n$ oras push \\\n    --artifact-type application/vnd.opentofu.provider-target \\\n    --artifact-platform linux/amd64 \\\n    --oci-layout tmp-layout:linux_amd64 \\\n    terraform-provider-tls_4.0.6_linux_amd64.zip:archive/zip\n\n✓ Uploaded  terraform-provider-tls_4.0.6_linux_amd64.zip\n  └─ sha256:5f12d51fa9e87b6d29275fa58d1cd8681c0177a1d3a71a4e6c78ad7b011fa065\n✓ Uploaded  application/vnd.oci.image.config.v1+json\n  └─ sha256:9d99a75171aea000c711b34c0e5e3f28d3d537dd99d110eafbfbc2bd8e52c2bf\n✓ Uploaded  application/vnd.oci.image.manifest.v1+json\n  └─ sha256:01d3ccf9747dd604ebaa314efbacf12e18a248f8bf1c783f5cbb220754954e67\nPushed [oci-layout] tmp-layout:linux_amd64\nArtifactType: application/vnd.opentofu.provider-target\nDigest: sha256:01d3ccf9747dd604ebaa314efbacf12e18a248f8bf1c783f5cbb220754954e67\n```\n\n----------------------------------------\n\nTITLE: Nested Block Mapping for Lifecycle in JSON Configuration\nDESCRIPTION: This snippet shows how to represent a nested 'lifecycle' block within a resource block using JSON syntax in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/syntax/json.mdx#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resource\": {\n    \"aws_instance\": {\n      \"example\": {\n        \"lifecycle\": {\n          \"create_before_destroy\": true\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ORAS Credentials Translation in Go\nDESCRIPTION: Method to convert internal credentials representation to ORAS-compatible format.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20241206-oci-registries/8-auth-implementation-details.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\torasauth \"oras.land/oras-go/v2/registry/remote/auth\"\n)\n\nfunc (c *Credentials) ForORAS() orasauth.Credential\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Generated API Responses\nDESCRIPTION: Shows the expected directory structure that would be generated for the OpenTofu registry, using the null provider as an example. The structure follows the OpenTofu v1 API paths for listing versions and downloading specific versions for specific architectures.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20231109-registry-response-generation.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n└── providers\n    └── opentofu\n        └── terraform-provider-null\n            ├── 0.1.0\n            │   └── download\n            │       ├── darwin\n            │       │   └── amd64\n            │       ├── linux\n            │       │   ├── 386\n            │       │   └── amd64\n            │       └── windows\n            │           ├── 386\n            │           └── amd64\n            ...\n            ├── 3.2.1\n            │   └── download\n            │       ├── darwin\n            │       │   ├── amd64\n            │       │   └── arm64\n            │       ├── linux\n            │       │   ├── 386\n            │       │   ├── amd64\n            │       │   ├── arm\n            │       │   └── arm64\n            │       └── windows\n            │           ├── 386\n            │           ├── amd64\n            │           ├── arm\n            │           └── arm64\n            └── versions\n```\n\n----------------------------------------\n\nTITLE: Multiple Provisioners in HCL Configuration\nDESCRIPTION: This snippet demonstrates how to define multiple provisioners for a resource using native HCL syntax in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/syntax/json.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"example\" {\n  # (resource configuration omitted for brevity)\n\n  provisioner \"local-exec\" {\n    command = \"echo 'Hello World' >example.txt\"\n  }\n  provisioner \"file\" {\n    source      = \"example.txt\"\n    destination = \"/tmp/example.txt\"\n  }\n  provisioner \"remote-exec\" {\n    inline = [\n      \"sudo install-something -f /tmp/example.txt\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replace Dependency with Create Before Destroy Graph in DOT Format\nDESCRIPTION: A DOT language graph representation showing the dependency relationships when replacing a dependency (A) with create_before_destroy while updating the dependent resource (B).\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/destroying.md#2025-04-16_snippet_7\n\nLANGUAGE: dot\nCODE:\n```\ndigraph replacement {\n    subgraph create {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B update\"];\n        a -> b [dir=back];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n    }\n\n    a -> a_d [dir=back, style=dotted];\n    b -> a_d [dir=back];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Provider in OpenTofu Test Scenario\nDESCRIPTION: This code snippet shows how to implement a mock provider in a test scenario that matches the multi-instance configuration of the main module. It includes mock_provider blocks and run blocks to test different scenarios.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/rfc/20240513-static-evaluation-providers.md#2025-04-16_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nmock_provider \"aws\" {\n  alias    = \"by_region\"\n  for_each = var.aws_regions\n  # NOTE: In this example for_each is set to exactly the same expression as\n  # the corresponding block in the main module, but that's not actually\n  # required: it would be valid to specify only a subset of regions or\n  # even a _fake_ set of regions since the mock provider doesn't actually\n  # know what an \"AWS region\" even is.\n  # However, this particular module _does_ expect to have one instance\n  # of the provider for each entry in var.aws_regions, so we must match\n  # that here to ensure that we're testing something realistic.\n\n  # ...all the existing mock provider settings, unchanged...\n}\n\nrun \"initial_create\" {\n  variables {\n    aws_regions = {\n      faked-region-a = {}\n      faked-region-b = {}\n    }\n  }\n}\n\nrun \"disable_b\" {\n  variables {\n    aws_regions = {\n      faked-region-a = {}\n      faked-region-b = {\n        # Must first disable this region, causing all of the\n        # resource instances in it to be destroyed before we\n        # remove the provider configuration that is responsible\n        # for destroying them.\n        #\n        # Failure at this step suggests that there's at least one\n        # resource directly using for_each = var.aws_regions,\n        # rather than a filtered version that only includes\n        # the enabled regions.\n        enabled = false\n      }\n    }\n  }\n}\n\nrun \"remove_b\" {\n  variables {\n    aws_regions = {\n      faked-region-a = {}\n      # faked-region-b is now completely removed, so it's\n      # (now-inert) provider configuration is not declared at all.\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Module Download Request Example\nDESCRIPTION: Example cURL command for requesting module download information.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/module-registry-protocol.mdx#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ curl -i 'https://registry.opentofu.org/v1/modules/foo/bar/baz/0.0.1/download'\n```\n\n----------------------------------------\n\nTITLE: Post-Migration Plan Verification\nDESCRIPTION: Command to verify that there are no unexpected changes after migration\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/upgrading.mdx#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu plan\n\n...\n\nNo changes. Your infrastructure matches the configuration.\n\nOpenTofu has compared your real infrastructure against your\nconfiguration and found no differences, so no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Module Download Response with Header Example\nDESCRIPTION: Example HTTP response for module download using X-Terraform-Get header.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/module-registry-protocol.mdx#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nHTTP/2 204 No Content\nContent-Length: 0\nX-Terraform-Get: git::https://github.com/foo/terraform-baz-bar?ref=v0.0.1\n```\n\n----------------------------------------\n\nTITLE: Constructing URL Example for OpenTofu Provider Download\nDESCRIPTION: An example showing how OpenTofu constructs the full URL for downloading a provider plugin from a relative URL specified in the response. The example demonstrates URL resolution for the random provider.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/provider-network-mirror-protocol.mdx#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://tofu.example.com/providers/registry.opentofu.org/hashicorp/random/terraform-provider-random_2.0.0_darwin_amd64.zip\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTofu using Zypper on openSUSE\nDESCRIPTION: This command installs OpenTofu using the Zypper package manager on openSUSE and similar distributions.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/intro/install/rpm.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n${ZypperInstallScript}\n```\n\n----------------------------------------\n\nTITLE: OpenTofu Values Representation Structure in JavaScript\nDESCRIPTION: Demonstrates the complete structure of a values representation object in OpenTofu, including outputs, root module resources, and child modules. Shows how resource attributes, sensitive values, and module hierarchies are represented in JSON format.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/json-format.mdx#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"outputs\": {\n    \"private_ip\": {\n      \"value\": \"192.168.3.2\",\n      \"type\": \"string\",\n      \"sensitive\": false\n    }\n  },\n\n  \"root_module\": {\n    \"resources\": [\n      {\n        \"address\": \"aws_instance.example[1]\",\n        \"mode\": \"managed\",\n        \"type\": \"aws_instance\",\n        \"name\": \"example\",\n        \"index\": 1,\n        \"provider_name\": \"aws\",\n        \"schema_version\": 2,\n        \"values\": {\n          \"id\": \"i-abc123\",\n          \"instance_type\": \"t2.micro\"\n        },\n        \"sensitive_values\": {\n          \"id\": true\n        }\n      }\n    ]\n\n    \"child_modules\": [\n      {\n        \"address\": \"module.child\",\n        \"resources\": [\n            {\n              \"address\": \"module.child.aws_instance.foo\"\n            }\n        ],\n        \"child_modules\": [ ... ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration Transform Example - Go\nDESCRIPTION: Example showing reference to ProviderTransformer, which handles provider association and initialization ordering.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/architecture.md#2025-04-16_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nProviderTransformer\n```\n\n----------------------------------------\n\nTITLE: Expression Representation in JavaScript\nDESCRIPTION: JSON structure for representing unevaluated expressions in OpenTofu configuration. It includes details for constant values and references to other objects in the configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/json-format.mdx#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // \"constant_value\" is set only if the expression contains no references to\n  // other objects, in which case it gives the resulting constant value. This is\n  // mapped as for the individual values in a value representation.\n  \"constant_value\": \"hello\",\n\n  // Alternatively, \"references\" will be set to a list of references in the\n  // expression. Multi-step references will be unwrapped and duplicated for each\n  // significant traversal step, allowing callers to more easily recognize the\n  // objects they care about without attempting to parse the expressions.\n  // Callers should only use string equality checks here, since the syntax may\n  // be extended in future releases.\n  \"references\": [\n    \"data.template_file.foo[1].vars[\\\"baz\\\"]\",\n    \"data.template_file.foo[1].vars\", // implied by previous\n    \"data.template_file.foo[1]\", // implied by previous\n    \"data.template_file.foo\", // implied by previous\n    \"module.foo.bar\",\n    \"module.foo\", // implied by the previous\n    \"var.example[0]\",\n    \"var.example\", // implied by the previous\n\n    // Partial references like \"data\" and \"module\" are not included, because\n    // OpenTofu considers \"module.foo\" to be an atomic reference, not an\n    // attribute access.\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Replace All with Create Before Destroy Graph in DOT Format\nDESCRIPTION: A DOT language graph representation showing the dependency relationships when replacing all resources with create_before_destroy set on the dependency (A).\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/destroying.md#2025-04-16_snippet_6\n\nLANGUAGE: dot\nCODE:\n```\ndigraph replacement {\n    subgraph create {\n        rank=same;\n        a [label=\"A create\"];\n        b [label=\"B create\"];\n        a -> b [dir=back];\n    }\n    subgraph destroy {\n        rank=same;\n        a_d [label=\"A destroy\"];\n        b_d [label=\"B destroy\"];\n        a_d -> b_d;\n    }\n\n    a -> a_d [dir=back];\n    a -> b_d;\n    b -> a_d [dir=back];\n    b -> b_d;\n}\n```\n\n----------------------------------------\n\nTITLE: Go Package Imports for Unicode Support\nDESCRIPTION: External module references for text segmentation support in OpenTofu.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/unicode.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/apparentlymart/go-textseg/v13\n```\n\n----------------------------------------\n\nTITLE: Providers Schema JSON Output Format Example\nDESCRIPTION: Example of the top-level JSON object returned by the `tofu providers schema -json` command, showing the structure with provider schemas, resource schemas, and data source schemas.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/providers/schema.mdx#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"format_version\": \"1.0\",\n\n  // \"provider_schemas\" describes the provider schemas for all\n  // providers throughout the configuration tree.\n  \"provider_schemas\": {\n    // keys in this map are the provider type, such as \"random\"\n    \"example_provider_name\": {\n      // \"provider\" is the schema for the provider configuration\n      \"provider\": <schema-representation>,\n\n      // \"resource_schemas\" map the resource type name to the resource's schema\n      \"resource_schemas\": {\n        \"example_resource_name\": <schema-representation>\n      },\n\n      // \"data_source_schemas\" map the data source type name to the\n      // data source's schema\n      \"data_source_schemas\": {\n        \"example_datasource_name\": <schema-representation>,\n      }\n    },\n    \"example_provider_two\": { … }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Apply Start in OpenTofu\nDESCRIPTION: Example of the JSON structure for the apply_start message that is emitted when OpenTofu begins applying changes to a resource. Includes resource identification and the planned action.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/internals/machine-readable-ui.mdx#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@level\": \"info\",\n  \"@message\": \"random_pet.animal: Creating...\",\n  \"@module\": \"tofu.ui\",\n  \"@timestamp\": \"2021-05-25T13:32:41.825308-04:00\",\n  \"hook\": {\n    \"resource\": {\n      \"addr\": \"random_pet.animal\",\n      \"module\": \"\",\n      \"resource\": \"random_pet.animal\",\n      \"implied_provider\": \"random\",\n      \"resource_type\": \"random_pet\",\n      \"resource_name\": \"animal\",\n      \"resource_key\": null\n    },\n    \"action\": \"create\"\n  },\n  \"type\": \"apply_start\"\n}\n```\n\n----------------------------------------\n\nTITLE: Original Module with Multiple Resources in HCL\nDESCRIPTION: Shows an original module configuration with three AWS instances that will be split into separate modules. This represents the starting point before refactoring.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-16_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"a\" {\n  # (other resource-type-specific configuration)\n}\n\nresource \"aws_instance\" \"b\" {\n  # (other resource-type-specific configuration)\n}\n\nresource \"aws_instance\" \"c\" {\n  # (other resource-type-specific configuration)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Encryption with JSON in OpenTofu\nDESCRIPTION: Equivalent JSON configuration for encryption, defining a static key provider and AES GCM encryption method. Uses string interpolation to reference provider and method.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/state_encryption.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_provider\" : {\n    \"static\": {\n      \"my_key\": {\n        \"key\": \"this is my encryption key\"\n      }\n    }\n  },\n  \"method\": {\n    \"aes_gcm\": {\n      \"foo\": {\n        \"key_provider\": \"${key_provider.static.my_key}\"\n      }\n    }\n  },\n  \"state\": {\n    \"method\": \"${method.aes_gcm.foo}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: New Module Y Definition in HCL\nDESCRIPTION: Defines the second new module 'y' which contains a single AWS instance resource extracted from the original module. This completes the module splitting process.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/modules/develop/refactoring.mdx#2025-04-16_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n# module \"y\"\n\nresource \"aws_instance\" \"c\" {\n  # (other resource-type-specific configuration)\n}\n```\n\n----------------------------------------\n\nTITLE: Main Configuration for OpenTofu Module Testing (HCL)\nDESCRIPTION: Defines the main configuration file that uses a module and creates an S3 bucket based on the module's output. This file is the target of the test in main.tftest.hcl.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/test/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"bucket_meta\" {\n  source = \"./bucket_meta\"\n}\n\nresource \"aws_s3_bucket\" \"example\" {\n  bucket = module.bucket_meta.bucket_name\n}\n```\n\n----------------------------------------\n\nTITLE: Basic matchkeys Function Syntax in HCL\nDESCRIPTION: The basic syntax of the matchkeys function, which takes three parameters: valueslist (the source list for values), keyslist (the list to check against searchset), and searchset (the values to look for in keyslist).\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/matchkeys.mdx#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmatchkeys(valueslist, keyslist, searchset)\n```\n\n----------------------------------------\n\nTITLE: Listing All Resources in OpenTofu State\nDESCRIPTION: This example demonstrates how to use the 'tofu state list' command to list all resources in the OpenTofu state, including those in modules.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/list.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tofu state list\naws_instance.foo\naws_instance.bar[0]\naws_instance.bar[1]\nmodule.elb.aws_elb.main\n```\n\n----------------------------------------\n\nTITLE: Using Conditionals for Default Values in OpenTofu\nDESCRIPTION: Example of using a conditional expression to provide a default value when a variable is empty, which is a common pattern in OpenTofu configurations.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/conditionals.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvar.a != \"\" ? var.a : \"default-a\"\n```\n\n----------------------------------------\n\nTITLE: Inequality Operator in OpenTofu\nDESCRIPTION: Demonstrates the inequality operator that returns true if values are of different types or have different values.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/expressions/operators.mdx#2025-04-16_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\na != b\n```\n\n----------------------------------------\n\nTITLE: Simple String Template Example\nDESCRIPTION: Shows a basic example of using templatestring with a static string without any variables.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/functions/templatestring.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"result\" {\n  value = templatestring(\"Hello, Jodie!\", {})\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTofu Override Configuration Example\nDESCRIPTION: Example of an override file that modifies the AMI of the AWS instance defined in the main configuration.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/language/files/override.mdx#2025-04-16_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"aws_instance\" \"web\" {\n  ami = \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Provider Configuration in HCL\nDESCRIPTION: Simple provider and resource configuration example showing basic provider type usage.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/docs/provider-references.md#2025-04-16_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"aws\" {\n  region = \"us-east-1\"\n}\n\nresource \"aws_s3_bucket\" \"foo\" {\n  bucket_name = \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting a Single Resource to an Indexed Resource (Shell)\nDESCRIPTION: Shell command to move a single resource to an indexed resource format in OpenTofu state.\nSOURCE: https://github.com/opentofu/opentofu/blob/main/website/docs/cli/commands/state/mv.mdx#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ tofu state mv 'packet_device.main' 'packet_device.all[0]'\n```"
  }
]