[
  {
    "owner": "tidwall",
    "repo": "gjson",
    "content": "TITLE: Simple JSON Parsing with GJSON\nDESCRIPTION: Demonstrates different methods for parsing JSON and accessing nested values using dot notation\nSOURCE: https://github.com/tidwall/gjson/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngjson.Parse(json).Get(\"name\").Get(\"last\")\ngjson.Get(json, \"name\").Get(\"last\")\ngjson.Get(json, \"name.last\")\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Arrays with GJSON in Go\nDESCRIPTION: Demonstrates how to extract values from nested JSON arrays using path syntax and array filtering\nSOURCE: https://github.com/tidwall/gjson/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"programmers\": [\n    {\n      \"firstName\": \"Janet\", \n      \"lastName\": \"McLaughlin\", \n    }, {\n      \"firstName\": \"Elliotte\", \n      \"lastName\": \"Hunter\", \n    }, {\n      \"firstName\": \"Jason\", \n      \"lastName\": \"Harold\", \n    }\n  ]\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nresult := gjson.Get(json, \"programmers.#.lastName\")\nfor _, name := range result.Array() {\n\tprintln(name.String())\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nname := gjson.Get(json, `programmers.#(lastName=\"Hunter\").firstName`)\nprintln(name.String())  // prints \"Elliotte\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Through JSON Objects with GJSON\nDESCRIPTION: Shows how to iterate through JSON objects using the ForEach function, with the ability to process both keys and values\nSOURCE: https://github.com/tidwall/gjson/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nresult := gjson.Get(json, \"programmers\")\nresult.ForEach(func(key, value gjson.Result) bool {\n\tprintln(value.String()) \n\treturn true // keep iterating\n})\n```\n\n----------------------------------------\n\nTITLE: Basic GJSON Value Retrieval\nDESCRIPTION: Example demonstrating how to retrieve a JSON value using dot notation path syntax.\nSOURCE: https://github.com/tidwall/gjson/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"github.com/tidwall/gjson\"\n\nconst json = `{\"name\":{\"first\":\"Janet\",\"last\":\"Prichard\"},\"age\":47}`\n\nfunc main() {\n\tvalue := gjson.Get(json, \"name.last\")\n\tprintln(value.String())\n}\n```\n\n----------------------------------------\n\nTITLE: Unmarshaling JSON to Map with GJSON\nDESCRIPTION: Shows how to convert JSON to a Go map using GJSON's Parse and Value functions\nSOURCE: https://github.com/tidwall/gjson/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nm, ok := gjson.Parse(json).Value().(map[string]interface{})\nif !ok {\n\t// not a map\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Value Existence with GJSON\nDESCRIPTION: Shows how to verify if a JSON value exists before accessing it\nSOURCE: https://github.com/tidwall/gjson/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nvalue := gjson.Get(json, \"name.last\")\nif !value.Exists() {\n\tprintln(\"no last name\")\n} else {\n\tprintln(value.String())\n}\n\n// Or as one step\nif gjson.Get(json, \"name.last\").Exists() {\n\tprintln(\"has a last name\")\n}\n```\n\n----------------------------------------\n\nTITLE: Query Examples in Go\nDESCRIPTION: Examples of using query operators for filtering and matching array elements.\nSOURCE: https://github.com/tidwall/gjson/blob/master/SYNTAX.md#2025-04-23_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfriends.#(last==\"Murphy\").first     \"Dale\"\nfriends.#(last==\"Murphy\")#.first    [\"Dale\",\"Jane\"]\nfriends.#(age>45)#.last             [\"Craig\",\"Murphy\"]\nfriends.#(first%\"D*\").last          \"Murphy\"\nfriends.#(first!%\"D*\").last         \"Craig\"\n```\n\n----------------------------------------\n\nTITLE: Array Access Examples in Go\nDESCRIPTION: Examples of accessing array lengths and elements using the # operator.\nSOURCE: https://github.com/tidwall/gjson/blob/master/SYNTAX.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfriends.#              3\nfriends.#.age         [44,68,47]\n```\n\n----------------------------------------\n\nTITLE: JSON Validation with GJSON\nDESCRIPTION: Demonstrates how to validate JSON before processing it with GJSON\nSOURCE: https://github.com/tidwall/gjson/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nif !gjson.Valid(json) {\n\treturn errors.New(\"invalid json\")\n}\nvalue := gjson.Get(json, \"name.last\")\n```\n\n----------------------------------------\n\nTITLE: GJSON Multipath Query Example\nDESCRIPTION: Demonstrates how to use GJSON's multipath syntax to combine multiple path queries into a single object. The query extracts first name, age, and filters friends with last name 'Murphy' to get their first names.\nSOURCE: https://github.com/tidwall/gjson/blob/master/SYNTAX.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n{name.first,age,\"the_murphys\":friends.#(last=\"Murphy\")#.first}\n```\n\n----------------------------------------\n\nTITLE: Working with Byte Slices in GJSON\nDESCRIPTION: Demonstrates efficient handling of JSON byte slices and raw data access\nSOURCE: https://github.com/tidwall/gjson/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar json []byte = ...\nresult := gjson.GetBytes(json, path)\n```\n\nLANGUAGE: go\nCODE:\n```\nvar json []byte = ...\nresult := gjson.GetBytes(json, path)\nvar raw []byte\nif result.Index > 0 {\n    raw = json[result.Index:result.Index+len(result.Raw)]\n} else {\n    raw = []byte(result.Raw)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GJSON Path Examples in Go\nDESCRIPTION: Basic path navigation examples showing how to access object properties and array elements.\nSOURCE: https://github.com/tidwall/gjson/blob/master/SYNTAX.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nname.last              \"Anderson\"\nname.first             \"Tom\"\nage                    37\nchildren               [\"Sara\",\"Alex\",\"Jack\"]\nchildren.0             \"Sara\"\nchildren.1             \"Alex\"\nfriends.1              {\"first\": \"Roger\", \"last\": \"Craig\", \"age\": 68}\nfriends.1.first        \"Roger\"\n```\n\n----------------------------------------\n\nTITLE: Wildcard Path Examples in Go\nDESCRIPTION: Examples of using wildcard characters * and ? in GJSON paths.\nSOURCE: https://github.com/tidwall/gjson/blob/master/SYNTAX.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nchild*.2               \"Jack\"\nc?ildren.0             \"Sara\"\n```\n\n----------------------------------------\n\nTITLE: GJSON Path Syntax Example JSON\nDESCRIPTION: Sample JSON document showing various data structures that can be queried using GJSON path syntax.\nSOURCE: https://github.com/tidwall/gjson/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": {\"first\": \"Tom\", \"last\": \"Anderson\"},\n  \"age\":37,\n  \"children\": [\"Sara\",\"Alex\",\"Jack\"],\n  \"fav.movie\": \"Deer Hunter\",\n  \"friends\": [\n    {\"first\": \"Dale\", \"last\": \"Murphy\", \"age\": 44, \"nets\": [\"ig\", \"fb\", \"tw\"]},\n    {\"first\": \"Roger\", \"last\": \"Craig\", \"age\": 68, \"nets\": [\"fb\", \"tw\"]},\n    {\"first\": \"Jane\", \"last\": \"Murphy\", \"age\": 47, \"nets\": [\"ig\", \"tw\"]}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GJSON Literal Query Example\nDESCRIPTION: Demonstrates how to use GJSON's literal syntax to combine dynamic path queries with static JSON values. The query includes first name, age, and adds static company name and employment status.\nSOURCE: https://github.com/tidwall/gjson/blob/master/SYNTAX.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n{name.first,age,\"company\":!\"Happysoft\",\"employed\":!true}\n```\n\n----------------------------------------\n\nTITLE: JSON Sample Data Structure\nDESCRIPTION: Example JSON document used throughout the documentation to demonstrate GJSON Path queries.\nSOURCE: https://github.com/tidwall/gjson/blob/master/SYNTAX.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": {\"first\": \"Tom\", \"last\": \"Anderson\"},\n  \"age\":37,\n  \"children\": [\"Sara\",\"Alex\",\"Jack\"],\n  \"fav.movie\": \"Deer Hunter\",\n  \"friends\": [\n    {\"first\": \"Dale\", \"last\": \"Murphy\", \"age\": 44, \"nets\": [\"ig\", \"fb\", \"tw\"]},\n    {\"first\": \"Roger\", \"last\": \"Craig\", \"age\": 68, \"nets\": [\"fb\", \"tw\"]},\n    {\"first\": \"Jane\", \"last\": \"Murphy\", \"age\": 47, \"nets\": [\"ig\", \"tw\"]}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GJSON Multipath Query Result\nDESCRIPTION: Shows the JSON result of executing the multipath query, containing the extracted first name, age, and filtered friends list.\nSOURCE: https://github.com/tidwall/gjson/blob/master/SYNTAX.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"first\":\"Tom\",\"age\":37,\"the_murphys\":[\"Dale\",\"Jane\"]}\n```\n\n----------------------------------------\n\nTITLE: Escape Character Examples\nDESCRIPTION: Examples showing how to escape special characters in Go and Rust implementations.\nSOURCE: https://github.com/tidwall/gjson/blob/master/SYNTAX.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Go\nval := gjson.Get(json, \"fav\\\\.movie\")  // must escape the slash\nval := gjson.Get(json, `fav\\.movie`)   // no need to escape the slash\n```\n\nLANGUAGE: rust\nCODE:\n```\n// Rust\nlet val = gjson::get(json, \"fav\\\\.movie\")     // must escape the slash\nlet val = gjson::get(json, r#\"fav\\.movie\"#)   // no need to escape the slash\n```\n\n----------------------------------------\n\nTITLE: GJSON Literal Query Result\nDESCRIPTION: Shows the JSON result of executing the query with literals, containing both extracted and static values.\nSOURCE: https://github.com/tidwall/gjson/blob/master/SYNTAX.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\"first\":\"Tom\",\"age\":37,\"company\":\"Happysoft\",\"employed\":true}\n```\n\n----------------------------------------\n\nTITLE: Installing GJSON Package\nDESCRIPTION: Command to install the GJSON library using go get.\nSOURCE: https://github.com/tidwall/gjson/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ go get -u github.com/tidwall/gjson\n```"
  }
]