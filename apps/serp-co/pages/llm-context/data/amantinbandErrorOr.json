[
  {
    "owner": "amantinband",
    "repo": "error-or",
    "content": "TITLE: Basic Exception vs ErrorOr Comparison in C#\nDESCRIPTION: Demonstrates the difference between traditional exception handling and using ErrorOr<T> for error handling in a division operation.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic float Divide(int a, int b)\n{\n    if (b == 0)\n    {\n        throw new Exception(\"Cannot divide by zero\");\n    }\n\n    return a / b;\n}\n\ntry\n{\n    var result = Divide(4, 2);\n    Console.WriteLine(result * 2); // 4\n}\ncatch (Exception e)\n{\n    Console.WriteLine(e.Message);\n    return;\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic ErrorOr<float> Divide(int a, int b)\n{\n    if (b == 0)\n    {\n        return Error.Unexpected(description: \"Cannot divide by zero\");\n    }\n\n    return a / b;\n}\n\nvar result = Divide(4, 2);\n\nif (result.IsError)\n{\n    Console.WriteLine(result.FirstError.Description);\n    return;\n}\n\nConsole.WriteLine(result.Value * 2); // 4\n```\n\n----------------------------------------\n\nTITLE: Functional Error Handling with Then/Switch in C#\nDESCRIPTION: Shows how to use functional methods Then and Switch for more elegant error handling flow.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nDivide(4, 2)\n    .Then(val => val * 2)\n    .SwitchFirst(\n        onValue: Console.WriteLine, // 4\n        onFirstError: error => Console.WriteLine(error.Description));\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with ErrorOr in C#\nDESCRIPTION: Demonstrates how to use the ErrorOr<T> type to handle errors and access the list of errors that occurred.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<int> result = User.Create();\n\nif (result.IsError)\n{\n    result.Errors // contains the list of errors that occurred\n        .ForEach(error => Console.WriteLine(error.Description));\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Error Handling with User Creation in C#\nDESCRIPTION: Demonstrates handling multiple validation errors in a user creation scenario using ErrorOr.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class User(string _name)\n{\n    public static ErrorOr<User> Create(string name)\n    {\n        List<Error> errors = [];\n\n        if (name.Length < 2)\n        {\n            errors.Add(Error.Validation(description: \"Name is too short\"));\n        }\n\n        if (name.Length > 100)\n        {\n            errors.Add(Error.Validation(description: \"Name is too long\"));\n        }\n\n        if (string.IsNullOrWhiteSpace(name))\n        {\n            errors.Add(Error.Validation(description: \"Name cannot be empty or whitespace only\"));\n        }\n\n        if (errors.Count > 0)\n        {\n            return errors;\n        }\n\n        return new User(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidationBehavior with ErrorOr in C#\nDESCRIPTION: This code snippet demonstrates how to create a ValidationBehavior that integrates Mediator, FluentValidation, and ErrorOr. It validates requests before they reach the handler and returns errors using ErrorOr instead of throwing exceptions.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_29\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ValidationBehavior<TRequest, TResponse>(IValidator<TRequest>? validator = null)\n    : IPipelineBehavior<TRequest, TResponse>\n        where TRequest : IRequest<TResponse>\n        where TResponse : IErrorOr\n{\n    private readonly IValidator<TRequest>? _validator = validator;\n\n    public async Task<TResponse> Handle(\n        TRequest request,\n        RequestHandlerDelegate<TResponse> next,\n        CancellationToken cancellationToken)\n    {\n        if (_validator is null)\n        {\n            return await next();\n        }\n\n        var validationResult = await _validator.ValidateAsync(request, cancellationToken);\n\n        if (validationResult.IsValid)\n        {\n            return await next();\n        }\n\n        var errors = validationResult.Errors\n            .ConvertAll(error => Error.Validation(\n                code: error.PropertyName,\n                description: error.ErrorMessage));\n\n        return (dynamic)errors;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Errors in ErrorOr Library in C#\nDESCRIPTION: Demonstrates a recommended approach for organizing and using custom errors with the ErrorOr library.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\npublic static partial class DivisionErrors\n{\n    public static Error CannotDivideByZero = Error.Unexpected(\n        code: \"Division.CannotDivideByZero\",\n        description: \"Cannot divide by zero.\");\n}\n\npublic ErrorOr<float> Divide(int a, int b)\n{\n    if (b == 0)\n    {\n        return DivisionErrors.CannotDivideByZero;\n    }\n\n    return a / b;\n}\n```\n\n----------------------------------------\n\nTITLE: Mixing Features in ErrorOr Chains in C#\nDESCRIPTION: Shows how to combine various ErrorOr methods like Then, FailIf, Else, and MatchFirst in a single chain.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<string> foo = await result\n    .ThenDoAsync(val => Task.Delay(val))\n    .FailIf(val => val > 2, Error.Validation(description: $\"{val} is too big\"))\n    .ThenDo(val => Console.WriteLine($\"Finished waiting {val} seconds.\"))\n    .ThenAsync(val => Task.FromResult(val * 2))\n    .Then(val => $\"The result is {val}\")\n    .Else(errors => Error.Unexpected())\n    .MatchFirst(\n        value => value,\n        firstError => $\"An error occurred: {firstError.Description}\");\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Error Types in ErrorOr Library in C#\nDESCRIPTION: Demonstrates how to create and use custom error types with the ErrorOr library.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\npublic static class MyErrorTypes\n{\n    const int ShouldNeverHappen = 12;\n}\n\nvar error = Error.Custom(\n    type: MyErrorTypes.ShouldNeverHappen,\n    code: \"User.ShouldNeverHappen\",\n    description: \"A user error that should never happen\");\n\nvar errorMessage = Error.NumericType switch\n{\n    MyErrorType.ShouldNeverHappen => \"Consider replacing dev team\",\n    _ => \"An unknown error occurred.\",\n};\n```\n\n----------------------------------------\n\nTITLE: Built-in Error Types in ErrorOr Library in C#\nDESCRIPTION: Lists the built-in error types provided by the ErrorOr library and shows how to create errors of specific types.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum ErrorType\n{\n    Failure,\n    Unexpected,\n    Validation,\n    Conflict,\n    NotFound,\n    Unauthorized,\n    Forbidden,\n}\n\nvar error = Error.NotFound();\n\nvar customError = Error.Unexpected(\n    code: \"User.ShouldNeverHappen\",\n    description: \"A user error that should never happen\",\n    metadata: new Dictionary<string, object>\n    {\n        { \"user\", user },\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Result Types in ErrorOr Library in C#\nDESCRIPTION: Shows the usage of built-in result types like Success, Created, Updated, and Deleted in the ErrorOr library.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<Success> result = Result.Success;\nErrorOr<Created> result = Result.Created;\nErrorOr<Updated> result = Result.Updated;\nErrorOr<Deleted> result = Result.Deleted;\n\nErrorOr<Deleted> DeleteUser(Guid id)\n{\n    var user = await _userRepository.GetByIdAsync(id);\n    if (user is null)\n    {\n        return Error.NotFound(description: \"User not found.\");\n    }\n\n    await _userRepository.DeleteAsync(user);\n    return Result.Deleted;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Match Method with ErrorOr in C#\nDESCRIPTION: Shows how to use the Match method to handle both success and error cases in ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nstring foo = result.Match(\n    value => value,\n    errors => $\"{errors.Count} errors occurred.\");\n```\n\n----------------------------------------\n\nTITLE: Using MatchFirst Method with ErrorOr in C#\nDESCRIPTION: Shows how to use the MatchFirst method to handle success and the first error in ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nstring foo = result.MatchFirst(\n    value => value,\n    firstError => firstError.Description);\n```\n\n----------------------------------------\n\nTITLE: Using Switch Method with ErrorOr in C#\nDESCRIPTION: Shows how to use the Switch method to execute different actions based on success or error in ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nresult.Switch(\n    value => Console.WriteLine(value),\n    errors => Console.WriteLine($\"{errors.Count} errors occurred.\"));\n```\n\n----------------------------------------\n\nTITLE: Using SwitchFirst Method with ErrorOr in C#\nDESCRIPTION: Shows how to use the SwitchFirst method to handle success and the first error in ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nresult.SwitchFirst(\n    value => Console.WriteLine(value),\n    firstError => Console.WriteLine(firstError.Description));\n```\n\n----------------------------------------\n\nTITLE: Using Then Method with ErrorOr in C#\nDESCRIPTION: Shows how to use the Then method to chain operations on successful ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<int> foo = result\n    .Then(val => val * 2);\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Then Methods with ErrorOr in C#\nDESCRIPTION: Demonstrates how to chain multiple Then methods for sequential operations on ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<string> foo = result\n    .Then(val => val * 2)\n    .Then(val => $\"The result is {val}\");\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Then Method Chains with ErrorOr in C#\nDESCRIPTION: Shows how error handling works when chaining Then methods with ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<int> Foo() => Error.Unexpected();\n\nErrorOr<string> foo = result\n    .Then(val => val * 2)\n    .Then(_ => GetAnError())\n    .Then(val => $\"The result is {val}\") // this function will not be invoked\n    .Then(val => $\"The result is {val}\"); // this function will not be invoked\n```\n\n----------------------------------------\n\nTITLE: Using ThenDo and ThenDoAsync Methods with ErrorOr in C#\nDESCRIPTION: Shows how to use ThenDo and ThenDoAsync for executing actions in ErrorOr result chains.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<string> foo = result\n    .ThenDo(val => Console.WriteLine(val))\n    .ThenDo(val => Console.WriteLine($\"The result is {val}\"));\n```\n\n----------------------------------------\n\nTITLE: Mixing Then, ThenDo, ThenAsync, and ThenDoAsync Methods with ErrorOr in C#\nDESCRIPTION: Demonstrates how to combine different Then methods in a single ErrorOr result chain.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<string> foo = await result\n    .ThenDoAsync(val => Task.Delay(val))\n    .Then(val => val * 2)\n    .ThenAsync(val => DoSomethingAsync(val))\n    .ThenDo(val => Console.WriteLine($\"Finsihed waiting {val} seconds.\"))\n    .ThenAsync(val => Task.FromResult(val * 2))\n    .Then(val => $\"The result is {val}\");\n```\n\n----------------------------------------\n\nTITLE: Using FailIf Method with ErrorOr in C#\nDESCRIPTION: Shows how to use the FailIf method to conditionally return an error in ErrorOr result chains.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<int> foo = result\n    .FailIf(val => val > 2, Error.Validation(description: $\"{val} is too big\"));\n```\n\n----------------------------------------\n\nTITLE: Error Handling with FailIf in ErrorOr Chains in C#\nDESCRIPTION: Demonstrates how FailIf affects the execution of subsequent operations in ErrorOr result chains.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = \"2\".ToErrorOr()\n    .Then(int.Parse) // 2\n    .FailIf(val => val > 1, Error.Validation(description: $\"{val} is too big\") // validation error\n    .Then(num => num * 2) // this function will not be invoked\n    .Then(num => num * 2) // this function will not be invoked\n```\n\n----------------------------------------\n\nTITLE: Using Else Method with ErrorOr in C#\nDESCRIPTION: Shows how to use the Else method to provide fallback values or functions for ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<string> foo = result\n    .Else(\"fallback value\");\n\nErrorOr<string> bar = result\n    .Else(errors => $\"{errors.Count} errors occurred.\");\n```\n\n----------------------------------------\n\nTITLE: Accessing FirstError in ErrorOr Results in C#\nDESCRIPTION: Shows how to access the first error from an ErrorOr<T> result when errors occur.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<int> result = User.Create();\n\nif (result.IsError)\n{\n    var firstError = result.FirstError; // only the first error that occurred\n    Console.WriteLine(firstError == result.Errors[0]); // true\n}\n```\n\n----------------------------------------\n\nTITLE: Using ErrorsOrEmptyList in ErrorOr Results in C#\nDESCRIPTION: Demonstrates the use of ErrorsOrEmptyList property to get a list of errors or an empty list if no errors occurred.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<int> result = User.Create();\n\nif (result.IsError)\n{\n    result.ErrorsOrEmptyList // List<Error> { /* one or more errors */  }\n    return;\n}\n\nresult.ErrorsOrEmptyList // List<Error> { }\n```\n\n----------------------------------------\n\nTITLE: Using MatchAsync Method with ErrorOr in C#\nDESCRIPTION: Demonstrates the asynchronous version of the Match method for ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nstring foo = await result.MatchAsync(\n    value => Task.FromResult(value),\n    errors => Task.FromResult($\"{errors.Count} errors occurred.\"));\n```\n\n----------------------------------------\n\nTITLE: Using MatchFirstAsync Method with ErrorOr in C#\nDESCRIPTION: Demonstrates the asynchronous version of the MatchFirst method for ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nstring foo = await result.MatchFirstAsync(\n    value => Task.FromResult(value),\n    firstError => Task.FromResult(firstError.Description));\n```\n\n----------------------------------------\n\nTITLE: Using SwitchAsync Method with ErrorOr in C#\nDESCRIPTION: Demonstrates the asynchronous version of the Switch method for ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nawait result.SwitchAsync(\n    value => { Console.WriteLine(value); return Task.CompletedTask; },\n    errors => { Console.WriteLine($\"{errors.Count} errors occurred.\"); return Task.CompletedTask; });\n```\n\n----------------------------------------\n\nTITLE: Using SwitchFirstAsync Method with ErrorOr in C#\nDESCRIPTION: Demonstrates the asynchronous version of the SwitchFirst method for ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nawait result.SwitchFirstAsync(\n    value => { Console.WriteLine(value); return Task.CompletedTask; },\n    firstError => { Console.WriteLine(firstError.Description); return Task.CompletedTask; });\n```\n\n----------------------------------------\n\nTITLE: Using ThenAsync Method with ErrorOr in C#\nDESCRIPTION: Demonstrates the use of ThenAsync for asynchronous operations in ErrorOr result chains.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<string> foo = await result\n    .ThenAsync(val => DoSomethingAsync(val))\n    .ThenAsync(val => DoSomethingElseAsync($\"The result is {val}\"));\n```\n\n----------------------------------------\n\nTITLE: Using ElseAsync Method with ErrorOr in C#\nDESCRIPTION: Demonstrates the asynchronous version of the Else method for ErrorOr results.\nSOURCE: https://github.com/amantinband/error-or/blob/main/README.md#2025-04-17_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<string> foo = await result\n    .ElseAsync(Task.FromResult(\"fallback value\"));\n\nErrorOr<string> bar = await result\n    .ElseAsync(errors => Task.FromResult($\"{errors.Count} errors occurred.\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing FailIf Method in C#\nDESCRIPTION: Method signature for FailIf functionality that takes a predicate and error value to conditionally fail an ErrorOr instance.\nSOURCE: https://github.com/amantinband/error-or/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic ErrorOr<TValue> FailIf(Func<TValue, bool> onValue, Error error)\n```\n\n----------------------------------------\n\nTITLE: Using FailIf Method Example\nDESCRIPTION: Example usage of the FailIf method showing how to conditionally fail an ErrorOr instance when a value meets certain criteria.\nSOURCE: https://github.com/amantinband/error-or/blob/main/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nErrorOr<int> errorOr = 1;\nerrorOr.FailIf(x => x > 0, Error.Failure());\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Then to ThenDo Rename\nDESCRIPTION: Breaking change showing the renaming of the Then method to ThenDo for action-based operations.\nSOURCE: https://github.com/amantinband/error-or/blob/main/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n-public ErrorOr<TValue> Then(Action<TValue> action)\n+public ErrorOr<TValue> ThenDo(Action<TValue> action)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Async Then to ThenDo Rename\nDESCRIPTION: Breaking change showing the renaming of the async Then method to ThenDo for task-based operations.\nSOURCE: https://github.com/amantinband/error-or/blob/main/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n-public static async Task<ErrorOr<TValue>> Then<TValue>(this Task<ErrorOr<TValue>> errorOr, Action<TValue> action)\n+public static async Task<ErrorOr<TValue>> ThenDo<TValue>(this Task<ErrorOr<TValue>> errorOr, Action<TValue> action)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: ThenAsync to ThenDoAsync Rename\nDESCRIPTION: Breaking change showing the renaming of the ThenAsync method to ThenDoAsync for async operations.\nSOURCE: https://github.com/amantinband/error-or/blob/main/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n-public async Task<ErrorOr<TValue>> ThenAsync(Func<TValue, Task> action)\n+public async Task<ErrorOr<TValue>> ThenDoAsync(Func<TValue, Task> action)\n```\n\n----------------------------------------\n\nTITLE: Breaking Change: Task ThenAsync to ThenDoAsync Rename\nDESCRIPTION: Breaking change showing the renaming of the task-based ThenAsync method to ThenDoAsync for async operations.\nSOURCE: https://github.com/amantinband/error-or/blob/main/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n-public static async Task<ErrorOr<TValue>> ThenAsync<TValue>(this Task<ErrorOr<TValue>> errorOr, Func<TValue, Task> action)\n+public static async Task<ErrorOr<TValue>> ThenDoAsync<TValue>(this Task<ErrorOr<TValue>> errorOr, Func<TValue, Task> action)\n```"
  }
]