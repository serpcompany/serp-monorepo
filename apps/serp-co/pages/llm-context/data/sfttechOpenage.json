[
  {
    "owner": "sfttech",
    "repo": "openage",
    "content": "TITLE: Defining Selectable Ability in Python\nDESCRIPTION: Enables a game entity to be selectable by players. Requires a SelectionBox object to define the selectable area.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nSelectable(Ability):\n    selection_box : SelectionBox\n```\n\n----------------------------------------\n\nTITLE: Fixing Previous Commits with Fixup and Autosquash\nDESCRIPTION: Workflow for making changes to previous commits using Git's fixup and autosquash features. This is useful for addressing review comments that relate to earlier commits.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/contributing.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# edit stuff you wanna change in some previous commit\ngit add changed_stuff\ngit commit --fixup $hash_of_commit_to_be_fixed\ngit rebase --autosquash -i -m upstream/master\n```\n\n----------------------------------------\n\nTITLE: Calculating Spearman vs Cataphract Damage in Age of Empires\nDESCRIPTION: This code snippet shows the damage calculation for a spearman attacking a cataphract, taking into account multiple attack and defense classes with their respective values.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/damage.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\ndamage =   max(0, spearman_melee_damage - cataphract_melee_armor)\n         + max(0, spearman_pierce_damage - cataphract_pierce_armor)\n         + max(0, spearman_cavalry_damage - cataphract_cavalry_armor)\n\n       = max(0, 3 - 2) + max(0, 0 - 1) + max(0, 15 - 12) = 4\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Game Simulation Loop\nDESCRIPTION: Initiates the game simulation loop using the run() method of the GameSimulation object. This method should be executed in its own thread without other looping subsystems present.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/game_simulation/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThe game simulation loop is started using the `run()` method of the `GameSimulation` object.\n`run()` should be run in its own thread with no other looping subsystems present.\n```\n\n----------------------------------------\n\nTITLE: Creating and Passing Python Objects to C++\nDESCRIPTION: Shows how to create Python objects, wrap them for C++ use, create C++ objects, and call C++ functions from Cython with these objects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_7\n\nLANGUAGE: Cython\nCODE:\n```\nfrom libopenage.pyinterface.pyobject cimport PyObj\nfrom libopenage.main cimport demo_struct, cpp_function\n\nclass TestClass:\n    def __init__(self):\n        self.some_member = \"rofl\"\n\n    def py_func(self, arg0, arg1):\n        return \"test: 0={} 1={} 2={}\".format(self.some_member, arg0, arg1)\n\ndef entry():\n    # create the object and deliver it to c++\n    test_obj = TestClass()\n\n    # python object wrapping for c++\n    cdef PyObj pyobj_wrapped = PyObj(<PyObject*> some_object)\n\n    # create a c++ object\n    cdef demo_struct cppobj\n    cppobj.obj = pyobj_wrapped\n    cppobj.text = \"behold the automatic type conversion!\"\n\n    # call to c++\n    cpp_function(cpp_obj, 1337)\n```\n\n----------------------------------------\n\nTITLE: Tech Implementation for Game Upgrades\nDESCRIPTION: Defines the Tech class for implementing technologies/upgrades that can apply patches to change game state. Includes metadata and a collection of updates that modify the game when researched.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_161\n\nLANGUAGE: python\nCODE:\n```\nTech(Object):\n    types            : set(children(TechType))\n    name             : TranslatedString\n    description      : TranslatedMarkupFile\n    long_description : TranslatedMarkupFile\n    updates          : orderedset(Patch)\n```\n\n----------------------------------------\n\nTITLE: Defining Base Ability Class in Python\nDESCRIPTION: Defines the base Ability class that serves as a generalization object for all abilities in the game engine. Abilities can have properties that further specialize their behavior.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAbility(Object):\n    properties : dict(abstract(AbilityProperty), AbilityProperty) = {}\n```\n\n----------------------------------------\n\nTITLE: Current Architecture Workflow in openage\nDESCRIPTION: Describes the main loop workflow of the current openage architecture, showing how data flows between subsystems through the engine execution cycle.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/architecture.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrenderer (window system) -> input -> event system -> simulation -> renderer -> output\n```\n\n----------------------------------------\n\nTITLE: Defining Accuracy Class in Python\nDESCRIPTION: Class for storing projectile accuracy calculation information including accuracy values, dispersion settings, target types and blacklisted entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAccuracy(Object):\n    accuracy             : float\n    accuracy_dispersion  : float\n    dispersion_dropoff   : DropOffType\n    target_types         : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Running the openage Application\nDESCRIPTION: This command demonstrates how to navigate to the bin directory and execute the main openage application after building.\nSOURCE: https://github.com/sfttech/openage/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncd bin && ./run main\n```\n\n----------------------------------------\n\nTITLE: Creating Shader Sources in C++\nDESCRIPTION: Demonstrates how to load shader source code from either a string or a file path. The example shows creation of both vertex and fragment shaders with GLSL.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nresources::ShaderSource vshader_src = resources::ShaderSource(\n    resources::shader_lang_t::glsl,\n    resources::shader_stage_t::vertex,\n    \"#version 330\\nvoid main() {}\"\n);\n\nutil::Path shader_path = root_dir / \"assets\" / \"shaders\";\nresources::ShaderSource fshader_src = resources::ShaderSource(\n    resources::shader_lang_t::glsl,\n    resources::shader_stage_t::fragment,\n    shader_path / \"source.frag\"\n);\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Git Repository for openage Contribution\nDESCRIPTION: Commands for forking, cloning the openage repository, and setting up the proper Git remotes for contribution. This establishes the foundation for the contribution workflow.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:YourAccount/openage.git\ncd openage\ngit remote add upstream https://github.com/SFTtech/openage.git\ngit checkout -b tentacle-monster-fix\n```\n\n----------------------------------------\n\nTITLE: Creating a Render Pass in C++\nDESCRIPTION: Creates a render pass for rendering multiple objects to a display target. This example uses the default display target from the renderer which is the application window.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nstd::shared_ptr<RenderPass> pass =  renderer->add_render_pass({ obj }, renderer->get_display_target())\n```\n\n----------------------------------------\n\nTITLE: Creating a Shader Program in C++\nDESCRIPTION: Adds a shader program to the renderer by combining vertex and fragment shader sources. The shader program encapsulates all shader units that run in one iteration of the graphics pipeline.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nstd::shared_ptr<ShaderProgram> shader_prog = renderer->add_shader( { vshader_src, fshader_src } );\n```\n\n----------------------------------------\n\nTITLE: Defining Named Ability in Python\nDESCRIPTION: Defines the Named ability for a game entity, assigning a translatable name and descriptions to the entity.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nNamed(Ability):\n    name             : TranslatedString\n    description      : TranslatedMarkupFile\n    long_description : TranslatedMarkupFile\n```\n\n----------------------------------------\n\nTITLE: Implementing C++ Test Functions with Error Handling\nDESCRIPTION: Example of a C++ test function that verifies prime number detection. The function uses the TESTFAIL macro to throw TestError when conditions are not met.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid test_prime() {\n    is_prime(23) or TESTFAIL;\n    is_prime(42) and TESTFAIL;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Geometry Buffer for a Quad in C++\nDESCRIPTION: Creates a simple quad geometry that spans the entire viewport. This bufferless quad is suitable for drawing rectangular objects like sprites.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nstd::shared_ptr<Geometry> geom = renderer->add_bufferless_quad();\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceSpot Class in Python\nDESCRIPTION: Represents a gatherable resource spot with a specific capacity and decay rate. Used with the Harvestable ability for resource collection gameplay.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_145\n\nLANGUAGE: python\nCODE:\n```\nResourceSpot(Object):\n    resource        : Resource\n    max_amount      : int\n    starting_amount : int\n    decay_rate      : float\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Texture Targets for Render Passes in C++\nDESCRIPTION: Shows how to set up multiple texture targets for a render pass, including depth and custom textures. This allows for more complex rendering scenarios and data output from shaders.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nstd::shared_ptr<Texture2d> depth_texture = renderer->add_texture(\n  resources::Texture2dInfo(\n    1024,\n    768,\n    resources::pixel_format::depth24 // 24 Bit depth values\n  )\n);\nstd::shared_ptr<Texture2d> id_texture = renderer->add_texture(\n  resources::Texture2dInfo(\n    1024,\n    768,\n    resources::pixel_format::r32ui // unsigned integer\n  )\n);\nstd::shared_ptr<RenderTarget> target = renderer->create_texture_target({color_texture, depth_texture, id_texture});\nstd::shared_ptr<RenderPass> pass = renderer->add_render_pass({ obj }, target);\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Ability in Python\nDESCRIPTION: Enables entities to spawn new game entities with configurable creation options.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nCreate(Ability):\n    creatables : set(CreatableGameEntity)\n```\n\n----------------------------------------\n\nTITLE: Basic Git Workflow for openage Contribution\nDESCRIPTION: Essential Git commands for making changes, committing them, testing, and pushing to create a pull request. These commands represent the typical workflow for contributing to the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add libopenage/unit/tentacle_monster.cpp\ngit commit -m \"engine: fixed vomiting animation of tentacle monster\"\nmake checkmerge\nmake test\ngit push origin tentacle-monster-fix\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Stealth and Detection Rules\nDESCRIPTION: Comprehensive documentation of the stealth and detection system in SWGB, including basic mechanics, UI interactions, modifiers, and unit listings. Also includes references to game documentation and video examples.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/swgb/stealth.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Stealth and detection mechanics in SWGB\n\n## Intro\n\nA few units have a \"stealth\" ability.\nThis feature is unique to the SWGB franchise among games that run on the Genie\nEngine. Unfortunately, it is somewhat underutilized in the game.\n\nA lot more units have the \"detection\" ability, and can detect stealthed units\nwithin their line of sight.\n\n## Mechanism\n\nA stealthed unit cannot be seen by the enemy.\n\nA Detector enemy can reveal stealth units within its line of sight.\n\n## User interface\n\nThese capabilities are displayed in the [game UI](user-interface.md#cap) by\nlighting up the corresponding indicator when the unit is selected.\n\nA stealthed unit will lose the stealth indicator when it becomes unconcealed\n([reference video](https://youtu.be/S-SL-G7KMuE?t=2256)).\n\n### Modifiers\n\nA stealthed unit is unconcealed when it either:\n\n* Attacks\n* Enters the line of sight of a detector unit\n\n## Applicable Units\n\n([Source](https://swgb.fandom.com/wiki/Stealth/Detection))\n\n### Stealth\n\n#### Always active\n\n* Frigate (Gungans)\n* Underwater Prefab Shelter (Gungans)\n\n#### Available trough the *Jedi Mind Trick* technology\n\n* Jedi/Sith Master (Rebel Alliance, Royal Naboo and Republic)\n* Jedi Starfighter (Republic)\n\n### Detection\n\n#### Always active\n\n* Scout\n* Bounty Hunter\n* Sentry Post\n* Sensor Buoy\n* Dark Trooper (Galactic Empire)\n* Probot (Galactic Empire)\n* Airspeeder (Rebel Alliance)\n* Royal Crusader (Royal Naboo)\n\n#### Available trough the *Jedi/Sith Perception* technology\n\n* Jedi/Sith Knight\n* Jedi/Sith Master\n\n## Future research\n\nDo detector units unconceal an enemy unit for every player, or only for\nthemselves? How does this affect the indicator?\n```\n\n----------------------------------------\n\nTITLE: Implementing DropSite Ability in Python\nDESCRIPTION: Defines a location where resources can be deposited into player's global storage.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nDropSite(Ability):\n    accepts_from : set(ResourceContainer)\n```\n\n----------------------------------------\n\nTITLE: Defining Root Object Class in Python for openage Modding API\nDESCRIPTION: Defines the Object class, which serves as the root object for the openage modding API. All other objects in the API inherit from this class, either explicitly or implicitly. The class is currently empty and serves as a base for inheritance.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_root.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nObject():\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Game Class in C++\nDESCRIPTION: Defines a Game class with methods to retrieve game state information, check build and research possibilities, and access units and players.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/ai.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nclass Game {\n\tPlayer[] allies();      // all the ally players that have not left or been defeated.\n\tbool     can_build_at(Unit builder, TilePosition position, UnitType type);\n\tbool     can_create(Unit builder, UnitType type);\n\tbool     can_research(Unit unit, TechType type);\n\tbool     can_upgrade(Unit unit, UpgradeType type);\n\tPlayer[] enemies();     // all the enemy players that have not left or been defeated.\n\tUnit[]   get_all_units(); // returns all the visible units.\n\n\t// many more examples at: http://bwmirror.jurenka.sk/javadoc/bwapi/Game.html\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing 32BC44 Packet Structure in Ruby - Communication Turn Synchronization\nDESCRIPTION: Defines the structure of a 32BC44 packet sent every 120ms to synchronize communication turns between players. It includes connection status fields, ping measurements, and communication turn offset for detecting and resolving de-synchronization.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/03-sync.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef 32BC44\n  byte20 :header\n  int8 :command2\n  int8 :unknown1\n  int8 :unknown2\n  int8 :unknown3\n  int32 :communication_turn_offset\n  int8 :ping1\n  int8 :ping2\n  int8 :unknown4\n  int8 :unknown5\nend\n```\n\n----------------------------------------\n\nTITLE: ExpectedPosition Target Mode for Predictive Targeting\nDESCRIPTION: Defines a targeting mode where projectiles aim at the predicted future position of a moving target, attempting to intercept it.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_159\n\nLANGUAGE: python\nCODE:\n```\nExpectedPosition(TargetMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Language Class in Python for openage\nDESCRIPTION: Represents a language definition used for translated strings, markup files, and sounds. It uses an IETF identification tag.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nLanguage(Object):\n    ietf_string : text\n```\n\n----------------------------------------\n\nTITLE: Calculating Attack Damage in Age of Empires\nDESCRIPTION: This formula calculates the damage dealt in combat, taking into account melee and pierce damage, armor, attack bonuses, elevation, and stray projectiles. It's used in both Age of Empires 1 and 2.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/damage.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\ndamage = max(1, ((max(0, melee_damage - melee_armor)\n                + max(0, pierce_damage - pierce_armor)\n                + sum(max(0, attack_bonus - attack_resist)))\n                * elevation_factor) * stray_factor)\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructable Ability in Python\nDESCRIPTION: Makes entities constructable with defined progress tracking and intervals.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nConstructable(Ability):\n    starting_progress     : int\n    construction_progress : set(Progress)\n```\n\n----------------------------------------\n\nTITLE: Forwarding Member Function Call in GameMainLink C++ Class\nDESCRIPTION: Shows how to safely forward a member function call from a GUI Link class to its corresponding game logic class, considering potential thread safety issues.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/gui.md#2025-04-21_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nvoid GameMainLink::clear() {\n\tstatic auto f = [] (GameMain *_this) {\n\t\t_this->clear();\n\t};\n\tthis->i(f, this);\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed-Width Integer Types in C++\nDESCRIPTION: Integer types with explicit bit width specification, used when precise integer size control is required.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code_style/inttypes.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n(u)intXX_t\n```\n\n----------------------------------------\n\nTITLE: Implementing ExchangeResources Ability in Python\nDESCRIPTION: Enables resource trading between players with configurable exchange rates and modes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nExchangeResources(Ability):\n    resource_a     : Resource\n    resource_b     : Resource\n    exchange_rate  : ExchangeRate\n    exchange_modes : set(ExchangeMode)\n```\n\n----------------------------------------\n\nTITLE: Using Error Class with Exception Handling in C++\nDESCRIPTION: Demonstrates how to use the error::Error class in openage, including proper exception handling with nested try-catch blocks. Shows stack trace collection and message formatting capabilities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/exceptions.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"error/error.h\"\n\ntry {\n    int i = 5;\n\n     try {\n        if (true) {\n            throw Error(MSG(err) << \"what an exceptional line of code!\", true);\n        }\n        i = 6;\n    } catch (...) {\n        throw Error(MSG(crit).fmt(\"exception in the 'try' block. i=%d\", i));\n    }\n\n} catch (Error &e) {\n    std::cout << e << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subsequent Render Passes with Texture Input in C++\nDESCRIPTION: Demonstrates how to use the output texture from a previous render pass as input for a subsequent pass, enabling advanced rendering techniques like post-processing.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nstd::shared_ptr<UniformInput> input2 = shader_prog->new_uniform_input(\n  \"tex\", texture\n);\nRenderable obj2{input2, geom};\nstd::shared_ptr<RenderPass> pass2 = renderer->add_render_pass({ obj2 }, renderer->get_display_target());\n```\n\n----------------------------------------\n\nTITLE: Building openage with Configure and Make\nDESCRIPTION: This code snippet shows the basic commands to configure and build the openage project, including downloading the required nyan dependency.\nSOURCE: https://github.com/sfttech/openage/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n./configure --download-nyan\nmake\n```\n\n----------------------------------------\n\nTITLE: Executing Rendering Operations in C++\nDESCRIPTION: Executes the rendering pipeline for all objects in a render pass. This processes all renderables through their shader programs and renders them to the target.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nrenderer->render(pass);\n```\n\n----------------------------------------\n\nTITLE: Defining Base Resistance Class\nDESCRIPTION: Base class for all resistance types, containing customizable properties for specialized behavior.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nResistance(Object):\n    properties : dict(abstract(ResistanceProperty), ResistanceProperty) = {}\n```\n\n----------------------------------------\n\nTITLE: Defining RandomVariant in Python\nDESCRIPTION: A variant type where one is picked at random from all variants of this type. Uses a relative chance share system rather than absolute percentages to determine selection probability.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_175\n\nLANGUAGE: python\nCODE:\n```\nRandomVariant(Variant):\n    chance_share : float\n```\n\n----------------------------------------\n\nTITLE: Binding Uniform Buffer to Shader Block in C++\nDESCRIPTION: Shows how to bind a uniform buffer to a shader's uniform block, enabling the GPU to fetch data from the buffer during shader execution.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_23\n\nLANGUAGE: c++\nCODE:\n```\nshader_prog->bind_uniform_buffer(\"unif_block\", buffer);\n```\n\n----------------------------------------\n\nTITLE: Cython Wrapper Implementation\nDESCRIPTION: Cython code that wraps the Python function and provides setup functionality for C++ integration.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_11\n\nLANGUAGE: cython\nCODE:\n```\nfrom libopenage.foo cimport bar as c_bar\n\nfrom .bar import bar as py_bar\n\ncdef float bar(int arg0, string arg1) except * with gil:\n    return py_bar(arg0, <str> arg1)\n\ndef setup():\n    c_bar.bind0(bar)\n```\n\n----------------------------------------\n\nTITLE: Defining PerspectiveVariant in Python\nDESCRIPTION: A variant type that depends on the placement angle of the game entity. Currently only works with the PlacementMode of type Place when rotation is allowed.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_176\n\nLANGUAGE: python\nCODE:\n```\nPerspectiveVariant(Variant):\n    angle : int\n```\n\n----------------------------------------\n\nTITLE: Defining GameEntityStance Class in Python for openage\nDESCRIPTION: Represents activity stances for the GameEntityStance ability, including search range, ability preferences, and type preferences for targeting.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nGameEntityStance(Object):\n    search_range       : float\n    ability_preference : orderedset(Ability)\n    type_preference    : orderedset(children(GameEntityType))\n```\n\n----------------------------------------\n\nTITLE: Event Loop Time Execution Condition in OpenAge\nDESCRIPTION: Demonstrates the time condition for executing events in the event loop. Events are executed if their scheduled invoke time is between the last execution time and the current simulation time.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/event_system.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nt_old < t_e <= t_cur\n```\n\n----------------------------------------\n\nTITLE: Adding Renderables to a Render Pass in C++\nDESCRIPTION: Updates an existing render pass with new renderables. Render passes can be updated dynamically to change what objects are rendered.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\npass->add_renderables({ obj });\n```\n\n----------------------------------------\n\nTITLE: Implementing ExitContainer Ability in Python\nDESCRIPTION: Allows entities to leave specified storage containers.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nExitContainer(Ability):\n    allowed_containers : set(EntityContainer)\n```\n\n----------------------------------------\n\nTITLE: Creating Python Test Functions with Assertion Utilities\nDESCRIPTION: Example Python test function that tests prime number detection. It uses assert_value for equality checks and assert_raises as a context manager to verify exception handling.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_prime():\n    assert_value(is_prime(23), True)\n    assert_value(is_prime(42), False)\n\n    with assert_raises(ValueError):\n        result(is_prime(-1337))\n```\n\n----------------------------------------\n\nTITLE: Creating Camera Frustums in C++\nDESCRIPTION: Demonstrates how to create 2D and 3D frustums from a camera object for visibility culling operations. These frustums are used to determine which objects should be rendered based on whether they are within the camera's view.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level2.md#2025-04-21_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nstd::shared_ptr<Camera> camera = std::make_shared<Camera>(renderer, {800, 600});\n\nFrustum2d frustum_2d = camera->get_frustum_2d();\nFrustum3d frustum_3d = camera->get_frustum_3d();\n```\n\n----------------------------------------\n\nTITLE: Running OpenAge in Specific Modes\nDESCRIPTION: These commands demonstrate how to run openage in various modes including game, main, test, convert, convert-file, convert-export-api, and codegen.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/running.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbin/run game\nbin/run main\nbin/run test\nbin/run convert\nbin/run convert-file\nbin/run convert-export-api\nbin/run codegen\n```\n\n----------------------------------------\n\nTITLE: Defining Research Attribute Cost Modifier in Python\nDESCRIPTION: This snippet defines the 'ResearchAttributeCost' modifier, which adjusts the cost of attributes in researchable techs, allowing for dynamic balancing of game mechanics related to technology advancement.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nResearchAttributeCost(Modifier):\n    attributes    : set(Attribute)\n    researchables : set(CreatableGameEntity)\n```\n\n----------------------------------------\n\nTITLE: Building Openage using CMake\nDESCRIPTION: This snippet shows the commands to build Openage using CMake, including creating a build directory, configuring the project, and compiling the code.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/editor/tech.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmkdir build && cd build\ncmake ..\nmake -j$(nproc)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiplier Property for Modifiers in Python\nDESCRIPTION: Defines the Multiplier property class that applies a multiplication factor to ability values.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMultiplier(ModifierProperty):\n    multiplier : float\n```\n\n----------------------------------------\n\nTITLE: Implementing Indexed Rendering for Complex Geometry in C++\nDESCRIPTION: Shows how to set up indexed rendering for complex geometry, which is useful for optimizing dense 3D meshes by reusing vertex data and defining draw order with an index buffer.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\nstd::array<uint16_t, 16> idxs { 0, 1, 2, 1, 3, 4, 1 };\n\nresources::VertexInputInfo info{\n  { resources::vertex_input_t::V2F32, resources::vertex_input_t::V2F32 },\n  resources::vertex_layout_t::AOS,\n  resources::vertex_primitive_t::TRIANGLES,\n  resources::index_t::U16                   // index size -> 16 Bit unsigned integer\n};\n\nauto const idx_data_size = idxs.size() * sizeof(uint16_t);\nstd::vector<uint8_t> idx_data(idx_data_size);\nstd::memcpy(idx_data.data(), reinterpret_cast<const uint8_t *>(idxs.data()), idx_data_size);\n\nresources::MeshData mesh{ std::move(vert_data), std::move(idx_data), info };\n```\n\n----------------------------------------\n\nTITLE: Defining Regenerate Attribute in Python\nDESCRIPTION: Describes the RegenerateAttribute ability for a game entity, allowing regeneration of an attribute at a specified rate. Requires AttributeRate object to define the rate of regeneration, and must be part of the Live ability.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nRegenerateAttribute(Ability):\n    rate : AttributeRate\n```\n\n----------------------------------------\n\nTITLE: Defining Research Ability in Python\nDESCRIPTION: Enables a game entity to research a Tech object, where initiating research locks the technology for other entities unless cancelled. Dependencies include a set of ResearchableTech objects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nResearch(Ability):\n    researchables : set(ResearchableTech)\n```\n\n----------------------------------------\n\nTITLE: Time Progress Increase Effect Implementation in Python\nDESCRIPTION: Specialization class for increasing time-relative progress of a resistor over time relative to 100%.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nTimeRelativeProgressIncrease(TimeRelativeProgressChange):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining LogicElement Class in Python for openage\nDESCRIPTION: Generalization object for logical elements (literals, gates, or constants) in the API, which can be either true or false at a given point in time.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nLogicElement(LogicElement):\n    only_once : bool\n```\n\n----------------------------------------\n\nTITLE: Checking 2D Object Visibility with Frustum Culling\nDESCRIPTION: Demonstrates how to check if a 2D object (like a sprite animation) is visible within the camera's 2D frustum. This requires additional parameters including model matrix, scale factor, and bounding box dimensions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level2.md#2025-04-21_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nbool is_visible = frustum_2d.is_visible(\n  {0.f, 0.f, 0.f},\n  model_matrix, // the model matrix of the animation\n  scalefactor, // how much the animation is scaled\n  {10, 20, 50, 10} // max distance from the center to the edges of the bounding box\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring C++ Functions in Cython PXD Files\nDESCRIPTION: Demonstrates how to declare C++ functions in .pxd files for use in Cython, and how to import and use them in .pyx files.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_2\n\nLANGUAGE: Cython\nCODE:\n```\ncdef extern from \"<stdlib.h>\":\n    int atoi(const char *s)\n```\n\nLANGUAGE: Cython\nCODE:\n```\nfrom foo cimport atoi as c_atoi\n\ndef atoi(s):\n    # invokes the c implementation according to the\n    # interface defined in a .pxd file\n    return c_atoi(s)\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Class in Python\nDESCRIPTION: Defines a resource type that can be used in the game. It specifies the resource name and maximum storage capacity in the player's global resource storage.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_141\n\nLANGUAGE: python\nCODE:\n```\nResource(Object):\n    name        : TranslatedString\n    max_storage : int\n```\n\n----------------------------------------\n\nTITLE: Defining Garrison Action Struct in C\nDESCRIPTION: Defines a C struct for the garrison action (75). It includes action identifier, selection count, building ID, garrison type, coordinates, constant value, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_26\n\nLANGUAGE: c\nCODE:\n```\nstruct garrison {\n  uint8_t action_identifier;\n  uint8_t selection_count;\n  uint32_t building_id;\n  uint8_t garrison_type;\n  float x_coord;\n  float y_coord;\n  uint32_t constant; // = 0xFFFFFFFF\n  uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Gather Ability in Python\nDESCRIPTION: Enables resource collection from spots with automatic resumption and container storage.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nGather(Ability):\n    auto_resume         : bool\n    resume_search_range : float\n    targets             : set(ResourceSpot)\n    gather_rate         : ResourceRate\n    container           : ResourceContainer\n```\n\n----------------------------------------\n\nTITLE: Configuring openage with Custom Compiler Hint for macOS\nDESCRIPTION: Command for configuring the openage build system on macOS with specific compiler locations. This example shows how to set environment variables for compiler paths when using a custom LLVM installation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/building.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCC=/path/to/downloaded-llvm/bin/clang CXX=/path/to/downloaded-llvm/bin/clang++ LD=/path/to/downloaded-llvm/bin/ld64.lld ./configure --download-nyan\n```\n\n----------------------------------------\n\nTITLE: Implementing Stacked Property for Resistance\nDESCRIPTION: Property class that configures how multiple simultaneous effects are calculated.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nStacked(ResistanceProperty):\n    stack_limit       : int\n    calculation_type  : CalculationType\n    distribution_type : DistributionType\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Uniform IDs in C++\nDESCRIPTION: Demonstrates using numeric uniform IDs for faster uniform addressing. This avoids string lookups by using IDs assigned at load time, which is useful for frequently updated uniforms.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nuniform_id_t color_id = shader_prog->get_uniform_id(\"color\");\nuniform_id_t time_id = shader_prog->get_uniform_id(\"time\");\nuniform_id_t num_id = shader_prog->get_uniform_id(\"num\");\nstd::shared_ptr<UniformInput> input = shader_prog->new_uniform_input(\n  color_id, Eigen::Vector3f{ 0.0f, 1.0f, 0.0f },\n  time_id, 0.0f,\n  num_id, 1337\n);\n```\n\n----------------------------------------\n\nTITLE: Defining FilterMaps Data Structure in C++\nDESCRIPTION: This C++ struct defines the structure of the FilterMaps.dat file. It contains 17 filter_map structures, each representing a rhombus tile with pixel data. The structure includes nested loops for reading various 'crap' data, which is likely used in graphics rendering.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/filtermaps-dat.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct filter_maps {\n\n\tstruct filter_map {\n\n\t\tlong header_length;                // number of bytes to read this filter map\n\t\tlong tile_size_y;                  // seems to be 49, 25, or 73\n\n\t\twhile (tile_size_y--) {\n\t\t\tuint8 crap1;                   // read 1 byte\n\t\t\tint remaining = crap1 & 0xFF;  // bitwise for reading more crap\n\t\t\tdo {\n\t\t\t\tuint16 crap2;              // read 2 bytes\n\t\t\t\tint check2 = crap2 & 0x0F; // bitwise for reading further crap\n\t\t\t\tdo {\n\t\t\t\t\tuint24 crap3;          // read 3 bytes\n\t\t\t\t\t// some of this crap is then loaded into the graphics rendering\n\t\t\t\t\tcheck2--;\n\t\t\t\t} while (check2);\n\t\t\t\tcheck1--;\n\t\t\t} while (check1);\n\t\t}\n\t}\n}[17];\n```\n\n----------------------------------------\n\nTITLE: StorageElementDefinition for Configuring Stored Item Effects\nDESCRIPTION: Defines how stored game entities influence their container entity, including stacking rules, conflicts with other stored items, and state changes applied to the container when this item is stored.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_156\n\nLANGUAGE: python\nCODE:\n```\nStorageElementDefinition(Object):\n    storage_element   : GameEntity\n    elements_per_slot : int\n    conflicts         : set(StorageElementDefinition)\n    state_change      : StateChanger\n```\n\n----------------------------------------\n\nTITLE: Implementing State Change Progress Property in Python\nDESCRIPTION: Handles state modifications during progress intervals.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_129\n\nLANGUAGE: python\nCODE:\n```\nStateChange(ProgressProperty):\n    state_change : StateChanger\n```\n\n----------------------------------------\n\nTITLE: Implementing Cheat System in Python\nDESCRIPTION: Defines a cheat system with activation messages and gameplay changes. Includes support for advanced cheating behavior through scripts.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nCheat(Object):\n    activation_message : text\n    changes            : orderedset(Patch)\n```\n\n----------------------------------------\n\nTITLE: Defining Shoot Projectile Ability in Python\nDESCRIPTION: Allows game entity to spawn projectiles towards a target. Includes attributes for projectile count, range, reload timing, spawning area, and targeting constraints, with dependencies on ordered set of GameEntity for projectiles.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nShootProjectile(Ability):\n    projectiles              : orderedset(GameEntity)\n    min_projectiles          : int\n    max_projectiles          : int\n    min_range                : int\n    max_range                : int\n    reload_time              : float\n    spawn_delay              : float\n    projectile_delay         : float\n    require_turning          : bool\n    manual_aiming_allowed    : bool\n    spawning_area_offset_x   : float\n    spawning_area_offset_y   : float\n    spawning_area_offset_z   : float\n    spawning_area_width      : float\n    spawning_area_height     : float\n    spawning_area_randomness : float\n    allowed_types            : set(children(GameEntityType))\n    blacklisted_entities     : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Defining GameEntity Class in Python for openage\nDESCRIPTION: Represents ingame objects including units, buildings, items, projectiles, and ambience. It defines types, abilities, modifiers, and variants for each entity.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nGameEntity(Object):\n    types     : set(children(GameEntityType))\n    abilities : set(Ability)\n    modifiers : set(Modifier)\n    variants  : set(Variant)\n```\n\n----------------------------------------\n\nTITLE: Defining Attack Ground Action Struct in C\nDESCRIPTION: Defines a C struct for the attack ground action (6b). It includes action identifier, selection count, coordinates, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nstruct attack_ground {\n\tuint8_t action_identifier;\n\tuint8_t selection_count;\n\tfloat x_coord;\n\tfloat y_coord;\n\tuint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining RangedDiscreteEffect Ability in Python\nDESCRIPTION: Defines the RangedDiscreteEffect ability for a game entity, allowing ranged application of discrete effects on another entity. It specifies minimum and maximum range.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nRangedDiscreteEffect(ApplyDiscreteEffect):\n    min_range : int\n    max_range : int\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Functions for Cython Use\nDESCRIPTION: Demonstrates how to annotate C++ header files with pxd comments to make functions available for Cython, including exception handling.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nnamespace openage {\n\nint foo(int arg0, std::string arg1) {\n        return 5;\n}\n\n}\n```\n\nLANGUAGE: C++\nCODE:\n```\n// pxd: from libcpp.string cimport string\n#include <string>\n#include \"util/compiler.h\"\n\nnamespace openage {\n\n/**\n * The famous foo function. Warning: might bar occasionally.\n *\n * pxd:\n *\n * int foo(int arg0, string arg1) except +\n */\nOAAPI int foo(int arg0, std::string arg1);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Projectile Ability in Python\nDESCRIPTION: Defines the Projectile ability for a game entity, giving it projectile behavior. It specifies arc, accuracy, target mode, ignored types, and unignored entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nProjectile(Ability):\n    arc               : int\n    accuracy          : set(Accuracy)\n    target_mode       : TargetMode\n    ignored_types     : set(children(GameEntityType))\n    unignore_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Defining Animation Class in Python for openage\nDESCRIPTION: Points to an openage sprite definition file in the .sprite format, used by AnimatedAbility objects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nAnimation(Object):\n    sprite : file\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Geometry with Vertex Data in C++\nDESCRIPTION: Demonstrates how to create complex geometry by defining custom vertex data, including position and texture coordinates, for use in rendering 3D objects or non-rectangular surfaces.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\nstd::array<float, 16> verts = {\n\t{\n\t\t-1.0f, 1.0f, 0.0f, 1.0f,  // top left\n\t\t-1.0f, -1.0f, 0.0f, 0.0f, // bottom left\n\t\t1.0f, 1.0f, 1.0f, 1.0f,   // top right\n\t\t1.0f, -1.0f, 1.0f, 0.0f   // bottom right\n\t}\n};\n\nresources::VertexInputInfo info{\n  { resources::vertex_input_t::V2F32, resources::vertex_input_t::V2F32 },\n  resources::vertex_layout_t::AOS,\n  resources::vertex_primitive_t::TRIANGLE_STRIP\n};\n\nauto const vert_data_size = verts.size() * sizeof(float);\nstd::vector<uint8_t> vert_data(vert_data_size);\nstd::memcpy(vert_data.data(), reinterpret_cast<const uint8_t *>(verts.data()), vert_data_size);\n\nresources::MeshData mesh{ std::move(vert_data), info };\n\nstd::shared_ptr<Geometry> geom = renderer->add_mesh_geometry(mesh);\n```\n\n----------------------------------------\n\nTITLE: DXT1/BC1 Block Structure - C++\nDESCRIPTION: C++ struct definition for DXT1/BC1 compressed block containing two reference colors and pixel indices. Total size is 8 bytes with uint16 colors and uint32 indices.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nstruct bc1_block {\n  uint16 color0;\n  uint16 color1;\n  uint32 pixel_indices;\n};\n```\n\n----------------------------------------\n\nTITLE: Reset StateChanger Implementation for Restoring Base State\nDESCRIPTION: Defines the Reset class that inherits from StateChanger and is used to return a game entity to its base state by clearing all active state changes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_152\n\nLANGUAGE: python\nCODE:\n```\nReset(StateChanger):\n    enable_abilities  = {}\n    disable_abilities = {}\n    enable_modifiers  = {}\n    disable_modifiers = {}\n    transform_pool    = None\n    priority          = 0\n```\n\n----------------------------------------\n\nTITLE: Defining Harvestable Ability in Python\nDESCRIPTION: Defines the Harvestable ability for a game entity, allowing it to be harvested by other entities with the Gather ability. It specifies resource spot, harvest progress, restock progress, gatherer limit, and default harvestability.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nHarvestable(Ability):\n    resources              : ResourceSpot\n    harvest_progress       : set(HarvestProgress)\n    restock_progress       : set(RestockProgress)\n    gatherer_limit         : int\n    harvestable_by_default : bool\n```\n\n----------------------------------------\n\nTITLE: Implementing AoE2 Convert Resistance\nDESCRIPTION: Age of Empires 2 specific conversion resistance with round-based protection system.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nAoE2Convert(Convert):\n    guaranteed_resist_rounds       : int\n    protected_rounds               : int\n    protection_round_recharge_time : float\n```\n\n----------------------------------------\n\nTITLE: Civilization Bonuses Table in Markdown\nDESCRIPTION: Markdown table showing special bonuses for each civilization including resource gathering, unit stats, and production bonuses.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/civilizations.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCivilization | Bonus\n-------------|------\nAssyrian     | +40% Archery Range unit fire rate; Villagers 30% faster.\nBabylonian   | Double wall and tower hit points; +30% Priest rejuvenation rate; +30% stone mining.\nChoson       | +80 Long Swordsman and Legion hit points, +2 tower range, -30% Priest cost.\nEgyptian     | +20% gold mining; +33% Chariot and Chariot Archer hit points; +3 Priest range.\nGreek        | Hoplite, Phalanx and Centurion 30% faster; War ships 30% faster.\nHittite      | Double Stone Thrower, Catapult, Heavy Catapult hit points; +1 Archery Range unit attack; +4 war ship range.\nMinoan       | -30% ship cost; +2 Composite Bowman range; +25% Farm production.\nPersian      | +30% hunting; -30% Farm production; War Elephant and Elephant Archer 50% faster; +50% Trireme fire rate.\nPhoenician   | -25% War Elephant and Elephant Archer cost; +65% Catapult Trireme and Juggernaught fire rate.\nShang        | -30% Villager cost; Double wall hit points.\nSumerian     | +15 villager hit points; +50% Stone Thrower, Catapult, Heavy Catapult fire rate; Double Farm production.\nYamato       | -25% Horse Archers, Scout, Cavalry, Heavy Cavalry, Cataphract cost; Villagers 30% faster; +30% ship hit points.\n```\n\n----------------------------------------\n\nTITLE: Defining Trade Post Ability in Python\nDESCRIPTION: Designates a game entity as a trade post, allowing others to connect via the Trade ability. Involves TradeRoute configurations for establishing trade.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nTradePost(Ability):\n    trade_routes : set(TradeRoute)\n```\n\n----------------------------------------\n\nTITLE: Defining In Container Continuous Effect Modifier in Python\nDESCRIPTION: This snippet defines the 'InContainerContinuousEffect' modifier, which enables continuous effects on a game entity while it is stored in specified containers. This can be used to maintain effects over time depending on the game's logic.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nInContainerContinuousEffect(Modifier):\n    containers : set(EntityContainer)\n    ability    : ApplyContinuousEffect\n```\n\n----------------------------------------\n\nTITLE: Implementing CreatableGameEntity in Python\nDESCRIPTION: Defines configuration for creating new game entity instances including costs, variants, conditions and placement modes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nCreatableGameEntity(Object):\n    game_entity     : GameEntity\n    variants        : set(Variant)\n    cost            : Cost\n    creation_time   : float\n    creation_sounds : set(Sound)\n    condition       : set(LogicElement)\n    placement_modes : set(PlacementMode)\n```\n\n----------------------------------------\n\nTITLE: Defining Sell Action Struct in C\nDESCRIPTION: Defines a C struct for the sell action (7a). It includes action identifier, player number, resource type, amount, and market ID.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_29\n\nLANGUAGE: c\nCODE:\n```\nstruct sell {\n  uint8_t action_identifier;\n  uint8_t player_number;\n  uint8_t resource_type;\n  uint8_t amount;\n  uint32_t market_id;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Regenerate Resource Spot Ability in Python\nDESCRIPTION: Implements the RegenerateResourceSpot ability, which allows a game entity to regenerate resource spots at a given rate. Requires dependencies like ResourceRate for specifying rate and ResourceSpot for identifying the spot to regenerate. Needs a Harvestable ability to function.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nRegenerateResourceSpot(Ability):\n    rate          : ResourceRate\n    resource_spot : ResourceSpot\n```\n\n----------------------------------------\n\nTITLE: Calculating Repair Cost Formula\nDESCRIPTION: Formula showing how to calculate the resource cost for repairing 1 HP of damage.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/repair.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n(repair 1 hp cost) = 0.5 * (build cost) / (build max hp)\n```\n\n----------------------------------------\n\nTITLE: Defining MostHerding Class in Python for openage\nDESCRIPTION: Represents a herdable mode where the player with the most herding game entities in range gets ownership.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nMostHerding(HerdableMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Initializing Framebuffers and Render Passes in C++\nDESCRIPTION: Sets up a window, renderer, and creates a render pass with a framebuffer for intermediate rendering. This allows for multi-pass rendering and post-processing effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nstd::shared_ptr<Window> window = Window::create(\"title\", 1024, 768);\nstd::shared_ptr<Renderer> renderer = window->make_renderer();\n\n... // shader program initialization\n\nstd::shared_ptr<Geometry> geom = renderer->add_bufferless_quad();\nstd::shared_ptr<UniformInput> input1 = shader_prog->new_uniform_input();\nRenderable obj1{input1, geom};\n\nstd::shared_ptr<Texture2d> color_texture = renderer->add_texture(\n  resources::Texture2dInfo(\n    1024,\n    768,\n    resources::pixel_format::rgba8\n  )\n);\nstd::shared_ptr<RenderTarget> target = renderer->create_texture_target({ color_texture });\nstd::shared_ptr<RenderPass> pass1 = renderer->add_render_pass({ obj1 }, target);\n```\n\n----------------------------------------\n\nTITLE: Generating Python Bindings for LZXD Header in CMake\nDESCRIPTION: Custom CMake directive (pxdgen) that generates Python bindings for the LZXD header file. This allows the LZXD functionality to be accessed from Python code in the openage project.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/util/compress/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxdgen(\n\tlzxd.h\n)\n```\n\n----------------------------------------\n\nTITLE: Language Usage Table Configuration\nDESCRIPTION: Markdown table defining the file extensions, programming languages, and their specific usage within the OpenAge project. Shows the separation of concerns between Python (non-data tasks), Cython (performance-critical Python and C++ bridging), and C++ (core engine functionality).\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/project_structure.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Extension     | Language | Usage                                                 |\n| ------------- | -------- | ----------------------------------------------------- |\n| `.py`         | Python   | Everything that does not crunch data                  |\n| `.pyx` `.pxd` | Cython   | Fast Python code, glue between C/C++ and Python       |\n| `.h`   `.cpp` | C++      | Data crunching code: simulation, graphics, sound, ... |\n```\n\n----------------------------------------\n\nTITLE: Calculating Archer vs Spearman Damage in Age of Empires\nDESCRIPTION: This code snippet demonstrates how to calculate the damage dealt by an archer attacking a spearman, considering different armor classes and their respective values.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/damage.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\ndamage =   max(0, archer_melee_damage - spearman_melee_armor)\n         + max(0, archer_pierce_damage - spearman_pierce_armor)\n         + max(0, archer_spearman_damage - spearman_spearman_armor)\n\n       = max(0, 0 - 0) + max(0, 4 - 0) + max(0, 3 - 0) = 7\n```\n```\n\n----------------------------------------\n\nTITLE: Ordering Units in Subformation - Pseudocode Implementation\nDESCRIPTION: Algorithm for ordering units within a subformation based on formation type. Creates an ordered line of units and calculates their positions relative to the formation front.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_13\n\nLANGUAGE: pseudocode\nCODE:\n```\nINPUT:\n- List of Stacks: unit_stacks\n- Formation type: formation_type\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nInitilization:\n\n# Contains the units in correct order beginning from\n# the top left (see section about Mixing Units).\nList unit_line = new List();\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nAlgorithm:\n\n# Creates a single ordered line\nwhile !unit_stacks.isEmpty() do {\n    for Stack s in unit_stacks do {\n        unit_line.add(s.top());\n        if s.isEmpty() then {\n            unit_stacks.remove(s);\n        }\n    }\n}\n\n# Now calculate the position of each unit\n# depending on formation_type and their position\n# inside the unit_line list. This can represented\n# by a relative offset from the front of the formation,\n# which then has to be calculated to a global coordinate.\n```\n\n----------------------------------------\n\nTITLE: Creating AoE2ProjectileAmount Modifier in Python\nDESCRIPTION: Defines the AoE2ProjectileAmount modifier class that calculates projectile amount based on provider and receiver abilities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nAoE2ProjectileAmount(Modifier):\n    provider_abilities : set(ApplyDiscreteEffect)\n    receiver_abilities : set(ApplyDiscreteEffect)\n    change_types       : set(children(AttributeChangeType))\n```\n\n----------------------------------------\n\nTITLE: Implementing Harvest Progress Type in Python\nDESCRIPTION: Creates a progress type for monitoring resource harvesting. Progress is 0% at maximum capacity and 100% when depleted.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_137\n\nLANGUAGE: python\nCODE:\n```\nHarvest(ProgressType):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining ProductionQueue Ability in Python\nDESCRIPTION: Defines the ProductionQueue ability for a game entity, allowing it to queue production of CreatableGameEntity and ResearchableTech. It specifies queue size and production modes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nProductionQueue(Ability):\n    size             : int\n    production_modes : set(ProductionMode)\n```\n\n----------------------------------------\n\nTITLE: Implementing DropResources Ability in Python\nDESCRIPTION: Enables resource dropping at designated sites with automatic behavior when storage is full.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nDropResources(Ability):\n    containers           : set(ResourceContainer)\n    search_range         : float\n    allowed_types        : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Creating Uniform Inputs for Shaders in C++\nDESCRIPTION: Creates a UniformInput object from a shader program to store uniform values for a renderable. Values are provided in name-value pairs and automatically converted to the correct types expected by the shader.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nstd::shared_ptr<UniformInput> input = shader_prog->new_uniform_input(\n  \"color\", Eigen::Vector3f{ 0.0f, 1.0f, 0.0f },\n  \"time\", 0.0f,\n  \"num\", 1337\n);\n```\n\n----------------------------------------\n\nTITLE: Defining AI Training Action Struct in C\nDESCRIPTION: Defines a C struct for the AI training action (64). It includes action identifier, building ID, player ID, unit ID, and a constant value.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nstruct ai_train {\n  uint8_t action_identifier;\n  uint32_t building_id;\n  uint16_t player_id;\n  uint16_t unit_id;\n  uint32_t constant; // = 0xFFFFFFFF\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Resistance Ability in Python\nDESCRIPTION: Assigns resistance properties to a game entity against effects from other entities. Requires a set of Resistance objects to define the resistances.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nResistance(Ability):\n    resistances : set(Resistance)\n```\n\n----------------------------------------\n\nTITLE: Calculating Additional Arrows from Garrisoned Units in AoE2\nDESCRIPTION: This snippet shows the formula for calculating how many additional arrows a building fires based on the damage per second (DPS) of garrisoned units and the building itself. It's a core mechanic for garrison functionality in Age of Empires II.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/garrison.md#2025-04-21_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\n    additional_arrows = sum(unit_dps_pierce) / building_dps\n```\n\n----------------------------------------\n\nTITLE: Adding Audio System Source Files to libopenage Library Target\nDESCRIPTION: CMake command that adds multiple C++ source files related to audio processing, resource loading, and management to the libopenage library target. Includes implementations for audio management, Opus codec support, and resource handling.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/audio/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\taudio_manager.cpp\n\tcategory.cpp\n\tdynamic_loader.cpp\n\tdynamic_resource.cpp\n\terror.cpp\n\tformat.cpp\n\tin_memory_loader.cpp\n\tin_memory_resource.cpp\n\topus_dynamic_loader.cpp\n\topus_in_memory_loader.cpp\n\topus_loading.cpp\n\tloader_policy.cpp\n\tresource.cpp\n\tresource_def.cpp\n\tsound.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping Ship LineIDs to Subformations in AoE2\nDESCRIPTION: ASCII diagram showing how ship units are assigned to subformations based on LineID values rather than GroupIDs. This explains how naval units are organized in formations and can be mixed with land units in shallow water.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nWARNING: These are LineIDs not GroupIDs\n.................\n...^^^^^^^.........\n1..Cavalry......... -294\n2..Infantry (melee) -293\n3..Ranged.......... -283, -284, -292\n4..Support......... -285\n.................\n5..Else............ Admiral Yun Shi (UnitID: 844)\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Ability in Python\nDESCRIPTION: Facilitates storage of other game entities within a container, allowing influence on the storing entity. Operates with an EntityContainer and conditions for emptying.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nStorage(Ability):\n    container       : EntityContainer\n    empty_threshold : set(LogicElement)\n```\n\n----------------------------------------\n\nTITLE: Implementing Player Class in C++\nDESCRIPTION: Defines a Player class with methods to retrieve player information such as name, faction, units, research status, and resources.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/ai.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nclass Player {\n\tstring  get_name();   // returns the name of the player.\n\tFaction get_faction();   // returns the faction of the player.\n\tUnit[]  get_units();  // returns the set of units the player own.\n\tbool    has_researched(TechType tech);\n\tint     get_resource()    // Returns the amount of resources the player owns.\n\t// many more...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Diplomatic Line of Sight Modifier in Python\nDESCRIPTION: This snippet defines the 'DiplomaticLineOfSight' modifier, which allows players to share line of sight with game entities that have a specified diplomatic stance. This enhances strategy in gameplay by revealing information about other players' regions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nDiplomaticLineOfSight(Modifier):\n    diplomatic_stance : children(DiplomaticStance)\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Ram Speed in Age of Empires II\nDESCRIPTION: This formula demonstrates how to calculate the total speed of a ram, taking into account the base speed, speed modifiers, and the number of garrisoned units. Each garrisoned infantry unit adds 0.05 tiles/s to the ram's speed.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/ram_speed.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    (total ram speed) = (base speed) * (speed modifiers) + 0.05 * (units garrisoned)\n```\n\n----------------------------------------\n\nTITLE: Configuring CPack Options and Files - CMake\nDESCRIPTION: This snippet sets various CPack options including versioning and the location of the project configuration file. It helps direct how CPack should behave during the packaging process.\nSOURCE: https://github.com/sfttech/openage/blob/master/packaging/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CPACK_VERSION_FULL_STRING \"${VERSION_FULL_STRING}\")\nset(CPACK_PROJECT_CONFIG_FILE \"${CMAKE_SOURCE_DIR}/packaging/CPackOptions.cmake\")\n```\n\n----------------------------------------\n\nTITLE: Defining Game Info Structure in C++\nDESCRIPTION: Defines a structure to hold game information including number of players, map size, population limit, and other game settings.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/ai.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct game_info {\n\tint num_players;\n\tint map_size;\n\tint pop_limit;\n\tresources_type;\n\tmap_view;\n\tstarting_age;\n\tvictory_mode;\n}\n```\n\n----------------------------------------\n\nTITLE: Military Units Statistics Table in Markdown\nDESCRIPTION: A markdown table containing detailed statistics for military units including base stats, costs, and combat bonuses. The table includes columns for Name, Age, HP, Attack, Attack Type, Reload Time, Melee Armor, Pierce Armor, Line of Sight, Range, Accuracy, Speed, Training Time, and Cost.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/unit_stats/unit_stats.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                      | Age |  HP |Att.|Att. Type|Reload Time|M. Arm.|P. Arm.| LOS |  R  | Acc.|Speed |Tr. Time|   Cost   | Attack Bonuses                |\n|---------------------------|-----|-----|----|---------|-----------|-------|-------|-----|-----|-----|------|--------|----------|-------------------------------|\n| Militia                   | I   |  40 |  4 |    M    |    2.0    |   0   |    1  |  4  |  0  |   - | 0.9  |   21   | 60F/20G  | -                             |\n[...additional rows truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Defining Trade Ability in Python\nDESCRIPTION: Enables entity trading with TradePost abilities. Involves trade routes and a ResourceContainer. The container must be linked by a ResourceStorage ability.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nTrade(Ability):\n    trade_routes : set(TradeRoute)\n    container    : ResourceContainer\n```\n\n----------------------------------------\n\nTITLE: Defining Reveal Modifier in Python\nDESCRIPTION: The 'Reveal' modifier expands the visibility range around specified game entities, allowing tactical advantages in gameplay by revealing enemy movements or locations.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nReveal(Modifier):\n    line_of_sight        : float\n    affected_types       : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Rendering Library in CMake\nDESCRIPTION: Adds the core rendering engine source files to the libopenage library. These files implement fundamental rendering functionality including color handling, geometry, textures, shaders, and window management.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\tcolor.cpp\n    definitions.cpp\n\tgeometry.cpp\n\trender_factory.cpp\n    render_pass.cpp\n    render_target.cpp\n    renderable.cpp\n\trenderer.cpp\n\tshader_program.cpp\n\ttexture.cpp\n\ttexture_array.cpp\n\ttypes.cpp\n    uniform_buffer.cpp\n\tuniform_input.cpp\n\tutil.cpp\n\twindow.cpp\n\twindow_event_handler.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Pathable Ability in Python\nDESCRIPTION: Defines the Pathable ability for a game entity, allowing it to influence the pathing costs on the static pathfinding grid. It specifies hitbox and path costs for different path types.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nPathable(Ability):\n    hitbox     : Hitbox\n    path_costs : dict(children(PathType), int)\n```\n\n----------------------------------------\n\nTITLE: Defining Render Layers with Priorities in C++\nDESCRIPTION: Shows how to create and use render layers with different priorities to control the draw order of objects within a single render pass, optimizing performance compared to multiple passes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\nRenderable obj {\n  input,\n  geom\n};\npass->add_renderables({ obj }, 42);\n```\n\n----------------------------------------\n\nTITLE: Implementing Place Placement Mode in Python\nDESCRIPTION: Configures manual placement of game entities with terrain and positioning constraints.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_116\n\nLANGUAGE: python\nCODE:\n```\nPlace(PlacementMode):\n    tile_snap_distance       : float\n    clearance_size_x         : float\n    clearance_size_y         : float\n    allow_rotation           : bool\n    max_elevation_difference : float\n```\n\n----------------------------------------\n\nTITLE: Defining OverlayTerrain Ability in Python\nDESCRIPTION: Defines the OverlayTerrain ability for a game entity, allowing it to temporarily replace the map terrain it's positioned on with a specified terrain.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nOverlayTerrain(Ability):\n    terrain_overlay : Terrain\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock Property\nDESCRIPTION: Defines the Lock property that manages ability execution slots through lock pools.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nLock(AbilityProperty):\n    lock_pool : LockPool\n```\n\n----------------------------------------\n\nTITLE: Defining Waypoint Action Struct in C\nDESCRIPTION: Defines a C struct for the waypoint action (10). It includes action identifier, player ID, selection count, coordinates, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nstruct waypoint {\n  uint8_t action_identifier;\n  uint8_t player_id;\n  uint8_t selection_count;\n  uint8_t x_coord;\n  uint8_t y_coord;\n  uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Creating ActiveTransformTo Ability\nDESCRIPTION: Implements an ability that handles state changes for game entities with transformation timing and progress tracking.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nActiveTransformTo(Ability):\n    target_state       : StateChanger\n    transform_time     : float\n    transform_progress : set(Progress)\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute Class in Python\nDESCRIPTION: Class for defining game entity attributes with names and abbreviations.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nAttribute(Object):\n    name         : TranslatedString\n    abbreviation : TranslatedString\n```\n\n----------------------------------------\n\nTITLE: Configuring Python and Cython Modules in openage with CMake\nDESCRIPTION: This snippet configures Python modules and Cython modules for the openage project using CMake. It adds core Python files, creates a config.py file in the build directory, and marks devmode.py as not to be installed. It also adds a Cython module for Cython environment checking.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\t__main__.py\n\tassets.py\n\t${CMAKE_CURRENT_BINARY_DIR}/config.py\n\tdefault_dirs.py\n\tNOINSTALL devmode.py\n)\n\nadd_cython_modules(\n\tcython_check.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Formation Split ASCII Demonstration\nDESCRIPTION: ASCII art demonstration showing how units split their formation when encountering obstacles like trees. The sequence shows units (marked as X) adapting their formation around a tree (marked as T).\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/pathfinding.md#2025-04-21_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n...............      ...............      ...............      ...............\n...............      ...............      ...............      ....XX.XXXXX...\n......T........ ---> ......T........ ---> ....XXTXXXXX... ---> ....XXTXXXXX...\n............... ---> ....XX.XXXXX... ---> ....XX.XXXXX... ---> ...............\n....XXXXXXX....      ....XX.XXXXX...      ...............      ...............\n....XXXXXXX....      ...............      ...............      ...............\n```\n\n----------------------------------------\n\nTITLE: General Purpose Integer Types in C++\nDESCRIPTION: Standard integer types for general use cases where specific bit width is not critical.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code_style/inttypes.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nint, unsigned int\n```\n\n----------------------------------------\n\nTITLE: Calculating Tribute in Age of Empires II\nDESCRIPTION: Formula for calculating the amount of resources left after sending tribute to another player, including the tribute fee.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/market.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n(amount of resource) = (current stockpile) - ((tribute amount) + (tribute fee) * (tribute amount))\n```\n\n----------------------------------------\n\nTITLE: Frame Definition Example\nDESCRIPTION: Example demonstrating a frame definition with position, size, priority and blend mode parameters.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/terrain_format_spec.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nframe 0 1 0 0 0 200 200 priority=1 blend_mode=0\n# frame_idx  = 0  -> first frame in the animation\n# layer_id   = 1  -> drawn on layer 1\n# image_id   = 0  -> taken from image resource with ID 0\n# priority   = 1  -> this frame's blending table is selected with priority 1\n# blend_mode = 0  -> use blend mode 0\n# Texture is located at (0,0) in image resource\n# and has a size of (200,200).\n```\n\n----------------------------------------\n\nTITLE: Implementing DetectCloak Ability in Python\nDESCRIPTION: Allows entities to reveal cloaked units within range with type filtering.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nDetectCloak(Ability):\n    range                : float\n    allowed_types        : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Defining Live Ability in Python\nDESCRIPTION: Defines the Live ability for a game entity, assigning attributes to the entity. It specifies a set of attribute settings.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nLive(Ability):\n    attributes : set(AttributeSetting)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage in CMake\nDESCRIPTION: Defines the C++ source files to be compiled and linked into the libopenage library. These files implement filesystem-related functionality including directory handling, filesystem abstractions, native filesystem operations, and Python integration.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/util/fslike/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tdirectory.cpp\n\tfslike.cpp\n\tnative.cpp\n\tpython.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Send Back to Task Ability in Python\nDESCRIPTION: Enables emptying containers and returning game entities to previous tasks. Requires a set of allowed GameEntityType children and a set of blacklisted GameEntities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nSendBackToTask(Ability):\n    allowed_types        : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Markdown Directory Structure Documentation\nDESCRIPTION: Documentation showing the asset directory structure and file organization for the OpenAge game engine, including metadata and data assets.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/assets.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nopenage assets\\n==============\\n\\nThe game engine requires assets to actually run a game.\\nAny assets may be used, but the common case will be to convert the original media files.\\n\\n\\nAsset directories\\n-----------------\\n\\nWhen launching the game, [assets are converted automatically](/doc/media_convert.md).\\n\\nThey will be placed in `assets/`.\\n\\nMultiple search paths like `/usr/share/openage`\\nand `~/.local/share/openage` are currently not implemented.\\nThis will hopefully be done soon.\\n\\n\\nMetadata assets\\n---------------\\n\\nMetadata assets are used to describe the assets (duh.).\\n\\n* Media metadata describe:\\n  * Which areas of an texture images show what (texture atlases...)\\n  * Which animation and unit is stored in the file\\n  * How long does the sound last\\n  * etc\\n* Game metadata files: Describe existing game elements\\n  * What media asset metadata shall be used\\n  * Where is the storage location of the techtree\\n  * Where are all the units stored\\n  * What describes the existing ages and technologies\\n  * etc...\\n* Interface metadata: Used to construct the interface\\n\\n\\nData assets\\n-----------\\n\\n- Media assets\\n   The media asset files feed the engine with images, sounds, animations, whatever.\\n   They are accompanied by metadata assets.\\n\\n- Game content files: **Describe the game logic**\\n     - techtree\\n     - civilizations\\n     - ages\\n     - units\\n     - etc, you get the point\n```\n\n----------------------------------------\n\nTITLE: Blendomatic.dat File Format Structure in C++\nDESCRIPTION: This code snippet defines the structure of the blendomatic.dat file used for storing alpha masks for tile blending. It includes headers, tile information, and arrays for bitmasks and bytemaps.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/blendomatic.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nstruct {\n\tstruct {\n\t\tunsigned int nr_blending_modes;              // normally 9\n\t\tunsigned int nr_tiles;                       // normally 31\n\t} blendomatic_header;\n\n\tstruct {\n\t\tunsigned int  tile_size;                     // normally 2353\n\t\tunsigned char tile_flags[nr_tiles];\n\n\t\tstruct {\n\t\t\tuint8_t alpha_bitmask[tile_size / 8];    // with tile_size pixels, use the data bitwise.\n\t\t} tile_bitmasks[32];                         // why 32? maybe nr_tiles + 1?\n\n\t\tstruct {\n\t\t\tuint8_t alpha_bytemap[tile_size];        // 7-bit alpha value pixels\n\t\t} tile_bytemasks[nr_tiles];\n\t} blending_modes[nr_blending_modes]\n} blendomatic.dat;\n```\n\n----------------------------------------\n\nTITLE: Implementing Cloak Ability in Python\nDESCRIPTION: Defines an ability that makes units untargetable. Can be interrupted by specific abilities and has a cooldown period for reactivation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nCloak(Ability):\n    interrupted_by     : set(Ability)\n    interrupt_cooldown : float\n```\n\n----------------------------------------\n\nTITLE: Defining Stop Ability in Python\nDESCRIPTION: Allows a game entity to stop all current tasks and revert to an idle state. This class does not have additional attributes or dependencies.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nStop(Ability):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining LineOfSight Ability in Python\nDESCRIPTION: Defines the LineOfSight ability for a game entity, revealing the area around the entity on the in-game map. It specifies the range of visibility.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nLineOfSight(Ability):\n    range : float\n```\n\n----------------------------------------\n\nTITLE: Creating CreationTime Modifier in Python\nDESCRIPTION: Defines the CreationTime modifier class that changes the creation time for CreatableGameEntity objects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nCreationTime(MultiplierModifier):\n    creatables : set(CreatableGameEntity)\n```\n\n----------------------------------------\n\nTITLE: Implementing Despawn Ability in Python\nDESCRIPTION: Controls entity removal with activation conditions, triggers, and optional state changes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nDespawn(Ability):\n    activation_condition : set(LogicElement)\n    despawn_condition    : set(LogicElement)\n    despawn_time         : float\n    state_change         : optional(StateChanger) = None\n```\n\n----------------------------------------\n\nTITLE: Defining Move Speed Modifier in Python\nDESCRIPTION: The 'MoveSpeed' modifier changes the movement speed of a game entity. This modifier can be used dynamically to adjust gameplay pacing.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nMoveSpeed(MultiplierModifier):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Refund on Condition Modifier in Python\nDESCRIPTION: This snippet defines the 'RefundOnCondition' modifier, which returns a specified amount of resources to the player after a condition is satisfied. This can be used to enhance gameplay strategy by providing resource management opportunities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nRefundOnCondition(Modifier):\n    refund_amount : set(ResourceAmount)\n    condition     : set(LogicElement)\n```\n\n----------------------------------------\n\nTITLE: Specifying GameEntityScope ModifierScope Python\nDESCRIPTION: Applies modifier effects selectively to game entities and excludes specific entities through blacklists.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_95\n\nLANGUAGE: python\nCODE:\n```\nGameEntityScope(ModifierScope):\n    affected_types       : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Absolute Path References in openage\nDESCRIPTION: Examples of absolute path references that start from the virtual modpack root. These paths must begin with a slash followed by either a modpack identifier or alias enclosed in curly braces, and are the only way to reference file resources from other modpacks.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/file_referencing.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"/{aoe2_base@openage}/idle.png\" # absolute path with modpack identifier\n\"/{aoe2_base}/idle.png\"         # absolute path with modpack alias\n```\n\n----------------------------------------\n\nTITLE: Defining Move Ability in Python\nDESCRIPTION: Defines the Move ability for a game entity, allowing it to move around the map. It specifies speed, movement modes, and path type for pathfinding.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nMove(Ability):\n    speed      : float\n    modes      : set(MoveMode)\n    path_type  : children(PathType)\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace Structure for Openage Renderer\nDESCRIPTION: Lists the namespace structure for both Level 1 and Level 2 renderers in Openage, including OpenGL and Vulkan backends, resource management, and various rendering stages.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Namespaces:\n#### Level 1 renderer\n- `openage::renderer::opengl` - the OpenGL backend\n- `openage::renderer::vulkan` - the Vulkan backend\n- `openage::renderer::resources` - management of graphics assets\n- `openage::renderer::resources::parser` - parsers for openage media [metadata files](/doc/media/openage)\n\n##### Level 2 renderer\n- `openage::renderer::skybox` - the background rendering stage\n- `openage::renderer::terrain` - the terrain rendering stage\n- `openage::renderer::world` - the unit/building rendering stage\n- `openage::renderer::gui` - the GUI rendering stage\n- `openage::renderer::screen` - final compositing of all level 2 rendering results for display on screen\n\nEvery namespace is an actual directory and all its classes are contained there.\n```\n\n----------------------------------------\n\nTITLE: Defining Secondary Frame Information Structure in C++\nDESCRIPTION: This C++ struct defines the structure of the secondary frame information used in SLP files with versions 4.0X or higher.  It contains offset values for command and outline tables, unused data, properties, frame type, dimensions, and center coordinates of the sprite. This structure is located after all the main graphic draw commands in the SLP file.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nstruct secondary_frame_info {\n  uint32 sec_cmd_table_offset;\n  uint32 sec_outline_table_offset;\n  uint32 sec_null;\n  uint24 sec_properties;\n  uint8  sec_frame_type;\n  int32  sec_width;\n  int32  sec_height;\n  int32  sec_hotspot_x;\n  int32  sec_hotspot_y;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing TimeRelativeProgressChange Modifier in Python\nDESCRIPTION: Defines the TimeRelativeProgressChange modifier class that changes the total_change_time of TimeRelativeProgress effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nTimeRelativeProgressChange(Modifier):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Build in C++ Project\nDESCRIPTION: This snippet adds specified C++ source files to the build using a build system command. The command 'add_sources' is used to include multiple source files like demo_0.cpp, demo_1.cpp, and tests.cpp in the library 'libopenage'. These files are likely components of a larger C++ project. Dependencies include a compatible build system capable of interpreting these directives.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/pathfinding/demo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nadd_sources(libopenage\n    demo_0.cpp\n    demo_1.cpp\n    tests.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Uploading Uniform Buffer Data to GPU in C++\nDESCRIPTION: Demonstrates how to manually trigger the upload of uniform buffer input values to the GPU.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_26\n\nLANGUAGE: c++\nCODE:\n```\nbuffer->update_uniforms(buff_input);\n```\n\n----------------------------------------\n\nTITLE: Implementing Flyover Modifier in Python\nDESCRIPTION: Defines the Flyover modifier class that changes FlatAttributeChange effects for projectiles flying over specific entity types.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nFlyover(Modifier):\n    relative_angle       : float\n    flyover_types        : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Defining AoE1TradeRoute in Python\nDESCRIPTION: Defines a trade route following Age of Empires 1 rules where a trading entity exchanges a set amount of resources. It specifies which resources can be exchanged and the amount traded each time.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_169\n\nLANGUAGE: python\nCODE:\n```\nAoE1TradeRoute(Object):\n    exchange_resources : set(Resource)\n    trade_amount       : int\n```\n\n----------------------------------------\n\nTITLE: Defining Transfer Storage Ability in Python\nDESCRIPTION: Handles transfers of game entities between containers, specified by source and target EntityContainers. Involves a GameEntity as the transfer object.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nTransferStorage(Ability):\n    storage_element  : GameEntity\n    source_container : EntityContainer\n    target_container : EntityContainer\n```\n\n----------------------------------------\n\nTITLE: Defining SMP Header Structure in C++\nDESCRIPTION: C++ struct definition for the SMP file header, containing file signature, version, frame counts, and other metadata.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct smp_header {\n  char   signature[4];\n  uint32 version;\n  uint32 num_frames;\n  uint32 num_animations;\n  uint32 frames_per_animation;\n  uint32 checksum;\n  uint32 file_size;\n  uint32 source_format;\n  char   comment[32];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Terrain Class in Python for openage\nDESCRIPTION: Points to an openage terrain definition file in the .terrain format, used by the terrain.Terrain object to define ingame terrain properties.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nTerrain(Object):\n    sprite : file\n```\n\n----------------------------------------\n\nTITLE: Defining RangedContinuousEffect Ability in Python\nDESCRIPTION: Defines the RangedContinuousEffect ability for a game entity, allowing ranged application of continuous effects on another entity. It specifies minimum and maximum range.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nRangedContinuousEffect(ApplyContinuousEffect):\n    min_range : int\n    max_range : int\n```\n\n----------------------------------------\n\nTITLE: AoE2 Specific Conversion Effect Implementation\nDESCRIPTION: Age of Empires 2 specific conversion effect with guaranteed resistance rounds and protection mechanics.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nAoE2Convert(Convert):\n    skip_guaranteed_rounds : int\n    skip_protected_rounds  : int\n```\n\n----------------------------------------\n\nTITLE: Activity Node Types Table in Markdown\nDESCRIPTION: A table defining the different node types in the activity control flow system, including their input/output counts and descriptions. This table provides a concise reference for the six fundamental node types used in activity graphs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/game_simulation/activity.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Type             | Inputs | Outputs | Description               |\n| ---------------- | ------ | ------- | ------------------------- |\n| `START`          | 0      | 1       | Start of activity         |\n| `END`            | 1      | 0       | End of activity           |\n| `TASK_SYSTEM`    | 1      | 1       | Run built-in system       |\n| `TASK_CUSTOM`    | 1      | 1       | Run custom function       |\n| `XOR_EVENT_GATE` | 1      | 1+      | Wait for event and branch |\n| `XOR_GATE`       | 1      | 1+      | Branch on condition       |\n```\n\n----------------------------------------\n\nTITLE: Defining AttackMove MoveMode Python\nDESCRIPTION: Facilitates movement to a map position, taking into consideration stances from the `GameEntityStance` ability.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_98\n\nLANGUAGE: python\nCODE:\n```\nAttackMove(MoveMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing ResourceContingent Class in Python\nDESCRIPTION: Extends Resource to create a contingent system (like population or supply). It allows game entities to reserve portions of a resource without depleting it.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_142\n\nLANGUAGE: python\nCODE:\n```\nResourceContingent(Resource):\n    min_amount : int\n    max_amount : int\n```\n\n----------------------------------------\n\nTITLE: Implementing Normal MoveMode Python\nDESCRIPTION: Facilitates standard movement to a target position on the map without considering `GameEntityStance`.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_101\n\nLANGUAGE: python\nCODE:\n```\nNormal(MoveMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Registering QML Type for ResourceAmountLink in C++\nDESCRIPTION: Demonstrates how to register a custom C++ class (ResourceAmountLink) as a QML type for use in the GUI.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/gui.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nqmlRegisterType<ResourceAmountLink>(\"yay.sfttech.openage\", 1, 0, \"ResourceAmount\");\n```\n\n----------------------------------------\n\nTITLE: Defining TrainHM Structure for Unit Training in Ruby\nDESCRIPTION: Defines the data structure for training units as a human player. Includes fields for action identifier, building ID, unit ID, and training count. Used to handle unit creation commands in the game.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/10-unit_creation.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef TrainHM\n  int8 :action_identifier\n  byte24 :zero\n  int32 :building_id\n  int16 :unit_id\n  int16 :train_count\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Base Effect Class in Python\nDESCRIPTION: Base class for all effects in the engine, containing property mappings for specialization.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nEffect(Object):\n    properties : dict(abstract(EffectProperty), EffectProperty) = {}\n```\n\n----------------------------------------\n\nTITLE: Defining SLD File Header Structure in C++\nDESCRIPTION: This struct defines the layout of the SLD file header, which includes the file signature, version, number of frames, and other metadata.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct sld_header {\n  char   file_descriptor[4];\n  uint16 version;\n  uint16 num_frames;\n  uint16 unknown1;\n  uint16 unknown2;\n  uint32 unknown3;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Modifier Class in Python\nDESCRIPTION: Defines the base Modifier class with a dictionary of ModifierProperty objects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nModifier(Object):\n    properties : dict(abstract(ModifierProperty), ModifierProperty) = {}\n```\n\n----------------------------------------\n\nTITLE: Defining StandGround Stance Class in Python for openage\nDESCRIPTION: Represents a stand ground stance where the entity stays at its current position and uses abilities when other entities come in range.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nStandGround(GameEntityStance):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Terrain Blending Algorithm in Python\nDESCRIPTION: A pseudocode implementation of the terrain blending algorithm. The algorithm iterates over all tiles, identifies neighbors with higher priority, determines the influence direction, and applies the appropriate alpha mask for smooth transitions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/blendomatic.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfor @ in alltiles:\n\n    #draw the base tile:\n    @.draw()\n\n    #storage for influences by neighbor tiles\n    influence = dict()\n\n    #first step: gather information about possible influences\n    #look at every neighbor tile for that\n    for i in [0..7]:\n\n        #neighbor only interesting if it's a different terrain than @\n        if i.terrain_type != @.terraintype:\n\n            #adjacent tile will draw onto @, as it's priority is higher\n            #else, ignore this neighbor\n            if i.priority > @.priority:\n\n                if i.is_diagonal_influence:\n                    #get the ids of the adjacent neighbors of the diagonal\n                    #influence:\n                    i_neighbors = map(lambda x: x % 8, [i - 1, i + 1])\n\n                    if any of i_neighbors have influence:\n                        #don't apply diagonal influence i, as any of its\n                        #neighbors already influences the tile.\n                        continue\n\n                #as tile i has influence for this priority\n                # => bit i is set to 1 by 2^i (== 1 << i)\n                #each priority is drawn seperately later.\n                influence[i.terrain_id] |= 2**i\n\n    #sort influences by priority, so that higher priorities get drawn last.\n    influence = sorted(influence, by=influence.priority)\n\n    #now: we got all influences, grouped by terrain priority.\n    #for each of these influences, we continue finding the blendomatic mask\n    # and apply it to the neighbors texture,\n    # then draw the masked tile on top of the base (@) tile.\n\n    #the terrain_id has influences coming from directions 'binf',\n    #so we can select directional masks for that terrain.\n    for terrain_id, binf in influence.items():\n\n        #there is exactly one adjacent mask id for all combinations\n        adjacent_mask_id  = []\n        diagonal_mask_ids = []\n\n        #find mask id by influencing neighbor tiles\n        #                           neighbor id: 76543210\n        adjacent_mask_id = [0 .. 3] if binf == 0b00001000\n                   .add()  [4 .. 7] if binf == 0b00000010\n                           [8 ..11] if binf == 0b00100000\n                           [12..15] if binf == 0b10000000\n                           20       if binf == 0b00100010\n                           21       if binf == 0b10001000\n                           22       if binf == 0b10100000\n```\n\n----------------------------------------\n\nTITLE: Defining In Container Discrete Effect Modifier in Python\nDESCRIPTION: The 'InContainerDiscreteEffect' modifier applies discrete effects on a game entity while stored in specified containers, similar to continuous effects but with discrete intervals or instances.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nInContainerDiscreteEffect(Modifier):\n    containers : set(EntityContainer)\n    ability    : ApplyDiscreteEffect\n```\n\n----------------------------------------\n\nTITLE: Save Game Protocol Definition in Ruby\nDESCRIPTION: Defines the binary protocol for game save actions. Includes exit flag, player ID, filename storage and checksum verification.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/13-other.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef Save\n  int8 :action_identifier\n  int8 :exit\n  int8 :player_id\n  array :filename,\n        type => :int8\n  unknown :memory\n  int32 :checksum\nend\n```\n\n----------------------------------------\n\nTITLE: Defining DRS Table Info Structure in C++\nDESCRIPTION: C++ struct definition for the DRS table info containing file extension, table offset and number of files in the table.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/drs-files.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstruct drs_table_info {\n\tchar file_extension[4];\n\tint32 file_info_offset;\n\tint32 num_files;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing AttributeCost Type in Python\nDESCRIPTION: Defines costs as attribute points removed from a game entity's current attribute value.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nAttributeCost(Cost):\n    amount : set(AttributeAmount)\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceRate Class in Python\nDESCRIPTION: Represents a per-second rate of change for a specific resource type. Used for resource generation or consumption over time.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_144\n\nLANGUAGE: python\nCODE:\n```\nResourceRate(Object):\n    type : Resource\n    rate : float\n```\n\n----------------------------------------\n\nTITLE: ResourceContainer for Defining Resource Storage in Game Entities\nDESCRIPTION: Defines the ResourceContainer class used by the ResourceStorage ability to specify which resources a game entity can carry, the maximum amount, and any progress effects when carrying resources.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_154\n\nLANGUAGE: python\nCODE:\n```\nResourceContainer(Object):\n    resource       : Resource\n    max_amount     : int\n    carry_progress : set(Progress)\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Override Property\nDESCRIPTION: Defines the AnimationOverride property that allows abilities to override animations of other abilities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nAnimationOverride(AbilityProperty):\n    overrides : set(AnimationOverride)\n```\n\n----------------------------------------\n\nTITLE: Implementing ModifierProperty Class in Python\nDESCRIPTION: Defines the base ModifierProperty class as a generalization for all modifier properties.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nModifierProperty(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining GameEntityFormation Class in Python for openage\nDESCRIPTION: Defines the placement of a game entity in a formation for the Formation ability, specifying both the formation and subformation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nGameEntityFormation(Object):\n    formation    : Formation\n    subformation : Subformation\n```\n\n----------------------------------------\n\nTITLE: Initializing a Renderer from a Window in C++\nDESCRIPTION: Creates a renderer from a window instance. The type of renderer (OpenGL or Vulkan) is determined by the window implementation type.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstd::shared_ptr<Renderer> renderer = window->make_renderer();\n```\n\n----------------------------------------\n\nTITLE: Defining Instant Tech Research Modifier in Python\nDESCRIPTION: This snippet creates the 'InstantTechResearch' modifier, which allows tech to be instantly unlocked when certain conditions are met. This facilitates immediate access to technology in the game.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nInstantTechResearch(Modifier):\n    tech      : Tech\n    condition : set(LogicElement)\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Property for Abilities\nDESCRIPTION: Implements the Animated property that allows abilities to play animations during their usage.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nAnimated(AbilityProperty):\n    animations : set(Animation)\n```\n\n----------------------------------------\n\nTITLE: Taunt System for Player Communication\nDESCRIPTION: Defines the Taunt class for predefined messages that players can send to each other, including activation commands, display text, and associated sounds.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_160\n\nLANGUAGE: python\nCODE:\n```\nTaunt(Object):\n    activation_message : text\n    display_message    : TranslatedString\n    sound              : Sound\n```\n\n----------------------------------------\n\nTITLE: Updating Uniform Values in C++\nDESCRIPTION: Updates the values in a UniformInput object, which can be done when preparing the next frame. This example shows how to update a single uniform value.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\ninput->update(\n  \"condition\", false\n);\n```\n\n----------------------------------------\n\nTITLE: Parsing SLP Command Offset in Python\nDESCRIPTION: Python struct format string for reading the command offset table entry that points to row drawing commands.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< I\")\n```\n\n----------------------------------------\n\nTITLE: Initializing GameSimulation Object in Main Thread\nDESCRIPTION: Creates a GameSimulation object to control the game loop, current game session, and other simulation parameters. This is typically done by the Engine object in the main thread.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/game_simulation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo initiate a game, a `GameSimulation` object must be created. This is usually done by\nthe `Engine` object in the main thread.\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Modules\nDESCRIPTION: This command adds Cython modules, indicating the integration of Python with C/C++ code through Cython. The inclusion of 'cpp.pyx' likely means this module is a performance-critical section of the application. Required dependencies include a proper Cython development environment.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/util/fslike/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nadd_cython_modules(\n\tcpp.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Storage Ability in Python\nDESCRIPTION: Assigns containers to a game entity for resource storage until delivery to a drop site. Requires a collection of ResourceContainer objects to define the storage.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nResourceStorage(Ability):\n    containers : set(ResourceContainer)\n```\n\n----------------------------------------\n\nTITLE: Implementing Flat Attribute Change Increase\nDESCRIPTION: Specialized resistance class for blocking attribute increase effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nFlatAttributeChangeIncrease(FlatAttributeChange):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating a Window for Rendering in C++\nDESCRIPTION: Creates a window with a title and dimensions that automatically determines whether to use OpenGL or Vulkan backend. By default, OpenGL is chosen.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nstd::shared_ptr<Window> window = Window::create(\"title\", 1024, 768);\n```\n\n----------------------------------------\n\nTITLE: Implementing Scoped Property for Modifiers in Python\nDESCRIPTION: Defines the Scoped property class that applies modifiers to specific sets of game entities based on diplomatic stances and scope.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nScoped(ModifierProperty):\n    stances : set(children(DiplomaticStance))\n    scope   : children(ModifierScope)\n```\n\n----------------------------------------\n\nTITLE: Implementing Activity Ability\nDESCRIPTION: Defines an ability that controls game entity behavior through a directed node graph.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nActivity(Ability):\n    graph: Activity\n```\n\n----------------------------------------\n\nTITLE: Defining Research Resource Cost Modifier in Python\nDESCRIPTION: The 'ResearchResourceCost' modifier adjusts the resource requirements for researchable technology, enhancing gameplay diversity by modifying how resources are managed in technology advancements.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nResearchResourceCost(Modifier):\n    resources     : set(Resource)\n    researchables : set(ResearchableTech)\n```\n\n----------------------------------------\n\nTITLE: Defining TransformPool in Python\nDESCRIPTION: Defines a pool for StateChanger objects where only one state change can be active per transform pool. Used to manage transformations of game entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_172\n\nLANGUAGE: python\nCODE:\n```\nTransformPool(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Repair Action Struct in C\nDESCRIPTION: Defines a C struct for the repair action (6e). It includes action identifier, selection count, repaired object ID, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nstruct repair {\n  uint8_t action_identifier;\n  uint8_t selection_count;\n  uint32_t repaired_id;\n  uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Any TerrainType for Universal Terrain Matching\nDESCRIPTION: Special TerrainType that can match any terrain, including those without an explicitly assigned type.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_167\n\nLANGUAGE: python\nCODE:\n```\nAny(TerrainType):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining AnimationOverride Class in Python\nDESCRIPTION: Class for overriding ability animations with priority control.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nAnimationOverride(Object):\n    ability    : abstract(Ability)\n    animations : set(Animation)\n    priority   : int\n```\n\n----------------------------------------\n\nTITLE: Defining AoE2TradeRoute in Python\nDESCRIPTION: Defines a trade route following Age of Empires 2 rules. Trading is based on distance between trade posts with a specific formula for calculating the traded resource amount.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_170\n\nLANGUAGE: python\nCODE:\n```\nAoE2TradeRoute(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Sorting Renderables into Layers with Different Priorities in C++\nDESCRIPTION: Demonstrates how renderables are automatically sorted into layers based on their assigned priorities, allowing for fine-grained control over the rendering order.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\npass->add_renderables({ obj1, obj2, obj3 }, 42);\npass->add_renderables({ obj4 }, 0);\npass->add_renderables({ obj5, obj6 }, 1337);\npass->add_renderables({ obj7 }, 0);\n// draw order: obj4, obj7, obj1, obj2, obj3, obj5, obj6\n// layers:     prio 0    | prio 42         | prio 1337\n```\n\n----------------------------------------\n\nTITLE: Defining Lock Ability in Python\nDESCRIPTION: Defines the Lock ability for a game entity, specifying lock pools which abilities with the Lock property can use.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nLock(Ability):\n    lock_pools : set(LockPool)\n```\n\n----------------------------------------\n\nTITLE: Implementing FlatAttributeChange Resistance Class in Python\nDESCRIPTION: Base class for handling flat attribute change resistances. Defines type and block_value properties for calculating resistance to attribute changes. Cannot be used directly and must be specialized.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nFlatAttributeChange(DiscreteResistance):\n    type        : children(AttributeChangeType)\n    block_value : set(AttributeAmount)\n```\n\nLANGUAGE: math\nCODE:\n```\napplied\\_value = change\\_value - block\\_value\n```\n\n----------------------------------------\n\nTITLE: Creating a Renderable in C++\nDESCRIPTION: Creates a Renderable object by combining a uniform input and a geometry object. Renderables represent objects that will be drawn on screen.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_7\n\nLANGUAGE: C++\nCODE:\n```\nRenderable obj {\n  input,\n  geom\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Use Contingent Ability in Python\nDESCRIPTION: Reserves temporary resources of a ResourceContingent. The resources are freed when the ability deactivates, utilizing a set of ResourceAmount.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nUseContingent(Ability):\n    amount : set(ResourceAmount)\n```\n\n----------------------------------------\n\nTITLE: Defining Visibility Ability in Python\nDESCRIPTION: Configures game entity visibility within the fog of war. Involves a boolean to determine fog visibility.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nVisibility(Ability):\n    visible_in_fog : bool\n```\n\n----------------------------------------\n\nTITLE: Defining Follow Action Structure in Ruby\nDESCRIPTION: Definition for unit following behavior. Includes action identifier, selection count, target unit ID to follow, and array of following unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/09-formation.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef Follow\n  int8 :action_identifier\n  int8 :selection_count\n  int16 :zero\n  int32 :followed_id\n  array :selection_ids,\n    type => :int32,\n    initial_length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Herd Ability in Python\nDESCRIPTION: Defines the Herd ability for a game entity, allowing it to change the ownership of other entities with the Herdable ability. It specifies range, strength, allowed types, and blacklisted entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nHerd(Ability):\n    range                : float\n    strength             : int\n    allowed_types        : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerSetup Class in Python\nDESCRIPTION: Configures a player's starting conditions including resources, modifiers, and customizations applied before the game starts.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_149\n\nLANGUAGE: python\nCODE:\n```\nPlayerSetup(Object):\n    name               : TranslatedString\n    description        : TranslatedMarkupFile\n    long_description   : TranslatedMarkupFile\n    leader_names       : set(TranslatedString)\n    modifiers          : set(Modifier)\n    starting_resources : set(ResourceAmount)\n    game_setup         : orderedset(Patch)\n```\n\n----------------------------------------\n\nTITLE: Defining Patrol Action Struct in C\nDESCRIPTION: Defines a C struct for the patrol action (15). It includes action identifier, selection count, waypoint count, coordinate arrays, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nstruct patrol {\n  uint8_t action_identifier;\n  uint8_t selection_count;\n  uint8_t patrol_waypoint_count;\n  float x_coords[10];\n  float y_coords[10];\n  uint32_t selection_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Python Bindings with pxdgen in CMake\nDESCRIPTION: Uses the pxdgen function to generate Python bindings for the tests.h header file. This allows the C++ code in tests.h to be accessible from Python through Cython.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/demo/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxdgen(\n\ttests.h\n)\n```\n\n----------------------------------------\n\nTITLE: Ungarrison Action Definition in Ruby\nDESCRIPTION: Defines the structure for unloading units from transports or buildings, with support for different ungarrison types.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/08-movement.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef Ungarrison\n  int8 :action_identifier\n  int8 :selection_count\n  int16 :zero\n  float :x_coord\n  float :y_coord\n  int8 :ungarrison_type\n  byte24 :zero2\n  int32 :release_id\n  array :selected_ids,\n\t\t:type => int32,\n\t\t:length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: InternalDropSite for Automatic Resource Collection\nDESCRIPTION: Defines the InternalDropSite class that extends ResourceContainer to automatically deposit stored resources into the player's global resource amount at regular intervals without requiring a physical drop site.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_155\n\nLANGUAGE: python\nCODE:\n```\nInternalDropSite(ResourceContainer):\n    update_time    : float\n```\n\n----------------------------------------\n\nTITLE: Defining PrimaryAction Structure in Ruby\nDESCRIPTION: Data structure definition for handling primary unit actions. Includes fields for action identifier, player ID, target coordinates, selected units, and other metadata required for processing right-click unit commands.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/07-primary_action.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef PrimaryAction\n    int8 :action_identifier\n    int8 :player_id\n    int16 :zero\n    int32 :target_id\n    int8 :selection_count\n    byte24 :zero2\n    float :x_coord\n    float :y_coord\n    array :selected_ids,\n      type => :int32,\n      length => :selection_count,\n      onlyif => :selection_count < 0xFF\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Relative Attribute Change\nDESCRIPTION: Effect class for time-based attribute modifications relative to max values.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nTimeRelativeAttributeChange(ContinuousEffect):\n    type              : children(AttributeChangeType)\n    total_change_time : float\n    ignore_protection : set(ProtectingAttribute)\n```\n\n----------------------------------------\n\nTITLE: Defining Back to Work Action Struct in C\nDESCRIPTION: Defines a C struct for the back to work action (80). It includes action identifier and building ID.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_33\n\nLANGUAGE: c\nCODE:\n```\nstruct back_to_work {\n  uint8_t action_identifier;\n  uint32_t building_id;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Deposit Resources on Progress Modifier in Python\nDESCRIPTION: This snippet defines the 'DepositResourcesOnProgress' modifier, which deposits resources into a player's resource pool based on the progress status reached by game entities. It includes parameters for progress status, the resources being deposited, and filters for affected and blacklisted game entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nDepositResourcesOnProgress(Modifier):\n    progress_status      : ProgressStatus\n    resources            : set(Resource)\n    affected_types       : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Technology ID Mapping Table in Markdown\nDESCRIPTION: A three-column table mapping hexadecimal research IDs to their decimal equivalents and technology names, including unit upgrades, building improvements, and age advancements.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/technology_ids.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nResearchID | Decimal | Name\n-----------|---------|-----------\n0x02       | 2       | Elite Tarkan\n0x08       | 8       | Town Watch\n0x0c       | 12      | Crop Rotation\n0x0d       | 13      | Heavy Plow\n0x0e       | 14      | Horse Collar\n0x0f       | 15      | Guilds\n0x11       | 17      | Banking\n0x13       | 19      | Cartography\n0x16       | 22      | Loom\n0x17       | 23      | Coinage\n0x1b       | 27      | Elite Kalmyuk\n0x22       | 34      | War Galley\n0x23       | 35      | Galleon\n0x25       | 37      | Cannon Galeon\n0x27       | 39      | Husbandry\n0x2d       | 45      | Faith\n0x2f       | 47      | Chemistry\n0x30       | 48      | Caravan\n0x32       | 50      | Masonry\n0x33       | 51      | Architecture\n0x36       | 54      | Treadmill Crane\n0x37       | 55      | Gold Mining\n0x3c       | 60      | Elite Conquistador\n0x3f       | 63      | Keep\n0x40       | 64      | Bombard Tower\n0x43       | 67      | Forging\n0x44       | 68      | Iron Casting\n0x4a       | 74      | Scale Mail Armor\n0x4b       | 75      | Blast Furnace\n0x4c       | 76      | Chain Mail Armor\n0x4d       | 77      | Plate Mail Armor\n0x50       | 80      | Plate Barding Armor\n0x51       | 81      | Scale Barding Armor\n0x52       | 82      | Chain Barding Armor\n0x5a       | 90      | Tracking\n0x5d       | 93      | Ballistics\n0x60       | 96      | Capped Ram\n0x62       | 98      | Elite Skirmisher\n0x64       | 100     | Crossbowman\n0x65       | 101     | Feudal Age\n0x66       | 102     | Castle Age\n0x67       | 103     | Imperial Age\n0x8c       | 140     | Guard Tower\n0xb6       | 182     | Gold Shaft Mining\n0xc2       | 194     | Fortified Wall\n0xc5       | 197     | Pikeman\n0xc7       | 199     | Fletching\n0xc8       | 200     | Bodkin Arrow\n0xc9       | 201     | Bracer\n0xca       | 202     | Double-Bit Axe\n0xcb       | 203     | Bow Saw\n0xcf       | 207     | Longswordsman\n0xd1       | 209     | Chevalier\n0xd3       | 211     | Padded Archer Armor\n0xd4       | 212     | Leather Archer Armor\n0xd5       | 213     | Wheelbarrow\n0xd7       | 215     | Squires\n0xd9       | 217     | Two-Handed Swordsman\n0xda       | 218     | Heavy Cavalry Archer\n0xdb       | 219     | Ring Archer Armor\n0xdd       | 221     | Two-Man Saw\n0xde       | 222     | Man-At-Arms\n0xe6       | 230     | Block Printing\n0xe7       | 231     | Sanctity\n0xe9       | 233     | Illumination\n0xec       | 236     | Heavy Camel\n0xed       | 237     | Arbelest\n0xef       | 238     | Heavy Scorpion\n0xf4       | 244     | Heavy Demolition Ship\n0xf6       | 246     | Heavy Fire Ship\n0xf9       | 249     | Hand Cart\n0xfc       | 252     | Fervor\n0xfe       | 254     | Light Cavalry\n0xff       | 255     | Siege Ram\n0x101      | 257     | Onager\n0x108      | 264     | Champion\n0x109      | 265     | Paladin\n0x116      | 278     | Stone Mining\n0x117      | 279     | Stone Shaft Mining\n0x118      | 280     | Town Patrol\n0x13b      | 315     | Conscription\n0x13c      | 316     | Redemption\n0x13f      | 319     | Atonement\n0x140      | 320     | Siege Onager\n0x141      | 321     | Sappers\n0x142      | 322     | Murder Holes\n0x168      | 360     | Elite Longbowman\n0x169      | 361     | Elite Cataphract\n0x16a      | 362     | Elite Cho Ko Nu\n0x16b      | 363     | Elite Throwing Axeman\n0x16d      | 364     | Elite Huscarl\n0x16c      | 365     | Elite Teutonic Knight\n0x16e      | 366     | Elite Samurai\n0x16f      | 367     | Elite War Elefant\n0x170      | 368     | Elite Mameluke\n0x171      | 369     | Elite Janissary\n0x172      | 370     | Elite Wood Raider\n0x173      | 371     | Elite Mangudai\n0x175      | 372     | Shipwright\n0x176      | 373     | Careening\n0x177      | 374     | Dry Dock\n0x178      | 375     | Elite Cannon Galleon\n0x179      | 376     | Siege Engineers\n0x17b      | 378     | Hoardings\n0x17c      | 379     | Heated Shot\n0x18e      | 398     | Elite Berserk\n0x198      | 408     | Spies\n0x1ac      | 428     | Husar\n0x1ad      | 429     | Helbardier\n0x1b0      | 432     | Elite Jaguar Warrior\n0x1b2      | 434     | Elite Eagle Warrior\n0x1b3      | 435     | Bloodlines\n0x1b4      | 436     | Parthian Tactics\n0x1b5      | 437     | Thumb Ring\n0x1b6      | 438     | Theocracy\n0x1b7      | 439     | Heresy\n0x1b9      | 441     | Herbal Medicine\n0x1c2      | 450     | Elite War Waggon\n```\n\n----------------------------------------\n\nTITLE: Defining ExchangeRate Class in Python for openage\nDESCRIPTION: Defines an exchange rate for resources in the ExchangeResources ability. It includes a base price, optional price adjustment methods, and an optional price pool for syncing prices across entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nExchangeRate(Object):\n    base_price   : float\n    price_adjust : optional(dict(ExchangeMode, PriceMode)) = None\n    price_pool   : optional(children(PricePool)) = None\n```\n\n----------------------------------------\n\nTITLE: Defining Variant Base Class in Python\nDESCRIPTION: Base class for variants that can change game entities when created. Defines changes as patches and includes a priority system to determine the order of patch application when multiple variants are chosen.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_173\n\nLANGUAGE: python\nCODE:\n```\nVariant(Object):\n    changes  : orderedset(Patch)\n    priority : int\n```\n\n----------------------------------------\n\nTITLE: Configuring C_Cpp Default Include Path in settings.json\nDESCRIPTION: JSON configuration for setting up the default include path in Visual Studio Code's C/C++ extension to enable proper header resolution.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ide/vscode.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"C_Cpp.default.includePath\": [\n    \"${default}\"\n]\n```\n\n----------------------------------------\n\nTITLE: Auxiliary Module Object Definitions\nDESCRIPTION: Defines new game engine objects and their hierarchies for the auxiliary module. Includes batch processing, property management, game entity ownership, and various game mechanics objects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/nyan_api/v0.3.0.md#2025-04-21_snippet_1\n\nLANGUAGE: nyan\nCODE:\n```\nEffectBatch(Entity)\nOrderedBatch(EffectBatch)\nUnorderedBatch(EffectBatch)\nChainedBatch(EffectBatch)\nBatchProperty(Entity)\nPriority(BatchProperty)\nChance(BatchProperty)\nOwnsGameEntity(Literal)\nStateChangeActive(Literal)\n```\n\n----------------------------------------\n\nTITLE: Wrapping C++ Functions for Python Use\nDESCRIPTION: Shows how to create a Cython wrapper for a C++ function to make it available in pure Python modules, including GIL release.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_5\n\nLANGUAGE: Cython\nCODE:\n```\nfrom libopenage.foo cimport foo as c_foo\n\ndef foo(int arg0, str arg1):\n    with nogil:\n        return c_foo(arg0, arg1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Diplomatic Property\nDESCRIPTION: Defines the Diplomatic property that restricts ability access based on diplomatic stances.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nDiplomatic(AbilityProperty):\n    stances : set(children(DiplomaticStance))\n```\n\n----------------------------------------\n\nTITLE: Defining Aggressive Stance Class in Python for openage\nDESCRIPTION: Represents an aggressive stance where the entity uses abilities or moves to the nearest target, searching for new targets when the current one is out of sight.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nAggressive(GameEntityStance):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring openage for Release Build\nDESCRIPTION: Command for configuring openage in release mode with the clang compiler and installation prefix. This setup is used when preparing the project for distribution or packaging.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/building.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./configure --mode=release --compiler=clang --prefix=/usr/local\n```\n\n----------------------------------------\n\nTITLE: Building openage for debugging\nDESCRIPTION: Compiles the openage project using make after it has been configured for debugging.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/debug.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Setting Optional Build Features for OpenAge\nDESCRIPTION: Configures optional build features with default values that can be overridden during configuration. These options control which dependencies are required or optional.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# options: keep up to date with those in ./configure!\nif(NOT DEFINED WANT_BACKTRACE)\n\tset(WANT_BACKTRACE if_available)\nendif()\n\nif(NOT DEFINED WANT_INOTIFY)\n\tset(WANT_INOTIFY if_available)\nendif()\n\nif(NOT DEFINED WANT_OPENGL)\n\tset(WANT_OPENGL if_available)\nendif()\n\nif(NOT DEFINED WANT_VULKAN)\n\tset(WANT_VULKAN if_available)\nendif()\n\nif(NOT DEFINED WANT_GPERFTOOLS_PROFILER)\n\tset(WANT_GPERFTOOLS_PROFILER if_available)\nendif()\n\nif(NOT DEFINED WANT_GPERFTOOLS_TCMALLOC)\n\tset(WANT_GPERFTOOLS_TCMALLOC false)\nendif()\n\nif(NOT DEFINED WANT_NCURSES)\n\tset(WANT_NCURSES if_available)\nendif()\n\nif(NOT DEFINED WANT_IWYU)\n\tset(WANT_IWYU false)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Training Action Struct in C\nDESCRIPTION: Defines a C struct for the training action (77). It includes action identifier, building ID, unit ID, and train count.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_27\n\nLANGUAGE: c\nCODE:\n```\nstruct train {\n  uint8_t :action_identifier;\n  uint32_t :building_id;\n  uint16_t :unit_id;\n  uint16_t :train_count;\n};\n```\n\n----------------------------------------\n\nTITLE: Garrison Action Definition in Ruby\nDESCRIPTION: Defines the structure for garrisoning units into buildings and handling trebuchet pack/unpack actions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/08-movement.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef Garrison\n  int8 :action_identifier\n  int8 :selection_count\n  int16 :zero\n  int32 :building_id\n  int8 :garrison_type\n  byte24 :zero\n  float :x_coord\n  float :y_coord\n  int32 :const\n  array :selected_ids,\n\t\t:type => int32,\n\t\t:length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Patch Object Wrapper Python\nDESCRIPTION: Provides additional configuration for nyan patches through properties. Requires a patch parameter.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_104\n\nLANGUAGE: python\nCODE:\n```\nPatch(Object):\n    properties : dict(abstract(PatchProperty), PatchProperty) = {}\n    patch      : children(NyanPatch)\n```\n\n----------------------------------------\n\nTITLE: AoE2 Trade Amount Calculation Formula\nDESCRIPTION: Mathematical formula used to calculate trade amount in Age of Empires 2 trade routes. The amount depends on the distance between trade posts and the overall map size.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_171\n\nLANGUAGE: math\nCODE:\n```\ntrade\\_amount = 0.46 \\cdot tiles\\_distance \\cdot ((tiles\\_distance / map\\_size) + 0.3)\n```\n\n----------------------------------------\n\nTITLE: Creating ApplyContinuousEffect Ability\nDESCRIPTION: Implements an ability for applying continuous effects to game entities with type restrictions and delays.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nApplyContinuousEffect(Ability):\n    effects              : set(ContinuousEffect)\n    application_delay    : float\n    allowed_types        : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Stop Action Definition in Ruby\nDESCRIPTION: Defines the structure for stopping units from their current task or research. Includes action identifier, selection count and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/08-movement.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef Stop\n  int8 :action_identifier\n  int8 :selection_count\n  array :selected_ids,\n        type => :int32,\n        initial_length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: Using Make with Multiple Cores on macOS\nDESCRIPTION: Command to utilize all available CPU cores when building openage on macOS. This uses the sysctl command to detect the number of CPU cores and passes it to make's -j option.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/building.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake -j$(sysctl -n hw.ncpu)\n```\n\n----------------------------------------\n\nTITLE: Calculating Additional Projectiles for Bombard Towers in AoE2\nDESCRIPTION: This pseudocode demonstrates the special calculation for additional projectiles fired by Bombard Towers in Age of Empires II. It accounts for the unique rules applied to these structures, including the requirement for gunpowder units and a different calculation for the first additional projectile.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/garrison.md#2025-04-21_snippet_1\n\nLANGUAGE: pseudocode\nCODE:\n```\n    remaining_unit_dps = sum(unit_dps_pierce) - (building_dps * 2);\n\n    if(remaining_unit_dps >= 0) {\n        additional_arrows = 1 + (remaining_unit_dps / building_dps);\n    }\n    else {\n        additional_arrows = 0;\n    }\n```\n\n----------------------------------------\n\nTITLE: Showing Unit Sorting Direction in Subformations\nDESCRIPTION: ASCII diagram illustrating how units are sorted into a formation starting from the top-left position. The '>' symbol indicates the starting position and direction of unit placement within the formation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n............\n...^^^^^^...\n..>RRRRRR...\n...RRRRRR...\n............\n```\n\n----------------------------------------\n\nTITLE: Implementing CollectStorage Ability in Python\nDESCRIPTION: Enables game entities to store other specified entities in their containers. Requires a Storage ability with matching container.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nCollectStorage(Ability):\n    container        : EntityContainer\n    storage_elements : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Determining ResourceSpotsDepleted Literal Python\nDESCRIPTION: Checks for depletion of resource spots within all `Harvestable` abilities. Only considers enabled spots if only_enabled flag is true.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_85\n\nLANGUAGE: python\nCODE:\n```\nResourceSpotsDepleted(Literal):\n    only_enabled : bool\n```\n\n----------------------------------------\n\nTITLE: Implementing Convert Resistance\nDESCRIPTION: Resistance class for handling conversion effects with chance-based resistance.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nConvert(DiscreteResistance):\n    type          : children(ConvertType)\n    chance_resist : float\n```\n\n----------------------------------------\n\nTITLE: Defining ResourceAmount Class in Python\nDESCRIPTION: Represents a fixed amount of a specific resource type. Used to define resource quantities for costs and rewards.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_143\n\nLANGUAGE: python\nCODE:\n```\nResourceAmount(Object):\n    type   : Resource\n    amount : int\n```\n\n----------------------------------------\n\nTITLE: Example of Tab-Space Mixed Indentation in C++\nDESCRIPTION: Demonstrates the recommended code style using tabs for indentation and spaces for alignment in C++ code. The example shows how this approach maintains both adjustable tab-width and consistent alignments.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code_style/tabs_n_spaces.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n--->  == tab\n.     == space\n\nclass LØL {\n--->int gschicht;\n\n--->void add_gschicht(struct my_struct_with_long_name *ie,\n--->..................int addition) {\n--->--->this->gschicht += ie->member + addition;\n--->}\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ModifierScope Object Python\nDESCRIPTION: A base class for defining scopes of `Modifier` properties in the openage project.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_94\n\nLANGUAGE: python\nCODE:\n```\nModifierScope(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing CreationResourceCost Modifier in Python\nDESCRIPTION: Defines the CreationResourceCost modifier class that changes resource costs for creating game entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nCreationResourceCost(Modifier):\n    resources  : set(Resource)\n    creatables : set(CreatableGameEntity)\n```\n\n----------------------------------------\n\nTITLE: Implementing SUBSETMIN LogicGate Python\nDESCRIPTION: Evaluates to true if at least a specified number of inputs are true. Inherits from LogicGate.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_74\n\nLANGUAGE: python\nCODE:\n```\nSUBSETMIN(LogicGate):\n    size : int\n```\n\n----------------------------------------\n\nTITLE: Renderer Type Conversion Flow Diagram\nDESCRIPTION: ASCII diagram showing conversion paths from scene and viewport coordinates to renderer-specific coordinate types used with Eigen vectors.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/coordinate-systems.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nscene2 ----> world space (Eigen::Vector2f)\n   |\n   |\nscene3 ----> world space (Eigen::Vector3f)\n   |\n   |\nviewport --> normalized device space (Eigen::Vector2f)\n```\n\n----------------------------------------\n\nTITLE: Defining Subformation Class in Python for openage\nDESCRIPTION: Represents a subdivision of a formation, defining the structure and placement of game entities. It includes an ordering priority for placement within the formation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nSubformation(Object):\n    ordering_priority : int\n```\n\n----------------------------------------\n\nTITLE: Defining LockPool Class in Python for openage\nDESCRIPTION: Used by abilities to block each other, with a defined number of slots that can be occupied by abilities with the Lock property when they execute.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nLockPool(Object):\n    slots : int\n```\n\n----------------------------------------\n\nTITLE: Mixed Unit Type Distribution in AoE2 Subformations\nDESCRIPTION: ASCII diagram showing how different unit types (archers 'A' and skirmishers 'S') are distributed within a formation. The game alternates between unit types when placing them in rows until one type is depleted.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n............\n...^^^^^^...\n..>ASASSS...\n...SSSSSS...\n............\n```\n\n----------------------------------------\n\nTITLE: Defining DRS File Info Structure in C++\nDESCRIPTION: C++ struct definition for individual file entries in DRS tables containing file ID, offset and size information.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/drs-files.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstruct drs_file_info {\n\tint32 file_id;\n\tint32 file_data_offset;\n\tint32 file_size;\n};\n```\n\n----------------------------------------\n\nTITLE: Checking 3D Object Visibility with Frustum Culling\nDESCRIPTION: Shows how to check if a 3D object at a given position is visible within the camera's 3D frustum. This enables culling of objects outside the camera view to improve rendering performance.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level2.md#2025-04-21_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nbool is_visible = frustum_3d.is_visible({0.f, 0.f, 0.f});\n```\n\n----------------------------------------\n\nTITLE: EntityContainer for Defining Storage Capabilities of Game Entities\nDESCRIPTION: Defines the EntityContainer class used by the Storage ability to specify which game entity types can be stored, how many slots are available, and how stored entities affect the container entity.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_153\n\nLANGUAGE: python\nCODE:\n```\nEntityContainer(Object):\n    allowed_types        : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n    storage_element_defs : set(StorageElementDefinition)\n    slots                : int\n    carry_progress       : set(Progress)\n```\n\n----------------------------------------\n\nTITLE: Defining Waypoints Structure for AI Player in Ruby\nDESCRIPTION: Defines the structure for setting multiple waypoints for AI units, including unit selection and coordinate arrays.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/14-ai.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef WaypointsAI\n  int8 :action_identifier\n  int8 :selection_count\n  int8 :waypoint_count\n  array :selected_ids,\n        type => :int32,\n        initial_length => :selection_count\n  array :x_coords,\n        type => :int8,\n        initial_length => :waypoint_count\n  array :y_coords,\n        type => :int8,\n        initial_length => :waypoint_count\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Gathering Rate Modifier in Python\nDESCRIPTION: This modifier changes the gathering rate of a game entity's Gather ability for a specific resource spot. This allows for flexible resource management based on gameplay dynamics.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nGatheringRate(Modifier):\n    resource_spot : ResourceSpot\n```\n\n----------------------------------------\n\nTITLE: Combat Formation ASCII Demonstration\nDESCRIPTION: ASCII art showing how troops (marked as X) maneuver around enemy formations (marked as Y) during combat engagement. Demonstrates pathfinding behavior when units encounter enemy formations and how they attempt to surround them.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/pathfinding.md#2025-04-21_snippet_1\n\nLANGUAGE: ascii\nCODE:\n```\n..............      ..............      ..............      ..............\n..............      ..............      ..............      ....X....X....\n....YYYYYY.... ---> ....YYYYYY.... ---> ....YYYYYY.... ---> ...XYYYYYYX...\n.............. ---> ....XXXXXX.... ---> ...XXXXXXXX... ---> ...XXXXXXXX...\n....XXXXXX....      ....XXXXXX....      ....XX..XX....      ..............\n....XXXXXX....      ..............      ..............      ..............\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion Effect Implementation\nDESCRIPTION: Effect class for changing unit ownership with success chance calculations and cost on failure.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nConvert(DiscreteEffect):\n    type               : children(ConvertType)\n    min_chance_success : optional(float) = None\n    max_chance_success : optional(float) = None\n    chance_success     : float\n    cost_fail          : optional(Cost) = None\n```\n\n----------------------------------------\n\nTITLE: Implementing Follow MoveMode Python\nDESCRIPTION: Follows a game entity at a specified range with an adjusted movement speed, independent of `GameEntityStance`. Requires range as a parameter.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_99\n\nLANGUAGE: python\nCODE:\n```\nFollow(MoveMode):\n    range : float\n```\n\n----------------------------------------\n\nTITLE: Implementing Formation Ability in Python\nDESCRIPTION: Allows entities to participate in specified formation types.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nFormation(Ability):\n    formations : set(GameEntityFormation)\n```\n\n----------------------------------------\n\nTITLE: Implementing GameEntityProgress Literal Python\nDESCRIPTION: Evaluates to true when a game entity reaches a specified progress status. Parameters include game_entity and status.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nGameEntityProgress(Literal):\n    game_entity : GameEntity\n    status   ́  : ProgressStatus\n```\n\n----------------------------------------\n\nTITLE: Defining Follow Action Struct in C\nDESCRIPTION: Defines a C struct for the follow action (14). It includes action identifier, selection count, followed unit ID, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nstruct follow {\n  uint8_t action_identifier;\n  uint8_t selection_count;\n  uint32_t followed_id;\n  uint32_t selection_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Calling C++ Functions with Python Objects\nDESCRIPTION: Demonstrates how to create C++ objects in Cython, wrap Python objects, and pass them to C++ functions for callback functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n// pxd: from libcpp.string cimport string\n#include <string>\n\n// pxd: from libopenage.pyinterface.pyobject cimport PyObj\n#include \"libopenage/pyinterface/pyobject.h\"\n\n\n/**\n * pxd:\n *\n * cppclass demo_struct:\n *     PyObj obj\n *     string text\n */\nstruct OAAPI demo_struct {\n    py::PyObj obj;\n    std::string text;\n};\n\n/**\n * pxd: int cpp_function(lol_struct arg, int another_arg) except +\n */\nvoid cpp_function(lol_struct &arg, int another_arg) {\n    // native data can directly be used\n    std::cout << \"native_arg: \" << arg.text << std::endl;\n\n    // call the python\n    // with automatic argument conversion!\n    std::cout << \"python call: \"\n        << arg.obj->getattr(\"py_func\").call(\"some binary\", another_arg).str()\n        << std::endl;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stacked Property for Modifiers in Python\nDESCRIPTION: Defines the Stacked property class that limits how often a modifier can be applied to the same game entity.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nStacked(ModifierProperty):\n    stack_limit : int\n```\n\n----------------------------------------\n\nTITLE: Creating TimeRelativeAttributeChange Modifier in Python\nDESCRIPTION: Defines the TimeRelativeAttributeChange modifier class that changes the total_change_time of TimeRelativeAttributeChange effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nTimeRelativeAttributeChange(Modifier):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Building OpenAge on macOS with Homebrew\nDESCRIPTION: Commands for installing dependencies using Homebrew and building openage on macOS systems.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/editor/scripting.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew update\nbrew install coreutils\nbrew install cmake freetype fontconfig harfbuzz libepoxy libpng\\\n    libsodium sdl2 sdl2_image opus opusfile qt5\nbrew install python@3\n\ngit clone https://github.com/SFTtech/openage\ncd openage\n./configure\nmake -j$(sysctl -n hw.ncpu)\n./run game\n```\n\n----------------------------------------\n\nTITLE: Flat Attribute Change Effect Implementation\nDESCRIPTION: Base class for effects that modify resistor attributes by a flat amount with optional bounds.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nFlatAttributeChange(DiscreteEffect):\n    type              : children(AttributeChangeType)\n    min_change_value  : optional(AttributeAmount) = None\n    max_change_value  : optional(AttributeAmount) = None\n    change_value      : AttributeAmount\n    ignore_protection : set(ProtectingAttribute)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lure Effect\nDESCRIPTION: Effect class for making targets move towards specified game entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nLure(ContinuousEffect):\n    type                        : children(LureType)\n    destination                 : set(GameEntity)\n    min_distance_to_destination : float\n```\n\n----------------------------------------\n\nTITLE: Configuring Core Dependencies with CMake Find Packages\nDESCRIPTION: Detects and configures required system dependencies using CMake find_package commands\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(toml11 REQUIRED)\nfind_package(Freetype REQUIRED)\nfind_package(PNG REQUIRED)\nfind_package(Opusfile REQUIRED)\nfind_package(Epoxy REQUIRED)\nfind_package(HarfBuzz 1.0.0 REQUIRED)\nfind_package(Eigen3 3.3 REQUIRED NO_MODULE)\n\nset(CMAKE_THREAD_PREFER_PTHREAD TRUE)\nfind_package(Threads REQUIRED)\n\nset(QT_VERSION_REQ \"6.2\")\nfind_package(Qt6 ${QT_VERSION_REQ} REQUIRED COMPONENTS Core Quick Multimedia)\n```\n\n----------------------------------------\n\nTITLE: Visual Blending Pattern Reference\nDESCRIPTION: ASCII art representation showing how different mask patterns appear in-game.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/blendmask_format_spec.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n    id:   2              8             32             128\n          NE             SE            SW             NW\n\n          0              0              0              #\n        00000          00000          00000          #####\n      00000000#      000000000      #00000000      000###000\n    000000000####  0000000000000  ####000000000  0000000000000\n      00000000#      000###000      #00000000      000000000\n        00000          #####          00000          00000\n          0              #              0              0\n```\n\n----------------------------------------\n\nTITLE: Defining Guard MoveMode Python\nDESCRIPTION: Enables a game entity to follow and defend another entity within a specified range. It doesn't factor in `GameEntityStance`. Requires range parameter.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_100\n\nLANGUAGE: python\nCODE:\n```\nGuard(MoveMode):\n    range : float\n```\n\n----------------------------------------\n\nTITLE: Defining Continuous Effect Base Class\nDESCRIPTION: Base class for effects applied at a per-second rate.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nContinuousEffect(Effect):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Terrain Definition for Game World Surfaces\nDESCRIPTION: Defines properties of different terrain types in the game world, including visuals, sounds, ambient objects, and movement costs for different path types.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_164\n\nLANGUAGE: python\nCODE:\n```\nTerrain(Object):\n    types           : set(children(TerrainType))\n    name            : TranslatedString\n    terrain_graphic : Terrain\n    sound           : Sound\n    ambience        : set(TerrainAmbient)\n    path_costs      : dict(children(PathType), int)\n```\n\n----------------------------------------\n\nTITLE: Implementing Construct Progress Type in Python\nDESCRIPTION: Defines a progress type that monitors construction progress of game entities with the Constructable ability. Progress ranges from 0% (unconstructed) to 100% (fully constructed).\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_136\n\nLANGUAGE: python\nCODE:\n```\nConstruct(ProgressType):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining PassiveTransformTo Ability in Python\nDESCRIPTION: Defines the PassiveTransformTo ability for a game entity, activating a state change when a condition is fulfilled. It specifies condition, transform time, target state, and transform progress.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nPassiveTransformTo(Ability):\n    condition          : set(LogicElement)\n    transform_time     : float\n    target_state       : StateChanger\n    transform_progress : set(Progress)\n```\n\n----------------------------------------\n\nTITLE: Defining Formation Class in Python for openage\nDESCRIPTION: Represents an organizational structure for multiple game entities, consisting of subformations which are subdivisions of the formation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\nFormation(Object):\n    subformations : set(Subformation)\n```\n\n----------------------------------------\n\nTITLE: Defining RallyPoint Ability in Python\nDESCRIPTION: Defines the RallyPoint ability for a game entity, allowing it to set a rally point on the map for spawned or ejected entities to move to.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\nRallyPoint(Ability):\n    pass\n```\n\n----------------------------------------\n\nTITLE: TradeRoute for Defining Trading Relationships\nDESCRIPTION: Defines trade routes between two game entities with trade posts, specifying which resource is being traded and the route endpoints.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_168\n\nLANGUAGE: python\nCODE:\n```\nTradeRoute(Object):\n    trade_resource    : Resource\n    start_trade_post  : GameEntity\n    end_trade_post    : GameEntity\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Relative Path References in openage\nDESCRIPTION: Examples of relative path references that can be used to refer to files within the same modpack. These paths are relative to the location of the file they are defined in and cannot reference resources in other modpacks.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/file_referencing.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"idle.png\"         # idle.png is in the same folder as the referencing file\n\"./idle.png\"       # same as above, but more explicit\n\"media/attack.png\" # attack.png is in the subfolder 'media', relative to the referencing file\n```\n\n----------------------------------------\n\nTITLE: Time Progress Decrease Effect Implementation in Python\nDESCRIPTION: Specialization class for decreasing time-relative progress of a resistor over time relative to 100%.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nTimeRelativeProgressDecrease(TimeRelativeProgressChange):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Flat Attribute Decrease Effect Implementation\nDESCRIPTION: Specialization for decreasing attributes by a flat amount.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nFlatAttributeChangeDecrease(FlatAttributeChange):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining HerdableMode Class in Python for openage\nDESCRIPTION: Used by the Herdable ability to determine ownership of herdables.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nHerdableMode(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing MULTIXOR LogicGate Python\nDESCRIPTION: Represents a MULTIXOR gate that evaluates to true if an uneven number of inputs are true. Inherits from LogicGate.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nMULTIXOR(LogicGate):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Guard Action Structure in Ruby\nDESCRIPTION: Structure for implementing unit guarding behavior. Contains action identifier, selection count, target unit ID, and array of guarding unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/09-formation.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef Guard\n  int8 :action_identifier\n  int8 :selection_count\n  int16 :zero\n  int32 :guarded_id\n  array :selected_ids,\n    type => :int32,\n    initial_length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: CurrentPosition Target Mode for Projectiles\nDESCRIPTION: Defines a targeting mode where projectiles aim at the position where the target was when the projectile was launched, without accounting for target movement.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_158\n\nLANGUAGE: python\nCODE:\n```\nCurrentPosition(TargetMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating Terrain Modifier for FlatAttributeChange in Python\nDESCRIPTION: Defines the Terrain modifier class that changes FlatAttributeChange effects based on the terrain of the target entity.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nTerrain(Modifier):\n    terrain : Terrain\n```\n\n----------------------------------------\n\nTITLE: Implementing AbsoluteProjectileAmount Modifier in Python\nDESCRIPTION: Defines the AbsoluteProjectileAmount modifier class that increases projectile amount for ShootProjectile abilities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nAbsoluteProjectileAmount(Modifier):\n    amount : float\n```\n\n----------------------------------------\n\nTITLE: Move Action Definition in Ruby\nDESCRIPTION: Defines the structure for moving units on the map, including player ID, coordinates, and unit selection information.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/08-movement.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef Move\n\tint8 :action_identifier\n\tint8 :player_id\n\tint16 :zero\n\tint32 :const\n\tint32 :selection_count\n\tfloat :x_coord\n\tfloat :y_coord\n\tarray :selected_ids,\n\t\t:length => :selection_count,\n \t\t:only_if => :selection_count < 0xFF\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing ContinuousResource Modifier in Python\nDESCRIPTION: Defines the ContinuousResource modifier class that provides a continuous trickle of resources.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nContinuousResource(Modifier):\n    rates : set(ResourceRate)\n```\n\n----------------------------------------\n\nTITLE: Defining Patrol Action Structure in Ruby\nDESCRIPTION: Structure for unit patrol behavior. Contains action identifier, selection count, waypoint coordinates arrays, and patrolling unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/09-formation.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef Patrol\n  int8 :action_identifier\n  int8 :selection_count\n  int8 :patrol_waypoint_count\n  int8 :zero\n  array :x_coords,\n    type => :float,\n    length => 10\n  array :y_coords,\n    type => :float,\n    length => 10\n  array :selection_ids,\n    type => :int32,\n    initial_length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Python Function for C++ Integration\nDESCRIPTION: Example Python function that will be called from C++. Takes an integer and string argument and returns a float.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef bar(arg0, arg1):\n    \"\"\"\n    This function involves rainbows and unicorns.\n    arg0 shall be an integer, and arg1 a string.\n    \"\"\"\n    return 6.283185307179586\n```\n\n----------------------------------------\n\nTITLE: Updating Uniform Buffer Input in C++\nDESCRIPTION: Shows how to update existing uniform buffer input values with new data.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_25\n\nLANGUAGE: c++\nCODE:\n```\nbuff_input->update(\n  \"condition\", false\n);\n```\n\n----------------------------------------\n\nTITLE: Creating EntityContainerCapacity Modifier in Python\nDESCRIPTION: Defines the EntityContainerCapacity modifier class that changes the size of EntityContainer objects in Storage abilities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nEntityContainerCapacity(Modifier):\n    container : EntityContainer\n```\n\n----------------------------------------\n\nTITLE: Defining Research Action Structure in Ruby\nDESCRIPTION: Defines the data structure for researching technologies in buildings. It includes fields for action identifier, building ID, player number, technology ID, and constant values.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/11-buildings.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef Research\n  int8 :action_identifier\n  int24 :zero\n  int32 :building_id\n  int8 :player_number\n  int8 :zero2\n  int16 :technology_id\n  int32 :const\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Gource Visualization for openage Project\nDESCRIPTION: Command to run Gource with specific parameters to create a visualization of the openage project's Git history. It configures visualization settings like camera mode, timing, background color, and adds the project logo.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/evolution-openage-gource.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngource --camera-mode overview --title https://openage.dev --seconds-per-day 0.05 --auto-skip-seconds 0.1 --max-file-lag 0.1 --file-idle-time 0 --background 555544 --logo <logo.png> --font-size 15 --date-format \"%B %Y\" --hide filenames, mouse -1920x1080 -o <outputfile-name.ppm> <../path to git directory>\n```\n\n----------------------------------------\n\nTITLE: Distance-Based Accuracy Visualization\nDESCRIPTION: ASCII visualization showing accuracy percentages at different tile distances for Elite Longbowman targeting a standing unit. Demonstrates how accuracy decreases with distance but approaches a minimum threshold of around 80%.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/accuracy.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n......................................\n...1 Tile....oX.......................  100   % accuracy\n......................................\n...2 Tiles...o.X......................  100   % accuracy\n......................................\n...3 Tiles...o..X.....................  96.63 % accuracy\n......................................\n...4 Tiles...o...X....................  91.90 % accuracy\n......................................\n...6 Tiles...o.....X..................  87.82 % accuracy\n......................................\n...12 Tiles..o...........X............  83.17 % accuracy\n......................................\n...21 Tiles..o....................X...  81.77 % accuracy\n......................................\n```\n\n----------------------------------------\n\nTITLE: Resign Action Protocol Definition in Ruby\nDESCRIPTION: Defines the binary protocol for player resignation and disconnection actions. Includes player identification and disconnect status flags.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/13-other.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef Resign\n  int8 :action_identifier\n  int8 :player_number\n  int8 :player_id\n  int32 :disconnect\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Chat Message Structure in Ruby\nDESCRIPTION: Ruby implementation defining the structure of a chat message packet in AoC. Includes header, player identification, message routing, and content fields. Also handles memory alignment specifics of the Genie Engine.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/05-chat_protocol.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef ChatMessage\n  byte20 :header\n  int8 :player_id\n  int8 :send_button\n  array :intended_receivers,\n        type => :char,\n        initial_length => 8\n  int8 :separator\n  int8 :zero\n  int8 :message_length\n  int32 :zero2\n  array :message_string,\n        type => :char,\n        initial_length => :message_length + 1\n  int32 :unaligned_memory\nend\n```\n\n----------------------------------------\n\nTITLE: BC4 Block Structure Definition\nDESCRIPTION: C++ struct definition for BC4 compressed block format. Contains two 8-bit reference colors and a 6-byte array for pixel indices.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nstruct bc4_block {\n  uint8 color0;\n  uint8 color1;\n  uint8 pixel_indices[6];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Herdable Ability in Python\nDESCRIPTION: Defines the Herdable ability for a game entity, allowing it to switch ownership when in range of an entity with the Herd ability. It specifies adjacent discover range and herdable mode.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nHerdable(Ability):\n    adjacent_discover_range : float\n    mode                    : HerdableMode\n```\n\n----------------------------------------\n\nTITLE: Verifying StateChangeActive Literal Python\nDESCRIPTION: Activates when a game entity's specified state changer is active. The state_change parameter should be set.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nStateChangeActive(Literal):\n    state_change : StateChanger\n```\n\n----------------------------------------\n\nTITLE: Implementing AND LogicGate Python\nDESCRIPTION: Represents an AND gate that evaluates to true if all input elements are true. Inherits from LogicGate.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_69\n\nLANGUAGE: python\nCODE:\n```\nAND(LogicGate):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining LureType Object Python\nDESCRIPTION: Used in conjunction with `Lure` effects and resistances for matching capabilities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_92\n\nLANGUAGE: python\nCODE:\n```\nLureType(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Wrap and Unwrap Structs for ResourceAmount in C++\nDESCRIPTION: Shows the implementation of Wrap and Unwrap structs for connecting ResourceAmount C++ class with its QML counterpart.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/gui.md#2025-04-21_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nnamespace qtgui {\ntemplate<>\nstruct Wrap<ResourceAmount> {\n\tusing Type = ResourceAmountLink;\n};\n\ntemplate<>\nstruct Unwrap<ResourceAmountLink> {\n\tusing Type = ResourceAmount;\n};\n} // namespace qtgui\n```\n\n----------------------------------------\n\nTITLE: Implementing ElevationDifferenceHigh Modifier in Python\nDESCRIPTION: Defines the ElevationDifferenceHigh modifier class that changes FlatAttributeChange effects based on elevation difference.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nElevationDifferenceHigh(Modifier):\n    min_elevation_difference : optional(float) = None\n```\n\n----------------------------------------\n\nTITLE: Implementing Transform Progress Type in Python\nDESCRIPTION: Creates a progress type that monitors transformation progress initiated by Transform abilities. Progress ranges from 0% (start) to 100% (complete).\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_139\n\nLANGUAGE: python\nCODE:\n```\nTransform(ProgressType):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Stance Action Structure in Ruby\nDESCRIPTION: Definition for changing unit stance behavior. Includes action identifier, selection count, stance type, and array of selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/09-formation.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef Stance\n  int8 :action_identifier\n  int8 :selection_count\n  int8 :stance\n  array :selected_ids,\n    type => :int32,\n    initial_length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: Defining ResearchableTech Class in Python\nDESCRIPTION: Defines a class for researching technologies with the Research ability. It specifies costs, research time, sound effects, and preconditions for technology research.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_140\n\nLANGUAGE: python\nCODE:\n```\nResearchableTech(Object):\n    tech            : Tech\n    cost            : Cost\n    research_time   : float\n    research_sounds : set(Sound)\n    condition       : set(LogicElement)\n```\n\n----------------------------------------\n\nTITLE: Flat Attribute Increase Effect Implementation\nDESCRIPTION: Specialization for increasing attributes by a flat amount.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nFlatAttributeChangeIncrease(FlatAttributeChange):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Turning Ability in Python\nDESCRIPTION: Enables a game entity to turn on the spot at a specified speed. The speed can be set to 'inf' for instantaneous turning.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nFly(Ability):\n    turn_speed : float\n```\n\n----------------------------------------\n\nTITLE: Running Stresstest 0 - Object Rendering Performance\nDESCRIPTION: Command to run the stresstest for rendering performance with increasing object count.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/demos.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./bin/run test --demo renderer.tests.stresstest 0\n```\n\n----------------------------------------\n\nTITLE: Calculating RGB Multiplier for Damage Effect in Python\nDESCRIPTION: Python function to calculate the RGB multiplier used for darkening pixels based on the damage modifier and current damage percentage of a unit or building.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_rgb_multiplier(damage_modifier, current_damage_percent):\n    damage_window_99_to_50 = current_damage_percent * 2\n    damage_window_74_to_25 = damage_window_99_to_50 - 0.5\n    damage_window_49_to_0 =  damage_window_74_to_25 - 0.5\n\n    damage_window_99_to_50 = min(max(damage_window_99_to_50, 0.0), 1.0)\n    damage_window_74_to_25 = min(max(damage_window_74_to_25, 0.0), 1.0)\n    damage_window_49_to_0 = min(max(damage_window_49_to_0, 0.0), 1.0)\n\n    a = math.floor(damage_modifier / 64)\n    temp = damage_modifier - 64 * a + 0.5\n    b = math.floor(temp / 8)\n    c = temp - 8 * b\n\n    a = a * damage_window_99_to_50\n    b = b * damage_window_74_to_25\n    c = c * damage_window_49_to_0\n\n    sigmoid_result = (a + b + c) / 7\n    sigmoid_result = min(max(sigmoid_result, 0.0), 0.65)\n\n    rgb_multiplier = 1 - sigmoid_result\n\n    return rgb_multiplier\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Change Decrease Effect\nDESCRIPTION: Specialization for decreasing attribute values at a constant rate.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nFlatAttributeChangeDecrease(FlatAttributeChange):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Referencing Data File Path for Game Data Conversion in OpenAge\nDESCRIPTION: File path reference to the module that handles parsing of .dat files from various games. This is where the format specifications for different game data files are defined.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/convert/nyan.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`openage/convert/value_object/read/media/datfile/` specifies the format of the `.dat` from various games.\n```\n\n----------------------------------------\n\nTITLE: Implementing ApplyDiscreteEffect Ability\nDESCRIPTION: Defines an ability for applying discrete effect batches to game entities with reload times and delays.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nApplyDiscreteEffect(Ability):\n    batches              : set(EffectBatch)\n    reload_time          : float\n    application_delay    : float\n    allowed_types        : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Pixel Block Construction with Python\nDESCRIPTION: Algorithm for constructing a 4x4 pixel block from BC1 compressed data using bitwise operations. Iterates through pixel indices and looks up corresponding colors from the lookup table.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npixels = []\nbitmask = 0b11\nfor shift in range(16):\n    bc1_idx = pixel_indices & bitmask\n    col = lookup_table[bc1_idx]\n    pixels.append(col)\n    pixel_indices = pixel_indices >> 2\n```\n\n----------------------------------------\n\nTITLE: Defining Patrol MoveMode Python\nDESCRIPTION: Allows setting multiple waypoints for entity patrols on the map. Considers `GameEntityStance` during movement.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_102\n\nLANGUAGE: python\nCODE:\n```\nPatrol(MoveMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Ability in Python\nDESCRIPTION: Adds collision detection to game entities by defining a hitbox with 3D dimensions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nCollision(Ability):\n    hitbox : Hitbox\n```\n\n----------------------------------------\n\nTITLE: Defining Idle Ability in Python\nDESCRIPTION: Defines the Idle ability for a game entity, used for assigning animations and sounds to entities in an idle state.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nIdle(Ability):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running openage with GDB and setting breakpoints\nDESCRIPTION: Launches GDB with the openage executable, sets a breakpoint at the run_game function, and starts the application. This command allows debugging the C++ code with predefined breakpoints.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/debug.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngdb -ex 'set breakpoint pending on' -ex 'b openage::run_game' -ex run --args run game\n```\n\n----------------------------------------\n\nTITLE: Implementing Flat Attribute Change Resistance\nDESCRIPTION: Resistance class for handling continuous flat attribute change effects with configurable block rates.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nFlatAttributeChange(ContinuousResistance):\n    type       : children(AttributeChangeType)\n    block_rate : set(AttributeRate)\n```\n\n----------------------------------------\n\nTITLE: Defining TechResearched Literal Python\nDESCRIPTION: Indicates if a specified technology has been researched by a player. The tech parameter must be set.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_87\n\nLANGUAGE: python\nCODE:\n```\nTechResearched(Literal):\n    tech : Tech\n```\n\n----------------------------------------\n\nTITLE: Implementing Timer Literal Python\nDESCRIPTION: Fires after a certain period has passed since activation. Requires a time parameter to specify duration.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_88\n\nLANGUAGE: python\nCODE:\n```\nTimer(Literal):\n    time : float\n```\n\n----------------------------------------\n\nTITLE: Implementing Animated Progress Property in Python\nDESCRIPTION: Handles animation overrides during progress intervals.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_127\n\nLANGUAGE: python\nCODE:\n```\nAnimated(ProgressProperty):\n    overrides : set(AnimationOverride)\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressType Base Class in Python\nDESCRIPTION: Creates a base ProgressType class that's used by Convert effects and resistances for matching.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_133\n\nLANGUAGE: python\nCODE:\n```\nProgressType(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Checking Any LiteralScope Python\nDESCRIPTION: Validates if a literal is true for any entity. It inherits from LiteralScope and requires no extra parameters.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_90\n\nLANGUAGE: python\nCODE:\n```\nAny(LiteralScope):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Eject Placement Mode in Python\nDESCRIPTION: Handles ejection of game entities from their creator with collision and terrain checks.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_114\n\nLANGUAGE: python\nCODE:\n```\nEject(PlacementMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Cost Effect Property\nDESCRIPTION: Property class for adding resource or attribute point costs to effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCost(EffectProperty):\n    cost : Cost\n```\n\n----------------------------------------\n\nTITLE: Defining Sound Class in Python\nDESCRIPTION: Represents a collection of sound files that can be played by game entity abilities, with support for delays and ordering.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_150\n\nLANGUAGE: python\nCODE:\n```\nSound(Object):\n    play_delay : float\n    sounds     : orderedset(file)\n```\n\n----------------------------------------\n\nTITLE: Implementing Flat Attribute Change Effect\nDESCRIPTION: Effect class for changing attribute values at a constant rate per second.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nFlatAttributeChange(ContinuousEffect):\n    type              : children(AttributeChangeType)\n    min_change_rate   : optional(AttributeRate) = None\n    max_change_rate   : optional(AttributeRate) = None\n    change_rate       : AttributeRate\n    ignore_protection : set(ProtectingAttribute)\n```\n\n----------------------------------------\n\nTITLE: SLP Header Structure (Version 2.0-3.0)\nDESCRIPTION: C++ struct definition for the SLP file header format used in versions up to 3.0. Contains version string, number of frames, and comment field.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct slp_header {\n  char  version[4];\n  int32 num_frames;\n  char  comment[24];\n};\n```\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< 4s i 24s\")\n```\n\n----------------------------------------\n\nTITLE: Installing Cython for Ubuntu 22.04 & 24.04 LTS\nDESCRIPTION: Command to install the required Cython version (minimum 3.0.10) via pip3 for Ubuntu LTS versions where the system package is too old.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/ubuntu.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install cython --break-system-packages\n```\n\n----------------------------------------\n\nTITLE: TerrainType Base Class for Terrain Classification\nDESCRIPTION: Base class for classifying different types of terrain, used for filtering and categorization.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_166\n\nLANGUAGE: python\nCODE:\n```\nTerrainType(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Sell Action Structure in Ruby\nDESCRIPTION: Defines the data structure for selling resources at the market. It includes action identifier, player number, resource type, amount, and market ID.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/12-market.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef Sell\n  int8 :action_identifier\n  int8 :player_number\n  int8 :resource_type\n  int8 :amount\n  int32 :market_id\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Rectangle Selection Box in Python\nDESCRIPTION: Defines a rectangular selection box with specific width and height dimensions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_148\n\nLANGUAGE: python\nCODE:\n```\nRectangle(SelectionBox):\n    width  : float\n    height : float\n```\n\n----------------------------------------\n\nTITLE: Creating AttributeChangeTracker Ability\nDESCRIPTION: Implements an ability that monitors attribute changes and triggers state alterations based on value changes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nAttributeChangeTracker(Ability):\n    attribute       : Attribute\n    change_progress : set(children(AttributeChangeProgress))\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages with vcpkg on Windows\nDESCRIPTION: Installs the base dependencies for openage using vcpkg package manager. These include various libraries for graphics, audio, UI, and file handling capabilities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/windows_msvc.md#2025-04-21_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nvcpkg install dirent eigen3 fontconfig freetype harfbuzz libepoxy libogg libpng opus opusfile qtbase qtdeclarative qtmultimedia toml11\n```\n\n----------------------------------------\n\nTITLE: Defining Hitbox Class in Python for openage\nDESCRIPTION: Defines the hitbox of a game entity with width, length, and height parameters.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nHitbox(Object):\n    radius_x : float\n    radius_y : float\n    radius_z : float\n```\n\n----------------------------------------\n\nTITLE: Installing Vulkan Support with vcpkg on Windows\nDESCRIPTION: Installs the Vulkan graphics support package using vcpkg for enhanced graphics capabilities in openage.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/windows_msvc.md#2025-04-21_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nvcpkg install vulkan\n```\n\n----------------------------------------\n\nTITLE: Defining Buy Action Struct in C\nDESCRIPTION: Defines a C struct for the buy action (7b). It includes action identifier, player number, resource type, amount, and market ID.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_30\n\nLANGUAGE: c\nCODE:\n```\nstruct buy {\n  uint8_t action_identifier;\n  uint8_t player_number;\n  uint8_t resource_type;\n  uint8_t amount;\n  uint32_t market_id;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Any GameEntityType Class in Python for openage\nDESCRIPTION: Represents a type that can be used to address any game entity, even those without an assigned GameEntityType.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nAny(GameEntityType):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Storage Placement Mode in Python\nDESCRIPTION: Defines storage container placement for game entities within their creator.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_115\n\nLANGUAGE: python\nCODE:\n```\nOwnStorage(PlacementMode):\n    container : EntityContainer\n```\n\n----------------------------------------\n\nTITLE: Defining Resistance Property Base Class\nDESCRIPTION: Base class for all resistance properties that modify resistance behavior.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nResistanceProperty(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Arrear Payment Mode in Python\nDESCRIPTION: Implements payment handling after action execution.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_111\n\nLANGUAGE: python\nCODE:\n```\nArrear(PaymentMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Terrain Progress Property in Python\nDESCRIPTION: Handles underlying terrain changes during progress intervals.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_131\n\nLANGUAGE: python\nCODE:\n```\nTerrain(ProgressProperty):\n    terrain : Terrain\n```\n\n----------------------------------------\n\nTITLE: Creating Mod Object Python\nDESCRIPTION: Manages the automatic application of patches when a modpack is loaded. Requires patches and priority parameters.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_93\n\nLANGUAGE: python\nCODE:\n```\nMod(Object):\n    patches  : orderedset(Patch)\n    priority : int\n```\n\n----------------------------------------\n\nTITLE: Enabling Depth Testing for Renderables in C++\nDESCRIPTION: Demonstrates how to enable depth testing for individual renderables, which is useful for correct 3D rendering and z-ordering of objects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nRenderable obj {\n  input,\n  geom\n};\nobj.depth_test = true;\n```\n\n----------------------------------------\n\nTITLE: Defining PricePool Base Class in Python\nDESCRIPTION: Base class for synchronizing exchange rates across multiple game entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_121\n\nLANGUAGE: python\nCODE:\n```\nPricePool(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSUSE Dependencies for openage\nDESCRIPTION: This command uses zypper to install all necessary packages for building and running openage on OpenSUSE. It includes development libraries, build tools, and Python packages required by the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/opensuse.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nzypper install --no-recommends cmake doxygen eigen3-devel fontconfig-devel gcc-c graphviz++ harfbuzz-devel libepoxy-devel libfreetype-dev libogg-devel libopus-devel libpng-devel libtoml11-dev qt6-declarative-dev qt6-quickcontrols2 qt6-multimedia-dev opusfile-devel python3-Cython python3-Mako python3-lz4 python3-Pillow python3-Pygments python3-toml python3-devel\n```\n\n----------------------------------------\n\nTITLE: Defining Terrain Requirement Ability in Python\nDESCRIPTION: Specifies terrain requirements for game entity placement or movement. Utilizes sets for allowed TerrainTypes and blacklisted Terrains.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nTerrainRequirement(Ability):\n    allowed_types        : set(children(TerrainType))\n    blacklisted_terrains : set(Terrain)\n```\n\n----------------------------------------\n\nTITLE: Creating ElevationDifferenceLow Modifier in Python\nDESCRIPTION: Defines the ElevationDifferenceLow modifier class that changes FlatAttributeChange effects based on lower elevation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nElevationDifferenceLow(Modifier):\n    min_elevation_difference : optional(float) = None\n```\n\n----------------------------------------\n\nTITLE: Adding Nyan Repository to C++ Include Path in c_cpp_properties.json\nDESCRIPTION: JSON configuration for adding the nyan repository path to the include path in Visual Studio Code's C/C++ extension properties file.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ide/vscode.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"includePath\": [\n    \"${workspaceFolder}/**\",\n    \"${workspaceFolder}/../nyan/**\"\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Advance Payment Mode in Python\nDESCRIPTION: Implements upfront payment requirement before action execution.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_110\n\nLANGUAGE: python\nCODE:\n```\nAdvance(PaymentMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Registering Cython Modules in Build System\nDESCRIPTION: Adds Cython module source files to the project compilation process using add_cython_modules function. Includes testing and miscellaneous C++ related Cython modules.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cython_modules(\n\tcpp_testing.pyx\n\tmisc_cpp.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Installing SVG Files with CMake\nDESCRIPTION: This CMake script installs two SVG files: 'crown.svg' and 'banner.svg'. The first is renamed to 'openage.svg' and installed in the system's pixmaps directory, while the second is installed in a project-specific asset directory.\nSOURCE: https://github.com/sfttech/openage/blob/master/assets/logo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n\tFILES \"crown.svg\"\n\tRENAME \"openage.svg\"\n\tDESTINATION \"share/pixmaps/\"\n)\n\ninstall(\n\tFILES \"banner.svg\"\n\tDESTINATION \"${ASSET_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Manual Uniform Buffer Creation with Layout Specification in C++\nDESCRIPTION: Shows how to manually define and create a uniform buffer using UniformBufferInfo with custom layout and input specifications.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_27\n\nLANGUAGE: c++\nCODE:\n```\nresources::UBOInput view_input{ \"view\", resources::ubo_input_t::M4F32 };\nresources::UBOInput proj_input{ \"proj\", resources::ubo_input_t::M4F32 };\n\nresources::UniformBufferInfo ubo_info{\n  resources::ubo_layout_t::STD140,\n  { view_input, proj_input }\n};\n\nstd::shared_ptr<UniformBuffer> buffer = renderer->add_uniform_buffer(ubo_info);\n```\n\n----------------------------------------\n\nTITLE: TargetMode Base Class for Projectile Targeting\nDESCRIPTION: Base class for defining different targeting modes used by projectiles when attacking targets.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_157\n\nLANGUAGE: python\nCODE:\n```\nTargetMode(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: C++ Header with PyIfFunc Declaration\nDESCRIPTION: Header file with external PyIfFunc declaration and necessary includes for Python-C++ interface.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n// pxd: from libcpp.string cimport string\n#include <string>\n\n#include \"pyinterface/functional.h\"\n\n// pxd: PyIfFunc2[float, int, string] bar\nextern OAAPI PyIfFunc<float, int, std::string> bar;\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Calculation Type in Python\nDESCRIPTION: Defines a linear calculation type for influence factors that increase with more effectors present. Uses shift_x, shift_y and scale_factor parameters for the linear equation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nLinear(CalculationType):\n    shift_x      : int\n    shift_y      : int\n    scale_factor : float\n```\n\n----------------------------------------\n\nTITLE: Texture Reference Examples\nDESCRIPTION: Demonstrates different ways to reference texture resources using relative and absolute paths.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/sprite_format_spec.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntexture 0 \"idle.texture\"\ntexture 1 \"../../attack.texture\"\ntexture 2 \"/{aoe2_base}/graphics/attack.texture\"\n```\n\n----------------------------------------\n\nTITLE: Building OpenAge on Windows with vcpkg\nDESCRIPTION: Commands for installing dependencies using vcpkg and building openage on Windows systems using CMake and Microsoft Visual Studio.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/editor/scripting.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone \"https://github.com/Microsoft/vcpkg.git\"\ncd vcpkg\n.\\bootstrap-vcpkg.bat -disableMetrics\n.\\vcpkg install dirent cpio eigen3 fontconfig freetype harfbuzz libepoxy libogg\\\n    libpng opus opusfile sdl2 sdl2-image qt5-base qt5-declarative qt5-quickcontrols\\\n    qt5-quickcontrols2 --triplet=x64-windows\n\ncd C:\\\ngit clone \"https://github.com/SFTtech/openage.git\"\nmkdir openage\\build\ncd openage\\build\n\ncmake .. -G \"Visual Studio 15 2017 Win64\" -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake\ncmake --build . --config Release\n```\n\n----------------------------------------\n\nTITLE: Implementing Flat Attribute Change Decrease\nDESCRIPTION: Specialized resistance class for blocking attribute decrease effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nFlatAttributeChangeDecrease(FlatAttributeChange):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining CalculationType Class in Python\nDESCRIPTION: Base class for resistance influence factor calculation methods.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nCalculationType(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing NOT LogicGate Python\nDESCRIPTION: Defines a NOT gate that negates its single input. It evaluates to false if there are more than one inputs defined.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nNOT(LogicGate):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Effect Property Base Class\nDESCRIPTION: Base class for all effect properties that can modify effect behavior.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nEffectProperty(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Palette Class in Python for openage\nDESCRIPTION: Points to an openage palette definition file in the .opal format.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nPalette(Object):\n    palette : file\n```\n\n----------------------------------------\n\nTITLE: Validating Self LiteralScope Python\nDESCRIPTION: Responsible for checking if a literal is true only for the game entity to which it belongs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_91\n\nLANGUAGE: python\nCODE:\n```\nSelf(LiteralScope):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Overlay Progress Property in Python\nDESCRIPTION: Manages animation overlays during progress intervals.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_128\n\nLANGUAGE: python\nCODE:\n```\nAnimationOverlay(ProgressProperty):\n    overlays : set(Animation)\n```\n\n----------------------------------------\n\nTITLE: Defining Condition Class in Python\nDESCRIPTION: Base class for conditions used in XORGate nodes of activity graphs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCondition(Object):\n    node : Node\n```\n\n----------------------------------------\n\nTITLE: Implementing AttributeChange Progress Type in Python\nDESCRIPTION: Defines a progress type that compares current attribute values to min/max values. Progress is 0% at min_value and 100% at max_value.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_134\n\nLANGUAGE: python\nCODE:\n```\nAttributeChange(ProgressType):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running OpenAge Docker Container with X11 Display Server\nDESCRIPTION: Command to run the OpenAge Docker container with X11 display server integration, mounting the necessary X11 sockets and configuration files.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/docker.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it \\\n  -e DISPLAY=$DISPLAY \\\n  -v /tmp/.X11-unix:/tmp/.X11-unix \\\n  -v $HOME/.Xauthority:/root/.Xauthority \\\n  --network host openage\n```\n\n----------------------------------------\n\nTITLE: Defining LongestTimeInRange Class in Python for openage\nDESCRIPTION: Represents a herdable mode where the player of the game entity which has been in range for the longest time gets ownership.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nLongestTimeInRange(HerdableMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Hyperbolic Calculation Type in Python\nDESCRIPTION: Defines a hyperbolic calculation type for influence factors that decrease with more effectors present. Uses shift_x, shift_y and scale_factor parameters for the hyperbolic equation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nHyperbolic(CalculationType):\n    shift_x      : int\n    shift_y      : int\n    scale_factor : float\n```\n\n----------------------------------------\n\nTITLE: Adding Cython and Python Modules in CMake\nDESCRIPTION: CMake configuration that adds Cython modules (lzxd.pyx and cabchecksum.pyx) and Python modules (__init__.py, cab.py, lzxdstream.py, test.py) to the build system. The STANDALONE flag indicates cabchecksum.pyx is built as a standalone module.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/cabextract/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cython_modules(\n\tlzxd.pyx\n\tSTANDALONE cabchecksum.pyx\n)\n\nadd_py_modules(\n\t__init__.py\n\tcab.py\n\tlzxdstream.py\n\ttest.py\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Diplomatic Effect Property\nDESCRIPTION: Property class for limiting effects based on diplomatic stances.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDiplomatic(EffectProperty):\n    stances : set(children(DiplomaticStance))\n```\n\n----------------------------------------\n\nTITLE: Resource Spot Harvestable Effect Implementation\nDESCRIPTION: Effect for making a resource spot harvestable if not already harvestable by default.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nMakeHarvestable(DiscreteEffect):\n    resource_spot : ResourceSpot\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage using CMake\nDESCRIPTION: This CMake command `add_sources` includes the specified C++ source files into the libopenage library. These files likely contain the implementation of different game logic and functionalities.  The dependencies are the listed `.cpp` source files.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/main/demo/pong/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\taicontroller.cpp\n\tgamestate.cpp\n\tgui.cpp\n\tphysics.cpp\n\tpong.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Activity Class in Python\nDESCRIPTION: Class for storing node graphs that define game entity behavior, used with the Activity ability.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nActivity(Object):\n    start : Start\n```\n\n----------------------------------------\n\nTITLE: Python Setup Integration\nDESCRIPTION: Python setup code that registers the function wrapper during initialization.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef setup():\n    # (...)\n\n    from openage.foo import setup\n    setup()\n\n    # (...)\n```\n\n----------------------------------------\n\nTITLE: Implementing AttributeAboveValue Literal Python\nDESCRIPTION: Checks if an attribute of a game entity is above a specified threshold value. Requires attribute and threshold to be defined.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nAttributeAboveValue(Literal):\n    attribute : Attribute\n    threshold : float\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Rendering Components in CMake\nDESCRIPTION: Adds subdirectories for specialized rendering components such as camera handling, demos, font rendering, GUI elements, resources, and rendering stages. These subdirectories likely contain additional CMake files for building component-specific libraries.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(camera/)\nadd_subdirectory(demo/)\nadd_subdirectory(font/)\nadd_subdirectory(gui/)\nadd_subdirectory(resources/)\nadd_subdirectory(stages/)\n```\n\n----------------------------------------\n\nTITLE: Discrete Effect Base Class Implementation\nDESCRIPTION: Base class for effects that are applied immediately rather than over time.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nDiscreteEffect(Effect):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining ProjectilePassThrough Literal Python\nDESCRIPTION: Means to verify when a projectile has passed beyond a specified range. Pass-through range must be explicitly defined.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_84\n\nLANGUAGE: python\nCODE:\n```\nProjectilePassThrough(Literal):\n    pass_through_range : int\n```\n\n----------------------------------------\n\nTITLE: Defining PriceMode Base Class in Python\nDESCRIPTION: Base class for price adjustment modes in exchange rates.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_118\n\nLANGUAGE: python\nCODE:\n```\nPriceMode(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining TranslatedSound Class in Python for openage\nDESCRIPTION: Represents the translated versions of a sound.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nTranslatedSound(TranslatedObject):\n    translations : set(LanguageSoundPair)\n```\n\n----------------------------------------\n\nTITLE: Defining SLP Command Offset Structure in C++\nDESCRIPTION: C++ struct definition for the command offset table entry that points to the first drawing command of each row in an SLP frame.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nstruct slp_command_offset {\n  uint32 offset;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MatchToSprite Selection Box in Python\nDESCRIPTION: Defines a selection box that matches the game entity's sprite shape, excluding transparent pixels.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_147\n\nLANGUAGE: python\nCODE:\n```\nMatchToSprite(SelectionBox):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Node Base Class in Python\nDESCRIPTION: Base class for nodes in activity graphs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nNode(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Restock Progress Type in Python\nDESCRIPTION: Defines a progress type for monitoring resource restocking. Progress starts at 0% and reaches 100% when restocking completes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_138\n\nLANGUAGE: python\nCODE:\n```\nRestock(ProgressType):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Building the OpenAge Docker Image\nDESCRIPTION: Command to build a Docker image for OpenAge using the provided Dockerfile for Ubuntu 24.04.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/docker.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker build -t openage -f packaging/docker/devenv/Dockerfile.ubuntu.2404 .\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Tracking in Python\nDESCRIPTION: Defines progress tracking system with custom properties and boundaries.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_125\n\nLANGUAGE: python\nCODE:\n```\nProgress(Object):\n    properties     : dict(abstract(ProgressProperty), ProgressProperty) = {}\n    type           : children(ProgressType)\n    left_boundary  : float\n    right_boundary : float\n```\n\n----------------------------------------\n\nTITLE: Defining SLD Graphics Layer Header Structure in C++\nDESCRIPTION: This struct defines the layout of the header for the main graphics layer in an SLD file, including offset coordinates and flags.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nstruct sld_graphics_header {\n  uint16  offset_x1;\n  uint16  offset_y1;\n  uint16  offset_x2;\n  uint16  offset_y2;\n  uint8   flag1;\n  uint8   unknown1;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library\nDESCRIPTION: Adds core source files related to event handling and state management to the libopenage library target. The files include event loop, event entities, handlers, queue, store, and state management implementations.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/event/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\tevent_loop.cpp\n\tevent.cpp\n\tevententity.cpp\n\teventhandler.cpp\n\teventqueue.cpp\n\teventstore.cpp\n\tstate.cpp\n\ttests.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Passive Stance Class in Python for openage\nDESCRIPTION: Represents a passive stance where the entity stays at its current position and only reacts to manual commands, ignoring ability preferences.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nPassive(GameEntityStance):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining SMP Pixel Structure in C++\nDESCRIPTION: C++ struct definition for an SMP pixel, containing fields for palette index, palette number and section, and damage modifier.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nstruct smp_pixel {\n  uint8  px_index;\n  uint8  px_palette;\n  uint16 px_damage_modifier;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProvideContingent Ability in Python\nDESCRIPTION: Defines the ProvideContingent ability for a game entity, providing a temporary resource amount to a ResourceContingent until the ability is disabled.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nProvideContingent(Ability):\n    amount : set(ResourceAmount)\n```\n\n----------------------------------------\n\nTITLE: Defining Restock Ability in Python\nDESCRIPTION: Allows refilling of resource spots with specified resources. Dependencies include ResourceSpot for target and Cost for restocking costs. Also specifies restock time, auto-restock behavior, and amount of resources.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nRestock(Ability):\n    auto_restock : bool\n    target       : ResourceSpot\n    restock_time : float\n    manual_cost  : Cost\n    auto_cost    : Cost\n    amount       : int\n```\n\n----------------------------------------\n\nTITLE: Defining PlacementMode Base Class in Python\nDESCRIPTION: Base class for configuring how game entities are placed in the game world.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_113\n\nLANGUAGE: python\nCODE:\n```\nPlacementMode(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Remove Storage Ability in Python\nDESCRIPTION: Enables removal of game entities from a specified container. Requires an EntityContainer and a set of GameEntity objects. A Storage ability with the given container must be active.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nRemoveStorage(Ability):\n    container        : EntityContainer\n    storage_elements : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Defining SLD Frame Header Structure in C++\nDESCRIPTION: This struct defines the layout of an SLD frame header, which includes canvas dimensions, hotspot coordinates, frame type, and frame index.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstruct sld_frame_header {\n  uint16  canvas_width;\n  uint16  canvas_height;\n  int16  canvas_hotspot_x;\n  int16  canvas_hotspot_y;\n  uint8   frame_type;\n  uint8   unknown1;\n  uint16  frame_index;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Unit and Calculation Classes in C++\nDESCRIPTION: Declares Unit class for managing individual units and issuing orders, and Calculation class for handling computation-heavy calculations from the C++ engine.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/ai.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nclass Unit {\n\t// used to get information about individual units as well as issue orders to units\n}\n\nclass Calculation {\n\t// used to get computation heavy calculations from the C++ engine\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MakeHarvestable Resistance Class in Python\nDESCRIPTION: Defines resistance to MakeHarvestable effects, including resource spot specification and resistance conditions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nMakeHarvestable(DiscreteResistance):\n    resource_spot     : ResourceSpot\n    resist_condition  : set(LogicElement)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Files to libopenage Library Target\nDESCRIPTION: CMake command that adds C++ source files command_in_queue.cpp and next_command.cpp to the libopenage library build target.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/activity/condition/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    command_in_queue.cpp\n    next_command.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Power System Overview in SWGB\nDESCRIPTION: Markdown documentation detailing the power mechanics in Star Wars Galactic Battlegrounds, explaining how power affects building efficiency, unit production speed, and building indicators.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/swgb/power.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Power (energy) mechanics in SWGB\n\n## Intro\n\nPower is a unique feature of SWGB. It is necessary to produce units\nefficiently, and for shield generators. It thus makes power generators a\nstrategic target.\n\nPowered buildings have green lights on them, instead of flashing red lights. A\ngreen indicator also lights up [in the UI](user-interface.md#cap) when a\npowered unit is selected.\n\n[more details](https://swgb.fandom.com/wiki/Power_Core)\n\n## Mechanism\n\nPower **only** affects unit creation and research times.\n\nIt doesn't affect things like food production for animal nurseries, or other\nresource collection.\n\nUnpowered buildings work at 25% speed, including research and unit production.\nShield generator buildings need to be powered to provide a shield.\n\nThe clone campaigns extension contains [mobile power\ngenerators](https://swgb.fandom.com/wiki/Power_Droid), units that can be built\nat a power generator.\n\n## Always-powered buildings\n\nCommand centers and Fortresses are always powered. So are power generators.\n```\n\n----------------------------------------\n\nTITLE: Implementing ConvertType in Python\nDESCRIPTION: Defines a type used for matching Convert effects and resistances.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nConvertType(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining AdjacentTilesVariant in Python\nDESCRIPTION: A variant type chosen based on adjacent game entities. The variant with the most matches in all directions (north, east, south, west, and diagonals) is selected.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_174\n\nLANGUAGE: python\nCODE:\n```\nAdjacentTilesVariant(Variant):\n    north      : optional(GameEntity)\n    north_east : optional(GameEntity)\n    east       : optional(GameEntity)\n    south_east : optional(GameEntity)\n    south      : optional(GameEntity)\n    south_west : optional(GameEntity)\n    west       : optional(GameEntity)\n    north_west : optional(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Loading openage GDB pretty printers\nDESCRIPTION: Loads custom GDB pretty printer definitions from the openage project to improve readability of debug output for project-specific types.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/debug.md#2025-04-21_snippet_3\n\nLANGUAGE: gdb\nCODE:\n```\nsource <path-of-openage-dir>/etc/openage.gdbinit\n```\n\n----------------------------------------\n\nTITLE: Defining Sync Command Struct 16BC41 in C\nDESCRIPTION: Defines a C struct for sync command 16BC41. It includes network IDs, command, options, and a counter.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct 16bc41 {\n  uint32_t network_source_id;\n  uint32_t network_dest_id;\n  uint8_t command;\n  uint8_t option1;\n  uint8_t option2;\n  uint8_t option3;\n  uint32_t individual_counter;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining AI Waypoints Action Struct in C\nDESCRIPTION: Defines a C struct for the AI waypoints action (1f). It includes action identifier, selection count, waypoint count, selected unit IDs, and coordinate arrays.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nstruct ai_waypoints {\n  uint8_t action_identifier;\n  uint8_t selection_count;\n  uint8_t waypoint_count;\n  uint32_t selected_ids[selection_count];\n  uint8_t x_coords[waypoint_count];\n  uint8_t y_coords[waypoint_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Carry Progress Type in Python\nDESCRIPTION: Creates a progress type that monitors storage capacity usage. Progress is 0% when empty and 100% when full.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_135\n\nLANGUAGE: python\nCODE:\n```\nCarry(ProgressType):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining SelectionBox Base Class in Python\nDESCRIPTION: Creates a base class for defining selection areas for the Selectable ability of game entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_146\n\nLANGUAGE: python\nCODE:\n```\nSelectionBox(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Diplomacy Protocol Definition in Ruby\nDESCRIPTION: Defines the binary protocol for diplomacy, game speed changes and cheat actions. Includes player numbers, action types and diplomatic stance settings.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/13-other.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef Diplomacy\n  int8 :action_identifier\n  int8 :action_type\n  int8 :source_player_number\n  int8 :zero\n  int8 :option\n  byte24 :zero2\n  float :option2\n  int8 :diplomatic_stance\n  byte24 :zero3\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Python Demos with Command-Line Arguments\nDESCRIPTION: Example Python demo that accepts command-line arguments. It demonstrates prime number detection up to a specified maximum value passed as an argument.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/testing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef prime_demo(argv):\n    import argparse\n    cli = argparse.ArgumentParser()\n    cli.add_argument('max_number', type=int)\n    args = cli.parse_args(argv)\n\n    for p in range(2, args.max_number):\n        if is_prime(p):\n            print(p)\n```\n\n----------------------------------------\n\nTITLE: Defining Move Action Struct in C\nDESCRIPTION: Defines a C struct for the move action (03). It includes action identifier, player ID, constant value, selection count, coordinates, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nstruct move {\n  \tuint8_t action_identifier;\n  \tuint8_t player_id;\n  \tuint32_t constant; // = 0xFFFFFFFF\n  \tuint32_t selection_count;\n  \tfloat x_coord;\n  \tfloat y_coord;\n  \tuint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Unit Statistics Table Data Format\nDESCRIPTION: Tabular data showing unit statistics with columns for name, age level (I-IV), HP, attack, type (Melee/Pierce/Convert), reload time, armor values, range, accuracy, movement speed, creation time and resource costs. Also includes special attack bonuses against specific unit types.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/unit_stats/unit_stats.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n| Unit Name | Age | HP | Attack | Type | Reload Time | Melee Armor | Pierce Armor | LOS | Range | Accuracy | Speed | Create Time | Cost | Attack Bonuses |\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake for OpenAge\nDESCRIPTION: This CMake snippet adds multiple Python modules to the OpenAge project. It includes modules for handling various types of metadata (blmask, bltable, palette, sprite, terrain, texture) as well as media caching, modpack information, and manifest handling.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/entity_object/export/formats/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\tblmask_metadata.py\n\tbltable_metadata.py\n\t__init__.py\n\tmedia_cache.py\n\tmodpack_info.py\n\tmodpack_manifest.py\n\tnyan_file.py\n\tpalette_metadata.py\n\tsprite_metadata.py\n\tterrain_metadata.py\n\ttexture_metadata.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library in CMake\nDESCRIPTION: Adds various demo, stresstest, and utility source files to the libopenage library target. This CMake function specifies the C++ source files that should be compiled and linked as part of the library.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/demo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    demo_0.cpp\n    demo_1.cpp\n    demo_2.cpp\n    demo_3.cpp\n    demo_4.cpp\n    demo_5.cpp\n    demo_6.cpp\n    stresstest_0.cpp\n    stresstest_1.cpp\n\ttests.cpp\n    util.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Updating the Window Display in C++\nDESCRIPTION: Updates the window to display the rendered result after rendering is complete. This is necessary to show the rendered frame on screen.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nwindow->update();\n```\n\n----------------------------------------\n\nTITLE: Implementing Creatables Production Mode in Python\nDESCRIPTION: Handles production queue for creating game entities with exclusion list.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_123\n\nLANGUAGE: python\nCODE:\n```\nCreatables(ProductionMode):\n    exclude : set(CreatableGameEntity)\n```\n\n----------------------------------------\n\nTITLE: Defining NextCommandIdle Condition in Python\nDESCRIPTION: Condition class that checks if the next command is an Idle command.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nNextCommandIdle(Condition):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Discrete Resistance Base Class\nDESCRIPTION: Base class for resistances against discrete (non-continuous) effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nDiscreteResistance(Resistance):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Specifying Resource Files for Packaging - CMake\nDESCRIPTION: This snippet defines the resource files that will be included with the package, such as the license and README file. This ensures that users have access to important documentation upon installation.\nSOURCE: https://github.com/sfttech/openage/blob/master/packaging/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_SOURCE_DIR}/copying.md\")\nset(CPACK_RESOURCE_FILE_README \"${CMAKE_SOURCE_DIR}/README.md\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_SOURCE_DIR}/README.md\")\n```\n\n----------------------------------------\n\nTITLE: Implementing 16BC32 Packet Structure in Ruby - Game Time Synchronization Response\nDESCRIPTION: Defines the structure of a 16BC32 packet, which is sent in response to a 16BC31 packet. It mirrors the time synchronization value from the request packet and is transmitted at 8-second intervals.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/03-sync.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef 16BC32\n  int32 :network_source_id\n  int32 :network_dest_id\n  int8 :command\n  int8 :option1\n  int8 :option2\n  int8 :option3\n  int32 :time_passed\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing SendToContainerType in Python\nDESCRIPTION: Defines a type used for matching SendToContainer effects and resistances.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nSendToContainerType(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Listing Added Features in Ability and Utility Modules\nDESCRIPTION: This section outlines new objects and entities added to the Ability and Utility modules, focusing on game entity behavior management.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/nyan_api/v0.4.1.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Added\n### Ability module\n- Add `Activity(Ability)` object; defines the behaviour of a game entity\n\n### Utility module\n- Add `Activity(Entity)` object; stores behaviour node graph of a game entity\n- Add `Node(Entity)` object; node in behaviour node graph\n- Add `Ability(Node)` object\n- Add `End(Node)` object\n- Add `Start(Node)` object\n- Add `XORGate(Node)` object\n- Add `XOREventGate(Node)` object\n- Add `Condition(Object)` object\n- Add `CommandInQueue(Condition)` object\n- Add `NextCommandIdle(Condition)` object\n- Add `NextCommandMove(Condition)` object\n- Add `Event(Entity)` object; event for behaviour node graph\n- Add `Wait(Event)` object\n- Add `WaitAbility(Event)` object\n- Add `CommandInQueue(Event)` object\n```\n\n----------------------------------------\n\nTITLE: Installing gdbgui on Ubuntu\nDESCRIPTION: Installs the browser-based GDB frontend 'gdbgui' using pip on Ubuntu. This tool provides a graphical interface for GDB debugging.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/debug.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo pip3 install gdbgui --upgrade\n```\n\n----------------------------------------\n\nTITLE: Resistance Module Properties\nDESCRIPTION: Defines resistance-related properties including cost and stacked resistance calculations with their property mappings.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/nyan_api/v0.3.0.md#2025-04-21_snippet_4\n\nLANGUAGE: nyan\nCODE:\n```\nResistanceProperty(Entity)\nCost(ResistanceProperty)\nStacked(ResistanceProperty)\nproperties : dict(ResistanceProperty, ResistanceProperty)\n```\n\n----------------------------------------\n\nTITLE: Waypoint Action Definition in Ruby\nDESCRIPTION: Defines the structure for setting waypoints for units, including coordinates and unit selection details.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/08-movement.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef Waypoint\n  int8 :action_identifier\n  int8 :player_id\n  int8 :selection_count\n  int8 :x_coord\n  int8 :y_coord\n  array :selected_ids,\n        type :int32,\n        only_if => :selection_count < 0xFF\nend\n```\n\n----------------------------------------\n\nTITLE: Defining AttributeAmount Class in Python\nDESCRIPTION: Class for storing fixed amounts of attributes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nAttributeAmount(Object):\n    type   : Attribute\n    amount : int\n```\n\n----------------------------------------\n\nTITLE: Implementing NoStack Calculation Type in Python\nDESCRIPTION: Defines a calculation type that sets influence factor to 1 regardless of effector count. Differs from stack limit of 1 as distribution type can still be influenced by multiple effectors.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nNoStack(CalculationType):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Tribute Protocol Definition in Ruby\nDESCRIPTION: Defines the binary protocol for resource transfer between players. Includes source/target players, resource type and amount details.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/13-other.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef Tribute\n  int8 :action_identifier\n  int8 :source_player_number\n  int8 :target_player_number\n  int8 :resource_type\n  float :amount\n  float :transaction_fee\nend\n```\n\n----------------------------------------\n\nTITLE: TerrainAmbient for Environmental Objects\nDESCRIPTION: Defines ambient game entities that can be randomly placed on terrain to enhance visual appeal, with control over placement density.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_165\n\nLANGUAGE: python\nCODE:\n```\nTerrainAmbient(Object):\n    object      : GameEntity\n    max_density : int\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleGate Action Structure in Ruby\nDESCRIPTION: Defines the data structure for toggling gates open or closed. It includes fields for action identifier and gate ID.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/11-buildings.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef ToggleGate\n  int8 :action_identifier\n  byte24 :zero\n  int32 :gate_id\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Units to Subformation - Pseudocode Implementation\nDESCRIPTION: Algorithm for adding units to a subformation using stacks to group units with the same GroupID. Maintains counts and organization of units within each subformation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_12\n\nLANGUAGE: pseudocode\nCODE:\n```\nINPUT:\n- A unit: unit\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nInitilization:\n\n# Create a list of stacks. Each stack will\n# contain units of the same GroupID\nList unit_stacks = new List<Stack>();\n\n# Create a list of GroupIDs that contains\n# the IDs of units that are already in the\n# subformation\nList ids = new List();\n\nunit_count = 0;\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nAlgorithm:\n\nif ids.contains(unit.GROUP_ID) then {\n    index = ids.indexOf(units.GROUP_ID);\n    unit_stacks.get(index).push(unit);\n    ++unit_count;\n}\nelse {\n    Stack unit_stack = new Stack();\n    unit_stack.push(unit);\n    ids.add(unit.GROUP_ID);\n    unit_stacks.add(unit_stack);\n    ++unit_count;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Manager Source File to libopenage Library in CMake\nDESCRIPTION: This CMake command adds manager.cpp to the sources list for the libopenage library target. It's part of the build system configuration that specifies which source files should be compiled and linked into the library.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/stages/camera/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tmanager.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake\nDESCRIPTION: Adds core Python modules for handling various game data formats including blendomatic effects, color tables, DRS archives, language codes and PE file processing.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/read/media/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tblendomatic.py\n\tcolortable.py\n\tdrs.py\n\tlangcodes.py\n\tpefile.py\n\tperesource.py\n)\n```\n\n----------------------------------------\n\nTITLE: Creating PatchProperty Object Python\nDESCRIPTION: Base object for defining properties applicable to patches within the project's framework.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_105\n\nLANGUAGE: python\nCODE:\n```\nPatchProperty(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining AoE2 Lobby Protocol Structure in Ruby\nDESCRIPTION: A Ruby data structure definition that maps the 196-byte lobby settings packet used in Age of Empires II. The structure includes player information, game settings, map options, and victory conditions with proper byte offsets and data types.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/04-lobby.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef LobbySettings\n  byte20 :header\n  4 bytes\n  array :player_network_ids,\n        type => :int32,\n        initial_length => 8\n  int8 :ready\n  69 bytes\n  int8 :checkboxes\n  byte\n        6bit :reveal_map\n        2bit :game_speed\n  1 byte\n  byte\n        4bit :starting_age\n        4bit :starting_resources\n  byte\n        4bit :map_size\n        4bit :difficulty\n  int8 :map_id\n  int8 :victory\n  1 byte\n  int16 :victory_limit\n  int8 :max_population\n  8 bytes\n  array :player_civ_ids,\n        type => :int8,\n        initial_length => 8\n  16 bytes\n  array :teams,\n        type => :int8,\n        initial_length => 8\n  int16 :zero\n  int8 :map_description_length\n  array :map_description,\n        type => :char,\n        initial_length => :map_description_length + 6\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Defensive Stance Class in Python for openage\nDESCRIPTION: Represents a defensive stance where the entity uses abilities or moves to targets, returning to its original position when no targets are found.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nDefensive(GameEntityStance):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining GameEntityType Class in Python for openage\nDESCRIPTION: Represents a classification for a game entity.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nGameEntityType(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Calculating Terrain SLP Frame Index in Python\nDESCRIPTION: This snippet demonstrates how to calculate the correct terrain .SLP frame index for a given position (x, y) on the terrain grid.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/terrain.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntc = sqrt(terraintilecount) #=10 for regular terrains\nframe_id = (x % tc) + ((y % tc) * tc)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Price Mode in Python\nDESCRIPTION: Handles dynamic price adjustments with minimum and maximum bounds.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_119\n\nLANGUAGE: python\nCODE:\n```\nDynamic(PriceMode):\n    change_value : float\n    min_price    : float\n    max_price    : float\n```\n\n----------------------------------------\n\nTITLE: Implementing Priority Effect Property\nDESCRIPTION: Property class for setting effect application order in EffectBatch.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPriority(EffectProperty):\n    priority : int\n```\n\n----------------------------------------\n\nTITLE: Defining LanguageTextPair Class in Python for openage\nDESCRIPTION: Defines the translation of a string in a specific language.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nLanguageTextPair(Object):\n    language : Language\n    string   : text\n```\n\n----------------------------------------\n\nTITLE: Documenting openage v0.5.0 Changes in Markdown Format\nDESCRIPTION: Changelog entry following the Keep a Changelog format, documenting the changes made in version 0.5.0 of the openage project. It covers renamed components, added objects and members in the Ability and Utility modules, and removed functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/nyan_api/v0.5.0.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [0.5.0] - 2024-07-29\nAll notable changes for version [v0.5.0] are documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Renamed\n### Ability module\n- Rename `Hitbox` to `Collision`\n\n## Added\n### Ability module\n- Add `Pathable(Ability)` object; defines pathing costs for the game entity when the ability is active\n- Add `path_type : PathType` member to `Move`\n\n### Utility module\n- Add `PathType(Object)` object; associates move abilities with pathfinding grids\n- Add `path_costs : dict(children(PathType), int)` member to `Terrain`; defines pathing costs for the terrain\n\n### Removed\n### Ability module\n- Remove `Passable(Ability)` object; functionality superceded by `Pathable`\n\n\n## Reference visualization\n\n* [Gamedata](https://github.com/SFTtech/openage/blob/f1967c3c002d444510e50f54c9cdbb83419a9ec4/doc/nyan/aoe2_nyan_tree.svg)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Version from Git\nDESCRIPTION: Extracts version information from Git and configures the project version string, handling both full version strings and semantic versioning components.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# set project version\nif(USED_GIT_VERSION)\n\t# VERSION_FULL_STRING is the full git describe\n\tset(VERSION_FULL_STRING \"${PROJECT_VERSION}\")\n\t# PROJECT_VERSION is MAJOR.MINOR.PATCH.TWEAK with Commit-Count as Tweak\n\tSTRING(REGEX REPLACE \"v(([0-9]+.|[0-9]+)+)-([0-9]+)-g([a-f0-9]+)\"\n\t\t\t\"\\\\1.\\\\3\" PROJECT_VERSION \"${VERSION_FULL_STRING}\")\nendif()\nproject(openage VERSION \"${PROJECT_VERSION}\")\n\n# set CI version\nif(DEFINED ENV{CI_CFG_VERSION})\n    set(CI_CFG_VERSION \"$ENV{CI_CFG_VERSION}\")\nelse()\n    set(CI_CFG_VERSION \"NOT SET\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Shadow Draw Command Implementation\nDESCRIPTION: Command for drawing shadow pixels using shadow palette. Shows length calculation for shadow effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nlength = command >> 4. If 0, the next byte is read and used as the length.\n(ex: 0x1B = 1, 0x2B = 2, 0xAB = 10, 0xFB = 15, 0x0B + 0x10 = 16)\n```\n\n----------------------------------------\n\nTITLE: Determining Terrain Blending Masks in Python\nDESCRIPTION: This code snippet determines which blending masks to apply based on the binary flags of neighboring tiles. It uses bitwise operations to check specific conditions and add mask IDs to the diagonal_mask_id set.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/blendomatic.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif binf == 0b10000010\nif binf == 0b00101000\nif binf == 0b00001010\nif binf == 0b00101010\nif binf == 0b10101000\nif binf == 0b10100010\nif binf == 0b10001010\nif binf == 0b10101010\n\ndiagonal_mask_id.add(16)    if binf  & 0b00000100 > 0\n                     17     if binf  & 0b00010000 > 0\n                     18     if binf  & 0b00000001 > 0\n                     19     if binf  & 0b01000000 > 0\n```\n\n----------------------------------------\n\nTITLE: Defining CommandInQueue Condition in Python\nDESCRIPTION: Condition class that checks if the command queue is not empty.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCommandInQueue(Condition):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining TranslatedObject Class in Python for openage\nDESCRIPTION: Generalization object for any objects that are or should be different depending on the language, supporting translations for strings, markup files, and sounds.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nTranslatedObject(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Relative Progress Change\nDESCRIPTION: Base class for handling time-based progress change resistances.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nTimeRelativeProgressChange(ContinuousResistance):\n    type : children(ProgressType)\n```\n\n----------------------------------------\n\nTITLE: Registering Python Modules in Project\nDESCRIPTION: Adds Python source files to the project using add_py_modules function. Includes initialization, testing, main, and utility modules for the OpenAge project.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tdoctest.py\n\tlist_processor.py\n\tmain.py\n\ttesting.py\n\ttestlist.py\n\tbenchmark.py\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cost System in Python\nDESCRIPTION: Defines a generalization object for resource and attribute costs with payment mode configuration.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nCost(Object):\n    payment_mode : PaymentMode\n```\n\n----------------------------------------\n\nTITLE: Displaying Player Actions Table in Markdown\nDESCRIPTION: This markdown table lists various player actions in the game, including their hexadecimal action bytes and corresponding purposes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/01-general.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Action | Purpose                                                                 |\n| ------ | ----------------------------------------------------------------------- |\n| 0x00   | Primary Action (Attacking, Resource gathering, Boarding Transport Ship) |\n| 0x01   | Stop                                                                    |\n| 0x02   | Primary Action (AI)                                                    |\n| 0x03   | Move                                                                   |\n| 0x0a   | Move (AI)                                                              |\n| 0x0b   | Resign                                                                 |\n| 0x10   | Set waypoint                                                          |\n| 0x12   | Stance                                                                |\n| 0x13   | Guard                                                                 |\n| 0x14   | Follow                                                               |\n| 0x15   | Patrol                                                               |\n| 0x17   | Formation                                                            |\n| 0x1b   | Save & Exit                                                           |\n| 0x1f   | Coordinated Move (AI)                                                 |\n| 0x64   | Train unit (AI)                                                       |\n| 0x65   | Research                                                              |\n| 0x66   | Build                                                                 |\n| 0x67   | Diplomacy/Cheats/Change Speed                                         |\n| 0x69   | Build wall                                                            |\n| 0x6a   | Delete                                                                |\n| 0x6b   | Attack ground                                                         |\n| 0x6c   | Tribute                                                               |\n| 0x6e   | Repair                                                                |\n| 0x6f   | Unboard/Ungarrison                                                    |\n| 0x72   | Toggle gate                                                           |\n| 0x73   | Flare                                                                 |\n| 0x75   | Garrison/Stop building unit                                           |\n| 0x77   | Train unit (Human)                                                    |\n| 0x78   | Rally point                                                           |\n| 0x7a   | Sell                                                                  |\n| 0x7b   | Buy                                                                   |\n| 0x7e   | Drop relic                                                            |\n| 0x7f   | Toggle townbell                                                       |\n| 0x80   | Back to work                                                          |\n```\n\n----------------------------------------\n\nTITLE: Creating CreationAttributeCost Modifier in Python\nDESCRIPTION: Defines the CreationAttributeCost modifier class that changes attribute costs for creating game entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nCreationAttributeCost(Modifier):\n    attributes : set(Attribute)\n    creatables : set(CreatableGameEntity)\n```\n\n----------------------------------------\n\nTITLE: Implementing Shadow Payment Mode in Python\nDESCRIPTION: Implements resource availability checking without actual resource consumption.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_112\n\nLANGUAGE: python\nCODE:\n```\nShadow(PaymentMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Build Action Structure in Ruby\nDESCRIPTION: Defines the data structure for building construction (except walls). It includes fields for action identifier, selection count, player number, coordinates, building ID, sprite ID, and selected builder IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/11-buildings.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef Build\n  int8 :action_identifier\n  int8 :selection_count\n  int8 :player_number\n  int8 :zero\n  float :x_coord\n  float :y_coord\n  int16 :building_id\n  int16 :zero2\n  int32 :const\n  int8 :sprite_id\n  array :selected_ids,\n        type => :int32,\n        initial_length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: Defining LanguageMarkupPair Class in Python for openage\nDESCRIPTION: Defines the translation of a longer text from a markup file in a specific language.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nLanguageMarkupPair(Object):\n    language    : Language\n    markup_file : file\n```\n\n----------------------------------------\n\nTITLE: Defining Sync Command Struct 16BC31 in C\nDESCRIPTION: Defines a C struct for sync command 16BC31. It includes network IDs, command, options (set to 0x00), and a time passed field.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct 16bc31 {\n  uint32_t network_source_id;\n  uint32_t network_dest_id;\n  uint8_t command;\n  uint8_t option1; // = 0x00\n  uint8_t option2; // = 0x00\n  uint8_t option3; // = 0x00\n  uint32_t time_passed;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ProgressProperty Base Class in Python\nDESCRIPTION: Base class for progress-related properties.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_126\n\nLANGUAGE: python\nCODE:\n```\nProgressProperty(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining LanguageSoundPair Class in Python for openage\nDESCRIPTION: Defines the translation of a sound in a specific language.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nLanguageSoundPair(Object):\n    language : Language\n    sound    : Sound\n```\n\n----------------------------------------\n\nTITLE: Using the OpenAge Logging System in C++\nDESCRIPTION: Demonstrates various ways to use the OpenAge logging system, including creating log messages, formatting, and throwing exceptions with log messages.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/logger.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include \"log/log.h\"\n\nlog::log(MSG(info) << \"test\" << 1337);\n\nauto msg = MSG(warn);\nmsg.fmt(\"%d %8.3f\", 10, 2.0) << \"lol test\";\nmsg << \"rofl\";\nlog::log(msg);\n\nvillager.log(MSG(dbg) <<\n        \"This is how you're supposed to break log lines that are too\"\n        \"long. \" << 1337 <<\n        \"foo\");\n\nthrow Error(MSG(err) << \"Exceptions use the MSG system as well!\");\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Target\nDESCRIPTION: Adds multiple C++ source files to the libopenage library target using CMake's add_sources command. The files include core functionality components like chunk handling, coordinate testing, physics, pixel manipulation, scene management, terminal handling and tile processing.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/coord/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\tchunk.cpp\n\tcoord_test.cpp\n\tdeclarations.cpp\n\tphys.cpp\n\tpixel.cpp\n    scene.cpp\n\tterm.cpp\n\ttile.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Fill Player Color Command Implementation\nDESCRIPTION: Command for filling multiple pixels with the same player color. Shows length calculation for player color fills.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nlength = command >> 4. If 0, the next byte is read and used as the length.\n(ex: 0x1A = 1, 0x2A = 2, 0xAA = 10, 0xFA = 15, 0x0A + 0x10 = 16)\n```\n\n----------------------------------------\n\nTITLE: Defining SMP Layer Header Structure in Python\nDESCRIPTION: Python struct format string for parsing SMP layer headers, corresponding to the C++ struct definition.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< 8I\")\n```\n\n----------------------------------------\n\nTITLE: Defining Event Base Class in Python\nDESCRIPTION: Base class for events that can be used in XOREventGate nodes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nEvent(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: C++ Function Call Example\nDESCRIPTION: Example of calling the wrapped Python function from C++ code.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"foo.h\"\n\nstd::cout << openage::bar.call(5, \"test\") << std::endl;\n```\n\n----------------------------------------\n\nTITLE: Creating Uniform Buffer from Shader Program in C++\nDESCRIPTION: Demonstrates how to create a uniform buffer from a named uniform block in a loaded shader program. The shader program is first added to the renderer, then used to create the uniform buffer.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_22\n\nLANGUAGE: c++\nCODE:\n```\nstd::shared_ptr<ShaderProgram> shader_prog = renderer->add_shader( { vshader_src, fshader_src } );\nstd::shared_ptr<UniformBuffer> buffer = renderer->add_uniform_buffer(shader_prog, \"unif_block\");\n```\n\n----------------------------------------\n\nTITLE: Defining Move Action Structure for AI Player in Ruby\nDESCRIPTION: Defines the structure for AI movement and attack actions with player identification, targeting, and positioning data.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/14-ai.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef PrimaryActionAI\n    int8 :action_identifier\n    int8 :selection_count\n    int8 :player_number\n    int8 :player_id\n    int32 :unknown_id\n    int32 :unknown_bytes\n    int32 :target_id\n    int8 :unknown_count\n    byte24 :zero\n    float :unknown_x_coord\n    float :unknown_y_coord\n    float :unknown_float\n    float :unknown_float2\n    int32 :unknown_bytes2\n    array :selected_ids,\n      type => :int32,\n      length => :selection_count,\n      onlyif => :selection_count > 0x01\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing OR LogicGate Python\nDESCRIPTION: Represents an OR gate that evaluates to true if at least one input is true. Inherits from LogicGate.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_72\n\nLANGUAGE: python\nCODE:\n```\nOR(LogicGate):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining PathType Base Class in Python\nDESCRIPTION: Base class for path types used in internal pathfinding grid systems.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_107\n\nLANGUAGE: python\nCODE:\n```\nPathType(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Lesser Draw Command Implementation\nDESCRIPTION: Command for drawing short blocks of pixels up to 64 pixels in length. Shows how length is calculated from command byte.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nlength = command >> 2\n(ex: 0x04 = 1, 0x08 = 2, 0x0C = 3, 0x10 = 4, 0x14 = 5, 0x18 = 6, 0x1C = 7, 0x20 = 8, 0x24 = 9)\n```\n\n----------------------------------------\n\nTITLE: Implementing Foundation Ability in Python\nDESCRIPTION: Modifies terrain under entity placement during creation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nFoundation(Ability):\n    foundation_terrain : Terrain\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library in CMake\nDESCRIPTION: This CMake command adds three C++ source files to the libopenage library build. The files are responsible for asset management, caching, and texture management functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/resources/assets/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tasset_manager.cpp\n\tcache.cpp\n\ttexture_manager.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Attack Ground Action Definition in Ruby\nDESCRIPTION: Defines the structure for ground attack commands used by siege weapons, including coordinates and unit selection.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/08-movement.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef AttackGround\n\tint8 :action_identifier\n\tint8 :selection_count\n\tint16 :zero\n\tfloat :x_coord\n\tfloat :y_coord\n\tarray :selected_ids,\n\t\t:type => int32,\n\t\t:length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing AttributeAbovePercentage Literal Python\nDESCRIPTION: Checks if an attribute of a game entity exceeds a percentage of its maximum value. Requires attribute and threshold to be defined.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_77\n\nLANGUAGE: python\nCODE:\n```\nAttributeAbovePercentage(Literal):\n    attribute : Attribute\n    threshold : float\n```\n\n----------------------------------------\n\nTITLE: Defining ProductionMode Base Class in Python\nDESCRIPTION: Base class for production queue configurations.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_122\n\nLANGUAGE: python\nCODE:\n```\nProductionMode(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing SendToContainer Resistance Class in Python\nDESCRIPTION: Handles resistance to SendToContainer effects with configuration for container types, search range, and container exclusions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nSendToContainer(DiscreteResistance):\n    type              : children(SendToContainerType)\n    search_range      : float\n    ignore_containers : set(EntityContainer)\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Action Struct in C\nDESCRIPTION: Defines a C struct for the primary action (00). It includes action identifier, player ID, target ID, selection count, coordinates, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nstruct primary_action {\n    uint8_t action_identifier;\n    uint8_t player_id;\n    uint32_t target_id;\n    uint8_t selection_count;\n    float x_coord;\n    float y_coord;\n    uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Terrain Overlay Progress Property in Python\nDESCRIPTION: Manages terrain overlay changes during progress intervals.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_130\n\nLANGUAGE: python\nCODE:\n```\nTerrainOverlay(ProgressProperty):\n    terrain_overlay : Terrain\n```\n\n----------------------------------------\n\nTITLE: Creating Explicit Render Layers in C++\nDESCRIPTION: Shows how to explicitly create render layers and control depth buffer behavior between layers, providing more control over the rendering process.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\npass->add_layer(42);\n\n// keep depth testing\npass->add_layer(42, false);\n```\n\n----------------------------------------\n\nTITLE: Running pxdgen on Header Files in CMake\nDESCRIPTION: Processes the testlist.h header file with the pxdgen tool. This likely generates Python bindings or interfaces for the C++ testing functionality defined in the header.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/testing/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxdgen(\n\ttestlist.h\n)\n```\n\n----------------------------------------\n\nTITLE: Rate Calculation Formula\nDESCRIPTION: Mathematical formula for calculating the applied rate of attribute changes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_8\n\nLANGUAGE: math\nCODE:\n```\napplied\\_rate = change\\_rate - block\\_rate\n```\n\n----------------------------------------\n\nTITLE: Setting Modpacks for Game Session\nDESCRIPTION: Specifies the modpacks to be loaded in the game session using the set_modpacks() method of the GameSimulation object.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/game_simulation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAfter the `GameSimulation` object is initialized, modpacks that should be loaded in\nthe game session can be passed via the `set_modpacks(..)` method.\n```\n\n----------------------------------------\n\nTITLE: Defining Reset Animation Override in Python\nDESCRIPTION: Class for resetting ability animations to their defaults.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nReset(AnimationOverride):\n    animations = {}\n    priority   = 0\n```\n\n----------------------------------------\n\nTITLE: Example Sprite Configuration Structure\nDESCRIPTION: Shows the basic structure and syntax of a sprite configuration file including comments, version, texture references, scaling, layers and frames.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/sprite_format_spec.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This is a sprite configuration file\n# comments start with # and are ignored\n\n# file version\nversion 2\n\n# texture file reference, relative to this file's location\ntexture <texture_id> <filename>\n\n# the zoom level at which the animation is shown in full detail\n# e.g. scalefactor 0.5 -> full detail at 200% zoom\nscalefactor <factor>\n\n# layer definitions\n# all layers will be drawn\nlayer <layer_id> mode=off  position=<int>\nlayer <layer_id> mode=once position=<int> time_per_frame=<float>\nlayer <layer_id> mode=loop position=<int> time_per_frame=<float> replay_delay=<float>\n\n# define an angle where frames can be assigned to or mirror from an existing angle\nangle <degree> mirror-from=<existing_angle>\n\n# assign frames to their layers and angles.\n# angle is the direction in degrees, etc.\nframe <frame_idx> <angle> <layer_id> <image_id> <subtex_id>\n```\n\n----------------------------------------\n\nTITLE: Defining WaitAbility Event in Python\nDESCRIPTION: Event class that fires when a previously executed ability finishes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nWaitAbility(Event):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Action Structure for AI Player in Ruby\nDESCRIPTION: Defines the structure for primary AI actions with target selection and coordinates. Used for basic interactions between AI and game objects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/14-ai.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef PrimaryActionAI\n    int8 :action_identifier\n    byte24 :zero\n    int32 :target_id\n    int8 :selection_count\n    byte24 :zero2\n    float :x_coord\n    float :y_coord\n    array :selected_ids,\n      type => :int32,\n      length => :selection_count,\n      onlyif => :selection_count < 0xFF\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Diplomatic Relations Type in Python\nDESCRIPTION: Defines a diplomatic property type that applies patches based on diplomatic stances between players.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_106\n\nLANGUAGE: python\nCODE:\n```\nDiplomatic(PatchProperty):\n    stances : set(children(DiplomaticStance))\n```\n\n----------------------------------------\n\nTITLE: Defining Ability Node in Python\nDESCRIPTION: Node class that executes a game entity ability when visited.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nAbility(Node):\n    next    : Node\n    ability : abstract(Ability)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library\nDESCRIPTION: Configures source files for the libopenage library using CMake's add_sources function. Includes multiple C++ implementation files related to pathfinding, grid, and other core components.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/pathfinding/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n    cost_field.cpp\n\tdefnitions.cpp\n\tfield_cache.cpp\n    flow_field.cpp\n\tgrid.cpp\n\tintegration_field.cpp\n    integrator.cpp\n\tpath.cpp\n\tpathfinder.cpp\n\tportal.cpp\n\tsector.cpp\n\ttests.cpp\n    types.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Wolf Line of Sight by Difficulty Level in Age of Empires II\nDESCRIPTION: This snippet outlines the line of sight range for wolves based on the game's difficulty settings. The range varies from 4 tiles on the easiest setting to 12 tiles on the hardest settings.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/wolves.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nEasiest   4  tiles\nStandard  6  tiles\nModerate  12 tiles\nHard      12 tiles\nHardest   12 tiles\n```\n\n----------------------------------------\n\nTITLE: Container Storage Effect Implementation\nDESCRIPTION: Effect for making units move to and enter storage containers, requiring EnterContainer ability.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nSendToContainer(DiscreteEffect):\n    type     : children(SendToStorageType)\n    storages : set(EntityContainer)\n```\n\n----------------------------------------\n\nTITLE: Religion Scoring Table in Markdown\nDESCRIPTION: Markdown table showing religious achievement scoring including conversions, temples, ruins, and artifacts.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/scoring.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nTask                              | Score\n----------------------------------|--------------------------\nConversion                        | 2 points per conversion\nMost conversions                  | 25 point bonus\nTemples built                     | 3 points per temple\nRuins controlled                  | 10 points per ruin\nArtifacts controlled              | 10 points per artifact\nControl of all Ruins or Artifacts | 50 point bonus\n```\n\n----------------------------------------\n\nTITLE: Defining AI Primary Action Struct in C\nDESCRIPTION: Defines a C struct for the AI primary action (02). It includes action identifier, target ID, selection count, coordinates, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nstruct ai_primary_action {\n    uint8_t action_identifier;\n    uint32_t target_id;\n    uint8_t selection_count;\n    float x_coord;\n    float y_coord;\n    uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Frame Definition Example\nDESCRIPTION: Demonstrates how to define a single frame with its index, angle, layer, texture, and subtexture references.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/sprite_format_spec.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nframe 0 90 1 0 2\n# frame_idx  = 0  -> first frame in the animation\n# angle      = 90 -> attached to angle 90\n# layer_id   = 1  -> drawn on layer 1\n# texture_id = 0  -> taken from texture resource with ID 0\n# subtex_id  = 2  -> uses subtexture with ID 2 as sprite\n```\n\n----------------------------------------\n\nTITLE: Defining TranslatedString Class in Python for openage\nDESCRIPTION: Represents the translated versions of a string.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_63\n\nLANGUAGE: python\nCODE:\n```\nTranslatedString(TranslatedObject):\n    translations : set(LanguageTextPair)\n```\n\n----------------------------------------\n\nTITLE: Applying Terrain Blending in Python\nDESCRIPTION: This code snippet demonstrates the process of applying terrain blending. It determines the blending mode, retrieves the neighboring tile, and applies masks to create the blended terrain overlay.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/blendomatic.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nblendmode    = get_blending_mode(priority, @)\nneighbortile = get_terrain_by_priority(priority)\n\ndraw_masks = adjacent_mask_id + diagonal_mask_ids\n\nfor maskid in draw_masks:\n    maskdata = mask[blendmode][maskid]\n\n    overlay_data = apply_mask(neighbortile.data, maskdata)\n    overlay_data.draw()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake Build Configuration\nDESCRIPTION: CMake directive that adds Python modules to the build system. The modules include initialization, media processing, modpack processing, and main processor functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/processor/conversion/hd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tmedia_subprocessor.py\n\tmodpack_subprocessor.py\n\tprocessor.py\n)\n```\n\n----------------------------------------\n\nTITLE: Combined Infantry and Siege Parent Formation in AoE2\nDESCRIPTION: ASCII diagram showing how swordsmen and rams are arranged when combined in a parent formation. The wider size of rams causes the swordsmen rows to extend to match the overall formation width.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n....................\n...SSSSSSSSSSSSSS...\n.......RRRRRR.......\n....................\n```\n\n----------------------------------------\n\nTITLE: Defining STemplet.dat Structure in C++\nDESCRIPTION: Defines the binary structure of the STemplet.dat file format. Each templet contains header information, tile dimensions, hotspot coordinates, tile counts, offset data, and outline tables similar to SLP files. The structure notably excludes actual command data which is generated procedurally by the game.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/stemplet-dat.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct templets {\n    struct templet {\n        int32_t header_length;         // number of bytes to read this Templet\n        int32_t tile_size_x;           // seems to be always 97\n        int32_t tile_size_y;           // mainly 49, but 25 for shorter tiles, and 73 for longer tiles.\n        int32_t hotspot_x;             // rendering offset\n        int32_t hotspot_y;             //\n        int32_t tiles_total;           // used for allocating rhombus tile count in bytes\n        int32_t offset_start1;         // colors1 start from header\n        int32_t offset_start2;         // colors2 start from header\n\n        // Now follows an outline table, exactly how they are found in SLP files.\n        struct {\n            uint16_t outline_left;     // number of transparent pixels at the start of this row (0x8000 must be interpreted as 0)\n            uint16_t outline_right;    // number of transparent pixels at the end of this row (item dito)\n        }[tile_size_y];\n\n        // Now follows a command table, exactly how they are found in SLP files.\n        // the next tile_size_y ints, (0 <= i < tile_size_y) indicate the offsets where the commands for row i are found,\n        // within an imaginary SLP file that could be generated from this data.\n        // The offsets would be 0x40 (header) + tile_size_y * 4 (length of outline table) + command offset\n        int32_t slp_command_offsets[tile_size_y];\n\n        // Normally, this is where the commands follow in slp files, but these are not included.\n        // The game is procedurally generating the missing commands.\n        // For example, at offset 0x00419AAB\n        // It doesn't make much sense because I don't think it updates the slp_command_offsets, but I may be wrong.\n    }[17];                                 // always seems to be 17\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Continuous Resistance Base Class\nDESCRIPTION: Base class for resistances against continuous effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nContinuousResistance(Resistance):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Imagefile Attribute Example in OpenAge Texture Format\nDESCRIPTION: Shows how to reference an image resource in an OpenAge texture file. This attribute tells the renderer which image file to load and must be defined exactly once.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/texture_format_spec.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nimagefile \"idle.png\"\n```\n\n----------------------------------------\n\nTITLE: Any TechType for Universal Technology Matching\nDESCRIPTION: Special TechType that can match any technology, including those without an explicitly assigned type.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_163\n\nLANGUAGE: python\nCODE:\n```\nAny(TechType):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Player Readiness Structure in Ruby\nDESCRIPTION: This Ruby method defines the structure of the data sent when a player is readying in the lobby. It includes various fields such as network IDs, command options, and placeholders for unknown fields that are key for managing player states. The method assigns specific values to these fields based on the player's action of readying or unreadying.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/03-sync.md#2025-04-21_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndef 24BC52\n  int32 :network_source_id\n  int32 :network_dest_id\n  int8 :command\n  int8 :option1\n  int8 :option2\n  int8 :option3\n  int8 :unknown\n  int8 :player_id\n  int8 :unknown2\n  int32 :zero\n  int32 :unknown3\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Storage Element Capacity Modifier in Python\nDESCRIPTION: This snippet defines the 'StorageElementCapacity' modifier, which adjusts the carrying capacity of storage elements in containers. This can affect overall gameplay by managing resource storage efficiently.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nStorageElementCapacity(Modifier):\n    storage_element : StorageElementDefinition\n```\n\n----------------------------------------\n\nTITLE: Defining Research Time Modifier in Python\nDESCRIPTION: This modifier changes the time required to research technologies, which can significantly impact strategic planning in the game.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nResearchTime(Modifier):\n    researchables : set(ResearchableTech)\n```\n\n----------------------------------------\n\nTITLE: Final Package Configuration and Output Settings - CMake\nDESCRIPTION: This part of the configuration specifies the output directory for the package and the checksum type for verification. It is essential for ensuring the generated packages are organized and secure.\nSOURCE: https://github.com/sfttech/openage/blob/master/packaging/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(CPACK_PACKAGE_INSTALL_DIRECTORY \"${PROJECT_NAME}\")\nset(CPACK_PACKAGE_CHECKSUM \"SHA256\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Trade Cart Gold in Age of Kings (AoE2)\nDESCRIPTION: Formula for calculating the gold value generated by trade carts in Age of Kings. It takes into account the distance between markets and the map size.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/market.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n(gold value) = (d/size + 0.3) * d * 0.46 + 0.5\n\nwith\n`size`, the map size in tiles along the edge of the map and\n`d` is calculated as follows:\n\nd = max(0.0, sqrt(max(0.0, deltaX-4)^2 + max(0.0, deltaY-4)^2))\n\nwith `deltaX` and `deltaY` the distances between the Markets in either axis-aligned direction, measured from the center of each Market.\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Functions and Objects in Cython\nDESCRIPTION: Demonstrates how to define typed functions and objects in a Cython .pyx file, including a C++ class and a Python-accessible function.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_0\n\nLANGUAGE: Cython\nCODE:\n```\ncdef int square(int x):\n    return x * x\n\ncdef cppclass Rectangle:\n    int h, w\n\n    int size():\n        return this.h * this.w\n\ndef foo():\n    cdef Rectangle r\n    r.h = 5\n    r.w = 6\n    return square(r.size())\n```\n\n----------------------------------------\n\nTITLE: Implementing Unconditional Modifier for FlatAttributeChange in Python\nDESCRIPTION: Defines the Unconditional modifier class that changes FlatAttributeChange effects without conditions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nUnconditional(Modifier):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Displaying Packet Commands Table in Markdown\nDESCRIPTION: This snippet shows a markdown table listing various network commands used in the game's protocol, including their hexadecimal values and purposes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/01-general.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Command | Purpose          |\n| ------- | ---------------- |\n| 0x31    | Sync             |\n| 0x32    | Sync             |\n| 0x35    | Sync (Lobby)     |\n| 0x3e    | Player-issued    |\n| 0x41    | Sync             |\n| 0x43    | Chat Message     |\n| 0x44    | Sync             |\n| 0x4d    | Sync             |\n| 0x51    | De-Sync          |\n| 0x52    | Readying (Lobby) |\n| 0x53    | Sync             |\n| 0x5a    | Lobby            |\n```\n\n----------------------------------------\n\nTITLE: Implementing Attribute Change Increase Effect\nDESCRIPTION: Specialization for increasing attribute values at a constant rate.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nFlatAttributeChangeIncrease(FlatAttributeChange):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring openage with Custom Python Path\nDESCRIPTION: Command example for configuring openage with a custom Python include directory. This demonstrates how to provide hints to cmake when dependencies are in non-standard locations.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/building.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./configure -- -DPYTHON_INCLUDE_DIRS=/whereever/python/include/\n```\n\n----------------------------------------\n\nTITLE: Version Attribute Example in OpenAge Texture Format\nDESCRIPTION: Demonstrates how to specify the version of the texture format in an OpenAge texture file. This attribute increments whenever the syntax or keywords of the format change.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/texture_format_spec.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nversion 1\n```\n\n----------------------------------------\n\nTITLE: Implementing SUBSETMAX LogicGate Python\nDESCRIPTION: Evaluates to true if no more than a specified number of inputs are true. Inherits from LogicGate.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_73\n\nLANGUAGE: python\nCODE:\n```\nSUBSETMAX(LogicGate):\n    size : int\n```\n\n----------------------------------------\n\nTITLE: Accuracy Error Radius Calculation\nDESCRIPTION: Pseudocode showing how the game calculates the margin of error for inaccurate shots based on distance and accuracy error radius.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/accuracy.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n(margin) = (distance) * rand(0,accuracy_error_radius)\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Modules Configuration\nDESCRIPTION: Configures the build system to include Cython modules for terrain and texture merging operations that need to be compiled to native code.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/processor/export/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cython_modules(\n\tterrain_merge.pyx\n\ttexture_merge.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping GroupIDs to Subformations in AoE2\nDESCRIPTION: ASCII diagram showing which GroupID values correspond to each subformation type. This mapping determines how the game categorizes different unit types into appropriate subformations when organizing unit movements.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n.................\n...^^^^^^^.........\n1..Cavalry......... 912, 947\n2..Infantry (melee) 906\n3..Ranged.......... 900, 923, 936, 944, 955\n4..Siege/Support... 902, 913, 918, 919, 920, 935, 943, 951, 959, Saboteur (UnitID: 706)\n.................\n5..Else............ 904, 921, 958, 961 (not part of any formation)\n```\n\n----------------------------------------\n\nTITLE: Implementing 24BC35 Packet Structure in Ruby - Lobby Connection Synchronization\nDESCRIPTION: Defines the structure of a 24BC35 packet sent every 2 seconds to synchronize connections between players in the lobby. It includes fields for connection initiation and maintenance with different values for hosts versus regular players.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/03-sync.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef 24BC35\n  int32 :network_source_id\n  int32 :network_dest_id\n  int8 :command\n  int8 :option1\n  int8 :option2\n  int8 :option3\n  int32 :connecting1\n  int32 :unknown\n  int32 :connecting2\nend\n```\n\n----------------------------------------\n\nTITLE: Running OpenAge Docker Container with Wayland Display Server\nDESCRIPTION: Command to run the OpenAge Docker container with Wayland display server integration, setting the appropriate environment variables and mounting the Wayland socket.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/docker.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it \\\n  -e XDG_RUNTIME_DIR=/tmp \\\n  -e QT_QPA_PLATFORM=wayland \\\n  -e WAYLAND_DISPLAY=$WAYLAND_DISPLAY \\\n  -v $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:/tmp/$WAYLAND_DISPLAY \\\n  --user=$(id -u):$(id -g) \\\n  --network host openage\n```\n\n----------------------------------------\n\nTITLE: Defining Network Protocol Header Structure in Ruby\nDESCRIPTION: This Ruby code defines the structure of the network protocol header used in Age of Empires II. It specifies the fields, their data types, and sizes, totaling 20 bytes for most packets (with exceptions for sync packets).\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/02-header.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef Header\n  int32 :network_source_id\n  int32 :network_dest_id\n  int8 :command\n  int8 :option1\n  int8 :option2\n  int8 :option3\n  int32 :communication_turn\n  int32 :individual_counter\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Mode Base Class in Python\nDESCRIPTION: Base class for different payment options used in cost calculations.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_108\n\nLANGUAGE: python\nCODE:\n```\nPaymentMode(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Effect Module Properties\nDESCRIPTION: Defines effect-related properties including area effects, costs, diplomatic effects, and priorities with their corresponding property mappings.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/nyan_api/v0.3.0.md#2025-04-21_snippet_3\n\nLANGUAGE: nyan\nCODE:\n```\nEffectProperty(Entity)\nAreaEffect(EffectProperty)\nCost(EffectProperty)\nDiplomatic(EffectProperty)\nPriority(EffectProperty)\nproperties : dict(EffectProperty, EffectProperty)\n```\n\n----------------------------------------\n\nTITLE: Setting QTGUI_SOURCES in Parent Scope in CMake\nDESCRIPTION: This snippet sets the QTGUI_SOURCES variable in the parent scope, making it available for use in parent CMakeLists.txt files or other parts of the build system.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/gui/guisys/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(QTGUI_SOURCES ${QTGUI_SOURCES} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Texture Reference Examples\nDESCRIPTION: Examples of texture resource references with different file paths, showing local, relative and absolute path options.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/terrain_format_spec.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntexture 0 \"idle.texture\"\ntexture 1 \"../../attack.texture\"\ntexture 2 \"/{aoe2_base}/graphics/attack.texture\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Trade Cart Gold in The Conquerors (AoE2 Expansion)\nDESCRIPTION: Updated formula for calculating the gold value generated by trade carts in The Conquerors expansion. It introduces additional factors A and B, which may depend on civilization attributes and trade vehicle properties.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/market.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n(gold value) = 2 * (d/size + 0.3) * d * A ) / B   + 0.5\n\n`A` and `B` may depend on civilization attributes and on the speed of the trade vehicle (trade cog or cart), or its radius.\n\nd = max(0.1, sqrt(max(0.0, deltaX-5)^2 + max(0.0, deltaY-5)^2))\n```\n\n----------------------------------------\n\nTITLE: Creating QtCreator QML Files Target\nDESCRIPTION: Creates a custom target to make QML files visible in QtCreator IDE. Glob pattern collects all QML files in the qml directory.\nSOURCE: https://github.com/sfttech/openage/blob/master/assets/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB QML_SRC \"qml/*.qml\")\nadd_custom_target(qtcreator-show-qml SOURCES ${QML_SRC})\n```\n\n----------------------------------------\n\nTITLE: Compiling and Using a Cython Module\nDESCRIPTION: Shows the command-line steps to compile a Cython module and use it in Python, including cythonization and linking.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ cython --cplus -3 test.pyx\n$ g++ -shared -fPIC $(python3-config --includes) test.cpp -o test.so\n$ python3\n>>> import test\n>>> test.foo()\n900\n```\n\n----------------------------------------\n\nTITLE: Blendtable Quick Reference Example\nDESCRIPTION: A quick reference example showing the basic syntax of a blendtable configuration file, including version declaration, blendtable matrix, and pattern definitions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/blendtable_format_spec.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This is a blendtable configuration file\n# comments start with # and are ignored\n\n# file version\nversion 1\n\n# table definitions (n x n matrix)\nblendtable [\n<a> <b> <c> ...\n<d> <e> <f> ...\n<g> <h> <i> ...\n... ... ... ...\n]\n\n# pattern definitions\npattern <pattern_id> <filename>\n```\n\n----------------------------------------\n\nTITLE: Creating Uniform Buffer Input Values in C++\nDESCRIPTION: Demonstrates creation of uniform buffer inputs with multiple parameters including vector, float, and integer values.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/level1.md#2025-04-21_snippet_24\n\nLANGUAGE: c++\nCODE:\n```\nstd::shared_ptr<UniformBufferInput> buff_input = buffer->new_uniform_input(\n  \"color\", Eigen::Vector3f{ 0.0f, 1.0f, 0.0f },\n  \"time\", 0.0f,\n  \"num\", 1337\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Blendmask Configuration\nDESCRIPTION: Example showing the basic syntax for configuring a blendmask file with version, texture reference and scaling factor.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/blendmask_format_spec.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This is a blendtable configuration file\n# comments start with # and are ignored\n\n# file version\nversion 2\n\n# texture file reference, relative to this file's location\ntexture <texture_id> <filename>\n\n# the zoom level at which the animation is shown in full detail\n# e.g. scalefactor 0.5 -> full detail at 200% zoom\nscalefactor <factor>\n\n# selection of blendomatic borders\nmask <directions> <texture_id> <subtex_id>\n```\n\n----------------------------------------\n\nTITLE: Individual Ram Subformation in AoE2\nDESCRIPTION: ASCII diagram showing how rams would be arranged when selected as a standalone subformation, with units represented by 'R'. Siege units typically form a single row due to their larger size.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n............\n...RRRRRR...\n............\n```\n\n----------------------------------------\n\nTITLE: Range Pattern for Odd-Sized Buildings ASCII Representation\nDESCRIPTION: Visual representation of the building range pattern for 1x1, 3x3, and 5x5 tile buildings. Shows the range where a builder can place new buildings, with 'o' representing the builder position, '.' showing tiles in range, and 'X' showing tiles out of range.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/building_placement.md#2025-04-21_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\nXXXXXXX.....XXXXXXX\nXXXX...........XXXX\nXXX.............XXX\nXX...............XX\nX.................X\nX.................X\nX.................X\n...................\n...................\n.........o.........\n...................\n...................\nX.................X\nX.................X\nX.................X\nXX...............XX\nXXX.............XXX\nXXXX...........XXXX\nXXXXXXX.....XXXXXXX\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake for openage Project\nDESCRIPTION: This CMake command adds two Python modules (__init__.py and internal_nyan_names.py) to the project. It's likely part of the build configuration to ensure these Python files are included in the project structure.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/conversion/swgb/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tinternal_nyan_names.py\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Town Bell Range and Garrison Behavior\nDESCRIPTION: ASCII diagram showing a sample town bell scenario with a town center (C), villagers (X), potential garrisons (G), and the bell's range (dotted area). The diagram illustrates which villagers would respond to the bell and which garrisons they would choose.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/town_bell.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n__|ABCDEFGHIJKLMNO\n------------------\nA |OOOOOOOOOXOOOOO\nB |OO...G.......OO\nC |OO.......X...OO\nD |XO....XC.....OO\nE |OO...........OO\nF |OO.X........XOO\nG |OOOOOOOOOOOOGOO\n```\n\n----------------------------------------\n\nTITLE: Converting Gource PPM Output to Video using ffmpeg\nDESCRIPTION: ffmpeg command to convert the Gource PPM output file into a high-quality video file. It specifies parameters for frame rate, video codec, preset, pixel format, and compression quality.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/evolution-openage-gource.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n<path-to-ffmpeg(.exe)> -y -r 60 -f image2pipe -vcodec ppm -i <gource-outputfile-name.ppm> -vcodec libx264 -preset fast -pix_fmt yuv420p -crf 1 -threads 4 -bf 0 <output-filename>.x264.avi\n```\n\n----------------------------------------\n\nTITLE: Multiple Unit Type Distribution in AoE2 Subformations\nDESCRIPTION: ASCII diagram demonstrating the distribution pattern when four different unit types (archers 'A', skirmishers 'S', longbowmen 'L', and throwing axemen 'T') are combined in a formation, showing how selection order affects unit placement.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n..............\n...^^^^^^^^...\n..>LASTLASL...\n...LASLALA....\n..............\n```\n\n----------------------------------------\n\nTITLE: Displaying Subformations and Front Line Orientation in AoE2\nDESCRIPTION: ASCII diagram showing the four subformation types with the front of the formation indicated by '^' symbols. This demonstrates how units are organized vertically with cavalry in front, followed by infantry, ranged units, and siege/support units at the back.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n.................\n...^^^^^^^.........\n1..Cavalry.........\n2..Infantry (melee)\n3..Ranged..........\n4..Siege/Support...\n.................\n```\n\n----------------------------------------\n\nTITLE: Implementing 16BC41 Packet Structure in Ruby - Player Counter Synchronization\nDESCRIPTION: Defines the structure of a 16BC41 packet that contains an incremental counter sent every 120ms to maintain game state synchronization between players. The packet includes network IDs, command byte, options, and an individual counter that helps detect de-synchronization.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/03-sync.md#2025-04-21_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ndef 16BC41\n  int32 :network_source_id\n  int32 :network_dest_id\n  int8 :command\n  int8 :option1\n  int8 :option2\n  int8 :option3\n  int32 :individual_counter\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing OwnsGameEntity Literal Python\nDESCRIPTION: Fires when a specified game entity is owned by a player within the defined scope. Requires the game_entity to be defined.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nOwnsGameEntity(Literal):\n    game_entity : GameEntity\n```\n\n----------------------------------------\n\nTITLE: Proposing Built-in Snapshot Creation for Mods in Markdown\nDESCRIPTION: This snippet describes a concept for a built-in snapshot creation tool for mods. It allows modders to create snapshots of their current builds, enabling rollback to previous states. The idea includes possibilities for incremental or full snapshots, potential integration with version control systems, and additional debug information storage.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/technical.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Built-in Snapshot Creation for Mods\n\nLet modders make a snapshot of their current build via a provided engine tool. The mod\ncan be rolled back to a previous state with this feature. Snapshots could be incremental\n(only changes to previous builds are saved) or fully-featured (the snapshot itself works\nlike a standalone build).\n\nIncremental snapshots could make use of a version control system like git or SVN, although\nthis would be limited to non-binary files only. It would require a git wrapper in the editor\nand the modding tools.\n\nSnapshots could contain information that are unnecessary for normal builds such as debug\ninformation or generated data from test cases.\n```\n\n----------------------------------------\n\nTITLE: Adding Live Reload Source Files for Qt GUI in CMake\nDESCRIPTION: This snippet appends source files related to live reloading functionality to the QTGUI_SOURCES list. It includes implementations for deferred property values, live reloader, and recursive directory watching.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/gui/guisys/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND QTGUI_SOURCES\n    ${CMAKE_CURRENT_SOURCE_DIR}/private/livereload/deferred_initial_constant_property_values.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/private/livereload/gui_live_reloader.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/private/livereload/recursive_directory_watcher_worker.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/private/livereload/recursive_directory_watcher.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Pixel Format Examples in OpenAge Texture Format\nDESCRIPTION: Shows how to specify the pixel format used in the image file with the optional color bit parameter. The format defines how the pixels are represented, and the cbit parameter indicates whether a command bit is reserved.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/texture_format_spec.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\npxformat rgba8\npxformat rgba8 cbit=true\n```\n\n----------------------------------------\n\nTITLE: Tagging a Release Commit in Git\nDESCRIPTION: This command demonstrates how to create a signed Git tag for a new release version. The '-s' flag is used to create a GPG-signed tag, which will show as 'verified' on GitHub.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/releasing.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit tag -s v0.5.0\n```\n\n----------------------------------------\n\nTITLE: Blendtable Definition Examples\nDESCRIPTION: Examples showing how to define blending tables with different paths and parameters.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/terrain_format_spec.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nblendtable 0 \"blend0.bltable\" 40 7\nblendtable 1 \"./blend3.bltable\" 10 1\nblendtable 2 \"/{aoe2_base}/blend8.bltable\" 90 1\n```\n\n----------------------------------------\n\nTITLE: Designing MoveMode Object Python\nDESCRIPTION: Creates a general object layout for move modes available in the `Move` ability of a game entity.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_97\n\nLANGUAGE: python\nCODE:\n```\nMoveMode(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Version Declaration in Blendtable Format\nDESCRIPTION: Example showing how to declare the version of the blendtable format in a configuration file. The version increments when syntax or keywords change.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/blendtable_format_spec.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nversion 1\n```\n\n----------------------------------------\n\nTITLE: Downloading Game Assets with SteamCMD\nDESCRIPTION: Command to download game assets using SteamCMD. Requires replacing USERNAME with Steam username, GAME_APP_ID with the appropriate game ID, and ASSET_DIR with target directory path.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media_convert.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./steamcmd.sh +@sSteamCmdForcePlatformType windows +login USERNAME +force_install_dir ASSET_DIR +app_update GAME_APP_ID validate +quit\n```\n\n----------------------------------------\n\nTITLE: Greater Skip Command Implementation\nDESCRIPTION: Command for skipping long blocks of transparent pixels greater than 64 pixels in length. Shows length calculation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n(ex: 0x13 + 0x00 = 256, 0x13 + 0x0A = 266, 0x23 + 0x00 = 512)\n```\n\n----------------------------------------\n\nTITLE: Defining TranslatedMarkupFile Class in Python for openage\nDESCRIPTION: Represents the translated versions of a longer text stored in markup files.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nTranslatedMarkupFile(TranslatedObject):\n    translations : set(LanguageMarkupPair)\n```\n\n----------------------------------------\n\nTITLE: Delete Action Definition in Ruby\nDESCRIPTION: Defines the structure for deleting units and buildings, including object ID and player information.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/08-movement.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef Delete\n  int8 :action_identifier\n  byte24 :zero\n  int32 :object_id\n  int8 :player_number\n  byte24 :zero\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake for OpenAge Project\nDESCRIPTION: This CMake command adds multiple Python modules to the OpenAge project. The modules appear to be part of a 'genie' system, covering various game elements such as civilizations, effects, graphics, sounds, technologies, terrain, and units.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/entity_object/conversion/aoc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tgenie_civ.py\n\tgenie_connection.py\n\tgenie_effect.py\n\tgenie_graphic.py\n\tgenie_object_container.py\n\tgenie_sound.py\n\tgenie_tech.py\n\tgenie_terrain.py\n\tgenie_unit.py\n)\n```\n\n----------------------------------------\n\nTITLE: Range Pattern for Even-Sized Buildings ASCII Representation\nDESCRIPTION: Visual representation of the building range pattern for 2x2 and 4x4 tile buildings. Shows the range where a builder can place new buildings, with 'o' representing the builder position, '.' showing tiles in range, and 'X' showing tiles out of range.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/building_placement.md#2025-04-21_snippet_1\n\nLANGUAGE: ascii\nCODE:\n```\nXXXXXXXXXXXXXXXXXXX\nXXXXXXX.....XXXXXXX\nXXXXX.........XXXXX\nXXX.............XXX\nXXX.............XXX\nXX...............XX\nXX...............XX\nX.................X\nX.................X\nX........o........X\nX.................X\nX.................X\nXX...............XX\nXX...............XX\nXXX.............XXX\nXXX.............XXX\nXXXXX.........XXXXX\nXXXXXXX.....XXXXXXX\nXXXXXXXXXXXXXXXXXXX\n```\n\n----------------------------------------\n\nTITLE: Chat Message Packet Example - Hex Dump\nDESCRIPTION: Hexadecimal representation of a sample chat message packet showing actual byte values for each field in the message structure.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/05-chat_protocol.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n0000 02 00 4e 59 59 4e 4e 4e 4e 4e 32 00 09 00 00 00\n0010 00 61 62 63 64 65 66 67 68 69 00 00 18 dc 32\n```\n\n----------------------------------------\n\nTITLE: Individual Swordsman Subformation in AoE2\nDESCRIPTION: ASCII diagram showing how swordsmen would be arranged when selected as a standalone subformation, with units represented by 'S'. This demonstrates the default row arrangement for infantry units.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n.............\n...SSSSSSS...\n...SSSSSSS...\n.............\n```\n\n----------------------------------------\n\nTITLE: Running Demo 3 - Level 2 Renderer Setup\nDESCRIPTION: Command to run the demo showing Level 2 Renderer setup with camera system interaction.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/demos.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/run test --demo renderer.tests.renderer_demo 3\n```\n\n----------------------------------------\n\nTITLE: Implementing 56BC4D Packet Structure in Ruby - Game State Validation\nDESCRIPTION: Defines the structure of a 56BC4D packet sent every 8-16 seconds to validate game state consistency across players. It contains multiple fields that should be identical for all players during a given interval to ensure synchronization.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/03-sync.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef 56BC4D\n  byte20 :header\n  int32 :unknown1\n  int32 :communication_turn_check\n  int32 :unknown2\n  int32 :unknown3\n  int32 :unknown3\n  int32 :unknown5\n  int32 :unknown6\n  int32 :unknown7\n  int32 :unknown8\nend\n```\n\n----------------------------------------\n\nTITLE: Checking ProjectileHitTerrain Literal Python\nDESCRIPTION: Triggers when a game entity's hitbox collides with the terrain. Requires no additional parameters.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nProjectileHitTerrain(Literal):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining SMP Command Offset Structure in C++\nDESCRIPTION: C++ struct definition for SMP command offsets, which define the offset of the first drawing command for each row.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nstruct smp_command_offset {\n  uint32 offset;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Modules in CMake\nDESCRIPTION: Adds Python modules to the build system using add_py_modules CMake function. Includes core Python files and adds a subtool subdirectory to the build.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/tool/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n    api_export.py\n\tdriver.py\n\tinteractive.py\n\tsinglefile.py\n)\n\nadd_subdirectory(subtool)\n```\n\n----------------------------------------\n\nTITLE: Defining SLD Frame Header Structure in Python\nDESCRIPTION: This line defines the format string for parsing an SLD frame header using Python's struct module.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< 4H 2B H\")\n```\n\n----------------------------------------\n\nTITLE: Specifying Changelog Format and Versioning in Markdown\nDESCRIPTION: This snippet defines the format used for the changelog and specifies the versioning system. It includes links to the standards followed and mentions the location of individual changelogs.\nSOURCE: https://github.com/sfttech/openage/blob/master/changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Changelog\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html) since release [0.4.0].\n\nIndividual changelogs for the individual engine parts are stored in the [doc/changelogs](doc/changelogs) folder.\n```\n\n----------------------------------------\n\nTITLE: Converting Repair Speed to Milliseconds\nDESCRIPTION: Mathematical conversion of repair speed from HP per minute to milliseconds per HP.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/repair.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n750 hp/min = 750/60000 hp/msec = 0.0125 hp/msec => 80 msec/hp\n```\n\n----------------------------------------\n\nTITLE: Converting Standalone WAVs in OpenAge\nDESCRIPTION: Command for converting standalone WAV sound files to OPUS format. This is specifically for Age of Empires 2: HD Edition.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/convert/convert_single_file.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npython3 -m openage convert-file ~/games/aoe2/resources/123.wav /tmp/rofl.opus\n```\n\n----------------------------------------\n\nTITLE: SMX Layer Header Structure Definition in C++\nDESCRIPTION: Defines the layer header structure containing dimensions, hotspot coordinates and layer metadata.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smx-files.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstruct smx_layer_header {\n  uint16 width;\n  uint16 height;\n  uint16 hotspot_x;\n  uint16 hotspot_y;\n  uint32 layer_len;\n  uint32 ??;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Drop Relic Command Structure in Ruby\nDESCRIPTION: Defines the binary packet structure for the Drop Relic command (0x7e) in Age of Empires II. The structure includes an action identifier, 3 zero bytes, and a monk unit ID.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/08-movement.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndef DropRelic\n  int8 :action_identifier\n  byte24 :zero\n  int32 :monk_id\nend\n```\n\n----------------------------------------\n\nTITLE: Defining RallyPoint Structure for Rally Point Actions in Ruby\nDESCRIPTION: Defines the data structure for setting rally points in the game. Includes fields for action identifier, selection count, target coordinates, and selected building IDs. Handles both setting rally points in open space and on specific targets.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/10-unit_creation.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef RallyPoint\n  int8 :action_identifier\n  int8 :selection_count\n  int16 :zero\n  int32 :target_id\n  int32 :target_unit_id\n  float :x_coord\n  float :y_coord\n  array :selected_ids,\n    type => :int32,\n    length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Module - Cython\nDESCRIPTION: This snippet employs the `add_cython_modules` function to register a Cython module file.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/util/filelike/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: Cython\nCODE:\n```\nadd_cython_modules(\\n\\tcpp.pyx\\n)\n```\n\n----------------------------------------\n\nTITLE: Size Attribute Example in OpenAge Texture Format\nDESCRIPTION: Demonstrates how to define the dimensions of the image in an OpenAge texture file. This specifies the width and height of the image in pixels.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/texture_format_spec.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsize 800 600\n```\n\n----------------------------------------\n\nTITLE: Version-Pinned Modpack Reference Format\nDESCRIPTION: Illustrates how to reference a specific version of a modpack by appending the version number to the identifier with a double colon separator.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/modpacks.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nmodname@reponame::version\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenAge Project Configuration and C++/Python Requirements\nDESCRIPTION: Configures the project name, C++ standard requirements, and Python/Cython version dependencies for the build system.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# main buildsystem setup entry point\nproject(openage CXX)\n\n# C++ standard requirement\nset(CMAKE_CXX_STANDARD 20)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n# Python and Cython requirements\nset(PYTHON_MIN_VERSION 3.9)\nset(CYTHON_MIN_VERSION 3.0.10)\nset(CYTHON_MIN_VERSION_FALLBACK 0.29.31)\nset(CYTHON_MAX_VERSION_FALLBACK 3.0.7)\n```\n\n----------------------------------------\n\nTITLE: Building OpenAge from Source on Linux\nDESCRIPTION: Step-by-step instructions for downloading, configuring, and building openage from source code on Linux systems.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/editor/scripting.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/SFTtech/openage\ncd openage\n./configure --mode=release --compiler=clang++\nmake -j$(nproc)\nmake run\n```\n\n----------------------------------------\n\nTITLE: Defining False LogicElement Class in Python for openage\nDESCRIPTION: Represents a logic element that is always false.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_66\n\nLANGUAGE: python\nCODE:\n```\nFalse(LogicElement):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing AttributeBelowValue Literal Python\nDESCRIPTION: Checks if an attribute's value is lower than a given threshold. Requires the threshold and attribute as parameters.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_80\n\nLANGUAGE: python\nCODE:\n```\nAttributeBelowValue(Literal):\n    attribute : Attribute\n    threshold : float\n```\n\n----------------------------------------\n\nTITLE: Defining SLD Graphics Layer Header Structure in Python\nDESCRIPTION: This line defines the format string for parsing the header of the main graphics layer in an SLD file using Python's struct module.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< 4H 2B\")\n```\n\n----------------------------------------\n\nTITLE: Defining ClosestHerding Class in Python for openage\nDESCRIPTION: Represents a herdable mode where the player with the closest herding game entity gets ownership.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nClosestHerding(HerdableMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Converting SLPs from DRS Archives in OpenAge\nDESCRIPTION: Command for extracting and converting SLP graphics files from DRS archives to PNG format. This is applicable for older versions of Age of Empires 1, Age of Empires 2, and SWGB.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/convert/convert_single_file.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 -m openage convert-file --palettes-path ~/games/aoe2/Data/ --drs ~/games/aoe2/Data/graphics.drs 326.slp /tmp/rofl.png\n```\n\n----------------------------------------\n\nTITLE: Defining ProtectingAttribute Class in Python\nDESCRIPTION: Class for attributes that protect other attributes from decreases.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nProtectingAttribute(Attribute):\n    protects : Attribute\n```\n\n----------------------------------------\n\nTITLE: Implementing FlatAttributeChangeDecrease Resistance Class in Python\nDESCRIPTION: Specialization of FlatAttributeChange that specifically handles resistance to attribute decrease effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nFlatAttributeChangeDecrease(FlatAttributeChange):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Creating NyanPatch Object Python\nDESCRIPTION: Serves as a parent object for nyan patches within the openage API. Must be extended by concrete patch classes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_103\n\nLANGUAGE: python\nCODE:\n```\nNyanPatch(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running OpenAge in Default Game Mode\nDESCRIPTION: This command runs openage in the default game mode, which starts a new game instance and creates necessary configs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/running.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbin/run\n```\n\n----------------------------------------\n\nTITLE: Implementing XOR LogicGate Python\nDESCRIPTION: Represents an XOR gate that evaluates to true if exactly one input is true. Inherits from LogicGate.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nXOR(LogicGate):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Modifying Windows Batch File for Multiple Python Installations\nDESCRIPTION: This code snippet shows how to modify the openage.bat file to explicitly use the Python installation in the install directory. This is useful when multiple Python installations are present on the system.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\ncall \"%INST_DIR%\\python\\python.exe\" -m openage\n```\n\n----------------------------------------\n\nTITLE: Documenting Changes in openage v0.3.0 Changelog\nDESCRIPTION: This markdown snippet outlines the changes made in openage version 0.3.0, including renamed components and newly added features across different modules of the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/nyan_api/v0.3.0.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [0.3.0] - 2021-03-03\nAll notable changes for version [v0.3.0] are documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Renamed\n### Ability module\n- Rename `Damageable` object to `AttributeChangeTracker`\n- Rename `Die` object to `PassiveTransformTo`\n- Rename `TransformTo` object to `ActiveTransformTo`\n- Rename `blacklisted_game_entities` member of `ApplyContinuousEffect` to `blacklisted_entities`\n- Rename `blacklisted_game_entities` member of `ApplyDiscreteEffect` to `blacklisted_entities`\n- Rename `damage_progress` member of `AttributeChangeTracker` to `change_progress`\n- Rename `despawn_conditions` member of `Despawn` to `despawn_condition`\n- Rename `blacklisted_game_entities` member of `DropResources` to `blacklisted_entities`\n- Rename `blacklisted_game_entities` member of `EnterContainer` to `blacklisted_entities`\n- Rename `exchange_mode` member of `ExchangeResources` to `exchange_modes`\n- Rename `blacklisted_game_entities` member of `Herd` to `blacklisted_entities`\n- Rename `death_conditions` member of `PassiveTransformTo` to `condition`\n- Rename `blacklisted_game_entities` member of `SendBackToTask` to `blacklisted_entities`\n- Rename `blacklisted_game_entities` member of `ShootProjectile` to `blacklisted_entities`\n- Rename `empty_threshold` member of `Storage` to `empty_condition`\n- Rename `allowed_trade_routes` member of `TradePost` to `trade_routes`\n\n### Auxiliary module\n- Rename `AvailabilityPrerequisite` object to `Literal`\n- Rename `DamageProgress` object to `AttributeChangeProgress`\n- Rename `Civilization` object to `PlayerSetup`\n- Rename `ExchangePool` object to `PricePool`\n- Rename `StorageElement` object to `StorageElementDefinition`\n- Rename `creation_sound` member of `CreatableGameEntity` to `creation_sounds`\n- Rename `placement_mode` member of `CreatableGameEntity` to `placement_modes`\n- Rename `requirements` member of `CreatableGameEntity` to `condition`\n- Rename `storage_elements` member of `Container` to `storage_element_defs`\n- Rename `blacklisted_game_entities` member of `GameEntityScope(Entity)` to `blacklisted_entities`\n- Rename `civ_setup` member of `PlayerSetup` to `game_setup`\n- Rename `requirements` member of `ResearchableTech` to `condition`\n- Rename `research_sound` member of `ResearchableTech` to `research_sounds`\n- Rename `capacity` member of `ResourceSpot` to `max_amount`\n- Rename all fqons starting with `aux.literal.*` to `aux.logic.literal.*`\n- Rename all fqons starting with `aux.translated.*` to `aux.language.translated.*`\n\n### Modifier module\n- Rename `TimeRelativeProgress` object to `TimeRelativeProgressChange`\n- Rename `RefundOnDeath` object to `RefundOnCondition`\n- Rename `requirements` member of `InstantTechResearch` to `condition`\n- Rename `blacklisted_game_entities` member of `FlyOver` to `blacklisted_entities`\n- Rename `blacklisted_game_entities` member of `DepositResourcesOnProgress` to `blacklisted_entities`\n- Rename `elevation_difference` member of `ElevationDifferenceHigh` to `min_elevation_difference`\n- Rename `elevation_difference` member of `ElevationDifferenceLow` to `min_elevation_difference`\n- Rename all fqons starting with `modifer.multiplier.*` to `modifier.*`\n- Rename all fqons starting with `modifer.relative_projectile_amount.*` to `modifier.*`\n\n### Effect module\n- Rename `AttributeCostResistance` object to `CostResistance`\n- Rename `TimeRelativeProgress` object to `TimeRelativeProgressChange`\n- Rename fqon `engine.effect.continuous.type.Lure` to `engine.effect.continuous.lure.type.Lure`\n- Rename fqon `engine.effect.discrete.type.MakeHarvestable` to `engine.effect.discrete.make_harvestable.type.MakeHarvestable`\n- Rename fqon `engine.effect.discrete.type.SendToContainer` to `engine.effect.discrete.send_to_container.type.SendToContainer`\n\n### Resistance module\n- Rename `AttributeCostResistance` object to `CostResistance`\n- Rename `TimeRelativeProgress` object to `TimeRelativeProgressChange`\n- Rename `harved_conditions` member of `MakeHarvestable` to `resist_condition`\n- Rename fqon `engine.resistance.continuous.type.Lure` to `engine.resistance.continuous.lure.type.Lure`\n- Rename fqon `engine.resistance.discrete.type.MakeHarvestable` to `engine.resistance.discrete.make_harvestable.type.MakeHarvestable`\n- Rename fqon `engine.resistance.discrete.type.SendToContainer` to `engine.resistance.discrete.send_to_container.type.SendToContainer`\n\n## Added\n### Ability module\n- Add `AbilityProperty` object; replaces inherited `Ability` specializations\n- Add `Animated(AbilityProperty)` object\n- Add `AnimationOverride(AbilityProperty)` object\n- Add `CommandSound(AbilityProperty)` object\n- Add `Diplomatic(AbilityProperty)` object\n- Add `ExecutionSound(AbilityProperty)` object\n- Add `Lock(AbilityProperty)` object\n- Add `DetectCloak(Ability)` object; enables game entity to discover cloaked units\n- Add `Lock(Ability)` object; defines lock pools which can be used for preventing abilities from being active at the same time\n- Add `ProductionQueue(Ability)` object; enables game entity to queue game entity or tech production\n- Add `ResourceStorage(Ability)` object; stores resources from gathering\n- Add `properties : dict(AbilityProperty, AbilityProperty)` member to `Ability`\n- Add `batches : set(EffectBatch)` member to `ApplyDiscreteEffect`; stores the effects as transactions\n- Add `activation_condition : set(LogicElement)` member to `Despawn`; activates the ability\n- Add `containers : set(ResourceContainer)` member to `DropResources`\n- Add `accepts_from : set(ResourceContainer)` member to `DropSite`\n- Add `exchange_rate : ExchangeRate` member to `ExchangeResources`\n- Add `resource_a : Resource` member to `ExchangeResources`\n- Add `resource_b : Resource` member to `ExchangeResources`\n- Add `container : ResourceContainer` member to `Gather`\n- Add `gatherer_limit : int` member to `Harvestable`; moved from `ResourceSpot`\n- Add `harvest_progress : set(HarvestProgress)` member to `Harvestable`; moved from `ResourceSpot`\n- Add `harvestable_by_default : bool` member to `Harvestable`; moved from `ResourceSpot`\n- Add `restock_progress : set(RestockProgress)` member to `Harvestable`; moved from `RestockableResourceSpot`\n- Add `strength : int` member to `Herd`; Herders with higher strength will be prefered\n- Add `mode : HerdableMode` member to `Herdable`; determines who gets ownership of the herdable game entity\n- Add `hitbox : Hitbox` member to `Hitbox`; x, y, z dimensions\n- Add `hitbox : Hitbox` member to `Passable`; references hitbox that is passable\n- Add `mode : PassableMode` member to `Passable`; determines special passability\n- Add `transform_progress : set(TransformProgress)` member to `PassiveTransformTo`\n- Add `selection_box : SelectionBox` member to `Selectable`; determines at which relative coordinates the game entity can be selected\n- Add `allowed_types : set(TerrainType)` member to `TerrainRequirement`; specifies which terrain types can be walked on by a game entity\n- Add `blacklisted_terrains : set(Terrain)` member to `TerrainRequirement`; exceptions for allowed terrain types\n```\n\n----------------------------------------\n\nTITLE: Defining Stance Action Struct in C\nDESCRIPTION: Defines a C struct for the stance action (12). It includes action identifier, selection count, stance type, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nstruct stance {\n  uint8_t action_identifier;\n  uint8_t selection_count;\n  uint8_t stance;\n  uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Flare Protocol Definition in Ruby\nDESCRIPTION: Defines the binary protocol for flare signals. Includes player visibility flags, coordinates and player identification.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/13-other.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef Flare\n  int8 :action_identifier\n  byte24 :zero\n  int32 :const\n  int8 :zero2\n  array :receiving,\n        type => :int8,\n        initial_length => 8\n  byte24 :zero3\n  float :x_coord\n  float :y_coord\n  int8 :player_number\n  int8 :player_id\n  int16 :zero4\nend\n```\n\n----------------------------------------\n\nTITLE: Adding CMake Subdirectories\nDESCRIPTION: Includes additional CMake configuration from datfile and hardcoded subdirectories.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/read/media/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(datfile)\nadd_subdirectory(hardcoded)\n```\n\n----------------------------------------\n\nTITLE: Adding Component Source Files in CMake\nDESCRIPTION: Adds core component source files to the libopenage target. Includes API, base, and internal component implementations along with type definitions.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/component/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    api_component.cpp\n    base_component.cpp\n    internal_component.cpp\n    types.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Building openage on Windows Using CMake\nDESCRIPTION: Creates the build directory and configures the project with CMake using the vcpkg toolchain. Then builds the project with the RelWithDebInfo configuration using Visual Studio.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/windows_msvc.md#2025-04-21_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nmkdir build\ncd build\ncmake -DCMAKE_TOOLCHAIN_FILE=<vcpkg directory>\\scripts\\buildsystems\\vcpkg.cmake ..\ncmake --build . --config RelWithDebInfo -- /nologo /m /v:m\n```\n\n----------------------------------------\n\nTITLE: Adding Graphics Rendering Source Files in CMake\nDESCRIPTION: This CMake snippet adds C++ source files related to graphics rendering functionality to the 'libopenage' target. The files include components for graphics device management, asset loading, rendering, and Vulkan window implementation.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/vulkan/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tgraphics_device.cpp\n\tloader.cpp\n\trenderer.cpp\n\twindowvk.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry in Markdown\nDESCRIPTION: A structured changelog entry following the Keep a Changelog format, documenting changes made in version 0.2.1 of the OpenAge project. Includes sections for added features, changes, and bug fixes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/engine/v0.2.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [0.2.1] - 2014-07-14\nAll notable changes for version [v0.2.1] are documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html) since release [v0.4.0].\n\nNote that not all changes up until [v0.2.3] were tracked, since the project was not available on Github as an SFTtech/openage repository. The commit hiistory can be accessed via the git log though. Feel free to add missing changes to this file, if you have time to look through a thousand commits.\n\n## Added\n- Audio manager that loads OPUS sound files\n- Read CSV data to engine\n- Conversion of gamedata (`empires2_x1_p1.dat` file) to CSV format\n- Add IRC channel for SFTtech to README\n- Instructions for contributing\n- `patternmask.dat` file format documentation\n- Documentation for original AoE2 pathfinder\n- Add list of gameplay feature ideas\n- Quit game by pressing `ESC`\n- Add list of Microsoft language identification strings\n- Implement coordinate system\n- Add ID list for terrain SLPs of AoE2\n- Terrain blending documentation for AoE2\n- `blendomatic.dat` file format documentation\n- Render terrain textures\n- Documentation for AoE2 sound files\n- Save SLP metadata to file\n- Creating and rendering texture atlases\n- Add instructions for meia conversion to README\n- Document example values for unit damage\n- Terrain file documentation\n- More codestyle examples for C++\n- Infrastructure for debug console\n\n## Changed\n- Grahics system now enforces shaders and uses vertex buffers\n- Split conversion of SLP into multiple modules\n\n## Fixed\n- Send logging to console only if engine is running\n- Free FPS counter text\n- Free file content for player color files\n- Free console font\n```\n\n----------------------------------------\n\nTITLE: Forging AoE2 Chat Message Packet in Hexadecimal\nDESCRIPTION: Hexadecimal representation of a forged chat message packet containing Kant's categorical imperative. The packet includes network ID, communication turn, player IDs, and message content encoded in extended ASCII. This packet demonstrates bypassing the 65-character message limit of the game.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/06-chat_message_spoofing.md#2025-04-21_snippet_0\n\nLANGUAGE: hex\nCODE:\n```\n0000 c0 13 0d 00 00 00 00 00 43 02 7b 00 dc 15 00 00\n0010 01 37 00 00 02 00 59 59 4e 4e 4e 4e 4e 4e 32 00\n0020 03 00 00 00 00 48 61 6e 64 6c 65 20 6e 75 72 20\n0030 6e 61 63 68 20 64 65 72 6a 65 6e 69 67 65 6e 20\n0040 4d 61 78 69 6d 65 2c 20 64 75 72 63 68 20 64 69\n0050 65 20 64 75 20 7a 75 67 6c 65 69 63 68 20 77 6f\n0060 6c 6c 65 6e 20 6b 61 6e 6e 73 74 2c 20 64 61 73\n0070 73 20 73 69 65 20 65 69 6e 20 61 6c 6c 67 65 6d\n0080 65 69 6e 65 73 20 47 65 73 65 74 7a 20 77 65 72\n0090 64 65 2e 00 00 00 00 01\n```\n\n----------------------------------------\n\nTITLE: Defining Literal LogicElement Python\nDESCRIPTION: A class for logical statements that can be checked in the game world context at a given time.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nLiteral(LogicElement):\n    scope : LiteralScope\n```\n\n----------------------------------------\n\nTITLE: Installing openage with DESTDIR for Packaging\nDESCRIPTION: Command for installing openage to a temporary directory for packaging. This is primarily used by package maintainers to create distribution packages.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/building.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake install DESTDIR=/tmp/your_temporary_packaging_dir\n```\n\n----------------------------------------\n\nTITLE: Blend Mask Lookup Table in C\nDESCRIPTION: A 2D lookup table used to determine which mask to use when blending terrains. The row is selected by the current tile's mode, and the column by the neighbor's mode. The resulting value is the blend mask ID to apply.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/blendomatic.md#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nchar blend_mask_lookup[8][8] = {\n    { 2, 3, 2, 1, 1, 6, 5, 4 },\n    { 3, 3, 3, 1, 1, 6, 5, 4 },\n    { 2, 3, 2, 1, 1, 6, 1, 4 },\n    { 1, 1, 1, 0, 7, 6, 5, 4 },\n    { 1, 1, 1, 7, 7, 6, 5, 4 },\n    { 6, 6, 6, 6, 6, 6, 5, 4 },\n    { 5, 5, 1, 5, 5, 5, 5, 4 },\n    { 4, 3, 4, 4, 4, 4, 4, 4 }\n};\n```\n\n----------------------------------------\n\nTITLE: Angle Definition Examples\nDESCRIPTION: Shows how to define angles for sprite orientations, including mirrored angles.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/sprite_format_spec.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nangle 0\nangle 90\nangle 180\nangle 270 mirror_from=90\n```\n\n----------------------------------------\n\nTITLE: Defining Progress Status Class in Python\nDESCRIPTION: Defines the ProgressStatus class for tracking progress of game entities. It records the type of progress and the minimum amount needed (between 0.0 and 100.0).\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_132\n\nLANGUAGE: python\nCODE:\n```\nProgressStatus(Object):\n    progress_type : children(ProgressType)\n    progress      : float\n```\n\n----------------------------------------\n\nTITLE: Implementing Cost Property for Resistance\nDESCRIPTION: Property class that adds resource or attribute point costs to resistances.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCost(ResistanceProperty):\n    cost : Cost\n```\n\n----------------------------------------\n\nTITLE: Running Demo 2 - Animation and Texture Metadata\nDESCRIPTION: Command to run the demo demonstrating animation and texture metadata parsing and rendering.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/demos.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bin/run test --demo renderer.tests.renderer_demo 2\n```\n\n----------------------------------------\n\nTITLE: Setting up PNG Processing Extensions with CMake and Cython\nDESCRIPTION: CMake configuration that creates Cython modules for PNG image processing. Sets up required PNG library dependency, creates Cython modules for binary packing and PNG creation, links against libpng, and includes necessary Cython definition files and Python modules.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/export/png/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PNG REQUIRED)\n\nadd_cython_modules(\n\tbinpack.pyx\n\tpng_create.pyx\n)\n\npyext_link_libraries(\n\tpng_create.pyx\n\tPNG::PNG\n)\n\nadd_pxds(\n\t__init__.pxd\n\tlibpng.pxd\n\tpng_tmp_file.pxd\n)\n\nadd_py_modules(\n\t__init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: Using Debug Info CLI Parameter for Converter\nDESCRIPTION: Command line parameter example for setting the debug information level in the converter. The parameter accepts values from 0 to 3, with each level providing increasing amounts of debugging information.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/convert/debugger.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--debug-info [0, 1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Defining SMP Frame Offset Structure in Python\nDESCRIPTION: Python struct format string for parsing SMP frame offsets, corresponding to the C++ struct definition.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< I\")\n```\n\n----------------------------------------\n\nTITLE: Implementing 24BC51 Packet Structure in Ruby - Player Dropout Handling\nDESCRIPTION: Defines the structure of a 24BC51 packet used when a player is dropped due to connection loss or de-synchronization. It contains information about the last synchronized communication turn to allow remaining players to continue the game.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/03-sync.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndef 24BC51\n  byte20 :header\n  int32 :unknown3\nend\n```\n\n----------------------------------------\n\nTITLE: Referencing Python Struct Definition for Binary Data Format\nDESCRIPTION: This snippet provides a link to the Python file containing the struct definition for the binary data format used in the game's data file. The struct is used to parse the 'empires2_x1_p1.dat' file which contains crucial game data.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/original-metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n/openage/convert/value_object/read/media/datfile/empiresdat.py\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Files to libopenage Target in CMake\nDESCRIPTION: Adds source files related to testing functionality to the libopenage target. This includes the main testing implementation and benchmark test components.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/testing/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\ttesting.cpp\n\tbenchmark_test.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Building OpenAge Project in Bash\nDESCRIPTION: These commands are used to build the openage project. They configure the project and compile it using make.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/running.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./configure\nmake\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library\nDESCRIPTION: CMake command that adds render_stage.cpp to the source files list for building the libopenage library. Uses the add_sources function to include the file in the build process.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/stages/skybox/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\trender_stage.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Toggle Gate Action Struct in C\nDESCRIPTION: Defines a C struct for the toggle gate action (72). It includes action identifier and gate ID.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_24\n\nLANGUAGE: c\nCODE:\n```\nstruct toggle_gate {\n  uint8_t action_identifier;\n  uint32_t gate_id;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Flare Action Struct in C\nDESCRIPTION: Defines a C struct for the flare action (73). It includes action identifier, constant value, receiving array, coordinates, player number, and player ID.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_25\n\nLANGUAGE: c\nCODE:\n```\nstruct flare {\n  uint8_t action_identifier;\n  uint32_t constant; // = 0xFFFFFFFF\n  uint8_t receiving[8];\n  float x_coord;\n  float y_coord;\n  uint8_t player_number;\n  uint8_t player_id;\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing True LogicElement Python\nDESCRIPTION: Defines a logic element that is always true. It inherits from LogicElement class, with no additional functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_67\n\nLANGUAGE: python\nCODE:\n```\nTrue(LogicElement):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running Demo 6 - Frustum Culling\nDESCRIPTION: Command to run the demo showing frustum culling implementation in the renderer.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/demos.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./bin/run test --demo renderer.tests.renderer_demo 6\n```\n\n----------------------------------------\n\nTITLE: Mask Declaration Examples\nDESCRIPTION: Examples showing how to declare masks using decimal and binary notation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/blendmask_format_spec.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nmask 131 0 0\nmask 0b00101010 0 0\n```\n\n----------------------------------------\n\nTITLE: SLP Header Structure (Version 4.0+)\nDESCRIPTION: C++ struct definition for the enhanced SLP header format used in version 4.0 and later. Includes additional fields for type, directions, palette info, and offset data.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstruct slp_header_v4 {\n  char     version[4];\n  int16    num_frames;\n  int16    type;\n  int16    num_directions;\n  int16    frames_per_direction;\n  int32    palette_id;\n  int32    offset_main;\n  int32    offset_secondary;\n  pad byte padding[8];\n};\n```\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< 4s H H H H i i i 8x\")\n```\n\n----------------------------------------\n\nTITLE: Implementing EnterContainer Ability in Python\nDESCRIPTION: Allows entities to enter specified storage containers with type restrictions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nEnterContainer(Ability):\n    allowed_containers   : set(EntityContainer)\n    allowed_types        : set(children(GameEntityType))\n    blacklisted_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Defining NextCommandMove Condition in Python\nDESCRIPTION: Condition class that checks if the next command is a Move command.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nNextCommandMove(Condition):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Initialising LiteralScope Object Python\nDESCRIPTION: Configures a scope for evaluating literals through defined diplomatic stances. Specifies stances as a parameter.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_89\n\nLANGUAGE: python\nCODE:\n```\nLiteralScope(Object):\n    stances : set(children(DiplomaticStance))\n```\n\n----------------------------------------\n\nTITLE: Running Demo 5 - Uniform Buffer Usage\nDESCRIPTION: Command to run the demo showing uniform buffer creation and usage with camera system.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/demos.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./bin/run test --demo renderer.tests.renderer_demo 5\n```\n\n----------------------------------------\n\nTITLE: Installing Core Dependencies on Ubuntu 23.04+\nDESCRIPTION: Command to install essential build and runtime dependencies including compilers, libraries, and Python packages required for OpenAge development.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/ubuntu.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install g++ cmake cython3 libeigen3-dev libepoxy-dev libfontconfig1-dev libfreetype-dev libharfbuzz-dev libogg-dev libopus-dev libopusfile-dev libpng-dev libtoml11-dev python3-dev python3-mako python3-numpy python3-lz4 python3-pil python3-pip python3-pygments python3-toml qml6-module-qtquick-controls qt6-declarative-dev qt6-multimedia-dev  qml6-module-qtquick3d-spatialaudio\n```\n\n----------------------------------------\n\nTITLE: Configuring Clang-Tidy Static Analysis Integration\nDESCRIPTION: Sets up integration with the clang-tidy static analysis tool for code quality checking, focusing on readability checks when enabled.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# clang tidy static analysis\noption(\n\tENABLE_CLANG_TIDY\n\t\"activate clang tidy messages\"\n\tOFF\n)\nif(ENABLE_CLANG_TIDY)\n\tset(CMAKE_CXX_CLANG_TIDY \"clang-tidy;-checks=-*,readability-*\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Target in CMake\nDESCRIPTION: This snippet adds multiple C++ source files to the libopenage target using the add_sources CMake function. The files primarily deal with buffers, timing, meshes, textures, and shaders.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/resources/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n    buffer_info.cpp\n    frame_timing.cpp\n\tmesh_data.cpp\n\tpalette_info.cpp\n\tshader_source.cpp\n\ttexture_data.cpp\n\ttexture_info.cpp\n\ttexture_subinfo.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lure Resistance\nDESCRIPTION: Resistance class for handling lure-type effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nLure(ContinuousResistance):\n    type : children(LureType)\n```\n\n----------------------------------------\n\nTITLE: Defining Sync Command Struct 16BC32 in C\nDESCRIPTION: Defines a C struct for sync command 16BC32. It includes network IDs, command, options, and a time passed field.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct 16bc32 {\n  uint32_t network_source_id;\n  uint32_t network_dest_id;\n  uint8_t command;\n  uint8_t option1;\n  uint8_t option2;\n  uint8_t option3;\n  uint32_t time_passed;\n};\n```\n\n----------------------------------------\n\nTITLE: SMX Header Structure Definition in C++\nDESCRIPTION: Defines the header structure for SMX files containing file signature, version, frame count, file sizes and comment field.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smx-files.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct smx_header {\n  char  file_descriptor[4];\n  int16 version;\n  int16 num_frames;\n  int32 file_size_comp;\n  int32 file_size_uncomp;\n  char  comment[16];\n};\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Files to libopenage Target\nDESCRIPTION: CMake command that adds multiple C++ source files to the libopenage library build target. The files include implementations for various data structures and iterators.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/curve/container/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\tarray.cpp\n    element_wrapper.cpp\n\titerator.cpp\n\tmap.cpp\n\tmap_filter_iterator.cpp\n\tqueue.cpp\n\tqueue_filter_iterator.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Nix Development Shell for OpenAge\nDESCRIPTION: Command to create a development shell with all the required dependencies for building OpenAge.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/nix.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnix shell\n```\n\n----------------------------------------\n\nTITLE: Adding GUI Source Files to libopenage Library in CMake\nDESCRIPTION: This CMake snippet adds multiple C++ source files related to GUI functionality to the libopenage library. The files include implementations for texture handling, logging, and subtexture creation.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/gui/integration/private/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n    gui_filled_texture_handles.cpp\n    gui_log.cpp\n    gui_make_standalone_subtexture.cpp\n    gui_standalone_subtexture.cpp\n    gui_texture.cpp\n    gui_texture_handle.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Wall Action Struct in C\nDESCRIPTION: Defines a C struct for the build wall action (69). It includes action identifier, selection count, player number, start and end coordinates, building ID, constant value, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nstruct build_wall {\n  uint8_t action_identifier;\n  uint8_t selection_count;\n  uint8_t player_number;\n  uint8_t start_x_coord;\n  uint8_t start_y_coord;\n  uint8_t end_x_coord;\n  uint8_t end_y_coord;\n  uint16_t building_id;\n  uint32_t constant; // = 0xFFFFFFFF\n  uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Terrain Configuration Quick Reference\nDESCRIPTION: Example showing the basic structure and syntax of a terrain configuration file including version, texture reference, blending pattern, scale factor, layer and frame definitions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/terrain_format_spec.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This is a terrain configuration file\n# comments start with # and are ignored\n\n# file version\nversion 2\n\n# texture file reference, relative to this file's location\ntexture <texture_id> <filename>\n\n# selection of blending pattern\nblendtable <table_id> <filename>\n\n# the zoom level at which the animation is shown in full detail\n# e.g. scalefactor 0.5 -> full detail at 200% zoom\nscalefactor <factor>\n\n# layer and animation definitions\n# layers defined first will be overdrawn by later definitions\nlayer <layer_id> mode=off  position=<int>\nlayer <layer_id> mode=loop position=<int> time_per_frame=<float> replay_delay=<float>\n\n# definition of a terrain frames\n# these are iterated for an animation\nframe <frame_idx> <layer_id> <texture_id> <subtex_id> priority=<int> blend_mode=<int>\n```\n\n----------------------------------------\n\nTITLE: Defining XORGate Node in Python\nDESCRIPTION: Node class that branches based on conditions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nXORGate(Node):\n    next    : orderedset(Condition)\n    default : Node\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Make\nDESCRIPTION: Commands for generating and viewing documentation using doxygen, including creation of HTML and LaTeX documentation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake doc\n```\n\nLANGUAGE: bash\nCODE:\n```\n$BROWSER bin/doc/html/index.html\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake -C bin/doc/latex/ pdf\n$PDFVIEWER bin/doc/latex/refman.pdf\n```\n\n----------------------------------------\n\nTITLE: Defining Delete Action Struct in C\nDESCRIPTION: Defines a C struct for the delete action (6a). It includes action identifier, object ID, and player number.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nstruct delete {\n  uint8_t action_identifier;\n  uint32_t object_id;\n  uint8_t player_number;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library in CMake\nDESCRIPTION: This CMake snippet adds multiple source files to the libopenage library target. It includes font handling components (font.cpp, font_manager.cpp, glyph_atlas.cpp) and a tests file, which are all part of the library's build configuration.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/font/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tfont.cpp\n\tfont_manager.cpp\n\tglyph_atlas.cpp\n\n\ttests.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Command Sound Property\nDESCRIPTION: Implements the CommandSound property for playing sounds when an ability is ordered to be used.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nCommandSound(AbilityProperty):\n    sounds : set(Sound)\n```\n\n----------------------------------------\n\nTITLE: Defining Fallback Change Type in Python\nDESCRIPTION: Special attribute change type for fallback effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nFallback(AttributeChangeType):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Enabling Wayland Access for Docker Container\nDESCRIPTION: Command to allow the Docker container to access the Wayland socket by modifying its permissions for the current user.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod a+rw /run/user/$(id -u)/wayland-0\n```\n\n----------------------------------------\n\nTITLE: Adding Cython and Python Modules in CMake\nDESCRIPTION: Configuration block that specifies Cython and Python modules to be included in the build process. Uses add_cython_modules() for Cython files (.pyx) and add_py_modules() for Python files (.py).\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/game/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cython_modules(\n\tmain_cpp.pyx\n)\n\nadd_py_modules(\n\t__init__.py\n\tmain.py\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Vulkan Implementation in CMake\nDESCRIPTION: Conditionally adds the Vulkan implementation subdirectory if Vulkan is found during CMake configuration. This allows the build to adapt to systems with or without Vulkan support.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(VULKAN_FOUND)\n    add_subdirectory(vulkan/)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Action Struct in C\nDESCRIPTION: Defines a C struct for the build action (66). It includes action identifier, selection count, player number, coordinates, building ID, constant value, sprite ID, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nstruct build {\n  uint8_t action_identifier;\n  uint8_t selection_count;\n  uint8_t player_number;\n  float x_coord;\n  float y_coord;\n  uint16_t building_id;\n  uint32_t constant; // = 0xFFFFFFFF\n  uint8_t sprite_id;\n  uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Resign Action Struct in C\nDESCRIPTION: Defines a C struct for the resign action (0b). It includes action identifier, player number, player ID, and disconnect flag.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nstruct resign {\n    uint8_t action_identifier;\n    uint8_t player_number;\n    uint8_t player_id;\n    uint32_t disconnect;\n};\n```\n\n----------------------------------------\n\nTITLE: Reading DRS Files in C\nDESCRIPTION: Example C code demonstrating how to read files from a DRS archive using file type and ID.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/drs-files.md#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nread_drs_file('bina', 50500);\n```\n\n----------------------------------------\n\nTITLE: Installing GLSL Shader Files with CMake\nDESCRIPTION: CMake script that copies all .glsl shader files from the current directory to a designated test shaders directory within the asset path. Uses pattern matching to select only files with the .glsl extension.\nSOURCE: https://github.com/sfttech/openage/blob/master/assets/test/shaders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \".\"\n\tDESTINATION \"${ASSET_DIR}/test/shaders\"\n\tFILES_MATCHING PATTERN \"*.glsl\"\n)\n```\n\n----------------------------------------\n\nTITLE: Interactive Rebasing in Git for Commit Management\nDESCRIPTION: Command for performing an interactive rebase, which allows for squashing, reordering, and editing commits. This helps maintain a clean commit history.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/contributing.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase -i -m upstream/master\n```\n\n----------------------------------------\n\nTITLE: Adding Mod Manager Source Files to libopenage Library\nDESCRIPTION: CMake directive to add mod-related source files (mod_manager.cpp and modpack.cpp) to the libopenage library build target.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/assets/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    mod_manager.cpp\n    modpack.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Rally Point Action Struct in C\nDESCRIPTION: Defines a C struct for the rally point action (78). It includes action identifier, selection count, target IDs, coordinates, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_28\n\nLANGUAGE: c\nCODE:\n```\nstruct rally_point {\n  uint8_t action_identifier;\n  uint8_t selection_count;\n  uint32_t target_id;\n  uint32_t target_unit_id;\n  float x_coord;\n  float y_coord;\n  uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining DRS Header Structure in C++\nDESCRIPTION: C++ struct definition for the main DRS file header containing copyright info, version, file type, table count and file offset information.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/drs-files.md#2025-04-21_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nstruct drs_header {\n\tchar copyright[40];\n\tchar version[4];\n\tchar ftype[12];\n\tint32 table_count;\n\tint32 file_offset;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CommandInQueue Event in Python\nDESCRIPTION: Event class that fires when a new command is added to the queue.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nCommandInQueue(Event):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Version and Format in Markdown\nDESCRIPTION: This snippet defines the version number, adheres to Keep a Changelog format, and specifies Semantic Versioning compliance.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/nyan_api/v0.4.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [0.4.1] - 2023-12-02\nAll notable changes for version [v0.4.1] are documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n```\n\n----------------------------------------\n\nTITLE: Defining Repair Action Structure in Ruby\nDESCRIPTION: Defines the data structure for repairing buildings and siege equipment. It includes fields for action identifier, selection count, repaired unit ID, and selected repairmen IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/11-buildings.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef Repair\n  int8 :action_identifier\n  int8 :selection_count\n  int16 :zero\n  int32 :repaired_id\n  array :selected_ids,\n        type => :int32,\n        initial_length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: Launching Qt Creator in English on Linux\nDESCRIPTION: Command to start Qt Creator IDE with English language setting on Linux systems. Uses the LANGUAGE environment variable to force English localization.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ide/qt_creator.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ LANGUAGE=C qtcreator\n```\n\n----------------------------------------\n\nTITLE: Defining Start Node in Python\nDESCRIPTION: Initial node class for activity graphs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nStart(Node):\n    next : Node\n```\n\n----------------------------------------\n\nTITLE: Running Stresstest 1 - Frustum Culling Performance\nDESCRIPTION: Command to run the stresstest for frustum culling performance with increasing object count.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/demos.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./bin/run test --demo renderer.tests.stresstest 1\n```\n\n----------------------------------------\n\nTITLE: Implementing ResourceCost Type in Python\nDESCRIPTION: Defines costs as resources removed from the player's resource pool.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nResourceCost(Cost):\n    amount : set(ResourceAmount)\n```\n\n----------------------------------------\n\nTITLE: Modified Nyan Derivation with Local Source\nDESCRIPTION: Snippet from the modified nyan.nix file showing how to use a local Nyan source tree instead of downloading it from GitHub.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/nix.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ lib\n, stdenv\n, fetchFromGitHub\n, clang\n, cmake\n, flex\n}:\nlet\n  pname = \"nyan\";\n  version = \"0.3\";\nin\nstdenv.mkDerivation\n{\n  inherit pname version;\n\n  src = ../../nyan;\n\n  nativeBuildInputs = [\n```\n\n----------------------------------------\n\nTITLE: Implementing AttributeSettingsValue Modifier in Python\nDESCRIPTION: Defines the AttributeSettingsValue modifier class that changes starting and max values of AttributeSettings objects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nAttributeSettingsValue(Modifier):\n    attribute : Attribute\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake for OpenAge\nDESCRIPTION: This CMake function call adds several Python modules to the OpenAge project build system. It includes the main __init__.py file and three modules specific to handling 'genie' game elements: sounds, technologies, and units.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/entity_object/conversion/ror/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tgenie_sound.py\n\tgenie_tech.py\n\tgenie_unit.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library in CMake\nDESCRIPTION: CMake command to add multiple source files to the libopenage library target. Lists core gameplay and engine components including ability handling, animations, terrain systems, and utility functions.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    ability.cpp\n    activity.cpp\n    animation.cpp\n    definitions.cpp\n    patch.cpp\n    player_setup.cpp\n    property.cpp\n    sound.cpp\n    terrain.cpp\n    types.cpp\n    util.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SMP Layer Row Edge Structure in Python\nDESCRIPTION: Python struct format string for parsing SMP layer row edges, corresponding to the C++ struct definition.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< H H\")\n```\n\n----------------------------------------\n\nTITLE: Defining SLP Frame Row Edge Structure in C++\nDESCRIPTION: C++ struct definition for the outline table entry that specifies transparent pixel counts on the left and right sides of each row in an SLP frame.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstruct slp_frame_row_edge {\n  uint16 left_space;\n  uint16 right_space;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SLD File Header Structure in Python\nDESCRIPTION: This line defines the format string for parsing the SLD file header using Python's struct module.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< 4s 4H I\")\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Module for Opus Encoding in CMake\nDESCRIPTION: Adds a Cython module named 'opusenc.pyx' to the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/export/opus/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cython_modules(\n\topusenc.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Devmode CLI Parameter for Converter\nDESCRIPTION: Command line parameters for toggling development mode, which affects the default debug level. In devmode the default is level 3, while in no-devmode the default is level 0.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/convert/debugger.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--devmode\n```\n\nLANGUAGE: bash\nCODE:\n```\n--no-devmode\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Modules in Build Configuration\nDESCRIPTION: Configures Cython module inclusion using add_cython_modules() function, specifically adding log_cpp.pyx module to the project\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/log/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cython_modules(\n\tlog_cpp.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing SLP Frame Row Edge in Python\nDESCRIPTION: Python struct format string for reading the outline table entry that defines transparent pixel counts on each side of a row.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< H H\")\n```\n\n----------------------------------------\n\nTITLE: Running Demo 4 - Animation Timing Control\nDESCRIPTION: Command to run the demo demonstrating animation frame timing and speed control.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/demos.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/run test --demo renderer.tests.renderer_demo 4\n```\n\n----------------------------------------\n\nTITLE: Time Relative Rate Formula\nDESCRIPTION: Mathematical formula for calculating time-relative change rates.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_13\n\nLANGUAGE: math\nCODE:\n```\napplied\\_rate = resistor\\_max\\_value / total\\_change\\_time\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Modules in CMake\nDESCRIPTION: CMake configuration that adds Python modules to the build system. Specifies core Python files that handle dynamic loading, Genie game structure parsing, media types, and member access functionality. Also includes a media subdirectory in the build.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/read/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tdynamic_loader.py\n\tgenie_structure.py\n\tmedia_types.py\n\tmember_access.py\n\tread_members.py\n\tvalue_members.py\n)\n\nadd_subdirectory(media)\n```\n\n----------------------------------------\n\nTITLE: Lesser Skip Command Implementation\nDESCRIPTION: Command for skipping short blocks of transparent pixels up to 64 pixels in length. Shows length calculation from command byte.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nlength = command >> 2\n(ex: 0x05 = 1, 0x09 = 2, 0x0D = 3, 0x11 = 4, 0x15 = 5, 0x19 = 6, 0x1D = 7, 0x21 = 8,  0x25 = 9)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Markdown formatted documentation outline detailing the different editor components and general guidelines for the OpenAge editor.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/editor/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# openage --editor\n\n\n## Editor doc structure\n\n* **Terrain editor** -  for all your terrain editing needs. Your favourite TV show ten years ago was Bob the Builder? Then go ahead and look what tools he has in [terrain.md](terrain.md)!\n* **Economy editor** - discover the communist in yourself! In contrast to real life everything works as expected - so plan the economy in [economy.md](economy.md)!\n* **Script editor** - you don't need to believe in god. You ARE god. Set your evil mind free in [scripting.md](scripting.md)\n* **Campaign editor** - You're fed up with low-quality campaigns that you've known for years? You think the original tutorial campaign doesn't quite cut it? Your search is over - read [campaigns.md](campaigns.md) now!\n* **Unit editor** - Everyone's favourite tool to create cats in nyan. Bonus points for correct unit music. Listen to it at [units.md](units.md).\n* **Tech editor** - because having nuclear weapons in the middle age is not ignorant and totally not the point of this game. It's freakin *gnarly*. See how you can make your own weapons of math instruction at [tech.md](tech.md)\n* **Multiplayer Mode** - are you tired of working on maps all by yourself? do you want others to do your editing work for you? Fear no more and embrace *massive multiplayer online editor mode* (MMOEM) by looking inside [multiplayer.md](multiplayer.md).\n\n## General\n* It doesn't matter if the engine doesn't implement feature X. Don't you **dare** implementing something in the engine that isn't in the editor already!\n* If the editor produces invalid files, fix the engine. No exceptions.\n* Remember general attitude: bugs are features, and bugreports are for losers ONLY.\n* In case it isn't completely evident: if you've missed the irony, you should go and repair your laugh box.\n```\n\n----------------------------------------\n\nTITLE: Sorting Units into Subformations - Pseudocode Implementation\nDESCRIPTION: Algorithm for sorting military units into different subformations based on their GROUP_ID and LINE_ID. Takes a player selection and formation type as input and organizes units into 5 different subformations.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_11\n\nLANGUAGE: pseudocode\nCODE:\n```\nINPUT:\n- Set of units: player_selection\n- Formation type: formation_type\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nInitilization:\n\n# subformations for military units\nsubformation[1] = new subformation();\nsubformation[2] = new subformation();\nsubformation[3] = new subformation();\nsubformation[4] = new subformation();\n\n# dummy subformation for every unit that will\n# not form formations\nsubformation[5] = new subformation();\n```\n\nLANGUAGE: pseudocode\nCODE:\n```\nAlgorithm:\n\nfor unit u in player_selection do {\n    switch(u.GROUP_ID) {\n        case 912:\n        case 947: subformation[1].add(u);\n            break();\n        case 906: subformation[2].add(u);\n            break();\n        case 900:\n        case 923:\n        case 936:\n        case 944:\n        case 955: subformation[3].add(u);\n            break();\n        case 902:\n        case 913:\n        case 918:\n        case 919:\n        case 920:\n        case 935:\n        case 943:\n        case 951:\n        case 959: subformation[4].add(u);\n            break();\n        case 922:\n        switch(u.LINE_ID) {\n            case -294: subformation[1].add(u);\n                break();\n            case -293: subformation[2].add(u);\n                break();\n            case -283:\n            case -284:\n            case -292: subformation[3].add(u);\n                break();\n            case -285:\n            case 706: subformation[4].add(u);\n                break();\n            default: subformation[5].add(u);\n                break();\n        }\n        default: subformation[5].add(u);\n            break();\n    }\n}\n\nsubformation[1].order_units(formation_type)\nsubformation[2].order_units(formation_type)\nsubformation[3].order_units(formation_type)\nsubformation[4].order_units(formation_type)\nsubformation[5].order_units(formation_type)\n```\n\n----------------------------------------\n\nTITLE: Running Demo 1 - Textured Mesh Rendering\nDESCRIPTION: Command to run the demo showing textured mesh rendering with window interaction capabilities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/demos.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/run test --demo renderer.tests.renderer_demo 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Tab-Space Filter for Python Files\nDESCRIPTION: Sets up Git filters to automatically convert between tabs and spaces when files are checked out (smudge) or committed (clean). This allows developers to use their preferred style locally while maintaining consistency in the repository.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code_style/tabs_n_spaces.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit config filter.tabspace.smudge 'unexpand --tabs=4 --first-only'\ngit config filter.tabspace.clean    'expand --tabs=4 --initial'\n```\n\n----------------------------------------\n\nTITLE: Running Python Extension Generation on Header File\nDESCRIPTION: Executes the pxdgen tool on versions.h to generate Python extension interfaces. This likely creates Cython .pxd files for Python bindings to C++ code.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/versions/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\npxdgen(\n\tversions.h\n)\n```\n\n----------------------------------------\n\nTITLE: Writing Python Doctests for Documentation and Testing\nDESCRIPTION: Example of Python doctests embedded in a function's docstring. This combines documentation with testing by showing expected outputs for given inputs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef is_prime(p):\n    \"\"\"\n    High-performance, state-of-the-art primality tester.\n\n    >>> is_prime(23)\n    True\n    >>> is_prime(42)\n    False\n    \"\"\"\n    return not any(p % x == 0 for x in range(2, p))\n```\n\n----------------------------------------\n\nTITLE: Scale Factor Examples\nDESCRIPTION: Shows different scaling factor configurations and their effects on sprite rendering at various zoom levels.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/sprite_format_spec.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# Assume the sprite image has a size of 100x100\n# Factors <1 result in downscaling\nscalefactor 1.0   # No scaling, 100x100 at default zoom\nscalefactor 0.5   # 50x50 at default zoom; 100x100 at 2x zoom\nscalefactor 0.25  # 25x25 at default zoom; 100x100 at 4x zoom\n\n# Factors >1 result in upscaling\nscalefactor 2.0  # 200x200 at default zoom; 100x100 at 2x zoom\n```\n\n----------------------------------------\n\nTITLE: Player Color Draw Command Implementation\nDESCRIPTION: Command for drawing player-colored pixels. Shows length calculation and explains player color index usage.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nlength = command >> 4. If 0, the next byte is read and used as the length.\n(ex: 0x16 = 1, 0x26 = 2, 0xA6 = 10, 0xF6 = 15, 0x06 + 0x10 = 16)\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Transaction Action Struct in C\nDESCRIPTION: Defines a C struct for the resource transaction action (6c). It includes action identifier, source and target player numbers, resource type, amount, and transaction fee.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nstruct attack_ground {\n  uint8_t action_identifier;\n  uint8_t source_player_number;\n  uint8_t target_player_number;\n  uint8_t resource_type;\n  float amount;\n  float transaction_fee;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Opus and Ogg Dependencies in CMake\nDESCRIPTION: Finds and includes the required Ogg and Opusfile packages for the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/export/opus/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Ogg REQUIRED)\nfind_package(Opusfile REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Animal Food Decay Rate\nDESCRIPTION: Specifies the food decay rate for sheep and deer carcasses in the game\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/rates.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1 food / 2 seconds\n```\n\n----------------------------------------\n\nTITLE: Adding PXD Files\nDESCRIPTION: This command presumably adds PXD files, which are used in Cython to define C/C++ interfaces. This specific addition of 'cpp.pxd' indicates it's necessary for the Cython parts of a project, allowing the C/C++ code to be extended. No parameters or return values are defined, but it suggests a direct dependency on Cython and its ecosystem.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/util/fslike/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nadd_pxds(\n\tcpp.pxd\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Command System Source Files to libopenage Library\nDESCRIPTION: CMake command that adds source files related to game commands and actions to the libopenage library target. Includes files for base commands, custom actions, idle behavior, movement controls, and type definitions.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/component/internal/commands/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    base_command.cpp\n    custom.cpp\n    idle.cpp\n    move.cpp\n    types.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Version Attribute Example in OpenAge Palette Format\nDESCRIPTION: Demonstrates how to specify the version attribute in an openage palette file. The version number increments whenever the syntax or keywords of the format change.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/palette_format_spec.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nversion 1\n```\n\n----------------------------------------\n\nTITLE: Defining Pattern Masks Structure in C++\nDESCRIPTION: This struct defines the format for pattern masks data, though its exact purpose is unclear. It contains an array of masks, each with unknown data and a 64x64 char array.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/terrain.md#2025-04-21_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nstruct patternmasks {\n\tstruct {\n\t\tuint_32 unknown;  //4 bytes: 0x00100000 => if uint32: 1048576\n\t\tchar data[64*64];\n\t} mask[40];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake for OpenAge\nDESCRIPTION: CMake command that registers essential Python modules for the OpenAge project. The modules include initialization, API exports, changelog management, modpack searching, asset directory mounting, and version detection functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/init/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tapi_export_required.py\n\tchangelog.py\n\tmodpack_search.py\n\tmount_asset_dirs.py\n\tversion_detect.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies for OpenAge Build\nDESCRIPTION: Sets several CMake policies to use newer behavior for features like language standards, package finding, and build organization.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# CMake policies\nforeach(pol\n        CMP0074  # use <pkg>_ROOT vars in find_package()\n        CMP0067  # honor language standard in try_compile()\n        CMP0071  # enable automoc for generated files\n        CMP0072  # prefers GLVND by default FindOpenGL\n        CMP0048  # project() command manages VERSION variables\n        CMP0094  # take the first satisfying Python version\n        CMP0082  # run add_subdirectory() in the declaration order\n        CMP0102  # Don't create empty cache entries\n       )\n\tif (POLICY ${pol})\n\t\tcmake_policy(SET ${pol} NEW)\n\tendif()\nendforeach()\n\n# don't print 'Built target ...' messages\n# upstream since cmake v3.4.0-rc1 (by commit 1d3984780df8)\nset_property(GLOBAL PROPERTY TARGET_MESSAGES OFF)\n\n# Ensure CMAKE_BUILD_TYPE is set correctly.\nif(NOT CMAKE_BUILD_TYPE)\n\tset(CMAKE_BUILD_TYPE \"Debug\")\nendif()\nstring(TOUPPER \"CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}\" BUILD_TYPE_CXX_FLAGS)\n```\n\n----------------------------------------\n\nTITLE: Defining BuildWall Action Structure in Ruby\nDESCRIPTION: Defines the data structure for building walls. It includes fields for action identifier, selection count, player number, start and end coordinates, building ID, and selected builder IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/11-buildings.md#2025-04-21_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef BuildWall\n  int8 :action_identifier\n  int8 :selection_count\n  int8 :player_number\n  int8 :start_x_coord\n  int8 :start_y_coord\n  int8 :end_x_coord\n  int8 :end_y_coord\n  int8 :zero\n  int16 :building_id\n  int16 :zero2\n  int32 :const\n  array :selected_ids,\n        type => :int32,\n        initial_length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages on FreeBSD for OpenAGE\nDESCRIPTION: This command installs the necessary packages for OpenAGE on FreeBSD. It includes CMake, Cython, Eigen3, HarfBuzz, Opus tools, PNG library, Python libraries, Qt6, and TOML11.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/freebsd.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo pkg install cmake cython eigen3 harfbuzz opus-tools opusfile png py-mako py-numpy py-lz4 py-pillow py-pygments py-toml pylint python qt6 toml11\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Values in GeneratorParameters C++ Class\nDESCRIPTION: Demonstrates how to set initial values for various parameters in the GeneratorParameters class using the GuiPropertyMap interface.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/gui.md#2025-04-21_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nthis->setv(\"generation_seed\", 4321);\nthis->setv(\"player_radius\", 10);\nthis->set_csv(\"player_names\", std::vector<std::string>{\"name1\", \"name2\"});\n```\n\n----------------------------------------\n\nTITLE: Implementing Fly Ability in Python\nDESCRIPTION: Enables entities to maintain a fixed height above ground level.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nFly(Ability):\n    height : float\n```\n\n----------------------------------------\n\nTITLE: Updating Files in Local Repository with Tab-Space Filter\nDESCRIPTION: Git command to update all files in the local repository to use the configured tab-space filter, converting spaces to tabs for local development.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code_style/tabs_n_spaces.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout HEAD -- **\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rebasing with Upstream in Git\nDESCRIPTION: Commands for updating your branch with the latest code from upstream and rebasing your changes on top of it. This helps maintain a clean commit history and avoid merge conflicts.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/contributing.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# update the upstream remote to receive new commits\ngit fetch upstream\n\n# be on your feature branch (you probably are)\ngit checkout my-awesome-feature\n\n# make backup (you never know, you know?)\ngit branch my-awesome-feature-backup\n\n# rebase: put your commits on top of upstream's master\ngit rebase -m upstream/master\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Sources and Generating Python Bindings in CMake\nDESCRIPTION: CMake configuration that adds cvar.cpp to the libopenage library sources and generates Python bindings from cvar.h header file using pxdgen tool.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/cvar/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\tcvar.cpp\n)\n\npxdgen(\n\tcvar.h\n)\n```\n\n----------------------------------------\n\nTITLE: Including Component Subdirectories in CMake\nDESCRIPTION: Adds API and internal component subdirectories to the build system, ensuring all nested CMake configurations are processed.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/component/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(api/)\nadd_subdirectory(internal/)\n```\n\n----------------------------------------\n\nTITLE: Reconstructing Pixel Block from Indices using Lookup Table in Python\nDESCRIPTION: This code extracts pixel colors using a lookup table and a 3-bit bitmask. It processes two 3-byte sections of pixel indices, shifting by 3 bits after each extraction to get the next index. The resulting pixels can be inserted into a 4x4 block from left to right and top to bottom.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\npixels = []\nbitmask = 0b111\npixel_indices0 = pixel_indices[0:3]\nfor shift in range(8):\n    bc4_idx = pixel_indices0 & bitmask\n    col = lookup_table[bc4_idx]\n    pixels.append(col)\n    pixel_indices0 = pixel_indices0 >> 3\n\npixel_indices1 = pixel_indices[3:6]\nfor shift in range(8):\n    bc4_idx = pixel_indices1 & bitmask\n    col = lookup_table[bc4_idx]\n    pixels.append(col)\n    pixel_indices1 = pixel_indices1 >> 3\n```\n\n----------------------------------------\n\nTITLE: Sound File References and Triggers\nDESCRIPTION: List of game sound files used for different attack scenarios, including unit conversion, military unit attacks, villager/building attacks, and wild animal attacks. Each sound file has a unique ID and specific trigger condition.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/attacking_alarm.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n50313.wav  (Horn + monk) One of your units is being converted\n50315.wav  (Horn) Your military units are attacked\n50316.wav  (Bell) A villager or building of yours is attacked\n50366.wav  (Horn + wolf) Wild animal attacks your units (not played for boar)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Modules and Subdirectories in CMake\nDESCRIPTION: Defines the Python module structure by adding core Python files and setting up project subdirectories. Includes initialization of __init__.py and debug_info.py modules, along with subdirectories for conversion, initialization, export, and read functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tdebug_info.py\n)\n\nadd_subdirectory(conversion)\nadd_subdirectory(init)\nadd_subdirectory(export)\nadd_subdirectory(read)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Module Integration with C++ Library\nDESCRIPTION: Sets up Python extension modules to link with the C++ library, handling platform-specific include directives and configuring Cython modules.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# Python content (uses the C++ library)\n\n# create a virtual library that, when linked to,\n# injects a header inclusion, and links to libopenage.\n# -> all cython modules get our hacks included and link to libopenage.\nadd_library(pyext_libopenage INTERFACE)\nif(MSVC)\n\tset(FORCE_INCLUDE_CXXFLAG \"/FI\")\nelse()\n\tset(FORCE_INCLUDE_CXXFLAG \"-include\")\nendif()\ntarget_compile_options(pyext_libopenage INTERFACE\n\t${FORCE_INCLUDE_CXXFLAG} \"${CMAKE_SOURCE_DIR}/libopenage/pyinterface/hacks.h\"\n)\ntarget_link_libraries(pyext_libopenage INTERFACE libopenage)\nset(PYEXT_LINK_LIBRARY pyext_libopenage)\n\nconfigure_file(run.py.in run.py)\nadd_cython_modules(EMBED NOINSTALL ${CMAKE_CURRENT_BINARY_DIR}/run.py)\nadd_py_modules(BININSTALL ${CMAKE_CURRENT_BINARY_DIR}/run.py AS openage)\nadd_subdirectory(openage/)\n\npython_finalize()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake for openage Project\nDESCRIPTION: This CMake command adds Python modules to the project build system. It includes two specific Python files: __init__.py and internal_nyan_names.py. This is likely part of the configuration process for building the openage project.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/conversion/hd/raj/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tinternal_nyan_names.py\n)\n```\n\n----------------------------------------\n\nTITLE: Modpack Alias Reference Format\nDESCRIPTION: Shows the format for referencing a modpack by its alias, which is typically the modpack name unless otherwise specified in the definition file.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/modpacks.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nmodname\n```\n\n----------------------------------------\n\nTITLE: Calculating ICM Offset in Python\nDESCRIPTION: This code calculates the offset in the Inverse Color Map (ICM) for a given RGB value and ICM index. It's used for color mapping in terrain rendering.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/terrain.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\noffset = i * (32^3) + r * 32^2 + g * 32 + b\ni == [0,9] = icm index\npalette_index = byte_at(offset)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build System Modules and Paths\nDESCRIPTION: Sets up the build system directory paths and includes various helper modules for dependency checking, version detection, and language support.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# include buildsystem features\n\n# add search paths to helper modules\nset(BUILDSYSTEM_DIR \"${CMAKE_SOURCE_DIR}/buildsystem\")\nset(CMAKE_MODULE_PATH \"${BUILDSYSTEM_DIR}\" \"${BUILDSYSTEM_DIR}/modules/\")\n\n# prioritize macOS frameworks since they're probably newer\n# than the system libraries\nset(CMAKE_FIND_FRAMEWORK LAST)\nset(CMAKE_FIND_APPBUNDLE LAST)\n\n# load helper modules\ninclude(GNUInstallDirs)\ninclude(CheckInSourceBuild)\ninclude(HandleCXXOptions)\ninclude(CheckCompilerFeatures)\ninclude(CMakeParseArguments)\ninclude(HandlePythonOptions)\ninclude(CheckRuntimeDependencies)\ninclude(DetectProjectVersion)\ninclude(DependencyFetch)\ninclude(FindPackageHandleStandardArgs)\n\n# include build configuration modules\ninclude(CTest)\n\n# initialize language support\ninclude(codegen)\ninclude(cpp)\ninclude(doxygen)\ninclude(options)\ninclude(python)\ninclude(util)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to LibOpenage Library Target in CMake\nDESCRIPTION: CMake command that adds cpp source files to the libopenage library target. Includes buf.cpp for buffering, console.cpp for console operations, draw.cpp for rendering, and tests.cpp for unit tests.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/console/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\tbuf.cpp\n\tconsole.cpp\n\tdraw.cpp\n\ttests.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Subtexture Definition Example in OpenAge Texture Format\nDESCRIPTION: Demonstrates how to define a subtexture within the main texture. This example specifies a subtexture at position (200,200) with dimensions of 20x20 pixels and an anchor point at (9,10).\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/texture_format_spec.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n# Subtexture is located at (200,200) in the texture,\n# has dimensions (20,20) and an anchor point at (9,10)\nsubtex 200 200 20 20 9 10\n```\n\n----------------------------------------\n\nTITLE: Adding Private and Public Subdirectories in CMake\nDESCRIPTION: Configures CMake to process build instructions in the 'private' and 'public' subdirectories. This is a common pattern in CMake projects to separate internal implementation details from public interfaces.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/gui/integration/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"private\")\nadd_subdirectory(\"public\")\n```\n\n----------------------------------------\n\nTITLE: Defining EditorModeSignals Class in C++\nDESCRIPTION: Demonstrates the creation of a signals class for the EditorMode, which allows passing data from the game logic to the GUI.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/gui.md#2025-04-21_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nclass EditorModeSignals : public QObject {\n\tQ_OBJECT\n\npublic:\nsignals:\n\tvoid toggle();\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Project Subdirectories in openage CMake Configuration\nDESCRIPTION: This snippet adds multiple subdirectories to the CMake build system, organizing the openage project into functional components like game logic, conversion tools, pathfinding, rendering, and utilities. Each subdirectory likely contains its own CMakeLists.txt file with further configuration.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(cabextract)\nadd_subdirectory(codegen)\nadd_subdirectory(convert)\nadd_subdirectory(cppinterface)\nadd_subdirectory(cvar)\nadd_subdirectory(event)\nadd_subdirectory(game)\nadd_subdirectory(gamestate)\nadd_subdirectory(log)\nadd_subdirectory(main)\nadd_subdirectory(nyan)\nadd_subdirectory(pathfinding)\nadd_subdirectory(renderer)\nadd_subdirectory(testing)\nadd_subdirectory(util)\nadd_subdirectory(versions)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage using CMake\nDESCRIPTION: This CMake command adds `interactive.cpp` to the list of source files used to build the `libopenage` library.  The `add_sources` command takes the target library name as the first argument and the list of source files as subsequent arguments.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/main/demo/interactive/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tinteractive.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules and Subdirectories in CMake\nDESCRIPTION: This CMake snippet adds Python modules to the project and includes several subdirectories in the build process. It first adds the __init__.py module, then includes the 'ak', 'fgt', and 'raj' subdirectories.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/conversion/hd/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n)\n\nadd_subdirectory(ak)\nadd_subdirectory(fgt)\nadd_subdirectory(raj)\n```\n\n----------------------------------------\n\nTITLE: Pixel0 Extraction Example - Binary Operation\nDESCRIPTION: Demonstrates how to extract the first pixel (pixel0) using bitmasking operations on the compressed data.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smx-files.md#2025-04-21_snippet_4\n\nLANGUAGE: plain\nCODE:\n```\nchunk[0:3] = 90 1E 32 73\n\npixel0 = chunk[0:3] & 0xFF03F03F = 90 02 30 33\n\n  10010000 00011110 00110010 01110011\n& 11111111 00000011 11110000 00111111\n-------------------------------------\n  10010000 00000010 00110000 00110011 = pixel0\n```\n\n----------------------------------------\n\nTITLE: Invoking OpenAge Interactive Conversion Mode via Shell Command\nDESCRIPTION: Command to start OpenAge's interactive media converter. This allows browsing the original Age of Empires 2 media files interactively. The command requires Python 3 and specifies the source directory containing the original game files.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/convert/interactive.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m openage convert --interactive --source-dir ~/games/age2\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library in CMake\nDESCRIPTION: This snippet adds C++ source files to the libopenage library. It includes filelike.cpp, native.cpp, and python.cpp as part of the library's source code.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/util/filelike/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tfilelike.cpp\n\tnative.cpp\n\tpython.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up ccache for Faster Compilation\nDESCRIPTION: Configures ccache as a compiler wrapper to speed up recompilation by caching previous compilation results, if enabled by the user.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# ccache setup\n\n# distros can also do this but they don't use this mechanism\noption(ENABLE_CCACHE \"prefix each compile command with ccache\")\n\nif(ENABLE_CCACHE)\n\tfind_program(CCACHE_FOUND \"ccache\")\n\n\tif(CCACHE_FOUND)\n\t\tset_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)\n\t\tset_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)\n\telse()\n\t\tmessage(FATAL_ERROR \"ccache not found, but you requested it\")\n\tendif(CCACHE_FOUND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories via CMake\nDESCRIPTION: This snippet uses `add_subdirectory` in CMake to include specified subdirectories in the build process. Each subdirectory contains its own CMakeLists.txt file, allowing for modular project structure and independent build configurations for each component. This approach promotes code organization and separation of concerns.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/util/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(filelike)\nadd_subdirectory(fslike)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Target in CMake\nDESCRIPTION: Uses the CMake add_sources function to include multiple C++ source files into the libopenage target. The files appear to be related to game boundaries, camera functionality, definitions, and frustum calculations for both 2D and 3D spaces.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/camera/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    boundaries.cpp\n\tcamera.cpp\n    definitions.cpp\n    frustum_2d.cpp\n\tfrustum_3d.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Economy Scoring Table in Markdown\nDESCRIPTION: Markdown table detailing economic scoring including resource gathering, villager population, and exploration bonuses.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/scoring.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTask                        | Score           | Notes\n----------------------------|-----------------|---------\nGold from mining and trade  | 1/100 of value  |\nNet resources tributed      | 1/60 of value   |\nVillager population         | 1 per villager  | includes trade, transport, and fishing vessels\nLargest villager population | 25 point bonus  | includes trade, transport, and fishing vessels\nExploration                 | 1 per 3% of map |\nLargest area explored       | 25 point bonus  |\n```\n\n----------------------------------------\n\nTITLE: Scalefactor Examples\nDESCRIPTION: Examples demonstrating different scaling factors and their effects on sprite display at various zoom levels.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/terrain_format_spec.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# Assume the sprite image has a size of 100x100\n# Factors <1 result in downscaling\nscalefactor 1.0   # No scaling, 100x100 at default zoom\nscalefactor 0.5   # 50x50 at default zoom; 100x100 at 2x zoom\nscalefactor 0.25  # 25x25 at default zoom; 100x100 at 4x zoom\n\n# Factors >1 result in upscaling\nscalefactor 2.0  # 200x200 at default zoom; 100x100 at 2x zoom\n```\n\n----------------------------------------\n\nTITLE: Adding Logging Source Files with CMake\nDESCRIPTION: Configures source files for the libopenage logging module using CMake's add_sources function. Includes multiple C++ implementation files related to logging infrastructure.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/log/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tfile_logsink.cpp\n\tlevel.cpp\n\tlog.cpp\n\tlogsink.cpp\n\tlogsource.cpp\n\tmessage.cpp\n\tnamed_logsource.cpp\n\tstdout_logsink.cpp\n\ttest.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Standalone SMPs in OpenAge\nDESCRIPTION: Command for converting standalone SMP graphics files to PNG format. This is specifically for Age of Empires 2: Definitive Edition.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/convert/convert_single_file.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npython3 -m openage convert-file --palettes-path ~/games/aoe2de/resources/_common/palettes u_elite_eagle.smp /tmp/rofl.png\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for openage on Debian\nDESCRIPTION: This command installs all the necessary packages for building and running openage on a Debian-based system. It includes development libraries, Python packages, and Qt6 modules required by the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/debian.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update && sudo apt-get install cmake cython3 libeigen3-dev libepoxy-dev libfontconfig1-dev libfreetype-dev libharfbuzz-dev libogg-dev libopus-dev libopusfile-dev libpng-dev libtoml11-dev python3-dev python3-mako python3-numpy python3-lz4 python3-pil python3-pip python3-pygments python3-toml qml6-module-qtquick-controls qt6-declarative-dev qt6-multimedia-dev  qml6-module-qtquick3d-spatialaudio\n```\n\n----------------------------------------\n\nTITLE: Implementing Area Effect Property\nDESCRIPTION: Property class for defining circular area of effect with range and dropoff.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_effect.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nArea(EffectProperty):\n    range   : float\n    dropoff : DropoffType\n```\n\n----------------------------------------\n\nTITLE: SLD Damage Mask Header Format - Python\nDESCRIPTION: Python struct format string for parsing the SLD damage mask header. Uses little-endian format with two unsigned chars.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< 2B\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Building Construction Time Formula\nDESCRIPTION: Mathematical formula showing how construction time is calculated based on the number of villagers assigned to a building site. The formula demonstrates the non-linear relationship between villager count and build speed.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/build_speed.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n(time for completion) = (3 * (build time)) / ((number of villagers) + 2)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules and Subdirectories in CMake\nDESCRIPTION: CMake configuration that adds multiple Python modules to the build system and includes a formats subdirectory. Uses add_py_modules to register Python files and add_subdirectory for nested directory inclusion.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/entity_object/export/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tdata_definition.py\n\tmedia_export_request.py\n\tmetadata_export.py\n\ttexture.py\n)\n\nadd_subdirectory(formats)\n```\n\n----------------------------------------\n\nTITLE: Implementing Standard ModifierScope Python\nDESCRIPTION: Ensures the modifier functions as per standard rules, ignoring any scoped properties.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_96\n\nLANGUAGE: python\nCODE:\n```\nStandard(ModifierScope):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Managing Subdirectories in CMake\nDESCRIPTION: The provided CMake snippets utilize the add_subdirectory command to include three specific modules or directories: 'pong', 'presenter', and 'interactive'. Each command integrates the subdirectory into the project's build process, enabling the compilation and configuration of additional features or components. There are no parameters, but it is essential that these specified directories contain valid CMake configurations for successful integration.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/main/demo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"pong\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"presenter\")\n```\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"interactive\")\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules and Subdirectories in CMake for openage\nDESCRIPTION: This CMake snippet adds Python modules to the build process and includes subdirectories for conversion, initialization, and reading operations. It uses the 'add_py_modules' function to include the '__init__.py' file and the 'add_subdirectory' command to include specific subdirectories.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n)\n\nadd_subdirectory(conversion)\nadd_subdirectory(init)\nadd_subdirectory(read)\n```\n\n----------------------------------------\n\nTITLE: Defining Tile Edge Structure in C++\nDESCRIPTION: This struct defines the format for tile edge data used in drawing edges for fog of war and unexplored regions. It includes elevation offsets and tile information.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/terrain.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstruct tile_edge {\n\tuint32_t elevation_offsets[17];\n\tstruct {\n\t\tuint32_t tile_offsets[94];\n\t\tstruct {\n\t\t\tstruct {\n\t\t\t\tuint8 y;   // 0 <= y <= 72\n\t\t\t\tuint8 x0;  // 0 <= x0 <= 96\n\t\t\t\tuint8 x1;  // 0 <= x1 <= 96 && x0 <= x1\n\t\t\t} spans[n];    // repeat until y == 255\n\t\t} tiles[94];       // each starting at tile_offsets[i]\n\t} elevations[17];      // each starting at elevation_offsets[i]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with pip on Windows\nDESCRIPTION: Installs the required Python modules for the openage project using pip. These include cython, numpy, lz4, toml, pillow, pygments, pyreadline3, and mako.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/windows_msvc.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npip install cython numpy lz4 toml pillow pygments pyreadline3 mako\n```\n\n----------------------------------------\n\nTITLE: Adding Game-Specific Converter Subdirectories\nDESCRIPTION: Includes subdirectories for different game data converters including Age of Empires (AoC), Definitive Editions (DE1, DE2), HD Edition, Rise of Rome (RoR), and Star Wars: Galactic Battlegrounds (SWGB)\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/conversion/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(aoc)\nadd_subdirectory(de1)\nadd_subdirectory(de2)\nadd_subdirectory(hd)\nadd_subdirectory(ror)\nadd_subdirectory(swgb)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Library Dependencies\nDESCRIPTION: Platform-specific library detection and linking for Windows, macOS and FreeBSD\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WIN32)\n\tfind_library(MATH_LIB m)\n\tfind_library(UTIL_LIB util)\nendif()\nif(WIN32)\n\tfind_library(OGG_LIB ogg)\n\ttarget_link_libraries(libopenage PRIVATE DbgHelp)\nendif()\nif(NOT APPLE AND NOT WIN32)\n\tfind_library(RT_LIB rt)\n\tif (${CMAKE_SYSTEM_NAME} STREQUAL \"FreeBSD\")\n\t\tfind_library(EXECINFO_LIB execinfo)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running Demo 0 - Basic Mesh Rendering\nDESCRIPTION: Command to run the basic renderer demo that shows minimal setup and simple mesh rendering.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/renderer/demos.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./bin/run test --demo renderer.tests.renderer_demo 0\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library\nDESCRIPTION: Defines the C++ source files that should be compiled into the main libopenage library. Includes core game engine components like entity management, terrain handling, simulation, and world state management.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    definitions.cpp\n    entity_factory.cpp\n\tgame_entity.cpp\n    game_state.cpp\n\tgame.cpp\n\tmanager.cpp\n    map.cpp\n\tplayer.cpp\n    simulation.cpp\n\tterrain_chunk.cpp\n    terrain_factory.cpp\n    terrain_tile.cpp\n\tterrain.cpp\n    types.cpp\n\tworld.cpp\n\tuniverse.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SLD Layer Length Structure in C++\nDESCRIPTION: This struct defines the layout for the content length field present at the start of each SLD layer.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nstruct sld_layer_length {\n  uint32  content_length;\n};\n```\n\n----------------------------------------\n\nTITLE: Modpack Identifier Format Example\nDESCRIPTION: Shows the standard format for a modpack identifier, consisting of the modpack name and repository name separated by @.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/modpacks.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nmodname@reponame\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake\nDESCRIPTION: This snippet uses a custom CMake function to add Python modules to the project. It specifies two Python files to be included: __init__.py and main.py.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/main/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tmain.py\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Texture Assets with CMake in openage\nDESCRIPTION: This CMake command installs all files from the current directory to the ASSET_DIR/textures destination, excluding the CMakeLists.txt file. It's used to set up texture assets for the openage project build process.\nSOURCE: https://github.com/sfttech/openage/blob/master/assets/textures/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY \".\"\n\tDESTINATION \"${ASSET_DIR}/textures\"\n\tPATTERN \"CMakeLists.txt\" EXCLUDE\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Qt GUI Sources to libopenage in CMake\nDESCRIPTION: Adds Qt-specific GUI source files to the libopenage target. The QTGUI_SOURCES variable likely contains a list of Qt-related GUI implementation files defined elsewhere in the build system.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/gui/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\t${QTGUI_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: DXT1/BC1 Block Format - Python\nDESCRIPTION: Python struct format string for parsing DXT1/BC1 compressed blocks. Uses little-endian format with two unsigned shorts and one unsigned int.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< 2H I\")\n```\n\n----------------------------------------\n\nTITLE: Listing Graphic Resources for Age of Empires II\nDESCRIPTION: This code snippet provides a comprehensive list of graphic resource (GRA) files used in Age of Empires II. It includes resources for various game elements such as buildings, units, and animations, organized by civilization and game age.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/aoc-slp-list.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGRA00364 4 Bigger Flames\nGRA00363 4 Medium Flames\nGRA00362 4 Small Flames\nGRA00736 Animation for Arabic Mill\nGRA00735 Animation for Asian Mill\nGRA00734 Animation for North European Mill\nGRA01683 Animation for Siege/Capped Ram's Front\nGRA00737 Animation for West European Mill\nGRA00744 Arabic animation for mill sails shadows? Castle Age & Imperial Age\nGRA00035 Arabic Archery Range Castle Age & Imperial Age\nGRA00023 Arabic Archery Range Feudal Age\nGRA04234 Arabic back of small sail sequence - combine with GRA04230?\nGRA00144 Arabic Barracks Castle Age & Imperial Age\nGRA00132 Arabic Barracks Feudal Age\nGRA00104 Arabic Blacksmith Castle Age & Imperial Age\nGRA00092 Arabic Blacksmith Feudal Age\nGRA02548 Arabic bombard tower\nGRA00304 Arabic Castle\nGRA02246 Arabic Castle Age & Imperial Age houses\nGRA01020 Arabic Castle Age & Imperial Age Stable\nGRA00411 Arabic Castle Age dock? with blankets similar to GRA00399\nGRA03611 Arabic Castle Age town center left side roof\nGRA03619 Arabic Castle Age town center left side roof support\nGRA03615 Arabic Castle Age town center left side roof supports\nGRA04627 Arabic Castle Age Town Center, right side roof\nGRA04635 Arabic Castle Age Town Center, right side roof support\nGRA04631 Arabic Castle Age Town Center, right side roof supports\nGRA04171 Arabic Damaged Stone Wall\nGRA00399 Arabic Dock Castle Age & Imperial Age\nGRA00387 Arabic Dock Feudal Age\nGRA02234 Arabic Feudal Age houses\nGRA01008 Arabic Feudal Age Stable\nGRA03599 Arabic Feudal Age town center left side roof\nGRA03607 Arabic Feudal Age town center left side roof support\nGRA03603 Arabic Feudal Age town center left side roof supports\nGRA04615 Arabic Feudal Age Town Center right side roof\nGRA04619 Arabic Feudal Age Town Center right side roof supports\nGRA04175 Arabic Fortified Damaged Wall\nGRA04077 Arabic fortified gate building sequence -- position\nGRA03716 Arabic Fortified gate building sequence / position\nGRA03732 Arabic Fortified gate building sequence \\ position\nGRA04165 Arabic fortified gate building sequence | position\nGRA01940 Arabic Fortified Gate closed / position\nGRA02441 Arabic Fortified Gate closed \\ position\nGRA04037 Arabic Fortified Gate open -- position\nGRA04125 Arabic Fortified Gate open | position\nGRA02369 Arabic Fortified Gate raised / position\nGRA02477 Arabic Fortified Gate raised \\ position\nGRA04013 Arabic Fortified gate shut -- position\nGRA04101 Arabic Fortified Gate shut | position\nGRA02405 Arabic Fortified gate tower\nGRA04191 Arabic Fortified severely Damaged Wall\nGRA02112 Arabic Fortified Wall\nGRA03752 Arabic Fortified wall building sequence\nGRA04663 Arabic fortified wall shadows?\nGRA04623 Arabic Fuedal Age Town Center far right roof support\nGRA04069 Arabic gate building sequence -- position\nGRA03708 Arabic gate building sequence / position\nGRA03724 Arabic gate building sequence \\ position\nGRA04157 Arabic gate building sequence | position\nGRA01928 Arabic Gate closed / position\nGRA02429 Arabic Gate closed \\ position\nGRA04025 Arabic Gate open -- position\nGRA04113 Arabic Gate open | position\nGRA02357 Arabic Gate raised / position\nGRA02465 Arabic Gate raised \\ position\nGRA04001 Arabic Gate shut -- position\nGRA04089 Arabic Gate shut | position\nGRA02666 Arabic Guard Tower\nGRA04183 Arabic heavily damaged Fortified Wall\nGRA04179 Arabic heavily Damaged Stone Wall\nGRA03796 Arabic Imperial Age Market\nGRA04639 Arabic Imperial Age Town Center, right side roof\nGRA04647 Arabic Imperial Age Town Center, right side roof support\nGRA04643 Arabic Imperial Age Town Center, right side roof supports\nGRA02540 Arabic Keep\nGRA03506 Arabic lumber camp\nGRA00819 Arabic Market Castle Age\nGRA02277 Arabic Market Feudal Age\nGRA00748 Arabic mill animation Feudal Age\nGRA00740 Arabic Mill Feudal Age without Animation\nGRA00752 Arabic Mill without Animation Castle Age & Imperial Age\nGRA03494 Arabic Mining Camp\nGRA00280 Arabic Monastery\nGRA04247 Arabic sail sequences\nGRA04187 Arabic severely Damaged Stone Wall\nGRA04303 Arabic ships main sail sequence\nGRA04600 Arabic ships main sail sequence\nGRA04226 Arabic Ships sail sequence\nGRA04297 Arabic ships sail sequence\nGRA04311 Arabic ships sail.\nGRA04319 Arabic ships sail.\nGRA04307 Arabic ships small triangular sail.\nGRA00957 Arabic Siege Workshop\nGRA04238 Arabic small sail sequence\nGRA04230 Arabic Small ships sail sequence\nGRA04242 Arabic small triangular sail sequence\nGRA00100 Arabic Smoke from Blacksmith\nGRA02393 Arabic Stone gate tower\nGRA02100 Arabic Stone Wall\nGRA00914 Arabic top piece of Castle Age Town Center\nGRA00902 Arabic top piece of Feudal Age Town Center\nGRA00926 Arabic top piece of Imperial Age Town Center\nGRA00922 Arabic town center flooring Imperial age\nGRA03471 Arabic town center left side roof supports Imperial Age\nGRA03475 Arabic town center left side roof supports Imperial Age\nGRA00906 Arabic town center support shadows Castle Age\nGRA00894 Arabic town center support shadows Feudal Age\nGRA00918 Arabic town center support shadows Imperial age\nGRA03467 Arabic Towncenter roof left side Imperial Age\nGRA03834 Arabic University Castle Age\nGRA03838 Arabic University Imperial Age\nGRA03744 Arabic wall building sequence\nGRA04659 Arabic wall shadows?\nGRA02654 Arabic Watch Tower\nGRA02698 Arbalest attacking\nGRA02705 Arbalest decaying\nGRA02701 Arbalest dying\nGRA02708 Arbalest moving\nGRA02704 Arbalest standing\nGRA00009 Archer Decaying\nGRA00005 Archer Dying\nGRA00002 Archer firing\nGRA00012 Archer Moving\nGRA00008 Archer standing\nGRA03799 Arrow\nGRA03812 Arrow or rocket?\nGRA03547 Arrow or spear?\nGRA00034 Asian Archery Range Castle Age & Imperial Age\nGRA00022 Asian Archery Range Feudal Age\nGRA04233 Asian back of small sail sequence - combine with GRA04229?\nGRA00143 Asian Barracks Castle Age & Imperial Age\nGRA00131 Asian Barracks Feudal Age\nGRA00103 Asian Blacksmith Castle Age & Imperial Age\nGRA00091 Asian Blacksmith Feudal Age\nGRA02547 Asian bombard tower\nGRA00303 Asian Castle\nGRA02245 Asian Castle Age & Imperial Age houses\nGRA01019 Asian Castle Age & Imperial Age Stable\nGRA00410 Asian Castle Age dock? Similar to GRA00398\nGRA03610 Asian Castle Age town center left side roof\nGRA03618 Asian Castle Age town center left side roof support\nGRA03614 Asian Castle Age town center left side roof supports\nGRA04626 Asian Castle Age Town Center, right side roof\nGRA04634 Asian Castle Age Town Center, right side roof support\nGRA04630 Asian Castle Age Town Center, right side roof supports\nGRA04170 Asian Damaged Stone Wall\nGRA00398 Asian Dock Castle Age & Imperial Age\nGRA00386 Asian Dock Feudal Age\nGRA02233 Asian Feudal Age houses\nGRA01007 Asian Feudal Age Stable\nGRA03598 Asian Feudal Age town center left side roof\nGRA03606 Asian Feudal Age town center left side roof support\nGRA03602 Asian Feudal Age town center left side roof supports\nGRA04614 Asian Feudal Age Town Center right side roof\nGRA04618 Asian Feudal Age Town Center right side roof supports\nGRA04174 Asian Fortified Damaged Wall\nGRA04076 Asian fortified gate building sequence -- position\nGRA03715 Asian Fortified gate building sequence / position\nGRA03731 Asian Fortified gate building sequence \\ position\nGRA04164 Asian fortified gate building sequence | position\nGRA01939 Asian Fortified Gate closed / position\nGRA02440 Asian Fortified Gate closed \\ position\nGRA04036 Asian Fortified Gate open -- position\nGRA04124 Asian Fortified Gate open | position\nGRA02368 Asian Fortified Gate raised / position\nGRA02476 Asian Fortified Gate raised \\ position\nGRA04012 Asian Fortified gate shut -- position\nGRA04100 Asian Fortified Gate shut | position\nGRA02404 Asian Fortified gate tower\nGRA04190 Asian Fortified severely Damaged Wall\nGRA02111 Asian Fortified Wall\nGRA03751 Asian Fortified wall building sequence\nGRA04662 Asian fortified wall shadows?\nGRA04622 Asian Fuedal Age Town Center far right roof support\nGRA04068 Asian gate building sequence -- position\nGRA03707 Asian gate building sequence / position\nGRA03723 Asian gate building sequence \\ position\nGRA04156 Asian gate building sequence | position\nGRA01927 Asian Gate closed / position\nGRA02428 Asian Gate closed \\ position\nGRA04024 Asian Gate open  -- position\nGRA04112 Asian Gate open | position\nGRA02356 Asian Gate raised / position\nGRA02464 Asian Gate raised \\ position\nGRA04000 Asian Gate shut -- position\nGRA04088 Asian Gate shut | position\nGRA02665 Asian Guard Tower\nGRA04182 Asian heavily damaged Fortified Wall\nGRA04178 Asian heavily Damaged Stone Wall\nGRA03795 Asian Imperial Age Market\nGRA04638 Asian Imperial Age Town Center, right side roof\nGRA04646 Asian Imperial Age Town Center, right side roof support\nGRA04642 Asian Imperial Age Town Center, right side roof supports\nGRA02539 Asian Keep\nGRA03505 Asian lumber camp\nGRA00818 Asian Market Castle Age\nGRA02276 Asian Market Feudal Age\nGRA00747 Asian mill animation Feudal Age\nGRA00739 Asian Mill Feudal Age without Animation\nGRA00751 Asian Mill without Animation Castle Age & Imperial Age\nGRA03493 Asian Mining Camp\nGRA00279 Asian Monastery.\nGRA04246 Asian sail sequences\nGRA04186 Asian severely Damaged Stone Wall\nGRA04302 Asian ships main sail sail sequence\nGRA04599 Asian ships main sail sequence\nGRA04310 Asian ships sail\nGRA04225 Asian Ships sail sequence\nGRA04296 Asian ships sail sequence\nGRA04318 Asian ships sail.\nGRA04306 Asian ships small triangular sail\nGRA00956 Asian Siege Workshop\nGRA04237 Asian small sail sequence\nGRA04229 Asian Small ships sail sequence\nGRA04241 Asian small triangular sail sequence\nGRA00099 Asian Smoke from Blacksmith\nGRA02392 Asian Stone gate tower\nGRA02099 Asian Stone Wall\nGRA00913 Asian top piece of Castle Age Town Center\nGRA00901 Asian top piece of Feudal Age Town Center\nGRA00925 Asian top piece of Imperial Age Town Center\nGRA00921 Asian town center flooring Imperial age\nGRA03470 Asian town center left side roof supports Imperial Age\nGRA03474 Asian town center left side roof supports Imperial Age\nGRA00905 Asian town center support shadows Castle Age\nGRA00893 Asian town center support shadows Feudal Age\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Definition Files in CMake\nDESCRIPTION: Adds Cython definition files (.pxd) for various components of the Opus encoding module.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/export/opus/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_pxds(\n\t__init__.pxd\n\tbytearray.pxd\n\togg.pxd\n\topus.pxd\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage with CMake\nDESCRIPTION: This CMake snippet uses the `add_sources` command to include several C++ source files in the `libopenage` library. The specified `.cpp` files, such as `binding_context.cpp`, `binding.cpp`, and `controller.cpp`, will be compiled and linked into the `libopenage` library during the build process.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/input/controller/hud/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n    binding_context.cpp\n    binding.cpp\n    controller.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Running openage with Debug Options\nDESCRIPTION: This command shows how to run openage with humor-based debug options that reference the project's development state.\nSOURCE: https://github.com/sfttech/openage/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n./bin/run --dont-segfault --no-errors --dont-eat-dog\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Modules in CMake\nDESCRIPTION: This snippet uses the add_cython_modules function to include a Cython module named 'tests.pyx' in the project build.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/pathfinding/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cython_modules(\n\ttests.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Version Declaration Example\nDESCRIPTION: Shows how to declare the sprite format version in the configuration file.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/sprite_format_spec.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nversion 2\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAge Dependencies on Fedora\nDESCRIPTION: This command installs all the required packages for building and running OpenAge on Fedora 34 and later. It includes development libraries, Python packages, and Qt6 components.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/fedora.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf install clang cmake eigen3-devel fontconfig-devel gcc-c harfbuzz-devel libepoxy-devel libogg-devel libopusenc-devel libpng-devel  opusfile-devel python3-Cython python3-devel python3-mako python3-numpy python3-lz4 python3-pillow python3-pygments python3-toml toml11-devel qt6-qtdeclarative-devel qt6-qtmultimedia-devel\n```\n\n----------------------------------------\n\nTITLE: Adding GUI Application with Logger Source to libopenage Library in CMake\nDESCRIPTION: This CMake command adds the gui_application_with_logger.cpp source file to the libopenage target. The add_sources function is likely a custom CMake function that handles source file registration in the build system.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/gui/integration/public/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tgui_application_with_logger.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of OpenGL Implementation in CMake\nDESCRIPTION: Conditionally adds the OpenGL implementation subdirectory if OpenGL is found during CMake configuration. This allows the build to adapt to systems with or without OpenGL support.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(OPENGL_FOUND)\n    add_subdirectory(opengl/)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Converting WAVs from DRS Archives in OpenAge\nDESCRIPTION: Command for extracting and converting WAV sound files from DRS archives to OPUS format. This is applicable for older versions of Age of Empires 1, Age of Empires 2, and SWGB.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/convert/convert_single_file.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npython3 -m openage convert-file --drs ~/games/aoe2/Data/sounds.drs 123.wav /tmp/rofl.opus\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Target in CMake\nDESCRIPTION: Adds multiple C++ source files to the libopenage library build target. The files include functionality for drag selection, command processing, entity spawning, and wait operations.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/event/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    drag_select.cpp\n    process_command.cpp\n    send_command.cpp\n    spawn_entity.cpp\n    wait.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SMP Layer Header Structure in C++\nDESCRIPTION: C++ struct definition for SMP layer headers, containing metadata about each frame layer such as dimensions, offsets, and flags.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nstruct smp_layer_header {\n  uint32 width;\n  uint32 height;\n  uint32 hotspot_x;\n  uint32 hotspot_y;\n  uint32 layer_type;\n  uint32 outline_table_offset;\n  uint32 cmd_table_offset;\n  uint32 flags;\n};\n```\n\n----------------------------------------\n\nTITLE: Texture Reference Examples\nDESCRIPTION: Examples showing different ways to reference texture files in the blendmask format.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/blendmask_format_spec.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntexture 0 \"grass.texture\"\ntexture 1 \"../../grass.texture\"\ntexture 2 \"/{aoe2_base}/graphics/grass.texture\"\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files in CMake for libopenage\nDESCRIPTION: CMake command that adds engine.cpp source file to the libopenage library target. Uses the add_sources CMake function to include compilation source files.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/engine/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n    engine.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Python Bindings with pxdgen in CMake\nDESCRIPTION: Specifies header files that require Python bindings to be generated using the pxdgen tool. These headers contain filesystem abstractions and Python integration interfaces that need to be exposed to Python code.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/util/fslike/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxdgen(\n\tfslike.h\n\tpython.h\n)\n```\n\n----------------------------------------\n\nTITLE: Technology Scoring Table in Markdown\nDESCRIPTION: Markdown table listing technology-related scoring including research points and age advancement bonuses.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/scoring.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nTask                             | Score\n---------------------------------|-------------------------\nTechnologies researched          | 2 points per technology\nMost technologies researched     | 50 point bonus\nFirst civilization to Bronze Age | 25 point bonus\nFirst civilization to Iron Age   | 25 point bonus\n```\n\n----------------------------------------\n\nTITLE: Layer Definition Examples\nDESCRIPTION: Demonstrates various layer configurations with different modes, positions, and timing parameters.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/sprite_format_spec.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nlayer 0\nlayer 1 mode=off  position=10\nlayer 2 mode=once position=20 time_per_frame=300\nlayer 3 mode=loop position=15 time_per_frame=1200 replay_delay=200\n```\n\n----------------------------------------\n\nTITLE: Displaying Build Configuration Overview\nDESCRIPTION: Outputs a summary of the build configuration, including version information, compiler details, Python version, and build flags.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# show build configuration overview\n\nmessage(\"\")\nprint_config_options()\n\nmessage(\"${PROJECT_NAME} ${PROJECT_VERSION}\n\n   version string | ${VERSION_FULL_STRING}\n         compiler | ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}\n           python | ${PYTHON_VERSION_STRING}\n       build type | ${CMAKE_BUILD_TYPE}\n         cxxflags | ${CMAKE_CXX_FLAGS} ${EXTRA_FLAGS}\n build type flags | ${${BUILD_TYPE_CXX_FLAGS}}\n        build dir | ${CMAKE_BINARY_DIR}\n   install prefix | ${CMAKE_INSTALL_PREFIX}\npy install prefix | ${CMAKE_PY_INSTALL_PREFIX}\n\")\n```\n\n----------------------------------------\n\nTITLE: Coordinate System Conversion Flow Diagram\nDESCRIPTION: ASCII diagram showing possible conversions between different coordinate system types in the engine, including scene, physics, tile, chunk, input, viewport, and camera coordinate spaces.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/coordinate-systems.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n           scene2 <----> phys2 <--------> tile <--------> chunk\n              |           |                |\n              |           |                |\n              |           |                |\ninput ***> scene3 <----> phys3 <--------> tile3\n   |          |\n   |          |\n   ------> viewport <--> term\n              |\n              |\n           camhud\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake\nDESCRIPTION: This CMake command adds Python modules to the project. It includes two specific Python files: __init__.py for package initialization and internal_nyan_names.py for internal nyan name handling.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/conversion/de2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tinternal_nyan_names.py\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Adaptive Payment Mode in Python\nDESCRIPTION: Defines progressive payment handling for running costs during action execution.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_109\n\nLANGUAGE: python\nCODE:\n```\nAdaptive(PaymentMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding Sources to libopenage in CMake\nDESCRIPTION: The snippet uses the `add_sources` function in a CMake list to specify source files for the libopenage library. It includes multiple C++ source files, such as `binding_context.cpp`, `binding.cpp`, and `controller.cpp`, which are expected to be compiled and linked as part of the `libopenage` library. The purpose is to facilitate the build process by defining which files contribute to the library.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/input/controller/camera/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n    binding_context.cpp\n    binding.cpp\n    controller.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Launching gdbgui with openage\nDESCRIPTION: Starts the gdbgui browser interface for debugging openage. This launches a web server on port 5000 that provides a graphical interface to GDB.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/debug.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngdbgui ./run\n```\n\n----------------------------------------\n\nTITLE: Generating Header Dependency with pxdgen in C++ Project\nDESCRIPTION: This snippet uses the 'pxdgen' command to generate some form of processed or additional headers from 'tests.h'. The role seems to facilitate interactions or bindings with other parts of the project or external systems. Critical dependency is the presence of the file 'tests.h' for processing.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/pathfinding/demo/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npxdgen(\n\ttests.h\n)\n```\n\n----------------------------------------\n\nTITLE: Quick Reference for OpenAge Texture Format\nDESCRIPTION: Provides a quick reference of the basic syntax and attributes used in OpenAge texture configuration files, including version, imagefile, size, pixel format, and subtexture definitions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/texture_format_spec.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This is a texture configuration file\n# comments start with # and are ignored\n\n# file version\nversion 1\n\n# image file reference, relative to this file's location\nimagefile <filename>\n\n# Image size\nsize <width> <height>\n\n# Pixel format representation\npxformat <format> cbit=<token>\n\n# Defines a subtexture inside the image resource\n# Subtextures have x and y coordinates, width and height\n# as well as anchor points.\nsubtex <xpos> <ypos> <xsize> <ysize> <xhotspot> <yhotspot>\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Release of openage in Gentoo\nDESCRIPTION: This command installs the latest release version of openage using Gentoo's package manager, emerge.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/gentoo.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nemerge -avt openage\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version Requirement for OpenAge\nDESCRIPTION: Specifies the minimum CMake version (3.16) required for building the OpenAge project, particularly for finding NumPy with the findpython3 module.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# >=3.16 finding numpy with the findpython3 module\ncmake_minimum_required(VERSION 3.16)\n```\n\n----------------------------------------\n\nTITLE: Adding GUI Sources to libopenage in CMake\nDESCRIPTION: Configures the main GUI source file (gui.cpp) for inclusion in the libopenage target. This CMake command adds the core GUI implementation file to the project build.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/gui/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tgui.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Files to libopenage Library in CMake\nDESCRIPTION: This CMake snippet adds multiple C++ source files to the libopenage library. The files added include implementations for blend patterns, blend tables, frames, layers, and terrain information structures.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/resources/terrain/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n    blendpattern_info.cpp\n    blendtable_info.cpp\n    frame_info.cpp\n    layer_info.cpp\n    terrain_info.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Pixel1 Extraction Example - Rotation and Binary Operation\nDESCRIPTION: Shows the process of extracting the second pixel (pixel1) using bit rotation and masking operations.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smx-files.md#2025-04-21_snippet_5\n\nLANGUAGE: plain\nCODE:\n```\nrot_0 = chunk[1:2] ROTR 2\n      = 00011110 00110010 ROTR 2\n      = 10000111 10001100\n\nrot_1 = chunk[3:4] ROTR 2\n      = 01110011 10101010 ROTR 2\n      = 10011100 11101010\n\n[rot_0,rot_1] = 10000111 10001100 10011100 11101010 = 87 8C 9C EA\n\npixel1 = [rot_0,rot_1] & 0xFF03F03F = 87 00 90 2A\n\n  10000111 10001100 10011100 11101010\n& 11111111 00000011 11110000 00111111\n-------------------------------------\n  10000111 00000000 10010000 00101010 = pixel1\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library\nDESCRIPTION: Adds rendering-related C++ source files to the libopenage library build target. The files include render_stage.cpp for handling rendering stages and screenshot.cpp for screenshot functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/stages/screen/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\trender_stage.cpp\n\tscreenshot.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Files to libopenage Library in CMake\nDESCRIPTION: This CMake command adds multiple C++ source files to the libopenage library. It includes files related to angle, animation, frame, and layer information processing.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/resources/animation/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tangle_info.cpp\n\tanimation_info.cpp\n\tframe_info.cpp\n\tlayer_info.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SMP Layer Row Edge Structure in C++\nDESCRIPTION: C++ struct definition for SMP layer row edges, which specify transparent pixel counts on each side of a row.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nstruct smp_layer_row_edge {\n  uint16 left_space;\n  uint16 right_space;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Execution Sound Property\nDESCRIPTION: Implements the ExecutionSound property for playing sounds while an ability is active.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nExecutionSound(AbilityProperty):\n    sounds : set(Sound)\n```\n\n----------------------------------------\n\nTITLE: Defining Ungarrison Action Struct in C\nDESCRIPTION: Defines a C struct for the ungarrison action (6f). It includes action identifier, selection count, coordinates, ungarrison type, release ID, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nstruct ungarrison {\n  uint8_t action_identifier;\n  uint8_t selection_count;\n  float x_coord;\n  float y_coord;\n  uint8_t ungarrison_type;\n  uint32_t release_id;\n  uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules Configuration\nDESCRIPTION: Configures the build system to include several Python modules related to data and media export functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/processor/export/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tdata_exporter.py\n\tgenerate_manifest_hashes.py\n\tmedia_exporter.py\n\tmodpack_exporter.py\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Cython Header Files\nDESCRIPTION: CMake command to generate Cython header files (.pxd) from C++ headers using the pxdgen tool, processing backtrace, error, and handler header files.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/error/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxdgen(\n\tbacktrace.h\n\terror.h\n\thandlers.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for OpenAge on Arch Linux\nDESCRIPTION: This command installs the necessary packages for OpenAge from the Arch Linux repositories. It includes various Python libraries, multimedia libraries, and development tools.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/arch_linux.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S --needed eigen python python-mako python-pillow python-numpy python-lz4 python-pygments cython libepoxy libogg libpng ttf-dejavu freetype2 fontconfig harfbuzz cmake opusfile opus python-pylint python-toml qt6-declarative qt6-multimedia\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Package Information - CMake\nDESCRIPTION: This snippet defines the basic metadata for the package, including vendor, contact information, and descriptions. These details will be used when generating the installer.\nSOURCE: https://github.com/sfttech/openage/blob/master/packaging/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CPACK_PACKAGE_VENDOR \"The openage authors\")\nset(CPACK_PACKAGE_CONTACT \"openage-Maintainers https://github.com/SFTtech/openage#contact\")\nset(CPACK_PACKAGE_DESCRIPTION \"Free (as in freedom) open source clone of the Age of Empires II engine 🚀\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"A FLOSS RTS-engine in tribute to Genie 🚀\")\nset(CPACK_PACKAGE_HOMEPAGE_URL \"https://openage.dev/\")\n```\n\n----------------------------------------\n\nTITLE: Colours Attribute Example in OpenAge Palette Format\nDESCRIPTION: Demonstrates how to define the array of RGBA color values. Each entry consists of 4 integers representing the red, green, blue, and alpha channel values in the range of 0-255.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/palette_format_spec.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncolours [\n255 255 255 0\n4 3 2 1\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Openage on openSUSE\nDESCRIPTION: This snippet shows the command to install the necessary dependencies for Openage on openSUSE using zypper.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/editor/tech.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo zypper install cmake libfreetype6-devel python3-devel libepoxy-devel libSDL2-devel libSDL2_image-devel libopusfile-devel fontconfig-devel harfbuzz-devel opus-tools python3-Pillow python3-numpy python3-Pygments patterns-openSUSE-devel_qt5 libqt5-qtdeclarative-devel\n```\n\n----------------------------------------\n\nTITLE: Defining Python Modules for Openage\nDESCRIPTION: This snippet defines the Python modules that are part of the Openage project. It specifies a list of Python files representing various sub-processors and the core processor, which are essential components of the Openage engine.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/processor/conversion/swgbcc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tability_subprocessor.py\n\tauxiliary_subprocessor.py\n\tciv_subprocessor.py\n\tmodpack_subprocessor.py\n\tnyan_subprocessor.py\n\tpregen_subprocessor.py\n\tprocessor.py\n\ttech_subprocessor.py\n\tupgrade_attribute_subprocessor.py\n\tupgrade_resource_subprocessor.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Public Qt GUI Interface Source Files in CMake\nDESCRIPTION: This snippet appends public interface source files for Qt GUI components to the QTGUI_SOURCES list. It includes files for the application, engine, input, renderer, and subtree interfaces.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/gui/guisys/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND QTGUI_SOURCES\n\t${CMAKE_CURRENT_SOURCE_DIR}/public/gui_application.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/public/gui_engine.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/public/gui_input.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/public/gui_renderer.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/public/gui_subtree.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Fill Command Implementation\nDESCRIPTION: Command for filling multiple pixels with the same color. Shows length calculation and optimization purpose.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nlength = command >> 4. If 0, the next byte is read and used as the length.\n(ex: 0x17 = 1, 0x27 = 2, 0xA7 = 10, 0xF7 = 15, 0x07 + 0x10 = 16)\n```\n\n----------------------------------------\n\nTITLE: Configuring File System Paths for Assets and Configuration\nDESCRIPTION: Sets up filesystem paths for assets and configuration files, handling differences between Windows (MSVC) and other platforms.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# static content filesystem locations\nif(NOT DEFINED GLOBAL_ASSET_DIR)\n\tset(ASSET_DIR \"share/openage\")\n\tif(MSVC)\n\t\tset(GLOBAL_ASSET_DIR \"${ASSET_DIR}\")\n\telse()\n\t\tset(GLOBAL_ASSET_DIR \"${CMAKE_INSTALL_PREFIX}/${ASSET_DIR}\")\n\tendif()\nendif()\n\nif(NOT DEFINED GLOBAL_CONFIG_DIR)\n\tset(CONFIG_DIR \"etc/openage\")\n\tif(MSVC)\n\t\tset(GLOBAL_CONFIG_DIR \"${CONFIG_DIR}\")\n\telse()\n\t\tset(GLOBAL_CONFIG_DIR \"${CMAKE_INSTALL_PREFIX}/${CONFIG_DIR}\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying Base Speed for Ram Types in Age of Empires II\nDESCRIPTION: This code snippet shows the base speed for Battering/Capped Rams and Siege Rams in tiles per second. It illustrates the speed difference between the ram types when ungarrisoned.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/ram_speed.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    Battering/Capped Ram  0.5 tiles/s\n    Siege Ram             0.6 tiles/s\n```\n\n----------------------------------------\n\nTITLE: Including Subdirectories in CMake Project\nDESCRIPTION: CMake directives to include three subdirectories (compress, filelike, and fslike) in the build process. These directories likely contain additional source files related to compression, file abstractions, and filesystem operations.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/util/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(compress)\nadd_subdirectory(filelike)\nadd_subdirectory(fslike)\n```\n\n----------------------------------------\n\nTITLE: Including Rendering Subdirectories in CMake Build System\nDESCRIPTION: Adds multiple subdirectories to the build system. Each subdirectory represents a component of the rendering system such as camera, HUD, screen elements, skybox, terrain, and world objects.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/stages/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(camera/)\nadd_subdirectory(hud/)\nadd_subdirectory(screen/)\nadd_subdirectory(skybox/)\nadd_subdirectory(terrain/)\nadd_subdirectory(world/)\n```\n\n----------------------------------------\n\nTITLE: Installing GLSL Shader Files with CMake\nDESCRIPTION: A CMake directive that copies all GLSL shader files from the current directory to the designated asset directory. The script uses pattern matching to ensure only files with the .glsl extension are copied.\nSOURCE: https://github.com/sfttech/openage/blob/master/assets/shaders/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY \".\"\n\tDESTINATION \"${ASSET_DIR}/shaders\"\n\tFILES_MATCHING PATTERN \"*.glsl\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Researchables Production Mode in Python\nDESCRIPTION: Handles production queue for research technologies with exclusion list.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_124\n\nLANGUAGE: python\nCODE:\n```\nResearchables(ProductionMode):\n    exclude : set(ResearchableTech)\n```\n\n----------------------------------------\n\nTITLE: Building and Running OpenAge with Nix\nDESCRIPTION: Two-step process to build OpenAge with Nix and then run the resulting binary.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/nix.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnix build .#openage\n./result/bin/openage\n```\n\n----------------------------------------\n\nTITLE: Implementing 26BC53 Packet Structure in Ruby - Host Communication Turn Broadcast\nDESCRIPTION: Defines the structure of a 26BC53 packet sent only by the lobby host every 3 seconds. It includes standard header information along with fields for communication turn tracking.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/03-sync.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef 26BC53\n  byte20 :header\n  int16 :unknown1\n  int16 :unknown2\n  int16 :communication_turn\nend\n```\n\n----------------------------------------\n\nTITLE: Defining AttributeSetting Class in Python\nDESCRIPTION: Class for configuring attribute ranges and initial values.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nAttributeSetting(Object):\n    attribute       : Attribute\n    min_value       : int\n    max_value       : int\n    starting_value  : int\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules to Build\nDESCRIPTION: Registers pure Python modules to be included in the project structure. Adds __init__.py module for package initialization.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/renderer/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: Defining LogicGate LogicElement Python\nDESCRIPTION: Represents a general logic gate implementing a Boolean function that operates on a set of logic elements as inputs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_68\n\nLANGUAGE: python\nCODE:\n```\nLogicGate(LogicElement):\n    inputs : set(LogicElement)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake for OpenAge\nDESCRIPTION: CMake configuration that adds multiple Python modules to the build system. The modules cover various game mechanics including civilizations, map handling, terrain, units, research, and graphics.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/read/media/datfile/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tciv.py\n\tempiresdat.py\n\tgraphic.py\n\tlookup_dicts.py\n\tmaps.py\n\tplayercolor.py\n\tresearch.py\n\tsound.py\n\ttech.py\n\tterrain.py\n\tunit.py\n)\n```\n\n----------------------------------------\n\nTITLE: Installing GCC Compiler on Arch Linux\nDESCRIPTION: This command installs the GNU Compiler Collection (GCC) on Arch Linux. It's one of the options for installing a compiler needed for the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/arch_linux.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S --needed gcc\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library in CMake\nDESCRIPTION: This snippet defines the C++ source files to be included in the libopenage library build. The files primarily deal with Python integration, including exception handling, object manipulation, and other utilities.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/pyinterface/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\texctranslate.cpp\n\texctranslate_tests.cpp\n\tdefs.cpp\n\tfunctional.cpp\n\thacks.cpp\n\tpyexception.cpp\n\tpyobject.cpp\n\tpyobject_tests.cpp\n\tsetup.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Survival/Wonders Scoring Table in Markdown\nDESCRIPTION: Markdown table showing points for survival and wonder construction.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/scoring.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nTask                         | Score\n-----------------------------|----------------------\nStill alive before game ends | 100 points\nWonders held                 | 100 points per wonder\n```\n\n----------------------------------------\n\nTITLE: Running Openage Game Engine\nDESCRIPTION: This snippet demonstrates the command to run the Openage game engine after building the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/editor/tech.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./run.py\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library\nDESCRIPTION: CMake command to add C++ source files to the libopenage library target, including files for backtrace, demo, error handling, and stack analysis functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/error/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\tbacktrace.cpp\n\tdemo.cpp\n\terror.cpp\n\thandlers.cpp\n\tstackanalyzer.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Compile-time Configuration Files with CMake\nDESCRIPTION: Configures template files to generate compile-time header and implementation files for the OpenAge project. The configure_file command processes input templates and substitutes CMake variables to create output files.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/versions/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(compiletime.h.in compiletime.h)\nconfigure_file(compiletime.cpp.in compiletime.cpp)\n```\n\n----------------------------------------\n\nTITLE: SLP Frame Info Structure\nDESCRIPTION: C++ struct definition for frame information within SLP files. Contains metadata about individual frames including offsets, dimensions, and sprite center coordinates.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstruct slp_frame_info {\n  uint32 cmd_table_offset;\n  uint32 outline_table_offset;\n  uint32 palette_offset;\n  uint32 properties;\n  int32  width;\n  int32  height;\n  int32  hotspot_x;\n  int32  hotspot_y;\n};\n```\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< I I I I i i i i\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAge Library Properties with CMake\nDESCRIPTION: Sets up the base library target 'libopenage' with version and automoc settings\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ndeclare_binary(libopenage openage library allow_no_undefined)\n\nset_target_properties(libopenage PROPERTIES\n\tVERSION 0\n\tAUTOMOC ON\n\tAUTOGEN_TARGET_DEPENDS \"codegen\"\n)\n```\n\n----------------------------------------\n\nTITLE: Tab-Space Usage Rule Summary\nDESCRIPTION: Concise summary of the project's code style rule for tabs and spaces, providing clear guidance for developers contributing to the codebase.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code_style/tabs_n_spaces.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n=> use tabs for indentation\n=> use spaces for alignment\n```\n\n----------------------------------------\n\nTITLE: Adding CPP Source Files to libopenage Library Build\nDESCRIPTION: CMake command to add source files command_in_queue.cpp and wait.cpp to the libopenage library target. This is part of the build system configuration to specify which source files should be compiled into the library.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/activity/event/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    command_in_queue.cpp\n    wait.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Including GUI Subsystem Directories in CMake\nDESCRIPTION: Adds subdirectories for GUI subsystems to the build process. This includes the guisys (GUI systems) and integration directories that contain additional GUI-related functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/gui/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"guisys\")\nadd_subdirectory(\"integration\")\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Opus Encoding Python Extension in CMake\nDESCRIPTION: Links the necessary Ogg and Opus libraries to the 'opusenc.pyx' Python extension.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/export/opus/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\npyext_link_libraries(\n\topusenc.pyx\n\t${OGG_LIBRARIES}\n\t${OPUS_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Standalone SLPs in OpenAge\nDESCRIPTION: Command for converting standalone SLP graphics files to PNG format. This is applicable for Age of Empires 1: Definitive Edition and Age of Empires 2: HD Edition.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/convert/convert_single_file.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 -m openage convert-file --palettes-path ~/games/aoede/Assets/Palettes 326.slp /tmp/rofl.png\n```\n\n----------------------------------------\n\nTITLE: Version Attribute Example\nDESCRIPTION: Example showing how to specify the terrain format version.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/terrain_format_spec.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nversion 2\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library Target\nDESCRIPTION: CMake command that adds multiple C++ source files to the libopenage library build target. The files include core gameplay mechanics like idle state, live entities, movement, selection, and turning functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/component/api/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    idle.cpp\n    live.cpp\n    move.cpp\n    selectable.cpp\n    turn.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules via CMake\nDESCRIPTION: This CMake command `add_py_modules` is used to add a list of Python files as modules to the project. The specified Python files are then handled as part of the project's module structure, allowing them to be imported and used within the project's Python code. This simplifies module management and dependency handling within the CMake build process.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/util/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tbytequeue.py\n\tcontext.py\n\tdecorators.py\n\tdll.py\n\tfiles.py\n\tfsprinting.py\n\thash.py\n\titerators.py\n\tmath.py\n\tobserver.py\n\tordered_set.py\n\tprofiler.py\n\tstrings.py\n\tstruct.py\n\tsystem.py\n\tthreading.py\n\tversion.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Target in CMake\nDESCRIPTION: Adds render_entity.cpp to the libopenage target source files. This function aggregates source files for the OpenAge library build process.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/stages/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\trender_entity.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling X11 Access for Docker Container\nDESCRIPTION: Command to allow the Docker container to access the X11 display server by granting permissions to the local root user.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxhost +local:root\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to CMake Library Target\nDESCRIPTION: Configures source files for the libopenage library using CMake's add_sources function. Includes multiple implementation files related to job management and testing.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/job/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tjob_group.cpp\n\tjob_manager.cpp\n\ttests.cpp\n\tworker.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Updated Make Run Command\nDESCRIPTION: Change in the make run command execution path from game to main\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/engine/v0.5.2.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: Installing Spacemacs Basic Components\nDESCRIPTION: Shell commands for installing core Spacemacs components including cloning repositories and creating symbolic links\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ide/emacs.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/syl20bnr/spacemacs ~/.emacs.d\ngit clone https://github.com/TheJJ/conffiles ~/.jjconfigs\nln -s .jjconfigs/.spacemacs ~/.spacemacs\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Openage on Ubuntu\nDESCRIPTION: This snippet shows the command to install the necessary dependencies for Openage on Ubuntu using apt-get.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/editor/tech.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install cmake libfreetype6-dev python3-dev libepoxy-dev libsdl2-dev libsdl2-image-dev libopusfile-dev libfontconfig1-dev libharfbuzz-dev opus-tools python3-pil python3-numpy python3-pygments qtdeclarative5-dev qml-module-qtquick-controls libqt5svg5-dev\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library\nDESCRIPTION: Adds core C++ source files to the libopenage library target. Includes main components like AI controller, game state, GUI, main entry point, and physics system.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/event/demo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\taicontroller.cpp\n\tgamestate.cpp\n\tgui.cpp\n\tmain.cpp\n\tphysics.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SMP Frame Header Structure in C++\nDESCRIPTION: C++ struct definition for SMP frame headers, which store the number of layers for each frame.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nstruct smp_frame_header {\n  28 bytes unused; # stores frame header info for source_format = 0x0B\n  uint32   length;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Source Files to libopenage Library in CMake\nDESCRIPTION: This CMake snippet adds three C++ source files to the libopenage library. It uses the add_sources function to include object.cpp, render_entity.cpp, and render_stage.cpp in the library compilation.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/stages/hud/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tobject.cpp\n\trender_entity.cpp\n\trender_stage.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing Gamedata Visualization\nDESCRIPTION: This snippet provides a link to a visualization of the game data structure, likely useful for understanding the project's architecture.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/nyan_api/v0.4.1.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Reference visualization\n\n* [Gamedata](https://github.com/SFTtech/openage/blob/408fc171552bc96a30549d05fceeb9d692fd9d1d/doc/nyan/aoe2_nyan_tree.svg)\n```\n\n----------------------------------------\n\nTITLE: Shepherd Food Gathering Rate\nDESCRIPTION: Defines the rate at which shepherd units collect food from animals\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/rates.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n10 food / 12 seconds\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake\nDESCRIPTION: CMake directive that adds Python module files to the build system. Specifically adds __init__.py and internal_name_lookups.py modules.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/conversion/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tinternal_name_lookups.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Modules in CMake\nDESCRIPTION: Registers three Python modules (__init__.py, cutter.py, and rename.py) to be included in the build system. These files will be processed as standard Python modules.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/export/interface/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tcutter.py\n\trename.py\n)\n```\n\n----------------------------------------\n\nTITLE: Box Formation Subformation Arrangement in AoE2\nDESCRIPTION: ASCII diagram illustrating the box formation type, where units form a square with weaker units in the center and stronger units on the outside. Numbers 1-4 represent different subformation types and their positions.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n...............\n.1.1.1.1.1.1.1.\n.1.2.2.2.2.2.1.\n.1.2.3.3.3.2.1.\n.1.2.3.4.3.2.1.\n.1.2.3.3.3.2.1.\n.1.2.2.2.2.2.1.\n.1.1.1.1.1.1.1.\n...............\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Modules\nDESCRIPTION: Registers Cython modules for compilation in the build system, specifically including the versions.pyx module\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/versions/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cython_modules(\n\tversions.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Adding source files to libopenage using CMake\nDESCRIPTION: This CMake command adds the listed C++ source files to the `libopenage` library. CMake will compile and link these files to create the library. The source files include activity.cpp, idle.cpp, move.cpp, and types.cpp, which likely contain the implementation of various game logic components within the openage project.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/system/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n    activity.cpp\n    idle.cpp\n    move.cpp\n    types.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Environment-Specific Installation Logic - CMake\nDESCRIPTION: This segment manages the packaging process specifically for Microsoft Visual Studio (MSVC) environments. It includes commands for configuring files and installing required utilities.\nSOURCE: https://github.com/sfttech/openage/blob/master/packaging/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n\tset(vcpkg_dir \"${_VCPKG_INSTALLED_DIR}/${VCPKG_TARGET_TRIPLET}\")\n\tfind_program(windeployqt windeployqt.exe)\n\n\tconfigure_file(\n\t\t\"${BUILDSYSTEM_DIR}/templates/ForwardVariables.cmake.in\"\n\t\t\"${CMAKE_CURRENT_BINARY_DIR}/ForwardVariables.cmake\"\n\t)\n\tinstall(SCRIPT \"${CMAKE_CURRENT_BINARY_DIR}/ForwardVariables.cmake\")\n\tinstall(SCRIPT \"${BUILDSYSTEM_DIR}/scripts/EmbedWinDependencies.cmake\")\n\tforeach(_UTILITY ${REQUIRED_UTILITIES})\n\t\tinstall(FILES \"${${_UTILITY}_EXECUTABLE}\" DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\n\tendforeach()\n\tconfigure_file(\n\t\t\"${BUILDSYSTEM_DIR}/templates/openage.bat.in\"\n\t\t\"${CMAKE_CURRENT_BINARY_DIR}/openage.bat\"\n\t)\n\tinstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/openage.bat\" DESTINATION \".\")\n\tinclude(InstallRequiredSystemLibraries)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for libopenage\nDESCRIPTION: Configures private include directories for the libopenage target, specifically adding the current binary directory to the include path using CMake's target_include_directories command.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/coord/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(libopenage\n\tPRIVATE\n\t\t${CMAKE_CURRENT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Research Action Struct in C\nDESCRIPTION: Defines a C struct for the research action (65). It includes action identifier, building ID, player number, technology ID, and a constant value.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nstruct research {\n  uint8_t action_identifier;\n  uint32_t building_id;\n  uint8_t player_number;\n  uint16_t technology_id;\n  uint32_t constant; // = 0xFFFFFFFF\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CPack Generators - CMake\nDESCRIPTION: This snippet specifies which package generators to use with CPack, allowing the project to be packaged in different formats. Here, 'NSIS' and '7Z' are defined as the selected generators.\nSOURCE: https://github.com/sfttech/openage/blob/master/packaging/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(CPACK_GENERATOR \"NSIS\" \"7Z\")\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Subdirectory - CMake\nDESCRIPTION: This snippet includes the CMake command to add the camera subdirectory to the project. It helps in organizing the project's structure by including the camera module as a separate subcomponent.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/input/controller/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"camera\")\n```\n\n----------------------------------------\n\nTITLE: Configuring openage for debugging with GDB\nDESCRIPTION: Uses the configure script to set up the project for debugging with GDB. This command sets the build mode to debug and specifies gcc as the compiler.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/debug.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./configure --mode=debug --compiler=gcc\n```\n\n----------------------------------------\n\nTITLE: Local Modpack Identifier Format Example\nDESCRIPTION: Demonstrates the identifier format for modpacks not installed from a repository, using 'local' as the repository name.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/modpacks.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nmodname@local\n```\n\n----------------------------------------\n\nTITLE: Installing GCC Compiler on FreeBSD for OpenAGE\nDESCRIPTION: This command installs the GCC compiler on FreeBSD. While Clang is the base compiler, users can opt for GCC version 10 or higher as an alternative compiler for OpenAGE.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/freebsd.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo pkg install gcc\n```\n\n----------------------------------------\n\nTITLE: Adding source files to libopenage library using CMake\nDESCRIPTION: This CMake command `add_sources` is used to include the specified C++ source files in the libopenage library. The source files binding_context.cpp, binding.cpp, and controller.cpp are added to the build.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/input/controller/game/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n    binding_context.cpp\n    binding.cpp\n    controller.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SMP Header Structure in Python\nDESCRIPTION: Python struct format string for parsing the SMP file header, corresponding to the C++ struct definition.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< 4s 7I 32s\")\n```\n\n----------------------------------------\n\nTITLE: Adding Qt-SDL Integration Source Files in CMake\nDESCRIPTION: This snippet adds source files for Qt-SDL integration to the QT_SDL_SOURCES list. These files include implementations for GUI items, list models, property maps, and singleton items.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/gui/guisys/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND QT_SDL_SOURCES\n\t${CMAKE_CURRENT_SOURCE_DIR}/link/gui_item.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/link/gui_list_model.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/link/gui_property_map_impl.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/link/gui_singleton_item.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage in CMake\nDESCRIPTION: A CMake function call that adds multiple C++ source files to the libopenage target. These files include implementations for colors, compilation utilities, containers, mathematical functions, file operations, and various utility classes.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/util/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tcolor.cpp\n\tcompiler.cpp\n\tconstinit_vector.cpp\n\tenum.cpp\n\tenum_test.cpp\n\texternalprofiler.cpp\n\texternalsstream.cpp\n\tfile.cpp\n\tfds.cpp\n\tfixed_point.cpp\n\tfixed_point_test.cpp\n\tfps.cpp\n\thash.cpp\n\thash_test.cpp\n\tinit.cpp\n\tlanguage.cpp\n\tmatrix.cpp\n\tmatrix_test.cpp\n\tmisc.cpp\n\tmisc_test.cpp\n\tos.cpp\n\tpath.cpp\n\tquaternion.cpp\n\tquaternion_test.cpp\n\trepr.cpp\n\tstringformatter.cpp\n\tstrings.cpp\n\tsubprocess.cpp\n\tthread_id.cpp\n\ttimer.cpp\n\ttiming.cpp\n\tunicode.cpp\n\tvector.cpp\n\tvector_test.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Keywords for Git Version in Gentoo\nDESCRIPTION: This snippet shows how to add the necessary package keywords to install the git version of openage in Gentoo. It should be added to the /etc/portage/package.keywords file.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/gentoo.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n=games-strategy/openage-9999::sft **\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules - Python\nDESCRIPTION: This snippet utilizes the `add_py_modules` function to register a list of Python module files.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/util/filelike/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nadd_py_modules(\\n\\t__init__.py\\n\\tabstract.py\\n\\tfifo.py\\n\\treadonly.py\\n\\tstream.py\\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Game-Specific Converter Subdirectories in CMake\nDESCRIPTION: Adds subdirectories for game-specific converter code. Includes support for Age of Conquerors (aoc), Rise of Rome (ror), and Star Wars Galactic Battlegrounds Clone Campaigns (swgbcc).\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/entity_object/conversion/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(aoc)\nadd_subdirectory(ror)\nadd_subdirectory(swgbcc)\n```\n\n----------------------------------------\n\nTITLE: Defining Buy Action Structure in Ruby\nDESCRIPTION: Defines the data structure for buying resources at the market. It includes action identifier, player number, resource type, amount, and market ID.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/12-market.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef Buy\n  int8 :action_identifier\n  int8 :player_number\n  int8 :resource_type\n  int8 :amount\n  int32 :market_id\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Townbell Action Structure in Ruby\nDESCRIPTION: Defines the data structure for ringing the town bell. It includes fields for action identifier, building ID, and active status.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/11-buildings.md#2025-04-21_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef Townbell\n  int8 :action_identifier\n  byte24 :zero\n  int32 :building_id\n  int8 :active\n  byte24 :zero2\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library in CMake\nDESCRIPTION: This CMake command adds multiple source files to the libopenage target. The files include various parsing modules for different game asset types, such as blendmasks, palettes, sprites, terrain, and textures.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/resources/parser/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n    common.cpp\n    parse_blendmask.cpp\n    parse_blendtable.cpp\n    parse_palette.cpp\n    parse_sprite.cpp\n    parse_terrain.cpp\n    parse_texture.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Sources to CMake Library\nDESCRIPTION: This snippet uses CMake to add source files to the library 'libopenage'. It includes the source file 'presenter.cpp'. This is typically used to specify which files are part of the 'libopenage' library target within a CMake project setup.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/presenter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tpresenter.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Generating PXD Files\nDESCRIPTION: This snippet uses the `pxdgen` tool to generate `.pxd` files from a header file. It processes `tests.h`. The tool likely requires a suitable development environment with `pxdgen` available.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/main/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxdgen(\n\ttests.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Modules in CMake Configuration\nDESCRIPTION: Adds Cython module (cvar.pyx) to the build system using the add_cython_modules command. Cython modules will be compiled to native code during the build process.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/cvar/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cython_modules(\n\tcvar.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Building Requirements for Linux Systems\nDESCRIPTION: Command for installing the required dependencies for building openage from source on Debian/Ubuntu Linux systems.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/editor/scripting.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Debian/Ubuntu (packages are for Debian 8 and Ubuntu 15.10, adjust for your distro)\napt-get install cmake clang-3.5 libfreetype6-dev libharfbuzz-dev libepoxy-dev\\\n    libsdl2-dev libsdl2-image-dev python3-dev libopus-dev libfontconfig1-dev\\\n    libcairo2-dev\n```\n\n----------------------------------------\n\nTITLE: Entries Attribute Example in OpenAge Palette Format\nDESCRIPTION: Shows how to define the number of color values in the palette. Exactly one entries attribute must be defined in each palette file.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/palette_format_spec.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nentries 256\n```\n\n----------------------------------------\n\nTITLE: Installing Clang Compiler on Arch Linux\nDESCRIPTION: This command installs the Clang compiler on Arch Linux. It's an alternative option for installing a compiler needed for the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/arch_linux.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S --needed clang\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to Build\nDESCRIPTION: CMake commands to include 'event' and 'condition' subdirectories in the build process.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/activity/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"event\")\nadd_subdirectory(\"condition\")\n```\n\n----------------------------------------\n\nTITLE: Adding SFT Overlay using Layman in Gentoo\nDESCRIPTION: This command adds the SFT overlay to Gentoo using the Layman tool, which is necessary for installing openage.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/gentoo.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nlayman -a sft\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Modules and Subdirectories in CMake\nDESCRIPTION: This CMake script configures Python modules and organizes the project structure. It first adds core Python modules (__init__.py and main.py), then adds several subdirectories following a domain-driven design pattern with entity objects, processors, services, tools, and value objects.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tmain.py\n)\n\nadd_subdirectory(entity_object)\nadd_subdirectory(processor)\nadd_subdirectory(service)\nadd_subdirectory(tool)\nadd_subdirectory(value_object)\n```\n\n----------------------------------------\n\nTITLE: Adding LZXD Source Files to libopenage Library in CMake\nDESCRIPTION: CMake directive to add the LZXD compression implementation file (lzxd.cpp) to the libopenage library. This makes the LZXD compression functionality available within the library.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/util/compress/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\tlzxd.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules\nDESCRIPTION: This function likely registers or configures a set of Python modules to be used within a larger software project. The modules listed include both core and testing components. There are no explicit input parameters or return values mentioned, but the list indicates file names typically containing Python code. The usage of this function is constrained by dependencies required to handle Python module registration or configuration.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/util/fslike/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tabstract.py\n\tdirectory.py\n\tfilecollection.py\n\tpath.py\n\ttest.py\n\tunion.py\n\twrapper.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake\nDESCRIPTION: Adds Python modules (__init__.py and demo.py) to the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/export/opus/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tdemo.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library in CMake\nDESCRIPTION: Adds a list of C++ source files to the libopenage library target. The files appear to be related to rendering, models, and mesh functionality. This is typically part of a CMake build system configuration.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/stages/terrain/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    chunk.cpp\n\tmesh.cpp\n\tmodel.cpp\n\trender_entity.cpp\n\trender_stage.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Modpack Definition File Header Comment\nDESCRIPTION: Recommended comment header for modpack definition files to help others identify the file format and find the specification document.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/modpack_definition_file.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# openage modpack definition file\n```\n\n----------------------------------------\n\nTITLE: Generating Cython Headers with pxdgen in CMake\nDESCRIPTION: This snippet uses a custom CMake command 'pxdgen' to generate Cython header files. It processes filelike.h and python.h, likely creating corresponding .pxd files for Cython integration.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/util/filelike/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxdgen(\n\tfilelike.h\n\tpython.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Private Qt GUI Implementation Source Files in CMake\nDESCRIPTION: This snippet adds private implementation source files for various Qt GUI components to the QTGUI_SOURCES list. It includes files for application, context setup, engine, input, renderer, and subtree implementations.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/gui/guisys/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND QTGUI_SOURCES\n\t${CMAKE_CURRENT_SOURCE_DIR}/private/gui_application_impl.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/private/gui_ctx_setup.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/private/gui_engine_impl.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/private/gui_input_impl.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/private/gui_renderer_impl.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/private/gui_rendering_setup_routines.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/private/gui_subtree_impl.cpp\n\t${CMAKE_CURRENT_SOURCE_DIR}/private/opengl_debug_logger.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: SLD Damage Mask Header Structure - C++\nDESCRIPTION: C++ struct definition for the SLD damage mask layer header containing flag1 and unknown1 fields. Uses two uint8 fields for a total size of 2 bytes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nstruct sld_mask_header {\n  uint8 flag1;\n  uint8 unknown1;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Modules to Build\nDESCRIPTION: Configures Cython modules for compilation by specifying .pyx source files to be processed. Includes renderer_cpp.pyx and tests.pyx modules.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/renderer/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cython_modules(\n\trenderer_cpp.pyx\n\ttests.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Modules in OpenAge Project\nDESCRIPTION: This snippet adds a Cython module named 'demo.pyx' to the project. It uses a custom CMake function 'add_cython_modules' to include the Cython file in the build process.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/event/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cython_modules(\n\tdemo.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Documentation Generation with Doxygen\nDESCRIPTION: Configures Doxygen documentation generation for the project, including key source directories and readme files.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# documentation generation\n\n# create documentation\ndoxygen_configure(libopenage/ openage/ doc/ README.md)\n```\n\n----------------------------------------\n\nTITLE: Initial Changelog Entry in Markdown\nDESCRIPTION: Markdown formatted changelog entry for OpenAge v0.1.0 release, following Keep a Changelog conventions. Documents the initial release containing features from AoE1, AoE2 and SWGB.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/nyan_api/v0.1.0.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [0.1.0] - 2019-05-20\nAll notable changes for version [v0.1.0] are documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Added\nInitial draft. Contains 99% of the features from AoE1, AoE2 and SWGB.\n\n## Reference visualization\n\n* [Gamedata](https://github.com/SFTtech/openage/blob/317947efc7219c5bc049a8b6c20fb79ce75f8323/doc/nyan/aoe2_nyan_tree.svg)\n```\n\n----------------------------------------\n\nTITLE: Force Pushing Updated Branch in Git\nDESCRIPTION: Commands for force pushing changes after rebasing or amending commits. This is necessary when you've modified commit history that was previously pushed.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/contributing.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin +my-awesome-feature\n# or\ngit push origin -f my-awesome-feature\n# or\ngit push origin --force my-awesome-feature\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules\nDESCRIPTION: Registers Python modules for inclusion in the project, specifically adding the __init__.py module\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/versions/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n    __init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: Military Scoring Table in Markdown\nDESCRIPTION: Markdown table showing point allocations for military achievements including kills, building destruction, generalship, and unit bonuses.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/scoring.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTask                           | Score\n-------------------------------|-----------------------------------------------------------------\nKills                          | 0.5 points per unit\nBuildings destroyed            | 1 point per building\nGeneralship                    | number of kills minus number of losses (value must be positive)\nMost military units and towers | 25 point bonus\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Modules Configuration in CMake\nDESCRIPTION: CMake function call to compile multiple Cython source files (.pyx) including translation, testing, and setup modules\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/cppinterface/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cython_modules(\n\texctranslate.pyx\n\texctranslate_tests.pyx\n\tpyobject.pyx\n\tsetup_checker.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to Project\nDESCRIPTION: Configures additional subdirectories for the project using CMake's add_subdirectory function. Includes 'demo' and 'legacy' subdirectories for further module organization.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/pathfinding/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"demo\")\nadd_subdirectory(\"legacy\")\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Modules in CMake\nDESCRIPTION: This snippet uses the add_cython_modules function to include a Cython module named 'tests.pyx' in the project build.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/gamestate/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cython_modules(\n\ttests.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Including Directories for Opus Encoding Python Extension in CMake\nDESCRIPTION: Adds the Ogg and Opus include directories to the 'opusenc.pyx' Python extension.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/export/opus/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\npyext_include_directories(\n\topusenc.pyx\n\t${OGG_INCLUDE_DIRS}\n\t${OPUS_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Manual Asset Conversion Command\nDESCRIPTION: Python command to manually trigger the conversion of game assets. Requires specifying the path to the original game installation directory.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media_convert.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m openage convert --force --source-dir /path/to/game/install\n```\n\n----------------------------------------\n\nTITLE: Adding Test Sources to libopenage Library\nDESCRIPTION: CMake command that adds tests.cpp source file to the libopenage library build configuration. Uses add_sources function to include the source file in the project build.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/datastructure/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\ttests.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library in CMake\nDESCRIPTION: This CMake directive adds three C++ source files to the libopenage library build. The files are related to object management and rendering functionality, including object.cpp, render_entity.cpp, and render_stage.cpp.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/stages/world/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tobject.cpp\n\trender_entity.cpp\n\trender_stage.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining AttributeRate Class in Python\nDESCRIPTION: Class for storing per-second rates of attributes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nAttributeRate(Object):\n    type   : Attribute\n    rate   : float\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Modules and Subdirectories in CMake\nDESCRIPTION: Adds Python initialization module and sets up multiple subdirectories for different game data converters. The configuration uses CMake's add_py_modules for Python files and add_subdirectory for organizing converter components.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/processor/conversion/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n)\n\nadd_subdirectory(aoc)\nadd_subdirectory(aoc_demo)\nadd_subdirectory(de1)\nadd_subdirectory(de2)\nadd_subdirectory(hd)\nadd_subdirectory(ror)\nadd_subdirectory(swgbcc)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to OpenAge Library Target\nDESCRIPTION: Adds the generated compiletime.cpp file and versions.cpp to the libopenage target. This makes these files part of the library build process.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/versions/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\t${CMAKE_CURRENT_BINARY_DIR}/compiletime.cpp\n\tversions.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Documenting Legal Regex Patterns in Python\nDESCRIPTION: Reference to Python regular expressions used for license compliance checking, located in the buildsystem/codecompliance/legal.py file.\nSOURCE: https://github.com/sfttech/openage/blob/master/copying.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nFor even more details, see the [regular expressions](buildsystem/codecompliance/legal.py).\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Modules in CMake\nDESCRIPTION: Configures Cython modules for handling SLD, SLP, SMP and SMX file formats which are performance-critical game data formats.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/read/media/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cython_modules(\n\tsld.pyx\n\tslp.pyx\n\tsmp.pyx\n\tsmx.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Git Command Reference\nDESCRIPTION: Git comparison command showing changes between versions v0.5.1 and v0.5.2\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/engine/v0.5.2.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/SFTtech/openage/compare/v0.5.1...v0.5.2\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Modules in CMake\nDESCRIPTION: This snippet uses a custom CMake function to add Cython modules to the project. It specifies two Cython files to be included: main_cpp.pyx and tests.pyx.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/main/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cython_modules(\n\tmain_cpp.pyx\n\ttests.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory with CMake\nDESCRIPTION: This snippet integrates another directory into the current CMake project using `add_subdirectory`. It adds the `demo` directory, which needs to contain its own CMakeLists.txt for the build system to configure it properly.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/main/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"demo\")\n```\n\n----------------------------------------\n\nTITLE: TechType Base Class for Technology Classification\nDESCRIPTION: Base class for classifying different types of technologies, used for filtering and categorization.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_162\n\nLANGUAGE: python\nCODE:\n```\nTechType(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Header Files in CMake\nDESCRIPTION: Adds Cython declaration files (.pxd) for sharing type information between Cython modules.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/read/media/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_pxds(\n\t__init__.pxd\n)\n```\n\n----------------------------------------\n\nTITLE: Including Demo Subdirectory\nDESCRIPTION: Adds the demo subdirectory to the build process, allowing for compilation of demo-related components.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/event/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"demo\")\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules and Subdirectories in CMake for OpenAge\nDESCRIPTION: This CMake snippet adds the __init__.py module and includes the 'conversion' and 'export' subdirectories in the build process. It sets up the basic structure for the Python components of the OpenAge project.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/processor/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n)\n\nadd_subdirectory(conversion)\nadd_subdirectory(export)\n```\n\n----------------------------------------\n\nTITLE: Defining Townbell Action Struct in C\nDESCRIPTION: Defines a C struct for the townbell action (7f). It includes action identifier, building ID, and active flag.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_32\n\nLANGUAGE: c\nCODE:\n```\nstruct townbell {\n  uint8_t action_identifier;\n  uint32_t building_id;\n  uint8_t active;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Subdirectories in CMake\nDESCRIPTION: Adds subdirectories for different asset types including logo, shaders, tests, and textures to the build system.\nSOURCE: https://github.com/sfttech/openage/blob/master/assets/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(logo/)\nadd_subdirectory(shaders/)\nadd_subdirectory(test/)\nadd_subdirectory(textures/)\n```\n\n----------------------------------------\n\nTITLE: Defining End Node in Python\nDESCRIPTION: Terminal node class for activity graphs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nEnd(Node):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Implementing AbilityProperty Base Class\nDESCRIPTION: Defines the base class for all ability properties, serving as a generalization object.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nAbilityProperty(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Registering Python Modules in CMake for Openage Converter\nDESCRIPTION: Registers Python modules that are part of the openage converter system. These modules handle various conversion tasks such as sprites, sounds, terrain, and modpack creation.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/entity_object/conversion/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tcombined_sprite.py\n\tcombined_sound.py\n\tcombined_terrain.py\n\tconverter_object.py\n\tmodpack.py\n\tstringresource.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in Build Configuration\nDESCRIPTION: Configures Python module inclusion using add_py_modules() function, adding __init__.py and tests.py modules to the project\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/log/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\ttests.py\n)\n```\n\n----------------------------------------\n\nTITLE: Using Verbose Make Output\nDESCRIPTION: Command to show detailed compiler invocations during the build process. This is useful for debugging build issues by showing the exact commands being executed.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/building.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake VERBOSE=1\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules to OpenAge Build\nDESCRIPTION: CMake command that registers Python modules to be included in the build process. Specifies core Python files related to interface, terminal colors, terrain handling, and texture management.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/read/media/hardcoded/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tinterface.py\n\ttermcolors.py\n\tterrain_tile_size.py\n\ttexture.py\n)\n```\n\n----------------------------------------\n\nTITLE: Remote File Access with Tramp\nDESCRIPTION: Example of accessing remote files using Tramp syntax in Emacs\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ide/emacs.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/ssh:host:path/to/file\n```\n\n----------------------------------------\n\nTITLE: Generating Cython Header Files with pxdgen in CMake\nDESCRIPTION: This snippet lists header files to be processed by the pxdgen tool, which likely generates Cython .pxd interface files from C++ headers. These header files correspond to the C++ source files listed in the add_sources command.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/pyinterface/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxdgen(\n\texctranslate.h\n\texctranslate_tests.h\n\tdefs.h\n\tfunctional.h\n\thacks.h\n\tpyexception.h\n\tpyobject.h\n\tsetup.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Cython Definition Files in CMake\nDESCRIPTION: CMake function call to include Cython definition files (.pxd) that contain type definitions\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/cppinterface/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_pxds(\n\ttypedefs.pxd\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Nyan Test Files with CMake\nDESCRIPTION: CMake command that installs all files with .nyan extension from the current directory to the test/nyan subdirectory of the asset directory. This ensures that test assets are properly available to the application at runtime.\nSOURCE: https://github.com/sfttech/openage/blob/master/assets/test/nyan/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY \".\"\n\tDESTINATION \"${ASSET_DIR}/test/nyan\"\n\tFILES_MATCHING PATTERN \"*.nyan\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Game Subdirectory - CMake\nDESCRIPTION: This snippet consists of the CMake command to include the game subdirectory. It is essential for organizing the game's code and resources as its own component within the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/input/controller/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"game\")\n```\n\n----------------------------------------\n\nTITLE: Generating Cython Bindings\nDESCRIPTION: CMake command to generate Cython bindings (.pxd files) from C++ header files using pxdgen tool.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/demo/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxdgen(\n\ttests.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake for OpenAge\nDESCRIPTION: CMake configuration script that lists and adds Python modules for the project, including various subprocessor modules related to game mechanics, abilities, and upgrades\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/processor/conversion/aoc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tability_subprocessor.py\n\tauxiliary_subprocessor.py\n\tciv_subprocessor.py\n\teffect_subprocessor.py\n\tmedia_subprocessor.py\n\tmodifier_subprocessor.py\n\tmodpack_subprocessor.py\n\tnyan_subprocessor.py\n\tpregen_processor.py\n\tprocessor.py\n\ttech_subprocessor.py\n\tupgrade_ability_subprocessor.py\n\tupgrade_attribute_subprocessor.py\n\tupgrade_effect_subprocessor.py\n\tupgrade_resource_subprocessor.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cython Module in CMake\nDESCRIPTION: Adds a single Cython module (visgrep.pyx) to be compiled during the build process. The .pyx extension indicates this is a Cython source file that will be compiled to C/C++ before being built into a Python extension.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/export/interface/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cython_modules(\n\tvisgrep.pyx\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Modules in CMake\nDESCRIPTION: Adds Python modules to the build system including initialization and forward reference modules\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/conversion/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tforward_ref.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to CMake Library Target\nDESCRIPTION: Configures CMake to include specific source files for the libopenage library compilation. Adds presenter.cpp to the build process for the library target.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/main/demo/presenter/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\tpresenter.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake for OpenAge\nDESCRIPTION: This CMake command adds two Python modules to the project: '__init__.py' and 'internal_nyan_names.py'. It is likely part of a larger CMake configuration for managing Python dependencies in the OpenAge project.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/conversion/hd/fgt/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tinternal_nyan_names.py\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Cython/PXD Header Definitions\nDESCRIPTION: Uses pxdgen to generate Cython header definitions for logging-related header files, enabling Python interoperability and type information.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/log/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxdgen(\n\tlevel.h\n\tlog.h\n\tlogsource.h\n\tnamed_logsource.h\n\tmessage.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Subdirectories in CMake for openage\nDESCRIPTION: This CMake code adds multiple subdirectories to the build process, including nyan, QML, shaders, and textures. Each subdirectory likely contains specific resources or build configurations for the openage project.\nSOURCE: https://github.com/sfttech/openage/blob/master/assets/test/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(nyan/)\nadd_subdirectory(qml/)\nadd_subdirectory(shaders/)\nadd_subdirectory(textures/)\n```\n\n----------------------------------------\n\nTITLE: Including CPack Module - CMake\nDESCRIPTION: This final line includes the CPack module, which triggers the packaging process using the previously defined settings. It's crucial for the integration of CPack with the build system.\nSOURCE: https://github.com/sfttech/openage/blob/master/packaging/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CPack)\n```\n\n----------------------------------------\n\nTITLE: Installing toml11 from AUR using Yay\nDESCRIPTION: This command installs the toml11 package from the Arch User Repository (AUR) using the Yay package manager.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/arch_linux.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyay -S toml11\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Modules in CMake\nDESCRIPTION: CMake configuration that adds multiple Python module files to the build system. The modules appear to be related to game processing, including civilizations, technologies, abilities, and various upgrade systems.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/processor/conversion/ror/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tability_subprocessor.py\n\tauxiliary_subprocessor.py\n\tciv_subprocessor.py\n\tmedia_subprocessor.py\n\tmodpack_subprocessor.py\n\tnyan_subprocessor.py\n\tpregen_subprocessor.py\n\tprocessor.py\n\ttech_subprocessor.py\n\tupgrade_ability_subprocessor.py\n\tupgrade_attribute_subprocessor.py\n\tupgrade_resource_subprocessor.py\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Formation Action Struct in C\nDESCRIPTION: Defines a C struct for the formation action (17). It includes action identifier, selection count, player number, formation type, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nstruct formation {\n  uint8_t action_identifier;\n  uint8_t selection_count;\n  uint8_t player_number;\n  uint8_t unknown; // = 0x00\n  uint8_t formation_type;\n  uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Drop Relic Action Struct in C\nDESCRIPTION: Defines a C struct for the drop relic action (7e). It includes action identifier and monk ID.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_31\n\nLANGUAGE: c\nCODE:\n```\nstruct drop_relic {\n  uint8_t action_identifier;\n  uint32_t monk_id;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Static Content Directories\nDESCRIPTION: Adds subdirectories for static content, including assets, distribution files, and configuration files.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# static content\nadd_subdirectory(assets/)\nadd_subdirectory(dist/)\nadd_subdirectory(cfg/)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules via CMake Function\nDESCRIPTION: CMake function call that adds Python module files (__init__.py and internal_nyan_names.py) to the build system. This is part of the OpenAge project's build configuration.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/conversion/hd/ak/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tinternal_nyan_names.py\n)\n```\n\n----------------------------------------\n\nTITLE: Including Subdirectories in CMake Build Process\nDESCRIPTION: This snippet adds four subdirectories to the CMake build process using the add_subdirectory command. The included directories are animation, assets, parser, and terrain, which likely contain additional source files or CMake configurations.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/resources/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(animation/)\nadd_subdirectory(assets/)\nadd_subdirectory(parser/)\nadd_subdirectory(terrain/)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake\nDESCRIPTION: CMake command that adds Python source files as modules to the build system. The command includes four Python files: __init__.py, media_subprocessor.py, modpack_subprocessor.py, and processor.py.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/processor/conversion/de1/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tmedia_subprocessor.py\n    modpack_subprocessor.py\n\tprocessor.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake for OpenAge\nDESCRIPTION: This CMake function call adds specific Python modules to the OpenAge project. It includes the main __init__.py file, a modpack subprocessor, and a general processor module.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/processor/conversion/aoc_demo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n    modpack_subprocessor.py\n\tprocessor.py\n)\n```\n\n----------------------------------------\n\nTITLE: Installing QML Directory in CMake\nDESCRIPTION: Configures the installation of QML files to the specified asset directory.\nSOURCE: https://github.com/sfttech/openage/blob/master/assets/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \"qml\"\n\tDESTINATION \"${ASSET_DIR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Python Bindings Header\nDESCRIPTION: Specifies main.h header file for Python binding generation using the pxdgen tool, which creates Cython interface declarations.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/event/demo/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\npxdgen(\n\tmain.h\n)\n```\n\n----------------------------------------\n\nTITLE: Python Path Configuration Fix\nDESCRIPTION: Fix to ensure correct Python path configuration by adding environment path specification\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/engine/v0.3.0-alpha.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin/env python3\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Modules and Subdirectories in CMake\nDESCRIPTION: Adds Python modules to the build system and includes multiple subdirectories for processing. The configuration specifies initialization and media cache loading modules, along with interface, opus, and png component directories.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/export/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tload_media_cache.py\n)\n\nadd_subdirectory(interface)\nadd_subdirectory(opus)\nadd_subdirectory(png)\n```\n\n----------------------------------------\n\nTITLE: Implementing FlatAttributeChangeIncrease Resistance Class in Python\nDESCRIPTION: Specialization of FlatAttributeChange that specifically handles resistance to attribute increase effects.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nFlatAttributeChangeIncrease(FlatAttributeChange):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake\nDESCRIPTION: CMake function call to include Python modules, specifically the package initialization and setup files\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/cppinterface/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tsetup.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Time-related Source Files to libopenage Library in CMake\nDESCRIPTION: This CMake command adds three source files (clock.cpp, time.cpp, and time_loop.cpp) to the libopenage target. These files likely contain implementations for time-related functionalities in the openage project.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/time/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n    clock.cpp\n    time.cpp\n    time_loop.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules to Build System\nDESCRIPTION: The snippet adds several Python modules related to different subprocessors used in the openage project to the build system. Modules such as ability_subprocessor.py and civ_subprocessor.py are included. The macro add_py_modules is used to specify which files should be incorporated into the build. Each filename represents a specific component for processing tasks such as media or technology configuration within the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/processor/conversion/de2/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: unknown\nCODE:\n```\nadd_py_modules(\n\tability_subprocessor.py\n\t__init__.py\n\tciv_subprocessor.py\n\tmedia_subprocessor.py\n\tmodpack_subprocessor.py\n\tnyan_subprocessor.py\n\tprocessor.py\n\ttech_subprocessor.py\n\tupgrade_attribute_subprocessor.py\n\tupgrade_resource_subprocessor.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules with CMake\nDESCRIPTION: CMake directive that adds two Python modules to the build system: __init__.py for package initialization and internal_nyan_names.py for internal nyan name handling.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/conversion/aoc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tinternal_nyan_names.py\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Desktop Entry File with CMake\nDESCRIPTION: Configures the installation of the openage.desktop file to the standard Linux applications directory /share/applications. This allows the application to appear in desktop environments' application menus.\nSOURCE: https://github.com/sfttech/openage/blob/master/dist/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n\tFILES \"openage.desktop\"\n\tDESTINATION \"share/applications\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake for openage\nDESCRIPTION: Uses the add_py_modules CMake function to include __init__.py and internal_nyan_names.py in the project build. This ensures these Python modules are properly integrated into the openage project structure.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/conversion/ror/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tinternal_nyan_names.py\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SLD Layer Length Structure in Python\nDESCRIPTION: This line defines the format string for parsing the content length field of an SLD layer using Python's struct module.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/sld-files.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< I\")\n```\n\n----------------------------------------\n\nTITLE: Defining Reload Time Modifier in Python\nDESCRIPTION: The 'ReloadTime' modifier changes the reload time for specific abilities in the game, allowing for tactical adjustments in combat or ability usage.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nReloadTime(Modifier):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining AttributeChangeType Class in Python\nDESCRIPTION: Base class for attribute change type matching.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nAttributeChangeType(Object):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake for OpenAge\nDESCRIPTION: This CMake function call adds multiple Python modules to the project build. It includes core Python files such as initialization, code generation, coordinate handling, testing, listing, and the main entry point.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/codegen/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tcodegen.py\n\tcoord.py\n\tcpp_testlist.py\n\tlisting.py\n\tmain.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library\nDESCRIPTION: CMake command that adds multiple C++ source files to the libopenage library target. These files appear to be related to activity management, task systems, and event handling.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/activity/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    activity.cpp\n    end_node.cpp\n    node.cpp\n    start_node.cpp\n    task_node.cpp\n    task_system_node.cpp\n    tests.cpp\n    types.cpp\n    xor_event_gate.cpp\n    xor_gate.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing GLSL Shader Files for Pathfinding in CMake\nDESCRIPTION: This CMake command copies all GLSL shader files from the current directory to the pathfinding shaders test directory in the OpenAge asset structure. It uses pattern matching to ensure only files with the .glsl extension are installed.\nSOURCE: https://github.com/sfttech/openage/blob/master/assets/test/shaders/pathfinding/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \".\"\n\tDESTINATION \"${ASSET_DIR}/test/shaders/pathfinding\"\n\tFILES_MATCHING PATTERN \"*.glsl\"\n)\n```\n\n----------------------------------------\n\nTITLE: Python Debug Configuration\nDESCRIPTION: Fix for missing development mode configuration in Python settings\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/engine/v0.3.0-alpha.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDEVMODE = True\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake Configuration\nDESCRIPTION: CMake function call that adds three Python modules to the build system: __init__.py, import_tree.py, and nyan_structs.py. This is part of the OpenAge project's build configuration.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/nyan/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\timport_tree.py\n\tnyan_structs.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAge Rendering Engine Source Files with CMake\nDESCRIPTION: This CMake command adds source files to the 'libopenage' target. The files cover various aspects of a rendering engine including buffer management, shaders, textures, geometry, and window handling.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/renderer/opengl/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\tbuffer.cpp\n\tcontext.cpp\n\tdebug.cpp\n\terror.cpp\n\tframebuffer.cpp\n\tgeometry.cpp\n\trender_pass.cpp\n\trender_target.cpp\n\trenderer.cpp\n\tshader.cpp\n    shader_data.cpp\n\tshader_program.cpp\n\tsimple_object.cpp\n\ttexture.cpp\n\ttexture_array.cpp\n    uniform_buffer.cpp\n\tuniform_input.cpp\n\tutil.cpp\n\tvertex_array.cpp\n\twindow.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Test Textures with CMake\nDESCRIPTION: CMake installation command that copies all files from the current directory to a test textures subdirectory within the asset directory. The pattern exclusion prevents copying of the CMakeLists.txt file itself.\nSOURCE: https://github.com/sfttech/openage/blob/master/assets/test/textures/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(DIRECTORY \".\"\n\tDESTINATION \"${ASSET_DIR}/test/textures\"\n\tPATTERN \"CMakeLists.txt\" EXCLUDE\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library\nDESCRIPTION: CMake directive that adds curve_types.cpp and container.cpp source files to the libopenage library build target. This is part of the build configuration for the openage project.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/curve/tests/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n\tcurve_types.cpp\n\tcontainer.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SMP Frame Offset Structure in C++\nDESCRIPTION: C++ struct definition for SMP frame offsets, which store the offset to each frame within the SMP file.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nstruct smp_frame_offset {\n  uint32 offset;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Stop Action Struct in C\nDESCRIPTION: Defines a C struct for the stop action (01). It includes action identifier, selection count, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstruct stop {\n    uint8_t action_identifier;\n    uint8_t selection_count;\n    uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake\nDESCRIPTION: This snippet uses the add_py_modules function to include a Python module named '__init__.py' in the project build.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/gamestate/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: Including Commands Subdirectory\nDESCRIPTION: CMake command to include and process the commands subdirectory as part of the build configuration.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/component/internal/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(commands/)\n```\n\n----------------------------------------\n\nTITLE: Installing QML Assets with CMake in openage\nDESCRIPTION: This CMake command installs all QML files from the current directory to a specified asset directory. It uses a pattern matching to select only files with the .qml extension.\nSOURCE: https://github.com/sfttech/openage/blob/master/assets/test/qml/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY \".\"\n\tDESTINATION \"${ASSET_DIR}/test/qml\"\n\tFILES_MATCHING PATTERN \"*.qml\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library\nDESCRIPTION: CMake command to add C++ source files (demo_0.cpp and tests.cpp) to the libopenage library target.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/demo/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    demo_0.cpp\n\ttests.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: SMX Frame Header Structure Definition in C++\nDESCRIPTION: Defines the frame header structure containing frame type flags, palette number and uncompressed size information.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smx-files.md#2025-04-21_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstruct smx_frame_header {\n  uint8  frame_type;\n  uint8  palette_number;\n  uint32 uncomp_size;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Time Relative Attribute Change\nDESCRIPTION: Base class for handling time-based attribute change resistances.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_resistance.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nTimeRelativeAttributeChange(ContinuousResistance):\n    type : children(AttributeChangeType)\n```\n\n----------------------------------------\n\nTITLE: Installing Configuration Files with CMake in openage\nDESCRIPTION: This CMake script installs keybinds.oac file and the converter directory to the project's global configuration directory. It ensures that necessary configuration files are properly deployed during installation.\nSOURCE: https://github.com/sfttech/openage/blob/master/cfg/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES\n\t\"${CMAKE_CURRENT_SOURCE_DIR}/keybinds.oac\"\n\tDESTINATION \"${GLOBAL_CONFIG_DIR}\"\n)\n\ninstall(DIRECTORY\n\t\"${CMAKE_CURRENT_SOURCE_DIR}/converter\"\n\tDESTINATION \"${GLOBAL_CONFIG_DIR}/\"\n)\n```\n\n----------------------------------------\n\nTITLE: 8to5 Compression Example - Binary and Hex Representation\nDESCRIPTION: Example showing the compressed and uncompressed representation of two pixels in both hexadecimal and binary format.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smx-files.md#2025-04-21_snippet_3\n\nLANGUAGE: plain\nCODE:\n```\nCompressed:\nHex:        90 1E 32 73 AA\nBin:        10010000 00011110 00110010 01110011 10101010\n\nUncompressed:\npixel0 Hex: 90 02 30 33\npixel0 Bin: 10010000 00000010 00110000 00110011\n\npixel1 Hex: 87 00 90 2A\npixel1 Bin: 10000111 00000000 10010000 00101010\n```\n\n----------------------------------------\n\nTITLE: Implementing GameEntityStance Ability in Python\nDESCRIPTION: Defines automatic behavior states for idle entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_ability.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nGameEntityStance(Ability):\n    stances: set(GameEntityStance)\n```\n\n----------------------------------------\n\nTITLE: Version Declaration Example\nDESCRIPTION: Example showing how to declare the blendmask format version.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/blendmask_format_spec.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nversion 2\n```\n\n----------------------------------------\n\nTITLE: Defining SMP Command Offset Structure in Python\nDESCRIPTION: Python struct format string for parsing SMP command offsets, corresponding to the C++ struct definition.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/smp-files.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nStruct(\"< I\")\n```\n\n----------------------------------------\n\nTITLE: Modifier Module Updates\nDESCRIPTION: Defines modifier properties and their relationships, including multipliers, scoped modifiers, and stacked modifiers with condition handling.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/nyan_api/v0.3.0.md#2025-04-21_snippet_2\n\nLANGUAGE: nyan\nCODE:\n```\nModifierProperty(Entity)\nMultiplier(ModifierProperty)\nScoped(ModifierProperty)\nStacked(ModifierProperty)\nproperties : dict(ModifierProperty, ModifierProperty)\ncondition : set(LogicElement)\n```\n\n----------------------------------------\n\nTITLE: Generating Python Bindings with pxdgen in CMake\nDESCRIPTION: A CMake function call that processes specific header files using the 'pxdgen' tool. This likely generates Python binding files (.pxd) for the specified C++ headers to enable Python interface to C++ code.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/util/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\npxdgen(\n\tcompiler.h\n\tenum.h\n\tenum_test.h\n\tfile.h\n\tpath.h\n)\n```\n\n----------------------------------------\n\nTITLE: Basic OpenAge Palette Format Structure Example\nDESCRIPTION: Shows the overall structure of an openage palette file with version, entries count, and color values definitions. This provides a quick reference of the file format's key components.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/palette_format_spec.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This is a palette configuration file\n# comments start with # and are ignored\n\n# file version\nversion 1\n\n# number of entries in the colour table\nentries <count>\n\n# Colour values\ncolours [\n<int> <int> <int> <int>\n...\n]\n```\n\n----------------------------------------\n\nTITLE: Defining StateChanger Objects in Python for Game Entity State Management\nDESCRIPTION: Defines the StateChanger class that alters the base state of game entities by enabling and disabling abilities and modifiers. It controls which properties are active based on priority levels and can be used for state transformations.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_151\n\nLANGUAGE: python\nCODE:\n```\nStateChanger(Object):\n    enable_abilities  : set(abstract(Ability))\n    disable_abilities : set(abstract(Ability))\n    enable_modifiers  : set(abstract(Modifier))\n    disable_modifiers : set(abstract(Modifier))\n    transform_pool    : optional(TransformPool) = None\n    priority          : int\n```\n\n----------------------------------------\n\nTITLE: Declaring C++ Function Pointer\nDESCRIPTION: C++ implementation file declaring PyIfFunc object for storing Python function reference.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"foo.h\"\n\nPyIfFunc<float, int, std::string> bar;\n```\n\n----------------------------------------\n\nTITLE: Greater Draw Command Implementation\nDESCRIPTION: Command for drawing long blocks of pixels greater than 64 pixels in length. Shows calculation using command byte and next byte.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/slp-files.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nlength = ((command & 0xf0) << 4) + next_byte\n(ex: 0x12 + 0x00 = 256, 0x12 + 0x0A = 266, 0x22 + 0x00 = 512)\n```\n\n----------------------------------------\n\nTITLE: Contributors Table in Markdown\nDESCRIPTION: A markdown table listing all OpenAge project contributors, including their full names, aliases, and contact information.\nSOURCE: https://github.com/sfttech/openage/blob/master/copying.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Full name                   | aliases                     | E-Mail                                            |\n|-----------------------------|-----------------------------|---------------------------------------------------|\n| Jonas Jelten                | TheJJ                       | jj à sft dawt lol                                 |\n| Michael Enßlin              | mic_e                       | michael à ensslin dawt cc                         |\n```\n\n----------------------------------------\n\nTITLE: C++ Code Style Change - Replacing Macros with Attributes\nDESCRIPTION: Updated code style to replace unlikely/likely macros with C++20 standard attributes [[unlikely]]/[[likely]] for better code readability and standardization.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/changelogs/engine/v0.5.0.md#2025-04-21_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// Old style\nunlikely(condition)\nlikely(condition)\n\n// New style\n[[unlikely]] condition\n[[likely]] condition\n```\n\n----------------------------------------\n\nTITLE: Scale Factor Examples\nDESCRIPTION: Examples demonstrating different scaling factors and their effects on sprite display sizes.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/blendmask_format_spec.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# Assume the sprite image has a size of 100x100\n# Factors <1 result in downscaling\nscalefactor 1.0   # No scaling, 100x100 at default zoom\nscalefactor 0.5   # 50x50 at default zoom; 100x100 at 2x zoom\nscalefactor 0.25  # 25x25 at default zoom; 100x100 at 4x zoom\n\n# Factors >1 result in upscaling\nscalefactor 2.0  # 200x200 at default zoom; 100x100 at 2x zoom\n```\n\n----------------------------------------\n\nTITLE: Defining Formation Action Structure in Ruby\nDESCRIPTION: Definition for changing unit formation types. Includes action identifier, selection count, player number, formation type, and affected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/09-formation.md#2025-04-21_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef Formation\n  int8 :action_identifier\n  int8 :selection_count\n  int8 :player_number\n  int8 :zero\n  int8 :formation_type\n  byte24 :zero2\n  array :selected_ids,\n    type => :int32,\n    initial_length => :selection_count\nend\n```\n\n----------------------------------------\n\nTITLE: Relic Gold Generation Rate\nDESCRIPTION: Describes the gold generation rate from relics, which scales with the number of relics collected\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/rates.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1 every 2 / (number of relics) seconds\n```\n\n----------------------------------------\n\nTITLE: Registering Python Modules with CMake\nDESCRIPTION: CMake function call to register multiple Python modules as part of the build system. Includes core modules for game data handling, nyan API loading, palette management, media registration, and string resources.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/service/read/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tgamedata.py\n\tnyan_api_loader.py\n\tpalette.py\n\tregister_media.py\n\tstring_resource.py\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Types Table in Markdown\nDESCRIPTION: This markdown table shows the data types used in the network protocol, including their byte lengths and corresponding data types.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/01-general.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Length | Data Types            |\n| ------ | --------------------- |\n| 1 byte | int8, (ASCII) char    |\n| 2 byte | int16                 |\n| 4 byte | int32, float          |\n| other  | (1-dimensional) array |\n```\n\n----------------------------------------\n\nTITLE: Implementing AttributeBelowPercentage Literal Python\nDESCRIPTION: Checks if an attribute of a game entity is below its maximum value percentage defined in the threshold. Requires attribute and threshold to be pre-set.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_79\n\nLANGUAGE: python\nCODE:\n```\nAttributeBelowPercentage(Literal):\n    attribute : Attribute\n    threshold : float\n```\n\n----------------------------------------\n\nTITLE: Defining Gathering Efficiency Modifier in Python\nDESCRIPTION: The 'GatheringEfficiency' modifier adjusts the amount of resources removed from a resource spot during gathering. This snippet includes a factor to increase resource yield, allowing for more efficient collection.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nGatheringEfficiency(Modifier):\n    resource_spot : ResourceSpot\n```\n\n----------------------------------------\n\nTITLE: Adding RNG Source Files to libopenage Library in CMake\nDESCRIPTION: This CMake command adds three source files related to random number generation functionality to the libopenage library build. It includes the main RNG implementation, a global RNG instance, and test files for the RNG functionality.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/rng/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\trng.cpp\n\tglobal_rng.cpp\n\trng_tests.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Illustrating a Simple Ranged Subformation in AoE2\nDESCRIPTION: ASCII diagram showing a typical ranged unit subformation with units arranged in rows. The front of the formation is indicated by '^' symbols, and 'R' represents individual ranged units in the formation.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/game_mechanics/formations.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n............\n...^^^^^^...\n...RRRRRR...\n...RRRRRR...\n............\n```\n\n----------------------------------------\n\nTITLE: Converting Standalone SLDs in OpenAge\nDESCRIPTION: Command for converting standalone SLD graphics files to PNG format. This is specifically for Age of Empires 2: Definitive Edition.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/convert/convert_single_file.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npython3 -m openage convert-file --palettes-path ~/games/aoe2de/Data/ u_elite_eagle.sld /tmp/rofl.png\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files with CMake\nDESCRIPTION: This snippet adds source files to the build system using the CMake `add_sources` command. It includes `libopenage\\ttests.cpp` as source files. No specific dependencies are required other than a CMake environment.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/main/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sources(libopenage\n\ttests.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAge on Linux with Package Managers\nDESCRIPTION: Instructions for installing openage on Arch Linux, Debian/Ubuntu, Fedora, Gentoo, and openSUSE using their respective package managers.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/editor/scripting.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Arch Linux\npacman -S openage-git\n\n# Debian/Ubuntu\napt-get install openage\n\n# Fedora\ndnf install openage\n\n# Gentoo\nemerge-av games-strategy/openage\n\n# openSUSE\nzypper install openage\n```\n\n----------------------------------------\n\nTITLE: Blendtable Matrix Definition Example\nDESCRIPTION: Example of a blendtable matrix definition specifying a 3x3 lookup table for blend patterns. The matrix contains reference IDs for blending patterns that must be defined in the same file.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/blendtable_format_spec.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nblendtable [\n0  0  0\n1  2  3\n23 42 1337\n]\n```\n\n----------------------------------------\n\nTITLE: Connecting Signals in EditorModeLink C++ Class\nDESCRIPTION: Shows how to connect signals from the game logic to the GUI Link class, allowing data to be passed to the GUI.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/gui.md#2025-04-21_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\nvoid EditorModeLink::on_core_adopted() {\n\tQObject::connect(&unwrap(this)->gui_signals, &EditorModeSignals::toggle, this, &EditorModeLink::toggle);\n}\n```\n\n----------------------------------------\n\nTITLE: Packaging openage Using CPack on Windows\nDESCRIPTION: Creates an installer package for openage using CPack with the RelWithDebInfo configuration. The result is an executable installer file.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/windows_msvc.md#2025-04-21_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\ncpack -C RelWithDebInfo\n```\n\n----------------------------------------\n\nTITLE: Pattern Definition Examples in Blendtable Format\nDESCRIPTION: Examples of pattern definitions that associate pattern IDs with blendmask file paths. These patterns are referenced in the blendtable matrix for blending adjacent terrain textures.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/blendtable_format_spec.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\npattern 0 \"blend0.blmask\"\npattern 1 \"./blend3.blmask\"\npattern 2 \"/{aoe2_base}/blend8.blmask\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Attributes for Python Tab-Space Conversion\nDESCRIPTION: Creates a Git attributes configuration that sets up a filter for Python files. This allows developers to use tabs locally while storing spaces in the repository.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code_style/tabs_n_spaces.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n*.py  filter=tabspace\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules to Build Configuration\nDESCRIPTION: Configures Python modules to be included in the project using CMake's add_py_modules function. Specifies two specific Python files to be added to the module path.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/conversion/de1/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tinternal_nyan_names.py\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Guard Action Struct in C\nDESCRIPTION: Defines a C struct for the guard action (13). It includes action identifier, selection count, guarded unit ID, and selected unit IDs.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/15-c-structs.md#2025-04-21_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nstruct guard {\n  uint8_t action_identifier;\n  uint8_t selection_count;\n  uint32_t guarded_id;\n  uint32_t selected_ids[selection_count];\n};\n```\n\n----------------------------------------\n\nTITLE: Running OpenAge with Nix\nDESCRIPTION: Command to build and immediately run OpenAge using Nix's run command.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/build_instructions/nix.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnix run .#openage\n```\n\n----------------------------------------\n\nTITLE: Implementing 16BC31 Packet Structure in Ruby - Game Time Synchronization Request\nDESCRIPTION: Defines the structure of a 16BC31 packet sent every 8 seconds to ensure game time stays synchronized between players. It contains network IDs, command information, and the time passed since the game started for the player sending the packet.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/03-sync.md#2025-04-21_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef 16BC31\n  int32 :network_source_id\n  int32 :network_dest_id\n  int8 :command\n  int8 :option1\n  int8 :option2\n  int8 :option3\n  int32 :time_passed\nend\n```\n\n----------------------------------------\n\nTITLE: Defining BackToWork Action Structure in Ruby\nDESCRIPTION: Defines the data structure for sending villagers back to work. It includes fields for action identifier and building ID.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/11-buildings.md#2025-04-21_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef BackToWork\n  int8 :action_identifier\n  byte24 :zero\n  int32 :building_id\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Unit Training Structure for AI Player in Ruby\nDESCRIPTION: Defines the structure for AI unit training commands, including building and unit identification.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/14-ai.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef TrainAI\n  int8 :action_identifier\n  byte24 :zero\n  int32 :building_id\n  int16 :player_id\n  int16 :unit_id\n  int32 :const\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Openage on macOS\nDESCRIPTION: This snippet demonstrates the command to install the required dependencies for Openage on macOS using Homebrew.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/editor/tech.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbrew install cmake freetype fontconfig harfbuzz sdl2 sdl2_image opus opusfile qt5 libepoxy python3\n```\n\n----------------------------------------\n\nTITLE: Creating Stray Modifier for FlatAttributeChange Resistance in Python\nDESCRIPTION: Defines the Stray modifier class that changes FlatAttributeChange resistances for unintended projectile targets.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_modifier.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nStray(Modifier):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Layer Definition Examples\nDESCRIPTION: Examples showing different layer configurations with various modes, positions and timing parameters.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/terrain_format_spec.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nlayer 0\nlayer 1 mode=off  position=10\nlayer 3 mode=loop position=15 time_per_frame=1200 replay_delay=200\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake\nDESCRIPTION: This snippet uses the add_py_modules function to include a Python module named '__init__.py' in the project build.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/pathfinding/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: Direction Index Mapping\nDESCRIPTION: ASCII representation showing how direction indices are mapped around a central tile.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/media/openage/blendmask_format_spec.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n@   = the blended tile\n0-7 = adjacent tiles\n\n7  0  1\n\n6  @  2\n\n5  4  3\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Openage on Fedora\nDESCRIPTION: This snippet demonstrates the command to install the required dependencies for Openage on Fedora using dnf.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/editor/tech.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf install cmake gcc-c++ clang SDL2-devel SDL2_image-devel opusfile-devel fontconfig-devel harfbuzz-devel qt5-qtdeclarative-devel qt5-qtquickcontrols python3-devel python3-numpy python3-pillow python3-pygments\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to libopenage Library\nDESCRIPTION: CMake command that adds cpp source files to the libopenage target. Includes core functionality files like activity, command queue, ownership and position implementations.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/component/internal/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sources(libopenage\n    activity.cpp\n    command_queue.cpp\n    ownership.cpp\n    position.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Standalone SMXs in OpenAge\nDESCRIPTION: Command for converting standalone SMX graphics files to PNG format. This is specifically for Age of Empires 2: Definitive Edition.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/convert/convert_single_file.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython3 -m openage convert-file --palettes-path ~/games/aoe2de/Data/ u_elite_eagle.smx /tmp/rofl.png\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake\nDESCRIPTION: CMake directive to include three Python module files (__init__.py, genie_tech.py, and genie_unit.py) into the build system. Uses the add_py_modules function to register these Python files as part of the project.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/entity_object/conversion/swgbcc/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tgenie_tech.py\n\tgenie_unit.py\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Replace Placement Mode in Python\nDESCRIPTION: Handles replacement of existing game entities.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_117\n\nLANGUAGE: python\nCODE:\n```\nReplace(PlacementMode):\n    game_entities : set(GameEntity)\n```\n\n----------------------------------------\n\nTITLE: Defining XOREventGate Node in Python\nDESCRIPTION: Node class that branches based on events.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nXOREventGate(Node):\n    next : dict(Event, Node)\n```\n\n----------------------------------------\n\nTITLE: Adding Packaging Configuration\nDESCRIPTION: Adds the packaging subdirectory as the final step in the build process.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# packaging.\n\n# Ensure that packaging is always the last step.\nadd_subdirectory(packaging)\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixed Price Mode in Python\nDESCRIPTION: Implements static pricing without adjustments.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_120\n\nLANGUAGE: python\nCODE:\n```\nFixed(PriceMode):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake Configuration\nDESCRIPTION: Adds multiple Python source files to the build system using the add_py_modules command. Includes initialization, configuration and location modules.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/cvar/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tconfig_file.py\n\tlocation.py\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Modules and Subdirectories in CMake\nDESCRIPTION: CMake configuration that adds Python modules and includes subdirectories for conversion and export functionality. Uses add_py_modules for Python initialization and add_subdirectory for organizing the project structure.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/entity_object/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n)\n\nadd_subdirectory(conversion)\nadd_subdirectory(export)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake Build Configuration\nDESCRIPTION: CMake command to include Python modules in the build system. Uses add_py_modules() function to specify three Python module files that should be included in the project build.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/tool/subtool/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tacquire_sourcedir.py\n\tversion_select.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in CMake Build System\nDESCRIPTION: CMake function call to add Python modules to the project build system. Includes initialization file and version-related Python modules.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/convert/value_object/init/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n\tgame_file_version.py\n\tgame_version.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to Build Configuration\nDESCRIPTION: Includes additional subdirectories in the build process that contain supplementary components of the engine like activities, APIs, components, demo code, events, and systems.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/gamestate/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(activity/)\nadd_subdirectory(api/)\nadd_subdirectory(component/)\nadd_subdirectory(demo/)\nadd_subdirectory(event/)\nadd_subdirectory(system/)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Modules in OpenAge Project\nDESCRIPTION: This snippet adds a Python module named '__init__.py' to the project. It uses a custom CMake function 'add_py_modules' to include the Python file in the build process.\nSOURCE: https://github.com/sfttech/openage/blob/master/openage/event/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_py_modules(\n\t__init__.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding HUD Subdirectory - CMake\nDESCRIPTION: This snippet features the CMake command for adding the HUD (Heads-Up Display) subdirectory. It allows the project to manage HUD components separately, facilitating better organization and maintenance.\nSOURCE: https://github.com/sfttech/openage/blob/master/libopenage/input/controller/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"hud\")\n```\n\n----------------------------------------\n\nTITLE: Machine Word Size Integer Type in C++\nDESCRIPTION: Platform-specific integer type commonly used for memory management and size calculations.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code_style/inttypes.md#2025-04-21_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nsize_t\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Library Content\nDESCRIPTION: Adds the main C++ library directory to the build system.\nSOURCE: https://github.com/sfttech/openage/blob/master/CMakeLists.txt#2025-04-21_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n##################################################\n# C++ content\nadd_subdirectory(libopenage/)\n```\n\n----------------------------------------\n\nTITLE: Using Cython's Built-in PXD Files\nDESCRIPTION: Shows how to use Cython's built-in .pxd files for common C, C++, and CPython functions, demonstrating vector operations.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/code/pyinterface.md#2025-04-21_snippet_3\n\nLANGUAGE: Cython\nCODE:\n```\nfrom libc.math cimport sin\nfrom libcpp.vector cimport vector\n\ncdef vector[float] vector_sin(vector[float]& args):\n    return [sin(arg) for arg in args]\n\nprint(vector_sin(range(10)))\n```\n\n----------------------------------------\n\nTITLE: Misaligned Memory Example - Hex Dump\nDESCRIPTION: Extended hexadecimal dump showing the misaligned memory pattern that occurs due to the Genie Engine's memory caching optimization.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/networking/05-chat_protocol.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n0000 00 00 00 00 00 01 00 00 00 18 dc 32 00 00 00 00\n0010 00 00 00 00 00 01 00 00 00 XX 00 00 00 43 00 00\n0020 00 XX 00 XX 00 1c dd 32 00 20 dd 32 00 b0 00 00\n0030 00 6e 00 0a 00 XX 00 XX 00 00 58 c5 0a 20 dd 32\n0040 00 YY YY YY\n```\n\n----------------------------------------\n\nTITLE: Conceptualizing Real-time Game Asset Monitoring in Markdown\nDESCRIPTION: This snippet outlines the idea of monitoring game asset folders (e.g., using inotify) to instantly update in-game models when assets are modified. This feature would greatly enhance the live-testing experience for modders.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/ideas/technical.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Monitor Game Asset Folder (e.g. with inotify)\n\nWhen the user modifies an asset, such as a texture, the ingame models are updated instantly.\n\n-> awesome live-testing for modders\n\nFar more challenging: make this work for unit stats.\n```\n\n----------------------------------------\n\nTITLE: Defining Wait Event in Python\nDESCRIPTION: Event class that fires after a specified time delay.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/nyan/api_reference/reference_util.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nWait(Event):\n    time : float\n```\n\n----------------------------------------\n\nTITLE: Unit Statistics Reference Header\nDESCRIPTION: Markdown header and attribution for unit statistics data sourced from AoK Heaven gaming community forums.\nSOURCE: https://github.com/sfttech/openage/blob/master/doc/reverse_engineering/unit_stats/unit_stats.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Unit statistics\n\n Taken from a post of *Leif Ericson* from [AoK Heaven](http://aok.heavengames.com/university/game-info/stat-tables/units-table/).\n```"
  }
]