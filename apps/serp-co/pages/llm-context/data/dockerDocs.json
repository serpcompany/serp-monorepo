[
  {
    "owner": "docker",
    "repo": "docs",
    "content": "TITLE: Multi-stage Build with Previous Stage Reference\nDESCRIPTION: Shows how to reuse a previous stage as a base for new stages, demonstrating stage inheritance and build optimization.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-stage.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM alpine:latest AS builder\nRUN apk --no-cache add build-base\n\nFROM builder AS build1\nCOPY source1.cpp source.cpp\nRUN g++ -o /binary source.cpp\n\nFROM builder AS build2\nCOPY source2.cpp source.cpp\nRUN g++ -o /binary source.cpp\n```\n\n----------------------------------------\n\nTITLE: Viewing Repository File Structure\nDESCRIPTION: Directory structure of the sample C++ Docker repository showing key files like Dockerfile, compose.yml, and the application source.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n├── c-plus-plus-docker/\n│ ├── compose.yml\n│ ├── Dockerfile\n│ ├── LICENSE\n│ ├── ok_api.cpp\n│ └── README.md\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Compose Configuration for REST API with CockroachDB\nDESCRIPTION: A Docker Compose configuration that defines a multi-container application with a REST server and a CockroachDB database. It specifies network configurations, volume mounts, environment variables, and service dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.8\"\n\nservices:\n  docker-gs-ping-roach:\n    depends_on:\n      - roach\n    build:\n      context: .\n    container_name: rest-server\n    hostname: rest-server\n    networks:\n      - mynet\n    ports:\n      - 80:8080\n    environment:\n      - PGUSER=${PGUSER:-totoro}\n      - PGPASSWORD=${PGPASSWORD:?database password not set}\n      - PGHOST=${PGHOST:-db}\n      - PGPORT=${PGPORT:-26257}\n      - PGDATABASE=${PGDATABASE:-mydb}\n    deploy:\n      restart_policy:\n        condition: on-failure\n  roach:\n    image: cockroachdb/cockroach:latest-v20.1\n    container_name: roach\n    hostname: db\n    networks:\n      - mynet\n    ports:\n      - 26257:26257\n      - 8080:8080\n    volumes:\n      - roach:/cockroach/cockroach-data\n    command: start-single-node --insecure\n\nvolumes:\n  roach:\n\nnetworks:\n  mynet:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-stage Dockerfile for Shared Base Layers\nDESCRIPTION: This Dockerfile demonstrates how to use multi-stage builds to create a shared base image with common dependencies that multiple services can build from. It uses Alpine as the base and installs OpenSSL as a shared dependency.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/dependent-images.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine as base\nRUN /bin/sh -c apk add --update --no-cache openssl\n\nFROM base as service_a\n# build service a\n...\n\nFROM base as service_b\n# build service b\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Version Variables with ENV in Dockerfile\nDESCRIPTION: Using ENV instructions to define version numbers as variables for easier maintenance. This approach allows changing a single ENV instruction to automatically update software versions throughout the build.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_18\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV PG_MAJOR=9.3\nENV PG_VERSION=9.3.4\nRUN curl -SL https://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgres && …\nENV PATH=/usr/local/postgres-$PG_MAJOR/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Basic Multi-stage Dockerfile with Go Binary\nDESCRIPTION: Demonstrates a basic multi-stage build that compiles a Go binary in the first stage and copies only the binary to a minimal scratch image in the second stage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-stage.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM golang:{{% param \"example_go_version\" %}}\nWORKDIR /src\nCOPY <<EOF ./main.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"hello, world\")\n}\nEOF\nRUN go build -o /bin/hello ./main.go\n\nFROM scratch\nCOPY --from=0 /bin/hello /bin/hello\nCMD [\"/bin/hello\"]\n```\n\n----------------------------------------\n\nTITLE: Building a Basic Docker Image\nDESCRIPTION: The most basic command to build a Docker image from a Dockerfile in the current directory. The build context is specified by the period at the end of the command.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build .\n```\n\n----------------------------------------\n\nTITLE: Node.js Dockerfile Configuration\nDESCRIPTION: Dockerfile for containerizing a Node.js application, including production environment setup, dependency management, and security configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/containerize.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nARG NODE_VERSION=18.0.0\n\nFROM node:${NODE_VERSION}-alpine\n\nENV NODE_ENV production\n\n\nWORKDIR /usr/src/app\n\nRUN --mount=type=bind,source=package.json,target=package.json \\\n    --mount=type=bind,source=package-lock.json,target=package-lock.json \\\n    --mount=type=cache,target=/root/.npm \\\n    npm ci --omit=dev\n\nUSER node\n\nCOPY . .\n\nEXPOSE 3000\n\nCMD node src/index.js\n```\n\n----------------------------------------\n\nTITLE: Running Docker Init for Java Application\nDESCRIPTION: Interactive Docker Init command that generates Docker assets for a Java application, including prompts for application configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker init\nWelcome to the Docker Init CLI!\n\nThis utility will walk you through creating the following files with sensible defaults for your project:\n  - .dockerignore\n  - Dockerfile\n  - compose.yaml\n  - README.Docker.md\n\nLet's get started!\n\nWARNING: The following Docker files already exist in this directory:\n  - docker-compose.yml\n? Do you want to overwrite them? Yes\n? What application platform does your project use? Java\n? What's the relative directory (with a leading .) for your app? ./src\n? What version of Java do you want to use? 21\n? What port does your server listen on? 8080\n```\n\n----------------------------------------\n\nTITLE: Docker .dockerignore Configuration for Python Projects\nDESCRIPTION: A .dockerignore file that specifies files and directories to exclude from the Docker build context. This helps keep container images smaller and build times faster by excluding unnecessary files.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n# Include any files or directories that you don't want to be copied to your\n# container here (e.g., local build artifacts, temporary files, etc.).\n#\n# For more help, visit the .dockerignore file reference guide at\n# https://docs.docker.com/go/build-context-dockerignore/\n\n**/.DS_Store\n**/__pycache__\n**/.venv\n**/.classpath\n**/.dockerignore\n**/.env\n**/.git\n**/.gitignore\n**/.project\n**/.settings\n**/.toolstarget\n**/.vs\n**/.vscode\n**/*.*proj.user\n**/*.dbmdl\n**/*.jfm\n**/bin\n**/charts\n**/docker-compose*\n**/compose.y*ml\n**/Dockerfile*\n**/node_modules\n**/npm-debug.log\n**/obj\n**/secrets.dev.yaml\n**/values.dev.yaml\nLICENSE\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Builder for Multi-Platform Builds with Docker Buildx\nDESCRIPTION: Creates a custom buildx builder using the docker-container driver to enable multi-platform build support. The builder is bootstrapped and set as the default builder.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create \\\n  --name container-builder \\\n  --driver docker-container \\\n  --bootstrap --use\n```\n\n----------------------------------------\n\nTITLE: Updated Dockerfile with Cross-Compilation Support for Go\nDESCRIPTION: An enhanced Dockerfile that includes platform-specific build arguments to enable cross-compilation of the Go application for multiple target architectures.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_16\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM --platform=$BUILDPLATFORM golang:alpine AS build\nARG TARGETOS\nARG TARGETARCH\nWORKDIR /app\nADD https://github.com/dvdksn/buildme.git#eb6279e0ad8a10003718656c6867539bd9426ad8 .\nRUN GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -o server .\n\nFROM alpine\nCOPY --from=build /app/server /server\nENTRYPOINT [\"/server\"]\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for C++ application\nDESCRIPTION: A Dockerfile that uses a multi-stage build to compile a C++ application in the first stage and create a minimalist runtime image in the second stage. It creates a statically linked binary to avoid runtime dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/multistage.md#2025-04-11_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Stage 1: Build stage\nFROM ubuntu:latest AS build\n\n# Install build-essential for compiling C++ code\nRUN apt-get update && apt-get install -y build-essential\n\n# Set the working directory\nWORKDIR /app\n\n# Copy the source code into the container\nCOPY hello.cpp .\n\n# Compile the C++ code statically to ensure it doesn't depend on runtime libraries\nRUN g++ -o hello hello.cpp -static\n\n# Stage 2: Runtime stage\nFROM scratch\n\n# Copy the static binary from the build stage\nCOPY --from=build /app/hello /hello\n\n# Command to run the binary\nCMD [\"/hello\"]\n```\n\n----------------------------------------\n\nTITLE: Cloning the Docker Deno Sample Repository\nDESCRIPTION: Command to clone the sample Deno application repository from GitHub and navigate into the directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dockersamples/docker-deno.git && cd docker-deno\n```\n\n----------------------------------------\n\nTITLE: Creating a Base Docker Image with Node.js\nDESCRIPTION: This snippet demonstrates how to create a base Docker image by installing Node.js in an Ubuntu container and committing the changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/understanding-image-layers.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name=base-container -ti ubuntu\napt update && apt install -y nodejs\nnode -e 'console.log(\"Hello world!\")'\ndocker container commit -m \"Add node\" base-container node-base\ndocker image history node-base\ndocker run node-base node -e \"console.log('Hello again')\"\ndocker rm -f base-container\n```\n\n----------------------------------------\n\nTITLE: Running a MySQL Database Container with Docker CLI\nDESCRIPTION: Command to run a MySQL container in detached mode with environment variables for root password and database name. The container is named 'my-mysql' for easier reference.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -e MYSQL_DATABASE=mydb -d mysql:latest\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Python Flask Application\nDESCRIPTION: Dockerfile that builds an image for the Flask application using Python 3.10 Alpine as the base image. Installs dependencies, sets up the working environment, and configures the Flask application to run in debug mode.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM python:3.10-alpine\nWORKDIR /code\nENV FLASK_APP=app.py\nENV FLASK_RUN_HOST=0.0.0.0\nRUN apk add --no-cache gcc musl-dev linux-headers\nCOPY requirements.txt requirements.txt\nRUN pip install -r requirements.txt\nEXPOSE 5000\nCOPY . .\nCMD [\"flask\", \"run\", \"--debug\"]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Docker Content Trust Enforcement in Console\nDESCRIPTION: This snippet shows the behavior of Docker commands with Content Trust enabled. It demonstrates a failed pull attempt for an unsigned image and a successful pull using an explicit content hash.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/_index.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull registry.example.com/user/image:1\nError: remote trust data does not exist for registry.example.com/user/image: registry.example.com does not have trust data for registry.example.com/user/image\n\n$ docker pull registry.example.com/user/image@sha256:d149ab53f8718e987c3a3024bb8aa0e2caadf6c0328f1d9d850b2a2a67f2819a\nsha256:ee7491c9c31db1ffb7673d91e9fac5d6354a89d0e97408567e09df069a1687c1: Pulling from user/image\nff3a5c916c92: Pull complete\na59a168caba3: Pull complete\nDigest: sha256:ee7491c9c31db1ffb7673d91e9fac5d6354a89d0e97408567e09df069a1687c1\nStatus: Downloaded newer image for registry.example.com/user/image@sha256:ee7491c9c31db1ffb7673d91e9fac5d6354a89d0e97408567e09df069a1687c1\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Python Application with Database Options\nDESCRIPTION: Docker Compose configuration for a Python application with commented sections for adding a PostgreSQL database. The file defines a server service built from the local Dockerfile and exposes port 8001.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Comments are provided throughout this file to help you get started.\n# If you need more help, visit the Docker Compose reference guide at\n# https://docs.docker.com/go/compose-spec-reference/\n\n# Here the instructions define your application as a service called \"server\".\n# This service is built from the Dockerfile in the current directory.\n# You can add other services your application may depend on here, such as a\n# database or a cache. For examples, see the Awesome Compose repository:\n# https://github.com/docker/awesome-compose\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 8001:8001\n# The commented out section below is an example of how to define a PostgreSQL\n# database that your application can use. `depends_on` tells Docker Compose to\n# start the database before your application. The `db-data` volume persists the\n# database data between container restarts. The `db-password` secret is used\n# to set the database password. You must create `db/password.txt` and add\n# a password of your choosing to it before running `docker compose up`.\n#     depends_on:\n#       db:\n#         condition: service_healthy\n#   db:\n#     image: postgres\n#     restart: always\n#     user: postgres\n#     secrets:\n#       - db-password\n#     volumes:\n#       - db-data:/var/lib/postgresql/data\n#     environment:\n#       - POSTGRES_DB=example\n#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n#     expose:\n#       - 5432\n#     healthcheck:\n#       test: [ \"CMD\", \"pg_isready\" ]\n#       interval: 10s\n#       timeout: 5s\n#       retries: 5\n# volumes:\n#   db-data:\n# secrets:\n#   db-password:\n#     file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-stage Dockerfile for Node.js Development and Production\nDESCRIPTION: A multi-stage Dockerfile that configures both development and production environments for a Node.js application. It defines a base stage, a dev stage with development dependencies that runs the app with nodemon, and a prod stage that omits dev dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/develop.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nARG NODE_VERSION=18.0.0\n\nFROM node:${NODE_VERSION}-alpine as base\nWORKDIR /usr/src/app\nEXPOSE 3000\n\nFROM base as dev\nRUN --mount=type=bind,source=package.json,target=package.json \\\n    --mount=type=bind,source=package-lock.json,target=package-lock.json \\\n    --mount=type=cache,target=/root/.npm \\\n    npm ci --include=dev\nUSER node\nCOPY . .\nCMD npm run dev\n\nFROM base as prod\nRUN --mount=type=bind,source=package.json,target=package.json \\\n    --mount=type=bind,source=package-lock.json,target=package-lock.json \\\n    --mount=type=cache,target=/root/.npm \\\n    npm ci --omit=dev\nUSER node\nCOPY . .\nCMD node src/index.js\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Swarm Services\nDESCRIPTION: Displays a list of all services running in the swarm, showing details such as service ID, name, mode, replica status, image, and published ports.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker service ls\n\nID                  NAME                MODE                REPLICAS            IMAGE                                                                                             PORTS\na3iixnklxuem        quizzical_lamarr    replicated          1/1                 docker.io/library/nginx@sha256:41ad9967ea448d7c2b203c699b429abe1ed5af331cd92533900c6d77490e0268\n```\n\n----------------------------------------\n\nTITLE: Running Build Checks with docker/build-push-action in GitHub Actions\nDESCRIPTION: This YAML snippet demonstrates a GitHub Actions workflow that validates a Docker build configuration using docker/build-push-action. It includes steps for logging into Docker Hub, setting up Docker Buildx, validating the build configuration, and then building and pushing the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/checks.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Validate build configuration\n        uses: docker/build-push-action@v6\n        with:\n          call: check\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: user/app:latest\n```\n\n----------------------------------------\n\nTITLE: Creating Docker .dockerignore File\nDESCRIPTION: A .dockerignore file that specifies which files and directories should be excluded from the Docker build context, improving build performance and security by excluding unnecessary or sensitive files.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#2025-04-11_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n# Include any files or directories that you don't want to be copied to your\n# container here (e.g., local build artifacts, temporary files, etc.).\n#\n# For more help, visit the .dockerignore file reference guide at\n# https://docs.docker.com/go/build-context-dockerignore/\n\n**/.DS_Store\n**/__pycache__\n**/.venv\n**/.classpath\n**/.dockerignore\n**/.env\n**/.git\n**/.gitignore\n**/.project\n**/.settings\n**/.toolstarget\n**/.vs\n**/.vscode\n**/*.*proj.user\n**/*.dbmdl\n**/*.jfm\n**/bin\n**/charts\n**/docker-compose*\n**/compose.y*ml\n**/Dockerfile*\n**/node_modules\n**/npm-debug.log\n**/obj\n**/secrets.dev.yaml\n**/values.dev.yaml\nLICENSE\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Creating a Node.js Application Container Image using Dockerfile\nDESCRIPTION: This Dockerfile creates a container image for a Node.js application. It sets the base image, defines the working directory, copies project files, installs dependencies, and specifies the startup command.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/writing-a-dockerfile.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:20-alpine\nWORKDIR /app\nCOPY . .\nRUN yarn install --production\nCMD [\"node\", \"./src/index.js\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Database Environment Variables to Docker Compose\nDESCRIPTION: Enhanced Docker Compose configuration that adds PostgreSQL environment variables to the server service for database connectivity.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    environment:\n      NODE_ENV: production\n      POSTGRES_HOST: db\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD_FILE: /run/secrets/db-password\n      POSTGRES_DB: example\n    ports:\n      - 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Creating a Service in Docker Swarm\nDESCRIPTION: This command creates a service named 'helloworld' with one replica using an Alpine Linux container that pings docker.com. It demonstrates how to use the docker service create command with various flags to define the service parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/deploy-service.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --replicas 1 --name helloworld alpine ping docker.com\n\n9uk4639qpg7npwf3fn2aasksr\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Build with ADD for Remote Resource and Checksum Validation\nDESCRIPTION: A multi-stage Dockerfile that uses ADD to download a .NET installer with checksum validation. The example combines ADD's remote resource capability with multi-stage builds to ensure only required runtime components remain in the final image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_24\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM scratch AS src\nARG DOTNET_VERSION=8.0.0-preview.6.23329.7\nADD --checksum=sha256:270d731bd08040c6a3228115de1f74b91cf441c584139ff8f8f6503447cebdbb \\\n    https://dotnetcli.azureedge.net/dotnet/Runtime/$DOTNET_VERSION/dotnet-runtime-$DOTNET_VERSION-linux-arm64.tar.gz /dotnet.tar.gz\n\nFROM mcr.microsoft.com/dotnet/runtime-deps:8.0.0-preview.6-bookworm-slim-arm64v8 AS installer\n\n# Retrieve .NET Runtime\nRUN --mount=from=src,target=/src <<EOF\nmkdir -p /dotnet\ntar -oxzf /src/dotnet.tar.gz -C /dotnet\nEOF\n\nFROM mcr.microsoft.com/dotnet/runtime-deps:8.0.0-preview.6-bookworm-slim-arm64v8\n\nCOPY --from=installer /dotnet /usr/share/dotnet\nRUN ln -s /usr/share/dotnet/dotnet /usr/bin/dotnet\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies\nDESCRIPTION: Requirements file listing the Python packages needed for the application: Flask web framework and Redis client library.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nflask\nredis\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Desktop Client in a React Extension\nDESCRIPTION: This snippet demonstrates how to initialize the Docker Desktop client in a React component using the @docker/extension-api-client package. It creates a client instance that can be used to access various Docker Desktop APIs.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/overview.md#2025-04-11_snippet_0\n\nLANGUAGE: Typescript\nCODE:\n```\nimport { createDockerDesktopClient } from '@docker/extension-api-client';\n\nexport function App() {\n  // obtain Docker Desktop client\n  const ddClient = createDockerDesktopClient();\n  // use ddClient to perform extension actions\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Docker Engine on RHEL\nDESCRIPTION: This command installs the latest version of Docker Engine, CLI, containerd, and Docker plugins. After installation, it starts and enables Docker to run at system boot.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/rhel.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Complete Dockerfile for Go Application\nDESCRIPTION: The complete Dockerfile that builds a container image for the Go microservice. Includes all steps from base image selection to application compilation and runtime configuration, with comments explaining each step.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM golang:1.19\n\n# Set destination for COPY\nWORKDIR /app\n\n# Download Go modules\nCOPY go.mod go.sum ./\nRUN go mod download\n\n# Copy the source code. Note the slash at the end, as explained in\n# https://docs.docker.com/reference/dockerfile/#copy\nCOPY *.go ./\n\n# Build\nRUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping\n\n# Optional:\n# To bind to a TCP port, runtime parameters must be supplied to the docker command.\n# But we can document in the Dockerfile what ports\n# the application is going to listen on by default.\n# https://docs.docker.com/reference/dockerfile/#expose\nEXPOSE 8080\n\n# Run\nCMD [\"/docker-gs-ping\"]\n```\n\n----------------------------------------\n\nTITLE: Python Project .gitignore Configuration\nDESCRIPTION: Standard .gitignore file for Python projects. This configuration excludes common Python artifacts, cache files, virtual environments, and other unnecessary files from version control.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Docker Build and Push\nDESCRIPTION: YAML configuration file for GitHub Actions that defines a workflow to build and push Docker images to Docker Hub. The workflow authenticates with Docker Hub, sets up Docker Buildx for multi-platform builds, and pushes the image with appropriate tags.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/configure-ci-cd.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest\n```\n\n----------------------------------------\n\nTITLE: Checking Node Status in Docker Swarm\nDESCRIPTION: Verifies the status and availability of all nodes in a Docker Swarm cluster. Shows the current state of each node including whether they are active and which one is the leader.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/drain-node.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker node ls\n```\n\n----------------------------------------\n\nTITLE: Python Application Dockerfile Configuration\nDESCRIPTION: Dockerfile for a Python application using a slim Python image. It configures a non-privileged user, installs dependencies from requirements.txt, and sets up the application to run with uvicorn on port 8001.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\n# Comments are provided throughout this file to help you get started.\n# If you need more help, visit the Dockerfile reference guide at\n# https://docs.docker.com/go/dockerfile-reference/\n\n# Want to help us make this template better? Share your feedback here: https://   forms.gle/ybq9Krt8jtBL3iCk7\n\nARG PYTHON_VERSION=3.11.4\nFROM python:${PYTHON_VERSION}-slim as base\n\n# Prevents Python from writing pyc files.\nENV PYTHONDONTWRITEBYTECODE=1\n\n# Keeps Python from buffering stdout and stderr to avoid situations where\n# the application crashes without emitting any logs due to buffering.\nENV PYTHONUNBUFFERED=1\n\nWORKDIR /app\n\n# Create a non-privileged user that the app will run under.\n# See https://docs.docker.com/go/dockerfile-user-best-practices/\nARG UID=10001\nRUN adduser \\\n    --disabled-password \\\n    --gecos \"\" \\\n    --home \"/nonexistent\" \\\n    --shell \"/sbin/nologin\" \\\n    --no-create-home \\\n    --uid \"${UID}\" \\\n    appuser\n\n# Download dependencies as a separate step to take advantage of Docker's    caching.\n# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.\n# Leverage a bind mount to requirements.txt to avoid having to copy them into\n# into this layer.\nRUN --mount=type=cache,target=/root/.cache/pip \\\n    --mount=type=bind,source=requirements.txt,target=requirements.txt \\\n    python -m pip install -r requirements.txt\n\n# Switch to the non-privileged user to run the application.\nUSER appuser\n\n# Copy the source code into the container.\nCOPY . .\n\n# Expose the port that the application listens on.\nEXPOSE 8001\n\n# Run the application.\nCMD python3 -m uvicorn app:app --host=0.0.0.0 --port=8001\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Kubernetes Deployment\nDESCRIPTION: YAML configuration for deploying PostgreSQL database to Kubernetes, including Deployment, Service, PersistentVolumeClaim, and Secret resources. Sets up a database instance with persistent storage and secure password management.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n        - name: postgres\n          image: postgres\n          ports:\n            - containerPort: 5432\n          env:\n            - name: POSTGRES_DB\n              value: example\n            - name: POSTGRES_USER\n              value: postgres\n            - name: POSTGRES_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secret\n                  key: POSTGRES_PASSWORD\n          volumeMounts:\n            - name: postgres-data\n              mountPath: /var/lib/postgresql/data\n      volumes:\n        - name: postgres-data\n          persistentVolumeClaim:\n            claimName: postgres-pvc\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres\n  namespace: default\nspec:\n  ports:\n    - port: 5432\n  selector:\n    app: postgres\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: postgres-pvc\n  namespace: default\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: postgres-secret\n  namespace: default\ntype: Opaque\ndata:\n  POSTGRES_PASSWORD: cG9zdGdyZXNfcGFzc3dvcmQ=\n```\n\n----------------------------------------\n\nTITLE: Using Docker Build Cloud for Multi-Platform Builds\nDESCRIPTION: Demonstrates how to create and use a cloud-based builder from Docker Build Cloud to build and push multi-platform images using native builders without maintaining the infrastructure.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create --driver cloud <ORG>/<BUILDER_NAME>\ncloud-<ORG>-<BUILDER_NAME>\n$ docker build \\\n  --builder cloud-<ORG>-<BUILDER_NAME> \\\n  --platform linux/amd64,linux/arm64,linux/arm/v7 \\\n  --tag <IMAGE_NAME> \\\n  --push .\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with s3cmd (Help Command)\nDESCRIPTION: This console command demonstrates how to run a Docker container based on the s3cmd image. With no arguments specified, it will display the help information due to the default CMD in the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ docker run s3cmd\n```\n\n----------------------------------------\n\nTITLE: Build-time Secrets in Docker Compose\nDESCRIPTION: An example showing how to use secrets during the build process. The NPM_TOKEN environment variable is made available as a secret during container build time, useful for accessing private package repositories securely.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/use-secrets.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myapp:\n    build:\n      secrets:\n        - npm_token\n      context: .\n\nsecrets:\n  npm_token:\n    environment: NPM_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Repository on RHEL\nDESCRIPTION: These commands install the dnf-plugins-core package, which provides commands to manage DNF repositories, and then add the official Docker repository to your system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/rhel.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf -y install dnf-plugins-core\n$ sudo dnf config-manager --add-repo {{% param \"download-url-base\" %}}/docker-ce.repo\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Desktop Settings with admin-settings.json\nDESCRIPTION: A comprehensive example of an admin-settings.json file that specifies locked and default configurations for Docker Desktop. This snippet demonstrates the proper JSON structure and includes settings for security features, proxy configurations, container isolation, Linux VM settings, Kubernetes options, and more.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/settings-management/configure-json-file.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configurationFileVersion\": 2,\n  \"exposeDockerAPIOnTCP2375\": {\n    \"locked\": true,\n    \"value\": false\n  },\n  \"proxy\": {\n    \"locked\": true,\n    \"mode\": \"system\",\n    \"http\": \"\",\n    \"https\": \"\",\n    \"exclude\": [],\n    \"windowsDockerdPort\": 65000,\n    \"enableKerberosNtlm\": false\n  },\n  \"containersProxy\": {\n    \"locked\": true,\n    \"mode\": \"manual\",\n    \"http\": \"\",\n    \"https\": \"\",\n    \"exclude\": [],\n    \"pac\":\"\",\n    \"transparentPorts\": \"\"\n  },\n  \"enhancedContainerIsolation\": {\n    \"locked\": true,\n    \"value\": true,\n    \"dockerSocketMount\": {\n      \"imageList\": {\n        \"images\": [\n          \"docker.io/localstack/localstack:*\",\n          \"docker.io/testcontainers/ryuk:*\"\n        ]\n      },\n      \"commandList\": {\n        \"type\": \"deny\",\n        \"commands\": [\"push\"]\n      }\n    }\n  },\n  \"linuxVM\": {\n    \"wslEngineEnabled\": {\n      \"locked\": false,\n      \"value\": false\n    },\n    \"dockerDaemonOptions\": {\n      \"locked\": false,\n      \"value\":\"{\\\"debug\\\": false}\"\n    },\n    \"vpnkitCIDR\": {\n      \"locked\": false,\n      \"value\":\"192.168.65.0/24\"\n    }\n  },\n  \"kubernetes\": {\n     \"locked\": false,\n     \"enabled\": false,\n     \"showSystemContainers\": false,\n     \"imagesRepository\": \"\"\n  },\n  \"windowsContainers\": {\n    \"dockerDaemonOptions\": {\n      \"locked\": false,\n      \"value\":\"{\\\"debug\\\": false}\"\n    }\n  },\n  \"disableUpdate\": {\n    \"locked\": false,\n    \"value\": false\n  },\n  \"analyticsEnabled\": {\n    \"locked\": false,\n    \"value\": true\n  },\n  \"extensionsEnabled\": {\n    \"locked\": true,\n    \"value\": false\n  },\n  \"scout\": {\n    \"locked\": false,\n    \"sbomIndexing\": true,\n    \"useBackgroundIndexing\": true\n  },\n  \"allowExperimentalFeatures\": {\n    \"locked\": false,\n    \"value\": false\n  },\n  \"allowBetaFeatures\": {\n    \"locked\": false,\n    \"value\": false\n  },\n  \"blockDockerLoad\": {\n    \"locked\": false,\n    \"value\": true\n  },\n  \"filesharingAllowedDirectories\": [\n    {\n      \"path\": \"$HOME\",\n      \"sharedByDefault\": true\n    },\n    {\n      \"path\":\"$TMP\",\n      \"sharedByDefault\": false\n    }\n  ],\n  \"useVirtualizationFrameworkVirtioFS\": {\n    \"locked\": true,\n    \"value\": true\n  },\n  \"useVirtualizationFrameworkRosetta\": {\n    \"locked\": true,\n    \"value\": true\n  },\n  \"useGrpcfuse\": {\n    \"locked\": true,\n    \"value\": true\n  },\n  \"displayedOnboarding\": {\n    \"locked\": true,\n    \"value\": true\n  },\n  \"desktopTerminalEnabled\": {\n    \"locked\": false,\n    \"value\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Python Application Dockerfile\nDESCRIPTION: A Dockerfile for a Python application that specifies the Python version, sets environment variables, creates a non-privileged user, installs dependencies, and configures the application to run with proper security practices.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\n# Comments are provided throughout this file to help you get started.\n# If you need more help, visit the Dockerfile reference guide at\n# https://docs.docker.com/go/dockerfile-reference/\n\n# Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7\n\nARG PYTHON_VERSION=3.11.4\nFROM python:${PYTHON_VERSION}-slim AS base\n\n# Prevents Python from writing pyc files.\nENV PYTHONDONTWRITEBYTECODE=1\n\n# Keeps Python from buffering stdout and stderr to avoid situations where\n# the application crashes without emitting any logs due to buffering.\nENV PYTHONUNBUFFERED=1\n\nWORKDIR /app\n\n# Create a non-privileged user that the app will run under.\n# See https://docs.docker.com/go/dockerfile-user-best-practices/\nARG UID=10001\nRUN adduser \\\n    --disabled-password \\\n    --gecos \"\" \\\n    --home \"/nonexistent\" \\\n    --shell \"/sbin/nologin\" \\\n    --no-create-home \\\n    --uid \"${UID}\" \\\n    appuser\n\n# Download dependencies as a separate step to take advantage of Docker's caching.\n# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.\n# Leverage a bind mount to requirements.txt to avoid having to copy them into\n# into this layer.\nRUN --mount=type=cache,target=/root/.cache/pip \\\n    --mount=type=bind,source=requirements.txt,target=requirements.txt \\\n    python -m pip install -r requirements.txt\n\n# Switch to the non-privileged user to run the application.\nUSER appuser\n\n# Copy the source code into the container.\nCOPY . .\n\n# Expose the port that the application listens on.\nEXPOSE 8000\n\n# Run the application.\nCMD python3 -m uvicorn app:app --host=0.0.0.0 --port=8000\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Integrated Test Stage\nDESCRIPTION: Multi-stage Dockerfile that includes test execution during the build phase. The configuration includes development and production stages with proper security considerations.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/run-tests.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build\nARG TARGETARCH\nCOPY . /source\nWORKDIR /source/src\nRUN --mount=type=cache,id=nuget,target=/root/.nuget/packages \\\n    dotnet publish -a ${TARGETARCH/amd64/x64} --use-current-runtime --self-contained false -o /app\nRUN dotnet test /source/tests\n\nFROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS development\nCOPY . /source\nWORKDIR /source/src\nCMD dotnet run --no-launch-profile\n\nFROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS final\nWORKDIR /app\nCOPY --from=build /app .\nARG UID=10001\nRUN adduser \\\n    --disabled-password \\\n    --gecos \"\" \\\n    --home \"/nonexistent\" \\\n    --shell \"/sbin/nologin\" \\\n    --no-create-home \\\n    --uid \"${UID}\" \\\n    appuser\nUSER appuser\nENTRYPOINT [\"dotnet\", \"myWebApp.dll\"]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Rust Application with PostgreSQL\nDESCRIPTION: Defines a Docker Compose configuration with two services: a Rust server application and a PostgreSQL database. The configuration includes environment variables, port mapping, volume management, and health checks for service dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# https://github.com/docker/awesome-compose\nservices:\n  server:\n    build:\n      context: .\n      target: final\n    ports:\n      - 8000:8000\n    environment:\n      - PG_DBNAME=example\n      - PG_HOST=db\n      - PG_USER=postgres\n      - PG_PASSWORD=mysecretpassword\n      - ADDRESS=0.0.0.0:8000\n      - RUST_LOG=debug\n    # The commented out section below is an example of how to define a PostgreSQL\n    # database that your application can use. `depends_on` tells Docker Compose to\n    # start the database before your application. The `db-data` volume persists the\n    # database data between container restarts. The `db-password` secret is used\n    # to set the database password. You must create `db/password.txt` and add\n    # a password of your choosing to it before running `docker compose up`.\n    depends_on:\n      db:\n        condition: service_healthy\n  db:\n    image: postgres\n    restart: always\n    user: postgres\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=example\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    expose:\n      - 5432\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Service via HTTP POST Request\nDESCRIPTION: This snippet shows how to create a Docker service using an HTTP POST request to the /services/create endpoint. It includes a detailed JSON payload for service configuration and an example response.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_102\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/services/create HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Name\": \"web\",\n  \"TaskTemplate\": {\n    \"ContainerSpec\": {\n      \"Image\": \"nginx:alpine\",\n      \"Mounts\": [\n        {\n          \"ReadOnly\": true,\n          \"Source\": \"web-data\",\n          \"Target\": \"/usr/share/nginx/html\",\n          \"Type\": \"volume\",\n          \"VolumeOptions\": {\n            \"DriverConfig\": {\n            },\n            \"Labels\": {\n              \"com.example.something\": \"something-value\"\n            }\n          }\n        }\n      ],\n      \"User\": \"33\"\n    },\n    \"Networks\": [\n        {\n          \"Target\": \"overlay1\"\n        }\n    ],\n    \"LogDriver\": {\n      \"Name\": \"json-file\",\n      \"Options\": {\n        \"max-file\": \"3\",\n        \"max-size\": \"10M\"\n      }\n    },\n    \"Placement\": {\n      \"Constraints\": [\n        \"node.role == worker\"\n      ]\n    },\n    \"Resources\": {\n      \"Limits\": {\n        \"MemoryBytes\": 104857600\n      },\n      \"Reservations\": {\n      }\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"on-failure\",\n      \"Delay\": 10000000000,\n      \"MaxAttempts\": 10\n    }\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 4\n    }\n  },\n  \"UpdateConfig\": {\n    \"Delay\": 30000000000,\n    \"Parallelism\": 2,\n    \"FailureAction\": \"pause\"\n  },\n  \"EndpointSpec\": {\n    \"Ports\": [\n      {\n        \"Protocol\": \"tcp\",\n        \"PublishedPort\": 8080,\n        \"TargetPort\": 80\n      }\n    ]\n  },\n  \"Labels\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Type: application/json\n\n{\n  \"ID\":\"ak7w3gjqoa3kuz8xcpnyy0pvl\"\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Ignore Configuration\nDESCRIPTION: Dockerignore file configuration to exclude unnecessary files and directories from the Docker build context.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/containerize.md#2025-04-11_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n**/.classpath\n**/.dockerignore\n**/.env\n**/.git\n**/.gitignore\n**/.project\n**/.settings\n**/.toolstarget\n**/.vs\n**/.vscode\n**/.next\n**/.cache\n**/*.*proj.user\n**/*.dbmdl\n**/*.jfm\n**/charts\n**/docker-compose*\n**/compose.y*ml\n**/Dockerfile*\n**/node_modules\n**/npm-debug.log\n**/obj\n**/secrets.dev.yaml\n**/values.dev.yaml\n**/build\n**/dist\nLICENSE\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Testing Docker Images Before Push\nDESCRIPTION: This GitHub Actions workflow demonstrates how to validate a Docker image before pushing it to a registry. It uses docker/build-push-action to first build the image locally for testing, then builds and pushes multi-platform images to Docker Hub. The workflow includes environment variables for tags, authentication, and utilizes Docker Buildx for multi-platform support.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/test-before-push.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\nenv:\n  TEST_TAG: user/app:test\n  LATEST_TAG: user/app:latest\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and export to Docker\n        uses: docker/build-push-action@v6\n        with:\n          load: true\n          tags: ${{ env.TEST_TAG }}\n\n      - name: Test\n        run: |\n          docker run --rm ${{ env.TEST_TAG }}\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: ${{ env.LATEST_TAG }}\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration\nDESCRIPTION: Final Docker Compose YAML configuration defining both the Node.js application and MySQL services with their respective configurations, volumes, and environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/08_using_compose.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: node:18-alpine\n    command: sh -c \"yarn install && yarn run dev\"\n    ports:\n      - 127.0.0.1:3000:3000\n    working_dir: /app\n    volumes:\n      - ./:/app\n    environment:\n      MYSQL_HOST: mysql\n      MYSQL_USER: root\n      MYSQL_PASSWORD: secret\n      MYSQL_DB: todos\n\n  mysql:\n    image: mysql:8.0\n    volumes:\n      - todo-mysql-data:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n      MYSQL_DATABASE: todos\n\nvolumes:\n  todo-mysql-data:\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Application Kubernetes Deployment\nDESCRIPTION: YAML configuration for deploying a Python FastAPI application to Kubernetes, including Deployment and NodePort Service resources. Sets up the application with database connectivity and exposes it on port 30001.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: docker-python-demo\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      service: fastapi\n  template:\n    metadata:\n      labels:\n        service: fastapi\n    spec:\n      containers:\n        - name: fastapi-service\n          image: DOCKER_USERNAME/REPO_NAME\n          imagePullPolicy: Always\n          env:\n            - name: POSTGRES_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: postgres-secret\n                  key: POSTGRES_PASSWORD\n            - name: POSTGRES_USER\n              value: postgres\n            - name: POSTGRES_DB\n              value: example\n            - name: POSTGRES_SERVER\n              value: postgres\n            - name: POSTGRES_PORT\n              value: \"5432\"\n          ports:\n            - containerPort: 8001\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: service-entrypoint\n  namespace: default\nspec:\n  type: NodePort\n  selector:\n    service: fastapi\n  ports:\n    - port: 8001\n      targetPort: 8001\n      nodePort: 30001\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Content Trust Enabled\nDESCRIPTION: These console commands show how to build a Docker image with Content Trust enabled. It demonstrates both successful and failed builds depending on the trust status of the base image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_automation.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$  docker build -t docker/trusttest:testing .\nUsing default tag: latest\nlatest: Pulling from docker/trusttest\n\nb3dbab3810fc: Pull complete\na9539b34a6ab: Pull complete\nDigest: sha256:d149ab53f871\n```\n\nLANGUAGE: console\nCODE:\n```\n$  docker build -t docker/trusttest:testing .\nunable to process Dockerfile: No trust data for notrust\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating to Project Directory for Multi-Platform Build\nDESCRIPTION: Console commands to create an empty directory for the multi-platform Docker build example and navigate to it.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir multi-platform\n$ cd multi-platform\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for PHP Docker Image CI/CD\nDESCRIPTION: YAML configuration for a GitHub Actions workflow that builds, tests, and pushes a Docker image for a PHP application to Docker Hub. It includes steps for logging into Docker Hub, setting up Docker Buildx, and performing multi-architecture builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/configure-ci-cd.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and test\n        uses: docker/build-push-action@v6\n        with:\n          target: test\n          load: true\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          target: final\n          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Platform Docker Images with Buildx\nDESCRIPTION: Demonstrates how to build Docker images for multiple platforms (linux/amd64 and linux/arm64) using the docker buildx build command with the --platform flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --platform linux/amd64,linux/arm64 .\n```\n\n----------------------------------------\n\nTITLE: Basic Node.js Application Dockerfile\nDESCRIPTION: A simple Dockerfile for a Node.js application that demonstrates the typical layer structure. It uses node:20-alpine as the base image, sets up a working directory, copies application files, installs production dependencies, and specifies the command to run the application.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/using-the-build-cache.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:20-alpine\nWORKDIR /app\nCOPY . .\nRUN yarn install --production\nCMD [\"node\", \"./src/index.js\"]\n```\n\n----------------------------------------\n\nTITLE: Restricting Container Access by IP\nDESCRIPTION: IPTables rules to restrict external access to containers by specific IP addresses or ranges.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\niptables -I DOCKER-USER -i ext_if ! -s 192.0.2.2 -j DROP\n```\n\nLANGUAGE: bash\nCODE:\n```\niptables -I DOCKER-USER -i ext_if ! -s 192.0.2.0/24 -j DROP\n```\n\nLANGUAGE: bash\nCODE:\n```\niptables -I DOCKER-USER -m iprange -i ext_if ! --src-range 192.0.2.1-192.0.2.3 -j DROP\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Dependencies and Health Checks in Docker Compose\nDESCRIPTION: Example Docker Compose configuration showing how to set up service dependencies with health checks. Demonstrates controlling startup order between web, database, and redis services, including healthcheck configuration for PostgreSQL database.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/startup-order.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    depends_on:\n      db:\n        condition: service_healthy\n        restart: true\n      redis:\n        condition: service_started\n  redis:\n    image: redis\n  db:\n    image: postgres\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}\"]\n      interval: 10s\n      retries: 5\n      start_period: 30s\n      timeout: 10s\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for Java Spring Boot Application\nDESCRIPTION: A complete Dockerfile for containerizing a Spring Boot application with multiple stages including dependency resolution, building, extracting layers, and creating a minimal runtime image.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\n# Comments are provided throughout this file to help you get started.\n# If you need more help, visit the Dockerfile reference guide at\n# https://docs.docker.com/go/dockerfile-reference/\n\n# Want to help us make this template better? Share your feedback here: https://forms.gle/ybq9Krt8jtBL3iCk7\n\n################################################################################\n\n# Create a stage for resolving and downloading dependencies.\nFROM eclipse-temurin:21-jdk-jammy as deps\n\nWORKDIR /build\n\n# Copy the mvnw wrapper with executable permissions.\nCOPY --chmod=0755 mvnw mvnw\nCOPY .mvn/ .mvn/\n\n# Download dependencies as a separate step to take advantage of Docker's caching.\n# Leverage a cache mount to /root/.m2 so that subsequent builds don't have to\n# re-download packages.\nRUN --mount=type=bind,source=pom.xml,target=pom.xml \\\n    --mount=type=cache,target=/root/.m2 ./mvnw dependency:go-offline -DskipTests\n\n################################################################################\n\n# Create a stage for building the application based on the stage with downloaded dependencies.\n# This Dockerfile is optimized for Java applications that output an uber jar, which includes\n# all the dependencies needed to run your app inside a JVM. If your app doesn't output an uber\n# jar and instead relies on an application server like Apache Tomcat, you'll need to update this\n# stage with the correct filename of your package and update the base image of the \"final\" stage\n# use the relevant app server, e.g., using tomcat (https://hub.docker.com/_/tomcat/) as a base image.\nFROM deps as package\n\nWORKDIR /build\n\nCOPY ./src src/\nRUN --mount=type=bind,source=pom.xml,target=pom.xml \\\n    --mount=type=cache,target=/root/.m2 \\\n    ./mvnw package -DskipTests && \\\n    mv target/$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout).jar target/app.jar\n\n################################################################################\n\n# Create a stage for extracting the application into separate layers.\n# Take advantage of Spring Boot's layer tools and Docker's caching by extracting\n# the packaged application into separate layers that can be copied into the final stage.\n# See Spring's docs for reference:\n# https://docs.spring.io/spring-boot/docs/current/reference/html/container-images.html\nFROM package as extract\n\nWORKDIR /build\n\nRUN java -Djarmode=layertools -jar target/app.jar extract --destination target/extracted\n\n################################################################################\n\n# Create a new stage for running the application that contains the minimal\n# runtime dependencies for the application. This often uses a different base\n# image from the install or build stage where the necessary files are copied\n# from the install stage.\n#\n# The example below uses eclipse-turmin's JRE image as the foundation for running the app.\n# By specifying the \"17-jre-jammy\" tag, it will also use whatever happens to be the\n# most recent version of that tag when you build your Dockerfile.\n# If reproducibility is important, consider using a specific digest SHA, like\n# eclipse-temurin@sha256:99cede493dfd88720b610eb8077c8688d3cca50003d76d1d539b0efc8cca72b4.\nFROM eclipse-temurin:21-jre-jammy AS final\n\n# Create a non-privileged user that the app will run under.\n# See https://docs.docker.com/go/dockerfile-user-best-practices/\nARG UID=10001\nRUN adduser \\\n    --disabled-password \\\n    --gecos \"\" \\\n    --home \"/nonexistent\" \\\n    --shell \"/sbin/nologin\" \\\n    --no-create-home \\\n    --uid \"${UID}\" \\\n    appuser\nUSER appuser\n\n# Copy the executable from the \"package\" stage.\nCOPY --from=extract build/target/extracted/dependencies/ ./\nCOPY --from=extract build/target/extracted/spring-boot-loader/ ./\nCOPY --from=extract build/target/extracted/snapshot-dependencies/ ./\nCOPY --from=extract build/target/extracted/application/ ./\n\nEXPOSE 8080\n\nENTRYPOINT [ \"java\", \"org.springframework.boot.loader.launch.JarLauncher\" ]\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Version with kubectl\nDESCRIPTION: Command to verify the installed version of Kubernetes using the kubectl CLI tool\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/kubernetes.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl version\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Node.js Docker CI/CD\nDESCRIPTION: YAML configuration for a GitHub Actions workflow that logs into Docker Hub, sets up Docker Buildx, builds and tests the application, and then builds and pushes multi-architecture images to Docker Hub.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/configure-ci-cd.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and test\n        uses: docker/build-push-action@v6\n        with:\n          target: test\n          load: true\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          target: prod\n          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest\n```\n\n----------------------------------------\n\nTITLE: Creating BuildKit Builder with CNI Support\nDESCRIPTION: Console commands to build the CNI-enabled BuildKit image and create a builder instance with CNI networking configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/configure.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --tag buildkit-cni:local --load .\n$ docker buildx create --use --bootstrap \\\n  --name mybuilder \\\n  --driver docker-container \\\n  --driver-opt \"image=buildkit-cni:local\" \\\n  --buildkitd-flags \"--oci-worker-net=cni\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Service Configuration in Docker Compose\nDESCRIPTION: This example shows a more complex service setup with a proxy service using Nginx and a backend service built from a Dockerfile. It demonstrates volume mounting, port mapping, service dependencies, and build configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  proxy:\n    image: nginx\n    volumes:\n      - type: bind\n        source: ./proxy/nginx.conf\n        target: /etc/nginx/conf.d/default.conf\n        read_only: true\n    ports:\n      - 80:80\n    depends_on:\n      - backend\n\n  backend:\n    build:\n      context: backend\n      target: builder\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for Optimized Go Application\nDESCRIPTION: A multi-stage Dockerfile that first builds a Go application in a build stage, then creates a test stage for running tests. This approach allows creating smaller, more secure production images.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_17\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\n# Build the application from source\nFROM golang:1.19 AS build-stage\n\nWORKDIR /app\n\nCOPY go.mod go.sum ./\nRUN go mod download\n\nCOPY *.go ./\n\nRUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping\n\n# Run the tests in the container\nFROM build-stage AS run-test-stage\nRUN go test -v ./...\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with Database and Volume Persistence\nDESCRIPTION: This Compose file defines a complete PHP development environment with a MariaDB database service, volume persistence for database data, and secure password handling through Docker secrets.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 9000:80\n    depends_on:\n      db:\n        condition: service_healthy\n    secrets:\n      - db-password\n    environment:\n      - PASSWORD_FILE_PATH=/run/secrets/db-password\n      - DB_HOST=db\n      - DB_NAME=example\n      - DB_USER=root\n  db:\n    image: mariadb\n    restart: always\n    user: root\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/mysql\n    environment:\n      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/db-password\n      - MARIADB_DATABASE=example\n    expose:\n      - 3306\n    healthcheck:\n      test:\n        [\n          \"CMD\",\n          \"/usr/local/bin/healthcheck.sh\",\n          \"--su-mysql\",\n          \"--connect\",\n          \"--innodb_initialized\",\n        ]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Compose Watch in docker-compose.yaml\nDESCRIPTION: This YAML snippet shows the addition of Compose Watch instructions to the docker-compose.yaml file for automatic service updates.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n      target: development\n    ports:\n      - 8080:8080\n      - 8000:8000\n    depends_on:\n      db:\n        condition: service_healthy\n    environment:\n      - POSTGRES_URL=jdbc:postgresql://db:5432/petclinic\n    develop:\n      watch:\n        - action: rebuild\n          path: .\n  db:\n    image: postgres\n    restart: always\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=petclinic\n      - POSTGRES_USER=petclinic\n      - POSTGRES_PASSWORD=petclinic\n    ports:\n      - 5432:5432\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"petclinic\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: Build a Docker image from the Dockerfile in the current directory, tagging it with your Docker username.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/build-and-push-first-image.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t <DOCKER_USERNAME>/getting-started-todo-app .\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Content Trust Signature Verification in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure trustpinning in the daemon.json file to enable Docker Content Trust signature verification. This feature allows administrators to enforce and perform image signature verification, ensuring only repositories signed with a user-specified root key can be pulled and run.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"daemon.json\": {\n  \"content-trust\": {\n    \"trust-pinning\": {\n      \"root-keys\": [\"user-specified-root-key\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping a Docker Container\nDESCRIPTION: Stop a running container using the docker stop command followed by the container name or ID, which halts the process inside the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker stop inspiring_ishizaka\ninspiring_ishizaka\n```\n\n----------------------------------------\n\nTITLE: Joining a Worker Node to Docker Swarm\nDESCRIPTION: This command joins a worker node to a Docker swarm. It uses the token provided by the manager node and specifies the manager's address to connect to the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/join-nodes.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker swarm join \\\n  --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \\\n  192.168.99.100:2377\n\nThis node joined a swarm as a worker.\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Docker Build Cloud Configuration\nDESCRIPTION: GitLab CI pipeline configuration that sets up Docker Build Cloud environment with DinD service, configures Buildx, and provides jobs for both pushing images and cache-only builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefault:\n  image: docker:24-dind\n  services:\n    - docker:24-dind\n  before_script:\n    - docker info\n    - echo \"$DOCKER_PAT\" | docker login --username \"$DOCKER_USER\" --password-stdin\n    - |\n      apk add curl jq\n      ARCH=${CI_RUNNER_EXECUTABLE_ARCH#*/}\n      BUILDX_URL=$(curl -s https://raw.githubusercontent.com/docker/actions-toolkit/main/.github/buildx-lab-releases.json | jq -r \".latest.assets[] | select(endswith(\\\"linux-$ARCH\\\"))\")\n      mkdir -vp ~/.docker/cli-plugins/\n      curl --silent -L --output ~/.docker/cli-plugins/docker-buildx $BUILDX_URL\n      chmod a+x ~/.docker/cli-plugins/docker-buildx\n    - docker buildx create --use --driver cloud ${DOCKER_ORG}/default\n\nvariables:\n  IMAGE_NAME: <IMAGE>\n  DOCKER_ORG: <ORG>\n\nbuild_push:\n  stage: build\n  script:\n    - |\n      docker buildx build \\\n        --platform linux/amd64,linux/arm64 \\\n        --tag \"${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}\" \\\n        --push .\n\nbuild_cache:\n  stage: build\n  script:\n    - |\n      docker buildx build \\\n        --platform linux/amd64,linux/arm64 \\\n        --tag \"${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}\" \\\n        --output type=cacheonly \\\n        .\n```\n\n----------------------------------------\n\nTITLE: Mounting Volumes with Docker Run (Basic Syntax)\nDESCRIPTION: Shows the basic syntax for mounting a volume in a Docker container using either the --mount or --volume flag. The --mount approach is generally preferred as it's more explicit and supports all options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --mount type=volume,src=<volume-name>,dst=<mount-path>\n$ docker run --volume <volume-name>:<mount-path>\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Application Container Image using Dockerfile\nDESCRIPTION: This Dockerfile creates a container image for a Python application. It sets up the environment, installs dependencies, copies source code, exposes a port, creates a non-root user, and specifies the startup command.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/writing-a-dockerfile.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.12\nWORKDIR /usr/local/app\n\n# Install the application dependencies\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy in the source code\nCOPY src ./src\nEXPOSE 5000\n\n# Setup an app user so the container doesn't run as the root user\nRUN useradd app\nUSER app\n\nCMD [\"uvicorn\", \"app.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Docker Packages\nDESCRIPTION: Command to install the latest version of Docker Engine and related packages\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating a Service from a Private Registry Image in Docker Swarm\nDESCRIPTION: Creates a service using an image from a private registry by passing login credentials to swarm nodes using the --with-registry-auth flag. This allows nodes to authenticate and pull the required image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker login registry.example.com\n\n$ docker service  create \\\n  --with-registry-auth \\\n  --name my_service \\\n  registry.example.com/acme/my_image:latest\n```\n\n----------------------------------------\n\nTITLE: Dockerignore Example for Excluding Markdown Files\nDESCRIPTION: Example of a .dockerignore pattern that excludes all Markdown files from the build context. This helps reduce the build context size and improve build performance.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n*.md\n```\n\n----------------------------------------\n\nTITLE: Starting and Enabling Docker Engine Service on CentOS\nDESCRIPTION: Command to start the Docker Engine service and enable it to start automatically at system boot using systemd.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/centos.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo systemctl enable --now docker\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Python Flask Application\nDESCRIPTION: A complete Dockerfile that builds a container image for a Python Flask application. It starts from an Ubuntu base image, installs Python dependencies, copies the application code, and configures the environment to run the Flask server.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM ubuntu:22.04\n\n# install app dependencies\nRUN apt-get update && apt-get install -y python3 python3-pip\nRUN pip install flask==3.0.*\n\n# install app\nCOPY hello.py /\n\n# final configuration\nENV FLASK_APP=hello\nEXPOSE 8000\nCMD [\"flask\", \"run\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Multistage Dockerfile for Ruby on Rails Applications\nDESCRIPTION: A production-ready multistage Dockerfile for a Ruby on Rails application. It builds the application in stages to create a smaller final image, installs dependencies, precompiles assets, and sets up a non-root user for security. The Docker image uses the Thruster server for production deployment.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n# check=error=true\n\n# This Dockerfile is designed for production, not development.\n# docker build -t app .\n# docker run -d -p 80:80 -e RAILS_MASTER_KEY=<value from config/master.key> --name app app\n\n# For a containerized dev environment, see Dev Containers: https://guides.rubyonrails.org/getting_started_with_devcontainer.html\n\n# Make sure RUBY_VERSION matches the Ruby version in .ruby-version\nARG RUBY_VERSION=3.3.6\nFROM docker.io/library/ruby:$RUBY_VERSION-slim AS base\n\n# Rails app lives here\nWORKDIR /rails\n\n# Install base packages\n# Replace libpq-dev with sqlite3 if using SQLite, or libmysqlclient-dev if using MySQL\nRUN apt-get update -qq && \\\n    apt-get install --no-install-recommends -y curl libjemalloc2 libvips libpq-dev && \\\n    rm -rf /var/lib/apt/lists /var/cache/apt/archives\n\n# Set production environment\nENV RAILS_ENV=\"production\" \\\n    BUNDLE_DEPLOYMENT=\"1\" \\\n    BUNDLE_PATH=\"/usr/local/bundle\" \\\n    BUNDLE_WITHOUT=\"development\"\n\n# Throw-away build stage to reduce size of final image\nFROM base AS build\n\n# Install packages needed to build gems\nRUN apt-get update -qq && \\\n    apt-get install --no-install-recommends -y build-essential curl git pkg-config libyaml-dev && \\\n    rm -rf /var/lib/apt/lists /var/cache/apt/archives\n\n# Install JavaScript dependencies and Node.js for asset compilation\n#\n# Uncomment the following lines if you are using NodeJS need to compile assets\n#\n# ARG NODE_VERSION=18.12.0\n# ARG YARN_VERSION=1.22.19\n# ENV PATH=/usr/local/node/bin:$PATH\n# RUN curl -sL https://github.com/nodenv/node-build/archive/master.tar.gz | tar xz -C /tmp/ && \\\n#     /tmp/node-build-master/bin/node-build \"${NODE_VERSION}\" /usr/local/node && \\\n#     npm install -g yarn@$YARN_VERSION && \\\n#     npm install -g mjml && \\\n#     rm -rf /tmp/node-build-master\n\n# Install application gems\nCOPY Gemfile Gemfile.lock ./\nRUN bundle install && \\\n    rm -rf ~/.bundle/ \"${BUNDLE_PATH}\"/ruby/*/cache \"${BUNDLE_PATH}\"/ruby/*/bundler/gems/*/.git && \\\n    bundle exec bootsnap precompile --gemfile\n\n# Install node modules\n#\n# Uncomment the following lines if you are using NodeJS need to compile assets\n#\n# COPY package.json yarn.lock ./\n# RUN --mount=type=cache,id=yarn,target=/rails/.cache/yarn YARN_CACHE_FOLDER=/rails/.cache/yarn \\\n#     yarn install --frozen-lockfile\n\n# Copy application code\nCOPY . .\n\n# Precompile bootsnap code for faster boot times\nRUN bundle exec bootsnap precompile app/ lib/\n\n# Precompiling assets for production without requiring secret RAILS_MASTER_KEY\nRUN SECRET_KEY_BASE_DUMMY=1 ./bin/rails assets:precompile\n\n# Final stage for app image\nFROM base\n\n# Copy built artifacts: gems, application\nCOPY --from=build \"${BUNDLE_PATH}\" \"${BUNDLE_PATH}\"\nCOPY --from=build /rails /rails\n\n# Run and own only the runtime files as a non-root user for security\nRUN groupadd --system --gid 1000 rails && \\\n    useradd rails --uid 1000 --gid 1000 --create-home --shell /bin/bash && \\\n    chown -R rails:rails db log storage tmp\nUSER 1000:1000\n\n# Entrypoint prepares the database.\nENTRYPOINT [\"/rails/bin/docker-entrypoint\"]\n\n# Start server via Thruster by default, this can be overwritten at runtime\nEXPOSE 80\nCMD [\"./bin/thrust\", \"./bin/rails\", \"server\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for .NET App with Database\nDESCRIPTION: This YAML configuration sets up services for a .NET server and a PostgreSQL database, including volume persistence and secrets management.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n      target: final\n    ports:\n      - 8080:8080\n    depends_on:\n      db:\n        condition: service_healthy\n  db:\n    image: postgres\n    restart: always\n    user: postgres\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=example\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    expose:\n      - 5432\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Installing QEMU for Multi-Platform Build Emulation\nDESCRIPTION: Uses the tonistiigi/binfmt image to install QEMU and register all executable types on the host system, enabling emulation for building multi-platform images.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --privileged --rm tonistiigi/binfmt --install all\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: File structure of the RAG application showing the main components including app directory, tools directory, and configuration files.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rag-ollama/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n├── winy/\n│ ├── .gitignore\n│ ├── app/\n│ │ ├── main.py\n│ │ ├── Dockerfile\n| | └── requirements.txt\n│ ├── tools/\n│ │ ├── create_db.py\n│ │ ├── create_embeddings.py\n│ │ ├── requirements.txt\n│ │ ├── test.py\n| | └── download_model.sh\n│ ├── docker-compose.yaml\n│ ├── wine_database.db\n│ ├── LICENSE\n│ └── README.md\n```\n\n----------------------------------------\n\nTITLE: Creating a Lean Docker Image with Multi-stage Build for Go Application\nDESCRIPTION: This Dockerfile defines the second stage of a multi-stage build, copying only the compiled binary from the build stage into a minimal distroless base image. It sets up proper working directory, exposed port, and runs as a non-root user for better security.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_18\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM gcr.io/distroless/base-debian11 AS build-release-stage\n\nWORKDIR /\n\nCOPY --from=build-stage /docker-gs-ping /docker-gs-ping\n\nEXPOSE 8080\n\nUSER nonroot:nonroot\n\nENTRYPOINT [\"/docker-gs-ping\"]\n```\n\n----------------------------------------\n\nTITLE: Nginx Production Dockerfile Configuration\nDESCRIPTION: Multi-stage Dockerfile for Nginx web server that includes asset building capabilities and serves the Laravel application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# docker/nginx/Dockerfile\n# Stage 1: Build assets\nFROM debian AS builder\n\n# Install Node.js and build tools\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    curl \\\n    nodejs \\\n    npm \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Set working directory\nWORKDIR /var/www\n\n# Copy Laravel application code\nCOPY . /var/www\n\n# Install Node.js dependencies and build assets\nRUN npm install && npm run build\n\n# Stage 2: Nginx production image\nFROM nginx:alpine\n\n# Copy custom Nginx configuration\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Rust Application\nDESCRIPTION: Builds a Docker image for the Rust application using the previously created Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t rust-backend-image .\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Node.js Application\nDESCRIPTION: Dockerfile configuration to build a Node.js application image using node:lts-alpine as the base image, copying source code, installing dependencies, and configuring the container runtime.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/02_our_app.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM node:lts-alpine\nWORKDIR /app\nCOPY . .\nRUN yarn install --production\nCMD [\"node\", \"src/index.js\"]\nEXPOSE 3000\n```\n\n----------------------------------------\n\nTITLE: JavaScript Database Seeding Script\nDESCRIPTION: Node.js script that uses dotenv for environment variables and pg for PostgreSQL connections. It creates a todos table and populates it with sample data using async/await for database operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nrequire('dotenv').config();  // Load environment variables from .env file\nconst { Pool } = require('pg');\n\n// Create a new pool using environment variables\nconst pool = new Pool({\n  user: process.env.POSTGRES_USER,\n  host: process.env.POSTGRES_DB_HOST,\n  database: process.env.POSTGRES_DB,\n  port: process.env.POSTGRES_PORT,\n  password: process.env.POSTGRES_PASSWORD,\n});\n\nconst seedData = async () => {\n  try {\n     // Drop the table if it already exists (optional)\n     await pool.query(`DROP TABLE IF EXISTS todos;`);\n\n     // Create the table with the correct structure\n     await pool.query(`\n       CREATE TABLE todos (\n         id SERIAL PRIMARY KEY,\n         task VARCHAR(255) NOT NULL,\n         completed BOOLEAN DEFAULT false\n           );\n     `   );\n\n     // Insert seed data\n     await pool.query(`\n       INSERT INTO todos (task, completed) VALUES\n       ('Watch netflix', false),\n       ('Finish podcast', false),\n       ('Pick up kid', false);\n       `);\n       console.log('Database seeded successfully!');\n     } catch (err) {\n       console.error('Error seeding the database', err);\n     } finally {\n       pool.end();\n    }\n  };\n\n  // Call the seedData function to run the script\n  seedData();\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Stable Docker Release on Linux\nDESCRIPTION: This code snippet shows how to download and execute the Docker installation script to install the latest stable release of Docker on a Linux system. It requires root or sudo privileges.\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/install-script.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -fsSL https://get.docker.com -o get-docker.sh\n$ sudo sh get-docker.sh\nExecuting docker install script, commit: 7cae5f8b0decc17d6571f9f52eb840fbc13b2737\n<...>\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Repository URL in Git Console\nDESCRIPTION: Command to change the Git remote URL to point to a newly created GitHub repository. This prepares your local repository for pushing code to GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/configure-ci-cd.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git remote set-url origin https://github.com/your-username/your-repository.git\n```\n\n----------------------------------------\n\nTITLE: Simple Python Flask Application\nDESCRIPTION: A minimal 'Hello World' Flask application written in Python that responds to HTTP requests on the root endpoint with the message 'Hello World!'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#2025-04-11_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n```\n\n----------------------------------------\n\nTITLE: Basic Multi-platform Docker Build with GitHub Actions\nDESCRIPTION: GitHub Actions workflow that sets up QEMU and Buildx to build and push multi-platform Docker images for AMD64 and ARM64 architectures.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/multi-platform.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: user/app:latest\n```\n\n----------------------------------------\n\nTITLE: Vite Development Server Output\nDESCRIPTION: Console output showing the successful start of the Vite development server, including local access URL and available commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nVITE v5.4.2  ready in 110 ms\n➜  Local: http://localhost:5173/\n➜  Network: use --host to expose\n➜  press h + enter to show help\n```\n\n----------------------------------------\n\nTITLE: Deploying C++ Application to Kubernetes with kubectl\nDESCRIPTION: Command to apply the Kubernetes configuration file and the expected output showing successful creation of deployment and service resources.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f docker-kubernetes.yml\n```\n\nLANGUAGE: text\nCODE:\n```\ndeployment.apps/docker-c-plus-plus-demo created\nservice/service-entrypoint created\n```\n\n----------------------------------------\n\nTITLE: Configuring Compose Watch with Sync+Restart Action\nDESCRIPTION: This YAML snippet demonstrates how to use the 'sync+restart' action in Compose Watch. It shows configuration for a web service with both 'sync' and 'sync+restart' actions for different file types.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/file-watch.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    command: npm start\n    develop:\n      watch:\n        - action: sync\n          path: ./web\n          target: /app/web\n          ignore:\n            - node_modules/\n        - action: sync+restart\n          path: ./proxy/nginx.conf\n          target: /etc/nginx/conf.d/default.conf\n\n  backend:\n    build:\n      context: backend\n      target: builder\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Python Docker Image CI/CD\nDESCRIPTION: YAML configuration for a GitHub Actions workflow that builds a Docker image for a Python application and pushes it to Docker Hub. The workflow handles login authentication, sets up Docker Buildx for multi-platform builds, and pushes the image with appropriate tags.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/configure-ci-cd.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest\n```\n\n----------------------------------------\n\nTITLE: Verifying ENV Variable Persistence in Docker Container\nDESCRIPTION: Command to verify that environment variables set with ENV persist in the container even after attempting to unset them in the Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm test sh -c 'echo $ADMIN_USER'\n\nmark\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Compose Watch Compatibility\nDESCRIPTION: This Dockerfile snippet demonstrates how to set up a Node.js application container for use with Compose Watch. It includes creating a non-privileged user, installing dependencies, and copying source files with the correct ownership.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/file-watch.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Run as a non-privileged user\nFROM node:18\nRUN useradd -ms /bin/sh -u 1001 app\nUSER app\n\n# Install dependencies\nWORKDIR /app\nCOPY package.json package-lock.json ./\nRUN npm install\n\n# Copy source files into application directory\nCOPY --chown=app:app . /app\n```\n\n----------------------------------------\n\nTITLE: Requesting Weather Data with cURL\nDESCRIPTION: cURL command to fetch weather data for Bengaluru city from the local server which communicates with the AccuWeather API.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ curl \"http://localhost:5000/api/v1/getWeather?city=Bengaluru\"\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Compose Files for Production Configuration\nDESCRIPTION: This command demonstrates how to use multiple Compose files to apply production-specific configurations. It combines the base compose.yaml file with a production-specific compose.production.yaml file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/production.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f compose.yaml -f compose.production.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Service Application with Docker Compose\nDESCRIPTION: Basic Compose file that defines two services: a web service built from the local Dockerfile and a Redis service using the official Redis Alpine image from Docker Hub. Maps port 8000 on the host to port 5000 in the web container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    ports:\n      - \"8000:5000\"\n  redis:\n    image: \"redis:alpine\"\n```\n\n----------------------------------------\n\nTITLE: Building a Compliant Image with Attestations\nDESCRIPTION: Command to build and push an improved image with provenance and SBOM attestations enabled, which enhances policy evaluation results.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --provenance=true --sbom=true --push -t <ORG_NAME>/scout-demo:v3 .\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Entity Recognition in Python\nDESCRIPTION: Process user input text to identify and print named entities using spaCy.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    while True:\n        input_text = input(\"Enter the text for entity recognition (type 'exit' to end): \")\n        if input_text.lower() == 'exit':\n            print(\"Exiting...\")\n            break\n        doc = nlp(input_text)\n        for ent in doc.ents:\n            print(f\"Entity: {ent.text}, Type: {ent.label_}\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation with Hello-World\nDESCRIPTION: This command runs the hello-world container as a simple test to verify that Docker Engine is properly installed and functioning. If successful, it will print a confirmation message.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/fedora.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Daemon with TLS Verification\nDESCRIPTION: Launches the Docker daemon with TLS verification enabled, using the generated certificates and keys to secure the Docker API endpoint.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ dockerd \\\n    --tlsverify \\\n    --tlscacert=ca.pem \\\n    --tlscert=server-cert.pem \\\n    --tlskey=server-key.pem \\\n    -H=0.0.0.0:2376\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container - Multiple Implementations\nDESCRIPTION: Demonstrates how to run a container with 'alpine' image and execute 'echo hello world' command using different SDKs. Includes error handling, image pulling, container creation, execution, and log retrieval.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/docker/docker/api/types/container\"\n\t\"github.com/docker/docker/api/types/image\"\n\t\"github.com/docker/docker/client\"\n\t\"github.com/docker/docker/pkg/stdcopy\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tcli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer cli.Close()\n\n\treader, err := cli.ImagePull(ctx, \"docker.io/library/alpine\", image.PullOptions{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer reader.Close()\n\tio.Copy(os.Stdout, reader)\n\n\tresp, err := cli.ContainerCreate(ctx, &container.Config{\n\t\tImage: \"alpine\",\n\t\tCmd:   []string{\"echo\", \"hello world\"},\n\t\tTty:   false,\n\t}, nil, nil, nil, \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := cli.ContainerStart(ctx, resp.ID, container.StartOptions{}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tstatusCh, errCh := cli.ContainerWait(ctx, resp.ID, container.WaitConditionNotRunning)\n\tselect {\n\tcase err := <-errCh:\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\tcase <-statusCh:\n\t}\n\n\tout, err := cli.ContainerLogs(ctx, resp.ID, container.LogsOptions{ShowStdout: true})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tstdcopy.StdCopy(os.Stdout, os.Stderr, out)\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport docker\nclient = docker.from_env()\nprint(client.containers.run(\"alpine\", [\"echo\", \"hello\", \"world\"]))\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --unix-socket /var/run/docker.sock -H \"Content-Type: application/json\" \\\n  -d '{\"Image\": \"alpine\", \"Cmd\": [\"echo\", \"hello world\"]}' \\\n  -X POST http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/create\ncurl --unix-socket /var/run/docker.sock -X POST http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/1c6594faf5/start\ncurl --unix-socket /var/run/docker.sock -X POST http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/1c6594faf5/wait\ncurl --unix-socket /var/run/docker.sock \"http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/1c6594faf5/logs?stdout=1\"\n```\n\n----------------------------------------\n\nTITLE: Using SSH Mount for Private Git Repository Access\nDESCRIPTION: Dockerfile example showing how to clone a private GitHub repository using SSH authentication with an SSH mount.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine\nADD git@github.com:me/myprivaterepo.git /src/\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes YAML for Node.js Application Deployment\nDESCRIPTION: This YAML configuration defines a Kubernetes Deployment and Service for a Node.js application. The Deployment creates a single replica pod running the containerized application, while the NodePort Service exposes the application on port 30001 externally, routing to port 3000 inside the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: docker-nodejs-demo\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      todo: web\n  template:\n    metadata:\n      labels:\n        todo: web\n    spec:\n      containers:\n        - name: todo-site\n          image: DOCKER_USERNAME/REPO_NAME\n          imagePullPolicy: Always\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: todo-entrypoint\n  namespace: default\nspec:\n  type: NodePort\n  selector:\n    todo: web\n  ports:\n    - port: 3000\n      targetPort: 3000\n      nodePort: 30001\n```\n\n----------------------------------------\n\nTITLE: Override Configuration for Included Services\nDESCRIPTION: Example of a compose.override.yaml file that modifies properties of services imported from included files, such as adding debug ports or changing volume mappings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/include.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  service-1:\n    # override included service-1 to enable debugger port\n    ports:\n      - 2345:2345\n\n  service-2:\n    # override included service-2 to use local data folder containing test data\n    volumes:\n      - ./data:/data\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for Java Development with Debugging Support\nDESCRIPTION: This multi-stage Dockerfile creates both development and production images for a Spring Boot application. The development stage includes configuration for remote debugging on port 8000, while the production stage is optimized for security and minimal size.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM eclipse-temurin:21-jdk-jammy as deps\nWORKDIR /build\nCOPY --chmod=0755 mvnw mvnw\nCOPY .mvn/ .mvn/\nRUN --mount=type=bind,source=pom.xml,target=pom.xml \\\n    --mount=type=cache,target=/root/.m2 ./mvnw dependency:go-offline -DskipTests\n\nFROM deps as package\nWORKDIR /build\nCOPY ./src src/\nRUN --mount=type=bind,source=pom.xml,target=pom.xml \\\n    --mount=type=cache,target=/root/.m2 \\\n    ./mvnw package -DskipTests && \\\n    mv target/$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout).jar target/app.jar\n\nFROM package as extract\nWORKDIR /build\nRUN java -Djarmode=layertools -jar target/app.jar extract --destination target/extracted\n\nFROM extract as development\nWORKDIR /build\nRUN cp -r /build/target/extracted/dependencies/. ./\nRUN cp -r /build/target/extracted/spring-boot-loader/. ./\nRUN cp -r /build/target/extracted/snapshot-dependencies/. ./\nRUN cp -r /build/target/extracted/application/. ./\nENV JAVA_TOOL_OPTIONS -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000\nCMD [ \"java\", \"-Dspring.profiles.active=postgres\", \"org.springframework.boot.loader.launch.JarLauncher\" ]\n\nFROM eclipse-temurin:21-jre-jammy AS final\nARG UID=10001\nRUN adduser \\\n    --disabled-password \\\n    --gecos \"\" \\\n    --home \"/nonexistent\" \\\n    --shell \"/sbin/nologin\" \\\n    --no-create-home \\\n    --uid \"${UID}\" \\\n    appuser\nUSER appuser\nCOPY --from=extract build/target/extracted/dependencies/ ./\nCOPY --from=extract build/target/extracted/spring-boot-loader/ ./\nCOPY --from=extract build/target/extracted/snapshot-dependencies/ ./\nCOPY --from=extract build/target/extracted/application/ ./\nEXPOSE 8080\nENTRYPOINT [ \"java\", \"-Dspring.profiles.active=postgres\", \"org.springframework.boot.loader.launch.JarLauncher\" ]\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Compose Service Status\nDESCRIPTION: Example output of the 'docker compose ps' command, showing the status of services defined in the Compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/intro/compose-application-model.md#2025-04-11_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ docker compose ps\n\nNAME                IMAGE                COMMAND                  SERVICE             CREATED             STATUS              PORTS\nexample-frontend-1  example/webapp       \"nginx -g 'daemon of…\"   frontend            2 minutes ago       Up 2 minutes        0.0.0.0:443->8043/tcp\nexample-backend-1   example/database     \"docker-entrypoint.s…\"   backend             2 minutes ago       Up 2 minutes\n```\n\n----------------------------------------\n\nTITLE: Example of environment variable merging with extends in Docker Compose\nDESCRIPTION: Demonstrates how environment variables are merged when using extends. The main service overrides environment variables from the extended service while preserving non-overridden variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  common:\n    image: busybox\n    environment:\n      TZ: utc\n      PORT: 80\n  cli:\n    extends:\n      service: common\n    environment:\n      PORT: 8080\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Worker Join Token from a Manager Node\nDESCRIPTION: Command to retrieve the join token for worker nodes from an existing swarm manager. This is useful if you don't have the original join command available.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/add-nodes.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm join-token worker\n```\n\n----------------------------------------\n\nTITLE: Running Spring PetClinic with Docker Compose\nDESCRIPTION: These console commands demonstrate how to build and run the Spring PetClinic application using Docker Compose. The first command builds and runs the app in the foreground, while the second runs it detached from the terminal.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build -d\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Building Go Application for Multiple Platforms\nDESCRIPTION: Console command to build the Go application Docker image targeting both AMD64 and ARM64 platforms using the cross-compilation-enabled Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --platform linux/amd64,linux/arm64 -t go-server .\n```\n\n----------------------------------------\n\nTITLE: Pruning All Unused Docker Objects Including Volumes\nDESCRIPTION: This command prunes all unused containers, networks, images, and volumes. It also removes unused build cache. The --volumes flag is used to include volume pruning.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker system prune --volumes\n\nWARNING! This will remove:\n        - all stopped containers\n        - all networks not used by at least one container\n        - all volumes not used by at least one container\n        - all dangling images\n        - all build cache\n\nAre you sure you want to continue? [y/N] y\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies in Dockerfile\nDESCRIPTION: Uses pip to install the Python packages listed in requirements.txt without caching to reduce the Docker image size.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN pip install --no-cache-dir -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: External Image Copy Example\nDESCRIPTION: Demonstrates how to copy files from an external image using COPY --from instruction.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-stage.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image for Rust Application\nDESCRIPTION: Command to build a Docker image from the Dockerfile with the tag 'docker-rust-image' and sample output showing the build process and layers.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/build-images.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --tag docker-rust-image .\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for R Application with PostgreSQL\nDESCRIPTION: Complete Docker Compose file that defines a Shiny application service and a PostgreSQL database service with volume persistence and secrets for password management.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  shiny-app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - 3838:3838\n    environment:\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    depends_on:\n      db:\n        condition: service_healthy\n    secrets:\n      - db-password\n  db:\n    image: postgres\n    restart: always\n    user: postgres\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=example\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    expose:\n      - 5432\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Laravel Development Environment\nDESCRIPTION: A complete Docker Compose configuration file that sets up a Laravel development environment with Nginx, PHP-FPM, workspace, PostgreSQL, and Redis services. The configuration includes volume mounts for live code updates, networking, environment variables, and Xdebug configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/development-setup.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    image: nginx:latest # Using the default Nginx image with custom configuration.\n    volumes:\n      # Mount the application code for live updates\n      - ./:/var/www\n      # Mount the Nginx configuration file\n      - ./docker/development/nginx/nginx.conf:/etc/nginx/nginx.conf:ro\n    ports:\n      # Map port 80 inside the container to the port specified by 'NGINX_PORT' on the host machine\n      - \"80:80\"\n    environment:\n      - NGINX_HOST=localhost\n    networks:\n      - laravel-development\n    depends_on:\n      php-fpm:\n        condition: service_started # Wait for php-fpm to start\n\n  php-fpm:\n    # For the php-fpm service, we will use our common PHP-FPM Dockerfile with the development target\n    build:\n      context: .\n      dockerfile: ./docker/common/php-fpm/Dockerfile\n      target: development\n      args:\n        UID: ${UID:-1000}\n        GID: ${GID:-1000}\n        XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}\n        XDEBUG_MODE: develop,coverage,debug,profile\n        XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}\n        XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}\n        XDEBUG_LOG: /dev/stdout\n        XDEBUG_LOG_LEVEL: 0\n    env_file:\n      # Load the environment variables from the Laravel application\n      - .env\n    user: \"${UID:-1000}:${GID:-1000}\"\n    volumes:\n      # Mount the application code for live updates\n      - ./:/var/www\n    networks:\n      - laravel-development\n    depends_on:\n      postgres:\n        condition: service_started # Wait for postgres to start\n\n  workspace:\n    # For the workspace service, we will also create a custom image to install and setup all the necessary stuff.\n    build:\n      context: .\n      dockerfile: ./docker/development/workspace/Dockerfile\n      args:\n        UID: ${UID:-1000}\n        GID: ${GID:-1000}\n        XDEBUG_ENABLED: ${XDEBUG_ENABLED:-true}\n        XDEBUG_MODE: develop,coverage,debug,profile\n        XDEBUG_HOST: ${XDEBUG_HOST:-host.docker.internal}\n        XDEBUG_IDE_KEY: ${XDEBUG_IDE_KEY:-DOCKER}\n        XDEBUG_LOG: /dev/stdout\n        XDEBUG_LOG_LEVEL: 0\n    tty: true # Enables an interactive terminal\n    stdin_open: true # Keeps standard input open for 'docker exec'\n    env_file:\n      - .env\n    volumes:\n      - ./:/var/www\n    networks:\n      - laravel-development\n\n  postgres:\n    image: postgres:16\n    ports:\n      - \"${POSTGRES_PORT:-5432}:5432\"\n    environment:\n      - POSTGRES_DB=app\n      - POSTGRES_USER=laravel\n      - POSTGRES_PASSWORD=secret\n    volumes:\n      - postgres-data-development:/var/lib/postgresql/data\n    networks:\n      - laravel-development\n\n  redis:\n    image: redis:alpine\n    networks:\n      - laravel-development\n\nnetworks:\n  laravel-development:\n\nvolumes:\n  postgres-data-development:\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ENV Variable Persistence in Docker Layers\nDESCRIPTION: This example shows how environment variables set with ENV persist in the image layer even if unset in a future layer. Each ENV line creates a new intermediate layer similar to RUN commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_19\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine\nENV ADMIN_USER=\"mark\"\nRUN echo $ADMIN_USER > ./mark\nRUN unset ADMIN_USER\n```\n\n----------------------------------------\n\nTITLE: Go Microservice Application Code\nDESCRIPTION: The main.go file for a simple Go HTTP microservice that responds to requests at root path with a greeting and at /health with a JSON status. It uses the Echo web framework and configures the server port via environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, \"Hello, Docker! <3\")\n\t})\n\n\te.GET(\"/health\", func(c echo.Context) error {\n\t\treturn c.JSON(http.StatusOK, struct{ Status string }{Status: \"OK\"})\n\t})\n\n\thttpPort := os.Getenv(\"PORT\")\n\tif httpPort == \"\" {\n\t\thttpPort = \"8080\"\n\t}\n\n\te.Logger.Fatal(e.Start(\":\" + httpPort))\n}\n\n// Simple implementation of an integer minimum\n// Adapted from: https://gobyexample.com/testing-and-benchmarking\nfunc IntMin(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Mounting a Volume with --mount\nDESCRIPTION: Shows a practical example of mounting a volume named 'myvolume' to '/data' in read-only mode with a subdirectory path specified. This example demonstrates multiple volume options used together.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --mount type=volume,src=myvolume,dst=/data,ro,volume-subpath=/foo\n```\n\n----------------------------------------\n\nTITLE: Creating Client Key and Certificate Signing Request\nDESCRIPTION: Generates a client key and Certificate Signing Request (CSR) that will be used for client authentication when connecting to the Docker daemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ openssl genrsa -out key.pem 4096\nGenerating RSA private key, 4096 bit long modulus\n.........................................................++\n................++\ne is 65537 (0x10001)\n\n$ openssl req -subj '/CN=client' -new -key key.pem -out client.csr\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Container from Scratch in Dockerfile\nDESCRIPTION: This Dockerfile example demonstrates creating a minimal container using the 'scratch' base image. It adds a binary named 'hello' to the root directory and sets it as the default command to run.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/base-images.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM scratch\nADD hello /\nCMD [\"/hello\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Flask Application with Redis Counter\nDESCRIPTION: Python application using Flask framework that increments a hit counter stored in Redis each time the application's root endpoint is accessed. Includes retry logic for Redis connection handling.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nimport redis\nfrom flask import Flask\n\napp = Flask(__name__)\ncache = redis.Redis(host='redis', port=6379)\n\ndef get_hit_count():\n    retries = 5\n    while True:\n        try:\n            return cache.incr('hits')\n        except redis.exceptions.ConnectionError as exc:\n            if retries == 0:\n                raise exc\n            retries -= 1\n            time.sleep(0.5)\n\n@app.route('/')\ndef hello():\n    count = get_hit_count()\n    return f'Hello World! I have been seen {count} times.\\n'\n```\n\n----------------------------------------\n\nTITLE: Running Rust Application Container with Database Connection\nDESCRIPTION: Runs the Rust application container on the PostgreSQL network with necessary environment variables for database connection.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run \\\n  --rm -d \\\n  --network postgresnet \\\n  --name docker-develop-rust-container \\\n  -p 3001:8000 \\\n  -e PG_DBNAME=example \\\n  -e PG_HOST=db \\\n  -e PG_USER=postgres \\\n  -e PG_PASSWORD=mysecretpassword \\\n  -e ADDRESS=0.0.0.0:8000 \\\n  -e RUST_LOG=debug \\\n  rust-backend-image\n```\n\n----------------------------------------\n\nTITLE: Running Commands with Pipes in Dockerfile\nDESCRIPTION: Example of using the pipe character in a RUN command to connect multiple operations. This approach executes commands using /bin/sh -c interpreter which only evaluates the exit code of the last operation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_15\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN wget -O - https://some.site | wc -l > /number\n```\n\n----------------------------------------\n\nTITLE: Checking Hyper-V Requirements on Windows\nDESCRIPTION: Demonstrates how to check if a system meets the Hyper-V requirements for Docker Desktop using the systeminfo command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/topics.md#2025-04-11_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nsysteminfo\n```\n\n----------------------------------------\n\nTITLE: Pushing a Docker Image to Docker Hub\nDESCRIPTION: Command to push a Docker image to Docker Hub. This requires being signed in to Docker Hub through Docker Desktop or the command line, and having the image tagged with your Docker Hub username.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/quickstart.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker push <YOUR-USERNAME>/nginx-custom\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Application\nDESCRIPTION: Command to build and run the containerized PHP application using Docker Compose in the foreground.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/containerize.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Testing Go Application with HTTP Requests\nDESCRIPTION: These curl commands test the Go application by sending GET and POST requests to retrieve and store messages in the CockroachDB database.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost\n\ncurl --request POST \\\n  --url http://localhost/send \\\n  --header 'content-type: application/json' \\\n  --data '{\"value\": \"Hello, Docker!\"}'\n\ncurl --request POST \\\n  --url http://localhost/send \\\n  --header 'content-type: application/json' \\\n  --data '{\"value\": \"Hello, Oliver!\"}'\n\ncurl localhost\n```\n\n----------------------------------------\n\nTITLE: Git Repository Configuration Commands\nDESCRIPTION: Commands for configuring and pushing local repository to GitHub, including changing remote origin and committing changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/configure-ci-cd.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git remote set-url origin https://github.com/your-username/your-repository.git\n```\n\nLANGUAGE: console\nCODE:\n```\n$ git add -A\n$ git commit -m \"my commit\"\n$ git push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation\nDESCRIPTION: Command to verify Docker installation by running the hello-world container\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Using Cache Mounts with Node.js in Dockerfile\nDESCRIPTION: Example of using a cache mount with npm to persist the npm cache directory across builds, reducing download time for unchanged packages.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#2025-04-11_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:latest\nWORKDIR /app\nRUN --mount=type=cache,target=/root/.npm npm install\n```\n\n----------------------------------------\n\nTITLE: Deploying an Application to Kubernetes with kubectl\nDESCRIPTION: This command applies the Kubernetes YAML configuration file to create the described resources (Deployment and Service) in the Kubernetes cluster. The output confirms that both objects were created successfully.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kube-deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl apply -f bb.yaml\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Go Application\nDESCRIPTION: This Docker command builds an image for the Go application using the Dockerfile in the current directory and tags it as 'docker-gs-ping-roach'.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --tag docker-gs-ping-roach .\n```\n\n----------------------------------------\n\nTITLE: Retrieving Objects with GET Request\nDESCRIPTION: A curl command that demonstrates how to make a GET request to retrieve all hero objects from the API endpoint.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\ncurl -X 'GET' \\\n  'http://localhost:8001/heroes/' \\\n  -H 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images with HTTP API\nDESCRIPTION: Demonstrates making a direct HTTP request to the Docker API to list all images. The response contains detailed information about each image in JSON format.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ curl --unix-socket /var/run/docker.sock http://localhost/v{{% param \"latest_engine_api_version\" %}}/images/json\n[{\n  \"Id\":\"sha256:31d9a31e1dd803470c5a151b8919ef1988ac3efd44281ac59d43ad623f275dcd\",\n  \"ParentId\":\"sha256:ee4603260daafe1a8c2f3b78fd760922918ab2441cbb2853ed5c439e59c52f96\",\n  ...\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Service Development Environment with Docker Compose\nDESCRIPTION: Example compose-dev.yaml file that defines a development environment with backend, database, and proxy services. It demonstrates how to configure build contexts, environment variables, volumes, secrets, and service dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/set-up.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.7\"\nservices:\n  backend:\n    build:\n      context: backend\n      target: development\n    secrets:\n      - db-password\n    depends_on:\n      - db\n  db:\n    image: mariadb\n    restart: always\n    healthcheck:\n      test: [ \"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"127.0.0.1\", \"--silent\" ]\n      interval: 3s\n      retries: 5\n      start_period: 30s\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/mysql\n    environment:\n      - MYSQL_DATABASE=example\n      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-password\n    expose:\n      - 3306\n  proxy:\n    build: proxy\n    ports:\n      - 8080:80\n    depends_on:\n      - backend\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Simple Secret Configuration in Docker Compose\nDESCRIPTION: A basic example showing how to define a secret in a Compose file and give a service access to it. The secret's content is read from a local file and mounted at /run/secrets/my_secret in the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/use-secrets.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myapp:\n    image: myapp:latest\n    secrets:\n      - my_secret\nsecrets:\n  my_secret:\n    file: ./my_secret.txt\n```\n\n----------------------------------------\n\nTITLE: Docker Ignore File for Node.js\nDESCRIPTION: Content for .dockerignore file that excludes node_modules directory from being copied to the Docker image. This prevents unnecessary duplication of dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/using-the-build-cache.md#2025-04-11_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Container Application with Docker Compose\nDESCRIPTION: Example Compose file (compose.yaml) defining a multi-container application with frontend and backend services, networks, volumes, configs, and secrets.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/intro/compose-application-model.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    ports:\n      - \"443:8043\"\n    networks:\n      - front-tier\n      - back-tier\n    configs:\n      - httpd-config\n    secrets:\n      - server-certificate\n\n  backend:\n    image: example/database\n    volumes:\n      - db-data:/etc/data\n    networks:\n      - back-tier\n\nvolumes:\n  db-data:\n    driver: flocker\n    driver_opts:\n      size: \"10GiB\"\n\nconfigs:\n  httpd-config:\n    external: true\n\nsecrets:\n  server-certificate:\n    external: true\n\nnetworks:\n  # The presence of these objects is sufficient to define them\n  front-tier: {}\n  back-tier: {}\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for PHP Test Environment\nDESCRIPTION: Dockerfile configuration that sets up multiple stages for development, testing, and production environments. Includes stages for installing dependencies, configuring PHP, and running tests.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/run-tests.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM composer:lts as prod-deps\nWORKDIR /app\nRUN --mount=type=bind,source=./composer.json,target=composer.json \\\n    --mount=type=bind,source=./composer.lock,target=composer.lock \\\n    --mount=type=cache,target=/tmp/cache \\\n    composer install --no-dev --no-interaction\n\nFROM composer:lts as dev-deps\nWORKDIR /app\nRUN --mount=type=bind,source=./composer.json,target=composer.json \\\n    --mount=type=bind,source=./composer.lock,target=composer.lock \\\n    --mount=type=cache,target=/tmp/cache \\\n    composer install --no-interaction\n\nFROM php:8.2-apache as base\nRUN docker-php-ext-install pdo pdo_mysql\nCOPY ./src /var/www/html\n\nFROM base as development\nCOPY ./tests /var/www/html/tests\nRUN mv \"$PHP_INI_DIR/php.ini-development\" \"$PHP_INI_DIR/php.ini\"\nCOPY --from=dev-deps app/vendor/ /var/www/html/vendor\n\nFROM development as test\nWORKDIR /var/www/html\nRUN ./vendor/bin/phpunit tests/HelloWorldTest.php\n\nFROM base as final\nRUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"\nCOPY --from=prod-deps app/vendor/ /var/www/html/vendor\nUSER www-data\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Bake Target in HCL\nDESCRIPTION: Shows how to define a basic target in a docker-bake.hcl file with dockerfile, tags and context properties.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/targets.md#2025-04-11_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"webapp\" {\n  dockerfile = \"webapp.Dockerfile\"\n  tags = [\"docker.io/username/webapp:latest\"]\n  context = \"https://github.com/username/webapp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose Configuration for Golang, Prometheus, and Grafana\nDESCRIPTION: This YAML configuration defines three services: a Golang API, Prometheus for metrics collection, and Grafana for visualization. It includes network configuration, volume management, and service-specific settings for monitoring and development.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/compose.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  api:\n    container_name: go-api\n    build:\n      context: .\n      dockerfile: Dockerfile\n    image: go-api:latest\n    ports:\n      - 8000:8000\n    networks:\n      - go-network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    develop:\n      watch:\n        - path: .\n          action: rebuild\n      \n  prometheus:\n    container_name: prometheus\n    image: prom/prometheus:v2.55.0\n    volumes:\n      - ./Docker/prometheus.yml:/etc/prometheus/prometheus.yml\n    ports:\n      - 9090:9090\n    networks:\n      - go-network\n  \n  grafana:\n    container_name: grafana\n    image: grafana/grafana:11.3.0\n    volumes:\n      - ./Docker/grafana.yml:/etc/grafana/provisioning/datasources/datasource.yaml\n      - grafana-data:/var/lib/grafana\n    ports:\n      - 3000:3000\n    networks:\n      - go-network\n    environment:\n      - GF_SECURITY_ADMIN_USER=admin\n      - GF_SECURITY_ADMIN_PASSWORD=password\n\nvolumes:\n  grafana-data:\n\nnetworks:\n  go-network:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Creating a Replicated Service in Docker Swarm\nDESCRIPTION: Creates a web service running nginx with 3 replicas distributed across the swarm. This is the default service mode that runs a specified number of identical tasks across the cluster.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_28\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --name my_web \\\n  --replicas 3 \\\n  nginx\n```\n\n----------------------------------------\n\nTITLE: Viewing Container Details for Service Tasks with Docker CLI\nDESCRIPTION: Demonstrates using the docker ps command on a specific node to see detailed information about the container running a service task, including container ID, image, command, and status.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/inspect-service.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n[worker2]$ docker ps\n\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\ne609dde94e47        alpine:latest       \"ping docker.com\"   3 minutes ago       Up 3 minutes                            helloworld.1.8p1vev3fq5zm0mi8g0as41w35\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Docker Build Cache with C Program Dockerfile\nDESCRIPTION: This Dockerfile example shows a basic setup for building a C program, illustrating how different instructions translate to image layers and affect the build cache.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM ubuntu:latest\n\nRUN apt-get update && apt-get install -y build-essentials\nCOPY main.c Makefile /src/\nWORKDIR /src/\nRUN make build\n```\n\n----------------------------------------\n\nTITLE: Using MySQL CLI Inside a Container\nDESCRIPTION: Example of connecting to MySQL from within the container shell and listing all databases. This demonstrates how to perform database operations after accessing the container shell.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# mysql -u root -p\nEnter password: my-secret-pw\n\nmysql> SHOW DATABASES;\n\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mydb               |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n5 rows in set (0.00 sec)\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik in Docker Compose\nDESCRIPTION: Docker Compose configuration for Traefik that exposes port 80 and mounts the Docker socket to enable container discovery and automatic routing configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  proxy:\n    image: traefik:v3.1.2\n    command: --providers.docker\n    ports:\n      - 80:80\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Setting Git Remote URL for GitHub Repository\nDESCRIPTION: Command to update the Git remote URL to point to the newly created GitHub repository. Replace 'your-username' and 'your-repository' with actual values.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/configure-ci-cd.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote set-url origin https://github.com/your-username/your-repository.git\n```\n\n----------------------------------------\n\nTITLE: Bake Configuration for All Binary Variants\nDESCRIPTION: This HCL snippet creates a matrix build for exporting all binary variants, including both release and debug modes for multiple platforms. It uses inheritance and matrix expansion.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_12\n\nLANGUAGE: HCL\nCODE:\n```\ntarget \"bin-all\" {\n  inherits = [\"bin-cross\"]\n  matrix = {\n    mode = [\"release\", \"debug\"]\n  }\n  name = \"bin-${mode}\"\n  args = {\n    BUILD_TAGS = mode\n  }\n  output = [\"build/bin/${mode}\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Worker Join Token in Docker Swarm\nDESCRIPTION: This command retrieves the join token for worker nodes in a Docker swarm. It's executed on a manager node and provides the necessary command to join a worker node to the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/join-nodes.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker swarm join-token worker\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join \\\n    --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \\\n    192.168.99.100:2377\n```\n\n----------------------------------------\n\nTITLE: Pushing Images to Registry\nDESCRIPTION: Different approaches to pushing built images to a container registry using registry and image exporters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --tag <registry>/<image> --push .\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build \\\n  --output type=image,name=<registry>/<image>,push=true .\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build \\\n  --output type=registry,name=<registry>/<image> .\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for .NET Docker CI/CD\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow that authenticates with Docker Hub, sets up Docker Buildx, builds and tests the application, and then builds and pushes the final multi-platform Docker image to Docker Hub.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/configure-ci-cd.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and test\n        uses: docker/build-push-action@v6\n        with:\n          target: build\n          load: true\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          target: final\n          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest\n```\n\n----------------------------------------\n\nTITLE: Cross-Compilation Dockerfile for Multi-Platform Builds\nDESCRIPTION: A Dockerfile that demonstrates cross-compilation using multi-stage builds with the special BUILDPLATFORM and TARGETPLATFORM build arguments that are automatically provided by BuildKit.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM --platform=$BUILDPLATFORM golang:alpine AS build\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nRUN echo \"I am running on $BUILDPLATFORM, building for $TARGETPLATFORM\" > /log\nFROM alpine\nCOPY --from=build /log /log\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment and Service Configuration for Bun Application\nDESCRIPTION: YAML configuration that defines a Kubernetes Deployment and NodePort Service for a Bun application. The Deployment manages a pod running the Bun container, while the Service exposes the application on port 30001.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: docker-bun-demo\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: bun-api\n  template:\n    metadata:\n      labels:\n        app: bun-api\n    spec:\n      containers:\n       - name: bun-api\n         image: DOCKER_USERNAME/REPO_NAME\n         imagePullPolicy: Always\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: service-entrypoint\n  namespace: default\nspec:\n  type: NodePort\n  selector:\n    app: bun-api\n  ports:\n  - port: 3000\n    targetPort: 3000\n    nodePort: 30001\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Custom Seccomp Profile\nDESCRIPTION: This command demonstrates how to run a Docker container with a custom seccomp profile by using the --security-opt flag to specify the path to a JSON profile file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/seccomp.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm \\\n             -it \\\n             --security-opt seccomp=/path/to/seccomp/profile.json \\\n             hello-world\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Bake Build Targets\nDESCRIPTION: HCL configuration file for Docker Bake that defines build targets for local and multi-platform builds. Includes variable definitions, metadata handling, and platform specifications for ARM and AMD64 architectures.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/multi-platform.md#2025-04-11_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"DEFAULT_TAG\" {\n  default = \"app:local\"\n}\n\n// Special target: https://github.com/docker/metadata-action#bake-definition\ntarget \"docker-metadata-action\" {\n  tags = [\"${DEFAULT_TAG}\"]\n}\n\n// Default target if none specified\ngroup \"default\" {\n  targets = [\"image-local\"]\n}\n\ntarget \"image\" {\n  inherits = [\"docker-metadata-action\"]\n}\n\ntarget \"image-local\" {\n  inherits = [\"image\"]\n  output = [\"type=docker\"]\n}\n\ntarget \"image-all\" {\n  inherits = [\"image\"]\n  platforms = [\n    \"linux/amd64\",\n    \"linux/arm/v6\",\n    \"linux/arm/v7\",\n    \"linux/arm64\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Annotation Levels in GitHub Actions Workflow\nDESCRIPTION: This workflow demonstrates how to configure the annotation levels using the DOCKER_METADATA_ANNOTATIONS_LEVELS environment variable. It sets up annotations for both manifest and index levels, which allows metadata to be attached to different components of the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/annotations.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\nenv:\n  IMAGE_NAME: user/app\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.IMAGE_NAME }}\n        env:\n          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          tags: ${{ steps.meta.outputs.tags }}\n          annotations: ${{ steps.meta.outputs.annotations }}\n          push: true\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: Console command to list Docker images after building the application, showing the Redis image pulled from Docker Hub and the custom web image built from the Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker image ls\n\nREPOSITORY        TAG           IMAGE ID      CREATED        SIZE\ncomposetest_web   latest        e2c21aa48cc1  4 minutes ago  93.8MB\npython            3.4-alpine    84e6077c7ab6  7 days ago     82.5MB\nredis             alpine        9d8fa9aa0e5b  3 weeks ago    27.5MB\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Deployment Status\nDESCRIPTION: Command to check the status of Kubernetes deployments. This helps verify that the Java application deployment is running as expected with the correct number of replicas.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/deploy.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get deployments\n```\n\n----------------------------------------\n\nTITLE: Listing Containers on Current Node\nDESCRIPTION: This command shows the containers running on the current node (in this case, manager1). It displays details such as container ID, image, command, creation time, status, and name.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/scale-service.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps\n\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n528d68040f95        alpine:latest       \"ping docker.com\"   About a minute ago   Up About a minute                       helloworld.4.auky6trawmdlcne8ad8phb0f1\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific GPU Devices in Docker Compose\nDESCRIPTION: Example YAML configuration showing how to access specific GPU devices by their IDs. This configuration targets GPU devices 0 and 3 for use with a TensorFlow container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/gpu-support.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  test:\n    image: tensorflow/tensorflow:latest-gpu\n    command: python -c \"import tensorflow as tf;tf.test.gpu_device_name()\"\n    deploy:\n      resources:\n        reservations:\n          devices:\n          - driver: nvidia\n            device_ids: ['0', '3']\n            capabilities: [gpu]\n```\n\n----------------------------------------\n\nTITLE: Simple Dockerfile with Ubuntu Base Image\nDESCRIPTION: Basic Dockerfile example that uses Ubuntu 24.04 as a base image and installs Python 3. This demonstrates a simple build that would benefit from regular rebuilding to incorporate security updates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM ubuntu:24.04\nRUN apt-get -y update && apt-get install -y --no-install-recommends python3\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Java Application\nDESCRIPTION: A Docker Compose file that defines the service configuration for running the containerized Java application, including port mapping and build context.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Comments are provided throughout this file to help you get started.\n# If you need more help, visit the Docker Compose reference guide at\n# https://docs.docker.com/go/compose-spec-reference/\n\n# Here the instructions define your application as a service called \"server\".\n# This service is built from the Dockerfile in the current directory.\n# You can add other services your application may depend on here, such as a\n# database or a cache. For examples, see the Awesome Compose repository:\n# https://github.com/docker/awesome-compose\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 8080:8080\n# The commented out section below is an example of how to define a PostgreSQL\n# database that your application can use. `depends_on` tells Docker Compose to\n# start the database before your application. The `db-data` volume persists the\n# database data between container restarts. The `db-password` secret is used\n# to set the database password. You must create `db/password.txt` and add\n# a password of your choosing to it before running `docker compose up`.\n#     depends_on:\n#       db:\n#         condition: service_healthy\n#   db:\n#     image: postgres\n#     restart: always\n#     user: postgres\n#     secrets:\n#       - db-password\n#     volumes:\n#       - db-data:/var/lib/postgresql/data\n#     environment:\n#       - POSTGRES_DB=example\n#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n#     expose:\n#       - 5432\n#     healthcheck:\n#       test: [ \"CMD\", \"pg_isready\" ]\n#       interval: 10s\n#       timeout: 5s\n#       retries: 5\n# volumes:\n#   db-data:\n# secrets:\n#   db-password:\n#     file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Running Docker Scout Quickview Analysis on Traefik Image\nDESCRIPTION: This command uses the Docker Scout CLI to perform a quick vulnerability analysis on the latest Traefik image, showing a summary of vulnerabilities found in the image and its base image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/analysis.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker scout quickview traefik:latest\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Custom MySQL Image\nDESCRIPTION: A Dockerfile that builds a custom MySQL image with environment variable settings and initialization scripts. It uses mysql:latest as a base image and copies SQL initialization scripts to be executed when the container starts.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_13\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\n# Use the base image mysql:latest\nFROM mysql:latest\n\n# Set environment variables\nENV MYSQL_DATABASE mydb\n\n# Copy custom scripts or configuration files from your host to the container\nCOPY ./scripts/ /docker-entrypoint-initdb.d/\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Container with Port Mapping for Host Access\nDESCRIPTION: Command to run a MySQL container with port mapping that allows host applications to connect. The -p flag maps host port 3307 to container port 3306.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -p 3307:3306 --name my-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -e MYSQL_DATABASE=mydb -d mysql:latest\n```\n\n----------------------------------------\n\nTITLE: Using Volumes with Docker Compose\nDESCRIPTION: Demonstrates how to define and use volumes in a Docker Compose file, including referencing externally created volumes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: node:lts\n    volumes:\n      - myapp:/home/node/app\nvolumes:\n  myapp:\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: node:lts\n    volumes:\n      - myapp:/home/node/app\nvolumes:\n  myapp:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for .NET Web App with PostgreSQL Database\nDESCRIPTION: A Docker Compose configuration that sets up a .NET application server with a PostgreSQL database. The compose file includes development settings like watch mode for automatic rebuilding, environment variables configuration, and database health checking with volume persistence.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/develop.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n      target: development\n    ports:\n      - 8080:8080\n    depends_on:\n      db:\n        condition: service_healthy\n    develop:\n      watch:\n        - action: rebuild\n          path: .\n    environment:\n      - ASPNETCORE_ENVIRONMENT=Development\n  db:\n    image: postgres\n    restart: always\n    user: postgres\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=example\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    expose:\n      - 5432\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Pulling a Docker Image with Python SDK\nDESCRIPTION: Shows how to pull a Docker image using the Docker Python SDK. The code pulls the Alpine image and prints its ID.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nimport docker\nclient = docker.from_env()\nimage = client.images.pull(\"alpine\")\nprint(image.id)\n```\n\n----------------------------------------\n\nTITLE: Downloading Ollama Model with Script\nDESCRIPTION: Command to run the download_model.sh script to pull a specific model into the Ollama service.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rag-ollama/develop.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n. ./download_model.sh <model-name>\n```\n\n----------------------------------------\n\nTITLE: PHP-FPM Production Dockerfile Configuration\nDESCRIPTION: Multi-stage Dockerfile for PHP-FPM container that builds dependencies and creates an optimized production image with necessary PHP extensions and configurations for Laravel.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Stage 1: Build environment and Composer dependencies\nFROM php:8.3-fpm AS builder\n\n# Install system dependencies and PHP extensions for Laravel with MySQL/PostgreSQL support.\n# Dependencies in this stage are only required for building the final image.\n# Node.js and asset building are handled in the Nginx stage, not here.\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    curl \\\n    unzip \\\n    libpq-dev \\\n    libonig-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libcurl4-openssl-dev \\\n    libicu-dev \\\n    libzip-dev \\\n    && docker-php-ext-install -j$(nproc) \\\n    pdo_mysql \\\n    pdo_pgsql \\\n    pgsql \\\n    opcache \\\n    intl \\\n    zip \\\n    bcmath \\\n    soap \\\n    && pecl install redis \\\n    && docker-php-ext-enable redis \\\n    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Set the working directory inside the container\nWORKDIR /var/www\n\n# Copy the entire Laravel application code into the container\nCOPY . /var/www\n\n# Install Composer and dependencies\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \\\n    && composer install --no-dev --optimize-autoloader --no-interaction --no-progress --prefer-dist\n\n# Stage 2: Production environment\nFROM php:8.3-fpm\n\n# Install only runtime libraries needed in production\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libpq-dev \\\n    libicu-dev \\\n    libzip-dev \\\n    libfcgi-bin \\\n    procps \\\n    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Download and install php-fpm health check script\nRUN curl -o /usr/local/bin/php-fpm-healthcheck \\\n    https://raw.githubusercontent.com/renatomefi/php-fpm-healthcheck/master/php-fpm-healthcheck \\\n    && chmod +x /usr/local/bin/php-fpm-healthcheck\n\n# Copy the initialization script\nCOPY ./docker/php-fpm/entrypoint.sh /usr/local/bin/entrypoint.sh\nRUN chmod +x /usr/local/bin/entrypoint.sh\n\n# Copy the initial storage structure\nCOPY ./storage /var/www/storage-init\n\n# Copy PHP extensions and libraries from the builder stage\nCOPY --from=builder /usr/local/lib/php/extensions/ /usr/local/lib/php/extensions/\nCOPY --from=builder /usr/local/etc/php/conf.d/ /usr/local/etc/php/conf.d/\nCOPY --from=builder /usr/local/bin/docker-php-ext-* /usr/local/bin/\n\nRUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"\n\nRUN sed -i '/\\[www\\]/a pm.status_path = /status' /usr/local/etc/php-fpm.d/zz-docker.conf\n\nCOPY --from=builder /var/www /var/www\n\nWORKDIR /var/www\n\nRUN chown -R www-data:www-data /var/www\n\nUSER www-data\n\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n\nEXPOSE 9000\nCMD [\"php-fpm\"]\n```\n\n----------------------------------------\n\nTITLE: Chaining Commands in RUN Instruction with Line Continuation\nDESCRIPTION: Example showing how to chain commands with && and use backslashes for line continuation to improve readability of complex RUN instructions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    package-bar \\\n    package-baz \\\n    package-foo\n```\n\n----------------------------------------\n\nTITLE: Updating Git Remote URL in Bash\nDESCRIPTION: Command to update the Git remote URL to point to a new GitHub repository. This is used to link the local repository to the newly created GitHub repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/configure-ci-cd.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote set-url origin https://github.com/your-username/your-repository.git\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Containerized Application\nDESCRIPTION: Command to build and run the Docker containerized application using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/containerize.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Well-formed RUN Instruction with apt-get Best Practices\nDESCRIPTION: Complete example demonstrating all recommended apt-get practices including combining update and install, cleaning caches, and version pinning.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_14\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    aufs-tools \\\n    automake \\\n    build-essential \\\n    curl \\\n    dpkg-sig \\\n    libcap-dev \\\n    libsqlite3-dev \\\n    mercurial \\\n    reprepro \\\n    ruby1.9.1 \\\n    ruby1.9.1-dev \\\n    s3cmd=1.1.* \\\n    && rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Double Dollar Sign Usage in Docker Compose\nDESCRIPTION: Demonstrates how to use double dollar signs ($$) to prevent Compose from interpolating environment variables, allowing literal dollar signs in the configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/interpolation.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nweb:\n  build: .\n  command: \"$$VAR_NOT_INTERPOLATED_BY_COMPOSE\"\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers\nDESCRIPTION: This command lists all running containers, showing their IDs, images, commands, creation time, status, ports, and names. It confirms both alpine containers are running.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker container ls\n\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n602dbf1edc81        alpine              \"ash\"               4 seconds ago       Up 3 seconds                            alpine2\nda33b7aa74b0        alpine              \"ash\"               17 seconds ago      Up 16 seconds                           alpine1\n```\n\n----------------------------------------\n\nTITLE: Go Test Output in Docker Build Process\nDESCRIPTION: This is the console output showing the results of running Go tests during the Docker build process. It displays the test execution and shows that all tests have passed.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-tests.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n#13 [run-test-stage 1/1] RUN go test -v ./...\n#13 4.915 === RUN   TestIntMinBasic\n#13 4.915 --- PASS: TestIntMinBasic (0.00s)\n#13 4.915 === RUN   TestIntMinTableDriven\n#13 4.915 === RUN   TestIntMinTableDriven/0,1\n#13 4.915 === RUN   TestIntMinTableDriven/1,0\n#13 4.915 === RUN   TestIntMinTableDriven/2,-2\n#13 4.915 === RUN   TestIntMinTableDriven/0,-1\n#13 4.915 === RUN   TestIntMinTableDriven/-1,0\n#13 4.915 --- PASS: TestIntMinTableDriven (0.00s)\n#13 4.915     --- PASS: TestIntMinTableDriven/0,1 (0.00s)\n#13 4.915     --- PASS: TestIntMinTableDriven/1,0 (0.00s)\n#13 4.915     --- PASS: TestIntMinTableDriven/2,-2 (0.00s)\n#13 4.915     --- PASS: TestIntMinTableDriven/0,-1 (0.00s)\n#13 4.915     --- PASS: TestIntMinTableDriven/-1,0 (0.00s)\n#13 4.915 PASS\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync+Exec Action in Compose Develop\nDESCRIPTION: This YAML snippet shows how to use the 'sync+exec' action in the 'develop' section of a Compose file. It demonstrates syncing content and then running a command to reload the service without interruption.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: ...\n    develop:\n      watch: \n        # sync content then run command to reload service without interruption\n        - path: ./etc/config\n          action: sync+exec\n          target: /etc/config/\n          exec:\n            command: app reload\n```\n\n----------------------------------------\n\nTITLE: Using Links in Docker Compose\nDESCRIPTION: Demonstrates how to define aliases for services using the links feature. In this example, the db service is reachable from the web service at both 'db' and 'database' hostnames.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/networking.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\n  web:\n    build: .\n    links:\n      - \"db:database\"\n  db:\n    image: postgres\n```\n\n----------------------------------------\n\nTITLE: Updated Traefik Compose Configuration with File Provider\nDESCRIPTION: Docker Compose configuration for Traefik with both Docker and File providers enabled. Mounts a configuration file and exposes both the HTTP port and the Traefik dashboard.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  proxy:\n    image: traefik:v3.1.2\n    command: --providers.docker --providers.file.filename=/config/traefik-config.yaml --api.insecure\n    ports:\n      - 80:80\n      - 8080:8080\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - ./dev/traefik-config.yaml:/config/traefik-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Building the Docker Image\nDESCRIPTION: Commands to navigate to the application directory and build the Docker image using the Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/02_our_app.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cd /path/to/getting-started-app\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t getting-started .\n```\n\n----------------------------------------\n\nTITLE: Swarm Service List Output\nDESCRIPTION: The output shows the running service with its ID, name, replication mode, current replica status, image used, and port mapping configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/swarm-deploy.md#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nID                  NAME                MODE                REPLICAS            IMAGE               PORTS\nil7elwunymbs        demo_bb-app         replicated          1/1                 getting-started:latest   *:8000->3000/tcp\n```\n\n----------------------------------------\n\nTITLE: Setting SOURCE_DATE_EPOCH to Git Commit Timestamp with docker/bake-action\nDESCRIPTION: GitHub Actions workflow that creates reproducible Docker builds with timestamps from Git commits. Uses docker/bake-action and extracts the Git commit timestamp to set the SOURCE_DATE_EPOCH environment variable.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/reproducible-builds.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Get Git commit timestamps\n        run: echo \"TIMESTAMP=$(git log -1 --pretty=%ct)\" >> $GITHUB_ENV\n\n      - name: Build\n        uses: docker/bake-action@v6\n        env:\n          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker's apt Repository on Debian\nDESCRIPTION: Script to configure Docker's official apt repository by adding the GPG key and repository configuration. This allows for installation and updates through apt.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL {{% param \"download-url-base\" %}}/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] {{% param \"download-url-base\" %}} \\\n  $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Distributed Multi-platform Docker Build with Matrix Strategy\nDESCRIPTION: Advanced workflow that distributes builds across multiple runners using matrix strategy and creates manifest lists using buildx imagetools.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/multi-platform.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\nenv:\n  REGISTRY_IMAGE: user/app\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false\n      matrix:\n        platform:\n          - linux/amd64\n          - linux/arm64\n    steps:\n      - name: Prepare\n        run: |\n          platform=${{ matrix.platform }}\n          echo \"PLATFORM_PAIR=${platform//\\//-}\" >> $GITHUB_ENV\n\n      - name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY_IMAGE }}\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push by digest\n        id: build\n        uses: docker/build-push-action@v6\n        with:\n          platforms: ${{ matrix.platform }}\n          labels: ${{ steps.meta.outputs.labels }}\n          tags: ${{ env.REGISTRY_IMAGE }}\n          outputs: type=image,push-by-digest=true,name-canonical=true,push=true\n\n      - name: Export digest\n        run: |\n          mkdir -p ${{ runner.temp }}/digests\n          digest=\"${{ steps.build.outputs.digest }}\"\n          touch \"${{ runner.temp }}/digests/${digest#sha256:}\"\n\n      - name: Upload digest\n        uses: actions/upload-artifact@v4\n        with:\n          name: digests-${{ env.PLATFORM_PAIR }}\n          path: ${{ runner.temp }}/digests/*\n          if-no-files-found: error\n          retention-days: 1\n\n  merge:\n    runs-on: ubuntu-latest\n    needs:\n      - build\n    steps:\n      - name: Download digests\n        uses: actions/download-artifact@v4\n        with:\n          path: ${{ runner.temp }}/digests\n          pattern: digests-*\n          merge-multiple: true\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY_IMAGE }}\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n\n      - name: Create manifest list and push\n        working-directory: ${{ runner.temp }}/digests\n        run: |\n          docker buildx imagetools create $(jq -cr '.tags | map(\"-t \" + .) | join(\" \")' <<< \"$DOCKER_METADATA_OUTPUT_JSON\") \\\n            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)\n\n      - name: Inspect image\n        run: |\n          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}\n```\n\n----------------------------------------\n\nTITLE: Installing Backend Dependencies\nDESCRIPTION: Commands to navigate to the backend directory and install required Node.js dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cd backend/\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example Go Application Repository\nDESCRIPTION: Command to clone the example Go microservice application repository from GitHub to your local machine.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/docker/docker-gs-ping\n```\n\n----------------------------------------\n\nTITLE: Pruning Unused Docker Networks\nDESCRIPTION: This command removes all networks not used by at least one container. It prompts for confirmation before deletion.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker network prune\n\nWARNING! This will remove all networks not used by at least one container.\nAre you sure you want to continue? [y/N] y\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions workflow for Docker image build and push\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow that automatically builds and pushes a Docker image to Docker Hub when changes are pushed to the main branch. It handles Docker Hub authentication, sets up Buildx, and tags the image appropriately.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/configure-github-actions.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build and push Docker image\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build_and_push:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest\n```\n\n----------------------------------------\n\nTITLE: Listing Swarm Services\nDESCRIPTION: Command to list all running services in the Swarm cluster, showing their replica status, image, and port configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/swarm-deploy.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker service ls\n```\n\n----------------------------------------\n\nTITLE: Listing All Nodes in a Docker Swarm\nDESCRIPTION: This command displays an overview of all nodes in the swarm, showing their ID, hostname, membership status, availability, and manager status. It's useful for monitoring the overall health of the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/admin_guide.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker node ls\nID                           HOSTNAME  MEMBERSHIP  STATUS  AVAILABILITY  MANAGER STATUS\n1mhtdwhvsgr3c26xxbnzdc3yp    node05    Accepted    Ready   Active\n516pacagkqp2xc3fk9t1dhjor    node02    Accepted    Ready   Active        Reachable\n9ifojw8of78kkusuc4a6c23fx *  node01    Accepted    Ready   Active        Leader\nax11wdpwrrb6db3mfjydscgk7    node04    Accepted    Ready   Active\nbb1nrq2cswhtbg4mrsqnlx1ck    node03    Accepted    Ready   Active        Reachable\ndi9wxgz8dtuh9d2hn089ecqkf    node06    Accepted    Ready   Active\n```\n\n----------------------------------------\n\nTITLE: Configuring Compose Watch in YAML for Deno Development\nDESCRIPTION: YAML configuration for Docker Compose with Watch functionality. This adds automatic rebuilding of the Deno server container when code changes are detected in the project directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    image: deno-server\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"8000:8000\"\n    develop:\n      watch:\n        - action: rebuild\n          path: .\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose Configuration\nDESCRIPTION: A compose.yaml file that defines a server service built from the local Dockerfile and exposes port 8000, providing a standardized way to run the Python application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Comments are provided throughout this file to help you get started.\n# If you need more help, visit the Docker Compose reference guide at\n# https://docs.docker.com/go/compose-spec-reference/\n\n# Here the instructions define your application as a service called \"server\".\n# This service is built from the Dockerfile in the current directory.\n# You can add other services your application may depend on here, such as a\n# database or a cache. For examples, see the Awesome Compose repository:\n# https://github.com/docker/awesome-compose\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 8000:8000\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom JupyterLab Dockerfile\nDESCRIPTION: Dockerfile that defines a custom JupyterLab environment with matplotlib and scikit-learn pre-installed, building upon the base Jupyter notebook image.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM quay.io/jupyter/base-notebook\nRUN pip install --no-cache-dir matplotlib scikit-learn\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose in Detached Mode\nDESCRIPTION: This console snippet demonstrates running Docker Compose in detached mode and checking the status of running containers. It shows the output of 'docker compose up -d' and 'docker compose ps' commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up -d\n\nStarting composetest_redis_1...\nStarting composetest_web_1...\n\n$ docker compose ps\n\n       Name                      Command               State           Ports         \n-------------------------------------------------------------------------------------\ncomposetest_redis_1   docker-entrypoint.sh redis ...   Up      6379/tcp              \ncomposetest_web_1     flask run                        Up      0.0.0.0:8000->5000/tcp\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Docker Secrets with Redis Service\nDESCRIPTION: This example demonstrates how to create a Docker secret from standard input, attach it to a Redis service, verify access, and manage its lifecycle. It shows secret creation, service deployment, access verification, and cleanup operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ printf \"This is a secret\" | docker secret create my_secret_data -\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker service  create --name redis --secret my_secret_data redis:alpine\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker service ps redis\n\nID            NAME     IMAGE         NODE              DESIRED STATE  CURRENT STATE          ERROR  PORTS\nbkna6bpn8r1a  redis.1  redis:alpine  ip-172-31-46-109  Running        Running 8 seconds ago  \n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker service ps redis\n\nNAME                      IMAGE         NODE  DESIRED STATE  CURRENT STATE          ERROR                      PORTS\nredis.1.siftice35gla      redis:alpine  moby  Running        Running 4 seconds ago                             \n \\_ redis.1.whum5b7gu13e  redis:alpine  moby  Shutdown       Failed 20 seconds ago      \"task: non-zero exit (1)\"  \n \\_ redis.1.2s6yorvd9zow  redis:alpine  moby  Shutdown       Failed 56 seconds ago      \"task: non-zero exit (1)\"  \n \\_ redis.1.ulfzrcyaf6pg  redis:alpine  moby  Shutdown       Failed about a minute ago  \"task: non-zero exit (1)\"  \n \\_ redis.1.wrny5v4xyps6  redis:alpine  moby  Shutdown       Failed 2 minutes ago       \"task: non-zero exit (1)\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps --filter name=redis -q\n\n5cb1c2348a59\n\n$ docker container exec $(docker ps --filter name=redis -q) ls -l /run/secrets\n\ntotal 4\n-r--r--r--    1 root     root            17 Dec 13 22:48 my_secret_data\n\n$ docker container exec $(docker ps --filter name=redis -q) cat /run/secrets/my_secret_data\n\nThis is a secret\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker commit $(docker ps --filter name=redis -q) committed_redis\n\n$ docker run --rm -it committed_redis cat /run/secrets/my_secret_data\n\ncat: can't open '/run/secrets/my_secret_data': No such file or directory\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker secret ls\n\nID                          NAME                CREATED             UPDATED\nwwwrxza8sxy025bas86593fqs   my_secret_data      4 hours ago         4 hours ago\n\n\n$ docker secret rm my_secret_data\n\nError response from daemon: rpc error: code = 3 desc = secret\n'my_secret_data' is in use by the following service: redis\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker service update --secret-rm my_secret_data redis\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker container exec -it $(docker ps --filter name=redis -q) cat /run/secrets/my_secret_data\n\ncat: can't open '/run/secrets/my_secret_data': No such file or directory\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker service rm redis\n\n$ docker secret rm my_secret_data\n```\n\n----------------------------------------\n\nTITLE: Cloning the Spring PetClinic Sample Application\nDESCRIPTION: Command to clone the Spring PetClinic sample application repository from GitHub to your local machine.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/spring-projects/spring-petclinic.git\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDX_GIT_CHECK_DIRTY Environment Variable in Console\nDESCRIPTION: Enables checking for dirty state in source control information for provenance attestations. When set to true (1), Buildx will detect if there are uncommitted changes in the Git repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ export BUILDX_GIT_CHECK_DIRTY=1\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with GPU Support\nDESCRIPTION: Console output demonstrating the execution of a Docker Compose service with GPU access. The command runs the service and displays the output of nvidia-smi showing GPU device information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/gpu-support.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up\nCreating network \"gpu_default\" with the default driver\nCreating gpu_test_1 ... done\nAttaching to gpu_test_1    \ntest_1  | +-----------------------------------------------------------------------------+\ntest_1  | | NVIDIA-SMI 450.80.02    Driver Version: 450.80.02    CUDA Version: 11.1     |\ntest_1  | |-------------------------------+----------------------+----------------------+\ntest_1  | | GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\ntest_1  | | Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\ntest_1  | |                               |                      |               MIG M. |\ntest_1  | |===============================+======================+======================|\ntest_1  | |   0  Tesla T4            On   | 00000000:00:1E.0 Off |                    0 |\ntest_1  | | N/A   23C    P8     9W /  70W |      0MiB / 15109MiB |      0%      Default |\ntest_1  | |                               |                      |                  N/A |\ntest_1  | +-------------------------------+----------------------+----------------------+\ntest_1  |                                                                                \ntest_1  | +-----------------------------------------------------------------------------+\ntest_1  | | Processes:                                                                  |\ntest_1  | |  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\ntest_1  | |        ID   ID                                                   Usage      |\ntest_1  | |=============================================================================|\ntest_1  | |  No running processes found                                                 |\ntest_1  | +-----------------------------------------------------------------------------+\ngpu_test_1 exited with code 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Scout Environment Integration in GitLab\nDESCRIPTION: A GitLab CI configuration using the Docker executor to run Docker Scout CLI. It determines the image tag based on CI variables and then runs the environment command to record the Docker image to a specified environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/environment/cli.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvariables:\n  image: namespace/repo\n\nrecord_environment:\n  image: docker/scout-cli:1.0.2\n  script:\n    - |\n      if [[ -z \"$CI_COMMIT_TAG\" ]]; then\n        tag=\"latest\"\n        echo \"Running tag '$CI_COMMIT_TAG'\"\n      else\n        tag=\"$CI_COMMIT_REF_SLUG\"\n        echo \"Running on branch '$CI_COMMIT_BRANCH'\"\n      fi    \n      echo \"tag = $tag\"\n    - environment --org <MY_DOCKER_ORG> \"PRODUCTION\" ${image}:${tag}\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile with Test Stage for Node.js\nDESCRIPTION: Enhanced Dockerfile with multiple stages including a dedicated test stage that runs Jest tests during the image build process. Uses RUN instead of CMD to fail the build if tests fail.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/run-tests.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nARG NODE_VERSION=18.0.0\n\nFROM node:${NODE_VERSION}-alpine as base\nWORKDIR /usr/src/app\nEXPOSE 3000\n\nFROM base as dev\nRUN --mount=type=bind,source=package.json,target=package.json \\\n    --mount=type=bind,source=package-lock.json,target=package-lock.json \\\n    --mount=type=cache,target=/root/.npm \\\n    npm ci --include=dev\nUSER node\nCOPY . .\nCMD npm run dev\n\nFROM base as prod\nRUN --mount=type=bind,source=package.json,target=package.json \\\n    --mount=type=bind,source=package-lock.json,target=package-lock.json \\\n    --mount=type=cache,target=/root/.npm \\\n    npm ci --omit=dev\nUSER node\nCOPY . .\nCMD node src/index.js\n\nFROM base as test\nENV NODE_ENV test\nRUN --mount=type=bind,source=package.json,target=package.json \\\n    --mount=type=bind,source=package-lock.json,target=package-lock.json \\\n    --mount=type=cache,target=/root/.npm \\\n    npm ci --include=dev\nUSER node\nCOPY . .\nRUN npm run test\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Nginx Service in Docker Swarm\nDESCRIPTION: Creates a service with a specified name using the --name flag, making it easier to reference in subsequent commands compared to using the automatically-generated name.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name my_web nginx\n```\n\n----------------------------------------\n\nTITLE: Simple Dockerfile for Multi-Platform Architecture Demo\nDESCRIPTION: A basic Dockerfile that uses Alpine Linux and writes the architecture information to a file for later inspection.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine\nRUN uname -m > /arch\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDX_NO_DEFAULT_LOAD Environment Variable in Console\nDESCRIPTION: Disables automatic loading of built images to the local container store when using the docker driver. When set to 1, images won't be automatically loaded after building.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ export BUILDX_NO_DEFAULT_LOAD=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Build Features with Docker Bake\nDESCRIPTION: HCL configuration for Docker Bake that defines multi-platform builds, attestations, and annotations. Creates a reusable '_common' target that's inherited by service-specific targets to add production features like SBOM and provenance attestations, platform support for linux/amd64 and linux/arm64, and authorship annotations.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"default\" {\n  targets = [\"vote\", \"result\", \"worker\"]\n}\n\ntarget \"_common\" {\n  annotations = [\"org.opencontainers.image.authors=username\"]\n  platforms = [\"linux/amd64\", \"linux/arm64\"]\n  attest = [\n    \"type=provenance,mode=max\",\n    \"type=sbom\"\n  ]\n}\n\ntarget \"vote\" {\n  inherits = [\"_common\"]\n  target = \"final\"\n}\n\ntarget \"result\" {\n  inherits = [\"_common\"]\n}\n\ntarget \"worker\" {\n  inherits = [\"_common\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Bridge Network and Running a Container\nDESCRIPTION: This snippet demonstrates how to create a custom bridge network and run a container connected to that network. The container is launched in detached mode (-itd) with a specific name.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create -d bridge my-net\n$ docker run --network=my-net -itd --name=container3 busybox\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Tests with Docker Compose\nDESCRIPTION: Command to run Jest tests for a Node.js application inside a Docker container using the docker compose run command. This approach is ideal for local development testing.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/run-tests.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run server npm run test\n```\n\n----------------------------------------\n\nTITLE: Listing Available Docker Contexts\nDESCRIPTION: The docker context ls command shows all configured contexts with the active context marked by an asterisk (*). It displays the context name, description, and Docker endpoint.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/contexts.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker context ls\nNAME        DESCRIPTION                               DOCKER ENDPOINT               ERROR\ndefault *                                             unix:///var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Starting Profiles with Docker Compose Commands\nDESCRIPTION: Shows different ways to start services with specific profiles using either command line options or environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/profiles.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose --profile debug up\n```\n\nLANGUAGE: console\nCODE:\n```\n$ COMPOSE_PROFILES=debug docker compose up\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Configuration\nDESCRIPTION: Dockerfile instructions for creating a container image with Python 3.8, required dependencies, and application code.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#2025-04-11_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.8-slim\nWORKDIR /app\nCOPY requirements.txt /app\nRUN pip install --no-cache-dir -r requirements.txt\nRUN python -m spacy download en_core_web_sm\nCOPY *.py /app\nCOPY entrypoint.sh /app\nRUN chmod +x /app/entrypoint.sh\nENTRYPOINT [\"/app/entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Password Secret with OpenSSL in Docker Swarm\nDESCRIPTION: Generates a random base64-encoded password and stores it as a Docker secret named 'mysql_password'. This approach avoids storing the password in plaintext or exposing it in environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 20 | docker secret create mysql_password -\n```\n\n----------------------------------------\n\nTITLE: Generating SBOM for Docker Image\nDESCRIPTION: Command to generate an SBOM for a Docker image using the sbom plugin\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/security.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker sbom hello\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Deployment YAML for Java Application\nDESCRIPTION: This YAML configuration defines a Kubernetes Deployment and Service for a Java application. The Deployment creates a pod with a container from your Docker image, while the NodePort Service exposes port 8080 of the application through node port 30001.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: docker-java-demo\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      service: server\n  template:\n    metadata:\n      labels:\n        service: server\n    spec:\n      containers:\n        - name: server-service\n          image: DOCKER_USERNAME/REPO_NAME\n          imagePullPolicy: Always\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: service-entrypoint\n  namespace: default\nspec:\n  type: NodePort\n  selector:\n    service: server\n  ports:\n    - port: 8080\n      targetPort: 8080\n      nodePort: 30001\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Services in Docker Compose\nDESCRIPTION: This example demonstrates how to define two simple services (web and db) in a Docker Compose file, setting their images, mapping ports, and configuring basic environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"8080:80\"\n\n  db:\n    image: postgres:13\n    environment:\n      POSTGRES_USER: example\n      POSTGRES_DB: exampledb\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Service in Docker Compose\nDESCRIPTION: Initial Docker Compose configuration that sets up a PostgreSQL database service with volume persistence and health checks. Includes basic server configuration and database dependency setup.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    environment:\n      NODE_ENV: production\n    ports:\n      - 3000:3000\n    depends_on:\n      db:\n        condition: service_healthy\n  db:\n    image: postgres\n    restart: always\n    user: postgres\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=example\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    expose:\n      - 5432\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Disabling Git Bash Path Conversion for Docker Commands\nDESCRIPTION: Shows how to temporarily disable Git Bash path conversion to resolve Docker command issues. It uses the MSYS_NO_PATHCONV environment variable.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/topics.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ MSYS_NO_PATHCONV=1 docker run --rm -ti -v $(pwd):/work alpine\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Development with Bind Mounts\nDESCRIPTION: A Docker Compose configuration that targets the development stage from the Dockerfile, sets up a bind mount for source code, and configures ports for debugging. It also includes PostgreSQL database service configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/develop.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n      target: dev\n    ports:\n      - 3000:3000\n      - 9229:9229\n    environment:\n      NODE_ENV: production\n      POSTGRES_HOST: db\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD_FILE: /run/secrets/db-password\n      POSTGRES_DB: example\n    depends_on:\n      db:\n        condition: service_healthy\n    secrets:\n      - db-password\n    volumes:\n      - ./src:/usr/src/app/src\n  db:\n    image: postgres\n    restart: always\n    user: postgres\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=example\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    expose:\n      - 5432\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop with Sign-in Enforcement on macOS\nDESCRIPTION: Terminal commands for macOS to mount the Docker.dmg file, install Docker Desktop with organization sign-in enforcement, and then unmount the disk image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo hdiutil attach Docker.dmg\n$ sudo /Volumes/Docker/Docker.app/Contents/MacOS/install --allowed-org=myorg\n$ sudo hdiutil detach /Volumes/Docker\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Secrets for Nginx Configuration\nDESCRIPTION: These commands create Docker secrets for the TLS key, certificate, and Nginx configuration. The secrets are created from existing files on the host machine.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker secret create site.key site.key\n\n$ docker secret create site.crt site.crt\n\n$ docker secret create site.conf site.conf\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image with Content Trust Environment Variable\nDESCRIPTION: Demonstrates pushing a signed Docker image by enabling Docker Content Trust through an environment variable, which automatically signs the image during push.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/_index.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ export DOCKER_CONTENT_TRUST=1\n\n$ docker push registry.example.com/admin/demo:1\nThe push refers to repository [registry.example.com/admin/demo:1]\n7bff100f35cb: Pushed\n1: digest: sha256:3d2e482b82608d153a374df3357c0291589a61cc194ec4a9ca2381073a17f58e size: 528\nSigning and pushing trust metadata\nEnter passphrase for signer key with ID 8ae710e:\nSuccessfully signed registry.example.com/admin/demo:1\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Documentation Build Settings in YAML\nDESCRIPTION: This YAML snippet defines the build configuration for a Docker documentation page. It specifies that the page should never be rendered, sets the title to 'Building', and assigns a weight of 20 for ordering purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Building\nweight: 20\n---\n```\n\n----------------------------------------\n\nTITLE: Running JupyterLab with a Docker Volume\nDESCRIPTION: Command to run JupyterLab with a Docker volume for persistent storage, enabling notebooks to be saved and accessed even after the container is removed.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -p 8889:8888 -v jupyter-data:/home/jovyan/work quay.io/jupyter/base-notebook start-notebook.py --NotebookApp.token='my-token'\n```\n\n----------------------------------------\n\nTITLE: BuildKit Source Policy JSON Configuration\nDESCRIPTION: Example of a BuildKit source policy file that pins specific dependencies to exact versions and denies certain images.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rules\": [\n    {\n      \"action\": \"CONVERT\",\n      \"selector\": {\n        \"identifier\": \"docker-image://docker.io/library/alpine:latest\"\n      },\n      \"updates\": {\n        \"identifier\": \"docker-image://docker.io/library/alpine:latest@sha256:4edbd2beb5f78b1014028f4fbb99f3237d9561100b6881aabbf5acce2c4f9454\"\n      }\n    },\n    {\n      \"action\": \"CONVERT\",\n      \"selector\": {\n        \"identifier\": \"https://raw.githubusercontent.com/moby/buildkit/v0.10.1/README.md\"\n      },\n      \"updates\": {\n        \"attrs\": {\"http.checksum\": \"sha256:6e4b94fc270e708e1068be28bd3551dc6917a4fc5a61293d51bb36e6b75c4b53\"}\n      }\n    },\n    {\n      \"action\": \"DENY\",\n      \"selector\": {\n        \"identifier\": \"docker-image://docker.io/library/golang*\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging a Docker Image with Additional Tag\nDESCRIPTION: Command to add a new tag (v1.0) to an existing Docker image. This creates another reference to the same image without duplicating it.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker image tag docker-gs-ping:latest docker-gs-ping:v1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus for Golang Application Metrics Scraping\nDESCRIPTION: This YAML configuration for Prometheus sets up a job to scrape metrics from the Golang application. It defines the scrape interval and the target endpoint for metrics collection.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/compose.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 10s\n  evaluation_interval: 10s\n\nscrape_configs:\n  - job_name: myapp\n    static_configs:\n      - targets: [\"api:8000\"]\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Container with Network and Volume Configuration (PowerShell)\nDESCRIPTION: PowerShell version of the command to start a MySQL 8.0 container connected to the 'todo-app' network with appropriate environment variables and volume mounting.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n$ docker run -d `\n    --network todo-app --network-alias mysql `\n    -v todo-mysql-data:/var/lib/mysql `\n    -e MYSQL_ROOT_PASSWORD=secret `\n    -e MYSQL_DATABASE=todos `\n    mysql:8.0\n```\n\n----------------------------------------\n\nTITLE: Updating docker-bake.hcl for Matrix Builds\nDESCRIPTION: This snippet shows how to modify the docker-bake.hcl file to use matrices for building multiple variants of an image. It defines release and debug modes, sets build arguments, and configures conditional tagging.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_7\n\nLANGUAGE: HCL\nCODE:\n```\ntarget \"default\" {\n  matrix = {\n    mode = [\"release\", \"debug\"]\n  }\n  name = \"image-${mode}\"\n  target = \"image\"\n  args = {\n    BUILD_TAGS = mode\n  }\n  tags = [\n    mode == \"release\" ? \"bakeme:latest\" : \"bakeme:dev\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Rust Application with Database Migrations\nDESCRIPTION: Multi-stage Dockerfile that builds a Rust application and includes database migration files for initializing the PostgreSQL database.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\n# Comments are provided throughout this file to help you get started.\n# If you need more help, visit the Dockerfile reference guide at\n# https://docs.docker.com/reference/dockerfile/\n\n################################################################################\n# Create a stage for building the application.\n\nARG RUST_VERSION=1.70.0\nARG APP_NAME=react-rust-postgres\nFROM rust:${RUST_VERSION}-slim-bullseye AS build\nARG APP_NAME\nWORKDIR /app\n\n# Build the application.\n# Leverage a cache mount to /usr/local/cargo/registry/\n# for downloaded dependencies and a cache mount to /app/target/ for\n# compiled dependencies which will speed up subsequent builds.\n# Leverage a bind mount to the src directory to avoid having to copy the\n# source code into the container. Once built, copy the executable to an\n# output directory before the cache mounted /app/target is unmounted.\nRUN --mount=type=bind,source=src,target=src \\\n    --mount=type=bind,source=Cargo.toml,target=Cargo.toml \\\n    --mount=type=bind,source=Cargo.lock,target=Cargo.lock \\\n    --mount=type=cache,target=/app/target/ \\\n    --mount=type=cache,target=/usr/local/cargo/registry/ \\\n    --mount=type=bind,source=migrations,target=migrations \\\n    <<EOF\nset -e\ncargo build --locked --release\ncp ./target/release/$APP_NAME /bin/server\nEOF\n\n################################################################################\n# Create a new stage for running the application that contains the minimal\n# runtime dependencies for the application. This often uses a different base\n# image from the build stage where the necessary files are copied from the build\n# stage.\n#\n# The example below uses the debian bullseye image as the foundation for    running the app.\n# By specifying the \"bullseye-slim\" tag, it will also use whatever happens to    be the\n# most recent version of that tag when you build your Dockerfile. If\n# reproducibility is important, consider using a digest\n# (e.g.,    debian@sha256:ac707220fbd7b67fc19b112cee8170b41a9e97f703f588b2cdbbcdcecdd8af57).\nFROM debian:bullseye-slim AS final\n\n# Create a non-privileged user that the app will run under.\n# See https://docs.docker.com/develop/develop-images/dockerfile_best-practices/   #user\nARG UID=10001\nRUN adduser \\\n    --disabled-password \\\n    --gecos \"\" \\\n    --home \"/nonexistent\" \\\n    --shell \"/sbin/nologin\" \\\n    --no-create-home \\\n    --uid \"${UID}\" \\\n    appuser\nUSER appuser\n\n# Copy the executable from the \"build\" stage.\nCOPY --from=build /bin/server /bin/\n\n# Expose the port that the application listens on.\nEXPOSE 8000\n\n# What the container should run when it is started.\nCMD [\"/bin/server\"]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Docker CLI using Personal Access Token\nDESCRIPTION: Command to sign in to Docker using the CLI with a personal access token. When prompted for a password, users should enter their personal access token instead of their regular password.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-developers/access-tokens.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker login --username <YOUR_USERNAME>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Docker Packages on CentOS\nDESCRIPTION: Command to remove any conflicting or unofficial Docker packages that may be installed on the system before installing the official Docker Engine packages.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/centos.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n```\n\n----------------------------------------\n\nTITLE: Running NLP Application Container\nDESCRIPTION: This command runs the 'basic-nlp' Docker image as a container, executing the '04_text_summarization.py' script. It uses interactive mode (-it) to allow user input for text summarization.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it basic-nlp 04_text_summarization.py\n```\n\n----------------------------------------\n\nTITLE: Repository Directory Structure\nDESCRIPTION: The directory structure of the cloned Bun application repository, showing the main files including the Dockerfile, compose.yml, and server.js.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n├── bun-docker/\n│ ├── compose.yml\n│ ├── Dockerfile\n│ ├── LICENSE\n│ ├── server.js\n│ └── README.md\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Container and Querying Data\nDESCRIPTION: These commands demonstrate how to connect to the MySQL container using docker exec and then query the todo_items table to verify data storage. It requires the MySQL container ID and uses the 'secret' password for authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -it <mysql-container-id> mysql -p todos\n```\n\nLANGUAGE: console\nCODE:\n```\nmysql> select * from todo_items;\n```\n\n----------------------------------------\n\nTITLE: Testing a Published Service Port with Curl\nDESCRIPTION: Example of testing a published Docker service port using curl. This demonstrates how to verify that a service is accessible through the routing mesh on any swarm node.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ curl localhost:8080\n\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n...truncated...\n</html>\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Multi-Platform Docker Build\nDESCRIPTION: GitHub Actions workflow that implements a distributed build process using Docker Bake. Includes jobs for preparation, building on multiple platforms, and merging the results into a manifest list.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/multi-platform.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\nenv:\n  REGISTRY_IMAGE: user/app\n\njobs:\n  prepare:\n    runs-on: ubuntu-latest\n    outputs:\n      matrix: ${{ steps.platforms.outputs.matrix }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Create matrix\n        id: platforms\n        run: |\n          echo \"matrix=$(docker buildx bake image-all --print | jq -cr '.target.\"image-all\".platforms')\" >>${GITHUB_OUTPUT}\n\n      - name: Show matrix\n        run: |\n          echo ${{ steps.platforms.outputs.matrix }}\n\n      - name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY_IMAGE }}\n\n      - name: Rename meta bake definition file\n        run: |\n          mv \"${{ steps.meta.outputs.bake-file }}\" \"${{ runner.temp }}/bake-meta.json\"\n\n      - name: Upload meta bake definition\n        uses: actions/upload-artifact@v4\n        with:\n          name: bake-meta\n          path: ${{ runner.temp }}/bake-meta.json\n          if-no-files-found: error\n          retention-days: 1\n\n  build:\n    runs-on: ubuntu-latest\n    needs:\n      - prepare\n    strategy:\n      fail-fast: false\n      matrix:\n        platform: ${{ fromJson(needs.prepare.outputs.matrix) }}\n    steps:\n      - name: Prepare\n        run: |\n          platform=${{ matrix.platform }}\n          echo \"PLATFORM_PAIR=${platform//\\//-}\" >> $GITHUB_ENV\n\n      - name: Download meta bake definition\n        uses: actions/download-artifact@v4\n        with:\n          name: bake-meta\n          path: ${{ runner.temp }}\n      \n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build\n        id: bake\n        uses: docker/bake-action@v6\n        with:\n          files: |\n            ./docker-bake.hcl\n            cwd://${{ runner.temp }}/bake-meta.json\n          targets: image\n          set: |\n            *.tags=${{ env.REGISTRY_IMAGE }}\n            *.platform=${{ matrix.platform }}\n            *.output=type=image,push-by-digest=true,name-canonical=true,push=true\n\n      - name: Export digest\n        run: |\n          mkdir -p ${{ runner.temp }}/digests\n          digest=\"${{ fromJSON(steps.bake.outputs.metadata).image['containerimage.digest'] }}\"\n          touch \"${{ runner.temp }}/digests/${digest#sha256:}\"\n\n      - name: Upload digest\n        uses: actions/upload-artifact@v4\n        with:\n          name: digests-${{ env.PLATFORM_PAIR }}\n          path: ${{ runner.temp }}/digests/*\n          if-no-files-found: error\n          retention-days: 1\n\n  merge:\n    runs-on: ubuntu-latest\n    needs:\n      - build\n    steps:\n      - name: Download meta bake definition\n        uses: actions/download-artifact@v4\n        with:\n          name: bake-meta\n          path: ${{ runner.temp }}\n\n      - name: Download digests\n        uses: actions/download-artifact@v4\n        with:\n          path: ${{ runner.temp }}/digests\n          pattern: digests-*\n          merge-multiple: true\n\n      - name: Login to DockerHub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Create manifest list and push\n        working-directory: ${{ runner.temp }}/digests\n        run: |\n          docker buildx imagetools create $(jq -cr '.target.\"docker-metadata-action\".tags | map(select(startswith(\"${{ env.REGISTRY_IMAGE }}\")) | \"-t \" + .) | join(\" \")' ${{ runner.temp }}/bake-meta.json) \\\n            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)\n\n      - name: Inspect image\n        run: |\n          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:$(jq -r '.target.\"docker-metadata-action\".args.DOCKER_META_VERSION' ${{ runner.temp }}/bake-meta.json)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Stack Definition\nDESCRIPTION: Compose file defining the web and redis services for the application stack\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/stack-deploy.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n  services:\n    web:\n      image: 127.0.0.1:5000/stackdemo\n      build: .\n      ports:\n        - \"8000:8000\"\n    redis:\n      image: redis:alpine\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Swarm Status with docker info\nDESCRIPTION: Displays the current state of the Docker swarm using the docker info command. This shows container counts, swarm status, node ID, manager status, and node counts.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/create-swarm.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker info\n\nContainers: 2\nRunning: 0\nPaused: 0\nStopped: 2\n  ...snip...\nSwarm: active\n  NodeID: dxn1zf6l61qsb1josjja83ngz\n  Is Manager: true\n  Managers: 1\n  Nodes: 1\n  ...snip...\n```\n\n----------------------------------------\n\nTITLE: Removing Conflicting Docker Packages on Ubuntu\nDESCRIPTION: Command to uninstall all existing Docker-related packages that might conflict with a new installation\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon with JSON in Docker Desktop\nDESCRIPTION: This JSON snippet demonstrates how to configure the Docker daemon used by Docker Desktop. It shows settings for the builder's garbage collection, including enabling it and setting the default keep storage to 20GB. The experimental features are disabled in this example.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/settings-and-maintenance/settings.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"builder\": {\n    \"gc\": {\n      \"defaultKeepStorage\": \"20GB\",\n      \"enabled\": true\n    }\n  },\n  \"experimental\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Using Build Arguments for Flexible Node.js Image Versioning\nDESCRIPTION: This Dockerfile demonstrates how to use build arguments to specify versions of Node.js and Alpine, allowing for flexible and maintainable multi-stage builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nARG NODE_VERSION=\"{{% param example_node_version %}}\"\nARG ALPINE_VERSION=\"{{% param example_alpine_version %}}\"\n\nFROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS base\nWORKDIR /src\n\nFROM base AS build\nCOPY package*.json ./\nRUN npm ci\nRUN npm run build\n\nFROM base AS production\nCOPY package*.json ./\nRUN npm ci --omit=dev && npm cache clean --force\nCOPY --from=build /src/dist/ .\nCMD [\"node\", \"app.js\"]\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with External Cache\nDESCRIPTION: Example of a GitHub Actions workflow that uses Docker's external cache functionality to persist build cache in a registry. This setup pushes and pulls cache from a dedicated cache image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#2025-04-11_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: user/app:latest\n          cache-from: type=registry,ref=user/app:buildcache\n          cache-to: type=registry,ref=user/app:buildcache,mode=max\n```\n\n----------------------------------------\n\nTITLE: Complex Docker CLI build command\nDESCRIPTION: A more complex Docker build command with multiple options including build args, cache settings, and multi-platform support.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/introduction.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker build \\\n  -f Dockerfile \\\n  -t myapp:latest \\\n  --build-arg foo=bar \\\n  --no-cache \\\n  --platform linux/amd64,linux/arm64 \\\n  .\n```\n\n----------------------------------------\n\nTITLE: Available API Endpoints for Docker Model Runner\nDESCRIPTION: List of available API endpoints for Docker Model Runner, including Docker model management and OpenAI-compatible endpoints.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n#### Inside containers ####\n\nhttp://model-runner.docker.internal/\n\n    # Docker Model management\n    POST /models/create\n    GET /models\n    GET /models/{namespace}/{name}\n    DELETE /models/{namespace}/{name}\n\n    # OpenAI endpoints\n    GET /engines/llama.cpp/v1/models\n    GET /engines/llama.cpp/v1/models/{namespace}/{name}\n    POST /engines/llama.cpp/v1/chat/completions\n    POST /engines/llama.cpp/v1/completions\n    POST /engines/llama.cpp/v1/embeddings\n    Note: You can also omit llama.cpp.\n    E.g., POST /engines/v1/chat/completions.\n\n#### Inside or outside containers (host) ####\n\nSame endpoints on /var/run/docker.sock\n\n    # While still in Beta\n    Prefixed with /exp/vDD4.40\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for R Application CI/CD\nDESCRIPTION: YAML configuration for a GitHub Actions workflow that builds and pushes a Docker image to Docker Hub. The workflow authenticates with Docker Hub, sets up Docker Buildx, and builds for multiple architectures.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/configure-ci-cd.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest\n```\n\n----------------------------------------\n\nTITLE: Running nginx Web Server Service in Global Mode with Direct Port Publishing in Docker Swarm\nDESCRIPTION: Creates an nginx service that runs on every swarm node (global mode) and publishes port 80 directly on each node as port 8080 using the host networking mode, bypassing the routing mesh.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --mode global \\\n  --publish mode=host,target=80,published=8080 \\\n  --name=nginx \\\n  nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Starting Flask Application with CMD (Shell Form)\nDESCRIPTION: Shows the alternative shell form syntax for the CMD instruction to start a Flask development server. This form processes the command through a shell, which affects how signals are handled.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD flask run --host 0.0.0.0 --port 8000\n```\n\n----------------------------------------\n\nTITLE: Setting Individual Labels in Dockerfile\nDESCRIPTION: Examples of different formats for adding LABEL instructions to Docker images, showing proper quoting and escaping of values with spaces.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Set one or more individual labels\nLABEL com.example.version=\"0.0.1-beta\"\nLABEL vendor1=\"ACME Incorporated\"\nLABEL vendor2=ZENITH\\ Incorporated\nLABEL com.example.release-date=\"2015-02-12\"\nLABEL com.example.version.is-production=\"\"\n```\n\n----------------------------------------\n\nTITLE: Using COPY and RUN --mount with Named Contexts in Dockerfile\nDESCRIPTION: This Dockerfile demonstrates how to copy files from the default context and mount files from a named context. It first copies all files from the default context to /app/src and then mounts files from a named 'docs' context to build documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_14\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM buildbase\nWORKDIR /app\n\n# Copy all files from the default context into /app/src in the build container\nCOPY . /app/src\nRUN make bin\n\n# Mount the files from the named \"docs\" context to build the documentation\nRUN --mount=from=docs,target=/app/docs \\\n    make manpages\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Driver Builder\nDESCRIPTION: Basic command to create a new builder using the remote driver, connecting to a BuildKit instance on localhost port 1234.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/remote.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create \\\n  --name remote \\\n  --driver remote \\\n  tcp://localhost:1234\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Maven/Tomcat Build\nDESCRIPTION: Multi-stage Dockerfile that separates Java build environment from runtime environment\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/09_image_best.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM maven AS build\nWORKDIR /app\nCOPY . .\nRUN mvn package\n\nFROM tomcat\nCOPY --from=build /app/target/file.war /usr/local/tomcat/webapps\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Networks\nDESCRIPTION: Command to list all Docker networks on a node, showing network ID, name, driver, and scope. After joining a swarm, each node has the ingress overlay network and docker_gwbridge network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker network ls\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Storage Driver Configuration\nDESCRIPTION: Command to verify Docker is using the VFS storage driver by checking the output of docker info.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/vfs-driver.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker info\n\nStorage Driver: vfs\n...\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Network Configuration\nDESCRIPTION: A basic Compose file demonstrating the default network setup with web and database services. The web service exposes port 8000 while the database service exposes PostgreSQL on port 8001.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/networking.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    ports:\n      - \"8000:8000\"\n  db:\n    image: postgres\n    ports:\n      - \"8001:5432\"\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image Without Cache\nDESCRIPTION: Example of how to build a Docker image while bypassing the cache to ensure all dependencies are freshly downloaded. This is important for security updates and ensuring the latest versions of packages.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --no-cache -t my-image:my-tag .\n```\n\n----------------------------------------\n\nTITLE: Single-stage Dockerfile for Spring Boot Application\nDESCRIPTION: A Dockerfile that builds and runs a Spring Boot application. It uses a JDK base image, copies the Maven wrapper and project files, downloads dependencies, and sets the command to run the application.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#2025-04-11_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM eclipse-temurin:21.0.2_13-jdk-jammy\nWORKDIR /app\nCOPY .mvn/ .mvn\nCOPY mvnw pom.xml ./\nRUN ./mvnw dependency:go-offline\nCOPY src ./src\nCMD [\"./mvnw\", \"spring-boot:run\"]\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Kubernetes Deployment Creation\nDESCRIPTION: The terminal output when successfully creating Kubernetes deployment and service resources, showing that both resources were created.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/deploy.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndeployment.apps/docker-deno-demo created\nservice/service-entrypoint created\n```\n\n----------------------------------------\n\nTITLE: Running Rootless Docker Inside Docker Container\nDESCRIPTION: Example of using the specialized docker:dind-rootless image to run rootless Docker inside a Docker container, which requires privileged mode but runs with a non-root user.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name dind-rootless --privileged docker:25.0-dind-rootless\n```\n\n----------------------------------------\n\nTITLE: Creating a Password File for Database Authentication\nDESCRIPTION: This snippet shows the content of the password.txt file used as a Docker secret for the MariaDB database authentication. It must be placed in the db directory with no additional lines.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nexample\n```\n\n----------------------------------------\n\nTITLE: Validating Variable Dependencies in Docker Bake HCL\nDESCRIPTION: Shows how to create validation rules that enforce dependencies between variables in a Docker Bake HCL file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/variables.md#2025-04-11_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"FOO\" {}\n\nvariable \"BAR\" {\n  validation {\n    condition = FOO != \"\"\n    error_message = \"The variable 'BAR' requires 'FOO' to be set.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Base Image in Dockerfile\nDESCRIPTION: Specifies the foundation for the Docker build using a lightweight Python 3.8 image optimized for size and speed.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.8-slim\n```\n\n----------------------------------------\n\nTITLE: Adding Image Mount in Docker Container\nDESCRIPTION: New functionality to mount an image inside a container using the --mount type=image flag, with optional image-subpath parameter for mounting specific paths.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--mount type=image\n--mount type=image,image-subpath=[subpath],...\n```\n\n----------------------------------------\n\nTITLE: Configuring daemon.json for containerd snapshotter\nDESCRIPTION: JSON configuration to add to the Docker daemon configuration file to enable the containerd snapshotter feature. This needs to be added to the /etc/docker/daemon.json file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/containerd.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"containerd-snapshotter\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Automated Tests with Docker Compose\nDESCRIPTION: This code demonstrates a typical workflow for running automated tests within Docker Compose. It shows the three essential commands: starting containers in detached mode, running the test suite, and then tearing down the environment after testing.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/intro/features-uses.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up -d\n$ ./run_tests\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Compose Installation\nDESCRIPTION: Command to check if Docker Compose is installed correctly by checking its version, with the expected output showing the installed version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose version\n```\n\n----------------------------------------\n\nTITLE: Using Context Override Flag with Docker Commands\nDESCRIPTION: This command demonstrates how to use the --context flag to override the active context for a single command, which runs the container ls command against the 'production' context.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/contexts.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker --context production container ls\n```\n\n----------------------------------------\n\nTITLE: Creating an Overlay Network for Docker Swarm Services\nDESCRIPTION: Creates an overlay network named 'my-network' that can be used to connect services within the swarm, enabling service-to-service communication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create --driver overlay my-network\n```\n\n----------------------------------------\n\nTITLE: Rebuilding and Redeploying a Specific Service\nDESCRIPTION: These commands show how to rebuild the image for a specific service (web) and redeploy it without affecting its dependencies. This is useful for applying code changes to a single service in a multi-service application.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/production.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose build web\n$ docker compose up --no-deps -d web\n```\n\n----------------------------------------\n\nTITLE: Service Dependencies with Short Syntax\nDESCRIPTION: Example showing how to define service dependencies using the short syntax format.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    depends_on:\n      - db\n      - redis\n  redis:\n    image: redis\n  db:\n    image: postgres\n```\n\n----------------------------------------\n\nTITLE: Running Application with Docker Compose\nDESCRIPTION: Console output when starting the application with the docker compose up command, showing container creation, service logs, and the application startup process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up\n\nCreating network \"composetest_default\" with the default driver\nCreating composetest_web_1 ...\nCreating composetest_redis_1 ...\nCreating composetest_web_1\nCreating composetest_redis_1 ... done\nAttaching to composetest_web_1, composetest_redis_1\nweb_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)\nredis_1  | 1:C 17 Aug 22:11:10.480 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo\nredis_1  | 1:C 17 Aug 22:11:10.480 # Redis version=4.0.1, bits=64, commit=00000000, modified=0, pid=1, just started\nredis_1  | 1:C 17 Aug 22:11:10.480 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf\nweb_1    |  * Restarting with stat\nredis_1  | 1:M 17 Aug 22:11:10.483 * Running mode=standalone, port=6379.\nredis_1  | 1:M 17 Aug 22:11:10.483 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.\nweb_1    |  * Debugger is active!\nredis_1  | 1:M 17 Aug 22:11:10.483 # Server initialized\nredis_1  | 1:M 17 Aug 22:11:10.483 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.\nweb_1    |  * Debugger PIN: 330-787-903\nredis_1  | 1:M 17 Aug 22:11:10.483 * Ready to accept connections\n```\n\n----------------------------------------\n\nTITLE: Defining Build Targets with Docker Buildx Bake in HCL\nDESCRIPTION: This HCL code snippet demonstrates how to define a Bake file with multiple build targets and a default group. It specifies contexts, Dockerfiles, build arguments, and tags for frontend and backend targets.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"default\" {\n  targets = [\"frontend\", \"backend\"]\n}\n\ntarget \"frontend\" {\n  context = \"./frontend\"\n  dockerfile = \"frontend.Dockerfile\"\n  args = {\n    NODE_VERSION = \"22\"\n  }\n  tags = [\"myapp/frontend:latest\"]\n}\n\ntarget \"backend\" {\n  context = \"./backend\"\n  dockerfile = \"backend.Dockerfile\"\n  args = {\n    GO_VERSION = \"{{% param \"example_go_version\" %}}\"\n  }\n  tags = [\"myapp/backend:latest\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Basic Rust Container\nDESCRIPTION: Basic command to run a Rust Docker image as a container without any additional configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/run-containers.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run docker-rust-image\n```\n\n----------------------------------------\n\nTITLE: Enabling Privileged Port Access for Rootless Docker\nDESCRIPTION: Commands to allow Docker in rootless mode to bind to privileged ports (below 1024) by setting capabilities on the rootlesskit binary or modifying system parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ sudo setcap cap_net_bind_service=ep $(which rootlesskit)\n$ systemctl --user restart docker\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Docker Engine on Debian\nDESCRIPTION: Command to install the latest version of Docker Engine and related packages from the apt repository. This includes the Docker daemon, CLI, containerization runtime, and plugins.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring phpMyAdmin with Hostname-Based Routing\nDESCRIPTION: Docker Compose configuration for phpMyAdmin with Traefik labels to route requests with the hostname 'db.localhost' to this service. Includes environment variables for automatic login.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # …\n  phpmyadmin:\n    image: phpmyadmin:5.2.1\n    labels:\n      traefik.http.routers.db.rule: \"Host(`db.localhost`)\"\n    environment:\n      PMA_USER: root\n      PMA_PASSWORD: password\n```\n\n----------------------------------------\n\nTITLE: Stopping the Containerized Python Application\nDESCRIPTION: Command to stop and remove containers, networks, and volumes defined in the compose.yaml file, effectively shutting down the application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama LLM Service with GPU Support in Docker Compose\nDESCRIPTION: YAML configuration for setting up an Ollama container with GPU passthrough support using NVIDIA devices.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rag-ollama/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nollama:\n  image: ollama/ollama\n  container_name: ollama\n  ports:\n    - \"8000:8000\"\n  deploy:\n    resources:\n      reservations:\n        devices:\n          - driver: nvidia\n            count: 1\n            capabilities: [gpu]\n```\n\n----------------------------------------\n\nTITLE: Docker Registry Certificate Directory Structure\nDESCRIPTION: Illustrates the directory structure for storing custom certificates used for Docker registry authentication. Shows the expected file organization with client certificates, keys, and CA certificates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/certificates.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    /etc/docker/certs.d/        <-- Certificate directory\n    └── localhost:5000          <-- Hostname:port\n       ├── client.cert          <-- Client certificate\n       ├── client.key           <-- Client key\n       └── ca.crt               <-- Root CA that signed\n                                    the registry certificate, in PEM\n```\n\n----------------------------------------\n\nTITLE: Pulling a Docker Image with Authentication in Go\nDESCRIPTION: Example of pulling a Docker image with authentication using the Docker Go SDK. This code demonstrates how to create authentication credentials, encode them for the API request, and pull an image with those credentials.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_13\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/docker/docker/api/types/image\"\n\t\"github.com/docker/docker/api/types/registry\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tcli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer cli.Close()\n\n\tauthConfig := registry.AuthConfig{\n\t\tUsername: \"username\",\n\t\tPassword: \"password\",\n\t}\n\tencodedJSON, err := json.Marshal(authConfig)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tauthStr := base64.URLEncoding.EncodeToString(encodedJSON)\n\n\tout, err := cli.ImagePull(ctx, \"alpine\", image.PullOptions{RegistryAuth: authStr})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer out.Close()\n\tio.Copy(os.Stdout, out)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Deployment YAML for Rust Application with PostgreSQL\nDESCRIPTION: A Kubernetes YAML configuration file that defines deployments and services for a Rust application and PostgreSQL database. It includes container configurations, environment variables, port mappings, and service definitions.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    service: server\n  name: server\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      service: server\n  strategy: {}\n  template:\n    metadata:\n      labels:\n        service: server\n    spec:\n      initContainers:\n        - name: wait-for-db\n          image: busybox:1.28\n          command:\n            [\n              \"sh\",\n              \"-c\",\n              'until nc -zv db 5432; do echo \"waiting for db\"; sleep 2; done;',\n            ]\n      containers:\n        - image: DOCKER_USERNAME/REPO_NAME\n          name: server\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8000\n              hostPort: 5000\n              protocol: TCP\n          env:\n            - name: ADDRESS\n              value: 0.0.0.0:8000\n            - name: PG_DBNAME\n              value: example\n            - name: PG_HOST\n              value: db\n            - name: PG_PASSWORD\n              value: mysecretpassword\n            - name: PG_USER\n              value: postgres\n            - name: RUST_LOG\n              value: debug\n          resources: {}\n      restartPolicy: Always\nstatus: {}\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    service: db\n  name: db\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      service: db\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        service: db\n    spec:\n      containers:\n        - env:\n            - name: POSTGRES_DB\n              value: example\n            - name: POSTGRES_PASSWORD\n              value: mysecretpassword\n            - name: POSTGRES_USER\n              value: postgres\n          image: postgres\n          name: db\n          ports:\n            - containerPort: 5432\n              protocol: TCP\n          resources: {}\n      restartPolicy: Always\nstatus: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    service: server\n  name: server\n  namespace: default\nspec:\n  type: NodePort\n  ports:\n    - name: \"5000\"\n      port: 5000\n      targetPort: 8000\n      nodePort: 30001\n  selector:\n    service: server\nstatus:\n  loadBalancer: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    service: db\n  name: db\n  namespace: default\nspec:\n  ports:\n    - name: \"5432\"\n      port: 5432\n      targetPort: 5432\n  selector:\n    service: db\nstatus:\n  loadBalancer: {}\n```\n\n----------------------------------------\n\nTITLE: Pulling an AI Model from Docker Hub\nDESCRIPTION: Command to pull an AI model from Docker Hub to the local environment, with the model specified as a parameter.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker model pull <model>\n```\n\n----------------------------------------\n\nTITLE: Properly Unsetting ENV Variables in a Single Layer\nDESCRIPTION: Using a single RUN command with multiple shell commands to set, use, and unset a variable all in one layer. This prevents the variable from persisting in the final image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_21\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine\nRUN export ADMIN_USER=\"mark\" \\\n    && echo $ADMIN_USER > ./mark \\\n    && unset ADMIN_USER\nCMD sh\n```\n\n----------------------------------------\n\nTITLE: Setting up the Extension Folder Structure in Bash\nDESCRIPTION: Shows the basic directory structure needed for a minimal frontend Docker extension. Includes the Dockerfile, metadata.json, and UI folder containing the index.html file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/minimal-frontend-extension.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── Dockerfile # (1)\n├── metadata.json # (2)\n└── ui # (3)\n    └── index.html\n```\n\n----------------------------------------\n\nTITLE: Original Dockerfile for Go Application\nDESCRIPTION: The original Dockerfile for the Go application without cross-compilation support, included for comparison purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_17\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM golang:alpine AS build\nWORKDIR /app\nADD https://github.com/dvdksn/buildme.git#eb6279e0ad8a10003718656c6867539bd9426ad8 .\nRUN go build -o server .\n\nFROM alpine\nCOPY --from=build /app/server /server\nENTRYPOINT [\"/server\"]\n```\n\n----------------------------------------\n\nTITLE: Creating an IPvlan Network and Running a Container\nDESCRIPTION: This example demonstrates how to create an IPvlan network in L2 mode and run a container attached to it. It specifies the subnet, gateway, and parent interface.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create -d ipvlan \\\n    --subnet=192.168.1.0/24 \\\n    --gateway=192.168.1.1 \\\n    -o ipvlan_mode=l2 \\\n    -o parent=eth0 db_net\n\n$ docker run --net=db_net -it --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting Docker Service on Fedora\nDESCRIPTION: This command starts the Docker service and configures it to start automatically on system boot. It's necessary to run after installing Docker to make the service operational.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/fedora.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo systemctl enable --now docker\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Pipeline for Docker Scout Security Scanning\nDESCRIPTION: This Jenkinsfile snippet defines a Jenkins pipeline that installs Docker Scout CLI, authenticates with Docker Hub using credentials, and scans a Docker image for critical and high-severity vulnerabilities. The pipeline will fail if any critical or high vulnerabilities are found in the specified image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/ci/jenkins.md#2025-04-11_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n    agent {\n        // Agent details\n    }\n\n    environment {\n        DOCKER_HUB = credentials('jenkins-docker-hub-credentials')\n        IMAGE_TAG  = 'myorg/scout-demo-service:latest'\n    }\n\n    stages {\n        stage('Analyze image') {\n            steps {\n                // Install Docker Scout\n                sh 'curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /usr/local/bin'\n\n                // Log into Docker Hub\n                sh 'echo $DOCKER_HUB_PSW | docker login -u $DOCKER_HUB_USR --password-stdin'\n\n                // Analyze and fail on critical or high vulnerabilities\n                sh 'docker-scout cves $IMAGE_TAG --exit-code --only-severity critical,high'\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Container for Volume Backup\nDESCRIPTION: This command creates a new container named dbstore with a volume at /dbdata for backup purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -v /dbdata --name dbstore ubuntu /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Defining a Bake Target for Build Checks in HCL\nDESCRIPTION: This HCL snippet defines two Bake targets: 'build' for normal builds and 'validate-build' for running build checks. The 'validate-build' target inherits from 'build' and sets the 'call' parameter to 'check' for validation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/checks.md#2025-04-11_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"build\" {\n  dockerfile = \"Dockerfile\"\n  args = {\n    FOO = \"bar\"\n  }\n}\ntarget \"validate-build\" {\n  inherits = [\"build\"]\n  call = \"check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Entitlements\nDESCRIPTION: Example of defining privileged entitlements to be allowed during the build process for advanced build scenarios.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nentitlements:\n  - network.host\n  - security.insecure\n```\n\n----------------------------------------\n\nTITLE: Running Wasm Application with Docker Compose\nDESCRIPTION: This Docker Compose configuration shows how to run a Wasm application. It specifies the image, platform, and runtime for the Wasm container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/wasm.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: secondstate/rust-example-hello\n    platform: wasi/wasm\n    runtime: io.containerd.wasmedge.v1\n```\n\n----------------------------------------\n\nTITLE: Inspecting Service Published Ports\nDESCRIPTION: Command to inspect a Docker service's published ports using the --format flag to extract and display the port configuration in JSON format.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker service inspect --format=\"{{json .Endpoint.Spec.Ports}}\" my-web\n\n[{\"Protocol\":\"tcp\",\"TargetPort\":80,\"PublishedPort\":8080}]\n```\n\n----------------------------------------\n\nTITLE: Adding OCI Annotations to Built Images\nDESCRIPTION: Example of how to set an OCI annotation (specifically org.opencontainers.image.title) when building an image using either the OCI or Docker exporter.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/oci-docker.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build \\\n    --output \"type=<type>,name=<registry>/<image>,annotation.org.opencontainers.image.title=<title>\" .\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Docker Hub\nDESCRIPTION: Command to push a Docker image to Docker Hub. Replace YOUR-USER-NAME with your Docker ID.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/04_sharing_app.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker push YOUR-USER-NAME/getting-started\n```\n\n----------------------------------------\n\nTITLE: Deploying Java Application to Kubernetes\nDESCRIPTION: Command to apply the Kubernetes YAML configuration file to create deployment and service resources. This deploys the Java application to the local Kubernetes cluster provided by Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f docker-java-kubernetes.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Container Builder with Custom BuildKit Config\nDESCRIPTION: Uses docker buildx create command to set up a new builder named 'mybuilder' using the docker-container driver and applying a custom BuildKit configuration file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/configure.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx create --use --bootstrap \\\n  --name mybuilder \\\n  --driver docker-container \\\n  --config /etc/buildkitd.toml\n```\n\n----------------------------------------\n\nTITLE: Mounting into a Non-Empty Directory using -v in Docker\nDESCRIPTION: This snippet shows how to bind-mount a directory into a non-empty directory on a Docker container using the -v flag. It demonstrates the same non-functioning container example as the previous snippet.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -it \\\n  --name broken-container \\\n  -v /tmp:/usr \\\n  nginx:latest\n\ndocker: Error response from daemon: oci runtime error: container_linux.go:262:\nstarting container process caused \"exec: \\\"nginx\\\": executable file not found in $PATH\".\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Cache Export Locations\nDESCRIPTION: Example of defining export locations for build cache to be shared with future builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  cache_to:\n   - user/app:cache\n   - type=local,dest=path/to/cache\n```\n\n----------------------------------------\n\nTITLE: Copying Go Module Files in Dockerfile\nDESCRIPTION: Dockerfile instruction to copy the Go module definition files (go.mod and go.sum) into the container image. These files are required for dependency management.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY go.mod go.sum ./\n```\n\n----------------------------------------\n\nTITLE: Updating a Service to Publish a Port in Docker Swarm\nDESCRIPTION: Updates an existing service to publish port 80, making it accessible to clients outside the swarm. This is essential for web services that need to be publicly available.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker service update --publish-add 80 my_web\n```\n\n----------------------------------------\n\nTITLE: Configuring the Default Bridge Network in Docker\nDESCRIPTION: JSON configuration for the default bridge network in daemon.json. This example sets the bridge IP, subnet, container address range, MTU, default gateway, and DNS servers for the default bridge network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bip\": \"192.168.1.1/24\",\n  \"fixed-cidr\": \"192.168.1.0/25\",\n  \"mtu\": 1500,\n  \"default-gateway\": \"192.168.1.254\",\n  \"dns\": [\"10.20.1.2\",\"10.20.1.3\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Swarm Service with Read-Only Bind Mount\nDESCRIPTION: This command creates a service with a read-only bind mount from a host path to a container path, preventing the container from writing to the mounted directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_40\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --mount type=bind,src=<HOST-PATH>,dst=<CONTAINER-PATH>,readonly \\\n  --name myservice \\\n  <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Base Dockerfile for Go Application without Cross-Compilation\nDESCRIPTION: A basic Dockerfile that builds a Go application using the golang Alpine image and packages it in a minimal Alpine container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_15\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM golang:alpine AS build\nWORKDIR /app\nADD https://github.com/dvdksn/buildme.git#eb6279e0ad8a10003718656c6867539bd9426ad8 .\nRUN go build -o server .\n\nFROM alpine\nCOPY --from=build /app/server /server\nENTRYPOINT [\"/server\"]\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDKIT_PROGRESS Environment Variable\nDESCRIPTION: Sets the type of BuildKit progress output. This determines how build progress is displayed in the terminal.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport BUILDKIT_PROGRESS=plain\n```\n\n----------------------------------------\n\nTITLE: Running a Container with Anonymous and Named Volumes\nDESCRIPTION: This command runs a container with both an anonymous volume (/foo) and a named volume (awesome), demonstrating volume removal behavior.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -v /foo -v awesome:/bar busybox top\n```\n\n----------------------------------------\n\nTITLE: Using Bind Mount Options with --mount Flag\nDESCRIPTION: Example of using multiple options with the --mount flag, including setting the source directory, destination path, read-only permission, and bind propagation settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --mount type=bind,src=.,dst=/project,ro,bind-propagation=rshared\n```\n\n----------------------------------------\n\nTITLE: API Response for POST Request\nDESCRIPTION: The JSON response returned by the API after successfully creating a hero object. It confirms the object was created with the provided attributes.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"age\": 12,\n  \"id\": 1,\n  \"name\": \"my hero\",\n  \"secret_name\": \"austing\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output with Environment Variables Applied\nDESCRIPTION: The JSON output when using buildx bake with a Compose file that uses environment variables. It shows how the TAG variable from the .env file is applied to the image tag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/compose-file.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\"webapp\"]\n    }\n  },\n  \"target\": {\n    \"webapp\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile\",\n      \"tags\": [\"docker.io/username/webapp:v1.1.0\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Service Task Distribution with Docker CLI\nDESCRIPTION: Uses the docker service ps command to view which nodes are running instances of a service, showing task name, image, node, and state information for monitoring service distribution across the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/inspect-service.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n[manager1]$ docker service ps helloworld\n\nNAME                                    IMAGE   NODE     DESIRED STATE  CURRENT STATE           ERROR               PORTS\nhelloworld.1.8p1vev3fq5zm0mi8g0as41w35  alpine  worker2  Running        Running 3 minutes\n```\n\n----------------------------------------\n\nTITLE: Configuring Profiles in Docker Compose YAML\nDESCRIPTION: An illustrative example of how to configure profiles in a Docker Compose file. It demonstrates defining multiple services with different profile assignments and dependency relationships to showcase how profile activation affects service inclusion.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/profiles.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    image: web_image\n\n  test_lib:\n    image: test_lib_image\n    profiles:\n      - test\n\n  coverage_lib:\n    image: coverage_lib_image\n    depends_on:\n      - test_lib\n    profiles:\n      - test\n\n  debug_lib:\n    image: debug_lib_image\n    depends_on:\n      - test_lib\n    profiles:\n      - debug\n```\n\n----------------------------------------\n\nTITLE: Basic Profile Assignment in Docker Compose\nDESCRIPTION: Demonstrates how to assign profiles to different services in a Docker Compose configuration. Shows basic profile assignment for frontend, debug tools, and always-on services.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/profiles.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: frontend\n    profiles: [frontend]\n\n  phpmyadmin:\n    image: phpmyadmin\n    depends_on: [db]\n    profiles: [debug]\n\n  backend:\n    image: backend\n\n  db:\n    image: mysql\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop from Command Line (Console)\nDESCRIPTION: Command to install Docker Desktop using the installer executable from the command line. This method allows for silent installation and customization through various flags.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/windows-install.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ \"Docker Desktop Installer.exe\" install\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Build Using Node.js Slim Image in Dockerfile\nDESCRIPTION: This Dockerfile demonstrates a multi-stage build pattern for Node.js applications. It uses the full 'node:latest' image for dependency installation in the build stage, then copies only the necessary files to the lightweight 'node:slim' image for the final production container, resulting in a smaller image size.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/image-library/trusted-content.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:latest AS build\nWORKDIR /app\nCOPY package.json package-lock.json ./\nRUN npm ci\nCOPY . ./\nFROM node:slim\nWORKDIR /app\nCOPY --from=build /app /app\nCMD [\"node\", \"app.js\"]\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Watch Mode in Console\nDESCRIPTION: This snippet shows how to start Docker Compose in watch mode, which builds and launches the app while monitoring file changes. It displays the output showing two containers being created and watch mode being enabled.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose watch\n[+] Running 2/2\n ✔ Container docs-redis-1 Created                                                                                                                                                                                                        0.0s\n ✔ Container docs-web-1    Recreated                                                                                                                                                                                                      0.1s\nAttaching to redis-1, web-1\n         ⦿ watch enabled\n...\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container on New Instance\nDESCRIPTION: Command to run a Docker container from a pushed image on a new instance, binding to all interfaces.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/04_sharing_app.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -dp 0.0.0.0:3000:3000 YOUR-USER-NAME/getting-started\n```\n\n----------------------------------------\n\nTITLE: Adding an Existing Service to an Overlay Network in Docker Swarm\nDESCRIPTION: Updates an existing service named 'my-web' to connect it to an overlay network named 'my-network', allowing it to communicate with other services on that network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ docker service update --network-add my-network my-web\n```\n\n----------------------------------------\n\nTITLE: Deploying MySQL Service with Docker Secrets\nDESCRIPTION: Creates a single-node MySQL service that uses Docker secrets for password management, connects to the private network, and persists data in a volume. The passwords are mounted as files rather than passed as environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker service create \\\n     --name mysql \\\n     --replicas 1 \\\n     --network mysql_private \\\n     --mount type=volume,source=mydata,destination=/var/lib/mysql \\\n     --secret source=mysql_root_password,target=mysql_root_password \\\n     --secret source=mysql_password,target=mysql_password \\\n     -e MYSQL_ROOT_PASSWORD_FILE=\"/run/secrets/mysql_root_password\" \\\n     -e MYSQL_PASSWORD_FILE=\"/run/secrets/mysql_password\" \\\n     -e MYSQL_USER=\"wordpress\" \\\n     -e MYSQL_DATABASE=\"wordpress\" \\\n     mysql:latest\n```\n\n----------------------------------------\n\nTITLE: Running Buildx Bake with Print Option\nDESCRIPTION: Command to execute Docker Buildx Bake with the --print flag, which shows the final build configuration that would be used without actually performing the build.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/compose-file.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake --print\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations with Docker Build Command\nDESCRIPTION: This command demonstrates how to add an annotation to a Docker image during build time using the --push flag to ensure the image with annotations is pushed to a registry.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/annotations.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --push --annotation \"foo=bar\" .\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Node.js Production Build\nDESCRIPTION: This Dockerfile sets the NODE_ENV environment variable to 'production' before installing dependencies, demonstrating how to use ENV instructions to configure the build environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM node:20\nWORKDIR /app\nCOPY package*.json ./\nENV NODE_ENV=production\nRUN npm ci && npm cache clean --force\nCOPY . .\nCMD [\"node\", \"app.js\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with PostgreSQL Database\nDESCRIPTION: A Docker Compose configuration that sets up a Python server with a PostgreSQL database. It includes service definitions, environment variables, secrets management for the database password, volume configuration for data persistence, and health checking for the database service.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 8001:8001\n    environment:\n      - POSTGRES_SERVER=db\n      - POSTGRES_USER=postgres\n      - POSTGRES_DB=example\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    depends_on:\n      db:\n        condition: service_healthy\n    secrets:\n      - db-password\n  db:\n    image: postgres\n    restart: always\n    user: postgres\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=example\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    expose:\n      - 5432\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Compose Watch for Development\nDESCRIPTION: Enhanced Docker Compose file that includes the watch configuration for development, allowing code changes to be automatically synced to the running container without requiring rebuilds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    ports:\n      - \"8000:5000\"\n    develop:\n      watch:\n        - action: sync\n          path: .\n          target: /code\n  redis:\n    image: \"redis:alpine\"\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container for Testing\nDESCRIPTION: Command to run the newly built Docker image as a container for testing. The -p flag maps port 8080 on the host to port 80 in the container, and --rm removes the container when stopped.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/quickstart.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -p 8080:80 --rm <YOUR-USERNAME>/nginx-custom\n```\n\n----------------------------------------\n\nTITLE: Creating a Service with a Specific Image Tag in Docker Swarm\nDESCRIPTION: Creates a service that uses a specific version tag of an image (alpine:3.6), allowing for precise control over which version of the software is deployed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name helloworld alpine:3.6 ping docker.com\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Macvlan Bridge Network\nDESCRIPTION: Creates a macvlan network called my-macvlan-net with specified subnet and gateway configurations. The network is attached to the eth0 interface.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/macvlan.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d macvlan \\\n  --subnet=172.16.86.0/24 \\\n  --gateway=172.16.86.1 \\\n  -o parent=eth0 \\\n  my-macvlan-net\n```\n\n----------------------------------------\n\nTITLE: Updating Nginx Service Configuration\nDESCRIPTION: Docker service update command that rotates the configuration by removing the old config and adding the new version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ docker service update \\\n  --config-rm site.conf \\\n  --config-add source=site-v2.conf,target=/etc/nginx/conf.d/site.conf,mode=0440 \\\n  nginx\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with PostgreSQL Database for Java Development\nDESCRIPTION: This Docker Compose configuration sets up a Java server with a PostgreSQL database service, including volume persistence, port mappings, and health checks. The database credentials and connection properties are specified as environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 8080:8080\n    depends_on:\n      db:\n        condition: service_healthy\n    environment:\n      - POSTGRES_URL=jdbc:postgresql://db:5432/petclinic\n  db:\n    image: postgres\n    restart: always\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=petclinic\n      - POSTGRES_USER=petclinic\n      - POSTGRES_PASSWORD=petclinic\n    ports:\n      - 5432:5432\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"petclinic\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop RPM Package on Fedora\nDESCRIPTION: Command to install the Docker Desktop RPM package using dnf package manager on Fedora. This installs Docker Desktop to the default location at /opt/docker-desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/fedora.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install ./docker-desktop-x86_64.rpm\n```\n\n----------------------------------------\n\nTITLE: Building and Starting PostgreSQL Container with Docker Compose\nDESCRIPTION: Command to build and start the PostgreSQL container in detached mode using Docker Compose, which will incorporate the seed script for database initialization.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up -d --build\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Root User and Group in Dockerfile\nDESCRIPTION: This Dockerfile instruction creates a dedicated non-root user and group (postgres) for running services with reduced privileges. It uses groupadd to create the group and useradd with the --no-log-init flag to create the user to avoid potential disk exhaustion issues.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_33\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN groupadd -r postgres && useradd --no-log-init -r -g postgres postgres\n```\n\n----------------------------------------\n\nTITLE: Configuring Isolated Builders for Docker CI/CD Pipeline in YAML\nDESCRIPTION: This YAML configuration sets up two separate builders and uses them for different build targets in a GitHub Actions workflow. It demonstrates how to isolate build processes for different parts of a project, which can be useful in monorepo setups or when different build requirements exist.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/configure-builder.md#2025-04-11_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up builder1\n        uses: docker/setup-buildx-action@v3\n        id: builder1\n      \n      - name: Set up builder2\n        uses: docker/setup-buildx-action@v3\n        id: builder2\n      \n      - name: Build against builder1\n        uses: docker/build-push-action@v6\n        with:\n          builder: ${{ steps.builder1.outputs.name }}\n          target: mytarget1\n      \n      - name: Build against builder2\n        uses: docker/build-push-action@v6\n        with:\n          builder: ${{ steps.builder2.outputs.name }}\n          target: mytarget2\n```\n\n----------------------------------------\n\nTITLE: Promoting Worker Nodes to Manager Role in Docker Swarm\nDESCRIPTION: Shows how to promote worker nodes to manager role using the docker node promote command, which is useful for maintaining quorum when manager nodes are unavailable.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/manage-nodes.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker node promote node-3 node-2\n\nNode node-3 promoted to a manager in the swarm.\nNode node-2 promoted to a manager in the swarm.\n```\n\n----------------------------------------\n\nTITLE: Listing Services in Docker Swarm\nDESCRIPTION: This command lists the running services in the Docker swarm. It shows the service ID, name, scale (running instances vs desired state), image, and command for each service.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/deploy-service.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker service ls\n\nID            NAME        SCALE  IMAGE   COMMAND\n9uk4639qpg7n  helloworld  1/1    alpine  ping docker.com\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Limited CPU Percentage\nDESCRIPTION: Example of limiting a Docker container to use at most 50% of available CPU resources using the --cpus flag. This provides a simple way to specify CPU limits as a decimal value.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/resource_constraints.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it --cpus=\".5\" ubuntu /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Creating Dual-Stack IPv4/IPv6 Network with VLAN Tagging\nDESCRIPTION: Creates a Docker network with IPvlan driver using dual IPv4/IPv6 addressing and explicit gateways. Configures the network with VLAN ID 140 in L2 mode using the parent interface eth0.140.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create -d ipvlan \\\n    --subnet=192.168.140.0/24 --subnet=192.168.142.0/24 \\\n    --gateway=192.168.140.1 --gateway=192.168.142.1 \\\n    --subnet=2001:db8:abc9::/64 --gateway=2001:db8:abc9::22 \\\n    -o parent=eth0.140 \\\n    -o ipvlan_mode=l2 ipvlan140\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Dockerfile Syntax Directive\nDESCRIPTION: Shows how to set the syntax directive in a Dockerfile to use a custom frontend. This directive must be the first line in your Dockerfile and specifies the remote image reference to use.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/frontend.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=[remote image reference]\n```\n\n----------------------------------------\n\nTITLE: Removing a Swarm Stack\nDESCRIPTION: Command to remove the entire 'demo' stack from the Swarm cluster, which will stop and remove all services defined in that stack.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/swarm-deploy.md#2025-04-11_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ docker stack rm demo\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Socket Mount Permissions in admin-settings.json\nDESCRIPTION: This JSON configuration example shows how to configure ECI to allow specific container images to bind-mount the Docker Engine socket. It includes an image list of allowed images and a command list to restrict certain Docker commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/config.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configurationFileVersion\": 2,\n  \"enhancedContainerIsolation\": {\n    \"locked\": true,\n    \"value\": true,\n    \"dockerSocketMount\": {\n      \"imageList\": {\n        \"images\": [\n          \"docker.io/localstack/localstack:*\",\n          \"docker.io/testcontainers/ryuk:*\",\n          \"docker:cli\"\n        ],\n        \"allowDerivedImages\": true\n      },\n      \"commandList\": {\n        \"type\": \"deny\",\n        \"commands\": [\"push\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Service and Verifying Manual Installation\nDESCRIPTION: Commands to start the Docker service and verify installation after manual package installation. This ensures the daemon is running and can execute containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo service docker start\n$ sudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Setting SOURCE_DATE_EPOCH to Unix Epoch with docker/build-push-action\nDESCRIPTION: GitHub Actions workflow that builds a Docker image with reproducible timestamps set to Unix epoch (0). Uses docker/build-push-action to build the image with the SOURCE_DATE_EPOCH environment variable.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/reproducible-builds.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build\n        uses: docker/build-push-action@v6\n        with:\n          tags: user/app:latest\n        env:\n          SOURCE_DATE_EPOCH: 0\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Deployment and Service for Ruby on Rails\nDESCRIPTION: This YAML file defines a Kubernetes Deployment and Service for a Ruby on Rails application. The Deployment specifies the container image and replica count, while the Service exposes the application on port 30001.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: docker-ruby-on-rails-demo\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      service: ruby-on-rails\n  template:\n    metadata:\n      labels:\n        service: ruby-on-rails\n    spec:\n      containers:\n        - name: ruby-on-rails-container\n          image: DOCKER_USERNAME/REPO_NAME\n          imagePullPolicy: Always\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: docker-ruby-on-rails-demo\n  namespace: default\nspec:\n  type: NodePort\n  selector:\n    service: ruby-on-rails\n  ports:\n    - port: 3000\n      targetPort: 3000\n      nodePort: 30001\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Go Backend for Docker Extension\nDESCRIPTION: This Go code creates a simple backend service for a Docker extension. It sets up an HTTP server that listens on a Unix socket and exposes a '/hello' endpoint that returns a JSON response.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/backend-extension-tutorial.md#2025-04-11_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/labstack/echo\"\n\t\"github.com/sirupsen/logrus\"\n)\n\nfunc main() {\n\tvar socketPath string\n\tflag.StringVar(&socketPath, \"socket\", \"/run/guest/volumes-service.sock\", \"Unix domain socket to listen on\")\n\tflag.Parse()\n\n\tos.RemoveAll(socketPath)\n\n\tlogrus.New().Infof(\"Starting listening on %s\\n\", socketPath)\n\trouter := echo.New()\n\trouter.HideBanner = true\n\n\tstartURL := \"\"\n\n\tln, err := listen(socketPath)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\trouter.Listener = ln\n\n\trouter.GET(\"/hello\", hello)\n\n\tlog.Fatal(router.Start(startURL))\n}\n\nfunc listen(path string) (net.Listener, error) {\n\treturn net.Listen(\"unix\", path)\n}\n\nfunc hello(ctx echo.Context) error {\n\treturn ctx.JSON(http.StatusOK, HTTPMessageBody{Message: \"hello world\"})\n}\n\ntype HTTPMessageBody struct {\n\tMessage string\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Stage for Binary Export\nDESCRIPTION: This Dockerfile snippet creates a stage for exporting the compiled binary. It uses a scratch image and copies the binary from the build stage.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_10\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM scratch AS bin\nCOPY --from=build \"/usr/bin/bakeme\" /\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Compose File for JupyterLab\nDESCRIPTION: A Docker Compose configuration file that defines a JupyterLab service with port mapping, volume mounting, and command options. It creates a persistent volume named 'jupyter-data' for storing notebook data.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  jupyter:\n    build:\n      context: .\n    ports:\n      - 8889:8888\n    volumes:\n      - jupyter-data:/home/jovyan/work\n    command: start-notebook.py --NotebookApp.token='my-token'\n\nvolumes:\n  jupyter-data:\n    name: jupyter-data\n```\n\n----------------------------------------\n\nTITLE: Basic Network Configuration in Docker Compose\nDESCRIPTION: Demonstrates basic network configuration with two networks (front-tier and back-tier) connected to a frontend service.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/networks.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    networks:\n      - front-tier\n      - back-tier\n\nnetworks:\n  front-tier:\n  back-tier:\n```\n\n----------------------------------------\n\nTITLE: Pulling a Docker Image with Authentication in Python\nDESCRIPTION: Shows how authentication is handled automatically by the Docker Python SDK when pulling images. After using 'docker login', the Python SDK uses the credentials stored in the credentials store file.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nimport docker\nclient = docker.from_env()\nimage = client.images.pull(\"alpine\")\nprint(image.id)\n```\n\n----------------------------------------\n\nTITLE: Building Multi-architecture Images with QEMU Emulation\nDESCRIPTION: Command to build a Linux image for multiple architectures (amd64 and arm64) using the --platform flag with the Docker container driver, pushing the result to a registry.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/docker-container.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build \\\n  --builder=container \\\n  --platform=linux/amd64,linux/arm64 \\\n  -t <registry>/<image> \\\n  --push .\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory with Console Commands\nDESCRIPTION: Console commands to create a new directory for the Docker Compose project and navigate into it.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir composetest\n$ cd composetest\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Dockerfile with Seed Script\nDESCRIPTION: Dockerfile that extends the official PostgreSQL image and copies a seed.sql script into the initialization directory for automatic database seeding at container startup.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM postgres:latest\nCOPY seed.sql /docker-entrypoint-initdb.d/\n```\n\n----------------------------------------\n\nTITLE: Starting Traefik Container with Docker Provider\nDESCRIPTION: Starts a Traefik container that exposes port 80 and mounts the Docker socket to monitor container events. The container is configured to use the Docker provider.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --network=traefik-demo -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock traefik:v3.1.2 --providers.docker\n```\n\n----------------------------------------\n\nTITLE: Updating React Component Placeholder Text\nDESCRIPTION: Modify the placeholder text in the AddNewItemForm React component to be more descriptive.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/develop-with-containers.md#2025-04-11_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<Form.Control\n    value={newItem}\n    onChange={(e) => setNewItem(e.target.value)}\n    type=\"text\"\n    placeholder=\"What do you need to do?\"\n    aria-label=\"New item\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining In-toto Attestation Statement Structure in JSON\nDESCRIPTION: Example structure of an in-toto attestation statement that contains subject information, predicate type, and predicate content. This format follows the in-toto attestation specification and is used within attestation blobs.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_type\": \"https://in-toto.io/Statement/v0.1\",\n  \"subject\": [\n    {\n      \"name\": \"<NAME>\",\n      \"digest\": {\"<ALGORITHM>\": \"<HEX_VALUE>\"}\n    },\n    ...\n  ],\n  \"predicateType\": \"<URI>\",\n  \"predicate\": { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Docker Desktop CLI Basic Command Structure\nDESCRIPTION: The basic command structure for using the Docker Desktop CLI. Commands are executed with 'docker desktop' followed by the specific command and any options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/desktop-cli.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker desktop COMMAND [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Using Bake for Building with Compose\nDESCRIPTION: This console command demonstrates how to use Bake for building Compose services by setting the COMPOSE_BAKE environment variable. Bake optimizes the build process and orchestrates execution efficiently.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/dependent-images.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ COMPOSE_BAKE=true docker compose build\n[+] Building 0.0s (0/1)                                                         \n => [internal] load local bake definitions                                 0.0s\n...\n[+] Building 2/2 manifest list sha256:4bd2e88a262a02ddef525c381a5bdb08c83  0.0s\n ✔ service_b  Built                                                        0.7s \n ✔ service_a  Built    \n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory in Dockerfile\nDESCRIPTION: Dockerfile instruction to set the working directory to /app within the container. This sets the default location for subsequent commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nWORKDIR /app\n```\n\n----------------------------------------\n\nTITLE: Listing Available Docker Versions\nDESCRIPTION: Command to list all available versions of Docker Engine in the repository\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# List the available versions:\n$ apt-cache madison docker-ce | awk '{ print $3 }'\n```\n\n----------------------------------------\n\nTITLE: Configuring workflow steps for Docker Scout scanning\nDESCRIPTION: Defines the steps for the CircleCI workflow including checking out code, setting up Docker, installing Docker Scout, authenticating with Docker Hub, building the image, and scanning it for vulnerabilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/ci/circle-ci.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  # Checkout the repository files\n  - checkout\n  \n  # Set up a separate Docker environment to run `docker` commands in\n  - setup_remote_docker:\n      version: 20.10.24\n\n  # Install Docker Scout and login to Docker Hub\n  - run:\n      name: Install Docker Scout\n      command: |\n        env\n        curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /home/circleci/bin\n        echo $DOCKER_HUB_PAT | docker login -u $DOCKER_HUB_USER --password-stdin\n\n  # Build the Docker image\n  - run:\n      name: Build Docker image\n      command: docker build -t $IMAGE_TAG .\n  \n  # Run Docker Scout          \n  - run:\n      name: Scan image for CVEs\n      command: |\n        docker-scout cves $IMAGE_TAG --exit-code --only-severity critical,high\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Verification Handler\nDESCRIPTION: Code block to handle SSL certificate verification for NLTK downloads in restricted environments.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    _create_unverified_https_context = ssl._create_unverified_context\nexcept AttributeError:\n    pass\nelse:\n    ssl._create_default_https_context = _create_unverified_https_context\n```\n\n----------------------------------------\n\nTITLE: Configuring API Service with Path-Based Routing\nDESCRIPTION: Docker Compose configuration for an API service with Traefik labels to route requests with the hostname 'localhost' and path prefix '/api' to this service.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # …\n  api:\n    build: ./dev/api\n    volumes:\n      - \"./api:/var/www/html/api\"\n    labels:\n      traefik.http.routers.api.rule: \"Host(`localhost`) && PathPrefix(`/api`)\"\n```\n\n----------------------------------------\n\nTITLE: Enrolling an Organization with Docker Scout\nDESCRIPTION: Command to enroll your Docker organization with Docker Scout, enabling organization-wide scanning capabilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout enroll <ORG_NAME>\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose in Detached Mode\nDESCRIPTION: Command to run the containerized R application in detached mode using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/containerize.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build -d\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Apt Repository\nDESCRIPTION: Series of commands to add Docker's official GPG key and set up the apt repository for Docker installation\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release && echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Joining a Worker Node to a Docker Swarm\nDESCRIPTION: Command to join a worker node to an existing Docker swarm using the join token provided by the swarm manager. This command is run on the machine intended to be a worker node.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/add-nodes.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm join \\\n  --token  SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \\\n  192.168.99.100:2377\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd for Full Cgroup Controller Delegation\nDESCRIPTION: Commands to configure systemd to delegate all cgroup controllers to non-root users, enabling full resource limitation support in rootless Docker containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n# mkdir -p /etc/systemd/system/user@.service.d\n# cat > /etc/systemd/system/user@.service.d/delegate.conf << EOF\n[Service]\nDelegate=cpu cpuset io memory pids\nEOF\n# systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Mounting a Volume Subdirectory\nDESCRIPTION: Demonstrates how to mount a specific subdirectory of a volume to a container, useful for sharing specific portions of a volume between containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker volume create logs\n$ docker run --rm \\\n  --mount src=logs,dst=/logs \\\n  alpine mkdir -p /logs/app1 /logs/app2\n$ docker run -d \\\n  --name=app1 \\\n  --mount src=logs,dst=/var/log/app1/,volume-subpath=app1 \\\n  app1:latest\n$ docker run -d \\\n  --name=app2 \\\n  --mount src=logs,dst=/var/log/app2,volume-subpath=app2 \\\n  app2:latest\n```\n\n----------------------------------------\n\nTITLE: Creating Builder with Registry Certificate Configuration\nDESCRIPTION: Creates a new Docker container builder that uses the BuildKit configuration with custom registry certificates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/configure.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx create --use --bootstrap \\\n  --name mybuilder \\\n  --driver docker-container \\\n  --config /etc/buildkitd.toml\n```\n\n----------------------------------------\n\nTITLE: Building an image with Docker CLI\nDESCRIPTION: A basic Docker build command that builds an image from a Dockerfile in the current directory and tags it as 'myapp:latest'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/introduction.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -f Dockerfile -t myapp:latest .\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Buildx Command with GitHub Actions Cache\nDESCRIPTION: Basic command for using the GitHub Actions cache backend with Docker Buildx. This enables caching build layers between workflow runs by specifying the GHA cache type in both cache-to and cache-from parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/gha.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=gha[,parameters...] \\\n  --cache-from type=gha[,parameters...] .\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker Content Trust Sandbox using Docker Compose\nDESCRIPTION: Docker Compose configuration for creating a complete trust sandbox environment with three containers: a Notary server, a private registry, and a Docker-in-Docker container for testing. This setup mimics a production trust environment for safe experimentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_sandbox.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2\"\nservices:\n  notaryserver:\n    image: dockersecurity/notary_autobuilds:server-v0.5.1\n    volumes:\n      - notarycerts:/var/lib/notary/fixtures\n    networks:\n      - sandbox\n    environment:\n      - NOTARY_SERVER_STORAGE_TYPE=memory\n      - NOTARY_SERVER_TRUST_SERVICE_TYPE=local\n  sandboxregistry:\n    image: registry:2.4.1\n    networks:\n      - sandbox\n    container_name: sandboxregistry\n  trustsandbox:\n    image: docker:dind\n    networks:\n      - sandbox\n    volumes:\n      - notarycerts:/notarycerts\n    privileged: true\n    container_name: trustsandbox\n    entrypoint: \"\"\n    command: |-\n        sh -c '\n            cp /notarycerts/root-ca.crt /usr/local/share/ca-certificates/root-ca.crt &&\n            update-ca-certificates &&\n            dockerd-entrypoint.sh --insecure-registry sandboxregistry:5000'\nvolumes:\n  notarycerts:\n    external: false\nnetworks:\n  sandbox:\n    external: false\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Base Image Configuration\nDESCRIPTION: Specifies a lightweight Python 3.8 image as the base for the Docker container to optimize size and performance.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.8-slim\n```\n\n----------------------------------------\n\nTITLE: Specifying a Base Image in Dockerfile\nDESCRIPTION: This snippet demonstrates how to specify a base image in a Dockerfile using the FROM instruction. It uses Debian as an example base image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/base-images.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for Golang Application\nDESCRIPTION: A Dockerfile that implements a multi-stage build process for a Golang application. The first stage builds the application using golang:1.24-alpine, while the second stage creates a minimal production image using alpine:3.17. Includes environment configuration, dependency management, and build optimization.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Golang image as the base\nFROM golang:1.24-alpine AS builder\n\n# Set environment variables\nENV CGO_ENABLED=0 \\\n    GOOS=linux \\\n    GOARCH=amd64\n\n# Set working directory inside the container\nWORKDIR /build\n\n# Copy go.mod and go.sum files for dependency installation\nCOPY go.mod go.sum ./\n\n# Download dependencies\nRUN go mod download\n\n# Copy the entire application source\nCOPY . .\n\n# Build the Go binary\nRUN go build -o /app .\n\n# Final lightweight stage\nFROM alpine:3.17 AS final\n\n# Copy the compiled binary from the builder stage\nCOPY --from=builder /app /bin/app\n\n# Expose the application's port\nEXPOSE 8000\n\n# Run the application\nCMD [\"bin/app\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Service with Multiple Placement Preferences\nDESCRIPTION: This example shows how to create a Docker service with multiple placement preferences. Tasks are spread first over datacenters, then over racks, using respective labels.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --replicas 9 \\\n  --name redis_2 \\\n  --placement-pref 'spread=node.labels.datacenter' \\\n  --placement-pref 'spread=node.labels.rack' \\\n  redis:7.4.0\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Docker Compose Service in YAML\nDESCRIPTION: This snippet demonstrates how to define a basic service in a Docker Compose file. It includes service name, image, and port mapping.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/_default/single.markdown.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    image: nginx:alpine\n    ports:\n      - \"8000:80\"\n```\n\n----------------------------------------\n\nTITLE: Test Target Configuration\nDESCRIPTION: HCL configuration for running unit tests using cache-only output\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"test\" {\n  target = \"test\"\n  output = [\"type=cacheonly\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Variable as Secret to Docker Build\nDESCRIPTION: Example of passing the KUBECONFIG environment variable as a secret to a Docker build using the CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --secret id=kube,env=KUBECONFIG .\n```\n\n----------------------------------------\n\nTITLE: Cloning Sample Node.js Application\nDESCRIPTION: Command to clone the sample Node.js application repository from GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/docker/docker-nodejs-sample && cd docker-nodejs-sample\n```\n\n----------------------------------------\n\nTITLE: Running an Interactive Ubuntu Container in Docker\nDESCRIPTION: This command demonstrates how to run an Ubuntu container interactively, attaching it to the local command-line session and executing /bin/bash. It showcases the basic Docker run command and explains the step-by-step process that occurs when executed.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-overview.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -i -t ubuntu /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Backing Up a Docker Volume\nDESCRIPTION: This command creates a backup of the dbdata volume from the dbstore container, saving it as a tar file in the current directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm --volumes-from dbstore -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Docker Engine on CentOS\nDESCRIPTION: Command to install the latest version of Docker Engine, Docker CLI, containerd, and Docker plugins using the DNF package manager.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/centos.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating a Container for Volume Restoration\nDESCRIPTION: This command creates a new container named dbstore2 with a volume at /dbdata for restoring a backup.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -v /dbdata --name dbstore2 ubuntu /bin/bash\n```\n\n----------------------------------------\n\nTITLE: React Container List Implementation\nDESCRIPTION: Complete React component implementation showing container list using Docker Extension SDK. Uses Material-UI for styling and demonstrates how to fetch and display container information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/frontend-extension-tutorial.md#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// ui/src/App.tsx\nimport React, { useEffect } from 'react';\nimport {\n  Paper,\n  Stack,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography\n} from \"@mui/material\";\nimport { createDockerDesktopClient } from \"@docker/extension-api-client\";\n\n//obtain docker desktop extension client\nconst ddClient = createDockerDesktopClient();\n\nexport function App() {\n  const [containers, setContainers] = React.useState<any[]>([]);\n\n  useEffect(() => {\n    // List all containers\n    ddClient.docker.cli.exec('ps', ['--all', '--format', '\"{{json .}}\"']).then((result) => {\n      // result.parseJsonLines() parses the output of the command into an array of objects\n      setContainers(result.parseJsonLines());\n    });\n  }, []);\n\n  return (\n    <Stack>\n      <Typography data-testid=\"heading\" variant=\"h3\" role=\"title\">\n        Container list\n      </Typography>\n      <Typography\n      data-testid=\"subheading\"\n      variant=\"body1\"\n      color=\"text.secondary\"\n      sx={{ mt: 2 }}\n    >\n      Simple list of containers using Docker Extensions SDK.\n      </Typography>\n      <TableContainer sx={{mt:2}}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Container id</TableCell>\n              <TableCell>Image</TableCell>\n              <TableCell>Command</TableCell>\n              <TableCell>Created</TableCell>\n              <TableCell>Status</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {containers.map((container) => (\n              <TableRow\n                key={container.ID}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell>{container.ID}</TableCell>\n                <TableCell>{container.Image}</TableCell>\n                <TableCell>{container.Command}</TableCell>\n                <TableCell>{container.CreatedAt}</TableCell>\n                <TableCell>{container.Status}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Stack>\n  );\n```\n\n----------------------------------------\n\nTITLE: Using Smart Recreate Feature in Docker Compose\nDESCRIPTION: Example showing how to use the experimental smart recreate feature in docker-compose up command that only recreates containers whose configuration has changed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up --x-smart-recreate\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Scout Environment Integration in Circle CI\nDESCRIPTION: A Circle CI configuration that uses Docker Scout CLI to record environment information for a Docker image. It determines the tag based on whether the build is triggered by a tag or branch, and then runs the Docker Scout CLI with the appropriate parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/environment/cli.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\n\njobs:\n  record_environment:\n    machine:\n      image: ubuntu-2204:current\n    image: namespace/repo\n    steps:\n      - run: |\n          if [[ -z \"$CIRCLE_TAG\" ]]; then\n            tag=\"$CIRCLE_TAG\"\n            echo \"Running tag '$CIRCLE_TAG'\"\n          else\n            tag=\"$CIRCLE_BRANCH\"\n            echo \"Running on branch '$CI_COMMIT_BRANCH'\"\n          fi    \n          echo \"tag = $tag\"\n      - run: docker run -it \\\n          -e DOCKER_SCOUT_HUB_USER=$DOCKER_SCOUT_HUB_USER \\\n          -e DOCKER_SCOUT_HUB_PASSWORD=$DOCKER_SCOUT_HUB_PASSWORD \\\n          docker/scout-cli:1.0.2 environment \\\n          --org \"<MY_DOCKER_ORG>\" \\\n          \"<ENVIRONMENT>\" ${image}:${tag}\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Multiple Targets with Precedence Rules\nDESCRIPTION: Shows a complex inheritance scenario where a target inherits from multiple sources with resolution of conflicting attributes based on ordering.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/inheritance.md#2025-04-11_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"_common\" {\n  args = {\n    GO_VERSION = \"{{% param example_go_version %}}\"\n    BUILDKIT_CONTEXT_KEEP_GIT_DIR = 1\n  }\n}\n\ntarget \"app-dev\" {\n  inherits = [\"_common\"]\n  args = {\n    BUILDKIT_CONTEXT_KEEP_GIT_DIR = 0\n  }\n  tags = [\"docker.io/username/myapp:dev\"]\n  labels = {\n    \"org.opencontainers.image.source\" = \"https://github.com/username/myapp\"\n    \"org.opencontainers.image.author\" = \"moby.whale@example.com\"\n  }\n}\n\ntarget \"app-release\" {\n  inherits = [\"app-dev\", \"_common\"]\n  tags = [\"docker.io/username/myapp:latest\"]\n  platforms = [\"linux/amd64\", \"linux/arm64\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDX_BUILDER to Override Builder Instance\nDESCRIPTION: Overrides the configured builder instance. This is equivalent to using the --builder flag in the Docker Buildx CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nexport BUILDX_BUILDER=my-builder\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Service Status\nDESCRIPTION: Command to list all Kubernetes services in the default namespace. This helps verify that the NodePort service was created correctly to expose the Java application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/deploy.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get services\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Commands\nDESCRIPTION: Shell commands for deploying and managing the .NET application in Kubernetes. Includes commands for applying configurations, checking deployment status, and cleaning up resources.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl apply -f docker-dotnet-kubernetes.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl get deployments\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl get services\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl delete -f docker-dotnet-kubernetes.yaml\n```\n\n----------------------------------------\n\nTITLE: Using Here Documents in RUN Instructions\nDESCRIPTION: Example demonstrating how to use here documents (heredocs) to run multiple commands in a RUN instruction without chaining them with &&.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN <<EOF\napt-get update\napt-get install -y --no-install-recommends \\\n    package-bar \\\n    package-baz \\\n    package-foo\nEOF\n```\n\n----------------------------------------\n\nTITLE: Retrieving Join Token for Worker Nodes\nDESCRIPTION: This command retrieves the join command and token for worker nodes to join the swarm. It provides the full command that worker nodes should use to join the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-mode.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm join-token worker\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join \\\n    --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \\\n    192.168.99.100:2377\n\nThis node joined a swarm as a worker.\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Access for Docker Compose Services\nDESCRIPTION: Example YAML configuration in a compose file showing how to enable access to one GPU device. This configuration uses the NVIDIA driver and specifies a count of 1 GPU with required GPU capabilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/gpu-support.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  test:\n    image: nvidia/cuda:12.3.1-base-ubuntu20.04\n    command: nvidia-smi\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - driver: nvidia\n              count: 1\n              capabilities: [gpu]\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image for TensorFlow.js Face Detection\nDESCRIPTION: Command to build a Docker image named 'face-detection-tensorjs' from the Dockerfile in the cloned repository. This packages the application and all its dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/tensorflowjs.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t face-detection-tensorjs .\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Swarm Service with Read-Write Bind Mount\nDESCRIPTION: This command creates a service with a read-write bind mount from a host path to a container path. The host path must exist on every node where the service could potentially run.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_39\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --mount type=bind,src=<HOST-PATH>,dst=<CONTAINER-PATH> \\\n  --name myservice \\\n  <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Checking Kernel Support for Seccomp in Linux\nDESCRIPTION: This command checks if your Linux kernel is configured with seccomp support by searching for the CONFIG_SECCOMP parameter in the kernel configuration file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/seccomp.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ grep CONFIG_SECCOMP= /boot/config-$(uname -r)\nCONFIG_SECCOMP=y\n```\n\n----------------------------------------\n\nTITLE: Output of Docker Model Help Command\nDESCRIPTION: The help output showing all available Docker Model Runner subcommands including list, pull, rm, run, status, and version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nUsage:  docker model COMMAND\n\nCommands:\n  list        List models available locally\n  pull        Download a model from Docker Hub\n  rm          Remove a downloaded model\n  run         Run a model interactively or with a prompt\n  status      Check if the model runner is running\n  version     Show the current version\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with Watch Feature\nDESCRIPTION: Docker Compose configuration that sets up a C++ service with automatic rebuild capabilities using Compose Watch. Includes port mapping and watch settings for live code updates.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  ok-api:\n    image: ok-api\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"8080:8080\"\n    develop:\n      watch:\n        - action: rebuild\n          path: .\n```\n\n----------------------------------------\n\nTITLE: Registry Cache Backend Basic Usage\nDESCRIPTION: Example of using the registry backend for importing and exporting build cache with buildx\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=registry,ref=<registry>/<cache-image>[,parameters...] \\\n  --cache-from type=registry,ref=<registry>/<cache-image>[,parameters...] .\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Axis Matrix Target in Docker Bake HCL\nDESCRIPTION: This snippet shows how to define a matrix target with multiple axes in Docker Bake HCL, creating four variants of an 'app' target based on two parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/matrices.md#2025-04-11_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  name = \"app-${tgt}-${replace(version, \".\", \"-\")}\"\n  matrix = {\n    tgt = [\"foo\", \"bar\"]\n    version = [\"1.0\", \"2.0\"]\n  }\n  target = tgt\n  args = {\n    VERSION = version\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Server Key and Certificate Signing Request\nDESCRIPTION: Generates a server key and Certificate Signing Request (CSR) for the Docker daemon host. The Common Name should match the hostname used to connect to Docker.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ openssl genrsa -out server-key.pem 4096\nGenerating RSA private key, 4096 bit long modulus\n.....................................................................++\n.................................................................................................++\ne is 65537 (0x10001)\n\n$ openssl req -subj \"/CN=$HOST\" -sha256 -new -key server-key.pem -out server.csr\n```\n\n----------------------------------------\n\nTITLE: Example of Building Docker Image with Specific Username\nDESCRIPTION: This is an example of the build command using a specific Docker Hub username 'mobywhale'. It shows how the previous command would look with an actual username.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t mobywhale/concepts-build-image-demo .\n```\n\n----------------------------------------\n\nTITLE: Printing Container Logs with Docker API in Go\nDESCRIPTION: Demonstrates how to print logs of a specific container by ID using the Docker Go SDK. This code connects to the Docker daemon, retrieves logs for a container with the specified ID, and outputs them to stdout.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/docker/docker/api/types/container\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tcli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer cli.Close()\n\n\toptions := container.LogsOptions{ShowStdout: true}\n\t// Replace this ID with a container that really exists\n\tout, err := cli.ContainerLogs(ctx, \"f1064a8a4c82\", options)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tio.Copy(os.Stdout, out)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Grouped Targets\nDESCRIPTION: Shows how to build all targets in a defined group using a single command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/targets.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake all\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Daemon with Configuration Flags in Console\nDESCRIPTION: Example of manually starting the Docker daemon with debug mode, TLS configuration, and custom host port. This approach is useful for troubleshooting problems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dockerd --debug \\\n  --tls=true \\\n  --tlscert=/var/docker/server.pem \\\n  --tlskey=/var/docker/serverkey.pem \\\n  --host tcp://192.168.59.3:2376\n```\n\n----------------------------------------\n\nTITLE: Specifying Container Images in Docker Compose\nDESCRIPTION: Various formats for specifying container images in Docker Compose, including registry, project, image name, tag, and digest formats.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\n    image: redis\n    image: redis:5\n    image: redis@sha256:0ed5d5928d4737458944eb604cc8509e245c3e19d02ad83935398bc4b991aac7\n    image: library/redis\n    image: docker.io/library/redis\n    image: my_private.registry:5000/redis\n```\n\n----------------------------------------\n\nTITLE: Verifying VEX Documents with Docker Scout CLI\nDESCRIPTION: This command shows how to verify VEX documents by applying them to local image analysis using the Docker Scout CLI. It uses the --vex-location flag to specify where to find the VEX documents, scanning CVEs in the specified image and filtering results based on the VEX statements.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/create-exceptions-vex.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves <IMAGE> --vex-location .\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with docker/build-push-action\nDESCRIPTION: YAML configuration for using GitHub Actions cache in a workflow with the docker/build-push-action. This approach automatically populates URL and token parameters without manual configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/gha.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Build and push\n  uses: docker/build-push-action@v6\n  with:\n    context: .\n    push: true\n    tags: \"<registry>/<image>:latest\"\n    cache-from: type=gha\n    cache-to: type=gha,mode=max\n```\n\n----------------------------------------\n\nTITLE: Verifying SBOM Attestation\nDESCRIPTION: Command to verify SBOM attestation attached to a Docker image using Scout\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/security.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker scout sbom --format=list hello:sbom\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Build Command Syntax\nDESCRIPTION: Shows the basic syntax for the docker build command, highlighting the context parameter\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker build [OPTIONS] PATH | URL | -\n```\n\n----------------------------------------\n\nTITLE: Starting Docker with systemd\nDESCRIPTION: Command to start the Docker daemon using systemd after configuring the devicemapper storage driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo systemctl start docker\n```\n\n----------------------------------------\n\nTITLE: Retrieving Join Token for Manager Nodes\nDESCRIPTION: This command retrieves the join command and token for manager nodes to join the swarm. It provides the full command that manager nodes should use to join the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-mode.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm join-token manager\n\nTo add a manager to this swarm, run the following command:\n\n    docker swarm join \\\n    --token SWMTKN-1-59egwe8qangbzbqb3ryawxzk3jn97ifahlsrw01yar60pmkr90-bdjfnkcflhooyafetgjod97sz \\\n    192.168.99.100:2377\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Compose Files in COMPOSE_FILE (Linux/Mac)\nDESCRIPTION: Example of specifying multiple Compose files using the COMPOSE_FILE environment variable on Linux or Mac systems. The files are separated by a colon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/environment-variables/envvars.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nCOMPOSE_FILE=compose.yaml:compose.prod.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating AMD64 Architecture Node for Native Kubernetes Builds\nDESCRIPTION: Command to create a Docker Buildx builder with explicit support for AMD64 architecture, using Kubernetes node selector to target appropriate cluster nodes for native builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create \\\n  --bootstrap \\\n  --name=kube \\\n  --driver=kubernetes \\\n  --platform=linux/amd64 \\\n  --node=builder-amd64 \\\n  --driver-opt=namespace=buildkit,nodeselector=\"kubernetes.io/arch=amd64\"\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Database in a Container\nDESCRIPTION: Runs a PostgreSQL container connected to the created volume and network with specific environment variables for database configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -d --mount \\\n  \"type=volume,src=db-data,target=/var/lib/postgresql/data\" \\\n  -p 5432:5432 \\\n  --network postgresnet \\\n  --name db \\\n  -e POSTGRES_PASSWORD=mysecretpassword \\\n  -e POSTGRES_DB=example \\\n  postgres\n```\n\n----------------------------------------\n\nTITLE: Exporting Docker Buildx Inline Cache\nDESCRIPTION: Example showing how to export build cache using the inline storage type with the --cache-to flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/inline.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=inline .\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker service\nDESCRIPTION: Command to restart the Docker service after configuration changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/remote-access.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl restart docker.service\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Journald Logging Driver\nDESCRIPTION: Command to run a Docker container with the journald logging driver specified via the --log-driver flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/journald.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --log-driver=journald ...\n```\n\n----------------------------------------\n\nTITLE: Using Local Cache in Docker Buildx Command\nDESCRIPTION: This snippet demonstrates how to use local cache in a Docker buildx command, specifying cache locations for both importing and exporting.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/local.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=local,dest=path/to/local/dir[,parameters...] \\\n  --cache-from type=local,src=path/to/local/dir .\n```\n\n----------------------------------------\n\nTITLE: Checking User ID and Subordinate UID/GID Mappings\nDESCRIPTION: Commands to verify the user ID and check if the user has the required subordinate UID/GID mappings in /etc/subuid and /etc/subgid files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ id -u\n1001\n$ whoami\ntestuser\n$ grep ^$(whoami): /etc/subuid\ntestuser:231072:65536\n$ grep ^$(whoami): /etc/subgid\ntestuser:231072:65536\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom GC Policies in BuildKit with TOML\nDESCRIPTION: This example shows how to define three custom garbage collection policies in buildkitd.toml to manage different types of cache data. The first policy removes unused local contexts older than 24 hours, the second removes remote Git contexts older than 30 days, and the third aggressively cleans all cache when disk usage exceeds 90GB.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/garbage-collection.md#2025-04-11_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# Custom GC Policy 1: Remove unused local contexts older than 24 hours\n[[worker.oci.gcpolicy]]\n  filters = [\"type==source.local\"]\n  keepDuration = \"24h\"\n  reservedSpace = \"5GB\"\n  maxUsedSpace = \"50GB\"\n\n# Custom GC Policy 2: Remove remote Git contexts older than 30 days\n[[worker.oci.gcpolicy]]\n  filters = [\"type==source.git.checkout\"]\n  keepDuration = \"720h\"\n  reservedSpace = \"5GB\"\n  maxUsedSpace = \"30GB\"\n\n# Custom GC Policy 3: Aggressively clean all cache if disk usage exceeds 90GB\n[[worker.oci.gcpolicy]]\n  all = true\n  reservedSpace = \"5GB\"\n  maxUsedSpace = \"90GB\"\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Permissions for All Users Installation\nDESCRIPTION: Command to apply executable permissions to the Docker Compose binary when installed for all users on the system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Removing Local Image\nDESCRIPTION: Removes the cached trusttest image to force a new download from registry\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_sandbox.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n/ # docker image rm -f cc7629d1331a\nUntagged: docker/trusttest:latest\nUntagged: sandboxregistry:5000/test/trusttest:latest\nUntagged: sandboxregistry:5000/test/trusttest@sha256:ebf59c538accdf160ef435f1a19938ab8c0d6bd96aef8d4ddd1b379edf15a926\nDeleted: sha256:cc7629d1331a7362b5e5126beb5bf15ca0bf67eb41eab994c719a45de53255cd\nDeleted: sha256:2a1f6535dc6816ffadcdbe20590045e6cbf048d63fd4cc753a684c9bc01abeea\nDeleted: sha256:c22f7bc058a9a8ffeb32989b5d3338787e73855bf224af7aa162823da015d44c\n```\n\n----------------------------------------\n\nTITLE: Compose Configuration for Image Dependencies\nDESCRIPTION: This Compose file shows how to configure services where one service uses another service's image as its base. Each service defines both the image name and the Dockerfile to use.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/dependent-images.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  a:\n     image: service_a \n     build:\n       dockerfile: a.Dockerfile\n  b:\n     image: service_b\n     build:\n       dockerfile: b.Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Registry Cache Configuration in GitHub Actions\nDESCRIPTION: Setup for using registry cache exporter to import/export cache from a cache manifest or image configuration on the registry. This method supports both 'min' and 'max' cache modes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/cache.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      \n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: user/app:latest\n          cache-from: type=registry,ref=user/app:buildcache\n          cache-to: type=registry,ref=user/app:buildcache,mode=max\n```\n\n----------------------------------------\n\nTITLE: Activating Development Profile in Docker Compose\nDESCRIPTION: This snippet demonstrates how to use profiles in Docker Compose to activate a specific environment configuration. It shows the command to start services associated with the 'dev' profile.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/docker-compose/common-questions.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose --profile dev up\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Compose Installation on Windows\nDESCRIPTION: Command to check the installed version of Docker Compose on Windows Server after installation to confirm it was successful.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/standalone.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker-compose.exe version\nDocker Compose version {{% param \"compose_version\" %}}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Environment variable setting for the Node.js application to use the WireMock server for API calls.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nAPI_ENDPOINT_BASE=http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Using COPY with Multi-stage Builds in Dockerfile\nDESCRIPTION: Demonstrates the usage of COPY instruction with --from flag to copy resources from other build stages, helping reduce layer size and number in the final image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/optimization.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY --from\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Driver in Docker daemon.json\nDESCRIPTION: This JSON snippet demonstrates how to manually configure the storage driver in the Docker daemon configuration file. It shows setting the 'storage-driver' option, which can be used to specify drivers like devicemapper.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"storage-driver\": \"devicemapper\"\n```\n\n----------------------------------------\n\nTITLE: Restoring a Docker Volume from Backup\nDESCRIPTION: This command restores the backup.tar file to the dbdata volume in the dbstore2 container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm --volumes-from dbstore2 -v $(pwd):/backup ubuntu bash -c \"cd /dbdata && tar xvf /backup/backup.tar --strip 1\"\n```\n\n----------------------------------------\n\nTITLE: Creating a custom network and connecting containers\nDESCRIPTION: Demonstrates how to create a custom network, run containers on that network, and verify connectivity between containers using DNS resolution.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create my-net\n$ docker run -d --name web --network my-net nginx:alpine\n$ docker run --rm -it --network my-net busybox\n/ # ping web\nPING web (172.18.0.2): 56 data bytes\n64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.326 ms\n64 bytes from 172.18.0.2: seq=1 ttl=64 time=0.257 ms\n64 bytes from 172.18.0.2: seq=2 ttl=64 time=0.281 ms\n^C\n--- web ping statistics ---\n3 packets transmitted, 3 packets received, 0% packet loss\nround-trip min/avg/max = 0.257/0.288/0.326 ms\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image Using docker build\nDESCRIPTION: Command to build a Docker image from a Dockerfile, specifying an image name and tag. The build context is set to the current directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t test:latest .\n```\n\n----------------------------------------\n\nTITLE: Using Git Authentication for Remote Build Context\nDESCRIPTION: Command showing how to pass a GitLab access token as a build secret to authenticate with a private Git repository as build context.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ GIT_AUTH_TOKEN=$(cat gitlab-token.txt) docker build \\\n  --secret id=GIT_AUTH_TOKEN \\\n  https://gitlab.com/example/todo-app.git\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Overlay Network\nDESCRIPTION: Creates a user-defined overlay network for Docker containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create -d overlay my-overlay\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Provenance and SBOM Support\nDESCRIPTION: Command to build a Docker image with provenance and SBOM (Software Bill of Materials) enabled, then push it to a registry. This is the first step before attaching a VEX document as an attestation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/create-exceptions-vex.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build --provenance=true --sbom=true --tag <IMAGE> --push .\n```\n\n----------------------------------------\n\nTITLE: Starting the Updated Container\nDESCRIPTION: Command to run the updated Docker container in detached mode, mapping port 3000 on the host to port 3000 in the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/03_updating_app.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -dp 127.0.0.1:3000:3000 getting-started\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Common Target in Multiple Build Targets\nDESCRIPTION: Shows how multiple specialized build targets can inherit from a common configuration to maintain consistency across builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/inheritance.md#2025-04-11_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"lint\" {\n  inherits = [\"_common\"]\n  dockerfile = \"./dockerfiles/lint.Dockerfile\"\n  output = [{ type = \"cacheonly\" }]\n}\n\ntarget \"docs\" {\n  inherits = [\"_common\"]\n  dockerfile = \"./dockerfiles/docs.Dockerfile\"\n  output = [\"./docs/reference\"]\n}\n\ntarget \"test\" {\n  inherits = [\"_common\"]\n  target = \"test-output\"\n  output = [\"./test\"]\n}\n\ntarget \"binaries\" {\n  inherits = [\"_common\"]\n  target = \"binaries\"\n  output = [\"./build\"]\n  platforms = [\"local\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bind Mounts with Docker Run Command\nDESCRIPTION: Demonstrates the basic syntax options for creating bind mounts in Docker using both the --mount and --volume flags, showing the format and structure of these commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --mount type=bind,src=<host-path>,dst=<container-path>\n$ docker run --volume <host-path>:<container-path>\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Docker Engine Version\nDESCRIPTION: This command installs a specific version of Docker Engine by providing the full package name including version string. Replace <VERSION_STRING> with your desired version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/rhel.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Docker Engine Version on CentOS\nDESCRIPTION: Command for installing a specific version of Docker Engine using the fully qualified package name format, which includes the package name and version string.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/centos.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose Up Command\nDESCRIPTION: Example of using the docker compose up command to start containers in detached mode. This command starts containers in the background and leaves them running.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_up.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`docker compose up --detach`\n```\n\n----------------------------------------\n\nTITLE: Consuming Secret in Dockerfile using RUN Mount\nDESCRIPTION: Dockerfile instruction showing how to access a secret during build by mounting it to a file path and using it in a command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=secret,id=aws \\\n    AWS_SHARED_CREDENTIALS_FILE=/run/secrets/aws \\\n    aws s3 cp ...\n```\n\n----------------------------------------\n\nTITLE: Sample .dockerignore File\nDESCRIPTION: Example of a basic .dockerignore file showing how to exclude node_modules and a bar directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n# .dockerignore\nnode_modules\nbar\n```\n\n----------------------------------------\n\nTITLE: Docker Build with Git Context and BuildKit\nDESCRIPTION: Dockerfile example showing how to use Git information during build with BuildKit configuration\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine\nWORKDIR /src\nRUN --mount=target=. \\\n  make REVISION=$(git rev-parse HEAD) build\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Container with Volume\nDESCRIPTION: Runs a MySQL container with a Docker volume attached for data persistence.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -e MYSQL_DATABASE=mydb -v my-db-volume:/var/lib/mysql -d mysql:latest\n```\n\n----------------------------------------\n\nTITLE: Formatting Block Devices as Btrfs Filesystem\nDESCRIPTION: Command to create a new Btrfs filesystem across multiple block devices. This example formats two devices (/dev/xvdf and /dev/xvdg) as a single Btrfs filesystem.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/btrfs-driver.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo mkfs.btrfs -f /dev/xvdf /dev/xvdg\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Multi-Registry Docker Push\nDESCRIPTION: GitHub Actions workflow that authenticates with Docker Hub and GitHub Container Registry, sets up QEMU and Buildx for multi-platform support, and pushes Docker images to both registries. The workflow builds images for linux/amd64 and linux/arm64 platforms and applies multiple tags for versioning.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/push-multi-registries.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            user/app:latest\n            user/app:1.0.0\n            ghcr.io/user/app:latest\n            ghcr.io/user/app:1.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Data Source for Prometheus Integration\nDESCRIPTION: This YAML configuration for Grafana sets up a Prometheus data source. It specifies the data source name, type, URL, and sets it as the default data source for Grafana.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/compose.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: 1\ndatasources:\n- name: Prometheus (Main)\n  type: prometheus\n  url: http://prometheus:9090\n  isDefault: true\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Configuration for Go Application\nDESCRIPTION: Shell command to deploy the Go application to Kubernetes using kubectl. The command applies the Kubernetes YAML file and shows the output indicating successful creation of the defined resources.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f docker-go-kubernetes.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeployment.apps/db created\nservice/db created\ndeployment.apps/server created\nservice/server created\n```\n\n----------------------------------------\n\nTITLE: Using Pre-existing Networks in Docker Compose\nDESCRIPTION: Shows how to connect containers to a pre-existing network instead of creating a new one. This is useful when integrating with networks created outside of Compose or by other applications.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/networking.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # ...\nnetworks:\n  network1:\n    name: my-pre-existing-network\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Secrets with Long Syntax in Docker Compose YAML\nDESCRIPTION: Demonstrates how to use the long syntax for configuring secrets in a Docker Compose file. It shows setting custom file name, permissions, and ownership for a secret inside a container.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_66\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    secrets:\n      - source: server-certificate\n        target: server.cert\n        uid: \"103\"\n        gid: \"103\"\n        mode: \"0o440\"\nsecrets:\n  server-certificate:\n    file: ./server.cert\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Network for Docker Swarm\nDESCRIPTION: Command to create a user-defined overlay network for swarm services. The -d flag specifies the overlay driver, creating a network that spans multiple Docker hosts.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d overlay nginx-net\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample Repository\nDESCRIPTION: Command to clone the sample application repository containing the sentiment analysis code.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/harsh4870/Docker-NLP.git\n```\n\n----------------------------------------\n\nTITLE: Installing CA Certificates Package in a Container\nDESCRIPTION: This command updates the package repositories and installs the ca-certificates package in an Ubuntu-based container, which is required for managing CA certificates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/ca-certs.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# apt-get update && apt-get install -y ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Buildx Builder\nDESCRIPTION: Inspects a builder instance using docker buildx inspect command with --bootstrap flag to start the builder if needed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/manage.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx inspect --bootstrap my_builder\n[+] Building 1.7s (1/1) FINISHED                                                                  \n => [internal] booting buildkit                                                              1.7s\n => => pulling image moby/buildkit:buildx-stable-1                                           1.3s\n => => creating container buildx_buildkit_my_builder0                                        0.4s\nName:          my_builder\nDriver:        docker-container\nLast Activity: 2023-06-21 18:28:37 +0000 UTC\n\nNodes:\nName:      my_builder0\nEndpoint:  unix:///var/run/docker.sock\nStatus:    running\nBuildkit:  v0.11.6\nPlatforms: linux/arm64, linux/amd64, linux/amd64/v2, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/mips64le, linux/mips64, linux/arm/v7, linux/arm/v6\n```\n\n----------------------------------------\n\nTITLE: Pruning Dangling Docker Images\nDESCRIPTION: This command removes all dangling images, which are images that aren't tagged and aren't referenced by any container. It prompts for confirmation before deletion.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker image prune\n\nWARNING! This will remove all dangling images.\nAre you sure you want to continue? [y/N] y\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Backup After Verification\nDESCRIPTION: Command to remove the backup of the previous Docker configuration after verifying the new setup works correctly.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo rm -rf /var/lib/docker.bk\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for the RAG application showing service definitions with environment variables and dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rag-ollama/containerize.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nwiny:\n  build:\n    context: ./app\n    dockerfile: Dockerfile\n  environment:\n    - QDRANT_CLIENT=http://qdrant:6333 # Specifies the url for the qdrant database\n    - OLLAMA=http://ollama:11434 # Specifies the url for the ollama service\n  container_name: winy\n  ports:\n    - \"8501:8501\"\n  depends_on:\n    - qdrant\n    - ollama\n```\n\n----------------------------------------\n\nTITLE: Golang Main Function - Server Setup\nDESCRIPTION: Main function implementation showing route setup, middleware configuration, and server initialization.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/application.md#2025-04-11_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\trouter := gin.Default()\n\n\t// Register /metrics before middleware\n\trouter.GET(\"/metrics\", PrometheusHandler())\n\t\n\trouter.Use(RequestMetricsMiddleware())\n\trouter.GET(\"/health\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"Up and running!\",\n\t\t})\n\t})\n\trouter.GET(\"/v1/users\", func(c *gin.Context) {\n\t\tc.JSON(200, gin.H{\n\t\t\t\"message\": \"Hello from /v1/users\",\n\t\t})\n\t})\n\n\trouter.Run(\":8000\")\n}\n```\n\n----------------------------------------\n\nTITLE: Building from a Git Repository\nDESCRIPTION: Example of a service that builds directly from a Git repository URL as the build context.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    build: https://github.com/mycompany/webapp.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Block I/O Limits in Docker Compose\nDESCRIPTION: This snippet demonstrates how to set block I/O limits for a service using the blkio_config attribute. It includes settings for weight, weight_device, and various device read/write limits.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    image: busybox\n    blkio_config:\n       weight: 300\n       weight_device:\n         - path: /dev/sda\n           weight: 400\n       device_read_bps:\n         - path: /dev/sdb\n           rate: '12mb'\n       device_read_iops:\n         - path: /dev/sdb\n           rate: 120\n       device_write_bps:\n         - path: /dev/sdb\n           rate: '1024k'\n       device_write_iops:\n         - path: /dev/sdb\n           rate: 30\n```\n\n----------------------------------------\n\nTITLE: Main Compose File with Multiple Includes\nDESCRIPTION: Example of a main compose.yaml file that includes Compose files from different teams, combining their services into a single application model.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/include.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n  - team-1/compose.yaml # declare service-1\n  - team-2/compose.yaml # declare service-2\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Docker Swarm Cluster from Backup\nDESCRIPTION: This command initializes a new swarm cluster during the restoration process. The --force-new-cluster flag creates a new cluster using the restored data without attempting to reconnect to previous nodes that may no longer exist.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/admin_guide.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker swarm init --force-new-cluster\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Cache Mounts Configuration\nDESCRIPTION: Example Dockerfile showing cache mount configuration for a Go project, demonstrating how to implement caching for Go module downloads and builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/cache.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM golang:1.21.1-alpine as base-build\n\nWORKDIR /build\nRUN go env -w GOMODCACHE=/root/.cache/go-build\n\nCOPY go.mod go.sum ./\nRUN --mount=type=cache,target=/root/.cache/go-build go mod download\n\nCOPY ./src ./\nRUN --mount=type=cache,target=/root/.cache/go-build go build -o /bin/app /build/src\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Logging Driver in Docker Daemon JSON\nDESCRIPTION: This JSON configuration sets the default logging driver to 'local' in the Docker daemon configuration file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/configure.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-driver\": \"local\"\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Postgres Container Defaults with docker run\nDESCRIPTION: This command runs a Postgres container with custom settings. It sets an environment variable for the password, overrides the default startup commands, and configures the hostname and port mapping.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -e POSTGRES_PASSWORD=secret postgres docker-entrypoint.sh -h localhost -p 5432\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Manual CPU Period and Quota Settings\nDESCRIPTION: Alternative approach to limit CPU usage by manually specifying the CPU period and quota parameters. This example limits the container to 50% CPU by setting a quota of 50000 microseconds within a 100000 microsecond period.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/resource_constraints.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it --cpu-period=100000 --cpu-quota=50000 ubuntu /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Compose Configuration with Additional Contexts\nDESCRIPTION: This Compose file demonstrates how to explicitly declare image dependencies using additional_contexts. This ensures correct build order when one service uses another service's image as a base.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/dependent-images.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  a:\n     image: service_a\n     build: \n       dockerfile: a.Dockerfile\n  b:\n     image: service_b\n     build:\n       dockerfile: b.Dockerfile\n       additional_contexts:\n         # `FROM service_a` will be resolved as a dependency on service \"a\" which has to be built first\n         service_a: \"service:a\"\n```\n\n----------------------------------------\n\nTITLE: Systemd Network Configuration for IP Forwarding\nDESCRIPTION: Configuration to enable IP forwarding in systemd network files, needed to fix networking issues with Docker containers when using systemd-network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_8\n\nLANGUAGE: systemd\nCODE:\n```\n[Network]\n...\nIPForward=kernel\n# OR\nIPForward=true\n```\n\n----------------------------------------\n\nTITLE: Defining Service Images in Docker Compose for Registry Push\nDESCRIPTION: This YAML example shows how to configure services in a Docker Compose file with image targets for different registries. It demonstrates pushing to both a local registry and Docker Hub repository.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_push.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  service1:\n    build: .\n    image: localhost:5000/yourimage  ## goes to local registry\n\n  service2:\n    build: .\n    image: your-dockerid/yourimage  ## goes to your repository on Docker Hub\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Service Status\nDESCRIPTION: Command to check the status of Kubernetes services and the expected output showing the service-entrypoint service is properly configured with port mapping from 30001 to 8080.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/deploy.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get services\n```\n\nLANGUAGE: shell\nCODE:\n```\nNAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\nkubernetes           ClusterIP   10.96.0.1        <none>        443/TCP          88m\nservice-entrypoint   NodePort    10.105.145.223   <none>        8080:30001/TCP   83s\n```\n\n----------------------------------------\n\nTITLE: Verifying WordPress Service Status in Docker Swarm\nDESCRIPTION: Checks the status of the WordPress service to confirm it's running properly after deployment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndocker service ls\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Database Services\nDESCRIPTION: Command to start the MySQL database and phpMyAdmin services defined in the Docker Compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes YAML Configuration for C++ Application Deployment\nDESCRIPTION: This YAML file defines a Kubernetes Deployment and Service for a C++ application. The Deployment creates a pod with one container using a Docker image, while the NodePort Service exposes the application on port 30001 of the host, routing to port 8080 in the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: docker-c-plus-plus-demo\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      service: ok-api\n  template:\n    metadata:\n      labels:\n        service: ok-api\n    spec:\n      containers:\n        - name: ok-api-service\n          image: DOCKER_USERNAME/REPO_NAME\n          imagePullPolicy: Always\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: service-entrypoint\n  namespace: default\nspec:\n  type: NodePort\n  selector:\n    service: ok-api\n  ports:\n    - port: 8080\n      targetPort: 8080\n      nodePort: 30001\n```\n\n----------------------------------------\n\nTITLE: Using Exec Form with Bash for Pipefail Support in Dockerfile\nDESCRIPTION: Using the exec form of RUN to explicitly choose a shell that supports the pipefail option, useful when the default shell like dash doesn't support this feature.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_17\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN [\"/bin/bash\", \"-c\", \"set -o pipefail && wget -O - https://some.site | wc -l > /number\"]\n```\n\n----------------------------------------\n\nTITLE: Running the Containerized Python Application\nDESCRIPTION: Command to build and run the containerized Python application using Docker Compose, which builds the image and starts the container with the application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Creating a Bake Configuration File\nDESCRIPTION: Command to create a docker-bake.hcl file that will hold the custom Bake configuration for the project.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ touch docker-bake.hcl\n```\n\n----------------------------------------\n\nTITLE: BuildKit Stage Dependencies Example\nDESCRIPTION: Illustrates the difference in stage processing between legacy builder and BuildKit using a simple multi-stage Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-stage.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM ubuntu AS base\nRUN echo \"base\"\n\nFROM base AS stage1\nRUN echo \"stage1\"\n\nFROM base AS stage2\nRUN echo \"stage2\"\n```\n\n----------------------------------------\n\nTITLE: Creating Updated Docker Config\nDESCRIPTION: Command to create a new version of the Nginx configuration as a Docker config for rotation purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_22\n\nLANGUAGE: bah\nCODE:\n```\n$ docker config create site-v2.conf site.conf\n```\n\n----------------------------------------\n\nTITLE: Cloning Sample Application Repository\nDESCRIPTION: Commands to clone the sample todo list application repository and navigate to the project directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dockersamples/todo-list-localstack-docker\n$ cd todo-list-localstack-docker\n```\n\n----------------------------------------\n\nTITLE: Using anchors and aliases for volume configuration in Docker Compose\nDESCRIPTION: This example shows how to create a default volume configuration with an anchor (&default-volume) and then reuse it with an alias (*default-volume) for another volume.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/fragments.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  db-data: &default-volume\n    driver: default\n  metrics: *default-volume\n```\n\n----------------------------------------\n\nTITLE: Running the Bun Application in Background Mode\nDESCRIPTION: Command to build and run the Bun application in detached mode using Docker Compose, which runs the container in the background.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/containerize.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build -d\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Buildx Builder\nDESCRIPTION: Removes a builder instance using docker buildx rm command. Cannot remove the default builder and automatically selects default builder if removing currently selected one.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/manage.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx rm <builder-name>\n```\n\n----------------------------------------\n\nTITLE: Relative Paths in Extended Services\nDESCRIPTION: Examples demonstrating how relative paths are handled when extending services across different directories.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/extends.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    image: example\n    extends:\n      file: ../commons/compose.yaml\n      service: base\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  base:\n    env_file: ./container.env\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    image: example\n    env_file: \n      - ../commons/container.env\n```\n\n----------------------------------------\n\nTITLE: Creating Docker daemon configuration for youki runtime\nDESCRIPTION: Command to create a Docker daemon configuration file that registers youki as a runtime, specifying the path to the youki binary as a runc drop-in replacement.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/alternative-runtimes.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# cat > /etc/docker/daemon.json <<EOF\n{\n  \"runtimes\": {\n    \"youki\": {\n      \"path\": \"/usr/local/bin/youki\"\n    }\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Recovering a Docker Swarm from Quorum Loss\nDESCRIPTION: This command recovers a swarm when the manager quorum has been lost by forcing the creation of a new single-node cluster. It specifies the advertise address for the recovering node, which becomes the sole manager of the new cluster.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/admin_guide.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker swarm init --force-new-cluster --advertise-addr node01:2377\n```\n\n----------------------------------------\n\nTITLE: Configuring Direct-LVM Mode with Advanced Options in Docker daemon.json\nDESCRIPTION: Comprehensive JSON configuration for setting up Device Mapper in direct-lvm mode with various advanced options, including specifying the block device, thin pool percentages, and autoextend settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storage-driver\": \"devicemapper\",\n  \"storage-opts\": [\n    \"dm.directlvm_device=/dev/xdf\",\n    \"dm.thinp_percent=95\",\n    \"dm.thinp_metapercent=1\",\n    \"dm.thinp_autoextend_threshold=80\",\n    \"dm.thinp_autoextend_percent=20\",\n    \"dm.directlvm_device_force=false\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with Custom Token for API Throttling Mitigation\nDESCRIPTION: YAML configuration showing how to provide a custom GitHub token to mitigate API throttling issues. This approach uses the GitHub API for checking cache keys instead of the cache API.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/gha.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Build and push\n  uses: docker/build-push-action@v6\n  with:\n    context: .\n    push: true\n    tags: \"<registry>/<image>:latest\"\n    cache-from: type=gha\n    cache-to: type=gha,mode=max\n    github-token: ${{ secrets.MY_CUSTOM_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Stop Signal in Docker Compose YAML\nDESCRIPTION: This snippet demonstrates how to set a custom stop signal for a service in a Docker Compose file. It shows how to configure the 'web' service to use SIGINT as the stop signal instead of the default SIGTERM.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/support-and-feedback/faq.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    stop_signal: SIGINT\n```\n\n----------------------------------------\n\nTITLE: Loading Delegation Private Key in Docker Trust Store\nDESCRIPTION: This snippet demonstrates how to automate importing a delegation private key to the local Docker trust store using environment variables for the passphrase.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_automation.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=\"mypassphrase123\"\n\n$ docker trust key load delegation.key --name jeff\nLoading key from \"delegation.key\"...\nSuccessfully imported key from delegation.key\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables, Working Directory, and User for a Docker Service\nDESCRIPTION: Creates a Docker service named 'helloworld' with a custom environment variable, working directory, and user. This demonstrates how to configure the runtime environment for a container in a service.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name helloworld \\\n  --env MYVAR=myvalue \\\n  --workdir /tmp \\\n  --user my_user \\\n  alpine ping docker.com\n```\n\n----------------------------------------\n\nTITLE: Mounting Volumes with the --mount Flag (Full Syntax)\nDESCRIPTION: Demonstrates the complete syntax for the --mount flag with key-value pairs that can be used with docker run. This approach supports all volume options including volume driver options and subdirectory mounting.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --mount type=volume[,src=<volume-name>],dst=<mount-path>[,<key>=<value>...]\n```\n\n----------------------------------------\n\nTITLE: Listing All Nodes in Docker Swarm\nDESCRIPTION: Command to display all nodes in the swarm. Can only be executed on a manager node and shows the status, availability, and role of each node.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker node ls\n```\n\n----------------------------------------\n\nTITLE: Port Mapping Configuration in Docker Compose\nDESCRIPTION: Examples of port mapping configurations using short syntax, showing various ways to map host and container ports including IPv6 addresses and protocol specifications.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nports:\n  - \"3000\"\n  - \"3000-3005\"\n  - \"8000:8000\"\n  - \"9090-9091:8080-8081\"\n  - \"49100:22\"\n  - \"8000-9000:80\"\n  - \"127.0.0.1:8001:8001\"\n  - \"127.0.0.1:5000-5010:5000-5010\"  \n  - \"::1:6000:6000\"   \n  - \"[::1]:6001:6001\" \n  - \"6060:6060/udp\"\n```\n\n----------------------------------------\n\nTITLE: Building Docker image with secret and cache invalidation\nDESCRIPTION: This command demonstrates how to build a Docker image while passing a secret and a build argument for cache invalidation. It shows the usage of the --secret and --build-arg flags.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/invalidation.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ TOKEN=\"tkn_pat123456\" docker build --secret id=TOKEN --build-arg CACHEBUST=1 .\n```\n\n----------------------------------------\n\nTITLE: Creating a Labeled Docker Config for gMSA in Swarm\nDESCRIPTION: Creates a Docker config for gMSA credential spec with a custom label identifying the gMSA name. This helps with organization and management of credential specs in a swarm environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker config create --label com.docker.gmsa.name=mygmsa credspec credspec.json\n```\n\n----------------------------------------\n\nTITLE: Removing and Recreating the Ingress Network in Docker Swarm\nDESCRIPTION: These commands remove the existing ingress network and create a new customized one with specific subnet, gateway, and MTU settings. This is useful when you need to customize low-level network settings or enable encryption.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker network rm ingress\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n  --driver overlay \\\n  --ingress \\\n  --subnet=10.11.0.0/16 \\\n  --gateway=10.11.0.2 \\\n  --opt com.docker.network.driver.mtu=1200 \\\n  my-ingress\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Skip Checks\nDESCRIPTION: Dockerfile that demonstrates how to skip specific build checks using the check directive.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/checks.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n# check=skip=JSONArgsRecommended,StageNameCasing\n\nFROM alpine AS BASE_STAGE\nCMD echo \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Networks\nDESCRIPTION: This command lists all networks available to the Docker daemon, showing the default bridge, host, and none networks with their network IDs, names, drivers, and scopes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker network ls\n\nNETWORK ID          NAME                DRIVER              SCOPE\n17e324f45964        bridge              bridge              local\n6ed54d316334        host                host                local\n7092879f2cc8        none                null                local\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only Bind Mount using --mount in Docker\nDESCRIPTION: This example demonstrates how to create a read-only bind mount in Docker using the --mount flag. It mounts the current directory's target folder to /app in the container with read-only access.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -it \\\n  --name devtest \\\n  --mount type=bind,source=\"$(pwd)\"/target,target=/app,readonly \\\n  nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Bash Script for Docker Image\nDESCRIPTION: This bash script is used as the main executable in the Docker image. It simply prints 'Hello world' to the console.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\necho \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Running Docker with Google Cloud Logging and Custom Labels\nDESCRIPTION: Example of running a Docker container with the gcplogs driver, including custom labels, environment variables, and command logging options for the default Google Cloud logging destination.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/gcplogs.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n    --log-driver=gcplogs \\\n    --log-opt labels=location \\\n    --log-opt env=TEST \\\n    --log-opt gcp-log-cmd=true \\\n    --env \"TEST=false\" \\\n    --label location=west \\\n    your/application\n```\n\n----------------------------------------\n\nTITLE: Removing a Service from an Overlay Network in Docker Swarm\nDESCRIPTION: Updates an existing service to disconnect it from a specified overlay network, preventing further communication with other services on that network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ docker service update --network-rm my-network my-web\n```\n\n----------------------------------------\n\nTITLE: Parallel Make Command Example\nDESCRIPTION: Demonstrates how to enable multi-threading in make commands using the jobs parameter for better build performance.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/optimization.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake --jobs=<n>\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Matrix Target with Maps in Docker Bake HCL\nDESCRIPTION: This snippet demonstrates how to use maps as matrix values in Docker Bake HCL, allowing for more complex and specific target definitions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/matrices.md#2025-04-11_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  name = \"app-${item.tgt}-${replace(item.version, \".\", \"-\")}\"\n  matrix = {\n    item = [\n      {\n        tgt = \"foo\"\n        version = \"1.0\"\n      },\n      {\n        tgt = \"bar\"\n        version = \"2.0\"\n      }\n    ]\n  }\n  target = item.tgt\n  args = {\n    VERSION = item.version\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose Standalone on Linux\nDESCRIPTION: Command to download the Docker Compose standalone binary from GitHub releases to the /usr/local/bin directory on a Linux system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/standalone.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ curl -SL https://github.com/docker/compose/releases/download/{{% param \"compose_version\" %}}/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Mapping a range of host ports to a container port in Docker\nDESCRIPTION: Runs a container with port 5000 bound to a randomly available port between 8000 and 9000 on the host, providing more flexibility than a single port mapping.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 8000-9000:5000 training/webapp python app.py\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Build Flag\nDESCRIPTION: Command to start the Docker Compose services while building the Rust application image.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Starting an Interactive Chat with an AI Model\nDESCRIPTION: Command to start an interactive chat session with an AI model, allowing for multiple prompts and responses.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\ndocker model run ai/smollm2\n```\n\n----------------------------------------\n\nTITLE: Advanced Network Configuration with Custom Drivers\nDESCRIPTION: Shows advanced network configuration with multiple services, custom network drivers, and driver options for isolation between services.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/networks.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  proxy:\n    build: ./proxy\n    networks:\n      - frontend\n  app:\n    build: ./app\n    networks:\n      - frontend\n      - backend\n  db:\n    image: postgres\n    networks:\n      - backend\n\nnetworks:\n  frontend:\n    # Specify driver options\n    driver: bridge\n    driver_opts:\n      com.docker.network.bridge.host_binding_ipv4: \"127.0.0.1\"\n  backend:\n    # Use a custom driver\n    driver: custom-driver\n```\n\n----------------------------------------\n\nTITLE: Joining a Second Worker Node to a Docker Swarm\nDESCRIPTION: Command to join a second worker node to the existing Docker swarm using the same join token. This maintains consistency across the worker nodes in the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/add-nodes.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm join \\\n  --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \\\n  192.168.99.100:2377\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Service with NFSv4 Volume\nDESCRIPTION: This example shows how to create a Docker service using an NFS volume with NFSv4, specifying additional mount options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ docker service create -d \\\n    --name nfs-service \\\n    --mount 'type=volume,source=nfsvolume,target=/app,volume-driver=local,volume-opt=type=nfs,volume-opt=device=:/var/docker-nfs,\"volume-opt=o=addr=10.0.0.10,rw,nfsvers=4,async\"' \\\n    nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Stopping a Detached Rails Application Running with Docker Compose\nDESCRIPTION: A console command to stop a Ruby on Rails application that was started in detached mode using Docker Compose. This command stops and removes all containers defined in the compose.yaml file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/containerize.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Creating Encrypted Overlay Network in Docker\nDESCRIPTION: Creates an encrypted overlay network using IPsec encryption at VXLAN level. Includes both encrypted and attachable flags for secure multi-host communication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/overlay.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create \\\n  --opt encrypted \\\n  --driver overlay \\\n  --attachable \\\n  my-attachable-multi-host-network\n```\n\n----------------------------------------\n\nTITLE: Generating Signed Client Certificate\nDESCRIPTION: Creates a signed client certificate by using the CA to sign the client Certificate Signing Request (CSR) with client authentication extensions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem \\\n  -CAcreateserial -out cert.pem -extfile extfile-client.cnf\nSignature ok\nsubject=/CN=client\nGetting CA Private Key\nEnter pass phrase for ca-key.pem:\n```\n\n----------------------------------------\n\nTITLE: Verifying Nginx Service Status\nDESCRIPTION: These commands check the status of the Nginx service, showing that it's running and displaying details about the service and its tasks.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker service ls\n\nID            NAME   MODE        REPLICAS  IMAGE\nzeskcec62q24  nginx  replicated  1/1       nginx:latest\n\n$ docker service ps nginx\n\nNAME                  IMAGE         NODE  DESIRED STATE  CURRENT STATE          ERROR  PORTS\nnginx.1.9ls3yo9ugcls  nginx:latest  moby  Running        Running 3 minutes ago\n```\n\n----------------------------------------\n\nTITLE: Testing DNS Resolution for Network Alias\nDESCRIPTION: Uses the 'dig' DNS lookup tool to verify that the 'mysql' network alias can be resolved to the correct IP address of the MySQL container.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ dig mysql\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping and inspecting a Docker builder with OpenTelemetry\nDESCRIPTION: Inspects the previously created 'mybuilder' builder while bootstrapping it. This command initializes the builder and verifies its configuration, which will generate traces visible in the Jaeger UI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/debug/opentelemetry.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx inspect --bootstrap\n```\n\n----------------------------------------\n\nTITLE: Building from a Git Repository URL\nDESCRIPTION: Example of building a service image directly from a Git repository URL, which can include branch/tag references and subdirectory paths.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    build: https://github.com/mycompany/example.git#branch_or_tag:subdirectory\n```\n\n----------------------------------------\n\nTITLE: Simplifying Healthcheck with String Syntax\nDESCRIPTION: Simplified syntax for healthcheck test command using a string, which is equivalent to CMD-SHELL followed by the command string.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\ntest: curl -f https://localhost || exit 1\n```\n\n----------------------------------------\n\nTITLE: Updating Restart Policy for Running Container in Docker\nDESCRIPTION: This command changes the restart policy for an already running container named 'redis' to 'unless-stopped'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/start-containers-automatically.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker update --restart unless-stopped redis\n```\n\n----------------------------------------\n\nTITLE: Validating SBOM with Local Export\nDESCRIPTION: Commands to build and validate SBOM attestation by exporting to local filesystem instead of creating an image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/sbom.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build \\\n  --sbom=true \\\n  --output type=local,dest=out .\n\n$ ls -1 ./out | grep sbom\nsbom.spdx.json\n```\n\n----------------------------------------\n\nTITLE: Docker Application Build Configuration\nDESCRIPTION: Dockerfile that defines how to build the Python application container using python:3.4-alpine as base image\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/stack-deploy.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM python:3.4-alpine\nADD . /code\nWORKDIR /code\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Default Address Pool for Docker Swarm\nDESCRIPTION: This command initializes a Docker swarm with a custom default address pool. It specifies a /16 (class B) network for 10.20.0.0.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-mode.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm init --default-addr-pool 10.20.0.0/16\n```\n\n----------------------------------------\n\nTITLE: Testing Container-to-Container Communication by IP\nDESCRIPTION: This command tests communication between containers by pinging the second container (alpine2) using its IP address, demonstrating successful connectivity between containers on the default bridge network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n# ping -c 2 172.17.0.3\n\nPING 172.17.0.3 (172.17.0.3): 56 data bytes\n64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.086 ms\n64 bytes from 172.17.0.3: seq=1 ttl=64 time=0.094 ms\n\n--- 172.17.0.3 ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.086/0.090/0.094 ms\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Buildx Builder\nDESCRIPTION: Creates a new builder instance using docker buildx create command. By default uses the docker-container driver if --driver flag is omitted.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/manage.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create --name=<builder-name>\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Deployments with kubectl\nDESCRIPTION: Command to retrieve and display all deployments in the Kubernetes cluster to verify the Deno application deployment status.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/deploy.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get deployments\n```\n\n----------------------------------------\n\nTITLE: Viewing SBOM with Docker Scout CLI\nDESCRIPTION: Use the docker scout sbom command to view the contents of the SBOM that Docker Scout generates for an image. This command prints the SBOM in JSON format to stdout by default.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/view-create-sboms.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout sbom [IMAGE]\n```\n\n----------------------------------------\n\nTITLE: Using Named Contexts with Container Builder and Local Registry\nDESCRIPTION: A GitHub Actions workflow that sets up a local registry as a service, builds and pushes a base image to it, then references that image in a subsequent build using named contexts. This approach works with the docker-container driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/named-contexts.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          # network=host driver-opt needed to push to local registry\n          driver-opts: network=host\n\n      - name: Build base image\n        uses: docker/build-push-action@v6\n        with:\n          context: \"{{defaultContext}}:base\"\n          tags: localhost:5000/my-base-image:latest\n          push: true\n\n      - name: Build\n        uses: docker/build-push-action@v6\n        with:\n          build-contexts: |\n            alpine=docker-image://localhost:5000/my-base-image:latest\n          tags: myimage:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Windowsfilter Size in Docker Daemon\nDESCRIPTION: Specifies the size to use when creating the sandbox for Windows containers. The default is 20G but this example sets it to 40G.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\> dockerd --storage-opt size=40G\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Proxy Settings in YAML\nDESCRIPTION: This YAML configuration sets up the registry to act as a pull-through cache for Docker Hub. It specifies the remote URL and optional authentication credentials.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/image-library/mirror.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproxy:\n  remoteurl: https://registry-1.docker.io\n  username: [username]\n  password: [password]\n```\n\n----------------------------------------\n\nTITLE: Unloading an AppArmor Profile\nDESCRIPTION: Command to unload a profile from AppArmor when it's no longer needed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/apparmor.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# unload the profile\n$ apparmor_parser -R /path/to/profile\n```\n\n----------------------------------------\n\nTITLE: Listing Keys in Docker Trust Store using Notary CLI\nDESCRIPTION: Shows how to display all keys in the local Docker Trust store, including their roles, GUN (Global Unique Name), Key IDs, and storage locations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ notary key list\n\nROLE       GUN                          KEY ID                                                              LOCATION\n----       ---                          ------                                                              --------\nroot                                    f6c6a4b00fefd8751f86194c7d87a3bede444540eb3378c4a11ce10852ab1f96    /home/ubuntu/.docker/trust/private\nadmin                                   8fb597cbaf196f0781628b2f52bff6b3912e4e8075720378fda60d17232bbcf9    /home/ubuntu/.docker/trust/private\njeff                                    1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1    /home/ubuntu/.docker/trust/private\ntargets    ...example.com/admin/demo    c819f2eda8fba2810ec6a7f95f051c90276c87fddfc3039058856fad061c009d    /home/ubuntu/.docker/trust/private\n```\n\n----------------------------------------\n\nTITLE: Warning Message When Using Host Network Mode with Published Ports\nDESCRIPTION: Example console output showing the warning message that appears when attempting to use port publishing options with host network mode.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/host.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWARNING: Published ports are discarded when using host network mode\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration File Setup\nDESCRIPTION: YAML configuration for Prometheus defining global settings, rules, and scrape configs including Docker target endpoint.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/prometheus.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# my global config\nglobal:\n  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\n  # scrape_timeout is set to the global default (10s).\n\n  # Attach these labels to any time series or alerts when communicating with\n  # external systems (federation, remote storage, Alertmanager).\n  external_labels:\n    monitor: \"codelab-monitor\"\n\n# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.\nrule_files:\n  # - \"first.rules\"\n  # - \"second.rules\"\n\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n  - job_name: prometheus\n\n    # metrics_path defaults to '/metrics'\n    # scheme defaults to 'http'.\n\n    static_configs:\n      - targets: [\"localhost:9090\"]\n\n  - job_name: docker\n      # metrics_path defaults to '/metrics'\n      # scheme defaults to 'http'.\n\n    static_configs:\n      - targets: [\"host.docker.internal:9323\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Container Connected to a User-Defined Bridge Network in Docker\nDESCRIPTION: Creates an Nginx container connected to the my-net network with port forwarding. This command creates the container with network connectivity and exposes port 80 of the container as port 8080 on the host.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker create --name my-nginx \\\n  --network my-net \\\n  --publish 8080:80 \\\n  nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Cache Export Destinations in Docker Bake\nDESCRIPTION: Demonstrates how to configure cache export destinations using the cache-to attribute. The example shows exporting cache to both S3 and inline storage.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  cache-to = [\n    {\n      type = \"s3\",\n      region = \"eu-west-1\",\n      bucket = \"mybucket\"\n    },\n    {\n      type = \"inline\",\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Secrets\nDESCRIPTION: A Compose file that configures WordPress and MySQL services to use Docker secrets for passwords, demonstrating the proper integration of secrets in a Compose environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n   db:\n     image: mysql:latest\n     volumes:\n       - db_data:/var/lib/mysql\n     environment:\n       MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password\n       MYSQL_DATABASE: wordpress\n       MYSQL_USER: wordpress\n       MYSQL_PASSWORD_FILE: /run/secrets/db_password\n     secrets:\n       - db_root_password\n       - db_password\n\n   wordpress:\n     depends_on:\n       - db\n     image: wordpress:latest\n     ports:\n       - \"8000:80\"\n     environment:\n       WORDPRESS_DB_HOST: db:3306\n       WORDPRESS_DB_USER: wordpress\n       WORDPRESS_DB_PASSWORD_FILE: /run/secrets/db_password\n     secrets:\n       - db_password\n\n\nsecrets:\n   db_password:\n     file: db_password.txt\n   db_root_password:\n     file: db_root_password.txt\n\nvolumes:\n    db_data:\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Completion with Oh My Zsh\nDESCRIPTION: Commands to generate and install Docker completion script for Zsh when using the Oh My Zsh framework.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/completion.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p ~/.oh-my-zsh/completions\n$ docker completion zsh > ~/.oh-my-zsh/completions/_docker\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Compose CLI plugin for all users\nDESCRIPTION: This command removes the Docker Compose CLI plugin that was installed for all users on the system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/uninstall.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ rm /usr/local/lib/docker/cli-plugins/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Stopping a Docker Container\nDESCRIPTION: Command to stop a running Docker container by specifying its container ID, which must be replaced with the actual ID from docker ps.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/03_updating_app.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker stop <the-container-id>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Repository on CentOS\nDESCRIPTION: Commands to install dnf-plugins-core and configure the Docker repository for package installation, which is required before installing Docker Engine for the first time.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/centos.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf -y install dnf-plugins-core\n$ sudo dnf config-manager --add-repo {{% param \"download-url-base\" %}}/docker-ce.repo\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Build Commands\nDESCRIPTION: Commands to use Docker Build Cloud with Docker Compose builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/usage.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx use cloud-<ORG>-<BUILDER_NAME>\n$ docker compose build\n```\n\n----------------------------------------\n\nTITLE: Multi-architecture binary handling in Dockerfile\nDESCRIPTION: Dockerfile that downloads and includes architecture-specific binaries based on the target architecture (TARGETARCH) variable, enabling proper functionality across different systems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/multi-arch.md#2025-04-11_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\n#syntax=docker/dockerfile:1.3-labs\n\nFROM alpine AS dl\nWORKDIR /tmp\nRUN apk add --no-cache curl tar\nARG TARGETARCH\nRUN <<EOT ash\n    mkdir -p /out/darwin\n    curl -fSsLo /out/darwin/kubectl \"https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/darwin/${TARGETARCH}/kubectl\"\n    chmod a+x /out/darwin/kubectl\nEOT\nRUN <<EOT ash\n    if [ \"amd64\" = \"$TARGETARCH\" ]; then\n        mkdir -p /out/windows\n        curl -fSsLo /out/windows/kubectl.exe \"https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/windows/amd64/kubectl.exe\"\n    fi\nEOT\n\nFROM alpine\nLABEL org.opencontainers.image.title=\"example-extension\" \\\n    org.opencontainers.image.description=\"My Example Extension\" \\\n    org.opencontainers.image.vendor=\"Docker Inc.\" \\\n    com.docker.desktop.extension.api.version=\">= 0.3.3\"\n\nCOPY --from=dl /out /\n```\n\n----------------------------------------\n\nTITLE: Using the Truncate Function in Docker Command Output\nDESCRIPTION: The truncate function shortens a string to a specified length. This example displays repository names truncated to 15 characters in docker image list output.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker image list --format '{{truncate .Repository 15}}'\n```\n\n----------------------------------------\n\nTITLE: Defining a Variable in Docker Bake HCL\nDESCRIPTION: Demonstrates how to define a variable named 'TAG' with a default value in a Docker Bake HCL file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/variables.md#2025-04-11_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"TAG\" {\n  default = \"docker.io/username/webapp:latest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Mount in Dockerfile\nDESCRIPTION: This Dockerfile example shows how to use a secret mount to access the GITHUB_TOKEN secret during the build process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/secrets.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine\nRUN --mount=type=secret,id=github_token,env=GITHUB_TOKEN ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Dual-Stack IPv4/IPv6 Macvlan Network\nDESCRIPTION: Creates a Macvlan network with dual-stack IPv4/IPv6 support. This example configures multiple IPv4 subnets and an IPv6 subnet with their respective gateways.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/macvlan.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d macvlan \\\n    --subnet=192.168.216.0/24 --subnet=192.168.218.0/24 \\\n    --gateway=192.168.216.1 --gateway=192.168.218.1 \\\n    --subnet=2001:db8:abc8::/64 --gateway=2001:db8:abc8::10 \\\n     -o parent=eth0.218 \\\n     -o macvlan_mode=bridge macvlan216\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Attached to an Overlay Network in Docker Swarm\nDESCRIPTION: This command creates a replicated nginx service with 3 instances and attaches it to an existing overlay network named 'my-network'. Service containers connected to this overlay network can communicate with each other.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker service create \\\n  --replicas 3 \\\n  --name my-web \\\n  --network my-network \\\n  nginx\n```\n\n----------------------------------------\n\nTITLE: Creating AppArmor Profile for Rootlesskit on Ubuntu 24.04+\nDESCRIPTION: Commands to create and install an AppArmor profile for rootlesskit, which is necessary for using unprivileged user namespaces on Ubuntu 24.04 and later versions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ filename=$(echo $HOME/bin/rootlesskit | sed -e s@^/@@ -e s@/@.@g)\n$ cat <<EOF > ~/${filename}\nabi <abi/4.0>,\ninclude <tunables/global>\n\n\"$HOME/bin/rootlesskit\" flags=(unconfined) {\n  userns,\n\n  include if exists <local/${filename}>\n}\nEOF\n$ sudo mv ~/${filename} /etc/apparmor.d/${filename}\n```\n\n----------------------------------------\n\nTITLE: Checking Service Tasks After Scaling\nDESCRIPTION: This command lists all tasks of a specific service after scaling. It shows the distribution of tasks across different nodes in the swarm, including their states and locations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/scale-service.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker service ps helloworld\n\nNAME                                    IMAGE   NODE      DESIRED STATE  CURRENT STATE\nhelloworld.1.8p1vev3fq5zm0mi8g0as41w35  alpine  worker2   Running        Running 7 minutes\nhelloworld.2.c7a7tcdq5s0uk3qr88mf8xco6  alpine  worker1   Running        Running 24 seconds\nhelloworld.3.6crl09vdcalvtfehfh69ogfb1  alpine  worker1   Running        Running 24 seconds\nhelloworld.4.auky6trawmdlcne8ad8phb0f1  alpine  manager1  Running        Running 24 seconds\nhelloworld.5.ba19kca06l18zujfwxyc5lkyn  alpine  worker2   Running        Running 24 seconds\n```\n\n----------------------------------------\n\nTITLE: Listing Available Docker Configs\nDESCRIPTION: Lists all configs available in the Docker swarm, showing their IDs, names, and creation timestamps.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker config ls\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Engine From Downloaded Packages\nDESCRIPTION: This command installs Docker Engine from manually downloaded RPM packages. You need to replace the placeholders with the actual package versions and architecture.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/rhel.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf install ./containerd.io-<version>.<arch>.rpm \\\n  ./docker-ce-<version>.<arch>.rpm \\\n  ./docker-ce-cli-<version>.<arch>.rpm \\\n  ./docker-buildx-plugin-<version>.<arch>.rpm \\\n  ./docker-compose-plugin-<version>.<arch>.rpm\n```\n\n----------------------------------------\n\nTITLE: Fetching a Bake definition from a remote Git repository\nDESCRIPTION: Example of using the docker buildx bake command to fetch a Bake definition from a remote Git repository with a specific tag and print the resulting configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake \"https://github.com/docker/cli.git#v20.10.11\" --print\n#1 [internal] load git source https://github.com/docker/cli.git#v20.10.11\n#1 0.745 e8f1871b077b64bcb4a13334b7146492773769f7       refs/tags/v20.10.11\n#1 2.022 From https://github.com/docker/cli\n#1 2.022  * [new tag]         v20.10.11  -> v20.10.11\n#1 DONE 2.9s\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker container builder with OpenTelemetry support\nDESCRIPTION: Creates a new Docker container builder named 'mybuilder' with Jaeger tracing enabled. The builder uses host networking and sets the JAEGER_TRACE environment variable to point to the local Jaeger instance.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/debug/opentelemetry.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx create --use \\\n  --name mybuilder \\\n  --driver docker-container \\\n  --driver-opt \"network=host\" \\\n  --driver-opt \"env.JAEGER_TRACE=localhost:6831\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for a Docker Extension\nDESCRIPTION: Defines a Dockerfile that builds a minimal Docker extension. Starts from scratch and includes required labels for extension metadata, UI source files, and configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/minimal-frontend-extension.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM scratch\n\nLABEL org.opencontainers.image.title=\"Minimal frontend\" \\\n    org.opencontainers.image.description=\"A sample extension to show how easy it's to get started with Desktop Extensions.\" \\\n    org.opencontainers.image.vendor=\"Awesome Inc.\" \\\n    com.docker.desktop.extension.api.version=\"0.3.3\" \\\n    com.docker.desktop.extension.icon=\"https://www.docker.com/wp-content/uploads/2022/03/Moby-logo.png\"\n\nCOPY ui ./ui\nCOPY metadata.json .\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with Watch Feature\nDESCRIPTION: Docker Compose configuration file that sets up services for a PHP application with MariaDB and PHPMyAdmin. Includes watch functionality for automatic code syncing.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 9000:80\n    depends_on:\n      db:\n        condition: service_healthy\n    secrets:\n      - db-password\n    environment:\n      - PASSWORD_FILE_PATH=/run/secrets/db-password\n      - DB_HOST=db\n      - DB_NAME=example\n      - DB_USER=root\n    develop:\n      watch:\n        - action: sync\n          path: ./src\n          target: /var/www/html\n  db:\n    image: mariadb\n    restart: always\n    user: root\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/mysql\n    environment:\n      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/db-password\n      - MARIADB_DATABASE=example\n    expose:\n      - 3306\n    healthcheck:\n      test:\n        [\n          \"CMD\",\n          \"/usr/local/bin/healthcheck.sh\",\n          \"--su-mysql\",\n          \"--connect\",\n          \"--innodb_initialized\",\n        ]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n  phpmyadmin:\n    image: phpmyadmin\n    ports:\n      - 8080:80\n    depends_on:\n      - db\n    environment:\n      - PMA_HOST=db\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Reloading Docker Daemon Configuration on Linux\nDESCRIPTION: This command sends a SIGHUP signal to the Docker daemon process on Linux, causing it to reload its configuration after changes have been made to the daemon.json file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/logs.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo kill -SIGHUP $(pidof dockerd)\n```\n\n----------------------------------------\n\nTITLE: Verifying Express Package Vulnerabilities After Fix\nDESCRIPTION: Command to check if the Express package vulnerabilities have been resolved in the updated image, showing detailed results.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves --only-package express\n    ✓ Provenance obtained from attestation\n    ✓ Image stored for indexing\n    ✓ Indexed 79 packages\n    ✓ No vulnerable package detected\n\n\n  ## Overview\n\n                      │                  Analyzed Image                   \n  ────────────────────┼───────────────────────────────────────────────────\n    Target            │  mobywhale/scout-demo:v2                   \n      digest          │  ef68417b2866                                     \n      platform        │ linux/arm64                                       \n      provenance      │ https://github.com/docker/scout-demo-service.git  \n                      │  7c3a06793fc8f97961b4a40c73e0f7ed85501857         \n      vulnerabilities │    0C     0H     0M     0L                        \n      size            │ 19 MB                                             \n      packages        │ 1                                                 \n\n\n  ## Packages and Vulnerabilities\n\n  No vulnerable packages detected\n\n```\n\n----------------------------------------\n\nTITLE: Basic Dockerfile Structure with Ubuntu Base Image\nDESCRIPTION: A sample Dockerfile that starts from ubuntu:22.04, adds metadata with LABEL, copies application files, builds the application with make, removes cache files, and specifies the command to run. It demonstrates how different instructions create layers in the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM ubuntu:22.04\nLABEL org.opencontainers.image.authors=\"org@example.com\"\nCOPY . /app\nRUN make /app\nRUN rm -r $HOME/.cache\nCMD python /app/app.py\n```\n\n----------------------------------------\n\nTITLE: Running Docker Desktop Diagnostics on Mac/Linux\nDESCRIPTION: Commands to locate and run the Docker Desktop diagnostic tool on Mac and Linux systems to gather troubleshooting information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/Applications/Docker.app/Contents/MacOS/com.docker.diagnose\n```\n\nLANGUAGE: bash\nCODE:\n```\n/Applications/Docker.app/Contents/MacOS/com.docker.diagnose gather -upload\n```\n\nLANGUAGE: bash\nCODE:\n```\n/opt/docker-desktop/bin/com.docker.diagnose\n```\n\nLANGUAGE: bash\nCODE:\n```\n/opt/docker-desktop/bin/com.docker.diagnose gather -upload\n```\n\nLANGUAGE: bash\nCODE:\n```\nopen /tmp/<your-diagnostics-ID>.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\nunzip –l /tmp/<your-diagnostics-ID>.zip\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Compose via Package Manager on Ubuntu/Debian\nDESCRIPTION: Commands to update package index and install the Docker Compose plugin on Ubuntu and Debian-based distributions using apt-get.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get update\n$ sudo apt-get install docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Multiple Components\nDESCRIPTION: This command demonstrates how to add the same annotation to both the image index and manifest by using comma-separated type prefixes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/annotations.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --tag <IMAGE> --push --annotation \"index,manifest:foo=bar\" .\n```\n\n----------------------------------------\n\nTITLE: Running Diagnostics in Project Harmonia\nDESCRIPTION: This command runs a diagnostic check for Project Harmonia, providing troubleshooting information. It helps in identifying and resolving issues within the cloud environment setup.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker harmonia doctor\n```\n\n----------------------------------------\n\nTITLE: Using Azure Blob Storage Cache with Docker Buildx\nDESCRIPTION: This command demonstrates how to use Azure Blob Storage as a cache backend when building a Docker image with buildx. It specifies both cache-to and cache-from options to store and retrieve the cache.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/azblob.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=azblob,name=<cache-image>[,parameters...] \\\n  --cache-from type=azblob,name=<cache-image>[,parameters...] .\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Pinning Image to Specific Tag\nDESCRIPTION: GitHub Actions workflow that demonstrates pinning the Alpine image to a specific version using build contexts. The example uses a parameter for the Alpine version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/named-contexts.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build\n        uses: docker/build-push-action@v6\n        with:\n          build-contexts: |\n            alpine=docker-image://alpine:{{% param \"example_alpine_version\" %}}\n          tags: myimage:latest\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-line Secrets in GitHub Actions\nDESCRIPTION: This example demonstrates how to handle multi-line secrets and various secret formats in GitHub Actions workflows, including empty lines and JSON.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/secrets.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets: |\n  \"MYSECRET=${{ secrets.GPG_KEY }}\"\n  GIT_AUTH_TOKEN=abcdefghi,jklmno=0123456789\n  \"MYSECRET=aaaaaaaa\n  bbbbbbb\n  ccccccccc\"\n  FOO=bar\n  \"EMPTYLINE=aaaa\n\n  bbbb\n  ccc\"\n  \"JSON_SECRET={\"\"key1\"\":\"\"value1\"\",\"\"key2\"\":\"\"value2\"\"}\"\n```\n\n----------------------------------------\n\nTITLE: Validating GPU Support with NVIDIA Benchmark\nDESCRIPTION: Runs an n-body simulation benchmark to verify GPU access is properly configured in Docker Desktop. This command uses the NVIDIA CUDA sample container to test GPU functionality.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gpu.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -it --gpus=all nvcr.io/nvidia/k8s/cuda-sample:nbody nbody -gpu -benchmark\n```\n\n----------------------------------------\n\nTITLE: Running Llama2 LLM with Ollama Using GPU Acceleration\nDESCRIPTION: Demonstrates how to run the Llama2 large language model using the Ollama container with GPU acceleration. This two-step process involves first starting the container with GPU access and then running the model.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gpu.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --gpus=all -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -it ollama ollama run llama2\n```\n\n----------------------------------------\n\nTITLE: Advanced Multi-Service Secret Configuration in Docker Compose\nDESCRIPTION: A more complex example demonstrating how to define and use secrets across multiple services (MySQL and WordPress). It shows how to access secrets through _FILE environment variables and manage database credentials securely.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/use-secrets.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n   db:\n     image: mysql:latest\n     volumes:\n       - db_data:/var/lib/mysql\n     environment:\n       MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password\n       MYSQL_DATABASE: wordpress\n       MYSQL_USER: wordpress\n       MYSQL_PASSWORD_FILE: /run/secrets/db_password\n     secrets:\n       - db_root_password\n       - db_password\n\n   wordpress:\n     depends_on:\n       - db\n     image: wordpress:latest\n     ports:\n       - \"8000:80\"\n     environment:\n       WORDPRESS_DB_HOST: db:3306\n       WORDPRESS_DB_USER: wordpress\n       WORDPRESS_DB_PASSWORD_FILE: /run/secrets/db_password\n     secrets:\n       - db_password\n\n\nsecrets:\n   db_password:\n     file: db_password.txt\n   db_root_password:\n     file: db_root_password.txt\n\nvolumes:\n    db_data:\n```\n\n----------------------------------------\n\nTITLE: Creating a Volume with vieux/sshfs Driver\nDESCRIPTION: This example creates a Docker volume using the vieux/sshfs driver, specifying SSH connection details and password.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ docker volume create --driver vieux/sshfs \\\n  -o sshcmd=test@node2:/home/test \\\n  -o password=testpassword \\\n  sshvolume\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Connected to an Overlay Network in Docker Swarm\nDESCRIPTION: Creates a replicated nginx service with 3 instances and attaches it to a previously created overlay network to enable communication with other services on the same network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --replicas 3 \\\n  --network my-network \\\n  --name my-web \\\n  nginx\n```\n\n----------------------------------------\n\nTITLE: JSON Format Example in Docker Splunk Logging\nDESCRIPTION: Examples of the 'json' format set with '--log-opt splunk-format=json'. The driver attempts to parse each line as a JSON object and send it as an embedded object, falling back to inline format if parsing fails.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/splunk.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attrs\": {\n    \"env1\": \"val1\",\n    \"label1\": \"label1\"\n  },\n  \"tag\": \"MyImage/MyContainer\",\n  \"source\": \"stdout\",\n  \"line\": \"my message\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attrs\": {\n    \"env1\": \"val1\",\n    \"label1\": \"label1\"\n  },\n  \"tag\": \"MyImage/MyContainer\",\n  \"source\": \"stdout\",\n  \"line\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ZFS pool for Docker storage\nDESCRIPTION: Command to create a new ZFS pool named 'zpool-docker' using dedicated block devices and mount it to the Docker data directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/zfs-driver.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo zpool create -f zpool-docker -m /var/lib/docker /dev/xvdf /dev/xvdg\n```\n\n----------------------------------------\n\nTITLE: Creating Local S3 Bucket in LocalStack\nDESCRIPTION: Command to create a new S3 bucket within the LocalStack environment using awslocal.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ awslocal s3 mb s3://mysamplebucket\n```\n\n----------------------------------------\n\nTITLE: Using Amazon S3 Cache with Docker Buildx Build Command\nDESCRIPTION: This command demonstrates how to configure Docker Buildx to use Amazon S3 for caching during a build operation. It shows the syntax for pushing to and retrieving from an S3 cache using the --cache-to and --cache-from options with type=s3.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/s3.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --push -t <user>/<image> \\\n  --cache-to type=s3,region=<region>,bucket=<bucket>,name=<cache-image>[,parameters...] \\\n  --cache-from type=s3,region=<region>,bucket=<bucket>,name=<cache-image> .\n```\n\n----------------------------------------\n\nTITLE: Publishing Container Ports with Specific IP Binding\nDESCRIPTION: Examples of how to publish container ports with specific IP address bindings. This demonstrates the flexibility in port publishing for IPv4 and IPv6 addresses.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 80:80 my_container\ndocker run -p 8080:80 my_container\ndocker run -p 0.0.0.0:8080:80 my_container\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Containers using TypeScript\nDESCRIPTION: Demonstrates how to retrieve a list of Docker containers using the Docker extension API. This is the current recommended method for accessing container information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/docker.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst containers = await ddClient.docker.listContainers();\n```\n\n----------------------------------------\n\nTITLE: Launching LocalStack with Docker Compose\nDESCRIPTION: Command to bring up LocalStack and MongoDB using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f compose-native.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Compose Services with Build Configurations\nDESCRIPTION: Example showing different ways to configure service builds in a Compose file, including basic context paths, custom Dockerfile locations, and absolute paths.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    build: ./webapp\n\n  backend:\n    image: example/database\n    build:\n      context: backend\n      dockerfile: ../backend.Dockerfile\n\n  custom:\n    build: ~/custom\n```\n\n----------------------------------------\n\nTITLE: Running the First Web Application Container\nDESCRIPTION: This command starts the first web application container in detached mode, names it 'web1', sets its hostname, and connects it to the 'sample-app' network with a network alias for discovery.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name web1 -h web1 --network sample-app --network-alias web1 web\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Aliases Across Multiple Services in Docker Compose\nDESCRIPTION: Complex example showing multiple services with different network configurations and aliases, enabling services to reach each other using different hostnames based on the connecting network.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    networks:\n      - front-tier\n      - back-tier\n\n  monitoring:\n    image: example/monitoring\n    networks:\n      - admin\n\n  backend:\n    image: example/backend\n    networks:\n      back-tier:\n        aliases:\n          - database\n      admin:\n        aliases:\n          - mysql\n\nnetworks:\n  front-tier:\n  back-tier:\n  admin:\n```\n\n----------------------------------------\n\nTITLE: Deployment Status Output\nDESCRIPTION: Sample output from kubectl showing the status of the Java application deployment. The output indicates the deployment has one pod ready, up-to-date, and available.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/deploy.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nNAME                 READY   UP-TO-DATE   AVAILABLE   AGE\ndocker-java-demo     1/1     1            1           15s\n```\n\n----------------------------------------\n\nTITLE: Setting Default Cloud Builder\nDESCRIPTION: Command to set Docker Build Cloud as the default builder globally.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/usage.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx use cloud-<ORG>-<BUILDER_NAME> --global\n```\n\n----------------------------------------\n\nTITLE: Neovim Build Dockerfile for Multi-Platform Usage\nDESCRIPTION: A Dockerfile that builds Neovim from source using a Debian base image, with cache mounts for apt packages, and exports the compiled binary from a scratch image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM debian:bookworm AS build\nWORKDIR /work\nRUN --mount=type=cache,target=/var/cache/apt,sharing=locked \\\n    --mount=type=cache,target=/var/lib/apt,sharing=locked \\\n    apt-get update && apt-get install -y \\\n    build-essential \\\n    cmake \\\n    curl \\\n    gettext \\\n    ninja-build \\\n    unzip\nADD https://github.com/neovim/neovim.git#stable .\nRUN make CMAKE_BUILD_TYPE=RelWithDebInfo\n\nFROM scratch\nCOPY --from=build /work/build/bin/nvim /\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands\nDESCRIPTION: Terminal commands for building the Docker image and running the containerized Golang application. Includes commands for building the image with a tag, running the container with port mapping, and checking running containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t go-api:latest .\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -p 8000:8000 go-api:latest\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Basic Node.js Dockerfile\nDESCRIPTION: Initial Dockerfile for a Node.js application showing basic image setup\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/09_image_best.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM node:lts-alpine\nWORKDIR /app\nCOPY . .\nRUN yarn install --production\nCMD [\"node\", \"src/index.js\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Certificate Path for Docker TLS in Bash\nDESCRIPTION: This snippet demonstrates how to specify a custom location for Docker TLS certificates using the DOCKER_CERT_PATH environment variable, then running a Docker command with TLS verification enabled.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ export DOCKER_CERT_PATH=~/.docker/zone1/\n$ docker --tlsverify ps\n```\n\n----------------------------------------\n\nTITLE: Listing Delegations to Identify Key IDs\nDESCRIPTION: This command lists delegations and their associated Key IDs to identify which keys need to be removed when rotating keys for a delegation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ notary delegation list registry.example.com/admin/demo\n\nROLE                PATHS             KEY IDS                                                             THRESHOLD\n----                -----             -------                                                             ---------\ntargets/jeff        \"\" <all paths>    8fb597cbaf196f0781628b2f52bff6b3912e4e8075720378fda60d17232bbcf9    1\n                                     1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1    \ntargets/releases    \"\" <all paths>    8fb597cbaf196f0781628b2f52bff6b3912e4e8075720378fda60d17232bbcf9    1\n                                     1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1    \n```\n\n----------------------------------------\n\nTITLE: Installing Rootless Docker with Package Manager\nDESCRIPTION: Command to install rootless Docker using the dockerd-rootless-setuptool.sh script, which is available when Docker is installed via RPM/DEB packages.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dockerd-rootless-setuptool.sh install\n```\n\n----------------------------------------\n\nTITLE: Running Test Container for Network Metrics\nDESCRIPTION: Docker command to run an Alpine container that generates network traffic for testing metrics collection.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/prometheus.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm alpine apk add git make musl-dev go\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Service with NFSv3 Volume\nDESCRIPTION: This example demonstrates how to create a Docker service that uses an NFS volume with NFSv3, specifying the NFS server and exported directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ docker service create -d \\\n  --name nfs-service \\\n  --mount 'type=volume,source=nfsvolume,target=/app,volume-driver=local,volume-opt=type=nfs,volume-opt=device=:/var/docker-nfs,volume-opt=o=addr=10.0.0.10' \\\n  nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Journald as Default Logging Driver in daemon.json\nDESCRIPTION: JSON configuration for setting journald as the default logging driver in the Docker daemon configuration file. This file is located at /etc/docker/daemon.json on Linux or C:\\ProgramData\\docker\\config\\daemon.json on Windows Server.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/journald.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-driver\": \"journald\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Bake Configuration in HCL\nDESCRIPTION: A more comprehensive Bake configuration file that demonstrates how to express complex build options including tags, build args, cache settings, and multi-platform builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/introduction.md#2025-04-11_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"myapp\" {\n  context = \".\"\n  dockerfile = \"Dockerfile\"\n  tags = [\"myapp:latest\"]\n  args = {\n    foo = \"bar\"\n  }\n  no-cache = true\n  platforms = [\"linux/amd64\", \"linux/arm64\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Building multi-architecture Docker images with buildx\nDESCRIPTION: Alternative command using docker buildx to build and push a Docker extension for multiple architectures when not using the provided Makefile.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/multi-arch.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --push --platform=linux/amd64,linux/arm64 --tag=username/my-extension:0.0.1 .\n```\n\n----------------------------------------\n\nTITLE: Configuring subordinate user ID mapping in /etc/subuid\nDESCRIPTION: This snippet shows the format for mapping a user to a subordinate ID range in the /etc/subuid file. It assigns testuser a range of 65536 UIDs starting from 231072, effectively mapping container UID 0 to host UID 231072.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/userns-remap.md#2025-04-11_snippet_0\n\nLANGUAGE: none\nCODE:\n```\ntestuser:231072:65536\n```\n\n----------------------------------------\n\nTITLE: Configuring Rolling Updates with update_config in Docker Compose\nDESCRIPTION: Example showing how to configure rolling updates for a service using the update_config section in a Docker Compose file. This configuration specifies that updates should happen two containers at a time, with a 10-second delay between updates, using the stop-first update strategy.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy:\n  update_config:\n    parallelism: 2\n    delay: 10s\n    order: stop-first\n```\n\n----------------------------------------\n\nTITLE: Installing and configuring GenAI stack with GPU acceleration on Linux\nDESCRIPTION: This bash script demonstrates how to set up the GenAI stack with GPU acceleration on a Linux host. It includes cloning the repository, starting the containers using Docker Compose with the linux-gpu profile, and configuring the environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-leveraging-rag/index.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/docker/genai-stack\ndocker compose --profile linux-gpu up -d\nmv env.example .env\nnano .env\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable for Temporary SSH Connection\nDESCRIPTION: Sets the DOCKER_HOST environment variable to establish a temporary SSH connection to a remote Docker daemon without creating a context. Useful for one-time connections.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ export DOCKER_HOST=ssh://docker-user@host1.example.com\n$ docker info\n<prints output of the remote engine>\n```\n\n----------------------------------------\n\nTITLE: Updating a Docker Context\nDESCRIPTION: The docker context update command modifies properties of an existing context. This example updates the description field of the 'docker-test' context.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/contexts.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ docker context update docker-test --description \"Test context\"\ndocker-test\nSuccessfully updated context \"docker-test\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Scout Organization in CLI\nDESCRIPTION: Command to configure the Docker organization for viewing exceptions in the CLI. This setting is required to view exceptions created for your organization.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/exceptions.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout configure organization <organization>\n```\n\n----------------------------------------\n\nTITLE: Deploying Node.js Application to Kubernetes with kubectl\nDESCRIPTION: This command applies the Kubernetes YAML configuration to deploy the Node.js application to a local Kubernetes cluster. It creates both the Deployment and Service defined in the YAML file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl apply -f docker-node-kubernetes.yaml\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Sample Application Directory (Git Clone)\nDESCRIPTION: This command changes the current directory to the cloned nginx-node-redis repository, which contains the nginx and web subdirectories needed for the demo.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd nginx-node-redis\n```\n\n----------------------------------------\n\nTITLE: Mounting Volumes with the --volume Flag (Full Syntax)\nDESCRIPTION: Shows the syntax for the --volume flag which uses colon-delimited fields. This is the traditional way to mount volumes in Docker, though it supports fewer options than --mount.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -v [<volume-name>:]<mount-path>[:opts]\n```\n\n----------------------------------------\n\nTITLE: Common Configuration File Example\nDESCRIPTION: Example of a common configuration file that defines shared service attributes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/extends.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    build: .\n    environment:\n      CONFIG_FILE_PATH: /code/config\n      API_KEY: xxxyyy\n    cpu_shares: 5\n```\n\n----------------------------------------\n\nTITLE: Adding Device to Btrfs Volume and Balancing\nDESCRIPTION: Commands to dynamically add a new block device to an existing Btrfs volume and then rebalance the filesystem to distribute data across all devices.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/btrfs-driver.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo btrfs device add /dev/svdh /var/lib/docker\n\n$ sudo btrfs filesystem balance /var/lib/docker\n```\n\n----------------------------------------\n\nTITLE: Publishing UDP Port in Docker Swarm Service\nDESCRIPTION: This command maps UDP port 80 on the service to port 8080 on the routing mesh. It shows both the legacy and newer syntax for specifying UDP protocol.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n-p 8080:80/udp\n```\n\nLANGUAGE: bash\nCODE:\n```\n-p published=8080,target=80,protocol=udp\n```\n\n----------------------------------------\n\nTITLE: Verifying Devicemapper File Size Change in Bash\nDESCRIPTION: This command shows how to verify the file size change after resizing the data file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo ls -lh /var/lib/docker/devicemapper/\n\ntotal 1.2G\n-rw------- 1 root root 200G Apr 14 08:47 data\n-rw------- 1 root root 2.0G Apr 19 13:27 metadata\n```\n\n----------------------------------------\n\nTITLE: Invalid Dockerfile with Empty Continuation Lines\nDESCRIPTION: Example showing deprecated usage of empty continuation lines between package installations in a Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/no-empty-continuation.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nRUN apk add \\\n\n    gnupg \\\n\n    curl\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Kafka Application in Development Mode\nDESCRIPTION: Starts the Node.js application in development mode, which sets up a Kafka consumer and listens for messages.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ yarn dev\n```\n\n----------------------------------------\n\nTITLE: Setting Extended Key Usage for Client Authentication\nDESCRIPTION: Creates an extensions configuration file that specifies the key should be used for client authentication purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ echo extendedKeyUsage = clientAuth > extfile-client.cnf\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Network Interface Name with Docker Run\nDESCRIPTION: Example of using the long-form --network flag on docker run to specify a custom interface name via the com.docker.network.endpoint.ifname driver option.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --network=name=bridge,driver-opt=com.docker.network.endpoint.ifname=foobar …\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Certificates in BuildKit TOML\nDESCRIPTION: Sets up registry certificates for a custom registry in the BuildKit configuration, specifying paths for CA certificate and key pair.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/configure.md#2025-04-11_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n# /etc/buildkitd.toml\ndebug = true\n[registry.\"myregistry.com\"]\n  ca=[\"/etc/certs/myregistry.pem\"]\n  [[registry.\"myregistry.com\".keypair]]\n    key=\"/etc/certs/myregistry_key.pem\"\n    cert=\"/etc/certs/myregistry_cert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Restarting a Paused Service Update in Docker Swarm\nDESCRIPTION: Restarts a paused service update. This is useful when an update has been automatically paused due to failures or when manual intervention is needed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/rolling-update.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker service update redis\n```\n\n----------------------------------------\n\nTITLE: Examining Docker Image History\nDESCRIPTION: Example showing how to use docker image history command to view the layers in a Docker image\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/09_image_best.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker image history getting-started\n```\n\n----------------------------------------\n\nTITLE: Deploying WordPress Service with MySQL Secret Integration\nDESCRIPTION: Creates a WordPress service that connects to the MySQL database using the shared secret for authentication. The service is published on port 30000, mounts a volume for data persistence, and references the MySQL password secret.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker service create \\\n     --name wordpress \\\n     --replicas 1 \\\n     --network mysql_private \\\n     --publish published=30000,target=80 \\\n     --mount type=volume,source=wpdata,destination=/var/www/html \\\n     --secret source=mysql_password,target=wp_db_password \\\n     -e WORDPRESS_DB_USER=\"wordpress\" \\\n     -e WORDPRESS_DB_PASSWORD_FILE=\"/run/secrets/wp_db_password\" \\\n     -e WORDPRESS_DB_HOST=\"mysql:3306\" \\\n     -e WORDPRESS_DB_NAME=\"wordpress\" \\\n     wordpress:latest\n```\n\n----------------------------------------\n\nTITLE: Including External Compose Files in YAML\nDESCRIPTION: This snippet demonstrates how to include an external Compose file in the main compose.yaml file. It includes the infra.yaml file and defines a web service with build configuration, port mapping, and file watching settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n   - infra.yaml\nservices:\n  web:\n    build: .\n    ports:\n      - \"8000:5000\"\n    develop:\n      watch:\n        - action: sync\n          path: .\n          target: /code\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for NLP Application\nDESCRIPTION: This command builds a Docker image named 'basic-nlp' using the Dockerfile in the current directory. It demonstrates how to use the docker build command with tagging.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t basic-nlp .\n```\n\n----------------------------------------\n\nTITLE: Verifying user identity\nDESCRIPTION: Command to verify that a user exists on the system by checking their user ID, group ID, and group memberships. This is a prerequisite for using user namespace remapping.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/userns-remap.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ id testuser\n\nuid=1001(testuser) gid=1001(testuser) groups=1001(testuser)\n```\n\n----------------------------------------\n\nTITLE: Starting Redis Container with Restart Policy in Docker\nDESCRIPTION: This command starts a Redis container and configures it to always restart unless explicitly stopped or the daemon restarts.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/start-containers-automatically.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --restart unless-stopped redis\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Fluentd Logging Driver\nDESCRIPTION: Command examples for running Docker containers with the Fluentd logging driver. Shows basic usage and how to specify the Fluentd address option.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/fluentd.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --log-driver=fluentd ...\n```\n\n----------------------------------------\n\nTITLE: Testing Internet Connectivity from Container\nDESCRIPTION: This command tests internet connectivity from within the alpine1 container by pinging google.com. It limits the ping to 2 attempts and shows successful connectivity with round-trip times.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# ping -c 2 google.com\n\nPING google.com (172.217.3.174): 56 data bytes\n64 bytes from 172.217.3.174: seq=0 ttl=41 time=9.841 ms\n64 bytes from 172.217.3.174: seq=1 ttl=41 time=9.897 ms\n\n--- google.com ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 9.841/9.869/9.897 ms\n```\n\n----------------------------------------\n\nTITLE: Pulling an Ubuntu Image to Demonstrate VFS Layer Storage\nDESCRIPTION: Using docker pull to download an Ubuntu image which demonstrates how layers are pulled and stored by the VFS driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/vfs-driver.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull ubuntu\n\nUsing default tag: latest\nlatest: Pulling from library/ubuntu\ne0a742c2abfd: Pull complete\n486cb8339a27: Pull complete\ndc6f0d824617: Pull complete\n4f7a5649a30e: Pull complete\n672363445ad2: Pull complete\nDigest: sha256:84c334414e2bfdcae99509a6add166bbb4fa4041dc3fa6af08046a66fed3005f\nStatus: Downloaded newer image for ubuntu:latest\n```\n\n----------------------------------------\n\nTITLE: Starting Jaeger UI Container in Docker\nDESCRIPTION: This command starts a Jaeger UI container for inspecting build traces exported from Docker Desktop. It runs the container in detached mode, names it 'jaeger', and maps port 16686.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/use-desktop/builds.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name jaeger -p \"16686:16686\" jaegertracing/all-in-one\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Connection Error Message\nDESCRIPTION: Common error message when unable to connect to the Docker daemon, indicating either the daemon isn't running or the client is attempting to connect to a different host.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCannot connect to the Docker daemon. Is 'docker daemon' running on this host?\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenMetrics Endpoint for Docker Organization\nDESCRIPTION: YAML configuration for the Datadog OpenMetrics check, highlighting the line where the Docker organization needs to be specified in the metrics endpoint URL.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/metrics-exporter.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ninstances:\n  - openmetrics_endpoint: \"https://api.scout.docker.com/v1/exporter/org/<<ORG>>/metrics\"\n    namespace: \"scout-metrics-exporter\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Builder with Buildx\nDESCRIPTION: This command creates a new Buildx builder named 'kube' using the Kubernetes driver. It supports additional driver options for customization.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx create \\\n  --bootstrap \\\n  --name=kube \\\n  --driver=kubernetes \\\n  --driver-opt=[key=value,...]\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Ruby on Rails Kubernetes Deployment\nDESCRIPTION: This command removes the Ruby on Rails application deployment from the Kubernetes cluster by deleting the resources defined in the YAML file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/deploy.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl delete -f docker-ruby-on-rails-kubernetes.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a CIFS/Samba Volume\nDESCRIPTION: This command creates a Docker volume for a Samba share, specifying the server, share path, and authentication details.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ docker volume create \\\n\t--driver local \\\n\t--opt type=cifs \\\n\t--opt device=//uxxxxx.your-server.de/backup \\\n\t--opt o=addr=uxxxxx.your-server.de,username=uxxxxxxx,password=*****,file_mode=0777,dir_mode=0777 \\\n\t--name cif-volume\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Service and Secrets\nDESCRIPTION: These commands remove the Nginx service and delete the Docker secrets created for this example.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker service rm nginx\n\n$ docker secret rm site.crt site.key site.conf\n```\n\n----------------------------------------\n\nTITLE: Deploying and Checking Kubernetes Application Status\nDESCRIPTION: Shell commands for deploying the Rust application to Kubernetes, checking deployment status, and verifying services are running correctly. Includes verifying the web service works by accessing it through curl.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl apply -f docker-rust-kubernetes.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\ndeployment.apps/server created\ndeployment.apps/db created\nservice/server created\nservice/db created\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl get deployments\n```\n\nLANGUAGE: shell\nCODE:\n```\nNAME                 READY   UP-TO-DATE   AVAILABLE   AGE\ndb       1/1     1            1           2m21s\nserver   1/1     1            1           2m21s\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl get services\n```\n\nLANGUAGE: shell\nCODE:\n```\nNAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\ndb           ClusterIP   10.105.167.81    <none>        5432/TCP         109s\nkubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          9d\nserver       NodePort    10.101.235.213   <none>        5000:30001/TCP   109s\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://localhost:30001/users\n[{\"id\":1,\"login\":\"root\"}]\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl delete -f docker-rust-kubernetes.yaml\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging for MSI Installation Debugging\nDESCRIPTION: Command to install Docker Desktop MSI with verbose logging enabled. This creates a detailed log file that can be examined to diagnose installation failures by searching for 'value 3' error codes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/faq.md#2025-04-11_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /i \"DockerDesktop.msi\" /L*V \".\\msi.log\"\n```\n\n----------------------------------------\n\nTITLE: Bake Configuration for Cross-Platform Binary Export\nDESCRIPTION: This HCL snippet extends the binary export configuration to build for multiple platforms. It inherits from the 'bin' target and specifies additional platforms.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_11\n\nLANGUAGE: HCL\nCODE:\n```\ntarget \"bin-cross\" {\n  inherits = [\"bin\"]\n  platforms = [\n    \"linux/amd64\",\n    \"linux/arm64\",\n    \"linux/riscv64\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Service in Docker Swarm\nDESCRIPTION: Creates a service in global mode that runs a single task on every available node in the swarm. This is useful for monitoring agents, security scanners, or other services that should run on all nodes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --name myservice \\\n  --mode global \\\n  alpine top\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Network for Multi-container Applications\nDESCRIPTION: Creates a Docker network named 'todo-app' that will be used to connect multiple containers together, allowing them to communicate.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create todo-app\n```\n\n----------------------------------------\n\nTITLE: Visualizing Syslog Message Format in Docker\nDESCRIPTION: Shows the format of syslog messages as implemented by Docker's syslog driver according to RFC 5424 ABNF reference. The diagram illustrates how timestamp, hostname, application name, process ID, and message ID are structured.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/syslog.md#2025-04-11_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n                TIMESTAMP SP HOSTNAME SP APP-NAME SP PROCID SP MSGID\n                    +          +             +           |        +\n                    |          |             |           |        |\n                    |          |             |           |        |\n       +------------+          +----+        |           +----+   +---------+\n       v                            v        v                v             v\n2017-04-01T17:41:05.616647+08:00 a.vm {taskid:aa,version:} 1787791 {taskid:aa,version:}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Multiple Configuration Files\nDESCRIPTION: Command to run Docker Compose with multiple configuration files. The files are merged in the order they're specified on the command line.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f compose.yaml -f compose.admin.yaml run backup_db\n```\n\n----------------------------------------\n\nTITLE: Displaying Network Interfaces in a Container with None Network Driver\nDESCRIPTION: This snippet demonstrates the output of 'ip link show' command in an Alpine container using the 'none' network driver. It shows that only the loopback device is created within the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/none.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm --network none alpine:latest ip link show\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Specific GPU Device\nDESCRIPTION: Command to run an Ubuntu container with access to a specific NVIDIA GPU identified by its UUID. This example demonstrates how to use the device option with the --gpus flag to target a particular GPU.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/resource_constraints.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm --gpus device=GPU-3a23c669-1f69-c64e-cf85-44e9b07e7a2a ubuntu nvidia-smi\n```\n\n----------------------------------------\n\nTITLE: Running the Bun Application with Docker Compose\nDESCRIPTION: Command to build and run the Bun application using Docker Compose, which builds the image and starts the container in the foreground.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/containerize.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Build Command with ARG Override\nDESCRIPTION: Shows how to override the build argument value during build time using docker buildx command.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-arg-in-from.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --build-arg ALPINE_VERSION=edge .\n```\n\n----------------------------------------\n\nTITLE: Using Null Value for Build Arguments in Bake Targets\nDESCRIPTION: Example showing how to set build arguments to null values to force a target to use the ARG value specified in the Dockerfile, and how variables can be used in some targets but overridden in others.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"GO_VERSION\" {\n  default = \"1.20.3\"\n}\n\ntarget \"webapp\" {\n  dockerfile = \"webapp.Dockerfile\"\n  tags = [\"docker.io/username/webapp\"]\n}\n\ntarget \"db\" {\n  args = {\n    GO_VERSION = null\n  }\n  dockerfile = \"db.Dockerfile\"\n  tags = [\"docker.io/username/db\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Populating a Volume Using a Container\nDESCRIPTION: Demonstrates how to populate a new volume with the contents of a container's directory using both --mount and -v options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  --name=nginxtest \\\n  --mount source=nginx-vol,destination=/usr/share/nginx/html \\\n  nginx:latest\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  --name=nginxtest \\\n  -v nginx-vol:/usr/share/nginx/html \\\n  nginx:latest\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker container stop nginxtest\n\n$ docker container rm nginxtest\n\n$ docker volume rm nginx-vol\n```\n\n----------------------------------------\n\nTITLE: Configuring remote access with systemd unit file\nDESCRIPTION: Commands to modify the systemd unit file to enable Docker daemon to listen on both the Unix socket and TCP port 2375. This includes the ExecStart configuration and commands to reload systemd and restart Docker.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/remote-access.md#2025-04-11_snippet_0\n\nLANGUAGE: systemd\nCODE:\n```\n[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://127.0.0.1:2375\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Swarm Nodes\nDESCRIPTION: Lists all nodes in the Docker swarm using the docker node ls command. The output shows node IDs, hostnames, status, availability, and manager status, with an asterisk indicating the current node.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/create-swarm.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker node ls\n\nID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS\ndxn1zf6l61qsb1josjja83ngz *  manager1  Ready   Active        Leader\n\n```\n\n----------------------------------------\n\nTITLE: Compliant Dockerfile with Non-Root User\nDESCRIPTION: A compliant multi-stage Dockerfile example that specifies a non-root user in the runtime stage, satisfying the Default Non-Root User policy requirements.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/policy/_index.md#2025-04-11_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM alpine AS builder\nCOPY Makefile ./src /\nRUN make build\n\nFROM alpine AS runtime\nCOPY --from=builder bin/production /app\nUSER nonroot\nENTRYPOINT [\"/app/production\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Docker Context\nDESCRIPTION: This command creates a new context named 'docker-test' pointing to a remote Docker daemon at 'tcp://docker:2375'. The context is stored in the ~/.docker/contexts/ directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/contexts.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker context create docker-test --docker host=tcp://docker:2375\ndocker-test\nSuccessfully created context \"docker-test\"\n```\n\n----------------------------------------\n\nTITLE: Listing Available Models in Docker Model Runner\nDESCRIPTION: Command to list all AI models that have been pulled to the local environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker model list\n```\n\n----------------------------------------\n\nTITLE: BuildKit Inline Cache Error in Docker Daemon\nDESCRIPTION: This snippet demonstrates an error that occurs when attempting to build an image with BuildKit's inline cache feature. The error causes the Docker daemon to unexpectedly exit due to a panic.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/23.0.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x18 pc=0x147ff00]\n\ngoroutine 693 [running]:\ngithub.com/docker/docker/vendor/github.com/moby/buildkit/cache.computeBlobChain.func4.1({0x245cca8, 0x4001394960})\n        /go/src/github.com/docker/docker/vendor/github.com/moby/buildkit/cache/blobs.go:206 +0xc90\ngithub.com/docker/docker/vendor/github.com/moby/buildkit/util/flightcontrol.(*call).run(0x40013c2240)\n        /go/src/github.com/docker/docker/vendor/github.com/moby/buildkit/util/flightcontrol/flightcontrol.go:121 +0x64\nsync.(*Once).doSlow(0x0?, 0x4001328240?)\n        /usr/local/go/src/sync/once.go:74 +0x100\nsync.(*Once).Do(0x4001328240?, 0x0?)\n        /usr/local/go/src/sync/once.go:65 +0x24\ncreated by github.com/docker/docker/vendor/github.com/moby/buildkit/util/flightcontrol.(*call).wait\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Network Interface Name with Docker Network Connect\nDESCRIPTION: Example of using the new netlabel 'com.docker.network.endpoint.ifname' to customize the interface name when connecting a container to a network using the docker network connect command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker network connect --driver-opt=com.docker.network.endpoint.ifname=foobar …\n```\n\n----------------------------------------\n\nTITLE: Using Bind Mounts in Dockerfile Build Process\nDESCRIPTION: An example of using bind mounts during the build process with the RUN instruction, which allows accessing source code without persisting it in the image layers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM golang:latest\nWORKDIR /app\nRUN --mount=type=bind,target=. go build -o /app/hello\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Bind Mount (PowerShell)\nDESCRIPTION: PowerShell-specific command to run a Node.js application in a Docker container with bind mount for development. Includes port mapping and development server setup.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\ndocker run -dp 127.0.0.1:3000:3000 `\n    -w /app --mount \"type=bind,src=$pwd,target=/app\" `\n    node:18-alpine `\n    sh -c \"yarn install && yarn run dev\"\n```\n\n----------------------------------------\n\nTITLE: Container Network Inspection Output\nDESCRIPTION: JSON output showing the network configuration details of a container connected to the macvlan network, including IP and MAC address information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/macvlan.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"Networks\": {\n  \"my-macvlan-net\": {\n      \"IPAMConfig\": null,\n      \"Links\": null,\n      \"Aliases\": [\n          \"bec64291cd4c\"\n      ],\n      \"NetworkID\": \"5e3ec79625d388dbcc03dcf4a6dc4548644eb99d58864cf8eee2252dcfc0cc9f\",\n      \"EndpointID\": \"8caf93c862b22f379b60515975acf96f7b54b7cf0ba0fb4a33cf18ae9e5c1d89\",\n      \"Gateway\": \"172.16.86.1\",\n      \"IPAddress\": \"172.16.86.2\",\n      \"IPPrefixLen\": 24,\n      \"IPv6Gateway\": \"\",\n      \"GlobalIPv6Address\": \"\",\n      \"GlobalIPv6PrefixLen\": 0,\n      \"MacAddress\": \"02:42:ac:10:56:02\",\n      \"DriverOpts\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation with Hello-World Container\nDESCRIPTION: Command to verify that Docker Engine is correctly installed by running the hello-world test image in a container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/sles.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Agent in Docker Compose\nDESCRIPTION: Docker Compose YAML configuration for the Datadog agent, highlighting the environment variables that need to be customized (DD_API_KEY and DD_SITE) and volume mounts for Docker socket access and configuration files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/metrics-exporter.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n  datadog-agent:\n    container_name: datadog-agent\n    image: gcr.io/datadoghq/agent:7\n    environment:\n      - DD_API_KEY=${DD_API_KEY} # e.g. 1b6b3a42...\n      - DD_SITE=${DD_SITE} # e.g. datadoghq.com\n      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./conf.yaml:/etc/datadog-agent/conf.d/openmetrics.d/conf.yaml:ro\n      - ./token:/var/run/secrets/scout-metrics-exporter/token:ro\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker Desktop Extension\nDESCRIPTION: Command to completely remove an extension from Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/test-debug.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension rm <name-of-your-extension>\n```\n\n----------------------------------------\n\nTITLE: Basic Dockerfile for Installing Zscaler Certificate in Debian\nDESCRIPTION: Demonstrates how to copy a Zscaler root certificate into a Debian-based Docker image and update the system's certificate store to trust it.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/zscaler/index.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian:bookworm\nCOPY zscaler-root-ca.crt /usr/local/share/ca-certificates/zscaler-root-ca.crt\nRUN apt-get update && \\\n    apt-get install -y ca-certificates && \\\n    update-ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Pruning Unused Docker Volumes\nDESCRIPTION: This command removes all volumes not used by at least one container. It prompts for confirmation before deletion to prevent accidental data loss.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker volume prune\n\nWARNING! This will remove all volumes not used by at least one container.\nAre you sure you want to continue? [y/N] y\n```\n\n----------------------------------------\n\nTITLE: Installing gnome-terminal for Docker Desktop on Debian\nDESCRIPTION: Command to install gnome-terminal, which is required for terminal access from Docker Desktop when not using GNOME as the desktop environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/debian.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install gnome-terminal\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies in requirements.txt\nDESCRIPTION: Required Python packages specification for the text classification application, focusing on nltk and scikit-learn dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n# 01 sentiment_analysis\nnltk==3.6.5\n\n...\n\n# 03 text_classification\nscikit-learn==1.3.2\n\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Database Password File for Docker Compose\nDESCRIPTION: Creates a password file for the PostgreSQL database that will be used as a secret in the Docker Compose configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nmysecretpassword\n```\n\n----------------------------------------\n\nTITLE: Docker Default Address Pool Configuration\nDESCRIPTION: JSON configuration showing default address pools including both IPv4 and IPv6 ranges for dynamic allocation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/ipv6.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-address-pools\": [\n    { \"base\": \"172.17.0.0/16\", \"size\": 16 },\n    { \"base\": \"172.18.0.0/16\", \"size\": 16 },\n    { \"base\": \"172.19.0.0/16\", \"size\": 16 },\n    { \"base\": \"172.20.0.0/14\", \"size\": 16 },\n    { \"base\": \"172.24.0.0/14\", \"size\": 16 },\n    { \"base\": \"172.28.0.0/14\", \"size\": 16 },\n    { \"base\": \"192.168.0.0/16\", \"size\": 20 }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-address-pools\": [\n    { \"base\": \"172.17.0.0/16\", \"size\": 16 },\n    { \"base\": \"172.18.0.0/16\", \"size\": 16 },\n    { \"base\": \"172.19.0.0/16\", \"size\": 16 },\n    { \"base\": \"172.20.0.0/14\", \"size\": 16 },\n    { \"base\": \"172.24.0.0/14\", \"size\": 16 },\n    { \"base\": \"172.28.0.0/14\", \"size\": 16 },\n    { \"base\": \"192.168.0.0/16\", \"size\": 20 },\n    { \"base\": \"2001:db8::/56\", \"size\": 64 }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Launching BuildKit Daemon with Unix Socket\nDESCRIPTION: Command to start a BuildKit daemon instance that listens on a Unix socket with specific group permissions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/remote.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ./buildkitd --group $(id -gn) --addr unix://$HOME/buildkitd.sock\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Relative WORKDIR Path\nDESCRIPTION: Example showing problematic implementation where relative WORKDIR path is used without first establishing an absolute path. This approach is vulnerable to breaking if the base image's working directory changes.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/workdir-relative-path.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM nginx AS web\nWORKDIR usr/share/nginx/html\nCOPY public .\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Build\nDESCRIPTION: Command to build and run the containerized R application using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/containerize.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Unlocking a Locked Docker Swarm\nDESCRIPTION: Shows the process of unlocking a locked swarm using the docker swarm unlock command, which prompts for the unlock key that was generated when the swarm was locked.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm_manager_locking.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm unlock\n\nPlease enter unlock key:\n```\n\n----------------------------------------\n\nTITLE: Switching to Default Docker Context on Linux\nDESCRIPTION: Command to switch to the default Docker context, which typically points to the Docker Engine installation on Linux systems rather than Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker context use default\ndefault\nCurrent context is now \"default\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Container Capabilities with Docker Run\nDESCRIPTION: Demonstrates how to add or drop Linux capabilities for containers using the --cap-add and --cap-drop flags to fine-tune container permissions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n--cap-add --cap-drop\n```\n\n----------------------------------------\n\nTITLE: ECR Compatible Cache Configuration\nDESCRIPTION: Example of configuring cache for ECR compatibility using image manifest instead of image index\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/_index.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=registry,ref=<registry>/<cache-image>,oci-mediatypes=true,image-manifest=true \\\n  --cache-from type=registry,ref=<registry>/<cache-image> .\n```\n\n----------------------------------------\n\nTITLE: Conditional Docker Scout Scanning Based on Branch Context\nDESCRIPTION: Implements conditional Docker image building and vulnerability scanning logic that varies based on whether the commit is to the default branch or a feature branch. It performs CVE reporting or comparative analysis accordingly.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/ci/gitlab.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscript:\n  - |\n    if [[ \"$CI_COMMIT_BRANCH\" == \"$CI_DEFAULT_BRANCH\" ]]; then\n      tag=\"\"\n      echo \"Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'\"\n    else\n      tag=\":$CI_COMMIT_REF_SLUG\"\n      echo \"Running on branch '$CI_COMMIT_BRANCH': tag = $tag\"\n    fi\n  - docker build --pull -t \"$CI_REGISTRY_IMAGE${tag}\" .\n  - |\n    if [[ \"$CI_COMMIT_BRANCH\" == \"$CI_DEFAULT_BRANCH\" ]]; then\n      # Get a CVE report for the built image and fail the pipeline when critical or high CVEs are detected\n      docker scout cves \"$CI_REGISTRY_IMAGE${tag}\" --exit-code --only-severity critical,high    \n    else\n      # Compare image from branch with latest image from the default branch and fail if new critical or high CVEs are detected\n      docker scout compare \"$CI_REGISTRY_IMAGE${tag}\" --to \"$CI_REGISTRY_IMAGE:latest\" --exit-code --only-severity critical,high --ignore-unchanged\n    fi\n\n  - docker push \"$CI_REGISTRY_IMAGE${tag}\"\n```\n\n----------------------------------------\n\nTITLE: Witnessing a Delegation with Notary CLI\nDESCRIPTION: This command uses the Notary CLI to resign the targets/releases delegation file, which is needed when there are no valid signatures in the targets/releases.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ notary witness registry.example.com/admin/demo targets/releases --publish\n```\n\n----------------------------------------\n\nTITLE: Include Directive with Variable Interpolation (Text)\nDESCRIPTION: Shows how to use interpolated variables with the include directive, specifying mandatory variables using the syntax to check if a variable is set.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/include.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ninclude:\n  -${INCLUDE_PATH:?FOO}/compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating an Ubuntu Base Image Using Debootstrap\nDESCRIPTION: This script demonstrates how to create an Ubuntu base image using Debootstrap. It creates a minimal Ubuntu system, packages it as a tar file, imports it into Docker, and then verifies the created image by running a container and checking its version information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/base-images.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo debootstrap focal focal > /dev/null\n$ sudo tar -C focal -c . | docker import - focal\n\nsha256:81ec9a55a92a5618161f68ae691d092bf14d700129093158297b3d01593f4ee3\n\n$ docker run focal cat /etc/lsb-release\n\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=20.04\nDISTRIB_CODENAME=focal\nDISTRIB_DESCRIPTION=\"Ubuntu 20.04 LTS\"\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing an Image with Kubernetes Builder\nDESCRIPTION: Command to build and push a Docker image using the Kubernetes driver for Buildx, specifying the builder name with the --builder flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n# Replace <registry> with your Docker username\n# and <image> with the name of the image you want to build\ndocker buildx build \\\n  --builder=kube \\\n  -t <registry>/<image> \\\n  --push .\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Architecture Images with QEMU in Kubernetes\nDESCRIPTION: Example of using Docker Buildx with the Kubernetes driver to build Linux images for multiple architectures (amd64 and arm64) using QEMU emulation, with the --push flag to push the resulting images to a registry.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build \\\n  --builder=kube \\\n  --platform=linux/amd64,linux/arm64 \\\n  -t <user>/<image> \\\n  --push .\n```\n\n----------------------------------------\n\nTITLE: Docker Rootless Setup Script\nDESCRIPTION: Introduction of setup tool script for configuring rootless Docker mode.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/20.10.md#2025-04-11_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndockerd-rootless-setuptool.sh\n```\n\n----------------------------------------\n\nTITLE: Setting resource constraints in Compose Deploy\nDESCRIPTION: Shows how to configure CPU, memory, and process limits for a service. Includes both hard limits and resource reservations to guarantee minimal resources.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    deploy:\n      resources:\n        limits:\n          cpus: '0.50'\n          memory: 50M\n          pids: 1\n        reservations:\n          cpus: '0.25'\n          memory: 20M\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Docker Network\nDESCRIPTION: Shows detailed information about the 'alpine-net' network, including its IP address range and connected containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker network inspect alpine-net\n\n[\n    {\n        \"Name\": \"alpine-net\",\n        \"Id\": \"e9261a8c9a19eabf2bf1488bf5f208b99b1608f330cff585c273d39481c9b0ec\",\n        \"Created\": \"2017-09-25T21:38:12.620046142Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": {},\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.18.0.0/16\",\n                    \"Gateway\": \"172.18.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Containers\": {},\n        \"Options\": {},\n        \"Labels\": {}\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Builder with Default Load Option\nDESCRIPTION: Command to create a new builder instance with the default-load option enabled for automatically loading images to local store.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx create --driver-opt default-load=true\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting Docker Service on SLES\nDESCRIPTION: Command to enable Docker to start automatically on system boot and start the service immediately.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/sles.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl enable --now docker\n```\n\n----------------------------------------\n\nTITLE: Executing Docker Commands with JSON Output\nDESCRIPTION: Example of executing a Docker CLI command that returns JSON-formatted output. The example shows how to use the exec method and includes information about parsing the result.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/docker.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await ddClient.docker.cli.exec(\"info\", [\n  \"--format\",\n  '\"{{ json . }}\"',\n]);\n```\n\n----------------------------------------\n\nTITLE: Viewing Network Interfaces Inside a Container\nDESCRIPTION: This command shows network interfaces from within the container, displaying the loopback interface and the eth0 interface with its assigned IP address (172.17.0.2) on the bridge network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# ip addr show\n\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n27: eth0@if28: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state UP\n    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff\n    inet 172.17.0.2/16 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::42:acff:fe11:2/64 scope link\n       valid_lft forever preferred_lft forever\n```\n\n----------------------------------------\n\nTITLE: Updating Kubeconfig in Extension Backend using TypeScript\nDESCRIPTION: Retrieves and stores kubeconfig content by sending it to the extension's backend container via HTTP POST.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/guides/kubernetes.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const updateKubeconfig = async () => {\n  const kubeConfig = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n    \"config\",\n    \"view\",\n    \"--raw\",\n    \"--minify\",\n    \"--context\",\n    \"docker-desktop\",\n  ]);\n  if (kubeConfig?.stderr) {\n    console.log(\"error\", kubeConfig?.stderr);\n    return false;\n  }\n\n  // call backend container to store the kubeconfig retrieved into the container's memory or filesystem\n  try {\n    await ddClient.extension.vm?.service?.post(\"/store-kube-config\", {\n      data: kubeConfig?.stdout,\n    });\n  } catch (err) {\n    console.log(\"error\", JSON.stringify(err));\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: PHP-CLI Production Dockerfile Configuration\nDESCRIPTION: Multi-stage Dockerfile for PHP-CLI container used for running Artisan commands and other CLI tasks in production environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Stage 1: Build environment and Composer dependencies\nFROM php:8.3-cli AS builder\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    curl \\\n    unzip \\\n    libpq-dev \\\n    libonig-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libcurl4-openssl-dev \\\n    libicu-dev \\\n    libzip-dev \\\n    && docker-php-ext-install -j$(nproc) \\\n    pdo_mysql \\\n    pdo_pgsql \\\n    pgsql \\\n    opcache \\\n    intl \\\n    zip \\\n    bcmath \\\n    soap \\\n    && pecl install redis \\\n    && docker-php-ext-enable redis \\\n    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nWORKDIR /var/www\n\nCOPY . /var/www\n\nRUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \\\n    && composer install --no-dev --optimize-autoloader --no-interaction --no-progress --prefer-dist\n\n# Stage 2: Production environment\nFROM php:8.3-cli\n\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    libpq-dev \\\n    libicu-dev \\\n    libzip-dev \\\n    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\nCOPY --from=builder /usr/local/lib/php/extensions/ /usr/local/lib/php/extensions/\nCOPY --from=builder /usr/local/etc/php/conf.d/ /usr/local/etc/php/conf.d/\nCOPY --from=builder /usr/local/bin/docker-php-ext-* /usr/local/bin/\n\nRUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"\n\nCOPY --from=builder /var/www /var/www\n\nWORKDIR /var/www\n\nRUN chown -R www-data:www-data /var/www\n\nUSER www-data\n\nCMD [\"bash\"]\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Seccomp Profile Disabled\nDESCRIPTION: This command demonstrates how to run a Docker container with the seccomp profile set to 'unconfined', which disables the default seccomp restrictions. It launches a Debian container and executes the 'unshare' command with user namespace mapping, which would normally be blocked by the default seccomp profile.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/seccomp.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it --security-opt seccomp=unconfined debian:latest \\\n    unshare --map-root-user --user sh -c whoami\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Daemon After Network Configuration\nDESCRIPTION: Command to restart the Docker daemon after updating network configuration. This ensures Docker properly recognizes the network configuration changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Container Entrypoint\nDESCRIPTION: Defines the entrypoint.sh script as the default executable when the Docker container starts.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_14\n\nLANGUAGE: dockerfile\nCODE:\n```\nENTRYPOINT [\"/app/entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Gateway Priority for Container Networks\nDESCRIPTION: This snippet shows how to set gateway priority when connecting a container to multiple networks. The network with highest gw-priority (here, gwnet with priority 1) becomes the default gateway for routing.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --network name=gwnet,gw-priority=1 --network anet1 --name myctr myimage\n$ docker network connect anet2 myctr\n```\n\n----------------------------------------\n\nTITLE: Using Docker Secrets with Windows IIS Service\nDESCRIPTION: This example shows how to use secrets with a Microsoft IIS service running on Windows containers. It creates an HTML page secret and deploys it to an IIS service for serving web content, demonstrating secrets usage in a Windows environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\">\n  <head><title>Hello Docker</title></head>\n  <body>\n    <p>Hello Docker! You have deployed a HTML page.</p>\n  </body>\n</html>\n```\n\nLANGUAGE: console\nCODE:\n```\n> docker swarm init\n```\n\nLANGUAGE: console\nCODE:\n```\n> docker secret create homepage index.html\n```\n\nLANGUAGE: console\nCODE:\n```\n> docker service create `\n    --name my-iis `\n    --publish published=8000,target=8000 `\n    --secret src=homepage,target=\"\\inetpub\\wwwroot\\index.html\" `\n    microsoft/iis:nanoserver\n```\n\nLANGUAGE: console\nCODE:\n```\n> docker service rm my-iis\n> docker secret rm homepage\n> docker image remove secret-test\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Contact URL in JSON\nDESCRIPTION: JSON configuration example for setting up administrator contact information in the private marketplace\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/private-marketplace.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"extensionsPrivateMarketplaceAdminContactURL\": {\n  \"locked\": true,\n  \"value\": \"mailto:admin@acme.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Healthcheck\nDESCRIPTION: Comprehensive configuration of container healthcheck including test command, intervals, timeouts, and retry settings for monitoring container health.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"]\n  interval: 1m30s\n  timeout: 10s\n  retries: 3\n  start_period: 40s\n  start_interval: 5s\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for NLP Application\nDESCRIPTION: Command to build a Docker image tagged as 'basic-nlp' from a Dockerfile in the current directory. The command processes the Dockerfile and creates a container image with all required dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t basic-nlp .\n```\n\n----------------------------------------\n\nTITLE: Building and pushing multi-architecture Docker extensions\nDESCRIPTION: Command for building a Docker extension for multiple architectures (linux/amd64 and linux/arm64) and pushing it to Docker Hub using make.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/multi-arch.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ make push-extension\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Service with Access to a Config\nDESCRIPTION: Creates a Redis service and grants it access to the previously created config. By default, the config will be mounted at /my-config in the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker service create --name redis --config my-config redis:alpine\n```\n\n----------------------------------------\n\nTITLE: Creating an IPvlan Network with VLAN ID 20\nDESCRIPTION: Creates a Docker IPvlan network on VLAN ID 20 with specified subnet and gateway, then demonstrates running containers on this network. The network is created with the parent interface tagged with VLAN ID 20.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# now add networks and hosts as you would normally by attaching to the master (sub)interface that is tagged\n$ docker network create -d ipvlan \\\n    --subnet=192.168.20.0/24 \\\n    --gateway=192.168.20.1 \\\n    -o parent=eth0.20 ipvlan20\n\n# in two separate terminals, start a Docker container and the containers can now ping one another.\n$ docker run --net=ipvlan20 -it --name ivlan_test1 --rm alpine /bin/sh\n$ docker run --net=ipvlan20 -it --name ivlan_test2 --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Nginx Service in Docker Swarm\nDESCRIPTION: Creates a single-replica Nginx service with a randomly-generated name and no published ports. This is a minimal example that demonstrates the simplest way to create a service.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create nginx\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing to Custom Registry with Certificates\nDESCRIPTION: Builds a Docker image and pushes it to the custom registry using the configured certificates for authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/configure.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build --push --tag myregistry.com/myimage:latest .\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Updating Docker Hub Description\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow that builds and pushes a Docker image, then updates the Docker Hub repository description. It uses various actions including docker/login-action, docker/setup-qemu-action, docker/setup-buildx-action, docker/build-push-action, and peter-evans/dockerhub-description.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/update-dockerhub-desc.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: user/app:latest\n\n      - name: Update repo description\n        uses: peter-evans/dockerhub-description@e98e4d1628a5f3be2be7c231e50981aee98723ae # v4.0.0\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n          repository: user/app\n```\n\n----------------------------------------\n\nTITLE: Using Bind Mount with RUN for Temporary Files\nDESCRIPTION: Example of using a bind mount with RUN to temporarily add files from the build context to the container for command execution without persisting them in the final image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_23\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=bind,source=requirements.txt,target=/tmp/requirements.txt \\\n    pip install --requirement /tmp/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Build Target in Docker Compose\nDESCRIPTION: Demonstrates how to specify the build target stage for multi-stage Dockerfiles in Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  target: prod\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.List Request Format\nDESCRIPTION: JSON format for the List request in the volume plugin protocol. This endpoint retrieves a list of all volumes registered with the plugin.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Creating IPv6 Network in Docker\nDESCRIPTION: Commands for creating a Docker network with IPv6 support, including basic network creation and subnet specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/ipv6.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create --ipv6 ip6net\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create --ipv6 --subnet 2001:db8::/64 ip6net\n```\n\n----------------------------------------\n\nTITLE: Rotating the Docker Swarm Unlock Key\nDESCRIPTION: Shows how to rotate the unlock key for a locked swarm using the --rotate flag, which is a recommended security practice to perform regularly.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm_manager_locking.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm unlock-key --rotate\n\nSuccessfully rotated manager unlock key.\n\nTo unlock a swarm manager after it restarts, run the `docker swarm unlock`\ncommand and provide the following key:\n\n    SWMKEY-1-8jDgbUNlJtUe5P/lcr9IXGVxqZpZUXPzd+qzcGp4ZYA\n\nPlease remember to store this key in a password manager, since without it you\nwill not be able to restart the manager.\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Service to Add Published Port\nDESCRIPTION: Command to update an existing Docker Swarm service to add a published port, allowing external access to the service through the routing mesh.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker service update \\\n  --publish-add published=<PUBLISHED-PORT>,target=<CONTAINER-PORT> \\\n  <SERVICE>\n```\n\n----------------------------------------\n\nTITLE: Complex Service Extension Example\nDESCRIPTION: Advanced example showing service extension both from another file and within the same file, with local configuration overrides.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/extends.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    extends:\n      file: common-services.yml\n      service: webapp\n    environment:\n      - DEBUG=1\n    cpu_shares: 5\n\n  important_web:\n    extends: web\n    cpu_shares: 10\n```\n\n----------------------------------------\n\nTITLE: Attaching Container to Overlay Network\nDESCRIPTION: Demonstrates how to connect a busybox container to an existing overlay network named multi-host-network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/overlay.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --network multi-host-network busybox sh\n```\n\n----------------------------------------\n\nTITLE: Using Target Output as Build Context in Docker Bake\nDESCRIPTION: Configuration showing how to use the output of one build target as a build context for another target by using the 'target:' prefix in the contexts map.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/contexts.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM scratch\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM baseapp\nRUN echo \"Hello world\"\n```\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"base\" {\n  dockerfile = \"baseapp.Dockerfile\"\n}\n\ntarget \"app\" {\n  contexts = {\n    baseapp = \"target:base\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker to Use Btrfs Storage Driver\nDESCRIPTION: JSON configuration for Docker daemon to specify Btrfs as the storage driver. This must be added to the daemon.json file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/btrfs-driver.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storage-driver\": \"btrfs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Service Details in JSON Format with Docker CLI\nDESCRIPTION: Demonstrates how to retrieve detailed service information in JSON format using the docker service inspect command without the --pretty flag. Shows the complete configuration including task templates, restart policies, and endpoint specifications.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/inspect-service.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n[manager1]$ docker service inspect helloworld\n[\n{\n    \"ID\": \"9uk4639qpg7npwf3fn2aasksr\",\n    \"Version\": {\n        \"Index\": 418\n    },\n    \"CreatedAt\": \"2016-06-16T21:57:11.622222327Z\",\n    \"UpdatedAt\": \"2016-06-16T21:57:11.622222327Z\",\n    \"Spec\": {\n        \"Name\": \"helloworld\",\n        \"TaskTemplate\": {\n            \"ContainerSpec\": {\n                \"Image\": \"alpine\",\n                \"Args\": [\n                    \"ping\",\n                    \"docker.com\"\n                ]\n            },\n            \"Resources\": {\n                \"Limits\": {},\n                \"Reservations\": {}\n            },\n            \"RestartPolicy\": {\n                \"Condition\": \"any\",\n                \"MaxAttempts\": 0\n            },\n            \"Placement\": {}\n        },\n        \"Mode\": {\n            \"Replicated\": {\n                \"Replicas\": 1\n            }\n        },\n        \"UpdateConfig\": {\n            \"Parallelism\": 1\n        },\n        \"EndpointSpec\": {\n            \"Mode\": \"vip\"\n        }\n    },\n    \"Endpoint\": {\n        \"Spec\": {}\n    }\n}\n]\n```\n\n----------------------------------------\n\nTITLE: Node.js Application Output\nDESCRIPTION: Console output showing the Node.js application has started successfully and is configured to use the WireMock endpoint.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n> express-api-starter@1.2.0 start\n> node src/index.js\n\nAPI_ENDPOINT_BASE: http://localhost:8080\n..\nListening: http://localhost:5001\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with Ollama Container for GPU Access\nDESCRIPTION: This YAML snippet shows how to add an Ollama service to the Docker Compose configuration with GPU access. It includes volume configuration and device reservations for NVIDIA GPUs.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 8000:8000\n    env_file:\n      - .env\n    depends_on:\n      database:\n        condition: service_healthy\n  database:\n    image: neo4j:5.11\n    ports:\n      - \"7474:7474\"\n      - \"7687:7687\"\n    environment:\n      - NEO4J_AUTH=${NEO4J_USERNAME}/${NEO4J_PASSWORD}\n    healthcheck:\n      test:\n        [\n          \"CMD-SHELL\",\n          \"wget --no-verbose --tries=1 --spider localhost:7474 || exit 1\",\n        ]\n      interval: 5s\n      timeout: 3s\n      retries: 5\n  ollama:\n    image: ollama/ollama:latest\n    ports:\n      - \"11434:11434\"\n    volumes:\n      - ollama_volume:/root/.ollama\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - driver: nvidia\n              count: all\n              capabilities: [gpu]\nvolumes:\n  ollama_volume:\n```\n\n----------------------------------------\n\nTITLE: Cloning R Application Repository\nDESCRIPTION: Command to clone the sample R application repository and change into its directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/mfranzon/r-docker-dev.git && cd r-docker-dev\n```\n\n----------------------------------------\n\nTITLE: Setting Build Arguments as a List\nDESCRIPTION: Example of setting build arguments as a list with explicit values in the build configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  args:\n    - GIT_COMMIT=cdc3b19\n```\n\n----------------------------------------\n\nTITLE: Adding Detach Option to Docker Scale Command\nDESCRIPTION: Introduces a new --detach flag for the docker scale command, allowing users to scale services in detached mode.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.07.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n+ Add `--detach` to docker scale [docker/cli#243](https://github.com/docker/cli/pull/243)\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for RHEL 9\nDESCRIPTION: Commands to enable CodeReady Linux Builder repository and install EPEL and pass package on RHEL 9\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/rhel.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo subscription-manager repos --enable codeready-builder-for-rhel-9-$(arch)-rpms\n$ sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm\n$ sudo dnf install pass\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Compose via Package Manager on RPM-based Distributions\nDESCRIPTION: Commands to update package index and install the Docker Compose plugin on RPM-based distributions like CentOS, Fedora, and RHEL using yum.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo yum update\n$ sudo yum install docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Project in Project Harmonia\nDESCRIPTION: This command stops and removes the running Docker Compose project in the cloud engine. It demonstrates how to clean up resources in the cloud environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Deployments\nDESCRIPTION: This command lists all deployments in the Kubernetes cluster to verify that the bb-demo deployment was created successfully and is ready. The output shows that the deployment has 1/1 pods running as specified.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kube-deploy.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl get deployments\n```\n\n----------------------------------------\n\nTITLE: Installing Frontend Dependencies\nDESCRIPTION: Command to install required Node.js dependencies for the frontend application using npm.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Removing Rootless Docker Binaries\nDESCRIPTION: Command to remove Docker binary files from the user's bin directory when Docker was installed using the rootless installation script rather than through package managers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/bin\n$ rm -f containerd containerd-shim containerd-shim-runc-v2 ctr docker docker-init docker-proxy dockerd dockerd-rootless-setuptool.sh dockerd-rootless.sh rootlesskit rootlesskit-docker-proxy runc vpnkit\n```\n\n----------------------------------------\n\nTITLE: Running a JupyterLab Image from Docker Hub\nDESCRIPTION: Command to run a JupyterLab image that has been shared on Docker Hub. Users need to specify the correct Docker Hub username to access the shared image.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -p 8889:8888 YOUR-USER-NAME/my-jupyter-image start-notebook.py --NotebookApp.token='my-token'\n```\n\n----------------------------------------\n\nTITLE: Docker Extensions Configuration File Path\nDESCRIPTION: JSON configuration file locations for Docker Desktop settings store. Contains extension settings and configurations for both Mac and Windows platforms.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/settings-feedback.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extensionsEnabled\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Repository to GitHub\nDESCRIPTION: Series of Git commands to stage all changes, commit them, and push the local repository to the main branch on GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/configure-ci-cd.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ git add -A\n$ git commit -m \"my commit\"\n$ git push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Node.js Application Response with Mocked Data\nDESCRIPTION: JSON response from the Node.js application that shows the mocked weather data provided by WireMock.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n{\"city\":\"Bengaluru\",\"temperature\":27.1,\"conditions\":\"Mostly cloudy\",\"forecasts\":[{\"date\":\"2024-09-02T07:00:00+05:30\",\"temperature\":83,\"conditions\":\"Partly sunny w/ t-storms\"},{\"date\":\"2024-09-03T07:00:00+05:30\",\"temperature\":83,\"conditions\":\"Thunderstorms\"},{\"date\":\"2024-09-04T07:00:00+05:30\",\"temperature\":83,\"conditions\":\"Intermittent clouds\"},{\"date\":\"2024-09-05T07:00:00+05:30\",\"temperature\":82,\"conditions\":\"Dreary\"},{\"date\":\"2024-09-06T07:00:00+05:30\",\"temperature\":82,\"conditions\":\"Dreary\"}]}%\n```\n\n----------------------------------------\n\nTITLE: Manually uninstalling Docker Compose CLI plugin\nDESCRIPTION: This command removes a manually installed Docker Compose CLI plugin from the user-specific Docker configuration directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/uninstall.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ rm $DOCKER_CONFIG/cli-plugins/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Docker Compose IPv6 Network Configuration\nDESCRIPTION: YAML configuration for enabling IPv6 in a Docker Compose network with subnet specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/ipv6.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n networks:\n   ip6net:\n     enable_ipv6: true\n     ipam:\n       config:\n         - subnet: 2001:db8::/64\n```\n\n----------------------------------------\n\nTITLE: Systemd Combined HTTP/HTTPS Proxy Configuration\nDESCRIPTION: Systemd service configuration combining both HTTP and HTTPS proxy settings for the Docker daemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/proxy.md#2025-04-11_snippet_4\n\nLANGUAGE: systemd\nCODE:\n```\n[Service]\nEnvironment=\"HTTP_PROXY=http://proxy.example.com:3128\"\nEnvironment=\"HTTPS_PROXY=https://proxy.example.com:3129\"\n```\n\n----------------------------------------\n\nTITLE: Docker Dev Version Command\nDESCRIPTION: Displays Docker Dev version information with options for formatting and showing only the version number.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/dev-cli.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker dev version [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a Container from a User-Defined Bridge Network in Docker\nDESCRIPTION: Uses the docker network disconnect command to remove a container from a network. This stops the container from communicating with other containers on that network while keeping it running.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker network disconnect my-net my-nginx\n```\n\n----------------------------------------\n\nTITLE: Inspecting Container Runtime for Enhanced Container Isolation\nDESCRIPTION: Console command to determine if a container is running with Enhanced Container Isolation by checking its runtime. The output 'sysbox-runc' indicates that ECI is enabled.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker inspect --format='{{.HostConfig.Runtime}}' my_container\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with Watch Mode\nDESCRIPTION: An updated Docker Compose configuration that adds Compose Watch functionality. This enables automatic rebuilding of services when source code changes, providing a smoother development experience.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 8001:8001\n    environment:\n      - POSTGRES_SERVER=db\n      - POSTGRES_USER=postgres\n      - POSTGRES_DB=example\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    depends_on:\n      db:\n        condition: service_healthy\n    secrets:\n      - db-password\n    develop:\n      watch:\n        - action: rebuild\n          path: .\n  db:\n    image: postgres\n    restart: always\n    user: postgres\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=example\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    expose:\n      - 5432\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Common Service Configuration Definition\nDESCRIPTION: Example of a common service configuration that can be extended by other services, defining basic service attributes like build, ports, and volumes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/extends.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    build: .\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - \"/data\"\n```\n\n----------------------------------------\n\nTITLE: Adding Non-Root User to Dockerfile\nDESCRIPTION: Diff showing how to modify the Dockerfile to add a non-root user, improving security and compliance with the 'Default non-root user' policy.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n  CMD [\"node\",\"/app/app.js\"]\n  EXPOSE 3000\n+ USER appuser\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink for Docker Index on macOS\nDESCRIPTION: Command to create a symlink to fix an installer issue for the experimental vulnerability and package discovery feature on macOS.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /Applications/Docker.app/Contents/Resources/bin/docker-index /usr/local/bin/docker-index\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Credentials in Systemd Service\nDESCRIPTION: Example of setting the GOOGLE_APPLICATION_CREDENTIALS environment variable in a systemd service file for Docker to authenticate with Google Cloud.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/gcplogs.md#2025-04-11_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nEnvironment=\"GOOGLE_APPLICATION_CREDENTIALS=uQWVCPkMTI34bpssr1HI\"\n```\n\n----------------------------------------\n\nTITLE: Defining Qdrant Vector Database Service in Docker Compose\nDESCRIPTION: This YAML configuration sets up a Qdrant vector database container with port 6333 exposed and persistent storage using a named volume.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rag-ollama/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  qdrant:\n    image: qdrant/qdrant\n    container_name: qdrant\n    ports:\n      - \"6333:6333\"\n    volumes:\n      - qdrant_data:/qdrant/storage\n```\n\n----------------------------------------\n\nTITLE: Combining Local and Remote Bake Definitions\nDESCRIPTION: Console command that demonstrates how to combine a remote Bake definition with a local one using the '-f' flag with both a repository-relative path and a 'cwd://' prefixed local path.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ndocker buildx bake -f bake.hcl -f cwd://local.hcl \"https://github.com/crazy-max/buildx.git#remote-with-local\" --print\n```\n\n----------------------------------------\n\nTITLE: Building the Web Application Docker Image\nDESCRIPTION: This command builds a Docker image named 'web' from the Dockerfile in the current directory (web subdirectory). This image contains the Node.js application that connects to Redis for counting visits.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t web .\n```\n\n----------------------------------------\n\nTITLE: Running Wasm Application with Docker Run\nDESCRIPTION: This snippet demonstrates how to run a Wasm container using the docker run command. It specifies the Wasm runtime and platform.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/wasm.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n  --runtime=io.containerd.wasmedge.v1 \\\n  --platform=wasi/wasm \\\n  secondstate/rust-example-hello\n```\n\n----------------------------------------\n\nTITLE: Running a Container with a Block Device Volume\nDESCRIPTION: This command runs a Docker container that mounts a loop device as a volume, demonstrating how to use block storage devices with containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -it --rm \\\n     --mount='type=volume,dst=/external-drive,volume-driver=local,volume-opt=device=/dev/loop5,volume-opt=type=ext4' \\\n     ubuntu bash\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Model Runner Status\nDESCRIPTION: Command to check whether the Docker Model Runner is active using the Docker CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker model status\n```\n\n----------------------------------------\n\nTITLE: HTML Comment About Documentation Generation Process\nDESCRIPTION: HTML comment explaining that the documentation page is automatically generated from Docker's source code and providing information on how to suggest changes to the content through GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/node/ls.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Creating tmpfs Mount with --tmpfs Flag in Nginx Container\nDESCRIPTION: Shows how to create a tmpfs mount at /app in an Nginx container using the --tmpfs flag, along with verification using docker inspect.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/tmpfs.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d \\\n  -it \\\n  --name tmptest \\\n  --tmpfs /app \\\n  nginx:latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect tmptest --format '{{ json .Mounts }}'\n{\"/app\":\"\"}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Image Manifest Annotations with Buildx\nDESCRIPTION: This command demonstrates how to inspect annotations on a specific manifest by providing the manifest digest with the docker buildx imagetools inspect command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/annotations.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx imagetools inspect <IMAGE>@sha256:d20246ef744b1d05a1dd69d0b3fa907db007c07f79fe3e68c17223439be9fefb --raw\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n    \"digest\": \"sha256:4368b6959a78b412efa083c5506c4887e251f1484ccc9f0af5c406d8f76ece1d\",\n    \"size\": 850\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.oci.image.layer.v1.tar+gzip\",\n      \"digest\": \"sha256:2c03dbb20264f09924f9eab176da44e5421e74a78b09531d3c63448a7baa7c59\",\n      \"size\": 3333033\n    },\n    {\n      \"mediaType\": \"application/vnd.oci.image.layer.v1.tar+gzip\",\n      \"digest\": \"sha256:4923ad480d60a548e9b334ca492fa547a3ce8879676685b6718b085de5aaf142\",\n      \"size\": 61887305\n    }\n  ],\n  \"annotations\": {\n    \"index,manifest:org.opencontainers.image.vendor\": \"foocorp\",\n    \"org.opencontainers.image.source\": \"https://git.example/foo.git\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up test environment for Docker Desktop extension in TypeScript\nDESCRIPTION: This TypeScript code sets up the test environment by importing necessary modules, defining utility functions, and creating setup and teardown hooks for building and installing the extension before tests.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/continuous-integration.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DesktopUI } from \"@docker/extension-test-helper\";\nimport { exec as originalExec } from \"child_process\";\nimport * as util from \"util\";\n\nexport const exec = util.promisify(originalExec);\n\n// keep a handle on the app to stop it at the end of tests\nlet dashboard: DesktopUI;\n\nbeforeAll(async () => {\n  await exec(`docker build -t my/extension:latest .`, {\n    cwd: \"my-extension-src-root\",\n  });\n\n  await exec(`docker extension install -f my/extension:latest`);\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying JavaScript Database Seeding Results\nDESCRIPTION: Commands to connect to the PostgreSQL container and query the todos table to verify that the JavaScript seeding was successful.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -it postgres psql -h localhost -U postgres sampledb\n```\n\n----------------------------------------\n\nTITLE: Viewing /etc/hosts Entries in a Linked Docker Container\nDESCRIPTION: This snippet shows how to run a container linked to a database and view its /etc/hosts file. It demonstrates the automatic addition of host entries for the linked container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -t -i --rm --link db:webdb training/webapp /bin/bash\n\nroot@aed84ee21bde:/opt/webapp# cat /etc/hosts\n172.17.0.7  aed84ee21bde\n<...>\n172.17.0.5  webdb 6e5cdeb2d300 db\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Watch for Deno Development\nDESCRIPTION: Command to start Docker Compose with Watch enabled, which will automatically rebuild and restart the Deno application when code changes are detected.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose watch\n```\n\n----------------------------------------\n\nTITLE: Enabling cgroup v2 with Grubby\nDESCRIPTION: Use the 'grubby' command to enable cgroup v2 by modifying the kernel command line. This change requires a system reboot to take effect.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/runmetrics.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo grubby --update-kernel=ALL --args=\"systemd.unified_cgroup_hierarchy=1\"\n```\n\n----------------------------------------\n\nTITLE: Testing Docker Container with Fluentd Logging\nDESCRIPTION: Command to run a Docker container with the Fluentd logging driver for testing purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/fluentd.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --log-driver=fluentd your/application\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Access to All GPUs\nDESCRIPTION: Command to run an Ubuntu container with access to all available NVIDIA GPUs. This example uses the --gpus all flag to expose all GPUs and runs the nvidia-smi command to display GPU information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/resource_constraints.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm --gpus all ubuntu nvidia-smi\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Explicit Root User\nDESCRIPTION: Example of a non-compliant Dockerfile that explicitly sets the user to root, making it clear that running as root is intentional.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/policy/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM alpine\nUSER root\nRUN echo \"Hi\"\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Detailed GC Policy Configuration\nDESCRIPTION: Expanded garbage collection policy configuration showing default policy resolution for 20GB storage limit.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/garbage-collection.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"builder\": {\n    \"gc\": {\n      \"enabled\": true,\n      \"policy\": [\n        {\n          \"keepStorage\": \"2.764GB\",\n          \"filter\": [\n            \"unused-for=48h\",\n            \"type==source.local,type==exec.cachemount,type==source.git.checkout\"\n          ]\n        },\n        { \"keepStorage\": \"20GB\", \"filter\": [\"unused-for=1440h\"] },\n        { \"keepStorage\": \"20GB\" },\n        { \"keepStorage\": \"20GB\", \"all\": true }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Temporary Alpine Container\nDESCRIPTION: Runs an Alpine container that will be automatically removed after exit, used for testing network connectivity.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run -it --rm --name alpine3 --network test-net alpine\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH for Docker Compose Build\nDESCRIPTION: Shows how to define SSH authentications for image building in Docker Compose. Includes examples of using the default SSH agent and custom SSH keys.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  ssh:\n    - default   # mount the default SSH agent\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  ssh: [\"default\"]   # mount the default SSH agent\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  ssh:\n    - myproject=~/.ssh/myproject.pem\n```\n\n----------------------------------------\n\nTITLE: Creating TCP-only Service with Long Syntax\nDESCRIPTION: Command to create a DNS cache service that publishes TCP port 53 using the long syntax format for port publishing in Docker Swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name dns-cache \\\n  --publish published=53,target=53 \\\n  dns-cache\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Docker Build Cloud Integration\nDESCRIPTION: GitHub Actions workflow configuration for Docker Build Cloud integration. Sets up authentication, configures Buildx with cloud driver, and handles image building with push or cache-only output options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n    branches:\n      - \"main\"\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USER }}\n          password: ${{ secrets.DOCKER_PAT }}\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          driver: cloud\n          endpoint: \"<ORG>/default\"\n          install: true\n      \n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          tags: \"<IMAGE>\"\n          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}\n```\n\n----------------------------------------\n\nTITLE: Testing Privileged Container Access with Enhanced Isolation\nDESCRIPTION: Demonstrates how a privileged container with Enhanced Container Isolation cannot access Docker Desktop network settings in the Linux VM through BPF tools, receiving 'Operation not permitted' errors when attempting such operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --privileged djs55/bpftool map show\nError: can't get next map: Operation not permitted\n```\n\n----------------------------------------\n\nTITLE: Inline Config Content with Variable Interpolation\nDESCRIPTION: Creates an app_config using inline content with variable interpolation. Variables like DEBUG and COMPOSE_PROJECT_NAME are resolved during deployment.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/configs.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconfigs:\n  app_config:\n    content: |\n      debug=${DEBUG}\n      spring.application.admin.enabled=${DEBUG}\n      spring.application.name=${COMPOSE_PROJECT_NAME}\n```\n\n----------------------------------------\n\nTITLE: Creating Nginx Service with Docker Secrets (Symlink Method)\nDESCRIPTION: This command creates a Docker service for Nginx, granting access to the secrets and creating a symbolic link for the configuration file. It also publishes port 3000 to 443 internally.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n     --name nginx \\\n     --secret site.key \\\n     --secret site.crt \\\n     --secret site.conf \\\n     --publish published=3000,target=443 \\\n     nginx:latest \\\n     sh -c \"ln -s /run/secrets/site.conf /etc/nginx/conf.d/site.conf && exec nginx -g 'daemon off;'\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Logs in JSON Format\nDESCRIPTION: Command to retrieve container logs and output them in JSON format using journalctl with the -o json flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/journald.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo journalctl -o json CONTAINER_NAME=webserver\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variables for Docker Compose\nDESCRIPTION: A simple .env file that sets the PGPASSWORD environment variable used by Docker Compose for database authentication. This demonstrates using environment variables for sensitive configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nPGPASSWORD=whatever\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Group and Adding User for Non-Root Access in Linux\nDESCRIPTION: Commands to create a Docker group and add the current user to it, allowing Docker commands to be run without sudo. Includes steps for verifying the setup and fixing potential permission issues.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/linux-postinstall.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo groupadd docker\n```\n\nLANGUAGE: console\nCODE:\n```\n$ sudo usermod -aG docker $USER\n```\n\nLANGUAGE: console\nCODE:\n```\n$ newgrp docker\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run hello-world\n```\n\nLANGUAGE: console\nCODE:\n```\n$ sudo chown \"$USER\":\"$USER\" /home/\"$USER\"/.docker -R\n$ sudo chmod g+rwx \"$HOME/.docker\" -R\n```\n\n----------------------------------------\n\nTITLE: Checking port mappings with docker port command\nDESCRIPTION: Demonstrates how to check the current port mapping for a specific container port using the docker port command, showing that port 5000 is mapped to 127.0.0.1:49155.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker port nostalgic_morse 5000\n\n127.0.0.1:49155\n```\n\n----------------------------------------\n\nTITLE: Running JupyterLab with Docker Compose\nDESCRIPTION: Command to build and run the JupyterLab container using Docker Compose. The --build flag ensures the image is rebuilt if any changes were made to the Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Running the Docker Container\nDESCRIPTION: Command to run the containerized application in detached mode with port mapping from container port 3000 to localhost:3000.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/02_our_app.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d -p 127.0.0.1:3000:3000 getting-started\n```\n\n----------------------------------------\n\nTITLE: Setting Container Name in Docker Compose\nDESCRIPTION: Example of specifying a custom container name using the container_name directive.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncontainer_name: my-web-container\n```\n\n----------------------------------------\n\nTITLE: Running the C++ Application in Detached Mode\nDESCRIPTION: Build and run the C++ application container using Docker Compose in the background with the detached flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/containerize.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build -d\n```\n\n----------------------------------------\n\nTITLE: Creating an IPv6 IPvlan Network\nDESCRIPTION: Creates an IPvlan network with IPv6 addressing on a specific VLAN. This example demonstrates how to configure IPv6 subnet and gateway for containers, showcasing Docker's dual-stack networking capabilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n# Create a v6 network\n$ docker network create -d ipvlan \\\n    --ipv6 --subnet=2001:db8:abc2::/64 --gateway=2001:db8:abc2::22 \\\n    -o parent=eth0.139 v6ipvlan139\n\n# Start a container on the network\n$ docker run --net=v6ipvlan139 -it --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Connecting Docker Client to Remote Daemon Using TCP\nDESCRIPTION: Example of connecting the Docker client to a daemon listening on a specific TCP port using direct command-line specification.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker -H tcp://0.0.0.0:2375 ps\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop to Custom Location on Windows\nDESCRIPTION: Command line option to specify a custom installation directory for Docker Desktop on Windows.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_15\n\nLANGUAGE: batch\nCODE:\n```\n--installation-dir\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Container Logs Documentation\nDESCRIPTION: YAML frontmatter defining the metadata for the Docker container logs CLI documentation page. It specifies the data folder, file, title, and aliases for the command.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/logs.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_container_logs\ntitle: docker container logs\naliases:\n- /edge/engine/reference/commandline/container_logs/\n- /engine/reference/commandline/container_logs/\n- /engine/reference/commandline/logs/\n- /reference/cli/docker/logs/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies in Dockerfile\nDESCRIPTION: Installs required Python packages listed in requirements.txt without caching.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_15\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN pip install --no-cache-dir -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Bridge Network IP Binding in Docker Daemon\nDESCRIPTION: JSON configuration for the Docker daemon that sets the default binding address to 127.0.0.1 for the default bridge network. This configuration is placed in the daemon.json file and requires a daemon restart to take effect.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ip\": \"127.0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Hosts with Colon Separator\nDESCRIPTION: Alternative syntax for extra_hosts using colon as separator instead of equals sign, introduced in Docker Compose version 2.24.1.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nextra_hosts:\n  - \"somehost:162.242.195.82\"\n  - \"myhostv6:::1\"\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Deployments and Pods\nDESCRIPTION: These commands list the deployments and pods created by the Kubernetes driver in the 'buildkit' namespace.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl -n buildkit get deployments\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl -n buildkit get pods\n```\n\n----------------------------------------\n\nTITLE: Leaving a Docker Swarm\nDESCRIPTION: Shows how a worker node can leave the swarm using the docker swarm leave command, which removes it from the orchestration system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/manage-nodes.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker swarm leave\n\nNode left the swarm.\n```\n\n----------------------------------------\n\nTITLE: Creating File-Based Secrets in Docker Compose\nDESCRIPTION: This snippet demonstrates how to create a secret named 'server-certificate' from a file. The secret will be registered with the platform as '<project_name>_server-certificate' with the contents of the server.cert file.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/secrets.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets:\n  server-certificate:\n    file: ./server.cert\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Image with Attestations for Docker Scout Analysis\nDESCRIPTION: This command builds an image with provenance and SBOM attestations, then pushes it to a registry for Docker Scout analysis. The attestations allow for more detailed analysis results.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/analysis.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --push --tag <org>/<image:tag> --provenance=true --sbom=true .\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Service with a Specific Image Digest\nDESCRIPTION: Creates a Docker service named 'myservice' using a specific digest of the Ubuntu 16.04 image. This ensures the service always uses exactly this version of the image regardless of tag updates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n    --name=\"myservice\" \\\n    ubuntu:16.04@sha256:35bc48a1ca97c3971611dc4662d08d131869daa692acb281c7e9e052924e38b1\n```\n\n----------------------------------------\n\nTITLE: Pruning All Docker Objects with Time Filter\nDESCRIPTION: This command prunes all unused Docker objects older than 24 hours. It demonstrates the use of the --filter flag to limit which objects are pruned based on age.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker system prune --filter \"until=24h\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Docker Engine from Raspberry Pi OS\nDESCRIPTION: Removes Docker Engine, CLI, containerd, and Docker Compose packages from the system using apt-get purge. This completely removes the packages and their configuration files but preserves container data.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\n```\n\n----------------------------------------\n\nTITLE: Displaying Only Base Image Update Recommendations with Docker Scout\nDESCRIPTION: Example showing how to use the --only-update flag to display only base image update recommendations for a golang image.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_recommendations.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout recommendations --only-update golang:1.19.4\n```\n\n----------------------------------------\n\nTITLE: Implementing Summary Bar Shortcode in Markdown\nDESCRIPTION: This snippet demonstrates how to use the summary-bar shortcode in Markdown to add a feature summary bar to a Docker documentation page. The shortcode references a feature name that should be defined in the /data/summary.yaml file.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/call-outs.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{</* summary-bar feature_name=\"PKG installer\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Publishing TCP Port in Docker Swarm Service\nDESCRIPTION: This command maps TCP port 80 on the service to port 8080 on the routing mesh. It demonstrates both the legacy colon-separated syntax and the newer comma-separated value syntax.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n-p 8080:80\n```\n\nLANGUAGE: bash\nCODE:\n```\n-p published=8080,target=80\n```\n\n----------------------------------------\n\nTITLE: Exiting MySQL Shell\nDESCRIPTION: Command to exit the MySQL interactive shell and return to the host terminal.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nmysql> exit\n```\n\n----------------------------------------\n\nTITLE: Generating Docker Completion Script for Bash\nDESCRIPTION: Commands to create the directory structure and generate the Docker completion script for Bash shell.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/completion.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p ~/.local/share/bash-completion/completions\n$ docker completion bash > ~/.local/share/bash-completion/completions/docker\n```\n\n----------------------------------------\n\nTITLE: Limiting Container Memory with Docker Run Command\nDESCRIPTION: Shows how to set memory swap limits for Docker containers using the --memory-swap flag to control resource usage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n--memory-swap\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Hosts with Short Syntax\nDESCRIPTION: Short syntax for adding extra host entries to container network configuration (/etc/hosts for Linux) using the HOSTNAME=IP format in a list.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nextra_hosts:\n  - \"somehost=162.242.195.82\"\n  - \"otherhost=50.31.209.229\"\n  - \"myhostv6=::1\"\n```\n\n----------------------------------------\n\nTITLE: Docker Image Pull Command\nDESCRIPTION: Command to pull a previously backed up Docker image from Docker Hub registry.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/settings-and-maintenance/backup-and-restore.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull <my-backup-image>\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop Arch Package\nDESCRIPTION: This command uses pacman to install the Docker Desktop Arch package. The package should be downloaded beforehand from the Docker Desktop release notes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/archlinux.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pacman -U ./docker-desktop-x86_64.pkg.tar.zst\n```\n\n----------------------------------------\n\nTITLE: Accessing Docker Desktop Logs on Linux\nDESCRIPTION: This command uses journalctl to access Docker Desktop logs on Linux systems. It filters logs specific to the docker-desktop user unit.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/_index.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ journalctl --user --unit=docker-desktop\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for PostgreSQL\nDESCRIPTION: Environment variable definitions for connecting to a PostgreSQL database, including credentials and connection parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nPOSTGRES_USER=postgres\nPOSTGRES_DB_HOST=localhost\nPOSTGRES_DB=sampledb\nPOSTGRES_PASSWORD=mysecretpassword\nPOSTGRES_PORT=5432\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Docker Compose YAML\nDESCRIPTION: This snippet demonstrates how to set environment variables using the 'env_file' and 'environment' attributes in a Docker Compose YAML file. It shows that the 'environment' attribute takes precedence over 'env_file'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/environment-variables/envvars-precedence.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    image: 'webapp'\n    env_file:\n     - ./webapp.env\n    environment:\n     - NODE_ENV=production\n```\n\n----------------------------------------\n\nTITLE: Configuring API Reference Build in YAML\nDESCRIPTION: This YAML frontmatter configures the build settings for the Docker API reference documentation. It sets the title and specifies that the page should never be rendered directly.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API reference\nbuild:\n  render: never\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Docker Container\nDESCRIPTION: Dockerfile configuration for serving the application using Nginx on Alpine Linux.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/tensorflowjs.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM nginx:stable-alpine3.17-slim\nWORKDIR /usr/share/nginx/html\nCOPY . .\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Watch Mode\nDESCRIPTION: Command to start the application using Docker Compose with the watch feature enabled for automatic updates.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose watch\n```\n\n----------------------------------------\n\nTITLE: Warning Output for Multiple Instructions\nDESCRIPTION: Example error message shown when multiple CMD instructions are detected in the same stage.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/multiple-instructions-disallowed.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMultiple CMD instructions should not be used in the same stage because only the last one will be used\n```\n\n----------------------------------------\n\nTITLE: Setting Network Mode for Docker Compose Service\nDESCRIPTION: Configures the network mode for a service container. Examples show how to use host networking, disable networking, or share networking with another service.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\n    network_mode: \"host\"\n    network_mode: \"none\"\n    network_mode: \"service:[service name]\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Service with Published Ports Using the Routing Mesh\nDESCRIPTION: Creates an Nginx service with three replicas and publishes port 80 of the container to port 8080 on all swarm nodes. This demonstrates how to make a service accessible externally using the routing mesh.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name my_web \\\n                        --replicas 3 \\\n                        --publish published=8080,target=80 \\\n                        nginx\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Advanced Journald Logging Options\nDESCRIPTION: Example showing how to run a container with journald logging driver and additional options to include specific labels and environment variables in the log messages.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/journald.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n    --log-driver=journald \\\n    --log-opt labels=location \\\n    --log-opt env=TEST \\\n    --env \"TEST=false\" \\\n    --label location=west \\\n    your/application\n```\n\n----------------------------------------\n\nTITLE: Configuring awslogs in Docker Compose\nDESCRIPTION: Shows how to set up the awslogs driver for a service in a Docker Compose file, specifying the AWS region.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/awslogs.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmyservice:\n  logging:\n    driver: awslogs\n    options:\n      awslogs-region: us-east-1\n```\n\n----------------------------------------\n\nTITLE: Preserving Data When Uninstalling Docker Desktop EXE Installation\nDESCRIPTION: Command to uninstall Docker Desktop .exe version while preserving underlying resources like container VMs. This option is available in Docker Desktop 4.30 and later using the -keep-data flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/faq.md#2025-04-11_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n& 'C:\\Program Files\\Docker\\Docker\\Docker Desktop Installer.exe' uninstall -keep-data\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Dex\nDESCRIPTION: Docker Compose YAML file to set up and run Dex container with the specified configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dex.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# docker-compose.yaml\n\nservices:\n  dex:\n    image: dexidp/dex:latest\n    container_name: dex\n    ports:\n      - \"5556:5556\"\n    volumes:\n      - ./config.yaml:/etc/dex/config.yaml\n    command: [\"dex\", \"serve\", \"/etc/dex/config.yaml\"]\n```\n\n----------------------------------------\n\nTITLE: Starting a Container with a Volume\nDESCRIPTION: Shows how to start a Docker container with a volume using both --mount and -v options, and how to inspect the mounted volume.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  --name devtest \\\n  --mount source=myvol2,target=/app \\\n  nginx:latest\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  --name devtest \\\n  -v myvol2:/app \\\n  nginx:latest\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Mounts\": [\n    {\n        \"Type\": \"volume\",\n        \"Name\": \"myvol2\",\n        \"Source\": \"/var/lib/docker/volumes/myvol2/_data\",\n        \"Destination\": \"/app\",\n        \"Driver\": \"local\",\n        \"Mode\": \"\",\n        \"RW\": true,\n        \"Propagation\": \"\"\n    }\n],\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker container stop devtest\n\n$ docker container rm devtest\n\n$ docker volume rm myvol2\n```\n\n----------------------------------------\n\nTITLE: Displaying Error for Unverified Domain in SSO Connection\nDESCRIPTION: This error appears when the User Principal Name (UPN) returned by the identity provider doesn't match any of the verified domains associated with the SSO connection in Docker. All domains used as UPNs by the IdP must be verified and associated with the Docker SSO connection.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/troubleshoot/troubleshoot-sso.md#2025-04-11_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nDomain '$emailDomain' is not verified for your SSO connection. Contact your company administrator. TraceID: XXXXXXXXXXXXXX\n```\n\n----------------------------------------\n\nTITLE: Running Container with IPv6-Only Port Binding in Docker\nDESCRIPTION: Starts a Docker container on the custom network 'mynet' with port 80 mapped only to IPv6 interfaces. This configuration disables IPv4 access to the container's port 80.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --network mynet -p '[::]::80'\n```\n\n----------------------------------------\n\nTITLE: Testing Container-to-Container Communication by Name\nDESCRIPTION: This command attempts to ping the second container by its container name (alpine2) rather than IP address, demonstrating that DNS resolution by container name is not supported on the default bridge network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n# ping -c 2 alpine2\n\nping: bad address 'alpine2'\n```\n\n----------------------------------------\n\nTITLE: Using Privileged Container for Advanced tmpfs Mounting\nDESCRIPTION: Demonstrates how to use a privileged container to perform advanced tmpfs mounting operations using the Linux mount command directly.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/tmpfs.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --privileged -it debian sh\n/# mount -t tmpfs -o <options> tmpfs /data\n```\n\n----------------------------------------\n\nTITLE: Supervisord Dockerfile Configuration\nDESCRIPTION: Dockerfile setup for using supervisord as a process manager. Installs supervisord and configures it to manage multiple processes within the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/multi-service_container.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM ubuntu:latest\nRUN apt-get update && apt-get install -y supervisor\nRUN mkdir -p /var/log/supervisor\nCOPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf\nCOPY my_first_process my_first_process\nCOPY my_second_process my_second_process\nCMD [\"/usr/bin/supervisord\"]\n```\n\n----------------------------------------\n\nTITLE: Running Container with Published Port in Docker\nDESCRIPTION: Runs a Docker container on the custom network 'mynet' with port 80 in the container mapped to port 8080 on the host. This allows the container to be accessible via the host's network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --network=mynet -p 8080:80 myimage\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH for Optimal Docker Connection Experience\nDESCRIPTION: SSH configuration settings that optimize Docker CLI performance when connecting to remote Docker daemons by reusing SSH connections.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nControlMaster     auto\nControlPath       ~/.ssh/control-%C\nControlPersist    yes\n```\n\n----------------------------------------\n\nTITLE: Extracting SBOM for Local Image to File\nDESCRIPTION: Build a local image with the local exporter and scout-sbom-indexer SBOM generator plugin to extract the SPDX file and save it to build/sbom.spdx.json.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/view-create-sboms.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --attest type=sbom,generator=docker/scout-sbom-indexer:latest \\\n  --output build .\n```\n\n----------------------------------------\n\nTITLE: Prometheus Docker Target Configuration\nDESCRIPTION: YAML configuration snippet for adding a Docker daemon as a Prometheus target in a production environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/prometheus.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: docker\n  static_configs:\n    - targets: [\"docker.daemon.example:<PORT>\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies in Docker\nDESCRIPTION: Uses pip to install all required Python packages listed in requirements.txt inside the Docker image without caching.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN pip install --no-cache-dir -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Endpoints in Docker Engine\nDESCRIPTION: Enables pprof/debug endpoints by default in Docker Engine, allowing for easier debugging and performance profiling.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.07.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Enable pprof/debug endpoints by default [moby/moby#32453](https://github.com/moby/moby/pull/32453)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Arguments with Prompt\nDESCRIPTION: Example of defining build arguments without values, which will require user interaction at build time.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nargs:\n  - GIT_COMMIT\n```\n\n----------------------------------------\n\nTITLE: Indicating Provenance Completeness in SLSA Format\nDESCRIPTION: Example of the 'metadata.completeness' field which indicates whether all build parameters, environment details, and materials are completely captured in the provenance. The values vary based on build mode and context sources.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n    \"metadata\": {\n      \"completeness\": {\n        \"parameters\": true,\n        \"environment\": true,\n        \"materials\": true\n      },\n      ...\n    },\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with Port Mapping\nDESCRIPTION: This command runs a Docker container in detached mode (-d) that maps port 8080 on the host to port 80 in the container, using the docker/welcome-to-docker image. This creates a web server accessible at localhost:8080.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/get-docker-desktop.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d -p 8080:80 docker/welcome-to-docker\n```\n\n----------------------------------------\n\nTITLE: Making Secure API Requests to Docker using curl with TLS Certificates\nDESCRIPTION: This snippet shows how to make secure API requests to the Docker daemon using curl with TLS authentication. It specifies the client certificate, private key, and CA certificate for verification.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ curl https://$HOST:2376/images/json \\\n  --cert ~/.docker/cert.pem \\\n  --key ~/.docker/key.pem \\\n  --cacert ~/.docker/ca.pem\n```\n\n----------------------------------------\n\nTITLE: Creating an IPvlan Network as an Alternative to Macvlan\nDESCRIPTION: Demonstrates how to create an IPvlan network in L2 mode as an alternative to Macvlan. This configuration uses the ipvlan driver with multiple subnets and gateways.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/macvlan.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d ipvlan \\\n    --subnet=192.168.210.0/24 \\\n    --subnet=192.168.212.0/24 \\\n    --gateway=192.168.210.254 \\\n    --gateway=192.168.212.254 \\\n     -o ipvlan_mode=l2 -o parent=eth0 ipvlan210\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Containers on Mac\nDESCRIPTION: Command to list all Docker containers (including stopped ones) in Docker Desktop for Mac.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/macfaqs.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker container ls -a\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format for Docker Compose Events Command\nDESCRIPTION: Shows the JSON format of events output when using the --json flag with the docker compose events command. Each event includes a timestamp, event type, action, container ID, service name, and additional attributes.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_events.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"time\": \"2015-11-20T18:01:03.615550\",\n    \"type\": \"container\",\n    \"action\": \"create\",\n    \"id\": \"213cf7...5fc39a\",\n    \"service\": \"web\",\n    \"attributes\": {\n      \"name\": \"application_web_1\",\n      \"image\": \"alpine:edge\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Examining OverlayFS Mount Information in Docker\nDESCRIPTION: This snippet shows how to use the mount command to view the OverlayFS mount details for a running container. It displays the relationships between the merged, lowerdir, upperdir, and workdir components.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/overlayfs-driver.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ mount | grep overlay\n\noverlay on /var/lib/docker/overlay2/l/ec444863a55a.../merged\ntype overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/55f1e14c361b.../root,\nupperdir=/var/lib/docker/overlay2/l/ec444863a55a.../upper,\nworkdir=/var/lib/docker/overlay2/l/ec444863a55a.../work)\n```\n\n----------------------------------------\n\nTITLE: Generating Client Certificates for Docker Registry Authentication\nDESCRIPTION: Commands to generate RSA key and certificate for Docker registry client authentication using OpenSSL. These commands create a client key and a self-signed certificate needed for secure communication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/certificates.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ openssl genrsa -out client.key 4096\n$ openssl req -new -x509 -text -key client.key -out client.cert\n```\n\n----------------------------------------\n\nTITLE: Retrieving Docker Hub Token Anonymously\nDESCRIPTION: This command retrieves an anonymous token from Docker Hub for checking rate limits. It uses curl to make an HTTP request and jq to parse the JSON response.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/usage/pulls.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ TOKEN=$(curl \"https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull\" | jq -r .token)\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Node Demote Documentation\nDESCRIPTION: This YAML frontmatter defines metadata for the 'docker node demote' command documentation page. It specifies the data folder, file name, title, aliases for different versions, and layout type.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/node/demote.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_node_demote\ntitle: docker node demote\naliases:\n- /edge/engine/reference/commandline/node_demote/\n- /engine/reference/commandline/node_demote/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Development Override Compose File\nDESCRIPTION: An override Compose file for development that exposes ports, mounts code as a volume, and builds the web image from source.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    volumes:\n      - '.:/code'\n    ports:\n      - 8883:80\n    environment:\n      DEBUG: 'true'\n\n  db:\n    command: '-d'\n    ports:\n     - 5432:5432\n\n  cache:\n    ports:\n      - 6379:6379\n```\n\n----------------------------------------\n\nTITLE: Checking Current Docker Storage Driver Using Command Line\nDESCRIPTION: This command uses 'docker info' to display system-wide information about Docker, including the current storage driver. The output shows 'overlay2' as the active storage driver with 'xfs' as the backing filesystem.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/select-storage-driver.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker info\n\nContainers: 0\nImages: 0\nStorage Driver: overlay2\n Backing Filesystem: xfs\n<...>\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Service with Multiple Placement Constraints\nDESCRIPTION: This example shows how to create a global Docker service with multiple placement constraints. The service will run on all nodes where 'region' is set to 'east' and 'type' is not set to 'devel'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --name my-nginx \\\n  --mode global \\\n  --constraint node.labels.region==east \\\n  --constraint node.labels.type!=devel \\\n  nginx\n```\n\n----------------------------------------\n\nTITLE: Deleting Bun Application from Kubernetes\nDESCRIPTION: Command to remove the deployed Bun application and associated resources from the Kubernetes cluster.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/deploy.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl delete -f docker-kubernetes.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for HTTPS with Docker Secrets\nDESCRIPTION: This Nginx configuration serves static files over HTTPS using TLS certificates stored as Docker secrets. It listens on port 443 and specifies the paths to the certificate and key files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen                443 ssl;\n    server_name           localhost;\n    ssl_certificate       /run/secrets/site.crt;\n    ssl_certificate_key   /run/secrets/site.key;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Container with Volume Mount\nDESCRIPTION: Starts the todo application container with a mounted volume to persist data at /etc/todos.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/05_persisting_data.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -dp 127.0.0.1:3000:3000 --mount type=volume,src=todo-db,target=/etc/todos getting-started\n```\n\n----------------------------------------\n\nTITLE: Building and Tagging a Docker Image\nDESCRIPTION: Command to build and tag a Docker image in a single step. The -t flag assigns a name to the image during build, making it easier to reference later.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker build -t my-username/my-image .\n```\n\n----------------------------------------\n\nTITLE: Docker Image List Output\nDESCRIPTION: This is an example output of the 'docker image ls' command, showing the details of the newly built image including its repository name, tag, image ID, creation time, and size.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nREPOSITORY                             TAG       IMAGE ID       CREATED          SIZE\nmobywhale/concepts-build-image-demo    latest    746c7e06537f   24 seconds ago   354MB\n```\n\n----------------------------------------\n\nTITLE: Sharing Docker Images Between GitHub Actions Jobs\nDESCRIPTION: GitHub Actions workflow that demonstrates building a Docker image in one job and using it in another through artifacts. The workflow uses docker/setup-buildx-action to set up the build environment, builds and exports the image to a TAR file, uploads it as an artifact, and then downloads and loads it in a subsequent job.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/share-image-jobs.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and export\n        uses: docker/build-push-action@v6\n        with:\n          tags: myimage:latest\n          outputs: type=docker,dest=${{ runner.temp }}/myimage.tar\n\n      - name: Upload artifact\n        uses: actions/upload-artifact@v4\n        with:\n          name: myimage\n          path: ${{ runner.temp }}/myimage.tar\n\n  use:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - name: Download artifact\n        uses: actions/download-artifact@v4\n        with:\n          name: myimage\n          path: ${{ runner.temp }}\n\n      - name: Load image\n        run: |\n          docker load --input ${{ runner.temp }}/myimage.tar\n          docker image ls -a\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with HTTP API\nDESCRIPTION: Series of curl commands demonstrating how to create, start, wait for, and retrieve logs from a container using the Docker Engine API directly.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ curl --unix-socket /var/run/docker.sock -H \"Content-Type: application/json\" \\\n  -d '{\"Image\": \"alpine\", \"Cmd\": [\"echo\", \"hello world\"]}' \\\n  -X POST http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/create\n{\"Id\":\"1c6594faf5\",\"Warnings\":null}\n\n$ curl --unix-socket /var/run/docker.sock -X POST http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/1c6594faf5/start\n\n$ curl --unix-socket /var/run/docker.sock -X POST http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/1c6594faf5/wait\n{\"StatusCode\":0}\n\n$ curl --unix-socket /var/run/docker.sock \"http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/1c6594faf5/logs?stdout=1\"\nhello world\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for API Keys\nDESCRIPTION: Example environment configuration file showing the structure for storing OpenAI and Pinecone API keys. Users need to create a .env file following this template and add their personal API keys.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-video-bot/index.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n#----------------------------------------------------------------------------\n# OpenAI\n#----------------------------------------------------------------------------\nOPENAI_TOKEN=your-api-key # Replace your-api-key with your personal API key\n\n#----------------------------------------------------------------------------\n# Pinecone\n#----------------------------------------------------------------------------\nPINECONE_TOKEN=your-api-key # Replace your-api-key with your personal API key\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Filesystem Server with Bind Mount in YAML\nDESCRIPTION: This YAML configuration shows how to set up the MCP filesystem server with a bind mount, allowing Gordon to access specific directories on the host filesystem.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/yaml.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  fs:\n    image: mcp/filesystem\n    command:\n      - /rootfs\n    volumes:\n      - .:/rootfs\n```\n\n----------------------------------------\n\nTITLE: Verifying Data Persistence in MySQL Container\nDESCRIPTION: Uses docker exec to run a MySQL query inside the container, verifying that the previously created table still exists.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ docker exec my-mysql mysql -u root -pmy-secret-pw -e \"SELECT * FROM mydb.mytable;\"\n```\n\n----------------------------------------\n\nTITLE: Unsetting Environment Variables in Terminal\nDESCRIPTION: Commands to unset any existing environment variables that might conflict with the AccuWeather API integration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nunset API_ENDPOINT_BASE\nunset ACCUWEATHER_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Long Syntax Port Configuration in Docker Compose\nDESCRIPTION: Detailed port configuration using long syntax, demonstrating advanced options like target ports, protocols, and mode settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\nports:\n  - name: web\n    target: 80\n    host_ip: 127.0.0.1\n    published: \"8080\"\n    protocol: tcp\n    app_protocol: http\n    mode: host\n\n  - name: web-secured\n    target: 443\n    host_ip: 127.0.0.1\n    published: \"8083-9000\"\n    protocol: tcp\n    app_protocol: https\n    mode: host\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop MSI Non-Interactively with Admin Settings in PowerShell\nDESCRIPTION: Command to silently install Docker Desktop MSI with custom admin settings and organization configuration, allowing for enterprise-specific configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /i \"DockerDesktop.msi\" /L*V \".\\msi.log\" /quiet /norestart ADMINSETTINGS=\"{\"configurationFileVersion\":2,\"enhancedContainerIsolation\":{\"value\":true,\"locked\":false}}\" ALLOWEDORG=\"docker\"\n```\n\n----------------------------------------\n\nTITLE: Text Summarization Input Prompt\nDESCRIPTION: This snippet shows the prompt displayed when the text summarization application is running, asking the user to enter text for summarization.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nEnter the text for summarization (type 'exit' to end):\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Network Rules from FORWARD Chain\nDESCRIPTION: Additional commands to clean up Docker-specific rules in the iptables FORWARD chain. These commands are part of the cleanup process when downgrading to an older Docker version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\niptables -D FORWARD -m set --match-set docker-ext-bridges-v4 dst -j DOCKER; ip6tables -D FORWARD -m set --match-set docker-ext-bridges-v6 dst -j DOCKER\n```\n\n----------------------------------------\n\nTITLE: Using Custom Network Names in Docker Compose\nDESCRIPTION: Shows how to specify a custom name for a network instead of using the default generated name. This can be useful for better organization or when integrating with existing systems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/networking.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # ...\nnetworks:\n  frontend:\n    name: custom_frontend\n    driver: custom-driver-1\n```\n\n----------------------------------------\n\nTITLE: Cloning the Application Repository\nDESCRIPTION: Command to clone the getting-started-app repository from GitHub to get the application source code.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/02_our_app.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/docker/getting-started-app.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Configs in Docker Compose\nDESCRIPTION: This example shows how to use the configs attribute to grant a service access to configuration files. It demonstrates both short syntax for simple config access and long syntax for more detailed configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  redis:\n    image: redis:latest\n    configs:\n      - my_config\n      - my_other_config\nconfigs:\n  my_config:\n    file: ./my_config.txt\n  my_other_config:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Output of a One-time Model Prompt\nDESCRIPTION: Example response from an AI model after sending a one-time prompt.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nHello! How can I assist you today?\n```\n\n----------------------------------------\n\nTITLE: Deploying with Production Configuration\nDESCRIPTION: Command to deploy services using the base Compose file and the production override file, bypassing the development configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f compose.yaml -f compose.prod.yaml up -d\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop from PowerShell\nDESCRIPTION: PowerShell command to install Docker Desktop using the installer executable. This method is specific to PowerShell environments and ensures proper execution of the installer.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/windows-install.md#2025-04-11_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nStart-Process 'Docker Desktop Installer.exe' -Wait install\n```\n\n----------------------------------------\n\nTITLE: Installing bash-completion Package for Docker CLI\nDESCRIPTION: Commands for installing the bash-completion package using different package managers, which is required for Docker CLI completion in Bash.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/completion.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install using APT:\nsudo apt install bash-completion\n\n# Install using Homebrew (Bash version 4 or later):\nbrew install bash-completion@2\n# Homebrew install for older versions of Bash:\nbrew install bash-completion\n\n# With pacman:\nsudo pacman -S bash-completion\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Driver Options in Docker Compose\nDESCRIPTION: Example demonstrating how to pass driver-specific options to a volume. This example configures NFS options for a volume.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  example:\n    driver_opts:\n      type: \"nfs\"\n      o: \"addr=10.40.0.199,nolock,soft,rw\"\n      device: \":/docker/example\"\n```\n\n----------------------------------------\n\nTITLE: Starting the UI Development Server for Docker Extensions\nDESCRIPTION: Commands to run the UI development server using npm, allowing for hot reloading of UI changes during development.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/test-debug.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cd ui\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Volume Mounting on Windows with Docker\nDESCRIPTION: Demonstrates how to properly mount volumes on Windows using Docker. It shows the correct syntax for both legacy Windows shell (cmd.exe) and Unix-style paths.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/topics.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -ti -v C:\\Users\\user\\work:/work alpine\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -ti -v /c/Users/user/work:/work alpine ls /work\n```\n\n----------------------------------------\n\nTITLE: Running Docker with Google Cloud Logging Outside Google Cloud\nDESCRIPTION: Example command for running a Docker container with the gcplogs driver when operating outside of Google Cloud, specifying project, zone, and instance name manually.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/gcplogs.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n    --log-driver=gcplogs \\\n    --log-opt gcp-project=test-project \\\n    --log-opt gcp-meta-zone=west1 \\\n    --log-opt gcp-meta-name=`hostname` \\\n    your/application\n```\n\n----------------------------------------\n\nTITLE: Docker Push Output\nDESCRIPTION: Example output from a successful docker push command showing layers being uploaded to Docker Hub. The output shows which layers are pushed new and which are mounted from existing images, demonstrating Docker's layer reuse strategy.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/quickstart.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nUsing default tag: latest\nThe push refers to repository [docker.io/mobyismyname/nginx-custom]\nd0e011850342: Pushed\ne4e9e9ad93c2: Mounted from library/nginx\n6ac729401225: Mounted from library/nginx\n8ce189049cb5: Mounted from library/nginx\n296af1bd2844: Mounted from library/nginx\n63d7ce983cd5: Mounted from library/nginx\nb33db0c3c3a8: Mounted from library/nginx\n98b5f35ea9d3: Mounted from library/nginx\nlatest: digest: sha256:7f5223ae866e725a7f86b856c30edd3b86f60d76694df81d90b08918d8de1e3f size: 1985\n```\n\n----------------------------------------\n\nTITLE: Cloning the Docker-NLP Repository\nDESCRIPTION: Command to clone the sample application repository from GitHub which contains the language translation code along with other NLP examples.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/harsh4870/Docker-NLP.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with a PostgreSQL Database\nDESCRIPTION: Compose file that sets up a Rails application with a PostgreSQL database, including environment configuration, persistent volume storage, and secret management for database passwords.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    command: bundle exec rails s -b '0.0.0.0'\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n    environment:\n      - RAILS_ENV=test\n    env_file: \"webapp.env\"\n  db:\n    image: postgres:latest\n    secrets:\n      - db-password\n    environment:\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: BuildKit Deprecation Warning Message\nDESCRIPTION: Warning message displayed when using the legacy builder without BuildKit, indicating that the legacy builder is deprecated and recommending installation of buildx component.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDEPRECATED: The legacy builder is deprecated and will be removed in a future release.\n            Install the buildx component to build images with BuildKit:\n            https://docs.docker.com/go/buildx/\n```\n\n----------------------------------------\n\nTITLE: Basic Buildx Bake Configuration\nDESCRIPTION: Initial HCL configuration for Docker Buildx Bake defining multi-platform builds with attestations\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  target = \"image\"\n  tags = [\n    \"bakeme:latest\",\n  ]\n  attest = [\n    \"type=provenance,mode=max\",\n    \"type=sbom\",\n  ]\n  platforms = [\n    \"linux/amd64\",\n    \"linux/arm64\",\n    \"linux/riscv64\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example PAC File for Docker Container Network Access Control\nDESCRIPTION: This Proxy Auto-Configuration (PAC) file defines routing rules for container network traffic. It directs traffic for internal.corp through a proxy, allows direct access to a specific subnet, and blocks all other requests. This provides granular control over where containers can connect.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/air-gapped-containers.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction FindProxyForURL(url, host) {\n\tif (localHostOrDomainIs(host, 'internal.corp')) {\n\t\treturn \"PROXY 10.0.0.1:3128\";\n\t}\n\tif (isInNet(host, \"192.168.0.0\", \"255.255.255.0\")) {\n\t    return \"DIRECT\";\n\t}\n    return \"PROXY reject.docker.internal:1234\";\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Docker Compose Create Command Options\nDESCRIPTION: A markdown table listing all available options for the 'docker compose create' command. It includes option names, types, default values, and descriptions for each option.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_create.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name               | Type          | Default  | Description                                                                                   |\n|:-------------------|:--------------|:---------|:----------------------------------------------------------------------------------------------|\n| `--build`          | `bool`        |          | Build images before starting containers                                                       |\n| `--dry-run`        | `bool`        |          | Execute command in dry run mode                                                               |\n| `--force-recreate` | `bool`        |          | Recreate containers even if their configuration and image haven't changed                     |\n| `--no-build`       | `bool`        |          | Don't build an image, even if it's policy                                                     |\n| `--no-recreate`    | `bool`        |          | If containers already exist, don't recreate them. Incompatible with --force-recreate.         |\n| `--pull`           | `string`      | `policy` | Pull image before running (\"always\"|\"missing\"|\"never\"|\"build\")                             |\n| `--quiet-pull`     | `bool`        |          | Pull without printing progress information                                                    |\n| `--remove-orphans` | `bool`        |          | Remove containers for services not defined in the Compose file                                |\n| `--scale`          | `stringArray` |          | Scale SERVICE to NUM instances. Overrides the `scale` setting in the Compose file if present. |\n| `-y`, `--yes`      | `bool`        |          | Assume \"yes\" as answer to all prompts and run non-interactively                               |\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Docker Desktop MSI Interactively with Verbose Logging in PowerShell\nDESCRIPTION: Command to uninstall Docker Desktop MSI interactively with detailed logging, displaying the uninstallation user interface and recording the process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /x \"DockerDesktop.msi\" /L*V \".\\msi.log\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid Mount Operations Within Container\nDESCRIPTION: Shows that Enhanced Container Isolation still allows containers to create and manipulate mounts within the container's own namespace, as these operations don't breach the container's root filesystem. This example includes creating and remounting a tmpfs filesystem.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n/ # mkdir /root/tmpfs\n/ # mount -t tmpfs tmpfs /root/tmpfs\n/ # mount -o remount,ro /root/tmpfs /root/tmpfs\n\n/ # findmnt | grep tmpfs\n├─/root/tmpfs    tmpfs      tmpfs    ro,relatime,uid=100000,gid=100000\n\n/ # mount -o remount,rw /root/tmpfs /root/tmpfs\n/ # findmnt | grep tmpfs\n├─/root/tmpfs    tmpfs      tmpfs    rw,relatime,uid=100000,gid=100000\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Configuration\nDESCRIPTION: YAML configuration for GitHub Actions workflow that handles Docker image building and pushing to Docker Hub. The workflow authenticates with Docker Hub, sets up Docker Buildx, and uses the build-push-action to build and push the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/configure-ci-cd.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata Labels to Volumes in Docker Compose - Array Format\nDESCRIPTION: Example showing how to add metadata labels to a volume using array format.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  db-data:\n    labels:\n      - \"com.example.description=Database volume\"\n      - \"com.example.department=IT/Ops\"\n      - \"com.example.label-with-empty-value\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Service with a Custom Command in Docker Swarm\nDESCRIPTION: Creates a service named 'helloworld' that uses an Alpine Linux image and runs the command 'ping docker.com' instead of the image's default command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name helloworld alpine ping docker.com\n```\n\n----------------------------------------\n\nTITLE: Copying Certificate to a Running Docker Container\nDESCRIPTION: This command copies a certificate file from the host machine to a temporary location in a running Docker container, identified by its container ID.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/ca-certs.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker cp myca.crt <containerid>:/tmp\n```\n\n----------------------------------------\n\nTITLE: Binding container port to a specific host interface in Docker\nDESCRIPTION: Creates a container with port 5000 mapped to port 80 only on the localhost (127.0.0.1) interface, restricting access to the local machine.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 127.0.0.1:80:5000 training/webapp python app.py\n```\n\n----------------------------------------\n\nTITLE: Mac CLI Docker Desktop Uninstall Command\nDESCRIPTION: Command to uninstall Docker Desktop on macOS using the built-in uninstaller\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/uninstall.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ /Applications/Docker.app/Contents/MacOS/uninstall\n```\n\n----------------------------------------\n\nTITLE: Error Example When Attempting to Use a Locked Swarm\nDESCRIPTION: Shows the error message that appears when trying to use Docker services on a locked swarm that needs to be unlocked first using the unlock key.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm_manager_locking.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo service docker restart\n\n$ docker service ls\n\nError response from daemon: Swarm is encrypted and needs to be unlocked before it can be used. Use \"docker swarm unlock\" to unlock it.\n```\n\n----------------------------------------\n\nTITLE: Docker Container Output Example\nDESCRIPTION: Example output from the docker ps command showing a running container with its ID, image, command, creation time, status, port mapping, and assigned name.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-container.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n CONTAINER ID   IMAGE                      COMMAND                  CREATED          STATUS          PORTS                      NAMES\n a1f7a4bb3a27   docker/welcome-to-docker   \"/docker-entrypoint.…\"   11 seconds ago   Up 11 seconds   0.0.0.0:8080->80/tcp       gracious_keldysh\n```\n\n----------------------------------------\n\nTITLE: Reading Container Logs With Dual Logging\nDESCRIPTION: Example showing successful log reading with dual logging enabled\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/dual-logging.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker logs 7d6ac83a89a0\n2019-02-04T19:48:15.423Z [INFO]  core: marked as sealed\n2019-02-04T19:48:15.423Z [INFO]  core: pre-seal teardown starting\n2019-02-04T19:48:15.423Z [INFO]  core: stopping cluster listeners\n2019-02-04T19:48:15.423Z [INFO]  core: shutting down forwarding rpc listeners\n2019-02-04T19:48:15.423Z [INFO]  core: forwarding rpc listeners stopped\n2019-02-04T19:48:15.599Z [INFO]  core: rpc listeners successfully shut down\n2019-02-04T19:48:15.599Z [INFO]  core: cluster listeners successfully shut down\n```\n\n----------------------------------------\n\nTITLE: Running a Container with vieux/sshfs Volume\nDESCRIPTION: This command starts a Docker container that creates and uses a volume with the vieux/sshfs driver, specifying SSH connection details and password.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d \\\n  --name sshfs-container \\\n  --mount type=volume,volume-driver=vieux/sshfs,src=sshvolume,target=/app,volume-opt=sshcmd=test@node2:/home/test,volume-opt=password=testpassword \\\n  nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Attaching to Running Docker Container\nDESCRIPTION: This command re-attaches the terminal to a running container, allowing observation of its output between restarts.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/start-containers-automatically.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker container attach 081991b35afe\n```\n\n----------------------------------------\n\nTITLE: Executing Docker Command in Docker Desktop Extension (TypeScript)\nDESCRIPTION: Shows how to directly execute the Docker binary and handle the output. This method is deprecated and will be removed in a future version. The 'exec' method from DockerCommand is recommended as a replacement.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/DockerDesktopClient.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await window.ddClient.execDockerCmd(\"info\");\n```\n\n----------------------------------------\n\nTITLE: Verifying containerd snapshotter configuration\nDESCRIPTION: Command to check if the containerd snapshotter is properly enabled by inspecting the Docker information output. This confirms that Docker Engine is using containerd snapshotter storage drivers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/containerd.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker info -f '{{ .DriverStatus }}'\n[[driver-type io.containerd.snapshotter.v1]]\n```\n\n----------------------------------------\n\nTITLE: Stopping Running PostgreSQL Container in Docker\nDESCRIPTION: Command to stop any running PostgreSQL containers to prevent port conflicts before starting new containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker container stop postgres\n```\n\n----------------------------------------\n\nTITLE: Removing a Service from Docker Swarm\nDESCRIPTION: Command to remove the 'helloworld' service from a Docker swarm. This command instructs the swarm manager to stop all tasks associated with the service and remove the service definition.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/delete-service.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker service rm helloworld\n\nhelloworld\n```\n\n----------------------------------------\n\nTITLE: Restarting AppArmor Service\nDESCRIPTION: Command to restart the AppArmor service after installing the new profile.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ systemctl restart apparmor.service\n```\n\n----------------------------------------\n\nTITLE: Passing SSH Socket to Docker Build\nDESCRIPTION: CLI command showing how to pass the default SSH socket to a Docker build for SSH authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --ssh default .\n```\n\n----------------------------------------\n\nTITLE: Configuring Compose Watch for a Node.js Application\nDESCRIPTION: This YAML snippet shows how to configure Compose Watch for a Node.js application. It demonstrates the use of 'sync' action for source code files and 'rebuild' action for package.json changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/file-watch.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    command: npm start\n    develop:\n      watch:\n        - action: sync\n          path: ./web\n          target: /src/web\n          ignore:\n            - node_modules/\n        - action: rebuild\n          path: package.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Fluentd Address for Docker Container\nDESCRIPTION: Docker run commands demonstrating how to configure a custom Fluentd address for a container. Shows examples using tcp and unix socket connections.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/fluentd.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --log-driver=fluentd --log-opt fluentd-address=fluentdhost:24224\n$ docker run --log-driver=fluentd --log-opt fluentd-address=tcp://fluentdhost:24224\n$ docker run --log-driver=fluentd --log-opt fluentd-address=unix:///path/to/fluentd.sock\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js Application\nDESCRIPTION: Commands to install dependencies and start the Node.js application that communicates with the WireMock server.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nnpm install \nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Extension Metadata Structure in JSON\nDESCRIPTION: The basic structure of a metadata.json file which serves as the entry point for a Docker extension. It defines the extension icon and can include UI, VM, and host configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/architecture/metadata.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"icon\": \"extension-icon.svg\",\n    \"ui\": ...\n    \"vm\": ...\n    \"host\": ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Container with Local Logging Driver\nDESCRIPTION: Command to run an Alpine container with the local logging driver configured for 10MB maximum log size.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/local.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n      --log-driver local --log-opt max-size=10m \\\n      alpine echo hello world\n```\n\n----------------------------------------\n\nTITLE: Updating Compose File for Automatic Service Updates\nDESCRIPTION: This YAML snippet adds Compose Watch configuration to automatically rebuild the server service when changes are detected in the project files.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n      target: final\n    ports:\n      - 8080:8080\n    depends_on:\n      db:\n        condition: service_healthy\n    develop:\n      watch:\n        - action: rebuild\n          path: .\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker daemon TCP listener\nDESCRIPTION: Command to verify that Docker daemon is listening on the configured TCP port by checking network connections.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/remote-access.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo netstat -lntp | grep dockerd\ntcp        0      0 127.0.0.1:2375          0.0.0.0:*               LISTEN      3758/dockerd\n```\n\n----------------------------------------\n\nTITLE: Checking and Reloading Loopback Device Size in Bash\nDESCRIPTION: This series of commands demonstrates how to check the loopback device size, reload it, and verify the size change.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ echo $[ $(sudo blockdev --getsize64 /dev/loop0) / 1024 / 1024 / 1024 ]\n\n100\n\n$ sudo losetup -c /dev/loop0\n\n$ echo $[ $(sudo blockdev --getsize64 /dev/loop0) / 1024 / 1024 / 1024 ]\n\n200\n```\n\n----------------------------------------\n\nTITLE: Defining Groups for Multiple Build Targets\nDESCRIPTION: Shows how to create groups to build multiple targets simultaneously, including configuration for multiple Docker images.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_38\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"default\" {\n  targets = [\"db\", \"webapp-dev\"]\n}\n\ntarget \"webapp-dev\" {\n  dockerfile = \"Dockerfile.webapp\"\n  tags = [\"docker.io/username/webapp:latest\"]\n}\n\ntarget \"db\" {\n  dockerfile = \"Dockerfile.db\"\n  tags = [\"docker.io/username/db\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Welcome-to-Docker Container\nDESCRIPTION: Example command for running the welcome-to-docker container with port publishing.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/publishing-ports.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d -p 8080:80 docker/welcome-to-docker\n```\n\n----------------------------------------\n\nTITLE: Displaying Container Uptime with Enhanced Container Isolation\nDESCRIPTION: Demonstrates how Enhanced Container Isolation shows container-specific uptime instead of the Docker Desktop Linux VM uptime through procfs emulation. The example runs an Alpine container and reads /proc/uptime.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm alpine\n/ # cat /proc/uptime\n5.86 5.86\n```\n\n----------------------------------------\n\nTITLE: Setting SOURCE_DATE_EPOCH to Git Commit Timestamp with docker/build-push-action\nDESCRIPTION: GitHub Actions workflow that builds a Docker image with timestamps from the Git commit. This extracts the commit timestamp and passes it to docker/build-push-action via the SOURCE_DATE_EPOCH environment variable.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/reproducible-builds.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Get Git commit timestamps\n        run: echo \"TIMESTAMP=$(git log -1 --pretty=%ct)\" >> $GITHUB_ENV\n\n      - name: Build\n        uses: docker/build-push-action@v6\n        with:\n          tags: user/app:latest\n        env:\n          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Application\nDESCRIPTION: Commands for building and running the containerized Node.js application using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/containerize.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build -d\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Using OCI Exporter with Docker Buildx\nDESCRIPTION: Command to build a container image using the OCI exporter, which outputs the build result into an OCI image layout tarball.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/oci-docker.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --output type=oci[,parameters] .\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop MSI Interactively with Verbose Logging in PowerShell\nDESCRIPTION: Command to install Docker Desktop MSI interactively with verbose logging, which displays the user interface and logs installation details to a file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /i \"DockerDesktop.msi\" /L*V \".\\msi.log\"\n```\n\n----------------------------------------\n\nTITLE: Setting Network Aliases for Docker Compose Services\nDESCRIPTION: Defines network-scoped aliases for a service, allowing other containers on the same network to connect using these alternative hostnames.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  some-service:\n    networks:\n      some-network:\n        aliases:\n          - alias1\n          - alias3\n      other-network:\n        aliases:\n          - alias2\n```\n\n----------------------------------------\n\nTITLE: Running Fluentd Container with Test Configuration\nDESCRIPTION: Docker command for launching a Fluentd container with a specific configuration file. The command mounts a local configuration file and exposes the necessary port.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/fluentd.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it -p 24224:24224 -v /path/to/conf/test.conf:/fluentd/etc/test.conf -e FLUENTD_CONF=test.conf fluent/fluentd:latest\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDX_CONFIG for Build Configuration Directory\nDESCRIPTION: Specifies the directory to use for build configuration, state, and logs. This overrides the default locations Docker uses for Buildx configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nexport BUILDX_CONFIG=/usr/local/etc\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Docker Releases Documentation Page\nDESCRIPTION: YAML frontmatter configuration block that defines metadata for a documentation page about Docker releases. It sets rendering parameters, page title, and weight for positioning in the documentation hierarchy.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Releases\nweight: 70\n---\n```\n\n----------------------------------------\n\nTITLE: Updated Nginx Configuration with PHP Support\nDESCRIPTION: Modified Nginx configuration that adds PHP index file support while maintaining HTTPS and TLS settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_21\n\nLANGUAGE: none\nCODE:\n```\nserver {\n    listen                443 ssl;\n    server_name           localhost;\n    ssl_certificate       /run/secrets/site.crt;\n    ssl_certificate_key   /run/secrets/site.key;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm index.php;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading KVM Module on Linux\nDESCRIPTION: Command to manually load the KVM kernel module, which is required for Docker Desktop's virtualization functionality on Linux systems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/_index.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ modprobe kvm\n```\n\n----------------------------------------\n\nTITLE: Running Docker daemon with userns-remap flag\nDESCRIPTION: Command to start the Docker daemon with the userns-remap feature enabled. The flag specifies a user and group to be used for remapping container UIDs to host UIDs.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/userns-remap.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dockerd --userns-remap=\"testuser:testuser\"\n```\n\n----------------------------------------\n\nTITLE: Listing USB Devices\nDESCRIPTION: Command to list available USB devices and example output showing an unknown device.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/usbip.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ usbip list -r host.docker.internal\nExportable USB devices\n======================\n - host.docker.internal\n      0-0-0: unknown vendor : unknown product (0000:0000)\n           : /sys/bus/0/0/0\n           : (Defined at Interface level) (00/00/00)\n           :  0 - unknown class / unknown subclass / unknown protocol (03/00/00)\n```\n\n----------------------------------------\n\nTITLE: Executing into the AppArmor-Protected Nginx Container\nDESCRIPTION: Command to start an interactive bash session inside the running Nginx container that has the custom AppArmor profile applied.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/apparmor.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker container exec -it apparmor-nginx bash\n```\n\n----------------------------------------\n\nTITLE: Publishing All Exposed Ports\nDESCRIPTION: Demonstrates how to publish all exposed ports to ephemeral ports using the -P flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/publishing-ports.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -P nginx\n```\n\n----------------------------------------\n\nTITLE: Setting up Azure DevOps Pipeline Configuration with Docker Scout\nDESCRIPTION: This YAML snippet defines the initial configuration for an Azure DevOps pipeline that triggers on commits to the main branch. It sets up repository resources and defines variables for the Docker image name and tag to be used throughout the pipeline.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/ci/azure.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n  - main\n\nresources:\n  - repo: self\n\nvariables:\n  tag: \"$(Build.BuildId)\"\n  image: \"vonwig/nodejs-service\"\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for TensorFlow.js Face Detection Web Application\nDESCRIPTION: The HTML document for the face detection application. It includes styling, video elements for webcam input, canvas for output, and loads TensorFlow.js libraries including core, converter, WebGL, CPU, and WASM backends along with the BlazeFace model.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/tensorflowjs.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  body {\n    margin: 25px;\n  }\n\n  .true {\n    color: green;\n  }\n\n  .false {\n    color: red;\n  }\n\n  #main {\n    position: relative;\n    margin: 50px 0;\n  }\n\n  canvas {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n\n  #description {\n    margin-top: 20px;\n    width: 600px;\n  }\n\n  #description-title {\n    font-weight: bold;\n    font-size: 18px;\n  }\n</style>\n\n<body>\n  <div id=\"main\">\n    <video\n      id=\"video\"\n      playsinline\n      style=\"\n      -webkit-transform: scaleX(-1);\n      transform: scaleX(-1);\n      width: auto;\n      height: auto;\n      \"\n    ></video>\n    <canvas id=\"output\"></canvas>\n    <video\n      id=\"video\"\n      playsinline\n      style=\"\n      -webkit-transform: scaleX(-1);\n      transform: scaleX(-1);\n      visibility: hidden;\n      width: auto;\n      height: auto;\n      \"\n    ></video>\n  </div>\n</body>\n<script src=\"https://unpkg.com/@tensorflow/tfjs-core@2.1.0/dist/tf-core.js\"></script>\n<script src=\"https://unpkg.com/@tensorflow/tfjs-converter@2.1.0/dist/tf-converter.js\"></script>\n\n<script src=\"https://unpkg.com/@tensorflow/tfjs-backend-webgl@2.1.0/dist/tf-backend-webgl.js\"></script>\n<script src=\"https://unpkg.com/@tensorflow/tfjs-backend-cpu@2.1.0/dist/tf-backend-cpu.js\"></script>\n<script src=\"./tf-backend-wasm.js\"></script>\n\n<script src=\"https://unpkg.com/@tensorflow-models/blazeface@0.0.5/dist/blazeface.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.6/dat.gui.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/stats.js/r16/Stats.min.js\"></script>\n<script src=\"./index.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Compose Bridge as kubectl Plugin\nDESCRIPTION: Demonstrates how to use Compose Bridge commands through kubectl after successful plugin integration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/advanced-integration.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl compose-bridge [command]\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm with Example IP\nDESCRIPTION: Example of initializing a Docker swarm on the manager1 machine with IP 192.168.99.100. The command output provides tokens for adding worker and manager nodes to the swarm later.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/create-swarm.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker swarm init --advertise-addr 192.168.99.100\nSwarm initialized: current node (dxn1zf6l61qsb1josjja83ngz) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join \\\n    --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \\\n    192.168.99.100:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n```\n\n----------------------------------------\n\nTITLE: Using Expressions with Variables in Docker Bake HCL\nDESCRIPTION: This example shows how to use expressions with variables to conditionally set build argument values based on variable values and comparisons.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/expressions.md#2025-04-11_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"FOO\" {\n  default = 3\n}\n\nvariable \"IS_FOO\" {\n  default = true\n}\n\ntarget \"app\" {\n  args = {\n    v1 = FOO > 5 ? \"higher\" : \"lower\"\n    v2 = IS_FOO ? \"yes\" : \"no\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining the document title, link title and table of contents depth settings for the release notes page.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/19.03.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Docker Engine 19.03 release notes\nlinkTitle: Engine v19.03\ntoc_min: 1\ntoc_max: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Bridge Network for Container Communication\nDESCRIPTION: Creates a user-defined bridge network named 'mynet' to enable communication between application and database containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create -d bridge mynet\n51344edd6430b5acd121822cacc99f8bc39be63dd125a3b3cd517b6485ab7709\n```\n\n----------------------------------------\n\nTITLE: Generating SBOM Using Docker Scout\nDESCRIPTION: Command to generate an SBOM using Docker Scout with list format output\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/security.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker scout sbom --format=list hello\n```\n\n----------------------------------------\n\nTITLE: CircleCI Docker Build Cloud Integration\nDESCRIPTION: CircleCI configuration for Docker Build Cloud setup with separate jobs for pushing images and cache-only builds. Includes Buildx installation and cloud driver configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\n\njobs:\n  build_push:\n    machine:\n      image: ubuntu-2204:current\n    steps:\n      - checkout\n      - run: |\n          mkdir -vp ~/.docker/cli-plugins/\n          ARCH=amd64\n          BUILDX_URL=$(curl -s https://raw.githubusercontent.com/docker/actions-toolkit/main/.github/buildx-lab-releases.json | jq -r \".latest.assets[] | select(endswith(\\\"linux-$ARCH\\\"))\")\n          curl --silent -L --output ~/.docker/cli-plugins/docker-buildx $BUILDX_URL\n          chmod a+x ~/.docker/cli-plugins/docker-buildx\n      - run: echo \"$DOCKER_PAT\" | docker login --username $DOCKER_USER --password-stdin\n      - run: docker buildx create --use --driver cloud \"<ORG>/default\"\n      - run: |\n          docker buildx build \\\n          --platform linux/amd64,linux/arm64 \\\n          --push \\\n          --tag \"<IMAGE>\" .\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Extension with YAML Anchors\nDESCRIPTION: Example of using extensions to define shared environment variables across multiple services using YAML anchors and aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/extension.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nx-env: &env\n  environment:\n    - CONFIG_KEY\n    - EXAMPLE_KEY\n \nservices:\n  first:\n    <<: *env\n    image: my-image:latest\n  second:\n    <<: *env\n    image: another-image:latest\n```\n\n----------------------------------------\n\nTITLE: Listing Devicemapper File Sizes in Bash\nDESCRIPTION: This command shows how to list the sizes of the data and metadata files in the devicemapper directory using the 'ls' command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo ls -lh /var/lib/docker/devicemapper/\n\ntotal 1175492\n-rw------- 1 root root 100G Mar 30 05:22 data\n-rw------- 1 root root 2.0G Mar 31 11:17 metadata\n```\n\n----------------------------------------\n\nTITLE: WSL Version Check Command\nDESCRIPTION: Command to check the current version of WSL on Windows host system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/limitations.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwsl --version\n```\n\n----------------------------------------\n\nTITLE: Comparing Recently Built Image to Latest Tag in Docker Scout\nDESCRIPTION: Example of using docker scout compare to compare the most recently built image to the latest tag of a repository.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout compare --to namespace/repo:latest\n```\n\n----------------------------------------\n\nTITLE: Finding Docker Desktop Product Code for Uninstallation in PowerShell\nDESCRIPTION: Command to retrieve the product code (identifying number) for Docker Desktop from the Windows registry, which is needed for uninstallation if the original MSI file is unavailable.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nGet-WmiObject Win32_Product | Select-Object IdentifyingNumber, Name | Where-Object {$_.Name -eq \"Docker Desktop\"}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Tests with Docker Build\nDESCRIPTION: Command to build a Docker image targeting the test stage with flags to ensure tests always run and build output is visible. This approach is suitable for CI/CD pipelines.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/run-tests.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t node-docker-image-test --progress=plain --no-cache --target test .\n```\n\n----------------------------------------\n\nTITLE: Complex Profile Dependencies Example\nDESCRIPTION: Demonstrates a more complex setup with multiple services and profile dependencies, including development and debug configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/profiles.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    image: web\n\n  mock-backend:\n    image: backend\n    profiles: [\"dev\"]\n    depends_on:\n      - db\n\n  db:\n    image: mysql\n    profiles: [\"dev\"]\n\n  phpmyadmin:\n    image: phpmyadmin\n    profiles: [\"debug\"]\n    depends_on:\n      - db\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Troubleshooting Documentation\nDESCRIPTION: This YAML frontmatter block configures the metadata for a Docker troubleshooting documentation page. It specifies that the page should never be rendered directly ('render: never'), sets the page title to 'Troubleshoot', and assigns a weight of 40 to determine its position in the navigation hierarchy.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/troubleshoot/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Troubleshoot\nweight: 40\n---\n```\n\n----------------------------------------\n\nTITLE: Main Application Loop\nDESCRIPTION: Main program loop that accepts user input, performs sentiment analysis, and outputs results until user exits.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    while True:\n        input_text = input(\"Enter the text for semantic analysis (type 'exit' to end): \")\n\n        if input_text.lower() == 'exit':\n            print(\"Exiting...\")\n            break\n\n        result = perform_semantic_analysis(input_text)\n        print(f\"Sentiment: {result}\")\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Services\nDESCRIPTION: This command lists all services in the Kubernetes cluster to verify that the bb-entrypoint service was created correctly. The output shows the service's type, cluster IP, and port mappings.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kube-deploy.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl get services\n```\n\n----------------------------------------\n\nTITLE: Installing the vieux/sshfs Docker Plugin\nDESCRIPTION: This command installs the vieux/sshfs plugin for Docker, granting all necessary permissions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ docker plugin install --grant-all-permissions vieux/sshfs\n```\n\n----------------------------------------\n\nTITLE: Creating Windows Container Dockerfile and Content\nDESCRIPTION: PowerShell commands to create a sample Dockerfile and content file for testing BuildKit with Windows containers. The Dockerfile uses Windows Nano Server as the base image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#2025-04-11_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n> mkdir sample_dockerfile\n> cd sample_dockerfile\n> Set-Content Dockerfile @\"\nFROM mcr.microsoft.com/windows/nanoserver:ltsc2022\nUSER ContainerAdministrator\nCOPY hello.txt C:/\nRUN echo \"Goodbye!\" >> hello.txt\nCMD [\"cmd\", \"/C\", \"type C:\\\\hello.txt\"]\n\"@\nSet-Content hello.txt @\"\nHello from BuildKit!\nThis message shows that your installation appears to be working correctly.\n\"@\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Defined Bridge Network in Docker\nDESCRIPTION: Uses the docker network create command to create a custom bridge network named my-net. This creates an isolated network that containers can connect to for improved security and communication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create my-net\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image for JupyterLab\nDESCRIPTION: Command to build a Docker image from a Dockerfile using the current directory as context. The -t flag assigns the name 'my-jupyter-image' to the built image.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t my-jupyter-image .\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose in Project Harmonia Cloud Engine\nDESCRIPTION: This command runs a Docker Compose project in the cloud engine. It shows how to deploy multi-container applications in the cloud environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Node with GET Request in Docker Swarm API\nDESCRIPTION: API endpoint for retrieving detailed information about a specific node in a Docker Swarm cluster. The node can be specified by ID or name.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_89\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/nodes/24ifsmvkjbyhk HTTP/1.1\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"ID\": \"24ifsmvkjbyhk\",\n  \"Version\": {\n    \"Index\": 8\n  },\n  \"CreatedAt\": \"2016-06-07T20:31:11.853781916Z\",\n  \"UpdatedAt\": \"2016-06-07T20:31:11.999868824Z\",\n  \"Spec\": {\n    \"Name\": \"my-node\",\n    \"Role\": \"manager\",\n    \"Availability\": \"active\"\n    \"Labels\": {\n        \"foo\": \"bar\"\n    }\n  },\n  \"Description\": {\n    \"Hostname\": \"bf3067039e47\",\n    \"Platform\": {\n      \"Architecture\": \"x86_64\",\n      \"OS\": \"linux\"\n    },\n    \"Resources\": {\n      \"NanoCPUs\": 4000000000,\n      \"MemoryBytes\": 8272408576\n    },\n    \"Engine\": {\n      \"EngineVersion\": \"1.12.0\",\n      \"Labels\": {\n          \"foo\": \"bar\",\n      }\n      \"Plugins\": [\n        {\n          \"Type\": \"Volume\",\n          \"Name\": \"local\"\n        },\n        {\n          \"Type\": \"Network\",\n          \"Name\": \"bridge\"\n        }\n        {\n          \"Type\": \"Network\",\n          \"Name\": \"null\"\n        }\n        {\n          \"Type\": \"Network\",\n          \"Name\": \"overlay\"\n        }\n      ]\n    }\n  },\n  \"Status\": {\n    \"State\": \"ready\"\n  },\n  \"ManagerStatus\": {\n    \"Leader\": true,\n    \"Reachability\": \"reachable\",\n    \"Addr\": \"172.17.0.2:2377\"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Configuration for Docker Scout Artifactory Agent\nDESCRIPTION: Example JSON configuration file for the Docker Scout Artifactory agent. It specifies organization details, credentials, and repository filters for image analysis. The agent uses this configuration to connect to both Docker Hub and JFrog Artifactory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/registry/artifactory.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"agent_id\": \"acme-prod-agent\",\n  \"docker\": {\n    \"organization_name\": \"acme\",\n    \"username\": \"mobythewhale\",\n    \"pat\": \"dckr_pat__dsaCAs_xL3kNyupAa7dwO1alwg\"\n  },\n  \"artifactory\": [\n    {\n      \"base_url\": \"https://acme.jfrog.io\",\n      \"username\": \"acmeagent\",\n      \"password\": \"hayKMvFKkFp42RAwKz2K\",\n      \"image_filters\": [\n        {\n          \"repository\": \"dev-local\",\n          \"images\": [\"internal/repo1\", \"internal/repo2\"]\n        },\n        {\n          \"repository\": \"prod-local\",\n          \"images\": [\"staging/repo1\", \"prod/repo1\"]\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Docker Buildx Bake Command\nDESCRIPTION: This console command demonstrates how to invoke a build using a Bake file. It executes the 'default' group, which builds the 'frontend' and 'backend' targets concurrently.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake\n```\n\n----------------------------------------\n\nTITLE: Example of Mounting a Volume with --volume\nDESCRIPTION: Demonstrates using the --volume/-v flag to mount 'myvolume' to '/data' in read-only mode. This example shows the compact syntax for volume mounting.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -v myvolume:/data:ro\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Remote Debugging Support\nDESCRIPTION: An updated Docker Compose configuration that targets the development stage of the Dockerfile and exposes port 8000 for remote debugging of the Java application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n      target: development\n    ports:\n      - 8080:8080\n      - 8000:8000\n    depends_on:\n      db:\n        condition: service_healthy\n    environment:\n      - POSTGRES_URL=jdbc:postgresql://db:5432/petclinic\n  db:\n    image: postgres\n    restart: always\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=petclinic\n      - POSTGRES_USER=petclinic\n      - POSTGRES_PASSWORD=petclinic\n    ports:\n      - 5432:5432\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\", \"-U\", \"petclinic\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\n```\n\n----------------------------------------\n\nTITLE: Basic File-Based Config in Docker Compose\nDESCRIPTION: Demonstrates creating a config named http_config from a local httpd.conf file. The config will be created with the project name prefix when deployed.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/configs.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfigs:\n  http_config:\n    file: ./httpd.conf\n```\n\n----------------------------------------\n\nTITLE: Installing Wasmtime shim to PATH\nDESCRIPTION: Command to move the built Wasmtime containerd shim binary to a directory in the system PATH for use by Docker.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/alternative-runtimes.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ mv ./containerd-shim-wasmtime-v1 /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Example Docker Plugin Configuration JSON\nDESCRIPTION: This JSON snippet demonstrates the configuration for the 'tiborvass/sample-volume-plugin' Docker plugin. It includes various fields such as arguments, description, documentation link, entrypoint, environment variables, interface details, and Linux-specific settings.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/config.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Args\": {\n    \"Description\": \"\",\n    \"Name\": \"\",\n    \"Settable\": null,\n    \"Value\": null\n  },\n  \"Description\": \"A sample volume plugin for Docker\",\n  \"Documentation\": \"https://docs.docker.com/engine/extend/plugins/\",\n  \"Entrypoint\": [\n    \"/usr/bin/sample-volume-plugin\",\n    \"/data\"\n  ],\n  \"Env\": [\n    {\n      \"Description\": \"\",\n      \"Name\": \"DEBUG\",\n      \"Settable\": [\n        \"value\"\n      ],\n      \"Value\": \"0\"\n    }\n  ],\n  \"Interface\": {\n    \"Socket\": \"plugin.sock\",\n    \"Types\": [\n      \"docker.volumedriver/1.0\"\n    ]\n  },\n  \"Linux\": {\n    \"Capabilities\": null,\n    \"AllowAllDevices\": false,\n    \"Devices\": null\n  },\n  \"Mounts\": null,\n  \"Network\": {\n    \"Type\": \"\"\n  },\n  \"PropagatedMount\": \"/data\",\n  \"User\": {},\n  \"Workdir\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Google Cloud Logging Driver\nDESCRIPTION: Command to run a Docker container with the Google Cloud Logging driver specified using the --log-driver flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/gcplogs.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --log-driver=gcplogs ...\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Variable with Default Name to Docker Build\nDESCRIPTION: Example showing how to pass an API_TOKEN environment variable as a secret without specifying the env parameter.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --secret id=API_TOKEN .\n```\n\n----------------------------------------\n\nTITLE: Building an Optimized Spring Boot Docker Image\nDESCRIPTION: Command to build a Docker image using the multi-stage Dockerfile, creating a production-ready Spring Boot application container.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t spring-helloworld-builder .\n```\n\n----------------------------------------\n\nTITLE: Using the Table Function in Docker Command Output\nDESCRIPTION: The table function specifies which fields to display in tabular format. This example formats docker image list output with specific columns for ID, Repository, Tag, and Size.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker image list --format \"table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}\\t{{.Size}}\"\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker CLI Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the documentation page, including the title, aliases for URL redirects, and layout specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/service/scale.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_service_scale\ntitle: docker service scale\naliases:\n- /edge/engine/reference/commandline/service_scale/\n- /engine/reference/commandline/service_scale/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Applying Netplan Configuration\nDESCRIPTION: Command to apply the updated Netplan configuration. This activates the changes that prevent Netplan from managing Docker interfaces.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ sudo netplan apply\n```\n\n----------------------------------------\n\nTITLE: Setting Git Remote Origin for GitHub Repository\nDESCRIPTION: Command to update the remote repository URL to point to a newly created GitHub repository. This needs to be customized with the user's GitHub username and repository name.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/configure-ci-cd.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git remote set-url origin https://github.com/your-username/your-repository.git\n```\n\n----------------------------------------\n\nTITLE: Using Container Network Mode for Inter-Container Communication\nDESCRIPTION: This example demonstrates running Redis in a container with Redis binding to localhost, then connecting another container to the Redis container's network. This allows the second container to communicate with Redis through localhost.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name redis example/redis --bind 127.0.0.1\n$ docker run --rm -it --network container:redis example/redis-cli -h 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Ignoring Base Images in Docker Scout Comparison\nDESCRIPTION: Example of comparing two Docker images while ignoring vulnerabilities introduced from the base image.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout compare --ignore-base --to namespace/repo:latest namespace/repo:v1.2.3-pre\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker Image Tag\nDESCRIPTION: Command to remove a specific tag from a Docker image using the rmi command, which untags the image but keeps the image itself if other tags still reference it.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/build-images.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker rmi docker-rust-image:v1.0.0\nUntagged: docker-rust-image:v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating and Listing Docker Configs\nDESCRIPTION: Commands to create a Docker config from the Nginx configuration file and list all available configs in the system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ docker config create site.conf site.conf\n\n$ docker config ls\n\nID                          NAME                CREATED             UPDATED\n4ory233120ccg7biwvy11gl5z   site.conf           4 seconds ago       4 seconds ago\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Custom AppArmor Profile\nDESCRIPTION: Command to run a Docker container with a custom AppArmor profile using the security-opt flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/apparmor.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it --security-opt apparmor=your_profile hello-world\n```\n\n----------------------------------------\n\nTITLE: Setting Default WSL Distribution in Windows\nDESCRIPTION: Command to change the default WSL distribution. Docker-WSL integration is enabled on the default distribution, so this command helps specify which distribution should be the default.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/wsl/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwsl --set-default <distribution name>\n```\n\n----------------------------------------\n\nTITLE: Creating a Macvlan Network in Bridge Mode with Docker\nDESCRIPTION: Creates a Macvlan network called 'pub_net' that bridges with the physical interface 'eth0'. The network is configured with a specific subnet and gateway address.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/macvlan.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d macvlan \\\n  --subnet=172.16.86.0/24 \\\n  --gateway=172.16.86.1 \\\n  -o parent=eth0 pub_net\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon JSON File Logger Configuration\nDESCRIPTION: Example configuration in daemon.json for setting json-file as the default logging driver with log rotation options. Specifies maximum log file size and number of log files to retain.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/json-file.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Host Connection Format Specification\nDESCRIPTION: Format specification for the -H option showing the accepted syntax for TCP and Unix socket connections.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ntcp://[host]:[port][path] or unix://path\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Data Directory in JSON\nDESCRIPTION: JSON configuration example that changes Docker's data directory location from the default to a custom path. This affects where Docker stores all container, image, volume, and other data.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data-root\": \"/mnt/docker-data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Test Container in Docker\nDESCRIPTION: This Dockerfile creates an image that prints numbers 1 to 5 and then exits, used to demonstrate restart policy behavior.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/start-containers-automatically.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM busybox:latest\nCOPY --chmod=755 <<\"EOF\" /start.sh\necho \"Starting...\"\nfor i in $(seq 1 5); do\n  echo \"$i\"\n  sleep 1\ndone\necho \"Exiting...\"\nexit 1\nEOF\nENTRYPOINT /start.sh\n```\n\n----------------------------------------\n\nTITLE: Examining IPv6 Network Configuration in Docker Container\nDESCRIPTION: Shows how to display IPv6 network interface configuration inside a Docker container using 'ip a' and 'ip -6 route' commands. Demonstrates the interface configuration with dual-stack addressing.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nip a show eth0\nip -6 route\n```\n\n----------------------------------------\n\nTITLE: Version Pinning in apt-get Install\nDESCRIPTION: Example showing how to pin package versions in apt-get install commands to ensure consistent builds and avoid unexpected updates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_13\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    package-bar \\\n    package-baz \\\n    package-foo=1.3.*\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Restore in Docker Daemon JSON\nDESCRIPTION: JSON configuration to enable live restore feature in Docker daemon settings file (/etc/docker/daemon.json). This setting keeps containers running when the daemon becomes unavailable.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/live-restore.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"live-restore\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping UDP port in Docker container\nDESCRIPTION: Creates a container with UDP port 5000 mapped to port 80 on localhost, demonstrating how to specify a UDP port mapping with the '/udp' suffix.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 127.0.0.1:80:5000/udp training/webapp python app.py\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Docker Documentation Page\nDESCRIPTION: This YAML snippet sets up the frontmatter for a Docker documentation page about settings and maintenance. It specifies that the page should never be rendered during the build process, sets the title, and assigns a weight for ordering.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/settings-and-maintenance/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Settings and maintenance\nweight: 40\n---\n```\n\n----------------------------------------\n\nTITLE: Remove Volume API Request in Docker\nDESCRIPTION: HTTP request to remove a volume by name from Docker.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_69\n\nLANGUAGE: http\nCODE:\n```\nDELETE /v1.24/volumes/tardis HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Setting Dockerfile Syntax via Build Arguments\nDESCRIPTION: Shows how to specify a custom Dockerfile frontend using the BUILDKIT_SYNTAX build argument on the command line instead of in the Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/frontend.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build --build-arg BUILDKIT_SYNTAX=docker/dockerfile:1 .\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker Build Environment with Docker Scout in GitLab CI\nDESCRIPTION: Configures a GitLab CI job to build Docker images using Docker-in-Docker, installs the Docker Scout CLI, and sets up required authentication for Docker registries.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/ci/gitlab.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndocker-build:\n  image: docker:latest\n  stage: build\n  services:\n    - docker:dind\n  before_script:\n    - docker login -u \"$CI_REGISTRY_USER\" -p \"$CI_REGISTRY_PASSWORD\" $CI_REGISTRY\n\n    # Install curl and the Docker Scout CLI\n    - |\n      apk add --update curl\n      curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- \n      apk del curl \n      rm -rf /var/cache/apk/*\n    # Login to Docker Hub required for Docker Scout CLI\n    - echo \"$DOCKER_HUB_PAT\" | docker login -u \"$DOCKER_HUB_USER\" --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies Configuration\nDESCRIPTION: Requirements file specifying the Python package dependencies needed for the application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#2025-04-11_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n# 01 sentiment_analysis\nnltk==3.6.5\n\n...\n```\n\n----------------------------------------\n\nTITLE: Inspecting Container Port Mappings in Docker\nDESCRIPTION: Displays the port mapping configuration for a Docker container using the inspect command with formatting to show only the ports information. Shows the difference between IPv4 and IPv6 port bindings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker container inspect <id> --format \"{{json .NetworkSettings.Ports}}\"\n{\"80/tcp\":[{\"HostIp\":\"0.0.0.0\",\"HostPort\":\"8080\"},{\"HostIp\":\"::\",\"HostPort\":\"\"}]}\n```\n\n----------------------------------------\n\nTITLE: Using SBOM Files in Docker Scout GitHub Action\nDESCRIPTION: Examples of using SBOM files in SPDX, in-toto SPDX, and syft-json formats with the Docker Scout GitHub Action.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/release-notes/cli.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nuses: docker/scout-action@v1\nwith:\n    command: cves\n    image: sbom://alpine.spdx.json\n```\n\nLANGUAGE: yaml\nCODE:\n```\nuses: docker/scout-action@v1\nwith:\n    command: cves\n    image: sbom://alpine.syft.json\n```\n\n----------------------------------------\n\nTITLE: Connecting to Container Port from Host\nDESCRIPTION: Command to connect to the port exposed by a container using host networking from the host machine using netcat.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/host.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nc localhost 8000\n```\n\n----------------------------------------\n\nTITLE: Compose File with Environment Variable Support\nDESCRIPTION: A Compose file example showing how to use environment variables in image tags. The TAG variable can be defined in a .env file or system environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/compose-file.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# compose.yaml\nservices:\n  webapp:\n    image: docker.io/username/webapp:${TAG:-v1.0.0}\n    build:\n      dockerfile: Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Listing Block Devices and Pools in Bash\nDESCRIPTION: This command uses the lsblk utility to display devices and their pools from the operating system's perspective.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo lsblk\n\nNAME                    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nxvda                    202:0    0    8G  0 disk\n└─xvda1                 202:1    0    8G  0 part /\nxvdf                    202:80   0  100G  0 disk\n├─docker-thinpool_tmeta 253:0    0 1020M  0 lvm\n│ └─docker-thinpool     253:2    0   95G  0 lvm\n└─docker-thinpool_tdata 253:1    0   95G  0 lvm\n  └─docker-thinpool     253:2    0   95G  0 lvm\n```\n\n----------------------------------------\n\nTITLE: Creating an IPv6-Only Bridge Network in Docker\nDESCRIPTION: Creates a network that only uses IPv6 addressing by disabling IPv4 with the --ipv4=false option. This allows for pure IPv6 container networking environments.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create --ipv6 --ipv4=false v6net\n```\n\n----------------------------------------\n\nTITLE: Fedora Docker Desktop Removal Commands\nDESCRIPTION: Commands for removing Docker Desktop and cleaning up associated files on Fedora\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/uninstall.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf remove docker-desktop\n$ rm -r $HOME/.docker/desktop\n$ sudo rm /usr/local/bin/com.docker.cli\n$ sudo apt purge docker-desktop\n```\n\n----------------------------------------\n\nTITLE: Pinning Docker Image with Digest in FROM Instruction\nDESCRIPTION: Example showing how to pin a specific image version using its SHA256 digest to ensure build consistency, even if the tag is updated by the publisher.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:3.19@sha256:13b7e62e8df80264dbb747995705a986aa530415763a6c58f84a3ca8af9a5bcd\n```\n\n----------------------------------------\n\nTITLE: Querying Ask Gordon's Capabilities via CLI\nDESCRIPTION: Example of using the Docker CLI to ask Gordon about its capabilities. This command demonstrates how to interact with Ask Gordon through the command line interface.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker ai \"What can you do?\"\n```\n\n----------------------------------------\n\nTITLE: Security Profile Configuration\nDESCRIPTION: Example of seccomp profile configuration changes, including support for DefaultErrnoRet and new syscall permissions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/23.0.md#2025-04-11_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n--seccomp-profile=\"builtin\" // Default profile name changed from default to builtin\nseccomp(2)            // New flags support added\nDefaultErrnoRet      // New explicit field added to default profile\n```\n\n----------------------------------------\n\nTITLE: Publishing Both TCP and UDP Ports in Docker Swarm Service\nDESCRIPTION: This command maps both TCP and UDP port 80 on the service to port 8080 on the routing mesh. It demonstrates how to publish multiple ports with different protocols.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n-p 8080:80/tcp -p 8080:80/udp\n```\n\nLANGUAGE: bash\nCODE:\n```\n-p published=8080,target=80,protocol=tcp -p published=8080,target=80,protocol=udp\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Service with Update Behavior Configuration\nDESCRIPTION: This snippet demonstrates creating a Docker service with specific update behavior settings. It configures update delay, parallelism, and failure action for a service with 10 replicas.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_34\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --replicas 10 \\\n  --name my_web \\\n  --update-delay 10s \\\n  --update-parallelism 2 \\\n  --update-failure-action continue \\\n  alpine\n```\n\n----------------------------------------\n\nTITLE: Pushing a Tagged Docker Image to Docker Hub\nDESCRIPTION: This command pushes a tagged Docker image to a repository on Docker Hub. The command requires specifying the organization or user namespace, repository name, and optionally a tag. After execution, the image will be uploaded and available for use in Docker Hub.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/hub-images/tags.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker push <org-or-user-namespace>/<repo-name>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Application Container Log Output\nDESCRIPTION: Example log output when starting a Spring Boot application in a Docker container, showing the initialization process and Spring banner.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#2025-04-11_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n[INFO] --- spring-boot:3.3.4:run (default-cli) @ spring-boot-docker ---\n[INFO] Attaching agents: []\n\n     .   ____          _            __ _ _\n    /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n   ( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n    \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n     '  |____| .__|_| |_|_| |_\\__, | / / / /\n    =========|_|==============|___/=/_/_/_/\n\n    :: Spring Boot ::                (v3.3.4)\n\n2024-09-29T23:54:07.157Z  INFO 159 --- [spring-boot-docker] [           main]\nc.e.s.SpringBootDockerApplication        : Starting SpringBootDockerApplication using Java\n21.0.2 with PID 159 (/app/target/classes started by root in /app)\n ….\n```\n\n----------------------------------------\n\nTITLE: Building Tagged Docker Image\nDESCRIPTION: Command to build a Docker image with a specific tag (version 3.0). The tag helps in version control and referencing specific builds of the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/using-the-build-cache.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t node-app:3.0 .\n```\n\n----------------------------------------\n\nTITLE: Inspecting Container in TypeScript\nDESCRIPTION: Navigates to the Inspect container view for a specific container using its full ID. Returns a promise that fails if the container doesn't exist.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/NavigationIntents.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.desktopUI.navigate.viewContainerInspect(id)\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Docker Containers\nDESCRIPTION: This command demonstrates how to set environment variables inside a container using the -e flag with docker run. It sets a variable named 'foo' with value 'bar' and runs the env command to display all environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -e foo=bar postgres env\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Service with a Specific Image Tag\nDESCRIPTION: Creates a Docker service named 'myservice' using the Ubuntu 16.04 image. This demonstrates how to specify a particular version of an image when creating a service.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name=\"myservice\" ubuntu:16.04\n```\n\n----------------------------------------\n\nTITLE: Defining Docker CLI Documentation Structure in Markdown\nDESCRIPTION: This YAML front matter defines the metadata for the 'docker trust key generate' command documentation, including data organization attributes, title, aliases for alternative URL paths, and layout specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/trust/key/generate.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_trust_key_generate\ntitle: docker trust key generate\naliases:\n- /edge/engine/reference/commandline/trust_key_generate/\n- /engine/reference/commandline/trust_key_generate/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Multiple Profile Configuration Example\nDESCRIPTION: Example showing how to configure services with dependencies and multiple profiles for development and debugging purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/profiles.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    image: backend\n\n  db:\n    image: mysql\n\n  db-migrations:\n    image: backend\n    command: myapp migrate\n    depends_on:\n      - db\n    profiles:\n      - tools\n```\n\n----------------------------------------\n\nTITLE: Dockerignore Pattern Example\nDESCRIPTION: Shows a sample .dockerignore pattern that excludes all files in tmp directories.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/copy-ignored-file.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n*/tmp/*\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Always Restart Policy\nDESCRIPTION: This command runs a container from the 'startstop' image with an 'always' restart policy, demonstrating the behavior of foreground containers with restart policies.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/start-containers-automatically.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --restart always startstop\n```\n\n----------------------------------------\n\nTITLE: Creating Attachable Overlay Network\nDESCRIPTION: Creates an attachable overlay network that can be used by standalone containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create --driver=overlay --attachable test-net\n```\n\n----------------------------------------\n\nTITLE: Lint Target and Validation Group\nDESCRIPTION: HCL configuration for lint target and group definition combining test and lint targets\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"lint\" {\n  target = \"lint\"\n  output = [\"type=cacheonly\"]\n}\n\ngroup \"validate\" {\n  targets = [\"test\", \"lint\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Compose File with x-bake Extension Fields\nDESCRIPTION: An example showing how to use the x-bake extension fields in a Compose file to specify additional build options not available in standard Compose specification, such as multi-platform builds, caching options, and secret handling.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/compose-file.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# compose.yaml\nservices:\n  addon:\n    image: ct-addon:bar\n    build:\n      context: .\n      dockerfile: ./Dockerfile\n      args:\n        CT_ECR: foo\n        CT_TAG: bar\n      x-bake:\n        tags:\n          - ct-addon:foo\n          - ct-addon:alp\n        platforms:\n          - linux/amd64\n          - linux/arm64\n        cache-from:\n          - user/app:cache\n          - type=local,src=path/to/cache\n        cache-to:\n          - type=local,dest=path/to/cache\n        pull: true\n\n  aws:\n    image: ct-fake-aws:bar\n    build:\n      dockerfile: ./aws.Dockerfile\n      args:\n        CT_ECR: foo\n        CT_TAG: bar\n      x-bake:\n        secret:\n          - id=mysecret,src=./secret\n          - id=mysecret2,src=./secret2\n        platforms: linux/arm64\n        output: type=docker\n        no-cache: true\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command\nDESCRIPTION: Example of Docker run command with interactive and TTY flags\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it\n```\n\n----------------------------------------\n\nTITLE: Corrupting Layer Data\nDESCRIPTION: Adds malicious data to one of the image layers to test trust verification\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_sandbox.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nroot@65084fc6f047:/# echo \"Malicious data\" > data\n```\n\n----------------------------------------\n\nTITLE: Node.js Server Startup Output\nDESCRIPTION: Server startup output showing the configured environment variables and the server listening URL.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n> express-api-starter@1.2.0 start\n> node src/index.js\n\nAPI_ENDPOINT_BASE: http://dataservice.accuweather.com\nACCUWEATHER_API_KEY is set: true \nListening: http://localhost:5001\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image with a Tag\nDESCRIPTION: Command to build a Docker image from a Dockerfile in the current directory with a specified tag. The --tag flag gives the image a human-readable name.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --tag docker-gs-ping .\n```\n\n----------------------------------------\n\nTITLE: Docker Image Load Command\nDESCRIPTION: Command to load Docker images from a local tar archive file that was previously saved using docker image save.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/settings-and-maintenance/backup-and-restore.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker image load -i images.tar\n```\n\n----------------------------------------\n\nTITLE: Alternative syntax for linking Docker containers\nDESCRIPTION: Shows an alternative syntax for container linking where the alias matches the name of the linked container, simplifying the --link flag usage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -P --name web --link db training/webapp python app.py\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for PostgreSQL with Seeding\nDESCRIPTION: Docker Compose YAML file that sets up a PostgreSQL service with environment variables, port mapping, and volume configuration for persistent data storage. It builds from a Dockerfile that includes the seed script.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: my_postgres_db\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: mysecretpassword\n      POSTGRES_DB: sampledb\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - data_sql:/var/lib/postgresql/data   # Persistent data storage\n\nvolumes:\n  data_sql:\n```\n\n----------------------------------------\n\nTITLE: Running the Built Windows Container Image\nDESCRIPTION: Command to run the Windows container image that was built and pushed to a registry. This verifies that the image was correctly built and can be executed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n> docker run <username>/hello-buildkit\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Entrypoint in Dockerfile\nDESCRIPTION: Sets the default executable for the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_19\n\nLANGUAGE: dockerfile\nCODE:\n```\nENTRYPOINT [\"/app/entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Opening VS Code in current directory within WSL\nDESCRIPTION: This command opens Visual Studio Code in the current directory within the WSL environment, allowing for remote development in the Linux distribution.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/wsl/use-wsl.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ code .\n```\n\n----------------------------------------\n\nTITLE: Creating an ext4 Filesystem on a File\nDESCRIPTION: This command creates an ext4 filesystem on the previously created disk.raw file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ mkfs.ext4 disk.raw\n```\n\n----------------------------------------\n\nTITLE: Running JupyterLab with Bind Mount on Mac/Linux\nDESCRIPTION: Command to run JupyterLab with the current directory bind-mounted to the container, allowing access to local notebook files from within JupyterLab.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -p 8889:8888 -v \"$(pwd):/home/jovyan/work\" quay.io/jupyter/base-notebook start-notebook.py --NotebookApp.token='my-token'\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with s3cmd (List Bucket Command)\nDESCRIPTION: This console command shows how to run a Docker container with the s3cmd image while passing specific parameters to execute a command. It uses s3cmd's 'ls' command to list the contents of an S3 bucket.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ docker run s3cmd ls s3://mybucket\n```\n\n----------------------------------------\n\nTITLE: Pruning All Unused Docker Images\nDESCRIPTION: This command removes all images that aren't used by existing containers. It uses the -a flag to include all unused images, not just dangling ones.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker image prune -a\n\nWARNING! This will remove all images without at least one container associated to them.\nAre you sure you want to continue? [y/N] y\n```\n\n----------------------------------------\n\nTITLE: Running a container from a specific image digest\nDESCRIPTION: Demonstrates how to run a container using a specific image digest instead of a tag, ensuring you get exactly the same image content regardless of tag changes.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run alpine@sha256:9cacb71397b640eca97488cf08582ae4e4068513101088e9f96c9814bfda95e0 date\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm on Manager Node\nDESCRIPTION: Command to initialize a Docker swarm on the manager node. The --advertise-addr flag specifies which network interface to use for swarm communication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm init --advertise-addr=<IP-ADDRESS-OF-MANAGER>\n```\n\n----------------------------------------\n\nTITLE: Renaming Git Branch to 'main'\nDESCRIPTION: Command to rename the current Git branch to 'main', aligning with GitHub's default branch naming convention.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/configure-ci-cd.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit branch -M main\n```\n\n----------------------------------------\n\nTITLE: DNS Resolver Warning Message\nDESCRIPTION: Warning shown when Docker detects that the DNS resolver in /etc/resolv.conf points to a local address that containers cannot access, causing Docker to use external DNS servers instead.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nWARNING: Local (127.0.0.1) DNS resolver found in resolv.conf and containers\ncan't use it. Using default external servers : [8.8.8.8 8.8.4.4]\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Service with Placement Preference\nDESCRIPTION: This snippet demonstrates creating a Docker service with a placement preference to spread the deployment across nodes based on the 'datacenter' label. It creates 9 replicas of a Redis service.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --replicas 9 \\\n  --name redis_2 \\\n  --placement-pref 'spread=node.labels.datacenter' \\\n  redis:7.4.0\n```\n\n----------------------------------------\n\nTITLE: Defining Repository in Docker Image Tarball\nDESCRIPTION: This JSON shows the format for the repositories file in a Docker image tarball, mapping repository and tag names to layer IDs.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n\"hello-world\":\n    {\"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Docker Image via API\nDESCRIPTION: POST endpoint to tag a Docker image into a repository with an optional tag name.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_42\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/images/test/tag?repo=myrepo&tag=v42 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Namespaces using TypeScript\nDESCRIPTION: Fetches Kubernetes namespaces using kubectl with custom column formatting and specific context.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/guides/kubernetes.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n  \"get\",\n  \"namespaces\",\n  \"--no-headers\",\n  \"-o\",\n  'custom-columns=\":metadata.name\"',\n  \"--context\",\n  \"docker-desktop\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Deployment Status\nDESCRIPTION: This command checks the status of Kubernetes deployments to verify that the Node.js application deployment is ready and available.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/deploy.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl get deployments\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Desktop Privileged Helper on Mac\nDESCRIPTION: This bash script demonstrates how to remove the Docker Desktop privileged helper process on Mac. It involves unloading the launchd process, removing related files, and verifying the removal.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/mac-permission-requirements.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ps aux | grep vmnetd\nroot             28739   0.0  0.0 34859128    228   ??  Ss    6:03PM   0:00.06 /Library/PrivilegedHelperTools/com.docker.vmnetd\nuser             32222   0.0  0.0 34122828    808 s000  R+   12:55PM   0:00.00 grep vmnetd\n\n$ sudo launchctl unload -w /Library/LaunchDaemons/com.docker.vmnetd.plist\nPassword:\n\n$ ps aux | grep vmnetd\nuser             32242   0.0  0.0 34122828    716 s000  R+   12:55PM   0:00.00 grep vmnetd\n\n$ rm /Library/LaunchDaemons/com.docker.vmnetd.plist\n\n$ rm /Library/PrivilegedHelperTools/com.docker.vmnetd\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Engine from RPM Package on SLES\nDESCRIPTION: Command to manually install Docker Engine using a downloaded RPM package file, for air-gapped systems or specific requirements.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/sles.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ sudo zypper install /path/to/package.rpm\n```\n\n----------------------------------------\n\nTITLE: Successfully Mounting Docker Socket with Allowed Image\nDESCRIPTION: This console example shows a successful attempt to mount the Docker socket after configuring the image list to allow the docker:cli image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/config.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it -v /var/run/docker.sock:/var/run/docker.sock docker:cli sh\n/ #\n```\n\n----------------------------------------\n\nTITLE: Configuring iptables for Docker Forwarding\nDESCRIPTION: Sets up an iptables rule in the DOCKER-USER chain to allow packet forwarding between specified network interfaces. This configuration is useful when Docker is running on a router and you need to allow specific traffic forwarding.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ iptables -I DOCKER-USER -i src_if -o dst_if -j ACCEPT\n```\n\n----------------------------------------\n\nTITLE: Creating Nginx Service with Published Port in Docker Swarm\nDESCRIPTION: Example command that creates an Nginx service with 2 replicas, publishing container port 80 to port 8080 on the routing mesh so it's accessible from any node in the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --name my-web \\\n  --publish published=8080,target=80 \\\n  --replicas 2 \\\n  nginx\n```\n\n----------------------------------------\n\nTITLE: Setting COMPOSE_CONVERT_WINDOWS_PATHS environment variable\nDESCRIPTION: Shows how to enable Windows path conversion in Docker Compose by setting an environment variable. This is useful when using Compose with Docker Toolbox/Machine on Windows.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nCOMPOSE_CONVERT_WINDOWS_PATHS=1\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Application\nDESCRIPTION: Command to build and start the Docker Compose application from within the 'winy' directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rag-ollama/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers\nDESCRIPTION: Shows all running containers, including the four Alpine containers just created.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker container ls\n\nCONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS               NAMES\n156849ccd902        alpine              \"ash\"               41 seconds ago       Up 41 seconds                           alpine4\nfa1340b8d83e        alpine              \"ash\"               51 seconds ago       Up 51 seconds                           alpine3\na535d969081e        alpine              \"ash\"               About a minute ago   Up About a minute                       alpine2\n0a02c449a6e9        alpine              \"ash\"               About a minute ago   Up About a minute                       alpine1\n```\n\n----------------------------------------\n\nTITLE: Including with Override File in Docker Compose\nDESCRIPTION: Example of including a third-party Compose file with a local override file to customize specific components without modifying the original.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/include.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n  - path : \n      - third-party/compose.yaml\n      - override.yaml  # local override for third-party model\n```\n\n----------------------------------------\n\nTITLE: Performing Text Translation to French\nDESCRIPTION: Translates the user input text to French using the googletrans Translator. The dest parameter specifies the destination language as French ('fr').\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n      translated_text = translator.translate(input_text, dest='fr').text\n```\n\n----------------------------------------\n\nTITLE: Verifying Multi-Platform Binary Output\nDESCRIPTION: Console command to view the directory structure of the exported binaries, showing the Neovim executables for both AMD64 and ARM64 platforms.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ tree ./bin\n./bin\n├── linux_amd64\n│   └── nvim\n└── linux_arm64\n    └── nvim\n\n3 directories, 2 files\n```\n\n----------------------------------------\n\nTITLE: Pinning Alpine Version in Dockerfile with Bake\nDESCRIPTION: A Dockerfile and HCL Bake configuration that demonstrates how to pin the Alpine image to a specific version (3.13) using a named context.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/contexts.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine\nRUN echo \"Hello world\"\n```\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  contexts = {\n    alpine = \"docker-image://alpine:3.13\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Interactive Alpine Container\nDESCRIPTION: Starts an interactive Alpine container connected to the overlay network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --name alpine1 --network test-net alpine\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Service B Using Service A as Base\nDESCRIPTION: This Dockerfile demonstrates how to use another service's image (service_a) as the base image for building service B. This allows for layer reuse between services.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/dependent-images.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM service_a\n# build service b\n```\n\n----------------------------------------\n\nTITLE: Exploring Container Filesystem\nDESCRIPTION: Commands to explore the root directory of the container filesystem and verify the bind mount is working correctly.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nroot@ac1237fad8db:/# pwd\n/\nroot@ac1237fad8db:/# ls\nbin   dev  home  media  opt   root  sbin  srv  tmp  var\nboot  etc  lib   mnt    proc  run   src   sys  usr\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Docker Commands\nDESCRIPTION: New platform flag implementation for docker load, save, and history commands to handle platform-specific operations on multi-platform images.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker load --platform\ndocker save --platform\ndocker history --platform\n```\n\n----------------------------------------\n\nTITLE: Example Dockerfile Demonstrating Bind Mount Behavior\nDESCRIPTION: A demonstration of how bind mounts temporarily override the container's filesystem during a RUN instruction, showing the difference between mounted and unmounted directory contents.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:latest\nWORKDIR /work\nRUN touch foo.txt\nRUN --mount=type=bind,target=. ls\nRUN ls\n```\n\n----------------------------------------\n\nTITLE: Cloning PHP Sample Application\nDESCRIPTION: Command to clone the sample PHP application repository that contains a basic hello world app and counter functionality with PHPUnit testing.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/docker/docker-php-sample\n```\n\n----------------------------------------\n\nTITLE: Listing All Docker Networks\nDESCRIPTION: This command lists all Docker networks available on the system, including both default networks and custom networks like the newly created 'mynetwork'.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network ls\n```\n\n----------------------------------------\n\nTITLE: Using a containerd shim runtime with docker run\nDESCRIPTION: Example command showing how to use a containerd shim runtime by specifying the fully qualified runtime name with the --runtime flag during container creation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/alternative-runtimes.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --runtime io.containerd.kata.v2 hello-world\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Alpha Publish Command Options Table in Markdown\nDESCRIPTION: A markdown table displaying the available options for the 'docker compose alpha publish' command, including option names, types, default values, and descriptions for each parameter.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_alpha_publish.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                      | Type     | Default | Description                                                                    |\n|:--------------------------|:---------|:--------|:-------------------------------------------------------------------------------|\n| `--dry-run`               | `bool`   |         | Execute command in dry run mode                                                |\n| `--oci-version`           | `string` |         | OCI image/artifact specification version (automatically determined by default) |\n| `--resolve-image-digests` | `bool`   |         | Pin image tags to digests                                                      |\n| `--with-env`              | `bool`   |         | Include environment variables in the published OCI artifact                    |\n| `-y`, `--yes`             | `bool`   |         | Assume \"yes\" as answer to all prompts                                          |\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Toast in Docker Desktop Extension (TypeScript)\nDESCRIPTION: Demonstrates how to display a success toast message. This method is deprecated and will be removed in a future version. The 'success' method from Toast is recommended as a replacement.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/DockerDesktopClient.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.toastSuccess(\"message\");\n```\n\n----------------------------------------\n\nTITLE: Example of Variable Typo Detection\nDESCRIPTION: Shows how the check can detect typos in variable names, with the example showing a misspelled PATH variable.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nENV PATH=$PAHT:/app/bin\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Exec Command Options\nDESCRIPTION: Available command line options for docker compose exec, including detach mode, environment variables, user permissions, and working directory settings\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_exec.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name              | Type          | Default | Description                                                                      |\n|:------------------|:--------------|:--------|:----------------------------------------------------------------------------------|\n| `-d`, `--detach`  | `bool`        |         | Detached mode: Run command in the background                                     |\n| `--dry-run`       | `bool`        |         | Execute command in dry run mode                                                  |\n| `-e`, `--env`     | `stringArray` |         | Set environment variables                                                        |\n| `--index`         | `int`         | `0`     | Index of the container if service has multiple replicas                          |\n| `-T`, `--no-TTY`  | `bool`        | `true`  | Disable pseudo-TTY allocation. By default `docker compose exec` allocates a TTY. |\n| `--privileged`    | `bool`        |         | Give extended privileges to the process                                          |\n| `-u`, `--user`    | `string`      |         | Run the command as this user                                                     |\n| `-w`, `--workdir` | `string`      |         | Path to workdir directory for this command                                       |\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Permissions for User Installation\nDESCRIPTION: Command to apply executable permissions to the Docker Compose binary when installed for the current user.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Viewing Routing Table in IPvlan L3 Mode Container\nDESCRIPTION: Shows the routing table configuration inside a container connected to an IPvlan L3 mode network. In L3 mode, the default gateway points to the container's network interface.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n# Inside an L3 mode container\n$$ ip route\n default dev eth0\n 192.168.214.0/24 dev eth0  src 192.168.214.10\n```\n\n----------------------------------------\n\nTITLE: Calling OpenAI API from Host using Unix Socket\nDESCRIPTION: Example bash script showing how to call the OpenAI-compatible chat completions endpoint through the Docker socket from the host using curl.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\ncurl --unix-socket $HOME/.docker/run/docker.sock \\\n    localhost/exp/vDD4.40/engines/llama.cpp/v1/chat/completions \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n        \"model\": \"ai/smollm2\",\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful assistant.\"\n            },\n            {\n                \"role\": \"user\",\n                \"content\": \"Please write 500 words about the fall of Rome.\"\n            }\n        ]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Building Default Target\nDESCRIPTION: Shows the command to build the default target without specifying any target name.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/targets.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake\n```\n\n----------------------------------------\n\nTITLE: Pinging a Linked Docker Container Using Host Entry\nDESCRIPTION: This snippet demonstrates how to install ping and use it to ping a linked container using the automatically created host entry. It shows the resolution of the linked container's alias to its IP address.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_17\n\nLANGUAGE: console\nCODE:\n```\nroot@aed84ee21bde:/opt/webapp# apt-get install -yqq inetutils-ping\nroot@aed84ee21bde:/opt/webapp# ping webdb\n\nPING webdb (172.17.0.5): 48 data bytes\n56 bytes from 172.17.0.5: icmp_seq=0 ttl=64 time=0.267 ms\n56 bytes from 172.17.0.5: icmp_seq=1 ttl=64 time=0.250 ms\n56 bytes from 172.17.0.5: icmp_seq=2 ttl=64 time=0.256 ms\n```\n\n----------------------------------------\n\nTITLE: Environment Variables in Windows Containers\nDESCRIPTION: Example of setting and viewing environment variables in Windows-based Docker containers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_41\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> docker run --rm -e \"foo=bar\" microsoft/nanoserver cmd /s /c set\nALLUSERSPROFILE=C:\\ProgramData\nAPPDATA=C:\\Users\\ContainerAdministrator\\AppData\\Roaming\nCommonProgramFiles=C:\\Program Files\\Common Files\nCommonProgramFiles(x86)=C:\\Program Files (x86)\\Common Files\nCommonProgramW6432=C:\\Program Files\\Common Files\nCOMPUTERNAME=C2FAEFCC8253\nComSpec=C:\\Windows\\system32\\cmd.exe\nfoo=bar\nLOCALAPPDATA=C:\\Users\\ContainerAdministrator\\AppData\\Local\nNUMBER_OF_PROCESSORS=8\nOS=Windows_NT\nPath=C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Users\\ContainerAdministrator\\AppData\\Local\\Microsoft\\WindowsApps\nPATHEXT=.COM;.EXE;.BAT;.CMD\nPROCESSOR_ARCHITECTURE=AMD64\nPROCESSOR_IDENTIFIER=Intel64 Family 6 Model 62 Stepping 4, GenuineIntel\nPROCESSOR_LEVEL=6\nPROCESSOR_REVISION=3e04\nProgramData=C:\\ProgramData\nProgramFiles=C:\\Program Files\nProgramFiles(x86)=C:\\Program Files (x86)\nProgramW6432=C:\\Program Files\nPROMPT=$P$G\nPUBLIC=C:\\Users\\Public\nSystemDrive=C:\nSystemRoot=C:\\Windows\nTEMP=C:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp\nTMP=C:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp\nUSERDOMAIN=User Manager\nUSERNAME=ContainerAdministrator\nUSERPROFILE=C:\\Users\\ContainerAdministrator\nwindir=C:\\Windows\n```\n\n----------------------------------------\n\nTITLE: Using Ternary Operators in Docker Bake HCL\nDESCRIPTION: This snippet demonstrates how to use ternary operators to conditionally set image tags based on variable values, using the built-in notequal function.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/expressions.md#2025-04-11_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"TAG\" {}\n\ntarget \"default\" {\n  context=\".\"\n  dockerfile=\"Dockerfile\"\n  tags = [\n    \"my-image:latest\",\n    notequal(\"\",TAG) ? \"my-image:${TAG}\": \"\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Iptables Rules When Downgrading Docker\nDESCRIPTION: Commands to clean up iptables rules when downgrading to an earlier version of the Docker daemon. These commands remove Docker-specific rules from the FORWARD chain that would otherwise cause conflicts with older Docker versions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\niptables -D FORWARD -m set --match-set docker-ext-bridges-v4 dst -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT; ip6tables -D FORWARD -m set --match-set docker-ext-bridges-v6 dst -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n```\n\n----------------------------------------\n\nTITLE: Reserving GPU devices with specific capabilities\nDESCRIPTION: Demonstrates how to request GPU devices with specific driver capabilities in the Compose Deploy specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy:\n  resources:\n    reservations:\n      devices:\n        - capabilities: [\"nvidia-compute\"]\n          driver: nvidia\n```\n\n----------------------------------------\n\nTITLE: Creating Topic and Producing Messages in Kafka\nDESCRIPTION: Uses the Kafka console producer to create a topic named 'demo' and publish messages to it.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -ti kafka /opt/kafka/bin/kafka-console-producer.sh --bootstrap-server :9092 --topic demo\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Build Contexts as a Mapping\nDESCRIPTION: Example of configuring named additional contexts as a key-value mapping, providing the same functionality as the list format.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  additional_contexts:\n    resources: /path/to/resources\n    app: docker-image://my-app:latest\n    source: https://github.com/myuser/project.git\n```\n\n----------------------------------------\n\nTITLE: Compressing a Docker Plugin\nDESCRIPTION: This example shows how to compress a Docker plugin after creation using the 'docker plugin push' command to make a distributable plugin archive.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/plugin/create.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker plugin create 127.0.0.1:5000/plugin01:latest /path/to/plugin/data\n$ docker plugin push 127.0.0.1:5000/plugin01:latest\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Docker Versions on RHEL\nDESCRIPTION: This command removes any previously installed Docker packages that might conflict with the official Docker Engine installation. It uses the dnf package manager to remove various Docker-related packages.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/rhel.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine \\\n                  podman \\\n                  runc\n```\n\n----------------------------------------\n\nTITLE: Checking Service Status\nDESCRIPTION: Verifies that the Redis service is running without issues by displaying service tasks and their current state.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker service ps redis\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Scout Organization\nDESCRIPTION: Command to set the Docker organization for policy evaluation, allowing Docker Scout to evaluate images against organization-specific policies.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout config organization <ORG_NAME>\n    ✓ Successfully set organization to <ORG_NAME>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CA Certificate to System Keychain\nDESCRIPTION: Command to add a self-signed certificate to the macOS system keychain for all users, which will be picked up by Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/macfaqs.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ca.crt\n```\n\n----------------------------------------\n\nTITLE: BuildKit Warm Cache Error in Docker Build\nDESCRIPTION: This snippet shows an error that occurs when building an image with BuildKit on a 23.0 daemon, where previously cached layers are not restored correctly. The error manifests as missing files in a RUN stage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/23.0.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n[+] Building 0.4s (6/6) FINISHED\n => [internal] load build definition from Dockerfile\n => => transferring dockerfile: 102B\n => [internal] load .dockerignore\n => => transferring context: 2B\n => [internal] load metadata for docker.io/library/node:18-alpine\n => [base 1/2] FROM docker.io/library/node:18-alpine@sha256:bc329c7332cffc30c2d4801e38df03cbfa8dcbae2a7a52a449db104794f168a3\n => CACHED [base 2/2] WORKDIR /app\n => ERROR [stage-1 1/1] RUN uname -a\n------\n > [stage-1 1/1] RUN uname -a:\n#0 0.138 runc run failed: unable to start container process: exec: \"/bin/sh\": stat /bin/sh: no such file or directory\n------\nDockerfile:5\n--------------------\n   3 |\n   4 |     FROM base\n   5 | >>> RUN uname -a\n   6 |\n--------------------\nERROR: failed to solve: process \"/bin/sh -c uname -a\" did not complete successfully: exit code: 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Service in Docker Swarm\nDESCRIPTION: Creates a replicated Redis service with 3 instances and configures a 10-second update delay for rolling updates. This command is used to demonstrate task distribution across swarm nodes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/drain-node.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker service create --replicas 3 --name redis --update-delay 10s redis:7.4.0\n```\n\n----------------------------------------\n\nTITLE: Validating Variables in Docker Bake HCL\nDESCRIPTION: Shows how to add validation rules to a variable definition to enforce constraints on its value in a Docker Bake HCL file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/variables.md#2025-04-11_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"PORT\" {\n  default = 3000\n\n  validation {\n    condition = PORT >= 1024\n    error_message = \"The variable 'PORT' must be 1024 or higher.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LVM Thin Pool Autoextension Configuration\nDESCRIPTION: LVM profile configuration settings that enable automatic extension of the thin pool when it reaches 80% capacity, adding 20% more space.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nactivation {\n  thin_pool_autoextend_threshold=80\n  thin_pool_autoextend_percent=20\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DNS Servers in Docker Daemon Configuration\nDESCRIPTION: JSON configuration that specifies custom DNS servers for Docker. This configuration allows Docker to use Google's public DNS servers (8.8.8.8 and 8.8.4.4) for DNS resolution.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dns\": [\"8.8.8.8\", \"8.8.4.4\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Docker Daemon Stack Trace on Linux\nDESCRIPTION: This command sends a SIGUSR1 signal to the Docker daemon process on Linux, forcing it to log a full stack trace. This is useful for debugging when the daemon is unresponsive.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/logs.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo kill -SIGUSR1 $(pidof dockerd)\n```\n\n----------------------------------------\n\nTITLE: CDI Configuration in Daemon JSON\nDESCRIPTION: JSON configuration for enabling CDI (Container Device Interface) feature and specifying custom CDI specification directories.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n     \"cdi\": true\n  },\n  \"cdi-spec-dirs\": [\"/etc/cdi/\", \"/var/run/cdi\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Secrets for TLS Certificate\nDESCRIPTION: Commands to create Docker secrets for the TLS certificate and private key files. These secrets can be used by services and rotated independently of the service configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ docker secret create site.key site.key\n\n$ docker secret create site.crt site.crt\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: The expected directory structure for the Python Docker development example project, showing the location of application files, configuration files, and the database password file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n├── python-docker-dev-example/\n│ ├── db/\n│ │ └── password.txt\n│ ├── app.py\n│ ├── config.py\n│ ├── requirements.txt\n│ ├── .dockerignore\n│ ├── .gitignore\n│ ├── compose.yaml\n│ ├── Dockerfile\n│ ├── README.Docker.md\n│ └── README.md\n```\n\n----------------------------------------\n\nTITLE: Exposing Secrets in GitHub Actions Workflow\nDESCRIPTION: This GitHub Actions workflow exposes the GITHUB_TOKEN secret to the Docker build process using the secrets input of the docker/build-push-action.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/secrets.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          tags: user/app:latest\n          secrets: |\n            \"github_token=${{ secrets.GITHUB_TOKEN }}\"\n```\n\n----------------------------------------\n\nTITLE: Pruning Docker Networks with Time Filter\nDESCRIPTION: This command prunes networks older than 24 hours. It demonstrates the use of the --filter flag to limit which networks are pruned based on age.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker network prune --filter \"until=24h\"\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Manifest Documentation\nDESCRIPTION: YAML frontmatter configuration for the Docker manifest command documentation page. It defines metadata including the data folder, data file, title, aliases for URL redirects, and the layout template to use.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/manifest/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_manifest\ntitle: docker manifest\naliases:\n- /edge/engine/reference/commandline/manifest/\n- /engine/reference/commandline/manifest/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Removing a Key from targets/<name> Delegation\nDESCRIPTION: This command removes a specific key from the targets/jeff delegation using the Notary CLI, completing the key removal process started with removing it from targets/releases.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ notary delegation remove registry.example.com/admin/demo targets/jeff 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1 --publish\n\nRemoval of delegation role targets/jeff with keys [5570b88df0736c468493247a07e235e35cf3641270c944d0e9e8899922fc6f99], to repository \"registry.example.com/admin/demo\" staged for next publish.\n\nAuto-publishing changes to registry.example.com/admin/demo\nEnter username: admin    \nEnter password: \nEnter passphrase for targets key with ID b0014f8: \nSuccessfully published changes for repository registry.example.com/admin/demo\n```\n\n----------------------------------------\n\nTITLE: Kernel Swap Warning Message\nDESCRIPTION: Warning message displayed when the kernel doesn't support swap limit capabilities, which are optional but useful for container resource constraints.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nWARNING: Your kernel does not support swap limit capabilities. Limitation discarded.\n```\n\n----------------------------------------\n\nTITLE: Docker Extension Initialize Command\nDESCRIPTION: Command to create a new Docker extension\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/usage.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker extension init\n```\n\n----------------------------------------\n\nTITLE: Docker Version and Release Links (Markdown)\nDESCRIPTION: Version header and release date formatting with links to GitHub milestone pages for both docker/cli and moby/moby repositories.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/24.0.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{< release-date date=\"2023-07-24\" >}}\n\nFor a full list of pull requests and changes in this release, refer to the relevant GitHub milestones:\n\n- [docker/cli, 24.0.5 milestone](https://github.com/docker/cli/issues?q=is%3Aclosed+milestone%3A24.0.5)\n- [moby/moby, 24.0.5 milestone](https://github.com/moby/moby/issues?q=is%3Aclosed+milestone%3A24.0.5)\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker How-tos Documentation Section in YAML\nDESCRIPTION: YAML configuration for the Docker How-tos documentation section. It disables rendering during build, sets the page title to 'How-tos', and assigns a weight of 50 to position this section within the documentation hierarchy.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: How-tos\nweight: 50\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring FPATH for Zsh Completion\nDESCRIPTION: Command to update .zshrc to add the Docker completions directory to the FPATH and initialize the completion system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/completion.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ cat <<\"EOT\" >> ~/.zshrc\nFPATH=\"$HOME/.docker/completions:$FPATH\"\nautoload -Uz compinit\ncompinit\nEOT\n```\n\n----------------------------------------\n\nTITLE: Docker Volume Management with Gordon CLI\nDESCRIPTION: Commands for managing Docker volumes including listing, creation, and backup operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/built-in-tools.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# List volumes\n$ docker ai \"List all my Docker volumes\"\n\n# Create a new volume\n$ docker ai \"Create a new volume called postgres-data\"\n\n# Backup data from a container to a volume\n$ docker ai \"Create a backup of my postgres container data to a new volume\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Critical Vulnerabilities in PostgreSQL Image with Docker Scout\nDESCRIPTION: This command uses Docker Scout to analyze and display only critical vulnerabilities in vulnerable packages of the PostgreSQL 13.1 image, providing a focused view of high-priority security issues.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/analysis.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker scout cves --format only-packages --only-vuln-packages --only-severity critical postgres:13.1\n```\n\n----------------------------------------\n\nTITLE: Restarting NetworkManager and Docker Services\nDESCRIPTION: Commands to restart both NetworkManager and Docker services after disabling dnsmasq. This applies the configuration changes without requiring a system reboot.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl restart network-manager\n$ sudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Listing Available Docker Versions on Fedora\nDESCRIPTION: This command lists all available versions of Docker Engine in the repository, showing the available options for installation. This is useful when you want to install a specific version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/fedora.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dnf list docker-ce --showduplicates | sort -r\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Limit with Reservation in Docker\nDESCRIPTION: Configures a Docker container with a 500MB hard memory limit and a 200MB soft memory reservation, helping manage memory contention.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it -m 500M --memory-reservation 200M ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Checking iptables Counter Values for Docker Traffic Metrics\nDESCRIPTION: Displays the packet and byte counters for the OUTPUT chain with numeric output (-n), exact counts (-x), and verbose listing (-v). This command shows the metrics collected by previously created iptables rules.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/runmetrics.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ iptables -nxvL OUTPUT\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Service and Verifying Installation\nDESCRIPTION: Starts the Docker daemon and verifies the installation by running the hello-world container. This step ensures Docker is properly installed and running.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo service docker start\n$ sudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Dockerfile\nDESCRIPTION: Shows the syntax for setting multiple environment variables in a single ENV instruction in a Dockerfile, following the pattern ENV name=value name2=value2...\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_14\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV name=value name2=value2...\n```\n\n----------------------------------------\n\nTITLE: Configuring Claude Desktop to Use Gordon as an MCP Server\nDESCRIPTION: This JSON configuration enables Claude Desktop to use Gordon as an MCP server. By adding this to the Claude configuration file, users can access Gordon's built-in tools through the Claude interface.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/gordon-mcp-server.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"gordon\": {\n      \"command\": \"docker\",\n      \"args\": [\"ai\", \"mcpserver\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Splunk Logging Driver in daemon.json\nDESCRIPTION: This snippet shows how to configure the Splunk logging driver as the default for Docker by setting appropriate values in the daemon.json configuration file. The configuration includes the log-driver setting and log-opts with Splunk connection parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/splunk.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-driver\": \"splunk\",\n  \"log-opts\": {\n    \"splunk-token\": \"\",\n    \"splunk-url\": \"\",\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Systemd HTTP Proxy Configuration\nDESCRIPTION: Systemd service configuration for setting HTTP proxy environment variables for the Docker daemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/proxy.md#2025-04-11_snippet_2\n\nLANGUAGE: systemd\nCODE:\n```\n[Service]\nEnvironment=\"HTTP_PROXY=http://proxy.example.com:3128\"\n```\n\n----------------------------------------\n\nTITLE: Using --mount Flag for tmpfs in Docker\nDESCRIPTION: Shows the syntax for using the --mount flag with type=tmpfs and additional key-value pairs to configure a tmpfs mount.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/tmpfs.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --mount type=tmpfs,dst=<mount-path>[,<key>=<value>...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Enhanced Container Isolation in admin-settings.json\nDESCRIPTION: JSON configuration to enable and lock Enhanced Container Isolation in Docker Desktop's admin settings file. This sets ECI to be enabled by default and prevents developers from disabling it.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configurationFileVersion\": 2,\n  \"enhancedContainerIsolation\": {\n    \"value\": true,\n    \"locked\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample Deno Application Repository\nDESCRIPTION: Command to clone the sample Deno application repository from GitHub and navigate into the project directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dockersamples/docker-deno.git && cd docker-deno\n```\n\n----------------------------------------\n\nTITLE: Accessing Remote Compose Files Example\nDESCRIPTION: Example showing how to use Compose with files outside the current directory by specifying a path with the -f flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f ~/sandbox/rails/compose.yaml pull db\nPulling db (postgres:latest)...\nlatest: Pulling from library/postgres\nef0380f84d05: Pull complete\n50cf91dc1db8: Pull complete\nd3add4cd115c: Pull complete\n467830d8a616: Pull complete\n089b9db7dc57: Pull complete\n6fba0a36935c: Pull complete\n81ef0e73c953: Pull complete\n338a6c4894dc: Pull complete\n15853f32f67c: Pull complete\n044c83d92898: Pull complete\n17301519f133: Pull complete\ndcca70822752: Pull complete\ncecf11b8ccf3: Pull complete\nDigest: sha256:1364924c753d5ff7e2260cd34dc4ba05ebd40ee8193391220be0f9901d4e1651\nStatus: Downloaded newer image for postgres:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Data Root Directory for Docker Engine on Windows\nDESCRIPTION: This JSON configuration snippet shows how to change the default storage location for Docker Engine on Windows by setting the 'data-root' option in the Daemon configuration file. The example redirects Docker's storage from the default C:\\ProgramData\\docker to d:\\docker.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/windowsfilter-driver.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data-root\": \"d:\\\\docker\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SBOM Attestation with Docker BuildX\nDESCRIPTION: Command to build an image with SBOM attestation using docker buildx build. The command tags and pushes the image while generating SBOM attestation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/sbom.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --tag <namespace>/<image>:<version> \\\n    --attest type=sbom --push .\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Build Contexts as a List\nDESCRIPTION: Example of configuring named additional contexts for the image builder as a list, including local paths, images, and Git repositories.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  additional_contexts:\n    - resources=/path/to/resources\n    - app=docker-image://my-app:latest\n    - source=https://github.com/myuser/project.git\n```\n\n----------------------------------------\n\nTITLE: Setting variable substitution with empty default value in Docker Compose\nDESCRIPTION: Example of variable substitution syntax with an empty default value in Docker Compose files. This syntax allows defining a variable that falls back to an empty string if the variable is not defined.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n${VAR:-}\n```\n\n----------------------------------------\n\nTITLE: Reading Config Content from Container\nDESCRIPTION: Executes a command in the Redis container to display the content of the mounted config file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker container exec $(docker ps --filter name=redis -q) cat /my-config\n```\n\n----------------------------------------\n\nTITLE: Multiple Validations for a Variable in Docker Bake HCL\nDESCRIPTION: Demonstrates how to define multiple validation rules for a single variable in a Docker Bake HCL file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/variables.md#2025-04-11_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"VAR\" {\n  validation {\n    condition = VAR != \"\"\n    error_message = \"The variable 'VAR' must not be empty.\"\n  }\n\n  validation {\n    condition = VAR == regex(\"[a-zA-Z0-9]+\", VAR)\n    error_message = \"The variable 'VAR' can only contain letters and numbers.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining metadata for the Docker container port documentation page, including the data folder location, file name, page title and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/port.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_container_port\ntitle: docker container port\naliases:\n- /edge/engine/reference/commandline/container_port/\n- /engine/reference/commandline/container_port/\n- /engine/reference/commandline/port/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Important Notice Block\nDESCRIPTION: Markdown syntax for displaying an important notice about breaking changes in version 2.8.0\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n> [!IMPORTANT]\n>\n>This release introduced a breaking change via `compose-go v1.3.0` and this [PR](https://github.com/compose-spec/compose-go/pull/294).\nIn this release, Docker Compose recreates new resources (networks, volumes, secrets, configs, etc.) with new names, using a `-` (dash) instead an `_` (underscore) and tries to connect to or use these newly created resources instead of your existing ones!\n>\n> Please use Compose the v2.9.0 release instead.\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Dashboard Tab in Docker Extension Metadata\nDESCRIPTION: JSON configuration for defining a dashboard tab in Docker Desktop. It specifies the title, root folder containing UI code, and the entry point HTML file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/architecture/metadata.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"ui\":{\n    \"dashboard-tab\":\n    {\n        \"title\":\"MyTitle\",\n        \"root\":\"/ui\",\n        \"src\":\"index.html\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Container with GELF Logging\nDESCRIPTION: Example of running a Docker container with GELF logging configured. It sets the GELF server address to 192.168.0.42 on port 12201 using UDP.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/gelf.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -dit \\\n    --log-driver=gelf \\\n    --log-opt gelf-address=udp://192.168.0.42:12201 \\\n    alpine sh\n```\n\n----------------------------------------\n\nTITLE: Verifying MySQL Service Status in Docker Swarm\nDESCRIPTION: Lists all running services in the swarm to verify that the MySQL service is properly deployed and running.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker service ls\n```\n\n----------------------------------------\n\nTITLE: Creating VEX Document with vexctl for CVE Exception\nDESCRIPTION: This example demonstrates how to use the vexctl command-line tool to create a VEX document that marks a specific vulnerability (CVE-2022-24999) in an npm package (express@4.17.1) as not affecting a Docker image. The command specifies the author, product, affected components, vulnerability ID, status, and justification.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/create-exceptions-vex.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ vexctl create \\\n  --author=\"author@example.com\" \\\n  --product=\"pkg:docker/example/app@v1\" \\\n  --subcomponents=\"pkg:npm/express@4.17.1\" \\\n  --vuln=\"CVE-2022-24999\" \\\n  --status=\"not_affected\" \\\n  --justification=\"vulnerable_code_not_in_execute_path\" \\\n  --file=\"CVE-2022-24999.vex.json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache HTTPD to Write Logs to STDOUT/STDERR in Dockerfile\nDESCRIPTION: This snippet demonstrates the approach used in the official Apache HTTPD Docker image to direct logs to standard output and error streams. It modifies the Apache configuration to write normal output to STDOUT and errors to STDERR.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN sed -i \\\n\t-e 's/^CustomLog/#CustomLog/' \\\n\t-e 's/^ErrorLog/#ErrorLog/' \\\n\t\"conf/httpd.conf\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Config from Standard Input\nDESCRIPTION: Creates a new Docker config named 'my-config' by piping a string from echo as the config content.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho \"This is a config\" | docker config create my-config -\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker CLI Reference Documentation\nDESCRIPTION: This YAML snippet defines the metadata for a documentation page about Docker CLI reference. It sets the title, weight for ordering, and specifies that the page should never be rendered directly.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: CLI reference\nweight: 10\nbuild:\n  render: never\n---\n```\n\n----------------------------------------\n\nTITLE: Label Interpolation Without Variable Substitution\nDESCRIPTION: Shows how variable interpolation does not work with YAML keys, such as in label definitions where the key contains a dollar sign.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/interpolation.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    labels:\n      \"$VAR_NOT_INTERPOLATED_BY_COMPOSE\": \"BAR\"\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Start Command Options Table in Markdown\nDESCRIPTION: A markdown table showing the available options for the 'docker compose start' command, including the --dry-run option which executes the command in dry run mode.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_start.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type   | Default | Description                     |\n|:------------|:-------|:--------|:--------------------------------|\n| `--dry-run` | `bool` |         | Execute command in dry run mode |\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages from Kafka Topic\nDESCRIPTION: Demonstrates how to consume messages from the 'demo' topic using the Kafka console consumer.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -ti kafka /opt/kafka/bin/kafka-console-consumer.sh --bootstrap-server :9092 --topic demo --from-beginning\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker Repository\nDESCRIPTION: Command to add Docker's package repository to dnf configuration\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/rhel.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf config-manager --add-repo {{% param \"download-url-base\" %}}/docker-ce.repo\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Building with Content Trust\nDESCRIPTION: This Dockerfile demonstrates a simple configuration that can be used to test building with Docker Content Trust. It uses a base image from a trusted source.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_automation.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM docker/trusttest:latest\nRUN echo\n```\n\n----------------------------------------\n\nTITLE: Specifying an Alternate Dockerfile\nDESCRIPTION: Example of configuring a custom Dockerfile path, which is resolved relative to the build context.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  dockerfile: webapp.Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Publishing Multi-file Compose Application\nDESCRIPTION: Command to publish a Compose application with multiple configuration files as an OCI artifact.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/oci-artifact.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f compose-base.yml -f compose-production.yml publish username/my-compose-app:latest\n```\n\n----------------------------------------\n\nTITLE: Executing Shell in Registry Container\nDESCRIPTION: Opens an interactive shell in the sandboxregistry container to access registry data\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_sandbox.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker container exec -it sandboxregistry bash\nroot@65084fc6f047:/#\n```\n\n----------------------------------------\n\nTITLE: Setting up Local Registry and Building Docker Image with GitHub Actions\nDESCRIPTION: This GitHub Actions workflow sets up a local Docker registry, configures QEMU and Docker Buildx, builds a Docker image, and pushes it to the local registry. It also includes a step to inspect the pushed image. The workflow is triggered on push events.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/local-registry.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          driver-opts: network=host\n      \n      - name: Build and push to local registry\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: localhost:5000/name/app:latest\n      \n      - name: Inspect\n        run: |\n          docker buildx imagetools inspect localhost:5000/name/app:latest\n```\n\n----------------------------------------\n\nTITLE: Using Set Pipefail for Error Handling in Dockerfile Pipes\nDESCRIPTION: Prepending 'set -o pipefail &&' to a piped command ensures the build fails if any stage in the pipe fails, preventing inadvertent build success when earlier commands fail.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_16\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN set -o pipefail && wget -O - https://some.site | wc -l > /number\n```\n\n----------------------------------------\n\nTITLE: Creating a Systemd Socket File for Docker Plugin\nDESCRIPTION: This systemd socket unit file configures socket activation for a Docker plugin. It defines the Unix socket path where the plugin will listen for connections from the Docker daemon.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugin_api.md#2025-04-11_snippet_2\n\nLANGUAGE: systemd\nCODE:\n```\n[Unit]\nDescription=Your plugin\n\n[Socket]\nListenStream=/run/docker/plugins/your-plugin.sock\n\n[Install]\nWantedBy=sockets.target\n```\n\n----------------------------------------\n\nTITLE: Comparing Docker Scout Environments Using CLI\nDESCRIPTION: This command compares the specified image with the production environment using the Docker Scout CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/environment/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout compare --to-env production myorg/webapp:latest\n```\n\n----------------------------------------\n\nTITLE: Example of Pulling a Specific AI Model\nDESCRIPTION: Example command showing how to pull the smollm2 model from the ai namespace on Docker Hub.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker model pull ai/smollm2\n```\n\n----------------------------------------\n\nTITLE: Setting up SSH Agent in WSL 2 for Docker Desktop\nDESCRIPTION: This Bash script initializes and manages an SSH agent in a WSL 2 environment. It creates or loads an existing SSH agent, ensuring it's running for use with Docker Desktop's Git integration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/create-dev-env.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSSH_ENV=\"$HOME/.ssh/agent-environment\"\nfunction start_agent {\n    echo \"Initializing new SSH agent...\"\n    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > \"${SSH_ENV}\"\n    echo succeeded\n    chmod 600 \"${SSH_ENV}\"\n    . \"${SSH_ENV}\" > /dev/null\n}\n# Source SSH settings, if applicable\nif [ -f \"${SSH_ENV}\" ]; then\n    . \"${SSH_ENV}\" > /dev/null\n    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {\n        start_agent;\n    }\nelse\n    start_agent;\nfi\n```\n\n----------------------------------------\n\nTITLE: Installing spaCy Language Model in Dockerfile\nDESCRIPTION: Downloads and installs the English language model for spaCy NLP library.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_16\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN python -m spacy download en_core_web_sm\n```\n\n----------------------------------------\n\nTITLE: Pinning BuildKit Version in GitHub Actions\nDESCRIPTION: Demonstrates how to pin to a specific version of BuildKit using the driver-opts image parameter.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/configure-builder.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Set up Docker Buildx\n  uses: docker/setup-buildx-action@v3\n  with:\n    driver-opts: image=moby/buildkit:v0.11.0\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Context in Project Harmonia\nDESCRIPTION: This command inspects the current Docker context to verify the newly created cloud engine. It shows how to confirm the active cloud environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker context inspect\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Build and Push Workflow\nDESCRIPTION: GitHub Actions workflow configuration for building and pushing Docker images with automatic build checks enabled.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/checks.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build and push Docker images\non:\n  push:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Build and push\n        uses: docker/build-push-action@v6.6.0\n```\n\n----------------------------------------\n\nTITLE: JSON Output from Buildx Bake Print Command\nDESCRIPTION: The JSON output generated when running the buildx bake --print command with the example Compose file. It shows how the Compose services are translated into Bake targets with their respective build configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/compose-file.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\"db\", \"webapp-dev\", \"webapp-release\"]\n    }\n  },\n  \"target\": {\n    \"db\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile.db\",\n      \"tags\": [\"docker.io/username/db\"]\n    },\n    \"webapp-dev\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile.webapp\",\n      \"tags\": [\"docker.io/username/webapp:latest\"],\n      \"cache-from\": [\n        {\n          \"ref\": \"docker.io/username/webapp:cache\",\n          \"type\": \"registry\"\n        }\n      ],\n      \"cache-to\": [\n        {\n          \"ref\": \"docker.io/username/webapp:cache\",\n          \"type\": \"registry\"\n        }\n      ]\n    },\n    \"webapp-release\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile.webapp\",\n      \"tags\": [\"docker.io/username/webapp:latest\"],\n      \"cache-from\": [\n        {\n          \"ref\": \"docker.io/username/webapp:cache\",\n          \"type\": \"registry\"\n        }\n      ],\n      \"cache-to\": [\n        {\n          \"ref\": \"docker.io/username/webapp:cache\",\n          \"type\": \"registry\"\n        }\n      ],\n      \"platforms\": [\"linux/amd64\", \"linux/arm64\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExtensionCli Interface Properties in TypeScript\nDESCRIPTION: Declaration of the ExtensionCli interface with an exec property of type Exec. This interface is part of the Docker Extensions SDK API and was introduced in version 0.2.0.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExtensionCli.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• **exec**: [`Exec`](Exec.md)\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Containers\nDESCRIPTION: These commands stop and remove both alpine containers to clean up the environment after the networking demonstration is complete.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker container stop alpine1 alpine2\n$ docker container rm alpine1 alpine2\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Documentation Source Information\nDESCRIPTION: HTML comment that explains the page is automatically generated from Docker's source code and provides guidance on how to suggest changes through GitHub tickets or pull requests.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/network/connect.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Opening Chrome DevTools for Docker Extension Debugging\nDESCRIPTION: Command to enable Chrome DevTools for a Docker extension. This allows developers to debug their extension when selecting the Extensions tab.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/test-debug.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension dev debug <name-of-your-extensions>\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Network with HTTP GET Request\nDESCRIPTION: Shows how to retrieve detailed information about a specific network using its ID. The request provides access to low-level network configuration details.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_73\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/networks/7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Incorrect FROM/AS Casing in Dockerfile\nDESCRIPTION: Example showing incorrect usage where 'FROM' is uppercase while 'as' is lowercase, violating the consistent casing rule.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-as-casing.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian:latest as builder\n```\n\n----------------------------------------\n\nTITLE: Postgres ENTRYPOINT Script for Container Initialization\nDESCRIPTION: This bash script is used as the ENTRYPOINT for the official Postgres Docker image. It handles container initialization, including checking if PostgreSQL is being run, setting proper permissions, initializing the database if needed, and using gosu to drop privileges when running the final command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nset -e\n\nif [ \"$1\" = 'postgres' ]; then\n    chown -R postgres \"$PGDATA\"\n\n    if [ -z \"$(ls -A \"$PGDATA\")\" ]; then\n        gosu postgres initdb\n    fi\n\n    exec gosu postgres \"$@\"\nfi\n\nexec \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Example Error Output for Undefined ARG\nDESCRIPTION: Shows the error message displayed when an undefined build argument is used in a FROM instruction.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-arg-in-from.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFROM argument 'VARIANT' is not declared\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker container\nDESCRIPTION: Removes the previously created 'web' container with force (-f) flag to prepare for creating a new linked container with the same name.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ docker container rm -f web\n```\n\n----------------------------------------\n\nTITLE: Verifying Data Persistence in New Container\nDESCRIPTION: This command executes a SQL query in the new container to verify that the data from the previous container still exists in the persistent volume.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ docker exec -ti new-db psql -U postgres -c \"SELECT * FROM tasks\"\n```\n\n----------------------------------------\n\nTITLE: Creating IPv6 Network with Direct Routing in Docker\nDESCRIPTION: Creates a Docker network with IPv6 support using the subnet 2001:db8::/64 and enables routed gateway mode for IPv6 traffic. This configuration allows for direct IPv6 routing while maintaining NAT for IPv4.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create --ipv6 --subnet 2001:db8::/64 -o com.docker.network.bridge.gateway_mode_ipv6=routed mynet\n```\n\n----------------------------------------\n\nTITLE: Inspecting Bridge Network Configuration\nDESCRIPTION: This command inspects the default bridge network, showing detailed information including subnet, gateway, connected containers with their IP addresses, MAC addresses, and network options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker network inspect bridge\n\n[\n    {\n        \"Name\": \"bridge\",\n        \"Id\": \"17e324f459648a9baaea32b248d3884da102dde19396c25b30ec800068ce6b10\",\n        \"Created\": \"2017-06-22T20:27:43.826654485Z\",\n        \"Scope\": \"local\",\n        \"Driver\": \"bridge\",\n        \"EnableIPv6\": false,\n        \"IPAM\": {\n            \"Driver\": \"default\",\n            \"Options\": null,\n            \"Config\": [\n                {\n                    \"Subnet\": \"172.17.0.0/16\",\n                    \"Gateway\": \"172.17.0.1\"\n                }\n            ]\n        },\n        \"Internal\": false,\n        \"Attachable\": false,\n        \"Containers\": {\n            \"602dbf1edc81813304b6cf0a647e65333dc6fe6ee6ed572dc0f686a3307c6a2c\": {\n                \"Name\": \"alpine2\",\n                \"EndpointID\": \"03b6aafb7ca4d7e531e292901b43719c0e34cc7eef565b38a6bf84acf50f38cd\",\n                \"MacAddress\": \"02:42:ac:11:00:03\",\n                \"IPv4Address\": \"172.17.0.3/16\",\n                \"IPv6Address\": \"\"\n            },\n            \"da33b7aa74b0bf3bda3ebd502d404320ca112a268aafe05b4851d1e3312ed168\": {\n                \"Name\": \"alpine1\",\n                \"EndpointID\": \"46c044a645d6afc42ddd7857d19e9dcfb89ad790afb5c239a35ac0af5e8a5bc5\",\n                \"MacAddress\": \"02:42:ac:11:00:02\",\n                \"IPv4Address\": \"172.17.0.2/16\",\n                \"IPv6Address\": \"\"\n            }\n        },\n        \"Options\": {\n            \"com.docker.network.bridge.default_bridge\": \"true\",\n            \"com.docker.network.bridge.enable_icc\": \"true\",\n            \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n            \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n            \"com.docker.network.bridge.name\": \"docker0\",\n            \"com.docker.network.driver.mtu\": \"1500\"\n        },\n        \"Labels\": {}\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Service Links in Docker Compose\nDESCRIPTION: Configuration for network links to containers in other services, optionally specifying aliases. Links also express implicit dependencies between services.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nweb:\n  links:\n    - db\n    - db:database\n    - redis\n```\n\n----------------------------------------\n\nTITLE: Windows Shell Format Flag Usage in Docker Commands\nDESCRIPTION: This example shows how to use the format flag in Windows shells like PowerShell, where special escaping rules need to be followed for quotes inside parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker inspect --format '{{join .Args \\\" , \\\"}}'\n```\n\n----------------------------------------\n\nTITLE: Docker Build Metrics Structure\nDESCRIPTION: Table structure showing build-related metrics and their descriptions including build commands and success rates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/admin/organization/insights.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Data                   | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n|:-----------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Average build per user | The average number of builds per active user. A build includes any time a user runs one of the following commands: <ul><li>`docker build`</li><li>`docker buildx b`</li><li>`docker buildx bake`</li><li>`docker buildx build`</li><li>`docker buildx f`</li><li>`docker builder b`</li><li>`docker builder bake`</li><li>`docker builder build`</li><li>`docker builder f`</li><li>`docker compose build`</li><li>`docker compose up --build`</li><li>`docker image build`</li></ul> |\n| Average build time     | The average build time per build.                                                                                                                                                                                                                                                                                                                                                                    |\n| Build success rate     | The percentage of builds that were successful out of the total number of builds. A successful build includes any build that exits normally.                                                                                                                                                                                                                                                                                                                                          |\n| Total builds (graph)   | The total number of builds separated into successful builds and failed builds. A successful build includes any build that exits normally. A failed build includes any build that exits abnormally.                                                                                                                                                                                   |\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Definition - Docker Bridge Netfilter Error Control\nDESCRIPTION: Definition of DOCKER_IGNORE_BR_NETFILTER_ERROR environment variable that allows running Docker on hosts that cannot load br_netfilter, with noted limitations on inter-container communication and port access.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_IGNORE_BR_NETFILTER_ERROR=1\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile Example Without SBOM Scanning\nDESCRIPTION: Example Dockerfile showing a multi-stage build where the final stage uses scratch image. This demonstrates a case where build-time dependencies might be missed in SBOM scanning.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/sbom.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine AS build\n# build the software ...\n\nFROM scratch\nCOPY --from=build /path/to/bin /bin\nENTRYPOINT [ \"/bin\" ]\n```\n\n----------------------------------------\n\nTITLE: Building Docker Services with Compose\nDESCRIPTION: Basic command to rebuild Docker services using the --build flag with Docker Compose\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP Time Server in YAML for Gordon\nDESCRIPTION: This snippet shows a minimal example of how to use the mcp-time server to provide temporal capabilities to Gordon using a gordon-mcp.yml file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/yaml.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  time:\n    image: mcp/time\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to navigate to the project directory after cloning the repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd wiremock-node-docker/\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Input Loop for Translation\nDESCRIPTION: Establishes an infinite loop that continuously prompts the user for text input and breaks the loop when the user enters 'exit'. This provides a user-friendly interactive interface.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n   while True:\n      input_text = input(\"Enter the text for translation (type 'exit' to end): \")\n\n      if input_text.lower() == 'exit':\n         print(\"Exiting...\")\n         break\n```\n\n----------------------------------------\n\nTITLE: Setting ENTRYPOINT and CMD for Postgres in Dockerfile\nDESCRIPTION: This Dockerfile snippet shows how to copy an entrypoint script into a container and configure it as the ENTRYPOINT. The CMD provides the default command ('postgres') to be executed by the entrypoint script if no command is specified.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_29\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY ./docker-entrypoint.sh /\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"postgres\"]\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command Output Example\nDESCRIPTION: Example output when running a Docker build command. Shows the build process including pulling base images, running Dockerfile instructions, and generating the final image SHA.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker build .\n[+] Building 3.5s (11/11) FINISHED                                              docker:desktop-linux\n => [internal] load build definition from Dockerfile                                            0.0s\n => => transferring dockerfile: 308B                                                            0.0s\n => [internal] load metadata for docker.io/library/python:3.12                                  0.0s\n => [internal] load .dockerignore                                                               0.0s\n => => transferring context: 2B                                                                 0.0s\n => [1/6] FROM docker.io/library/python:3.12                                                    0.0s\n => [internal] load build context                                                               0.0s\n => => transferring context: 123B                                                               0.0s\n => [2/6] WORKDIR /usr/local/app                                                                0.0s\n => [3/6] RUN useradd app                                                                       0.1s\n => [4/6] COPY ./requirements.txt ./requirements.txt                                            0.0s\n => [5/6] RUN pip install --no-cache-dir --upgrade -r requirements.txt                          3.2s\n => [6/6] COPY ./app ./app                                                                      0.0s\n => exporting to image                                                                          0.1s\n => => exporting layers                                                                         0.1s\n => => writing image sha256:9924dfd9350407b3df01d1a0e1033b1e543523ce7d5d5e2c83a724480ebe8f00    0.0s\n```\n\n----------------------------------------\n\nTITLE: Setting Log Group for awslogs Driver\nDESCRIPTION: Shows how to specify a CloudWatch Logs log group when running a container with the awslogs driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/awslogs.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --log-driver=awslogs --log-opt awslogs-region=us-east-1 --log-opt awslogs-group=myLogGroup ...\n```\n\n----------------------------------------\n\nTITLE: Network Inspection HTTP Response Example\nDESCRIPTION: Example response from a network inspection request showing detailed information about a network including its configuration, connected containers, options, and labels.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_74\n\nLANGUAGE: json\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"Name\": \"net01\",\n  \"Id\": \"7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99\",\n  \"Scope\": \"local\",\n  \"Driver\": \"bridge\",\n  \"EnableIPv6\": false,\n  \"IPAM\": {\n    \"Driver\": \"default\",\n    \"Config\": [\n      {\n        \"Subnet\": \"172.19.0.0/16\",\n        \"Gateway\": \"172.19.0.1\"\n      }\n    ],\n    \"Options\": {\n        \"foo\": \"bar\"\n    }\n  },\n  \"Internal\": false,\n  \"Containers\": {\n    \"19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c\": {\n      \"Name\": \"test\",\n      \"EndpointID\": \"628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a\",\n      \"MacAddress\": \"02:42:ac:13:00:02\",\n      \"IPv4Address\": \"172.19.0.2/16\",\n      \"IPv6Address\": \"\"\n    }\n  },\n  \"Options\": {\n    \"com.docker.network.bridge.default_bridge\": \"true\",\n    \"com.docker.network.bridge.enable_icc\": \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n    \"com.docker.network.bridge.name\": \"docker0\",\n    \"com.docker.network.driver.mtu\": \"1500\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Usage in Bake Files\nDESCRIPTION: Demonstrates how to use built-in and user-defined functions in HCL files for dynamic value computation.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_41\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"webapp-dev\" {\n  dockerfile = \"Dockerfile.webapp\"\n  tags = [\"docker.io/username/webapp:latest\"]\n  args = {\n    buildno = \"${add(123, 1)}\"\n  }\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nfunction \"increment\" {\n  params = [number]\n  result = number + 1\n}\n\ntarget \"webapp-dev\" {\n  dockerfile = \"Dockerfile.webapp\"\n  tags = [\"docker.io/username/webapp:latest\"]\n  args = {\n    buildno = \"${increment(123)}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Exported Docker Context File Contents\nDESCRIPTION: This command displays the contents of an exported Docker context file, showing the serialized context configuration data.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/contexts.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cat docker-test.dockercontext\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Container - Request Body\nDESCRIPTION: JSON request body for container creation with comprehensive configuration including environment variables, resource limits, networking settings, volumes, and container metadata.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Hostname\": \"\",\n    \"Domainname\": \"\",\n    \"User\": \"\",\n    \"AttachStdin\": false,\n    \"AttachStdout\": true,\n    \"AttachStderr\": true,\n    \"Tty\": false,\n    \"OpenStdin\": false,\n    \"StdinOnce\": false,\n    \"Env\": [\n            \"FOO=bar\",\n            \"BAZ=quux\"\n    ],\n    \"Cmd\": [\n            \"date\"\n    ],\n    \"Entrypoint\": \"\",\n    \"Image\": \"ubuntu\",\n    \"Labels\": {\n            \"com.example.vendor\": \"Acme\",\n            \"com.example.license\": \"GPL\",\n            \"com.example.version\": \"1.0\"\n    },\n    \"Volumes\": {\n      \"/volumes/data\": {}\n    },\n    \"Healthcheck\":{\n       \"Test\": [\"CMD-SHELL\", \"curl localhost:3000\"],\n       \"Interval\": 1000000000,\n       \"Timeout\": 10000000000,\n       \"Retries\": 10,\n       \"StartPeriod\": 60000000000\n    },\n    \"WorkingDir\": \"\",\n    \"NetworkDisabled\": false,\n    \"MacAddress\": \"12:34:56:78:9a:bc\",\n    \"ExposedPorts\": {\n            \"22/tcp\": {}\n    },\n    \"StopSignal\": \"SIGTERM\",\n    \"HostConfig\": {...},\n    \"NetworkingConfig\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring .dockerignore for Spring PetClinic\nDESCRIPTION: This .dockerignore file specifies patterns for files and directories to be excluded from the Docker build context. It includes common development files, build artifacts, and environment-specific configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerignore\nCODE:\n```\n# https://docs.docker.com/go/build-context-dockerignore/\n\n**/.classpath\n**/.dockerignore\n**/.env\n**/.git\n**/.gitignore\n**/.project\n**/.settings\n**/.toolstarget\n**/.vs\n**/.vscode\n**/.next\n**/.cache\n**/*.*proj.user\n**/*.dbmdl\n**/*.jfm\n**/charts\n**/docker-compose*\n**/compose.y*ml\n**/target\n**/Dockerfile*\n**/node_modules\n**/npm-debug.log\n**/obj\n**/secrets.dev.yaml\n**/values.dev.yaml\n**/vendor\nLICENSE\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: Launching Postgres Container with Docker\nDESCRIPTION: Docker command to start a Postgres container with exposed port 5432 and a specified password.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=mysecretpassword postgres\n```\n\n----------------------------------------\n\nTITLE: Enabling containerd image store feature\nDESCRIPTION: JSON configuration for enabling the containerd-snapshotter feature, which is required for using some alternative runtimes like Wasmtime.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/alternative-runtimes.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"containerd-snapshotter\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Documentation Source\nDESCRIPTION: HTML comment block explaining that the page is automatically generated from Docker's source code and providing guidance for contributing changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/image/tag.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Docker CLI Documentation\nDESCRIPTION: This YAML front matter block defines metadata for the Docker CLI documentation page. It specifies the data folder, data file, title, aliases for redirect purposes, and the layout to be used for rendering the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/logout.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_logout\ntitle: docker logout\naliases:\n- /edge/engine/reference/commandline/logout/\n- /engine/reference/commandline/logout/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Project Structure - Directory Layout\nDESCRIPTION: The directory structure showing all key files and their purposes in the project.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/application.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngo-prometheus-monitoring\n├── CONTRIBUTING.md\n├── Docker\n│   ├── grafana.yml\n│   └── prometheus.yml\n├── dashboard.json\n├── Dockerfile\n├── LICENSE\n├── README.md\n├── compose.yaml\n├── go.mod\n├── go.sum\n└── main.go\n```\n\n----------------------------------------\n\nTITLE: Docker Extension Enable Command\nDESCRIPTION: Command to enable Docker extensions functionality\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/usage.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker extension enable\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Port Binding Example\nDESCRIPTION: Example showing how to bind privileged ports on macOS using specific interface addresses as a workaround\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n0.0.0.0    # Expose port on all interfaces\n127.0.0.1  # Expose port using localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Devices in Docker Container\nDESCRIPTION: Adds host devices to a container with specific permissions. This configuration maps a device from the host into the container with designated access permissions.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{ \"PathOnHost\": \"/dev/deviceName\", \"PathInContainer\": \"/dev/deviceName\", \"CgroupPermissions\": \"mrw\"}\n```\n\n----------------------------------------\n\nTITLE: Using Variable Interpolation in Docker Compose Files\nDESCRIPTION: Docker Compose supports Bash-like variable interpolation at runtime. Both $VARIABLE and ${VARIABLE} syntax formats are supported for setting values dynamically.\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/compose/interpolation.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n${VARIABLE}\n```\n\nLANGUAGE: bash\nCODE:\n```\n$VARIABLE\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Buildx Builders\nDESCRIPTION: Lists all available builder instances and their drivers using docker buildx ls command. Shows status, BuildKit version and supported platforms.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/manage.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx ls\nNAME/NODE       DRIVER/ENDPOINT      STATUS   BUILDKIT PLATFORMS\ndefault *       docker\n  default       default              running  v0.11.6  linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386\nmy_builder      docker-container\n  my_builder0   default              running  v0.11.6  linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386\n```\n\n----------------------------------------\n\nTITLE: Removing All Unused Docker Volumes\nDESCRIPTION: This command removes all unused volumes in Docker, freeing up space.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n$ docker volume prune\n```\n\n----------------------------------------\n\nTITLE: Example of --tmpfs Flag with Options in Docker\nDESCRIPTION: Shows a practical example of using the --tmpfs flag with noexec, size, and mode options to create a configured tmpfs mount.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/tmpfs.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --tmpfs /data:noexec,size=1024,mode=1777\n```\n\n----------------------------------------\n\nTITLE: Running a Basic Postgres Container\nDESCRIPTION: This console command demonstrates how to run a Docker container based on the Postgres image with default settings. The container will start Postgres using the entrypoint script.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n$ docker run postgres\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with SBOM Attestation\nDESCRIPTION: Dockerfile configuration that enables SBOM scanning during build stage using Ubuntu base image\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/security.md#2025-04-11_snippet_4\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG BUILDKIT_SBOM_SCAN_STAGE=true\n\nFROM ubuntu:latest AS build\n\nRUN apt-get update && apt-get install -y build-essential\n\nWORKDIR /app\n\nCOPY hello.cpp .\n\nRUN g++ -o hello hello.cpp -static\n\n# --------------------\nFROM scratch\n\nCOPY --from=build /app/hello /hello\n\nCMD [\"/hello\"]\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Comment for Source Code Reference\nDESCRIPTION: This HTML comment provides information about the automatic generation of the page from Docker's source code and instructions for suggesting changes through GitHub tickets or pull requests.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/plugin/set.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Disabling Docker Build Summary in GitHub Actions YAML Configuration\nDESCRIPTION: This snippet shows how to disable the job summary feature for Docker builds in GitHub Actions by setting the DOCKER_BUILD_SUMMARY environment variable to false in the workflow configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/build-summary.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Build\n        uses: docker/build-push-action@v6\n        env:\n          DOCKER_BUILD_SUMMARY: false\n        with:\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n```\n\n----------------------------------------\n\nTITLE: Streaming Docker Command Output\nDESCRIPTION: Demonstrates how to execute a Docker command with streaming output, such as following container logs. This approach is useful for long-running commands or large outputs.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/docker.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.docker.cli.exec(\"logs\", [\"-f\", \"...\"], {\n  stream: {\n    onOutput(data) {\n      if (data.stdout) {\n        console.error(data.stdout);\n      } else {\n        console.log(data.stderr);\n      }\n    },\n    onError(error) {\n      console.error(error);\n    },\n    onClose(exitCode) {\n      console.log(\"onClose with exit code \" + exitCode);\n    },\n    splitOutputLines: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop on Windows via Intune\nDESCRIPTION: This command is used in the Intune admin center to install Docker Desktop on Windows machines. It uses msiexec to run the installation silently.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/use-intune.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmsiexec /i \"DockerDesktop.msi\" /qn\n```\n\n----------------------------------------\n\nTITLE: Updating a Non-Marketplace Docker Extension\nDESCRIPTION: This command updates an installed Docker Extension to a different tag. The example shows updating from version 0.0.1 to 0.0.2.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/non-marketplace.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndocker extension update john/my-extension:0.0.2\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Documentation\nDESCRIPTION: YAML configuration block that specifies build settings, page title, and weight for the Docker documentation support section. Includes build render settings and page metadata.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/support-and-feedback/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  render: never\ntitle: Support and feedback\nweight: 60\n```\n\n----------------------------------------\n\nTITLE: Using a registered containerd shim\nDESCRIPTION: Command to use a registered containerd shim by specifying its name with the --runtime flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/alternative-runtimes.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --runtime foo hello-world\n```\n\n----------------------------------------\n\nTITLE: Creating an IPvlan Network with Default Settings\nDESCRIPTION: This example shows how to create an IPvlan network using default settings for the gateway and mode, and then run containers on this network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create -d ipvlan \\\n    --subnet=192.168.1.0/24 \\\n    -o parent=eth0 db_net_ipv\n\n$ docker run --net=db_net_ipv --name=ipv1 -itd alpine /bin/sh\n\n$ docker run --net=db_net_ipv --name=ipv2 -it --rm alpine /bin/sh\n$ ping -c 4 ipv1\n```\n\n----------------------------------------\n\nTITLE: Displaying All Docker Model Runner Commands\nDESCRIPTION: Command to display help information and available subcommands for Docker Model Runner.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker model help\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Registry via API\nDESCRIPTION: POST endpoint to push a Docker image to a registry, with optional authentication via X-Registry-Auth header.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_41\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/images/test/push HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Installing Docker CE Rootless Extras Package\nDESCRIPTION: Command to manually install the docker-ce-rootless-extras package if the dockerd-rootless-setuptool.sh script is not present.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apt-get install -y docker-ce-rootless-extras\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Labels in One Instruction\nDESCRIPTION: Example showing how to set multiple labels in a single LABEL instruction to reduce the number of layers in the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Set multiple labels on one line\nLABEL com.example.version=\"0.0.1-beta\" com.example.release-date=\"2015-02-12\"\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Docker Filters\nDESCRIPTION: Demonstrates how to combine multiple filters to show images matching either alpine:latest or busybox, implementing a logical OR operation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/filter.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker images\nREPOSITORY   TAG       IMAGE ID       CREATED       SIZE\nubuntu       20.04     33a5cc25d22c   2 hours ago   101MB\nubuntu       18.04     152dc042452c   2 hours ago   88.1MB\nalpine       3.16      a8cbb8c69ee7   2 hours ago   8.67MB\nalpine       latest    7144f7bab3d4   2 hours ago   11.7MB\nbusybox      uclibc    3e516f71d880   2 hours ago   2.4MB\nbusybox      glibc     7338d0c72c65   2 hours ago   6.09MB\n$ docker images --filter reference=alpine:latest --filter=reference=busybox\nREPOSITORY   TAG       IMAGE ID       CREATED       SIZE\nalpine       latest    7144f7bab3d4   2 hours ago   11.7MB\nbusybox      uclibc    3e516f71d880   2 hours ago   2.4MB\nbusybox      glibc     7338d0c72c65   2 hours ago   6.09MB\n```\n\n----------------------------------------\n\nTITLE: Execute Host Binary Command\nDESCRIPTION: Demonstrates how to execute a binary (kubectl) on the host system using the current API.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/backend.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.extension.host.cli.exec(\"kubectl\", [\"-h\"]);\n```\n\n----------------------------------------\n\nTITLE: Generating Human-readable SBOM List with Docker Scout CLI\nDESCRIPTION: Use the --format list flag with the docker scout sbom command to generate a human-readable list of packages in the SBOM.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/view-create-sboms.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout sbom --format list alpine\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx HTTPS Server Block\nDESCRIPTION: Basic Nginx configuration file that sets up HTTPS server block using TLS certificate and key stored as Docker secrets. Serves static files from the default Nginx html directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_17\n\nLANGUAGE: none\nCODE:\n```\nserver {\n    listen                443 ssl;\n    server_name           localhost;\n    ssl_certificate       /run/secrets/site.crt;\n    ssl_certificate_key   /run/secrets/site.key;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables with array syntax in Docker Compose\nDESCRIPTION: Defines environment variables using array syntax in the Compose file. Each item in the array represents a single environment variable.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  - RACK_ENV=development\n  - SHOW=true\n  - USER_INPUT\n```\n\n----------------------------------------\n\nTITLE: Inspecting Bind Mount Configuration with Docker Inspect\nDESCRIPTION: Shows the JSON output from docker inspect that verifies a bind mount was created correctly, displaying details about the mount type, source, destination, and permissions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"Mounts\": [\n    {\n        \"Type\": \"bind\",\n        \"Source\": \"/tmp/source/target\",\n        \"Destination\": \"/app\",\n        \"Mode\": \"\",\n        \"RW\": true,\n        \"Propagation\": \"rprivate\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Renaming Compose Bridge Binary for kubectl Plugin Integration\nDESCRIPTION: Renames the compose-bridge binary to kubectl-compose_bridge and moves it to the /usr/local/bin directory for system-wide accessibility.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/advanced-integration.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mv /path/to/compose-bridge /usr/local/bin/kubectl-compose_bridge\n```\n\n----------------------------------------\n\nTITLE: Resetting Extension Configuration to Original Settings\nDESCRIPTION: Command to reset the extension configuration back to the original settings, including disabling automatic Chrome DevTools opening.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/test-debug.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension dev reset <name-of-your-extensions>\n```\n\n----------------------------------------\n\nTITLE: Restarting systemd-networkd Service\nDESCRIPTION: Command to restart the systemd-networkd service after updating its configuration. This applies the changes to mark Docker interfaces as un-managed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl restart systemd-networkd\n```\n\n----------------------------------------\n\nTITLE: Disabling Autolock on a Docker Swarm\nDESCRIPTION: Demonstrates how to disable the autolock feature on a swarm by setting the --autolock flag to false, which allows the swarm to start without requiring a key.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm_manager_locking.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm update --autolock=false\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Docker Hub\nDESCRIPTION: Push the built Docker image to your Docker Hub repository, making it available for others to use.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/build-and-push-first-image.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker push <DOCKER_USERNAME>/getting-started-todo-app\n```\n\n----------------------------------------\n\nTITLE: Switching Docker Contexts in Project Harmonia\nDESCRIPTION: These commands demonstrate how to switch between different Docker contexts, including cloud engines and local environment. They show the flexibility in managing multiple Docker environments.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker context use cloudengine\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker context use desktop-linux\n```\n\n----------------------------------------\n\nTITLE: Revoking Docker Image Trust Signature\nDESCRIPTION: Demonstrates how to revoke a signature for a Docker image tag using the docker trust revoke command, which removes the trust metadata for that tag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/_index.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust revoke registry.example.com/admin/demo:1\nEnter passphrase for signer key with ID 8ae710e:\nSuccessfully deleted signature for registry.example.com/admin/demo:1\n```\n\n----------------------------------------\n\nTITLE: Bake Configuration for Local Binary Export\nDESCRIPTION: This HCL snippet defines a Bake target for exporting a binary to the local filesystem. It specifies the output directory and targets the local platform.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_9\n\nLANGUAGE: HCL\nCODE:\n```\ntarget \"bin\" {\n  target = \"bin\"\n  output = [\"build/bin\"]\n  platforms = [\"local\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Rootless Docker Service\nDESCRIPTION: Steps to remove the systemd service for the Docker daemon in rootless mode using dockerd-rootless-setuptool.sh uninstall command, which stops and disables the service but doesn't remove Docker binaries or data.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ dockerd-rootless-setuptool.sh uninstall\n+ systemctl --user stop docker.service\n+ systemctl --user disable docker.service\nRemoved /home/testuser/.config/systemd/user/default.target.wants/docker.service.\n[INFO] Uninstalled docker.service\n[INFO] This uninstallation tool does NOT remove Docker binaries and data.\n[INFO] To remove data, run: `/usr/bin/rootlesskit rm -rf /home/testuser/.local/share/docker`\n```\n\n----------------------------------------\n\nTITLE: Using the --tmpfs Flag with Options in Docker\nDESCRIPTION: Demonstrates the syntax for using the --tmpfs flag with optional mount parameters to configure the tmpfs mount properties.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/tmpfs.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --tmpfs <mount-path>[:opts]\n```\n\n----------------------------------------\n\nTITLE: Allocating GPUs to Docker Containers\nDESCRIPTION: Example of allocating specific GPU devices to a container by specifying driver and count parameters in the gpus configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  model:\n    gpus: \n      - driver: 3dfx\n        count: 2\n```\n\n----------------------------------------\n\nTITLE: Viewing Container Routing Information for IPvlan Network\nDESCRIPTION: Displays the routing table inside a container connected to an IPvlan network. The output shows the default gateway configuration and network routes for the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$$ ip route\n  default via 192.168.30.1 dev eth0\n  192.168.30.0/24 dev eth0  src 192.168.30.2\n```\n\n----------------------------------------\n\nTITLE: Dex Configuration in YAML\nDESCRIPTION: Minimal configuration for Dex, including issuer, storage, web settings, static clients, and password authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dex.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\nissuer: http://localhost:5556/dex\nstorage:\n  type: memory\nweb:\n  http: 0.0.0.0:5556\nstaticClients:\n  - id: example-app\n    redirectURIs:\n      - 'http://localhost:5555/callback'\n    name: 'Example App'\n    secret: ZXhhbXBsZS1hcHAtc2VjcmV0\nenablePasswordDB: true\nstaticPasswords:\n  - email: \"admin@example.com\"\n    hash: \"$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W\"\n    username: \"admin\"\n    userID: \"1234\"\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Data Directories on CentOS\nDESCRIPTION: Commands to delete all Docker images, containers, volumes, and related data by removing the Docker and containerd data directories after uninstalling the packages.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/centos.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo rm -rf /var/lib/docker\n$ sudo rm -rf /var/lib/containerd\n```\n\n----------------------------------------\n\nTITLE: Authorization Request API Schema\nDESCRIPTION: JSON schema for the /AuthZPlugin.AuthZReq API that is called before Docker daemon processes a client request. It includes user information, HTTP details, and request body.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"User\":              \"The user identification\",\n    \"UserAuthNMethod\":   \"The authentication method used\",\n    \"RequestMethod\":     \"The HTTP method\",\n    \"RequestURI\":        \"The HTTP request URI\",\n    \"RequestBody\":       \"Byte array containing the raw HTTP request body\",\n    \"RequestHeader\":     \"Byte array containing the raw HTTP request header as a map[string][]string \"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Extension API Client\nDESCRIPTION: NPM command to install the main Docker Extension API client library\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/frontend-extension-tutorial.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @docker/extension-api-client\n```\n\n----------------------------------------\n\nTITLE: Docker Extension Metadata Configuration\nDESCRIPTION: JSON configuration file that defines the extension's UI properties, including dashboard tab settings and frontend application paths.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/frontend-extension-tutorial.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icon\": \"docker.svg\",\n  \"ui\": {\n    \"dashboard-tab\": {\n      \"title\": \"UI Extension\",\n      \"root\": \"/ui\",\n      \"src\": \"index.html\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running the GenAI Application with Docker Compose\nDESCRIPTION: Command to build and start the GenAI application using Docker Compose. This command builds the required Docker images and runs the services defined in the docker-compose.yaml file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-video-bot/index.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Configuring env_file in Docker Compose\nDESCRIPTION: Sets environment variables in a Docker Compose service by referencing an external .env file. The file path is relative to the Compose file's parent folder.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nenv_file: .env\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Kubernetes Pod\nDESCRIPTION: These commands demonstrate how to execute database migrations for a Ruby on Rails application running in a Kubernetes pod. It includes listing pods and running the migration command.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/deploy.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Get the current pods in the cluster in the namespace default\n$ kubectl get pods\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ kubectl exec -it docker-ruby-on-rails-demo-7cbddb5d6f-qh44l -- rails db:migrate RAILS_ENV=development\n```\n\n----------------------------------------\n\nTITLE: Cloning a Rust Sample Application with Git\nDESCRIPTION: Command to clone the sample Rust application repository from GitHub and change into the project directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/build-images.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/docker/docker-rust-hello && cd docker-rust-hello\n```\n\n----------------------------------------\n\nTITLE: Using SSH in GitHub Actions with docker/bake-action\nDESCRIPTION: This GitHub Actions workflow demonstrates how to set up SSH and use it with the docker/bake-action for Docker builds, providing an alternative to the build-push-action.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/secrets.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up SSH\n        uses: MrSquaare/ssh-setup-action@2d028b70b5e397cf8314c6eaea229a6c3e34977a # v3.1.0\n        with:\n          host: github.com\n          private-key: ${{ secrets.SSH_GITHUB_PPK }}\n          private-key-name: github-ppk\n\n      - name: Build\n        uses: docker/bake-action@v6\n        with:\n          set: |\n            *.ssh=default\n```\n\n----------------------------------------\n\nTITLE: Publishing Container Port to All Host Interfaces in Docker\nDESCRIPTION: Runs an Nginx container with port 80 published to port 8080 on all host network interfaces (both IPv4 and IPv6). This makes the container accessible from outside the host.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndocker run -p 8080:80 nginx\n```\n\n----------------------------------------\n\nTITLE: Displaying Enhanced Service Account Add-on Tiers in Markdown\nDESCRIPTION: This code snippet shows a markdown table that outlines the different tiers of Enhanced Service Account add-ons and their corresponding pull rates per day. It includes five tiers with varying pull rate ranges.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/service-accounts.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Tier | Pull Rates Per Day\\* |\n| ------ | ------ |\n| 1 | 5,000-10,000 |\n| 2 | 10,000-25,000 |\n| 3 | 25,000-50,000 |\n| 4 | 50,000-100,000 |\n| 5 | 100,000+ |\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceError Interface in TypeScript\nDESCRIPTION: Interface definition for handling HTTP error responses in Docker extensions. Contains name and message properties for error details, and statusCode for the HTTP response code.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ServiceError.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ServiceError {\n    name: string;\n    message: string;\n    statusCode: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Iptables Rules for Docker Network Connectivity\nDESCRIPTION: Script commands to check for and add missing iptables rules in the FORWARD chain that are required for container network connectivity. These rules allow traffic to egress from the HOST through docker_gwbridge and docker0 interfaces.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/19.03.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/sbin/iptables --wait -C FORWARD -o docker_gwbridge -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n/sbin/iptables --wait -C FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Platform Binaries with Docker\nDESCRIPTION: Console command to build the Rust program for multiple platforms (linux/amd64 and linux/arm64) and export the binaries to the 'out' directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/export.md#2025-04-11_snippet_3\n\nLANGUAGE: Console\nCODE:\n```\n$ docker build --platform=linux/amd64,linux/arm64 --output=out .\n$ tree out/\nout/\n├── linux_amd64\n│   └── hello\n└── linux_arm64\n    └── hello\n\n3 directories, 2 files\n```\n\n----------------------------------------\n\nTITLE: Navigating to Frontend Directory in Terminal\nDESCRIPTION: Command to change directory to the frontend folder in the terminal, which is the first step in starting the frontend service.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ cd frontend\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Configuration Conflict Error\nDESCRIPTION: Error message displayed when there's a conflict between options specified in the daemon.json configuration file and command-line flags used to start the Docker daemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nunable to configure the Docker daemon with file /etc/docker/daemon.json:\nthe following directives are specified both as a flag and in the configuration\nfile: hosts: (from flag: [unix:///var/run/docker.sock], from file: [tcp://127.0.0.1:2376])\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Build and Start\nDESCRIPTION: Command to build and run the containerized application using Docker Compose in the foreground.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/containerize.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Displaying Note About Subscription Requirement\nDESCRIPTION: Markdown snippet showing a note that automated builds require a Docker Pro, Team, or Business subscription.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/builds/setup.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n>\n> Automated builds require a\n> Docker Pro, Team, or Business subscription.\n```\n\n----------------------------------------\n\nTITLE: Managing Rootless Docker Daemon with Systemd\nDESCRIPTION: Commands for starting the Docker daemon using systemd in rootless mode and enabling it to launch automatically on system startup through user systemd services and lingering.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ systemctl --user start docker\n```\n\nLANGUAGE: console\nCODE:\n```\n$ systemctl --user enable docker\n$ sudo loginctl enable-linger $(whoami)\n```\n\n----------------------------------------\n\nTITLE: Custom Nginx AppArmor Profile\nDESCRIPTION: A custom AppArmor profile for securing Nginx containers. It restricts network and file system access, denies execution of specific binaries, and defines permitted capabilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/apparmor.md#2025-04-11_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n#include <tunables/global>\n\n\nprofile docker-nginx flags=(attach_disconnected,mediate_deleted) {\n  #include <abstractions/base>\n\n  network inet tcp,\n  network inet udp,\n  network inet icmp,\n\n  deny network raw,\n\n  deny network packet,\n\n  file,\n  umount,\n\n  deny /bin/** wl,\n  deny /boot/** wl,\n  deny /dev/** wl,\n  deny /etc/** wl,\n  deny /home/** wl,\n  deny /lib/** wl,\n  deny /lib64/** wl,\n  deny /media/** wl,\n  deny /mnt/** wl,\n  deny /opt/** wl,\n  deny /proc/** wl,\n  deny /root/** wl,\n  deny /sbin/** wl,\n  deny /srv/** wl,\n  deny /tmp/** wl,\n  deny /sys/** wl,\n  deny /usr/** wl,\n\n  audit /** w,\n\n  /var/run/nginx.pid w,\n\n  /usr/sbin/nginx ix,\n\n  deny /bin/dash mrwklx,\n  deny /bin/sh mrwklx,\n  deny /usr/bin/top mrwklx,\n\n\n  capability chown,\n  capability dac_override,\n  capability setuid,\n  capability setgid,\n  capability net_bind_service,\n\n  deny @{PROC}/* w,   # deny write for all files directly in /proc (not in a subdir)\n  # deny write to files not in /proc/<number>/** or /proc/sys/**\n  deny @{PROC}/{[^1-9],[^1-9][^0-9],[^1-9s][^0-9y][^0-9s],[^1-9][^0-9][^0-9][^0-9]*}/** w,\n  deny @{PROC}/sys/[^k]** w,  # deny /proc/sys except /proc/sys/k* (effectively /proc/sys/kernel)\n  deny @{PROC}/sys/kernel/{?,??,[^s][^h][^m]**} w,  # deny everything except shm* in /proc/sys/kernel/\n  deny @{PROC}/sysrq-trigger rwklx,\n  deny @{PROC}/mem rwklx,\n  deny @{PROC}/kmem rwklx,\n  deny @{PROC}/kcore rwklx,\n\n  deny mount,\n\n  deny /sys/[^f]*/** wklx,\n  deny /sys/f[^s]*/** wklx,\n  deny /sys/fs/[^c]*/** wklx,\n  deny /sys/fs/c[^g]*/** wklx,\n  deny /sys/fs/cg[^r]*/** wklx,\n  deny /sys/firmware/** rwklx,\n  deny /sys/kernel/security/** rwklx,\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Dockerfile Comment Format with Separation\nDESCRIPTION: This snippet shows the correct way to separate non-descriptive comments from FROM and ARG instructions in a Dockerfile by using empty lines.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-definition-description.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# a non-descriptive comment\n\nFROM scratch AS base\n\n# another non-descriptive comment\n\nARG VERSION=1\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Pod Status Output\nDESCRIPTION: Example shell output showing the status of a running Kubernetes pod.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/orchestration.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nNAME      READY     STATUS    RESTARTS   AGE\ndemo      1/1       Running   0          4s\n```\n\n----------------------------------------\n\nTITLE: Modified Bake Configuration in JSON Format\nDESCRIPTION: JSON output showing the modified build configuration after customizing the default group in the Bake file. The 'seed' target is no longer included in the default group.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\"vote\", \"result\", \"worker\"]\n    }\n  },\n  \"target\": {\n    \"result\": {\n      \"context\": \"result\",\n      \"dockerfile\": \"Dockerfile\",\n      \"tags\": [\"username/result\"]\n    },\n    \"vote\": {\n      \"context\": \"vote\",\n      \"dockerfile\": \"Dockerfile\",\n      \"tags\": [\"username/vote\"],\n      \"target\": \"dev\"\n    },\n    \"worker\": {\n      \"context\": \"worker\",\n      \"dockerfile\": \"Dockerfile\",\n      \"tags\": [\"username/worker\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Gateway IPs in Daemon JSON\nDESCRIPTION: Configuration example showing how to set host gateway IPs in the daemon.json file and test the configuration with Docker run commands.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n$ cat > /etc/docker/daemon.json\n{ \"host-gateway-ips\": [\"192.0.2.1\", \"2001:db8::1111\"]}\n$ sudo systemctl restart docker\n$ docker run -it --add-host host.docker.internal:host-gateway \\\n  busybox ping host.docker.internal \nPING host.docker.internal (192.0.2.1): 56 data bytes\n$ docker run -it --add-host host.docker.internal:host-gateway \\\n  busybox ping -6 host.docker.internal\nPING host.docker.internal (2001:db8::1111): 56 data bytes\n```\n\n----------------------------------------\n\nTITLE: Displaying Build Cancellation Message in Docker Hub Logs\nDESCRIPTION: This snippet shows the log message that appears when a build is cancelled or exceeds the maximum execution time of 4 hours in Docker Hub's Automated Build system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/builds/troubleshoot.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n2022-11-02T17:42:27Z The build was cancelled or exceeded the maximum execution time.\n```\n\n----------------------------------------\n\nTITLE: Extracting SBOM for Remote Image to File\nDESCRIPTION: Use the docker buildx imagetools inspect command to extract the SBOM of a remote image (in a registry) and save it to an SPDX JSON file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/view-create-sboms.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx imagetools inspect <image> --format \"{{ json .SBOM }}\" > sbom.spdx.json\n```\n\n----------------------------------------\n\nTITLE: Markdown Header with YAML Frontmatter\nDESCRIPTION: YAML frontmatter defining the page metadata including title, weight, description, and keywords for the Docker products management documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/admin/organization/manage-products.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Manage Docker products\nweight: 45\ndescription: Learn how to manage Docker products for your organization\nkeywords: organization, tools, products\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring BlkioDeviceWriteIOps in Docker Container\nDESCRIPTION: Sets a limit on write rate (IO per second) for a specific device. This configuration restricts how many write operations per second a container can perform on the specified block device.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"BlkioDeviceWriteIOps\": [{\"Path\": \"/dev/sda\", \"Rate\": \"1000\"}]\n```\n\n----------------------------------------\n\nTITLE: Setting a Node Back to Active Availability in Docker Swarm\nDESCRIPTION: Restores a previously drained node to Active availability, allowing it to receive new tasks again. This is used after maintenance is completed to bring the node back into the active pool.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/drain-node.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker node update --availability active worker1\n```\n\n----------------------------------------\n\nTITLE: Checking Service Task Distribution in Docker Swarm\nDESCRIPTION: Shows how tasks for a service are distributed across the swarm nodes. Displays information about which nodes are running which tasks and their current state.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/drain-node.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker service ps redis\n```\n\n----------------------------------------\n\nTITLE: Cloning Docker Getting Started Project\nDESCRIPTION: Clone the Docker getting-started-todo-app project from GitHub and navigate to the project directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/develop-with-containers.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/docker/getting-started-todo-app\n```\n\nLANGUAGE: console\nCODE:\n```\n$ cd getting-started-todo-app\n```\n\n----------------------------------------\n\nTITLE: Golang Server Implementation with Prometheus Metrics\nDESCRIPTION: Complete implementation of the Golang server using Gin framework and Prometheus metrics registration. Includes metric definitions, custom registry setup, and route handlers.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/application.md#2025-04-11_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"strconv\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\n// Define metrics\nvar (\n\tHttpRequestTotal = prometheus.NewCounterVec(prometheus.CounterOpts{\n\t\tName: \"api_http_request_total\",\n\t\tHelp: \"Total number of requests processed by the API\",\n\t}, []string{\"path\", \"status\"})\n\n\tHttpRequestErrorTotal = prometheus.NewCounterVec(prometheus.CounterOpts{\n\t\tName: \"api_http_request_error_total\",\n\t\tHelp: \"Total number of errors returned by the API\",\n\t}, []string{\"path\", \"status\"})\n)\n\n// Custom registry (without default Go metrics)\nvar customRegistry = prometheus.NewRegistry()\n\n// Register metrics with custom registry\nfunc init() {\n\tcustomRegistry.MustRegister(HttpRequestTotal, HttpRequestErrorTotal)\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Network Configuration\nDESCRIPTION: Example of TCP endpoint configuration\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ntcp://127.0.0.1:4243\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in a Rails Container\nDESCRIPTION: Command to execute Rails database migrations inside the running web container, necessary to set up the database schema in the test environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -it docker-ruby-on-rails-web-1 rake db:migrate RAILS_ENV=test\n```\n\n----------------------------------------\n\nTITLE: Running Multi-Platform Docker Image to Display Architecture\nDESCRIPTION: Console command to run the built multi-platform Docker image and display the architecture information from the previously created file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm multi-platform cat /arch\n```\n\n----------------------------------------\n\nTITLE: Escaping Variable Interpolation in Docker Bake HCL\nDESCRIPTION: Demonstrates how to escape variable interpolation using double dollar signs in a Docker Bake HCL file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/variables.md#2025-04-11_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"webapp\" {\n  dockerfile-inline = <<EOF\n  FROM alpine\n  ARG TARGETARCH\n  RUN echo \"Building for $${TARGETARCH/amd64/x64}\"\n  EOF\n  platforms = [\"linux/amd64\", \"linux/arm64\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Rust API Endpoint with cURL\nDESCRIPTION: Command to test the Rust API endpoint using cURL after the Docker Compose services are running.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ curl http://localhost:8000/users\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker Logging Drivers Documentation\nDESCRIPTION: YAML front matter configuration for a documentation page about Docker logging drivers. The configuration disables rendering during build and sets the page title.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Logging drivers\n---\n```\n\n----------------------------------------\n\nTITLE: BuildKit Exporter Links in Markdown\nDESCRIPTION: Markdown list of links to different BuildKit exporter documentation pages, including image/registry, OCI/Docker, and local/tar exporters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/_index.md#2025-04-11_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- [Image and registry exporters](image-registry.md)\n- [OCI and Docker exporters](oci-docker.md).\n- [Local and tar exporters](local-tar.md)\n```\n\n----------------------------------------\n\nTITLE: Creating Nginx Service with Docker Secrets (Target Option)\nDESCRIPTION: This command creates a Docker service for Nginx using the 'target' option to specify a custom location for the site.conf secret. It eliminates the need for symbolic links.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n     --name nginx \\\n     --secret site.key \\\n     --secret site.crt \\\n     --secret source=site.conf,target=/etc/nginx/conf.d/site.conf \\\n     --publish published=3000,target=443 \\\n     nginx:latest \\\n     sh -c \"exec nginx -g 'daemon off;'\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Pull Rate Limit Error Message in Docker CLI\nDESCRIPTION: This snippet shows the error message displayed when a user has reached their pull rate limit in Docker Hub. It indicates that the user needs to authenticate or upgrade to increase their limit.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/troubleshoot.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nYou have reached your pull rate limit. You may increase the limit by authenticating and upgrading: https://www.docker.com/increase-rate-limits\n```\n\n----------------------------------------\n\nTITLE: Running the Python Application in Detached Mode\nDESCRIPTION: Command to build and run the containerized Python application in detached mode, allowing it to run in the background without being attached to the terminal.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build -d\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Docker Extensions using CLI\nDESCRIPTION: This command lists all installed Docker Extensions, showing their ID, provider, version, UI components, VM status, and host deployment status.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/non-marketplace.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension ls\nID                  PROVIDER            VERSION             UI                    VM                  HOST\njohn/my-extension   John                latest              1 tab(My-Extension)   Running(1)          -\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Docker Compose\nDESCRIPTION: This snippet illustrates how to set environment variables for a service in Docker Compose. It shows both the array and dictionary syntax for defining environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/_default/single.markdown.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nweb:\n  environment:\n    - DEBUG=1\n    - DATABASE_URL=mysql://db/example\n\ndb:\n  environment:\n    POSTGRES_DB: \"${DB_NAME}\"\n    POSTGRES_USER: \"${DB_USER}\"\n```\n\n----------------------------------------\n\nTITLE: GRUB Configuration for Enabling Cgroup Memory and Swap Accounting\nDESCRIPTION: Required GRUB configuration to enable memory and swap accounting in the kernel, which allows Docker to enforce memory and swap constraints on containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nGRUB_CMDLINE_LINUX=\"cgroup_enable=memory swapaccount=1\"\n```\n\n----------------------------------------\n\nTITLE: Checking Dex Container Logs\nDESCRIPTION: Command to view the logs of the running Dex container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dex.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose logs -f dex\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker Compose Development Environment\nDESCRIPTION: Docker Compose configuration for development with file watching capabilities and port mapping.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/tensorflowjs.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 80:80\n    develop:\n      watch:\n        - action: sync\n          path: .\n          target: /usr/share/nginx/html\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Changelog in HTML\nDESCRIPTION: Example of HTML formatting for the extension changelog label that can include structured elements like lists for better readability.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/labels.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>Extension changelog<ul>\n<li>New feature A</li>\n<li>Bug fix on feature B</li></ul></p>\n```\n\n----------------------------------------\n\nTITLE: Multi-level extends in Docker Compose\nDESCRIPTION: Demonstrates multiple levels of service extension where properties cascade through the chain of extended services. The extending service inherits properties from all services in the chain.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  base:\n    image: busybox\n    user: root\n  common:\n    image: busybox\n    extends:\n      service: base\n  cli:\n    extends:\n      service: common\n```\n\n----------------------------------------\n\nTITLE: Running container with youki runtime\nDESCRIPTION: Command to run a hello-world container using the youki runtime instead of the default runc runtime.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/alternative-runtimes.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm --runtime youki hello-world\n```\n\n----------------------------------------\n\nTITLE: Error Output Example for FROM/AS Casing Mismatch in Dockerfiles\nDESCRIPTION: Shows the error message output when the 'FROM' and 'AS' keywords do not use consistent casing in a Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-as-casing.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n'as' and 'FROM' keywords' casing do not match\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Documentation FAQ Page Settings in YAML\nDESCRIPTION: YAML front matter configuration that defines the build, rendering, title and weight properties for the Docker documentation FAQ page. Specifies that the page should never be rendered and sets its navigation weight to 30.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/faqs/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: FAQs\nweight: 30\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Notary Client with JSON\nDESCRIPTION: Creates a configuration file for the Notary CLI at ~/.notary/config.json, specifying the trust directory and remote server details.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"trust_dir\" : \"~/.docker/trust\",\n  \"remote_server\": {\n    \"url\": \"https://registry.example.com\",\n    \"root_ca\": \"../.docker/ca.pem\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to MySQL Container via Interactive Shell\nDESCRIPTION: Executes an interactive MySQL shell inside the running MySQL container to verify connectivity and database setup. Requires the container ID and the root password 'secret'.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -it <mysql-container-id> mysql -u root -p\n```\n\n----------------------------------------\n\nTITLE: Filtering containers by ancestor image\nDESCRIPTION: Shows how to list all running containers that were created from a specific image using the --filter flag with the ancestor parameter.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps -q --filter ancestor=nginx:alpine\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Template Header Example\nDESCRIPTION: Example showing the basic header notation used in Compose Bridge templates\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/customize.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#! manifest.yaml\n```\n\n----------------------------------------\n\nTITLE: Error Handling with --mount when Source Path Doesn't Exist\nDESCRIPTION: Shows the error message that occurs when attempting to create a bind mount with a non-existent source path using the --mount flag, which does not automatically create directories like --volume does.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --mount type=bind,src=/dev/noexist,dst=/mnt/foo alpine\ndocker: Error response from daemon: invalid mount config for type \"bind\": bind source path does not exist: /dev/noexist.\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for GenAI Application with Database\nDESCRIPTION: This YAML snippet shows how to configure Docker Compose to run a GenAI application with a Neo4j database. It defines a server service and a database service with health checking and environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 8000:8000\n    env_file:\n      - .env\n    depends_on:\n      database:\n        condition: service_healthy\n  database:\n    image: neo4j:5.11\n    ports:\n      - \"7474:7474\"\n      - \"7687:7687\"\n    environment:\n      - NEO4J_AUTH=${NEO4J_USERNAME}/${NEO4J_PASSWORD}\n    healthcheck:\n      test: [\"CMD-SHELL\", \"wget --no-verbose --tries=1 --spider localhost:7474 || exit 1\"]\n      interval: 5s\n      timeout: 3s\n      retries: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Logging Driver in daemon.json\nDESCRIPTION: JSON configuration example for setting local as the default logging driver with a maximum log size of 10 megabytes in the daemon.json file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/local.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-driver\": \"local\",\n  \"log-opts\": {\n    \"max-size\": \"10m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring env_file with optional requirements in Docker Compose\nDESCRIPTION: Uses the required attribute to specify whether an environment file must exist. When set to false, Compose ignores missing files silently.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nenv_file:\n  - path: ./default.env\n    required: true # default\n  - path: ./override.env\n    required: false\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Service with Custom Command in Docker Compose\nDESCRIPTION: This Docker Compose YAML configuration overrides the default ENTRYPOINT and CMD for a PostgreSQL container, specifying a custom entrypoint script and command arguments for authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  postgres:\n    image: postgres\n    entrypoint: [\"docker-entrypoint.sh\", \"postgres\"]\n    command: [\"-h\", \"localhost\", \"-p\", \"5432\"]\n    environment:\n      POSTGRES_PASSWORD: secret\n```\n\n----------------------------------------\n\nTITLE: Running the C++ Application with Docker Compose\nDESCRIPTION: Build and run the C++ application container using Docker Compose in the foreground.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/containerize.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Mounting into a Non-Empty Directory using --mount in Docker\nDESCRIPTION: This snippet demonstrates how to bind-mount a directory into a non-empty directory on a Docker container using the --mount flag. It shows an example that results in a non-functioning container due to overwriting critical system files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -it \\\n  --name broken-container \\\n  --mount type=bind,source=/tmp,target=/usr \\\n  nginx:latest\n\ndocker: Error response from daemon: oci runtime error: container_linux.go:262:\nstarting container process caused \"exec: \\\"nginx\\\": executable file not found in $PATH\".\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Building Rust Hello World Binary\nDESCRIPTION: Dockerfile that compiles a simple Rust program printing 'Hello World!' and creates a minimal image containing only the binary. It uses a multi-stage build process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/export.md#2025-04-11_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM rust:alpine AS build\nWORKDIR /src\nCOPY <<EOT hello.rs\nfn main() {\n    println!(\"Hello World!\");\n}\nEOT\nRUN rustc -o /bin/hello hello.rs\n\nFROM scratch\nCOPY --from=build /bin/hello /\nENTRYPOINT [\"/hello\"]\n```\n\n----------------------------------------\n\nTITLE: Specifying Dockerfile Path in Docker Bake\nDESCRIPTION: Demonstrates how to specify the path to the Dockerfile using the dockerfile attribute. This is equivalent to the --file flag in docker build.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_20\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  dockerfile = \"./src/www/Dockerfile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating 802.1Q Trunked Macvlan Network\nDESCRIPTION: Creates a macvlan network using 802.1Q VLAN tagging, attached to the eth0.10 sub-interface with specified subnet and gateway configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/macvlan.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d macvlan \\\n  --subnet=172.16.86.0/24 \\\n  --gateway=172.16.86.1 \\\n  -o parent=eth0.10 \\\n  my-8021q-macvlan-net\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Completion for Fish Shell\nDESCRIPTION: Commands to generate and install the Docker completion script for fish shell in the appropriate completions directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/completion.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p ~/.config/fish/completions\n$ docker completion fish > ~/.config/fish/completions/docker.fish\n```\n\n----------------------------------------\n\nTITLE: Configuring Credential Spec with Registry Protocol\nDESCRIPTION: Example showing how to configure credential specification using a Windows registry reference.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncredential_spec:\n  registry: my-credential-spec\n```\n\n----------------------------------------\n\nTITLE: Pruning Docker Volumes with Label Filter\nDESCRIPTION: This command prunes volumes that don't have the 'keep' label. It demonstrates the use of the --filter flag to limit which volumes are pruned based on labels.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker volume prune --filter \"label!=keep\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Insecure Registry with CIDR Notation\nDESCRIPTION: Shows how to specify insecure registries using CIDR notation with the --insecure-registry flag, allowing Docker to connect to private registries without certificate verification.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n--insecure-registry 10.1.0.0/16\n```\n\n----------------------------------------\n\nTITLE: Scaling BuildKit with Multiple Replicas\nDESCRIPTION: This example creates a Kubernetes builder with 4 replica BuildKit pods in the 'buildkit' namespace.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx create \\\n  --bootstrap \\\n  --name=kube \\\n  --driver=kubernetes \\\n  --driver-opt=namespace=buildkit,replicas=4\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Reference Docs\nDESCRIPTION: YAML configuration block defining the structure and content of the Docker reference documentation page, including metadata, navigation settings, and grid items for file formats, CLIs, and APIs.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Reference documentation\nlinkTitle: Reference\nlayout: wide\ndescription: Find reference documentation for the Docker platform's various APIs, CLIs, and file formats\nparams:\n  icon: terminal\n  notoc: true\n  grid_files:\n  - title: Dockerfile\n    description: Defines the contents and startup behavior of a single container.\n    icon: edit_document\n    link: /reference/dockerfile/\n  - title: Compose file\n    description: Defines a multi-container application.\n    icon: polyline\n    link: /reference/compose-file/\n  grid_clis:\n  - title: Docker CLI\n    description: The main Docker CLI, includes all `docker` commands.\n    icon: terminal\n    link: /reference/cli/docker/\n  - title: Compose CLI\n    description: The CLI for Docker Compose, for building and running multi-container\n      applications.\n    icon: subtitles\n    link: /reference/cli/docker/compose/\n  - title: Daemon CLI (dockerd)\n    description: Persistent process that manages containers.\n    icon: developer_board\n    link: /reference/cli/dockerd/\n  grid_apis:\n  - title: Engine API\n    description: The main API for Docker, provides programmatic access to a daemon.\n    icon: api\n    link: /reference/api/engine/\n  - title: Docker Hub API\n    description: API to interact with Docker Hub.\n    icon: communities\n    link: /reference/api/hub/latest/\n  - title: DVP Data API\n    description: API for Docker Verified Publishers to fetch analytics data.\n    icon: area_chart\n    link: /reference/api/hub/dvp/\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Projects Documentation\nDESCRIPTION: YAML configuration block defining the documentation page metadata, navigation structure, and content grid layout for Docker Projects documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/projects/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Docker Projects\nparams:\n  sidebar:\n    group: Products\n    badge:\n      color: blue\n      text: Beta\nweight: 50\nsitemap: false\ndescription: Learn how to use Docker Projects which provides a unified, project-based workflow to run your containerized projects. \nkeywords: Docker, projects, docker deskotp, containerization\ngrid:\n- title: How Docker Projects works\n  description: Learn How Docker Projects works\n  icon: category\n  link: /projects/about/\n- title: Open a new project\n  description: Learn how to open a new local or remote projects.\n  icon: checklist\n  link: /projects/open/\n- title: Edit your project\n  description: Edit your project's run commands and setup. N\n  icon: design_services\n  link: /projects/edit/\n- title: Manage your projects\n  description: Run or remove your projects.\n  icon: tune\n  link: /projects/manage/\n- title: View your projects\n  description: View detailed information about your projects and services within your projects\n  icon: visibility\n  link: /projects/view/\n- title: FAQs\n  description: View common FAQs about Docker Projects\n  icon: help\n  link: /projects/faq/\n---\n```\n\n----------------------------------------\n\nTITLE: Invalid FROM Instruction with Undefined ARG\nDESCRIPTION: Example of incorrect usage where VARIANT build argument is not defined before use.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-arg-in-from.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:22${VARIANT} AS jsbuilder\n```\n\n----------------------------------------\n\nTITLE: Applying Private Marketplace Configuration\nDESCRIPTION: OS-specific commands to apply the marketplace configuration to Docker Desktop\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/private-marketplace.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo /Applications/Docker.app/Contents/Resources/bin/extension-admin apply\n```\n\nLANGUAGE: console\nCODE:\n```\n$ C:\\Program Files\\Docker\\Docker\\resources\\bin\\extension-admin apply\n```\n\nLANGUAGE: console\nCODE:\n```\n$ sudo /opt/docker-desktop/extension-admin apply\n```\n\n----------------------------------------\n\nTITLE: Configuring remote access with daemon.json\nDESCRIPTION: JSON configuration for Docker daemon to enable it to listen on both Unix socket and TCP port. This is done by setting the hosts array in the daemon.json file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/remote-access.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosts\": [\"unix:///var/run/docker.sock\", \"tcp://127.0.0.1:2375\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Service with Both TCP and UDP Ports Using Short Syntax\nDESCRIPTION: Command to create a DNS cache service that publishes both TCP and UDP on port 53 using the short syntax format, with /udp suffix for UDP port specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name dns-cache \\\n  -p 53:53 \\\n  -p 53:53/udp \\\n  dns-cache\n```\n\n----------------------------------------\n\nTITLE: Installing GNOME Extensions for RHEL 8\nDESCRIPTION: Commands to install and enable AppIndicator and desktop icons GNOME extensions on RHEL 8\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/rhel.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf install gnome-shell-extension-appindicator\n$ sudo dnf install gnome-shell-extension-desktop-icons\n$ sudo gnome-shell-extension-tool -e appindicatorsupport@rgcjonas.gmail.com\n```\n\n----------------------------------------\n\nTITLE: Searching for Available Docker Versions on SLES\nDESCRIPTION: Command to list all available Docker Engine versions in the repository before installing a specific version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/sles.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo zypper search -s --match-exact docker-ce | sort -r\n \n     v  | docker-ce | package | 3:{{% param \"docker_ce_version\" %}}-1 | s390x | Docker CE Stable - s390x\n     v  | docker-ce | package | 3:{{% param \"docker_ce_version_prev\" %}}-1 | s390x | Docker CE Stable - s390x\n```\n\n----------------------------------------\n\nTITLE: Listing Docker containers with port mappings\nDESCRIPTION: Shows the docker ps command output displaying a running container with its automatic port mapping from container port 5000 to host port 49155.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps nostalgic_morse\n\nCONTAINER ID  IMAGE                   COMMAND       CREATED        STATUS        PORTS                    NAMES\nbc533791f3f5  training/webapp:latest  python app.py 5 seconds ago  Up 2 seconds  0.0.0.0:49155->5000/tcp  nostalgic_morse\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Service via DELETE API\nDESCRIPTION: DELETE endpoint to stop and remove a Docker service by ID or name. Returns 200 on success with empty response.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_103\n\nLANGUAGE: http\nCODE:\n```\nDELETE /v1.24/services/16253994b7c4 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Generating CA Private and Public Keys for TLS\nDESCRIPTION: Creates Certificate Authority private and public keys using OpenSSL, which will be used to sign server and client certificates for secure Docker communication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ openssl genrsa -aes256 -out ca-key.pem 4096\nGenerating RSA private key, 4096 bit long modulus\n..............................................................................++\n........++\ne is 65537 (0x10001)\nEnter pass phrase for ca-key.pem:\nVerifying - Enter pass phrase for ca-key.pem:\n\n$ openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem\nEnter pass phrase for ca-key.pem:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:\nState or Province Name (full name) [Some-State]:Queensland\nLocality Name (eg, city) []:Brisbane\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:Docker Inc\nOrganizational Unit Name (eg, section) []:Sales\nCommon Name (e.g. server FQDN or YOUR name) []:$HOST\nEmail Address []:Sven@home.org.au\n```\n\n----------------------------------------\n\nTITLE: Interface Definition for RequestConfigV0 in Docker Extension API\nDESCRIPTION: This interface defines the structure for HTTP request configuration in Docker extensions. It includes four required properties: url (the request destination), method (HTTP method), headers (request headers as key-value pairs), and data (the request payload).\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/RequestConfigV0.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RequestConfigV0 {\n  readonly url: string;\n  readonly method: string;\n  readonly headers: Record<string, string>;\n  readonly data: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Application Files to Docker Image\nDESCRIPTION: Transfers all Python scripts and the entrypoint script into the Docker image's application directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY *.py /app\nCOPY entrypoint.sh /app\n```\n\n----------------------------------------\n\nTITLE: Setting DNS Server for Docker Containers\nDESCRIPTION: Example of how to set a custom DNS server (8.8.8.8) for all Docker containers. This affects all containers run by the daemon unless overridden at container creation.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dockerd --dns 8.8.8.8\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image for NLP Application\nDESCRIPTION: Command to build a Docker image named 'basic-nlp' from a Dockerfile in the current directory. This creates the container image that will run the language translation application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t basic-nlp .\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Docker Engine from Fedora\nDESCRIPTION: This command removes Docker Engine and its related packages from the system. It doesn't remove images, containers, volumes, or custom configuration files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/fedora.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Docker Engine and Components from CentOS\nDESCRIPTION: Command to remove Docker Engine, CLI, containerd, and plugin packages from the system using the DNF package manager.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/centos.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\n```\n\n----------------------------------------\n\nTITLE: Complete buildkitd.toml Configuration Example\nDESCRIPTION: A comprehensive example of a buildkitd.toml configuration file that demonstrates all available settings for configuring the buildkitd daemon. This includes global settings, logging, DNS, gRPC, worker settings for both OCI and containerd, registry configuration, frontend options, and system settings.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/buildkitd.toml.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n# debug enables additional debug logging\ndebug = true\n# trace enables additional trace logging (very verbose, with potential performance impacts)\ntrace = true\n# root is where all buildkit state is stored.\nroot = \"/var/lib/buildkit\"\n# insecure-entitlements allows insecure entitlements, disabled by default.\ninsecure-entitlements = [ \"network.host\", \"security.insecure\" ]\n\n[log]\n  # log formatter: json or text\n  format = \"text\"\n\n[dns]\n  nameservers=[\"1.1.1.1\",\"8.8.8.8\"]\n  options=[\"edns0\"]\n  searchDomains=[\"example.com\"]\n\n[grpc]\n  address = [ \"tcp://0.0.0.0:1234\" ]\n  # debugAddress is address for attaching go profiles and debuggers.\n  debugAddress = \"0.0.0.0:6060\"\n  uid = 0\n  gid = 0\n  [grpc.tls]\n    cert = \"/etc/buildkit/tls.crt\"\n    key = \"/etc/buildkit/tls.key\"\n    ca = \"/etc/buildkit/tlsca.crt\"\n\n[otel]\n  # OTEL collector trace socket path\n  socketPath = \"/run/buildkit/otel-grpc.sock\"\n\n[cdi]\n  # Disables support of the Container Device Interface (CDI).\n  disabled = true\n  # List of directories to scan for CDI spec files. For more details about CDI\n  # specification, please refer to https://github.com/cncf-tags/container-device-interface/blob/main/SPEC.md#cdi-json-specification\n  specDirs = [\"/etc/cdi\", \"/var/run/cdi\", \"/etc/buildkit/cdi\"]\n\n# config for build history API that stores information about completed build commands\n[history]\n  # maxAge is the maximum age of history entries to keep, in seconds.\n  maxAge = 172800\n  # maxEntries is the maximum number of history entries to keep.\n  maxEntries = 50\n\n[worker.oci]\n  enabled = true\n  # platforms is manually configure platforms, detected automatically if unset.\n  platforms = [ \"linux/amd64\", \"linux/arm64\" ]\n  snapshotter = \"auto\" # overlayfs or native, default value is \"auto\".\n  rootless = false # see docs/rootless.md for the details on rootless mode.\n  # Whether run subprocesses in main pid namespace or not, this is useful for\n  # running rootless buildkit inside a container.\n  noProcessSandbox = false\n\n  # gc enables/disables garbage collection\n  gc = true\n  # reservedSpace is the minimum amount of disk space guaranteed to be\n  # retained by this buildkit worker - any usage below this threshold will not\n  # be reclaimed during garbage collection.\n  # all disk space parameters can be an integer number of bytes (e.g.\n  # 512000000), a string with a unit (e.g. \"512MB\"), or a string percentage\n  # of the total disk space (e.g. \"10%\")\n  reservedSpace = \"30%\"\n  # maxUsedSpace is the maximum amount of disk space that may be used by\n  # this buildkit worker - any usage above this threshold will be reclaimed\n  # during garbage collection.\n  maxUsedSpace = \"60%\"\n  # minFreeSpace is the target amount of free disk space that the garbage\n  # collector will attempt to leave - however, it will never be bought below\n  # reservedSpace.\n  minFreeSpace = \"20GB\"\n\n  # alternate OCI worker binary name(example 'crun'), by default either \n  # buildkit-runc or runc binary is used\n  binary = \"\"\n  # name of the apparmor profile that should be used to constrain build containers.\n  # the profile should already be loaded (by a higher level system) before creating a worker.\n  apparmor-profile = \"\"\n  # limit the number of parallel build steps that can run at the same time\n  max-parallelism = 4\n  # maintain a pool of reusable CNI network namespaces to amortize the overhead\n  # of allocating and releasing the namespaces\n  cniPoolSize = 16\n\n  [worker.oci.labels]\n    \"foo\" = \"bar\"\n\n  [[worker.oci.gcpolicy]]\n    # reservedSpace is the minimum amount of disk space guaranteed to be\n    # retained by this policy - any usage below this threshold will not be\n    # reclaimed during # garbage collection.\n    reservedSpace = \"512MB\"\n    # maxUsedSpace is the maximum amount of disk space that may be used by this\n    # policy - any usage above this threshold will be reclaimed during garbage\n    # collection.\n    maxUsedSpace = \"1GB\"\n    # minFreeSpace is the target amount of free disk space that the garbage\n    # collector will attempt to leave - however, it will never be bought below\n    # reservedSpace.\n    minFreeSpace = \"10GB\"\n\n    # keepDuration can be an integer number of seconds (e.g. 172800), or a\n    # string duration (e.g. \"48h\")\n    keepDuration = \"48h\"\n    filters = [ \"type==source.local\", \"type==exec.cachemount\", \"type==source.git.checkout\"]\n  [[worker.oci.gcpolicy]]\n    all = true\n    reservedSpace = 1024000000\n\n[worker.containerd]\n  address = \"/run/containerd/containerd.sock\"\n  enabled = true\n  platforms = [ \"linux/amd64\", \"linux/arm64\" ]\n  namespace = \"buildkit\"\n\n  # gc enables/disables garbage collection\n  gc = true\n  # reservedSpace is the minimum amount of disk space guaranteed to be\n  # retained by this buildkit worker - any usage below this threshold will not\n  # be reclaimed during garbage collection.\n  # all disk space parameters can be an integer number of bytes (e.g.\n  # 512000000), a string with a unit (e.g. \"512MB\"), or a string percentage\n  # of the total disk space (e.g. \"10%\")\n  reservedSpace = \"30%\"\n  # maxUsedSpace is the maximum amount of disk space that may be used by\n  # this buildkit worker - any usage above this threshold will be reclaimed\n  # during garbage collection.\n  maxUsedSpace = \"60%\"\n  # minFreeSpace is the target amount of free disk space that the garbage\n  # collector will attempt to leave - however, it will never be bought below\n  # reservedSpace.\n  minFreeSpace = \"20GB\"\n\n  # maintain a pool of reusable CNI network namespaces to amortize the overhead\n  # of allocating and releasing the namespaces\n  cniPoolSize = 16\n  # defaultCgroupParent sets the parent cgroup of all containers.\n  defaultCgroupParent = \"buildkit\"\n\n  [worker.containerd.labels]\n    \"foo\" = \"bar\"\n\n  # configure the containerd runtime\n  [worker.containerd.runtime]\n    name = \"io.containerd.runc.v2\"\n    path = \"/path/to/containerd/runc/shim\"\n    options = { BinaryName = \"runc\" }\n\n  [[worker.containerd.gcpolicy]]\n    reservedSpace = 512000000\n    keepDuration = 172800\n    filters = [ \"type==source.local\", \"type==exec.cachemount\", \"type==source.git.checkout\"]\n  [[worker.containerd.gcpolicy]]\n    all = true\n    reservedSpace = 1024000000\n\n# registry configures a new Docker register used for cache import or output.\n[registry.\"docker.io\"]\n  # mirror configuration to handle path in case a mirror registry requires a /project path rather than just a host:port\n  mirrors = [\"yourmirror.local:5000\", \"core.harbor.domain/proxy.docker.io\"]\n  http = true\n  insecure = true\n  ca=[\"/etc/config/myca.pem\"]\n  [[registry.\"docker.io\".keypair]]\n    key=\"/etc/config/key.pem\"\n    cert=\"/etc/config/cert.pem\"\n\n# optionally mirror configuration can be done by defining it as a registry.\n[registry.\"yourmirror.local:5000\"]\n  http = true\n\n# Frontend control\n[frontend.\"dockerfile.v0\"]\n  enabled = true\n\n[frontend.\"gateway.v0\"]\n  enabled = true\n\n  # If allowedRepositories is empty, all gateway sources are allowed.\n  # Otherwise, only the listed repositories are allowed as a gateway source.\n  # \n  # NOTE: Only the repository name (without tag) is compared.\n  #\n  # Example:\n  # allowedRepositories = [ \"docker-registry.wikimedia.org/repos/releng/blubber/buildkit\" ]\n  allowedRepositories = []\n\n[system]\n  # how often buildkit scans for changes in the supported emulated platforms\n  platformsCacheMaxAge = \"1h\"\n\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Custom Dockerfile and Remote Repository\nDESCRIPTION: Shows how to build an image using a custom Dockerfile from stdin while adding files from a remote GitHub repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t myimage:latest -f- https://github.com/docker-library/hello-world.git <<EOF\nFROM busybox\nCOPY hello.c ./\nEOF\n```\n\n----------------------------------------\n\nTITLE: Finding a Container ID with Docker PS and Filtering\nDESCRIPTION: Uses docker ps with a filter to find the container ID of the MySQL service.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps --filter name=mysql -q\n```\n\n----------------------------------------\n\nTITLE: Pasta Network Driver Configuration\nDESCRIPTION: Systemd service override configuration to enable source IP propagation using pasta network driver with implicit port driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_21\n\nLANGUAGE: systemd\nCODE:\n```\n[Service]\nEnvironment=\"DOCKERD_ROOTLESS_ROOTLESSKIT_NET=pasta\"\nEnvironment=\"DOCKERD_ROOTLESS_ROOTLESSKIT_PORT_DRIVER=implicit\"\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Docker Host Connection\nDESCRIPTION: Example of using the DOCKER_HOST environment variable to specify the connection details for the Docker client instead of using command-line flags.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ export DOCKER_HOST=\"tcp://0.0.0.0:2375\"\n\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Checking NetworkManager Device Status\nDESCRIPTION: Command to verify that the docker0 interface has the unmanaged state in NetworkManager. This confirms that the configuration change was successful.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ nmcli device\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Get v2 Response Format\nDESCRIPTION: JSON v2 response format for the Get endpoint in the volume plugin protocol. The response includes volume details with name, mountpoint under PropagatedMount, and status.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Volume\": {\n    \"Name\": \"volume_name\",\n    \"Mountpoint\": \"/path/under/PropagatedMount\",\n    \"Status\": {}\n  },\n  \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop from Windows Command Prompt\nDESCRIPTION: Command Prompt instruction to install Docker Desktop using the installer executable. This method is specific to the Windows Command Prompt and ensures proper execution of the installer.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/windows-install.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nstart /w \"\" \"Docker Desktop Installer.exe\" install\n```\n\n----------------------------------------\n\nTITLE: Running Nginx Container with Port Mapping using Docker CLI\nDESCRIPTION: This command pulls the latest Nginx image from Docker Hub (if not already present locally) and runs it as a container. It maps port 8080 on the host to port 80 in the container and removes the container when stopped.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/quickstart.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -p 8080:80 --rm nginx\n```\n\n----------------------------------------\n\nTITLE: Getting Docker Daemon Help in Console\nDESCRIPTION: Command to display all available configuration options for the Docker daemon by running the help command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dockerd --help\n```\n\n----------------------------------------\n\nTITLE: Setting Entrypoint in Dockerfile\nDESCRIPTION: Configures the container to run entrypoint.sh as its default executable when the container starts, which determines which application to run.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_15\n\nLANGUAGE: dockerfile\nCODE:\n```\nENTRYPOINT [\"/app/entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Compose Configuration for Multi-stage Builds\nDESCRIPTION: This Compose file shows how to configure services to use specific targets from a multi-stage Dockerfile. Each service specifies which target to build from the shared Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/dependent-images.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  a:\n     build:\n       target: service_a\n  b:\n     build:\n       target: service_b\n```\n\n----------------------------------------\n\nTITLE: Multi-stage React Build\nDESCRIPTION: Multi-stage Dockerfile for building a React application with Node.js and serving with nginx\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/09_image_best.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM node:lts AS build\nWORKDIR /app\nCOPY package* yarn.lock ./\nRUN yarn install\nCOPY public ./public\nCOPY src ./src\nRUN yarn run build\n\nFROM nginx:alpine\nCOPY --from=build /app/build /usr/share/nginx/html\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Daemon Manually with dockerd Command\nDESCRIPTION: Command to manually start the Docker daemon using the dockerd command. When started this way, Docker runs in the foreground and outputs logs directly to the terminal. This method is useful for testing or when you don't want to use system utilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/start.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ dockerd\n\nINFO[0000] +job init_networkdriver()\nINFO[0000] +job serveapi(unix:///var/run/docker.sock)\nINFO[0000] Listening for HTTP on unix (/var/run/docker.sock)\n```\n\n----------------------------------------\n\nTITLE: Reserving multiple devices by count in Compose Deploy\nDESCRIPTION: Shows how to reserve a specific number of devices (TPUs in this example) that satisfy the requested capabilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy:\n  resources:\n    reservations:\n      devices:\n        - capabilities: [\"tpu\"]\n          count: 2\n```\n\n----------------------------------------\n\nTITLE: Using the Default Docker Driver with Buildx\nDESCRIPTION: This command demonstrates the use of the default Docker driver with buildx. Since the Docker driver is used by default, no special configuration is needed to use it.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/docker.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# The Docker driver is used by buildx by default\ndocker buildx build .\n```\n\n----------------------------------------\n\nTITLE: Adding OCI Annotations with bake-action in GitHub Actions\nDESCRIPTION: This workflow demonstrates how to extract metadata and add annotations to Docker images using the docker/metadata-action and docker/bake-action. It includes a bake configuration that references metadata files for tags and annotations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/annotations.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\nenv:\n  IMAGE_NAME: user/app\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.IMAGE_NAME }}\n\n      - name: Build\n        uses: docker/bake-action@v6\n        with:\n          files: |\n            ./docker-bake.hcl\n            cwd://${{ steps.meta.outputs.bake-file-tags }}\n            cwd://${{ steps.meta.outputs.bake-file-annotations }}\n          push: true\n```\n\n----------------------------------------\n\nTITLE: Resulting Configuration After Security Options Merge\nDESCRIPTION: The merged result of extending a service with security_opt sequences. Both the original and extended security options are combined in the final configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nimage: busybox\nsecurity_opt:\n- label=role:ROLE\n- label=user:USER\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Previous Docker Versions on SLES\nDESCRIPTION: Command to remove any existing Docker packages that might conflict with the official Docker Engine installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/sles.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo zypper remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine \\\n                  runc\n```\n\n----------------------------------------\n\nTITLE: Setting up gMSA Credential Spec Variables for Docker Swarm\nDESCRIPTION: Retrieves the gMSA name and JSON contents from Active Directory and saves them for use in Docker Swarm config creation. This is used for Windows containers requiring AD authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ name=\"mygmsa\"\n$ contents=\"{...}\"\n$ echo $contents > contents.json\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker External Connectivity with Image Pull\nDESCRIPTION: Command to test if Docker can resolve external IP addresses by pulling the hello-world image. This verifies that DNS resolution is working properly.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull hello-world\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Source Code Reference\nDESCRIPTION: HTML comment block indicating that the page is automatically generated and providing instructions for suggesting changes through GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/node/update.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Docker Service Update Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the 'docker service update' documentation page. It specifies the data folder, file name, title, aliases for URL routing, and layout template to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/service/update.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_service_update\ntitle: docker service update\naliases:\n- /edge/engine/reference/commandline/service_update/\n- /engine/reference/commandline/service_update/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Attempting to Remove a Config in Use\nDESCRIPTION: Demonstrates that a config cannot be removed while it is being used by a service, showing the error message returned.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker config rm my-config\n```\n\n----------------------------------------\n\nTITLE: Using Docker Bind Mounts for Read-Write Operations\nDESCRIPTION: Shows how changes made within a container using bind mounts are reflected on the host filesystem. This example creates a file inside the container that becomes visible on the host.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --mount type=bind,source=.,target=/foo busybox\n/ # echo \"hello from container\" > /foo/hello.txt\n/ # exit\n$ cat hello.txt\nhello from container\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Service in docker-compose.test.yml for Docker Hub Automated Tests\nDESCRIPTION: This YAML snippet defines a 'sut' (system under test) service in a docker-compose.test.yml file. It builds the current directory and runs a test script. The 'sut' service is required for Docker Hub automated tests, and its return code determines test success or failure.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/builds/automated-testing.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  sut:\n    build: .\n    command: run_tests.sh\n```\n\n----------------------------------------\n\nTITLE: Introducing Docker Debug Alternative in Markdown\nDESCRIPTION: This snippet introduces Docker Debug as an alternative to using 'docker exec' for debugging containers. It highlights the benefits of Docker Debug, such as getting a shell into any container or image without modifications and the ability to include custom debugging tools.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/exec.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> **Introducing Docker Debug**\n>\n> To easily get a debug shell into any container, use `docker debug`. Docker\n> Debug is a replacement for debugging with `docker exec`. With it, you can get\n> a shell into any container or image, even slim ones, without modifications.\n> Plus, you can bring along your favorite debugging tools in its customizable\n> toolbox.\n>\n> Explore [Docker Debug](../debug.md) now.\n```\n\n----------------------------------------\n\nTITLE: POSIX Shell Format Flag Usage in Docker Commands\nDESCRIPTION: This example demonstrates how to use the format flag in POSIX shells, where single quotes can be used to enclose the entire format string.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker inspect --format '{{join .Args \" , \"}}'\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Container on Docker Network\nDESCRIPTION: Runs a MySQL container on the 'my-network' network with environment variables for root password and database name.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -e MYSQL_DATABASE=mydb --network my-network -d mysql:latest\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm with Custom Address Pools\nDESCRIPTION: This command initializes a Docker swarm with a custom default address pool (10.20.0.0/16) and a custom subnet mask length (26) for allocating network subnets.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm init --default-addr-pool 10.20.0.0/16 --default-addr-pool-mask-length 26\n```\n\n----------------------------------------\n\nTITLE: Setting Security Options in Docker Compose YAML\nDESCRIPTION: Shows how to override the default labeling scheme for containers using the security_opt option in a Docker Compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_67\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_opt:\n  - label=user:USER\n  - label=role:ROLE\n```\n\n----------------------------------------\n\nTITLE: Basic BuildX Exporter Usage\nDESCRIPTION: Shows the basic syntax for specifying an exporter type when building with BuildX.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --tag <registry>/<image> \\\n  --output type=<TYPE> .\n```\n\n----------------------------------------\n\nTITLE: Git Repository Configuration Commands\nDESCRIPTION: Shell commands for configuring and pushing code to a GitHub repository. These commands set the remote origin URL and push the initial codebase.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/configure-ci-cd.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git remote set-url origin https://github.com/your-username/your-repository.git\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ git add -A\n$ git commit -m \"my commit\"\n$ git push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Creating a Jaeger container for OpenTelemetry tracing in Docker\nDESCRIPTION: Creates a Docker container running Jaeger for collecting and visualizing OpenTelemetry trace data. The container exposes UDP port 6831 for trace collection and port 16686 for the web UI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/debug/opentelemetry.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d --name jaeger -p \"6831:6831/udp\" -p \"16686:16686\" --restart unless-stopped jaegertracing/all-in-one\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for LocalStack\nDESCRIPTION: Sample .env file content for configuring AWS credentials and LocalStack endpoints.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nMONGODB_URI=mongodb://localhost:27017/todos\nAWS_ACCESS_KEY_ID=test\nAWS_SECRET_ACCESS_KEY=test\nS3_BUCKET_NAME=mysamplebucket\nS3_ENDPOINT_URL=http://localhost:4566\nAWS_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Clearing All Neo4j Database Data\nDESCRIPTION: Cypher query to delete all nodes and relationships in the Neo4j database. Used to reset the database before importing data from a different Stack Overflow tag.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-leveraging-rag/index.md#2025-04-11_snippet_9\n\nLANGUAGE: cypher\nCODE:\n```\nMATCH (n)\nDETACH DELETE n;\n```\n\n----------------------------------------\n\nTITLE: Examining Running Container Directory Structure in Docker OverlayFS\nDESCRIPTION: This snippet shows the directory structure of a running container in Docker's overlay2 storage driver. It displays the four main components: lower-id file, merged directory, upper directory, and work directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/overlayfs-driver.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ ls -l /var/lib/docker/overlay2/<directory-of-running-container>\n\ntotal 16\n-rw-r--r-- 1 root root   64 Jun 20 16:39 lower-id\ndrwxr-xr-x 1 root root 4096 Jun 20 16:39 merged\ndrwxr-xr-x 4 root root 4096 Jun 20 16:39 upper\ndrwx------ 3 root root 4096 Jun 20 16:39 work\n```\n\n----------------------------------------\n\nTITLE: Checking Port 80 Binding\nDESCRIPTION: Uses netstat to verify which process is bound to port 80, requiring sudo privileges to see the process details.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/host.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo netstat -tulpn | grep :80\n```\n\n----------------------------------------\n\nTITLE: Defining Service with Implicit Default Network in Docker Compose\nDESCRIPTION: Shows how a service without explicit network configuration implicitly connects to the default network.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  some-service:\n    image: foo\n```\n\n----------------------------------------\n\nTITLE: Docker Command Line Flag\nDESCRIPTION: Example of Docker CLI flags for container removal with force option\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndocker rm -f\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Volume Create Documentation\nDESCRIPTION: This YAML snippet defines metadata for the documentation page. It specifies the data folder, data file, title, aliases (alternative URLs), and layout for the 'docker volume create' command documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/volume/create.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_volume_create\ntitle: docker volume create\naliases:\n- /edge/engine/reference/commandline/volume_create/\n- /engine/reference/commandline/volume_create/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Testing Java Application with cURL\nDESCRIPTION: Command to test the deployed Java application by making an HTTP GET request to the health endpoint. This verifies that the application is accessible through the Kubernetes service.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/deploy.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ curl --request GET \\\n  --url http://localhost:30001/actuator/health \\\n  --header 'content-type: application/json'\n```\n\n----------------------------------------\n\nTITLE: List Volumes API Response in Docker\nDESCRIPTION: HTTP response listing all available volumes in Docker, including their names, drivers, mountpoints, and other metadata.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_64\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"Volumes\": [\n    {\n      \"Name\": \"tardis\",\n      \"Driver\": \"local\",\n      \"Mountpoint\": \"/var/lib/docker/volumes/tardis\",\n      \"Labels\": null,\n      \"Scope\": \"local\"\n    }\n  ],\n  \"Warnings\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User to docker-users Group (Console)\nDESCRIPTION: Command to add a user to the docker-users group, which is necessary if the admin account is different from the user account. This ensures proper permissions for using Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/windows-install.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ net localgroup docker-users <user> /add\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-Stop Hook in Docker Compose\nDESCRIPTION: This example shows how to configure a pre-stop hook that runs a script before the container stops. The hook runs a data flush script to perform cleanup operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/lifecycle.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: backend\n    pre_stop:\n      - command: ./data_flush.sh\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Docker Content Trust ENV Variable Usage\nDESCRIPTION: This snippet shows the usage of Docker Content Trust environment variables for setting passphrases. It demonstrates the old, deprecated variable names and their new replacements.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker --log-driver=syslog --log-opt tag=\"{{.ImageName}}/{{.Name}}/{{.ID}}\"\n```\n\n----------------------------------------\n\nTITLE: Swarm Mode Enhancements\nDESCRIPTION: Updates to Docker's orchestration capabilities including secret management, service templating, and Windows support\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n+ Add secret management\\n+ Add support for templating service options\\n+ Add `--dns`, `--dns-opt`, and `--dns-search` to service create\\n+ Add `--force` to service updates\\n+ Add health check flags to services\\n+ Add Windows support for swarm mode\n```\n\n----------------------------------------\n\nTITLE: Installing a Docker Extension\nDESCRIPTION: Installs the Docker extension in Docker Desktop using the docker extension install command. After installation, the extension appears under the Extensions menu in Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/quickstart.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension install <name-of-your-extension>\n```\n\n----------------------------------------\n\nTITLE: Disabling System-wide Docker Daemon\nDESCRIPTION: Commands to disable and remove the system-wide Docker daemon before installing rootless Docker.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo systemctl disable --now docker.service docker.socket\n$ sudo rm /var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: API Response for GET Request\nDESCRIPTION: The JSON response returned by the API when retrieving hero objects. It shows the previously created hero with all its attributes.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"age\": 12,\n  \"id\": 1,\n  \"name\": \"my hero\",\n  \"secret_name\": \"austing\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Datadog Agent with Docker Compose\nDESCRIPTION: Command to start the Datadog agent service in detached mode using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/metrics-exporter.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Executing Pre-seed SQL Script\nDESCRIPTION: Command to execute the seed.sql script using Docker exec and psql.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cat seed.sql | docker exec -i postgres psql -h localhost -U postgres -f-\n```\n\n----------------------------------------\n\nTITLE: Setting file capabilities in Docker containers\nDESCRIPTION: Allows the set_file_cap capability to be used within Docker containers using LXC.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_28\n\nLANGUAGE: go\nCODE:\n```\n* lxc: Allow set_file_cap capability in container\n```\n\n----------------------------------------\n\nTITLE: Updating docker-scan-plugin on Debian-based distributions\nDESCRIPTION: Command to update the docker-scan-plugin package on Debian-based Linux distributions like Ubuntu.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/20.10.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napt-get update && apt-get install docker-scan-plugin\n```\n\n----------------------------------------\n\nTITLE: Implementing Face Detection with TensorFlow.js\nDESCRIPTION: Main application logic for real-time face detection using TensorFlow.js and BlazeFace model. Includes setup for stats monitoring, backend selection, camera initialization, and face detection rendering with landmarks.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/tensorflowjs.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst stats = new Stats();\nstats.showPanel(0);\ndocument.body.prepend(stats.domElement);\n\nlet model, ctx, videoWidth, videoHeight, video, canvas;\n\nconst state = {\n  backend: \"wasm\",\n};\n\nconst gui = new dat.GUI();\ngui\n  .add(state, \"backend\", [\"wasm\", \"webgl\", \"cpu\"])\n  .onChange(async (backend) => {\n    await tf.setBackend(backend);\n    addFlagLables();\n  });\n\nasync function addFlagLables() {\n  if (!document.querySelector(\"#simd_supported\")) {\n    const simdSupportLabel = document.createElement(\"div\");\n    simdSupportLabel.id = \"simd_supported\";\n    simdSupportLabel.style = \"font-weight: bold\";\n    const simdSupported = await tf.env().getAsync(\"WASM_HAS_SIMD_SUPPORT\");\n    simdSupportLabel.innerHTML = `SIMD supported: <span class=${simdSupported}>${simdSupported}<span>`;\n    document.querySelector(\"#description\").appendChild(simdSupportLabel);\n  }\n\n  if (!document.querySelector(\"#threads_supported\")) {\n    const threadSupportLabel = document.createElement(\"div\");\n    threadSupportLabel.id = \"threads_supported\";\n    threadSupportLabel.style = \"font-weight: bold\";\n    const threadsSupported = await tf\n      .env()\n      .getAsync(\"WASM_HAS_MULTITHREAD_SUPPORT\");\n    threadSupportLabel.innerHTML = `Threads supported: <span class=${threadsSupported}>${threadsSupported}</span>`;\n    document.querySelector(\"#description\").appendChild(threadSupportLabel);\n  }\n}\n\nasync function setupCamera() {\n  video = document.getElementById(\"video\");\n\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: false,\n    video: { facingMode: \"user\" },\n  });\n  video.srcObject = stream;\n\n  return new Promise((resolve) => {\n    video.onloadedmetadata = () => {\n      resolve(video);\n    };\n  });\n}\n\nconst renderPrediction = async () => {\n  stats.begin();\n\n  const returnTensors = false;\n  const flipHorizontal = true;\n  const annotateBoxes = true;\n  const predictions = await model.estimateFaces(\n    video,\n    returnTensors,\n    flipHorizontal,\n    annotateBoxes,\n  );\n\n  if (predictions.length > 0) {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    for (let i = 0; i < predictions.length; i++) {\n      if (returnTensors) {\n        predictions[i].topLeft = predictions[i].topLeft.arraySync();\n        predictions[i].bottomRight = predictions[i].bottomRight.arraySync();\n        if (annotateBoxes) {\n          predictions[i].landmarks = predictions[i].landmarks.arraySync();\n        }\n      }\n\n      const start = predictions[i].topLeft;\n      const end = predictions[i].bottomRight;\n      const size = [end[0] - start[0], end[1] - start[1]];\n      ctx.fillStyle = \"rgba(255, 0, 0, 0.5)\";\n      ctx.fillRect(start[0], start[1], size[0], size[1]);\n\n      if (annotateBoxes) {\n        const landmarks = predictions[i].landmarks;\n\n        ctx.fillStyle = \"blue\";\n        for (let j = 0; j < landmarks.length; j++) {\n          const x = landmarks[j][0];\n          const y = landmarks[j][1];\n          ctx.fillRect(x, y, 5, 5);\n        }\n      }\n    }\n  }\n\n  stats.end();\n\n  requestAnimationFrame(renderPrediction);\n};\n\nconst setupPage = async () => {\n  await tf.setBackend(state.backend);\n  addFlagLables();\n  await setupCamera();\n  video.play();\n\n  videoWidth = video.videoWidth;\n  videoHeight = video.videoHeight;\n  video.width = videoWidth;\n  video.height = videoHeight;\n\n  canvas = document.getElementById(\"output\");\n  canvas.width = videoWidth;\n  canvas.height = videoHeight;\n  ctx = canvas.getContext(\"2d\");\n  ctx.fillStyle = \"rgba(255, 0, 0, 0.5)\";\n\n  model = await blazeface.load();\n\n  renderPrediction();\n};\n\nsetupPage();\n```\n\n----------------------------------------\n\nTITLE: Verifying Config Removal from Container\nDESCRIPTION: Executes a command in the updated Redis container to verify that the config file is no longer accessible.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker container exec -it $(docker ps --filter name=redis -q) cat /my-config\n```\n\n----------------------------------------\n\nTITLE: Starting New Container with Existing Volume\nDESCRIPTION: This command starts a new PostgreSQL container and attaches the existing volume containing the previously created database data.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name=new-db -d -v postgres_data:/var/lib/postgresql/data postgres\n```\n\n----------------------------------------\n\nTITLE: Inefficient Dockerfile with Poor Layer Ordering\nDESCRIPTION: An example of inefficient Dockerfile configuration that causes unnecessary cache invalidation and dependency reinstallation when any source file changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM node\nWORKDIR /app\nCOPY . .          # Copy over all files in the current directory\nRUN npm install   # Install dependencies\nRUN npm build     # Run build\n```\n\n----------------------------------------\n\nTITLE: Defining Default Bake Target\nDESCRIPTION: Example of defining a default target that gets built when no specific target is specified.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/targets.md#2025-04-11_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  dockerfile = \"webapp.Dockerfile\"\n  tags = [\"docker.io/username/webapp:latest\"]\n  context = \"https://github.com/username/webapp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Welcome Container with Different Hostname\nDESCRIPTION: Runs a 'welcome-to-docker' container with Traefik labels to route requests with the hostname 'welcome.localhost' to this container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --network=traefik-demo --label 'traefik.http.routers.welcome.rule=Host(`welcome.localhost`)' docker/welcome-to-docker\n```\n\n----------------------------------------\n\nTITLE: Adding User to KVM Group on Linux\nDESCRIPTION: Command to add the current user to the KVM group, which grants the necessary permissions to access the KVM device required by Docker Desktop for virtualization.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/_index.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo usermod -aG kvm $USER\n```\n\n----------------------------------------\n\nTITLE: Running a Basic JupyterLab Container\nDESCRIPTION: Command to run a JupyterLab container with a custom access token and port mapping. This exposes JupyterLab on port 8889 of the host machine.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -p 8889:8888 quay.io/jupyter/base-notebook start-notebook.py --NotebookApp.token='my-token'\n```\n\n----------------------------------------\n\nTITLE: Example Docker Hub Webhook Payload JSON Structure\nDESCRIPTION: This is a sample JSON payload that Docker Hub sends to the webhook URL when a push event occurs in the repository. It includes callback information, push data (timestamp, pusher, tag), and detailed repository information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/webhooks.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"callback_url\": \"https://registry.hub.docker.com/u/svendowideit/testhook/hook/2141b5bi5i5b02bec211i4eeih0242eg11000a/\",\n  \"push_data\": {\n    \"pushed_at\": 1417566161,\n    \"pusher\": \"trustedbuilder\",\n    \"tag\": \"latest\"\n  },\n  \"repository\": {\n    \"comment_count\": 0,\n    \"date_created\": 1417494799,\n    \"description\": \"\",\n    \"dockerfile\": \"#\\n# BUILD\\u0009\\u0009docker build -t svendowideit/apt-cacher .\\n# RUN\\u0009\\u0009docker run -d -p 3142:3142 -name apt-cacher-run apt-cacher\\n#\\n# and then you can run containers with:\\n# \\u0009\\u0009docker run -t -i -rm -e http_proxy http://192.168.1.2:3142/ debian bash\\n#\\nFROM\\u0009\\u0009ubuntu\\n\\n\\nVOLUME\\u0009\\u0009[/var/cache/apt-cacher-ng]\\nRUN\\u0009\\u0009apt-get update ; apt-get install -yq apt-cacher-ng\\n\\nEXPOSE \\u0009\\u00093142\\nCMD\\u0009\\u0009chmod 777 /var/cache/apt-cacher-ng ; /etc/init.d/apt-cacher-ng start ; tail -f /var/log/apt-cacher-ng/*\\n\",\n    \"full_description\": \"Docker Hub based automated build from a GitHub repo\",\n    \"is_official\": false,\n    \"is_private\": true,\n    \"is_trusted\": true,\n    \"name\": \"testhook\",\n    \"namespace\": \"svendowideit\",\n    \"owner\": \"svendowideit\",\n    \"repo_name\": \"svendowideit/testhook\",\n    \"repo_url\": \"https://registry.hub.docker.com/u/svendowideit/testhook/\",\n    \"star_count\": 0,\n    \"status\": \"Active\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Registry\nDESCRIPTION: Command to push the tagged Docker image to Docker Hub repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-registry.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ndocker push <YOUR_DOCKER_USERNAME>/docker-quickstart:1.0\n```\n\n----------------------------------------\n\nTITLE: Starting Nginx Container with Traefik Labels\nDESCRIPTION: Runs an Nginx container with Traefik labels to route requests with the hostname 'nginx.localhost' to this container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --network=traefik-demo --label 'traefik.http.routers.nginx.rule=Host(`nginx.localhost`)' nginx\n```\n\n----------------------------------------\n\nTITLE: Tagging Docker Images for New Personal Namespace\nDESCRIPTION: Commands to tag Docker images with a new personal namespace. This prepares the image to be pushed to a different personal repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/hub-images/move.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker tag namespace1/docker101tutorial new_namespace/docker101tutorial\n```\n\n----------------------------------------\n\nTITLE: Testing TLS Client Connection in Boot2Docker\nDESCRIPTION: This snippet shows how to set up a new terminal session, navigate to the HTTPS examples directory, and run the client tests. The tests connect using both --tls and --tlsverify options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/https/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ boot2docker ssh\nroot@boot2docker:/# cd docker/docs/articles/https\nroot@boot2docker:/# make client\n```\n\n----------------------------------------\n\nTITLE: MDM Script for IT Administrators to Fix Docker Desktop on macOS\nDESCRIPTION: A bash script for IT administrators to resolve Docker Desktop issues on macOS. It stops Docker services, removes problematic binaries, and installs new ones from the Docker application bundle.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/cert-revoke-solution.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Stop the docker services\necho \"Stopping Docker...\"\nsudo pkill -i docker\n\n# Stop the vmnetd service\necho \"Stopping com.docker.vmnetd service...\"\nsudo launchctl bootout system /Library/LaunchDaemons/com.docker.vmnetd.plist\n\n# Stop the socket service\necho \"Stopping com.docker.socket service...\"\nsudo launchctl bootout system /Library/LaunchDaemons/com.docker.socket.plist\n\n# Remove vmnetd binary\necho \"Removing com.docker.vmnetd binary...\"\nsudo rm -f /Library/PrivilegedHelperTools/com.docker.vmnetd\n\n# Remove socket binary\necho \"Removing com.docker.socket binary...\"\nsudo rm -f /Library/PrivilegedHelperTools/com.docker.socket\n\n# Install new binaries\necho \"Install new binaries...\"\nsudo cp /Applications/Docker.app/Contents/Library/LaunchServices/com.docker.vmnetd /Library/PrivilegedHelperTools/\nsudo cp /Applications/Docker.app/Contents/MacOS/com.docker.socket /Library/PrivilegedHelperTools/\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint with Curl\nDESCRIPTION: A curl command to test the API endpoint, which returns a simple greeting message.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ curl http://localhost:8001\nHello, Docker!\n```\n\n----------------------------------------\n\nTITLE: HTML Comment about Documentation Source\nDESCRIPTION: Comment explaining that the page content is automatically generated from Docker's source code and directing users to contribute by finding the relevant strings in the Docker Compose repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/up.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nSorry, but the contents of this page are automatically generated from\nDocker's source code. If you want to suggest a change to the text that appears\nhere, you'll need to find the string by searching this repo:\nhttps://github.com/docker/compose\n-->\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Hosts in Docker Compose Build\nDESCRIPTION: Demonstrates how to add hostname mappings at build-time using the extra_hosts option in Docker Compose. Supports both IPv4 and IPv6 addresses with different separator options.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nextra_hosts:\n  - \"somehost=162.242.195.82\"\n  - \"otherhost=50.31.209.229\"\n  - \"myhostv6=::1\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nextra_hosts:\n  - \"myhostv6=[::1]\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nextra_hosts:\n  - \"somehost:162.242.195.82\"\n  - \"myhostv6:::1\"\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Engine 23.0 packages on Ubuntu\nDESCRIPTION: Command to install Docker Engine 23.0 and its components on Ubuntu, including the now separately packaged Buildx plugin which was previously included in docker-ce-cli.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/23.0.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Service Exposure\nDESCRIPTION: This command lists all Kubernetes services to verify that the Node.js application service is properly configured and exposing the application on the expected port.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/deploy.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl get services\n```\n\n----------------------------------------\n\nTITLE: Testing the Sentiment Analysis Application\nDESCRIPTION: Example interaction with the sentiment analysis application running in the Docker container. Shows how the application identifies positive and neutral sentiments in user-provided text.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nEnter the text for semantic analysis (type 'exit' to end): I love containers!\nSentiment: Positive\nEnter the text for semantic analysis (type 'exit' to end): I'm still learning about containers.\nSentiment: Neutral\n```\n\n----------------------------------------\n\nTITLE: Formatting Images in Markdown for Docker Documentation\nDESCRIPTION: This snippet demonstrates various ways to include and format images in Markdown for Docker documentation. It shows how to insert small images, display large images that occupy the full width, set custom image dimensions using query parameters, and add borders to images.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/images.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- A small image: ![a small image](/assets/images/footer_moby_icon.png)\n\n- Large images occupy the full width of the reading column by default:\n\n  ![a pretty wide image](/assets/images/banner_image_24512.png)\n\n- Image size can be set using query parameters: `?h=<height>&w=<width>`\n\n  ![a pretty wide image](/assets/images/banner_image_24512.png?w=100&h=50)\n\n- Image with a border, also set with a query parameter: `?border=true`\n\n  ![a small image](/assets/images/footer_moby_icon.png?border=true)\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Images and Tags\nDESCRIPTION: This command allows you to download all images and tags associated with a specific Docker image before deactivating your account. It uses the docker pull command with the -a flag to pull all tagged images.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/accounts/deactivate-user-account.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull -a <image>:<tag>\n```\n\n----------------------------------------\n\nTITLE: Setting Both Memory and Swap Limits in Docker\nDESCRIPTION: Configures a Docker container with 300MB memory limit and 1GB total memory+swap limit, effectively allowing 700MB of swap memory usage.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it -m 300M --memory-swap 1G ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Publishing Ports Securely with Localhost Binding\nDESCRIPTION: This snippet shows how to publish container ports securely by binding them to localhost, making them accessible only to the Docker host and its containers, not to the outside world.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -p 127.0.0.1:8080:80 -p '[::1]:8080:80' nginx\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Repository to GitHub\nDESCRIPTION: Set of commands to stage all changes, commit them with a message, and push the code to the main branch of your GitHub repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/configure-ci-cd.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git add -A\n$ git commit -m \"my commit\"\n$ git push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Engine from Downloaded Package on CentOS\nDESCRIPTION: Command to manually install Docker Engine using a downloaded RPM package file, useful for air-gapped systems without internet access.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/centos.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install /path/to/package.rpm\n```\n\n----------------------------------------\n\nTITLE: Multiple Extensions with YAML Merge\nDESCRIPTION: Demonstrates how to combine multiple extensions using YAML merge functionality for environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/extension.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nx-environment: &default-environment\n  FOO: BAR\n  ZOT: QUIX\nx-keys: &keys\n  KEY: VALUE\nservices:\n  frontend:\n    image: example/webapp\n    environment: \n      << : [*default-environment, *keys]\n      YET_ANOTHER: VARIABLE\n```\n\n----------------------------------------\n\nTITLE: Setting service-level labels in Compose Deploy\nDESCRIPTION: Shows how to add metadata labels to a service using the deploy.labels attribute. These labels are only applied to the service entity and not to the containers running the service.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    deploy:\n      labels:\n        com.example.description: \"This label will appear on the web service\"\n```\n\n----------------------------------------\n\nTITLE: Initiating a Docker Trust Repository and Adding First Signer\nDESCRIPTION: This command adds a contributor's public key to the targets/releases delegation and creates a second targets/<name> delegation, effectively initializing a signed repository with Docker Content Trust.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust signer add --key cert.pem jeff registry.example.com/admin/demo\n\nAdding signer \"jeff\" to registry.example.com/admin/demo...\nInitializing signed repository for registry.example.com/admin/demo...\nEnter passphrase for root key with ID f6c6a4b: \nEnter passphrase for new repository key with ID b0014f8: \nRepeat passphrase for new repository key with ID b0014f8: \nSuccessfully initialized \"registry.example.com/admin/demo\"\nSuccessfully added signer: jeff to registry.example.com/admin/demo\n```\n\n----------------------------------------\n\nTITLE: Building Updated Docker Image\nDESCRIPTION: Command to build an updated version of the Docker image with the tag 'getting-started' using the current directory as the build context.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/03_updating_app.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t getting-started .\n```\n\n----------------------------------------\n\nTITLE: Updating the CA Certificate Store\nDESCRIPTION: This command updates the CA certificate store in a Linux container, incorporating any new certificates that have been added to the certificates directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/ca-certs.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# update-ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Conditional Product Link and Navigation Instructions in Go Templates\nDESCRIPTION: This snippet uses Go template syntax to conditionally set variables for product links and navigation instructions based on the 'product' parameter. It defines different text for Docker Hub and Admin Console scenarios.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/shortcodes/admin-domain-audit.md#2025-04-11_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ $product_link := \"[Docker Hub](https://hub.docker.com)\" }}\n{{ $domain_navigation := \"Select **My Hub**, your organization, **Settings**, and then **Security**.\" }}\n{{ $sso_link := \"[SSO](/security/for-admins/single-sign-on/)\" }}\n{{ $scim_link := \"[SCIM](/security/for-admins/provisioning/scim/)\" }}\n\n{{ if eq (.Get \"product\") \"admin\" }}\n  {{ $product_link = \"the [Admin Console](https://admin.docker.com)\" }}\n  {{ $domain_navigation = \"Select your organization on the **Choose profile** page, and then select **Domain management**.\" }}\n  {{ $sso_link = \"[SSO](/security/for-admins/single-sign-on/)\" }}\n  {{ $scim_link = \"[SCIM](/security/for-admins/provisioning/scim/)\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker Verified Publisher API Documentation\nDESCRIPTION: YAML front matter configuration for the Docker Verified Publisher API reference page. It specifies the layout as 'api', includes a description for SEO, defines the link title as 'DVP Data API', sets the page title, and assigns a weight of 4 for navigation ordering.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/hub/dvp.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: api\ndescription: Reference documentation and Swagger (OpenAPI) specification for the Docker Verified Publisher API.\nlinkTitle: DVP Data API\ntitle: Docker Verified Publisher API reference\nweight: 4\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Custom Default Address Pools with Subnet Mask\nDESCRIPTION: This command initializes a Docker swarm with multiple custom default address pools and a specific subnet mask. It creates two /16 networks and sets a /26 subnet mask for each network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-mode.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm init --default-addr-pool 10.20.0.0/16 --default-addr-pool 10.30.0.0/16 --default-addr-pool-mask-length 26\n```\n\n----------------------------------------\n\nTITLE: Initializing pass Credential Store with GPG Key\nDESCRIPTION: Command to initialize the pass credential store using the generated GPG key ID, which is required before signing in to Docker Desktop on Linux.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/sign-in.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pass init <your_generated_gpg-id_public_key>\n```\n\n----------------------------------------\n\nTITLE: Setting Process ID Limits for Docker Compose Services\nDESCRIPTION: Configures a container's PIDs limit using the pids_limit attribute. Set to -1 for unlimited PIDs or specify a positive integer to limit the number of processes.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\npids_limit: 10\n```\n\n----------------------------------------\n\nTITLE: Creating Bridge Network with Localhost Binding in Docker\nDESCRIPTION: Creates a Docker bridge network named 'mybridge' with a driver option to set the default host binding address to localhost (127.0.0.1). This restricts container port bindings to only be accessible from the Docker host by default.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create mybridge \\\n  -o \"com.docker.network.bridge.host_binding_ipv4=127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Recording an Image to a Docker Scout Stream with Platform Specification\nDESCRIPTION: Demonstrates how to record a specific image to a deployment stream, including the platform specification parameter. The command pulls the image and records it to the specified stream.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_stream.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ %[1]s %[2]s stage-cluster-234 namespace/repo:stage-latest --platform linux/amd64\n✓ Pulled\n✓ Successfully recorded namespace/repo:stage-latest in stream stage-cluster-234\n```\n\n----------------------------------------\n\nTITLE: Creating Physical Volume for devicemapper\nDESCRIPTION: Command to create a physical volume on a block device for Docker's storage using the pvcreate command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pvcreate /dev/xvdf\n\nPhysical volume \"/dev/xvdf\" successfully created.\n```\n\n----------------------------------------\n\nTITLE: Removing a User-Defined Bridge Network in Docker\nDESCRIPTION: Uses the docker network rm command to delete a custom bridge network. Containers must be disconnected from the network before it can be removed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker network rm my-net\n```\n\n----------------------------------------\n\nTITLE: Docker Extension Update Command\nDESCRIPTION: Command to update a Docker extension by removing and re-installing it\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/usage.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker extension update\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Daemon with TLS Verification\nDESCRIPTION: Uses the Docker client with TLS verification enabled, providing client certificates and trusted CA to securely connect to the Docker daemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ docker --tlsverify \\\n    --tlscacert=ca.pem \\\n    --tlscert=cert.pem \\\n    --tlskey=key.pem \\\n    -H=$HOST:2376 version\n```\n\n----------------------------------------\n\nTITLE: Analyzing Registry Docker Image with Scout\nDESCRIPTION: Force Docker Scout to analyze the registry version of an image by adding the registry:// prefix to the image reference.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/artifact-types.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves registry://<image>\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for Go Application with CockroachDB\nDESCRIPTION: This Docker command runs a container for the Go application, setting up network, environment variables, and port mapping for interaction with a CockroachDB instance.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -d \\\n  --network mynet \\\n  --name rest-server \\\n  -p 80:8080 \\\n  -e PGUSER=totoro \\\n  -e PGPASSWORD=myfriend \\\n  -e PGHOST=db \\\n  -e PGPORT=26257 \\\n  -e PGDATABASE=mydb \\\n  docker-gs-ping-roach\n```\n\n----------------------------------------\n\nTITLE: Example of Interactive Chat Mode with an AI Model\nDESCRIPTION: Example interaction in chat mode showing how to start a conversation, receive a response, and exit the chat session.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nInteractive chat mode started. Type '/bye' to exit.\n> Hi\nHi there! It's SmolLM, AI assistant. How can I help you today?\n> /bye\nChat session ended.\n```\n\n----------------------------------------\n\nTITLE: Checking Container Cleanup after Service Removal\nDESCRIPTION: Using the docker ps command to verify when task containers are completely removed after a service deletion. The example shows first the running containers and then the result after cleanup is complete.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/delete-service.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps\n\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS     NAMES\ndb1651f50347        alpine:latest       \"ping docker.com\"        44 minutes ago      Up 46 seconds                 helloworld.5.9lkmos2beppihw95vdwxy1j3w\n43bf6e532a92        alpine:latest       \"ping docker.com\"        44 minutes ago      Up 46 seconds                 helloworld.3.a71i8rp6fua79ad43ycocl4t2\n5a0fb65d8fa7        alpine:latest       \"ping docker.com\"        44 minutes ago      Up 45 seconds                 helloworld.2.2jpgensh7d935qdc857pxulfr\nafb0ba67076f        alpine:latest       \"ping docker.com\"        44 minutes ago      Up 46 seconds                 helloworld.4.1c47o7tluz7drve4vkm2m5olx\n688172d3bfaa        alpine:latest       \"ping docker.com\"        45 minutes ago      Up About a minute             helloworld.1.74nbhb3fhud8jfrhigd7s29we\n\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS     NAMES\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Docker Engine on Fedora\nDESCRIPTION: This command installs the latest version of Docker Engine and its dependencies on Fedora. It includes Docker CE, the CLI, containerd, and plugins for Buildx and Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/fedora.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring volumes_from in Docker Compose YAML\nDESCRIPTION: Demonstrates how to use the volumes_from directive in Docker Compose to mount volumes from other services or containers. Shows syntax for mounting with read-only (ro) or read-write (rw) access permissions, and how to reference external containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_72\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes_from:\n  - service_name\n  - service_name:ro\n  - container:container_name\n  - container:container_name:rw\n```\n\n----------------------------------------\n\nTITLE: Pulling a Docker Image with Authentication using HTTP API\nDESCRIPTION: Example of making an authenticated HTTP request to pull a Docker image. The credentials are passed as a Base64-encoded JSON structure in the X-Registry-Auth header.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ JSON=$(echo '{\"username\": \"string\", \"password\": \"string\", \"serveraddress\": \"string\"}' | base64)\n\n$ curl --unix-socket /var/run/docker.sock \\\n  -H \"Content-Type: application/tar\"\n  -X POST \"http://localhost/v{{% param \"latest_engine_api_version\" %}}/images/create?fromImage=alpine\"\n  -H \"X-Registry-Auth\"\n  -d \"$JSON\"\n{\"status\":\"Pulling from library/alpine\",\"id\":\"3.1\"}\n{\"status\":\"Pulling fs layer\",\"progressDetail\":{},\"id\":\"8f13703509f7\"}\n{\"status\":\"Downloading\",\"progressDetail\":{\"current\":32768,\"total\":2244027},\"progress\":\"[\\u003e                                                  ] 32.77 kB/2.244 MB\",\"id\":\"8f13703509f7\"}\n...\n```\n\n----------------------------------------\n\nTITLE: Cloning the Todo List Sample Application in Bash\nDESCRIPTION: Command to clone the todo-list-app repository from GitHub to get started with the sample application.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-docker-compose.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/dockersamples/todo-list-app\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Documentation\nDESCRIPTION: YAML configuration block defining metadata for the documentation page including description, keywords, title, weight and aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/builds/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: how automated builds work\nkeywords: docker hub, automated builds\ntitle: Automated builds\nweight: 90\naliases:\n- /docker-hub/builds/how-builds-work/\n---\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Language Translation Application\nDESCRIPTION: Example console output showing the language translation application in action. The user enters text in English, and the application translates it to French using the Googletrans library.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nEnter the text for translation (type 'exit' to end): Hello, how are you doing?\nOriginal Text: Hello, how are you doing?\nTranslated Text: Bonjour comment allez-vous?\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services in Detached Mode\nDESCRIPTION: This command starts the services defined in a Docker Compose file in detached mode, allowing the containers to run in the background without blocking the terminal.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata Labels to Volumes in Docker Compose - Dictionary Format\nDESCRIPTION: Example showing how to add metadata labels to a volume using dictionary format.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  db-data:\n    labels:\n      com.example.description: \"Database volume\"\n      com.example.department: \"IT/Ops\"\n      com.example.label-with-empty-value: \"\"\n```\n\n----------------------------------------\n\nTITLE: Output of Successful Model Removal\nDESCRIPTION: Example output displayed after successfully removing an AI model from the local system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nModel <model> removed successfully\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Docker Engine\nDESCRIPTION: These commands remove the Docker Engine packages from your system and delete all Docker data directories, including images, containers, and volumes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/rhel.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\n```\n\nLANGUAGE: console\nCODE:\n```\n$ sudo rm -rf /var/lib/docker\n$ sudo rm -rf /var/lib/containerd\n```\n\n----------------------------------------\n\nTITLE: Creating a File for Block Storage\nDESCRIPTION: This command creates a 1GB file to be used as a block storage device.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ fallocate -l 1G disk.raw\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop 4.39.0\nDESCRIPTION: Docker Desktop install command for version 4.39.0 across platforms.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< desktop-install-v2 all=true beta_win_arm=true version=\"4.39.0\" build_path=\"/184744/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Networks\nDESCRIPTION: Displays a list of all Docker networks on the system, including the newly created 'alpine-net'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker network ls\n\nNETWORK ID          NAME                DRIVER              SCOPE\ne9261a8c9a19        alpine-net          bridge              local\n17e324f45964        bridge              bridge              local\n6ed54d316334        host                host                local\n7092879f2cc8        none                null                local\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Helm Chart to Docker Hub\nDESCRIPTION: Series of commands to create a Helm chart, package it, and push it to Docker Hub as an OCI artifact. Requires Helm 3.0.0 or later.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/hub-images/oci-artifacts.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ helm create demo\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ helm package demo\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ helm registry login registry-1.docker.io -u hubuser\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ helm push demo-0.1.0.tgz oci://registry-1.docker.io/docker\n```\n\n----------------------------------------\n\nTITLE: Using mandatory variable interpolation syntax in Docker Compose\nDESCRIPTION: Syntax for defining mandatory variables in Compose file version 2.1 and up. This format causes Compose to display an error message if the variable is not set.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n${VAR:?err}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n${VAR?err}\n```\n\n----------------------------------------\n\nTITLE: Viewing Vote Target Configuration After Override\nDESCRIPTION: JSON output showing the vote target configuration after overriding the target stage in the Bake file. The target is now set to 'final' instead of 'dev'.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\"vote\"]\n    }\n  },\n  \"target\": {\n    \"vote\": {\n      \"context\": \"vote\",\n      \"dockerfile\": \"Dockerfile\",\n      \"tags\": [\"username/vote\"],\n      \"target\": \"final\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Tags in Docker Compose Build\nDESCRIPTION: Shows how to define additional tag mappings for built images in Docker Compose, in addition to the main image tag defined in the service section.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  - \"myimage:mytag\"\n  - \"registry/username/myrepos:my-other-tag\"\n```\n\n----------------------------------------\n\nTITLE: Accessing CockroachDB SQL Console\nDESCRIPTION: A command to exec into the running CockroachDB container and start an interactive SQL shell. This allows for database administration tasks like creating users and databases.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -it roach ./cockroach sql --insecure\n```\n\n----------------------------------------\n\nTITLE: Cleaning up after Docker Desktop extension tests in TypeScript\nDESCRIPTION: This TypeScript code shows how to properly clean up after running extension tests by stopping the Docker Desktop dashboard and uninstalling the extension.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/continuous-integration.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nafterAll(async () => {\n  dashboard?.stop();\n  await exec(`docker extension uninstall my/extension`);\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to the AccuWeather API Project Directory\nDESCRIPTION: Command to change to the accuweather-api directory where the Node.js application is located.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ cd accuweather-api\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Multi-Container Application\nDESCRIPTION: YAML configuration defining four services (backend, frontend, MongoDB, and LocalStack) with their respective configurations, dependencies, and network settings for a containerized application stack.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile\n    ports:\n      - 5000:5000\n    depends_on:\n      - localstack\n      - mongodb\n    env_file:\n      - backend/.env\n\n  frontend:\n    build:\n      context: ./frontend\n      dockerfile: Dockerfile\n    ports:\n      - 5173:5173\n    depends_on:\n      - backend\n    environment:\n      - REACT_APP_API_URL=http://backend:5000/api\n\n  mongodb:\n    image: mongo\n    container_name: mongodb\n    volumes:\n      - mongodbdata:/data/db\n    ports:\n      - 27017:27017\n\n  localstack:\n    image: localstack/localstack\n    container_name: localstack\n    ports:\n      - 4566:4566\n    environment:\n      - SERVICES=s3\n      - GATEWAY_LISTEN=0.0.0.0:4566\n    volumes:\n      - ./localstack:/docker-entrypoint-initaws.d\"\n\nvolumes:\n  mongodbdata:\n```\n\n----------------------------------------\n\nTITLE: Generating Signed Server Certificate\nDESCRIPTION: Creates a signed server certificate by using the CA to sign the Certificate Signing Request (CSR) with the specified extensions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem \\\n  -CAcreateserial -out server-cert.pem -extfile extfile.cnf\nSignature ok\nsubject=/CN=your.host.com\nGetting CA Private Key\nEnter pass phrase for ca-key.pem:\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Configuration Options for Multiple Daemons\nDESCRIPTION: List of required configuration options when running multiple Docker daemons on a single host to prevent conflicts. These options can be provided as flags or in the daemon configuration file.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_42\n\nLANGUAGE: text\nCODE:\n```\n-b, --bridge=                          Attach containers to a network bridge\n--exec-root=/var/run/docker            Root of the Docker execdriver\n--data-root=/var/lib/docker            Root of persisted Docker data\n-p, --pidfile=/var/run/docker.pid      Path to use for daemon PID file\n-H, --host=[]                          Daemon socket(s) to connect to\n--iptables=true                        Enable addition of iptables rules\n--config-file=/etc/docker/daemon.json  Daemon configuration file\n--tlscacert=\"~/.docker/ca.pem\"         Trust certs signed only by this CA\n--tlscert=\"~/.docker/cert.pem\"         Path to TLS certificate file\n--tlskey=\"~/.docker/key.pem\"           Path to TLS key file\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Branch in Git for Custom Actions\nDESCRIPTION: This Bash command demonstrates how to perform a shallow clone of a specific branch in a Git repository, useful for custom actions in build hooks.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/builds/advanced.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch origin branch:mytargetbranch --depth 1\n```\n\n----------------------------------------\n\nTITLE: Combining External and Custom Name for Volumes in Docker Compose\nDESCRIPTION: Example showing how to reference an external volume with a specific name that differs from the reference name used in the Compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#2025-04-11_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  db-data:\n    external: true\n    name: actual-name-of-volume\n```\n\n----------------------------------------\n\nTITLE: Correcting Aufs Diff Layer Removal\nDESCRIPTION: Ensures diff layers are correctly removed in Aufs to prevent leftover files from using up storage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.06.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Aufs: ensure diff layers are correctly removed to prevent leftover files from using up storage [moby/moby#34587](https://github.com/moby/moby/pull/34587)\n```\n\n----------------------------------------\n\nTITLE: Opening External URLs with Docker Extension Host API\nDESCRIPTION: Demonstrates how to use the Host interface's openExternal method to open URLs in the system's default browser. The URL must use either http or https protocol.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Host.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.host.openExternal(\"https://docker.com\");\n```\n\n----------------------------------------\n\nTITLE: Using Basic Authentication for Git Repositories\nDESCRIPTION: Command showing how to use Basic authentication scheme with username and password for Git repository access by specifying both token and header type.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ export GIT_AUTH_TOKEN=$(cat gitlab-token.txt)\n$ export GIT_AUTH_HEADER=basic\n$ docker build \\\n  --secret id=GIT_AUTH_TOKEN \\\n  --secret id=GIT_AUTH_HEADER \\\n  https://gitlab.com/example/todo-app.git\n```\n\n----------------------------------------\n\nTITLE: Merged Compose Configuration Result\nDESCRIPTION: The result of merging the base and override Compose files, combining all service configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nwebapp:\n  image: examples/web\n  ports:\n    - \"8000:8000\"\n  volumes:\n    - \"/data\"\n  environment:\n    - DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with Go SDK\nDESCRIPTION: Complete example of using the Docker Go SDK to pull an image, create a container, start it, wait for it to complete, and display its logs.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/docker/docker/api/types/container\"\n        \"github.com/docker/docker/api/types/image\"\n\t\"github.com/docker/docker/client\"\n\t\"github.com/docker/docker/pkg/stdcopy\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\n    if err != nil {\n        panic(err)\n    }\n    defer cli.Close()\n\n    reader, err := cli.ImagePull(ctx, \"docker.io/library/alpine\", image.PullOptions{})\n    if err != nil {\n        panic(err)\n    }\n    io.Copy(os.Stdout, reader)\n\n    resp, err := cli.ContainerCreate(ctx, &container.Config{\n        Image: \"alpine\",\n        Cmd:   []string{\"echo\", \"hello world\"},\n    }, nil, nil, nil, \"\")\n    if err != nil {\n        panic(err)\n    }\n\n    if err := cli.ContainerStart(ctx, resp.ID, container.StartOptions{}); err != nil {\n        panic(err)\n    }\n\n    statusCh, errCh := cli.ContainerWait(ctx, resp.ID, container.WaitConditionNotRunning)\n    select {\n    case err := <-errCh:\n        if err != nil {\n            panic(err)\n        }\n    case <-statusCh:\n    }\n\n    out, err := cli.ContainerLogs(ctx, resp.ID, container.LogsOptions{ShowStdout: true})\n    if err != nil {\n        panic(err)\n    }\n\n    stdcopy.StdCopy(os.Stdout, os.Stderr, out)\n}\n```\n\n----------------------------------------\n\nTITLE: Application Running Output\nDESCRIPTION: Console output showing that the Streamlit application is successfully running and accessible at the specified URL.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/containerize.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nserver-1  |   You can now view your Streamlit app in your browser.\nserver-1  |\nserver-1  |   URL: http://0.0.0.0:8000\nserver-1  |\n```\n\n----------------------------------------\n\nTITLE: Copying Requirements File to Docker Image\nDESCRIPTION: Transfers the requirements.txt file into the Docker image to prepare for dependency installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY requirements.txt /app\n```\n\n----------------------------------------\n\nTITLE: Loading Images from Tarball\nDESCRIPTION: POST endpoint to load images and tags from a tarball into Docker repository. Supports quiet mode to suppress progress details.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_53\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/images/load\nContent-Type: application/x-tar\nContent-Length: 12345\n```\n\n----------------------------------------\n\nTITLE: Creating a Macvlan Network with IP Address Exclusions\nDESCRIPTION: Creates a Macvlan network with IP address exclusions using the --aux-addresses flag. This example excludes a specific IP address (192.168.32.129) labeled as 'my-router' from being assigned to containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/macvlan.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d macvlan \\\n  --subnet=192.168.32.0/24 \\\n  --ip-range=192.168.32.128/25 \\\n  --gateway=192.168.32.254 \\\n  --aux-address=\"my-router=192.168.32.129\" \\\n  -o parent=eth0 macnet32\n```\n\n----------------------------------------\n\nTITLE: Listing Available Builders in Docker Buildx\nDESCRIPTION: This command shows the available builder instances in Docker Buildx. The asterisk (*) indicates the selected builder.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx ls\nNAME/NODE       DRIVER/ENDPOINT      STATUS   BUILDKIT PLATFORMS\ndefault *       docker\n  default       default              running  v0.11.6  linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386\nmy_builder      docker-container\n  my_builder0   default              running  v0.11.6  linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm with Manager IP Advertisement\nDESCRIPTION: Creates a new Docker swarm by initializing the first manager node with a specific advertised IP address. The --advertise-addr flag specifies the IP that other nodes will use to connect to this manager.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/create-swarm.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker swarm init --advertise-addr <MANAGER-IP>\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Volume\nDESCRIPTION: This command creates a new Docker volume named 'log-data' that can be used to persist data outside of containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker volume create log-data\n```\n\n----------------------------------------\n\nTITLE: Pulling Corrupted Image\nDESCRIPTION: Attempts to pull the tampered image, demonstrating how Docker trust prevents downloading corrupted data\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_sandbox.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n/ # docker pull sandboxregistry:5000/test/trusttest\nUsing default tag: latest\nPull (1 of 1): sandboxregistry:5000/test/trusttest:latest@sha256:35d5bc26fd358da8320c137784fe590d8fcf9417263ef261653e8e1c7f15672e\nsha256:35d5bc26fd358da8320c137784fe590d8fcf9417263ef261653e8e1c7f15672e: Pulling from test/trusttest\n\naac0c133338d: Retrying in 5 seconds\na3ed95caeb02: Download complete\nerror pulling image configuration: unexpected EOF\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for Spring Boot Applications\nDESCRIPTION: A Dockerfile implementing multi-stage builds for Spring Boot applications, with a builder stage for compilation and a final stage for runtime. This approach significantly reduces image size by using a JRE-only image for the runtime.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#2025-04-11_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM eclipse-temurin:21.0.2_13-jdk-jammy AS builder\nWORKDIR /opt/app\nCOPY .mvn/ .mvn\nCOPY mvnw pom.xml ./\nRUN ./mvnw dependency:go-offline\nCOPY ./src ./src\nRUN ./mvnw clean install\n\nFROM eclipse-temurin:21.0.2_13-jre-jammy AS final\nWORKDIR /opt/app\nEXPOSE 8080\nCOPY --from=builder /opt/app/target/*.jar /opt/app/*.jar\nENTRYPOINT [\"java\", \"-jar\", \"/opt/app/*.jar\"]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Docker CLI using Organization Access Token\nDESCRIPTION: Command to sign in to Docker CLI using an organization access token. The command requires replacing YOUR_ORG with your organization name and prompts for your organization access token as the password.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/access-tokens.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker login --username <YOUR_ORG>\n```\n\n----------------------------------------\n\nTITLE: Setting Connection Priority for Docker Compose Networks\nDESCRIPTION: Uses the priority attribute to indicate the order in which Compose connects a service's containers to its networks. Higher values indicate higher priority.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_58\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: busybox\n    command: top\n    networks:\n      app_net_1:\n        priority: 1000\n      app_net_2:\n\n      app_net_3:\n        priority: 100\nnetworks:\n  app_net_1:\n  app_net_2:\n  app_net_3:\n```\n\n----------------------------------------\n\nTITLE: Testing Go Application with HTTP POST Request\nDESCRIPTION: A curl command to test the deployed Go application by sending a POST request with JSON data. The application responds with the same JSON data, confirming that it's working correctly.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/deploy.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ curl --request POST \\\n  --url http://localhost:30001/send \\\n  --header 'content-type: application/json' \\\n  --data '{\"value\": \"Hello, Oliver!\"}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"value\": \"Hello, Oliver!\" }\n```\n\n----------------------------------------\n\nTITLE: Creating an IPvlan Network with VLAN ID 30\nDESCRIPTION: Creates a Docker IPvlan network on VLAN ID 30 with explicit L2 mode configuration. The example shows how to specify the parent interface tagged with VLAN ID 30 and set the ipvlan_mode parameter.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# now add networks and hosts as you would normally by attaching to the master (sub)interface that is tagged.\n$ docker network create -d ipvlan \\\n    --subnet=192.168.30.0/24 \\\n    --gateway=192.168.30.1 \\\n    -o parent=eth0.30 \\\n    -o ipvlan_mode=l2 ipvlan30\n\n# in two separate terminals, start a Docker container and the containers can now ping one another.\n$ docker run --net=ipvlan30 -it --name ivlan_test3 --rm alpine /bin/sh\n$ docker run --net=ipvlan30 -it --name ivlan_test4 --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Manually Creating 802.1Q VLAN Interface for Docker\nDESCRIPTION: Demonstrates how to manually create a VLAN sub-interface with ID 40 linked to the eth0 parent, enable it, and create a Docker network using this interface as the parent for the IPvlan network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n# create a new sub-interface tied to dot1q vlan 40\n$ ip link add link eth0 name eth0.40 type vlan id 40\n\n# enable the new sub-interface\n$ ip link set eth0.40 up\n\n# now add networks and hosts as you would normally by attaching to the master (sub)interface that is tagged\n$ docker network create -d ipvlan \\\n    --subnet=192.168.40.0/24 \\\n    --gateway=192.168.40.1 \\\n    -o parent=eth0.40 ipvlan40\n\n# in two separate terminals, start a Docker container and the containers can now ping one another.\n$ docker run --net=ipvlan40 -it --name ivlan_test5 --rm alpine /bin/sh\n$ docker run --net=ipvlan40 -it --name ivlan_test6 --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Viewing Available GPU Devices in the Host System\nDESCRIPTION: Console output from nvidia-smi showing available GPU devices on the host machine. This information helps in identifying device IDs which can be referenced in the Docker Compose configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/gpu-support.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nvidia-smi   \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 450.80.02    Driver Version: 450.80.02    CUDA Version: 11.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  Tesla T4            On   | 00000000:00:1B.0 Off |                    0 |\n| N/A   72C    P8    12W /  70W |      0MiB / 15109MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n|   1  Tesla T4            On   | 00000000:00:1C.0 Off |                    0 |\n| N/A   67C    P8    11W /  70W |      0MiB / 15109MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n|   2  Tesla T4            On   | 00000000:00:1D.0 Off |                    0 |\n| N/A   74C    P8    12W /  70W |      0MiB / 15109MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n|   3  Tesla T4            On   | 00000000:00:1E.0 Off |                    0 |\n| N/A   62C    P8    11W /  70W |      0MiB / 15109MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n```\n\n----------------------------------------\n\nTITLE: Verifying kubectl Plugin Recognition\nDESCRIPTION: Checks if kubectl recognizes the newly added compose_bridge plugin by listing all available plugins.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/advanced-integration.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl plugin list\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes YAML File for Deploying a Todo App\nDESCRIPTION: This YAML file defines a Kubernetes Deployment and Service for the Todo application. The Deployment creates a pod running the 'getting-started' container image, while the Service exposes the application on port 30001 externally and routes traffic to port 3000 internally.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kube-deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: bb-demo\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      bb: web\n  template:\n    metadata:\n      labels:\n        bb: web\n    spec:\n      containers:\n        - name: bb-site\n          image: getting-started\n          imagePullPolicy: Never\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: bb-entrypoint\n  namespace: default\nspec:\n  type: NodePort\n  selector:\n    bb: web\n  ports:\n    - port: 3000\n      targetPort: 3000\n      nodePort: 30001\n```\n\n----------------------------------------\n\nTITLE: Security Analysis with Gordon CLI\nDESCRIPTION: Commands for performing security analysis and getting security recommendations for Docker images.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/built-in-tools.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# Scan  for CVEs\n$ docker ai \"Scan my application for security vulnerabilities\"\n\n# Get security recommendations\n$ docker ai \"Give me recommendations for improving the security of my nodejs-app image\"\n```\n\n----------------------------------------\n\nTITLE: Kompose Transformation Dockerfile\nDESCRIPTION: Dockerfile example for creating a custom transformation using Kompose\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/customize.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\n\n# Get kompose from github release page\nRUN apk add --no-cache curl\nARG VERSION=1.32.0\nRUN ARCH=$(uname -m | sed 's/armv7l/arm/g' | sed 's/aarch64/arm64/g' | sed 's/x86_64/amd64/g') && \\\n    curl -fsL \\\n    \"https://github.com/kubernetes/kompose/releases/download/v${VERSION}/kompose-linux-${ARCH}\" \\\n    -o /usr/bin/kompose\nRUN chmod +x /usr/bin/kompose\n\nCMD [\"/usr/bin/kompose\", \"convert\", \"-f\", \"/in/compose.yaml\", \"--out\", \"/out\"]\n```\n\n----------------------------------------\n\nTITLE: Docker Extension Disable Command\nDESCRIPTION: Command to disable Docker extensions functionality\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/usage.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker extension disable\n```\n\n----------------------------------------\n\nTITLE: Unshallowing Git Clone for Full History Access\nDESCRIPTION: This Bash command shows how to 'unshallow' a Git clone to fetch the entire repository history, which may be necessary for certain custom build actions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/builds/advanced.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --unshallow origin\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image from Remote Tarball\nDESCRIPTION: Demonstrates building a Docker image using a remote tarball as the build context.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker build http://server/context.tar.gz\n#1 [internal] load remote build context\n#1 DONE 0.2s\n\n#2 copy /context /\n#2 DONE 0.1s\n...\n```\n\n----------------------------------------\n\nTITLE: Creating UDP-only Service with Short Syntax\nDESCRIPTION: Command to create a DNS cache service that publishes only UDP port 53 using the short syntax format with /udp suffix in Docker Swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name dns-cache \\\n  -p 53:53/udp \\\n  dns-cache\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Default AppArmor Profile\nDESCRIPTION: Command to run a Docker container with the default AppArmor profile explicitly specified using the security-opt flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/apparmor.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it --security-opt apparmor=docker-default hello-world\n```\n\n----------------------------------------\n\nTITLE: Enabling IPv6 by default on custom bridge networks\nDESCRIPTION: Configuration in daemon.json to enable IPv6 by default on all custom bridge networks created in Docker.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"default-network-opts\": { \"bridge\": {\"com.docker.network.enable_ipv6\": \"true\"}}\n```\n\n----------------------------------------\n\nTITLE: Creating Nginx Service on Overlay Network\nDESCRIPTION: Deploys an nginx service using the overlay network, with port mapping from 80 to 8080.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --name my-nginx \\\n  --network my-overlay \\\n  --replicas 1 \\\n  --publish published=8080,target=80 \\\n  nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Example .env file for Docker Compose\nDESCRIPTION: Shows proper formatting for a .env file used with Docker Compose, including comments and variable definitions with and without quotes.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# Set Rails/Rack environment\nRACK_ENV=development\nVAR=\"quoted\"\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Windows Server\nDESCRIPTION: PowerShell commands to extract Docker archive, register the service, and verify installation on Windows Server.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/binaries.md#2025-04-11_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nPS C:\\> Expand-Archive /path/to/<FILE>.zip -DestinationPath $Env:ProgramFiles\nPS C:\\> &$Env:ProgramFiles\\Docker\\dockerd --register-service\nPS C:\\> Start-Service docker\nPS C:\\> &$Env:ProgramFiles\\Docker\\docker run hello-world:nanoserver\n```\n\n----------------------------------------\n\nTITLE: Installing Rootless Docker without Package Manager\nDESCRIPTION: Command to install rootless Docker using a script when package managers are not available or lack permissions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -fsSL https://get.docker.com/rootless | sh\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Layer Storage\nDESCRIPTION: Navigates to the storage location of a specific image layer in the registry\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_sandbox.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nroot@65084fc6f047:/# cd /var/lib/registry/docker/registry/v2/blobs/sha256/aa/aac0c133338db2b18ff054943cee3267fe50c75cdee969aed88b1992539ed042\n```\n\n----------------------------------------\n\nTITLE: Generating SBOM for Latest Built Image\nDESCRIPTION: Command to generate SBOM for the most recently built Docker image without specifying an image name.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_sbom.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout sbom\n```\n\n----------------------------------------\n\nTITLE: Adding Container Labels as List in Docker Compose\nDESCRIPTION: Alternative syntax for adding metadata labels to containers using a list of strings in Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  - \"com.example.description=Accounting webapp\"\n  - \"com.example.department=Finance\"\n  - \"com.example.label-with-empty-value\"\n```\n\n----------------------------------------\n\nTITLE: Disabling User Namespaces in Docker Container Commands\nDESCRIPTION: Commands to disable user namespaces for specific Docker containers by adding the --userns=host flag to container operations. This affects container creation, running, and execution commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/userns-remap.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n--userns=host\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker container create --userns=host\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker container run --userns=host\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker container exec --userns=host\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Service with Placement Constraint\nDESCRIPTION: This snippet demonstrates how to create a Docker service with a placement constraint that limits the service to run only on nodes with the label 'region' set to 'east'. It uses the nginx image and creates 5 replicas.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --name my-nginx \\\n  --replicas 5 \\\n  --constraint node.labels.region==east \\\n  nginx\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose YAML Configuration\nDESCRIPTION: A YAML configuration block defining basic metadata for a Docker Compose documentation page, including build settings, title, and weight parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/intro/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  render: never\ntitle: Introduction to Compose\nweight: 10\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Volume for CockroachDB\nDESCRIPTION: Creates a managed Docker volume named 'roach' for persistent CockroachDB data storage.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker volume create roach\nroach\n```\n\n----------------------------------------\n\nTITLE: Building and Installing a Docker Extension\nDESCRIPTION: Command-line instructions to build the Docker extension image and install it in Docker Desktop. Shows how to tag the extension and use the Docker extension install command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/minimal-frontend-extension.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --tag=awesome-inc/my-extension:latest .\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension install awesome-inc/my-extension:latest\n```\n\n----------------------------------------\n\nTITLE: Creating Custom-Named VLAN Interface for Docker\nDESCRIPTION: Shows how to create a VLAN sub-interface with a custom name 'foo' for VLAN ID 40, enable it, and create a Docker network using this custom-named interface as the parent for the IPvlan network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n# create a new sub interface tied to dot1q vlan 40\n$ ip link add link eth0 name foo type vlan id 40\n\n# enable the new sub-interface\n$ ip link set foo up\n\n# now add networks and hosts as you would normally by attaching to the master (sub)interface that is tagged\n$ docker network create -d ipvlan \\\n    --subnet=192.168.40.0/24 --gateway=192.168.40.1 \\\n    -o parent=foo ipvlan40\n\n# in two separate terminals, start a Docker container and the containers can now ping one another.\n$ docker run --net=ipvlan40 -it --name ivlan_test5 --rm alpine /bin/sh\n$ docker run --net=ipvlan40 -it --name ivlan_test6 --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Mounting Secrets as Environment Variables in Dockerfile\nDESCRIPTION: Dockerfile instruction demonstrating how to mount multiple secrets as environment variables for AWS authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=secret,id=aws-key-id,env=AWS_ACCESS_KEY_ID \\\n    --mount=type=secret,id=aws-secret-key,env=AWS_SECRET_ACCESS_KEY \\\n    --mount=type=secret,id=aws-session-token,env=AWS_SESSION_TOKEN \\\n    aws s3 cp ...\n```\n\n----------------------------------------\n\nTITLE: Building a Custom MySQL Docker Image\nDESCRIPTION: Command line instruction for building a custom MySQL Docker image from a Dockerfile, tagging it as 'my-custom-mysql'.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t my-custom-mysql .\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Swarm Manager Node Reachability\nDESCRIPTION: This command inspects a specific manager node and formats the output to show only its reachability status. This helps in monitoring the health of manager nodes in the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/admin_guide.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker node inspect manager1 --format \"{{ .ManagerStatus.Reachability }}\"\nreachable\n```\n\n----------------------------------------\n\nTITLE: Loading the Nginx AppArmor Profile\nDESCRIPTION: Command to load the custom Nginx AppArmor profile into the kernel after saving it to the filesystem.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/apparmor.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo apparmor_parser -r -W /etc/apparmor.d/containers/docker-nginx\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Docker CI/CD\nDESCRIPTION: YAML configuration for a GitHub Actions workflow that builds and pushes a Docker image to Docker Hub. It includes steps for logging in to Docker Hub, setting up Docker Buildx, and building multi-platform images.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/configure-ci-cd.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest\n```\n\n----------------------------------------\n\nTITLE: Running the TensorFlow.js Face Detection Container\nDESCRIPTION: Command to run the Docker container based on the face-detection-tensorjs image, mapping port 80 of the container to port 80 on the host system for web access.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/tensorflowjs.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -p 80:80 face-detection-tensorjs\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Compose Logs Documentation\nDESCRIPTION: YAML configuration block defining metadata and routing information for the Docker Compose logs command documentation page. Includes data folder path, filename, title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/logs.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: compose-cli\ndatafile: docker_compose_logs\ntitle: docker compose logs\naliases:\n- /compose/reference/logs/\n- /engine/reference/commandline/compose_logs/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Docker Engine Startup on Linux\nDESCRIPTION: Command to disable the Docker Engine service from starting automatically at system boot. This prevents resource conflicts when using Docker Desktop as the primary Docker environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo systemctl disable docker docker.socket containerd\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Healthcheck Start Period\nDESCRIPTION: Addition of start_period parameter for healthcheck configuration in Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.09.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\\n  start_period: 30s\n```\n\n----------------------------------------\n\nTITLE: Configuring SELinux Label for Bind Mounts in Docker\nDESCRIPTION: This snippet shows how to set the SELinux label for a bind mount in Docker. It uses the z option to specify that multiple containers can share the bind mount's contents.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -it \\\n  --name devtest \\\n  -v \"$(pwd)\"/target:/app:z \\\n  nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker daemon to apply configuration\nDESCRIPTION: Command to restart the Docker daemon after changing the configuration to enable the containerd snapshotter feature. This is necessary for the changes to take effect.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/containerd.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Container Status Output\nDESCRIPTION: This shows the output of the 'docker ps' command, displaying information about the running containers including their IDs, images, commands, creation time, status, port mappings, and names.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nCONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS                NAMES\n2cf7c484c144   nginx     \"/docker-entrypoint.…\"   9 seconds ago        Up 8 seconds        0.0.0.0:80->80/tcp   nginx\n7a070c9ffeaa   web       \"docker-entrypoint.s…\"   19 seconds ago       Up 18 seconds                            web2\n6dc6d4e60aaf   web       \"docker-entrypoint.s…\"   34 seconds ago       Up 33 seconds                            web1\n008e0ecf4f36   redis     \"docker-entrypoint.s…\"   About a minute ago   Up About a minute   6379/tcp             redis\n```\n\n----------------------------------------\n\nTITLE: Network Connect HTTP Response\nDESCRIPTION: Simple OK response indicating the container was successfully connected to the specified network.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_78\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n```\n\n----------------------------------------\n\nTITLE: Creating Isolated IPvlan Networks\nDESCRIPTION: These examples demonstrate how to create isolated IPvlan networks using different methods, including omitting the parent interface and using the --internal flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create -d ipvlan \\\n    --subnet=192.168.10.0/24 isolated1\n\n$ docker network create -d ipvlan \\\n    --subnet=192.168.11.0/24 --internal isolated2\n\n$ docker network create -d ipvlan isolated3\n\n$ docker run --net=isolated1 --name=cid1 -it --rm alpine /bin/sh\n$ docker run --net=isolated2 --name=cid2 -it --rm alpine /bin/sh\n$ docker run --net=isolated3 --name=cid3 -it --rm alpine /bin/sh\n\n$ docker exec -it cid1 /bin/sh\n$ docker exec -it cid2 /bin/sh\n$ docker exec -it cid3 /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Label Interpolation With Variable Substitution\nDESCRIPTION: Demonstrates the correct way to use variable interpolation in labels using the equal sign syntax in a list format.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/interpolation.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    labels:\n      - \"$VAR_INTERPOLATED_BY_COMPOSE=BAR\"\n```\n\n----------------------------------------\n\nTITLE: Examining Network Configuration in L3 Mode Container\nDESCRIPTION: Shows the interface configuration and routing tables for both IPv4 and IPv6 in an IPvlan L3 mode container. Demonstrates the direct device routing without ARP support.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$$ ip a show eth0\n63: eth0@if59: <BROADCAST,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default\n    link/ether 00:50:56:2b:29:40 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.112.2/24 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 2001:db8:abc4::250:56ff:fe2b:2940/64 scope link\n       valid_lft forever preferred_lft forever\n    inet6 2001:db8:abc6::10/64 scope link nodad\n       valid_lft forever preferred_lft forever\n\n# Note the default route is the eth device because ARPs are filtered.\n$$ ip route\n  default dev eth0  scope link\n  192.168.112.0/24 dev eth0  proto kernel  scope link  src 192.168.112.2\n\n$$ ip -6 route\n2001:db8:abc4::/64 dev eth0  proto kernel  metric 256\n2001:db8:abc6::/64 dev eth0  proto kernel  metric 256\ndefault dev eth0  metric 1024\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Status\nDESCRIPTION: This command lists all running containers, showing their container IDs, images, commands, creation time, status, port mappings, and names to verify that all components of the multi-container application are running.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Daemon After Configuration\nDESCRIPTION: Command to restart the Docker daemon service after updating proxy configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/proxy.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Docker Service to Previous Version\nDESCRIPTION: This example shows how to roll back a Docker service to its previous version using the --rollback flag. It also demonstrates combining the rollback with an update delay of 0 seconds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_35\n\nLANGUAGE: console\nCODE:\n```\n$ docker service update \\\n  --rollback \\\n  --update-delay 0s\n  my_web\n```\n\n----------------------------------------\n\nTITLE: Systemd HTTPS Proxy Configuration\nDESCRIPTION: Systemd service configuration for setting HTTPS proxy environment variables for the Docker daemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/proxy.md#2025-04-11_snippet_3\n\nLANGUAGE: systemd\nCODE:\n```\n[Service]\nEnvironment=\"HTTPS_PROXY=https://proxy.example.com:3129\"\n```\n\n----------------------------------------\n\nTITLE: Release Date Template Usage\nDESCRIPTION: A template directive for displaying release dates in the documentation\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/release-notes.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{< release-date date=\"2023-07-05\" >}}\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Desktop using CLI\nDESCRIPTION: This command stops Docker Desktop. It can be used with optional flags to customize the stop behavior.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/stop.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker desktop stop [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Creating Dual-Stack IPvlan L3 Mode Network\nDESCRIPTION: Creates an IPvlan network in L3 mode with dual-stack IPv4/IPv6 addressing across multiple subnets. L3 mode provides routing between subnets without requiring ARP or broadcast support.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n# Create an IPv6+IPv4 Dual Stack IPvlan L3 network\n# Gateways for both v4 and v6 are set to a dev e.g. 'default dev eth0'\n$ docker network create -d ipvlan \\\n    --subnet=192.168.110.0/24 \\\n    --subnet=192.168.112.0/24 \\\n    --subnet=2001:db8:abc6::/64 \\\n    -o parent=eth0 \\\n    -o ipvlan_mode=l3 ipnet110\n```\n\n----------------------------------------\n\nTITLE: Analyzing Syft JSON SBOM with Docker Scout CLI\nDESCRIPTION: Shows the command to analyze CVEs from an SBOM file in syft-json format using Docker Scout.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/release-notes/cli.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves sbom://path/to/sbom.syft.json\n```\n\n----------------------------------------\n\nTITLE: Sample Docker Compose V3.7 Configuration\nDESCRIPTION: Version 3.7 introduced support for rollback_config, init parameter, and extension fields in service configurations. Requires Docker Engine 18.06.0+.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.7\"\nservices:\n  myservice:\n    deploy:\n      rollback_config:\n        parallelism: 2\n        delay: 10s\n    init: true\n    x-custom-field: value\n```\n\n----------------------------------------\n\nTITLE: Disabling Build Record Upload in GitHub Actions YAML Configuration\nDESCRIPTION: This snippet demonstrates how to disable the upload of the build record archive to GitHub while still generating the build summary. It sets the DOCKER_BUILD_RECORD_UPLOAD environment variable to false in the workflow configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/build-summary.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Build\n        uses: docker/build-push-action@v6\n        env:\n          DOCKER_BUILD_RECORD_UPLOAD: false\n        with:\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n```\n\n----------------------------------------\n\nTITLE: Building a Specific Service with Docker Compose\nDESCRIPTION: Command to build a specific service (vote) using Docker Compose. This utilizes the build configuration defined in the Compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose build vote\n```\n\n----------------------------------------\n\nTITLE: Viewing SBOM of Docker Image Tarball with Scout\nDESCRIPTION: Use the archive:// prefix with docker scout sbom command to get the SBOM of an image tarball created with docker save. This example exports the SBOM in SPDX format to a file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/artifact-types.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull docker/scout-cli:latest\nlatest: Pulling from docker/scout-cli\n257973a141f5: Download complete \n1f2083724dd1: Download complete \n5c8125a73507: Download complete \nDigest: sha256:13318bb059b0f8b0b87b35ac7050782462b5d0ac3f96f9f23d165d8ed68d0894\n$ docker save docker/scout-cli:latest -o scout-cli.tar\n$ docker scout sbom --format spdx -o sbom.spdx.json archive://scout-cli.tar\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Images via CLI\nDESCRIPTION: Demonstrates how to download a Docker image using the docker pull command.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-an-image.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull docker/welcome-to-docker\n```\n\n----------------------------------------\n\nTITLE: Manually Generating RSA Keys with OpenSSL\nDESCRIPTION: Demonstrates how to manually generate a 2048-bit RSA private key, create a certificate signing request (CSR), and self-sign a certificate using OpenSSL.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ openssl genrsa -out delegation.key 2048\n\nGenerating RSA private key, 2048 bit long modulus\n....................................................+++\n............+++\ne is 65537 (0x10001)\n\n$ openssl req -new -sha256 -key delegation.key -out delegation.csr\n\n$ openssl x509 -req -sha256 -days 365 -in delegation.csr -signkey delegation.key -out delegation.crt\n```\n\n----------------------------------------\n\nTITLE: Device Mapping Configuration\nDESCRIPTION: Examples showing how to map host devices to container devices with optional CDI syntax.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndevices:\n  - \"/dev/ttyUSB0:/dev/ttyUSB0\"\n  - \"/dev/sda:/dev/xvda:rwm\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Bun Application to Kubernetes\nDESCRIPTION: Command to deploy the Bun application to Kubernetes using kubectl apply, with expected output showing successful creation of deployment and service.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f docker-kubernetes.yml\n```\n\nLANGUAGE: text\nCODE:\n```\ndeployment.apps/docker-bun-demo created\nservice/service-entrypoint created\n```\n\n----------------------------------------\n\nTITLE: Running Docker Scout as a Container Image\nDESCRIPTION: Command to run Docker Scout CLI using a container image without installing the plugin on the host. The command passes Docker Hub credentials as environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/install.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it \\\n  -e DOCKER_SCOUT_HUB_USER=<your Docker Hub user name> \\\n  -e DOCKER_SCOUT_HUB_PASSWORD=<your Docker Hub PAT>  \\\n  docker/scout-cli <command>\n```\n\n----------------------------------------\n\nTITLE: Generating and Displaying Text Summary\nDESCRIPTION: Processes the input text using the BERT model to generate a summary and prints the result to the console.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsummary = bert_model(input_text)\nprint(summary)\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with Syslog Driver\nDESCRIPTION: Command to run a Docker container with the syslog logging driver. This example runs an Alpine container and configures it to send logs to a UDP syslog server at address 1.2.3.4:1111.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/syslog.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n      --log-driver syslog --log-opt syslog-address=udp://1.2.3.4:1111 \\\n      alpine echo hello world\n```\n\n----------------------------------------\n\nTITLE: Running a Bake build\nDESCRIPTION: Command to run a build using the Bake configuration file, targeting the 'myapp' target defined in the file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/introduction.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake myapp\n```\n\n----------------------------------------\n\nTITLE: Equivalent Configuration with Explicit Default Network in Docker Compose\nDESCRIPTION: The equivalent configuration of a service that explicitly connects to the default network.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  some-service:\n    image: foo  \n    networks:\n      default: {}  \n```\n\n----------------------------------------\n\nTITLE: Multiple Docker Buildx Builds with Distinct Cache Scopes\nDESCRIPTION: Example showing how to preserve separate caches for multiple builds by using different scope values. This prevents each build from overwriting the previous build's cache.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/gha.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=gha,url=...,token=...,scope=image \\\n  --cache-from type=gha,url=...,token=...,scope=image .\n$ docker buildx build --push -t <registry>/<image2> \\\n  --cache-to type=gha,url=...,token=...,scope=image2 \\\n  --cache-from type=gha,url=...,token=...,scope=image2 .\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for React Documentation\nDESCRIPTION: YAML configuration block that defines metadata for a React documentation page, including title, description, service type, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/react.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: React samples\ndescription: Docker samples for React.\nservice: react\naliases:\n- /samples/react/\n---\n```\n\n----------------------------------------\n\nTITLE: Docker Ulimit Type Alias Introduction\nDESCRIPTION: Introduction of a new Ulimit type alias for github.com/docker/go-units.Ulimit to ease future transitions to new type locations while maintaining backward compatibility.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nIntroduce `Ulimit` type alias for `github.com/docker/go-units.Ulimit`.\nThe `Ulimit` type as used in the API is defined in a Go module that will transition to a new location in future.\nA type alias is added to reduce the friction that comes with moving the type to a new location.\nThe alias makes sure that existing code continues to work, but its definition may change in future.\nUsers are recommended to use this alias instead of the `units.Ulimit` directly.\n```\n\n----------------------------------------\n\nTITLE: New Dockerfile Instructions in Docker 1.12.0\nDESCRIPTION: Introduction of new Dockerfile instructions HEALTHCHECK and SHELL, along with the #escape directive for platform-specific file path parsing.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_8\n\nLANGUAGE: Dockerfile\nCODE:\n```\nHEALTHCHECK\n```\n\nLANGUAGE: Dockerfile\nCODE:\n```\nSHELL\n```\n\nLANGUAGE: Dockerfile\nCODE:\n```\n#escape=\n```\n\n----------------------------------------\n\nTITLE: Defining GitLab CI Pipeline Execution Rules\nDESCRIPTION: Specifies when the GitLab CI pipeline should run, ensuring it only executes when a Dockerfile exists in the repository and when commits are made to CI branch.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/ci/gitlab.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  - if: $CI_COMMIT_BRANCH\n    exists:\n      - Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Checking subordinate UID/GID mappings\nDESCRIPTION: Commands to check the subordinate UID and GID mappings for the dockremap user in /etc/subuid and /etc/subgid files, confirming that Docker has assigned the proper ranges.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/userns-remap.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ grep dockremap /etc/subuid\n\ndockremap:231072:65536\n\n$ grep dockremap /etc/subgid\n\ndockremap:231072:65536\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Scout Configuration\nDESCRIPTION: Shows how to list all existing Docker Scout configuration settings using the 'docker scout config' command. The output displays the current configuration values.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_config.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout config\norganization=my-org-namespace\n```\n\n----------------------------------------\n\nTITLE: Starting a Container with Bind Mount Using -v Flag\nDESCRIPTION: Complete example of creating a container with a bind mount using the -v flag, mounting the local target directory to /app in the container with an nginx image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -it \\\n  --name devtest \\\n  -v \"$(pwd)\"/target:/app \\\n  nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Profiles in COMPOSE_PROFILES\nDESCRIPTION: Example of enabling multiple profiles using the COMPOSE_PROFILES environment variable. The profiles are separated by a comma.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/environment-variables/envvars.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nCOMPOSE_PROFILES=frontend,debug\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH for Private Repository Access in Docker Buildx Bake (HCL)\nDESCRIPTION: Shows how to expose SSH agent sockets or keys to the build using the 'ssh' attribute, useful for accessing private repositories during builds.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_33\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  ssh = [{ id = \"default\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Using docker run command with basic syntax\nDESCRIPTION: Shows the general form of the docker run command which requires an image reference and optional parameters including command and arguments.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]\n```\n\n----------------------------------------\n\nTITLE: Scanning Vulnerabilities from SPDX Files using Syft and Docker Scout\nDESCRIPTION: This example demonstrates how to generate an SPDX file from an Alpine Linux image using Syft and then pipe that output to Docker Scout for vulnerability scanning. The command generates a comprehensive vulnerability report showing critical, high, and medium severity issues found in the image packages.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ syft -o spdx-json alpine:3.16.1 | docker scout cves sbom://\n ✔ Pulled image\n ✔ Loaded image                                                                                                                              alpine:3.16.1\n ✔ Parsed image                                                                    sha256:3d81c46cd8756ddb6db9ec36fa06a6fb71c287fb265232ba516739dc67a5f07d\n ✔ Cataloged contents                                                                     274a317d88b54f9e67799244a1250cad3fe7080f45249fa9167d1f871218d35f\n   ├── ✔ Packages                        [14 packages]\n   ├── ✔ File digests                    [75 files]\n   ├── ✔ File metadata                   [75 locations]\n   └── ✔ Executables                     [16 executables]\n    ✗ Detected 2 vulnerable packages with a total of 11 vulnerabilities\n\n\n## Overview\n\n                    │        Analyzed SBOM\n────────────────────┼──────────────────────────────\n  Target            │ <stdin>\n    digest          │  274a317d88b5\n    platform        │ linux/arm64\n    vulnerabilities │    1C     2H     8M     0L\n    packages        │ 15\n\n\n## Packages and Vulnerabilities\n\n   1C     0H     0M     0L  zlib 1.2.12-r1\npkg:apk/alpine/zlib@1.2.12-r1?arch=aarch64&distro=alpine-3.16.1\n\n    ✗ CRITICAL CVE-2022-37434\n      https://scout.docker.com/v/CVE-2022-37434\n      Affected range : <1.2.12-r2\n      Fixed version  : 1.2.12-r2\n\n    ...\n\n11 vulnerabilities found in 2 packages\n  CRITICAL  1\n  HIGH      2\n  MEDIUM    8\n  LOW       0\n```\n\n----------------------------------------\n\nTITLE: Generating SBOM and Provenance Attestations in GitHub Actions\nDESCRIPTION: Extends the workflow to include SBOM and provenance attestation generation using docker/setup-buildx-action and additional build-push-action configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/gha.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      \n      - name: Build and push Docker image\n        uses: docker/build-push-action@v6\n        with:\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ steps.meta.outputs.tags }}\n          annotations: ${{ steps.meta.outputs.annotations }}\n          provenance: true\n          sbom: true\n```\n\n----------------------------------------\n\nTITLE: Defining Secrets in Docker Bake Configuration\nDESCRIPTION: HCL configuration for Docker Bake that defines how to pass an AWS credentials file as a secret to builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"HOME\" {\n  default = null\n}\n\ntarget \"default\" {\n  secret = [\n    \"id=aws,src=${HOME}/.aws/credentials\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Sentiment Predictions and Classifications\nDESCRIPTION: Code that calculates sentiment scores for test data and classifies them as positive or negative based on a threshold value.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvader_predictions = [sia.polarity_scores(text)[\"compound\"] for text in X_test]\nthreshold = 0.2\nvader_classifications = [0 if score > threshold else 1 for score in vader_predictions]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Export Command Options Table in Markdown\nDESCRIPTION: A markdown table listing the options available for the 'docker compose export' command. It includes the option names, types, default values, and descriptions for each option.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_export.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Type     | Default | Description                                              |\n|:-----------------|:---------|:--------|:---------------------------------------------------------|\n| `--dry-run`      | `bool`   |         | Execute command in dry run mode                          |\n| `--index`        | `int`    | `0`     | index of the container if service has multiple replicas. |\n| `-o`, `--output` | `string` |         | Write to a file, instead of STDOUT                       |\n```\n\n----------------------------------------\n\nTITLE: Pushing Generic OCI Artifact to Docker Hub\nDESCRIPTION: Commands to create and push a generic artifact file to Docker Hub using ORAS CLI version 0.15 or later.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/hub-images/oci-artifacts.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ touch myartifact.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ oras login -u hubuser registry-1.docker.io\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ oras push registry-1.docker.io/docker/demo:0.0.1 myartifact.txt:text/plain\n```\n\n----------------------------------------\n\nTITLE: Compression Configuration\nDESCRIPTION: Example of configuring compression settings when building and pushing an image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/_index.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build \\\n  --output type=image,name=<registry>/<image>,push=true,compression=zstd .\n```\n\n----------------------------------------\n\nTITLE: Verifying AUFS Kernel Support in Linux\nDESCRIPTION: Command to check if the Linux kernel supports AUFS by examining the file systems list in /proc/filesystems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/aufs-driver.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngrep aufs /proc/filesystems\n\nnodev   aufs\n```\n\n----------------------------------------\n\nTITLE: Configuring ZFS Storage Driver in Docker Daemon\nDESCRIPTION: Specifies how to configure the ZFS filesystem for Docker to use when creating datasets. This example sets zroot/docker as the ZFS filesystem instead of the default /var/lib/docker.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dockerd -s zfs --storage-opt zfs.fsname=zroot/docker\n```\n\n----------------------------------------\n\nTITLE: Running Build Checks with docker/bake-action in GitHub Actions\nDESCRIPTION: This YAML snippet shows a GitHub Actions workflow that uses docker/bake-action to validate a build configuration and then build and push an image. It includes steps for logging into Docker Hub, setting up Docker Buildx, validating the build configuration using a Bake target, and then building the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/checks.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\nenv:\n  IMAGE_NAME: user/app\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Validate build configuration\n        uses: docker/bake-action@v6\n        with:\n          targets: validate-build\n\n      - name: Build\n        uses: docker/bake-action@v6\n        with:\n          targets: build\n          push: true\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Compose Documentation\nDESCRIPTION: YAML frontmatter configuration that defines metadata for the Docker Compose alpha viz command documentation page, including the data source location and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/alpha/viz.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: compose-cli\ndatafile: docker_compose_alpha_viz\ntitle: docker compose alpha viz\nlayout: cli\naliases:\n- /engine/reference/commandline/compose_alpha_viz/\n```\n\n----------------------------------------\n\nTITLE: Restarting a Container in Docker API\nDESCRIPTION: API call to restart a Docker container by its ID or name. The 't' parameter specifies the number of seconds to wait before killing the container.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/restart?t=5 HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Merging YAML Sequences in Docker Compose\nDESCRIPTION: Shows how YAML sequences are merged by appending values from the overriding Compose file to the previous one.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/merge.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    DNS:\n      - 1.1.1.1\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    DNS: \n      - 8.8.8.8\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    DNS:\n      - 1.1.1.1\n      - 8.8.8.8\n```\n\n----------------------------------------\n\nTITLE: Example of --mount Flag with tmpfs Options in Docker\nDESCRIPTION: Demonstrates a practical example of using the --mount flag with type=tmpfs including size and mode parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/tmpfs.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --mount type=tmpfs,dst=/app,tmpfs-size=21474836480,tmpfs-mode=1770\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Working Directory\nDESCRIPTION: Establishes the working directory within the Docker container where application files will be placed and commands executed.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nWORKDIR /app\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for Traefik Communication\nDESCRIPTION: Creates a Docker network named 'traefik-demo' to allow containers to communicate with each other.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create traefik-demo\n```\n\n----------------------------------------\n\nTITLE: Complex .dockerignore Pattern Matching\nDESCRIPTION: Demonstrates advanced pattern matching in .dockerignore file including wildcards and temporary file exclusions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n# comment\n*/temp*\n*/*/temp*\ntemp?\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop 4.38.0\nDESCRIPTION: Docker Desktop install command for version 4.38.0 across platforms.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{< desktop-install-v2 all=true beta_win_arm=true version=\"4.38.0\" build_path=\"/181591/\" >}}\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Create Response Format\nDESCRIPTION: JSON response format for the Create endpoint in the volume plugin protocol. The response includes an error field that is empty on success.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating tmpfs Mount with --mount Flag in Nginx Container\nDESCRIPTION: Shows how to create a tmpfs mount at /app in an Nginx container using the --mount flag, along with verification using docker inspect.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/tmpfs.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d \\\n  -it \\\n  --name tmptest \\\n  --mount type=tmpfs,destination=/app \\\n  nginx:latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect tmptest --format '{{ json .Mounts }}'\n[{\"Type\":\"tmpfs\",\"Source\":\"\",\"Destination\":\"/app\",\"Mode\":\"\",\"RW\":true,\"Propagation\":\"\"}]\n```\n\n----------------------------------------\n\nTITLE: Debugging Docker Plugins Using runc\nDESCRIPTION: This snippet shows how to use runc, the default Docker container runtime, for debugging plugins. It demonstrates how to list running plugins, obtain plugin logs, and execute a shell within a plugin container.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo runc --root /run/docker/runtime-runc/plugins.moby list\n\nID                                                                 PID         STATUS      BUNDLE                                                                                                                                       CREATED                          OWNER\n93f1e7dbfe11c938782c2993628c895cf28e2274072c4a346a6002446c949b25   15806       running     /run/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby-plugins/93f1e7dbfe11c938782c2993628c895cf28e2274072c4a346a6002446c949b25   2018-02-08T21:40:08.621358213Z   root\n9b4606d84e06b56df84fadf054a21374b247941c94ce405b0a261499d689d9c9   14992       running     /run/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby-plugins/9b4606d84e06b56df84fadf054a21374b247941c94ce405b0a261499d689d9c9   2018-02-08T21:35:12.321325872Z   root\nc5bb4b90941efcaccca999439ed06d6a6affdde7081bb34dc84126b57b3e793d   14984       running     /run/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby-plugins/c5bb4b90941efcaccca999439ed06d6a6affdde7081bb34dc84126b57b3e793d   2018-02-08T21:35:12.321288966Z   root\n\n$ sudo runc --root /run/docker/runtime-runc/plugins.moby exec 93f1e7dbfe11c938782c2993628c895cf28e2274072c4a346a6002446c949b25 cat /var/log/plugin.log\n\n$ sudo runc --root /run/docker/runtime-runc/plugins.moby exec -t 93f1e7dbfe11c938782c2993628c895cf28e2274072c4a346a6002446c949b25 sh\n```\n\n----------------------------------------\n\nTITLE: Systemd Configuration for Docker Daemon Host\nDESCRIPTION: Custom systemd configuration to remove the default -H argument when starting the Docker daemon, allowing for host configuration via daemon.json without conflicts.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_4\n\nLANGUAGE: systemd\nCODE:\n```\n[Service]\nExecStart=\nExecStart=/usr/bin/dockerd\n```\n\n----------------------------------------\n\nTITLE: Publishing Nginx Container Port Example\nDESCRIPTION: Practical example of publishing port 80 from an Nginx container to port 8080 on the host machine.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/publishing-ports.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d -p 8080:80 nginx\n```\n\n----------------------------------------\n\nTITLE: Setting SOURCE_DATE_EPOCH to Unix Epoch with docker/bake-action\nDESCRIPTION: GitHub Actions workflow that creates reproducible Docker builds with timestamps set to Unix epoch (0). Uses docker/bake-action and sets the SOURCE_DATE_EPOCH environment variable to control build timestamps.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/reproducible-builds.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build\n        uses: docker/bake-action@v6\n        env:\n          SOURCE_DATE_EPOCH: 0\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Recommended ENV Syntax\nDESCRIPTION: The recommended way to define multiple environment variables in Dockerfiles using the ENV name=value syntax. This format allows setting multiple variables in a single line with clear assignment.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV ONE=\"\" TWO=\"\" THREE=\"world\"\n```\n\n----------------------------------------\n\nTITLE: Docker API Endpoint Updates for Events and System Information\nDESCRIPTION: Documentation of API changes for event handling and system information retrieval, including new image creation events and containerd information in system info endpoint.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- `GET /events` now supports image `create` event that is emitted when a new image is built regardless if it was tagged or not.\n- `GET /info` now includes a `Containerd` field containing information about the location of the containerd API socket and containerd namespaces used by the daemon to run containers and plugins.\n```\n\n----------------------------------------\n\nTITLE: Using Built Image in Subsequent Steps\nDESCRIPTION: A GitHub Actions workflow that builds a base image, loads it into Docker, and then reuses that image in a subsequent build step using named contexts. This approach requires setting the Docker driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/named-contexts.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          driver: docker\n\n      - name: Build base image\n        uses: docker/build-push-action@v6\n        with:\n          context: \"{{defaultContext}}:base\"\n          load: true\n          tags: my-base-image:latest\n\n      - name: Build\n        uses: docker/build-push-action@v6\n        with:\n          build-contexts: |\n            alpine=docker-image://my-base-image:latest\n          tags: myimage:latest\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Test Pod Configuration\nDESCRIPTION: YAML configuration for creating a test pod that runs a ping command in an Alpine container to validate Kubernetes setup.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/orchestration.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: demo\nspec:\n  containers:\n    - name: testpod\n      image: alpine:latest\n      command: [\"ping\", \"8.8.8.8\"]\n```\n\n----------------------------------------\n\nTITLE: StartLogging Request Format in JSON\nDESCRIPTION: JSON structure for the /LogDriver.StartLogging endpoint request that signals the plugin to start receiving logs for a container.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_logging.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"File\": \"/path/to/file/stream\",\n  \"Info\": {\n          \"ContainerID\": \"123456\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting a Running Container to a User-Defined Bridge Network in Docker\nDESCRIPTION: Uses the docker network connect command to add an already running container to an existing network. This allows the container to communicate with other containers on the same network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker network connect my-net my-nginx\n```\n\n----------------------------------------\n\nTITLE: Starting Container with Specific IPv4 Address\nDESCRIPTION: Demonstrates how to start a second container on the IPvlan network with a specified IPv4 address using the --ip parameter.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --net=ipvlan140 --ip=192.168.140.10 -it --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for GenAI Application\nDESCRIPTION: This command builds and runs the Docker Compose configuration for the GenAI application with the database service.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Docker Go SDK Type Relocations\nDESCRIPTION: Comprehensive list of Docker Go SDK types that have been moved to new import paths and in some cases renamed to improve API organization and maintainability.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n- Move the following types to `api/types/container`:\n  - `BlkioStatEntry`\n  - `BlkioStats`\n  - `CPUStats`\n  - `CPUUsage`\n  - `ContainerExecInspect`\n  - `ContainerPathStat`\n  - `ContainerStats`\n  - `ContainersPruneReport`\n  - `CopyToContainerOptions`\n  - `ExecConfig`\n  - `ExecStartCheck`\n  - `MemoryStats`\n  - `NetworkStats`\n  - `PidsStats`\n  - `StatsJSON`\n  - `Stats`\n  - `StorageStats`\n  - `ThrottlingData`\n- Move the following types to `api/types/image`:\n  - `ImagesPruneReport`\n  - `ImageImportSource`\n  - `ImageLoadResponse`\n- Move the `ExecStartOptions` type to `api/types/backend`.\n- Move the `VolumesPruneReport` type to `api/types/volume`.\n- Move the `EventsOptions` type to `api/types/events`.\n- Move the `ImageSearchOptions` type to `api/types/registry`. \n- Drop `Network` prefix and move the following types to `api/types/network`:\n  - `NetworkCreateResponse`\n  - `NetworkConnect`\n  - `NetworkDisconnect`\n  - `NetworkInspectOptions`\n  - `EndpointResource`\n  - `NetworkListOptions`\n  - `NetworkCreateOptions`\n  - `NetworkCreateRequest`\n  - `NetworksPruneReport`\n- Move `NetworkResource` to `api/types/network`.\n```\n\n----------------------------------------\n\nTITLE: Streaming Docker Command Output with Docker Extension SDK\nDESCRIPTION: Shows how to stream the output of a Docker command using the Docker Extension SDK. This is useful for commands that produce large amounts of output or when real-time processing is needed. The example demonstrates streaming container logs.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Docker.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.docker.cli.exec(\"logs\", [\"-f\", \"...\"], {\n  stream: {\n    onOutput(data): void {\n        // As we can receive both `stdout` and `stderr`, we wrap them in a JSON object\n        JSON.stringify(\n          {\n            stdout: data.stdout,\n            stderr: data.stderr,\n          },\n          null,\n          \"  \"\n        );\n    },\n    onError(error: any): void {\n      console.error(error);\n    },\n    onClose(exitCode: number): void {\n      console.log(\"onClose with exit code \" + exitCode);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Exit Codes in Docker Containers\nDESCRIPTION: Demonstrates how custom exit codes from container commands are passed through to the Docker client. This example shows a container script exiting with code 3.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker run busybox /bin/sh -c 'exit 3'\n$ echo $?\n3\n```\n\n----------------------------------------\n\nTITLE: Overriding Variable in HCL\nDESCRIPTION: This snippet shows how to override a variable in a separate docker-bake.override.hcl file, which takes precedence when loaded.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/overrides.md#2025-04-11_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nvariable \"TAG\" {\n  default = \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Docker How-tos Documentation\nDESCRIPTION: YAML frontmatter configuration for the 'How-tos' section of Docker documentation. It includes build settings to never render the page directly, sets the title to 'How-tos', and assigns a weight of 40 to determine the page's position in the documentation hierarchy.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: How-tos\nweight: 40\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Billing Documentation Page\nDESCRIPTION: A YAML frontmatter block that defines metadata for the Docker billing documentation page, including title, description, keywords, navigation settings, and grid items for the page content.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/billing/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Billing and payments\nlinkTitle: Billing\ndescription: Discover information on billing and payment processes for Docker subscriptions.\nkeywords: billing, invoice, payment, subscription\nweight: 20\nparams:\n  sidebar:\n    group: Platform\ngrid_core:\n- title: Add or update a payment method\n  description: Learn how to add or update a payment method for your personal account or organization.\n  link: /billing/payment-method/\n  icon: credit_score\n- title: Update billing information\n  description: Discover how to update the billing information for your personal account or organization.\n  link: /billing/details/\n  icon: contract_edit\n- title: View billing history\n  description: Learn how to view billing history and download past invoices.\n  link: /billing/history/\n  icon: payments\n- title: Billing FAQs\n  description: Find the answers you need and explore common questions.\n  link: /billing/faqs/\n  icon: help\n- title: Register a tax certificate\n  description: Learn how to register a tax exemption certificate.\n  link: /billing/tax-certificate/\n  icon: developer_guide\n- title: 3D Secure authentication\n  description: Discover how Docker billing supports 3DS and how to troubleshoot potential issues.\n  link: /billing/3d-secure/\n  icon: wallet\naliases:\n  - /billing/docker-hub-pricing/\n---\n```\n\n----------------------------------------\n\nTITLE: Filtering Docker Compose containers by status with --filter flag\nDESCRIPTION: This snippet demonstrates how to filter running containers using the --filter status option with Docker Compose. It shows the equivalent operation to the --status flag, displaying only containers that are currently running.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps --filter status=running\nNAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS\nexample-foo-1   alpine    \"/entrypoint.…\"   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Swarm Node Worker Status\nDESCRIPTION: This command inspects a node and formats the output to show only its worker state status. This helps determine if the node is ready to accept tasks.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/admin_guide.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker node inspect manager1 --format \"{{ .Status.State }}\"\nready\n```\n\n----------------------------------------\n\nTITLE: Default Docker Container User Mapping Without Enhanced Isolation\nDESCRIPTION: Shows the default user mapping without Enhanced Container Isolation, where the container's root user is mapped directly to the host's root user (0), giving containers full root access to the host system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm alpine\n/ # cat /proc/self/uid_map\n         0       0     4294967295\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Service Network Configuration\nDESCRIPTION: Commands to create a new overlay network and update an existing service to use the new network instead of the previous one. This demonstrates migrating services between overlay networks.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d overlay nginx-net-2\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker service update \\\n  --network-add nginx-net-2 \\\n  --network-rm nginx-net \\\n  my-nginx\n```\n\n----------------------------------------\n\nTITLE: Verifying Thin Pool Size in Bash\nDESCRIPTION: This snippet shows the output of 'docker info' command, focusing on the storage driver information to verify the new thin pool size.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nStorage Driver: devicemapper\n Pool Name: docker-thinpool\n Pool Blocksize: 524.3 kB\n Base Device Size: 10.74 GB\n Backing Filesystem: xfs\n Data file:\n Metadata file:\n Data Space Used: 212.3 MB\n Data Space Total: 212.6 GB\n Data Space Available: 212.4 GB\n Metadata Space Used: 286.7 kB\n Metadata Space Total: 1.07 GB\n Metadata Space Available: 1.069 GB\n<...>\n```\n\n----------------------------------------\n\nTITLE: Running Emulated HID Device\nDESCRIPTION: Command to run an example emulated keyboard device using Rust.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/usbip.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ env RUST_LOG=info cargo run --example hid_keyboard\n```\n\n----------------------------------------\n\nTITLE: Docker Image Retagging for Extension Preview\nDESCRIPTION: Docker commands to retag a published extension for local preview in the Marketplace's Managed tab, allowing developers to see how their extension will appear before publishing.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/labels.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag org/published-extension unpublished-extension\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Ruby Docker Samples Documentation\nDESCRIPTION: This YAML front matter defines metadata for a documentation page about Ruby Docker samples. It specifies the title, description, service type, and URL aliases for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/ruby.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Ruby samples\ndescription: Docker samples for Ruby.\nservice: ruby\naliases:\n- /samples/ruby/\n---\n```\n\n----------------------------------------\n\nTITLE: Using External Cache with Docker Buildx Locally\nDESCRIPTION: Command to use an external registry cache with Docker Buildx for local development, pulling cache layers from a registry to speed up builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --cache-from type=registry,ref=user/app:buildcache .\n```\n\n----------------------------------------\n\nTITLE: BuildKit Metadata Structure Example\nDESCRIPTION: Basic structure of the BuildKit metadata extension showing the main components: source, layers, and vcs fields.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n    \"metadata\": {\n      \"https://mobyproject.org/buildkit@v1#metadata\": {\n        \"source\": {...},\n        \"layers\": {...},\n        \"vcs\": {...},\n      },\n      ...\n    },\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Proxy in Docker JSON Configuration\nDESCRIPTION: Adds support for proxy configuration in the Docker config.json file. This allows setting global proxy settings for the Docker CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.07.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Add support for proxy configuration in config.json [docker/cli#93](https://github.com/docker/cli/pull/93)\n```\n\n----------------------------------------\n\nTITLE: Opening File Selection Dialog in Docker Extensions\nDESCRIPTION: This code opens a file selector dialog that asks the user to select a directory. It uses the showOpenDialog method which returns a Promise with the selected paths if the user didn't cancel the operation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/dashboard.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await ddClient.desktopUI.dialog.showOpenDialog({\n  properties: [\"openDirectory\"],\n});\nif (!result.canceled) {\n  console.log(result.paths);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Netcat Container with Host Network Mode\nDESCRIPTION: Command to run a netcat server in a container using host networking mode, allowing the container to listen on port 8000 which will be directly accessible from the host.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/host.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it --net=host nicolaka/netshoot nc -lkv 0.0.0.0 8000\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker SSO Documentation\nDESCRIPTION: YAML frontmatter that configures the build settings and title for a Docker documentation page about single sign-on. The 'render: never' directive likely prevents automatic rendering of this template.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/faqs/single-sign-on/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Single sign-on\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata Labels to Containers\nDESCRIPTION: Using the recommended reverse-DNS notation to add metadata labels to containers as a map structure for better organization and to prevent conflicts.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nlabels:\n  com.example.description: \"Accounting webapp\"\n  com.example.department: \"Finance\"\n  com.example.label-with-empty-value: \"\"\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose Build Command\nDESCRIPTION: Command used to rebuild a service after changes to its Dockerfile or build directory.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_build.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose build\n```\n\n----------------------------------------\n\nTITLE: Updating a Python Flask Application\nDESCRIPTION: This code snippet demonstrates how to update a Flask application's greeting message. It shows a line of Python code that returns a formatted string with a greeting and a counter value.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nreturn f'Hello from Docker! I have been seen {count} times.\\n'\n```\n\n----------------------------------------\n\nTITLE: Running the Nginx Reverse Proxy Container\nDESCRIPTION: This command starts the Nginx container in detached mode, names it 'nginx', connects it to the 'sample-app' network, and maps port 80 on the host to port 80 in the container for external access.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name nginx --network sample-app  -p 80:80 nginx\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Diff Showing Cross-Compilation Changes\nDESCRIPTION: A diff of the Dockerfile changes needed to add cross-compilation support, highlighting the addition of platform-specific build arguments and environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n# syntax=docker/dockerfile:1\n-FROM golang:alpine AS build\n+FROM --platform=$BUILDPLATFORM golang:alpine AS build\n+ARG TARGETOS\n+ARG TARGETARCH\nWORKDIR /app\nADD https://github.com/dvdksn/buildme.git#eb6279e0ad8a10003718656c6867539bd9426ad8 .\n-RUN go build -o server .\n+RUN GOOS=${TARGETOS} GOARCH=${TARGETARCH} go build -o server .\n\nFROM alpine\nCOPY --from=build /app/server /server\nENTRYPOINT [\"/server\"]\n```\n\n----------------------------------------\n\nTITLE: Calculating Health Score Percentage\nDESCRIPTION: Formula for calculating the percentage of points achieved by an image relative to the total possible points. This percentage is used to determine the final health score grade.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/policy/scores.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPercentage = (Points / Total) * 100\n```\n\n----------------------------------------\n\nTITLE: Creating Overlay Network for MySQL and WordPress\nDESCRIPTION: Creates a user-defined overlay network named 'mysql_private' for secure communication between the MySQL and WordPress services, isolating them from external access.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create -d overlay mysql_private\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Compose Application\nDESCRIPTION: A command to build and start the application using Docker Compose. The --build flag ensures that Docker compiles the image before starting the containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Removing Config Access from a Service\nDESCRIPTION: Updates the Redis service to remove its access to the my-config config, which triggers a service redeployment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker service update --config-rm my-config redis\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image from Dockerfile\nDESCRIPTION: This command builds a Docker image named 'startstop' from the previously created Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/start-containers-automatically.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t startstop .\n```\n\n----------------------------------------\n\nTITLE: Using Named Volumes in Docker Compose\nDESCRIPTION: Example of mounting a named volume in a Docker Compose service. This demonstrates the syntax for referencing a named volume 'mydatavolume' and mounting it at the '/data' path within the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes: [\"mydatavolume:/data\"]\n```\n\n----------------------------------------\n\nTITLE: Listing Image Layers in Registry\nDESCRIPTION: Lists the SHA256 layers for the test/trusttest image in the registry storage\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_sandbox.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nroot@65084fc6f047:/# ls -l /var/lib/registry/docker/registry/v2/repositories/test/trusttest/_layers/sha256\ntotal 12\ndrwxr-xr-x 2 root root 4096 Jun 10 17:26 a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\ndrwxr-xr-x 2 root root 4096 Jun 10 17:26 aac0c133338db2b18ff054943cee3267fe50c75cdee969aed88b1992539ed042\ndrwxr-xr-x 2 root root 4096 Jun 10 17:26 cc7629d1331a7362b5e5126beb5bf15ca0bf67eb41eab994c719a45de53255cd\n```\n\n----------------------------------------\n\nTITLE: Analyzing Local Project with Docker Scout\nDESCRIPTION: Use the fs:// prefix to analyze local source code directly without building it into a container image. This command provides a quick vulnerability summary of the current working directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/artifact-types.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout quickview fs://.\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Comment for Source Code Reference\nDESCRIPTION: This HTML comment provides information about the automatic generation of the page from Docker's source code and instructions for suggesting changes via GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/node/demote.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Enabling Features in Docker Daemon via CLI\nDESCRIPTION: Example of enabling the CDI and containerd-snapshotter features using command-line flags with the dockerd command. The CDI feature is explicitly set to true while containerd-snapshotter uses the default value (true).\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_36\n\nLANGUAGE: console\nCODE:\n```\n$ dockerd --feature cdi=true --feature containerd-snapshotter\n```\n\n----------------------------------------\n\nTITLE: Setting Tmpfs Mounts in Docker Compose YAML\nDESCRIPTION: Shows how to configure temporary file system mounts (tmpfs) for a service in a Docker Compose file, including setting mount options.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_69\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    tmpfs:\n      - /data:mode=755,uid=1009,gid=1009\n      - /run\n```\n\n----------------------------------------\n\nTITLE: Docker Memory Warning Console Output\nDESCRIPTION: Example console output showing a warning message when swap limit support is not enabled in the kernel.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/resource_constraints.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nWARNING: No swap limit support\n```\n\n----------------------------------------\n\nTITLE: Grouping Multiple Bake Targets\nDESCRIPTION: Demonstrates how to group multiple targets together and define their individual configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/targets.md#2025-04-11_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"all\" {\n  targets = [\"webapp\", \"api\", \"tests\"]\n}\n\ntarget \"webapp\" {\n  dockerfile = \"webapp.Dockerfile\"\n  tags = [\"docker.io/username/webapp:latest\"]\n  context = \"https://github.com/username/webapp\"\n}\n\ntarget \"api\" {\n  dockerfile = \"api.Dockerfile\"\n  tags = [\"docker.io/username/api:latest\"]\n  context = \"https://github.com/username/api\"\n}\n\ntarget \"tests\" {\n  dockerfile = \"tests.Dockerfile\"\n  contexts = {\n    webapp = \"target:webapp\",\n    api = \"target:api\",\n  }\n  output = [\"type=local,dest=build/tests\"]\n  context = \".\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Private Key into Docker Trust Store\nDESCRIPTION: Shows how to load a manually generated private key into the local Docker trust store using the docker trust key load command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker trust key load delegation.key --name jeff\n\nLoading key from \"delegation.key\"...\nEnter passphrase for new jeff key with ID 8ae710e: \nRepeat passphrase for new jeff key with ID 8ae710e: \nSuccessfully imported key from delegation.key\n```\n\n----------------------------------------\n\nTITLE: Updating docker-scan-plugin on RPM-based distributions\nDESCRIPTION: Command to update the docker-scan-plugin package on RPM-based Linux distributions like CentOS or Fedora.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/20.10.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyum install docker-scan-plugin\n```\n\n----------------------------------------\n\nTITLE: Basic tmpfs Mount Syntax in Docker\nDESCRIPTION: Shows the basic syntax for mounting a tmpfs filesystem in a Docker container using either the --mount or --tmpfs flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/tmpfs.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --mount type=tmpfs,dst=<mount-path>\n$ docker run --tmpfs <mount-path>\n```\n\n----------------------------------------\n\nTITLE: Starting Privileged Docker Container\nDESCRIPTION: Command to start a privileged Docker container with host PID namespace access.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/usbip.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -it --privileged --pid=host alpine\n```\n\n----------------------------------------\n\nTITLE: Listing Available Docker Engine Versions on Debian\nDESCRIPTION: Command to list all available versions of Docker Engine in the apt repository. This is useful when you need to install a specific version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# List the available versions:\n$ apt-cache madison docker-ce | awk '{ print $3 }'\n\n5:{{% param \"docker_ce_version\" %}}-1~debian.12~bookworm\n5:{{% param \"docker_ce_version_prev\" %}}-1~debian.12~bookworm\n...\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL with a Persistent Volume\nDESCRIPTION: This command starts a PostgreSQL container with a password and mounts the 'postgres_data' volume to store database files persistently.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name=db -e POSTGRES_PASSWORD=secret -d -v postgres_data:/var/lib/postgresql/data postgres\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon with Dual Logging\nDESCRIPTION: Example showing Docker daemon configuration with Splunk logging driver and enabled cache\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/dual-logging.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cat /etc/docker/daemon.json\n{\n  \"log-driver\": \"splunk\",\n  \"log-opts\": {\n    ... (options for \"splunk\" logging driver)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up iptables Rule for HTTP Traffic Accounting in Docker\nDESCRIPTION: Creates an iptables rule to count outbound HTTP traffic on port 80. This rule matches packets but doesn't perform any action (-j or -g flags), simply counting matched packets before passing to the next rule.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/runmetrics.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ iptables -I OUTPUT -p tcp --sport 80\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Swarm Documentation Page\nDESCRIPTION: YAML frontmatter defining metadata for the Docker Swarm documentation page. It specifies the location of data files, page title, aliases for URL redirection, and the page layout template to use.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/swarm/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_swarm\ntitle: docker swarm\naliases:\n- /edge/engine/reference/commandline/swarm/\n- /engine/reference/commandline/swarm/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Docker Socket Mount Restriction with ECI Enabled\nDESCRIPTION: This console example demonstrates how Docker Desktop prevents bind-mounting the Docker Engine socket when Enhanced Container Isolation is enabled, showing the error message when attempting to mount the socket with an unauthorized image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/config.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock docker:cli\ndocker: Error response from daemon: enhanced container isolation: docker socket mount denied for container with image \"docker.io/library/docker\"; image is not in the allowed list; if you wish to allow it, configure the docker socket image list in the Docker Desktop settings.\n```\n\n----------------------------------------\n\nTITLE: Examining Dual-Stack Container Network Configuration\nDESCRIPTION: Starts a container on the dual-stack network and examines the interface configuration and routing tables for both IPv4 and IPv6. Shows how to specify a custom IPv6 address for the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --net=ipvlan140 --ip6=2001:db8:abc2::51 -it --rm alpine /bin/sh\n\n$ ip a show eth0\n78: eth0@if77: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default\n    link/ether 00:50:56:2b:29:40 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.140.2/24 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 2001:db8:abc4::250:56ff:fe2b:2940/64 scope link\n       valid_lft forever preferred_lft forever\n    inet6 2001:db8:abc9::1/64 scope link nodad\n       valid_lft forever preferred_lft forever\n\n$$ ip route\ndefault via 192.168.140.1 dev eth0\n192.168.140.0/24 dev eth0  proto kernel  scope link  src 192.168.140.2\n\n$$ ip -6 route\n2001:db8:abc4::/64 dev eth0  proto kernel  metric 256\n2001:db8:abc9::/64 dev eth0  proto kernel  metric 256\ndefault via 2001:db8:abc9::22 dev eth0  metric 1024\n```\n\n----------------------------------------\n\nTITLE: Conditional Product Link and Navigation Override\nDESCRIPTION: Conditional template block that overrides the product link and navigation instructions when the product is 'admin', providing Admin Console specific values.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/shortcodes/admin-sso-config.md#2025-04-11_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\n{{ if eq (.Get \"product\") \"admin\" }}\n  {{ $product_link = \"the [Admin Console](https://admin.docker.com)\" }}\n  {{ $sso_navigation = \"Select your organization or company from the **Choose profile** page, and then select **SSO and SCIM**. Note that when an organization is part of a company, you must select the company and configure SSO for that organization at the company level. Each organization can have its own SSO configuration and domain, but it must be configured at the company level.\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Backend Environment Configuration for Containerized Setup\nDESCRIPTION: Environment variables configuration for the backend service, using container hostnames for MongoDB and LocalStack connections within the Docker network.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nMONGODB_URI=mongodb://mongodb:27017/todos\nAWS_ACCESS_KEY_ID=test\nAWS_SECRET_ACCESS_KEY=test\nS3_BUCKET_NAME=mysamplebucket\nS3_ENDPOINT_URL=http://localstack:4566\nAWS_REGION=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Network in Docker Compose\nDESCRIPTION: Demonstrates how to set the network for RUN instructions during build in Docker Compose. Includes examples for using host network, custom network, and disabling networking.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  network: host\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  network: custom_network_1\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  network: none\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Startup Output\nDESCRIPTION: Example output when starting the application stack using Docker Compose, showing network and volume creation along with container startup.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/08_using_compose.md#2025-04-11_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nCreating network \"app_default\" with the default driver\nCreating volume \"app_todo-mysql-data\" with default driver\nCreating app_app_1   ... done\nCreating app_mysql_1 ... done\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Create Request Format\nDESCRIPTION: JSON format for the Create request in the volume plugin protocol. This endpoint instructs the plugin to create a volume with the specified name and options.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Name\": \"volume_name\",\n    \"Opts\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Documentation Build Settings in YAML\nDESCRIPTION: YAML configuration that sets build parameters and metadata for a Docker documentation page. Specifies that the page should never be rendered, sets the title to 'Deep dive', and assigns a weight of 60 for ordering purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/deep-dive/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  render: never\ntitle: Deep dive\nweight: 60\n```\n\n----------------------------------------\n\nTITLE: Windows Docker Swarm Commands\nDESCRIPTION: PowerShell commands for initializing swarm, creating configs, and managing IIS service.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\ndocker swarm init\n```\n\nLANGUAGE: powershell\nCODE:\n```\ndocker config create homepage index.html\n```\n\nLANGUAGE: powershell\nCODE:\n```\ndocker service create\n    --name my-iis\n    --publish published=8000,target=8000\n    --config src=homepage,target=\"\\inetpub\\wwwroot\\index.html\"\n    microsoft/iis:nanoserver\n```\n\nLANGUAGE: powershell\nCODE:\n```\ndocker service rm my-iis\n\ndocker config rm homepage\n```\n\n----------------------------------------\n\nTITLE: Docker Host Gateway IP Configuration\nDESCRIPTION: JSON configuration example for setting both IPv4 and IPv6 host gateway addresses in daemon.json file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"host-gateway-ips\": [\"192.0.2.1\", \"2001:db8::1111\"]\n```\n\n----------------------------------------\n\nTITLE: Switching to Docker Desktop Context on Linux\nDESCRIPTION: Command to switch to the desktop-linux Docker context, which is automatically created by Docker Desktop for Linux to interact with its containerization environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/_index.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker context use desktop-linux\ndesktop-linux\nCurrent context is now \"desktop-linux\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom CA Certificate to User Keychain\nDESCRIPTION: Command to add a self-signed certificate to the current user's login keychain rather than the system-wide keychain.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/macfaqs.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain ca.crt\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Remote Builder\nDESCRIPTION: Command to create a Buildx builder that connects to a BuildKit deployment in Kubernetes using TLS certificates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/remote.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create \\\n  --name remote-kubernetes \\\n  --driver remote \\\n  --driver-opt cacert=${PWD}/.certs/client/ca.pem,cert=${PWD}/.certs/client/cert.pem,key=${PWD}/.certs/client/key.pem \\\n  tcp://buildkitd.default.svc:1234\n```\n\n----------------------------------------\n\nTITLE: Viewing Compose Bridge Conversion Options\nDESCRIPTION: Command to display all available flags and options for the compose-bridge convert command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/usage.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ compose-bridge convert --help\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Absolute WORKDIR Path\nDESCRIPTION: Example showing the recommended approach using an absolute path with WORKDIR, ensuring the working directory will always be set to the exact intended location regardless of base image configuration.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/workdir-relative-path.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM nginx AS web\nWORKDIR /usr/share/nginx/html\nCOPY public .\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Buildx Resources\nDESCRIPTION: Command to create a dedicated namespace in Kubernetes for isolating Buildx resources, as part of setting up a Buildx builder with Kubernetes driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl create namespace buildkit\nnamespace/buildkit created\n```\n\n----------------------------------------\n\nTITLE: Watching Repository with Specific Tag Filter\nDESCRIPTION: Example of watching a repository but only pushing images with a specific tag (latest) to Docker Scout.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_watch.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout watch --org my-org --repository registry.example.com/my-service --tag latest\n```\n\n----------------------------------------\n\nTITLE: Configuring port range mapping in Docker Compose YAML\nDESCRIPTION: Demonstrates how to configure a port range to single port mapping in a Docker Compose service definition. This allows mapping a range of host ports to a single container port.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nports:\n  - \"8000-8010:80\"\n```\n\n----------------------------------------\n\nTITLE: Installing Network Plugin on Swarm Nodes\nDESCRIPTION: Installs a global scoped network plugin (Weave) on both manager and worker nodes\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker plugin install bboreham/weave2\nPlugin \"bboreham/weave2\" is requesting the following privileges:\n- network: [host]\n- capabilities: [CAP_SYS_ADMIN CAP_NET_ADMIN]\nDo you grant the above permissions? [y/N] y\nlatest: Pulling from bboreham/weave2\n7718f575adf7: Download complete\nDigest: sha256:2780330cc15644b60809637ee8bd68b4c85c893d973cb17f2981aabfadfb6d72\nStatus: Downloaded newer image for bboreham/weave2:latest\nInstalled plugin bboreham/weave2\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Conflicting Docker Packages on Debian\nDESCRIPTION: Command to remove any conflicting Docker packages before installing the official Docker Engine. This ensures no package conflicts during installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done\n```\n\n----------------------------------------\n\nTITLE: RequestConfig Interface Definition in TypeScript\nDESCRIPTION: The RequestConfig interface defines the structure for making HTTP requests within Docker extensions. It contains essential properties including the URL, HTTP method, headers, and the data payload.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/RequestConfig.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RequestConfig {\n  readonly url: string;\n  readonly method: string;\n  readonly headers: Record<string, string>;\n  readonly data: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying File Deletion Reflection\nDESCRIPTION: Checking the container directory after the file has been deleted from the host, demonstrating the bidirectional nature of bind mounts.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nroot@ac1237fad8db:/src# ls\nDockerfile  node_modules  package.json  spec  src  yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile with Zscaler Certificate Installation\nDESCRIPTION: Demonstrates a multi-stage build process where the Zscaler certificate is installed in the final runtime image, separating build dependencies from the production environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/zscaler/index.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian:bookworm AS build\nWORKDIR /build\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    cmake \\\n    curl \\\n    git\nRUN --mount=target=. cmake -B output/\n\nFROM debian:bookworm-slim AS final\nADD --checksum=sha256:24454f830cdb571e2c4ad15481119c43b3cafd48dd869a9b2945d1036d1dc68d \\\n    https://artifacts.example/certs/zscaler-root-ca.crt /usr/local/share/ca-certificates/zscaler-root-ca.crt\nRUN apt-get update && \\\n    apt-get install -y ca-certificates && \\\n    update-ca-certificates\nWORKDIR /app\nCOPY --from=build /build/output/bin .\nENTRYPOINT [\"/app/bin\"]\n```\n\n----------------------------------------\n\nTITLE: Wrapper Script Solution for Shell Features\nDESCRIPTION: Example showing how to use a wrapper script with JSON-formatted ENTRYPOINT while maintaining shell features.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/json-args-recommended.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nRUN apk add bash\nCOPY --chmod=755 <<EOT /entrypoint.sh\n#!/usr/bin/env bash\nset -e\nmy-background-process &\nmy-program start\nEOT\nENTRYPOINT [\"/entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Cache Sources\nDESCRIPTION: Example of specifying cache sources for build optimization, including registry images and local caches.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  cache_from:\n    - alpine:latest\n    - type=local,src=path/to/cache\n    - type=gha\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Completion for Zsh Without Oh My Zsh\nDESCRIPTION: Commands to create a directory for completions and generate the Docker completion script for Zsh without using Oh My Zsh.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/completion.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p ~/.docker/completions\n$ docker completion zsh > ~/.docker/completions/_docker\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container via CLI\nDESCRIPTION: Command to run the container interactively with the specified Python script.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it basic-nlp 03_text_classification.py\n```\n\n----------------------------------------\n\nTITLE: Publishing to Ephemeral Ports\nDESCRIPTION: Example of letting Docker automatically assign a host port by omitting the HOST_PORT specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/publishing-ports.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -p 80 nginx\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Host Environment Variables for Unix Socket Connection\nDESCRIPTION: Command to configure the DOCKER_HOST environment variable to connect to Docker instances through Unix sockets, commonly needed for applications like Apache Maven.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/known-issues.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_HOST=unix:///var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Service Iteration Template Example\nDESCRIPTION: Template example demonstrating how to iterate over services and generate service-specific manifests\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/customize.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{ range $name, $service := .services }}\n---\n#! {{ $name }}-manifest.yaml\n# Generated code, do not edit\nkey: value\n## ...\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Updating the Vulnerable Package Version in package.json\nDESCRIPTION: Diff showing the required change to package.json to update the vulnerable Express package to a secure version (4.17.3).\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n   \"dependencies\": {\n-    \"express\": \"4.17.1\"\n+    \"express\": \"4.17.3\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Valid Dockerfile Using Base Image Variable\nDESCRIPTION: Example of a correct Dockerfile that uses a variable ($PYTHON_VERSION) defined in the base image.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#2025-04-11_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python AS base\nARG VERSION=$PYTHON_VERSION\n```\n\n----------------------------------------\n\nTITLE: Successful HTTPS Connection Response Example\nDESCRIPTION: This output shows a successful response from an HTTPS request to example.com, indicating that the CA certificate installation was successful and the container trusts the connection.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/ca-certs.md#2025-04-11_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Default Variable and Target in HCL\nDESCRIPTION: This snippet demonstrates how to define a variable with a default value and use it in a target definition within a docker-bake.hcl file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/overrides.md#2025-04-11_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nvariable \"TAG\" {\n  default = \"foo\"\n}\n\ntarget \"default\" {\n  tags = [\"username/my-app:${TAG}\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Changing MySQL Password Using Container Exec\nDESCRIPTION: Executes a command in the MySQL container to change the password for the WordPress user, reading both old and new passwords from secret files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ndocker container exec <CONTAINER_ID> \\\n    bash -c 'mysqladmin --user=wordpress --password=\"$(< /run/secrets/old_mysql_password)\" password \"$(< /run/secrets/mysql_password)\"'\n```\n\n----------------------------------------\n\nTITLE: Running New MySQL Container with Existing Volume\nDESCRIPTION: Starts a new MySQL container using the previously created volume for data persistence.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name my-mysql -v my-db-volume:/var/lib/mysql -d mysql:latest\n```\n\n----------------------------------------\n\nTITLE: Docker Extension List Command\nDESCRIPTION: Command to list all installed Docker extensions\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/usage.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker extension ls\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter block defining metadata for the documentation page, including the data folder, file name, title, and URL aliases for the command reference.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/unpause.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_unpause\ntitle: docker compose unpause\naliases:\n- /compose/reference/unpause/\n- /engine/reference/commandline/compose_unpause/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting BuildKit on Windows\nDESCRIPTION: PowerShell commands to download and extract BuildKit release binaries on a Windows system. Sets version and architecture variables before downloading the tarball and extracting it.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$version = \"v0.13.1\" # specify the release version, v0.13+\n$arch = \"amd64\" # arm64 binary available too\ncurl.exe -LO https://github.com/moby/buildkit/releases/download/$version/buildkit-$version.windows-$arch.tar.gz\n# there could be another `.\bin` directory from containerd instructions\n# you can move those\nmv bin bin2\ntar.exe xvf .\\buildkit-$version.windows-$arch.tar.gz\n## x bin/\n## x bin/buildctl.exe\n## x bin/buildkitd.exe\n```\n\n----------------------------------------\n\nTITLE: Environment Variables in Linux Containers\nDESCRIPTION: Example of setting and viewing environment variables in Docker containers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_40\n\nLANGUAGE: console\nCODE:\n```\n$ export today=Wednesday\n$ docker run -e \"deep=purple\" -e today --rm alpine env\n\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=d2219b854598\ndeep=purple\ntoday=Wednesday\nHOME=/root\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: Command to start all services defined in the compose.yaml file using Docker Compose CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/intro/compose-application-model.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up\n```\n\n----------------------------------------\n\nTITLE: Initializing BERT Summarizer Model\nDESCRIPTION: Creates an instance of the Summarizer class that will perform text summarization using the BERT model.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n      bert_model = Summarizer()\n```\n\n----------------------------------------\n\nTITLE: Cloning the C++ Docker Sample Repository\nDESCRIPTION: Clone the sample C++ application repository to your local machine using Git.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dockersamples/c-plus-plus-docker.git\n```\n\n----------------------------------------\n\nTITLE: Documenting Docker Compose Images Command Options in Markdown\nDESCRIPTION: This snippet presents a markdown table detailing the options available for the 'docker compose images' command. It includes option names, types, default values, and descriptions for each parameter.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_images.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name            | Type     | Default | Description                                |\n|:----------------|:---------|:--------|:-------------------------------------------|\n| `--dry-run`     | `bool`   |         | Execute command in dry run mode            |\n| `--format`      | `string` | `table` | Format the output. Values: [table \\| json] |\n| `-q`, `--quiet` | `bool`   |         | Only display IDs                           |\n```\n\n----------------------------------------\n\nTITLE: Mounting subdirectories in Docker container\nDESCRIPTION: Fixes an issue when mounting subdirectories of /mnt inside a Docker container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n* Fix issue when mounting subdirectories of /mnt in container\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Kubernetes Resources\nDESCRIPTION: Command to delete all resources defined in the Kubernetes configuration file, removing the deployment and service from the cluster.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/deploy.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl delete -f docker-kubernetes.yml\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Image Layers\nDESCRIPTION: These console commands use docker image inspect to view the cryptographic IDs of the layers in each image, formatted as JSON.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker image inspect --format \"{{json .RootFS.Layers}}\" acme/my-base-image:1.0\n\n$ docker image inspect --format \"{{json .RootFS.Layers}}\" acme/my-final-image:1.0\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Container for Verification\nDESCRIPTION: Command to execute an interactive PostgreSQL shell inside the running container to verify database contents.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -it my_postgres_db psql -h localhost -U postgres sampledb\n```\n\n----------------------------------------\n\nTITLE: Testing Nginx HTTPS Configuration\nDESCRIPTION: These commands verify that the Nginx server is operational and using the correct TLS certificate. The first command tests the HTTPS connection, while the second examines the SSL/TLS details.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ curl --cacert root-ca.crt https://localhost:3000\n\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support. refer to\n<a href=\"https://nginx.org\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"https://www.nginx.com\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n</body>\n</html>\n```\n\nLANGUAGE: console\nCODE:\n```\n$ openssl s_client -connect localhost:3000 -CAfile root-ca.crt\n\nCONNECTED(00000003)\ndepth=1 /C=US/ST=CA/L=San Francisco/O=Docker/CN=Swarm Secret Example CA\nverify return:1\ndepth=0 /C=US/ST=CA/L=San Francisco/O=Docker/CN=localhost\nverify return:1\n---\nCertificate chain\n 0 s:/C=US/ST=CA/L=San Francisco/O=Docker/CN=localhost\n   i:/C=US/ST=CA/L=San Francisco/O=Docker/CN=Swarm Secret Example CA\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\n…\n-----END CERTIFICATE-----\nsubject=/C=US/ST=CA/L=San Francisco/O=Docker/CN=localhost\nissuer=/C=US/ST=CA/L=San Francisco/O=Docker/CN=Swarm Secret Example CA\n---\nNo client certificate CA names sent\n---\nSSL handshake has read 1663 bytes and written 712 bytes\n---\nNew, TLSv1/SSLv3, Cipher is AES256-SHA\nServer public key is 4096 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nSSL-Session:\n    Protocol  : TLSv1\n    Cipher    : AES256-SHA\n    Session-ID: A1A8BF35549C5715648A12FD7B7E3D861539316B03440187D9DA6C2E48822853\n    Session-ID-ctx:\n    Master-Key: F39D1B12274BA16D3A906F390A61438221E381952E9E1E05D3DD784F0135FB81353DA38C6D5C021CB926E844DFC49FC4\n    Key-Arg   : None\n    Start Time: 1481685096\n    Timeout   : 300 (sec)\n    Verify return code: 0 (ok)\n```\n\n----------------------------------------\n\nTITLE: Docker Login Authentication\nDESCRIPTION: Command to authenticate with Docker Hub before publishing OCI artifacts.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/oci-artifact.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker login\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images with Docker Extension SDK\nDESCRIPTION: Shows how to retrieve a list of local Docker images using the Docker Extension SDK's listImages method. Optional parameters can be provided to filter and customize the results.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Docker.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst images = await ddClient.docker.listImages();\n```\n\n----------------------------------------\n\nTITLE: Attempting to run commands in a minimal container\nDESCRIPTION: This example shows that commands like 'ls' won't work in the container because the final image is based on 'scratch' and doesn't include any OS tools.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/multistage.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run hello ls\n```\n\n----------------------------------------\n\nTITLE: Generating TLS Certificates for Nginx with Docker Secrets\nDESCRIPTION: This series of steps demonstrates how to generate a root CA and TLS certificate for use with Nginx. These certificates will later be stored as Docker secrets. The process includes generating keys, certificate signing requests, and proper certificate configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ openssl genrsa -out \"root-ca.key\" 4096\n```\n\nLANGUAGE: console\nCODE:\n```\n$ openssl req \\\n          -new -key \"root-ca.key\" \\\n          -out \"root-ca.csr\" -sha256 \\\n          -subj '/C=US/ST=CA/L=San Francisco/O=Docker/CN=Swarm Secret Example CA'\n```\n\nLANGUAGE: ini\nCODE:\n```\n[root_ca]\nbasicConstraints = critical,CA:TRUE,pathlen:1\nkeyUsage = critical, nonRepudiation, cRLSign, keyCertSign\nsubjectKeyIdentifier=hash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ openssl x509 -req  -days 3650  -in \"root-ca.csr\" \\\n               -signkey \"root-ca.key\" -sha256 -out \"root-ca.crt\" \\\n               -extfile \"root-ca.cnf\" -extensions \\\n               root_ca\n```\n\nLANGUAGE: console\nCODE:\n```\n$ openssl genrsa -out \"site.key\" 4096\n```\n\nLANGUAGE: console\nCODE:\n```\n$ openssl req -new -key \"site.key\" -out \"site.csr\" -sha256 \\\n          -subj '/C=US/ST=CA/L=San Francisco/O=Docker/CN=localhost'\n```\n\nLANGUAGE: ini\nCODE:\n```\n[server]\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints = critical,CA:FALSE\nextendedKeyUsage=serverAuth\nkeyUsage = critical, digitalSignature, keyEncipherment\nsubjectAltName = DNS:localhost, IP:127.0.0.1\nsubjectKeyIdentifier=hash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ openssl x509 -req -days 750 -in \"site.csr\" -sha256 \\\n    -CA \"root-ca.crt\" -CAkey \"root-ca.key\"  -CAcreateserial \\\n    -out \"site.crt\" -extfile \"site.cnf\" -extensions server\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Docker Engine on Raspberry Pi OS\nDESCRIPTION: Installs the latest versions of Docker Engine, Docker CLI, containerd, and Docker plugins using apt. This is the recommended way to install Docker for most users.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Property for Attestation Manifests in JSON\nDESCRIPTION: JSON snippet showing how the platform property is set to unknown/unknown for attestation manifests to prevent container runtimes from accidentally pulling or running them.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"platform\": {\n  \"architecture\": \"unknown\",\n  \"os\": \"unknown\"\n}\n```\n\n----------------------------------------\n\nTITLE: Output of a Successful Model Pull Operation\nDESCRIPTION: Example output displayed after successfully pulling an AI model, showing the download size and confirmation message.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nDownloaded: 257.71 MB\nModel ai/smollm2 pulled successfully\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Desktop Client Instance\nDESCRIPTION: JavaScript code to create a Docker Desktop client instance for accessing extension APIs\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/frontend-extension-tutorial.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDockerDesktopClient } from '@docker/extension-api-client';\n\nconst ddClient = createDockerDesktopClient();\n```\n\n----------------------------------------\n\nTITLE: Running Containers with Various IP Configurations on L3 Network\nDESCRIPTION: Demonstrates starting multiple containers on an IPvlan L3 network with various IP configuration options, including default addressing, specified IPv6 address, specified IPv4 address, and specifying both IPv4 and IPv6 addresses.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n# Start a few of containers on the network (ipnet110)\n# in separate terminals and check connectivity\n$ docker run --net=ipnet110 -it --rm alpine /bin/sh\n# Start a second container specifying the v6 address\n$ docker run --net=ipnet110 --ip6=2001:db8:abc6::10 -it --rm alpine /bin/sh\n# Start a third specifying the IPv4 address\n$ docker run --net=ipnet110 --ip=192.168.112.30 -it --rm alpine /bin/sh\n# Start a 4th specifying both the IPv4 and IPv6 addresses\n$ docker run --net=ipnet110 --ip6=2001:db8:abc6::50 --ip=192.168.112.50 -it --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Loading Existing Trust Key for Docker Image Signing\nDESCRIPTION: Shows how to load an existing private key into Docker's trust store for image signing using the docker trust key load command with a key file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust key load key.pem --name jeff\nLoading key from \"key.pem\"...\nEnter passphrase for new jeff key with ID 8ae710e:\nRepeat passphrase for new jeff key with ID 8ae710e:\nSuccessfully imported key from key.pem\n```\n\n----------------------------------------\n\nTITLE: Using Another Service as Build Context\nDESCRIPTION: Example of referencing another service's image as a build context, enabling layer sharing and image dependency between services.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n base:\n  build:\n    context: .\n    dockerfile_inline: |\n      FROM alpine\n      RUN ...\n my-service:\n  build:\n    context: .\n    dockerfile_inline: |\n      FROM base # image built for service base\n      RUN ...\n    additional_contexts:\n      base: service:base\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter for Docker Buildx Du Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the Docker Buildx Du documentation page. It specifies the data folder, data file, title, layout, and URL aliases for the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/du.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx_du\ntitle: docker buildx du\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_du/\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Main Execution Block\nDESCRIPTION: Sets up the main execution block that ensures the following code runs only when the script is executed directly, not when imported as a module.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Platforms in Docker Compose\nDESCRIPTION: Shows how to define target platforms for building images in Docker Compose. Includes examples and error cases for platform configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: \".\"\n  platforms:\n    - \"linux/amd64\"\n    - \"linux/arm64\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: \".\"\n  platforms:\n    - \"linux/amd64\"\n    - \"unsupported/unsupported\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    platform: \"linux/amd64\"\n    build:\n      context: \".\"\n      platforms:\n        - \"linux/arm64\"\n```\n\n----------------------------------------\n\nTITLE: Ubuntu Docker Desktop Removal Commands\nDESCRIPTION: Series of commands to remove Docker Desktop and its associated files on Ubuntu\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/uninstall.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt remove docker-desktop\n$ rm -r $HOME/.docker/desktop\n$ sudo rm /usr/local/bin/com.docker.cli\n$ sudo apt purge docker-desktop\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Network for Container Communication\nDESCRIPTION: This command creates a Docker network named 'sample-app' which allows containers to communicate with each other using container names or network aliases as hostnames.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create sample-app\n```\n\n----------------------------------------\n\nTITLE: Exec Resize API Request in Docker\nDESCRIPTION: HTTP request to resize the TTY session used by an exec command, specifying height and width parameters.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_59\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/exec/e90e34656806/resize?h=40&w=80 HTTP/1.1\nContent-Type: text/plain\n```\n\n----------------------------------------\n\nTITLE: Updating WordPress Service to Use New Secret\nDESCRIPTION: Updates the WordPress service to remove the old secret and add the new secret with a specific target path.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ndocker service update \\\n     --secret-rm mysql_password \\\n     --secret-add source=mysql_password_v2,target=wp_db_password \\\n     wordpress\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Context Export Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the Docker Context Export documentation page, including the data folder, data file, title, layout, and page aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/context/export.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_context_export\ntitle: docker context export\nlayout: cli\naliases:\n- /engine/reference/commandline/context_export/\n---\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for Java Testing and Deployment\nDESCRIPTION: A comprehensive multi-stage Dockerfile that handles testing, dependency management, packaging, and deployment of a Java Spring Boot application. It includes stages for testing, managing dependencies, packaging the application, extracting layered JAR files, development, and production deployment.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/run-tests.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM eclipse-temurin:21-jdk-jammy as base\nWORKDIR /build\nCOPY --chmod=0755 mvnw mvnw\nCOPY .mvn/ .mvn/\n\nFROM base as test\nWORKDIR /build\nCOPY ./src src/\nRUN --mount=type=bind,source=pom.xml,target=pom.xml \\\n    --mount=type=cache,target=/root/.m2 \\\n    ./mvnw test\n\nFROM base as deps\nWORKDIR /build\nRUN --mount=type=bind,source=pom.xml,target=pom.xml \\\n    --mount=type=cache,target=/root/.m2 \\\n    ./mvnw dependency:go-offline -DskipTests\n\nFROM deps as package\nWORKDIR /build\nCOPY ./src src/\nRUN --mount=type=bind,source=pom.xml,target=pom.xml \\\n    --mount=type=cache,target=/root/.m2 \\\n    ./mvnw package -DskipTests && \\\n    mv target/$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout).jar target/app.jar\n\nFROM package as extract\nWORKDIR /build\nRUN java -Djarmode=layertools -jar target/app.jar extract --destination target/extracted\n\nFROM extract as development\nWORKDIR /build\nRUN cp -r /build/target/extracted/dependencies/. ./\nRUN cp -r /build/target/extracted/spring-boot-loader/. ./\nRUN cp -r /build/target/extracted/snapshot-dependencies/. ./\nRUN cp -r /build/target/extracted/application/. ./\nENV JAVA_TOOL_OPTIONS=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000\"\nCMD [ \"java\", \"-Dspring.profiles.active=postgres\", \"org.springframework.boot.loader.launch.JarLauncher\" ]\n\nFROM eclipse-temurin:21-jre-jammy AS final\nARG UID=10001\nRUN adduser \\\n    --disabled-password \\\n    --gecos \"\" \\\n    --home \"/nonexistent\" \\\n    --shell \"/sbin/nologin\" \\\n    --no-create-home \\\n    --uid \"${UID}\" \\\n    appuser\nUSER appuser\nCOPY --from=extract build/target/extracted/dependencies/ ./\nCOPY --from=extract build/target/extracted/spring-boot-loader/ ./\nCOPY --from=extract build/target/extracted/snapshot-dependencies/ ./\nCOPY --from=extract build/target/extracted/application/ ./\nEXPOSE 8080\nENTRYPOINT [ \"java\", \"-Dspring.profiles.active=postgres\", \"org.springframework.boot.loader.launch.JarLauncher\" ]\n```\n\n----------------------------------------\n\nTITLE: Docker Network Creation with IPv4 Control\nDESCRIPTION: Command syntax for creating Docker networks with the ability to disable IPv4 address assignment using the new --ipv4 flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --ipv4=false [...]\n```\n\n----------------------------------------\n\nTITLE: Reclaiming Space in Docker Desktop for Mac\nDESCRIPTION: Command to trigger immediate space reclamation in Docker Desktop for Mac using a privileged container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/macfaqs.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --privileged --pid=host docker/desktop-reclaim-space\n```\n\n----------------------------------------\n\nTITLE: Exiting PostgreSQL Shell\nDESCRIPTION: This command exits the PostgreSQL interactive shell and returns to the container's command line.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n\\q\n```\n\n----------------------------------------\n\nTITLE: Configuring BuildKit as Default in Docker Daemon\nDESCRIPTION: JSON configuration to enable BuildKit by default in the Docker daemon by editing the daemon.json configuration file. This setting makes BuildKit the default builder for all Docker builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"buildkit\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Logs Command Options Table\nDESCRIPTION: Markdown table detailing all available options for the 'docker compose logs' command, including flags for dry run mode, log following, container indexing, output formatting, timestamp filtering, and line limiting.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_logs.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                 | Type     | Default | Description                                                                                    |\n|:---------------------|:---------|:--------|:-----------------------------------------------------------------------------------------------|\n| `--dry-run`          | `bool`   |         | Execute command in dry run mode                                                                |\n| `-f`, `--follow`     | `bool`   |         | Follow log output                                                                              |\n| `--index`            | `int`    | `0`     | index of the container if service has multiple replicas                                        |\n| `--no-color`         | `bool`   |         | Produce monochrome output                                                                      |\n| `--no-log-prefix`    | `bool`   |         | Don't print prefix in logs                                                                     |\n| `--since`            | `string` |         | Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)    |\n| `-n`, `--tail`       | `string` | `all`   | Number of lines to show from the end of the logs for each container                            |\n| `-t`, `--timestamps` | `bool`   |         | Show timestamps                                                                                |\n| `--until`            | `string` |         | Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes) |\n```\n\n----------------------------------------\n\nTITLE: Setting DNS Search Domain for Docker Containers\nDESCRIPTION: Example of how to set a custom DNS search domain (example.com) for all Docker containers. This affects domain name resolution in all containers run by the daemon.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_28\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dockerd --dns-search example.com\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Desktop Modules\nDESCRIPTION: The 'docker desktop module ls' command lists available modules in Docker Desktop. This command shows all modules that can be installed, managed or removed from the Docker Desktop installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/module/ls.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker desktop module ls\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Data and Resources\nDESCRIPTION: These commands delete all Docker images, containers, volumes, and data by removing the Docker and containerd data directories. This step is optional and should be performed after uninstalling Docker Engine.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/fedora.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo rm -rf /var/lib/docker\n$ sudo rm -rf /var/lib/containerd\n```\n\n----------------------------------------\n\nTITLE: Requirements File for Translation Application\nDESCRIPTION: Specifies the Python library dependencies needed for the language translation application, particularly the googletrans library in version 4.0.0-rc1.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n...\n\n# 05 language_translation\ngoogletrans==4.0.0-rc1\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop with Analytics Disabled via Command Line in PowerShell\nDESCRIPTION: This PowerShell command installs Docker Desktop while disabling analytics collection using the DISABLEANALYTICS property. It also creates a detailed log file of the installation process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /i \"win\\msi\\bin\\en-US\\DockerDesktop.msi\" /L*V \".\\msi.log\" DISABLEANALYTICS=1\n```\n\n----------------------------------------\n\nTITLE: Installing Docker SBOM CLI Plugin\nDESCRIPTION: Command to install the Docker SBOM CLI plugin for Docker Engine environments\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/security.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sSfL https://raw.githubusercontent.com/docker/sbom-cli-plugin/main/install.sh | sh -s --\n```\n\n----------------------------------------\n\nTITLE: Creating a New Docker Image from Container Changes\nDESCRIPTION: Example of using the POST /commit endpoint to create a new image from a container's changes. The request includes container configuration details and supports parameters for repository, tag, and commit message.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_49\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1.24/commit?container=44c004db4b17&comment=message&repo=myrepo HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n     \"Hostname\": \"\",\n     \"Domainname\": \"\",\n     \"User\": \"\",\n     \"AttachStdin\": false,\n     \"AttachStdout\": true,\n     \"AttachStderr\": true,\n     \"Tty\": false,\n     \"OpenStdin\": false,\n     \"StdinOnce\": false,\n     \"Env\": null,\n     \"Cmd\": [\n             \"date\"\n     ],\n     \"Mounts\": [\n       {\n         \"Source\": \"/data\",\n         \"Destination\": \"/data\",\n         \"Mode\": \"ro,Z\",\n         \"RW\": false\n       }\n     ],\n     \"Labels\": {\n             \"key1\": \"value1\",\n             \"key2\": \"value2\"\n      },\n     \"WorkingDir\": \"\",\n     \"NetworkDisabled\": false,\n     \"ExposedPorts\": {\n             \"22/tcp\": {}\n     }\n}\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Type: application/json\n\n{\"Id\": \"596069db4bf5\"}\n```\n\n----------------------------------------\n\nTITLE: Front Matter Definition for Docker Network Connect Documentation\nDESCRIPTION: YAML front matter that defines the metadata for the 'docker network connect' command documentation page. It specifies the data folder, data file, title, and aliases for URL redirection.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/network/connect.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_network_connect\ntitle: docker network connect\naliases:\n- /edge/engine/reference/commandline/network_connect/\n- /engine/reference/commandline/network_connect/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Base Compose Configuration Example\nDESCRIPTION: Example of a base Compose file that defines a webapp service with image, ports, and volume configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwebapp:\n  image: examples/web\n  ports:\n    - \"8000:8000\"\n  volumes:\n    - \"/data\"\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Interactive Terminal Output\nDESCRIPTION: Example output from successfully connecting to the PostgreSQL database running in the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npsql (15.3 (Debian 15.3-1.pgdg110+1))\nType \"help\" for help.\n\npostgres=#\n```\n\n----------------------------------------\n\nTITLE: Excluding Suppressed CVEs in Docker Scout\nDESCRIPTION: Command to run a CVE scan while excluding suppressed vulnerabilities from the output using the --ignore-suppressed flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/exceptions.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves --ignore-suppressed <image>\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Defined Bridge Network with Options\nDESCRIPTION: Command to create a custom bridge network in Docker with specific options. This example demonstrates how to set the MTU and enable IP masquerade.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --driver bridge --opt \"com.docker.network.driver.mtu\"=\"1500\" --opt \"com.docker.network.bridge.enable_ip_masquerade\"=\"true\" my_custom_bridge\n```\n\n----------------------------------------\n\nTITLE: Installing Docker CE and Container Runtime on Ubuntu\nDESCRIPTION: Command to install the Docker CE daemon, client, and container runtime packages on Ubuntu. With release 18.09, these components are now shipped as separate packages that must be updated together.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/18.09.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Host Environment Variable\nDESCRIPTION: Command to check which host the Docker client is configured to connect to by examining the DOCKER_HOST environment variable.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ env | grep DOCKER_HOST\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Tag Template for AWS CloudWatch in Bash\nDESCRIPTION: This snippet demonstrates how to configure a custom log tag template for the AWS CloudWatch Logs driver. It uses Go template markup to combine the image name and container ID, avoiding the use of colons which are not supported in CloudWatch log names.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/awslogs.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n--log-opt tag='{{ with split .ImageName \":\" }}{{join . \"_\"}}{{end}}-{{.ID}}'\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Stack PS Documentation\nDESCRIPTION: YAML frontmatter configuration defining metadata for the Docker stack ps command documentation page, including data folder location, filename, title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/stack/ps.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_stack_ps\ntitle: docker stack ps\naliases:\n- /edge/engine/reference/commandline/stack_ps/\n- /edge/engine/reference/commandline/stack_tasks/\n- /engine/reference/commandline/stack_tasks/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Setting Memory and Kernel Memory Limits in Docker\nDESCRIPTION: Configures a Docker container with a 500MB total memory limit and a 50MB kernel memory limit, ensuring kernel memory usage stays within the specified bounds.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it -m 500M --kernel-memory 50M ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Python Flask Application with Redis Counter\nDESCRIPTION: Main application code that implements a web server using Flask and Redis to count page visits\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/stack-deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom redis import Redis\n\napp = Flask(__name__)\nredis = Redis(host='redis', port=6379)\n\n@app.route('/')\ndef hello():\n    count = redis.incr('hits')\n    return 'Hello World! I have been seen {} times.\\n'.format(count)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000, debug=True)\n```\n\n----------------------------------------\n\nTITLE: Splitting Text Data into Training and Testing Sets\nDESCRIPTION: Using scikit-learn's train_test_split to divide the dataset into training and testing sets with a 80/20 split ratio.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nX_train, X_test, y_train, y_test = train_test_split(texts, labels, test_size=0.2, random_state=42)\n```\n\n----------------------------------------\n\nTITLE: Rotating Join Token for Worker Nodes\nDESCRIPTION: This command rotates the join token for worker nodes. It invalidates the old token and generates a new one, providing the updated join command for worker nodes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-mode.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm join-token  --rotate worker\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join \\\n    --token SWMTKN-1-2kscvs0zuymrsc9t0ocyy1rdns9dhaodvpl639j2bqx55uptag-ebmn5u927reawo27s3azntd44 \\\n    192.168.99.100:2377\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Containers\nDESCRIPTION: Remove multiple containers using the docker rm command followed by container names, permanently deleting the containers and freeing up resources.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker rm inspiring_ishizaka wizardly_joliot magical_carson gifted_mestorf\n\ninspiring_ishizaka\nwizardly_joliot\nmagical_carson\ngifted_mestorf\n```\n\n----------------------------------------\n\nTITLE: Byte Value Specification Format\nDESCRIPTION: Shows the format for specifying byte values in Docker Compose configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/extension.md#2025-04-11_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n    2b\n    1024kb\n    2048k\n    300m\n    1gb\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker's APT Repository on Raspberry Pi OS\nDESCRIPTION: Configures Docker's official APT repository by adding the GPG key and repository source. This allows for easy installation and updates of Docker packages through the standard apt package manager.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/raspbian/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/raspbian \\\n  $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Enabling Authorization Plugins in Docker Daemon\nDESCRIPTION: Command to start the Docker daemon with one or more authorization plugins. The plugins are specified using the --authorization-plugin flag and can be loaded without restarting the daemon.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ dockerd --authorization-plugin=plugin1 --authorization-plugin=plugin2,...\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS for Docker Containers using Command-Line Flags\nDESCRIPTION: This table describes the available docker run flags for configuring DNS settings on a per-container basis. It includes options for specifying DNS servers, search domains, DNS options, and container hostnames.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/_index.md#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Flag           | Description                                                                                                                                                                                                                                           |\n| -------------- |-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `--dns`        | The IP address of a DNS server. To specify multiple DNS servers, use multiple `--dns` flags. DNS requests will be forwarded from the container's network namespace so, for example, `--dns=127.0.0.1` refers to the container's own loopback address. |\n| `--dns-search` | A DNS search domain to search non-fully qualified hostnames. To specify multiple DNS search prefixes, use multiple `--dns-search` flags.                                                                                                              |\n| `--dns-opt`    | A key-value pair representing a DNS option and its value. See your operating system's documentation for `resolv.conf` for valid options.                                                                                                              |\n| `--hostname`   | The hostname a container uses for itself. Defaults to the container's ID if not specified.                                                                                                                                                            |\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker API Docs\nDESCRIPTION: YAML configuration block that defines the title, link title and URL aliases for the Docker Engine API v1.46 documentation page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.46.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.46\ntitle: Docker Engine API v1.46 reference\naliases:\n  - /engine/api/v1.46/\n---\n```\n\n----------------------------------------\n\nTITLE: Inheriting Configuration from Another Target in Docker Bake\nDESCRIPTION: Creates a release target that inherits all configuration from a development target while overriding tags and adding platform specifications.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/inheritance.md#2025-04-11_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app-release\" {\n  inherits = [\"app-dev\"]\n  tags = [\"docker.io/username/myapp:latest\"]\n  platforms = [\"linux/amd64\", \"linux/arm64\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting BuildKit Builder Configuration\nDESCRIPTION: Command to inspect the BuildKit builder configuration to verify the connection and see details about the builder including platform support and endpoint information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n> docker buildx inspect\n```\n\n----------------------------------------\n\nTITLE: Entering Docker Daemon Namespaces using nsenter\nDESCRIPTION: Command to enter the user, mount, and network namespaces of the running Docker daemon for debugging purposes. Uses nsenter with the daemon's PID from the runtime directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnsenter -U --preserve-credentials -n -m -t $(cat $XDG_RUNTIME_DIR/docker.pid)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Settings in YAML\nDESCRIPTION: YAML configuration block that defines build parameters and document title. Sets render to 'never' and specifies the title as 'Code quality'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/code-quality/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  render: never\ntitle: Code quality\n```\n\n----------------------------------------\n\nTITLE: Running a Container Using Image SHA\nDESCRIPTION: Command to run a Docker container using the SHA256 hash of an image. This is the least user-friendly way to reference an image.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndocker run sha256:9924dfd9350407b3df01d1a0e1033b1e543523ce7d5d5e2c83a724480ebe8f00\n```\n\n----------------------------------------\n\nTITLE: Creating registry.json for Docker Desktop on macOS\nDESCRIPTION: These commands create a registry.json file in the Application Support directory on macOS to enforce organization sign-in for Docker Desktop. They require sudo privileges and accept an organization name that must be in lowercase.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ sudo mkdir -p \"/Library/Application Support/com.docker.docker\"\n$ echo '{\"allowedOrgs\":[\"myorg\"]}' | sudo tee \"/Library/Application Support/com.docker.docker/registry.json\"\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with Go Application\nDESCRIPTION: Run a Go image as a container without any additional options. The container will run in the foreground and display the application's logs directly in the terminal.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run docker-gs-ping\n```\n\n----------------------------------------\n\nTITLE: Adding a Signing Delegation to a Docker Repository\nDESCRIPTION: Demonstrates adding a delegation signer to a Docker repository using a public key certificate, which establishes trust for image signing operations on that repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust signer add --key cert.pem jeff registry.example.com/admin/demo\nAdding signer \"jeff\" to registry.example.com/admin/demo...\nEnter passphrase for new repository key with ID 10b5e94:\n```\n\n----------------------------------------\n\nTITLE: Resizing Loop-LVM Thin Pool with device_tool\nDESCRIPTION: Command to resize a loop-lvm thin pool to 200GB using the device_tool utility from the moby/moby repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ ./device_tool resize 200GB\n```\n\n----------------------------------------\n\nTITLE: INI Configuration\nDESCRIPTION: INI configuration file for supervisord and SSHD program\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[supervisord]\nnodaemon=true\n\n[program:sshd]\ncommand=/usr/sbin/sshd -D\n```\n\n----------------------------------------\n\nTITLE: Running a JupyterLab Image with an Imported Volume\nDESCRIPTION: Command to run a shared JupyterLab image with a specific volume mounted. This allows accessing shared notebook data that has been imported from Docker Hub.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -p 8889:8888 -v jupyter-data-2:/home/jovyan/work YOUR-USER-NAME/my-jupyter-image start-notebook.py --NotebookApp.token='my-token'\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDX_GIT_INFO Environment Variable in Console\nDESCRIPTION: Controls inclusion of source control information in provenance attestations. When set to false (0), Git information will be removed from the attestations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ export BUILDX_GIT_INFO=0\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample Python Docker Application Repository\nDESCRIPTION: Command to clone a sample Python application repository that includes logic to connect to a database. This is the starting point for setting up a containerized development environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/estebanx64/python-docker-dev-example\n```\n\n----------------------------------------\n\nTITLE: Listing Environment Variables in a Linked Docker Container\nDESCRIPTION: This snippet demonstrates how to run a container linked to a database and list its environment variables. It shows the automatically created variables with information about the linked container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm --name web2 --link db:db training/webapp env\n\n<...>\nDB_NAME=/web2/db\nDB_PORT=tcp://172.17.0.5:5432\nDB_PORT_5432_TCP=tcp://172.17.0.5:5432\nDB_PORT_5432_TCP_PROTO=tcp\nDB_PORT_5432_TCP_PORT=5432\nDB_PORT_5432_TCP_ADDR=172.17.0.5\n<...>\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Scout Directory for Manual Installation (Windows)\nDESCRIPTION: Command to create a subdirectory under %USERPROFILE%/.docker called scout for storing the Docker Scout CLI plugin binary on Windows.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/install.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n% mkdir %USERPROFILE%\\.docker\\scout\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Error Directive\nDESCRIPTION: Example Dockerfile configuration that enables strict error checking for build violations using the check directive.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/checks.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n# check=error=true\n\nFROM alpine\nCMD echo \"Hello, world!\"\n```\n\n----------------------------------------\n\nTITLE: Docker Extension Development Commands\nDESCRIPTION: Commands specific to Docker extension development\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/usage.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker extension dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Entitlements in Docker Bake\nDESCRIPTION: Shows how to configure build entitlements using the entitlements attribute. This example grants the security.insecure entitlement to allow running privileged containers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_21\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"integration-tests\" {\n  # this target requires privileged containers to run nested containers\n  entitlements = [\"security.insecure\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching SBOM as Build Attestation with Docker Build\nDESCRIPTION: Use the --attest flag with docker build to generate and attach an SBOM to the image at build-time as an attestation. This uses the Docker Scout SBOM generator for richer results and better compatibility.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/view-create-sboms.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --tag <org>/<image> \\\n  --attest type=sbom,generator=docker/scout-sbom-indexer:latest \\\n  --push .\n```\n\n----------------------------------------\n\nTITLE: Viewing Container Stats in TypeScript\nDESCRIPTION: Navigates to the container stats view to see CPU, memory, disk, and network usage for a specific container using its full ID. Returns a promise that fails if the container doesn't exist.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/NavigationIntents.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.desktopUI.navigate.viewContainerStats(id)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Only the Join Token\nDESCRIPTION: This command retrieves only the join token for worker nodes, without the full join command. It uses the --quiet flag to print only the token.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-mode.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm join-token --quiet worker\n\nSWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c\n```\n\n----------------------------------------\n\nTITLE: Displaying Error for Insufficient Seats in Organization\nDESCRIPTION: This error occurs during user provisioning (via JIT or SCIM) when there are not enough available seats in the Docker organization to accommodate new users. Additional seats need to be purchased or inactive users removed to resolve this issue.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/troubleshoot/troubleshoot-sso.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNot enough seats in organization '$orgName'. Add more seats or contact your administrator.\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker CLI Documentation\nDESCRIPTION: Defines metadata for the Docker build command documentation page, including the data folder, data file, title, and layout configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/build-legacy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_image_build\ntitle: docker build (legacy builder)\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Remote BuildKit Builder in Docker\nDESCRIPTION: Command to create a remote builder in Docker that connects to the local BuildKit daemon using a named pipe. This builder can then be used with Docker Buildx.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n> docker buildx create --name buildkit-exp --use --driver=remote npipe:////./pipe/buildkitd\nbuildkit-exp\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Desktop Update Documentation\nDESCRIPTION: YAML frontmatter that defines the metadata and layout configuration for the Docker Desktop update CLI documentation page. Specifies the data folder, data file, page title and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/update.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: desktop-cli\ndatafile: docker_desktop_update\ntitle: docker desktop update\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Docker Init Documentation\nDESCRIPTION: YAML front matter that specifies metadata for the Docker Init command documentation page, including data sources, title, layout, and aliases for URL redirection.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/init.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: init-cli\ndatafile: docker_init\ntitle: docker init\nlayout: cli\naliases:\n- /engine/reference/commandline/init/\n---\n```\n\n----------------------------------------\n\nTITLE: Killing Docker Processes for Troubleshooting on macOS\nDESCRIPTION: This script kills Docker processes that aren't starting properly, removing privileged helper tools that might be causing issues. It's used before installing updates or patches to ensure a clean installation environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/cert-revoke-solution.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo launchctl bootout system/com.docker.vmnetd 2>/dev/null || true\n$ sudo launchctl bootout system/com.docker.socket 2>/dev/null || true\n \n$ sudo rm /Library/PrivilegedHelperTools/com.docker.vmnetd || true\n$ sudo rm /Library/PrivilegedHelperTools/com.docker.socket || true\n\n$ ps aux | grep -i docker | awk '{print $2}' | sudo xargs kill -9 2>/dev/null\n```\n\n----------------------------------------\n\nTITLE: Running a Remote Bake File with Local Files\nDESCRIPTION: Console command that creates local files and then runs a remote Bake definition that will use those local files as its context.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ touch foo bar\n$ docker buildx bake \"https://github.com/dvdksn/buildx.git#bake-remote-example\"\n```\n\n----------------------------------------\n\nTITLE: Making HTTP HEAD Request with Docker Extension API\nDESCRIPTION: Performs an HTTP HEAD request to a backend service using the Docker client extension VM service. Returns a promise that resolves to the response data.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/HttpService.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.extension.vm.service\n .head(\"/some/service\")\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Creating Service with Volume Plugin\nDESCRIPTION: Creates a Docker service that uses the installed volume plugin and verifies its running status\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name my-service --mount type=volume,volume-driver=tiborvass/sample-volume-plugin,source=pluginVol,destination=/tmp busybox top\n\n$ docker service ls\nz1sj8bb8jnfn  my-service   replicated  1/1       busybox:latest\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDKIT_COLORS Environment Variable in Shell\nDESCRIPTION: Sets custom colors for terminal output in BuildKit. The format is a CSV string specifying colors for different types of output messages.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport BUILDKIT_COLORS=\"run=123,20,245:error=yellow:cancel=blue:warning=white\"\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Container Diff Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker container diff command documentation page, including title, data locations, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/diff.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_container_diff\ntitle: docker container diff\naliases:\n- /edge/engine/reference/commandline/container_diff/\n- /engine/reference/commandline/container_diff/\n- /engine/reference/commandline/diff/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Verifying Database Existence in MySQL\nDESCRIPTION: SQL command to list all databases in the MySQL instance to confirm that the 'todos' database was created correctly during container initialization.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nmysql> SHOW DATABASES;\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Laravel Development\nDESCRIPTION: Command to start the Laravel development environment using Docker Compose. The command builds the containers if needed, starts them in detached mode, and uses the development-specific compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/development-setup.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f compose.dev.yaml up --build -d\n```\n\n----------------------------------------\n\nTITLE: Starting the Backend Server\nDESCRIPTION: Command to start the Node.js backend server.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ node index.js\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Sample Application Directory (Download)\nDESCRIPTION: This command changes the current directory to the downloaded and extracted nginx-node-redis-main directory, which contains the necessary files for the multi-container application demo.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cd nginx-node-redis-main\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Image Digest Information\nDESCRIPTION: Command to inspect an image and view its digest information. This helps identify the exact version of an image being used by a service.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ docker inspect ubuntu:latest\n```\n\n----------------------------------------\n\nTITLE: Running Container on Macvlan Network\nDESCRIPTION: Launches an Alpine Linux container connected to the macvlan network with detached mode and interactive TTY.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/macvlan.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -dit \\\n  --network my-macvlan-net \\\n  --name my-macvlan-alpine \\\n  alpine:latest \\\n  ash\n```\n\n----------------------------------------\n\nTITLE: Adding phpMyAdmin to Docker Compose Configuration\nDESCRIPTION: This enhanced Compose file adds phpMyAdmin as a service for database management, making it accessible on port 8080 and configured to connect to the MariaDB database container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 9000:80\n    depends_on:\n      db:\n        condition: service_healthy\n    secrets:\n      - db-password\n    environment:\n      - PASSWORD_FILE_PATH=/run/secrets/db-password\n      - DB_HOST=db\n      - DB_NAME=example\n      - DB_USER=root\n  db:\n    image: mariadb\n    restart: always\n    user: root\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/mysql\n    environment:\n      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/db-password\n      - MARIADB_DATABASE=example\n    expose:\n      - 3306\n    healthcheck:\n      test:\n        [\n          \"CMD\",\n          \"/usr/local/bin/healthcheck.sh\",\n          \"--su-mysql\",\n          \"--connect\",\n          \"--innodb_initialized\",\n        ]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n  phpmyadmin:\n    image: phpmyadmin\n    ports:\n      - 8080:80\n    depends_on:\n      - db\n    environment:\n      - PMA_HOST=db\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Listing Local Delegation Keys with Notary CLI\nDESCRIPTION: Uses the Notary CLI to list the keys that have been imported into the local Docker trust store, showing their roles, key IDs, and locations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ notary key list\n\nROLE       GUN                          KEY ID                                                              LOCATION\n----       ---                          ------                                                              --------\nroot                                    f6c6a4b00fefd8751f86194c7d87a3bede444540eb3378c4a11ce10852ab1f96    /home/ubuntu/.docker/trust/private\njeff                                    9deed251daa1aa6f9d5f9b752847647cf8d705da0763aa5467650d0987ed5306    /home/ubuntu/.docker/trust/private\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter Configuration for Docker Desktop CLI Docs\nDESCRIPTION: YAML front matter configuration block that defines metadata for a Docker Desktop CLI documentation page about disabling the model runner feature.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/disable/model-runner.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: desktop-cli\ndatafile: docker_desktop_disable_model_runner\ntitle: docker desktop disable model-runner\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Testing Volume Plugin Socket with curl\nDESCRIPTION: Makes a POST request to the Volume plugin socket to list available volumes. The request is made to a Unix socket located at /var/run/docker/plugins with a specific plugin ID.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ curl -H \"Content-Type: application/json\" -XPOST -d '{}' --unix-socket /var/run/docker/plugins/e8a37ba56fc879c991f7d7921901723c64df6b42b87e6a0b055771ecf8477a6d/plugin.sock http:/VolumeDriver.List\n\n{\"Mountpoint\":\"\",\"Err\":\"\",\"Volumes\":[{\"Name\":\"myvol1\",\"Mountpoint\":\"/data/myvol1\"},{\"Name\":\"myvol2\",\"Mountpoint\":\"/data/myvol2\"}],\"Volume\":null}\n```\n\n----------------------------------------\n\nTITLE: Datadog Agent OpenMetrics Configuration\nDESCRIPTION: Configuration for Datadog agent to collect metrics from Docker Scout, including authentication and metric filtering.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/metrics-exporter.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninstances:\n  - openmetrics_endpoint: \"https://api.scout.docker.com/v1/exporter/org/dockerscoutpolicy/metrics\"\n    namespace: \"scout-metrics-exporter\"\n    metrics:\n      - scout_*\n    auth_token:\n      reader:\n        type: file\n        path: /var/run/secrets/scout-metrics-exporter/token\n      writer:\n        type: header\n        name: Authorization\n        value: Bearer <TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Initializing NLTK's SentimentIntensityAnalyzer\nDESCRIPTION: Creating an instance of the SentimentIntensityAnalyzer for performing sentiment analysis on text data.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nsia = SentimentIntensityAnalyzer()\n```\n\n----------------------------------------\n\nTITLE: Using Pre-defined Multi-platform Build Arguments\nDESCRIPTION: This Dockerfile demonstrates how to use pre-defined build arguments for multi-platform builds, specifically for cross-compilation scenarios.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\n# Pre-defined build arguments are available in the global scope\nFROM --platform=$BUILDPLATFORM golang\n# To inherit them to a stage, declare them with ARG\nARG TARGETOS\nRUN GOOS=$TARGETOS go build -o ./exe .\n```\n\n----------------------------------------\n\nTITLE: Updating a Service to Add Multiple Secrets\nDESCRIPTION: Updates the MySQL service to add access to both the old and new password secrets with custom target paths.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ndocker service update \\\n     --secret-add source=mysql_password,target=old_mysql_password \\\n     --secret-add source=mysql_password_v2,target=mysql_password \\\n     mysql\n```\n\n----------------------------------------\n\nTITLE: Starting the Docker Compose Stack\nDESCRIPTION: Command to start the Docker Compose stack containing Kafka and related services. This launches the entire application stack with the configured listeners.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up\n```\n\n----------------------------------------\n\nTITLE: Displaying Error for Invalid Name ID Format\nDESCRIPTION: This error occurs when the identity provider sends a Name ID that doesn't comply with the email format required by Docker. The IdP needs to be configured to send the Name ID in the correct email address format for successful authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/troubleshoot/troubleshoot-sso.md#2025-04-11_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nThe name ID sent by the identity provider is not an email address. Contact your company administrator.\n```\n\n----------------------------------------\n\nTITLE: Building the Docker image\nDESCRIPTION: Command to build the Docker image from the Dockerfile, tagging it with the name 'hello'.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/multistage.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build -t hello .\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation with Hello-World Container\nDESCRIPTION: Tests the Docker installation by running the hello-world image. If successful, Docker pulls the image and runs a container that displays a confirmation message.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Creating a Redis Service with Automatic Rollback Configuration in Docker Swarm\nDESCRIPTION: This command creates a Redis service with 5 replicas and configures automatic rollback parameters including parallelism, monitoring duration, and failure ratio tolerance for failed deployments.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_36\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name=my_redis \\\n                        --replicas=5 \\\n                        --rollback-parallelism=2 \\\n                        --rollback-monitor=20s \\\n                        --rollback-max-failure-ratio=.2 \\\n                        redis:latest\n```\n\n----------------------------------------\n\nTITLE: Analyzing Dockerfile with Ask Gordon\nDESCRIPTION: Example of using the Docker CLI to have Ask Gordon analyze and rate a Dockerfile. This command shows how to leverage Gordon for improving Dockerfile quality and best practices.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/_index.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ cd path/to/my/project\n$ docker ai rate my Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Toast in Docker Extension (TypeScript)\nDESCRIPTION: This snippet demonstrates how to display a success toast message using the Docker Desktop Client API. It uses the success method of the toast interface to show a temporary notification.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Toast.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.desktopUI.toast.success(\"message\");\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Deno Application with Docker Compose\nDESCRIPTION: Command to build and run the Deno application using Docker Compose, which builds the Docker image and starts the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/containerize.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile ENTRYPOINT for PostgreSQL Profile in Spring Boot\nDESCRIPTION: A diff showing how to modify the ENTRYPOINT instruction in a Dockerfile to pass a system property that activates the PostgreSQL profile in a Spring Boot application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- ENTRYPOINT [ \"java\", \"org.springframework.boot.loader.launch.JarLauncher\" ]\n+ ENTRYPOINT [ \"java\", \"-Dspring.profiles.active=postgres\", \"org.springframework.boot.loader.launch.JarLauncher\" ]\n```\n\n----------------------------------------\n\nTITLE: Disabling Provenance Attestation in Docker Buildx\nDESCRIPTION: Command flag to disable the default SLSA Provenance attestation functionality in Docker Buildx v0.10. This can be used when experiencing compatibility issues with registries or cloud services like Google Cloud Run and AWS Lambda.\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/buildx-v0.10-disclaimer.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--provenance=false\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for NLP Application\nDESCRIPTION: Command to run the Docker container interactively, executing the named entity recognition script. Uses the -it flags for interactive terminal access.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it basic-nlp 02_name_entity_recognition.py\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Using ADD with Checksum for Secure Certificate Download\nDESCRIPTION: Shows how to fetch a Zscaler certificate directly from an artifact repository with checksum verification, ensuring the certificate's integrity.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/zscaler/index.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian:bookworm\nADD --checksum=sha256:24454f830cdb571e2c4ad15481119c43b3cafd48dd869a9b2945d1036d1dc68d \\\n    https://artifacts.example/certs/zscaler-root-ca.crt /usr/local/share/ca-certificates/zscaler-root-ca.crt\nRUN apt-get update && \\\n    apt-get install -y ca-certificates && \\\n    update-ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Images to New Personal Repository\nDESCRIPTION: Commands to push Docker images to a new personal repository after logging in with the new account credentials.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/hub-images/move.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker push new_namespace/docker101tutorial\n```\n\n----------------------------------------\n\nTITLE: Example of Minimal Provenance Attestation JSON\nDESCRIPTION: JSON structure showing the information included in a provenance attestation created using the 'min' mode. It includes build timestamps, frontend used, build materials, source repository, and build platform.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/slsa-provenance.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_type\": \"https://in-toto.io/Statement/v0.1\",\n  \"predicateType\": \"https://slsa.dev/provenance/v0.2\",\n  \"subject\": [\n    {\n      \"name\": \"pkg:docker/<registry>/<image>@<tag/digest>?platform=<platform>\",\n      \"digest\": {\n        \"sha256\": \"e8275b2b76280af67e26f068e5d585eb905f8dfd2f1918b3229db98133cb4862\"\n      }\n    }\n  ],\n  \"predicate\": {\n    \"builder\": { \"id\": \"\" },\n    \"buildType\": \"https://mobyproject.org/buildkit@v1\",\n    \"materials\": [\n      {\n        \"uri\": \"pkg:docker/docker/dockerfile@1\",\n        \"digest\": {\n          \"sha256\": \"9ba7531bd80fb0a858632727cf7a112fbfd19b17e94c4e84ced81e24ef1a0dbc\"\n        }\n      },\n      {\n        \"uri\": \"pkg:docker/golang@1.19.4-alpine?platform=linux%2Farm64\",\n        \"digest\": {\n          \"sha256\": \"a9b24b67dc83b3383d22a14941c2b2b2ca6a103d805cac6820fd1355943beaf1\"\n        }\n      }\n    ],\n    \"invocation\": {\n      \"configSource\": { \"entryPoint\": \"Dockerfile\" },\n      \"parameters\": {\n        \"frontend\": \"gateway.v0\",\n        \"args\": {\n          \"cmdline\": \"docker/dockerfile:1\",\n          \"source\": \"docker/dockerfile:1\",\n          \"target\": \"binaries\"\n        },\n        \"locals\": [{ \"name\": \"context\" }, { \"name\": \"dockerfile\" }]\n      },\n      \"environment\": { \"platform\": \"linux/arm64\" }\n    },\n    \"metadata\": {\n      \"buildInvocationID\": \"c4a87v0sxhliuewig10gnsb6v\",\n      \"buildStartedOn\": \"2022-12-16T08:26:28.651359794Z\",\n      \"buildFinishedOn\": \"2022-12-16T08:26:29.625483253Z\",\n      \"reproducible\": false,\n      \"completeness\": {\n        \"parameters\": true,\n        \"environment\": true,\n        \"materials\": false\n      },\n      \"https://mobyproject.org/buildkit@v1#metadata\": {\n        \"vcs\": {\n          \"revision\": \"a9ba846486420e07d30db1107411ac3697ecab68\",\n          \"source\": \"git@github.com:<org>/<repo>.git\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating registry.json for Docker Desktop on Linux\nDESCRIPTION: These commands create a registry.json file in the docker-desktop directory on Linux to enforce organization sign-in for Docker Desktop. They require sudo privileges and accept an organization name that must be in lowercase.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ sudo mkdir -p /usr/share/docker-desktop/registry\n$ echo '{\"allowedOrgs\":[\"myorg\"]}' | sudo tee /usr/share/docker-desktop/registry/registry.json\n```\n\n----------------------------------------\n\nTITLE: Removing a Delegation from Docker Trust Repository\nDESCRIPTION: This command removes a delegation including the contributor's keys attached to the targets/releases role. Note that tags signed by the removed delegation will need to be resigned by an active delegation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust signer remove ben registry.example.com/admin/demo\nRemoving signer \"ben\" from registry.example.com/admin/demo...\nEnter passphrase for repository key with ID b0014f8: \nSuccessfully removed ben from registry.example.com/admin/demo\n```\n\n----------------------------------------\n\nTITLE: Viewing Container Logs in TypeScript\nDESCRIPTION: Navigates to the Container logs tab for a specific container using its full ID. Returns a promise that fails if the container doesn't exist.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/NavigationIntents.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.desktopUI.navigate.viewContainerLogs(id)\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Multiple Specific GPUs\nDESCRIPTION: Command to run an Ubuntu container with access to multiple specific NVIDIA GPUs by device number. This example shows how to select GPUs 0 and 2 using the --gpus flag with a device specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/resource_constraints.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm --gpus '\"device=0,2\"' ubuntu nvidia-smi\n```\n\n----------------------------------------\n\nTITLE: Optimized Node.js Dockerfile with Layer Caching\nDESCRIPTION: Improved Dockerfile that implements layer caching for Node.js dependencies\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/09_image_best.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM node:lts-alpine\nWORKDIR /app\nCOPY package.json yarn.lock ./\nRUN yarn install --production\nCOPY . .\nCMD [\"node\", \"src/index.js\"]\n```\n\n----------------------------------------\n\nTITLE: Comparing Local Project to Registry Image with Docker Scout\nDESCRIPTION: Use docker scout compare to compare analysis of local source code with a registry image. This example compares the current directory (fs://) with a specific registry image (registry://).\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/artifact-types.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout compare fs://. --to registry://docker/scout-cli:latest --ignore-unchanged\nWARN 'docker scout compare' is experimental and its behaviour might change in the future\n    ✓ File system read\n    ✓ Indexed 268 packages\n    ✓ SBOM of image already cached, 234 packages indexed\n\n\n  ## Overview\n\n                           │              Analyzed File System              │              Comparison Image\n  ─────────────────────────┼────────────────────────────────────────────────┼─────────────────────────────────────────────\n    Path / Image reference │  /Users/david/src/docker/scout-cli-plugin      │  docker/scout-cli:latest\n                           │                                                │  bb0b01303584\n      platform             │                                                │ linux/arm64\n      provenance           │ https://github.com/dvdksn/scout-cli-plugin.git │ https://github.com/docker/scout-cli-plugin\n                           │  6ea3f7369dbdfec101ac7c0fa9d78ef05ffa6315      │  67cb4ef78bd69545af0e223ba5fb577b27094505\n      vulnerabilities      │    0C     0H     1M     1L                     │    0C     0H     1M     1L\n                           │                                                │\n      size                 │ 7.4 MB (-14 MB)                                │ 21 MB\n      packages             │ 268 (+34)                                      │ 234\n                           │                                                │\n\n\n  ## Packages and Vulnerabilities\n\n\n    +   55 packages added\n    -   21 packages removed\n       213 packages unchanged\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Container Attach Documentation\nDESCRIPTION: YAML configuration block defining metadata for the Docker container attach command documentation page, including the data folder location, file name, title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/attach.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_container_attach\ntitle: docker container attach\naliases:\n- /edge/engine/reference/commandline/container_attach/\n- /engine/reference/commandline/attach/\n- /engine/reference/commandline/container_attach/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Repository Events Table in Markdown\nDESCRIPTION: Markdown table defining repository-level events and their descriptions including repository creation, updates, and tag management.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/admin/organization/activity-logs.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Event                                                          | Description                                   |\n|:------------------------------------------------------------------|:------------------------------------------------|\n| Repository Created | Activities related to the creation of a new repository |\n| Repository Deleted | Activities related to the deletion of a repository |\n| Repository Updated | Activities related to updating the description, full description, or status of a repository |\n```\n\n----------------------------------------\n\nTITLE: Installing AppArmor Package on Debian-based Systems\nDESCRIPTION: This command provides a workaround for the AppArmor parser issue by manually installing the AppArmor package on Debian-based systems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/23.0.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\napt-get install apparmor\n```\n\n----------------------------------------\n\nTITLE: Mounting Secret to Default Path in Dockerfile\nDESCRIPTION: Dockerfile instruction demonstrating how to mount a secret to the default path and use it in an AWS command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=secret,id=aws \\\n    AWS_SHARED_CREDENTIALS_FILE=/run/secrets/aws \\\n    aws s3 cp ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI for Multi-Platform Docker Builds with Build Cloud\nDESCRIPTION: Travis CI configuration for building and pushing multi-platform Docker images using Docker Build Cloud. It sets up the environment, installs Docker Buildx with Build Cloud support, and builds images for both amd64 and arm64 architectures.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: minimal \ndist: jammy \n\nservices:\n  - docker\n\nenv:\n  global:\n    - IMAGE_NAME=username/repo\n\nbefore_install: |\n  echo \"$DOCKER_PAT\" | docker login --username \"$DOCKER_USER\" --password-stdin\n\ninstall: |\n  set -e \n  BUILDX_URL=$(curl -s https://raw.githubusercontent.com/docker/actions-toolkit/main/.github/buildx-lab-releases.json | jq -r \".latest.assets[] | select(endswith(\\\"linux-$TRAVIS_CPU_ARCH\\\"))\")\n  mkdir -vp ~/.docker/cli-plugins/\n  curl --silent -L --output ~/.docker/cli-plugins/docker-buildx $BUILDX_URL\n  chmod a+x ~/.docker/cli-plugins/docker-buildx\n  docker buildx create --use --driver cloud \"<ORG>/default\"\n\nscript: |\n  docker buildx build \\\n  --platform linux/amd64,linux/arm64 \\\n  --push \\\n  --tag \"$IMAGE_NAME\" .\n```\n\n----------------------------------------\n\nTITLE: Docker Component Version Updates\nDESCRIPTION: List of version updates for Docker components including Buildx, BuildKit, runc, and Compose with links to their respective release notes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n- Update Buildx to [v0.15.1](https://github.com/docker/buildx/releases/tag/v0.15.1).\n- Update BuildKit to [v0.14.1](https://github.com/moby/buildkit/releases/tag/v0.14.1).\n- Update runc to [v1.1.13](https://github.com/opencontainers/runc/releases/tag/v1.1.13)\n- Update Compose to [v2.28.1](https://github.com/docker/compose/releases/tag/v2.28.1).\n```\n\n----------------------------------------\n\nTITLE: Using External Volumes in Docker Compose\nDESCRIPTION: Example showing how to reference an existing external volume named 'db-data' that is managed outside of Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    image: example/database\n    volumes:\n      - db-data:/etc/data\n\nvolumes:\n  db-data:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Adding GNU Tar to PATH in macOS\nDESCRIPTION: This snippet shows how to add the GNU Tar binary to the PATH environment variable on macOS. It updates the .zshrc file to include the GNU Tar binary directory in the PATH.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/25.0.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ echo 'PATH=\"/opt/homebrew/opt/gnu-tar/libexec/gnubin:$PATH\"' >> ~/.zshrc\n$ source ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Desktop via Command Line on Linux\nDESCRIPTION: This command uses systemctl to stop the Docker Desktop application for the current user. It's an alternative method to quitting Docker Desktop from the GUI menu.\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/desktop-linux-launch.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ systemctl --user stop docker-desktop\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Watch\nDESCRIPTION: This command starts the application with Compose Watch enabled for automatic updates.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose watch\n```\n\n----------------------------------------\n\nTITLE: Running the NLP Docker Container\nDESCRIPTION: Command to run the 'basic-nlp' Docker image as an interactive container, executing the language translation script. The -it flags keep the standard input open and allocate a pseudo-TTY for interactive use.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it basic-nlp 05_language_translation.py\n```\n\n----------------------------------------\n\nTITLE: Monitoring Docker Compose Logs\nDESCRIPTION: Command to view logs from all containers in the Docker Compose stack to monitor download and initialization progress. Used to check for specific lines indicating successful setup.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-leveraging-rag/index.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose logs\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker Guides Landing Page\nDESCRIPTION: YAML front matter configuration for a documentation landing page that defines the page title, link title, description, icon parameter, layout type and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Docker guides\nlinkTitle: Guides\ndescription: Explore the Docker guides\nparams:\n  icon: developer_guide\nlayout: landing\naliases:\n  - /guides/language/\n  - /language/\n  - /learning-paths/\n---\n```\n\n----------------------------------------\n\nTITLE: Setting ENTRYPOINT and CMD for the s3cmd Tool in Dockerfile\nDESCRIPTION: This snippet demonstrates how to set up a Dockerfile with ENTRYPOINT and CMD instructions for the s3cmd command line tool. ENTRYPOINT specifies the main command to run while CMD provides the default flags (--help) if no arguments are provided.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_25\n\nLANGUAGE: dockerfile\nCODE:\n```\nENTRYPOINT [\"s3cmd\"]\nCMD [\"--help\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying Consistent Instruction Casing Error in Linter Output\nDESCRIPTION: Example of the error message displayed when inconsistent instruction casing is detected in a Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/consistent-instruction-casing.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCommand 'EntryPoint' should be consistently cased\n```\n\n----------------------------------------\n\nTITLE: Displaying Error for Session Not Found During Authentication\nDESCRIPTION: This error occurs when the authentication session is lost, typically due to user actions like pressing the back button, refreshing the page, or opening too many sign-in dialogs. The authentication flow needs to be restarted to resolve this issue.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/troubleshoot/troubleshoot-sso.md#2025-04-11_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nWe couldn't find your session. You may have pressed the back button, refreshed the page, opened too many sign-in dialogs, or there is some issue with cookies. Try signing in again. If the issue persists, contact your administrator.\n```\n\n----------------------------------------\n\nTITLE: Starting an Interactive Container with Host Networking\nDESCRIPTION: Command to run an interactive container with host networking enabled, allowing the container to access services running on the host.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/host.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm -it --net=host nicolaka/netshoot\n```\n\n----------------------------------------\n\nTITLE: Running Network Troubleshooting Container\nDESCRIPTION: Starts a container with networking tools (nicolaka/netshoot) connected to the same network as the MySQL container to test network connectivity and DNS resolution.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --network todo-app nicolaka/netshoot\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML configuration block defining metadata for the documentation page, including the data folder location, filename, title and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/node/update.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_node_update\ntitle: docker node update\naliases:\n- /edge/engine/reference/commandline/node_update/\n- /engine/reference/commandline/node_update/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Modifying Backend Greeting in Node.js\nDESCRIPTION: Update the backend API to return randomized greetings instead of a static message.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/develop-with-containers.md#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst GREETINGS = [\n    \"Whalecome!\",\n    \"All hands on deck!\",\n    \"Charting the course ahead!\",\n];\n\nmodule.exports = async (req, res) => {\n    res.send({\n        greeting: GREETINGS[ Math.floor( Math.random() * GREETINGS.length )],\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Equivalent Docker Build Command\nDESCRIPTION: Traditional Docker build command showing equivalent functionality without Bake\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build \\\n  --target=image \\\n  --tag=bakeme:latest \\\n  --provenance=true \\\n  --sbom=true \\\n  --platform=linux/amd64,linux/arm64,linux/riscv64 \\\n  .\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Volume\nDESCRIPTION: Displays detailed information about a Docker volume including its location on disk.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/05_persisting_data.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker volume inspect todo-db\n```\n\n----------------------------------------\n\nTITLE: Documenting Build Materials in SLSA Provenance\nDESCRIPTION: Example of the 'materials' field which lists all external artifacts used in the build, including Git repositories, HTTP URLs, and Docker images. Each material includes its immutable checksum for verification purposes.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n    \"materials\": [\n      {\n        \"uri\": \"pkg:docker/alpine@3.17?platform=linux%2Famd64\",\n        \"digest\": {\n          \"sha256\": \"8914eb54f968791faf6a8638949e480fef81e697984fba772b3976835194c6d4\"\n        }\n      },\n      {\n        \"uri\": \"https://github.com/moby/buildkit.git#refs/tags/v0.11.0\",\n        \"digest\": {\n          \"sha1\": \"4b220de5058abfd01ff619c9d2ff6b09a049bea0\"\n        }\n      },\n      ...\n    ],\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Service with Traefik Host Rule\nDESCRIPTION: Docker Compose configuration for a client service using Nginx with Traefik labels to route requests with the hostname 'localhost' to this service.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # …\n  client:\n    image: nginx:alpine\n    volumes:\n      - \"./client:/usr/share/nginx/html\"\n    labels:\n      traefik.http.routers.client.rule: \"Host(`localhost`)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Config for gMSA Credential Spec\nDESCRIPTION: Creates a Docker config containing the gMSA credential specification for Windows containers. This is used for Active Directory-authenticated applications in a swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker config create credspec credspec.json\n```\n\n----------------------------------------\n\nTITLE: Enabling TCP Keepalive in Docker Client\nDESCRIPTION: Enables TCP keepalive in the Docker client to prevent loss of connection.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.06.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Enable TCP keepalive in the client to prevent loss of connection [docker/cli#415](https://github.com/docker/cli/pull/415)\n```\n\n----------------------------------------\n\nTITLE: Running JupyterLab with Bind Mount on Windows (PowerShell)\nDESCRIPTION: Windows PowerShell version of the command to run JupyterLab with the current directory bind-mounted to the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -p 8889:8888 -v \"$(pwd):/home/jovyan/work\" quay.io/jupyter/base-notebook start-notebook.py --NotebookApp.token='my-token'\n```\n\n----------------------------------------\n\nTITLE: Modified Dockerfile with Cached apt-get update\nDESCRIPTION: Example showing how separating apt-get update and install can lead to outdated packages when adding new dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM ubuntu:22.04\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends curl nginx\n```\n\n----------------------------------------\n\nTITLE: Checking Kernel Support for Btrfs in Linux\nDESCRIPTION: Command to verify that Btrfs filesystem support is available in the running Linux kernel. Returns \"btrfs\" if the support exists.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/btrfs-driver.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ grep btrfs /proc/filesystems\n\nbtrfs\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Comment for Source Code Reference\nDESCRIPTION: This HTML comment provides information about the automatic generation of the page content and instructions for suggesting changes to the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/trust/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Using Registry Cache with Docker Buildx Command\nDESCRIPTION: Example command for using registry cache with Docker Buildx. Shows how to configure cache-to and cache-from options to specify registry references for cache storage and retrieval.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/registry.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=registry,ref=<registry>/<cache-image>[,parameters...] \\\n  --cache-from type=registry,ref=<registry>/<cache-image> .\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Mount v2 Response Format\nDESCRIPTION: JSON v2 response format for the Mount endpoint in the volume plugin protocol. The response includes the mountpoint under PropagatedMount and an error field.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Mountpoint\": \"/path/under/PropagatedMount\",\n    \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Links to Docker Documentation\nDESCRIPTION: Markdown links to Docker documentation pages about container data persistence and volume usage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/use-desktop/volumes.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Persisting container data](/get-started/docker-concepts/running-containers/persisting-container-data.md)\n- [Use volumes](/manuals/engine/storage/volumes.md)\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory in Dockerfile\nDESCRIPTION: Establishes the working directory for subsequent commands in the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_13\n\nLANGUAGE: dockerfile\nCODE:\n```\nWORKDIR /app\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request with Docker Extension API\nDESCRIPTION: Shows how to perform an HTTP GET request to a backend service using the Docker Extension API. This method is marked for deprecation in favor of the 'get' method from HttpService.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/BackendV0.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.backend\n .get(\"/some/service\")\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON File Logging Driver with Options in Docker Daemon JSON\nDESCRIPTION: This JSON configuration sets the default logging driver to 'json-file' with specific options for max size, max files, labels, and environment variables to log.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/configure.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\",\n    \"labels\": \"production_status\",\n    \"env\": \"os,customer\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Docker Engine Versions on CentOS\nDESCRIPTION: Command to display all available versions of Docker Engine in the repository, allowing you to select a specific version for installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/centos.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dnf list docker-ce --showduplicates | sort -r\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Engine with IPv6 Address Blocks\nDESCRIPTION: Docker Engine now supports specifying IPv6 address blocks in the default-address-pools configuration parameter. This enhances networking flexibility when working with IPv6 addresses.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndefault-address-pools:\n  - base: 2001:db8::/64\n    size: 80\n```\n\n----------------------------------------\n\nTITLE: Docker Dev Open Command\nDESCRIPTION: Opens a dev environment in an IDE with options to specify the editor.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/dev-cli.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker dev open DEV_ENV_NAME CONTAINER_REF [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Leaving a Swarm with Docker API\nDESCRIPTION: API request to leave a Docker swarm. Can be forced with the force query parameter, which allows leaving even if this is the last manager or would break the cluster.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_97\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/swarm/leave HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Starting the Docker Compose Application in Detached Mode\nDESCRIPTION: Command to start the multi-container application using Docker Compose in detached mode with the build flag to ensure images are built or rebuilt.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-docker-compose.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndocker compose up -d --build\n```\n\n----------------------------------------\n\nTITLE: Enabling Autolock on an Existing Docker Swarm\nDESCRIPTION: Shows how to enable the autolock feature on an already running swarm using the swarm update command with the --autolock flag set to true.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm_manager_locking.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm update --autolock=true\n\nSwarm updated.\nTo unlock a swarm manager after it restarts, run the `docker swarm unlock`\ncommand and provide the following key:\n\n    SWMKEY-1-+MrE8NgAyKj5r3NcR4FiQMdgu+7W72urH0EZeSmP/0Y\n\nPlease remember to store this key in a password manager, since without it you\nwill not be able to restart the manager.\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Wasm Image with Buildx\nDESCRIPTION: This console command demonstrates how to build and push a Wasm image using Docker Buildx, specifying the wasi/wasm platform.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/wasm.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --platform wasi/wasm -t username/hello-world .\n$ docker push username/hello-world\n```\n\n----------------------------------------\n\nTITLE: BuildKit Missing Component Error Message\nDESCRIPTION: Error message displayed when BuildKit is enabled but the buildx component is missing, providing instructions for installation.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nERROR: BuildKit is enabled but the buildx component is missing or broken.\n       Install the buildx component to build images with BuildKit:\n       https://docs.docker.com/go/buildx/\n```\n\n----------------------------------------\n\nTITLE: Docker Extension Folder Structure\nDESCRIPTION: Example directory structure for a Docker Desktop extension project, showing key files and folders including the Dockerfile, UI components, and configuration files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/frontend-extension-tutorial.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── Dockerfile # (1)\n├── ui # (2)\n│   ├── public # (3)\n│   │   └── index.html\n│   ├── src # (4)\n│   │   ├── App.tsx\n│   │   ├── index.tsx\n│   ├── package.json\n│   └── package-lock.lock\n│   ├── tsconfig.json\n├── docker.svg # (5)\n└── metadata.json # (6)\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Plugin Disable Documentation\nDESCRIPTION: This YAML frontmatter defines metadata for the Docker plugin disable command documentation page, including the data folder, data file, title, aliases, and layout.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/plugin/disable.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_plugin_disable\ntitle: docker plugin disable\naliases:\n- /edge/engine/reference/commandline/plugin_disable/\n- /engine/reference/commandline/plugin_disable/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Attempting Restricted Bind Mount with Enhanced Isolation\nDESCRIPTION: Demonstrates how Enhanced Container Isolation prevents containers from mounting sensitive files from the Docker Desktop Linux VM, such as the Docker Engine's configuration file, protecting against potential security breaches.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm -v /etc/docker/daemon.json:/mnt/daemon.json alpine\ndocker: Error response from daemon: failed to create shim task: OCI runtime create failed: error in the container spec: can't mount /etc/docker/daemon.json because it's configured as a restricted host mount: unknown\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only Bind Mount using -v in Docker\nDESCRIPTION: This snippet shows how to create a read-only bind mount in Docker using the -v flag. It achieves the same result as the previous example, mounting the current directory's target folder to /app in the container with read-only access.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -it \\\n  --name devtest \\\n  -v \"$(pwd)\"/target:/app:ro \\\n  nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Adding Kafka UI Visualization to Docker Compose\nDESCRIPTION: Docker Compose configuration for adding Kafbat UI to visualize and interact with the Kafka cluster. This visualization tool connects to Kafka using the DOCKER listener on port 9093.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#2025-04-11_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  kafka-ui:\n    image: kafbat/kafka-ui:main\n    ports:\n      - 8080:8080\n    environment:\n      DYNAMIC_CONFIG_ENABLED: \"true\"\n      KAFKA_CLUSTERS_0_NAME: local\n      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093\n    depends_on:\n      - kafka\n```\n\n----------------------------------------\n\nTITLE: Docker Compose CP Command Options Table\nDESCRIPTION: Markdown table showing the available options for the docker compose cp command, including option names, types, default values, and descriptions.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_cp.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                  | Type   | Default | Description                                             |\n|:----------------------|:-------|:--------|:--------------------------------------------------------|\n| `--all`               | `bool` |         | Include containers created by the run command           |\n| `-a`, `--archive`     | `bool` |         | Archive mode (copy all uid/gid information)             |\n| `--dry-run`           | `bool` |         | Execute command in dry run mode                         |\n| `-L`, `--follow-link` | `bool` |         | Always follow symbol link in SRC_PATH                   |\n| `--index`             | `int`  | `0`     | Index of the container if service has multiple replicas |\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Docker Image Tagging and Labeling\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to automatically manage Docker image tags and labels. It uses the Docker Metadata Action to generate tags based on various events and Git metadata, and includes steps for logging into Docker Hub and GitHub Container Registry, setting up QEMU and Docker Buildx, and finally building and pushing the Docker image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/manage-tags-labels.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  schedule:\n    - cron: \"0 10 * * *\"\n  push:\n    branches:\n      - \"**\"\n    tags:\n      - \"v*.*.*\"\n  pull_request:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          # list of Docker images to use as base name for tags\n          images: |\n            name/app\n            ghcr.io/username/app\n          # generate Docker tags based on the following events/attributes\n          tags: |\n            type=schedule\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n            type=semver,pattern={{major}}\n            type=sha\n\n      - name: Login to Docker Hub\n        if: github.event_name != 'pull_request'\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Login to GHCR\n        if: github.event_name != 'pull_request'\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n```\n\n----------------------------------------\n\nTITLE: Setting device driver options in Compose Deploy\nDESCRIPTION: Shows how to specify driver-specific options when reserving devices, using key-value pairs in the options field.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy:\n  resources:\n    reservations:\n      devices:\n        - capabilities: [\"gpu\"]\n          driver: gpuvendor\n          options:\n            virtualization: false\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Docker Containers Documentation\nDESCRIPTION: YAML front matter that configures a documentation page about Docker containers. It sets the page title to 'Containers', configures the build option to never render, and assigns a weight of 40 to determine the page's position in the documentation hierarchy.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Containers\nbuild:\n  render: never\nweight: 40\n---\n```\n\n----------------------------------------\n\nTITLE: Using the Docker Dev CLI Plugin\nDESCRIPTION: The basic syntax for using the docker dev CLI plugin, which provides terminal access to Docker Dev Environments functionality in Docker Desktop 4.13.0 and later.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/dev-cli.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker dev [OPTIONS] COMMAND\n```\n\n----------------------------------------\n\nTITLE: OCI Artifact Format Attestation Manifest JSON Structure\nDESCRIPTION: Example of an attestation manifest using the OCI artifact format. This format adds an 'artifactType' field, uses an empty descriptor for the 'config', and includes a 'subject' field pointing to the image manifest.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"artifactType\": \"application/vnd.docker.attestation.manifest.v1+json\",\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.empty.v1+json\",\n    \"size\": 2,\n    \"digest\": \"sha256:44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a\",\n    \"data\": \"e30=\"\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.in-toto+json\",\n      \"size\": 2208,\n      \"digest\": \"sha256:6d2f2c714a6bee3cf9e4d3cb9a966b629efea2dd8556ed81f19bd597b3325286\",\n      \"annotations\": {\n        \"in-toto.io/predicate-type\": \"https://slsa.dev/provenance/v0.2\"\n      }\n    }\n  ],\n  \"subject\": {\n    \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n    \"size\": 1054,\n    \"digest\": \"sha256:bc2046336420a2852ecf915786c20f73c4c1b50d7803aae1fd30c971a7d1cead\",\n    \"platform\": {\n      \"architecture\": \"amd64\",\n      \"os\": \"linux\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for Neovim Build\nDESCRIPTION: Console commands to create a directory for the Neovim Docker build example and navigate to it.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir docker-build-neovim\n$ cd docker-build-neovim\n```\n\n----------------------------------------\n\nTITLE: Docker Engine Release Note Updates\nDESCRIPTION: A comprehensive list of changes, bug fixes, and improvements made to Docker Engine version 18.04.0-ce. The updates span across various components including builder improvements, client enhancements, logging capabilities, networking changes, runtime optimizations, and swarm mode updates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/18.04.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n18.04.0-ce (2018-04-10)\\n\\n- Fixed typos in builder and client\\n- Added Stack API and Kubernetes version support\\n- Improved logging with compression support\\n- Enhanced networking security\\n- Multiple runtime improvements including Windows support\\n- Various Swarm mode enhancements\n```\n\n----------------------------------------\n\nTITLE: Starting Notary Server with Docker Compose\nDESCRIPTION: Command to build and start Notary Server in detached mode using Docker Compose with the sample certificates provided in the repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/deploying_notary.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up -d \n```\n\n----------------------------------------\n\nTITLE: Testing Internet Connectivity from Different Docker Network Containers\nDESCRIPTION: This snippet shows how to test internet connectivity by pinging google.com from three different containers: alpine4 (connected to both bridge and alpine-net networks), alpine3 (connected only to bridge network), and alpine1 (connected only to alpine-net network).\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# ping -c 2 google.com\n\nPING google.com (172.217.3.174): 56 data bytes\n64 bytes from 172.217.3.174: seq=0 ttl=41 time=9.778 ms\n64 bytes from 172.217.3.174: seq=1 ttl=41 time=9.634 ms\n\n--- google.com ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 9.634/9.706/9.778 ms\n\nCTRL+p CTRL+q\n\n$ docker container attach alpine3\n\n# ping -c 2 google.com\n\nPING google.com (172.217.3.174): 56 data bytes\n64 bytes from 172.217.3.174: seq=0 ttl=41 time=9.706 ms\n64 bytes from 172.217.3.174: seq=1 ttl=41 time=9.851 ms\n\n--- google.com ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 9.706/9.778/9.851 ms\n\nCTRL+p CTRL+q\n\n$ docker container attach alpine1\n\n# ping -c 2 google.com\n\nPING google.com (172.217.3.174): 56 data bytes\n64 bytes from 172.217.3.174: seq=0 ttl=41 time=9.606 ms\n64 bytes from 172.217.3.174: seq=1 ttl=41 time=9.603 ms\n\n--- google.com ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 9.603/9.604/9.606 ms\n\nCTRL+p CTRL+q\n```\n\n----------------------------------------\n\nTITLE: Collecting Docker Desktop Logs to File in macOS\nDESCRIPTION: This command collects the last day of Docker Desktop logs and saves them to a file. It uses the same predicate as the streaming command to filter relevant log entries.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ /usr/bin/log show --debug --info --style syslog --last 1d --predicate \"$pred\" >/tmp/logs.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Default Runtime with dockerd CLI\nDESCRIPTION: Example of how to set the default runtime using the dockerd command line interface with the --default-runtime flag. Specifies which runtime to use by default for containers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_23\n\nLANGUAGE: console\nCODE:\n```\n$ dockerd --default-runtime io.containerd.runsc.v1\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Desktop Autostart on Linux\nDESCRIPTION: This command configures Docker Desktop to start automatically when the user signs in to their computer. It uses systemctl to enable the Docker Desktop service for the current user.\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/desktop-linux-launch.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ systemctl --user enable docker-desktop\n```\n\n----------------------------------------\n\nTITLE: Using Docker Desktop Module Update Command in Bash\nDESCRIPTION: The 'docker desktop module_update' command is used to update Docker Desktop modules. It supports an optional '--all' flag to update all modules.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/module/update.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker desktop module_update [--all] [MODULE_NAME...]\n```\n\n----------------------------------------\n\nTITLE: Creating an Overlay Network in Docker Swarm\nDESCRIPTION: This command creates a new overlay network named 'my-network' for use in a Docker swarm. It uses the default options without specifying any custom configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create \\\n  --driver overlay \\\n  my-network\n```\n\n----------------------------------------\n\nTITLE: Docker Environment Configuration\nDESCRIPTION: Docker environment setup showing key commands and configuration options for container management, volume mounting, and network settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -n\ndocker -d -b=none\ndocker run -v\ndocker run -p 123/udp\ndocker run -p 80:4500\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Empty Context - Unix Pipe\nDESCRIPTION: Shows how to build a Docker image without a context using Unix pipe.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker build - < Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Accessing Container Network Namespace for Metric Collection\nDESCRIPTION: Complete workflow to execute network commands within a container's network namespace. This script finds a container PID, creates a symlink to its network namespace, and runs netstat to collect interface metrics for that specific container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/runmetrics.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ TASKS=/sys/fs/cgroup/devices/docker/$CID*/tasks\n$ PID=$(head -n 1 $TASKS)\n$ mkdir -p /var/run/netns\n$ ln -sf /proc/$PID/ns/net /var/run/netns/$CID\n$ ip netns exec $CID netstat -i\n```\n\n----------------------------------------\n\nTITLE: Creating File Sync for Cloud Engine in Project Harmonia\nDESCRIPTION: This command creates a file sync for the cloud engine, enabling local-to-remote file sharing. It demonstrates how to set up seamless file synchronization between local and cloud environments.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker harmonia file-sync create --engine cloudengine $PWD\n```\n\n----------------------------------------\n\nTITLE: Building All Services with Docker Compose\nDESCRIPTION: Command to build all services defined in the Compose file. This is useful when you only need to build images without running services.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose build\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Stack ls Documentation\nDESCRIPTION: YAML front matter metadata used for documentation page generation. It specifies the datafolder, datafile, title, aliases for redirects, and layout for the Docker stack ls command documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/stack/ls.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_stack_ls\ntitle: docker stack ls\naliases:\n- /edge/engine/reference/commandline/stack_ls/\n- /engine/reference/commandline/stack_ls/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies in requirements.txt\nDESCRIPTION: Lists the required Python packages including bert-extractive-summarizer and torch needed for the text summarization application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n...\n\n# 04 text_summarization\nbert-extractive-summarizer==0.10.1\n\n...\n\ntorch==2.1.2\n```\n\n----------------------------------------\n\nTITLE: Listing VFS Directory Contents to Show Image Layers\nDESCRIPTION: Command to list directories in the VFS storage path that represent Docker image layers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/vfs-driver.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ ls -l /var/lib/docker/vfs/dir/\n\ntotal 0\ndrwxr-xr-x.  2 root root  19 Aug  2 18:19 3262dfbe53dac3e1ab7dcc8ad5d8c4d586a11d2ac3c4234892e34bff7f6b821e\ndrwxr-xr-x. 21 root root 224 Aug  2 18:23 6af21814449345f55d88c403e66564faad965d6afa84b294ae6e740c9ded2561\ndrwxr-xr-x. 21 root root 224 Aug  2 18:23 6d3be4585ba32f9f5cbff0110e8d07aea5f5b9fbb1439677c27e7dfee263171c\ndrwxr-xr-x. 21 root root 224 Aug  2 18:23 9ecd2d88ca177413ab89f987e1507325285a7418fc76d0dcb4bc021447ba2bab\ndrwxr-xr-x. 21 root root 224 Aug  2 18:23 a292ac6341a65bf3a5da7b7c251e19de1294bd2ec32828de621d41c7ad31f895\ndrwxr-xr-x. 21 root root 224 Aug  2 18:23 e92be7a4a4e3ccbb7dd87695bca1a0ea373d4f673f455491b1342b33ed91446b\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Swarm with Docker API\nDESCRIPTION: API request to initialize a new Docker swarm. Requires specifying ListenAddr for inter-manager communication and optionally AdvertiseAddr for external address. Returns the node ID upon successful initialization.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_93\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/swarm/init HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"ListenAddr\": \"0.0.0.0:2377\",\n  \"AdvertiseAddr\": \"192.168.1.1:2377\",\n  \"ForceNewCluster\": false,\n  \"Spec\": {\n    \"Orchestration\": {},\n    \"Raft\": {},\n    \"Dispatcher\": {},\n    \"CAConfig\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Daemon in Console\nDESCRIPTION: Command to restart the Docker daemon service after configuration changes. This is necessary for the changes to take effect.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ sudo service docker restart\n```\n\n----------------------------------------\n\nTITLE: Referencing Individual Attributes from Another Target\nDESCRIPTION: Shows how to reference and reuse a specific attribute from another target using dot notation instead of inheriting the entire configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/inheritance.md#2025-04-11_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"foo\" {\n  dockerfile = \"foo.Dockerfile\"\n  tags       = [\"myapp:latest\"]\n}\ntarget \"bar\" {\n  dockerfile = \"bar.Dockerfile\"\n  tags       = target.foo.tags\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Docker Desktop extension UI with Puppeteer in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to use Puppeteer to navigate to the extension in Docker Desktop and perform UI tests on the extension.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/continuous-integration.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe(\"Test my extension\", () => {\n  test(\"should be functional\", async () => {\n    dashboard = await DesktopUI.start();\n\n    const eFrame = await dashboard.navigateToExtension(\"my/extension\");\n\n    // use puppeteer APIs to manipulate the UI, click on buttons, expect visual display and validate your extension\n    await eFrame.waitForSelector(\"#someElementId\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the CircleCI workflow\nDESCRIPTION: Configures the CircleCI workflow name and specifies which jobs to run as part of the workflow.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/ci/circle-ci.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nworkflows:\n  build-docker-image:\n    jobs:\n      - build\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Container Restart Docs\nDESCRIPTION: YAML frontmatter configuration that defines metadata for the Docker container restart command documentation page, including the data folder, file name, title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/restart.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_container_restart\ntitle: docker container restart\naliases:\n- /edge/engine/reference/commandline/container_restart/\n- /engine/reference/commandline/container_restart/\n- /engine/reference/commandline/restart/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling BuildKit Debug Logs\nDESCRIPTION: Workflow configuration to enable debug logging for BuildKit container using buildkitd-flags.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/configure-builder.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  buildx:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          buildkitd-flags: --debug\n      \n      - name: Build\n        uses: docker/build-push-action@v6\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Buildx Documentation\nDESCRIPTION: The YAML frontmatter that configures how the Docker Buildx imagetools create documentation page is rendered. It specifies the datafolder, datafile, title, layout, and URL aliases for the documentation system.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/imagetools/create.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx_imagetools_create\ntitle: docker buildx imagetools create\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_imagetools_create/\n---\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Get Request Format\nDESCRIPTION: JSON format for the Get request in the volume plugin protocol. This endpoint retrieves information about a specific volume.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Name\": \"volume_name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Dockerfile with Defined Build Argument\nDESCRIPTION: Example of a correct Dockerfile where foo is properly declared as a build argument before being used.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine AS base\nARG foo\nCOPY $foo .\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image via CLI\nDESCRIPTION: Command to build the Docker image with tag 'basic-nlp' from the current directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t basic-nlp .\n```\n\n----------------------------------------\n\nTITLE: Copying Requirements File in Dockerfile\nDESCRIPTION: Transfers the requirements.txt file from the local machine into the Docker image to prepare for dependency installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY requirements.txt /app\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Daemon Debugging in daemon.json\nDESCRIPTION: This JSON configuration enables debugging for the Docker daemon by setting the 'debug' key to true in the daemon.json file. This method works across all Docker platforms.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/logs.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"debug\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing spaCy Language Model in Dockerfile\nDESCRIPTION: Downloads the small English language model for spaCy, which is used for NLP tasks in other applications that might use this Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN python -m spacy download en_core_web_sm\n```\n\n----------------------------------------\n\nTITLE: Setting storage quota limits for containers\nDESCRIPTION: JSON configuration to set a size limit of 256MB for container writable layers when using the ZFS storage driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/zfs-driver.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storage-driver\": \"zfs\",\n  \"storage-opts\": [\"size=256M\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a database container in Docker\nDESCRIPTION: Runs a named PostgreSQL database container that will be used as a source container in a linking example, without exposing any ports externally.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d --name db training/postgres\n```\n\n----------------------------------------\n\nTITLE: Adding OpenSUSE SELinux Repository for Docker Installation on SLES\nDESCRIPTION: Commands to add the OpenSUSE SELinux repository which is required for Docker Engine installation but not added by default.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/sles.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ opensuse_repo=\"https://download.opensuse.org/repositories/security:/SELinux/openSUSE_Factory/security:SELinux.repo\"\n$ sudo zypper addrepo $opensuse_repo\n```\n\n----------------------------------------\n\nTITLE: Running Docker Init to Configure Docker Assets\nDESCRIPTION: Interactive Docker initialization process that creates basic Docker configuration files for a Python application, with user inputs for platform, version, port, and startup command.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker init\nWelcome to the Docker Init CLI!\n\nThis utility will walk you through creating the following files with sensible defaults for your project:\n  - .dockerignore\n  - Dockerfile\n  - compose.yaml\n  - README.Docker.md\n\nLet's get started!\n\n? What application platform does your project use? Python\n? What version of Python do you want to use? 3.11.4\n? What port do you want your app to listen on? 8000\n? What is the command to run your app? python3 -m uvicorn app:app --host=0.0.0.0 --port=8000\n```\n\n----------------------------------------\n\nTITLE: TLS Authentication for Remote BuildKit\nDESCRIPTION: Example showing TLS authentication setup for remote BuildKit instance using environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/configure-builder.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  buildx:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          driver: remote\n          endpoint: tcp://graviton2:1234\n        env:\n          BUILDER_NODE_0_AUTH_TLS_CACERT: ${{ secrets.GRAVITON2_CA }}\n          BUILDER_NODE_0_AUTH_TLS_CERT: ${{ secrets.GRAVITON2_CERT }}\n          BUILDER_NODE_0_AUTH_TLS_KEY: ${{ secrets.GRAVITON2_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Go SDK\nDESCRIPTION: Command to install the Go SDK for Docker using go get. Requires a recent version of Go.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ go get github.com/docker/docker/client\n```\n\n----------------------------------------\n\nTITLE: Complete GitHub Actions Workflow for Docker Build and Push\nDESCRIPTION: Combines all previous steps into a complete workflow that checks out code, extracts metadata, authenticates with Docker Hub, and builds and pushes the image with attestations.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/gha.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build and Push Docker Image\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Extract Docker image metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ vars.DOCKER_USERNAME }}/my-image\n\n      - name: Log in to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      \n      - name: Build and push Docker image\n        uses: docker/build-push-action@v6\n        with:\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ steps.meta.outputs.tags }}\n          annotations: ${{ steps.meta.outputs.annotations }}\n          provenance: true\n          sbom: true\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes Context to Docker Desktop\nDESCRIPTION: Command to switch the kubectl context to docker-desktop for troubleshooting purposes\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/kubernetes.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl config use-context docker-desktop\n```\n\n----------------------------------------\n\nTITLE: Checking Network Interfaces\nDESCRIPTION: Command to examine all network interfaces on the host system to verify that no new interface was created by the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/host.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ip addr show\n```\n\n----------------------------------------\n\nTITLE: Docker Image Management with Gordon CLI\nDESCRIPTION: Commands for managing Docker images including listing, pulling, building, and cleanup operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/built-in-tools.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# List available images\n$ docker ai \"Show me all my local Docker images\"\n\n# Pull a specific image\n$ docker ai \"Pull the latest Ubuntu image\"\n\n# Build an image from a Dockerfile\n$ docker ai \"Build an image from my current directory and tag it as myapp:latest\"\n\n# Clean up unused images\n$ docker ai \"Remove all my unused images\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Image Layer Reference in Container's lower-id File\nDESCRIPTION: This snippet demonstrates how to view the contents of a container's lower-id file, which contains the ID of the top image layer that the container is based on. This ID corresponds to the OverlayFS lowerdir.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/overlayfs-driver.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ cat /var/lib/docker/overlay2/ec444863a55a9f1ca2df72223d459c5d940a721b2288ff86a3f27be28b53be6c/lower-id\n\n55f1e14c361b90570df46371b20ce6d480c434981cbda5fd68c6ff61aa0a5358\n```\n\n----------------------------------------\n\nTITLE: Configuring commandList to deny specific Docker commands\nDESCRIPTION: JSON configuration that blocks the 'build' and 'push' commands on the Docker socket, providing a second layer of security beyond imageList restrictions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/config.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"commandList\": {\n  \"type\": \"deny\",\n  \"commands\": [\"build\", \"push\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Container in Docker API\nDESCRIPTION: API call to update a container's configuration including resource limits. Parameters include CPU, memory, block I/O settings, and restart policy.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/update HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"BlkioWeight\": 300,\n  \"CpuShares\": 512,\n  \"CpuPeriod\": 100000,\n  \"CpuQuota\": 50000,\n  \"CpusetCpus\": \"0,1\",\n  \"CpusetMems\": \"0\",\n  \"Memory\": 314572800,\n  \"MemorySwap\": 514288000,\n  \"MemoryReservation\": 209715200,\n  \"KernelMemory\": 52428800,\n  \"RestartPolicy\": {\n    \"MaximumRetryCount\": 4,\n    \"Name\": \"on-failure\"\n  }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"Warnings\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker Image Tag\nDESCRIPTION: Command to remove a specific tag (v1.0) from a Docker image using the docker image rm command. This only untags the image but doesn't remove it.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker image rm docker-gs-ping:v1.0\nUntagged: docker-gs-ping:v1.0\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Compose on RPM-based Distributions\nDESCRIPTION: Commands to update the Docker Compose plugin on RPM-based distributions using yum.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo yum update\n$ sudo yum install docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for C++ Documentation Page in YAML\nDESCRIPTION: This YAML front matter defines metadata for a C++ documentation page within a Docker documentation project. It sets the page title to 'C++' and includes a reference to the official C++ logo from the devicons CDN.\nSOURCE: https://github.com/docker/docs/blob/main/content/languages/cpp/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: C++\nparams:\n  icon: https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/cplusplus/cplusplus-original.svg\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Engine API v1.26 Documentation\nDESCRIPTION: This YAML front matter specifies metadata for the Docker Engine API v1.26 reference documentation page. It defines the link title, page title, and URL aliases for the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.26.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.26\ntitle: Docker Engine API v1.26 reference\naliases:\n- /engine/api/v1.26/\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Container Registries Documentation\nDESCRIPTION: YAML frontmatter that specifies the build configuration and title for a documentation page about container registries. It sets the rendering option to 'never' and defines the page title as 'Container registries'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/registry/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Container registries\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Scout CLI Plugin via Installation Script\nDESCRIPTION: Commands to download and run the installation script for Docker Scout CLI plugin. The script automatically installs the latest version of the plugin.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/install.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh\n$ sh install-scout.sh\n```\n\n----------------------------------------\n\nTITLE: Checking Actual Docker Disk Image Size on Linux\nDESCRIPTION: Commands to check the actual size of the Docker disk image file on the host system. This shows both the actual used size and the maximum allocated size of the Docker.raw file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/linuxfaqs.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/.docker/desktop/vms/0/data\n$ ls -klsh Docker.raw\n2333548 -rw-r--r--@ 1 username  staff    64G Dec 13 17:42 Docker.raw\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Rust Documentation\nDESCRIPTION: YAML frontmatter block defining metadata for a Rust documentation page, including title and icon path parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/languages/rust/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Rust\nparams:\n  icon: https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/rust/rust-original.svg\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Start Hook with Root Privileges in Docker Compose\nDESCRIPTION: This snippet demonstrates how to use a post-start hook to change the ownership of a volume to a non-root user after container startup. The hook executes with root privileges even though the container runs as user 1001.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/lifecycle.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: backend\n    user: 1001\n    volumes:\n      - data:/data    \n    post_start:\n      - command: chown -R /data 1001:1001\n        user: root\n\nvolumes:\n  data: {} # a Docker volume is created with root ownership\n```\n\n----------------------------------------\n\nTITLE: Detaching a Loop Device\nDESCRIPTION: This command detaches the loop device, removing it from the host system after use.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ losetup -d /dev/loop5\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Text Classification\nDESCRIPTION: Python imports for NLTK, SentimentIntensityAnalyzer, scikit-learn metrics, and SSL handling required for the text classification application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn.model_selection import train_test_split\nimport ssl\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with awslogs Driver\nDESCRIPTION: Demonstrates how to start a Docker container using the awslogs logging driver from the command line.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/awslogs.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --log-driver=awslogs ...\n```\n\n----------------------------------------\n\nTITLE: Docker Build with Stdin Dockerfile\nDESCRIPTION: Shell script demonstrating how to build a Docker image using a Dockerfile from stdin while using local context\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# create a directory to work in\nmkdir example\ncd example\n\n# create an example file\ntouch somefile.txt\n\n# build an image using the current directory as context\n# and a Dockerfile passed through stdin\ndocker build -t myimage:latest -f- . <<EOF\nFROM busybox\nCOPY somefile.txt ./\nRUN cat /somefile.txt\nEOF\n```\n\n----------------------------------------\n\nTITLE: Running JupyterLab with Bind Mount on Windows (Command Prompt)\nDESCRIPTION: Windows Command Prompt version of the command to run JupyterLab with the current directory bind-mounted to the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -p 8889:8888 -v \"%cd%\":/home/jovyan/work quay.io/jupyter/base-notebook start-notebook.py --NotebookApp.token='my-token'\n```\n\n----------------------------------------\n\nTITLE: Backing up and clearing Docker data directory\nDESCRIPTION: Commands to copy the existing Docker data directory to a backup location and remove the original contents before configuring ZFS.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/zfs-driver.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo cp -au /var/lib/docker /var/lib/docker.bk\n\n$ sudo rm -rf /var/lib/docker/*\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Commands\nDESCRIPTION: Console commands for deploying and managing the PostgreSQL database and Python application in Kubernetes, including deployment verification and cleanup steps.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/deploy.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f docker-postgres-kubernetes.yaml\n$ kubectl apply -f docker-python-kubernetes.yaml\n$ kubectl get deployments\n$ kubectl get services\n$ curl http://localhost:30001/\n$ kubectl delete -f docker-python-kubernetes.yaml\n$ kubectl delete -f docker-postgres-kubernetes.yaml\n```\n\n----------------------------------------\n\nTITLE: Printing Container Logs with Docker API using HTTP\nDESCRIPTION: Example of using direct HTTP requests to the Docker daemon API to retrieve logs from a container. The request is made to the Docker socket with the container ID and parameters for stdout.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ curl --unix-socket /var/run/docker.sock \"http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/ca5f55cdb/logs?stdout=1\"\nReticulating spline 1...\nReticulating spline 2...\nReticulating spline 3...\nReticulating spline 4...\nReticulating spline 5...\n```\n\n----------------------------------------\n\nTITLE: ARM Template Configuration for Docker Scout Azure Integration\nDESCRIPTION: Azure Resource Manager (ARM) template that creates necessary infrastructure for Docker Scout integration, including EventGrid Topic, Subscription, and read-only authorization token. The template is used to establish connectivity between ACR and Docker Scout for automated image analysis.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/registry/acr.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{{ transform.Remarshal \"json\" $data }}\n```\n\n----------------------------------------\n\nTITLE: Displaying release date in Hugo template\nDESCRIPTION: A Hugo shortcode is used to display the release date for Docker Compose versions. This shortcode takes a 'date' parameter to render the release date in the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_3\n\nLANGUAGE: Hugo\nCODE:\n```\n{{< release-date date=\"2022-09-20\" >}}\n```\n\n----------------------------------------\n\nTITLE: Testing the Mock API\nDESCRIPTION: cURL command to test the WireMock API endpoint that returns mock weather data for Bengaluru.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ curl http://localhost:8080/api/v1/getWeather\\?city\\=Bengaluru\n```\n\n----------------------------------------\n\nTITLE: Deploying a Stack to Docker Swarm\nDESCRIPTION: This command deploys a stack defined in bb-stack.yaml to Docker Swarm with the name 'demo'. It creates both the service and a default network.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/swarm-deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker stack deploy -c bb-stack.yaml demo\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Service via POST API\nDESCRIPTION: POST endpoint to update an existing Docker service with new configurations including container specs, resources, and endpoint specifications.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_105\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/services/1cb4dnqcyx6m66g2t538x3rxha/update?version=23 HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"top\",\n  \"TaskTemplate\": {\n    \"ContainerSpec\": {\n      \"Image\": \"busybox\",\n      \"Args\": [\n        \"top\"\n      ]\n    },\n    \"Resources\": {\n      \"Limits\": {},\n      \"Reservations\": {}\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"any\",\n      \"MaxAttempts\": 0\n    },\n    \"Placement\": {}\n  },\n  \"Mode\": {\n    \"Replicated\": {\n      \"Replicas\": 1\n    }\n  },\n  \"UpdateConfig\": {\n    \"Parallelism\": 1\n  },\n  \"EndpointSpec\": {\n    \"Mode\": \"vip\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Container Driver Builder with Buildx\nDESCRIPTION: Command to create a new builder named 'container' that uses the Docker container driver. The command accepts optional driver-specific parameters through the --driver-opt flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/docker-container.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx create \\\n  --name container \\\n  --driver=docker-container \\\n  --driver-opt=[key=value,...]\ncontainer\n```\n\n----------------------------------------\n\nTITLE: Combining Build Arguments and Environment Variables\nDESCRIPTION: This Dockerfile shows how to use a build argument to set an environment variable, allowing for build-time configuration of the NODE_ENV variable.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM node:20\nARG NODE_ENV=production\nENV NODE_ENV=$NODE_ENV\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci && npm cache clean --force\nCOPY . .\nCMD [\"node\", \"app.js\"]\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image\nDESCRIPTION: Command to build a Docker image from a Dockerfile in the current directory. The -t flag tags the image with your Docker Hub username to prepare it for pushing to Docker Hub.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/quickstart.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t <YOUR-USERNAME>/nginx-custom .\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment and Service Configuration for PHP Application\nDESCRIPTION: YAML configuration defining a Kubernetes Deployment and NodePort Service for a PHP application. The Deployment creates a pod with one container using a custom image, while the Service exposes the application on port 30001.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: docker-php-demo\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      hello-php: web\n  template:\n    metadata:\n      labels:\n        hello-php: web\n    spec:\n      containers:\n        - name: hello-site\n          image: DOCKER_USERNAME/REPO_NAME\n          imagePullPolicy: Always\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: php-entrypoint\n  namespace: default\nspec:\n  type: NodePort\n  selector:\n    hello-php: web\n  ports:\n    - port: 80\n      targetPort: 80\n      nodePort: 30001\n```\n\n----------------------------------------\n\nTITLE: Containerizing Rexray with Dockerfile\nDESCRIPTION: This Dockerfile creates a container image for Rexray that will be used as the basis for the EBS volume plugin. It downloads and installs Rexray 0.6.4 on a Debian Jessie base image and sets up necessary directories.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/EBS_volume.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian:jessie\nRUN apt-get update && apt-get install -y --no-install-recommends wget ca-certificates\nRUN wget https://dl.bintray.com/emccode/rexray/stable/0.6.4/rexray-Linux-x86_64-0.6.4.tar.gz -O rexray.tar.gz && tar -xvzf rexray.tar.gz -C /usr/bin && rm rexray.tar.gz\nRUN mkdir -p /run/docker/plugins /var/lib/libstorage/volumes\nENTRYPOINT [\"rexray\"]\nCMD [\"--help\"]\n```\n\n----------------------------------------\n\nTITLE: Loading Processor-Specific KVM Modules on Linux\nDESCRIPTION: Commands to load the appropriate KVM module based on the host processor architecture (Intel or AMD). These modules enable hardware virtualization support for Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/_index.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ modprobe kvm_intel  # Intel processors\n\n$ modprobe kvm_amd    # AMD processors\n```\n\n----------------------------------------\n\nTITLE: Setting Device-Specific Block IO Weights in Docker\nDESCRIPTION: Examples showing how to set block IO weights for specific devices and override default weights.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it \\\n    --blkio-weight-device \"/dev/sda:200\" \\\n    ubuntu\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it \\\n    --blkio-weight 300 \\\n    --blkio-weight-device \"/dev/sda:200\" \\\n    ubuntu\n```\n\n----------------------------------------\n\nTITLE: Log Driver Info Struct Definition in Go\nDESCRIPTION: Golang struct definition for the Info object that contains container details passed to the logging driver.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_logging.md#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Info struct {\n\tConfig              map[string]string\n\tContainerID         string\n\tContainerName       string\n\tContainerEntrypoint string\n\tContainerArgs       []string\n\tContainerImageID    string\n\tContainerImageName  string\n\tContainerCreated    time.Time\n\tContainerEnv        []string\n\tContainerLabels     map[string]string\n\tLogPath             string\n\tDaemonName          string\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Evaluated Bake Configuration\nDESCRIPTION: This shows the JSON output of the evaluated Bake file, where expressions have been resolved to their final values.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/expressions.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"default\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile\",\n      \"args\": {\n        \"answer\": \"42\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image with a Specific Dockerfile and Custom Tag\nDESCRIPTION: This command builds a Docker image using the multistage Dockerfile and tags it as 'multistage'. It demonstrates how to specify a non-default Dockerfile name using the -f flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t docker-gs-ping:multistage -f Dockerfile.multistage .\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Shows the file structure of the R application project, including source files, Docker configuration files, and documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n├── r-docker-dev/\n│ ├── src/\n│ │ └── app.R\n│ ├── src_db/\n│ │ └── app_db.R\n│ ├── compose.yaml\n│ ├── Dockerfile\n│ └── README.md\n```\n\n----------------------------------------\n\nTITLE: Setting Extended Key Usage for Server Authentication\nDESCRIPTION: Configures the Docker daemon key to be used only for server authentication by setting the appropriate extended key usage attributes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ echo extendedKeyUsage = serverAuth >> extfile.cnf\n```\n\n----------------------------------------\n\nTITLE: Automatically Creating Log Group with awslogs Driver\nDESCRIPTION: Demonstrates how to enable automatic creation of the log group when using the awslogs driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/awslogs.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n    --log-driver=awslogs \\\n    --log-opt awslogs-region=us-east-1 \\\n    --log-opt awslogs-group=myLogGroup \\\n    --log-opt awslogs-create-group=true \\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with GELF Logging Driver\nDESCRIPTION: Command to run a Docker container using the GELF logging driver. It sets the log driver to 'gelf' and specifies the GELF server address.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/gelf.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n      --log-driver gelf --log-opt gelf-address=udp://1.2.3.4:12201 \\\n      alpine echo hello world\n```\n\n----------------------------------------\n\nTITLE: Testing the API with curl Command\nDESCRIPTION: A curl command for testing the veterinarians API endpoint of the Spring Pet Clinic application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ curl  --request GET \\\n  --url http://localhost:8080/vets \\\n  --header 'content-type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Node.js Project Context\nDESCRIPTION: Example Dockerfile showing how to use local context files in a Node.js project build\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM node:latest\nWORKDIR /src\nCOPY package.json package-lock.json .\nRUN npm ci\nCOPY index.ts src .\n```\n\n----------------------------------------\n\nTITLE: Installing and Using SSHFS Plugin in Docker\nDESCRIPTION: This snippet demonstrates how to install the SSHFS plugin, verify its installation, create a volume using the plugin, and use the volume in a container. It also shows how to remove the volume afterward.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker plugin install vieux/sshfs\n\nPlugin \"vieux/sshfs\" is requesting the following privileges:\n- network: [host]\n- capabilities: [CAP_SYS_ADMIN]\nDo you grant the above permissions? [y/N] y\n\nvieux/sshfs\n\n$ docker plugin ls\n\nID                    NAME                  TAG                 DESCRIPTION                   ENABLED\n69553ca1d789          vieux/sshfs           latest              the `sshfs` plugin            true\n\n$ docker volume create \\\n  -d vieux/sshfs \\\n  --name sshvolume \\\n  -o sshcmd=user@1.2.3.4:/remote \\\n  -o password=$(cat file_containing_password_for_remote_host)\n\nsshvolume\n\n$ docker volume ls\n\nDRIVER              NAME\nvieux/sshfs         sshvolume\n\n$ docker run --rm -v sshvolume:/data busybox ls /data\n\n<content of /remote on machine 1.2.3.4>\n\n$ docker volume rm sshvolume\n\nsshvolume\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Docker Hub\nDESCRIPTION: Command to push a built Docker image to Docker Hub. The user should replace YOUR-USER-NAME with their Docker ID.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/tensorflowjs.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker push YOUR-USER-NAME/face-detection-tensorjs\n```\n\n----------------------------------------\n\nTITLE: Running Docker Kernel Configuration Check Script\nDESCRIPTION: Commands to download and run a script that checks kernel compatibility with Docker, verifying if the kernel version and modules meet Docker's requirements.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ curl https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh > check-config.sh\n\n$ bash ./check-config.sh\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Extensions in PHP Dockerfile\nDESCRIPTION: This Dockerfile extends the PHP image to install PDO and MySQL database connection extensions required for PHP database connectivity. It uses a multi-stage build with a composer stage for dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM composer:lts as deps\nWORKDIR /app\nRUN --mount=type=bind,source=composer.json,target=composer.json \\\n    --mount=type=bind,source=composer.lock,target=composer.lock \\\n    --mount=type=cache,target=/tmp/cache \\\n    composer install --no-dev --no-interaction\n\nFROM php:8.2-apache as final\nRUN docker-php-ext-install pdo pdo_mysql\nRUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"\nCOPY --from=deps app/vendor/ /var/www/html/vendor\nCOPY ./src /var/www/html\nUSER www-data\n```\n\n----------------------------------------\n\nTITLE: Node.js Weather API Implementation\nDESCRIPTION: Node.js code that handles environment configuration and implements the weather API client. It's designed to work with both WireMock for development and the actual AccuWeather API for production.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nrequire(\"dotenv\").config();\n\nconst express = require(\"express\");\nconst axios = require(\"axios\");\n\nconst router = express.Router();\nconst API_ENDPOINT_BASE = process.env.API_ENDPOINT_BASE;\nconst API_KEY = process.env.ACCUWEATHER_API_KEY;\n\nconsole.log('API_ENDPOINT_BASE:', API_ENDPOINT_BASE);  // Log after it's defined\nconsole.log('ACCUWEATHER_API_KEY is set:', !!API_KEY); // Log boolean instead of actual key\n\nif (!API_ENDPOINT_BASE) {\n  throw new Error(\"API_ENDPOINT_BASE is not defined in environment variables\");\n}\n\n// Only check for API key if not using WireMock\nif (API_ENDPOINT_BASE !== 'http://localhost:8080' && !API_KEY) {\n  throw new Error(\"ACCUWEATHER_API_KEY is not defined in environment variables\");\n}\n// Function to fetch the location key for the city\nasync function fetchLocationKey(townName) {\n  const { data: locationData } = await\naxios.get(`${API_ENDPOINT_BASE}/locations/v1/cities/search`, {\n    params: { q: townName, details: false, apikey: API_KEY },\n  });\n  return locationData[0]?.Key;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Host Commands in TypeScript\nDESCRIPTION: Shows how to execute binaries defined in the host section of the extension metadata using the DockerDesktopClient interface. This method is deprecated and will be replaced with exec in the future.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/DockerDesktopClient.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.execHostCmd(`cliShippedOnHost xxx`).then((cmdResult: any) => {\n console.log(cmdResult);\n});\n```\n\n----------------------------------------\n\nTITLE: Verifying Storage Driver Configuration\nDESCRIPTION: Command output showing Docker configuration info including storage driver details\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/overlayfs-driver.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker info\n\nContainers: 0\nImages: 0\nStorage Driver: overlay2\n Backing Filesystem: xfs\n Supports d_type: true\n Native Overlay Diff: true\n<...>\n```\n\n----------------------------------------\n\nTITLE: Executing Command in Container with Docker Extension API\nDESCRIPTION: Demonstrates how to execute a command inside a container using the Docker Extension API. This method is marked for deprecation in future versions.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/BackendV0.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await window.ddClient.backend.execInContainer(container, cmd);\n\nconsole.log(output);\n```\n\n----------------------------------------\n\nTITLE: Listing Buildx Builders with Multiple Architecture Nodes\nDESCRIPTION: Example output of the docker buildx ls command showing a Kubernetes builder with both AMD64 and ARM64 architecture nodes configured for native builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx ls\nNAME/NODE       DRIVER/ENDPOINT                                         STATUS   PLATFORMS\nkube            kubernetes\n  builder-amd64 kubernetes:///kube?deployment=builder-amd64&kubeconfig= running  linux/amd64*, linux/amd64/v2, linux/amd64/v3, linux/386\n  builder-arm64 kubernetes:///kube?deployment=builder-arm64&kubeconfig= running  linux/arm64*\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Buildx Builder Disk Usage\nDESCRIPTION: Shows disk usage statistics for a specific builder using docker buildx du command with --builder flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/manage.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx du --builder my_builder\nID                                        RECLAIMABLE SIZE        LAST ACCESSED\nolkri5gq6zsh8q2819i69aq6l                 true        797.2MB     37 seconds ago\n6km4kasxgsywxkm6cxybdumbb*                true        438.5MB     36 seconds ago\nqh3wwwda7gx2s5u4hsk0kp4w7                 true        213.8MB     37 seconds ago\n54qq1egqem8max3lxq6180cj8                 true        200.2MB     37 seconds ago\nndlp969ku0950bmrw9muolw0c*                true        116.7MB     37 seconds ago\nu52rcsnfd1brwc0chwsesb3io*                true        116.7MB     37 seconds ago\nrzoeay0s4nmss8ub59z6lwj7d                 true        46.25MB     4 minutes ago\nitk1iibhmv7awmidiwbef633q                 true        33.33MB     37 seconds ago\n4p78yqnbmgt6xhcxqitdieeln                 true        19.46MB     4 minutes ago\ndgkjvv4ay0szmr9bl7ynla7fy*                true        19.24MB     36 seconds ago\ntuep198kmcw299qc9e4d1a8q2                 true        8.663MB     4 minutes ago\nn1wzhauk9rpmt6ib1es7dktvj                 true        20.7kB      4 minutes ago\n0a2xfhinvndki99y69157udlm                 true        16.56kB     37 seconds ago\ngf0z1ypz54npfererqfeyhinn                 true        16.38kB     37 seconds ago\nnz505f12cnsu739dw2pw0q78c                 true        8.192kB     37 seconds ago\nhwpcyq5hdfvioltmkxu7fzwhb*                true        8.192kB     37 seconds ago\nacekq89snc7j6im1rjdizvsg1*                true        8.192kB     37 seconds ago\nReclaimable:  2.01GB\nTotal:        2.01GB\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Compose Resources\nDESCRIPTION: Command to stop and remove containers, networks, and optionally volumes created by Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-docker-compose.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Compose Bridge Conversion\nDESCRIPTION: Example output showing all the Kubernetes resources created when converting a Compose file using compose-bridge.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/usage.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ compose-bridge convert -f compose.yaml \nKubernetes resource api-deployment.yaml created\nKubernetes resource db-deployment.yaml created\nKubernetes resource web-deployment.yaml created\nKubernetes resource api-expose.yaml created\nKubernetes resource db-expose.yaml created\nKubernetes resource web-expose.yaml created\nKubernetes resource 0-avatars-namespace.yaml created\nKubernetes resource default-network-policy.yaml created\nKubernetes resource private-network-policy.yaml created\nKubernetes resource public-network-policy.yaml created\nKubernetes resource db-db_data-persistentVolumeClaim.yaml created\nKubernetes resource api-service.yaml created\nKubernetes resource web-service.yaml created\nKubernetes resource kustomization.yaml created\nKubernetes resource db-db_data-persistentVolumeClaim.yaml created\nKubernetes resource api-service.yaml created\nKubernetes resource web-service.yaml created\nKubernetes resource kustomization.yaml created\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Buildx Prune Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the Docker Buildx prune command documentation page. It specifies the data folder, file name, title, layout, and URL aliases for the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/prune.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx_prune\ntitle: docker buildx prune\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_prune/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Docker Documentation Page\nDESCRIPTION: This YAML snippet defines the frontmatter for a documentation page about managing Docker. It sets the build rendering option, title, and navigation weight.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Manage\nweight: 30\n---\n```\n\n----------------------------------------\n\nTITLE: Docker Build Output with Cache Utilization\nDESCRIPTION: Terminal output showing a successful Docker build with effective cache utilization. The build process completes quickly by leveraging previously cached layers, resulting in faster build times and more efficient image creation.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/using-the-build-cache.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n=> [5/5] COPY . .                                                                                 0.5s \n=> exporting to image                                                                             0.3s\n=> => exporting layers                                                                            0.3s\n=> => writing image     \nsha256:91790c87bcb096a83c2bd4eb512bc8b134c757cda0bdee4038187f98148e2eda       0.0s\n=> => naming to docker.io/library/node-app:3.0                                                 0.0s\n```\n\n----------------------------------------\n\nTITLE: Navigating to Containers View in TypeScript\nDESCRIPTION: Uses the desktopUI.navigate.viewContainers() method to navigate to the Containers tab in Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/NavigationIntents.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.desktopUI.navigate.viewContainers()\n```\n\n----------------------------------------\n\nTITLE: Cloning the Python Sample Application\nDESCRIPTION: Command to clone the FastAPI sample application repository and navigate into the project directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/estebanx64/python-docker-example && cd python-docker-example\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Docker Containers from an Image\nDESCRIPTION: This bash command runs five Docker containers based on the 'acme/my-final-image:1.0' image. Each container is run in detached mode with a unique name.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -dit --name my_container_1 acme/my-final-image:1.0 bash \\\n  && docker run -dit --name my_container_2 acme/my-final-image:1.0 bash \\\n  && docker run -dit --name my_container_3 acme/my-final-image:1.0 bash \\\n  && docker run -dit --name my_container_4 acme/my-final-image:1.0 bash \\\n  && docker run -dit --name my_container_5 acme/my-final-image:1.0 bash\n```\n\n----------------------------------------\n\nTITLE: Base Dockerfile for Service A\nDESCRIPTION: This is the Dockerfile for service A which will be used as a base image for other services. It uses Alpine and installs OpenSSL as a dependency.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/dependent-images.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nRUN /bin/sh -c apk add --update --no-cache openssl\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Unix Socket Builder\nDESCRIPTION: Command to create a Buildx builder that connects to a BuildKit daemon through a Unix socket.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/remote.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create \\\n  --name remote-unix \\\n  --driver remote \\\n  unix://$HOME/buildkitd.sock\n```\n\n----------------------------------------\n\nTITLE: Running Nginx Container in Project Harmonia Cloud Engine\nDESCRIPTION: This command runs an Nginx container in the cloud engine, mapping port 80 to 8080. It demonstrates how to deploy a web server in the cloud environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name cloudnginx -p 8080:80 nginx\n```\n\n----------------------------------------\n\nTITLE: Retrieving Logs for TTY-Enabled Containers\nDESCRIPTION: Command to correctly retrieve logs for containers with TTY enabled, using the --all flag to handle carriage returns properly.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/journald.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo journalctl -b CONTAINER_NAME=webserver --all\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker CLI Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker manifest push command documentation page, including the data folder, file name, title and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/manifest/push.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_manifest_push\ntitle: docker manifest push\naliases:\n- /edge/engine/reference/commandline/manifest_push/\n- /engine/reference/commandline/manifest_push/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Unpausing a Container in Docker API\nDESCRIPTION: API call to unpause a previously paused container. This resumes all processes within the specified container.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_31\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/unpause HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Custom Default Network Configuration\nDESCRIPTION: Demonstrates how to customize the default network with a custom name and driver options.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/networks.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  default: \n    name: a_network # Use a custom name\n    driver_opts:    # pass options to driver for network creation\n      com.docker.network.bridge.host_binding_ipv4: 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Testing Network Connectivity Between Containers\nDESCRIPTION: Demonstrates how containers on the same user-defined network can communicate using container names, while those on different networks cannot.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker container attach alpine1\n\n# ping -c 2 alpine2\n\nPING alpine2 (172.18.0.3): 56 data bytes\n64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.085 ms\n64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.090 ms\n\n--- alpine2 ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.085/0.087/0.090 ms\n\n# ping -c 2 alpine4\n\nPING alpine4 (172.18.0.4): 56 data bytes\n64 bytes from 172.18.0.4: seq=0 ttl=64 time=0.076 ms\n64 bytes from 172.18.0.4: seq=1 ttl=64 time=0.091 ms\n\n--- alpine4 ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.076/0.083/0.091 ms\n\n# ping -c 2 alpine1\n\nPING alpine1 (172.18.0.2): 56 data bytes\n64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.026 ms\n64 bytes from 172.18.0.2: seq=1 ttl=64 time=0.054 ms\n\n--- alpine1 ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.026/0.040/0.054 ms\n\n# ping -c 2 alpine3\n\nping: bad address 'alpine3'\n\n# ping -c 2 172.17.0.2\n\nPING 172.17.0.2 (172.17.0.2): 56 data bytes\n\n--- 172.17.0.2 ping statistics ---\n```\n\n----------------------------------------\n\nTITLE: Overriding Build Command with Custom Arguments in Bash\nDESCRIPTION: This Bash snippet demonstrates how to override the default build command in a hooks/build file. It uses docker build with custom build arguments, referencing environment variables set in Docker Hub.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/builds/advanced.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg CUSTOM=$VAR -f $DOCKERFILE_PATH -t $IMAGE_NAME .\n```\n\n----------------------------------------\n\nTITLE: Making Docker Scout Binary Executable on macOS\nDESCRIPTION: Commands to make the Docker Scout binary executable on macOS, including setting permissions and removing macOS quarantine attributes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/install.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ chmod +x $HOME/.docker/scout/docker-scout\n```\n\nLANGUAGE: console\nCODE:\n```\nxattr -d com.apple.quarantine $HOME/.docker/scout/docker-scout.\n```\n\n----------------------------------------\n\nTITLE: Container Archive Retrieval Example\nDESCRIPTION: HTTP request and response for getting a tar archive of a resource from a container's filesystem.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_35\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/containers/8cce319429b2/archive?path=/root HTTP/1.1\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"root\",\n    \"size\": 4096,\n    \"mode\": 2147484096,\n    \"mtime\": \"2014-02-27T20:51:23Z\",\n    \"linkTarget\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing the Initial Vulnerable Image\nDESCRIPTION: Docker command to build an image from the demo service and push it to Docker Hub with the tag v1.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --push -t <ORG_NAME>/scout-demo:v1 .\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image for NLP Application\nDESCRIPTION: Command to build a Docker image named 'basic-nlp' from a Dockerfile in the current directory. This creates a container image with all necessary dependencies for the NLP application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t basic-nlp .\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Comment for Source Code Reference\nDESCRIPTION: This HTML comment provides information about the automatic generation of the page from Docker's source code and instructions for suggesting changes to the text.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/system/df.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Docker Scout Integration Command Reference Table\nDESCRIPTION: Markdown table showing available Docker Scout integration subcommands and their descriptions, including configure, delete, and list operations.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_integration.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                          | Description                                         |\n|:----------------------------------------------|:----------------------------------------------------|\n| [`configure`](scout_integration_configure.md) | Configure or update a new integration configuration |\n| [`delete`](scout_integration_delete.md)       | Delete a new integration configuration              |\n| [`list`](scout_integration_list.md)           | Integration Docker Scout                            |\n```\n\n----------------------------------------\n\nTITLE: Attaching to Docker Container and Testing Network Connectivity\nDESCRIPTION: This snippet demonstrates attaching to the alpine4 container and testing network connectivity to other containers on the same and different networks using ping commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ docker container attach alpine4\n\n# ping -c 2 alpine1\n\nPING alpine1 (172.18.0.2): 56 data bytes\n64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.074 ms\n64 bytes from 172.18.0.2: seq=1 ttl=64 time=0.082 ms\n\n--- alpine1 ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.074/0.078/0.082 ms\n\n# ping -c 2 alpine2\n\nPING alpine2 (172.18.0.3): 56 data bytes\n64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.075 ms\n64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.080 ms\n\n--- alpine2 ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.075/0.077/0.080 ms\n\n# ping -c 2 alpine3\nping: bad address 'alpine3'\n\n# ping -c 2 172.17.0.2\n\nPING 172.17.0.2 (172.17.0.2): 56 data bytes\n64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.089 ms\n64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.075 ms\n\n--- 172.17.0.2 ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.075/0.082/0.089 ms\n\n# ping -c 2 alpine4\n\nPING alpine4 (172.18.0.4): 56 data bytes\n64 bytes from 172.18.0.4: seq=0 ttl=64 time=0.033 ms\n64 bytes from 172.18.0.4: seq=1 ttl=64 time=0.064 ms\n\n--- alpine4 ping statistics ---\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max = 0.033/0.048/0.064 ms\n```\n\n----------------------------------------\n\nTITLE: Using Built-in HCL Functions in Docker Bake\nDESCRIPTION: Demonstrates the usage of built-in go-cty standard library functions in a Bake configuration file. Shows how to use the 'add' function to manipulate build arguments.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/funcs.md#2025-04-11_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"TAG\" {\n  default = \"latest\"\n}\n\ngroup \"default\" {\n  targets = [\"webapp\"]\n}\n\ntarget \"webapp\" {\n  args = {\n    buildno = \"${add(123, 1)}\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\"webapp\"]\n    }\n  },\n  \"target\": {\n    \"webapp\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile\",\n      \"args\": {\n        \"buildno\": \"124\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Service with gMSA Credential Spec in Docker Swarm\nDESCRIPTION: Creates a service that uses a gMSA credential specification stored as a Docker config for Windows containers, enabling Active Directory authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --credential-spec=\"config://credspec\" <your image>\n```\n\n----------------------------------------\n\nTITLE: Pushing Container Volume as OCI Artifact\nDESCRIPTION: Commands to create and push a container volume as an OCI artifact to Docker Hub using ORAS CLI version 0.15 or later.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/hub-images/oci-artifacts.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ touch myvolume.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ oras login -u hubuser registry-1.docker.io\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ oras push registry-1.docker.io/docker/demo:0.0.1 \\\n     --artifact-type=application/vnd.docker.volume.v1+tar.gz \\\n     myvolume.txt:text/plain\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Docker Compose Version Check\nDESCRIPTION: The expected output from the Docker Compose version check command, displaying the version number.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nDocker Compose version vN.N.N\n```\n\n----------------------------------------\n\nTITLE: Making a Simple View Change in Rails\nDESCRIPTION: Example of a change to a Rails view file that will be automatically detected by Compose Watch, triggering a rebuild of the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/develop.md#2025-04-11_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-    <h1>Whales</h1>\n+    <h1>Whales!</h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Network Options in daemon.json for Docker\nDESCRIPTION: This JSON snippet demonstrates how to set default network options for the bridge driver in the Docker daemon.json configuration file. It specifies the host binding IPv4 address and MTU value.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-network-opts\": {\n    \"bridge\": {\n      \"com.docker.network.bridge.host_binding_ipv4\": \"127.0.0.1\",\n      \"com.docker.network.driver.mtu\": \"1234\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Swarm Service Status\nDESCRIPTION: Example output showing the status of a running Docker Swarm service.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/orchestration.md#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS\n463j2s3y4b5o        demo.1              alpine:latest       docker-desktop      Running             Running 8 seconds ago\n```\n\n----------------------------------------\n\nTITLE: Listing Available Docker Buildx Builders\nDESCRIPTION: Example output of the docker buildx ls command showing available builders including a Kubernetes driver-based builder and the default Docker builder.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx ls\nNAME/NODE                DRIVER/ENDPOINT STATUS  PLATFORMS\nkube                     kubernetes\n  kube0-6977cdcb75-k9h9m                 running linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386\ndefault *                docker\n  default                default         running linux/amd64, linux/386\n```\n\n----------------------------------------\n\nTITLE: Formatting Remote Shell Commands in Code Blocks\nDESCRIPTION: Shows the proper format for displaying remote shell commands by adding the context of the remote machine and excluding the path.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/style/formatting.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`user@host $`\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Image History\nDESCRIPTION: This command displays the history of a Docker image, showing how it was built layer by layer. It's useful for understanding the image's composition and build process.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker image history mobywhale/concepts-build-image-demo\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: This console command lists the Docker images, showing their repository, tag, image ID, creation time, and size.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker image ls\n```\n\n----------------------------------------\n\nTITLE: Docker Container Host Network and PID Sharing Commands\nDESCRIPTION: Commands showing incompatible Docker features when running with user namespaces enabled, specifically for sharing PID or network namespaces with the host.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/userns-remap.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n--pid=host\n```\n\nLANGUAGE: bash\nCODE:\n```\n--network=host\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --privileged --userns=host\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Swarm Service Tasks\nDESCRIPTION: This command shows the tasks (containers) running for a specific service, including their ID, name, image, node, and current state.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_42\n\nLANGUAGE: console\nCODE:\n```\n$ docker service ps va8ew30grofhjoychbr6iot8c\n\nID            NAME         IMAGE                                                                                   NODE          DESIRED STATE  CURRENT STATE               ERROR  PORTS\nwo41w8hg8qan  hosttempl.1  busybox:latest@sha256:29f5d56d12684887bdfa50dcd29fc31eea4aaf4ad3bec43daf19026a7ce69912  2e7a8a9c4da2  Running        Running about a minute ago\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Engine API v1.25 Documentation\nDESCRIPTION: YAML front matter defining the title, link title, and aliases for the Docker Engine API v1.25 reference documentation. This metadata is used by documentation systems to properly categorize and link to this page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.25.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Docker Engine API v1.25 reference\nlinkTitle: v1.25\naliases:\n- /engine/api/v1.25/\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying IP Addresses in a Container with None Network Driver\nDESCRIPTION: This snippet shows the output of 'ip addr show' command in an Alpine container using the 'none' network driver. It demonstrates that only the IPv4 loopback address is configured, and no IPv6 loopback address is present.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/none.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm --network none --name no-net-alpine alpine:latest ip addr show\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n```\n\n----------------------------------------\n\nTITLE: Creating a Symbolic Link for Docker Compose on Linux\nDESCRIPTION: Optional command to create a symbolic link to Docker Compose in /usr/bin directory for easier access if the original installation location is not in the system PATH.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/standalone.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Creating a SQL Seed Script for PostgreSQL\nDESCRIPTION: SQL script that creates a users table with a primary key and unique email constraint, then inserts sample user data while handling conflicts.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS users (\n id SERIAL PRIMARY KEY,\n name VARCHAR(50),\n email VARCHAR(100) UNIQUE\n);\n\nINSERT INTO users (name, email) VALUES\n ('Alpha', 'alpha@example.com'),\n ('Beta', 'beta@example.com'),\n ('Gamma', 'gamma@example.com')\nON CONFLICT (email) DO NOTHING;\n```\n\n----------------------------------------\n\nTITLE: Include Multiple Files with Path Property (YAML)\nDESCRIPTION: Demonstrates how to include and merge multiple Compose files using the path property in the long syntax, useful when overriding values from a base configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/include.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n   - path:\n       - ../commons/compose.yaml\n       - ./commons-override.yaml\n```\n\n----------------------------------------\n\nTITLE: Mock API Response Format\nDESCRIPTION: Example of the JSON response returned by the WireMock server for a weather data request.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n{\"city\":\"Bengaluru\",\"temperature\":27.1,\"conditions\":\"Mostly cloudy\",\"forecasts\":[{\"date\":\"2024-09-02T07:00:00+05:30\",\"temperature\":83,\"conditions\":\"Partly sunny w/ t-storms\"},{\"date\":\"2024-09-03T07:00:00+05:30\",\"temperature\":83,\"conditions\":\"Thunderstorms\"},{\"date\":\"2024-09-04T07:00:00+05:30\",\"temperature\":83,\"conditions\":\"Intermittent clouds\"},{\"date\":\"2024-09-05T07:00:00+05:30\",\"temperature\":82,\"conditions\":\"Dreary\"},{\"date\":\"2024-09-06T07:00:00+05:30\",\"temperature\":82,\"conditions\":\"Dreary\"}]}\n```\n\n----------------------------------------\n\nTITLE: Generating GPG Key for Docker Desktop on Linux\nDESCRIPTION: Commands to generate a GPG key required for initializing pass credential storage before signing in to Docker Desktop on Linux.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/sign-in.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ gpg --generate-key\n```\n\n----------------------------------------\n\nTITLE: Defining Named Contexts in Docker Bake HCL Configuration\nDESCRIPTION: Example showing how to define named contexts in a Docker Bake HCL configuration file. The configuration creates an 'app' target with a 'docs' context that points to a local directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  contexts = {\n    docs = \"./docs\"\n  }\n}\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --build-context docs=./docs .\n```\n\n----------------------------------------\n\nTITLE: Running .NET Tests with Docker Compose\nDESCRIPTION: Command to execute .NET tests inside a container using Docker Compose. This approach is suitable for local development testing.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/run-tests.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run --build --rm server dotnet test /source/tests\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Scout Environment Integration in Azure DevOps\nDESCRIPTION: An Azure DevOps pipeline configuration that runs Docker Scout CLI in a container to record environment information. It sets up variables for the Docker image and tag, then executes the environment command with the appropriate organization and environment parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/environment/cli.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n  - main\n\nresources:\n  - repo: self\n\nvariables:\n  tag: \"$(Build.BuildId)\"\n  image: \"namespace/repo\"\n\nstages:\n  - stage: Docker Scout\n    displayName: Docker Scout environment integration\n    jobs:\n      - job: Record\n        displayName: Record environment\n        pool:\n          vmImage: ubuntu-latest\n        steps:\n          - task: Docker@2\n          - script: docker run -it \\\n              -e DOCKER_SCOUT_HUB_USER=$DOCKER_SCOUT_HUB_USER \\\n              -e DOCKER_SCOUT_HUB_PASSWORD=$DOCKER_SCOUT_HUB_PASSWORD \\\n              docker/scout-cli:1.0.2 environment \\\n              --org \"<MY_DOCKER_ORG>\" \\\n              \"<ENVIRONMENT>\" $(image):$(tag)\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with Python SDK\nDESCRIPTION: Concise example of using the Docker Python SDK to run an Alpine container that echoes a message.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport docker\nclient = docker.from_env()\nprint(client.containers.run(\"alpine\", [\"echo\", \"hello\", \"world\"]))\n```\n\n----------------------------------------\n\nTITLE: Resizing Devicemapper Data File in Bash\nDESCRIPTION: This snippet demonstrates how to increase the size of the data file to 200G using the 'truncate' command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo truncate -s 200G /var/lib/docker/devicemapper/data\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Builder with Node Selector and Tolerations\nDESCRIPTION: This command creates a Kubernetes builder with node selector and tolerations options for controlling pod scheduling.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx create \\\n  --bootstrap \\\n  --name=kube \\\n  --driver=kubernetes \\\n  '--driver-opt=\"nodeselector=label1=value1,label2=value2\",\"tolerations=key=key1,value=value1\"'\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Stack CLI Documentation\nDESCRIPTION: YAML front matter block defining metadata for the Docker stack config documentation page, including data folder locations, aliases, and layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/stack/config.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_stack_config\naliases:\n- /engine/reference/commandline/stack_config\ntitle: docker stack config\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Configuring External Links in Docker Compose\nDESCRIPTION: Example of external_links configuration which connects service containers to services managed outside the Compose application. Aliases can be specified using SERVICE:ALIAS format.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nexternal_links:\n  - redis\n  - database:mysql\n  - database:postgresql\n```\n\n----------------------------------------\n\nTITLE: Configuring endpoint_mode in Compose Deploy\nDESCRIPTION: Demonstrates how to configure service discovery using the endpoint_mode attribute, which determines how external clients connect to a service. This example uses 'vip' mode which assigns a virtual IP to the service.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    ports:\n      - \"8080:80\"\n    deploy:\n      mode: replicated\n      replicas: 2\n      endpoint_mode: vip\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker to Recognize Scout Plugin (macOS)\nDESCRIPTION: JSON configuration to add the scout subdirectory to Docker's config.json as a plugin directory on macOS. This enables Docker to find and use the Scout plugin.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/install.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cliPluginsExtraDirs\": [\n    \"/Users/<USER>/.docker/scout\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Network Creation HTTP Response\nDESCRIPTION: Response from a successful network creation request showing the ID of the newly created network and any warnings that might have occurred during creation.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_76\n\nLANGUAGE: json\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Type: application/json\n\n{\n  \"Id\": \"22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30\",\n  \"Warning\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker container links\nDESCRIPTION: Uses docker inspect with a format flag to specifically examine the links established for the 'web' container, showing its link to the 'db' container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect -f \"{{ .HostConfig.Links }}\" web\n\n[/db:/web/db]\n```\n\n----------------------------------------\n\nTITLE: Displaying 500 Response Code Error Message in Docker CLI\nDESCRIPTION: This snippet shows the error message displayed when there is a temporary Docker Hub service issue. It indicates an unexpected server error with a 500 status code.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/troubleshoot.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nUnexpected status code 500\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Engine Services on Linux\nDESCRIPTION: Command to stop the Docker Engine service and related components to prevent conflicts with Docker Desktop. This is recommended when running Docker Desktop on a system that also has Docker Engine installed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo systemctl stop docker docker.socket containerd\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Cache Sources in Docker Bake\nDESCRIPTION: Shows how to configure cache sources using the cache-from attribute. This example demonstrates importing cache from both S3 and registry backends.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  cache-from = [\n    {\n      type = \"s3\",\n      region = \"eu-west-1\",\n      bucket = \"mybucket\"\n    },\n    {\n      type = \"registry\",\n      ref = \"user/repo:cache\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Project Dependencies\nDESCRIPTION: Uses yarn to install the dependencies for the Kafka development Node.js project.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ yarn install\n```\n\n----------------------------------------\n\nTITLE: Cloning Bun Sample Application\nDESCRIPTION: Command to clone the Docker sample Bun application repository and change into its directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dockersamples/bun-docker.git && cd bun-docker\n```\n\n----------------------------------------\n\nTITLE: Setting Default Network Options via Docker CLI\nDESCRIPTION: This command demonstrates how to use the --default-network-opt CLI flag to set default network options when starting the Docker daemon. It specifies options for the bridge driver, including host binding IPv4 and MTU.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dockerd \\\n  --default-network-opt bridge=com.docker.network.bridge.host_binding_ipv4=127.0.0.1 \\\n  --default-network-opt bridge=com.docker.network.driver.mtu=1234\n```\n\n----------------------------------------\n\nTITLE: Example REST API Response\nDESCRIPTION: The JSON response returned by the REST API endpoint when successfully called. The number in parentheses represents a counter of API calls.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_15\n\nLANGUAGE: json\nCODE:\n```\nHello, Docker! (0)\n```\n\n----------------------------------------\n\nTITLE: Loading the Language Model in Python\nDESCRIPTION: Load the small English language model for NLP tasks using spaCy.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nnlp = spacy.load(\"en_core_web_sm\")\n```\n\n----------------------------------------\n\nTITLE: Linking Targets with Named Contexts in Docker Bake\nDESCRIPTION: Example showing how to create build pipelines with Bake by linking targets using named contexts. The configuration defines a 'base' target and an 'app' target, where the 'app' target uses the image produced by the 'base' target.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_19\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM mybaseimage\n```\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"base\" {\n  dockerfile = \"base.Dockerfile\"\n}\n\ntarget \"app\" {\n  dockerfile = \"app.Dockerfile\"\n  contexts = {\n    # the target: prefix indicates that 'base' is a Bake target\n    mybaseimage = \"target:base\"\n  }\n}\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake app\n```\n\n----------------------------------------\n\nTITLE: Insecure Pattern in Dockerfile: Using Secret in ARG\nDESCRIPTION: Example of an insecure Dockerfile that uses AWS_SECRET_ACCESS_KEY as an ARG, which is flagged as a security risk since secrets persist in the final image.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/secrets-used-in-arg-or-env.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM scratch\nARG AWS_SECRET_ACCESS_KEY\n```\n\n----------------------------------------\n\nTITLE: Docker Release Notes Structure\nDESCRIPTION: Markdown formatted release notes detailing changes across different Docker components including bug fixes, new features, and improvements. The notes are organized by component categories and include references to relevant pull requests.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/18.01.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 18.01.0-ce\n2018-01-10\n\n### Builder\n\n* Fix files not being deleted if user-namespaces are enabled [moby/moby#35822]\n- Add support for expanding environment-variables in `docker commit --change ...` [moby/moby#35582]\n\n### Client\n\n* Return errors from client in stack deploy configs [docker/cli#757]\n- Fix description of filter flag in prune commands [docker/cli#774]\n+ Add \"pid\" to unsupported options list [docker/cli#768]\n+ Add support for experimental Cli configuration [docker/cli#758]\n+ Add support for generic resources to bash completion [docker/cli#749]\n- Fix error in zsh completion script for docker exec [docker/cli#751]\n+ Add a debug message when client closes websocket attach connection [moby/moby#35720]\n- Fix bash completion for `\"docker swarm\"` [docker/cli#772]\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Kill Command Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker container kill command documentation page, including the data folder location, file name, page title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/kill.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_container_kill\ntitle: docker container kill\naliases:\n- /edge/engine/reference/commandline/container_kill/\n- /engine/reference/commandline/container_kill/\n- /engine/reference/commandline/kill/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Compose Resources Including Volumes\nDESCRIPTION: Command to stop and remove containers, networks, and volumes created by Docker Compose, ensuring complete cleanup including persistent data.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-docker-compose.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a Container from a Network with HTTP POST Request\nDESCRIPTION: Demonstrates how to disconnect a container from a network with an optional force flag that can be used to forcibly disconnect a container even if it's in a non-responsive state.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_79\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/networks/22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30/disconnect HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Container\":\"3613f73ba0e4\",\n  \"Force\":false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Node to Drain Availability in Docker Swarm\nDESCRIPTION: Updates a node's availability to Drain status, preventing it from receiving new tasks and causing existing tasks to be rescheduled to other active nodes. Used for planned maintenance scenarios.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/drain-node.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker node update --availability drain worker1\n```\n\n----------------------------------------\n\nTITLE: Viewing Detailed WordPress Service Status in Docker Swarm\nDESCRIPTION: Shows detailed information about the WordPress service tasks, including their state, location, and runtime status.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndocker service ps wordpress\n```\n\n----------------------------------------\n\nTITLE: Configuring Advertise Address for Docker Swarm\nDESCRIPTION: This command initializes a Docker swarm with a specific advertise address. It's used when the system has multiple IP addresses or when the manager node needs to be accessed on a specific address.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-mode.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm init --advertise-addr <MANAGER-IP>\n```\n\n----------------------------------------\n\nTITLE: Downloading NLTK Resources\nDESCRIPTION: Commands to download required NLTK resources including vader_lexicon for sentiment analysis and punkt for tokenization.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnltk.download('vader_lexicon')\nnltk.download('punkt')\n```\n\n----------------------------------------\n\nTITLE: Running a Container on a Custom Network\nDESCRIPTION: This command runs a busybox container with the 'top' command and connects it to the previously created 'mynet' network. The network is managed by the plugin specified during network creation.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_network.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --network=mynet busybox top\n```\n\n----------------------------------------\n\nTITLE: Creating Network for Application-Database Communication\nDESCRIPTION: Creates a user-defined bridge network that allows the application and database to communicate via DNS lookup.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create postgresnet\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Extension with CLI Command\nDESCRIPTION: Uses the docker extension init command to set up a new extension directory. This command generates boilerplate files for a Docker extension including a Go backend and React frontend.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/quickstart.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension init <my-extension>\n```\n\n----------------------------------------\n\nTITLE: Directory contents listing\nDESCRIPTION: Shows the files present in the sample project directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/multistage.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDockerfile  hello.cpp\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Stage Names\nDESCRIPTION: Example showing correct usage of a non-reserved word 'builder' as a stage name in Dockerfile\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/reserved-stage-name.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine AS builder\n```\n\n----------------------------------------\n\nTITLE: Configuring Cgroup Driver in Docker Daemon\nDESCRIPTION: Example of how to set the cgroup driver to systemd for all containers. Without this option, cgroupfs is used on cgroup v1 hosts, and systemd is used on cgroup v2 hosts with systemd available.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dockerd --exec-opt native.cgroupdriver=systemd\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Node Builder for Native Multi-Platform Builds\nDESCRIPTION: Creates a multi-node builder by combining Docker contexts for different architectures (amd64 and arm64), then uses it to build images for multiple platforms without emulation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create --use --name mybuild node-amd64\nmybuild\n$ docker buildx create --append --name mybuild node-arm64\n$ docker buildx build --platform linux/amd64,linux/arm64 .\n```\n\n----------------------------------------\n\nTITLE: Inspecting multi-architecture Docker image manifests\nDESCRIPTION: Command to inspect the manifest of a Docker image to verify that it is available for multiple architectures using docker buildx imagetools.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/multi-arch.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx imagetools inspect username/my-extension:0.0.1\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Deployment Status\nDESCRIPTION: Commands to verify the deployment status and service configuration in Kubernetes, showing the running deployment and exposed service ports.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/deploy.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get deployments\n```\n\nLANGUAGE: shell\nCODE:\n```\nNAME                 READY   UP-TO-DATE   AVAILABLE    AGE\ndocker-bun-demo       1/1     1            1           10s\n```\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get services\n```\n\nLANGUAGE: shell\nCODE:\n```\nNAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\nkubernetes           ClusterIP   10.96.0.1        <none>        443/TCP          88m\nservice-entrypoint   NodePort    10.105.145.223   <none>        3000:30001/TCP   83s\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Build Argument Scoping in Multi-stage Builds\nDESCRIPTION: This Dockerfile illustrates how build arguments are scoped in multi-stage builds and how to properly inherit them across stages.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine AS base\n# Declare the build argument in the build stage\nARG NAME=\"joe\"\n\n# Create a new stage based on \"base\"\nFROM base AS build\n# The NAME build argument is available here\n# since it's declared in a parent stage\nRUN echo \"hello $NAME!\"\n```\n\n----------------------------------------\n\nTITLE: Sample SBOM Attestation JSON Structure\nDESCRIPTION: Complete example of an SBOM attestation document showing package dependencies, licensing, and relationship metadata. The attestation follows the in-toto Statement v0.1 format and includes SPDX v2.2 predicate data with detailed package information including CPE and PURL references.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/sbom.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_type\": \"https://in-toto.io/Statement/v0.1\",\n  \"predicateType\": \"https://spdx.dev/Document\",\n  \"subject\": [\n    {\n      \"name\": \"pkg:docker/<registry>/<image>@<tag/digest>?platform=<platform>\",\n      \"digest\": {\n        \"sha256\": \"e8275b2b76280af67e26f068e5d585eb905f8dfd2f1918b3229db98133cb4862\"\n      }\n    }\n  ],\n  \"predicate\": {\n    \"SPDXID\": \"SPDXRef-DOCUMENT\",\n    \"creationInfo\": {\n      \"created\": \"2022-12-16T15:27:25.517047753Z\",\n      \"creators\": [\"Organization: Anchore, Inc\", \"Tool: syft-v0.60.3\"],\n      \"licenseListVersion\": \"3.18\"\n    },\n    \"dataLicense\": \"CC0-1.0\",\n    \"documentNamespace\": \"https://anchore.com/syft/dir/run/src/core/sbom-cba61a72-fa95-4b60-b63f-03169eac25ca\",\n    \"name\": \"/run/src/core/sbom\",\n    \"packages\": [\n      {\n        \"SPDXID\": \"SPDXRef-b074348b8f56ea64\",\n        \"downloadLocation\": \"NOASSERTION\",\n        \"externalRefs\": [\n          {\n            \"referenceCategory\": \"SECURITY\",\n            \"referenceLocator\": \"cpe:2.3:a:org:repo:\\\\(devel\\\\):*:*:*:*:*:*:*\",\n            \"referenceType\": \"cpe23Type\"\n          },\n          {\n            \"referenceCategory\": \"PACKAGE_MANAGER\",\n            \"referenceLocator\": \"pkg:golang/github.com/org/repo@(devel)\",\n            \"referenceType\": \"purl\"\n          }\n        ],\n        \"filesAnalyzed\": false,\n        \"licenseConcluded\": \"NONE\",\n        \"licenseDeclared\": \"NONE\",\n        \"name\": \"github.com/org/repo\",\n        \"sourceInfo\": \"acquired package info from go module information: bin/server\",\n        \"versionInfo\": \"(devel)\"\n      },\n      {\n        \"SPDXID\": \"SPDXRef-1b96f57f8fed62d8\",\n        \"checksums\": [\n          {\n            \"algorithm\": \"SHA256\",\n            \"checksumValue\": \"0c13f1f3c1636491f716c2027c301f21f9dbed7c4a2185461ba94e3e58443408\"\n          }\n        ],\n        \"downloadLocation\": \"NOASSERTION\",\n        \"externalRefs\": [\n          {\n            \"referenceCategory\": \"SECURITY\",\n            \"referenceLocator\": \"cpe:2.3:a:go-chi:chi\\\\/v5:v5.0.0:*:*:*:*:*:*:*\",\n            \"referenceType\": \"cpe23Type\"\n          },\n          {\n            \"referenceCategory\": \"SECURITY\",\n            \"referenceLocator\": \"cpe:2.3:a:go_chi:chi\\\\/v5:v5.0.0:*:*:*:*:*:*:*\",\n            \"referenceType\": \"cpe23Type\"\n          },\n          {\n            \"referenceCategory\": \"SECURITY\",\n            \"referenceLocator\": \"cpe:2.3:a:go:chi\\\\/v5:v5.0.0:*:*:*:*:*:*:*\",\n            \"referenceType\": \"cpe23Type\"\n          },\n          {\n            \"referenceCategory\": \"PACKAGE_MANAGER\",\n            \"referenceLocator\": \"pkg:golang/github.com/go-chi/chi/v5@v5.0.0\",\n            \"referenceType\": \"purl\"\n          }\n        ],\n        \"filesAnalyzed\": false,\n        \"licenseConcluded\": \"NONE\",\n        \"licenseDeclared\": \"NONE\",\n        \"name\": \"github.com/go-chi/chi/v5\",\n        \"sourceInfo\": \"acquired package info from go module information: bin/server\",\n        \"versionInfo\": \"v5.0.0\"\n      }\n    ],\n    \"relationships\": [\n      {\n        \"relatedSpdxElement\": \"SPDXRef-1b96f57f8fed62d8\",\n        \"relationshipType\": \"CONTAINS\",\n        \"spdxElementId\": \"SPDXRef-043f7360d3c66bc31ba45388f16423aa58693289126421b71d884145f8837fe1\"\n      },\n      {\n        \"relatedSpdxElement\": \"SPDXRef-b074348b8f56ea64\",\n        \"relationshipType\": \"CONTAINS\",\n        \"spdxElementId\": \"SPDXRef-043f7360d3c66bc31ba45388f16423aa58693289126421b71d884145f8837fe1\"\n      }\n    ],\n    \"spdxVersion\": \"SPDX-2.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings in Docker Client JSON File\nDESCRIPTION: This JSON snippet shows how to set up proxy configurations in the ~/.docker/config.json file. It includes settings for HTTP, HTTPS, and no-proxy rules.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/proxy.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"proxies\": {\n   \"default\": {\n     \"httpProxy\": \"http://proxy.example.com:3128\",\n     \"httpsProxy\": \"https://proxy.example.com:3129\",\n     \"noProxy\": \"*.test.example.com,.example.org,127.0.0.0/8\"\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nginx Container with Custom AppArmor Profile\nDESCRIPTION: Command to run an Nginx container in detached mode with the custom AppArmor profile applied.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/apparmor.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --security-opt \"apparmor=docker-nginx\" \\\n        -p 80:80 -d --name apparmor-nginx nginx\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Images from Personal Repository\nDESCRIPTION: Commands to pull Docker images from your original personal repository. This is the first step in moving images between repositories.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/hub-images/move.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull namespace1/docker101tutorial\n```\n\n----------------------------------------\n\nTITLE: Loading Labels from External Files\nDESCRIPTION: Using label_file to load container labels from external files, supporting both single file and multiple files with precedence rules.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  one:\n    label_file: ./app.labels\n\n  two:\n    label_file:\n      - ./app.labels\n      - ./additional.labels\n```\n\n----------------------------------------\n\nTITLE: Cloning the WireMock Demo Repository\nDESCRIPTION: Command to clone the GitHub repository that contains the WireMock demo application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dockersamples/wiremock-node-docker\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Minimal Docker Image\nDESCRIPTION: These commands show how to build a Docker image from the Dockerfile and run the resulting container. The '--rm' flag is used to automatically remove the container when it exits.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/base-images.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build --tag hello .\n$ docker run --rm hello\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Visualization in JupyterLab\nDESCRIPTION: Python code for loading the Iris dataset using scikit-learn and creating a scatter plot with matplotlib. This demonstrates the pre-installed packages available in the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn import datasets\n\niris = datasets.load_iris()\nimport matplotlib.pyplot as plt\n\n_, ax = plt.subplots()\nscatter = ax.scatter(iris.data[:, 0], iris.data[:, 1], c=iris.target)\nax.set(xlabel=iris.feature_names[0], ylabel=iris.feature_names[1])\n_ = ax.legend(\n   scatter.legend_elements()[0], iris.target_names, loc=\"lower right\", title=\"Classes\"\n)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Run with Linked Service\nDESCRIPTION: Shows how to run a command that interacts with a linked service, in this case opening a PostgreSQL shell.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run db psql -h db -U docker\n```\n\n----------------------------------------\n\nTITLE: Downloading NLTK Resources for Sentiment Analysis\nDESCRIPTION: Code to download the vader_lexicon resource required by NLTK's SentimentIntensityAnalyzer for sentiment analysis.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnltk.download('vader_lexicon')\n```\n\n----------------------------------------\n\nTITLE: Querying Docker Info for Loop File Paths in Bash\nDESCRIPTION: This snippet demonstrates how to use the 'docker info' command to retrieve the file paths for the data and metadata loop files in loop-lvm mode.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ docker info |grep 'loop file'\n\n Data loop file: /var/lib/docker/devicemapper/data\n Metadata loop file: /var/lib/docker/devicemapper/metadata\n```\n\n----------------------------------------\n\nTITLE: Network Disconnect HTTP Response\nDESCRIPTION: Simple OK response indicating the container was successfully disconnected from the specified network.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_80\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\n```\n\n----------------------------------------\n\nTITLE: Running BuildKit in Docker Container\nDESCRIPTION: Command to run a BuildKit daemon in a Docker container with TLS certificates and exposed port.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/remote.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --rm \\\n  --name=remote-buildkitd \\\n  --privileged \\\n  -p 1234:1234 \\\n  -v $PWD/.certs:/etc/buildkit/certs \\\n  moby/buildkit:latest \\\n  --addr tcp://0.0.0.0:1234 \\\n  --tlscacert /etc/buildkit/certs/daemon/ca.pem \\\n  --tlscert /etc/buildkit/certs/daemon/cert.pem \\\n  --tlskey /etc/buildkit/certs/daemon/key.pem\n```\n\n----------------------------------------\n\nTITLE: Cloning the GenAI Sample Repository\nDESCRIPTION: Command to clone the sample generative AI application repository that will be containerized.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/craig-osterhout/docker-genai-sample\n```\n\n----------------------------------------\n\nTITLE: Creating a Macvlan Network in 802.1Q Trunk Bridge Mode\nDESCRIPTION: Creates a Macvlan network using the 802.1Q trunk bridge mode by specifying a parent interface with a dot notation (eth0.50). Docker automatically creates the sub-interface for VLAN tagging.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/macvlan.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create -d macvlan \\\n    --subnet=192.168.50.0/24 \\\n    --gateway=192.168.50.1 \\\n    -o parent=eth0.50 macvlan50\n```\n\n----------------------------------------\n\nTITLE: Docker Container Filtering with Negated Labels\nDESCRIPTION: Shows how to use negated filters with container labels, including both single and multiple negated filter examples.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/filter.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker container prune --filter \"label!=foo\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker container prune --filter \"label!=foo\" --filter \"label!=bar\"\n```\n\n----------------------------------------\n\nTITLE: Running netstat Inside a Container's Network Namespace\nDESCRIPTION: Executes netstat with the interface flag (-i) within a specific container's network namespace. This provides network interface statistics from inside the container's view of the network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/runmetrics.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ip netns exec mycontainer netstat -i\n```\n\n----------------------------------------\n\nTITLE: WSL Update Command\nDESCRIPTION: Command to update WSL to the latest version on Windows.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/limitations.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwsl --update\n```\n\n----------------------------------------\n\nTITLE: Execute Command in Extension Backend Container\nDESCRIPTION: Example of executing a command (ls -l) in the backend container using the current API.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/backend.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.extension.vm.cli.exec(\"ls\", [\"-l\"]);\n```\n\n----------------------------------------\n\nTITLE: Defining Base Dockerfile for Alpine-based Image\nDESCRIPTION: This Dockerfile creates a base image using Alpine Linux and adds the bash package. It uses the docker/dockerfile:1 syntax.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM acme/my-base-image:1.0\nCOPY . /app\nRUN chmod +x /app/hello.sh\nCMD /app/hello.sh\n```\n\n----------------------------------------\n\nTITLE: Attaching USB Device\nDESCRIPTION: Command to attach a specific USB device using USB/IP.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/usbip.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ usbip attach -r host.docker.internal -d 0-0-0\n```\n\n----------------------------------------\n\nTITLE: Default Network Configuration\nDESCRIPTION: Shows implicit default network configuration and its explicit equivalent in Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/networks.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  some-service:\n    image: foo\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  some-service:\n    image: foo\n    networks:\n      default: {}  \nnetworks:\n  default: {}\n```\n\n----------------------------------------\n\nTITLE: Reloading Docker daemon configuration\nDESCRIPTION: Command to reload the Docker daemon configuration after making changes to the configuration file, without restarting the daemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/alternative-runtimes.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# systemctl reload docker\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Storage Driver Configuration\nDESCRIPTION: Command to display Docker information and verify that the AUFS storage driver is being used.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/aufs-driver.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker info\n\n<truncated output>\nStorage Driver: aufs\n Root Dir: /var/lib/docker/aufs\n Backing Filesystem: extfs\n Dirs: 0\n Dirperm1 Supported: true\n<truncated output>\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Compose Create Documentation\nDESCRIPTION: This YAML frontmatter defines metadata for the 'docker compose create' command documentation page. It specifies the data folder, data file, title, aliases for redirects, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/create.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_create\ntitle: docker compose create\naliases:\n- /compose/reference/create/\n- /engine/reference/commandline/compose_create/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker CLI Documentation\nDESCRIPTION: YAML front matter configuration block that defines metadata for the Docker image history command documentation page, including data folder location, file name, page title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/image/history.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_image_history\ntitle: docker image history\naliases:\n- /edge/engine/reference/commandline/image_history/\n- /engine/reference/commandline/image_history/\n- /engine/reference/commandline/history/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Docker Dev Stop Command\nDESCRIPTION: Stops a specified dev environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/dev-cli.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker dev stop DEV_ENV_NAME\n```\n\n----------------------------------------\n\nTITLE: Using Named Contexts in Docker Build\nDESCRIPTION: Demonstrates how to use named contexts to include additional files and directories during the build process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --build-context docs=./docs .\n```\n\n----------------------------------------\n\nTITLE: Piping SBOM from Syft to Docker Scout CLI\nDESCRIPTION: Illustrates how to generate an SBOM using Syft and pipe it directly to Docker Scout for CVE analysis.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/release-notes/cli.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ syft -o json alpine | docker scout cves sbom://\n```\n\n----------------------------------------\n\nTITLE: Inspecting Swarm with GET Request in Docker Swarm API\nDESCRIPTION: API endpoint for retrieving detailed information about the Docker Swarm configuration, including creation time, specs, join tokens, and version information.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_92\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /swarm\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"CreatedAt\" : \"2016-08-15T16:00:20.349727406Z\",\n  \"Spec\" : {\n    \"Dispatcher\" : {\n      \"HeartbeatPeriod\" : 5000000000\n    },\n    \"Orchestration\" : {\n     \"TaskHistoryRetentionLimit\" : 10\n    },\n    \"CAConfig\" : {\n      \"NodeCertExpiry\" : 7776000000000000\n    },\n    \"Raft\" : {\n      \"LogEntriesForSlowFollowers\" : 500,\n      \"HeartbeatTick\" : 1,\n      \"SnapshotInterval\" : 10000,\n      \"ElectionTick\" : 3\n    },\n    \"TaskDefaults\" : {},\n    \"Name\" : \"default\"\n  },\n \"JoinTokens\" : {\n    \"Worker\" : \"SWMTKN-1-1h8aps2yszaiqmz2l3oc5392pgk8e49qhx2aj3nyv0ui0hez2a-6qmn92w6bu3jdvnglku58u11a\",\n    \"Manager\" : \"SWMTKN-1-1h8aps2yszaiqmz2l3oc5392pgk8e49qhx2aj3nyv0ui0hez2a-8llk83c4wm9lwioey2s316r9l\"\n },\n \"ID\" : \"70ilmkj2f6sp2137c753w2nmt\",\n \"UpdatedAt\" : \"2016-08-15T16:32:09.623207604Z\",\n \"Version\" : {\n   \"Index\" : 51\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Plugin from Existing Root Filesystem\nDESCRIPTION: This example demonstrates the basic usage of the 'docker plugin create' command to create a new Docker plugin named 'plugin01:latest' from a plugin directory containing a rootfs and configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/plugin/create.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker plugin create plugin01:latest /path/to/plugin/data\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Wrapper Script Setup\nDESCRIPTION: Dockerfile configuration that sets up the environment for running multiple processes using a wrapper script. Copies necessary process executables and the wrapper script into the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/multi-service_container.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM ubuntu:latest\nCOPY my_first_process my_first_process\nCOPY my_second_process my_second_process\nCOPY my_wrapper_script.sh my_wrapper_script.sh\nCMD ./my_wrapper_script.sh\n```\n\n----------------------------------------\n\nTITLE: Verifying Properly Unset ENV Variables\nDESCRIPTION: Command to verify that an environment variable is properly unset when using the single-layer approach with export and unset in the same RUN instruction.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm test sh -c 'echo $ADMIN_USER'\n\n\n```\n\n----------------------------------------\n\nTITLE: OCI Media Types Configuration\nDESCRIPTION: Example of enabling OCI media types for registry cache backend\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/_index.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=registry,ref=<registry>/<cache-image>,oci-mediatypes=true \\\n  --cache-from type=registry,ref=<registry>/<cache-image> .\n```\n\n----------------------------------------\n\nTITLE: Service Profiles Configuration\nDESCRIPTION: Example of defining service profiles for conditional service startup based on profile activation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_64\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: frontend\n    profiles: [\"frontend\"]\n\n  phpmyadmin:\n    image: phpmyadmin\n    depends_on:\n      - db\n    profiles:\n      - debug\n```\n\n----------------------------------------\n\nTITLE: Setting Base Image in Dockerfile\nDESCRIPTION: Initial Dockerfile instructions that specify the parser directive and base image for the Go application. Uses the official golang:1.19 image as the starting point.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM golang:1.19\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Services via HTTP GET Request\nDESCRIPTION: This snippet demonstrates how to list Docker services using an HTTP GET request to the /services endpoint. It includes an example request and response, showing the structure of service information returned.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_101\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/services HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    \"ID\": \"9mnpnzenvg8p8tdbtq4wvbkcz\",\n    \"Version\": {\n      \"Index\": 19\n    },\n    \"CreatedAt\": \"2016-06-07T21:05:51.880065305Z\",\n    \"UpdatedAt\": \"2016-06-07T21:07:29.962229872Z\",\n    \"Spec\": {\n      \"Name\": \"hopeful_cori\",\n      \"TaskTemplate\": {\n        \"ContainerSpec\": {\n          \"Image\": \"redis\"\n        },\n        \"Resources\": {\n          \"Limits\": {},\n          \"Reservations\": {}\n        },\n        \"RestartPolicy\": {\n          \"Condition\": \"any\",\n          \"MaxAttempts\": 0\n        },\n        \"Placement\": {\n          \"Constraints\": [\n            \"node.role == worker\"\n          ]\n        }\n      },\n      \"Mode\": {\n        \"Replicated\": {\n          \"Replicas\": 1\n        }\n      },\n      \"UpdateConfig\": {\n        \"Parallelism\": 1,\n        \"FailureAction\": \"pause\"\n      },\n      \"EndpointSpec\": {\n        \"Mode\": \"vip\",\n        \"Ports\": [\n          {\n            \"Protocol\": \"tcp\",\n            \"TargetPort\": 6379,\n            \"PublishedPort\": 30001\n          }\n        ]\n      }\n    },\n    \"Endpoint\": {\n      \"Spec\": {\n        \"Mode\": \"vip\",\n        \"Ports\": [\n          {\n            \"Protocol\": \"tcp\",\n            \"TargetPort\": 6379,\n            \"PublishedPort\": 30001\n          }\n        ]\n      },\n      \"Ports\": [\n        {\n          \"Protocol\": \"tcp\",\n          \"TargetPort\": 6379,\n          \"PublishedPort\": 30001\n        }\n      ],\n      \"VirtualIPs\": [\n        {\n          \"NetworkID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n          \"Addr\": \"10.255.0.2/16\"\n        },\n        {\n          \"NetworkID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n          \"Addr\": \"10.255.0.3/16\"\n        }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Simple Node.js Hello World Script\nDESCRIPTION: A basic Node.js script that prints 'Hello world!' to the console, used to test Node.js installation in the Docker container.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/understanding-image-layers.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Hello world!\")\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests with Docker Compose\nDESCRIPTION: Command to execute PHPUnit tests inside a Docker container using Docker Compose during local development.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/run-tests.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run --build --rm server ./vendor/bin/phpunit tests/HelloWorldTest.php\n```\n\n----------------------------------------\n\nTITLE: Duration Specification Format\nDESCRIPTION: Shows the format for specifying duration values in Docker Compose configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/extension.md#2025-04-11_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n  10ms\n  40s\n  1m30s\n  1h5m30s20ms\n```\n\n----------------------------------------\n\nTITLE: Defining a Docker Plugin using JSON Configuration\nDESCRIPTION: This JSON specification defines a Docker plugin with TLS configuration. It includes the plugin name, address endpoint, and optional TLS configuration parameters for secure communication.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugin_api.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Name\": \"plugin-example\",\n  \"Addr\": \"https://example.com/docker/plugin\",\n  \"TLSConfig\": {\n    \"InsecureSkipVerify\": false,\n    \"CAFile\": \"/usr/shared/docker/certs/example-ca.pem\",\n    \"CertFile\": \"/usr/shared/docker/certs/example-cert.pem\",\n    \"KeyFile\": \"/usr/shared/docker/certs/example-key.pem\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ubuntu Container with Bind Mount on Mac/Linux\nDESCRIPTION: This command runs an interactive Ubuntu container with a bind mount that maps the current directory to /src inside the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --mount type=bind,src=\"$(pwd)\",target=/src ubuntu bash\n```\n\n----------------------------------------\n\nTITLE: Verifying Multiple Keys per Delegation\nDESCRIPTION: This command inspects the repository to confirm that the jeff delegation now has multiple Key IDs associated with it after adding a second key to the delegation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust inspect --pretty registry.example.com/admin/demo\n\nNo signatures for registry.example.com/admin/demo\n\n\nList of signers and their keys for registry.example.com/admin/demo\n\nSIGNER              KEYS\njeff                1091060d7bfd, 5570b88df073\n\nAdministrative keys for registry.example.com/admin/demo\n\n  Repository Key:\tb0014f8e4863df2d028095b74efcb05d872c3591de0af06652944e310d96598d\n  Root Key:\t64d147e59e44870311dd2d80b9f7840039115ef3dfa5008127d769a5f657a5d7\n```\n\n----------------------------------------\n\nTITLE: Docker Template Config Commands\nDESCRIPTION: Console commands for creating and using templated configs with Nginx.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker config create --template-driver golang homepage index.html.tmpl\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n     --name hello-template \\\n     --env HELLO=\"Docker\" \\\n     --config source=homepage,target=/usr/share/nginx/html/index.html \\\n     --publish published=3000,target=80 \\\n     nginx:alpine\n```\n\n----------------------------------------\n\nTITLE: Defining VM Service with Direct Image Reference\nDESCRIPTION: Configuration for the VM section using a direct image reference with the ${DESKTOP_PLUGIN_IMAGE} variable, which refers to the image packaging the extension itself.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/architecture/metadata.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"vm\": {\n    \"image\":\"${DESKTOP_PLUGIN_IMAGE}\"\n},\n```\n\n----------------------------------------\n\nTITLE: Building Base Docker Image\nDESCRIPTION: This console command builds the base Docker image using the Dockerfile.base file. It tags the image as acme/my-base-image:1.0.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t acme/my-base-image:1.0 -f Dockerfile.base .\n```\n\n----------------------------------------\n\nTITLE: Suppressing Reboot When Installing Docker Desktop MSI\nDESCRIPTION: Command to install Docker Desktop MSI while preventing automatic system restart. This is useful when the installation process would normally trigger a reboot to complete configuration changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/faq.md#2025-04-11_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /i \"DockerDesktop.msi\" /L*V \".\\msi.log\" /norestart\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Verification for Docker Client\nDESCRIPTION: Examples showing how to enable TLS verification using either the --tlsverify flag or the DOCKER_TLS_VERIFY environment variable.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker --tlsverify ps\n# or\n$ export DOCKER_TLS_VERIFY=1\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Configuring Buildx as Default Docker Build Client\nDESCRIPTION: This command configures Buildx as the default client for all build-related commands in Docker CLI. It updates the Docker CLI configuration file to route all build commands through Buildx.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx install\n```\n\n----------------------------------------\n\nTITLE: Cloning R Docker Development Repository\nDESCRIPTION: Command to clone the sample R application repository that includes logic to connect to a database.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/mfranzon/r-docker-dev.git\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Deployment Status\nDESCRIPTION: Command to check the status of Kubernetes deployments and the expected output showing the C++ application deployment is ready and available.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/deploy.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get deployments\n```\n\nLANGUAGE: shell\nCODE:\n```\nNAME                     READY   UP-TO-DATE   AVAILABLE    AGE\ndocker-c-plus-plus-demo   1/1     1            1           10s\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for PostgreSQL Documentation\nDESCRIPTION: YAML configuration block defining metadata for a documentation page about PostgreSQL Docker samples. Includes title, description, service type and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/postgres.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: PostgreSQL samples\ndescription: Docker samples for PostgreSQL.\nservice: postgresql\naliases:\n- /engine/examples/postgresql_service/\n- /samples/postgresql_service/\n- /samples/postgres/\n```\n\n----------------------------------------\n\nTITLE: Error Message When Model Command is Not Found\nDESCRIPTION: Example error message displayed when the docker model command is not recognized, indicating the plugin is not properly installed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_19\n\nLANGUAGE: text\nCODE:\n```\ndocker: 'model' is not a docker command\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Documentation\nDESCRIPTION: YAML configuration block that defines metadata for a Docker documentation page. Specifies that the page should never be rendered, sets the title to 'Account and admin FAQ', and assigns a weight of 30 for ordering purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/admin/faqs/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  render: never\ntitle: Account and admin FAQ\nweight: 30\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Service RM Documentation\nDESCRIPTION: YAML configuration block defining metadata for the docker service rm command documentation page, including data folder location, data file name, page title, URL aliases, and layout type.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/service/rm.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_service_rm\ntitle: docker service rm\naliases:\n- /edge/engine/reference/commandline/service_rm/\n- /engine/reference/commandline/service_rm/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Verifying registry.json permissions on Linux\nDESCRIPTION: This command checks the file permissions and ownership of registry.json on Linux to ensure it has the expected permissions (-rw-r--r--) and is owned by root.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ls -l /usr/share/docker-desktop/registry/registry.json\n-rw-r--r--  1 root  root  26 Jul 27 22:01 /usr/share/docker-desktop/registry/registry.json\n```\n\n----------------------------------------\n\nTITLE: Exposing Docker API Socket Through TCP with TLS\nDESCRIPTION: Command to expose the Docker API socket through TCP in rootless mode with TLS verification enabled, using environment variables to configure port forwarding.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ DOCKERD_ROOTLESS_ROOTLESSKIT_FLAGS=\"-p 0.0.0.0:2376:2376/tcp\" \\\n  dockerd-rootless.sh \\\n  -H tcp://0.0.0.0:2376 \\\n  --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem\n```\n\n----------------------------------------\n\nTITLE: Starting the Docker Compose Stack\nDESCRIPTION: Command to start the Docker Compose stack to run the WireMock container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Merging Shell Commands in Docker Compose\nDESCRIPTION: Illustrates how shell commands are merged by overriding the value with the latest Compose file, rather than appending.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/merge.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    command: [\"echo\", \"foo\"]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    command: [\"echo\", \"bar\"]\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    command: [\"echo\", \"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Stages in a Multi-stage Dockerfile for Go Applications\nDESCRIPTION: This Dockerfile defines a multi-stage build process for a Go application with a dedicated test stage. It includes stages for building the application, running tests, and creating a lean production image based on distroless.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-tests.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\n# Build the application from source\nFROM golang:1.19 AS build-stage\n\nWORKDIR /app\n\nCOPY go.mod go.sum ./\nRUN go mod download\n\nCOPY *.go ./\n\nRUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping\n\n# Run the tests in the container\nFROM build-stage AS run-test-stage\nRUN go test -v ./...\n\n# Deploy the application binary into a lean image\nFROM gcr.io/distroless/base-debian11 AS build-release-stage\n\nWORKDIR /\n\nCOPY --from=build-stage /docker-gs-ping /docker-gs-ping\n\nEXPOSE 8080\n\nUSER nonroot:nonroot\n\nENTRYPOINT [\"/docker-gs-ping\"]\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Container with Resource Limitations\nDESCRIPTION: This command runs a PostgreSQL container with memory limited to 512MB and CPU usage restricted to half a core (0.5). Resource constraints help prevent containers from consuming excessive host resources.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -e POSTGRES_PASSWORD=secret --memory=\"512m\" --cpus=\".5\" postgres\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command with Log Rotation Example\nDESCRIPTION: Command line example demonstrating how to start a container with log rotation settings. Configures maximum log file size and count.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/json-file.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --log-opt max-size=10m --log-opt max-file=3 alpine ash\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory in Dockerfile\nDESCRIPTION: Establishes the working directory inside the Docker container as /app, ensuring all subsequent commands are executed in this directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_9\n\nLANGUAGE: dockerfile\nCODE:\n```\nWORKDIR /app\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Extension Usage in Docker Compose\nDESCRIPTION: Demonstrates basic usage of custom extensions (x-custom) and how they can be applied within services.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/extension.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nx-custom:\n  foo:\n    - bar\n    - zot\n\nservices:\n  webapp:\n    image: example/webapp\n    x-foo: bar\n```\n\n----------------------------------------\n\nTITLE: Using ARG in FROM instruction where empty value is valid\nDESCRIPTION: This example demonstrates when an empty ARG is acceptable - when the image reference is still valid even if the variable expands to nothing.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-default-arg-in-from.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG VARIANT\nFROM busybox:stable${VARIANT}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Bind Mount Configuration in Docker\nDESCRIPTION: This JSON snippet shows the output of docker inspect command, focusing on the Mounts section. It verifies the correct configuration of a read-only bind mount, including its source, destination, and read-only status.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"Mounts\": [\n    {\n        \"Type\": \"bind\",\n        \"Source\": \"/tmp/source/target\",\n        \"Destination\": \"/app\",\n        \"Mode\": \"ro\",\n        \"RW\": false,\n        \"Propagation\": \"rprivate\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Applying LVM Profile to Docker Thin Pool\nDESCRIPTION: Command to apply the configured LVM profile to the Docker thin pool using lvchange.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo lvchange --metadataprofile docker-thinpool docker/thinpool\n\nLogical volume docker/thinpool changed.\n```\n\n----------------------------------------\n\nTITLE: Installing Rosetta 2 on Mac with Apple Silicon\nDESCRIPTION: Command to install Rosetta 2, which is recommended for the best experience when using Docker Desktop on Macs with Apple silicon. While not strictly required, some optional command-line tools still need Rosetta 2.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/mac-install.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ softwareupdate --install-rosetta\n```\n\n----------------------------------------\n\nTITLE: Enabling Init Process in Docker Containers\nDESCRIPTION: Configuration to enable an init process (PID 1) inside the container that forwards signals and reaps processes, improving container signal handling.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    image: alpine:latest\n    init: true\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Engine API v1.27 Documentation\nDESCRIPTION: YAML front matter that defines metadata for the Docker Engine API v1.27 reference documentation. It specifies the linkTitle, full title, and URL aliases for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.27.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.27\ntitle: Docker Engine API v1.27 reference\naliases:\n- /engine/api/v1.27/\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Unpublished Docker Extension\nDESCRIPTION: Docker command to install an unpublished extension locally for testing and preview in the Docker Desktop Marketplace.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/labels.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker extension install unpublished-extension\n```\n\n----------------------------------------\n\nTITLE: Running BuildKit Checks for Dockerfile Validation\nDESCRIPTION: Example command showing how to run BuildKit's build checks to validate a Dockerfile against predefined rules, using the '--check' flag with the docker build command.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build --check .\n```\n\n----------------------------------------\n\nTITLE: Basic Device Access in Docker Container\nDESCRIPTION: Example showing how to give a container access to the sound device using the --device flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --device=/dev/snd:/dev/snd ...\n```\n\n----------------------------------------\n\nTITLE: Running Node.js App Container with MySQL Connection (Mac/Linux)\nDESCRIPTION: This command runs a Node.js application container, setting up MySQL connection environment variables, network, and volume mappings. It uses the node:18-alpine image and runs yarn install and dev commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -dp 127.0.0.1:3000:3000 \\\n  -w /app -v \"$(pwd):/app\" \\\n  --network todo-app \\\n  -e MYSQL_HOST=mysql \\\n  -e MYSQL_USER=root \\\n  -e MYSQL_PASSWORD=secret \\\n  -e MYSQL_DB=todos \\\n  node:18-alpine \\\n  sh -c \"yarn install && yarn run dev\"\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes API Server Connectivity using TypeScript\nDESCRIPTION: Executes kubectl command to verify if the Kubernetes API server is reachable with a specific context and timeout.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/guides/kubernetes.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n  \"cluster-info\",\n  \"--request-timeout\",\n  \"2s\",\n  \"--context\",\n  \"docker-desktop\",\n]);\n```\n\n----------------------------------------\n\nTITLE: PowerShell Docker Installation\nDESCRIPTION: PowerShell commands for installing and configuring Docker with FIPS compliance\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Module DockerMsftProvider -Force\nInstall-Package Docker -ProviderName DockerMsftProvider -Force\n[System.Environment]::SetEnvironmentVariable(\"DOCKER_FIPS\", \"1\", \"Machine\")\nExpand-Archive docker-18.09.1.zip -DestinationPath $Env:ProgramFiles -Force\n```\n\n----------------------------------------\n\nTITLE: Escaping Environment Variables in Docker Compose 1.5.0\nDESCRIPTION: Example showing how to escape environment variables in command or entrypoint fields when migrating to Compose 1.5.0. This prevents variables from being interpolated on the host.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n$$VAR or $${VAR}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Image CLI Documentation\nDESCRIPTION: YAML frontmatter configuration for the 'docker image' documentation page. It specifies the data folder, data file, title, and layout information along with URL aliases for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/image/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_image\ntitle: docker image\naliases:\n- /edge/engine/reference/commandline/image/\n- /engine/reference/commandline/image/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Extension\nDESCRIPTION: Builds the Docker extension using docker build command. This generates an image with the same name as the chosen hub repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/quickstart.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t <name-of-your-extension> .\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Using Named Context Reference\nDESCRIPTION: This Dockerfile shows how to use a named context reference instead of specifying the exact image. The actual image is resolved through the Compose file's additional_contexts configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/dependent-images.md#2025-04-11_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM base_image  \n# `base_image` doesn't resolve to an actual image. This is used to point to a named additional context\n\n# build service b\n```\n\n----------------------------------------\n\nTITLE: Output from Specified Remote Bake File\nDESCRIPTION: Build output showing the successful execution of the specified remote Bake file, confirming that the correct definition was used.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#2025-04-11_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n...\n#4 [2/2] RUN echo \"hello world\"\n#4 0.270 hello world\n#4 DONE 0.3s\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Line Splitting for Command Execution in TypeScript\nDESCRIPTION: This code defines the splitOutputLines option that controls how output is processed before invoking onOutput. When set to true, the output will be split into complete lines rather than arbitrary chunks.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExecStreamOptions.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsplitOutputLines?: Readonly boolean\n```\n\n----------------------------------------\n\nTITLE: Example Image Config for Attestation in JSON\nDESCRIPTION: Example of an image config for an attestation manifest. This is included for compatibility purposes but contains minimal information with unknown architecture and OS.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"architecture\": \"unknown\",\n  \"os\": \"unknown\",\n  \"config\": {},\n  \"rootfs\": {\n    \"type\": \"layers\",\n    \"diff_ids\": [\n      \"sha256:133ae3f9bcc385295b66c2d83b28c25a9f294ce20954d5cf922dda860429734a\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Compose Documentation\nDESCRIPTION: YAML frontmatter configuration that defines metadata for the documentation page of the 'docker compose ls' command, including layout settings and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/ls.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_ls\ntitle: docker compose ls\nlayout: cli\naliases:\n- /engine/reference/commandline/compose_ls/\n---\n```\n\n----------------------------------------\n\nTITLE: Stopping and Disabling dnsmasq Service on RHEL/CentOS/Fedora\nDESCRIPTION: Commands to stop and disable the dnsmasq service on Red Hat-based systems. This prevents dnsmasq from interfering with Docker's DNS resolution.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl stop dnsmasq\n$ sudo systemctl disable dnsmasq\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.List v1 Response Format\nDESCRIPTION: JSON v1 response format for the List endpoint in the volume plugin protocol. The response includes details of all volumes with their names and mountpoints.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Volumes\": [\n    {\n      \"Name\": \"volume_name\",\n      \"Mountpoint\": \"/path/to/directory/on/host\"\n    }\n  ],\n  \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Println Function in Docker Command Output\nDESCRIPTION: The println function prints each value on a new line. This example prints the IP addresses of a container's networks, each on a separate line.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker inspect --format='{{range .NetworkSettings.Networks}}{{println .IPAddress}}{{end}}' container\n```\n\n----------------------------------------\n\nTITLE: Comparing Docker Image Sizes with Multi-stage Builds\nDESCRIPTION: Sample output showing the size difference between single-stage and multi-stage builds for Spring Boot applications. The multi-stage build produces an image less than half the size of the single-stage build.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker images\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Network with a Custom Plugin Driver\nDESCRIPTION: This command creates a new Docker network named 'mynet' using the 'weave' network driver plugin. The --driver flag specifies which plugin to use for the network infrastructure.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_network.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create --driver weave mynet\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration\nDESCRIPTION: Docker Compose configuration for orchestrating the Node.js application container, including port mapping and environment settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/containerize.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    environment:\n      NODE_ENV: production\n    ports:\n      - 3000:3000\n```\n\n----------------------------------------\n\nTITLE: Include Long Syntax (YAML)\nDESCRIPTION: Shows the long syntax for the include directive which offers more control over how included files are parsed, including specifying the project directory and environment file.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/include.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n   - path: ../commons/compose.yaml\n     project_directory: ..\n     env_file: ../another/.env\n```\n\n----------------------------------------\n\nTITLE: JSON Output for x-bake Extension Fields\nDESCRIPTION: The JSON output when using buildx bake with a Compose file that contains x-bake extension fields. It shows how these fields are translated into the corresponding Bake configuration options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/compose-file.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\"addon\", \"aws\"]\n    }\n  },\n  \"target\": {\n    \"addon\": {\n      \"context\": \".\",\n      \"dockerfile\": \"./Dockerfile\",\n      \"args\": {\n        \"CT_ECR\": \"foo\",\n        \"CT_TAG\": \"bar\"\n      },\n      \"tags\": [\"ct-addon:foo\", \"ct-addon:alp\"],\n      \"cache-from\": [\n        {\n          \"ref\": \"user/app:cache\",\n          \"type\": \"registry\"\n        },\n        {\n          \"src\": \"path/to/cache\",\n          \"type\": \"local\"\n        }\n      ],\n      \"cache-to\": [\n        {\n          \"dest\": \"path/to/cache\",\n          \"type\": \"local\"\n        }\n      ],\n      \"platforms\": [\"linux/amd64\", \"linux/arm64\"],\n      \"pull\": true\n    },\n    \"aws\": {\n      \"context\": \".\",\n      \"dockerfile\": \"./aws.Dockerfile\",\n      \"args\": {\n        \"CT_ECR\": \"foo\",\n        \"CT_TAG\": \"bar\"\n      },\n      \"tags\": [\"ct-fake-aws:bar\"],\n      \"secret\": [\n        {\n          \"id\": \"mysecret\",\n          \"src\": \"./secret\"\n        },\n        {\n          \"id\": \"mysecret2\",\n          \"src\": \"./secret2\"\n        }\n      ],\n      \"platforms\": [\"linux/arm64\"],\n      \"output\": [\n        {\n          \"type\": \"docker\"\n        }\n      ],\n      \"no-cache\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Reproducible Builds in Buildx\nDESCRIPTION: Example showing how to use the SOURCE_DATE_EPOCH environment variable that's automatically forwarded by Buildx. This feature is designed to be used with reproducible builds in BuildKit v0.11.0+.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/release-notes.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nBUILDX_GIT_INFO=0\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Contexts using TypeScript\nDESCRIPTION: Retrieves available Kubernetes contexts using kubectl config view command with JSON path formatting.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/guides/kubernetes.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n  \"config\",\n  \"view\",\n  \"-o\",\n  \"jsonpath='{.contexts}'\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Subject Alternative Names for TLS Certificate\nDESCRIPTION: Adds Subject Alternative Names to the server certificate to allow TLS connections via both DNS names and IP addresses.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ echo subjectAltName = DNS:$HOST,IP:10.10.10.20,IP:127.0.0.1 >> extfile.cnf\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Alpine Base Image Using Tag\nDESCRIPTION: Example showing how to specify a base image with a version tag. This demonstrates using Alpine 3.19 without pinning to a specific digest, meaning it will use the latest patch version of 3.19.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine:3.19\n```\n\n----------------------------------------\n\nTITLE: Multi-Value Merging Example - Expose Ports\nDESCRIPTION: Example showing how multi-value options like 'expose' are concatenated when merging Compose files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ...\n    expose:\n      - \"3000\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ...\n    expose:\n      - \"4000\"\n      - \"5000\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ...\n    expose:\n      - \"3000\"\n      - \"4000\"\n      - \"5000\"\n```\n\n----------------------------------------\n\nTITLE: Configuring bash-completion in Shell Configuration Files\nDESCRIPTION: Commands to add bash-completion configuration to shell startup files (.bashrc or .bash_profile) for Linux and macOS systems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/completion.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# On Linux:\ncat <<EOT >> ~/.bashrc\nif [ -f /etc/bash_completion ]; then\n    . /etc/bash_completion\nfi\nEOT\n\n# On macOS / with Homebrew:\ncat <<EOT >> ~/.bash_profile\n[[ -r \"$(brew --prefix)/etc/profile.d/bash_completion.sh\" ]] && . \"$(brew --prefix)/etc/profile.d/bash_completion.sh\"\nEOT\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Path Request Format\nDESCRIPTION: JSON format for the Path request in the volume plugin protocol. This endpoint requests the path to a volume with the given name.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Name\": \"volume_name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighted Lines in Go Code\nDESCRIPTION: Example of Go code with specific line highlighting using the hl_lines attribute\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nincoming := map[string]interface{}{\n    \"asdf\": 1,\n    \"qwer\": []interface{}{},\n    \"zxcv\": []interface{}{\n        map[string]interface{}{},\n        true,\n        int(1e9),\n        \"tyui\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Conservative GC Configuration\nDESCRIPTION: Example of a more conservative garbage collection configuration with higher storage limits and specific retention policies.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/garbage-collection.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"builder\": {\n    \"gc\": {\n      \"enabled\": true,\n      \"defaultKeepStorage\": \"50GB\",\n      \"policy\": [\n        { \"keepStorage\": \"0\", \"filter\": [\"unused-for=1440h\"] },\n        { \"keepStorage\": \"0\" },\n        { \"keepStorage\": \"100GB\", \"all\": true }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Images to Organization Repository\nDESCRIPTION: Commands to push Docker images to an organization repository. This completes the process of moving images from a personal account to an organization.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/hub-images/move.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker push new_org/docker101tutorial\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Kubernetes Deployment List\nDESCRIPTION: Terminal output showing the status of the Deno application deployment, with information about readiness, availability, and age.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/deploy.md#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nNAME                 READY   UP-TO-DATE   AVAILABLE    AGE\ndocker-deno-demo       1/1     1            1           10s\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Database Seeding Script\nDESCRIPTION: Command to execute the Node.js script that seeds the PostgreSQL database with todos table and sample data.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ node seed.js\n```\n\n----------------------------------------\n\nTITLE: Docker Dev Start Command\nDESCRIPTION: Starts a specified dev environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/dev-cli.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker dev start DEV_ENV_NAME\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Docker Developer Guides Page\nDESCRIPTION: This YAML frontmatter configures a Docker documentation page titled 'Developer Guides'. It sets the build render option to 'never', indicating this page should not be rendered in the build process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/guides/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Developer Guides\n---\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Proxy Configuration\nDESCRIPTION: This console command demonstrates how to build a Docker image while displaying the automatically set proxy-related build arguments based on the Docker client configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/proxy.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker build \\\n  --no-cache \\\n  --progress=plain \\\n  - <<EOF\nFROM alpine\nRUN env | grep -i _PROXY\nEOF\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Kubernetes Service List\nDESCRIPTION: Terminal output showing the status of Kubernetes services, including the default kubernetes service and the newly created service-entrypoint for the Deno application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/deploy.md#2025-04-11_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nNAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\nkubernetes           ClusterIP   10.96.0.1        <none>        443/TCP          88m\nservice-entrypoint   NodePort    10.105.145.223   <none>        8000:30001/TCP   83s\n```\n\n----------------------------------------\n\nTITLE: Sample Docker Compose V2.4 Configuration\nDESCRIPTION: Version 2.4 added support for platform parameter and extension fields in service configurations. Requires Docker Engine 17.12.0+.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2.4\"\nservices:\n  myservice:\n    platform: linux/amd64\n    x-custom-field: value\n```\n\n----------------------------------------\n\nTITLE: Testing the REST API Endpoint\nDESCRIPTION: A curl command to test the REST API endpoint served by the application. This verifies that the application is running and accessible through port 80.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ curl http://localhost/\n```\n\n----------------------------------------\n\nTITLE: Connecting PostgreSQL Container to a Custom Network\nDESCRIPTION: This command runs a PostgreSQL container attached to a custom network 'mynetwork' for better isolation and inter-container communication, while mapping it to port 5434 on the host.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -e POSTGRES_PASSWORD=secret -p 5434:5432 --network mynetwork postgres\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Page Configuration\nDESCRIPTION: Simple HTML page template for serving through IIS on Windows containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\">\n  <head><title>Hello Docker</title></head>\n  <body>\n    <p>Hello Docker! You have deployed a HTML page.</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using --build-arg without specifying a service\nDESCRIPTION: Command to pass build arguments to all services being built in a Docker Compose project, introduced in Compose file version 3.2 and up.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose build --build-arg ARG_NAME=value\n```\n\n----------------------------------------\n\nTITLE: Streaming Docker Command Output in Docker Desktop Extension (TypeScript)\nDESCRIPTION: Demonstrates how to execute a Docker command and stream its output. This is useful for commands with long outputs. This method is deprecated and will be removed in a future version. The 'exec' method from DockerCommand is recommended as a replacement.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/DockerDesktopClient.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.spawnDockerCmd(\"logs\", [\"-f\", \"...\"], (data, error) => {\n  console.log(data.stdout);\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Rootfs from Container Image\nDESCRIPTION: These shell commands create a temporary container from the Rexray image, export its filesystem, and extract it to a temporary directory. This rootfs will be used to build the Docker plugin.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/EBS_volume.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ TMPDIR=/tmp/rexray  # for the purpose of this example\n$  # create container without running it, to extract the rootfs from image\n$ docker create --name rexray \"$image\"\n$  # save the rootfs to a tar archive\n$ docker export -o $TMPDIR/rexray.tar rexray\n$  # extract rootfs from tar archive to a rootfs folder\n$ ( mkdir -p $TMPDIR/rootfs; cd $TMPDIR/rootfs; tar xf ../rexray.tar )\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop using apt on Ubuntu\nDESCRIPTION: Commands to update the apt package index and install the downloaded Docker Desktop DEB package. This is part of the recommended installation approach for Docker Desktop on Ubuntu.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/ubuntu.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install ./docker-desktop-amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Pre-release Version on Linux\nDESCRIPTION: This snippet demonstrates how to install a pre-release version of Docker on Linux using the test channel. It downloads and executes a script that configures the package manager to use the Docker test repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/install-script.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -fsSL https://test.docker.com -o test-docker.sh\n$ sudo sh test-docker.sh\n```\n\n----------------------------------------\n\nTITLE: Docker CLI Feature Flag Usage\nDESCRIPTION: Example of using the new --feature flag added to daemon options for configuring Docker features.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--feature flag\n```\n\n----------------------------------------\n\nTITLE: Docker Scout CLI Options Table\nDESCRIPTION: Markdown table detailing command line options for Docker Scout, including option names, types, default values and descriptions. Options cover functionality like EPSS scoring, output formatting, package filtering, and vulnerability reporting preferences.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                   | Type          | Default    | Description                                                                                                                                                                                                                                                                                                                                           |\n|:-----------------------|:--------------|:-----------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `--details`            |               |            | Print details on default text output                                                                                                                                                                                                                                                                                                                  |\n| `--env`                | `string`      |            | Name of environment                                                                                                                                                                                                                                                                                                                                   |\n| [`--epss`](#epss)      |               |            | Display the EPSS scores and organize the package's CVEs according to their EPSS score                                                                                                                                                                                                                                                                 |\n| `--epss-percentile`    | `float32`     | `0`        | Exclude CVEs with EPSS scores less than the specified percentile (0 to 1)                                                                                                                                                                                                                                                                             |\n| `--epss-score`         | `float32`     | `0`        | Exclude CVEs with EPSS scores less than the specified value (0 to 1)                                                                                                                                                                                                                                                                                  |\n| `-e`, `--exit-code`    |               |            | Return exit code '2' if vulnerabilities are detected                                                                                                                                                                                                                                                                                                  |\n| `--format`             | `string`      | `packages` | Output format of the generated vulnerability report:<br>- packages: default output, plain text with vulnerabilities grouped by packages<br>- sarif: json Sarif output<br>- spdx: json SPDX output<br>- gitlab: json GitLab output<br>- markdown: markdown output (including some html tags like collapsible sections)<br>- sbom: json SBOM output<br> |\n| `--ignore-base`        |               |            | Filter out CVEs introduced from base image                                                                                                                                                                                                                                                                                                            |\n| `--ignore-suppressed`  |               |            | Filter CVEs found in Scout exceptions based on the specified exception scope                                                                                                                                                                                                                                                                          |\n| `--locations`          |               |            | Print package locations including file paths and layer diff_id                                                                                                                                                                                                                                                                                        |\n| `--multi-stage`        |               |            | Show packages from multi-stage Docker builds                                                                                                                                                                                                                                                                                                          |\n| `--only-base`          |               |            | Only show CVEs introduced by the base image                                                                                                                                                                                                                                                                                                           |\n| `--only-cisa-kev`      |               |            | Filter to CVEs listed in the CISA KEV catalog                                                                                                                                                                                                                                                                                                         |\n| `--only-cve-id`        | `stringSlice` |            | Comma separated list of CVE ids (like CVE-2021-45105) to search for                                                                                                                                                                                                                                                                                   |\n| `--only-fixed`         |               |            | Filter to fixable CVEs                                                                                                                                                                                                                                                                                                                                |\n| `--only-metric`        | `stringSlice` |            | Comma separated list of CVSS metrics (like AV:N or PR:L) to filter CVEs by                                                                                                                                                                                                                                                                            |\n| `--only-package`       | `stringSlice` |            | Comma separated regular expressions to filter packages by                                                                                                                                                                                                                                                                                             |\n| `--only-package-type`  | `stringSlice` |            | Comma separated list of package types (like apk, deb, rpm, npm, pypi, golang, etc)                                                                                                                                                                                                                                                                    |\n| `--only-severity`      | `stringSlice` |            | Comma separated list of severities (critical, high, medium, low, unspecified) to filter CVEs by                                                                                                                                                                                                                                                       |\n| `--only-stage`         | `stringSlice` |            | Comma separated list of multi-stage Docker build stage names                                                                                                                                                                                                                                                                                          |\n| `--only-unfixed`       |               |            | Filter to unfixed CVEs                                                                                                                                                                                                                                                                                                                                |\n| `--only-vex-affected`  |               |            | Filter CVEs by VEX statements with status not affected                                                                                                                                                                                                                                                                                                |\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile Structure Example\nDESCRIPTION: A simplified example of a multi-stage Dockerfile structure using pseudo-code. It demonstrates how to use multiple FROM statements, stage naming with AS, and copying artifacts between stages.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#2025-04-11_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Stage 1: Build Environment\nFROM builder-image AS build-stage \n# Install build tools (e.g., Maven, Gradle)\n# Copy source code\n# Build commands (e.g., compile, package)\n\n# Stage 2: Runtime environment\nFROM runtime-image AS final-stage  \n#  Copy application artifacts from the build stage (e.g., JAR file)\nCOPY --from=build-stage /path/in/build/stage /path/to/place/in/final/stage\n# Define runtime configuration (e.g., CMD, ENTRYPOINT) \n```\n\n----------------------------------------\n\nTITLE: Counting Neo4j Nodes by Type\nDESCRIPTION: Cypher query to count the number of nodes in the Neo4j database grouped by their labels. This helps verify that data has been successfully imported from Stack Overflow.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-leveraging-rag/index.md#2025-04-11_snippet_5\n\nLANGUAGE: cypher\nCODE:\n```\nMATCH (n)\nRETURN DISTINCT labels(n) AS NodeTypes, count(*) AS Count\nORDER BY Count DESC;\n```\n\n----------------------------------------\n\nTITLE: Installing a Non-Marketplace Docker Extension\nDESCRIPTION: This command installs a Docker Extension from an image reference, optionally specifying a tag. The -f or --force flag can be used to skip interactive confirmation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/non-marketplace.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker extension install IMAGE[:TAG]\n```\n\n----------------------------------------\n\nTITLE: Dumping Devicemapper Table for Thin Pool in Bash\nDESCRIPTION: This command shows how to dump the device mapper table for the thin pool.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dmsetup table docker-8:1-123141-pool\n0 209715200 thin-pool 7:1 7:0 128 32768 1 skip_block_zeroing\n```\n\n----------------------------------------\n\nTITLE: Running Ubuntu Container with Bind Mount on Git Bash\nDESCRIPTION: This command runs an interactive Ubuntu container with a bind mount that maps the current directory to /src inside the container using Git Bash syntax.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --mount type=bind,src=\"/$(pwd)\",target=/src ubuntu bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Annotations in Docker Bake\nDESCRIPTION: Demonstrates how to add annotations to images built with Docker Bake using the annotations attribute. Annotations are key-value pairs that can be applied to image manifests.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  output = [{ type = \"image\", name = \"foo\" }]\n  annotations = [\"org.opencontainers.image.authors=dvdksn\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Hello World in Go\nDESCRIPTION: A basic Go code snippet that prints 'hello world' to the console. This is used as an example in the tabs component.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/tabs.md#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Cleanup Commands for Services, Volumes, and Secrets\nDESCRIPTION: Removes WordPress and MySQL services, data volumes, and remaining secrets to clean up the environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ndocker service rm wordpress mysql\n\ndocker volume rm mydata wpdata\n\ndocker secret rm mysql_password_v2 mysql_root_password\n```\n\n----------------------------------------\n\nTITLE: Importing a Docker Context\nDESCRIPTION: The docker context import command creates a new context from a previously exported context file, allowing context configurations to be shared across hosts.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/contexts.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker context import docker-test docker-test.dockercontext\ndocker-test\nSuccessfully imported context \"docker-test\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Compose Configuration for Rails Applications\nDESCRIPTION: A simple compose.yaml file that defines a web service for a Rails application. It builds the application from the Dockerfile, sets the required environment variables, and maps port 3000 on the host to port 80 in the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/containerize.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    environment:\n      - RAILS_MASTER_KEY\n    ports:\n      - \"3000:80\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote for Docker Docs\nDESCRIPTION: Commands to configure Git remote to sync with the upstream Docker docs repository and prevent accidental pushes.\nSOURCE: https://github.com/docker/docs/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git remote add upstream https://github.com/docker/docs.git\n$ git remote set-url --push upstream no_pushing\n```\n\n----------------------------------------\n\nTITLE: Enabling Git Labels in Buildx\nDESCRIPTION: Example showing how to automatically define labels with version control system information by setting an environment variable. This works in conjunction with the automatic sharing of version control information for provenance attestations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/release-notes.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nBUILDX_GIT_LABELS=1\n```\n\n----------------------------------------\n\nTITLE: Creating Badges in Docker Documentation with Hugo Shortcodes\nDESCRIPTION: This code demonstrates how to implement badges in Docker documentation using Hugo shortcodes. It shows both a simple colored badge implementation and how to create a badge that functions as a hyperlink.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/badges.md#2025-04-11_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{</* badge color=amber text=\"amber badge\" */>}}\n[{{</* badge color=\"blue\" text=\"badge with a link\" */>}}](../overview.md)\n```\n\n----------------------------------------\n\nTITLE: Building Single Bake Target\nDESCRIPTION: Demonstrates the command to build a single target using docker buildx bake.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/targets.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake webapp\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Production Configuration\nDESCRIPTION: Production Docker Compose configuration defining services for web, PHP-FPM, PHP CLI, PostgreSQL, and Redis. Includes volume mounts, network configurations, health checks, and environment settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build:\n      context: .\n      dockerfile: ./docker/production/nginx/Dockerfile\n    restart: unless-stopped\n    volumes:\n      - laravel-storage-production:/var/www/storage:ro\n    networks:\n      - laravel-production\n    ports:\n      - \"${NGINX_PORT:-80}:80\"\n    depends_on:\n      php-fpm:\n        condition: service_healthy\n\n  php-fpm:\n    build:\n      context: .\n      dockerfile: ./docker/common/php-fpm/Dockerfile\n      target: production\n    restart: unless-stopped\n    volumes:\n      - laravel-storage-production:/var/www/storage\n    env_file:\n      - .env\n    networks:\n      - laravel-production\n    healthcheck:\n      test: [\"CMD-SHELL\", \"php-fpm-healthcheck || exit 1\"]\n      interval: 10s\n      timeout: 5s\n      retries: 3\n    depends_on:\n      postgres:\n        condition: service_healthy\n\n  php-cli:\n    build:\n      context: .\n      dockerfile: ./docker/php-cli/Dockerfile\n    tty: true\n    stdin_open: true\n    env_file:\n      - .env\n    networks:\n      - laravel\n\n  postgres:\n    image: postgres:16\n    restart: unless-stopped\n    user: postgres\n    ports:\n      - \"${POSTGRES_PORT}:5432\"\n    environment:\n      - POSTGRES_DB=${POSTGRES_DATABASE}\n      - POSTGRES_USER=${POSTGRES_USERNAME}\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n    volumes:\n      - postgres-data-production:/var/lib/postgresql/data\n    networks:\n      - laravel-production\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  redis:\n    image: redis:alpine\n    restart: unless-stopped\n    networks:\n      - laravel-production\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\", \"ping\"]\n      interval: 10s\n      timeout: 5s\n      retries: 3\n\nnetworks:\n  laravel-production:\n\nvolumes:\n  postgres-data-production:\n  laravel-storage-production:\n```\n\n----------------------------------------\n\nTITLE: Postgres Container Startup Logs\nDESCRIPTION: Sample logs showing successful initialization and startup of Postgres container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPostgreSQL Database directory appears to contain a database; Skipping initialization\n\n2024-09-08 09:09:47.136 UTC [1] LOG:  starting PostgreSQL 16.4 (Debian 16.4-1.pgdg120+1) on aarch64-unknown-linux-gnu, compiled by gcc (Debian 12.2.0-14) 12.2.0, 64-bit\n2024-09-08 09:09:47.137 UTC [1] LOG:  listening on IPv4 address \"0.0.0.0\", port 5432\n2024-09-08 09:09:47.137 UTC [1] LOG:  listening on IPv6 address \"::\", port 5432\n2024-09-08 09:09:47.139 UTC [1] LOG:  listening on Unix socket \"/var/run/postgresql/.s.PGSQL.5432\"\n2024-09-08 09:09:47.142 UTC [29] LOG:  database system was shut down at 2024-09-08 09:07:09 UTC\n2024-09-08 09:09:47.148 UTC [1] LOG:  database system is ready to accept connections\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Docs Page\nDESCRIPTION: YAML configuration block that defines the page metadata, navigation structure, and grid layout for the Docker documentation contribution guide. Includes title, weight, aliases, and grid items for different style guide sections.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Contribute to Docker's docs\nlinkTitle: Contribute\nweight: 10\ntoc_max: 1\naliases:\n- /opensource/\n- /contribute/overview/\n- /contribute/contribute-guide/\ngrid:\n- title: Grammar and style\n  description: Explore Docker's grammar and style guide\n  icon: menu_book\n  link: /contribute/style/grammar\n- title: Formatting\n  description: Format your content to match the rest of our documentation.\n  icon: newspaper\n  link: /contribute/style/formatting\n- title: Recommended word list\n  description: Choose the right words for your content.\n  icon: checklist\n  link: /contribute/style/recommended-words\n- title: Source file conventions\n  description: Guidelines for creating a new page.\n  icon: note_add\n  link: /contribute/file-conventions\n- title: Terminology\n  description: Explore commonly used Docker terms.\n  icon: spellcheck\n  link: /contribute/style/terminology\n- title: Voice and tone\n  description: Learn about how we use voice and tone in our writing.\n  icon: voice_selection\n  link: /contribute/style/voice-tone\n---\n```\n\n----------------------------------------\n\nTITLE: Testing Docker Content Trust Operations in Sandbox\nDESCRIPTION: A series of Docker commands demonstrating how to pull, tag, and push images using content trust in the sandbox environment. The example shows enabling content trust, setting up the trust server, and handling the initial trust setup with key generation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_sandbox.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker container exec -it trustsandbox sh\n/ # docker pull docker/trusttest\ndocker pull docker/trusttest\nUsing default tag: latest\nlatest: Pulling from docker/trusttest\n\nb3dbab3810fc: Pull complete\na9539b34a6ab: Pull complete\nDigest: sha256:d149ab53f8718e987c3a3024bb8aa0e2caadf6c0328f1d9d850b2a2a67f2819a\nStatus: Downloaded newer image for docker/trusttest:latest\n\n/ # docker tag docker/trusttest sandboxregistry:5000/test/trusttest:latest\n\n/ # export DOCKER_CONTENT_TRUST=1\n\n/ # export DOCKER_CONTENT_TRUST_SERVER=https://notaryserver:4443\n\n/ # docker pull sandboxregistry:5000/test/trusttest\nUsing default tag: latest\nError: remote trust data does not exist for sandboxregistry:5000/test/trusttest: notaryserver:4443 does not have trust data for sandboxregistry:5000/test/trusttest\n\n/ # docker push sandboxregistry:5000/test/trusttest:latest\nThe push refers to a repository [sandboxregistry:5000/test/trusttest]\n5f70bf18a086: Pushed\nc22f7bc058a9: Pushed\nlatest: digest: sha256:ebf59c538accdf160ef435f1a19938ab8c0d6bd96aef8d4ddd1b379edf15a926 size: 734\nSigning and pushing trust metadata\nYou are about to create a new root signing key passphrase. This passphrase\nwill be used to protect the most sensitive key in your signing system. Please\nchoose a long, complex passphrase and be careful to keep the password and the\nkey file itself secure and backed up. It is highly recommended that you use a\npassword manager to generate the passphrase and keep it safe. There will be no\nway to recover this key. You can find the key in your config directory.\nEnter passphrase for new root key with ID 27ec255:\nRepeat passphrase for new root key with ID 27ec255:\nEnter passphrase for new repository key with ID 58233f9 (sandboxregistry:5000/test/trusttest):\nRepeat passphrase for new repository key with ID 58233f9 (sandboxregistry:5000/test/trusttest):\nFinished initializing \"sandboxregistry:5000/test/trusttest\"\nSuccessfully signed \"sandboxregistry:5000/test/trusttest\":latest\n\n/ # docker pull sandboxregistry:5000/test/trusttest\nUsing default tag: latest\nPull (1 of 1): sandboxregistry:5000/test/trusttest:latest@sha256:ebf59c538accdf160ef435f1a19938ab8c0d6bd96aef8d4ddd1b379edf15a926\nsha256:ebf59c538accdf160ef435f1a19938ab8c0d6bd96aef8d4ddd1b379edf15a926: Pulling from test/trusttest\nDigest: sha256:ebf59c538accdf160ef435f1a19938ab8c0d6bd96aef8d4ddd1b379edf15a926\nStatus: Downloaded newer image for sandboxregistry:5000/test/trusttest@sha256:ebf59c538accdf160ef435f1a19938ab8c0d6bd96aef8d4ddd1b379edf15a926\nTagging sandboxregistry:5000/test/trusttest@sha256:ebf59c538accdf160ef435f1a19938ab8c0d6bd96aef8d4ddd1b379edf15a926 as sandboxregistry:5000/test/trusttest:latest\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Resources for Go Application Deployment\nDESCRIPTION: A YAML configuration that defines the Kubernetes resources needed to deploy a Go application with a PostgreSQL database. It includes Deployments for both the server and database, along with Services to expose them. The server deployment includes an init container to wait for the database to be ready.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    service: server\n  name: server\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      service: server\n  strategy: {}\n  template:\n    metadata:\n      labels:\n        service: server\n    spec:\n      initContainers:\n        - name: wait-for-db\n          image: busybox:1.28\n          command:\n            [\n              \"sh\",\n              \"-c\",\n              'until nc -zv db 5432; do echo \"waiting for db\"; sleep 2; done;',\n            ]\n      containers:\n        - env:\n            - name: PGDATABASE\n              value: mydb\n            - name: PGPASSWORD\n              value: whatever\n            - name: PGHOST\n              value: db\n            - name: PGPORT\n              value: \"5432\"\n            - name: PGUSER\n              value: postgres\n          image: DOCKER_USERNAME/REPO_NAME\n          name: server\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n              hostPort: 8080\n              protocol: TCP\n          resources: {}\n      restartPolicy: Always\nstatus: {}\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    service: db\n  name: db\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      service: db\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        service: db\n    spec:\n      containers:\n        - env:\n            - name: POSTGRES_DB\n              value: mydb\n            - name: POSTGRES_PASSWORD\n              value: whatever\n            - name: POSTGRES_USER\n              value: postgres\n          image: postgres\n          name: db\n          ports:\n            - containerPort: 5432\n              protocol: TCP\n          resources: {}\n      restartPolicy: Always\nstatus: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    service: server\n  name: server\n  namespace: default\nspec:\n  type: NodePort\n  ports:\n    - name: \"8080\"\n      port: 8080\n      targetPort: 8080\n      nodePort: 30001\n  selector:\n    service: server\nstatus:\n  loadBalancer: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    service: db\n  name: db\n  namespace: default\nspec:\n  ports:\n    - name: \"5432\"\n      port: 5432\n      targetPort: 5432\n  selector:\n    service: db\nstatus:\n  loadBalancer: {}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenDialogResult Interface in TypeScript for Docker Extension API\nDESCRIPTION: This code snippet defines the OpenDialogResult interface used in the Docker extension API. It includes properties for dialog cancellation status, selected file paths, and macOS-specific security scoped bookmarks. The interface is available since version 0.2.3 of the API.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/OpenDialogResult.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface OpenDialogResult {\n  readonly canceled: boolean;\n  readonly filePaths: string[];\n  readonly bookmarks?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Runtime in daemon.json\nDESCRIPTION: Example of how to set the default runtime in the Docker daemon configuration file. This runtime will be used unless explicitly overridden when running containers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default-runtime\": \"io.containerd.runsc.v1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Callouts in HTML for Docker Documentation\nDESCRIPTION: This snippet showcases the HTML formatting for various types of callouts used in Docker documentation. It includes examples of Note, Tip, Important, Warning, and Caution callouts, demonstrating the structure and syntax for each.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/call-outs.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n> [!NOTE]\n>\n> Note the way the `get_hit_count` function is written. This basic retry\n> loop lets us attempt our request multiple times if the redis service is\n> not available. This is useful at startup while the application comes\n> online, but also makes our application more resilient if the Redis\n> service needs to be restarted anytime during the app's lifetime. In a\n> cluster, this also helps handling momentary connection drops between\n> nodes.\n\n> [!TIP]\n>\n> For a smaller base image, use `alpine`.\n\n> [!IMPORTANT]\n>\n> Treat access tokens like your password and keep them secret. Store your\n> tokens securely (for example, in a credential manager).\n\n> [!WARNING]\n>\n> Removing Volumes\n>\n> By default, named volumes in your compose file are NOT removed when running\n> `docker compose down`. If you want to remove the volumes, you will need to add\n> the `--volumes` flag.\n>\n> The Docker Desktop Dashboard does not remove volumes when you delete the app stack.\n\n> [!CAUTION]\n>\n> Here be dragons.\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Nginx Dockerfile\nDESCRIPTION: A simple Dockerfile that extends the official Nginx image to create a basic web server with a custom HTML message. The Dockerfile demonstrates how to use the FROM directive to select a base image and the RUN directive to customize the content.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/quickstart.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM nginx\nRUN echo \"<h1>Hello world from Docker!</h1>\" > /usr/share/nginx/html/index.html\n```\n\n----------------------------------------\n\nTITLE: Pulling Ollama Model on Host Machine\nDESCRIPTION: This command pulls the llama2 model to Ollama running on the host machine outside of a container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/develop.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ollama pull llama2\n```\n\n----------------------------------------\n\nTITLE: Setting node placement constraints in Compose Deploy\nDESCRIPTION: Demonstrates how to specify constraints on which nodes can run service containers. This example requires nodes with SSD disk type.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy:\n  placement:\n    constraints:\n      - disktype=ssd\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Ulimits in Docker Compose\nDESCRIPTION: Shows how to override default ulimits for containers during build in Docker Compose. Supports both single limit integers and soft/hard limit mappings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    build:\n      context: .\n      ulimits:\n        nproc: 65535\n        nofile:\n          soft: 20000\n          hard: 40000\n```\n\n----------------------------------------\n\nTITLE: Implementing a Grid Shortcode in Docker Docs\nDESCRIPTION: Shows how to implement a grid layout that displays multiple cards in a responsive format. The grid displays 3x3 cards on large screens, 2x2 on medium screens, and a single column on small screens.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/cards.md#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{</* grid */>}}\n```\n\n----------------------------------------\n\nTITLE: Adding Delegation Public Key to Docker Trust\nDESCRIPTION: This code snippet shows how to add a delegation public key to a Docker repository, including the initialization of the repository if necessary. It uses environment variables for root and repository passphrases.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_automation.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# Export the Local Root Key Passphrase if required.\n$ export DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE=\"rootpassphrase123\"\n\n# Export the Repository Passphrase\n$ export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=\"repopassphrase123\"\n\n# Initialize Repo and Push Delegation\n$ docker trust signer add --key delegation.crt jeff registry.example.com/admin/demo\nAdding signer \"jeff\" to registry.example.com/admin/demo...\nInitializing signed repository for registry.example.com/admin/demo...\nSuccessfully initialized \"registry.example.com/admin/demo\"\nSuccessfully added signer: registry.example.com/admin/demo\n```\n\n----------------------------------------\n\nTITLE: Running Container in Detached Mode\nDESCRIPTION: Command to run the Rust container in background (detached) mode with port mapping.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/run-containers.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d -p 3001:8000 docker-rust-image\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop MSI Non-Interactively and Suppressing Reboots in PowerShell\nDESCRIPTION: Command to silently install Docker Desktop MSI with verbose logging while preventing automatic system reboots after installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /i \"DockerDesktop.msi\" /L*V \".\\msi.log\" /quiet /norestart\n```\n\n----------------------------------------\n\nTITLE: Registry Certificate Error Example\nDESCRIPTION: Shows the error message when there are certificate issues while pulling from a registry, including both client and server-side error logs.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/topics.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nError response from daemon: Get http://192.168.203.139:5858/v2/: malformed HTTP response \"\\x15\\x03\\x01\\x00\\x02\\x02\"\n```\n\nLANGUAGE: console\nCODE:\n```\n2017/06/20 18:15:30 http: TLS handshake error from 192.168.203.139:52882: tls: client didn't provide a certificate\n2017/06/20 18:15:30 http: TLS handshake error from 192.168.203.139:52883: tls: first record does not look like a TLS handshake\n```\n\n----------------------------------------\n\nTITLE: Creating volume mounts with docker run\nDESCRIPTION: Shows the syntax for mounting a volume to a container using the --mount flag, specifying both the source (volume name) and target (mount path inside container).\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --mount source=<VOLUME_NAME>,target=[PATH] [IMAGE] [COMMAND...]\n```\n\n----------------------------------------\n\nTITLE: Filtering Docker Scout Comparison by Package Type and Severity\nDESCRIPTION: Example of comparing two images while filtering to show only Maven packages with critical severity vulnerabilities.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout compare --only-package-type maven --only-severity critical --to namespace/repo:latest namespace/repo:v1.2.3-pre\n```\n\n----------------------------------------\n\nTITLE: Using Cache Mounts for Different Package Managers\nDESCRIPTION: Examples of cache mount configurations for various programming languages and package managers, showing how to persist package caches across builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#2025-04-11_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=cache,target=/go/pkg/mod \\\n    go build -o /app/hello\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=cache,target=/var/cache/apt,sharing=locked \\\n  --mount=type=cache,target=/var/lib/apt,sharing=locked \\\n  apt update && apt-get --no-install-recommends install -y gcc\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=cache,target=/root/.cache/pip \\\n    pip install -r requirements.txt\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=cache,target=/root/.gem \\\n    bundle install\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=cache,target=/app/target/ \\\n    --mount=type=cache,target=/usr/local/cargo/git/db \\\n    --mount=type=cache,target=/usr/local/cargo/registry/ \\\n    cargo build\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=cache,target=/root/.nuget/packages \\\n    dotnet restore\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=cache,target=/tmp/cache \\\n    composer install\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Docker Exit Code 125\nDESCRIPTION: Shows exit code 125, which indicates an error with the Docker daemon itself. In this example, an invalid flag is provided to the docker run command.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --foo busybox; echo $?\n\nflag provided but not defined: --foo\nSee 'docker run --help'.\n125\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Containerizing a Deno Application\nDESCRIPTION: Dockerfile that uses the official Deno image as a base, copies the server code, and configures the container to run the Deno application with network permissions.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/containerize.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the official Deno image\nFROM denoland/deno:latest\n\n# Set the working directory\nWORKDIR /app\n\n# Copy server code into the container\nCOPY server.ts .\n\n# Set permissions (optional but recommended for security)\nUSER deno\n\n# Expose port 8000\nEXPOSE 8000\n\n# Run the Deno server\nCMD [\"run\", \"--allow-net\", \"server.ts\"]\n```\n\n----------------------------------------\n\nTITLE: Docker Data Root Configuration\nDESCRIPTION: JSON configuration to specify non-NFS data-root directory in Docker daemon config to avoid NFS-related layer registration errors.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\"data-root\":\"/somewhere-out-of-nfs\"}\n```\n\n----------------------------------------\n\nTITLE: Installing GNU Tar on macOS using Homebrew\nDESCRIPTION: This code snippet demonstrates how to install GNU Tar on macOS using the Homebrew package manager. GNU Tar can be used as an alternative to the default macOS tar command to create Docker-compatible tar files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/25.0.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ brew install gnu-tar\n```\n\n----------------------------------------\n\nTITLE: Combining Local and Remote Sources with Build Contexts\nDESCRIPTION: Example showing how to define and use a named context from a Git repository. The docker build command defines 'scripts' as a remote Git repo, and the Dockerfile copies from both the default context and the named 'scripts' context.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --build-context scripts=https://github.com/user/deployment-scripts.git .\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine:latest\n\n# Copy application code from the main context\nCOPY . /opt/app\n\n# Run deployment scripts using the remote \"scripts\" context\nRUN --mount=from=scripts,target=/scripts /scripts/main.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning the C++ Docker sample repository\nDESCRIPTION: This command clones a sample C++ repository that contains the example code for this guide.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/multistage.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/dockersamples/c-plus-plus-docker.git\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop DEB package on Debian\nDESCRIPTION: Commands to update apt repositories and install the Docker Desktop DEB package. This is the recommended approach after setting up Docker's apt repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/debian.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install ./docker-desktop-amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devicemapper Pool Name in Bash\nDESCRIPTION: This command extracts the pool name from the devicemapper status output.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dmsetup status | grep ' thin-pool ' | awk -F ': ' {'print $1'}\ndocker-8:1-123141-pool\n```\n\n----------------------------------------\n\nTITLE: Using --workdir flag with docker-compose exec\nDESCRIPTION: Command syntax for specifying a working directory when executing a command in a running Docker Compose service container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose exec --workdir /path/to/dir service_name command\n```\n\n----------------------------------------\n\nTITLE: Allowing All Containers to Mount the Docker Socket\nDESCRIPTION: This JSON snippet shows how to configure the image list to allow any container to mount the Docker socket in Docker Desktop version 4.36 and later, which increases flexibility but reduces security.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/config.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"imageList\": {\n  \"images\": [\n    \"*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Kafka Cluster ID\nDESCRIPTION: Executes a command inside the Kafka container to retrieve the cluster ID, confirming the cluster is running.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -ti kafka /opt/kafka/bin/kafka-cluster.sh cluster-id --bootstrap-server :9092\n```\n\n----------------------------------------\n\nTITLE: Removing a Service from Docker Swarm\nDESCRIPTION: Removes a service from the swarm by its name, terminating all running containers associated with the service and freeing up resources.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker service remove my_web\n```\n\n----------------------------------------\n\nTITLE: Compose Override File Example\nDESCRIPTION: Example of an override Compose file that adds environment variables to an existing service configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nwebapp:\n  environment:\n    - DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Generating Environment-Specific robots.txt Content with Hugo\nDESCRIPTION: This Hugo template generates different robots.txt content based on whether the site is in production or not. For production, it allows all user agents and provides a sitemap URL. For non-production environments, it disallows all indexing to prevent search engines from indexing preview sites.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/index.robots.txt#2025-04-11_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{- /*\n\tFor Netlify deployments, we disallow all routes to prevent search\n\tengines from indexing our preview sites.\n\t*/\n-}}\n\n{{- if hugo.IsProduction -}}\nUser-agent: *\n\n\nSitemap: {{ \"sitemap.xml\" | absURL }}\n{{- else -}}\n# Disable all indexing on staging websites and Netlify previews to prevent\n# them showing up in search results.\nUser-agent: *\nDisallow: /\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Setting Container Startup Command in Dockerfile\nDESCRIPTION: Dockerfile instruction to define the default command that runs when a container is started from this image. Executes the compiled Go binary.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"/docker-gs-ping\"]\n```\n\n----------------------------------------\n\nTITLE: Stopping a Docker Container with Partial ID\nDESCRIPTION: Example of stopping a Docker container using just the first few characters of its ID, which is sufficient as long as it uniquely identifies the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-container.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker stop a1f\n```\n\n----------------------------------------\n\nTITLE: Upgrading Docker Desktop on Ubuntu\nDESCRIPTION: Command to upgrade Docker Desktop on Ubuntu by installing the new DEB package. This is required when a new version of Docker Desktop is released.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/ubuntu.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install ./docker-desktop-amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Executing Host Command in Docker Desktop Extension (TypeScript)\nDESCRIPTION: Demonstrates how to invoke an extension binary on the host and get the output stream. This method is deprecated and will be removed in a future version. The 'exec' method from ExtensionCli is recommended as a replacement.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/DockerDesktopClient.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.spawnHostCmd(\n  `cliShippedOnHost`,\n  [`arg1`, `arg2`],\n  (data: any, err: any) => {\n    console.log(data.stdout, data.stderr);\n    // Once the command exits we get the status code\n    if (data.code) {\n      console.log(data.code);\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Upgrading Docker Desktop on Debian\nDESCRIPTION: Command to upgrade Docker Desktop to a new version using the apt package manager. Requires downloading the new DEB package first.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/debian.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install ./docker-desktop-amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Creating Customized Overlay Network with Subnet and Gateway\nDESCRIPTION: This command creates an overlay network named 'my-network' with a custom subnet (10.0.9.0/24) and gateway (10.0.9.99) configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create \\\n  --driver overlay \\\n  --subnet 10.0.9.0/24 \\\n  --gateway 10.0.9.99 \\\n  my-network\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP GET Request with curl\nDESCRIPTION: This command sends a GET request to the local server endpoint to trigger the debugger breakpoint.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ curl --request GET --url http://localhost:8080/vets\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile for Conditional Compilation\nDESCRIPTION: This snippet modifies the Dockerfile to use the BUILD_TAGS argument during compilation. It allows for conditional inclusion of debug features based on the build mode.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_8\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM base AS build\nARG TARGETOS TARGETARCH BUILD_TAGS\nENV GOOS=$TARGETOS\nENV GOARCH=$TARGETARCH\nRUN --mount=target=. \\\n       --mount=type=cache,target=/go/pkg/mod \\\n       go build -tags=\"${BUILD_TAGS}\" -o \"/usr/bin/bakeme\" .\n```\n\n----------------------------------------\n\nTITLE: Device Cgroup Rules Configuration\nDESCRIPTION: Example showing how to configure device cgroup rules for container access control.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndevice_cgroup_rules:\n  - 'c 1:3 mr'\n  - 'a 7:* rmw'\n```\n\n----------------------------------------\n\nTITLE: Pretty-Printing JSON Output with jq\nDESCRIPTION: Piping the JSON output from docker compose ps to the jq utility to format the JSON in a more readable structure.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps --format json | jq .\n[\n  {\n    \"ID\": \"1553b0236cf4d2715845f053a4ee97042c4f9a2ef655731ee34f1f7940eaa41a\",\n    \"Name\": \"example-bar-1\",\n    \"Command\": \"/docker-entrypoint.sh nginx -g 'daemon off;'\",\n    \"Project\": \"example\",\n    \"Service\": \"bar\",\n    \"State\": \"exited\",\n    \"Health\": \"\",\n    \"ExitCode\": 0,\n    \"Publishers\": null\n  },\n  {\n    \"ID\": \"f02a4efaabb67416e1ff127d51c4b5578634a0ad5743bd65225ff7d1909a3fa0\",\n    \"Name\": \"example-foo-1\",\n    \"Command\": \"/docker-entrypoint.sh nginx -g 'daemon off;'\",\n    \"Project\": \"example\",\n    \"Service\": \"foo\",\n    \"State\": \"running\",\n    \"Health\": \"\",\n    \"ExitCode\": 0,\n    \"Publishers\": [\n      {\n        \"URL\": \"0.0.0.0\",\n        \"TargetPort\": 80,\n        \"PublishedPort\": 8080,\n        \"Protocol\": \"tcp\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Variable Placeholder Example\nDESCRIPTION: Demonstrates the usage of variable placeholders using the <MY_VARIABLE> syntax format\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nexport name=<MY_NAME>\n```\n\n----------------------------------------\n\nTITLE: Debugging Docker Plugins Using Log Entries\nDESCRIPTION: This snippet demonstrates how to debug Docker plugins by examining log entries in the Docker daemon logs. It shows examples of log outputs for plugin installation, volume creation, and container operations using a plugin.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker plugin install tiborvass/sample-volume-plugin\n\nINFO[0036] Starting...       Found 0 volumes on startup  plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62\n\n$ docker volume create -d tiborvass/sample-volume-plugin samplevol\n\nINFO[0193] Create Called...  Ensuring directory /data/samplevol exists on host...  plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62\nINFO[0193] open /var/lib/docker/plugin-data/local-persist.json: no such file or directory  plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62\nINFO[0193]                   Created volume samplevol with mountpoint /data/samplevol  plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62\nINFO[0193] Path Called...    Returned path /data/samplevol  plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62\n\n$ docker run -v samplevol:/tmp busybox sh\n\nINFO[0421] Get Called...     Found samplevol                plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62\nINFO[0421] Mount Called...   Mounted samplevol              plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62\nINFO[0421] Path Called...    Returned path /data/samplevol  plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62\nINFO[0421] Unmount Called... Unmounted samplevol            plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62\n```\n\n----------------------------------------\n\nTITLE: Network List HTTP Response Example\nDESCRIPTION: Example response from a network list request showing multiple networks (bridge, none, host) with their complete configurations including IPAM settings, containers connected to them, and network options.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_72\n\nLANGUAGE: json\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    \"Name\": \"bridge\",\n    \"Id\": \"f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566\",\n    \"Scope\": \"local\",\n    \"Driver\": \"bridge\",\n    \"EnableIPv6\": false,\n    \"Internal\": false,\n    \"IPAM\": {\n      \"Driver\": \"default\",\n      \"Config\": [\n        {\n          \"Subnet\": \"172.17.0.0/16\"\n        }\n      ]\n    },\n    \"Containers\": {\n      \"39b69226f9d79f5634485fb236a23b2fe4e96a0a94128390a7fbbcc167065867\": {\n        \"EndpointID\": \"ed2419a97c1d9954d05b46e462e7002ea552f216e9b136b80a7db8d98b442eda\",\n        \"MacAddress\": \"02:42:ac:11:00:02\",\n        \"IPv4Address\": \"172.17.0.2/16\",\n        \"IPv6Address\": \"\"\n      }\n    },\n    \"Options\": {\n      \"com.docker.network.bridge.default_bridge\": \"true\",\n      \"com.docker.network.bridge.enable_icc\": \"true\",\n      \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n      \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n      \"com.docker.network.bridge.name\": \"docker0\",\n      \"com.docker.network.driver.mtu\": \"1500\"\n    }\n  },\n  {\n    \"Name\": \"none\",\n    \"Id\": \"e086a3893b05ab69242d3c44e49483a3bbbd3a26b46baa8f61ab797c1088d794\",\n    \"Scope\": \"local\",\n    \"Driver\": \"null\",\n    \"EnableIPv6\": false,\n    \"Internal\": false,\n    \"IPAM\": {\n      \"Driver\": \"default\",\n      \"Config\": []\n    },\n    \"Containers\": {},\n    \"Options\": {}\n  },\n  {\n    \"Name\": \"host\",\n    \"Id\": \"13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e\",\n    \"Scope\": \"local\",\n    \"Driver\": \"host\",\n    \"EnableIPv6\": false,\n    \"Internal\": false,\n    \"IPAM\": {\n      \"Driver\": \"default\",\n      \"Config\": []\n    },\n    \"Containers\": {},\n    \"Options\": {}\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuration for Docker Documentation Page using YAML\nDESCRIPTION: YAML front matter that configures a documentation page with title 'Useful components', sets the build rendering to 'never', and assigns a weight of 50 for ordering purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Useful components\nweight: 50\n---\n```\n\n----------------------------------------\n\nTITLE: Upgrading Docker Desktop\nDESCRIPTION: Commands to remove the existing Docker Desktop installation and install a new version\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/rhel.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf remove docker-desktop\n$ sudo dnf install ./docker-desktop-<arch>-rhel.rpm\n```\n\n----------------------------------------\n\nTITLE: Verifying registry.json content on Linux\nDESCRIPTION: This command verifies the content of the registry.json file on Linux to ensure it contains the correct organization information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ sudo cat /usr/share/docker-desktop/registry/registry.json\n{\"allowedOrgs\":[\"myorg\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring VM Service with Compose File Reference\nDESCRIPTION: Alternative configuration for the VM section that references an external compose.yaml file instead of directly specifying an image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/architecture/metadata.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"vm\": {\n    \"composefile\": \"compose.yaml\"\n},\n```\n\n----------------------------------------\n\nTITLE: Defining onClose Callback for Command Execution in TypeScript\nDESCRIPTION: This code defines the onClose callback function that is invoked when the process exits. It receives the exit code from the completed process.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExecStreamOptions.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonClose?: (exitCode: number) => void\n```\n\n----------------------------------------\n\nTITLE: Pinning Alpine Image to a Specific Tag in Dockerfile\nDESCRIPTION: A basic Dockerfile that uses Alpine as the base image. This will be referenced in a GitHub Actions workflow to demonstrate pinning to a specific version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/named-contexts.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine\nRUN echo \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Build Steps with LLB Definition in SLSA Provenance\nDESCRIPTION: Example of the 'buildConfig.llbDefinition' field which details the specific build steps performed during the build. This is only included in max attestation mode and reflects BuildKit's internal LLB definition used to execute build steps.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n  \"buildConfig\": {\n    \"llbDefinition\": [\n      {\n        \"id\": \"step0\",\n        \"op\": {\n          \"Op\": {\n            \"exec\": {\n              \"meta\": {\n                \"args\": [\n                  \"/bin/sh\",\n                  \"-c\",\n                  \"go build .\"\n                ],\n                \"env\": [\n                  \"PATH=/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n                  \"GOPATH=/go\",\n                  \"GOFLAGS=-mod=vendor\",\n                ],\n                \"cwd\": \"/src\",\n              },\n              \"mounts\": [...]\n            }\n          },\n          \"platform\": {...},\n        },\n        \"inputs\": [\n          \"step8:0\",\n          \"step2:0\",\n        ]\n      },\n      ...\n    ]\n  },\n```\n\n----------------------------------------\n\nTITLE: Setting Entrypoint Script Permissions in Dockerfile\nDESCRIPTION: Makes the entrypoint script executable in the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_18\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN chmod +x /app/entrypoint.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Table in MySQL Container\nDESCRIPTION: Uses docker exec to run a MySQL command inside the container, creating a table and inserting data.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ docker exec my-mysql mysql -u root -pmy-secret-pw -e \"CREATE TABLE IF NOT EXISTS mydb.mytable (column_name VARCHAR(255)); INSERT INTO mydb.mytable (column_name) VALUES ('value');\"\n```\n\n----------------------------------------\n\nTITLE: Passing Secret from File to Docker Build using CLI\nDESCRIPTION: Example showing how to pass an AWS credentials file as a secret to the Docker build command using the --secret flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --secret id=aws,src=$HOME/.aws/credentials .\n```\n\n----------------------------------------\n\nTITLE: Container Lifecycle Management with Gordon CLI\nDESCRIPTION: Commands for managing container lifecycle including running new containers, stopping specific containers, and cleanup operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/built-in-tools.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# Run a new container\n$ docker ai \"Run a nginx container with port 80 exposed to localhost\"\n\n# Stop a specific container\n$ docker ai \"Stop my database container\"\n\n# Clean up unused containers\n$ docker ai \"Remove all stopped containers\"\n```\n\n----------------------------------------\n\nTITLE: Collapsible Dockerfile Configuration\nDESCRIPTION: A complex Dockerfile example showing multi-stage builds with SSH configuration and Go build process\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nARG GO_VERSION=\"1.21\"\n\nFROM golang:${GO_VERSION}-alpine AS base\nENV CGO_ENABLED=0\nENV GOPRIVATE=\"github.com/foo/*\"\nRUN apk add --no-cache file git rsync openssh-client\nRUN mkdir -p -m 0700 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts\nWORKDIR /src\n\nFROM base AS vendor\n# this step configure git and checks the ssh key is loaded\nRUN --mount=type=ssh <<EOT\n  set -e\n  echo \"Setting Git SSH protocol\"\n  git config --global url.\"git@github.com:\".insteadOf \"https://github.com/\"\n  (\n    set +e\n    ssh -T git@github.com\n    if [ ! \"$?\" = \"1\" ]; then\n      echo \"No GitHub SSH key loaded exiting...\"\n      exit 1\n    fi\n  )\nEOT\n# this one download go modules\nRUN --mount=type=bind,target=. \\\n    --mount=type=cache,target=/go/pkg/mod \\\n    --mount=type=ssh \\\n    go mod download -x\n\nFROM vendor AS build\nRUN --mount=type=bind,target=. \\\n    --mount=type=cache,target=/go/pkg/mod \\\n    --mount=type=cache,target=/root/.cache \\\n    go build ...\n```\n\n----------------------------------------\n\nTITLE: Restricting Container Resource Usage in Docker\nDESCRIPTION: This command limits a PostgreSQL container's resource consumption by setting a memory limit of 512MB and restricting CPU usage to half a core (0.5). It also sets a password environment variable.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -e POSTGRES_PASSWORD=secret --memory=\"512m\" --cpus=\"0.5\" postgres\n```\n\n----------------------------------------\n\nTITLE: Verifying Delegation Updates After Key Removal\nDESCRIPTION: This command checks the remaining delegation list after key removal to confirm that only the desired keys remain in the repository's delegations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ notary delegation list registry.example.com/admin/demo\n\nROLE                PATHS             KEY IDS                                                             THRESHOLD\n----                -----             -------                                                             ---------\ntargets/jeff        \"\" <all paths>    8fb597cbaf196f0781628b2f52bff6b3912e4e8075720378fda60d17232bbcf9    1    \ntargets/releases    \"\" <all paths>    8fb597cbaf196f0781628b2f52bff6b3912e4e8075720378fda60d17232bbcf9    1    \n```\n\n----------------------------------------\n\nTITLE: Verifying Docker is Using Btrfs Storage Driver\nDESCRIPTION: Command to check Docker system information and verify that the Btrfs storage driver is active after configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/btrfs-driver.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker info\n\nContainers: 0\n Running: 0\n Paused: 0\n Stopped: 0\nImages: 0\nServer Version: 17.03.1-ce\nStorage Driver: btrfs\n Build Version: Btrfs v4.4\n Library Version: 101\n<...>\n```\n\n----------------------------------------\n\nTITLE: Extending PHP-FPM Production Image for Development with Xdebug\nDESCRIPTION: Dockerfile that extends a production PHP-FPM image to create a development environment with Xdebug debugging support. It configures user permissions to match the host user and includes dynamic adjustment of PHP-FPM settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/development-setup.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Builds a dev-only layer on top of the production image\nFROM production AS development\n\n# Use ARGs to define environment variables passed from the Docker build command or Docker Compose.\nARG XDEBUG_ENABLED=true\nARG XDEBUG_MODE=develop,coverage,debug,profile\nARG XDEBUG_HOST=host.docker.internal\nARG XDEBUG_IDE_KEY=DOCKER\nARG XDEBUG_LOG=/dev/stdout\nARG XDEBUG_LOG_LEVEL=0\n\nUSER root\n\n# Configure Xdebug if enabled\nRUN if [ \"${XDEBUG_ENABLED}\" = \"true\" ]; then \\\n    pecl install xdebug && \\\n    docker-php-ext-enable xdebug && \\\n    echo \"xdebug.mode=${XDEBUG_MODE}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \\\n    echo \"xdebug.idekey=${XDEBUG_IDE_KEY}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \\\n    echo \"xdebug.log=${XDEBUG_LOG}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \\\n    echo \"xdebug.log_level=${XDEBUG_LOG_LEVEL}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \\\n    echo \"xdebug.client_host=${XDEBUG_HOST}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini ; \\\n    echo \"xdebug.start_with_request=yes\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini ; \\\nfi\n\n# Add ARGs for syncing permissions\nARG UID=1000\nARG GID=1000\n\n# Create a new user with the specified UID and GID, reusing an existing group if GID exists\nRUN if getent group ${GID}; then \\\n      group_name=$(getent group ${GID} | cut -d: -f1); \\\n      useradd -m -u ${UID} -g ${GID} -s /bin/bash www; \\\n    else \\\n      groupadd -g ${GID} www && \\\n      useradd -m -u ${UID} -g www -s /bin/bash www; \\\n      group_name=www; \\\n    fi\n\n# Dynamically update php-fpm to use the new user and group\nRUN sed -i \"s/user = www-data/user = www/g\" /usr/local/etc/php-fpm.d/www.conf && \\\n    sed -i \"s/group = www-data/group = $group_name/g\" /usr/local/etc/php-fpm.d/www.conf\n\n\n# Set the working directory\nWORKDIR /var/www\n\n# Copy the entrypoint script\nCOPY ./docker/development/php-fpm/entrypoint.sh /usr/local/bin/entrypoint.sh\nRUN chmod +x /usr/local/bin/entrypoint.sh\n\n# Switch back to the non-privileged user to run the application\nUSER www-data\n\n# Change the default command to run the entrypoint script\nENTRYPOINT [\"/usr/local/bin/entrypoint.sh\"]\n\n# Expose port 9000 and start php-fpm server\nEXPOSE 9000\nCMD [\"php-fpm\"]\n```\n\n----------------------------------------\n\nTITLE: Unsetting Default Cloud Builder\nDESCRIPTION: Command to revert back to the default docker builder from cloud builder.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/usage.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker context use default\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Deployment and Service Configuration for Deno Application\nDESCRIPTION: A Kubernetes YAML configuration that defines a Deployment with one replica of a Deno application container and a NodePort Service that exposes the application on port 30001, mapping to the container's port 8000.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: docker-deno-demo\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: deno-api\n  template:\n    metadata:\n      labels:\n        app: deno-api\n    spec:\n      containers:\n       - name: deno-api\n         image: DOCKER_USERNAME/REPO_NAME\n         imagePullPolicy: Always\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: service-entrypoint\n  namespace: default\nspec:\n  type: NodePort\n  selector:\n    app: deno-api\n  ports:\n  - port: 8000\n    targetPort: 8000\n    nodePort: 30001\n```\n\n----------------------------------------\n\nTITLE: Making HTTP DELETE Request with Docker Extension API\nDESCRIPTION: Performs an HTTP DELETE request to a backend service using the Docker client extension VM service. Returns a promise that resolves to the response data.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/HttpService.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.extension.vm.service\n .delete(\"/some/service\")\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Verifying User Subordinate ID Mappings for Docker Desktop on Linux\nDESCRIPTION: Commands to verify that the user subordinate ID mappings have been correctly set up in the /etc/subuid and /etc/subgid files. These commands display the current username and the contents of both configuration files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/linuxfaqs.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ echo $USER\nexampleuser\n$ cat /etc/subuid\nexampleuser:100000:65536\n$ cat /etc/subgid\nexampleuser:100000:65536\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Containers and Networks\nDESCRIPTION: This snippet demonstrates how to stop and remove all containers used in the networking tutorial and delete the custom alpine-net network. It's a cleanup procedure that should be run after completing the tutorial.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ docker container stop alpine1 alpine2 alpine3 alpine4\n\n$ docker container rm alpine1 alpine2 alpine3 alpine4\n\n$ docker network rm alpine-net\n```\n\n----------------------------------------\n\nTITLE: Additional Release Date Template Examples\nDESCRIPTION: Hugo shortcode examples for release dates of Docker Desktop versions 4.1.0, 4.0.1, and 4.0.0.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n{{< release-date date=\"2021-09-30\" >}}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{< release-date date=\"2021-09-13\" >}}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{< release-date date=\"2021-08-31\" >}}\n```\n\n----------------------------------------\n\nTITLE: ETW Event Message Format Structure\nDESCRIPTION: The structured format template used for ETW event messages that contains container name, image details, source, and log message.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/etwlogs.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncontainer_name: %s, image_name: %s, container_id: %s, image_id: %s, source: [stdout | stderr], log: %s\n```\n\n----------------------------------------\n\nTITLE: Maximal Mode Provenance Attestation\nDESCRIPTION: Example of a provenance attestation generated with mode=max, including additional details like LLB definition and source code mapping.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_type\": \"https://in-toto.io/Statement/v0.1\",\n  \"predicateType\": \"https://slsa.dev/provenance/v0.2\",\n  \"subject\": [\n    {\n      \"name\": \"pkg:docker/<registry>/<image>@<tag/digest>?platform=<platform>\",\n      \"digest\": {\n        \"sha256\": \"e8275b2b76280af67e26f068e5d585eb905f8dfd2f1918b3229db98133cb4862\"\n      }\n    }\n  ],\n  \"predicate\": {\n    \"builder\": {\n      \"id\": \"\"\n    },\n    \"buildType\": \"https://mobyproject.org/buildkit@v1\",\n    \"materials\": [\n      {\n        \"uri\": \"pkg:docker/alpine@latest?platform=linux%2Famd64\",\n        \"digest\": {\n          \"sha256\": \"8914eb54f968791faf6a8638949e480fef81e697984fba772b3976835194c6d4\"\n        }\n      }\n    ],\n    \"invocation\": {\n      \"configSource\": {\n        \"entryPoint\": \"Dockerfile\"\n      },\n      \"parameters\": {\n        \"frontend\": \"dockerfile.v0\",\n        \"args\": {},\n        \"locals\": [\n          {\n            \"name\": \"context\"\n          },\n          {\n            \"name\": \"dockerfile\"\n          }\n        ]\n      },\n      \"environment\": {\n        \"platform\": \"linux/amd64\"\n      }\n    },\n    \"buildConfig\": {\n      \"llbDefinition\": [\n        {\n          \"id\": \"step0\",\n          \"op\": {\n            \"Op\": {\n              \"source\": {\n                \"identifier\": \"docker-image://docker.io/library/alpine:latest@sha256:8914eb54f968791faf6a8638949e480fef81e697984fba772b3976835194c6d4\"\n              }\n            },\n            \"platform\": {\n              \"Architecture\": \"amd64\",\n              \"OS\": \"linux\"\n            },\n            \"constraints\": {}\n          }\n        },\n        {\n          \"id\": \"step1\",\n          \"op\": {\n            \"Op\": null\n          },\n          \"inputs\": [\"step0:0\"]\n        }\n      ]\n    },\n    \"metadata\": {\n      \"buildInvocationID\": \"46ue2x93k3xj5l463dektwldw\",\n      \"buildStartedOn\": \"2022-12-08T11:50:54.953375437Z\",\n      \"buildFinishedOn\": \"2022-12-08T11:50:55.447841328Z\",\n      \"reproducible\": false,\n      \"completeness\": {\n        \"parameters\": true,\n        \"environment\": true,\n        \"materials\": false\n      },\n      \"https://mobyproject.org/buildkit@v1#metadata\": {\n        \"source\": {\n          \"locations\": {\n            \"step0\": {\n              \"locations\": [\n                {\n                  \"ranges\": [\n                    {\n                      \"start\": {\n                        \"line\": 1\n                      },\n                      \"end\": {\n                        \"line\": 1\n                      }\n                    }\n                  ]\n                }\n              ]\n            }\n          },\n          \"infos\": [\n            {\n              \"filename\": \"Dockerfile\",\n              \"data\": \"RlJPTSBhbHBpbmU6bGF0ZXN0Cg==\",\n              \"llbDefinition\": [\n                {\n                  \"id\": \"step0\",\n                  \"op\": {\n                    \"Op\": {\n                      \"source\": {\n                        \"identifier\": \"local://dockerfile\",\n                        \"attrs\": {\n                          \"local.differ\": \"none\",\n                          \"local.followpaths\": \"[\\\"Dockerfile\\\",\\\"Dockerfile.dockerignore\\\",\\\"dockerfile\\\"]\",\n                          \"local.session\": \"q2jnwdkas0i0iu4knchd92jaz\",\n                          \"local.sharedkeyhint\": \"dockerfile\"\n                        }\n                      }\n                    },\n                    \"constraints\": {}\n                  }\n                },\n                {\n                  \"id\": \"step1\",\n                  \"op\": {\n                    \"Op\": null\n                  },\n                  \"inputs\": [\"step0:0\"]\n                }\n              ]\n            }\n          ]\n        },\n        \"layers\": {\n          \"step0:0\": [\n            [\n              {\n                \"mediaType\": \"application/vnd.oci.image.layer.v1.tar+gzip\",\n                \"digest\": \"sha256:c158987b05517b6f2c5913f3acef1f2182a32345a304fe357e3ace5fadcad715\",\n                \"size\": 3370706\n              }\n            ]\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Docker Image to a Registry\nDESCRIPTION: Command to push a Docker image to a registry. This uploads all image layers to the registry, making the image available for others to pull.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndocker push my-username/my-image\n```\n\n----------------------------------------\n\nTITLE: Displaying Base Image Update Recommendations with Docker Scout\nDESCRIPTION: Example showing how to use the docker scout recommendations command to display base image update recommendations for a golang image.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_recommendations.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout recommendations golang:1.19.4\n```\n\n----------------------------------------\n\nTITLE: Sample .dockerignore File for Reducing Build Context\nDESCRIPTION: A basic .dockerignore file that excludes node_modules directory and temporary files from the build context to reduce the amount of data sent to the builder.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#2025-04-11_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nnode_modules\ntmp*\n```\n\n----------------------------------------\n\nTITLE: Jekyll Build Configuration in YAML\nDESCRIPTION: Frontend matter configuration for Jekyll build system specifying that this directory should never be listed, rendered, or have its resources published.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/README.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_build:\n  list: never\n  publishResources: false\n  render: never\n```\n\n----------------------------------------\n\nTITLE: Listing Neo4j Relationship Types\nDESCRIPTION: Cypher query to list all relationship types defined in the Neo4j database. Helps to understand the connections between different nodes in the graph.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-leveraging-rag/index.md#2025-04-11_snippet_7\n\nLANGUAGE: cypher\nCODE:\n```\nCALL db.relationshipTypes()\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Desktop via CLI\nDESCRIPTION: Command to start Docker Desktop from the command line. Note that this command cannot be executed via SSH on Windows systems due to WinCred credential storage limitations.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/start.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker desktop start\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop MSI Interactively without Verbose Logging in PowerShell\nDESCRIPTION: Basic command to install Docker Desktop MSI interactively without verbose logging, displaying the user interface for configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /i \"DockerDesktop.msi\"\n```\n\n----------------------------------------\n\nTITLE: Setting Git Origin and Pushing to GitHub Repository\nDESCRIPTION: These commands configure the local Git repository to connect to the remote GitHub repository, rename the branch to main, and push the local code to GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/configure-ci-cd.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git remote set-url origin https://github.com/your-username/your-repository.git\n```\n\nLANGUAGE: console\nCODE:\n```\n$ git branch -M main\n```\n\nLANGUAGE: console\nCODE:\n```\n$ git add -A\n$ git commit -m \"my first commit\"\n$ git push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Docker Client Binary on Linux\nDESCRIPTION: This snippet shows how to download the Docker client binary for Linux using wget, extract it, and move it to the /usr/local/bin directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/archlinux.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wget https://download.docker.com/linux/static/stable/x86_64/docker-{{% param \"docker_ce_version\" %}}.tgz -qO- | tar xvfz - docker/docker --strip-components=1\n$ mv ./docker /usr/local/bin\n```\n\n----------------------------------------\n\nTITLE: Listing Environment Images\nDESCRIPTION: Command to display all images associated with a specific Docker Scout environment (staging in this example).\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_environment.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout environment staging\nnamespace/repo:tag@sha256:9a4df4fadc9bbd44c345e473e0688c2066a6583d4741679494ba9228cfd93e1b\nnamespace/other-repo:tag@sha256:0001d6ce124855b0a158569c584162097fe0ca8d72519067c2c8e3ce407c580f\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Documentation\nDESCRIPTION: YAML front matter that configures the documentation page for the 'docker system info' command. It specifies the data folder, data file, page title, aliases for redirects, and the layout type.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/system/info.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_system_info\ntitle: docker system info\naliases:\n- /edge/engine/reference/commandline/system_info/\n- /engine/reference/commandline/system_info/\n- /engine/reference/commandline/info/\n- /reference/cli/docker/info/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries\nDESCRIPTION: Python imports for NLTK sentiment analysis, including the SentimentIntensityAnalyzer and SSL modules.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nimport ssl\n```\n\n----------------------------------------\n\nTITLE: Listing Available Docker Engine Versions on Raspberry Pi OS\nDESCRIPTION: Displays all available versions of Docker Engine in the configured repository. This is useful when you need to install a specific version rather than the latest one.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# List the available versions:\n$ apt-cache madison docker-ce | awk '{ print $3 }'\n\n5:25.0.3-1~raspbian.12~bookworm\n5:24.0.7-1~raspbian.12~bookworm\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Static IP Addresses for Docker Compose Services\nDESCRIPTION: Specifies static IPv4 and IPv6 addresses for a service container when joining a network. Requires corresponding subnet configuration in the networks section.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    networks:\n      front-tier:\n        ipv4_address: 172.16.238.10\n        ipv6_address: 2001:3984:3989::10\n\nnetworks:\n  front-tier:\n    ipam:\n      driver: default\n      config:\n        - subnet: \"172.16.238.0/24\"\n        - subnet: \"2001:3984:3989::/64\"\n```\n\n----------------------------------------\n\nTITLE: Tagging a Docker Image for Publishing\nDESCRIPTION: Command to rename a local Docker image with your Docker Hub username, preparing it for pushing to Docker Hub. This tags the local image 'my-jupyter-image' for the specified repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker tag my-jupyter-image YOUR-USER-NAME/my-jupyter-image\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Glossary Page\nDESCRIPTION: YAML configuration block that defines metadata for the Docker glossary documentation page, including title, description, keywords and page aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/glossary.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Glossary\ndescription: Glossary of terms used around Docker\nkeywords: glossary, docker, terms, definitions\nnotoc: true\naliases:\n- /engine/reference/glossary/\n- /glossary/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Air-gapped Containers in Docker Desktop with admin-settings.json\nDESCRIPTION: Example configuration for the admin-settings.json file that defines container proxy settings. It specifies the proxy mode, PAC file location, and which ports should be proxied. This configuration enables administrators to control network access from containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/air-gapped-containers.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configurationFileVersion\": 2,\n  \"containersProxy\": {\n    \"locked\": true,\n    \"mode\": \"manual\",\n    \"http\": \"\",\n    \"https\": \"\",\n    \"exclude\": [],\n    \"pac\": \"http://192.168.1.16:62039/proxy.pac\",\n    \"transparentPorts\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Containers View in TypeScript\nDESCRIPTION: Demonstrates how to navigate to the containers window in Docker Desktop using the DockerDesktopClient interface. This method is deprecated and will be replaced with viewContainers in the future.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/DockerDesktopClient.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.navigateToContainers();\n```\n\n----------------------------------------\n\nTITLE: Installing gnome-terminal for Docker Desktop on Fedora\nDESCRIPTION: Command to install gnome-terminal on Fedora systems when not using GNOME desktop environment. This package is required to enable terminal access from Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/fedora.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install gnome-terminal\n```\n\n----------------------------------------\n\nTITLE: Bash Job Control Script Implementation\nDESCRIPTION: A script utilizing Bash's job control features to manage multiple processes. Allows for a main process to run in the background while helper processes execute temporarily.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/multi-service_container.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# turn on bash's job control\nset -m\n\n# Start the primary process and put it in the background\n./my_main_process &\n\n# Start the helper process\n./my_helper_process\n\n# the my_helper_process might need to know how to wait on the\n# primary process to start before it does its work and returns\n\n\n# now we bring the primary process back into the foreground\n# and leave it there\nfg %1\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker to Start on Boot with Systemd in Linux\nDESCRIPTION: Commands to enable or disable automatic startup of Docker and containerd services on system boot using systemd, applicable to many modern Linux distributions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/linux-postinstall.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl enable docker.service\n$ sudo systemctl enable containerd.service\n```\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl disable docker.service\n$ sudo systemctl disable containerd.service\n```\n\n----------------------------------------\n\nTITLE: Joining a Manager Node to Docker Swarm\nDESCRIPTION: This command joins a manager node to a Docker swarm. It uses the manager token provided by an existing manager node and specifies the manager's address to connect to the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/join-nodes.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker swarm join \\\n  --token SWMTKN-1-61ztec5kyafptydic6jfc1i33t37flcl4nuipzcusor96k7kby-5vy9t8u35tuqm7vh67lrz9xp6 \\\n  192.168.99.100:2377\n\nThis node joined a swarm as a manager.\n```\n\n----------------------------------------\n\nTITLE: Listing Shared Ports in Project Harmonia\nDESCRIPTION: This command lists all shared ports for the current Docker context in Project Harmonia. It shows how to manage and monitor exposed ports in the cloud environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker harmonia engine share list\n```\n\n----------------------------------------\n\nTITLE: Setting Build Arguments as a Mapping\nDESCRIPTION: Example of setting build arguments as a key-value mapping in the build configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  args:\n    GIT_COMMIT: cdc3b19\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop PKG via Command Line on macOS\nDESCRIPTION: Command to install Docker Desktop using the PKG installer from the terminal. Requires sudo privileges and specifies the path to the Docker.pkg file with the Applications directory as the installation target.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/pkg-install-and-configure.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo installer -pkg \"/path/to/Docker.pkg\" -target /Applications\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Remove Response Format\nDESCRIPTION: JSON response format for the Remove endpoint in the volume plugin protocol. The response includes an error field that is empty on success.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Sorted Multi-line Arguments\nDESCRIPTION: Example from the buildpack-deps image showing how to sort multi-line arguments alphanumerically for better readability and maintenance. This pattern makes updates and reviews easier.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n  bzr \\\n  cvs \\\n  git \\\n  mercurial \\\n  subversion \\\n  && rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Tagging a Docker Image with a Specific Namespace, Repository, and Version\nDESCRIPTION: An example of the docker tag command that tags a local image 'my-app' for the repository 'my-namespace/my-repo' with the version tag 'v1.0'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/hub-images/push.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker tag my-app my-namespace/my-repo:v1.0\n```\n\n----------------------------------------\n\nTITLE: Running Detached Alpine Container\nDESCRIPTION: Starts a detached interactive Alpine container on the second host connected to the overlay network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -dit --name alpine2 --network test-net alpine\n```\n\n----------------------------------------\n\nTITLE: Docker Scout Slack Integration YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration for the documentation page defining title, link title, description and keywords for the Docker Scout Slack integration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/team-collaboration/slack.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Integrate Docker Scout with Slack\nlinkTitle: Slack\ndescription: |\n  Integrate Docker Scout with Slack to receive real-time updates\n  about vulnerabilities and policy compliance in Slack channels\nkeywords: scout, team collaboration, slack, notifications, updates\n---\n```\n\n----------------------------------------\n\nTITLE: Docker Secret Documentation File Header in YAML\nDESCRIPTION: YAML frontmatter that defines metadata for the documentation page, including the title, data locations, and layout information.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/secret/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_secret\ntitle: docker secret\naliases:\n- /edge/engine/reference/commandline/secret/\n- /engine/reference/commandline/secret/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Container Prune Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker container prune command documentation page, including data folder structure, file name, page title, URL aliases, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/prune.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_container_prune\ntitle: docker container prune\naliases:\n- /edge/engine/reference/commandline/container_prune/\n- /engine/reference/commandline/container_prune/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Resources on Linux\nDESCRIPTION: Command to remove all unused Docker resources including stopped containers, unused networks, dangling images, and build cache. This helps reclaim disk space.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/linuxfaqs.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker system prune\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Non-Marketplace Docker Extension\nDESCRIPTION: This command uninstalls a Docker Extension using its image reference and optional tag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/non-marketplace.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker extension uninstall IMAGE[:TAG]\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Watch Command Options Table\nDESCRIPTION: Markdown table describing the available options for the docker compose watch command, including dry-run mode, no-up flag, pruning settings, and quiet mode options.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_watch.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type   | Default | Description                                   |\n|:------------|:-------|:--------|:----------------------------------------------|\n| `--dry-run` | `bool` |         | Execute command in dry run mode               |\n| `--no-up`   | `bool` |         | Do not build & start services before watching |\n| `--prune`   | `bool` | `true`  | Prune dangling images on rebuild              |\n| `--quiet`   | `bool` |         | hide build output                             |\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Subnet IPvlan L2 Network\nDESCRIPTION: Demonstrates how to create an IPvlan network with multiple subnets and gateways. This example creates an L2 mode network with two different subnets and runs containers with specific IP addresses.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create -d ipvlan \\\n    --subnet=192.168.114.0/24 --subnet=192.168.116.0/24 \\\n    --gateway=192.168.114.254 --gateway=192.168.116.254 \\\n    -o parent=eth0.114 \\\n    -o ipvlan_mode=l2 ipvlan114\n\n$ docker run --net=ipvlan114 --ip=192.168.114.10 -it --rm alpine /bin/sh\n$ docker run --net=ipvlan114 --ip=192.168.114.11 -it --rm alpine /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Stopping the Deno Application Container\nDESCRIPTION: Command to stop and remove the running Deno application container managed by Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/containerize.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Hypervisor Support Check Command\nDESCRIPTION: Terminal command to verify if a Mac supports Apple's Hypervisor framework.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/topics.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sysctl kern.hv_support\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Engine API v1.29 Documentation\nDESCRIPTION: YAML frontmatter that configures the documentation page for Docker Engine API v1.29. It specifies the link title, page title, and URL aliases for backward compatibility.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.29.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.29\ntitle: Docker Engine API v1.29 reference\naliases:\n  - /engine/api/v1.29/\n---\n```\n\n----------------------------------------\n\nTITLE: Installing and configuring GenAI stack with CPU on Linux\nDESCRIPTION: This bash script shows how to set up the GenAI stack using CPU resources on a Linux host. It includes cloning the repository, starting the containers using Docker Compose with the linux profile, and configuring the environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-leveraging-rag/index.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/docker/genai-stack\ndocker compose --profile linux up -d\nmv env.example .env\nnano .env\n```\n\n----------------------------------------\n\nTITLE: Listing Running Containers in Project Harmonia\nDESCRIPTION: This command lists all running containers in the cloud engine. It shows how to monitor active containers in the cloud environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Defining Variables and Targets with Arithmetic in HCL\nDESCRIPTION: This snippet demonstrates defining a numeric variable and using it in multiple targets, including arithmetic operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/overrides.md#2025-04-11_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\nvariable \"PORT\" {\n  default = 3000\n}\n\ngroup \"default\" {\n  targets = [\"backend\", \"frontend\"]\n}\n\ntarget \"backend\" {\n  args = {\n    PORT = PORT\n  }\n}\n\ntarget \"frontend\" {\n  args = {\n    PORT = add(PORT, 1)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Permissions for Docker Compose on Linux\nDESCRIPTION: Command to set executable permissions on the Docker Compose binary after downloading, allowing it to be run as a command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/standalone.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ chmod +x /usr/local/bin/docker-compose\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Compose Version Documentation\nDESCRIPTION: YAML frontmatter configuration block defining metadata for the Docker Compose version command documentation page, including layout settings and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/version.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_version\ntitle: docker compose version\nlayout: cli\naliases:\n- /engine/reference/commandline/compose_version/\n---\n```\n\n----------------------------------------\n\nTITLE: Error Response Format in Docker Engine API\nDESCRIPTION: Shows the standard JSON error response format used by the Docker Engine API when returning error messages. The response includes an HTTP status code and a JSON body containing a message field.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"page not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Build Output Showing Local Files in Container\nDESCRIPTION: Output from the build process showing that the local files 'foo' and 'bar' were successfully copied into the container workspace, demonstrating the use of local context with a remote Bake definition.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#2025-04-11_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n...\n > [4/4] RUN ls -l && stop:\n#8 0.101 total 0\n#8 0.102 -rw-r--r--    1 root     root             0 Jul 27 18:47 bar\n#8 0.102 -rw-r--r--    1 root     root             0 Jul 27 18:47 foo\n#8 0.102 /bin/sh: stop: not found\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Details with Docker API\nDESCRIPTION: Demonstrates how to get low-level information about a Docker container by ID or name using the API. The response includes detailed configuration, state, networking, and mount information.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/json HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n\t\"AppArmorProfile\": \"\",\n\t\"Args\": [\n\t\t\"-c\",\n\t\t\"exit 9\"\n\t],\n\t\"Config\": {\n\t\t\"AttachStderr\": true,\n\t\t\"AttachStdin\": false,\n\t\t\"AttachStdout\": true,\n\t\t\"Cmd\": [\n\t\t\t\"/bin/sh\",\n\t\t\t\"-c\",\n\t\t\t\"exit 9\"\n\t\t],\n\t\t\"Domainname\": \"\",\n\t\t\"Entrypoint\": null,\n\t\t\"Env\": [\n\t\t\t\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n\t\t],\n\t\t\"ExposedPorts\": null,\n\t\t\"Hostname\": \"ba033ac44011\",\n\t\t\"Image\": \"ubuntu\",\n\t\t\"Labels\": {\n\t\t\t\"com.example.vendor\": \"Acme\",\n\t\t\t\"com.example.license\": \"GPL\",\n\t\t\t\"com.example.version\": \"1.0\"\n\t\t},\n\t\t\"MacAddress\": \"\",\n\t\t\"NetworkDisabled\": false,\n\t\t\"OnBuild\": null,\n\t\t\"OpenStdin\": false,\n\t\t\"StdinOnce\": false,\n\t\t\"Tty\": false,\n\t\t\"User\": \"\",\n\t\t\"Volumes\": {\n\t\t\t\"/volumes/data\": {}\n\t\t},\n\t\t\"WorkingDir\": \"\",\n\t\t\"StopSignal\": \"SIGTERM\"\n\t},\n\t\"Created\": \"2015-01-06T15:47:31.485331387Z\",\n\t\"Driver\": \"overlay2\",\n\t\"ExecIDs\": null,\n\t\"HostConfig\": {\n\t\t\"Binds\": null,\n\t\t\"IOMaximumBandwidth\": 0,\n\t\t\"IOMaximumIOps\": 0,\n\t\t\"BlkioWeight\": 0,\n\t\t\"BlkioWeightDevice\": [{}],\n\t\t\"BlkioDeviceReadBps\": [{}],\n\t\t\"BlkioDeviceWriteBps\": [{}],\n\t\t\"BlkioDeviceReadIOps\": [{}],\n\t\t\"BlkioDeviceWriteIOps\": [{}],\n\t\t\"CapAdd\": null,\n\t\t\"CapDrop\": null,\n\t\t\"ContainerIDFile\": \"\",\n\t\t\"CpusetCpus\": \"\",\n\t\t\"CpusetMems\": \"\",\n\t\t\"CpuPercent\": 80,\n\t\t\"CpuShares\": 0,\n\t\t\"CpuPeriod\": 100000,\n\t\t\"Devices\": [],\n\t\t\"Dns\": null,\n\t\t\"DnsOptions\": null,\n\t\t\"DnsSearch\": null,\n\t\t\"ExtraHosts\": null,\n\t\t\"IpcMode\": \"\",\n\t\t\"Links\": null,\n\t\t\"Memory\": 0,\n\t\t\"MemorySwap\": 0,\n\t\t\"MemoryReservation\": 0,\n\t\t\"KernelMemory\": 0,\n\t\t\"OomKillDisable\": false,\n\t\t\"OomScoreAdj\": 500,\n\t\t\"NetworkMode\": \"bridge\",\n\t\t\"PidMode\": \"\",\n\t\t\"PortBindings\": {},\n\t\t\"Privileged\": false,\n\t\t\"ReadonlyRootfs\": false,\n\t\t\"PublishAllPorts\": false,\n\t\t\"RestartPolicy\": {\n\t\t\t\"MaximumRetryCount\": 2,\n\t\t\t\"Name\": \"on-failure\"\n\t\t},\n\t\t\"LogConfig\": {\n\t\t\t\"Config\": null,\n\t\t\t\"Type\": \"json-file\"\n\t\t},\n\t\t\"SecurityOpt\": null,\n\t\t\"Sysctls\": {\n\t\t        \"net.ipv4.ip_forward\": \"1\"\n\t\t},\n\t\t\"StorageOpt\": null,\n\t\t\"VolumesFrom\": null,\n\t\t\"Ulimits\": [{}],\n\t\t\"VolumeDriver\": \"\",\n\t\t\"ShmSize\": 67108864\n\t},\n\t\"HostnamePath\": \"/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname\",\n\t\"HostsPath\": \"/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts\",\n\t\"LogPath\": \"/var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log\",\n\t\"Id\": \"ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39\",\n\t\"Image\": \"04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2\",\n\t\"MountLabel\": \"\",\n\t\"Name\": \"/boring_euclid\",\n\t\"NetworkSettings\": {\n\t\t\"Bridge\": \"\",\n\t\t\"SandboxID\": \"\",\n\t\t\"HairpinMode\": false,\n\t\t\"LinkLocalIPv6Address\": \"\",\n\t\t\"LinkLocalIPv6PrefixLen\": 0,\n\t\t\"Ports\": null,\n\t\t\"SandboxKey\": \"\",\n\t\t\"SecondaryIPAddresses\": null,\n\t\t\"SecondaryIPv6Addresses\": null,\n\t\t\"EndpointID\": \"\",\n\t\t\"Gateway\": \"\",\n\t\t\"GlobalIPv6Address\": \"\",\n\t\t\"GlobalIPv6PrefixLen\": 0,\n\t\t\"IPAddress\": \"\",\n\t\t\"IPPrefixLen\": 0,\n\t\t\"IPv6Gateway\": \"\",\n\t\t\"MacAddress\": \"\",\n\t\t\"Networks\": {\n\t\t\t\"bridge\": {\n\t\t\t\t\"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\n\t\t\t\t\"EndpointID\": \"7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d\",\n\t\t\t\t\"Gateway\": \"172.17.0.1\",\n\t\t\t\t\"IPAddress\": \"172.17.0.2\",\n\t\t\t\t\"IPPrefixLen\": 16,\n\t\t\t\t\"IPv6Gateway\": \"\",\n\t\t\t\t\"GlobalIPv6Address\": \"\",\n\t\t\t\t\"GlobalIPv6PrefixLen\": 0,\n\t\t\t\t\"MacAddress\": \"02:42:ac:12:00:02\"\n\t\t\t}\n\t\t}\n\t},\n\t\"Path\": \"/bin/sh\",\n\t\"ProcessLabel\": \"\",\n\t\"ResolvConfPath\": \"/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf\",\n\t\"RestartCount\": 1,\n\t\"State\": {\n\t\t\"Error\": \"\",\n\t\t\"ExitCode\": 9,\n\t\t\"FinishedAt\": \"2015-01-06T15:47:32.080254511Z\",\n\t\t\"OOMKilled\": false,\n\t\t\"Dead\": false,\n\t\t\"Paused\": false,\n\t\t\"Pid\": 0,\n\t\t\"Restarting\": false,\n\t\t\"Running\": true,\n\t\t\"StartedAt\": \"2015-01-06T15:47:32.072697474Z\",\n\t\t\"Status\": \"running\"\n\t},\n\t\"Mounts\": [\n\t\t{\n\t\t\t\"Name\": \"fac362...80535\",\n\t\t\t\"Source\": \"/data\",\n\t\t\t\"Destination\": \"/data\",\n\t\t\t\"Driver\": \"local\",\n\t\t\t\"Mode\": \"ro,Z\",\n\t\t\t\"RW\": false,\n\t\t\t\"Propagation\": \"\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Docker Hub in GitHub Actions\nDESCRIPTION: Logs in to Docker Hub using credentials stored as GitHub repository secrets and variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/gha.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Log in to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKER_PASSWORD }}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Page Docker Guide Structure using Bash\nDESCRIPTION: Commands for creating a multi-page Docker guide where each page is a separate Markdown file with an _index.md file as the introduction. Shows both manual and Hugo-based methods.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/guides.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create the index page for the guide\nmkdir content/guides/my-docker-guide.md\ntouch content/guides/my-docker-guide/_index.md\n# or if you have Hugo installed:\nhugo new content/guides/my-docker-guide/_index.md\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Todos Table\nDESCRIPTION: SQL query to select all records from the todos table to verify that the database was properly seeded with the initial data via the JavaScript script.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\nsampledb=# SELECT * FROM todos;\nid |      task      | completed\n----+----------------+-----------\n1 | Watch netflix  | f\n2 | Finish podcast | f\n3 | Pick up kid    | f\n(3 rows)\n```\n\n----------------------------------------\n\nTITLE: Editing Docker Daemon Configuration with nano in Console\nDESCRIPTION: Command to open and edit the Docker daemon configuration file using the nano text editor. This file is used to control various Docker daemon settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ sudo nano /etc/docker/daemon.json\n```\n\n----------------------------------------\n\nTITLE: Cloning C++ Sample Application Repository\nDESCRIPTION: Command to clone the sample C++ application repository from GitHub and change into the project directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dockersamples/c-plus-plus-docker.git && cd c-plus-plus-docker\n```\n\n----------------------------------------\n\nTITLE: Moving Certificate to the CA Certificates Directory\nDESCRIPTION: This command copies a certificate from the temporary location to the directory where CA certificates are stored in a Linux container, renaming it in the process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/ca-certs.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# cp /tmp/myca.crt /usr/local/share/ca-certificates/root_cert.crt\n```\n\n----------------------------------------\n\nTITLE: Updating Restart Policy for All Running Containers in Docker\nDESCRIPTION: This command ensures all currently running containers have their restart policy set to 'unless-stopped'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/start-containers-automatically.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker update --restart unless-stopped $(docker ps -q)\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Service Inspect Documentation\nDESCRIPTION: YAML frontmatter configuration that defines metadata for the Docker service inspect command documentation page, including the data folder, file name, title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/service/inspect.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_service_inspect\ntitle: docker service inspect\naliases:\n- /edge/engine/reference/commandline/service_inspect/\n- /engine/reference/commandline/service_inspect/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Code to GitHub\nDESCRIPTION: Series of Git commands to stage all changes, commit them with a message, and push the commits to the 'main' branch on GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/configure-ci-cd.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit add -A\ngit commit -m \"my first commit\"\ngit push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Docker Version on Fedora\nDESCRIPTION: This command installs a specific version of Docker Engine by specifying the exact version string. Replace <VERSION_STRING> with the desired version from the list of available versions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/fedora.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Docker Build Documentation\nDESCRIPTION: YAML frontmatter configuration that specifies the page title, build rendering settings, and sidebar navigation redirect to the buildx build command reference.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/build.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: docker build\nbuild:\n  render: never\nsidebar:\n  goto: /reference/cli/docker/buildx/build/\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Image Prune Documentation\nDESCRIPTION: YAML front matter that defines metadata for the Docker image prune documentation page, including the data folder, data file, title, aliases (alternative URLs), and layout template to use.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/image/prune.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_image_prune\ntitle: docker image prune\naliases:\n- /edge/engine/reference/commandline/image_prune/\n- /engine/reference/commandline/image_prune/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Modifying the Application Code for Live Updates\nDESCRIPTION: A code diff showing how to modify the Python application to update the greeting message. When using Compose Watch, this change will automatically be detected and the application rebuilt.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n-    return 'Hello, Docker!'\n+    return 'Hello, Docker!!!'\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Docker Desktop via Homebrew on macOS\nDESCRIPTION: Commands to reinstall Docker Desktop using Homebrew package manager. This solution updates Homebrew and completely reinstalls Docker Desktop to resolve the startup and malware warning issues.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/cert-revoke-solution.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ brew update\n$ brew reinstall --cask docker\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Docker Documentation in YAML\nDESCRIPTION: This YAML snippet defines the frontmatter for a Docker documentation page. It includes fields for title, description, summary, languages, tags, and optional parameters like estimated time to complete.\nSOURCE: https://github.com/docker/docs/blob/main/archetypes/guides.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: '{{ replace .File.ContentBaseName `-` ` ` | humanize }}'\n# linkTitle: A shorter, alternative title \ndescription: # Meta description for SEO.\nsummary: | # A summary of what's in this guide\n  In this guide, ...\nlanguages: [] # Programming languages used\ntags: [] # What's it about?\nparams:\n  # time: 10 minutes\n---\n```\n\n----------------------------------------\n\nTITLE: Creating an Object with POST Request\nDESCRIPTION: A curl command that demonstrates how to make a POST request to the API endpoint to create a new hero object. It includes headers for content type and the JSON payload with the hero's attributes.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ curl -X 'POST' \\\n  'http://localhost:8001/heroes/' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"id\": 1,\n  \"name\": \"my hero\",\n  \"secret_name\": \"austing\",\n  \"age\": 12\n}'\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Toast in Docker Desktop Extension (TypeScript)\nDESCRIPTION: Illustrates how to display an error toast message. This method is deprecated and will be removed in a future version. The 'error' method from Toast is recommended as a replacement.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/DockerDesktopClient.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.toastError(\"message\");\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Docker Engine on SLES\nDESCRIPTION: Command to install the latest version of Docker Engine and related packages including CLI, containerd, and plugins.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/sles.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo zypper install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: NetworkManager Interface Configuration for docker0\nDESCRIPTION: Configuration to mark the docker0 interface as manually managed in NetworkManager. This prevents NetworkManager from interfering with Docker's network interfaces.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_21\n\nLANGUAGE: text\nCODE:\n```\niface docker0 inet manual\n```\n\n----------------------------------------\n\nTITLE: Pinging the Docker Server\nDESCRIPTION: Example of using the GET /_ping endpoint to check if the Docker daemon is responsive and healthy. Returns a simple \"OK\" response if the server is operational.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_48\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/_ping HTTP/1.1\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/plain\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS 1.2 in PowerShell for Windows Server\nDESCRIPTION: PowerShell command to enable TLS 1.2 for secure connections on older Windows Server versions, which is required for downloading from GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/standalone.md#2025-04-11_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n```\n\n----------------------------------------\n\nTITLE: Configuring LogConfig in Docker Container\nDESCRIPTION: Configures the logging driver and its options for the container. This JSON structure specifies which logging driver to use and provides driver-specific configuration parameters.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{ \"Type\": \"<driver_name>\", \"Config\": {\"key1\": \"val1\"}}\n```\n\n----------------------------------------\n\nTITLE: Pulling LLM Model to Local Ollama Installation\nDESCRIPTION: Command to pull the llama2 model to a locally installed Ollama instance.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rag-ollama/develop.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ollama pull llama2\n```\n\n----------------------------------------\n\nTITLE: Front Matter YAML Configuration for Docker Buildx Build Documentation\nDESCRIPTION: YAML front matter defining metadata for the Docker Buildx build command documentation page. It specifies the data folder, data file, title, layout, and aliases to related command references.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/build.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx_build\ntitle: docker buildx build\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_build/\n- /edge/engine/reference/commandline/image_build/\n- /engine/reference/commandline/image_build/\n- /engine/reference/commandline/build/\n- /engine/reference/commandline/builder_build/\n- /reference/cli/docker/build/\n- /reference/cli/docker/builder/build/\n- /reference/cli/docker/image/build/\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Comment About Documentation Source\nDESCRIPTION: Comment explaining that the page is automatically generated from Docker's source code and provides guidance on how to suggest changes to the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/build-legacy.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Disabling Beta Features in Settings JSON\nDESCRIPTION: JSON configuration to disable all Beta features, including Docker AI, for an organization using Settings Management. This sets the 'allowBetaFeatures' property to false.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowBetaFeatures\": {\n    \"value\": false,\n    \"locked\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Swarm Join Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the docker swarm join command documentation page, including file paths, aliases, and layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/swarm/join.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_swarm_join\ntitle: docker swarm join\naliases:\n- /edge/engine/reference/commandline/swarm_join/\n- /engine/reference/commandline/swarm_join/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Monitoring Service Tasks During Update in Docker Swarm\nDESCRIPTION: Displays the status of all tasks for the Redis service, showing which nodes are running which versions of the image during the rolling update process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/rolling-update.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker service ps redis\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Port Publishing Configuration\nDESCRIPTION: Shows how to configure port publishing in a Docker Compose YAML file for a web application.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/publishing-ports.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: docker/welcome-to-docker\n    ports:\n      - 8080:80\n```\n\n----------------------------------------\n\nTITLE: Changing MySQL Password Using Container Exec with Command Substitution\nDESCRIPTION: Alternative approach that uses command substitution to find the container ID and change the MySQL password in a single command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ndocker container exec $(docker ps --filter name=mysql -q) \\\n    bash -c 'mysqladmin --user=wordpress --password=\"$(< /run/secrets/old_mysql_password)\" password \"$(< /run/secrets/mysql_password)\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter for Docker Hub API Documentation\nDESCRIPTION: YAML front matter block that defines the layout, description, title, linkTitle, and weight for the Docker Hub API reference documentation page. This metadata is used by a static site generator to properly render the API documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/hub/latest.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: api\ndescription: Reference documentation and OpenAPI specification for the Docker Hub API.\ntitle: Docker Hub API reference\nlinkTitle: Docker Hub API\nweight: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Go Samples Documentation\nDESCRIPTION: This YAML front matter defines metadata for a documentation page about Docker samples for Go. It specifies the title, description, service type, and aliases for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/go.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Go samples\ndescription: Docker samples for Go.\nservice: go\naliases:\n- /samples/go/\n---\n```\n\n----------------------------------------\n\nTITLE: Running Docker Scout Policy Command for Image Evaluation\nDESCRIPTION: This command evaluates policy compliance for a specific Docker image, showing how many policies are met and identifying violations. It specifies the organization, platform architecture, and the target image to analyze.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/policy/view.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout policy \\\n  --org dockerscoutpolicy \\\n  --platform linux/amd64 \\\n  dockerscoutpolicy/email-api-service:0.0.2\n\n    ✓ Pulled\n    ✓ Policy evaluation results found\n\n\n​## Overview\n​\n​             │               Analyzed Image\n​─────────────┼──────────────────────────────────────────────\n​  Target     │  dockerscoutpolicy/email-api-service:0.0.2\n​    digest   │  17b1fde0329c\n​    platform │ linux/amd64\n​\n​\n​## Policies\n​\n​Policy status  FAILED  (2/8 policies met, 3 missing data)\n​\n​  Status │                  Policy                             │           Results\n​─────────┼─────────────────────────────────────────────────────┼──────────────────────────────\n​  ✓      │ No copyleft licenses                                │    0 packages\n​  !      │ Default non-root user                               │\n​  !      │ No fixable critical or high vulnerabilities         │    2C     1H     0M     0L\n​  ✓      │ No high-profile vulnerabilities                     │    0C     0H     0M     0L\n​  ?      │ No outdated base images                             │    No data\n​         │                                                     │    Learn more ↗\n​  ?      │ SonarQube quality gates passed                      │    No data\n​         │                                                     │    Learn more ↗\n​  !      │ Supply chain attestations                           │    2 deviations\n​  ?      │ No unapproved base images                           │    No data\n\n...\n```\n\n----------------------------------------\n\nTITLE: Docker Dev Remove Command\nDESCRIPTION: Removes a specified dev environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/dev-cli.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker dev rm DEV_ENV_NAME\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Daemon Configuration File Example for Linux\nDESCRIPTION: Comprehensive example of a daemon.json file showing all available configuration options for Docker daemon on Linux. Includes networking, storage, security, logging, and performance settings.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authorization-plugins\": [],\n  \"bip\": \"\",\n  \"bip6\": \"\",\n  \"bridge\": \"\",\n  \"builder\": {\n    \"gc\": {\n      \"enabled\": true,\n      \"defaultKeepStorage\": \"10GB\",\n      \"policy\": [\n        { \"keepStorage\": \"10GB\", \"filter\": [\"unused-for=2200h\"] },\n        { \"keepStorage\": \"50GB\", \"filter\": [\"unused-for=3300h\"] },\n        { \"keepStorage\": \"100GB\", \"all\": true }\n      ]\n    }\n  },\n  \"cgroup-parent\": \"\",\n  \"containerd\": \"/run/containerd/containerd.sock\",\n  \"containerd-namespace\": \"docker\",\n  \"containerd-plugins-namespace\": \"docker-plugins\",\n  \"data-root\": \"\",\n  \"debug\": true,\n  \"default-address-pools\": [\n    {\n      \"base\": \"172.30.0.0/16\",\n      \"size\": 24\n    },\n    {\n      \"base\": \"172.31.0.0/16\",\n      \"size\": 24\n    }\n  ],\n  \"default-cgroupns-mode\": \"private\",\n  \"default-gateway\": \"\",\n  \"default-gateway-v6\": \"\",\n  \"default-network-opts\": {},\n  \"default-runtime\": \"runc\",\n  \"default-shm-size\": \"64M\",\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Hard\": 64000,\n      \"Name\": \"nofile\",\n      \"Soft\": 64000\n    }\n  },\n  \"dns\": [],\n  \"dns-opts\": [],\n  \"dns-search\": [],\n  \"exec-opts\": [],\n  \"exec-root\": \"\",\n  \"experimental\": false,\n  \"features\": {\n    \"cdi\": true,\n    \"containerd-snapshotter\": true\n  },\n  \"fixed-cidr\": \"\",\n  \"fixed-cidr-v6\": \"\",\n  \"group\": \"\",\n  \"host-gateway-ip\": \"\",\n  \"hosts\": [],\n  \"proxies\": {\n    \"http-proxy\": \"http://proxy.example.com:80\",\n    \"https-proxy\": \"https://proxy.example.com:443\",\n    \"no-proxy\": \"*.test.example.com,.example.org\"\n  },\n  \"icc\": false,\n  \"init\": false,\n  \"init-path\": \"/usr/libexec/docker-init\",\n  \"insecure-registries\": [],\n  \"ip\": \"0.0.0.0\",\n  \"ip-forward\": false,\n  \"ip-masq\": false,\n  \"iptables\": false,\n  \"ip6tables\": false,\n  \"ipv6\": false,\n  \"labels\": [],\n  \"live-restore\": true,\n  \"log-driver\": \"json-file\",\n  \"log-format\": \"text\",\n  \"log-level\": \"\",\n  \"log-opts\": {\n    \"cache-disabled\": \"false\",\n    \"cache-max-file\": \"5\",\n    \"cache-max-size\": \"20m\",\n    \"cache-compress\": \"true\",\n    \"env\": \"os,customer\",\n    \"labels\": \"somelabel\",\n    \"max-file\": \"5\",\n    \"max-size\": \"10m\"\n  },\n  \"max-concurrent-downloads\": 3,\n  \"max-concurrent-uploads\": 5,\n  \"max-download-attempts\": 5,\n  \"mtu\": 0,\n  \"no-new-privileges\": false,\n  \"node-generic-resources\": [\n    \"NVIDIA-GPU=UUID1\",\n    \"NVIDIA-GPU=UUID2\"\n  ],\n  \"pidfile\": \"\",\n  \"raw-logs\": false,\n  \"registry-mirrors\": [],\n  \"runtimes\": {\n    \"cc-runtime\": {\n      \"path\": \"/usr/bin/cc-runtime\"\n    },\n    \"custom\": {\n      \"path\": \"/usr/local/bin/my-runc-replacement\",\n      \"runtimeArgs\": [\n        \"--debug\"\n      ]\n    }\n  },\n  \"seccomp-profile\": \"\",\n  \"selinux-enabled\": false,\n  \"shutdown-timeout\": 15,\n  \"storage-driver\": \"\",\n  \"storage-opts\": [],\n  \"swarm-default-advertise-addr\": \"\",\n  \"tls\": true,\n  \"tlscacert\": \"\",\n  \"tlscert\": \"\",\n  \"tlskey\": \"\",\n  \"tlsverify\": true,\n  \"userland-proxy\": false,\n  \"userland-proxy-path\": \"/usr/libexec/docker-proxy\",\n  \"userns-remap\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Command Usage and Options\nDESCRIPTION: Complete reference for the dockerd command including all available command-line options for configuring the Docker daemon. Covers networking, security, logging, storage, and runtime configuration options.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nUsage:\tdockerd [OPTIONS]\n\nA self-sufficient runtime for containers.\n\nOptions:\n      --add-runtime runtime                   Register an additional OCI compatible runtime (default [])\n      --authorization-plugin list             Authorization plugins to load\n      --bip string                            IPv4 address for the default bridge\n      --bip6 string                           IPv6 address for the default bridge\n  -b, --bridge string                         Attach containers to a network bridge\n      --cdi-spec-dir list                     CDI specification directories to use\n      --cgroup-parent string                  Set parent cgroup for all containers\n      --config-file string                    Daemon configuration file (default \"/etc/docker/daemon.json\")\n      --containerd string                     containerd grpc address\n      --containerd-namespace string           Containerd namespace to use (default \"moby\")\n      --containerd-plugins-namespace string   Containerd namespace to use for plugins (default \"plugins.moby\")\n      --cpu-rt-period int                     Limit the CPU real-time period in microseconds for the\n                                              parent cgroup for all containers (not supported with cgroups v2)\n      --cpu-rt-runtime int                    Limit the CPU real-time runtime in microseconds for the\n                                              parent cgroup for all containers (not supported with cgroups v2)\n      --cri-containerd                        start containerd with cri\n      --data-root string                      Root directory of persistent Docker state (default \"/var/lib/docker\")\n  -D, --debug                                 Enable debug mode\n      --default-address-pool pool-options     Default address pools for node specific local networks\n      --default-cgroupns-mode string          Default mode for containers cgroup namespace (\"host\" | \"private\") (default \"private\")\n      --default-gateway ip                    Default gateway IPv4 address for the default bridge network\n      --default-gateway-v6 ip                 Default gateway IPv6 address for the default bridge network\n      --default-ipc-mode string               Default mode for containers ipc (\"shareable\" | \"private\") (default \"private\")\n      --default-network-opt mapmap            Default network options (default map[])\n      --default-runtime string                Default OCI runtime for containers (default \"runc\")\n      --default-shm-size bytes                Default shm size for containers (default 64MiB)\n      --default-ulimit ulimit                 Default ulimits for containers (default [])\n      --dns list                              DNS server to use\n      --dns-opt list                          DNS options to use\n      --dns-search list                       DNS search domains to use\n      --exec-opt list                         Runtime execution options\n      --exec-root string                      Root directory for execution state files (default \"/var/run/docker\")\n      --experimental                          Enable experimental features\n      --feature map                           Enable feature in the daemon\n      --fixed-cidr string                     IPv4 subnet for the default bridge network\n      --fixed-cidr-v6 string                  IPv6 subnet for the default bridge network\n  -G, --group string                          Group for the unix socket (default \"docker\")\n      --help                                  Print usage\n  -H, --host list                             Daemon socket(s) to connect to\n      --host-gateway-ip list                  IP addresses that the special 'host-gateway' string in --add-host resolves to.\n                                              Defaults to the IP addresses of the default bridge\n      --http-proxy string                     HTTP proxy URL to use for outgoing traffic\n      --https-proxy string                    HTTPS proxy URL to use for outgoing traffic\n      --icc                                   Enable inter-container communication for the default bridge network (default true)\n      --init                                  Run an init in the container to forward signals and reap processes\n      --init-path string                      Path to the docker-init binary\n      --insecure-registry list                Enable insecure registry communication\n      --ip ip                                 Host IP for port publishing from the default bridge network (default 0.0.0.0)\n      --ip-forward                            Enable IP forwarding in system configuration (default true)\n      --ip-forward-no-drop                    Do not set the filter-FORWARD policy to DROP when enabling IP forwarding\n      --ip-masq                               Enable IP masquerading for the default bridge network (default true)\n      --ip6tables                             Enable addition of ip6tables rules (default true)\n      --iptables                              Enable addition of iptables rules (default true)\n      --ipv6                                  Enable IPv6 networking for the default bridge network\n      --label list                            Set key=value labels to the daemon\n      --live-restore                          Enable live restore of docker when containers are still running\n      --log-driver string                     Default driver for container logs (default \"json-file\")\n      --log-format string                     Set the logging format (\"text\"|\"json\") (default \"text\")\n  -l, --log-level string                      Set the logging level (\"debug\"|\"info\"|\"warn\"|\"error\"|\"fatal\") (default \"info\")\n      --log-opt map                           Default log driver options for containers (default map[])\n      --max-concurrent-downloads int          Set the max concurrent downloads (default 3)\n      --max-concurrent-uploads int            Set the max concurrent uploads (default 5)\n      --max-download-attempts int             Set the max download attempts for each pull (default 5)\n      --metrics-addr string                   Set default address and port to serve the metrics api on\n      --mtu int                               Set the MTU for the default \"bridge\" network (default 1500)\n      --network-control-plane-mtu int         Network Control plane MTU (default 1500)\n      --no-new-privileges                     Set no-new-privileges by default for new containers\n      --no-proxy string                       Comma-separated list of hosts or IP addresses for which the proxy is skipped\n      --node-generic-resource list            Advertise user-defined resource\n  -p, --pidfile string                        Path to use for daemon PID file (default \"/var/run/docker.pid\")\n      --raw-logs                              Full timestamps without ANSI coloring\n      --registry-mirror list                  Preferred registry mirror\n      --rootless                              Enable rootless mode; typically used with RootlessKit\n      --seccomp-profile string                Path to seccomp profile. Set to \"unconfined\" to disable the default seccomp profile (default \"builtin\")\n      --selinux-enabled                       Enable selinux support\n      --shutdown-timeout int                  Set the default shutdown timeout (default 15)\n  -s, --storage-driver string                 Storage driver to use\n      --storage-opt list                      Storage driver options\n      --swarm-default-advertise-addr string   Set default address or interface for swarm advertised address\n      --tls                                   Use TLS; implied by --tlsverify\n      --tlscacert string                      Trust certs signed only by this CA (default \"~/.docker/ca.pem\")\n      --tlscert string                        Path to TLS certificate file (default \"~/.docker/cert.pem\")\n      --tlskey string                         Path to TLS key file (default \"~/.docker/key.pem\")\n      --tlsverify                             Use TLS and verify the remote\n      --userland-proxy                        Use userland proxy for loopback traffic (default true)\n      --userland-proxy-path string            Path to the userland proxy binary\n      --userns-remap string                   User/Group setting for user namespaces\n      --validate                              Validate daemon configuration and exit\n  -v, --version                               Print version information and quit\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Application\nDESCRIPTION: Command to stop and remove the running Docker Compose application containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/containerize.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Bun Application Dockerfile Configuration\nDESCRIPTION: Dockerfile that uses the official Bun image as the base, sets up the working directory, copies application files, exposes the port, and defines the command to run the server.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/containerize.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Use the Bun image as the base image\nFROM oven/bun:latest\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nCOPY . .\n\n# Expose the port on which the API will listen\nEXPOSE 3000\n\n# Run the server when the container launches\nCMD [\"bun\", \"server.js\"]\n```\n\n----------------------------------------\n\nTITLE: Stopping All Docker Containers - Multiple Implementations\nDESCRIPTION: Shows how to stop all running Docker containers. Includes container listing and stopping operations with proper error handling.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\tcontainertypes \"github.com/docker/docker/api/types/container\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tcli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer cli.Close()\n\n\tcontainers, err := cli.ContainerList(ctx, containertypes.ListOptions{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, container := range containers {\n\t\tfmt.Print(\"Stopping container \", container.ID[:10], \"... \")\n\t\tnoWaitTimeout := 0\n\t\tif err := cli.ContainerStop(ctx, container.ID, containertypes.StopOptions{Timeout: &noWaitTimeout}); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t\tfmt.Println(\"Success\")\n\t}\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport docker\nclient = docker.from_env()\nfor container in client.containers.list():\n  container.stop()\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --unix-socket /var/run/docker.sock http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/json\ncurl --unix-socket /var/run/docker.sock \\\n  -X POST http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/ae63e8b89a26/stop\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Windows Container with BuildKit\nDESCRIPTION: Command to build a Windows container image using BuildKit and push it to a container registry. This demonstrates using the configured BuildKit builder to create and publish an image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n> docker buildx build --push -t <username>/hello-buildkit .\n```\n\n----------------------------------------\n\nTITLE: Detailed Vulnerability Analysis of Local Project\nDESCRIPTION: Use docker scout cves command with --details flag to view detailed vulnerabilities in local source code. The example filters results to show only high severity vulnerabilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/artifact-types.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves --details --only-severity high fs://.\n    ✓ File system read\n    ✓ Indexed 323 packages\n    ✗ Detected 1 vulnerable package with 1 vulnerability\n\n​## Overview\n\n                    │        Analyzed path\n────────────────────┼──────────────────────────────\n  Path              │  /Users/david/demo/scoutfs\n    vulnerabilities │    0C     1H     0M     0L\n\n​## Packages and Vulnerabilities\n\n   0C     1H     0M     0L  fastify 3.29.0\npkg:npm/fastify@3.29.0\n\n    ✗ HIGH CVE-2022-39288 [OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities]\n      https://scout.docker.com/v/CVE-2022-39288\n\n      fastify is a fast and low overhead web framework, for Node.js. Affected versions of\n      fastify are subject to a denial of service via malicious use of the Content-Type\n      header. An attacker can send an invalid Content-Type header that can cause the\n      application to crash. This issue has been addressed in commit  fbb07e8d  and will be\n      included in release version 4.8.1. Users are advised to upgrade. Users unable to\n      upgrade may manually filter out http content with malicious Content-Type headers.\n\n      Affected range : <4.8.1\n      Fixed version  : 4.8.1\n      CVSS Score     : 7.5\n      CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\n\n1 vulnerability found in 1 package\n  LOW       0\n  MEDIUM    0\n  HIGH      1\n  CRITICAL  0\n```\n\n----------------------------------------\n\nTITLE: Docker Init Configuration Dialog\nDESCRIPTION: Interactive command line dialog showing the Docker initialization process for a PHP application, configuring Apache, PHP version, source directory, and port settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker init\nWelcome to the Docker Init CLI!\n\nThis utility will walk you through creating the following files with sensible defaults for your project:\n  - .dockerignore\n  - Dockerfile\n  - compose.yaml\n  - README.Docker.md\n\nLet's get started!\n\n? What application platform does your project use? PHP with Apache\n? What version of PHP do you want to use? 8.2\n? What's the relative directory (with a leading .) for your app? ./src\n? What local port do you want to use to access your server? 9000\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Scout Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker Scout watch command documentation page, including folder location, data file name, aliases, title and layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/scout/watch.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: scout-cli\ndatafile: docker_scout_watch\naliases:\n- /engine/reference/commandline/scout_watch\ntitle: docker scout watch\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Platform Docker Image\nDESCRIPTION: Command to build a Docker image for the amd64 platform, which is compatible with Play with Docker.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/04_sharing_app.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build --platform linux/amd64 -t YOUR-USER-NAME/getting-started .\n```\n\n----------------------------------------\n\nTITLE: Correct FROM Instruction Without Redundant Platform Specification\nDESCRIPTION: This example shows the correct way to write a FROM instruction without the redundant --platform argument. The default platform will be used, which is equivalent to $TARGETPLATFORM.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/redundant-target-platform.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine AS builder\nRUN apk add --no-cache git\n```\n\n----------------------------------------\n\nTITLE: Enabling BUILDX_EXPERIMENTAL Features\nDESCRIPTION: Enables experimental build features in Buildx. This allows access to new, potentially unstable features that are still in development.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nexport BUILDX_EXPERIMENTAL=1\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker Extension\nDESCRIPTION: Removes the Docker extension from Docker Desktop using the docker extension rm command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/quickstart.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension rm <name-of-your-extension>\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Kafka Container\nDESCRIPTION: Terminal command to remove the existing Kafka container before starting the new configuration. This ensures a clean state before applying the new multi-listener setup.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker rm -f kafka\n```\n\n----------------------------------------\n\nTITLE: Defining Build Reproducibility in SLSA Provenance\nDESCRIPTION: Example of the 'metadata.reproducible' field which indicates if the build is intended to be byte-for-byte reproducible. This can be set by the user with the 'reproducible=true' attestation parameter.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n    \"metadata\": {\n      \"reproducible\": false,\n      ...\n    },\n```\n\n----------------------------------------\n\nTITLE: Checking for dnsmasq Process\nDESCRIPTION: Command to check if dnsmasq is running on the system, which is often used by network managers and can cause DNS resolution issues in Docker containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ ps aux | grep dnsmasq\n```\n\n----------------------------------------\n\nTITLE: Docker IPv6 Network Creation Error\nDESCRIPTION: Error message shown when creating a network with --ipv6 flag without providing an IPv6 subnet using the default IPAM driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nError response from daemon: failed to parse pool request for address space\n                            \"LocalDefault\" pool \"\" subpool \"\": could not find an\n                            available, non-overlapping IPv6 address pool among\n                            the defaults to assign to the network\n```\n\n----------------------------------------\n\nTITLE: Inspecting an Individual Node in Docker Swarm\nDESCRIPTION: Demonstrates how to use docker node inspect with the --pretty flag to view detailed information about a specific node in human-readable format.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/manage-nodes.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker node inspect self --pretty\n\nID:                     ehkv3bcimagdese79dn78otj5\nHostname:               node-1\nJoined at:              2016-06-16 22:52:44.9910662 +0000 utc\nStatus:\n State:                 Ready\n Availability:          Active\nManager Status:\n Address:               172.17.0.2:2377\n Raft Status:           Reachable\n Leader:                Yes\nPlatform:\n Operating System:      linux\n Architecture:          x86_64\nResources:\n CPUs:                  2\n Memory:                1.954 GiB\nPlugins:\n  Network:              overlay, host, bridge, overlay, null\n  Volume:               local\nEngine Version:         1.12.0-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Policy 4 in BuildKit's GC Configuration\nDESCRIPTION: This snippet shows Policy 4 configuration in BuildKit that removes all cache (including shared and internal records) when disk usage exceeds 100GB, while ensuring at least 10GB of disk space is reserved for cache.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/garbage-collection.md#2025-04-11_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# Policy 4\n[[worker.oci.gcpolicy]]\n  all = true\n  reservedSpace = \"10GB\"\n  maxUsedSpace = \"100GB\"\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Scout Compare Documentation\nDESCRIPTION: This YAML snippet defines the frontmatter for the documentation page of the 'docker scout compare' command. It specifies the data folder, data file, aliases, title, and layout for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/scout/compare.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: scout-cli\ndatafile: docker_scout_compare\naliases:\n- /engine/reference/commandline/scout_compare\ntitle: docker scout compare\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Creating External and Internal Links in Markdown\nDESCRIPTION: Demonstrates the basic markdown syntax for creating external links that open in a new tab and internal links that open in the same tab. This snippet shows the raw markdown format used throughout Docker documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/links.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[External links](https://docker.com)\n[Internal links](links.md)\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Signers to Docker Trust Repository\nDESCRIPTION: This command adds another delegation to a repository by adding the collaborator's key to the targets/release role, requiring the repository key passphrase for authorization.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust signer add --key ben.pub ben registry.example.com/admin/demo\n\nAdding signer \"ben\" to registry.example.com/admin/demo...\nEnter passphrase for repository key with ID b0014f8: \nSuccessfully added signer: ben to registry.example.com/admin/demo\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose with Watch Mode\nDESCRIPTION: Command to run the application with Compose Watch enabled, which monitors file changes and automatically rebuilds containers when changes are detected.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/develop.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose watch\n```\n\n----------------------------------------\n\nTITLE: Pinning Buildx Version in GitHub Actions\nDESCRIPTION: Shows how to pin to a specific version of Buildx using the version input parameter.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/configure-builder.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Set up Docker Buildx\n  uses: docker/setup-buildx-action@v3\n  with:\n    version: v0.10.0\n```\n\n----------------------------------------\n\nTITLE: Defining onOutput Callback for Command Execution in TypeScript\nDESCRIPTION: This code defines the onOutput callback function that is invoked when receiving output from command execution. The callback receives data containing either stdout or stderr content. Output can be split into arbitrary chunks or complete lines based on configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExecStreamOptions.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nonOutput?: (data: { stdout: string; stderr?: undefined } | { stdout?: undefined; stderr: string }) => void\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop with Sign-in Enforcement using Command Prompt\nDESCRIPTION: Windows Command Prompt command to install Docker Desktop with automatic sign-in enforcement by creating a registry.json file during installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nC:\\Users\\Admin> \"Docker Desktop Installer.exe\" install --allowed-org=myorg\n```\n\n----------------------------------------\n\nTITLE: Gathering Volume Group Information in Bash\nDESCRIPTION: This command retrieves information about the volume group using the pvdisplay command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo pvdisplay |grep 'VG Name'\n\nPV Name               /dev/xvdf\nVG Name               docker\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Docker Engine Version on Raspberry Pi OS\nDESCRIPTION: Installs a specific version of Docker Engine and its components. This is useful for environments that require version consistency or when the latest version has compatibility issues.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ VERSION_STRING=5:25.0.3-1~raspbian.12~bookworm\n$ sudo apt-get install docker-ce=$VERSION_STRING docker-ce-cli=$VERSION_STRING containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Configuration for .NET Application Deployment\nDESCRIPTION: Kubernetes YAML configuration that defines deployments and services for a .NET application and PostgreSQL database. Includes configurations for container specifications, port mappings, environment variables, and service definitions.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    service: server\n  name: server\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      service: server\n  strategy: {}\n  template:\n    metadata:\n      labels:\n        service: server\n    spec:\n      initContainers:\n        - name: wait-for-db\n          image: busybox:1.28\n          command:\n            [\n              \"sh\",\n              \"-c\",\n              'until nc -zv db 5432; do echo \"waiting for db\"; sleep 2; done;',\n            ]\n      containers:\n        - image: DOCKER_USERNAME/REPO_NAME\n          name: server\n          imagePullPolicy: Always\n          ports:\n            - containerPort: 8080\n              hostPort: 8080\n              protocol: TCP\n          resources: {}\n      restartPolicy: Always\nstatus: {}\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    service: db\n  name: db\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      service: db\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        service: db\n    spec:\n      containers:\n        - env:\n            - name: POSTGRES_DB\n              value: example\n            - name: POSTGRES_PASSWORD\n              value: example\n          image: postgres\n          name: db\n          ports:\n            - containerPort: 5432\n              protocol: TCP\n          resources: {}\n      restartPolicy: Always\nstatus: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    service: server\n  name: server\n  namespace: default\nspec:\n  type: NodePort\n  ports:\n    - name: \"8080\"\n      port: 8080\n      targetPort: 8080\n      nodePort: 30001\n  selector:\n    service: server\nstatus:\n  loadBalancer: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    service: db\n  name: db\n  namespace: default\nspec:\n  ports:\n    - name: \"5432\"\n      port: 5432\n      targetPort: 5432\n  selector:\n    service: db\nstatus:\n  loadBalancer: {}\n```\n\n----------------------------------------\n\nTITLE: Using docker compose top to display running processes in containers\nDESCRIPTION: Example of running the 'docker compose top' command to view processes running in Docker containers. The output shows the process information including UID, PID, PPID, CPU usage, start time, TTY, execution time, and the command being run.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_top.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose top\nexample_foo_1\nUID    PID      PPID     C    STIME   TTY   TIME       CMD\nroot   142353   142331   2    15:33   ?     00:00:00   ping localhost -c 5\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Installation\nDESCRIPTION: This command verifies that Docker Engine is correctly installed and configured by running the hello-world container, which downloads a test image and runs it.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/rhel.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Source Code Reference\nDESCRIPTION: HTML comment indicating that the page is automatically generated from Docker's source code and provides guidance on how to suggest changes to the documentation by opening tickets or pull requests in the GitHub repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/build.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/buildx\n-->\n```\n\n----------------------------------------\n\nTITLE: Configuring Fluentd as Default Logging Driver in daemon.json\nDESCRIPTION: JSON configuration for setting Fluentd as the default logging driver in Docker's daemon.json file. This example specifies the Fluentd address to connect to.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/fluentd.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-driver\": \"fluentd\",\n  \"log-opts\": {\n    \"fluentd-address\": \"fluentdhost:24224\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Image References with Named Contexts\nDESCRIPTION: Example showing how to override an image reference in a Dockerfile without modifying it. The build command uses the --build-context flag to replace 'alpine:{{% param example_alpine_version %}}' with 'alpine:edge'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_17\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:{{% param example_alpine_version %}}\n```\n\nLANGUAGE: console\nCODE:\n```\ndocker buildx build --build-context alpine:{{% param example_alpine_version %}}=docker-image://alpine:edge .\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Image Identifier Format\nDESCRIPTION: Shows the standard format for a Docker image identifier, including optional registry host, port, repository name, and tag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]\n```\n\n----------------------------------------\n\nTITLE: Tagging Docker Image\nDESCRIPTION: Command to create a new tag for the Docker image with version 1.0.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-registry.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndocker tag <YOUR_DOCKER_USERNAME>/docker-quickstart <YOUR_DOCKER_USERNAME>/docker-quickstart:1.0\n```\n\n----------------------------------------\n\nTITLE: Setting Build Labels in Docker Compose\nDESCRIPTION: Shows how to add metadata to the resulting image using labels in Docker Compose build configuration. Labels can be set as an array or a map.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  labels:\n    com.example.description: \"Accounting webapp\"\n    com.example.department: \"Finance\"\n    com.example.label-with-empty-value: \"\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  labels:\n    - \"com.example.description=Accounting webapp\"\n    - \"com.example.department=Finance\"\n    - \"com.example.label-with-empty-value\"\n```\n\n----------------------------------------\n\nTITLE: Using numeric owner in tar for Docker image scripts\nDESCRIPTION: Updates all mkimage scripts to use the --numeric-owner argument when creating tar archives for Docker images.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n* Update all the mkimage scripts to use --numeric-owner as a tar argument\n```\n\n----------------------------------------\n\nTITLE: Demonstrating API Version Error When Using Legacy API\nDESCRIPTION: Shows the error message produced when attempting to use an outdated API version (1.23) with Docker Engine v25.0 or newer, which requires at least API version 1.24.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_API_VERSION=1.23 docker version\nError response from daemon: client version 1.23 is too old. Minimum supported API version is 1.24,\nupgrade your client to a newer version\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Veterinarians API Endpoint\nDESCRIPTION: The expected JSON response from the veterinarians API endpoint, showing a list of veterinarians with their specialties.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vetList\": [\n    {\n      \"id\": 1,\n      \"firstName\": \"James\",\n      \"lastName\": \"Carter\",\n      \"specialties\": [],\n      \"nrOfSpecialties\": 0,\n      \"new\": false\n    },\n    {\n      \"id\": 2,\n      \"firstName\": \"Helen\",\n      \"lastName\": \"Leary\",\n      \"specialties\": [{ \"id\": 1, \"name\": \"radiology\", \"new\": false }],\n      \"nrOfSpecialties\": 1,\n      \"new\": false\n    },\n    {\n      \"id\": 3,\n      \"firstName\": \"Linda\",\n      \"lastName\": \"Douglas\",\n      \"specialties\": [\n        { \"id\": 3, \"name\": \"dentistry\", \"new\": false },\n        { \"id\": 2, \"name\": \"surgery\", \"new\": false }\n      ],\n      \"nrOfSpecialties\": 2,\n      \"new\": false\n    },\n    {\n      \"id\": 4,\n      \"firstName\": \"Rafael\",\n      \"lastName\": \"Ortega\",\n      \"specialties\": [{ \"id\": 2, \"name\": \"surgery\", \"new\": false }],\n      \"nrOfSpecialties\": 1,\n      \"new\": false\n    },\n    {\n      \"id\": 5,\n      \"firstName\": \"Henry\",\n      \"lastName\": \"Stevens\",\n      \"specialties\": [{ \"id\": 1, \"name\": \"radiology\", \"new\": false }],\n      \"nrOfSpecialties\": 1,\n      \"new\": false\n    },\n    {\n      \"id\": 6,\n      \"firstName\": \"Sharon\",\n      \"lastName\": \"Jenkins\",\n      \"specialties\": [],\n      \"nrOfSpecialties\": 0,\n      \"new\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Images After Removing a Tag\nDESCRIPTION: Output showing the result of listing images after removing the v1.0 tag. The image still exists with the latest tag.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nREPOSITORY                       TAG       IMAGE ID       CREATED         SIZE\ndocker-gs-ping                   latest    7f153fbcc0a8   7 minutes ago   1.11GB\n...\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDKIT_TTY_LOG_LINES Environment Variable\nDESCRIPTION: Changes the number of log lines visible for active steps in TTY mode. The default is 6 lines.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport BUILDKIT_TTY_LOG_LINES=8\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Docker Image Load Documentation\nDESCRIPTION: This YAML front matter defines metadata for the 'docker image load' command documentation. It specifies the data folder, file name, title, aliases for other related commands, and the layout to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/image/load.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_image_load\ntitle: docker image load\naliases:\n- /edge/engine/reference/commandline/image_load/\n- /engine/reference/commandline/image_load/\n- /engine/reference/commandline/load/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with CLI\nDESCRIPTION: Command to run a Docker container in detached mode (-d) with port mapping from host port 8080 to container port 80 using the docker/welcome-to-docker image.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-container.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d -p 8080:80 docker/welcome-to-docker\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Hosts with Long Syntax\nDESCRIPTION: Long syntax for extra_hosts configuration using a mapping between hostnames and IP addresses for better readability.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nextra_hosts:\n  somehost: \"162.242.195.82\"\n  otherhost: \"50.31.209.229\"\n  myhostv6: \"::1\"\n```\n\n----------------------------------------\n\nTITLE: Organization Events Table in Markdown\nDESCRIPTION: Markdown table defining organization-level events and their descriptions including team, member, and organization management activities.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/admin/organization/activity-logs.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Event                                                          | Description                                   |\n|:------------------------------------------------------------------|:------------------------------------------------|\n| Team Created | Activities related to the creation of a team |\n| Team Updated | Activities related to the modification of a team |\n| Team Deleted | Activities related to the deletion of a team |\n| Team Member Added | Details of the member added to your team |\n| Team Member Removed | Details of the member removed from your team |\n| Team Member Invited | Details of the member invited to your team |\n```\n\n----------------------------------------\n\nTITLE: Pulling Private Docker Images After Authentication\nDESCRIPTION: Example of pulling a private Docker image after configuring pass and signing in to Docker Desktop, demonstrating successful authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/sign-in.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull molly/privateimage\nUsing default tag: latest\nlatest: Pulling from molly/privateimage\n3b9cc81c3203: Pull complete \nDigest: sha256:3c6b73ce467f04d4897d7a7439782721fd28ec9bf62ea2ad9e81a5fb7fb3ff96\nStatus: Downloaded newer image for molly/privateimage:latest\ndocker.io/molly/privateimage:latest\n```\n\n----------------------------------------\n\nTITLE: Testing Privileged Container Access without Enhanced Isolation\nDESCRIPTION: Shows how privileged containers without Enhanced Container Isolation can access sensitive Docker Desktop network settings in the Linux VM, exposing details about BPF maps including ringbuffers and hash maps.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --privileged djs55/bpftool map show\n17: ringbuf  name blocked_packets  flags 0x0\n        key 0B  value 0B  max_entries 16777216  memlock 0B\n18: hash  name allowed_map  flags 0x0\n        key 4B  value 4B  max_entries 10000  memlock 81920B\n20: lpm_trie  name allowed_trie  flags 0x1\n        key 8B  value 8B  max_entries 1024  memlock 16384B\n```\n\n----------------------------------------\n\nTITLE: Removing Old Secret from MySQL Service and Docker\nDESCRIPTION: Updates the MySQL service to remove access to the old secret and then removes the secret from Docker.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ndocker service update \\\n     --secret-rm mysql_password \\\n     mysql\n\ndocker secret rm mysql_password\n```\n\n----------------------------------------\n\nTITLE: Switching Between Docker Contexts\nDESCRIPTION: The docker context use command changes the active context to the specified one. All subsequent Docker commands will target the Docker daemon defined in this context.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/contexts.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker context use docker-test\ndocker-test\nCurrent context is now \"docker-test\"\n```\n\n----------------------------------------\n\nTITLE: Running a container with user namespace remapping\nDESCRIPTION: Command to run a simple hello-world container with user namespace remapping enabled, demonstrating that containers can still be started normally.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/userns-remap.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Using shell parameter expansion for default value in FROM instruction\nDESCRIPTION: This example shows how to use the shell parameter expansion syntax to provide a default value if an ARG is not specified during build, ensuring a valid image reference.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-default-arg-in-from.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG TAG\nFROM alpine:${TAG:-3.14}\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDX_CPU_PROFILE for Performance Profiling\nDESCRIPTION: Generates a pprof CPU profile at the specified location. This is primarily useful for Buildx development rather than analyzing build performance.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nexport BUILDX_CPU_PROFILE=buildx_cpu.prof\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Manual Installation Check\nDESCRIPTION: The expected output from the Docker Compose version check after manual installation, showing the installed version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#2025-04-11_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nDocker Compose version {{% param \"compose_version\" %}}\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend Development Server\nDESCRIPTION: Command to start the frontend development server using npm run dev, which launches the Vite development environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ npm run dev\n```\n\n----------------------------------------\n\nTITLE: Using the Pad Function in Docker Command Output\nDESCRIPTION: The pad function adds whitespace padding to a string. This example adds 5 spaces before and 10 spaces after the repository name in docker image list output.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker image list --format '{{pad .Repository 5 10}}'\n```\n\n----------------------------------------\n\nTITLE: Handling SSL Certificate Verification for NLTK\nDESCRIPTION: Workaround code to bypass SSL certificate verification issues when downloading NLTK data in certain environments.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    _create_unverified_https_context = ssl._create_unverified_context\nexcept AttributeError:\n    pass\nelse:\n    ssl._create_default_https_context = _create_unverified_https_context\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Swarm Service with Hostname Template\nDESCRIPTION: This command creates a service using Go templates for the hostname, which dynamically sets the container hostname based on the node ID and service name where each task runs.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_41\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name hosttempl \\\n                        --hostname=\"{{.Node.ID}}-{{.Service.Name}}\"\\\n                         busybox top\n```\n\n----------------------------------------\n\nTITLE: Fetching Website Content and Writing to File using Gordon CLI\nDESCRIPTION: This bash command shows how to use Gordon to fetch content from a website and write a summary to a file, utilizing the configured MCP fetch and filesystem servers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/yaml.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ai can you fetch rumpl.dev and write the summary to a file test.txt \n\n    • Calling fetch ✔️\n    • Calling write_file ✔️\n  \n  The summary of the website rumpl.dev has been successfully written to the file test.txt in the allowed directory. Let me know if you need further assistance!\n\n\n$ cat test.txt \nThe website rumpl.dev features a variety of blog posts and articles authored by the site owner. Here's a summary of the content:\n\n1. **Wasmio 2023 (March 25, 2023)**: A recap of the WasmIO 2023 conference held in Barcelona. The author shares their experience as a speaker and praises the organizers for a successful event.\n\n2. **Writing a Window Manager in Rust - Part 2 (January 3, 2023)**: The second part of a series on creating a window manager in Rust. This installment focuses on enhancing the functionality to manage windows effectively.\n\n3. **2022 in Review (December 29, 2022)**: A personal and professional recap of the year 2022. The author reflects on the highs and lows of the year, emphasizing professional achievements.\n\n4. **Writing a Window Manager in Rust - Part 1 (December 28, 2022)**: The first part of the series on building a window manager in Rust. The author discusses setting up a Linux machine and the challenges of working with X11 and Rust.\n\n5. **Add docker/docker to your dependencies (May 10, 2020)**: A guide for Go developers on how to use the Docker client library in their projects. The post includes a code snippet demonstrating the integration.\n\n6. **First (October 11, 2019)**: The inaugural post on the blog, featuring a simple \"Hello World\" program in Go.\n```\n\n----------------------------------------\n\nTITLE: Installing GNOME Extensions for RHEL 9\nDESCRIPTION: Commands to install and enable AppIndicator GNOME extensions on RHEL 9\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/rhel.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf install gnome-shell-extension-appindicator\n$ sudo gnome-extensions enable appindicatorsupport@rgcjonas.gmail.com\n```\n\n----------------------------------------\n\nTITLE: Changing Docker Swarm Node Availability\nDESCRIPTION: Shows how to update a node's availability status to 'drain' using the docker node update command. This prevents new tasks from being assigned to the node.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/manage-nodes.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker node update --availability drain node-1\n\nnode-1\n```\n\n----------------------------------------\n\nTITLE: Adding cloud builder endpoint using Docker CLI\nDESCRIPTION: This command creates a new cloud builder endpoint for Docker Build Cloud. It requires specifying the organization and builder name.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/setup.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx create --driver cloud <ORG>/<BUILDER_NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Cards in YAML Front Matter\nDESCRIPTION: Example YAML front matter configuration for populating a grid of cards. Each entry in the grid array defines a card with title, description, icon, and link properties.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/cards.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# front matter section of a page\ntitle: some page\ngrid:\n  - title: \"Docker Engine\"\n    description: Vrrrrooooommm\n    icon: \"developer_board\"\n    link: \"/engine/\"\n  - title: \"Docker Build\"\n    description: Clang bang\n    icon: \"build\"\n    link: \"/build/\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Context Details\nDESCRIPTION: The docker context inspect command shows detailed information about a specific context, including its endpoints configuration, TLS settings, and storage location.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/contexts.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker context inspect default\n[\n    {\n        \"Name\": \"default\",\n        \"Metadata\": {},\n        \"Endpoints\": {\n            \"docker\": {\n                \"Host\": \"unix:///var/run/docker.sock\",\n                \"SkipTLSVerify\": false\n            }\n        },\n        \"TLSMaterial\": {},\n        \"Storage\": {\n            \"MetadataPath\": \"\\u003cIN MEMORY\\u003e\",\n            \"TLSPath\": \"\\u003cIN MEMORY\\u003e\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images on Local System\nDESCRIPTION: Shows how to display a list of Docker images available on the local system using the docker image ls command.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-an-image.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker image ls\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Defined Bridge Network with IPv6 Support in Docker\nDESCRIPTION: Creates a bridge network with IPv6 support by specifying the --ipv6 flag and a subnet. This allows containers on the network to communicate using IPv6 addresses.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create --ipv6 --subnet 2001:db8:1234::/64 my-net\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Watch Feature\nDESCRIPTION: Docker Compose file with highlighted watch feature that enables automatic rebuilding of the container when code changes are detected.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/develop.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  shiny-app:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - 3838:3838\n    environment:\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    depends_on:\n      db:\n        condition: service_healthy\n    secrets:\n      - db-password\n    develop:\n      watch:\n        - action: rebuild\n          path: .\n  db:\n    image: postgres\n    restart: always\n    user: postgres\n    secrets:\n      - db-password\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_DB=example\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    expose:\n      - 5432\n    healthcheck:\n      test: [\"CMD\", \"pg_isready\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\nvolumes:\n  db-data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Configuration File\nDESCRIPTION: This JSON configuration defines the Docker plugin's capabilities, permissions, and settings. It specifies environment variables for AWS credentials, volume driver interface, and required Linux capabilities for device access.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/EBS_volume.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"Args\": {\n        \"Description\": \"\",\n        \"Name\": \"\",\n        \"Settable\": null,\n        \"Value\": null\n      },\n      \"Description\": \"A proof-of-concept EBS plugin (using rexray) for Docker\",\n      \"Documentation\": \"https://github.com/tiborvass/rexray-plugin\",\n      \"Entrypoint\": [\n        \"/usr/bin/rexray\", \"service\", \"start\", \"-f\"\n      ],\n      \"Env\": [\n        {\n          \"Description\": \"\",\n          \"Name\": \"REXRAY_SERVICE\",\n          \"Settable\": [\n            \"value\"\n          ],\n          \"Value\": \"ebs\"\n        },\n        {\n          \"Description\": \"\",\n          \"Name\": \"EBS_ACCESSKEY\",\n          \"Settable\": [\n            \"value\"\n          ],\n          \"Value\": \"\"\n        },\n        {\n          \"Description\": \"\",\n          \"Name\": \"EBS_SECRETKEY\",\n          \"Settable\": [\n            \"value\"\n          ],\n          \"Value\": \"\"\n        }\n      ],\n      \"Interface\": {\n        \"Socket\": \"rexray.sock\",\n        \"Types\": [\n          \"docker.volumedriver/1.0\"\n        ]\n      },\n      \"Linux\": {\n        \"AllowAllDevices\": true,\n        \"Capabilities\": [\"CAP_SYS_ADMIN\"],\n        \"Devices\": null\n      },\n      \"Mounts\": [\n        {\n          \"Source\": \"/dev\",\n          \"Destination\": \"/dev\",\n          \"Type\": \"bind\",\n          \"Options\": [\"rbind\"]\n        }\n      ],\n      \"Network\": {\n        \"Type\": \"host\"\n      },\n      \"PropagatedMount\": \"/var/lib/libstorage/volumes\",\n      \"User\": {},\n      \"WorkDir\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Driver for Docker Compose Service\nDESCRIPTION: Sets the logging driver and options for a service's containers. This example configures syslog as the logging driver with a specific syslog address.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nlogging:\n  driver: syslog\n  options:\n    syslog-address: \"tcp://192.168.0.42:123\"\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Volume Group\nDESCRIPTION: Command to create a volume group named 'docker' on the specified device using vgcreate.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo vgcreate docker /dev/xvdf\n\nVolume group \"docker\" successfully created\n```\n\n----------------------------------------\n\nTITLE: Defining ExecResultV0 Interface Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the ExecResultV0 interface, including optional command, killed status, signal, code, and required stdout and stderr.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExecResultV0.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExecResultV0 {\n  cmd?: string;\n  killed?: boolean;\n  signal?: string;\n  code?: number;\n  stdout: string;\n  stderr: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Plist Configuration for Docker Desktop Authentication (Mac)\nDESCRIPTION: XML plist file configuration that specifies allowed organizations for Docker Desktop sign-in enforcement on macOS systems. This file should be placed in the appropriate system directory with proper permissions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>allowedOrgs</key>\n    <array>\n        <string>myorg1</string>\n        <string>myorg2</string>\n    </array>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Running a Go Web Application with CockroachDB\nDESCRIPTION: This Go code initializes a web server using the Echo framework, sets up a connection to a CockroachDB database, and defines HTTP handlers for root and send endpoints. It also includes functions for database operations such as inserting messages and counting records.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/cenkalti/backoff/v4\"\n\t\"github.com/cockroachdb/cockroach-go/v2/crdb\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc main() {\n\n\te := echo.New()\n\n\te.Use(middleware.Logger())\n\te.Use(middleware.Recover())\n\n\tdb, err := initStore()\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to initialize the store: %s\", err)\n\t}\n\tdefer db.Close()\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn rootHandler(db, c)\n\t})\n\n\te.GET(\"/ping\", func(c echo.Context) error {\n\t\treturn c.JSON(http.StatusOK, struct{ Status string }{Status: \"OK\"})\n\t})\n\n\te.POST(\"/send\", func(c echo.Context) error {\n\t\treturn sendHandler(db, c)\n\t})\n\n\thttpPort := os.Getenv(\"HTTP_PORT\")\n\tif httpPort == \"\" {\n\t\thttpPort = \"8080\"\n\t}\n\n\te.Logger.Fatal(e.Start(\":\" + httpPort))\n}\n\ntype Message struct {\n\tValue string `json:\"value\"`\n}\n\nfunc initStore() (*sql.DB, error) {\n\n\tpgConnString := fmt.Sprintf(\"host=%s port=%s dbname=%s user=%s password=%s sslmode=disable\",\n\t\tos.Getenv(\"PGHOST\"),\n\t\tos.Getenv(\"PGPORT\"),\n\t\tos.Getenv(\"PGDATABASE\"),\n\t\tos.Getenv(\"PGUSER\"),\n\t\tos.Getenv(\"PGPASSWORD\"),\n\t)\n\n\tvar (\n\t\tdb  *sql.DB\n\t\terr error\n\t)\n\topenDB := func() error {\n\t\tdb, err = sql.Open(\"postgres\", pgConnString)\n\t\treturn err\n\t}\n\n\terr = backoff.Retry(openDB, backoff.NewExponentialBackOff())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif _, err := db.Exec(\n\t\t\"CREATE TABLE IF NOT EXISTS message (value TEXT PRIMARY KEY)\"); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn db, nil\n}\n\nfunc rootHandler(db *sql.DB, c echo.Context) error {\n\tr, err := countRecords(db)\n\tif err != nil {\n\t\treturn c.HTML(http.StatusInternalServerError, err.Error())\n\t}\n\treturn c.HTML(http.StatusOK, fmt.Sprintf(\"Hello, Docker! (%d)\\n\", r))\n}\n\nfunc sendHandler(db *sql.DB, c echo.Context) error {\n\n\tm := &Message{}\n\n\tif err := c.Bind(m); err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, err)\n\t}\n\n\terr := crdb.ExecuteTx(context.Background(), db, nil,\n\t\tfunc(tx *sql.Tx) error {\n\t\t\t_, err := tx.Exec(\n\t\t\t\t\"INSERT INTO message (value) VALUES ($1) ON CONFLICT (value) DO UPDATE SET value = excluded.value\",\n\t\t\t\tm.Value,\n\t\t\t)\n\t\t\tif err != nil {\n\t\t\t\treturn c.JSON(http.StatusInternalServerError, err)\n\t\t\t}\n\t\t\treturn nil\n\t\t})\n\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, err)\n\t}\n\n\treturn c.JSON(http.StatusOK, m)\n}\n\nfunc countRecords(db *sql.DB) (int, error) {\n\n\trows, err := db.Query(\"SELECT COUNT(*) FROM message\")\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdefer rows.Close()\n\n\tcount := 0\n\tfor rows.Next() {\n\t\tif err := rows.Scan(&count); err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t\trows.Close()\n\t}\n\n\treturn count, nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Link-Local IPs for Docker Compose Services\nDESCRIPTION: Sets a list of link-local IPs for a service container. These are special IPs that belong to a well-known subnet managed by the operator.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: busybox\n    command: top\n    networks:\n      app_net:\n        link_local_ips:\n          - 57.123.22.11\n          - 57.123.22.13\nnetworks:\n  app_net:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Compose Push Documentation\nDESCRIPTION: This YAML snippet defines the metadata for the 'docker compose push' command documentation page. It specifies the data folder, file name, title, aliases for backward compatibility, and the layout to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/push.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_push\ntitle: docker compose push\naliases:\n- /compose/reference/push/\n- /engine/reference/commandline/compose_push/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Docker Runtime Feature Updates\nDESCRIPTION: Collection of runtime-related changes including new daemon flags, container management improvements, and system resource management features\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n+ Add `--experimental` daemon flag to enable experimental features\\n+ Add a `--shutdown-timeout` daemon flag for graceful container stops\\n+ Add `--stop-timeout` for individual container stop timeouts\\n+ Add `--userland-proxy-path` flag for configuring userland proxy\\n+ Add `--init` flag for using tini as PID 1\\n+ Add `--init-path` flag for docker-init binary configuration\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Priority Options in Docker Container\nDESCRIPTION: Example command for setting CPU real-time runtime, real-time priority, and capability options on a Debian container. This demonstrates how to configure a container with specific CPU priority settings using the --cpu-rt-runtime, --ulimit rtprio, and --cap-add flags.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/resource_constraints.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it \\\n    --cpu-rt-runtime=950000 \\\n    --ulimit rtprio=99 \\\n    --cap-add=sys_nice \\\n    debian:jessie\n```\n\n----------------------------------------\n\nTITLE: Resetting Chrome DevTools Debug Mode for Docker Extensions\nDESCRIPTION: Command to stop Chrome DevTools from automatically opening when selecting the extension tab.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/test-debug.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension dev reset <name-of-your-extensions>\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Buildx Documentation\nDESCRIPTION: YAML frontmatter configuration block defining metadata for the Docker Buildx CLI documentation page, including data folder location, file name, title, layout, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx\ntitle: docker buildx\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx/\n---\n```\n\n----------------------------------------\n\nTITLE: Docker Registry Certificate Directory for Default HTTPS Port\nDESCRIPTION: Shows the directory structure for storing certificates when accessing a Docker registry on the default HTTPS port (443). Demonstrates the proper naming convention without specifying the port number.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/certificates.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n    /etc/docker/certs.d/\n    └── my-https.registry.example.com          <-- Hostname without port\n       ├── client.cert\n       ├── client.key\n       └── ca.crt\n```\n\n----------------------------------------\n\nTITLE: Health Check Template Example\nDESCRIPTION: Template demonstrating the use of helper functions to convert service health check intervals\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/customize.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{{ if $service.healthcheck.interval }}\n            periodSeconds: {{ $service.healthcheck.interval | seconds }}{{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Minimal Mode Provenance Attestation\nDESCRIPTION: Example of a provenance attestation generated with mode=min for a simple Docker image based on alpine:latest.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_type\": \"https://in-toto.io/Statement/v0.1\",\n  \"predicateType\": \"https://slsa.dev/provenance/v0.2\",\n  \"subject\": [\n    {\n      \"name\": \"pkg:docker/<registry>/<image>@<tag/digest>?platform=<platform>\",\n      \"digest\": {\n        \"sha256\": \"e8275b2b76280af67e26f068e5d585eb905f8dfd2f1918b3229db98133cb4862\"\n      }\n    }\n  ],\n  \"predicate\": {\n    \"builder\": {\n      \"id\": \"\"\n    },\n    \"buildType\": \"https://mobyproject.org/buildkit@v1\",\n    \"materials\": [\n      {\n        \"uri\": \"pkg:docker/alpine@latest?platform=linux%2Famd64\",\n        \"digest\": {\n          \"sha256\": \"8914eb54f968791faf6a8638949e480fef81e697984fba772b3976835194c6d4\"\n        }\n      }\n    ],\n    \"invocation\": {\n      \"configSource\": {\n        \"entryPoint\": \"Dockerfile\"\n      },\n      \"parameters\": {\n        \"frontend\": \"dockerfile.v0\",\n        \"args\": {},\n        \"locals\": [\n          {\n            \"name\": \"context\"\n          },\n          {\n            \"name\": \"dockerfile\"\n          }\n        ]\n      },\n      \"environment\": {\n        \"platform\": \"linux/amd64\"\n      }\n    },\n    \"metadata\": {\n      \"buildInvocationID\": \"yirbp1aosi1vqjmi3z6bc75nb\",\n      \"buildStartedOn\": \"2022-12-08T11:48:59.466513707Z\",\n      \"buildFinishedOn\": \"2022-12-08T11:49:01.256820297Z\",\n      \"reproducible\": false,\n      \"completeness\": {\n        \"parameters\": true,\n        \"environment\": true,\n        \"materials\": false\n      },\n      \"https://mobyproject.org/buildkit@v1#metadata\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Time in Kiribati using Gordon CLI\nDESCRIPTION: This bash command demonstrates how to use Gordon to ask for the current time in Kiribati, utilizing the configured MCP time server.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/yaml.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ai 'what time is it now in kiribati?'\n\n    • Calling get_current_time\n\n  The current time in Kiribati (Tarawa) is 9:38 PM on January 7, 2025.\n```\n\n----------------------------------------\n\nTITLE: Setting up Worker Node with Volume Plugin\nDESCRIPTION: Series of commands to join swarm, install volume plugin, and create a volume on worker node\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker swarm join \\\n  --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \\\n  192.168.99.100:2377\n\n$ docker plugin install tiborvass/sample-volume-plugin\nlatest: Pulling from tiborvass/sample-volume-plugin\neb9c16fbdc53: Download complete\nDigest: sha256:00b42de88f3a3e0342e7b35fa62394b0a9ceb54d37f4c50be5d3167899994639\nStatus: Downloaded newer image for tiborvass/sample-volume-plugin:latest\nInstalled plugin tiborvass/sample-volume-plugin\n\n$ docker volume create -d tiborvass/sample-volume-plugin --name pluginVol\n```\n\n----------------------------------------\n\nTITLE: Pruning Docker Images with Time Filter\nDESCRIPTION: This command prunes images created more than 24 hours ago. It demonstrates the use of the --filter flag to limit which images are pruned based on creation time.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker image prune -a --filter \"until=24h\"\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop from Command Line on Mac\nDESCRIPTION: Series of commands to install Docker Desktop on Mac using the command line. This method installs Docker Desktop in the Applications folder after downloading the Docker.dmg file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/mac-install.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo hdiutil attach Docker.dmg\n$ sudo /Volumes/Docker/Docker.app/Contents/MacOS/install\n$ sudo hdiutil detach /Volumes/Docker\n```\n\n----------------------------------------\n\nTITLE: Setting Shared Memory Size in Docker Buildx Bake (HCL)\nDESCRIPTION: Demonstrates how to set the size of shared memory for build containers using the 'shm-size' attribute.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_32\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  shm-size = \"128m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Security Options in Docker Compose\nDESCRIPTION: Example showing how sequence merging works in Docker Compose, specifically with security_opt. When extending services, sequences are merged and duplicates are removed.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  common:\n    image: busybox\n    security_opt:\n      - label=role:ROLE\n  cli:\n    extends:\n      service: common\n    security_opt:\n      - label=user:USER\n```\n\n----------------------------------------\n\nTITLE: Registry Key Location for Docker Desktop Analytics Preference\nDESCRIPTION: This snippet shows the Windows registry key path where Docker Desktop stores the analytics preference. When analytics is disabled, this key is set to 1. The key is removed upon uninstallation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nSOFTWARE\\Docker Inc.\\Docker Desktop\\DisableMsiAnalytics\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Linux User Namespace in Second Container\nDESCRIPTION: Shows how a second container gets a different user ID mapping range (165536) when using Enhanced Container Isolation. This illustrates how each container gets an exclusive range of user ID mappings managed by Sysbox.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm --name=second alpine\n/ # cat /proc/self/uid_map\n         0     165536      65536\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Generation Commands\nDESCRIPTION: Console commands for generating SSL certificates for Nginx configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ openssl genrsa -out \"root-ca.key\" 4096\n```\n\nLANGUAGE: console\nCODE:\n```\n$ openssl req \\\n          -new -key \"root-ca.key\" \\\n          -out \"root-ca.csr\" -sha256 \\\n          -subj '/C=US/ST=CA/L=San Francisco/O=Docker/CN=Swarm Secret Example CA'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ openssl x509 -req -days 3650 -in \"root-ca.csr\" \\\n               -signkey \"root-ca.key\" -sha256 -out \"root-ca.crt\" \\\n               -extfile \"root-ca.cnf\" -extensions \\\n               root_ca\n```\n\nLANGUAGE: console\nCODE:\n```\n$ openssl genrsa -out \"site.key\" 4096\n```\n\nLANGUAGE: console\nCODE:\n```\n$ openssl req -new -key \"site.key\" -out \"site.csr\" -sha256 \\\n          -subj '/C=US/ST=CA/L=San Francisco/O=Docker/CN=localhost'\n```\n\nLANGUAGE: console\nCODE:\n```\n$ openssl x509 -req -days 750 -in \"site.csr\" -sha256 \\\n    -CA \"root-ca.crt\" -CAkey \"root-ca.key\" -CAcreateserial \\\n    -out \"site.crt\" -extfile \"site.cnf\" -extensions server\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Docker Desktop MSI Interactively without Verbose Logging in PowerShell\nDESCRIPTION: Basic command to uninstall Docker Desktop MSI interactively without logging, displaying the uninstallation user interface.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /x \"DockerDesktop.msi\"\n```\n\n----------------------------------------\n\nTITLE: Error Output for Undefined Variable\nDESCRIPTION: Sample output message displayed when an undefined variable is detected in a Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage of undefined variable '$foo'\n```\n\n----------------------------------------\n\nTITLE: Mapping a specific host port to a container port in Docker\nDESCRIPTION: Creates a container where port 80 on the host is explicitly mapped to port 5000 in the container using the -p flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 80:5000 training/webapp python app.py\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message for Incorrect Stage Name Casing in Dockerfile\nDESCRIPTION: This snippet shows the output message generated when a stage name violates the lowercase naming convention in a Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/stage-name-casing.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nStage name 'BuilderBase' should be lowercase\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Annotations\nDESCRIPTION: This command shows how to add an annotation only to components matching a specific platform (linux/amd64) by using a platform qualifier in square brackets.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/annotations.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --tag <IMAGE> --push --annotation \"manifest[linux/amd64]:foo=bar\" .\n```\n\n----------------------------------------\n\nTITLE: Docker Command Failures in Git Bash\nDESCRIPTION: Illustrates common error messages when running Docker commands in Git Bash on Windows, highlighting issues with path conversion and mount destinations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/topics.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -ti -v C:\\Users\\user\\work:/work alpine\ndocker: Error response from daemon: mkdir C:UsersUserwork: Access is denied.\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -ti -v $(pwd):/work alpine\ndocker: Error response from daemon: OCI runtime create failed: invalid mount {Destination:\\Program Files\\Git\\work Type:bind Source:/run/desktop/mnt/host/c/Users/user/work;C Options:[rbind rprivate]}: mount destination \\Program Files\\Git\\work not absolute: unknown.\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose in Background\nDESCRIPTION: Commands to run and stop the containerized PHP application in detached mode using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/containerize.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build -d\n```\n\n----------------------------------------\n\nTITLE: Using docker swarm update with External CA\nDESCRIPTION: Example of updating a Docker Swarm to use an external Certificate Authority for signing certificates, specifying the protocol and relevant options.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/swarm/update.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm update --external-ca protocol=cfssl,url=https://example.com\n```\n\n----------------------------------------\n\nTITLE: Displaying All Available Data as JSON in Docker\nDESCRIPTION: This command shows all available data fields in JSON format, which is useful for discovering what data can be accessed and formatted with templates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker container ls --format='{{json .}}'\n```\n\n----------------------------------------\n\nTITLE: Exec Start API Request in Docker\nDESCRIPTION: HTTP request to start a previously set up exec instance, specifying detach and TTY parameters.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_57\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/exec/e90e34656806/start HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n \"Detach\": false,\n \"Tty\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Forcibly Removing a Node from Docker Swarm\nDESCRIPTION: This snippet demonstrates how to forcibly remove a node from a Docker swarm when it becomes unreachable or compromised. It shows the error that occurs when trying to remove a node that is still active, followed by using the --force flag to override this protection.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/admin_guide.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker node rm node9\n\nError response from daemon: rpc error: code = 9 desc = node node9 is not down and can't be removed\n\n$ docker node rm --force node9\n\nNode node9 removed from swarm\n```\n\n----------------------------------------\n\nTITLE: Database Pre-seeding SQL Script\nDESCRIPTION: SQL script to create a sample database with users table and insert initial data.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE sampledb;\n\n\\c sampledb\n\nCREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(50),\n  email VARCHAR(100) UNIQUE\n);\n\nINSERT INTO users (name, email) VALUES\n  ('Alpha', 'alpha@example.com'),\n  ('Beta', 'beta@example.com'),\n  ('Gamma', 'gamma@example.com');\n```\n\n----------------------------------------\n\nTITLE: HTML Basic Template\nDESCRIPTION: Basic HTML document structure with title\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n</head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop for Non-Admin Mac Users\nDESCRIPTION: Command to install Docker Desktop on Mac for a specific user without requiring administrator privileges after installation. Uses the --user flag to specify which user account can run Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/general.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ /Applications/Docker.app/Contents/MacOS/install --user=<userid>\n```\n\n----------------------------------------\n\nTITLE: Creating Buttons Using Shortcodes in Docker Documentation\nDESCRIPTION: This snippet demonstrates how to use the button shortcode in Docker documentation. The shortcode allows specifying a URL and display text for the button component.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/buttons.md#2025-04-11_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{</* button url=\"https://example.com/\" text=\"hello\" */>}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Logs Since Last Boot\nDESCRIPTION: Command to retrieve container logs generated since the last system boot using journalctl with the -b flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/journald.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo journalctl -b CONTAINER_NAME=webserver\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Daemon with systemd in Linux\nDESCRIPTION: Command to manually start the Docker daemon service using systemd on Ubuntu, Debian, and other Linux distributions that use systemd. This command requires sudo privileges.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/start.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl start docker\n```\n\n----------------------------------------\n\nTITLE: Updating HTML Template for Live Reload Test\nDESCRIPTION: This diff shows a minor change to the layout.html file to test the live reloading functionality of Compose Watch.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/develop.md#2025-04-11_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-   <li th:replace=\"~{::menuItem ('/','home','home page','home','Home')}\">\n+   <li th:replace=\"~{::menuItem ('/','home','home page','home','Home!')}\">\n\n```\n\n----------------------------------------\n\nTITLE: Standard Attestation Manifest JSON Structure\nDESCRIPTION: Example of the structure of a standard attestation manifest. This shows how attestations are stored as manifests referenced by the image's index, containing a single layer with the attestation value.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n    \"size\": 167,\n    \"digest\": \"sha256:916d7437a36dd0e258e64d9c5a373ca5c9618eeb1555e79bd82066e593f9afae\"\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.in-toto+json\",\n      \"size\": 1833349,\n      \"digest\": \"sha256:3138024b98ed5aa8e3008285a458cd25a987202f2500ce1a9d07d8e1420f5491\",\n      \"annotations\": {\n        \"in-toto.io/predicate-type\": \"https://spdx.dev/Document\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Updates v1.36\nDESCRIPTION: Documents addition of exec_die event to events endpoint.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/version-history.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* `Get /events` now return `exec_die` event when an exec process terminates\n```\n\n----------------------------------------\n\nTITLE: Opening Native File Dialog in Docker Extension\nDESCRIPTION: This snippet demonstrates how to use the showOpenDialog method of the Dialog interface to display a native open file dialog. It allows the user to select a file using the system's native file picker.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Dialog.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.desktopUI.dialog.showOpenDialog({properties: ['openFile']});\n```\n\n----------------------------------------\n\nTITLE: Switching to a Remote Docker Context\nDESCRIPTION: Demonstrates how to switch to a previously created remote Docker context and verify the connection by retrieving information from the remote Docker engine.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker context use my-remote-engine\nmy-remote-engine\nCurrent context is now \"my-remote-engine\"\n\n$ docker info\n<prints output of the remote engine>\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Logging Plugin\nDESCRIPTION: Command to install a Docker logging driver plugin from a registry.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/plugins.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker plugin install <org/image>\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Using Docker CLI for Build and Run\nDESCRIPTION: These console commands show how to set proxy configurations directly on the command-line when building images or running containers using the --build-arg and --env flags respectively.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/proxy.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --build-arg HTTP_PROXY=\"http://proxy.example.com:3128\" .\n$ docker run --env HTTP_PROXY=\"http://proxy.example.com:3128\" redis\n```\n\n----------------------------------------\n\nTITLE: Adding Security Options to Docker Container\nDESCRIPTION: Shows how to customize container security settings using the --security-opts flag, which allows specification of container labels and AppArmor profiles.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n--security-opts\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Documentation Page Properties in YAML\nDESCRIPTION: YAML front matter configuration that specifies build settings, page title, weight for ordering, and URL aliases for a Docker documentation installation page. The build render is set to never, indicating special build handling.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  render: never\ntitle: Install\nweight: 10\naliases:\n- /desktop/install/\n- /desktop/setup/install/\n```\n\n----------------------------------------\n\nTITLE: Release Template Shortcode Usage\nDESCRIPTION: Template shortcode used for displaying release date information and desktop installation instructions\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{{< release-date date=\"2024-09-12\" >}}\n\n{{< desktop-install-v2 all=true beta_win_arm=true version=\"4.34.2\" build_path=\"/167172/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Example Image Index with Attestation in JSON\nDESCRIPTION: Complete example of an OCI image index that includes both a regular image manifest for linux/amd64 and an attestation manifest. The example demonstrates how attestations are linked to specific images using annotations.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mediaType\": \"application/vnd.oci.image.index.v1+json\",\n  \"schemaVersion\": 2,\n  \"manifests\": [\n    {\n      \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n      \"digest\": \"sha256:23678f31b3b3586c4fb318aecfe64a96a1f0916ba8faf9b2be2abee63fa9e827\",\n      \"size\": 1234,\n      \"platform\": {\n        \"architecture\": \"amd64\",\n        \"os\": \"linux\"\n      }\n    },\n    {\n      \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n      \"digest\": \"sha256:02cb9aa7600e73fcf41ee9f0f19cc03122b2d8be43d41ce4b21335118f5dd943\",\n      \"size\": 1234,\n      \"annotations\": {\n        \"vnd.docker.reference.digest\": \"sha256:23678f31b3b3586c4fb318aecfe64a96a1f0916ba8faf9b2be2abee63fa9e827\",\n        \"vnd.docker.reference.type\": \"attestation-manifest\"\n      },\n      \"platform\": {\n         \"architecture\": \"unknown\",\n         \"os\": \"unknown\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker to Recognize Scout Plugin (Windows)\nDESCRIPTION: JSON configuration to add the scout subdirectory to Docker's config.json as a plugin directory on Windows. This enables Docker to find and use the Scout plugin.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/install.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cliPluginsExtraDirs\": [\n    \"C:\\Users\\<USER>\\.docker\\scout\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Startup Command\nDESCRIPTION: Command to build and run the containerized application using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rag-ollama/containerize.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Overriding Target Stage for Vote Service\nDESCRIPTION: HCL configuration to override the target stage for the vote service. This changes the target from 'dev' to 'final' for production builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"vote\" {\n  target = \"final\"\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Conflicting Docker Packages on Raspberry Pi OS\nDESCRIPTION: Removes any previously installed packages that might conflict with the official Docker Engine installation. This includes unofficial Docker packages and standalone containerd or runc installations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done\n```\n\n----------------------------------------\n\nTITLE: Rendering Grid Items in Hugo Template\nDESCRIPTION: A Hugo shortcode that renders the grid_core items defined in the frontmatter. This template code generates a grid layout displaying the billing-related resources.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/billing/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< grid items=\"grid_core\" >}}\n```\n\n----------------------------------------\n\nTITLE: Controlling Build Cache in Docker Buildx Bake (HCL)\nDESCRIPTION: Demonstrates how to control build caching using the 'no-cache-filter' and 'no-cache' attributes. These can be used to disable caching for specific stages or the entire build.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_26\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  no-cache-filter = [\"foo\"]\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  no-cache = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Docker Swarm\nDESCRIPTION: This command initializes a new Docker swarm, making the current node a manager. It outputs the command for other nodes to join the swarm as workers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-mode.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm init\nSwarm initialized: current node (dxn1zf6l61qsb1josjja83ngz) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join \\\n    --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \\\n    192.168.99.100:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n```\n\n----------------------------------------\n\nTITLE: Systemd Network Configuration for Docker Interfaces\nDESCRIPTION: Configuration file for systemd-networkd to mark Docker interfaces as un-managed. This prevents systemd-networkd from interfering with Docker's network interfaces.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\n# Ensure that the Docker interfaces are un-managed\n\n[Match]\nName=docker0 br-* veth*\n\n[Link]\nUnmanaged=yes\n\n```\n\n----------------------------------------\n\nTITLE: Docker Insights Data Structure\nDESCRIPTION: Table structure showing Docker Desktop users data metrics and their descriptions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/admin/organization/insights.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Data | Description |\n|:-----------------------------||\n| Active user | The number of users that have actively used Docker Desktop and either signed in with a Docker account that has a license in your organization or signed in to a Docker account with an email address from a domain associated with your organization. <br><br>Users who don't sign in to an account associated with your organization are not represented in the data. To ensure users sign in with an account associated with your organization, you can [enforce sign-in](/security/for-admins/enforce-sign-in/). |\n| Total organization members | The number of users that have used Docker Desktop, regardless of their Insights activity. |\n| Users opted out of analytics | The number of users that are a member of your organization that have opted out of sending analytics. <br><br>When users opt out of sending analytics, you won't see any of their data in Insights. To ensure that the data includes all users, you can use [Settings Management](/desktop/hardened-desktop/settings-management/) to set `analyticsEnabled` for all your users. |\n| Active users (graph) | The view over time for total active users. |\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Plugins\nDESCRIPTION: Command to list all installed Docker plugins.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/plugins.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker plugin ls\n```\n\n----------------------------------------\n\nTITLE: Partially overriding anchor values using YAML merge syntax\nDESCRIPTION: This example shows how to reuse most of a volume configuration using YAML merge (<<:) while overriding specific attributes, in this case the 'name' property.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/fragments.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    image: example/database\n    volumes:\n      - db-data\n      - metrics\nvolumes:\n  db-data: &default-volume\n    driver: default\n    name: \"data\"\n  metrics:\n    <<: *default-volume\n    name: \"metrics\"\n```\n\n----------------------------------------\n\nTITLE: Testing the Node.js Application with Mocked API\nDESCRIPTION: cURL command to test the Node.js application that's using the WireMock server for weather data.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ curl \"http://localhost:5001/api/v1/getWeather?city=Bengaluru\"\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Config Example\nDESCRIPTION: Example showing usage of .env file and CMD instruction in Dockerfile as referenced in version 1.8.0 breaking changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_24\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"command\", \"arg1\", \"arg2\"]\n```\n\n----------------------------------------\n\nTITLE: Docker Build Commands\nDESCRIPTION: Build commands and syntax for creating Docker images, including ADD instructions and environment variable handling.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_30\n\nLANGUAGE: dockerfile\nCODE:\n```\nADD url/file\nENV variable=value\nVOLUME /data\nENTRYPOINT [\"/bin/executable\"]\nUSER username\nWORKDIR /path\n```\n\n----------------------------------------\n\nTITLE: Opening External URL in Docker Extensions\nDESCRIPTION: This method opens an external URL using the system default browser. The URL must have either http or https protocol.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/dashboard.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.host.openExternal(\"https://docker.com\");\n```\n\n----------------------------------------\n\nTITLE: Disabling Log Stream Creation with awslogs Driver\nDESCRIPTION: Shows how to disable automatic log stream creation when using the awslogs driver, assuming the stream already exists.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/awslogs.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n    --log-driver=awslogs \\\n    --log-opt awslogs-region=us-east-1 \\\n    --log-opt awslogs-group=myLogGroup \\\n    --log-opt awslogs-stream=myLogStream \\\n    --log-opt awslogs-create-stream=false \\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Running JupyterLab with Bind Mount on Windows (Git Bash)\nDESCRIPTION: Windows Git Bash version of the command to run JupyterLab with the current directory bind-mounted to the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -p 8889:8888 -v \"/$(pwd):/home/jovyan/work\" quay.io/jupyter/base-notebook start-notebook.py --NotebookApp.token='my-token'\n```\n\n----------------------------------------\n\nTITLE: Invalid Dockerfile with Undefined Variable in ARG\nDESCRIPTION: Example of an incorrect Dockerfile where an undefined variable $foo is used in an ARG instruction.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine AS base\nARG VERSION=$foo\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Docker Registries for Cloud Builder\nDESCRIPTION: Example commands showing how to authenticate with both Docker Hub and a private registry before using a cloud builder. This is necessary because the cloud builder requires authentication with Docker.io and separate authentication for any private registries.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/builder-settings.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ echo $DOCKER_PAT | docker login docker.io -u <username> --password-stdin\n$ echo $REGISTRY_PASSWORD | docker login registry.example.com -u <username> --password-stdin\n$ docker build --builder <cloud-builder> --tag registry.example.com/<image> --push .\n```\n\n----------------------------------------\n\nTITLE: Alternative Inline Cache Export Using Build Arg\nDESCRIPTION: Alternative method to export inline cache by setting the BUILDKIT_INLINE_CACHE build argument instead of using the --cache-to flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/inline.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --build-arg BUILDKIT_INLINE_CACHE=1 .\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Images Before Account Deactivation\nDESCRIPTION: Command to download Docker images and tags before deactivating an organization account. This allows users to keep a local copy of their images after the organization is deactivated.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/admin/organization/deactivate-account.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull -a <image>:<tag>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Documentation\nDESCRIPTION: YAML configuration block defining the structure and metadata for Docker's getting started documentation page. Includes navigation items, page parameters, and content organization.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Get started\nkeywords: Docker, get started\ndescription: Get started with Docker\nlayout: wide\nparams:\n  icon: download\n  notoc: true\n  get-started:\n  - title: Get Docker\n    description: Choose the best installation path for your setup.\n    link: /get-started/get-docker/\n    icon: download\n  - title: What is Docker?\n    description: Learn about the Docker platform.\n    link: /get-started/docker-overview/\n    icon: summarize\n  get-started2:\n  - title: Introduction\n    description: Get started with the basics and the benefits of containerizing your applications.\n    link: /get-started/introduction/\n    icon: rocket\n  - title: Docker concepts\n    description: Gain a better understanding of foundational Docker concepts.\n    link: /get-started/docker-concepts/the-basics/what-is-a-container/\n    icon: foundation\n  - title: Docker workshop\n    description: Get guided through a 45-minute workshop to learn about Docker.\n    link: /get-started/workshop/\n    icon: desk\naliases:\n  - /get-started/what-is-a-container\n---\n```\n\n----------------------------------------\n\nTITLE: Analyzing SPDX SBOM with Docker Scout CLI\nDESCRIPTION: Demonstrates how to use Docker Scout to analyze CVEs from an SBOM file in SPDX or in-toto SPDX format.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/release-notes/cli.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves sbom://path/to/sbom.spdx.json\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Directory structure showing the files and folders created after Docker initialization, including Docker configuration files and application source code.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/containerize.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n├── docker-php-sample/\n│ ├── .git/\n│ ├── src/\n│ ├── tests/\n│ ├── .dockerignore\n│ ├── .gitignore\n│ ├── compose.yaml\n│ ├── composer.json\n│ ├── composer.lock\n│ ├── Dockerfile\n│ ├── README.Docker.md\n│ └── README.md\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Organization for Docker Scout\nDESCRIPTION: This command changes the default organization for all Docker Scout commands, including the 'env' command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/environment/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout config organization <org>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker API Docs\nDESCRIPTION: YAML front matter configuration block defining metadata for Docker Engine API v1.42 documentation page, including the link title, page title and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.42.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.42\ntitle: Docker Engine API v1.42 reference\naliases:\n  - /engine/api/v1.42/\n---\n```\n\n----------------------------------------\n\nTITLE: Securing Docker Swarm Data Path Port with iptables in Linux\nDESCRIPTION: This command demonstrates how to use iptables to secure the Docker Swarm VXLAN port (4789) by dropping non-encrypted packets. It's used as a security measure when operating Swarm clusters on untrusted networks.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Example iptables rule (order and other tools may require customization)\niptables -I INPUT -m udp --dport 4789 -m policy --dir in --pol none -j DROP\n```\n\n----------------------------------------\n\nTITLE: Example Docker Pull Command Output\nDESCRIPTION: Terminal output showing how Docker pulls an Ubuntu 22.04 image layer by layer. Each layer is downloaded separately and stored in Docker's local storage area.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull ubuntu:22.04\n22.04: Pulling from library/ubuntu\nf476d66f5408: Pull complete\n8882c27f669e: Pull complete\nd9af21273955: Pull complete\nf5029279ec12: Pull complete\nDigest: sha256:6120be6a2b7ce665d0cbddc3ce6eae60fe94637c6a66985312d1f02f63cc0bcd\nStatus: Downloaded newer image for ubuntu:22.04\ndocker.io/library/ubuntu:22.04\n```\n\n----------------------------------------\n\nTITLE: JSON Server Configuration\nDESCRIPTION: JSON configuration for server settings including TLS certificates\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"server\": {\n  \"http_addr\": \":4443\",\n  \"tls_key_file\": \"./fixtures/notary-server.key\",\n  \"tls_cert_file\": \"./fixtures/notary-server.crt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Matrix Target in Docker Bake HCL\nDESCRIPTION: This snippet demonstrates how to define a basic matrix target in Docker Bake HCL, creating two variants of an 'app' target.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/matrices.md#2025-04-11_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  name = \"app-${tgt}\"\n  matrix = {\n    tgt = [\"foo\", \"bar\"]\n  }\n  target = tgt\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image Using Custom Builder\nDESCRIPTION: Demonstrates building a simple Docker image using the custom builder, which will utilize the configured registry mirror.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/configure.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build --load . -f - <<EOF\nFROM alpine\nRUN echo \"hello world\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Disabling iptables and IP Masquerading in Docker\nDESCRIPTION: Demonstrates the relationship between the --iptables=false and --ip-masq=false flags, where disabling iptables should automatically disable IP masquerading.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n--iptables=false --ip-masq=false\n```\n\n----------------------------------------\n\nTITLE: Creating Database Password File\nDESCRIPTION: Content of the password.txt file used as a secret for the PostgreSQL database authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/develop.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmysecretpassword\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Watch Build Output\nDESCRIPTION: Example output showing the rebuild process when changes are detected by Docker Compose Watch\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/develop.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nRebuilding service(s) [\"api\"] after changes were detected...\n[+] Building 8.1s (15/15) FINISHED                                                                                                        docker:desktop-linux\n => [api internal] load build definition from Dockerfile                                                                                                  0.0s\n => => transferring dockerfile: 704B                                                                                                                      0.0s\n => [api internal] load metadata for docker.io/library/alpine:3.17                                                                                        1.1s\n  .                             \n => => exporting manifest list sha256:89ebc86fd51e27c1da440dc20858ff55fe42211a1930c2d51bbdce09f430c7f1                                                    0.0s\n => => naming to docker.io/library/go-api:latest                                                                                                          0.0s\n => => unpacking to docker.io/library/go-api:latest                                                                                                       0.0s\n => [api] resolving provenance for metadata file                                                                                                          0.0s\nservice(s) [\"api\"] successfully built\n```\n\n----------------------------------------\n\nTITLE: Correct Single ENTRYPOINT Usage\nDESCRIPTION: Example showing proper usage with a single ENTRYPOINT instruction combining multiple messages.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/multiple-instructions-disallowed.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nENTRYPOINT [\"echo\", \"Hello, Norway!\\nHello, Sweden!\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Output in Docker Buildx Bake (HCL)\nDESCRIPTION: Shows how to configure the build output using the 'output' attribute. This example demonstrates setting a cache-only output type.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_27\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  output = [{ type = \"cacheonly\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Ruby on Rails Application to Kubernetes\nDESCRIPTION: This command applies the Kubernetes YAML file to deploy the Ruby on Rails application to the local Kubernetes cluster. It creates the necessary Deployment and Service objects.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f docker-ruby-on-rails-kubernetes.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing Command in VM Extension with Docker Extension API\nDESCRIPTION: Illustrates how to execute a command inside the backend container of a Docker Extension. This method is marked for deprecation in favor of the 'exec' method from ExtensionCli.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/BackendV0.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await window.ddClient.backend.execInVMExtension(\n  `cliShippedInTheVm xxx`\n);\n\nconsole.log(output);\n```\n\n----------------------------------------\n\nTITLE: Configuring containerd shim with options\nDESCRIPTION: JSON configuration for the Docker daemon to register a containerd shim with additional configuration options, including a TypeUrl and ConfigPath.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/alternative-runtimes.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtimes\": {\n    \"gvisor\": {\n      \"runtimeType\": \"io.containerd.runsc.v1\",\n      \"options\": {\n        \"TypeUrl\": \"io.containerd.runsc.v1.options\",\n        \"ConfigPath\": \"/etc/containerd/runsc.toml\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Compose Events Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker Compose events command documentation page, including data folder, file name, title and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/events.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_events\ntitle: docker compose events\naliases:\n- /compose/reference/events/\n- /engine/reference/commandline/compose_events/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay2 Size Limit in Docker Daemon\nDESCRIPTION: Sets the default maximum size of containers when using the overlay2 storage driver. This is only supported when the backing filesystem is xfs and mounted with the pquota mount option.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dockerd -s overlay2 --storage-opt overlay2.size=1G\n```\n\n----------------------------------------\n\nTITLE: Configuring gMSA Credentials in Docker Compose\nDESCRIPTION: Example demonstrating gMSA credential spec configuration for a service using a config file.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    image: myimage:latest\n    credential_spec:\n      config: my_credential_spec\n\nconfigs:\n  my_credentials_spec:\n    file: ./my-credential-spec.json\n```\n\n----------------------------------------\n\nTITLE: Generating Page Content and Navigation in Hugo Templates\nDESCRIPTION: Hugo template that renders a page's title and content, followed by a list of child pages with links to their Docker documentation URLs. Uses Hugo's template syntax and page variables.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/_default/list.markdown.md#2025-04-11_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{ .Title }}\n\n{{ .RawContent }}\n\n{{ range .Pages }}\n- [{{ .Title }}](https://docs.docker.com{{ .RelPermalink }})\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Documentation Build Settings in YAML\nDESCRIPTION: YAML frontmatter configuration that disables build list generation, resource publishing, and rendering operations for Docker documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncascade:\n- build:\n    list: never\n    publishResources: false\n    render: never\n---\n```\n\n----------------------------------------\n\nTITLE: Killing a Container in Docker API\nDESCRIPTION: API call to kill a Docker container by its ID or name. The optional 'signal' parameter specifies which signal to send to the container (defaults to SIGKILL).\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/kill HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Plugin Install Documentation\nDESCRIPTION: This YAML snippet defines the frontmatter for the documentation page of the 'docker plugin install' command. It specifies the data folder, data file, title, aliases for redirects, and the layout to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/plugin/install.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_plugin_install\ntitle: docker plugin install\naliases:\n- /edge/engine/reference/commandline/plugin_install/\n- /engine/reference/commandline/plugin_install/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Hub Rate Limit Headers\nDESCRIPTION: This command uses the previously obtained token to make a HEAD request to Docker Hub and retrieve the rate limit headers. It demonstrates how to check your current pull rate and limit without actually performing a pull.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/usage/pulls.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl --head -H \"Authorization: Bearer $TOKEN\" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest\n```\n\n----------------------------------------\n\nTITLE: Building Docker Documentation Navigation with Hugo Templates\nDESCRIPTION: This template generates a structured table of contents for Docker documentation using Hugo's templating system. It sorts pages by their relative permalinks and groups them by section to create a hierarchical markdown navigation structure with links to each page.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/_default/index.llms.txt#2025-04-11_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- $pages := .Site.RegularPages -}}\n{{- $sorted := sort $pages \"RelPermalink\" -}}\n{{- $grouped := $sorted.GroupBy \"Section\" -}}\n\n# Docker Documentation\n\n{{ range $grouped }}\n## {{ humanize .Key }}\n{{ range .Pages }}\n- [{{ .Title }}]({{ .Permalink }}){{ end }}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Resetting Values in Docker Compose Override\nDESCRIPTION: Shows how to use the !reset YAML tag to remove elements from the application model in an override Compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/merge.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: myapp\n    ports:\n      - \"8080:80\" \n    environment:\n      FOO: BAR           \n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: myapp\n    ports: !reset []\n    environment:\n      FOO: !reset null\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: myapp\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Build Workflow in GitHub Actions\nDESCRIPTION: GitHub Actions workflow configuration for building and pushing Docker images. Sets up authentication, builds images using Docker buildx, and configures metadata extraction for proper image tagging.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/ci/gha.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Docker\n\non:\n  push:\n    tags: [\"*\"]\n    branches:\n      - \"main\"\n  pull_request:\n    branches: [\"**\"]\n\nenv:\n  # Hostname of your registry\n  REGISTRY: docker.io\n  # Image repository, without hostname and tag\n  IMAGE_NAME: ${{ github.repository }}\n  SHA: ${{ github.event.pull_request.head.sha || github.event.after }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    permissions:\n      pull-requests: write\n\n    steps:\n      # Authenticate to the container registry\n      - name: Authenticate to registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ secrets.REGISTRY_USER }}\n          password: ${{ secrets.REGISTRY_TOKEN }}\n      \n      - name: Setup Docker buildx\n        uses: docker/setup-buildx-action@v3\n\n      # Extract metadata (tags, labels) for Docker\n      - name: Extract Docker metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          labels: |\n            org.opencontainers.image.revision=${{ env.SHA }}\n          tags: |\n            type=edge,branch=$repo.default_branch\n            type=semver,pattern=v{{version}}\n            type=sha,prefix=,suffix=,format=short\n\n      # Build and push Docker image with Buildx\n      # (don't push on PR, load instead)\n      - name: Build and push Docker image\n        id: build-and-push\n        uses: docker/build-push-action@v6\n        with:\n          sbom: ${{ github.event_name != 'pull_request' }}\n          provenance: ${{ github.event_name != 'pull_request' }}\n          push: ${{ github.event_name != 'pull_request' }}\n          load: ${{ github.event_name == 'pull_request' }}\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n```\n\n----------------------------------------\n\nTITLE: Adding OCI Annotations with build-push-action in GitHub Actions\nDESCRIPTION: This workflow demonstrates how to extract metadata and add annotations to Docker images using the docker/metadata-action and docker/build-push-action. It logs into Docker Hub, sets up Buildx, extracts metadata, and builds and pushes an image with annotations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/annotations.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\nenv:\n  IMAGE_NAME: user/app\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.IMAGE_NAME }}\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          tags: ${{ steps.meta.outputs.tags }}\n          annotations: ${{ steps.meta.outputs.annotations }}\n          push: true\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML configuration block defining metadata for the documentation page including title, weight, description and keyword information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/synchronized-file-sharing.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Synchronized file shares\nweight: 70\ndescription: Get started with Synchronized file shares on Docker Desktop.\nkeyword: mutagen, file sharing, docker desktop, bind mounts\naliases:\n- /desktop/synchronized-file-sharing/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Docker Documentation Page\nDESCRIPTION: YAML frontmatter configuration for a Docker documentation page about source code management. It specifies that the page should never be rendered during build and sets the page title to 'Source code management'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/source-code-management/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Source code management\n---\n```\n\n----------------------------------------\n\nTITLE: Docker Swarm Service Logs\nDESCRIPTION: Example output from Docker Swarm service logs showing ping results.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/orchestration.md#2025-04-11_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndemo.1.463j2s3y4b5o@docker-desktop    | PING 8.8.8.8 (8.8.8.8): 56 data bytes\ndemo.1.463j2s3y4b5o@docker-desktop    | 64 bytes from 8.8.8.8: seq=0 ttl=37 time=13.005 ms\ndemo.1.463j2s3y4b5o@docker-desktop    | 64 bytes from 8.8.8.8: seq=1 ttl=37 time=13.847 ms\ndemo.1.463j2s3y4b5o@docker-desktop    | 64 bytes from 8.8.8.8: seq=2 ttl=37 time=41.296 ms\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring the Default Network in Docker Compose\nDESCRIPTION: Demonstrates how to modify the default network settings rather than creating new networks. This example uses a custom driver for the default network that connects all services.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/networking.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    ports:\n      - \"8000:8000\"\n  db:\n    image: postgres\n\nnetworks:\n  default:\n    # Use a custom driver\n    driver: custom-driver-1\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Extension Label Example in Dockerfile\nDESCRIPTION: Example of how to define the 'org.opencontainers.image.title' label in a Docker extension's Dockerfile. This label is required and appears as the human-readable title of the extension in Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/labels.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nLABEL org.opencontainers.image.title=\"my-extension\"\n```\n\n----------------------------------------\n\nTITLE: Multi-platform Build Error Example in Docker\nDESCRIPTION: Demonstrates the error message when attempting to build multi-platform images without containerd image store enabled. Shows the limitation of the default Docker driver for multi-platform builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/containerd.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --platform=linux/amd64,linux/arm64 .\n[+] Building 0.0s (0/0)\nERROR: Multi-platform build is not supported for the docker driver.\nSwitch to a different driver, or turn on the containerd image store, and try again.\nLearn more at https://docs.docker.com/go/build-multi-platform/\n```\n\n----------------------------------------\n\nTITLE: Sharing environment variables between services with YAML anchors\nDESCRIPTION: This example demonstrates how to define environment variables once using an anchor (&env) and reuse them across multiple services using an alias (*env).\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/fragments.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  first:\n    image: my-image:latest\n    environment: &env\n      - CONFIG_KEY\n      - EXAMPLE_KEY\n      - DEMO_VAR\n  second:\n    image: another-image:latest\n    environment: *env\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Variable Pass Through\nDESCRIPTION: Example showing how to pass environment variables from shell to container using docker-compose run.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose run -e VAR\n```\n\n----------------------------------------\n\nTITLE: Verifying Enhanced Container Isolation with UID Mapping\nDESCRIPTION: Console command to check if a container is running with Enhanced Container Isolation by examining its UID mapping. The output shows that the container's root user maps to an unprivileged user in the Docker Desktop VM.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm alpine cat /proc/self/uid_map\n```\n\n----------------------------------------\n\nTITLE: Opening External Browser for OAuth 2.0 Authentication in Docker Extension\nDESCRIPTION: This code snippet demonstrates how to use the ddClient.host.openExternal API to open a browser window for user authentication in a Docker extension. It constructs the authorization URL with necessary parameters like response_type, client_id, and redirect_uri.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/guides/oauth2-flow.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.openExternal(\"https://authorization-server.com/authorize?\n  response_type=code\n  &client_id=T70hJ3ls5VTYG8ylX3CZsfIu\n  &redirect_uri=${REDIRECT_URI});\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image with Custom Tag\nDESCRIPTION: This command builds a Docker image from the current directory and tags it with the user's Docker Hub username. It demonstrates how to create a custom image for pushing to a personal Docker Hub repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t <YOUR_DOCKER_USERNAME>/concepts-build-image-demo .\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Extension Interface Properties\nDESCRIPTION: TypeScript interface definition for Docker Extension API specifying three main properties: an optional vm of type ExtensionVM, an optional host of type ExtensionHost, and a required image property of type string. This interface was introduced in version 0.2.0 with the image property added in version 0.3.3.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Extension.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Extension {\n    readonly vm?: ExtensionVM;\n    readonly host?: ExtensionHost;\n    readonly image: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Service with Multiple Declarations\nDESCRIPTION: Example showing how to extend a service while also including the original service in the project configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/extends.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: alpine\n    command: echo\n    extends:\n      file: common-services.yml\n      service: webapp\n  webapp:\n    extends:\n      file: common-services.yml\n      service: webapp\n```\n\n----------------------------------------\n\nTITLE: Lint Configuration with Version Arguments\nDESCRIPTION: Dockerfile configuration for linting with golangci-lint including version management\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG GO_VERSION=\"1.23\"\nARG GOLANGCI_LINT_VERSION=\"1.61\"\n\nFROM golangci/golangci-lint:v${GOLANGCI_LINT_VERSION}-alpine AS lint\nRUN --mount=target=.,rw \\\n    golangci-lint run\n```\n\n----------------------------------------\n\nTITLE: Example SBOM Attestation JSON Structure\nDESCRIPTION: Truncated example of an SBOM attestation in in-toto JSON format. It shows the structure including subject information, file list, package details, and relationship mappings between files and packages.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_type\": \"https://in-toto.io/Statement/v0.1\",\n  \"predicateType\": \"https://spdx.dev/Document\",\n  \"subject\": [\n    {\n      \"name\": \"pkg:docker/<registry>/<image>@<tag/digest>?platform=<platform>\",\n      \"digest\": {\n        \"sha256\": \"e8275b2b76280af67e26f068e5d585eb905f8dfd2f1918b3229db98133cb4862\"\n      }\n    }\n  ],\n  \"predicate\": {\n    \"SPDXID\": \"SPDXRef-DOCUMENT\",\n    \"creationInfo\": {\n      \"created\": \"2022-12-15T11:47:54.546747383Z\",\n      \"creators\": [\"Organization: Anchore, Inc\", \"Tool: syft-v0.60.3\"],\n      \"licenseListVersion\": \"3.18\"\n    },\n    \"dataLicense\": \"CC0-1.0\",\n    \"documentNamespace\": \"https://anchore.com/syft/dir/run/src/core-da0f600b-7f0a-4de0-8432-f83703e6bc4f\",\n    \"name\": \"/run/src/core\",\n    // list of files that the image contains, e.g.:\n    \"files\": [\n      {\n        \"SPDXID\": \"SPDXRef-1ac501c94e2f9f81\",\n        \"comment\": \"layerID: sha256:9b18e9b68314027565b90ff6189d65942c0f7986da80df008b8431276885218e\",\n        \"fileName\": \"/bin/busybox\",\n        \"licenseConcluded\": \"NOASSERTION\"\n      }\n    ],\n    // list of packages that were identified for this image:\n    \"packages\": [\n      {\n        \"name\": \"busybox\",\n        \"originator\": \"Person: Sören Tempel <soeren+alpine@soeren-tempel.net>\",\n        \"sourceInfo\": \"acquired package info from APK DB: lib/apk/db/installed\",\n        \"versionInfo\": \"1.35.0-r17\",\n        \"SPDXID\": \"SPDXRef-980737451f148c56\",\n        \"description\": \"Size optimized toolbox of many common UNIX utilities\",\n        \"downloadLocation\": \"https://busybox.net/\",\n        \"licenseConcluded\": \"GPL-2.0-only\",\n        \"licenseDeclared\": \"GPL-2.0-only\"\n        // ...\n      }\n    ],\n    // files-packages relationship\n    \"relationships\": [\n      {\n        \"relatedSpdxElement\": \"SPDXRef-1ac501c94e2f9f81\",\n        \"relationshipType\": \"CONTAINS\",\n        \"spdxElementId\": \"SPDXRef-980737451f148c56\"\n      },\n      ...\n    ],\n    \"spdxVersion\": \"SPDX-2.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Exporters Usage\nDESCRIPTION: Demonstrates using multiple exporters in a single build command to output results in different formats simultaneously.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/_index.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build \\\n  --output type=registry,tag=<registry>/<image> \\\n  --output type=local,dest=<path/to/output> \\\n  --load .\n```\n\n----------------------------------------\n\nTITLE: Filtering CVEs with CISA KEV in Docker Scout CLI\nDESCRIPTION: Example of using the new --only-cisa-kev flag to filter CVEs listed in the CISA Known Exploited Vulnerabilities catalog.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/release-notes/cli.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves [IMAGE] --only-cisa-kev\n\n... (cropped output) ...\n## Packages and Vulnerabilities\n\n0C     1H     0M     0L  io.netty/netty-codec-http2 4.1.97.Final\npkg:maven/io.netty/netty-codec-http2@4.1.97.Final\n\n✗ HIGH CVE-2023-44487  CISA KEV  [OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities]\n  https://scout.docker.com/v/CVE-2023-44487\n  Affected range  : <4.1.100\n  Fixed version   : 4.1.100.Final\n  CVSS Score      : 7.5\n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H\n... (cropped output) ...\n```\n\n----------------------------------------\n\nTITLE: Variable Definition for Product Link and SSO Navigation\nDESCRIPTION: Go template variables defining the product link and navigation instructions that change based on the environment (Docker Hub vs Admin Console).\nSOURCE: https://github.com/docker/docs/blob/main/layouts/shortcodes/admin-sso-config.md#2025-04-11_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{ $product_link := \"[Docker Hub](https://hub.docker.com)\" }}\n{{ $sso_navigation := `Navigate to the SSO settings page for your organization. Select **My Hub**, your organization, **Settings**, and then **Security**.` }}\n```\n\n----------------------------------------\n\nTITLE: Streaming Container Metrics with Docker Stats\nDESCRIPTION: Use the 'docker stats' command to live stream a container's runtime metrics, including CPU, memory usage, memory limit, and network I/O metrics.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/runmetrics.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker stats redis1 redis2\n\nCONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O\nredis1              0.07%               796 KB / 64 MB        1.21%               788 B / 648 B       3.568 MB / 512 KB\nredis2              0.07%               2.746 MB / 64 MB      4.29%               1.266 KB / 648 B    12.4 MB / 0 B\n```\n\n----------------------------------------\n\nTITLE: Viewing Specific Container in TypeScript\nDESCRIPTION: Navigates to a specific container's tab using its full ID. Returns a promise that fails if the container doesn't exist.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/NavigationIntents.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.desktopUI.navigate.viewContainer(id)\n```\n\n----------------------------------------\n\nTITLE: YAML Service Configuration\nDESCRIPTION: YAML configuration for authorized keys service with deployment strategy\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nauthorizedkeys:\n  image: dockercloud/authorizedkeys\n  deployment_strategy: every_node\n  autodestroy: always\n  environment:\n    - AUTHORIZED_KEYS=ssh-rsa AAAAB3Nsomelongsshkeystringhereu9UzQbVKy9o00NqXa5jkmZ9Yd0BJBjFmb3WwUR8sJWZVTPFL\n  volumes:\n    /root:/user:rw\n```\n\n----------------------------------------\n\nTITLE: Using Secondary Source Directory as Context in Docker Bake\nDESCRIPTION: Example showing how to use a secondary source directory as a build context in a Dockerfile, referenced in a Bake file through the contexts map.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/contexts.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM golang\nCOPY --from=src . .\n```\n\nLANGUAGE: hcl\nCODE:\n```\n# Running `docker buildx bake app` will result in `src` not pointing\n# to some previous build stage but to the client filesystem, not part of the context.\ntarget \"app\" {\n  contexts = {\n    src = \"../path/to/source\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Specific Builder with Docker Build Command\nDESCRIPTION: These commands demonstrate how to use a non-default builder with the 'docker build' command by specifying the builder explicitly using the --builder flag or the BUILDX_BUILDER environment variable.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ BUILDX_BUILDER=my_builder docker build .\n$ docker build --builder my_builder .\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose in Detached Mode\nDESCRIPTION: Commands to build and run the containerized application in detached mode, and then stop it.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/containerize.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build -d\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages in JupyterLab Notebook\nDESCRIPTION: JupyterLab notebook cell command to install matplotlib and scikit-learn packages, which are required for the Iris dataset example.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n!pip install matplotlib scikit-learn\n```\n\n----------------------------------------\n\nTITLE: Persisting Cache State in Docker Container Driver\nDESCRIPTION: Series of commands demonstrating how to create a builder, remove it while preserving its state with --keep-state flag, and recreate it with the same persisted state.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/docker-container.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# setup a builder\n$ docker buildx create --name=container --driver=docker-container --use --bootstrap\ncontainer\n$ docker buildx ls\nNAME/NODE       DRIVER/ENDPOINT              STATUS   BUILDKIT PLATFORMS\ncontainer *     docker-container\n  container0    desktop-linux                running  v0.10.5  linux/amd64\n$ docker volume ls\nDRIVER    VOLUME NAME\nlocal     buildx_buildkit_container0_state\n\n# remove the builder while persisting state\n$ docker buildx rm --keep-state container\n$ docker volume ls\nDRIVER    VOLUME NAME\nlocal     buildx_buildkit_container0_state\n\n# the newly created driver with the same name will have all the state of the previous one!\n$ docker buildx create --name=container --driver=docker-container --use --bootstrap\ncontainer\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Component Versions on Linux\nDESCRIPTION: These commands allow users to verify the versions of Docker Compose, Docker CLI, and detailed Docker version information after installing Docker Desktop. This helps ensure that the installation was successful and the correct versions are in use.\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/desktop-linux-launch.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose version\nDocker Compose version v2.29.1\n\n$ docker --version\nDocker version 27.1.1, build 6312585\n\n$ docker version\nClient: \n Version:           23.0.5\n API version:       1.42\n Go version:        go1.21.12\n<...>\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Engine API v1.45 Documentation\nDESCRIPTION: YAML frontmatter block that defines metadata for the Docker Engine API v1.45 reference documentation page. It specifies the link title, page title, and URL aliases for the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.45.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.45\ntitle: Docker Engine API v1.45 reference\naliases:\n  - /engine/api/v1.45/\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling dnsmasq in NetworkManager Configuration\nDESCRIPTION: Configuration change to disable dnsmasq in NetworkManager by commenting out the dns=dnsmasq line. This can help resolve DNS conflicts with Docker.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n# dns=dnsmasq\n```\n\n----------------------------------------\n\nTITLE: Configuring R Documentation Metadata in YAML\nDESCRIPTION: YAML frontmatter that defines metadata for R documentation including the title and icon path from devicons CDN.\nSOURCE: https://github.com/docker/docs/blob/main/content/languages/r/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: R\nparams:\n  icon: https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/r/r-original.svg\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Keys to an Existing Delegation\nDESCRIPTION: This command adds a second key to an existing delegation (jeff), which enables key rotation and management. Docker trust automatically handles adding this new key to the targets/releases role.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust signer add --key cert2.pem jeff registry.example.com/admin/demo\n\nAdding signer \"jeff\" to registry.example.com/admin/demo...\nEnter passphrase for repository key with ID b0014f8: \nSuccessfully added signer: jeff to registry.example.com/admin/demo\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Container Documentation\nDESCRIPTION: YAML frontmatter that specifies metadata for the Docker container command documentation page. It defines the data folder, data file, title, aliases (redirects), and layout template to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_container\ntitle: docker container\naliases:\n- /edge/engine/reference/commandline/container/\n- /engine/reference/commandline/container/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Container with Default Port Mapping\nDESCRIPTION: This command starts a PostgreSQL container in detached mode with a specified password and maps the container's default port 5432 to the same port on the host machine.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -e POSTGRES_PASSWORD=secret -p 5432:5432 postgres\n```\n\n----------------------------------------\n\nTITLE: Pruning Stopped Docker Containers\nDESCRIPTION: This command removes all stopped containers. It prompts for confirmation before deletion to prevent accidental data loss.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker container prune\n\nWARNING! This will remove all stopped containers.\nAre you sure you want to continue? [y/N] y\n```\n\n----------------------------------------\n\nTITLE: Joining an Existing Swarm with Docker API\nDESCRIPTION: API request to join an existing Docker swarm. Requires the ListenAddr, RemoteAddrs of an existing manager node, and a valid JoinToken. The AdvertiseAddr is optional but recommended for proper node discovery.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_95\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/swarm/join HTTP/1.1\nContent-Type: application/json\n\n{\n  \"ListenAddr\": \"0.0.0.0:2377\",\n  \"AdvertiseAddr\": \"192.168.1.1:2377\",\n  \"RemoteAddrs\": [\"node1:2377\"],\n  \"JoinToken\": \"SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Test Output from Docker Compose Run\nDESCRIPTION: Example output from running Jest tests in a Node.js Docker container using docker compose run. Shows passing tests and console logs from the test execution.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/run-tests.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n> docker-nodejs@1.0.0 test\n> jest\n\n PASS  spec/routes/deleteItem.spec.js\n PASS  spec/routes/getItems.spec.js\n PASS  spec/routes/addItem.spec.js\n PASS  spec/routes/updateItem.spec.js\n PASS  spec/persistence/sqlite.spec.js\n  ● Console\n\n    console.log\n      Using sqlite database at /tmp/todo.db\n\n      at Database.log (src/persistence/sqlite.js:18:25)\n\n    console.log\n      Using sqlite database at /tmp/todo.db\n\n      at Database.log (src/persistence/sqlite.js:18:25)\n\n    console.log\n      Using sqlite database at /tmp/todo.db\n\n      at Database.log (src/persistence/sqlite.js:18:25)\n\n    console.log\n      Using sqlite database at /tmp/todo.db\n\n      at Database.log (src/persistence/sqlite.js:18:25)\n\n    console.log\n      Using sqlite database at /tmp/todo.db\n\n      at Database.log (src/persistence/sqlite.js:18:25)\n\n\nTest Suites: 5 passed, 5 total\nTests:       9 passed, 9 total\nSnapshots:   0 total\nTime:        2.008 s\nRan all test suites.\n```\n\n----------------------------------------\n\nTITLE: Creating Single-Page Docker Guide File using Bash\nDESCRIPTION: Commands for creating a single-page Docker guide Markdown file directly in the guides directory. Shows both the manual touch method and the Hugo method for those who have Hugo installed.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/guides.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create the file\ntouch content/guides/my-docker-guide.md\n# or if you have Hugo installed:\nhugo new content/guides/my-docker-guide.md\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Type Definitions\nDESCRIPTION: NPM command to install TypeScript type definitions for the Docker Extension API client\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/frontend-extension-tutorial.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @docker/extension-api-client-types --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Client for LocalStack\nDESCRIPTION: JavaScript code snippet showing how to configure the S3 client to use LocalStack endpoints and credentials.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst s3 = new S3Client({\n  endpoint: process.env.S3_ENDPOINT_URL, // Use the provided endpoint or fallback to defaults\n  credentials: {\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID || 'default_access_key', // Default values for development\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || 'default_secret_key',  \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Host Environment Variable for Unix Socket Connection\nDESCRIPTION: This command sets the DOCKER_HOST environment variable to connect to Docker Engine through a Unix socket. It's useful for applications like Apache Maven that expect this variable to be set.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/general.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ export DOCKER_HOST=unix:///var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Interactive Console Command\nDESCRIPTION: Example of an interactive console command with proper prompt formatting\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"deb https://packages.docker.com/1.12/apt/repo ubuntu-trusty main\" | sudo tee /etc/apt/sources.list.d/docker.list\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Source Code Contribution Instructions\nDESCRIPTION: HTML comment block providing information about how to contribute to the documentation by suggesting changes to the source repository on GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/service/ps.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Container Update Documentation\nDESCRIPTION: YAML front matter defining metadata for the Docker container update command documentation page. It specifies the data folder, data file, title, aliases for URL mapping, and layout template to use.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/update.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_container_update\ntitle: docker container update\naliases:\n- /edge/engine/reference/commandline/container_update/\n- /engine/reference/commandline/container_update/\n- /engine/reference/commandline/update/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: External Config Reference in Docker Compose\nDESCRIPTION: Shows how to reference an existing external config named http_config. Compose will look up this config instead of creating it.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/configs.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfigs:\n  http_config:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Docker PS Output for Ephemeral Ports\nDESCRIPTION: Shows the output of docker ps command displaying the automatically assigned ephemeral port.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/publishing-ports.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker ps\nCONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS          PORTS                    NAMES\na527355c9c53   nginx         \"/docker-entrypoint.…\"   4 seconds ago    Up 3 seconds    0.0.0.0:54772->80/tcp    romantic_williamson\n```\n\n----------------------------------------\n\nTITLE: Setting Release Date with Hugo Shortcode\nDESCRIPTION: Uses a Hugo shortcode to set the release date for a Docker Compose version. This is used throughout the document to specify release dates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n{{< release-date date=\"2022-04-29\" >}}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Storage Driver Directories\nDESCRIPTION: Terminal command and output showing how to examine Docker image layers on the filesystem by listing the contents of the overlay2 storage driver directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ls /var/lib/docker/overlay2\n16802227a96c24dcbeab5b37821e2b67a9f921749cd9a2e386d5a6d5bc6fc6d3\n377d73dbb466e0bc7c9ee23166771b35ebdbe02ef17753d79fd3571d4ce659d7\n3f02d96212b03e3383160d31d7c6aeca750d2d8a1879965b89fe8146594c453d\nec1ec45792908e90484f7e629330666e7eee599f08729c93890a7205a6ba35f5\nl\n```\n\n----------------------------------------\n\nTITLE: Accessing WSL from Windows Terminal\nDESCRIPTION: This command opens the default Linux distribution in Windows Subsystem for Linux (WSL) from the Windows terminal.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/wsl/use-wsl.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ wsl\n```\n\n----------------------------------------\n\nTITLE: Viewing Running Docker Containers\nDESCRIPTION: Command to list all currently running Docker containers with their IDs, images, commands, creation time, status, ports, and names.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-container.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Volume Inspect Documentation\nDESCRIPTION: YAML metadata block defining properties for rendering the 'docker volume inspect' command documentation. It specifies the data folder, file name, title, aliases for URL routing, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/volume/inspect.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_volume_inspect\ntitle: docker volume inspect\naliases:\n- /edge/engine/reference/commandline/volume_inspect/\n- /engine/reference/commandline/volume_inspect/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Validating a Docker Extension with Extensions CLI\nDESCRIPTION: This command validates a Docker extension to ensure it has the required image labels and proper metadata. It checks if the extension will display correctly in the marketplace and install without problems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/validate.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension validate <name-of-your-extension>\n```\n\n----------------------------------------\n\nTITLE: Compose Configuration with Named Context Resolution\nDESCRIPTION: This Compose file shows how to use named contexts to resolve dependencies between services. Service b uses base_image as a reference which is resolved to service a.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/dependent-images.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  a:\n     build: \n       dockerfile: a.Dockerfile\n       # built image will be tagged <project_name>_a\n  b:\n     build:\n       dockerfile: b.Dockerfile\n       additional_contexts:\n         # `FROM base_image` will be resolved as a dependency on service \"a\" which has to be built first\n         base_image: \"service:a\"\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Language Translation\nDESCRIPTION: Imports the Translator class from the googletrans library, which provides an interface to Google Translate's AJAX API for language translation.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom googletrans import Translator\n```\n\n----------------------------------------\n\nTITLE: Using OCI-layout Protocol with Build Context in Buildx\nDESCRIPTION: Example showing how to initialize a named context with the oci-layout protocol, pointing to a local OCI layout directory. This feature requires BuildKit v0.11.0+ and Dockerfile 1.5.0+.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/release-notes.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--build-context stagename=oci-layout://path/to/dir\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Node Constraints in Docker\nDESCRIPTION: Examples showing how to restrict container processes to specific memory nodes on NUMA systems.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_28\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --cpuset-mems=\"1,3\" ubuntu:24.04 /bin/bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --cpuset-mems=\"0-2\" ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Extending anchor values with additional properties\nDESCRIPTION: This example demonstrates how to use an anchor to define base environment variables and then extend them with additional variables using the YAML merge syntax.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/fragments.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  first:\n    image: my-image:latest\n    environment: &env\n      FOO: BAR\n      ZOT: QUIX\n  second:\n    image: another-image:latest\n    environment:\n      <<: *env\n      YET_ANOTHER: VARIABLE\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Network ls Documentation\nDESCRIPTION: YAML configuration block defining metadata for the 'docker network ls' command documentation page. It specifies the data folder, file name, title, aliases for redirects, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/network/ls.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_network_ls\ntitle: docker network ls\naliases:\n- /edge/engine/reference/commandline/network_ls/\n- /engine/reference/commandline/network_ls/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Creating registry.json for Docker Desktop Sign-in Enforcement\nDESCRIPTION: JSON configuration for the registry.json file that enforces sign-in to specific organizations in Docker Desktop. This file can define one or multiple organizations that users must belong to.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\"allowedOrgs\": [\"myorg1\", \"myorg2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling netscript Package\nDESCRIPTION: Command to remove the netscript package on Debian-based systems. This can resolve issues where Docker networks disappear due to interference from netscript.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get remove netscript-2.4\n```\n\n----------------------------------------\n\nTITLE: Setting up the CircleCI environment for Docker Scout\nDESCRIPTION: Defines the base CircleCI configuration including the Docker image to use for the workflow and an environment variable for the image to be scanned.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/ci/circle-ci.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 2.1\n\njobs:\n  build:\n    docker:\n      - image: cimg/base:stable\n    environment:\n      IMAGE_TAG: docker/scout-demo-service:latest\n```\n\n----------------------------------------\n\nTITLE: Bash Script Example\nDESCRIPTION: Example showing how to write a basic Bash script with package repository configuration\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/bash\necho \"deb https://packages.docker.com/1.12/apt/repo ubuntu-trusty main\" | sudo tee /etc/apt/sources.list.d/docker.list\n```\n\n----------------------------------------\n\nTITLE: Building Neovim with Docker Build Cloud for Multiple Platforms\nDESCRIPTION: Console command to build the Neovim Docker image for multiple platforms using a cloud builder and export the binaries to a local directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker build \\\n   --builder <cloud-builder> \\\n   --platform linux/amd64,linux/arm64 \\\n   --output ./bin .\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Toast in Docker Extension (TypeScript)\nDESCRIPTION: This snippet illustrates the use of the error method in the toast interface to display an error toast message. It's used to show temporary error notifications in Docker extensions.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Toast.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.desktopUI.toast.error(\"message\");\n```\n\n----------------------------------------\n\nTITLE: Creating Registry Key for Docker Desktop Authentication (Windows)\nDESCRIPTION: Defines the registry key path for enforcing Docker Desktop sign-in on Windows systems. This configuration allows specifying allowed organizations for authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Docker\\Docker Desktop\n```\n\n----------------------------------------\n\nTITLE: Copying Go Source Code in Dockerfile\nDESCRIPTION: Dockerfile instruction to copy all Go source files (*.go) from the build context into the container image's working directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY *.go ./\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Container with Network and Volume Configuration (Mac/Linux/Git Bash)\nDESCRIPTION: Starts a MySQL 8.0 container connected to the 'todo-app' network with a network alias 'mysql'. Uses a named volume for data persistence and sets environment variables for database initialization.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n    --network todo-app --network-alias mysql \\\n    -v todo-mysql-data:/var/lib/mysql \\\n    -e MYSQL_ROOT_PASSWORD=secret \\\n    -e MYSQL_DATABASE=todos \\\n    mysql:8.0\n```\n\n----------------------------------------\n\nTITLE: Running Quick Overview Analysis on Golang Image\nDESCRIPTION: Example showing how to run a quick vulnerability analysis on a Golang 1.19.4 image, displaying comparison with base images and potential improvements.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_quickview.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout quickview golang:1.19.4\n    ...Pulling\n    ✓ Pulled\n    ✓ SBOM of image already cached, 278 packages indexed\n\n  Your image  golang:1.19.4                          │    5C     3H     6M    63L\n  Base image  buildpack-deps:bullseye-scm            │    5C     1H     3M    48L     6?\n  Refreshed base image  buildpack-deps:bullseye-scm  │    0C     0H     0M    42L\n                                                     │    -5     -1     -3     -6     -6\n  Updated base image  buildpack-deps:sid-scm         │    0C     0H     1M    29L\n                                                     │    -5     -1     -2    -19     -6\n```\n\n----------------------------------------\n\nTITLE: Configuring Compose Watch for Automatic Updates\nDESCRIPTION: Enhanced Docker Compose configuration that adds the watch functionality, automatically rebuilding the container when files in the specified path change.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/develop.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    command: bundle exec rails s -b '0.0.0.0'\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n    environment:\n      - RAILS_ENV=test\n    env_file: \"webapp.env\"\n\n    develop:\n      watch:\n        - action: rebuild\n          path: .\n  db:\n    image: postgres:latest\n    secrets:\n      - db-password\n    environment:\n      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\nsecrets:\n  db-password:\n    file: db/password.txt\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Engine API v1.43 Documentation\nDESCRIPTION: This YAML frontmatter defines metadata for a documentation page about Docker Engine API v1.43. It specifies the link title, page title, and aliases for URL routing.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.43.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.43\ntitle: Docker Engine API v1.43 reference\naliases:\n  - /engine/api/v1.43/\n---\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Daemon Configuration Example for Windows\nDESCRIPTION: A full example of the allowed configuration options for the Docker daemon on Windows, showing all available settings in the daemon.json configuration file.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authorization-plugins\": [],\n  \"bridge\": \"\",\n  \"containerd\": \"\\\\\\\\.\\\\pipe\\\\containerd-containerd\",\n  \"containerd-namespace\": \"docker\",\n  \"containerd-plugins-namespace\": \"docker-plugins\",\n  \"data-root\": \"\",\n  \"debug\": true,\n  \"default-network-opts\": {},\n  \"default-runtime\": \"\",\n  \"default-ulimits\": {},\n  \"dns\": [],\n  \"dns-opts\": [],\n  \"dns-search\": [],\n  \"exec-opts\": [],\n  \"experimental\": false,\n  \"features\": {},\n  \"fixed-cidr\": \"\",\n  \"group\": \"\",\n  \"host-gateway-ip\": \"\",\n  \"hosts\": [],\n  \"insecure-registries\": [],\n  \"labels\": [],\n  \"log-driver\": \"\",\n  \"log-format\": \"text\",\n  \"log-level\": \"\",\n  \"max-concurrent-downloads\": 3,\n  \"max-concurrent-uploads\": 5,\n  \"max-download-attempts\": 5,\n  \"mtu\": 0,\n  \"pidfile\": \"\",\n  \"raw-logs\": false,\n  \"registry-mirrors\": [],\n  \"shutdown-timeout\": 15,\n  \"storage-driver\": \"\",\n  \"storage-opts\": [],\n  \"swarm-default-advertise-addr\": \"\",\n  \"tlscacert\": \"\",\n  \"tlscert\": \"\",\n  \"tlskey\": \"\",\n  \"tlsverify\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Disk Space Usage in Docker for Mac\nDESCRIPTION: Command to display detailed space usage information for Docker images and containers. This requires client and daemon API version 1.25 or later.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/macfaqs.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker system df -v\n```\n\n----------------------------------------\n\nTITLE: Updating Redis Service Image in Docker Swarm\nDESCRIPTION: Updates the Redis service to use a newer image version (7.4.1). The swarm manager applies this update according to the update configuration policy defined when the service was created.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/rolling-update.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker service update --image redis:7.4.1 redis\n```\n\n----------------------------------------\n\nTITLE: Building Updated Docker Image\nDESCRIPTION: Command to build a new Docker image after making changes to the application\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t getting-started .\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for MySQL Docker Samples Documentation\nDESCRIPTION: YAML front matter for a documentation page about MySQL Docker samples. It defines the page title, description, service type, and URL aliases for the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/mysql.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: MySQL samples\ndescription: Docker samples for MySQL.\nservice: mysql\naliases:\n- /samples/mysql/\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker System Prune Documentation\nDESCRIPTION: YAML configuration block defining metadata and layout settings for the Docker system prune command documentation page. Specifies data folder location, filename, page title, URL aliases, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/system/prune.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_system_prune\ntitle: docker system prune\naliases:\n- /edge/engine/reference/commandline/system_prune/\n- /engine/reference/commandline/system_prune/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Systemd Complete Proxy Configuration with NO_PROXY\nDESCRIPTION: Complete systemd configuration including HTTP, HTTPS, and NO_PROXY settings for the Docker daemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/proxy.md#2025-04-11_snippet_5\n\nLANGUAGE: systemd\nCODE:\n```\n[Service]\nEnvironment=\"HTTP_PROXY=http://proxy.example.com:3128\"\nEnvironment=\"HTTPS_PROXY=https://proxy.example.com:3129\"\nEnvironment=\"NO_PROXY=localhost,127.0.0.1,docker-registry.example.com,.corp\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Swarm Services and Networks\nDESCRIPTION: Commands to remove a service and its associated overlay networks. When executed on a manager node, the networks will be automatically removed from worker nodes as well.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker service rm my-nginx\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker network rm nginx-net nginx-net-2\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Platform Docker Image for AMD64 and ARM64\nDESCRIPTION: Console command to build a Docker image that targets both linux/amd64 and linux/arm64 platforms.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --platform linux/amd64,linux/arm64 -t multi-platform .\n```\n\n----------------------------------------\n\nTITLE: Making HTTP PUT Request with Docker Extension API\nDESCRIPTION: Demonstrates how to perform an HTTP PUT request to a backend service using the Docker Extension API. This method is marked for deprecation in favor of the 'put' method from HttpService.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/BackendV0.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.backend\n .put(\"/some/service\", { ... })\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Creating and Connecting Docker Containers to Networks\nDESCRIPTION: Demonstrates creating four Alpine Linux containers and connecting them to different networks using the '--network' flag and 'docker network connect' command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -dit --name alpine1 --network alpine-net alpine ash\n\n$ docker run -dit --name alpine2 --network alpine-net alpine ash\n\n$ docker run -dit --name alpine3 alpine ash\n\n$ docker run -dit --name alpine4 --network alpine-net alpine ash\n\n$ docker network connect bridge alpine4\n```\n\n----------------------------------------\n\nTITLE: Closing a Docker Command Stream\nDESCRIPTION: Shows how to properly close a streaming Docker command. This is useful for cleaning up resources when you're done with a log stream or before starting a new one.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/docker.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst logListener = await ddClient.docker.cli.exec(\"logs\", [\"-f\", \"...\"], {\n  stream: {\n    // ...\n  },\n});\n\n// when done listening to logs or before starting a new one, kill the process\nlogListener.close();\n```\n\n----------------------------------------\n\nTITLE: Swarm Update API Response Example\nDESCRIPTION: Response from the Docker API when successfully updating a swarm configuration. A 200 status code with an empty response body indicates successful operation.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_100\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 0\nContent-Type: text/plain; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies\nDESCRIPTION: Command to install all required Node.js packages specified in the package.json file for the AccuWeather API integration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Search Command Documentation\nDESCRIPTION: YAML configuration for the Docker search command documentation page. It specifies the data folder, file name, title, aliases for URL routing, and layout template to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/search.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_search\ntitle: docker search\naliases:\n- /edge/engine/reference/commandline/search/\n- /engine/reference/commandline/search/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose on Windows Server\nDESCRIPTION: PowerShell command using BITS transfer to download the Docker Compose executable from GitHub releases and install it in the Program Files Docker directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/standalone.md#2025-04-11_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nStart-BitsTransfer -Source \"https://github.com/docker/compose/releases/download/{{% param \"compose_version\" %}}/docker-compose-windows-x86_64.exe\" -Destination $Env:ProgramFiles\\Docker\\docker-compose.exe\n```\n\n----------------------------------------\n\nTITLE: Setting Gateway Priority for Docker Compose Networks\nDESCRIPTION: Uses gw_priority to select which network should be the default gateway for a service container. The network with the highest gw_priority becomes the default gateway.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: busybox\n    command: top\n    networks:\n      app_net_1:\n      app_net_2:\n        gw_priority: 1\n      app_net_3:\nnetworks:\n  app_net_1:\n  app_net_2:\n  app_net_3:\n```\n\n----------------------------------------\n\nTITLE: Original PHP Dockerfile Configuration\nDESCRIPTION: Initial Dockerfile setup for PHP application with basic dependency installation and Apache configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM composer:lts as deps\nWORKDIR /app\nRUN --mount=type=bind,source=composer.json,target=composer.json \\\n    --mount=type=bind,source=composer.lock,target=composer.lock \\\n    --mount=type=cache,target=/tmp/cache \\\n    composer install --no-dev --no-interaction\n\nFROM php:8.2-apache as final\nRUN docker-php-ext-install pdo pdo_mysql\nRUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"\nCOPY --from=deps app/vendor/ /var/www/html/vendor\nCOPY ./src /var/www/html\nUSER www-data\n```\n\n----------------------------------------\n\nTITLE: Removing Kubernetes Resources for Go Application\nDESCRIPTION: Command to delete all the Kubernetes resources created for the Go application. This cleans up the environment after testing.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/deploy.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl delete -f docker-go-kubernetes.yaml\n```\n\n----------------------------------------\n\nTITLE: Docker Container Metrics Structure\nDESCRIPTION: Table structure showing container-related metrics and their descriptions for monitoring container usage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/admin/organization/insights.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Data                                   | Description                                                                                                                                                                |\n|:---------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Total containers run                   | The total number of containers run by active users. Containers run include those run using the Docker Desktop graphical user interface, `docker run`, or `docker compose`. |\n| Average number of containers run       | The average number of containers run per active user.                                                                                                                      |\n| Containers run by active users (graph) | The number of containers run over time by active users.                                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for Go Application\nDESCRIPTION: Console commands to create a directory for the Go cross-compilation example and navigate to it.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-platform.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir go-server\n$ cd go-server\n```\n\n----------------------------------------\n\nTITLE: Upgrading Linux Distribution to WSL 2 Mode\nDESCRIPTION: Command to upgrade a specific Linux distribution to WSL 2 mode. This is required for Docker Desktop WSL 2 integration to work properly with that distribution.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/wsl/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwsl.exe --set-version (distribution name) 2\n```\n\n----------------------------------------\n\nTITLE: Making HTTP PUT Request with Docker Extension API\nDESCRIPTION: Performs an HTTP PUT request with data payload to a backend service using the Docker client extension VM service. Returns a promise that resolves to the response data.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/HttpService.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.extension.vm.service\n .put(\"/some/service\", { ... })\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Tagging Docker Images with Docker Hub Repository Information\nDESCRIPTION: The docker tag command syntax for assigning a tag to a Docker image that includes your Docker Hub namespace and repository name. This is a prerequisite step before pushing an image to Docker Hub.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/hub-images/push.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker tag [SOURCE_IMAGE[:TAG]] [NAMESPACE/REPOSITORY[:TAG]]\n```\n\n----------------------------------------\n\nTITLE: Interpolating Variables in Docker Bake HCL\nDESCRIPTION: Demonstrates how to interpolate a variable into a string value using the ${} syntax in a Docker Bake HCL file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/variables.md#2025-04-11_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"default\" {\n  targets = [ \"webapp\" ]\n}\n\nvariable \"TAG\" {\n  default = \"latest\"\n}\n\ntarget \"webapp\" {\n  context = \".\"\n  dockerfile = \"Dockerfile\"\n  tags = [\"docker.io/username/webapp:${TAG}\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Operations with Gordon CLI\nDESCRIPTION: Commands for managing Kubernetes resources including deployments, logs, and resource listing.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/built-in-tools.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# Create a deployment\n$ docker ai \"Create an nginx deployment and make sure it's exposed locally\"\n\n# List resources\n$ docker ai \"Show me all deployments in the default namespace\"\n\n# Get logs\n$ docker ai \"Show me logs from the auth-service pod\"\n```\n\n----------------------------------------\n\nTITLE: Restarting NetworkManager After Configuration\nDESCRIPTION: Command to restart NetworkManager after updating its configuration. This applies the changes to mark Docker interfaces as un-managed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ systemctl restart NetworkManager\n```\n\n----------------------------------------\n\nTITLE: Text Summarization Example Input and Output\nDESCRIPTION: This snippet demonstrates an example input of a paragraph about Artificial Intelligence and the summarized output produced by the application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nEnter the text for summarization (type 'exit' to end): Artificial intelligence (AI) is a branch of computer science that aims to create machines capable of intelligent behavior. These machines are designed to mimic human cognitive functions such as learning, problem-solving, and decision-making. AI technologies can be classified into two main types: narrow or weak AI, which is designed for a particular task, and general or strong AI, which possesses the ability to understand, learn, and apply knowledge across various domains. One of the most popular approaches in AI is machine learning, where algorithms are trained on large datasets to recognize patterns and make predictions.\n\nArtificial intelligence (AI) is a branch of computer science that aims to create machines capable of intelligent behavior. These machines are designed to mimic human cognitive functions such as learning, problem-solving, and decision-making.\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: Command to list all Docker images available locally on the machine, showing the repository, tag, image ID, creation time, and size.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/build-images.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker images\nREPOSITORY                TAG               IMAGE ID       CREATED         SIZE\ndocker-rust-image         latest            8cae92a8fbd6   3 minutes ago   123MB\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Combined Check Parameters\nDESCRIPTION: Example showing how to combine multiple check parameters in a Dockerfile for both skipping checks and enabling error reporting.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/checks.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n# check=skip=JSONArgsRecommended,StageNameCasing;error=true\n```\n\n----------------------------------------\n\nTITLE: Previewing Docker Installation Script Steps\nDESCRIPTION: This snippet demonstrates how to download the Docker installation script and preview its steps without executing them. It uses the --dry-run option to show what actions the script will perform.\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/install-script.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -fsSL https://get.docker.com -o get-docker.sh\n$ sudo sh ./get-docker.sh --dry-run\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Toast Notification in Docker Extensions\nDESCRIPTION: Use this method to display a success toast notification to the user. Toast notifications appear temporarily and don't interrupt the user experience.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/dashboard.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.desktopUI.toast.success(\"message\");\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Container\nDESCRIPTION: These commands stop and remove the running PostgreSQL container while preserving the data in the attached volume.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker stop db\n$ docker rm db\n```\n\n----------------------------------------\n\nTITLE: Running the Second Web Application Container\nDESCRIPTION: This command starts the second web application container in detached mode, names it 'web2', sets its hostname, and connects it to the 'sample-app' network with a network alias for discovery.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name web2 -h web2 --network sample-app --network-alias web2 web\n```\n\n----------------------------------------\n\nTITLE: Inheriting Target Attributes in Docker Buildx Bake (HCL)\nDESCRIPTION: Demonstrates how to use the 'inherits' attribute to reuse configurations from other targets. It shows inheritance from a single target and multiple targets, as well as how conflicts are resolved.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_22\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"TAG\" {\n  default = \"latest\"\n}\n\ntarget \"app-dev\" {\n  tags = [\"docker.io/username/myapp:${TAG}\"]\n}\n\ntarget \"app-release\" {\n  inherits = [\"app-dev\"]\n  platforms = [\"linux/amd64\", \"linux/arm64\"]\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app-dev\" {\n  args = {\n    GO_VERSION = \"1.20\"\n    BUILDX_EXPERIMENTAL = 1\n  }\n  tags = [\"docker.io/username/myapp\"]\n  dockerfile = \"app.Dockerfile\"\n  labels = {\n    \"org.opencontainers.image.source\" = \"https://github.com/username/myapp\"\n  }\n}\n\ntarget \"_release\" {\n  args = {\n    BUILDKIT_CONTEXT_KEEP_GIT_DIR = 1\n    BUILDX_EXPERIMENTAL = 0\n  }\n}\n\ntarget \"app-release\" {\n  inherits = [\"app-dev\", \"_release\"]\n  platforms = [\"linux/amd64\", \"linux/arm64\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Engine API v1.37 Documentation\nDESCRIPTION: YAML frontmatter that defines the metadata for the Docker Engine API v1.37 reference documentation page. It includes the link title, page title, and URL aliases for redirects.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.37.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.37\ntitle: Docker Engine API v1.37 reference\naliases:\n  - /engine/api/v1.37/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Container with Splunk Logging Driver\nDESCRIPTION: Example showing how to run a Docker container with Splunk logging configuration including token authentication, HTTPS connection with certificate verification, custom tags, labels, and environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/splunk.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n    --log-driver=splunk \\\n    --log-opt splunk-token=176FCEBF-4CF5-4EDF-91BC-703796522D20 \\\n    --log-opt splunk-url=https://splunkhost:8088 \\\n    --log-opt splunk-capath=/path/to/cert/cacert.pem \\\n    --log-opt splunk-caname=SplunkServerDefaultCert \\\n    --log-opt tag=\"{{.Name}}/{{.FullID}}\" \\\n    --log-opt labels=location \\\n    --log-opt env=TEST \\\n    --env \"TEST=false\" \\\n    --label location=west \\\n    your/application\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Docker Gateway Bridge\nDESCRIPTION: This command creates a custom docker_gwbridge with specific subnet and network options. The docker_gwbridge connects overlay networks to the Docker host's physical network. This must be done before joining a swarm or after temporarily removing the host from the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create \\\n--subnet 10.11.0.0/16 \\\n--opt com.docker.network.bridge.name=docker_gwbridge \\\n--opt com.docker.network.bridge.enable_icc=false \\\n--opt com.docker.network.bridge.enable_ip_masquerade=true \\\ndocker_gwbridge\n```\n\n----------------------------------------\n\nTITLE: Creating Feature-Support Tables with Emoji Indicators in Markdown\nDESCRIPTION: This snippet shows how to create a feature-support table in Markdown, using emoji checkmarks to indicate support for different platforms. The table uses centered alignment for the feature column and demonstrates how to represent supported and unsupported features.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/tables.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Platform   | x86_64 / amd64 |\n| :--------- | :------------: |\n| Ubuntu     |       ✅       |\n| Debian     |       ✅       |\n| Fedora     |                |\n| Arch (btw) |       ✅       |\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Manifest Create Docs\nDESCRIPTION: YAML front matter configuration block that defines metadata for the Docker manifest create command documentation page, including data folder location, file name, title, URL aliases, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/manifest/create.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_manifest_create\ntitle: docker manifest create\naliases:\n- /edge/engine/reference/commandline/manifest_create/\n- /engine/reference/commandline/manifest_create/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning Example Application Repository\nDESCRIPTION: Command to clone the Docker Go example application repository for development.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/docker/docker-gs-ping-dev.git\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Docker Push Documentation\nDESCRIPTION: Front matter configuration that specifies a documentation page's title, build settings, and sidebar navigation target. This appears to be a redirect configuration to point users to the new location of the docker push command documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/push.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: docker push\nbuild:\n  render: never\nsidebar:\n  goto: /reference/cli/docker/image/push/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker CLI Documentation\nDESCRIPTION: This YAML snippet defines the front matter for a documentation page about Docker's CLI. It specifies that the page should never be rendered during the build process, sets the title to 'CLI', and assigns a weight of 50 for ordering in the documentation structure.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: CLI\nweight: 50\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Up Default Secure Docker Client Configuration\nDESCRIPTION: Configures the Docker client to use TLS verification by default by copying certificates to the .docker directory and setting appropriate environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -pv ~/.docker\n$ cp -v {ca,cert,key}.pem ~/.docker\n\n$ export DOCKER_HOST=tcp://$HOST:2376 DOCKER_TLS_VERIFY=1\n```\n\n----------------------------------------\n\nTITLE: Setting up BuildKit with CNI Plugins Dockerfile\nDESCRIPTION: Dockerfile that sets up BuildKit with CNI networking plugins. Uses a multi-stage build to install CNI plugins and configure BuildKit with necessary networking components.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/configure.md#2025-04-11_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nARG BUILDKIT_VERSION=v{{% param \"buildkit_version\" %}}\nARG CNI_VERSION=v1.0.1\n\nFROM --platform=$BUILDPLATFORM alpine AS cni-plugins\nRUN apk add --no-cache curl\nARG CNI_VERSION\nARG TARGETOS\nARG TARGETARCH\nWORKDIR /opt/cni/bin\nRUN curl -Ls https://github.com/containernetworking/plugins/releases/download/$CNI_VERSION/cni-plugins-$TARGETOS-$TARGETARCH-$CNI_VERSION.tgz | tar xzv\n\nFROM moby/buildkit:${BUILDKIT_VERSION}\nARG BUILDKIT_VERSION\nRUN apk add --no-cache iptables\nCOPY --from=cni-plugins /opt/cni/bin /opt/cni/bin\nADD https://raw.githubusercontent.com/moby/buildkit/${BUILDKIT_VERSION}/hack/fixtures/cni.json /etc/buildkit/cni.json\n```\n\n----------------------------------------\n\nTITLE: Executing CLI Commands in Docker Extension Host\nDESCRIPTION: Demonstrates how to execute a command in the host environment using the extension host CLI. This example shows running the kubectl command with the -h flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExtensionHost.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.extension.host.cli.exec(\"kubectl\", [\"-h\"]);\n```\n\n----------------------------------------\n\nTITLE: Certificate Update Operation Output\nDESCRIPTION: This output shows the result of updating the CA certificates store, indicating that one certificate was added successfully and warning about skipping a particular certificate file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/ca-certs.md#2025-04-11_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nUpdating certificates in /etc/ssl/certs...\nrehash: warning: skipping ca-certificates.crt, it does not contain exactly one certificate or CRL\n1 added, 0 removed; done.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Manager Join Token in Docker Swarm\nDESCRIPTION: This command retrieves the join token for manager nodes in a Docker swarm. It's executed on an existing manager node and provides the necessary command to join a new manager node to the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/join-nodes.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker swarm join-token manager\n\nTo add a manager to this swarm, run the following command:\n\n    docker swarm join \\\n    --token SWMTKN-1-61ztec5kyafptydic6jfc1i33t37flcl4nuipzcusor96k7kby-5vy9t8u35tuqm7vh67lrz9xp6 \\\n    192.168.99.100:2377\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Context Import Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker context import command documentation page, including the data folder, file name, title, layout, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/context/import.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_context_import\ntitle: docker context import\nlayout: cli\naliases:\n- /engine/reference/commandline/context_import/\n```\n\n----------------------------------------\n\nTITLE: Implementing ExecResultV0 Interface Methods in TypeScript\nDESCRIPTION: This snippet defines three methods for the ExecResultV0 interface: lines() to split output into an array of strings, parseJsonLines() to parse each line as a JSON object, and parseJsonObject() to parse the entire output as a single JSON object.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExecResultV0.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExecResultV0 {\n  lines(): string[];\n  parseJsonLines(): any[];\n  parseJsonObject(): any;\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Docker Exec Documentation\nDESCRIPTION: YAML frontmatter configuration that specifies the title, build settings, and sidebar navigation for the docker exec command documentation page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/exec.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: docker exec\nbuild:\n  render: never\nsidebar:\n  goto: /reference/cli/docker/container/exec/\n```\n\n----------------------------------------\n\nTITLE: Docker Compose with Build Cloud Integration\nDESCRIPTION: A bash script for using Docker Compose with Docker Build Cloud in CI environments. The script installs both Docker Buildx and Docker Compose plugins, authenticates to Docker Hub, connects to a Build Cloud builder, and uses Docker Compose to build the images.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Get download link for latest buildx binary. Set $ARCH to the CPU architecture (e.g. amd64, arm64)\nARCH=amd64\nBUILDX_URL=$(curl -s https://raw.githubusercontent.com/docker/actions-toolkit/main/.github/buildx-lab-releases.json | jq -r \".latest.assets[] | select(endswith(\\\"linux-$ARCH\\\"))\")\nCOMPOSE_URL=$(curl -sL \\\n  -H \"Accept: application/vnd.github+json\" \\\n  -H \"Authorization: Bearer <GITHUB_TOKEN>\" \\\n  -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n  https://api.github.com/repos/docker/compose-desktop/releases \\\n  | jq \"[ .[] | select(.prerelease==false and .draft==false) ] | .[0].assets.[] | select(.name | endswith(\\\"linux-${ARCH}\\\")) | .browser_download_url\")\n\n# Download docker buildx with Build Cloud support\nmkdir -vp ~/.docker/cli-plugins/\ncurl --silent -L --output ~/.docker/cli-plugins/docker-buildx $BUILDX_URL\ncurl --silent -L --output ~/.docker/cli-plugins/docker-compose $COMPOSE_URL\nchmod a+x ~/.docker/cli-plugins/docker-buildx\nchmod a+x ~/.docker/cli-plugins/docker-compose\n\n# Login to Docker Hub. For security reasons $DOCKER_PAT should be a Personal Access Token. See https://docs.docker.com/security/for-developers/access-tokens/\necho \"$DOCKER_PAT\" | docker login --username $DOCKER_USER --password-stdin\n\n# Connect to your builder and set it as the default builder\ndocker buildx create --use --driver cloud \"<ORG>/default\"\n\n# Build the image build\ndocker compose build\n```\n\n----------------------------------------\n\nTITLE: Running a JupyterLab Container\nDESCRIPTION: Command to run a JupyterLab container from a custom image. It maps port 8889 on the host to port 8888 in the container and sets a custom token for authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -p 8889:8888 my-jupyter-image start-notebook.py --NotebookApp.token='my-token'\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Compose Restart Documentation\nDESCRIPTION: YAML configuration block defining metadata and routing information for the docker compose restart command documentation page. Includes data folder location, file name, page title, URL aliases, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/restart.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: compose-cli\ndatafile: docker_compose_restart\ntitle: docker compose restart\naliases:\n- /compose/reference/restart/\n- /engine/reference/commandline/compose_restart/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Setting Annotations with Docker Buildx Image Exporters\nDESCRIPTION: Example command showing how to set OCI annotations when using image or registry exporters with Docker Buildx. The example demonstrates setting the org.opencontainers.image.title annotation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/image-registry.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build \\\n    --output \"type=<type>,name=<registry>/<image>,annotation.org.opencontainers.image.title=<title>\" .\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Context via Environment Variables\nDESCRIPTION: These commands show how to set the active Docker context using environment variables in different shells. Environment variables override contexts set with docker context use.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/contexts.md#2025-04-11_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n> $env:DOCKER_CONTEXT='docker-test'\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ export DOCKER_CONTEXT=docker-test\n```\n\n----------------------------------------\n\nTITLE: Slirp4netns Port Driver Configuration\nDESCRIPTION: Systemd service override configuration to enable source IP propagation using slirp4netns port driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_20\n\nLANGUAGE: systemd\nCODE:\n```\n[Service]\nEnvironment=\"DOCKERD_ROOTLESS_ROOTLESSKIT_NET=slirp4netns\"\nEnvironment=\"DOCKERD_ROOTLESS_ROOTLESSKIT_PORT_DRIVER=slirp4netns\"\n```\n\n----------------------------------------\n\nTITLE: Listing Running Docker Containers\nDESCRIPTION: Use docker ps command to list all running containers, showing container IDs, images, commands, creation time, status, exposed ports, and names.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps\n\nCONTAINER ID   IMAGE            COMMAND             CREATED          STATUS          PORTS                    NAMES\nd75e61fcad1e   docker-gs-ping   \"/docker-gs-ping\"   41 seconds ago   Up 40 seconds   0.0.0.0:8080->8080/tcp   inspiring_ishizaka\n```\n\n----------------------------------------\n\nTITLE: Verifying Container Port Mapping with Docker CLI\nDESCRIPTION: Command to list running containers and verify port mappings. The output shows the container's port 3306 is mapped to the host's port 3307.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps\n```\n\nLANGUAGE: console\nCODE:\n```\nCONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                               NAMES\n6eb776cfd73c   mysql:latest   \"docker-entrypoint.s…\"   17 minutes ago   Up 17 minutes   33060/tcp, 0.0.0.0:3307->3306/tcp   my-mysql\n```\n\n----------------------------------------\n\nTITLE: Using Specific Cache Version in Docker Buildx Command\nDESCRIPTION: This snippet illustrates how to use a specific version of the cache by specifying the digest parameter when importing cache in a Docker buildx command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/local.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=local,dest=path/to/local/dir \\\n  --cache-from type=local,ref=path/to/local/dir,digest=sha256:6982c70595cb91769f61cd1e064cf5f41d5357387bab6b18c0164c5f98c1f707 .\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Experimental Checks\nDESCRIPTION: Configuration for enabling experimental build checks in a Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/checks.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n# check=experimental=JSONArgsRecommended,StageNameCasing\n```\n\n----------------------------------------\n\nTITLE: Locating Docker Desktop settings-store.json file paths\nDESCRIPTION: File paths where Docker Desktop stores its configuration in settings-store.json (or settings.json for versions 4.34 and earlier) across different operating systems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/settings-and-maintenance/settings.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Mac: ~/Library/Group\\ Containers/group.com.docker/settings-store.json\n# Windows: C:\\Users\\[USERNAME]\\AppData\\Roaming\\Docker\\settings-store.json\n# Linux: ~/.docker/desktop/settings-store.json\n```\n\n----------------------------------------\n\nTITLE: Incorrect Shell Form Usage in Dockerfile ENTRYPOINT\nDESCRIPTION: Example showing incorrect shell form usage that prevents proper signal handling in containers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/json-args-recommended.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nENTRYPOINT my-program start\n# entrypoint becomes: /bin/sh -c my-program start\n```\n\n----------------------------------------\n\nTITLE: Using a customized containerd shim runtime\nDESCRIPTION: Command to run a container using a custom-configured containerd shim runtime by specifying its name with the --runtime flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/alternative-runtimes.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --runtime gvisor hello-world\n```\n\n----------------------------------------\n\nTITLE: Upgrading Docker Desktop on Fedora\nDESCRIPTION: Commands to upgrade Docker Desktop on Fedora by first removing the previous version and then installing the new package. This two-step process is required for each upgrade.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/fedora.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf remove docker-desktop\n$ sudo dnf install ./docker-desktop-x86_64.rpm\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Saver Timeout in Docker Settings JSON\nDESCRIPTION: JSON configuration paths for Docker Desktop settings file where autoPauseTimeoutSeconds can be modified. The value must be greater than 30 seconds. The file location varies by operating system (Mac, Windows, or Linux).\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/use-desktop/resource-saver.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMac: ~/Library/Group Containers/group.com.docker/settings-store.json\nWindows: C:\\Users\\[USERNAME]\\AppData\\Roaming\\Docker\\settings-store.json\nLinux: ~/.docker/desktop/settings-store.json\n```\n\n----------------------------------------\n\nTITLE: Installation Template With Version Parameters\nDESCRIPTION: Template shortcode example for Windows-specific installation with version and build path parameters\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{{< desktop-install-v2 win=true beta_win_arm=true version=\"4.34.1\" build_path=\"/166053/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Verifying Multiple Signers in Docker Trust Repository\nDESCRIPTION: This command inspects the repository to confirm that two delegations (Signers) have been added successfully to the Docker Content Trust repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust inspect --pretty registry.example.com/admin/demo\n\nNo signatures for registry.example.com/admin/demo\n\nList of signers and their keys for registry.example.com/admin/demo\n\nSIGNER              KEYS\nben                 afa404703b25\njeff                1091060d7bfd\n\nAdministrative keys for registry.example.com/admin/demo\n\n  Repository Key:\tb0014f8e4863df2d028095b74efcb05d872c3591de0af06652944e310d96598d\n  Root Key:\t64d147e59e44870311dd2d80b9f7840039115ef3dfa5008127d769a5f657a5d7\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Volume for Database Persistence\nDESCRIPTION: Creates a named volume that Docker will manage to store PostgreSQL persistent data and configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker volume create db-data\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Port Publishing Command\nDESCRIPTION: Shows the basic syntax for publishing ports when running a Docker container using the -p flag. Demonstrates how to map host ports to container ports.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/publishing-ports.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d -p HOST_PORT:CONTAINER_PORT nginx\n```\n\n----------------------------------------\n\nTITLE: Advanced CI Pipeline with Cache Management\nDESCRIPTION: Comprehensive GitHub Actions workflow that combines multiple caching strategies, including Go build cache and Docker layer caching, with support for multi-platform builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/cache.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      \n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: user/app\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n\n      - name: Go Build Cache for Docker\n        uses: actions/cache@v4\n        with:\n          path: go-build-cache\n          key: ${{ runner.os }}-go-build-cache-${{ hashFiles('**/go.sum') }}\n\n      - name: Inject go-build-cache\n        uses: reproducible-containers/buildkit-cache-dance@4b2444fec0c0fb9dbf175a96c094720a692ef810 # v2.1.4\n        with:\n          cache-source: go-build-cache\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n          file: build/package/Dockerfile\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          platforms: linux/amd64,linux/arm64\n```\n\n----------------------------------------\n\nTITLE: Navigating to Bind Mount Directory\nDESCRIPTION: Commands to change to the bind-mounted directory and list its contents, showing that it contains the same files as the host directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nroot@ac1237fad8db:/# cd src\nroot@ac1237fad8db:/src# ls\nDockerfile  node_modules  package.json  spec  src  yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Backing up Docker Data\nDESCRIPTION: Command to create a backup copy of the Docker data directory\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/overlayfs-driver.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cp -au /var/lib/docker /var/lib/docker.bk\n```\n\n----------------------------------------\n\nTITLE: Configuring direct routing for IPv6 networks\nDESCRIPTION: Command to create an IPv6-enabled network with direct routing, using the new bridge driver option for gateway mode.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create --ipv6 -o com.docker.network.bridge.gateway_mode_ipv6=routed mynet\n```\n\n----------------------------------------\n\nTITLE: Disabling Healthcheck in Docker Compose\nDESCRIPTION: How to disable a healthcheck that might be defined in the Docker image by setting the disable property to true.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  disable: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend Service Calls in React Frontend\nDESCRIPTION: React component that demonstrates how to use the Docker Desktop Client to make API calls to the extension's backend service. Uses the ddClient.extension.vm.service.get method to fetch data from the /hello endpoint.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/backend-extension-tutorial.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// ui/src/App.tsx\nimport React, { useEffect } from 'react';\nimport { createDockerDesktopClient } from \"@docker/extension-api-client\";\n\n//obtain docker desktop extension client\nconst ddClient = createDockerDesktopClient();\n\nexport function App() {\n  const ddClient = createDockerDesktopClient();\n  const [hello, setHello] = useState<string>();\n\n  useEffect(() => {\n    const getHello = async () => {\n      const result = await ddClient.extension.vm?.service?.get('/hello');\n      setHello(JSON.stringify(result));\n    }\n    getHello()\n  }, []);\n\n  return (\n    <Typography>{hello}</Typography>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Compose PS Command Documentation\nDESCRIPTION: This YAML frontmatter section defines metadata for the documentation page about the 'docker compose ps' command. It specifies the datafolder, datafile, title, aliases (which include previous documentation paths), and layout for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/ps.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_ps\ntitle: docker compose ps\naliases:\n- /compose/reference/ps/\n- /engine/reference/commandline/compose_ps/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Engine API v1.34 Documentation\nDESCRIPTION: YAML front matter that defines metadata for the Docker Engine API v1.34 reference documentation page. It specifies the page title, link title, and aliases for redirecting from deprecated paths.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.34.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.34\ntitle: Docker Engine API v1.34 reference\naliases:\n  - /engine/api/v1.34/\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Nginx Container with Host Network\nDESCRIPTION: Creates and starts an Nginx container in detached mode using host network mode. The container will be automatically removed when stopped due to the --rm flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/host.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -d --network host --name my_nginx nginx\n```\n\n----------------------------------------\n\nTITLE: Basic Include Example in Docker Compose\nDESCRIPTION: A simple example of using the include directive to reference an external Compose file containing serviceB, which can then be directly referenced in the main file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/include.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n  - my-compose-include.yaml  #with serviceB declared\nservices:\n  serviceA:\n    build: .\n    depends_on:\n      - serviceB #use serviceB directly as if it was declared in this Compose file\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Output from Docker Scout Comparison\nDESCRIPTION: Example of generating a comparison report in Markdown format for two Docker images.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout compare --format markdown --to namespace/repo:latest namespace/repo:v1.2.3-pre\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with a Custom Name\nDESCRIPTION: Run a container with a specific name using the --name flag, making it easier to identify and reference the container in subsequent commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d -p 8080:8080 --name rest-server docker-gs-ping\n3bbc6a3102ea368c8b966e1878a5ea9b1fc61187afaac1276c41db22e4b7f48f\n```\n\n----------------------------------------\n\nTITLE: OCI Media Types Configuration\nDESCRIPTION: Shows how to configure OCI media types when exporting images.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/_index.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build \\\n  --output type=image,name=<registry>/<image>,push=true,oci-mediatypes=true .\n```\n\n----------------------------------------\n\nTITLE: Accessing the R Shiny Application\nDESCRIPTION: URL to access the locally running R Shiny application through a web browser.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/develop.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nhttp://localhost:3838\n```\n\n----------------------------------------\n\nTITLE: Executing Docker Compose Kill Command with Custom Signal in Console\nDESCRIPTION: This snippet demonstrates how to use the 'docker compose kill' command with a custom signal (SIGINT) to stop running containers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_kill.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose kill -s SIGINT\n```\n\n----------------------------------------\n\nTITLE: Displaying Package List with Docker Scout SBOM\nDESCRIPTION: Command to display a list of packages in an Alpine Linux container image using the Docker Scout SBOM tool.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_sbom.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout sbom --format list alpine\n```\n\n----------------------------------------\n\nTITLE: SQL Initialization Script for MySQL Database\nDESCRIPTION: An SQL script that creates a table and inserts a value. This script is copied into the custom MySQL container and executed when the container is first started.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nCREATE TABLE IF NOT EXISTS mydb.myothertable (\n  column_name VARCHAR(255)\n);\n\nINSERT INTO mydb.myothertable (column_name) VALUES ('other_value');\n```\n\n----------------------------------------\n\nTITLE: Initializing Translator Instance\nDESCRIPTION: Creates an instance of the Translator class from the googletrans library, which will be used to perform the actual text translation.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n      translator = Translator()\n```\n\n----------------------------------------\n\nTITLE: GitHub Issue Query URLs\nDESCRIPTION: URLs for tracking issues and changes in GitHub milestones for Docker CLI and Moby projects.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/docker/cli/issues?q=is%3Aclosed+milestone%3A27.5.1\nhttps://github.com/moby/moby/issues?q=is%3Aclosed+milestone%3A27.5.1\n```\n\n----------------------------------------\n\nTITLE: Extending Volume Group in Bash\nDESCRIPTION: This command demonstrates how to extend the volume group using the vgextend command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo vgextend docker /dev/xvdg\n\nPhysical volume \"/dev/xvdg\" successfully created.\nVolume group \"docker\" successfully extended\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Entrypoint Script for Rails Applications\nDESCRIPTION: A shell script used as the Docker container's entrypoint that configures jemalloc memory optimization and performs database preparation before starting the Rails application server. This script ensures the database is properly set up when the container starts.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/containerize.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash -e\n\n# Enable jemalloc for reduced memory usage and latency.\nif [ -z \"${LD_PRELOAD+x}\" ]; then\n    LD_PRELOAD=$(find /usr/lib -name libjemalloc.so.2 -print -quit)\n    export LD_PRELOAD\nfi\n\n# If running the rails server then create or migrate existing database\nif [ \"${@: -2:1}\" == \"./bin/rails\" ] && [ \"${@: -1:1}\" == \"server\" ]; then\n  ./bin/rails db:prepare\nfi\n\nexec \"${@}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Volume Mounts in Docker Compose\nDESCRIPTION: This example demonstrates how to define volume mounts for a service in Docker Compose. It shows both the long and short syntax for specifying volumes.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/_default/single.markdown.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nweb:\n  volumes:\n    - type: volume\n      source: mydata\n      target: /data\n      volume:\n        nocopy: true\n    - ./static:/static\n```\n\n----------------------------------------\n\nTITLE: Example Windows Settings Configuration\nDESCRIPTION: JSON configuration to enable the Windows containers switch option in Docker Desktop's tray menu\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n\"displaySwitchWinLinContainers\": true\n```\n\n----------------------------------------\n\nTITLE: Setting Shared Memory Size for Docker Compose Build\nDESCRIPTION: Demonstrates how to set the size of shared memory allocated for building Docker images in Docker Compose. Supports both byte value strings and integer values.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  shm_size: '2gb'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  shm_size: 10000000\n```\n\n----------------------------------------\n\nTITLE: Sentiment Analysis Function Implementation\nDESCRIPTION: Function that performs sentiment analysis on input text using NLTK's SentimentIntensityAnalyzer, returning Positive, Negative, or Neutral.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef perform_semantic_analysis(text):\n    sid = SentimentIntensityAnalyzer()\n    sentiment_score = sid.polarity_scores(text)\n\n    if sentiment_score['compound'] >= 0.05:\n        return \"Positive\"\n    elif sentiment_score['compound'] <= -0.05:\n        return \"Negative\"\n    else:\n        return \"Neutral\"\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket in LocalStack Environment\nDESCRIPTION: Command using awslocal CLI to create an S3 bucket named 'mysamplebucket' within the LocalStack environment for local development and testing.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ awslocal s3 mb s3://mysamplebucket\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Desktop Disable Command Syntax\nDESCRIPTION: The basic syntax for the docker desktop disable command which is used to disable specific Docker Desktop features. This command accepts a parameter to specify which feature to disable.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/disable/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker desktop disable [command]\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Service PS Documentation\nDESCRIPTION: YAML frontmatter that configures the metadata for the Docker service ps command documentation page, including title, aliases for URL redirection, and layout specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/service/ps.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_service_ps\ntitle: docker service ps\naliases:\n- /edge/engine/reference/commandline/service_ps/\n- /engine/reference/commandline/service_ps/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Cache Mode Configuration\nDESCRIPTION: Example of setting cache mode to max when using the registry backend for more comprehensive caching\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=registry,ref=<registry>/<cache-image>,mode=max \\\n  --cache-from type=registry,ref=<registry>/<cache-image> .\n```\n\n----------------------------------------\n\nTITLE: VPNKit Configuration\nDESCRIPTION: JSON configuration to use VPNKit instead of gVisor for VM networking in Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/topics.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"networkType\":\"vpnkit\"\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Legacy ENV Syntax Example (Deprecated)\nDESCRIPTION: Example of the deprecated ENV syntax in Dockerfiles that creates ambiguity when setting environment variables. This syntax format (ENV name value) is discouraged in favor of the ENV name=value format.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV ONE TWO= THREE=world\n```\n\n----------------------------------------\n\nTITLE: Specifying AWS Region for awslogs Driver\nDESCRIPTION: Demonstrates how to set the AWS region when running a container with the awslogs driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/awslogs.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --log-driver=awslogs --log-opt awslogs-region=us-east-1 ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysctls in Docker Compose YAML\nDESCRIPTION: Demonstrates two ways to define kernel parameters (sysctls) for a service in a Docker Compose file, using either a map or an array syntax.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_68\n\nLANGUAGE: yaml\nCODE:\n```\nsysctls:\n  net.core.somaxconn: 1024\n  net.ipv4.tcp_syncookies: 0\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsysctls:\n  - net.core.somaxconn=1024\n  - net.ipv4.tcp_syncookies=0\n```\n\n----------------------------------------\n\nTITLE: Checking Disk Space Usage in Docker Desktop for Linux\nDESCRIPTION: Command to view detailed space usage information for Docker containers and images. This requires client and daemon API version 1.25 or later and provides comprehensive information about space consumption.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/linuxfaqs.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker system df -v\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Toast Notification in Docker Extensions\nDESCRIPTION: Use this method to display a warning toast notification to the user. Toast notifications appear temporarily and don't interrupt the user experience.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/dashboard.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.desktopUI.toast.warning(\"message\");\n```\n\n----------------------------------------\n\nTITLE: Backing Up Docker Trust Keys Using Tar in Bash\nDESCRIPTION: This command creates an encrypted backup of Docker trust keys. It sets a restrictive umask, tars the private keys directory, and then resets the umask to the default value.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_key_mng.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ umask 077; tar -zcvf private_keys_backup.tar.gz ~/.docker/trust/private; umask 022\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-line Logging with DateTime Format\nDESCRIPTION: Demonstrates how to set up multi-line logging using a datetime format pattern with the awslogs driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/awslogs.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n    --log-driver=awslogs \\\n    --log-opt awslogs-region=us-east-1 \\\n    --log-opt awslogs-group=myLogGroup \\\n    --log-opt awslogs-datetime-format='\\[%b %d, %Y %H:%M:%S\\]' \\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies\nDESCRIPTION: Create a requirements.txt file to list necessary Python packages for the application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#2025-04-11_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# 02 named_entity_recognition\nspacy==3.7.2\n\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Max Parallelism with BuildKit Config\nDESCRIPTION: Configuration example showing how to limit BuildKit solver parallelism using a dedicated config file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/configure-builder.md#2025-04-11_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# .github/buildkitd.toml\n[worker.oci]\n  max-parallelism = 4\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  buildx:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          config: .github/buildkitd.toml\n```\n\n----------------------------------------\n\nTITLE: Running Ubuntu Container with Bind Mount on Command Prompt\nDESCRIPTION: This command runs an interactive Ubuntu container with a bind mount that maps the current directory to /src inside the container using Command Prompt syntax.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --mount \"type=bind,src=%cd%,target=/src\" ubuntu bash\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Filter Command Syntax\nDESCRIPTION: Demonstrates the basic syntax for using the --filter flag with Docker commands. The filter requires a key-value pair separated by an equals operator.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/filter.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker COMMAND --filter \"KEY=VALUE\"\n```\n\n----------------------------------------\n\nTITLE: Specifying raw format for environment files in Docker Compose\nDESCRIPTION: Uses the format attribute to specify an alternative parsing format for environment files. The raw format passes values as-is without interpolation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nenv_file:\n  - path: ./default.env\n    format: raw\n```\n\n----------------------------------------\n\nTITLE: Using SSH Mount in Dockerfile for Private Repository Access\nDESCRIPTION: This Dockerfile example uses an SSH mount to fetch Go modules from a private GitHub repository, demonstrating SSH key configuration and module download.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/secrets.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nARG GO_VERSION=\"{{% param example_go_version %}}\"\n\nFROM golang:${GO_VERSION}-alpine AS base\nENV CGO_ENABLED=0\nENV GOPRIVATE=\"github.com/foo/*\"\nRUN apk add --no-cache file git rsync openssh-client\nRUN mkdir -p -m 0700 ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts\nWORKDIR /src\n\nFROM base AS vendor\n# this step configure git and checks the ssh key is loaded\nRUN --mount=type=ssh <<EOT\n  set -e\n  echo \"Setting Git SSH protocol\"\n  git config --global url.\"git@github.com:\".insteadOf \"https://github.com/\"\n  (\n    set +e\n    ssh -T git@github.com\n    if [ ! \"$?\" = \"1\" ]; then\n      echo \"No GitHub SSH key loaded exiting...\"\n      exit 1\n    fi\n  )\nEOT\n# this one download go modules\nRUN --mount=type=bind,target=. \\\n    --mount=type=cache,target=/go/pkg/mod \\\n    --mount=type=ssh \\\n    go mod download -x\n\nFROM vendor AS build\nRUN --mount=type=bind,target=. \\\n    --mount=type=cache,target=/go/pkg/mod \\\n    --mount=type=cache,target=/root/.cache \\\n    go build ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Model Runner in Docker Desktop via CLI\nDESCRIPTION: This command enables the Model Runner feature in Docker Desktop. It requires Docker Desktop to be installed and running. The command may prompt for confirmation or additional input depending on the system configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/enable/model-runner.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker desktop enable model-runner\n```\n\n----------------------------------------\n\nTITLE: Creating TCP-only Service with Short Syntax\nDESCRIPTION: Command to create a DNS cache service that publishes TCP port 53 using the short syntax format (colon-separated) for port publishing in Docker Swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name dns-cache \\\n  -p 53:53 \\\n  dns-cache\n```\n\n----------------------------------------\n\nTITLE: Entrypoint Configuration Examples\nDESCRIPTION: Examples showing different ways to configure container entrypoint using both short and list formats.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nentrypoint: /code/entrypoint.sh\n```\n\nLANGUAGE: yaml\nCODE:\n```\nentrypoint:\n  - php\n  - -d\n  - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so\n  - -d\n  - memory_limit=-1\n  - vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Creating LVM Profile Configuration File\nDESCRIPTION: Command to create/edit the LVM profile configuration file for Docker thin pool.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo vi /etc/lvm/profile/docker-thinpool.profile\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response from API Endpoint\nDESCRIPTION: The expected JSON response when querying the users API endpoint of the Rust application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[{ \"id\": 1, \"login\": \"root\" }]\n```\n\n----------------------------------------\n\nTITLE: Stopping the C++ Application Container\nDESCRIPTION: Stop and remove the running C++ application container using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/containerize.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker CLI Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker swarm leave command documentation page, including file paths, aliases, and layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/swarm/leave.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_swarm_leave\ntitle: docker swarm leave\naliases:\n- /edge/engine/reference/commandline/swarm_leave/\n- /engine/reference/commandline/swarm_leave/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Cloning .NET Sample Application\nDESCRIPTION: Command to clone the Docker .NET sample application repository that will be used for containerization.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/docker/docker-dotnet-sample\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Container Wait Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker container wait command documentation page, including the data folder location, file name, page title and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/wait.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_container_wait\ntitle: docker container wait\naliases:\n- /edge/engine/reference/commandline/container_wait/\n- /engine/reference/commandline/container_wait/\n- /engine/reference/commandline/wait/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to a Docker Swarm Node\nDESCRIPTION: Demonstrates adding metadata labels to a swarm node with the docker node update --label-add command. Labels can be used for node organization and service constraints.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/manage-nodes.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker node update --label-add foo --label-add bar=baz node-1\n\nnode-1\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Mount Point in Bash\nDESCRIPTION: This command uses the mount utility to display the mount point Docker is using for devicemapper.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n$ mount |grep devicemapper\n/dev/xvda1 on /var/lib/docker/devicemapper type xfs (rw,relatime,seclabel,attr2,inode64,noquota)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose v2.3 Build Configuration\nDESCRIPTION: Example of using build configurations in version 2.3 including shm_size option.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  shm_size: '2gb'\n  target: prod\n  cache_from:\n    - myapp:latest\n```\n\n----------------------------------------\n\nTITLE: Scaling a Docker Service in Swarm\nDESCRIPTION: This command scales a Docker service to a specified number of tasks (containers). It uses the 'docker service scale' command followed by the service ID and the desired number of tasks.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/scale-service.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker service scale <SERVICE-ID>=<NUMBER-OF-TASKS>\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Build Parameters in YAML\nDESCRIPTION: This YAML configuration defines metadata for a documentation page titled 'Explore'. It specifies build settings to never render the page and assigns a weight of 40 for ordering in the documentation structure.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Explore\nweight: 40\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Project Dependencies with Version Constraints\nDESCRIPTION: This snippet lists the specific version requirements for key Docker components including the Moby engine, BuildKit, Buildx, Docker CLI, Docker Compose, and Docker Scout CLI. Each dependency is defined with its precise version constraint.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/modules.txt#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# github.com/moby/moby v28.0.2+incompatible\n# github.com/moby/buildkit v0.20.1\n# github.com/docker/buildx v0.22.0\n# github.com/docker/cli v28.0.4+incompatible\n# github.com/docker/compose/v2 v2.35.0\n# github.com/docker/scout-cli v1.15.0\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Wasm Module Dockerfile\nDESCRIPTION: This Dockerfile snippet shows how to build a Wasm application. It copies the Wasm module from a build stage and sets it as the entrypoint.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/wasm.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM scratch\nCOPY --from=build /build/hello_world.wasm /hello_world.wasm\nENTRYPOINT [ \"/hello_world.wasm\" ]\n```\n\n----------------------------------------\n\nTITLE: Sharing Container Port in Project Harmonia\nDESCRIPTION: This command creates a publicly accessible URL for a container port in the cloud engine. It demonstrates how to make cloud-hosted applications accessible externally.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker harmonia engine share create cloudengine 3000\n```\n\n----------------------------------------\n\nTITLE: Testing Container Connection\nDESCRIPTION: Command to test the connection to the running container, which fails due to port mapping not being configured.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/run-containers.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ curl http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Resources with kubectl\nDESCRIPTION: Command to tear down the Kubernetes deployment and service by deleting all resources defined in the configuration file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/deploy.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl delete -f docker-kubernetes.yml\n```\n\n----------------------------------------\n\nTITLE: Validating Only a Docker Extension Metadata File\nDESCRIPTION: This command validates just the metadata.json file of a Docker extension without building the entire image. It checks if the metadata is valid against the JSON schema file before proceeding with the build process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/validate.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension validate /path/to/metadata.json\n```\n\n----------------------------------------\n\nTITLE: Creating a Common Reusable Target in Docker Bake\nDESCRIPTION: Defines a common target with shared build arguments that can be inherited by other targets.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/inheritance.md#2025-04-11_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"_common\" {\n  args = {\n    GO_VERSION = \"{{% param example_go_version %}}\"\n    BUILDKIT_CONTEXT_KEEP_GIT_DIR = 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Port Allocation Error Messages\nDESCRIPTION: Common error messages when encountering port allocation conflicts in Docker.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/topics.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nBind for 0.0.0.0:8080 failed: port is already allocated\n```\n\nLANGUAGE: text\nCODE:\n```\nlisten tcp:0.0.0.0:8080: bind: address is already in use\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop MSI with Passive Display Option in PowerShell\nDESCRIPTION: Command to install Docker Desktop MSI in passive mode, which shows progress without user interaction and cannot be cancelled during installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /i \"DockerDesktop.msi\" /L*V \".\\msi.log\" /passive /norestart\n```\n\n----------------------------------------\n\nTITLE: Adding Chown Flag to Dockerfile ADD/COPY Commands\nDESCRIPTION: Enhancement to Dockerfile ADD and COPY commands allowing ownership specification through --chown flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.09.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nADD --chown=<user>:<group> <src> <dest>\\nCOPY --chown=<user>:<group> <src> <dest>\n```\n\n----------------------------------------\n\nTITLE: Testing Container DNS Resolution with Alpine\nDESCRIPTION: Command to verify that Docker containers can resolve internal hostnames by running a ping command from an Alpine container. This helps confirm proper DNS configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -it alpine ping -c4 <my_internal_host>\n\nPING google.com (192.168.1.2): 56 data bytes\n64 bytes from 192.168.1.2: seq=0 ttl=41 time=7.597 ms\n64 bytes from 192.168.1.2: seq=1 ttl=41 time=7.635 ms\n64 bytes from 192.168.1.2: seq=2 ttl=41 time=7.660 ms\n64 bytes from 192.168.1.2: seq=3 ttl=41 time=7.677 ms\n```\n\n----------------------------------------\n\nTITLE: Verifying registry.json content on macOS\nDESCRIPTION: This command verifies the content of the registry.json file on macOS to ensure it contains the correct organization information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ sudo cat \"/Library/Application Support/com.docker.docker/registry.json\"\n{\"allowedOrgs\":[\"myorg\"]}\n```\n\n----------------------------------------\n\nTITLE: Listing Containers in TypeScript\nDESCRIPTION: Demonstrates how to get a list of running containers using the DockerDesktopClient interface. This method is deprecated and will be removed in a future version.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/DockerDesktopClient.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst containers = await window.ddClient.listContainers();\n```\n\n----------------------------------------\n\nTITLE: Loading an AppArmor Profile\nDESCRIPTION: Command to load a custom AppArmor profile into the kernel for use with Docker containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/apparmor.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ apparmor_parser -r -W /path/to/your_profile\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Image in Dockerfile\nDESCRIPTION: Create a Dockerfile to specify the environment and dependencies for the NER application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.8-slim\nWORKDIR /app\nCOPY requirements.txt /app\nRUN pip install --no-cache-dir -r requirements.txt\nRUN python -m spacy download en_core_web_sm\nCOPY *.py /app\nCOPY entrypoint.sh /app\nRUN chmod +x /app/entrypoint.sh\nENTRYPOINT [\"/app/entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: NLP Application Output Example\nDESCRIPTION: Example output showing named entity recognition results from the application, demonstrating the identification of organizations, locations, and person names.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nEnter the text for entity recognition (type 'exit' to end): Apple Inc. is planning to open a new store in San Francisco. Tim Cook is the CEO of Apple.\n\nEntity: Apple Inc., Type: ORG\nEntity: San Francisco, Type: GPE\nEntity: Tim Cook, Type: PERSON\nEntity: Apple, Type: ORG\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Remote Dockerfile from stdin\nDESCRIPTION: Demonstrates how to build a Docker image using a local filesystem while reading Dockerfile from stdin using the -f option.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -f- <URL>\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Bridge Network Rules Example\nDESCRIPTION: Command to delete per-bridge-network rules from the DOCKER chains when restoring access to unpublished ports. This example specifically targets the docker0 bridge interface.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\niptables -D DOCKER ! -i docker0 -o docker0 -j DROP\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Packages Manually\nDESCRIPTION: Command to manually install Docker using downloaded .deb packages\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dpkg -i ./containerd.io_<version>_<arch>.deb \\\n  ./docker-ce_<version>_<arch>.deb \\\n  ./docker-ce-cli_<version>_<arch>.deb \\\n  ./docker-buildx-plugin_<version>_<arch>.deb \\\n  ./docker-compose-plugin_<version>_<arch>.deb\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Desktop Modules via CLI\nDESCRIPTION: These examples demonstrate how to use Docker Desktop module-related CLI commands for listing, inspecting, and downloading modules.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/module/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker desktop module ls\ndocker desktop module inspect ID_OR_NAME\ndocker desktop module download ID_OR_NAME\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Swarm Tasks via API\nDESCRIPTION: Example of making a GET request to the Docker API to retrieve a list of tasks running in a Swarm cluster. The response includes detailed information about each task including its ID, creation time, specifications, status, and network attachments.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_106\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/tasks HTTP/1.1\n```\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"ID\": \"0kzzo1i0y4jz6027t0k7aezc7\",\n    \"Version\": {\n      \"Index\": 71\n    },\n    \"CreatedAt\": \"2016-06-07T21:07:31.171892745Z\",\n    \"UpdatedAt\": \"2016-06-07T21:07:31.376370513Z\",\n    \"Spec\": {\n      \"ContainerSpec\": {\n        \"Image\": \"redis\"\n      },\n      \"Resources\": {\n        \"Limits\": {},\n        \"Reservations\": {}\n      },\n      \"RestartPolicy\": {\n        \"Condition\": \"any\",\n        \"MaxAttempts\": 0\n      },\n      \"Placement\": {}\n    },\n    \"ServiceID\": \"9mnpnzenvg8p8tdbtq4wvbkcz\",\n    \"Slot\": 1,\n    \"NodeID\": \"60gvrl6tm78dmak4yl7srz94v\",\n    \"Status\": {\n      \"Timestamp\": \"2016-06-07T21:07:31.290032978Z\",\n      \"State\": \"running\",\n      \"Message\": \"started\",\n      \"ContainerStatus\": {\n        \"ContainerID\": \"e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035\",\n        \"PID\": 677\n      }\n    },\n    \"DesiredState\": \"running\",\n    \"NetworksAttachments\": [\n      {\n        \"Network\": {\n          \"ID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n          \"Version\": {\n            \"Index\": 18\n          },\n          \"CreatedAt\": \"2016-06-07T20:31:11.912919752Z\",\n          \"UpdatedAt\": \"2016-06-07T21:07:29.955277358Z\",\n          \"Spec\": {\n            \"Name\": \"ingress\",\n            \"Labels\": {\n              \"com.docker.swarm.internal\": \"true\"\n            },\n            \"DriverConfiguration\": {},\n            \"IPAMOptions\": {\n              \"Driver\": {},\n              \"Configs\": [\n                {\n                  \"Subnet\": \"10.255.0.0/16\",\n                  \"Gateway\": \"10.255.0.1\"\n                }\n              ]\n            }\n          },\n          \"DriverState\": {\n            \"Name\": \"overlay\",\n            \"Options\": {\n              \"com.docker.network.driver.overlay.vxlanid_list\": \"256\"\n            }\n          },\n          \"IPAMOptions\": {\n            \"Driver\": {\n              \"Name\": \"default\"\n            },\n            \"Configs\": [\n              {\n                \"Subnet\": \"10.255.0.0/16\",\n                \"Gateway\": \"10.255.0.1\"\n              }\n            ]\n          }\n        },\n        \"Addresses\": [\n          \"10.255.0.10/16\"\n        ]\n      }\n    ],\n  },\n  {\n    \"ID\": \"1yljwbmlr8er2waf8orvqpwms\",\n    \"Version\": {\n      \"Index\": 30\n    },\n    \"CreatedAt\": \"2016-06-07T21:07:30.019104782Z\",\n    \"UpdatedAt\": \"2016-06-07T21:07:30.231958098Z\",\n    \"Name\": \"hopeful_cori\",\n    \"Spec\": {\n      \"ContainerSpec\": {\n        \"Image\": \"redis\"\n      },\n      \"Resources\": {\n        \"Limits\": {},\n        \"Reservations\": {}\n      },\n      \"RestartPolicy\": {\n        \"Condition\": \"any\",\n        \"MaxAttempts\": 0\n      },\n      \"Placement\": {}\n    },\n    \"ServiceID\": \"9mnpnzenvg8p8tdbtq4wvbkcz\",\n    \"Slot\": 1,\n    \"NodeID\": \"60gvrl6tm78dmak4yl7srz94v\",\n    \"Status\": {\n      \"Timestamp\": \"2016-06-07T21:07:30.202183143Z\",\n      \"State\": \"shutdown\",\n      \"Message\": \"shutdown\",\n      \"ContainerStatus\": {\n        \"ContainerID\": \"1cf8d63d18e79668b0004a4be4c6ee58cddfad2dae29506d8781581d0688a213\"\n      }\n    },\n    \"DesiredState\": \"shutdown\",\n    \"NetworksAttachments\": [\n      {\n        \"Network\": {\n          \"ID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n          \"Version\": {\n            \"Index\": 18\n          },\n          \"CreatedAt\": \"2016-06-07T20:31:11.912919752Z\",\n          \"UpdatedAt\": \"2016-06-07T21:07:29.955277358Z\",\n          \"Spec\": {\n            \"Name\": \"ingress\",\n            \"Labels\": {\n              \"com.docker.swarm.internal\": \"true\"\n            },\n            \"DriverConfiguration\": {},\n            \"IPAMOptions\": {\n              \"Driver\": {},\n              \"Configs\": [\n                {\n                  \"Subnet\": \"10.255.0.0/16\",\n                  \"Gateway\": \"10.255.0.1\"\n                }\n              ]\n            }\n          },\n          \"DriverState\": {\n            \"Name\": \"overlay\",\n            \"Options\": {\n              \"com.docker.network.driver.overlay.vxlanid_list\": \"256\"\n            }\n          },\n          \"IPAMOptions\": {\n            \"Driver\": {\n              \"Name\": \"default\"\n            },\n            \"Configs\": [\n              {\n                \"Subnet\": \"10.255.0.0/16\",\n                \"Gateway\": \"10.255.0.1\"\n              }\n            ]\n          }\n        },\n        \"Addresses\": [\n          \"10.255.0.5/16\"\n        ]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Root Password Secret with OpenSSL in Docker Swarm\nDESCRIPTION: Generates a random base64-encoded password and stores it as a Docker secret named 'mysql_root_password'. This secret is used only for the MySQL service and not shared with WordPress.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 20 | docker secret create mysql_root_password -\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Metadata for Docker Desktop Engine CLI Documentation\nDESCRIPTION: This YAML snippet defines metadata for a documentation page about the Docker Desktop Engine CLI. It specifies the data folder, data file, page title, and layout template to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/engine/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: desktop-cli\ndatafile: docker_desktop_engine\ntitle: docker desktop engine\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Running Docker Containers\nDESCRIPTION: This command lists currently running Docker containers, used to verify the restart behavior of the previously started container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/start-containers-automatically.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask Samples Documentation Metadata in YAML\nDESCRIPTION: Front matter metadata for a Flask samples documentation page. It defines the page title, description, service type, and URL aliases for proper site navigation and SEO.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/flask.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Flask samples\ndescription: Docker samples for Flask.\nservice: flask\naliases:\n- /samples/flask/\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Trust Signer Documentation\nDESCRIPTION: YAML front matter configuration for the Docker Trust Signer CLI documentation page. It defines metadata including data folder, data file, title, and aliases for different documentation versions and paths.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/trust/signer/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_trust_signer\ntitle: docker trust signer\naliases:\n- /edge/engine/reference/commandline/trust_signer/\n- /engine/reference/commandline/trust_signer/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Pull Command Example\nDESCRIPTION: Example of running the 'docker compose pull db' command which pulls the postgres image associated with the db service defined in the compose.yaml file. The output shows the download progress of the image layers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_pull.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose pull db\n[+] Running 1/15\n ⠸ db Pulling                                                             12.4s\n   ⠿ 45b42c59be33 Already exists                                           0.0s\n   ⠹ 40adec129f1a Downloading  3.374MB/4.178MB                             9.3s\n   ⠹ b4c431d00c78 Download complete                                        9.3s\n   ⠹ 2696974e2815 Download complete                                        9.3s\n   ⠹ 564b77596399 Downloading  5.622MB/7.965MB                             9.3s\n   ⠹ 5044045cf6f2 Downloading  216.7kB/391.1kB                             9.3s\n   ⠹ d736e67e6ac3 Waiting                                                  9.3s\n   ⠹ 390c1c9a5ae4 Waiting                                                  9.3s\n   ⠹ c0e62f172284 Waiting                                                  9.3s\n   ⠹ ebcdc659c5bf Waiting                                                  9.3s\n   ⠹ 29be22cb3acc Waiting                                                  9.3s\n   ⠹ f63c47038e66 Waiting                                                  9.3s\n   ⠹ 77a0c198cde5 Waiting                                                  9.3s\n   ⠹ c8752d5b785c Waiting                                                  9.3s\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry Endpoint Environment Variable\nDESCRIPTION: Environment variable configuration to specify the OpenTelemetry collector endpoint for the Docker CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/otel.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_CLI_OTEL_EXPORTER_OTLP_ENDPOINT=<endpoint>\n```\n\n----------------------------------------\n\nTITLE: Running Container with Port Mapping\nDESCRIPTION: Command to run a Rust container with port mapping, exposing container port 8000 to host port 3001.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/run-containers.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --publish 3001:8000 docker-rust-image\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop MSI in System Context with PsExec\nDESCRIPTION: Command demonstrating how to install Docker Desktop MSI in the system account context using PsExec. This reproduces the behavior of MDM solutions which prevents the docker-users group from being populated correctly.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/faq.md#2025-04-11_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\npsexec -i -s msiexec /i \"DockerDesktop.msi\"\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure for Laravel Docker Setup\nDESCRIPTION: Shows the directory structure for a Laravel application with Docker configuration files organized in dedicated directories for common, development, and production environments.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/development-setup.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy-laravel-app/\n├── app/\n├── bootstrap/\n├── config/\n├── database/\n├── public/\n├── docker/\n│   ├── common/\n│   │   └── php-fpm/\n│   │       └── Dockerfile\n│   ├── development/\n│   │   ├── php-fpm/\n│   │   │   └── entrypoint.sh\n│   │   ├── workspace/\n│   │   │   └── Dockerfile\n│   │   └── nginx\n│   │       ├── Dockerfile\n│   │       └── nginx.conf\n│   └── production/\n├── compose.dev.yaml\n├── compose.prod.yaml\n├── .dockerignore\n├── .env\n├── vendor/\n├── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Secrets in Docker Compose\nDESCRIPTION: Demonstrates how to grant access to sensitive data during build using secrets in Docker Compose. Includes examples of short and long syntax for secret configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    build:\n      context: .\n      secrets:\n        - server-certificate\nsecrets:\n  server-certificate:\n    file: ./server.cert\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    build:\n      context: .\n      secrets:\n        - source: server-certificate\n          target: server.cert\n          uid: \"103\"\n          gid: \"103\"\n          mode: 0440\nsecrets:\n  server-certificate:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Negating Matches in .dockerignore\nDESCRIPTION: Shows how to use negation patterns in .dockerignore to include specific files that would otherwise be excluded.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n*.md\n!README.md\n```\n\n----------------------------------------\n\nTITLE: Creating an Accordion in Docker Documentation Markdown\nDESCRIPTION: This snippet demonstrates how to create an accordion in Docker documentation using custom shortcodes. It includes both the visible accordion content and the hidden markup used to generate it.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/accordions.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{</* accordion title=\"Accordion example\" */>}}\n\n```console\n$ docker run hello-world\n```\n\n{{</* /accordion */>}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Mirror\nDESCRIPTION: Shows how to configure a registry mirror using buildkitd-config-inline in the workflow.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/configure-builder.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  buildx:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          buildkitd-config-inline: |\n            [registry.\"docker.io\"]\n              mirrors = [\"mirror.gcr.io\"]\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Compose CLI plugin on RPM-based distributions\nDESCRIPTION: This command removes the Docker Compose CLI plugin using the yum package manager on RPM-based distributions like CentOS or Fedora.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/uninstall.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo yum remove docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Joining Worker Node to Docker Swarm\nDESCRIPTION: Command for worker nodes to join an existing swarm. Requires the join token received from the swarm initialization and the IP address of the manager node.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm join --token <TOKEN> \\\n  --advertise-addr <IP-ADDRESS-OF-WORKER-1> \\\n  <IP-ADDRESS-OF-MANAGER>:2377\n```\n\n----------------------------------------\n\nTITLE: FUSE Filesystem Mount in Docker\nDESCRIPTION: Example of mounting FUSE filesystem in Docker using combined --cap-add and --device flags.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_37\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -it --cap-add SYS_ADMIN sshfs sshfs sven@10.10.10.20:/home/sven /mnt\n\nfuse: failed to open /dev/fuse: Operation not permitted\n\n$ docker run --rm -it --device /dev/fuse sshfs sshfs sven@10.10.10.20:/home/sven /mnt\n\nfusermount: mount failed: Operation not permitted\n\n$ docker run --rm -it --cap-add SYS_ADMIN --device /dev/fuse sshfs\n\n# sshfs sven@10.10.10.20:/home/sven /mnt\nThe authenticity of host '10.10.10.20 (10.10.10.20)' can't be established.\nECDSA key fingerprint is 25:34:85:75:25:b0:17:46:05:19:04:93:b5:dd:5f:c6.\nAre you sure you want to continue connecting (yes/no)? yes\nsven@10.10.10.20's password:\n\nroot@30aa0cfaf1b5:/# ls -la /mnt/src/docker\n\ntotal 1516\ndrwxrwxr-x 1 1000 1000   4096 Dec  4 06:08 .\ndrwxrwxr-x 1 1000 1000   4096 Dec  4 11:46 ..\n-rw-rw-r-- 1 1000 1000     16 Oct  8 00:09 .dockerignore\n-rwxrwxr-x 1 1000 1000    464 Oct  8 00:09 .drone.yml\ndrwxrwxr-x 1 1000 1000   4096 Dec  4 06:11 .git\n-rw-rw-r-- 1 1000 1000    461 Dec  4 06:08 .gitignore\n....\n```\n\n----------------------------------------\n\nTITLE: Automatic Generation Notice in HTML Comments\nDESCRIPTION: This HTML comment informs readers that the page is automatically generated from Docker's source code and provides instructions for suggesting changes or improvements to the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/exec.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Updates v1.37\nDESCRIPTION: Details additions to container and service creation endpoints for SCTP ports and templating drivers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/version-history.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* `POST /containers/create` and `POST /services/create` now supports exposing SCTP ports\n* `POST /configs/create` now accept a `Templating` driver\n```\n\n----------------------------------------\n\nTITLE: Running Postgres Container Without Password\nDESCRIPTION: Example of an error message when attempting to run a Postgres container without specifying a required password. This demonstrates a scenario where Ask Gordon can be used for troubleshooting.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run postgres\nError: Database is uninitialized and superuser password is not specified.\n       You must specify POSTGRES_PASSWORD to a non-empty value for the\n       superuser. For example, \"-e POSTGRES_PASSWORD=password\" on \"docker run\".\n\n       You may also use \"POSTGRES_HOST_AUTH_METHOD=trust\" to allow all\n       connections without a password. This is *not* recommended.\n\n       See PostgreSQL documentation about \"trust\":\n       https://www.postgresql.org/docs/current/auth-trust.html\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Default GC Configuration\nDESCRIPTION: Default garbage collection configuration for Docker Desktop users in daemon.json, setting basic cache storage limits.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/garbage-collection.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"builder\": {\n    \"gc\": {\n      \"defaultKeepStorage\": \"20GB\",\n      \"enabled\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDX_BAKE_GIT_AUTH_HEADER for Git Authentication\nDESCRIPTION: Sets the HTTP authentication scheme when using a remote Bake definition in a private Git repository. This enables pre-flight authentication for loading remote Bake files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nexport BUILDX_BAKE_GIT_AUTH_HEADER=basic\n```\n\n----------------------------------------\n\nTITLE: Defining Target with Build Arguments in HCL\nDESCRIPTION: This example defines a target named 'app' with a build argument that can be overridden.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/overrides.md#2025-04-11_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ntarget \"app\" {\n  args = {\n    mybuildarg = \"foo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Desktop Diagnostics on Windows\nDESCRIPTION: Commands to locate and run the Docker Desktop diagnostic tool on Windows systems to gather troubleshooting information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\Program Files\\Docker\\Docker\\resources\\com.docker.diagnose.exe\n```\n\nLANGUAGE: powershell\nCODE:\n```\n& \"C:\\Program Files\\Docker\\Docker\\resources\\com.docker.diagnose.exe\" gather -upload\n```\n\nLANGUAGE: powershell\nCODE:\n```\nExpand-Archive -LiteralPath \"C:\\Users\\testUser\\AppData\\Local\\Temp\\5DE9978A-3848-429E-8776-950FC869186F\\20230607101602.zip\" -DestinationPath \"C:\\Users\\testuser\\AppData\\Local\\Temp\\5DE9978A-3848-429E-8776-950FC869186F\\20230607101602\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\ncode $Env:LOCALAPPDATA\\Docker\\log\n```\n\n----------------------------------------\n\nTITLE: Generating Delegation Keys with Docker Trust\nDESCRIPTION: Uses the Docker trust command to generate a new delegation key pair and load the private key into the local Docker trust store.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker trust key generate jeff\n\nGenerating key for jeff...\nEnter passphrase for new jeff key with ID 9deed25: \nRepeat passphrase for new jeff key with ID 9deed25: \nSuccessfully generated and loaded private key. Corresponding public key available: /home/ubuntu/Documents/mytrustdir/jeff.pub\n```\n\n----------------------------------------\n\nTITLE: Docker Extension Remove Command\nDESCRIPTION: Command to remove an installed Docker extension\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/usage.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker extension rm\n```\n\n----------------------------------------\n\nTITLE: Example of Good Practice: Multi-Stage Build with Target Architecture in Dockerfile\nDESCRIPTION: This snippet showcases a multi-stage build approach, using platform-specific stages and a dynamic selection based on the target architecture (${TARGETARCH}).\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-platform-flag-const-disallowed.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM --platform=linux/amd64 alpine AS build_amd64\n...\n\nFROM --platform=linux/arm64 alpine AS build_arm64\n...\n\nFROM build_${TARGETARCH} AS build\n...\n```\n\n----------------------------------------\n\nTITLE: Error Message for Extended Attribute Processing in Docker\nDESCRIPTION: This snippet shows an example error message that Docker might produce when attempting to process a tar file with invalid extended attributes. This typically occurs with macOS-generated tar files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/25.0.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfailed to solve: lsetxattr /sftp_key.ppk: operation not supported\n```\n\n----------------------------------------\n\nTITLE: Standalone Mode with Kubernetes Driver\nDESCRIPTION: Configuration for running Buildx in standalone mode with Kubernetes driver without Docker CLI dependency.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/configure-builder.md#2025-04-11_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  buildx:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          driver: kubernetes\n      \n      - name: Build\n        run: |\n          buildx build .\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Dex OAuth Testing\nDESCRIPTION: YAML configuration for a GitHub Actions workflow that installs and runs Dex for OAuth testing.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dex.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n[...]\njobs:\n  test-oauth:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Install Dex\n        run: |\n          curl -L https://github.com/dexidp/dex/releases/download/v2.37.0/dex_linux_amd64 -o dex\n          chmod +x dex\n\n      - name: Start Dex Server\n        run: |\n          nohup ./dex serve config.yaml > dex.log 2>&1 &\n          sleep 5  # Give Dex time to start\n[...]\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Heredoc Syntax\nDESCRIPTION: Demonstrates building a Docker image using heredoc syntax for inline Dockerfile definition.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t myimage:latest - <<EOF\nFROM busybox\nRUN echo \"hello world\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Docker API Endpoint Updates for Container and Service Operations\nDESCRIPTION: Documentation of new and updated API endpoints for Docker operations including image pushing with platform selection, service creation with OomScoreAdj, container listing with annotations, and container/service creation with tmpfs mount options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- containerd image store: `POST /images/{name}/push` now supports a `platform` parameter (JSON encoded OCI Platform type) that allows selecting a specific platform-manifest from the multi-platform image. This is experimental and may change in future API versions.\n- `POST /services/create` and `POST /services/{id}/update` now support `OomScoreAdj`.\n- `ContainerList` api returns container annotations.\n- `POST /containers/create` and `POST /services/create` now take `Options` as part of `HostConfig.Mounts.TmpfsOptions` allowing to set options for tmpfs mounts.\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Docker Compose Documentation in YAML\nDESCRIPTION: YAML frontmatter that configures the documentation page for Docker Compose CLI. It defines the data folder, data file, title, URL aliases for redirects, and the page layout type.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose\ntitle: docker compose\naliases:\n- /compose/reference/docker-compose/\n- /compose/reference/help/\n- /engine/reference/commandline/compose/\n- /compose/reference/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Evaluating the Sentiment Analysis Model\nDESCRIPTION: Using scikit-learn's accuracy_score and classification_report to assess the performance of the sentiment classifier on the test data.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\naccuracy = accuracy_score(y_test, vader_classifications)\nreport_vader = classification_report(y_test, vader_classifications, zero_division='warn')\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Docker Run Documentation\nDESCRIPTION: YAML frontmatter configuration that specifies the title, build settings, and sidebar navigation for the docker run command documentation page. Sets the build to never render and redirects to the container run reference page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/run.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: docker run\nbuild:\n  render: never\nsidebar:\n  goto: /reference/cli/docker/container/run/\n```\n\n----------------------------------------\n\nTITLE: Running a container with automatic port mapping in Docker\nDESCRIPTION: Creates a Python Flask application container with automatic port mapping (-P flag) which maps any container ports to random high ports on the host.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -P training/webapp python app.py\n```\n\n----------------------------------------\n\nTITLE: Updating React Component Text\nDESCRIPTION: Code diff showing how to update the Add Item button text in the React application\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- {submitting ? 'Adding...' : 'Add Item'}\n+ {submitting ? 'Adding...' : 'Add'}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Secret with openssl\nDESCRIPTION: Creates a new MySQL password and stores it as a Docker secret named mysql_password_v2 using openssl to generate a random base64 string.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -base64 20 | docker secret create mysql_password_v2 -\n```\n\n----------------------------------------\n\nTITLE: Shell Script for Docker Build Cloud Integration\nDESCRIPTION: A bash script that demonstrates downloading Docker Buildx with Build Cloud support, authenticating to Docker Hub, connecting to a Docker Build Cloud builder, and building multi-architecture Docker images. Includes examples of cache-only builds and full build-and-push workflows.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Get download link for latest buildx binary. Set $ARCH to the CPU architecture (e.g. amd64, arm64)\nARCH=amd64\nBUILDX_URL=$(curl -s https://raw.githubusercontent.com/docker/actions-toolkit/main/.github/buildx-lab-releases.json | jq -r \".latest.assets[] | select(endswith(\\\"linux-$ARCH\\\"))\")\n\n# Download docker buildx with Build Cloud support\nmkdir -vp ~/.docker/cli-plugins/\ncurl --silent -L --output ~/.docker/cli-plugins/docker-buildx $BUILDX_URL\nchmod a+x ~/.docker/cli-plugins/docker-buildx\n\n# Login to Docker Hub. For security reasons $DOCKER_PAT should be a Personal Access Token. See https://docs.docker.com/security/for-developers/access-tokens/\necho \"$DOCKER_PAT\" | docker login --username $DOCKER_USER --password-stdin\n\n# Connect to your builder and set it as the default builder\ndocker buildx create --use --driver cloud \"<ORG>/default\"\n\n# Cache-only image build\ndocker buildx build \\\n    --tag temp \\\n    --output type=cacheonly \\\n    .\n\n# Build, tag, and push a multi-arch docker image\ndocker buildx build \\\n    --platform linux/amd64,linux/arm64 \\\n    --push \\\n    --tag \"<IMAGE>\" \\\n    .\n```\n\n----------------------------------------\n\nTITLE: Arch Linux Docker Desktop Removal Commands\nDESCRIPTION: Commands to uninstall Docker Desktop and remove related files on Arch Linux\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/uninstall.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo pacman remove docker-desktop\n$ rm -r $HOME/.docker/desktop\n$ sudo rm /usr/local/bin/com.docker.cli\n$ sudo apt purge docker-desktop\n```\n\n----------------------------------------\n\nTITLE: Testing Docker Compose Manual Installation\nDESCRIPTION: Command to verify that Docker Compose is installed correctly by checking its version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose version\n```\n\n----------------------------------------\n\nTITLE: Missing Iptables Rules in FORWARD Chain\nDESCRIPTION: These are the missing iptables rules that should be added back to allow traffic to egress the HOST through docker_gwbridge and docker0 interfaces. These rules allow related and established connection traffic.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/19.03.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/sbin/iptables --wait -C FORWARD -o docker_gwbridge -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n/sbin/iptables --wait -C FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample Application Repository with Git\nDESCRIPTION: Command to clone the Docker-NLP repository containing the sample text classification application code.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/harsh4870/Docker-NLP.git\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Buildx Documentation\nDESCRIPTION: YAML front matter block defining metadata for the Docker Buildx ls command documentation page, including data folder paths, title, layout and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/ls.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx_ls\ntitle: docker buildx ls\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_ls/\n---\n```\n\n----------------------------------------\n\nTITLE: Docker Scout Cache Command Table in Markdown\nDESCRIPTION: A markdown table listing the available subcommands for the Docker Scout cache command, including their names and descriptions.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cache.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                            | Description                     |\n|:--------------------------------|:--------------------------------|\n| [`df`](scout_cache_df.md)       | Show Docker Scout disk usage    |\n| [`prune`](scout_cache_prune.md) | Remove temporary or cached data |\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Docker Docs Changes\nDESCRIPTION: Command to check out a new branch for making changes to the Docker documentation.\nSOURCE: https://github.com/docker/docs/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ git checkout -b <branch>\n```\n\n----------------------------------------\n\nTITLE: Setting up BitBucket Pipelines for Docker Build Cloud\nDESCRIPTION: BitBucket Pipelines configuration for multi-platform Docker image building using Docker Build Cloud. This configuration downloads the Buildx plugin with Build Cloud support, connects to a cloud builder, and builds images for both amd64 and arm64 platforms.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Prerequisites: $DOCKER_USER, $DOCKER_PAT setup as deployment variables\n# This pipeline assumes $BITBUCKET_REPO_SLUG as the image name\n# Replace <ORG> in the `docker buildx create` command with your Docker org\n\nimage: atlassian/default-image:3\n\npipelines:\n  default:\n    - step:\n        name: Build multi-platform image\n        script:\n          - mkdir -vp ~/.docker/cli-plugins/\n          - ARCH=amd64\n          - BUILDX_URL=$(curl -s https://raw.githubusercontent.com/docker/actions-toolkit/main/.github/buildx-lab-releases.json | jq -r \".latest.assets[] | select(endswith(\\\"linux-$ARCH\\\"))\")\n          - curl --silent -L --output ~/.docker/cli-plugins/docker-buildx $BUILDX_URL\n          - chmod a+x ~/.docker/cli-plugins/docker-buildx\n          - echo \"$DOCKER_PAT\" | docker login --username $DOCKER_USER --password-stdin\n          - docker buildx create --use --driver cloud \"<ORG>/default\"\n          - IMAGE_NAME=$BITBUCKET_REPO_SLUG\n          - docker buildx build\n            --platform linux/amd64,linux/arm64\n            --push\n            --tag \"$IMAGE_NAME\" .\n        services:\n          - docker\n```\n\n----------------------------------------\n\nTITLE: Error Message for Variable Typo\nDESCRIPTION: Sample output message when a likely typo in a variable name is detected, suggesting the correct variable name.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nUsage of undefined variable '$PAHT' (did you mean $PATH?)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images with SBOM and Provenance Attestations\nDESCRIPTION: Command to build a Docker image with both SBOM and provenance attestations enabled, which is required for compliance with the Supply Chain Attestations policy type.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/policy/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --provenance=true --sbom=true -t <IMAGE> --push .\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Conditional Tag Evaluation\nDESCRIPTION: This shows the JSON output after evaluating a Bake file with conditional tag logic, where empty tags are filtered out.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/expressions.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"default\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile\",\n      \"tags\": [\"my-image:latest\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining metadata for the documentation page, including folder structure, file naming, aliases, title and layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/scout/integration/configure.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: scout-cli\ndatafile: docker_scout_integration_configure\naliases:\n- /engine/reference/commandline/scout_integration_configure\ntitle: docker scout integration configure\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Deploying Converted Kubernetes Resources\nDESCRIPTION: Command to apply the Kubernetes manifests generated by Compose Bridge to deploy the application on Kubernetes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/usage.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -k out/overlays/desktop/\n```\n\n----------------------------------------\n\nTITLE: Setting Execute Permissions for Entrypoint Script\nDESCRIPTION: Modifies file permissions to make the entrypoint.sh script executable within the Docker container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_13\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN chmod +x /app/entrypoint.sh\n```\n\n----------------------------------------\n\nTITLE: Custom Network Configuration in Docker Compose\nDESCRIPTION: Defines custom networks for service isolation. The proxy and db services cannot communicate directly as they are on separate networks, while the app service can communicate with both because it's connected to both networks.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/networking.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  proxy:\n    build: ./proxy\n    networks:\n      - frontend\n  app:\n    build: ./app\n    networks:\n      - frontend\n      - backend\n  db:\n    image: postgres\n    networks:\n      - backend\n\nnetworks:\n  frontend:\n    # Specify driver options\n    driver: bridge\n    driver_opts:\n      com.docker.network.bridge.host_binding_ipv4: \"127.0.0.1\"\n  backend:\n    # Use a custom driver\n    driver: custom-driver\n```\n\n----------------------------------------\n\nTITLE: Displaying Permission Matrix for Docker Hub Team Autobuild Actions\nDESCRIPTION: This markdown table shows the different actions allowed for various permission levels (Read, Write, Admin, Owner) in Docker Hub team repositories for autobuild features.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/builds/setup.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Action/Permission     | Read | Write | Admin | Owner |\n| --------------------- | ---- | ----- | ----- | ----- |\n| view build details    |  x   |   x   |   x   |   x   |\n| start, cancel, retry  |      |   x   |   x   |   x   |\n| edit build settings   |      |       |   x   |   x   |\n| delete build          |      |       |       |   x   |\n```\n\n----------------------------------------\n\nTITLE: Adding capacity to a ZFS pool for Docker\nDESCRIPTION: Command to add an additional block device to the existing ZFS pool to increase available storage capacity.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/zfs-driver.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo zpool add zpool-docker /dev/xvdh\n```\n\n----------------------------------------\n\nTITLE: HTML Comment About Documentation Source\nDESCRIPTION: HTML comment explaining that the page is automatically generated from Docker's source code and directing users where to submit changes to the documentation text.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/image/prune.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Configuring Ulimits in Docker Compose YAML\nDESCRIPTION: Demonstrates how to set custom ulimits for a container in a Docker Compose file, including both single value and soft/hard limit configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_70\n\nLANGUAGE: yaml\nCODE:\n```\nulimits:\n  nproc: 65535\n  nofile:\n    soft: 20000\n    hard: 40000\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example Voting App Repository\nDESCRIPTION: Git commands to clone the example repository for the voting application. This repository will be used to demonstrate how to extend Docker Compose with Bake.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dvdksn/example-voting-app.git\n$ cd example-voting-app\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Container Inspect Documentation\nDESCRIPTION: YAML front matter configuration for the Docker container inspect command documentation page. It defines metadata including the data folder, data file, title, aliases for redirects, and layout type.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/inspect.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_container_inspect\ntitle: docker container inspect\naliases:\n- /edge/engine/reference/commandline/container_inspect/\n- /engine/reference/commandline/container_inspect/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Deprecated Docker API Fields in Image Inspect\nDESCRIPTION: List of deprecated fields in the image inspect API response that are not part of the Docker Image Spec or OCI Image Spec and will be removed in future API versions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n- `Hostname`\n- `Domainname`\n- `AttachStdin`\n- `AttachStdout`\n- `AttachStderr`\n- `Tty`\n- `OpenStdin`\n- `StdinOnce`\n- `Image`\n- `NetworkDisabled` (already omitted unless set)\n- `MacAddress` (already omitted unless set)\n- `StopTimeout` (already omitted unless set)\n```\n\n----------------------------------------\n\nTITLE: Entering Mount Namespace\nDESCRIPTION: Command to enter the mount namespace of PID 1 for USB/IP tool access.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/usbip.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ nsenter -t 1 -m\n```\n\n----------------------------------------\n\nTITLE: Setting Git Remote URL for GitHub Repository\nDESCRIPTION: Command to update the Git remote URL to point to the newly created GitHub repository. Replace placeholders with actual GitHub username and repository name.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/configure-ci-cd.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git remote set-url origin https://github.com/your-username/your-repository.git\n```\n\n----------------------------------------\n\nTITLE: Building Multi-Architecture Images with Native Kubernetes Nodes\nDESCRIPTION: Command to build multi-architecture images using Docker Buildx with the Kubernetes driver, leveraging native builds across AMD64 and ARM64 nodes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --builder=kube --platform=linux/amd64,linux/arm64 -t <user>/<image> --push .\n```\n\n----------------------------------------\n\nTITLE: Docker GPU Configuration\nDESCRIPTION: Example of using the --gpus flag to configure GPU access, updated to match NVIDIA Container Runtime behavior.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--gpus=0\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating PostgreSQL Table\nDESCRIPTION: This SQL snippet creates a tasks table with a serial primary key and description field, then inserts two sample records into the table.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE tasks (\n    id SERIAL PRIMARY KEY,\n    description VARCHAR(100)\n);\nINSERT INTO tasks (description) VALUES ('Finish work'), ('Have fun');\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker CLI Documentation\nDESCRIPTION: This YAML snippet defines the front matter for a documentation page about the Docker CLI. It specifies the data folder, file name, title, URL aliases, and layout to be used when generating the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker\ntitle: docker\naliases:\n- /edge/engine/reference/commandline/\n- /engine/reference/commandline/\n- /engine/reference/commandline/docker/\n- /engine/reference/commandline/cli/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Viewing Evaluated Bake Configuration with Docker CLI\nDESCRIPTION: This command shows how to print the evaluated Bake configuration using the Docker CLI, which displays the resolved values after expression evaluation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/expressions.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake --print\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with Watch\nDESCRIPTION: Docker Compose configuration showing service setup with development watch capabilities for automatic rebuilds on code changes\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  api:\n    container_name: go-api\n    build:\n      context: .\n      dockerfile: Dockerfile\n    image: go-api:latest\n    ports:\n      - 8000:8000\n    networks:\n      - go-network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n    develop:\n      watch:\n        - path: .\n          action: rebuild\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Plugin Set Documentation\nDESCRIPTION: This YAML frontmatter block defines metadata for the 'docker plugin set' command documentation page. It specifies the data folder, file name, title, aliases for redirects, and layout template to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/plugin/set.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_plugin_set\ntitle: docker plugin set\naliases:\n- /edge/engine/reference/commandline/plugin_set/\n- /engine/reference/commandline/plugin_set/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Using a Read-Only Volume\nDESCRIPTION: Shows how to mount a volume as read-only in a Docker container using both --mount and -v options, and how to verify the mount.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  --name=nginxtest \\\n  --mount source=nginx-vol,destination=/usr/share/nginx/html,readonly \\\n  nginx:latest\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  --name=nginxtest \\\n  -v nginx-vol:/usr/share/nginx/html:ro \\\n  nginx:latest\n```\n\nLANGUAGE: json\nCODE:\n```\n\"Mounts\": [\n    {\n        \"Type\": \"volume\",\n        \"Name\": \"nginx-vol\",\n        \"Source\": \"/var/lib/docker/volumes/nginx-vol/_data\",\n        \"Destination\": \"/usr/share/nginx/html\",\n        \"Driver\": \"local\",\n        \"Mode\": \"\",\n        \"RW\": false,\n        \"Propagation\": \"\"\n    }\n],\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker container stop nginxtest\n\n$ docker container rm nginxtest\n\n$ docker volume rm nginx-vol\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Tutorials Page with YAML Frontmatter\nDESCRIPTION: This YAML snippet defines the configuration for the Docker tutorials page. It sets the build rendering to 'never', specifies the page title as 'Tutorials', and assigns a weight of 30 for page ordering purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Tutorials\nweight: 30\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message for Plugin Incompatibility in Docker 1.13\nDESCRIPTION: This code snippet shows an error message that may appear when starting the Docker daemon if plugins installed with Docker 1.12 were not uninstalled before upgrading to Docker 1.13. It indicates an incompatibility with the managed plugin API changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError starting daemon: json: cannot unmarshal string into Go value of type types.PluginEnv\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Gitea Documentation\nDESCRIPTION: YAML frontmatter block defining metadata for a documentation page about Gitea Docker samples, including title, description, service name and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/gitea.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Gitea samples\ndescription: Docker samples for Gitea.\nservice: gitea\naliases:\n- /samples/gitea/\n---\n```\n\n----------------------------------------\n\nTITLE: Using --compress flag with docker-compose build\nDESCRIPTION: Command syntax for compressing the build context during Docker Compose build operations, which can improve performance when sending the context to the Docker daemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose build --compress\n```\n\n----------------------------------------\n\nTITLE: Inspecting Provenance with Docker Imagetools\nDESCRIPTION: Command to inspect the provenance attestation of a Docker image using 'docker buildx imagetools inspect'. It uses the '--format' option to specify a template for the output, extracting the raw contents of the Provenance in the SLSA format.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/slsa-provenance.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx imagetools inspect <namespace>/<image>:<version> \\\n    --format \"{{ json .Provenance.SLSA }}\"\n```\n\n----------------------------------------\n\nTITLE: Finding Processes Blocking Filesystem Removal with lsof\nDESCRIPTION: Command to identify which process is preventing a Docker container filesystem from being removed. This helps troubleshoot 'Device or resource busy' errors when removing containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n$ sudo lsof /var/lib/docker/containers/74bef250361c7817bee19349c93139621b272bc8f654ae112dd4eb9652af9515/shm\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Scout CLI Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker Scout repository command documentation page, including folder structure, aliases, and layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/scout/repo/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: scout-cli\ndatafile: docker_scout_repo\naliases:\n- /engine/reference/commandline/scout_repo\ntitle: docker scout repo\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Running a Container with a Mounted Volume\nDESCRIPTION: This command runs a Docker container in detached mode, maps port 80, and mounts the 'log-data' volume to the '/logs' directory inside the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 80:80 -v log-data:/logs docker/welcome-to-docker\n```\n\n----------------------------------------\n\nTITLE: Configuring Bind Propagation in Docker\nDESCRIPTION: This example demonstrates how to configure bind propagation in Docker. It mounts the target directory twice, with the second mount using both read-only and rslave bind propagation options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -it \\\n  --name devtest \\\n  --mount type=bind,source=\"$(pwd)\"/target,target=/app \\\n  --mount type=bind,source=\"$(pwd)\"/target,target=/app2,readonly,bind-propagation=rslave \\\n  nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Invalid Dockerfile EXPOSE Example\nDESCRIPTION: Example showing incorrect usage of empty continuation line with EXPOSE command.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/no-empty-continuation.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nEXPOSE \\\n\n80\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Custom Network with Docker Container Driver\nDESCRIPTION: Series of commands showing how to create a custom network, create a builder that uses this network, and verify the network configuration of the builder container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/docker-container.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create foonet\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx create --use \\\n  --name mybuilder \\\n  --driver docker-container \\\n  --driver-opt \"network=foonet\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx inspect --bootstrap\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker inspect buildx_buildkit_mybuilder0 --format={{.NetworkSettings.Networks}}\nmap[foonet:0xc00018c0c0]\n```\n\n----------------------------------------\n\nTITLE: Using CMD-SHELL in Healthcheck Configuration\nDESCRIPTION: Example of CMD-SHELL usage in healthcheck test command, which runs the command using the container's default shell (/bin/sh for Linux).\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\ntest: [\"CMD-SHELL\", \"curl -f http://localhost || exit 1\"]\n```\n\n----------------------------------------\n\nTITLE: Using the Split Function in Docker Command Output\nDESCRIPTION: The split function slices a string into a list of strings separated by a specified delimiter. This example splits the Image field by colon in docker inspect output.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker inspect --format '{{split .Image \":\"}}' container\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Dockerfile\nDESCRIPTION: Dockerfile for setting up PostgreSQL database with user configuration\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM ubuntu\n\nRUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8\n\nRUN echo \"deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main\" > /etc/apt/sources.list.d/pgdg.list\n\nRUN apt-get update && apt-get install -y python-software-properties software-properties-common postgresql-9.3 postgresql-client-9.3 postgresql-contrib-9.3\n\n# Note: The official Debian and Ubuntu images automatically ``apt-get clean``\n# after each ``apt-get``\n\nUSER postgres\n\nRUN    /etc/init.d/postgresql start &&\\\n    psql --command \"CREATE USER docker WITH SUPERUSER PASSWORD 'docker';\" &&\\\n    createdb -O docker docker\n\nRUN echo \"host all  all    0.0.0.0/0  md5\" >> /etc/postgresql/9.3/main/pg_hba.conf\n\nRUN echo \"listen_addresses='*'\" >> /etc/postgresql/9.3/main/postgresql.conf\n\nEXPOSE 5432\n\nVOLUME  [\"/etc/postgresql\", \"/var/log/postgresql\", \"/var/lib/postgresql\"]\n\nCMD [\"/usr/lib/postgresql/9.3/bin/postgres\", \"-D\", \"/var/lib/postgresql/9.3/main\", \"-c\", \"config_file=/etc/postgresql/9.3/main/postgresql.conf\"]\n```\n\n----------------------------------------\n\nTITLE: Publishing Compose Application as OCI Artifact\nDESCRIPTION: Command to publish a Compose application as an OCI artifact to a registry using the docker compose publish command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/oci-artifact.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose publish username/my-compose-app:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring architecture-specific binaries in metadata.json\nDESCRIPTION: JSON configuration in metadata.json that specifies platform-specific binary paths for Docker extensions, enabling proper deployment of binaries to the host system based on architecture.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/multi-arch.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"icon\": \"docker.svg\",\n  \"ui\": {\n    \"dashboard-tab\": {\n      \"title\": \"Example Extension\",\n      \"src\": \"index.html\",\n      \"root\": \"ui\"\n    }\n  },\n  \"host\": {\n    \"binaries\": [\n      {\n        \"darwin\": [\n          {\n            \"path\": \"/darwin/kubectl\"\n          }\n        ],\n        \"windows\": [\n          {\n            \"path\": \"/windows/kubectl.exe\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examining Worker Node Certificate Structure in Docker Swarm\nDESCRIPTION: Example output of a certificate from a worker node in a Docker Swarm, showing the certificate version, serial number, signature algorithm, issuer, validity period, and subject information which includes the organizational unit (OU) as 'swarm-worker'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/how-swarm-mode-works/pki.md#2025-04-11_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            3b:1c:06:91:73:fb:16:ff:69:c3:f7:a2:fe:96:c1:73:e2:80:97:3b\n        Signature Algorithm: ecdsa-with-SHA256\n        Issuer: CN=swarm-ca\n        Validity\n            Not Before: Aug 30 02:39:00 2016 GMT\n            Not After : Nov 28 03:39:00 2016 GMT\n        Subject: O=ec2adilxf4ngv7ev8fwsi61i7, OU=swarm-worker, CN=dw02poa4vqvzxi5c10gm4pq2g\n...snip...\n```\n\n----------------------------------------\n\nTITLE: Creating a Loop Device\nDESCRIPTION: This command creates a loop device from the disk.raw file, which can be used as a block device.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ losetup -f --show disk.raw\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Scout Directory for Manual Installation (macOS)\nDESCRIPTION: Command to create a subdirectory under $HOME/.docker called scout for storing the Docker Scout CLI plugin binary on macOS.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/install.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p $HOME/.docker/scout\n```\n\n----------------------------------------\n\nTITLE: Reactivating Logical Volumes in Bash\nDESCRIPTION: This command demonstrates how to reactivate logical volumes after a reboot using the lvchange command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo lvchange -ay docker/thinpool\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration Update\nDESCRIPTION: Docker service unit file modification to add multi-user.target dependency and enable socket activation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/20.10.md#2025-04-11_snippet_6\n\nLANGUAGE: systemd\nCODE:\n```\ndocker.service:\nAfter=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Configuration\nDESCRIPTION: YAML configuration for GitHub Actions workflow that handles Docker image building and pushing to Docker Hub. Includes authentication, buildx setup, and multi-architecture build configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/configure-ci-cd.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Version Using Command Line\nDESCRIPTION: This code snippet demonstrates how to check the Docker daemon and client version information, including API versions supported, using the 'docker version' command in a terminal.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker version\nClient: Docker Engine - Community\n Version:           28.0.0\n API version:       1.48\n Go version:        go1.23.6\n Git commit:        f9ced58\n Built:             Wed Feb 19 22:11:04 2025\n OS/Arch:           linux/amd64\n Context:           default\n\nServer: Docker Engine - Community\n Engine:\n  Version:          28.0.0\n  API version:      1.48 (minimum version 1.24)\n  Go version:       go1.23.6\n  Git commit:       af898ab\n  Built:            Wed Feb 19 22:11:04 2025\n  OS/Arch:          linux/amd64\n  ...\n```\n\n----------------------------------------\n\nTITLE: Starting BuildKit Daemon on Windows\nDESCRIPTION: Command to start the BuildKit daemon process on Windows which will listen for build requests and execute them.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n> buildkitd.exe\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Volume Name Specification\nDESCRIPTION: Support for specifying custom names for non-external volumes in Docker Compose files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.09.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\\n  myvolume:\\n    name: custom_name\n```\n\n----------------------------------------\n\nTITLE: Documentation Source Comment in HTML\nDESCRIPTION: HTML comment indicating that the page is automatically generated from Docker's source code and providing instructions for suggesting changes through GitHub tickets or pull requests.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/trust/key/generate.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Setting DNS Options in Docker Run Command\nDESCRIPTION: Shows how to set IPv6 DNS options when running a Docker container. The example demonstrates using the --dns flag to specify IPv6 addresses for DNS resolution.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n--dns flag\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Comment for Source Code Reference\nDESCRIPTION: This HTML comment provides information about the automatic generation of the page from Docker's source code and instructions for suggesting changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/plugin/disable.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Multiple Docker Containers\nDESCRIPTION: This bash loop writes the word 'hello' to a file in three different containers, demonstrating how writing data affects container storage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ for i in {1..3}; do docker exec my_container_$i sh -c 'printf hello > /out.txt'; done\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Docker Desktop MSI Non-Interactively with Verbose Logging in PowerShell\nDESCRIPTION: Command to silently uninstall Docker Desktop MSI with detailed logging, useful for automated removal with log records.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /x \"DockerDesktop.msi\" /L*V \".\\msi.log\" /quiet\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Container Run Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the 'docker container run' command documentation page. It specifies the data folder, file name, title, aliases, and layout for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/run.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_container_run\ntitle: docker container run\naliases:\n- /engine/reference/commandline/container_run/\n- /engine/reference/commandline/run/\n- /reference/cli/docker/run/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Mac-Specific Installation Template\nDESCRIPTION: Template shortcode for Mac-specific installation with version and build path parameters\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n{{< desktop-install-v2 mac=true version=\"4.33.2\" build_path=\"/179689/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Network with HTTP POST Request\nDESCRIPTION: Demonstrates how to create a new Docker network with specific configurations including IPv4 and IPv6 support, custom subnets, network options, and labels.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_75\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/networks/create HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Name\":\"isolated_nw\",\n  \"CheckDuplicate\":true,\n  \"Driver\":\"bridge\",\n  \"EnableIPv6\": true,\n  \"IPAM\":{\n    \"Driver\": \"default\",\n    \"Config\":[\n      {\n        \"Subnet\":\"172.20.0.0/16\",\n        \"IPRange\":\"172.20.10.0/24\",\n        \"Gateway\":\"172.20.10.11\"\n      },\n      {\n        \"Subnet\":\"2001:db8:abcd::/64\",\n        \"Gateway\":\"2001:db8:abcd::1011\"\n      }\n    ],\n    \"Options\": {\n      \"foo\": \"bar\"\n    }\n  },\n  \"Internal\":true,\n  \"Options\": {\n    \"com.docker.network.bridge.default_bridge\": \"true\",\n    \"com.docker.network.bridge.enable_icc\": \"true\",\n    \"com.docker.network.bridge.enable_ip_masquerade\": \"true\",\n    \"com.docker.network.bridge.host_binding_ipv4\": \"0.0.0.0\",\n    \"com.docker.network.bridge.name\": \"docker0\",\n    \"com.docker.network.driver.mtu\": \"1500\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Bake Definition for Combination Example\nDESCRIPTION: HCL Bake definition stored locally that defines a default target with a custom argument. This file will be combined with a remote definition.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#2025-04-11_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n# local.hcl\ntarget \"default\" {\n  args = {\n    HELLO = \"foo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Extension Validate Command\nDESCRIPTION: Command to validate an extension metadata file against the JSON schema\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/usage.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker extension validate\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Volume Prune Documentation\nDESCRIPTION: YAML configuration that defines metadata for the 'docker volume prune' documentation page, including the title, aliases for URL routing, and layout specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/volume/prune.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_volume_prune\ntitle: docker volume prune\naliases:\n- /edge/engine/reference/commandline/volume_prune/\n- /engine/reference/commandline/volume_prune/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Source Code Reference\nDESCRIPTION: HTML comment providing information about the automatic generation of the page content from Docker's source code. It directs users to open tickets or pull requests in the GitHub repository for suggesting changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/volume/inspect.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Daemon Logs on macOS\nDESCRIPTION: This command uses the tail utility to continuously display the latest entries in the dockerd log file on macOS. It shows debug-level messages with timestamps.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/logs.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ tail -f ~/Library/Containers/com.docker.docker/Data/log/vm/dockerd.log\n2021-07-28T10:21:21Z dockerd time=\"2021-07-28T10:21:21.497642089Z\" level=debug msg=\"attach: stdout: begin\"\n2021-07-28T10:21:21Z dockerd time=\"2021-07-28T10:21:21.497714291Z\" level=debug msg=\"attach: stderr: begin\"\n2021-07-28T10:21:21Z dockerd time=\"2021-07-28T10:21:21.499798390Z\" level=debug msg=\"Calling POST /v1.41/containers/35fc5ec0ffe1ad492d0a4fbf51fd6286a087b89d4dd66367fa3b7aec70b46a40/wait?condition=removed\"\n2021-07-28T10:21:21Z dockerd time=\"2021-07-28T10:21:21.518403686Z\" level=debug msg=\"Calling GET /v1.41/containers/35fc5ec0ffe1ad492d0a4fbf51fd6286a087b89d4dd66367fa3b7aec70b46a40/json\"\n2021-07-28T10:21:21Z dockerd time=\"2021-07-28T10:21:21.527074928Z\" level=debug msg=\"Calling POST /v1.41/containers/35fc5ec0ffe1ad492d0a4fbf51fd6286a087b89d4dd66367fa3b7aec70b46a40/start\"\n2021-07-28T10:21:21Z dockerd time=\"2021-07-28T10:21:21.528203579Z\" level=debug msg=\"container mounted via layerStore: &{/var/lib/docker/overlay2/6e76ffecede030507fcaa576404e141e5f87fc4d7e1760e9ce5b52acb24\n...\n^C\n```\n\n----------------------------------------\n\nTITLE: Committing a Docker Container to Create an Image with Go SDK\nDESCRIPTION: Demonstrates creating a container, running a command in it, and committing the result as a new image using the Docker Go SDK. The example creates a container based on Alpine, touches a file, and commits the container state as a new image.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_16\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/docker/docker/api/types/container\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tcli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer cli.Close()\n\n\tcreateResp, err := cli.ContainerCreate(ctx, &container.Config{\n\t\tImage: \"alpine\",\n\t\tCmd:   []string{\"touch\", \"/helloworld\"},\n\t}, nil, nil, nil, \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := cli.ContainerStart(ctx, createResp.ID, container.StartOptions{}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tstatusCh, errCh := cli.ContainerWait(ctx, createResp.ID, container.WaitConditionNotRunning)\n\tselect {\n\tcase err := <-errCh:\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\tcase <-statusCh:\n\t}\n\n\tcommitResp, err := cli.ContainerCommit(ctx, createResp.ID, container.CommitOptions{Reference: \"helloworld\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(commitResp.ID)\n}\n```\n\n----------------------------------------\n\nTITLE: Release Installation Template All Platforms\nDESCRIPTION: Template shortcode for installation instructions targeting all platforms with specific version parameters\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{{< desktop-install-v2 all=true beta_win_arm=true version=\"4.34.0\" build_path=\"/165256/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Examining Image Layer Directory Structure in Docker OverlayFS\nDESCRIPTION: This snippet demonstrates how to view the image layer directories within /var/lib/docker/overlay/ using the ls command. It shows how Docker organizes image layers in the filesystem.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/overlayfs-driver.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ ls -l /var/lib/docker/overlay/\n\ntotal 20\ndrwx------ 3 root root 4096 Jun 20 16:11 38f3ed2eac129654acef11c32670b534670c3a06e483fce313d72e3e0a15baa8\ndrwx------ 3 root root 4096 Jun 20 16:11 55f1e14c361b90570df46371b20ce6d480c434981cbda5fd68c6ff61aa0a5358\ndrwx------ 3 root root 4096 Jun 20 16:11 824c8a961a4f5e8fe4f4243dab57c5be798e7fd195f6d88ab06aea92ba931654\ndrwx------ 3 root root 4096 Jun 20 16:11 ad0fe55125ebf599da124da175174a4b8c1878afe6907bf7c78570341f308461\ndrwx------ 3 root root 4096 Jun 20 16:11 edab9b5e5bf73f2997524eebeac1de4cf9c8b904fa8ad3ec43b3504196aa3801\n```\n\n----------------------------------------\n\nTITLE: Basic Vulnerability Analysis for Alpine Image\nDESCRIPTION: Demonstrates basic usage of docker scout cves command to analyze an Alpine image for vulnerabilities\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves alpine\nAnalyzing image alpine\n✓ Image stored for indexing\n✓ Indexed 18 packages\n✓ No vulnerable package detected\n```\n\n----------------------------------------\n\nTITLE: Printing Docker Bake Configuration with Matrix Target\nDESCRIPTION: This console snippet shows the output of printing the Docker Bake configuration with a matrix target, displaying the resolved targets and their properties.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/matrices.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake --print app\n[+] Building 0.0s (0/0)\n{\n  \"group\": {\n    \"app\": {\n      \"targets\": [\n        \"app-foo\",\n        \"app-bar\"\n      ]\n    },\n    \"default\": {\n      \"targets\": [\n        \"app\"\n      ]\n    }\n  },\n  \"target\": {\n    \"app-bar\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile\",\n      \"target\": \"bar\"\n    },\n    \"app-foo\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile\",\n      \"target\": \"foo\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Configs with Long Syntax in Docker Compose\nDESCRIPTION: Example showing how to configure Redis service with custom config settings including file mounting, permissions and user/group specifications.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  redis:\n    image: redis:latest\n    configs:\n      - source: my_config\n        target: /redis_config\n        uid: \"103\"\n        gid: \"103\"\n        mode: 0440\nconfigs:\n  my_config:\n    external: true\n  my_other_config:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Container Sizes\nDESCRIPTION: This command uses 'docker ps' with the '--size' option to display the running containers and their sizes. It demonstrates that containers initially share the same read-only image layers without additional storage usage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps --size --format \"table {{.ID}}\\t{{.Image}}\\t{{.Names}}\\t{{.Size}}\"\n```\n\n----------------------------------------\n\nTITLE: Docker Compose v3.4 Volume Definition Example\nDESCRIPTION: Example of setting a custom volume name in version 3.4 of docker-compose.yml using the name parameter.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  mydata:\n    name: custom_volume_name\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Image Index\nDESCRIPTION: This command builds and pushes an image with an annotation attached specifically to the image index by using the index: type prefix.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/annotations.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --tag <IMAGE> --push --annotation \"index:foo=bar\" .\n```\n\n----------------------------------------\n\nTITLE: Managing Kubernetes Contexts\nDESCRIPTION: Commands to view and switch between available Kubernetes contexts, ensuring kubectl is configured to use docker-desktop\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/kubernetes.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl config get-contexts\n$ kubectl config use-context docker-desktop\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Desktop to Use Local Development UI Source\nDESCRIPTION: Command to tell Docker Desktop to use a local development server as the frontend source for an extension, enabling hot reloading.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/test-debug.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension dev ui-source <name-of-your-extensions> http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Displaying Service Details in Readable Format with Docker CLI\nDESCRIPTION: Uses the docker service inspect command with the --pretty flag to display formatted details about a service running in the swarm, including ID, name, mode, replicas, and configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/inspect-service.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n[manager1]$ docker service inspect --pretty helloworld\n\nID:\t\t9uk4639qpg7npwf3fn2aasksr\nName:\t\thelloworld\nService Mode:\tREPLICATED\n Replicas:\t\t1\nPlacement:\nUpdateConfig:\n Parallelism:\t1\nContainerSpec:\n Image:\t\talpine\n Args:\tping docker.com\nResources:\nEndpoint Mode:  vip\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Alpha Options Table - Markdown\nDESCRIPTION: Markdown table showing available options for Docker Compose alpha commands, including the dry-run flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_alpha.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type | Default | Description                     |\n|:------------|:-----|:--------|:--------------------------------|\n| `--dry-run` |      |         | Execute command in dry run mode |\n```\n\n----------------------------------------\n\nTITLE: Reloading Devicemapper Thin Pool in Bash\nDESCRIPTION: This series of commands demonstrates how to reload the thin pool with a new sector number using dmsetup commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dmsetup suspend docker-8:1-123141-pool\n$ sudo dmsetup reload docker-8:1-123141-pool --table '0 419430400 thin-pool 7:1 7:0 128 32768 1 skip_block_zeroing'\n$ sudo dmsetup resume docker-8:1-123141-pool\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Docker Bake Target in HCL\nDESCRIPTION: Defines a target called 'app-dev' with build arguments, tags, and labels for a development Docker image build.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/inheritance.md#2025-04-11_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app-dev\" {\n  args = {\n    GO_VERSION = \"{{% param example_go_version %}}\"\n  }\n  tags = [\"docker.io/username/myapp:dev\"]\n  labels = {\n    \"org.opencontainers.image.source\" = \"https://github.com/username/myapp\"\n    \"org.opencontainers.image.author\" = \"moby.whale@example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Input Loop for Text Summarization\nDESCRIPTION: Implements an infinite loop to continuously prompt users for text input, processing until the user types 'exit' to terminate the application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n   while True:\n      input_text = input(\"Enter the text for summarization (type 'exit' to end): \")\n\n      if input_text.lower() == 'exit':\n         print(\"Exiting...\")\n         break\n```\n\n----------------------------------------\n\nTITLE: Running a Model with a One-time Prompt\nDESCRIPTION: Command to run an AI model with a single prompt and receive the response without entering interactive mode.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker model run ai/smollm2 \"Hi\"\n```\n\n----------------------------------------\n\nTITLE: Checking Loaded Docker Images\nDESCRIPTION: Command to list Docker images in the local image store after building.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker image ls\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Engine API v1.31 Documentation\nDESCRIPTION: This YAML front matter defines metadata for the Docker Engine API v1.31 reference documentation page, including the title, link title, and aliases for URL routing.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.31.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.31\ntitle: Docker Engine API v1.31 reference\naliases:\n  - /engine/api/v1.31/\n---\n```\n\n----------------------------------------\n\nTITLE: Docker Certificate Error Message for Incorrect File Extensions\nDESCRIPTION: Example error message displayed when CA certificates are given the incorrect file extension (.cert instead of .crt). This helps troubleshoot certificate configuration issues.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/certificates.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nMissing key KEY_NAME for client certificate CERT_NAME. CA certificates should use the extension .crt.\n```\n\n----------------------------------------\n\nTITLE: Running Docker Scout Artifactory Agent with Docker\nDESCRIPTION: Docker run command to start the Artifactory agent with a bind mount for the configuration file. This command mounts the directory containing config.json to the required path in the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/registry/artifactory.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n  --mount type=bind,src=/var/opt/artifactory-agent,target=/opt/artifactory-agent/data \\\n  docker/artifactory-agent:v1\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Node Remove Documentation\nDESCRIPTION: YAML front matter configuration block that defines metadata for the Docker node rm command documentation page, including the data folder, file name, title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/node/rm.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_node_rm\ntitle: docker node rm\naliases:\n- /edge/engine/reference/commandline/node_rm/\n- /engine/reference/commandline/node_rm/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Checking Disk Usage of VFS Image Layers\nDESCRIPTION: Command to display the disk space used by each image layer in the VFS storage driver, showing how each layer consumes full disk space due to deep copying.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/vfs-driver.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ du -sh /var/lib/docker/vfs/dir/*\n\n4.0K\t/var/lib/docker/vfs/dir/3262dfbe53dac3e1ab7dcc8ad5d8c4d586a11d2ac3c4234892e34bff7f6b821e\n125M\t/var/lib/docker/vfs/dir/6af21814449345f55d88c403e66564faad965d6afa84b294ae6e740c9ded2561\n104M\t/var/lib/docker/vfs/dir/6d3be4585ba32f9f5cbff0110e8d07aea5f5b9fbb1439677c27e7dfee263171c\n125M\t/var/lib/docker/vfs/dir/9ecd2d88ca177413ab89f987e1507325285a7418fc76d0dcb4bc021447ba2bab\n104M\t/var/lib/docker/vfs/dir/a292ac6341a65bf3a5da7b7c251e19de1294bd2ec32828de621d41c7ad31f895\n104M\t/var/lib/docker/vfs/dir/e92be7a4a4e3ccbb7dd87695bca1a0ea373d4f673f455491b1342b33ed91446b\n```\n\n----------------------------------------\n\nTITLE: Testing IPv6 Connectivity Between Docker Containers\nDESCRIPTION: Demonstrates how to create a second container on the same IPv6 network and test connectivity using ping6. Shows interface configuration and successful ping results between containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n# Test L2 connectivity over IPv6\n$ docker run --net=v6ipvlan139 -it --rm alpine /bin/sh\n\n# Inside the second IPv6 container\n$$ ip a show eth0\n75: eth0@if55: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default\n    link/ether 00:50:56:2b:29:40 brd ff:ff:ff:ff:ff:ff\n    inet 172.18.0.3/16 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 2001:db8:abc4::250:56ff:fe2b:2940/64 scope link tentative dadfailed\n       valid_lft forever preferred_lft forever\n    inet6 2001:db8:abc2::2/64 scope link nodad\n       valid_lft forever preferred_lft forever\n\n$$ ping6 2001:db8:abc2::1\nPING 2001:db8:abc2::1 (2001:db8:abc2::1): 56 data bytes\n64 bytes from 2001:db8:abc2::1%eth0: icmp_seq=0 ttl=64 time=0.044 ms\n64 bytes from 2001:db8:abc2::1%eth0: icmp_seq=1 ttl=64 time=0.058 ms\n\n2 packets transmitted, 2 packets received, 0% packet loss\nround-trip min/avg/max/stddev = 0.044/0.051/0.058/0.000 ms\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Docker Engine from SLES\nDESCRIPTION: Command to remove Docker Engine, CLI, containerd, and related packages from the system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/sles.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ sudo zypper remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\n```\n\n----------------------------------------\n\nTITLE: Sample Test Output from Docker Build Process\nDESCRIPTION: Example output from running tests during the Docker build process using the test stage. Shows successful test execution integrated into the image build workflow.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/run-tests.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n...\n\n#11 [test 3/3] RUN npm run test\n#11 1.058\n#11 1.058 > docker-nodejs@1.0.0 test\n#11 1.058 > jest\n#11 1.058\n#11 3.765 PASS spec/routes/getItems.spec.js\n#11 3.767 PASS spec/routes/deleteItem.spec.js\n#11 3.783 PASS spec/routes/updateItem.spec.js\n#11 3.806 PASS spec/routes/addItem.spec.js\n#11 4.179 PASS spec/persistence/sqlite.spec.js\n#11 4.207\n#11 4.208 Test Suites: 5 passed, 5 total\n#11 4.208 Tests:       9 passed, 9 total\n#11 4.208 Snapshots:   0 total\n#11 4.208 Time:        2.168 s\n#11 4.208 Ran all test suites.\n#11 4.265 npm notice\n#11 4.265 npm notice New major version of npm available! 8.6.0 -> 9.8.1\n#11 4.265 npm notice Changelog: <https://github.com/npm/cli/releases/tag/v9.8.1>\n#11 4.265 npm notice Run `npm install -g npm@9.8.1` to update!\n#11 4.266 npm notice\n#11 DONE 4.3s\n\n...\n```\n\n----------------------------------------\n\nTITLE: Working with detached containers using docker commands\nDESCRIPTION: Shows a workflow for running a container in detached mode, checking its status with docker ps, viewing logs with docker logs, and attaching to the container with docker attach.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d nginx\n0246aa4d1448a401cabd2ce8f242192b6e7af721527e48a810463366c7ff54f1\n$ docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS        PORTS     NAMES\n0246aa4d1448   nginx     \"/docker-entrypoint.…\"   2 seconds ago   Up 1 second   80/tcp    pedantic_liskov\n$ docker logs -n 5 0246aa4d1448\n2023/11/06 15:58:23 [notice] 1#1: start worker process 33\n2023/11/06 15:58:23 [notice] 1#1: start worker process 34\n2023/11/06 15:58:23 [notice] 1#1: start worker process 35\n2023/11/06 15:58:23 [notice] 1#1: start worker process 36\n2023/11/06 15:58:23 [notice] 1#1: start worker process 37\n$ docker attach 0246aa4d1448\n^C\n2023/11/06 15:58:40 [notice] 1#1: signal 2 (SIGINT) received, exiting\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker Manuals Page\nDESCRIPTION: This YAML snippet defines the metadata and structure for the Docker manuals page. It includes title, description, keywords, layout settings, and categorized lists of Docker products and services with their descriptions and links.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Manuals\ndescription: Learn how to install, set up, configure, and use Docker products with this collection of user guides\nkeywords: docker, docs, manuals, products, user guides, how-to\nurl: /manuals/\nlayout: wide\nparams:\n  icon: description\n  sidebar:\n    groups:\n      - Open source\n      - Products\n      - Platform\n  notoc: true\n  open-source:\n  - title: Docker Build\n    description: Build and ship any application anywhere.\n    icon: build\n    link: /build/\n  - title: Docker Engine\n    description: The industry-leading container runtime.\n    icon: developer_board\n    link: /engine/\n  - title: Docker Compose\n    description: Define and run multi-container applications.\n    icon: /assets/icons/Compose.svg\n    link: /compose/\n  - title: Testcontainers\n    description: Run containers programmatically in your preferred programming language.\n    icon: /assets/icons/Testcontainers.svg\n    link: /testcontainers/\n  products:\n  - title: Docker Desktop\n    description: Your command center for container development.\n    icon: /assets/icons/Whale.svg\n    link: /desktop/\n  - title: Build Cloud\n    description: Build your images faster in the cloud.\n    icon: /assets/images/logo-build-cloud.svg\n    link: /build-cloud/\n  - title: Docker Hub\n    description: Discover, share, and integrate container images.\n    icon: hub\n    link: /docker-hub/\n  - title: Docker Scout\n    description: Image analysis and policy evaluation.\n    icon: /assets/icons/Scout.svg\n    link: /scout/\n  - title: Docker for GitHub Copilot\n    description: Integrate Docker's capabilities with GitHub Copilot.\n    icon: chat\n    link: /copilot/\n  - title: Docker Extensions\n    description: Customize your Docker Desktop workflow.\n    icon: extension\n    link: /extensions/\n  - title: Testcontainers Cloud\n    description: Run integration tests, with real dependencies, in the cloud.\n    icon: package_2\n    link: https://testcontainers.com/cloud/docs/\n  - title: Docker Projects\n    description: Use a unified, project-based workflow to run your containerized projects. \n    icon: folder\n    link: /projects/\n  platform:\n  - title: Administration\n    description: Centralized observability for companies and organizations.\n    icon: admin_panel_settings\n    link: /admin/\n  - title: Billing\n    description: Manage billing and payment methods.\n    icon: payments\n    link: /billing/\n  - title: Accounts\n    description: Manage your Docker account.\n    icon: account_circle\n    link: /accounts/\n  - title: Security\n    description: Security guardrails for both administrators and developers.\n    icon: lock\n    link: /security/\n  - title: Subscription\n    description: Commercial use licenses for Docker products.\n    icon: card_membership\n    link: /subscription/\n---\n```\n\n----------------------------------------\n\nTITLE: Installing BuildKit Binaries to PATH on Windows\nDESCRIPTION: PowerShell commands to install BuildKit binaries to Program Files and add them to the system PATH environment variable so they can be accessed from any location.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#2025-04-11_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n# after the binaries are extracted in the bin directory\n# move them to an appropriate path in your $Env:PATH directories or:\nCopy-Item -Path \".\\bin\" -Destination \"$Env:ProgramFiles\\buildkit\" -Recurse -Force\n# add `buildkitd.exe` and `buildctl.exe` binaries in the $Env:PATH\n$Path = [Environment]::GetEnvironmentVariable(\"PATH\", \"Machine\") + `\n    [IO.Path]::PathSeparator + \"$Env:ProgramFiles\\buildkit\"\n[Environment]::SetEnvironmentVariable( \"Path\", $Path, \"Machine\")\n$Env:Path = [System.Environment]::GetEnvironmentVariable(\"Path\",\"Machine\") + \";\" + `\n    [System.Environment]::GetEnvironmentVariable(\"Path\",\"User\")\n```\n\n----------------------------------------\n\nTITLE: Defining Build Environment in SLSA Provenance\nDESCRIPTION: Example of the 'invocation.environment' field which describes the environment where the build was executed. Currently, it only specifies the platform of the build machine, not necessarily the platform of the resulting artifact.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n    \"invocation\": {\n      \"environment\": {\n        \"platform\": \"linux/amd64\"\n      },\n      ...\n    },\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Context Update Documentation\nDESCRIPTION: YAML configuration block defining metadata for the 'docker context update' command documentation page. It specifies the data folder, file name, page title, layout, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/context/update.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_context_update\ntitle: docker context update\nlayout: cli\naliases:\n- /engine/reference/commandline/context_update/\n---\n```\n\n----------------------------------------\n\nTITLE: GitHub Issue References\nDESCRIPTION: References to GitHub issues and pull requests related to Docker Buildx changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/release-notes.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[docker/buildx#2685]: https://github.com/docker/buildx/pull/2685\n[docker/buildx#2689]: https://github.com/docker/buildx/pull/2689\n[docker/buildx#2698]: https://github.com/docker/buildx/pull/2698\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with User Tag for Docker Hub\nDESCRIPTION: Command to build a Docker image with a tag that includes the user's Docker ID, preparing it for pushing to Docker Hub. This should be run in the TensorJS-Face-Detection directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/tensorflowjs.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t YOUR-USER-NAME/face-detection-tensorjs .\n```\n\n----------------------------------------\n\nTITLE: Using Dry Run Mode in Docker Compose\nDESCRIPTION: Example of using the `--dry-run` flag with Docker Compose to simulate command execution without changing the application stack state. This shows the output of a dry run for building and starting services.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose --dry-run up --build -d\n[+] Pulling 1/1\n ✔ DRY-RUN MODE -  db Pulled                                                                                                                                                                                                               0.9s\n[+] Running 10/8\n ✔ DRY-RUN MODE -    build service backend                                                                                                                                                                                                 0.0s\n ✔ DRY-RUN MODE -  ==> ==> writing image dryRun-754a08ddf8bcb1cf22f310f09206dd783d42f7dd                                                                                                                                                   0.0s\n ✔ DRY-RUN MODE -  ==> ==> naming to nginx-golang-mysql-backend                                                                                                                                                                            0.0s\n ✔ DRY-RUN MODE -  Network nginx-golang-mysql_default                                    Created                                                                                                                                           0.0s\n ✔ DRY-RUN MODE -  Container nginx-golang-mysql-db-1                                     Created                                                                                                                                           0.0s\n ✔ DRY-RUN MODE -  Container nginx-golang-mysql-backend-1                                Created                                                                                                                                           0.0s\n ✔ DRY-RUN MODE -  Container nginx-golang-mysql-proxy-1                                  Created                                                                                                                                           0.0s\n ✔ DRY-RUN MODE -  Container nginx-golang-mysql-db-1                                     Healthy                                                                                                                                           0.5s\n ✔ DRY-RUN MODE -  Container nginx-golang-mysql-backend-1                                Started                                                                                                                                           0.0s\n ✔ DRY-RUN MODE -  Container nginx-golang-mysql-proxy-1                                  Started                                     Started\n```\n\n----------------------------------------\n\nTITLE: Printing Target-Specific Bake Configuration\nDESCRIPTION: This command shows how to print the evaluated configuration for a specific target in a Bake file using the Docker CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/expressions.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake --print app\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Cache with GitHub Actions\nDESCRIPTION: Configuration for using inline cache exporter with GitHub Actions. This approach supports 'min' cache mode and demonstrates how to build and push Docker images while utilizing inline caching.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/cache.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      \n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: user/app:latest\n          cache-from: type=registry,ref=user/app:latest\n          cache-to: type=inline\n```\n\n----------------------------------------\n\nTITLE: BuildKit Default GC Configuration\nDESCRIPTION: Default garbage collection configuration for BuildKit workers using buildkitd.toml, defining space thresholds and policies.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/garbage-collection.md#2025-04-11_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n# Global defaults\n[worker.oci]\n  gc = true\n  reservedSpace = \"10GB\"\n  maxUsedSpace = \"100GB\"\n  minFreeSpace = \"20%\"\n\n# Policy 1\n[[worker.oci.gcpolicy]]\n  filters = [ \"type==source.local\", \"type==exec.cachemount\", \"type==source.git.checkout\" ]\n  keepDuration = \"48h\"\n  maxUsedSpace = \"512MB\"\n\n# Policy 2\n[[worker.oci.gcpolicy]]\n  keepDuration = \"1440h\" # 60 days\n  reservedSpace = \"10GB\"\n  maxUsedSpace = \"100GB\"\n\n# Policy 3\n[[worker.oci.gcpolicy]]\n  reservedSpace = \"10GB\"\n  maxUsedSpace = \"100GB\"\n```\n\n----------------------------------------\n\nTITLE: Setting up YAML Front Matter for Docker Engine Release Notes\nDESCRIPTION: YAML front matter that defines metadata for the Docker Engine v28 release notes page, including title, description, keywords, table of contents settings, tags, and URL aliases for SEO and navigation purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Docker Engine version 28 release notes\nlinkTitle: Engine v28\ndescription: Learn about the new features, bug fixes, and breaking changes for Docker Engine\nkeywords: docker, docker engine, ce, whats new, release notes\ntoc_min: 1\ntoc_max: 2\ntags:\n  - Release notes\naliases:\n- /engine/release-notes/\n- /engine/release-notes/latest/\n- /release-notes/docker-ce/\n- /release-notes/docker-engine/\n- /engine/release-notes/28.0/\n---\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dockerfile Copy Example\nDESCRIPTION: Demonstrates an incorrect attempt to copy a file that matches a .dockerignore pattern, which will result in a build error.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/copy-ignored-file.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM scratch\nCOPY ./tmp/helloworld.txt /helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: Streaming Docker Desktop Logs in macOS Terminal\nDESCRIPTION: This command streams live Docker Desktop logs in the macOS terminal. It filters logs related to Docker, vpnkit, and specific processes containing 'docker' in the event message.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ pred='process matches \".*(ocker|vpnkit).*\" || (process in {\"taskgated-helper\", \"launchservicesd\", \"kernel\"} && eventMessage contains[c] \"docker\")'\n$ /usr/bin/log stream --style syslog --level=debug --color=always --predicate \"$pred\"\n```\n\n----------------------------------------\n\nTITLE: Stream Command Output from Backend Container\nDESCRIPTION: Demonstrates how to execute a command in the backend container while streaming its output, including stdout, stderr, and exit code handling.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/backend.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.extension.vm.cli.exec(\"ls\", [\"-l\"], {\n  stream: {\n    onOutput(data) {\n      if (data.stdout) {\n        console.error(data.stdout);\n      } else {\n        console.log(data.stderr);\n      }\n    },\n    onError(error) {\n      console.error(error);\n    },\n    onClose(exitCode) {\n      console.log(\"onClose with exit code \" + exitCode);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Docker Extension Build and Install Commands\nDESCRIPTION: CLI commands for building and installing the Docker Desktop extension using Docker CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/frontend-extension-tutorial.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --tag=awesome-inc/my-extension:latest .\ndocker extension install awesome-inc/my-extension:latest\n```\n\n----------------------------------------\n\nTITLE: Listing a Docker container with a custom name\nDESCRIPTION: Shows the docker ps output for a container with a custom name 'web', displaying its container ID, image, ports, and status.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ docker ps -l\n\nCONTAINER ID  IMAGE                  COMMAND        CREATED       STATUS       PORTS                    NAMES\naed84ee21bde  training/webapp:latest python app.py  12 hours ago  Up 2 seconds 0.0.0.0:49154->5000/tcp  web\n```\n\n----------------------------------------\n\nTITLE: JSON Output of a Remote Bake Definition\nDESCRIPTION: JSON representation of a Bake definition that uses a remote Git repository as its context. It defines a default group that targets the 'binary' build with specific arguments and output configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\"binary\"]\n    }\n  },\n  \"target\": {\n    \"binary\": {\n      \"context\": \"https://github.com/docker/cli.git#v20.10.11\",\n      \"dockerfile\": \"Dockerfile\",\n      \"args\": {\n        \"BASE_VARIANT\": \"alpine\",\n        \"GO_STRIP\": \"\",\n        \"VERSION\": \"\"\n      },\n      \"target\": \"binary\",\n      \"platforms\": [\"local\"],\n      \"output\": [\"build\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Spring Boot API with cURL\nDESCRIPTION: Command to verify the Spring Boot application is running correctly by making an HTTP request to the exposed endpoint.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ curl localhost:8080\nHello World\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple MCP Servers (Fetch and Filesystem) in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up multiple MCP servers (fetch and filesystem) for Gordon, enabling both internet access and filesystem operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/yaml.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  fetch:\n    image: mcp/fetch\n  fs:\n    image: mcp/filesystem\n    command:\n      - /rootfs\n    volumes:\n      - .:/rootfs\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Watch Mode\nDESCRIPTION: Use the 'docker compose up --watch' command to start the Compose project and enable file watch mode.\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/compose/configure-watch.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up --watch\n```\n\n----------------------------------------\n\nTITLE: Making HTTP DELETE Request with Docker Extension API\nDESCRIPTION: Illustrates how to perform an HTTP DELETE request to a backend service using the Docker Extension API. This method is marked for deprecation in favor of the 'delete' method from HttpService.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/BackendV0.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.backend\n .delete(\"/some/service\")\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Pulling a Docker Image with Go SDK\nDESCRIPTION: Example of pulling a Docker image using the Docker Go SDK. This code pulls the Alpine image and outputs the progress to stdout, similar to 'docker pull alpine'.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_10\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/docker/docker/api/types/image\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tcli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer cli.Close()\n\n\tout, err := cli.ImagePull(ctx, \"alpine\", image.PullOptions{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer out.Close()\n\n\tio.Copy(os.Stdout, out)\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Documentation Source Information\nDESCRIPTION: HTML comment explaining that the page is automatically generated from Docker's source code and providing guidance on how to suggest changes to the documentation through GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/manifest/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Filtering Docker Images by Reference\nDESCRIPTION: Shows how to filter Docker images to show only Alpine images using the reference filter. Includes both unfiltered and filtered output for comparison.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/filter.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker images\nREPOSITORY   TAG       IMAGE ID       CREATED          SIZE\nubuntu       20.04     33a5cc25d22c   36 minutes ago   101MB\nubuntu       18.04     152dc042452c   36 minutes ago   88.1MB\nalpine       3.16      a8cbb8c69ee7   40 minutes ago   8.67MB\nalpine       latest    7144f7bab3d4   40 minutes ago   11.7MB\nbusybox      uclibc    3e516f71d880   48 minutes ago   2.4MB\nbusybox      glibc     7338d0c72c65   48 minutes ago   6.09MB\n$ docker images --filter reference=alpine\nREPOSITORY   TAG       IMAGE ID       CREATED          SIZE\nalpine       3.16      a8cbb8c69ee7   40 minutes ago   8.67MB\nalpine       latest    7144f7bab3d4   40 minutes ago   11.7MB\n```\n\n----------------------------------------\n\nTITLE: Defining Registry Mirror in BuildKit TOML Configuration\nDESCRIPTION: Creates a TOML configuration file to define a registry mirror for docker.io, redirecting pulls to mirror.gcr.io. Enables debug logging to verify mirror usage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/configure.md#2025-04-11_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ndebug = true\n[registry.\"docker.io\"]\n  mirrors = [\"mirror.gcr.io\"]\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images using TypeScript\nDESCRIPTION: Shows how to fetch a list of local Docker images using the Docker extension API. This is the current recommended approach for accessing image information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/docker.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst images = await ddClient.docker.listImages();\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Text Summarization\nDESCRIPTION: Imports the Summarizer class from the summarizer package, which implements the BERT Extractive Summarizer for text summarization tasks.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom summarizer import Summarizer\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Image Import Documentation\nDESCRIPTION: YAML configuration block defining metadata for the Docker image import command documentation page. Specifies the data folder, file name, page title, URL aliases, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/image/import.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_image_import\ntitle: docker image import\naliases:\n- /edge/engine/reference/commandline/image_import/\n- /engine/reference/commandline/image_import/\n- /engine/reference/commandline/import/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Raw Format Example in Docker Splunk Logging\nDESCRIPTION: Example of the 'raw' format set with '--log-opt splunk-format=raw'. In this format, attributes (environment variables and labels) and tags are prefixed to the log message.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/splunk.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nMyImage/MyContainer env1=val1 label1=label1 my message\nMyImage/MyContainer env1=val1 label1=label1 {\"foo\": \"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Contexts on Linux\nDESCRIPTION: Command to view available Docker contexts on your machine. This shows which Docker endpoints are configured and which one is currently active (marked with an asterisk).\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker context ls\nNAME            DESCRIPTION                               DOCKER ENDPOINT                                  ...\ndefault *       Current DOCKER_HOST based configuration   unix:///var/run/docker.sock                      ...\ndesktop-linux                                             unix:///home/<user>/.docker/desktop/docker.sock  ...        \n```\n\n----------------------------------------\n\nTITLE: Cloning Sample GenAI App Repository\nDESCRIPTION: Command to clone the sample GenAI application repository for integration with Docker Model Runner.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/docker/hello-genai.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Documentation Page Settings in YAML\nDESCRIPTION: YAML front matter that configures a documentation page about Docker features and capabilities. It specifies the page should not be rendered directly, sets the page title to 'Features and capabilities', and assigns a weight of 30 for navigation ordering.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Features and capabilities\nweight: 30\n---\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Java Application CI/CD\nDESCRIPTION: YAML configuration for a GitHub Actions workflow that builds, tests, and pushes a Docker image for a Java application to Docker Hub. It includes steps for logging into Docker Hub, setting up Docker Buildx, and using multi-stage builds for testing and final image creation.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/configure-ci-cd.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and test\n        uses: docker/build-push-action@v6\n        with:\n          target: test\n          load: true\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          target: final\n          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Limit with Default Swap in Docker\nDESCRIPTION: Sets a 300MB memory limit for a Docker container without explicitly configuring swap, which defaults to double the memory limit (300MB memory + 300MB swap).\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it -m 300M ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Using Git Authentication with ADD in Dockerfile\nDESCRIPTION: Dockerfile example showing how to fetch a private Git repository using the ADD instruction, which will use the GIT_AUTH_TOKEN secret for authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nADD https://gitlab.com/example/todo-app.git /src\n```\n\n----------------------------------------\n\nTITLE: Creating a Symlink to Fix Docker Model Command\nDESCRIPTION: Command to create a symlink to the Docker Model Runner plugin to make it detectable by Docker CLI when it's not in the expected location.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ ln -s /Applications/Docker.app/Contents/Resources/cli-plugins/docker-model ~/.docker/cli-plugins/docker-model\n```\n\n----------------------------------------\n\nTITLE: Visualizing Registry and Repository Structure using ASCII Diagram\nDESCRIPTION: ASCII diagram showing the hierarchical relationship between a registry, repositories, and container images. Illustrates how a registry contains multiple repositories, each holding multiple versioned images.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-registry.md#2025-04-11_snippet_0\n\nLANGUAGE: goat\nCODE:\n```\n+---------------------------------------+\n|               Registry                |\n|---------------------------------------|\n|                                       |\n|    +-----------------------------+    |\n|    |        Repository A         |    |\n|    |-----------------------------|    |\n|    |   Image: project-a:v1.0     |    |\n|    |   Image: project-a:v2.0     |    |\n|    +-----------------------------+    |\n|                                       |\n|    +-----------------------------+    |\n|    |        Repository B         |    |\n|    |-----------------------------|    |\n|    |   Image: project-b:v1.0     |    |\n|    |   Image: project-b:v1.1     |    |\n|    |   Image: project-b:v2.0     |    |\n|    +-----------------------------+    |\n|                                       |\n+---------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Bake Build Configuration in JSON Format\nDESCRIPTION: JSON output showing the build configuration that Bake derives from the Compose file. It displays the default group with all targets and their respective build configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\n        \"vote\",\n        \"result\",\n        \"worker\",\n        \"seed\"\n      ]\n    }\n  },\n  \"target\": {\n    \"result\": {\n      \"context\": \"result\",\n      \"dockerfile\": \"Dockerfile\",\n    },\n    \"seed\": {\n      \"context\": \"seed-data\",\n      \"dockerfile\": \"Dockerfile\",\n    },\n    \"vote\": {\n      \"context\": \"vote\",\n      \"dockerfile\": \"Dockerfile\",\n      \"target\": \"dev\",\n    },\n    \"worker\": {\n      \"context\": \"worker\",\n      \"dockerfile\": \"Dockerfile\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging Docker Images for Organization Namespace\nDESCRIPTION: Commands to tag Docker images with an organization namespace. This prepares the image to be pushed to an organization repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/hub-images/move.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker tag namespace1/docker101tutorial <new_org>/docker101tutorial\n```\n\n----------------------------------------\n\nTITLE: Streaming Command Output from Docker Extension Backend Container\nDESCRIPTION: Example of spawning the 'ls -l' command inside a Docker extension's backend container with output streaming. This demonstrates how to handle streaming output, errors, and command completion using callback functions.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExtensionVM.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.extension.vm.cli.exec(\"ls\", [\"-l\"], {\n           stream: {\n             onOutput(data): void {\n                 // As we can receive both `stdout` and `stderr`, we wrap them in a JSON object\n                 JSON.stringify(\n                   {\n                     stdout: data.stdout,\n                     stderr: data.stderr,\n                   },\n                   null,\n                   \"  \"\n                 );\n             },\n             onError(error: any): void {\n               console.error(error);\n             },\n             onClose(exitCode: number): void {\n               console.log(\"onClose with exit code \" + exitCode);\n             },\n           },\n         });\n```\n\n----------------------------------------\n\nTITLE: Initializing Private Marketplace Configuration\nDESCRIPTION: OS-specific commands to initialize the marketplace configuration files using extension-admin tool\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/private-marketplace.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ /Applications/Docker.app/Contents/Resources/bin/extension-admin init\n```\n\nLANGUAGE: console\nCODE:\n```\n$ C:\\Program Files\\Docker\\Docker\\resources\\bin\\extension-admin init\n```\n\nLANGUAGE: console\nCODE:\n```\n$ /opt/docker-desktop/extension-admin init\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker CLI Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker node promote command documentation page, including data folder location, file name, page title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/node/promote.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_node_promote\ntitle: docker node promote\naliases:\n- /edge/engine/reference/commandline/node_promote/\n- /engine/reference/commandline/node_promote/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Overriding Postgres Container Command with Bash\nDESCRIPTION: This console command demonstrates how to run an interactive bash shell in a Postgres container instead of starting the database server. It overrides the default command and uses the container's entrypoint script to execute bash instead.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -it postgres bash\n```\n\n----------------------------------------\n\nTITLE: Attaching to a Running Docker Container\nDESCRIPTION: This command attaches to the running alpine1 container, connecting to its interactive shell session. The prompt changes to # to indicate root user access inside the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker attach alpine1\n\n/ #\n```\n\n----------------------------------------\n\nTITLE: Basic Node.js Dockerfile\nDESCRIPTION: Initial Dockerfile for building a Node.js application. It sets up a Node.js Alpine environment, copies all files at once, installs dependencies, and exposes port 3000 for the application.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/using-the-build-cache.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:20-alpine\nWORKDIR /app\nCOPY . .\nRUN yarn install --production\nEXPOSE 3000\nCMD [\"node\", \"./src/index.js\"]\n```\n\n----------------------------------------\n\nTITLE: Release Date Template Definition in Markdown\nDESCRIPTION: A Hugo shortcode template for displaying release dates in the documentation. This appears to be a custom Hugo template tag that inserts a formatted release date.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n{{< release-date date=\"2021-10-12\" >}}\n```\n\n----------------------------------------\n\nTITLE: Adding Watch Sections in Docker Compose YAML\nDESCRIPTION: Add 'watch' sections to one or more services in the compose.yaml file to enable file watching for those services.\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/compose/configure-watch.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ... other service configuration ...\n    watch:\n      # Define watch paths and rebuild options here\n```\n\n----------------------------------------\n\nTITLE: Redirecting Nginx Logs to STDOUT/STDERR in Dockerfile\nDESCRIPTION: This snippet shows the approach used in the official Nginx Docker image to redirect access and error logs to standard output and error streams. It creates symbolic links from the log files to the appropriate device files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nRUN ln -sf /dev/stdout /var/log/nginx/access.log \\\n    && ln -sf /dev/stderr /var/log/nginx/error.log\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Docker Engine\nDESCRIPTION: Commands to completely remove Docker Engine and its components from Ubuntu\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\n$ sudo rm -rf /var/lib/docker\n$ sudo rm -rf /var/lib/containerd\n$ sudo rm /etc/apt/sources.list.d/docker.list\n$ sudo rm /etc/apt/keyrings/docker.asc\n```\n\n----------------------------------------\n\nTITLE: Include Short Syntax (YAML)\nDESCRIPTION: Demonstrates the short syntax for including other Compose files, where paths to other Compose files are specified directly and services from included files can be referenced.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/include.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n  - ../commons/compose.yaml\n  - ../another_domain/compose.yaml\n\nservices:\n  webapp:\n    depends_on:\n      - included-service # defined by another_domain\n```\n\n----------------------------------------\n\nTITLE: Testing HTTPS Connection After Certificate Installation\nDESCRIPTION: This command tests whether the container can successfully make an HTTPS connection to example.com after installing the CA certificate, which would be necessary when using a MITM proxy.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/ca-certs.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n# curl https://example.com\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Container Stop Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the 'docker container stop' command documentation page. It specifies the data folder, file name, title, aliases, and layout for the CLI reference.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/stop.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_container_stop\ntitle: docker container stop\naliases:\n- /edge/engine/reference/commandline/container_stop/\n- /engine/reference/commandline/container_stop/\n- /engine/reference/commandline/stop/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Using the Join Function in Docker Command Output\nDESCRIPTION: The join function concatenates a list of strings with a specified separator. This example shows how to format docker inspect output by joining command arguments with commas.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker inspect --format '{{join .Args \" , \"}}' container\n```\n\n----------------------------------------\n\nTITLE: Verifying Environment Variable Precedence in Docker Compose\nDESCRIPTION: This console command demonstrates how to run a Docker Compose service and check the value of an environment variable, confirming that the 'environment' attribute takes precedence over 'env_file'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/environment-variables/envvars-precedence.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run webapp env | grep NODE_ENV\nNODE_ENV=production\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Image via API\nDESCRIPTION: This snippet demonstrates how to create a Docker image by either pulling it from a registry or importing it. It includes the request format, example response, and details on query parameters and headers that can be used to customize the image creation process.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_38\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/images/create?fromImage=busybox&tag=latest HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\"status\": \"Pulling...\"}\n{\"status\": \"Pulling\", \"progress\": \"1 B/ 100 B\", \"progressDetail\": {\"current\": 1, \"total\": 100}}\n{\"error\": \"Invalid...\"}\n...\n```\n\n----------------------------------------\n\nTITLE: Ignoring PullOptions for Running Tasks in Swarm\nDESCRIPTION: Ignores PullOptions for running tasks in Docker Swarm mode.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.06.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Ignore PullOptions for running tasks [docker/swarmkit#2351](https://github.com/docker/swarmkit/pull/2351)\n```\n\n----------------------------------------\n\nTITLE: Local Cache Implementation with GitHub Actions\nDESCRIPTION: Configuration for using local cache with GitHub Actions, including a workaround for managing cache growth. This setup uses actions/cache for storing Docker layers locally.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/cache.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Cache Docker layers\n        uses: actions/cache@v4\n        with:\n          path: ${{ runner.temp }}/.buildx-cache\n          key: ${{ runner.os }}-buildx-${{ github.sha }}\n          restore-keys: |\n            ${{ runner.os }}-buildx-\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: user/app:latest\n          cache-from: type=local,src=${{ runner.temp }}/.buildx-cache\n          cache-to: type=local,dest=${{ runner.temp }}/.buildx-cache-new,mode=max\n\n      - name: Move cache\n        run: |\n          rm -rf ${{ runner.temp }}/.buildx-cache\n          mv ${{ runner.temp }}/.buildx-cache-new ${{ runner.temp }}/.buildx-cache\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Compose Stats Command Options in Markdown\nDESCRIPTION: This snippet presents a markdown table listing the options available for the 'docker compose stats' command. It includes option names, types, default values, and descriptions for each flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_stats.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name          | Type     | Default | Description                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n|:--------------|:---------|:--------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `-a`, `--all` | `bool`   |         | Show all containers (default shows just running)                                                                                                                                                                                                                                                                                                                                                                             |\n| `--dry-run`   | `bool`   |         | Execute command in dry run mode                                                                                                                                                                                                                                                                                                                                                                                              |\n| `--format`    | `string` |         | Format output using a custom template:<br>'table':            Print output in table format with column headers (default)<br>'table TEMPLATE':   Print output in table format using the given Go template<br>'json':             Print in JSON format<br>'TEMPLATE':         Print output using the given Go template.<br>Refer to https://docs.docker.com/engine/cli/formatting/ for more information about formatting output with templates |\n| `--no-stream` | `bool`   |         | Disable streaming stats and only pull the first result                                                                                                                                                                                                                                                                                                                                                                       |\n| `--no-trunc`  | `bool`   |         | Do not truncate output                                                                                                                                                                                                                                                                                                                                                                                       |\n```\n\n----------------------------------------\n\nTITLE: Release Date Template Syntax\nDESCRIPTION: Example of Go template syntax used to specify release dates in the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{{< release-date date=\"2022-07-29\" >}}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Source Code Reference\nDESCRIPTION: HTML comment providing information about the auto-generation of the page content and instructions for suggesting changes through GitHub tickets or pull requests.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/service/update.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDX_MEM_PROFILE Environment Variable in Console\nDESCRIPTION: Configures memory profiling for Buildx, generating a pprof memory profile at the specified location. This is intended for Buildx development purposes rather than build performance analysis.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ export BUILDX_MEM_PROFILE=buildx_mem.prof\n```\n\n----------------------------------------\n\nTITLE: Setting Device IO Rate Limits in Docker\nDESCRIPTION: Examples demonstrating how to set read/write rate limits for devices in bytes per second and IO operations per second.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --device-read-bps /dev/sda:1mb ubuntu\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --device-write-bps /dev/sda:1mb ubuntu\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --device-read-iops /dev/sda:1000 ubuntu\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --device-write-iops /dev/sda:1000 ubuntu\n```\n\n----------------------------------------\n\nTITLE: Configuring Max-Level Provenance Attestations in GitHub Workflow\nDESCRIPTION: GitHub Actions workflow that sets up Docker Buildx and builds/pushes an image with max-level provenance attestations. It includes steps for Docker Hub login, setting up Buildx, extracting metadata, and building with the provenance mode set to max.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/attestations.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\nenv:\n  IMAGE_NAME: user/app\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.IMAGE_NAME }}\n\n      - name: Build and push image\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          provenance: mode=max\n          tags: ${{ steps.meta.outputs.tags }}\n```\n\n----------------------------------------\n\nTITLE: Go Map Structure\nDESCRIPTION: Example of Go code showing complex map and interface structure definition\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nincoming := map[string]interface{}{\n    \"asdf\": 1,\n    \"qwer\": []interface{}{},\n    \"zxcv\": []interface{}{\n        map[string]interface{}{},\n        true,\n        int(1e9),\n        \"tyui\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Limit with Unlimited Swap in Docker\nDESCRIPTION: Configures a Docker container with a 300MB memory limit while disabling the swap memory limit, allowing unlimited swap usage if the host supports it.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it -m 300M --memory-swap -1 ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Cloning Docker Getting Started Repository\nDESCRIPTION: Clone the Docker getting-started-todo-app repository to your local machine using git.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/build-and-push-first-image.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/docker/getting-started-todo-app\n```\n\n----------------------------------------\n\nTITLE: Configuring deployment modes in Compose\nDESCRIPTION: Illustrates different service replication modes available in Compose Deploy: global (one container per node), replicated-job (tasks that complete with exit code 0), and global-job (one task per node that completes with exit code 0).\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    deploy:\n      mode: global\n\n  batch-job:\n    image: example/processor\n    deploy:\n      mode: replicated-job\n      replicas: 5\n\n  maintenance:\n    image: example/updater\n    deploy:\n      mode: global-job\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Skip and Experimental Checks\nDESCRIPTION: Example showing the interaction between skip and experimental check directives in a Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/checks.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n# check=skip=all;experimental=all\n```\n\n----------------------------------------\n\nTITLE: Pushing a Tagged Docker Image to Docker Hub\nDESCRIPTION: An example of the docker push command that uploads a tagged image to a specified repository on Docker Hub. This command pushes the image with tag 'v1.0' to the 'my-namespace/my-repo' repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/hub-images/push.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker push my-namespace/my-repo:v1.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud Engine via CLI in Project Harmonia\nDESCRIPTION: This command creates a cloud engine named 'cloudengine' with a standard AMD64 architecture and immediately switches to using it. It demonstrates how to set up a cloud environment for Docker containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker harmonia engine create cloudengine --type \"standard-amd64\"  --use\n```\n\n----------------------------------------\n\nTITLE: Generating Private Marketplace Content\nDESCRIPTION: OS-specific commands to generate the marketplace content using extension-admin tool\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/private-marketplace.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ /Applications/Docker.app/Contents/Resources/bin/extension-admin generate\n```\n\nLANGUAGE: console\nCODE:\n```\n$ C:\\Program Files\\Docker\\Docker\\resources\\bin\\extension-admin generate\n```\n\nLANGUAGE: console\nCODE:\n```\n$ /opt/docker-desktop/extension-admin generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes From in Fig YAML\nDESCRIPTION: Shows how to use the volumes_from option in a Fig YAML file to mount volumes from other services or containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes_from:\n - service_name\n - container_name\n```\n\n----------------------------------------\n\nTITLE: Adding SBOM Attestations in GitHub Workflow\nDESCRIPTION: GitHub Actions workflow that builds and pushes a Docker image with SBOM attestations. The workflow includes steps for Docker Hub authentication, Buildx setup, metadata extraction, and building with SBOM enabled using the docker/build-push-action.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/attestations.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\nenv:\n  IMAGE_NAME: user/app\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.IMAGE_NAME }}\n\n      - name: Build and push image\n        uses: docker/build-push-action@v6\n        with:\n          sbom: true\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n```\n\n----------------------------------------\n\nTITLE: Valid Dockerfile with Comments\nDESCRIPTION: Example showing correct usage of continuation lines with comments instead of empty lines.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/no-empty-continuation.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nEXPOSE \\\n# Port\n80\n```\n\n----------------------------------------\n\nTITLE: Single-Value Merging Example - Command Option\nDESCRIPTION: Example showing how single-value options like 'command' are replaced when merging Compose files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ...\n    command: python app.py\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ...\n    command: python otherapp.py\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ...\n    command: python otherapp.py\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop MSI Non-Interactively with Verbose Logging in PowerShell\nDESCRIPTION: Command to perform a silent installation of Docker Desktop MSI with verbose logging, useful for automated deployments with detailed logging.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /i \"DockerDesktop.msi\" /L*V \".\\msi.log\" /quiet\n```\n\n----------------------------------------\n\nTITLE: Exec Create API Request in Docker\nDESCRIPTION: HTTP request to create an exec instance in a running container, specifying parameters like TTY allocation, command to run, and privileges.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_55\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/exec HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"AttachStdin\": true,\n  \"AttachStdout\": true,\n  \"AttachStderr\": true,\n  \"Cmd\": [\"sh\"],\n  \"DetachKeys\": \"ctrl-p,ctrl-q\",\n  \"Privileged\": true,\n  \"Tty\": true,\n  \"User\": \"123:456\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Engine Service\nDESCRIPTION: This command enables Docker Engine to start automatically when the system boots and starts the Docker service immediately.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/rhel.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl enable --now docker\n```\n\n----------------------------------------\n\nTITLE: JSON Log Entry Format Example\nDESCRIPTION: Shows the structure of a single log entry as written by the json-file logging driver. Each entry contains the log message, stream identifier (stdout/stderr), and timestamp.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/json-file.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log\": \"Log line is here\\n\",\n  \"stream\": \"stdout\",\n  \"time\": \"2019-01-01T11:11:11.111111111Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Docker API Response for Container List\nDESCRIPTION: Example HTTP response from the Docker API endpoint for listing containers. The response includes detailed information about each container such as ID, name, image, state, network settings, and mount points.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n         {\n                 \"Id\": \"8dfafdbc3a40\",\n                 \"Names\":[\"/boring_feynman\"],\n                 \"Image\": \"ubuntu:latest\",\n                 \"ImageID\": \"d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\",\n                 \"Command\": \"echo 1\",\n                 \"Created\": 1367854155,\n                 \"State\": \"exited\",\n                 \"Status\": \"Exit 0\",\n                 \"Ports\": [{\"PrivatePort\": 2222, \"PublicPort\": 3333, \"Type\": \"tcp\"}],\n                 \"Labels\": {\n                         \"com.example.vendor\": \"Acme\",\n                         \"com.example.license\": \"GPL\",\n                         \"com.example.version\": \"1.0\"\n                 },\n                 \"SizeRw\": 12288,\n                 \"SizeRootFs\": 0,\n                 \"HostConfig\": {\n                         \"NetworkMode\": \"default\"\n                 },\n                 \"NetworkSettings\": {\n                         \"Networks\": {\n                                 \"bridge\": {\n                                          \"IPAMConfig\": null,\n                                          \"Links\": null,\n                                          \"Aliases\": null,\n                                          \"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\n                                          \"EndpointID\": \"2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f\",\n                                          \"Gateway\": \"172.17.0.1\",\n                                          \"IPAddress\": \"172.17.0.2\",\n                                          \"IPPrefixLen\": 16,\n                                          \"IPv6Gateway\": \"\",\n                                          \"GlobalIPv6Address\": \"\",\n                                          \"GlobalIPv6PrefixLen\": 0,\n                                          \"MacAddress\": \"02:42:ac:11:00:02\"\n                                  }\n                         }\n                 },\n                 \"Mounts\": [\n                         {\n                                  \"Name\": \"fac362...80535\",\n                                  \"Source\": \"/data\",\n                                  \"Destination\": \"/data\",\n                                  \"Driver\": \"local\",\n                                  \"Mode\": \"ro,Z\",\n                                  \"RW\": false,\n                                  \"Propagation\": \"\"\n                         }\n                 ]\n         },\n         {\n                 \"Id\": \"9cd87474be90\",\n                 \"Names\":[\"/coolName\"],\n                 \"Image\": \"ubuntu:latest\",\n                 \"ImageID\": \"d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\",\n                 \"Command\": \"echo 222222\",\n                 \"Created\": 1367854155,\n                 \"State\": \"exited\",\n                 \"Status\": \"Exit 0\",\n                 \"Ports\": [],\n                 \"Labels\": {},\n                 \"SizeRw\": 12288,\n                 \"SizeRootFs\": 0,\n                 \"HostConfig\": {\n                         \"NetworkMode\": \"default\"\n                 },\n                 \"NetworkSettings\": {\n                         \"Networks\": {\n                                 \"bridge\": {\n                                          \"IPAMConfig\": null,\n                                          \"Links\": null,\n                                          \"Aliases\": null,\n                                          \"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\n                                          \"EndpointID\": \"88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a\",\n                                          \"Gateway\": \"172.17.0.1\",\n                                          \"IPAddress\": \"172.17.0.8\",\n                                          \"IPPrefixLen\": 16,\n                                          \"IPv6Gateway\": \"\",\n                                          \"GlobalIPv6Address\": \"\",\n                                          \"GlobalIPv6PrefixLen\": 0,\n                                          \"MacAddress\": \"02:42:ac:11:00:08\"\n                                  }\n                         }\n                 },\n                 \"Mounts\": []\n         },\n         {\n                 \"Id\": \"3176a2479c92\",\n                 \"Names\":[\"/sleepy_dog\"],\n                 \"Image\": \"ubuntu:latest\",\n                 \"ImageID\": \"d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\",\n                 \"Command\": \"echo 3333333333333333\",\n                 \"Created\": 1367854154,\n                 \"State\": \"exited\",\n                 \"Status\": \"Exit 0\",\n                 \"Ports\":[],\n                 \"Labels\": {},\n                 \"SizeRw\":12288,\n                 \"SizeRootFs\":0,\n                 \"HostConfig\": {\n                         \"NetworkMode\": \"default\"\n                 },\n                 \"NetworkSettings\": {\n                         \"Networks\": {\n                                 \"bridge\": {\n                                          \"IPAMConfig\": null,\n                                          \"Links\": null,\n                                          \"Aliases\": null,\n                                          \"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\n                                          \"EndpointID\": \"8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d\",\n                                          \"Gateway\": \"172.17.0.1\",\n                                          \"IPAddress\": \"172.17.0.6\",\n                                          \"IPPrefixLen\": 16,\n                                          \"IPv6Gateway\": \"\",\n                                          \"GlobalIPv6Address\": \"\",\n                                          \"GlobalIPv6PrefixLen\": 0,\n                                          \"MacAddress\": \"02:42:ac:11:00:06\"\n                                  }\n                         }\n                 },\n                 \"Mounts\": []\n         },\n         {\n                 \"Id\": \"4cb07b47f9fb\",\n                 \"Names\":[\"/running_cat\"],\n                 \"Image\": \"ubuntu:latest\",\n                 \"ImageID\": \"d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82\",\n                 \"Command\": \"echo 444444444444444444444444444444444\",\n                 \"Created\": 1367854152,\n                 \"State\": \"exited\",\n                 \"Status\": \"Exit 0\",\n                 \"Ports\": [],\n                 \"Labels\": {},\n                 \"SizeRw\": 12288,\n                 \"SizeRootFs\": 0,\n                 \"HostConfig\": {\n                         \"NetworkMode\": \"default\"\n                 },\n                 \"NetworkSettings\": {\n                         \"Networks\": {\n                                 \"bridge\": {\n                                          \"IPAMConfig\": null,\n                                          \"Links\": null,\n                                          \"Aliases\": null,\n                                          \"NetworkID\": \"7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812\",\n                                          \"EndpointID\": \"d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9\",\n                                          \"Gateway\": \"172.17.0.1\",\n                                          \"IPAddress\": \"172.17.0.5\",\n                                          \"IPPrefixLen\": 16,\n                                          \"IPv6Gateway\": \"\",\n                                          \"GlobalIPv6Address\": \"\",\n                                          \"GlobalIPv6PrefixLen\": 0,\n                                          \"MacAddress\": \"02:42:ac:11:00:05\"\n                                  }\n                         }\n                 },\n                 \"Mounts\": []\n         }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Resources\nDESCRIPTION: This command removes all the Kubernetes resources defined in the YAML file from the cluster, effectively tearing down the application when it's no longer needed.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kube-deploy.md#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl delete -f bb.yaml\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Node LS Documentation Page\nDESCRIPTION: YAML front matter that configures the documentation page for the 'docker node ls' CLI command. It specifies the location of data files, page title, aliases for URL redirects, and the layout template to use.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/node/ls.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_node_ls\ntitle: docker node ls\naliases:\n- /edge/engine/reference/commandline/node_ls/\n- /engine/reference/commandline/node_ls/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Listing OverlayFS Directories\nDESCRIPTION: Command showing the layer directories in the overlay2 storage area\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/overlayfs-driver.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ ls -l /var/lib/docker/overlay2\n\ntotal 24\ndrwx------ 5 root root 4096 Jun 20 07:36 223c2864175491657d238e2664251df13b63adb8d050924fd1bfcdb278b866f7\ndrwx------ 3 root root 4096 Jun 20 07:36 3a36935c9df35472229c57f4a27105a136f5e4dbef0f87905b2e506e494e348b\ndrwx------ 5 root root 4096 Jun 20 07:36 4e9fa83caff3e8f4cc83693fa407a4a9fac9573deaf481506c102d484dd1e6a1\ndrwx------ 5 root root 4096 Jun 20 07:36 e8876a226237217ec61c4baf238a32992291d059fdac95ed6303bdff3f59cff5\ndrwx------ 5 root root 4096 Jun 20 07:36 eca1e4e1694283e001f200a667bb3cb40853cf2d1b12c29feda7422fed78afed\ndrwx------ 2 root root 4096 Jun 20 07:36 l\n```\n\n----------------------------------------\n\nTITLE: Inspecting namespaced Docker directories\nDESCRIPTION: Commands to view the namespaced directories created within /var/lib/docker/ when user namespace remapping is enabled, showing ownership and permissions of remapped container storage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/userns-remap.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ls -ld /var/lib/docker/231072.231072/\n\ndrwx------ 11 231072 231072 11 Jun 21 21:19 /var/lib/docker/231072.231072/\n\n$ sudo ls -l /var/lib/docker/231072.231072/\n\ntotal 14\ndrwx------ 5 231072 231072 5 Jun 21 21:19 aufs\ndrwx------ 3 231072 231072 3 Jun 21 21:21 containers\ndrwx------ 3 root   root   3 Jun 21 21:19 image\ndrwxr-x--- 3 root   root   3 Jun 21 21:19 network\ndrwx------ 4 root   root   4 Jun 21 21:19 plugins\ndrwx------ 2 root   root   2 Jun 21 21:19 swarm\ndrwx------ 2 231072 231072 2 Jun 21 21:21 tmp\ndrwx------ 2 root   root   2 Jun 21 21:19 trust\ndrwx------ 2 231072 231072 3 Jun 21 21:19 volumes\n```\n\n----------------------------------------\n\nTITLE: Markdown Report Generation\nDESCRIPTION: Shows generation of vulnerability report in markdown format with detailed package information\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves --format markdown alpine\n✓ Pulled\n✓ SBOM of image already cached, 19 packages indexed\n✗ Detected 1 vulnerable package with 3 vulnerabilities\n<h2>:mag: Vulnerabilities of <code>alpine</code></h2>\n\n<details open=\"true\"><summary>:package: Image Reference</strong> <code>alpine</code></summary>\n<table>\n<tr><td>digest</td><td><code>sha256:e3bd82196e98898cae9fe7fbfd6e2436530485974dc4fb3b7ddb69134eda2407</code></td><tr><tr><td>vulnerabilities</td><td><img alt=\"critical: 0\" src=\"https://img.shields.io/badge/critical-0-lightgrey\"/> <img alt=\"high: 0\" src=\"https://img.shields.io/badge/high-0-lightgrey\"/> <img alt=\"medium: 2\" src=\"https://img.shields.io/badge/medium-2-fbb552\"/> <img alt=\"low: 0\" src=\"https://img.shields.io/badge/low-0-lightgrey\"/> <img alt=\"unspecified: 1\" src=\"https://img.shields.io/badge/unspecified-1-lightgrey\"/></td></tr>\n<tr><td>platform</td><td>linux/arm64</td></tr>\n<tr><td>size</td><td>3.3 MB</td></tr>\n<tr><td>packages</td><td>19</td></tr>\n</table>\n</details></table>\n</details>\n...\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Target Stage in Docker Buildx Bake (HCL)\nDESCRIPTION: Demonstrates how to set the target build stage using the 'target' attribute.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_36\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  target = \"binaries\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Documentation Build Settings in YAML\nDESCRIPTION: YAML front matter configuration that sets build parameters for Docker team collaboration documentation. Specifies that the content should never be rendered automatically.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/team-collaboration/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Team collaboration\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning the GenAI Application Repository\nDESCRIPTION: Command to clone the sample GenAI application repository from GitHub to your local machine. This repository contains the necessary files to build and run the video transcription and chat bot.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-video-bot/index.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/Davidnet/docker-genai.git\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter that configures the documentation page metadata, including the data source folder, filename, title and layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/scout/push.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: scout-cli\ndatafile: docker_scout_push\ntitle: docker scout push\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container Without Memory Constraints\nDESCRIPTION: Launches a Docker container without specifying any memory constraints, allowing processes to use unlimited memory and swap memory as needed.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Executing PostgreSQL Command in Container\nDESCRIPTION: This command connects to the running PostgreSQL container's command line interface to interact with the database.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker exec -ti db psql -U postgres\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command with JSON File Logger Options\nDESCRIPTION: Command line example showing how to run a container with specific json-file logging options. Sets maximum log size to 10 megabytes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/json-file.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n      --log-driver json-file --log-opt max-size=10m \\\n      alpine echo hello world\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Service\nDESCRIPTION: Command to stop the Docker daemon using systemctl\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/overlayfs-driver.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl stop docker\n```\n\n----------------------------------------\n\nTITLE: Deploying Redis Service with Update Delay in Docker Swarm\nDESCRIPTION: Creates a Redis service with 3 replicas and a 10-second update delay between task updates. This command establishes the initial service with Redis 7.4.0 that will later be updated.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/rolling-update.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker service create \\\n  --replicas 3 \\\n  --name redis \\\n  --update-delay 10s \\\n  redis:7.4.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Memory Metrics from memory.stat in Linux Control Groups\nDESCRIPTION: This snippet shows the output of the memory.stat pseudo-file which contains memory usage metrics for processes within a cgroup. It includes various memory statistics such as cache, RSS, page faults, and swap usage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/runmetrics.md#2025-04-11_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncache 11492564992\nrss 1930993664\nmapped_file 306728960\npgpgin 406632648\npgpgout 403355412\nswap 0\npgfault 728281223\npgmajfault 1724\ninactive_anon 46608384\nactive_anon 1884520448\ninactive_file 7003344896\nactive_file 4489052160\nunevictable 32768\nhierarchical_memory_limit 9223372036854775807\nhierarchical_memsw_limit 9223372036854775807\ntotal_cache 11492564992\ntotal_rss 1930993664\ntotal_mapped_file 306728960\ntotal_pgpgin 406632648\ntotal_pgpgout 403355412\ntotal_swap 0\ntotal_pgfault 728281223\ntotal_pgmajfault 1724\ntotal_inactive_anon 46608384\ntotal_active_anon 1884520448\ntotal_inactive_file 7003344896\ntotal_active_file 4489052160\ntotal_unevictable 32768\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Watch Environment Variable\nDESCRIPTION: Environment variable setting to disable tar synchronizer for Docker Compose watch functionality\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSE_EXPERIMENTAL_WATCH_TAR=0\n```\n\n----------------------------------------\n\nTITLE: Stopping a Container in Project Harmonia\nDESCRIPTION: This command stops the running Nginx container in the cloud engine. It demonstrates how to manage container lifecycle in the cloud environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker kill cloudnginx\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDKIT_HOST for Remote Builder Configuration\nDESCRIPTION: Specifies the address of a BuildKit daemon to use as a remote builder. This example configures a remote builder using TCP.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport BUILDKIT_HOST=tcp://localhost:1234\ndocker buildx create --name=remote --driver=remote\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Variable Expression Evaluation\nDESCRIPTION: This shows the JSON output of a Bake file with expressions that have been evaluated based on variable values.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/expressions.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\"app\"]\n    }\n  },\n  \"target\": {\n    \"app\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile\",\n      \"args\": {\n        \"v1\": \"lower\",\n        \"v2\": \"yes\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Local Named Contexts in Bake File\nDESCRIPTION: HCL Bake definition showing how to use the 'cwd://' prefix to define local directories as named contexts within the Bake execution environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#2025-04-11_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  contexts = {\n    docs = \"cwd://src/docs/content\"\n  }\n  dockerfile = \"Dockerfile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Services\nDESCRIPTION: This console snippet shows how to stop services started with Docker Compose in detached mode using the 'docker compose stop' command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose stop\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker CLI Documentation\nDESCRIPTION: This YAML frontmatter defines metadata for the 'docker image ls' command documentation. It specifies the data folder, file name, title, aliases, and layout for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/image/ls.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_image_ls\ntitle: docker image ls\naliases:\n- /edge/engine/reference/commandline/image_ls/\n- /engine/reference/commandline/image_ls/\n- /engine/reference/commandline/images/\n- /reference/cli/docker/images/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Pruning Docker System Resources on Mac\nDESCRIPTION: Command to remove all stopped containers, unused networks, dangling images, and build cache to reclaim disk space.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/macfaqs.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker system prune\n```\n\n----------------------------------------\n\nTITLE: Indicating Build Hermeticity in SLSA Provenance\nDESCRIPTION: Example of the BuildKit-specific 'metadata.hermetic' extension field which indicates whether the build was hermetic (no network access). A Dockerfile build is hermetic if it has no RUN commands or uses the --network=none flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n    \"metadata\": {\n      \"https://mobyproject.org/buildkit@v1#hermetic\": true,\n      ...\n    },\n```\n\n----------------------------------------\n\nTITLE: Cloud Provider Extensions in Deploy Configuration\nDESCRIPTION: Shows how to use extensions for cloud-specific deployment configurations in services.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/extension.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  backend:\n    deploy:\n      placement:\n        x-aws-role: \"arn:aws:iam::XXXXXXXXXXXX:role/foo\"\n        x-aws-region: \"eu-west-3\"\n        x-azure-region: \"france-central\"\n```\n\n----------------------------------------\n\nTITLE: Configuring firewalld for Docker remote API access\nDESCRIPTION: XML configuration for firewalld to allow incoming and outgoing connections through the firewall for Docker remote API access. This example uses direct rules for the FORWARD chain.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/remote-access.md#2025-04-11_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<direct>\n  [ <rule ipv=\"ipv6\" table=\"filter\" chain=\"FORWARD_direct\" priority=\"0\"> -i zt0 -j ACCEPT </rule> ]\n  [ <rule ipv=\"ipv6\" table=\"filter\" chain=\"FORWARD_direct\" priority=\"0\"> -o zt0 -j ACCEPT </rule> ]\n</direct>\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Scout Environment Integration in Jenkins\nDESCRIPTION: A Jenkins pipeline stage that installs Docker Scout CLI, logs into Docker Hub using credentials, and then executes the environment command to associate an image with a specified environment. It uses shell commands within the Jenkins pipeline syntax.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/environment/cli.md#2025-04-11_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nstage('Analyze image') {\n    steps {\n        // Install Docker Scout\n        sh 'curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /usr/local/bin'\n        \n        // Log into Docker Hub\n        sh 'echo $DOCKER_SCOUT_HUB_PASSWORD | docker login -u $DOCKER_SCOUT_HUB_USER --password-stdin'\n\n        // Analyze and fail on critical or high vulnerabilities\n        sh 'docker-scout environment --org \"<MY_DOCKER_ORG>\" \"<ENVIRONMENT>\" $IMAGE_TAG\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Fig YAML\nDESCRIPTION: Demonstrates how to define environment variables in a Fig YAML configuration file, including resolving variables from the host environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  RACK_ENV: development\n  SESSION_SECRET:\n```\n\n----------------------------------------\n\nTITLE: Retrieving System-wide Information with Docker API\nDESCRIPTION: Example of using the GET /info endpoint to retrieve detailed system information from a Docker daemon, including architecture, container counts, driver information, and system configuration.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_46\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/info HTTP/1.1\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"Architecture\": \"x86_64\",\n    \"ClusterStore\": \"etcd://localhost:2379\",\n    \"CgroupDriver\": \"cgroupfs\",\n    \"Containers\": 11,\n    \"ContainersRunning\": 7,\n    \"ContainersStopped\": 3,\n    \"ContainersPaused\": 1,\n    \"CpuCfsPeriod\": true,\n    \"CpuCfsQuota\": true,\n    \"Debug\": false,\n    \"DockerRootDir\": \"/var/lib/docker\",\n    \"Driver\": \"btrfs\",\n    \"DriverStatus\": [[\"\"]],\n    \"ExperimentalBuild\": false,\n    \"HttpProxy\": \"http://test:test@localhost:8080\",\n    \"HttpsProxy\": \"https://test:test@localhost:8080\",\n    \"ID\": \"7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS\",\n    \"IPv4Forwarding\": true,\n    \"Images\": 16,\n    \"IndexServerAddress\": \"https://index.docker.io/v1/\",\n    \"InitPath\": \"/usr/bin/docker\",\n    \"InitSha1\": \"\",\n    \"KernelMemory\": true,\n    \"KernelVersion\": \"3.12.0-1-amd64\",\n    \"Labels\": [\n        \"storage=ssd\"\n    ],\n    \"MemTotal\": 2099236864,\n    \"MemoryLimit\": true,\n    \"NCPU\": 1,\n    \"NEventsListener\": 0,\n    \"NFd\": 11,\n    \"NGoroutines\": 21,\n    \"Name\": \"prod-server-42\",\n    \"NoProxy\": \"9.81.1.160\",\n    \"OomKillDisable\": true,\n    \"OSType\": \"linux\",\n    \"OperatingSystem\": \"Boot2Docker\",\n    \"Plugins\": {\n        \"Volume\": [\n            \"local\"\n        ],\n        \"Network\": [\n            \"null\",\n            \"host\",\n            \"bridge\"\n        ]\n    },\n    \"RegistryConfig\": {\n        \"IndexConfigs\": {\n            \"docker.io\": {\n                \"Mirrors\": null,\n                \"Name\": \"docker.io\",\n                \"Official\": true,\n                \"Secure\": true\n            }\n        },\n        \"InsecureRegistryCIDRs\": [\n            \"127.0.0.0/8\"\n        ]\n    },\n    \"SecurityOptions\": [\n        \"apparmor\",\n        \"seccomp\",\n        \"selinux\"\n    ],\n    \"ServerVersion\": \"1.9.0\",\n    \"SwapLimit\": false,\n    \"SystemStatus\": [[\"State\", \"Healthy\"]],\n    \"SystemTime\": \"2015-03-10T11:11:23.730591467-07:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Deployments and Services\nDESCRIPTION: These commands list the Kubernetes Deployments and Services to verify that the Ruby on Rails application has been successfully deployed and is accessible.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/deploy.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get deployments\n```\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get services\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Compose Files Example\nDESCRIPTION: A command-line example showing how to run a service named 'backup_db' using multiple compose configuration files, where the second file may override or extend settings from the first.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f compose.yaml -f compose.admin.yaml run backup_db\n```\n\n----------------------------------------\n\nTITLE: Running Docker Hello-World Container in Bash\nDESCRIPTION: Simple command to run the hello-world Docker container. This is a basic test to verify Docker installation and functionality.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/lists.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Scout Cache Disk Usage with docker scout cache df\nDESCRIPTION: This command displays the size and location of Docker Scout's temporary directory for generating SBOMs and cached SBOMs. The output shows image digests and their corresponding file sizes, helping users understand their Docker Scout disk usage.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cache_df.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cache df\nDocker Scout temporary directory to generate SBOMs is located at:\n   /var/folders/dw/d6h9w2sx6rv3lzwwgrnx7t5h0000gp/T/docker-scout\n   this path can be configured using the DOCKER_SCOUT_CACHE_DIR environment variable\n\n                               Image Digest                               │ Size\n──────────────────────────────────────────────────────────────────────────┼────────\n  sha256:c41ab5c992deb4fe7e5da09f67a8804a46bd0592bfdf0b1847dde0e0889d2bff │ 21 kB\n\nTotal: 21 kB\n\n\nDocker Scout cached SBOMs are located at:\n   /Users/user/.docker/scout/sbom\n\n                               Image Digest                               │ Size of SBOM\n──────────────────────────────────────────────────────────────────────────┼───────────────\n  sha256:02bb6f428431fbc2809c5d1b41eab5a68350194fb508869a33cb1af4444c9b11 │ 42 kB\n  sha256:03fc002fe4f370463a8f04d3a288cdffa861e462fc8b5be44ab62b296ad95183 │ 100 kB\n  sha256:088134dd33e4a2997480a1488a41c11abebda465da5cf7f305a0ecf8ed494329 │ 194 kB\n  sha256:0b80b2f17aff7ee5bfb135c69d0d6fe34070e89042b7aac73d1abcc79cfe6759 │ 852 kB\n  sha256:0c9e8abe31a5f17d84d5c85d3853d2f948a4f126421e89e68753591f1b6fedc5 │ 930 kB\n  sha256:0d49cae0723c8d310e413736b5e91e0c59b605ade2546f6e6ef8f1f3ddc76066 │ 510 kB\n  sha256:0ef04748d071c2e631bb3edce8f805cb5512e746b682c83fdae6d8c0b243280b │ 1.0 MB\n  sha256:13fd22925b638bb7d2131914bb8f8b0f5f582bee364aec682d9e7fe722bb486a │ 42 kB\n  sha256:174c41d4fbc7f63e1f2bb7d2f7837318050406f2f27e5073a84a84f18b48b883 │ 115 kB\n\nTotal: 4 MB\n```\n\n----------------------------------------\n\nTITLE: Using Host PID Namespace in Docker Run Command\nDESCRIPTION: Demonstrates the --pid=host flag to use the host's PID namespace within a container, allowing containerized debugging tools to access host processes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n--pid=host\n```\n\n----------------------------------------\n\nTITLE: ReadLogs Configuration Struct in Go\nDESCRIPTION: Golang struct definition for the ReadConfig object that specifies log reading options.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_logging.md#2025-04-11_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype ReadConfig struct {\n\tSince  time.Time\n\tTail   int\n\tFollow bool\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Unused Volumes\nDESCRIPTION: This command removes all volumes that aren't currently attached to any containers, helping clean up unused storage.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ docker volume prune\n```\n\n----------------------------------------\n\nTITLE: GitLab Container Scanning Pipeline with Docker Scout\nDESCRIPTION: Example GitLab CI/CD pipeline that builds a Docker image, scans it with Docker Scout, and generates a container scanning report in GitLab format.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/release-notes/cli.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndocker-build:\n# Use the official docker image.\nimage: docker:cli\nstage: build\nservices:\n  - docker:dind\nvariables:\n  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG\nbefore_script:\n  - docker login -u \"$CI_REGISTRY_USER\" -p \"$CI_REGISTRY_PASSWORD\" $CI_REGISTRY\n\n  # Install curl and the Docker Scout CLI\n  - |\n    apk add --update curl\n    curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --\n    apk del curl\n    rm -rf /var/cache/apk/*\n  # Login to Docker Hub required for Docker Scout CLI\n  - echo \"$DOCKER_HUB_PAT\" | docker login --username \"$DOCKER_HUB_USER\" --password-stdin\n\n# All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)\n# Default branch is also tagged with `latest`\nscript:\n  - docker buildx b --pull -t \"$DOCKER_IMAGE_NAME\" .\n  - docker scout cves \"$DOCKER_IMAGE_NAME\" --format gitlab --output gl-container-scanning-report.json\n  - docker push \"$DOCKER_IMAGE_NAME\"\n  - |\n    if [[ \"$CI_COMMIT_BRANCH\" == \"$CI_DEFAULT_BRANCH\" ]]; then\n      docker tag \"$DOCKER_IMAGE_NAME\" \"$CI_REGISTRY_IMAGE:latest\"\n      docker push \"$CI_REGISTRY_IMAGE:latest\"\n    fi\n# Run this job in a branch where a Dockerfile exists\nrules:\n  - if: $CI_COMMIT_BRANCH\n    exists:\n      - Dockerfile\nartifacts:\n  reports:\n    container_scanning: gl-container-scanning-report.json\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images with Python SDK\nDESCRIPTION: Shows how to list all Docker images using the Docker Python SDK. The code retrieves and prints the ID of each image on the system.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport docker\nclient = docker.from_env()\nfor image in client.images.list():\n  print(image.id)\n```\n\n----------------------------------------\n\nTITLE: Updated Compose Configuration for Development\nDESCRIPTION: Modified Docker Compose configuration targeting the development stage for the server service.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n      target: development\n      # ...\n```\n\n----------------------------------------\n\nTITLE: Locating Control Group Mounts\nDESCRIPTION: Use the 'grep' command to find where control groups are mounted on your system. This is useful for accessing cgroup metrics.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/runmetrics.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ grep cgroup /proc/mounts\n```\n\n----------------------------------------\n\nTITLE: Docker Compose File Reference\nDESCRIPTION: Example reference to the standard Docker Compose file that defines services, networks, volumes, and environment configurations for Docker Projects. The file is typically named compose.yml and is required for Docker Projects to understand application structure.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/projects/faq.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncompose.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Cloud Engine in Project Harmonia\nDESCRIPTION: This command creates a second cloud engine named 'cloudengine2'. It shows how to manage multiple cloud environments within Project Harmonia.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker harmonia engine create cloudengine2\n```\n\n----------------------------------------\n\nTITLE: Setting EXPERIMENTAL_BUILDKIT_SOURCE_POLICY Environment Variable\nDESCRIPTION: Specifies a BuildKit source policy file for creating reproducible builds with pinned dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport EXPERIMENTAL_BUILDKIT_SOURCE_POLICY=./policy.json\n```\n\n----------------------------------------\n\nTITLE: Example of Duplicate Context Transfer in Docker Bake\nDESCRIPTION: HCL configuration showing a Bake file with a group of targets that share the same context, resulting in duplicate context transfers during concurrent builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/contexts.md#2025-04-11_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"default\" {\n  targets = [\"target1\", \"target2\"]\n}\n\ntarget \"target1\" {\n  target = \"target1\"\n  context = \".\"\n}\n\ntarget \"target2\" {\n  target = \"target2\"\n  context = \".\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Docker Extension Validation Output\nDESCRIPTION: This shows the output message displayed when a Docker extension passes validation, confirming that the extension image is valid and ready to be shared or published.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/validate.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nThe extension image \"name-of-your-extension\" is valid\n```\n\n----------------------------------------\n\nTITLE: Creating Provenance Attestations with Docker Buildx\nDESCRIPTION: Command to create a provenance attestation using Docker Buildx. It uses the '--attest type=provenance' option to specify the attestation type and mode.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/slsa-provenance.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --tag <namespace>/<image>:<version> \\\n    --attest type=provenance,mode=[min,max] .\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata for Docker Container Create Documentation in YAML\nDESCRIPTION: YAML front matter that defines the metadata for the Docker container create command documentation page. It includes the data folder, data file name, title, aliases for different URLs, and the layout type.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/create.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_container_create\ntitle: docker container create\naliases:\n- /edge/engine/reference/commandline/container_create/\n- /engine/reference/commandline/container_create/\n- /engine/reference/commandline/create/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Correct Dockerfile Comment Format for Descriptions\nDESCRIPTION: This snippet demonstrates the correct format for descriptive comments in a Dockerfile, where comments describing ARG keys and stages immediately precede the respective commands.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-definition-description.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# base is a stage for compiling source\nFROM scratch AS base\n# VERSION This is the version number.\nARG VERSION=1\n```\n\n----------------------------------------\n\nTITLE: Verifying KVM Modules on Linux\nDESCRIPTION: Command to check if KVM kernel modules are enabled on the system, which is a prerequisite for running Docker Desktop on Linux with its virtualization capabilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/_index.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ lsmod | grep kvm\nkvm_amd               167936  0\nccp                   126976  1 kvm_amd\nkvm                  1089536  1 kvm_amd\nirqbypass              16384  1 kvm\n```\n\n----------------------------------------\n\nTITLE: Starting a Container with Bind Mount Using --mount Flag\nDESCRIPTION: Complete example of creating a container with a bind mount using the --mount flag, mounting the local target directory to /app in the container with an nginx image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -it \\\n  --name devtest \\\n  --mount type=bind,source=\"$(pwd)\"/target,target=/app \\\n  nginx:latest\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Docker Registry via API\nDESCRIPTION: POST endpoint to validate registry credentials and obtain an identity token for passwordless access.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_45\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/auth HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Accessing the Deno Application via Browser\nDESCRIPTION: The URL to access the deployed Deno application through the NodePort service, which maps port 30001 on the host to port 8000 in the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/deploy.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nhttp://localhost:30001/\n```\n\n----------------------------------------\n\nTITLE: Service Dependencies with Long Syntax\nDESCRIPTION: Example showing how to define service dependencies using the long syntax format with conditions and restart options.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: .\n    depends_on:\n      db:\n        condition: service_healthy\n        restart: true\n      redis:\n        condition: service_started\n  redis:\n    image: redis\n  db:\n    image: postgres\n```\n\n----------------------------------------\n\nTITLE: Enhanced Multi-stage PHP Dockerfile\nDESCRIPTION: Updated Dockerfile with multi-stage builds supporting both development and production environments, including separate dependency stages.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/develop.md#2025-04-11_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM composer:lts as prod-deps\nWORKDIR /app\nRUN --mount=type=bind,source=./composer.json,target=composer.json \\\n    --mount=type=bind,source=./composer.lock,target=composer.lock \\\n    --mount=type=cache,target=/tmp/cache \\\n    composer install --no-dev --no-interaction\n\nFROM composer:lts as dev-deps\nWORKDIR /app\nRUN --mount=type=bind,source=./composer.json,target=composer.json \\\n    --mount=type=bind,source=./composer.lock,target=composer.lock \\\n    --mount=type=cache,target=/tmp/cache \\\n    composer install --no-interaction\n\nFROM php:8.2-apache as base\nRUN docker-php-ext-install pdo pdo_mysql\nCOPY ./src /var/www/html\n\nFROM base as development\nCOPY ./tests /var/www/html/tests\nRUN mv \"$PHP_INI_DIR/php.ini-development\" \"$PHP_INI_DIR/php.ini\"\nCOPY --from=dev-deps app/vendor/ /var/www/html/vendor\n\nFROM base as final\nRUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"\nCOPY --from=prod-deps app/vendor/ /var/www/html/vendor\nUSER www-data\n```\n\n----------------------------------------\n\nTITLE: Multi-Node Builder Configuration with TLS Auth\nDESCRIPTION: Example of setting up multiple remote builder nodes with TLS authentication using environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/configure-builder.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  buildx:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          driver: remote\n          endpoint: tcp://oneprovider:1234\n          append: |\n            - endpoint: tcp://graviton2:1234\n              platforms: linux/arm64\n            - endpoint: tcp://linuxone:1234\n              platforms: linux/s390x\n        env:\n          BUILDER_NODE_0_AUTH_TLS_CACERT: ${{ secrets.ONEPROVIDER_CA }}\n          BUILDER_NODE_0_AUTH_TLS_CERT: ${{ secrets.ONEPROVIDER_CERT }}\n          BUILDER_NODE_0_AUTH_TLS_KEY: ${{ secrets.ONEPROVIDER_KEY }}\n          BUILDER_NODE_1_AUTH_TLS_CACERT: ${{ secrets.GRAVITON2_CA }}\n          BUILDER_NODE_1_AUTH_TLS_CERT: ${{ secrets.GRAVITON2_CERT }}\n          BUILDER_NODE_1_AUTH_TLS_KEY: ${{ secrets.GRAVITON2_KEY }}\n          BUILDER_NODE_2_AUTH_TLS_CACERT: ${{ secrets.LINUXONE_CA }}\n          BUILDER_NODE_2_AUTH_TLS_CERT: ${{ secrets.LINUXONE_CERT }}\n          BUILDER_NODE_2_AUTH_TLS_KEY: ${{ secrets.LINUXONE_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Remove Volume API Response in Docker\nDESCRIPTION: HTTP response from successfully removing a volume, returning a 204 No Content status.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_70\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for Docker API Reference Pages\nDESCRIPTION: YAML front matter configuration that sets up layouts and metadata for Docker API reference documentation. It specifies that this page should never be rendered directly, reverses the sidebar order, and establishes cascading layout rules for API version paths.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API reference by version\nbuild:\n  render: never\nsidebar:\n  reverse: true\ncascade:\n  - _target:\n      path: /reference/api/engine/version/v1.24\n    layout: default\n  - _target:\n      path: /reference/api/engine/version/**\n    description: Reference documentation and Swagger (OpenAPI) specification for the Docker Engine API.\n    layout: api\n---\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Docker Command Example\nDESCRIPTION: Example output of a docker pull command that has been denied by the authorization plugin, showing the error message returned to the client.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull centos\n<...>\ndocker: Error response from daemon: authorization denied by plugin PLUGIN_NAME: volumes are not allowed.\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request in Go\nDESCRIPTION: A Go code snippet showing how to make an HTTP GET request to fetch user data. This is used in the tab group example.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/tabs.md#2025-04-11_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nresp, err := http.Get(\"/users/1\")\n```\n\n----------------------------------------\n\nTITLE: Custom Ingress Template Example\nDESCRIPTION: Template showing how to create custom Kubernetes Ingress rules using service metadata\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/customize.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{{ $project := .name }}\n#! {{ $name }}-ingress.yaml\n# Generated code, do not edit\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: virtual-host-ingress\n  namespace: {{ $project }}\nspec:\n  rules:  \n{{ range $name, $service := .services }}\n{{ range index $service \"x-virtual-host\" }}\n  - host: ${{ . }}\n    http:\n      paths:\n      - path: \"/\"\n        backend:\n          service:\n            name: ${{ name }}\n            port:\n              number: 80  \n{{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Defining Allowed Extensions\nDESCRIPTION: Example of listing allowed extensions in the extensions.txt file\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/private-marketplace.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker/disk-usage-extension:0.2.8\n```\n\n----------------------------------------\n\nTITLE: Exec Inspect API Response in Docker\nDESCRIPTION: HTTP response containing detailed information about an exec command, including container ID, running status, and process configuration.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_62\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"CanRemove\": false,\n  \"ContainerID\": \"b53ee82b53a40c7dca428523e34f741f3abc51d9f297a14ff874bf761b995126\",\n  \"DetachKeys\": \"\",\n  \"ExitCode\": 2,\n  \"ID\": \"f33bbfb39f5b142420f4759b2348913bd4a8d1a6d7fd56499cb41a1bb91d7b3b\",\n  \"OpenStderr\": true,\n  \"OpenStdin\": true,\n  \"OpenStdout\": true,\n  \"ProcessConfig\": {\n    \"arguments\": [\n      \"-c\",\n      \"exit 2\"\n    ],\n    \"entrypoint\": \"sh\",\n    \"privileged\": false,\n    \"tty\": true,\n    \"user\": \"1000\"\n  },\n  \"Running\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Daemon with Authorization Plugins\nDESCRIPTION: Example of launching Docker daemon with multiple authorization plugins using the --authorization-plugin flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dockerd --authorization-plugin=plugin1 --authorization-plugin=plugin2,...\n```\n\n----------------------------------------\n\nTITLE: Running Container on 802.1Q Network\nDESCRIPTION: Launches an Alpine Linux container connected to the 802.1Q trunked macvlan network with detached mode and interactive TTY.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/macvlan.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -itd \\\n  --network my-8021q-macvlan-net \\\n  --name my-second-macvlan-alpine \\\n  alpine:latest \\\n  ash\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Scout Directory for Manual Installation (Linux)\nDESCRIPTION: Command to create a subdirectory under $HOME/.docker called scout for storing the Docker Scout CLI plugin binary on Linux.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/install.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p $HOME/.docker/scout\n```\n\n----------------------------------------\n\nTITLE: Deleting File Sync in Project Harmonia\nDESCRIPTION: This command removes a file sync session for a specific cloud engine and directory. It shows how to manage file synchronization settings in Project Harmonia.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker harmonia file-sync delete --engine cloudengine $PWD\n```\n\n----------------------------------------\n\nTITLE: Using JSON File with Docker Compose CLI\nDESCRIPTION: This command demonstrates how to use a JSON file instead of the default YAML format with Docker Compose. It specifies a JSON file named 'docker-compose.json' to be used with the 'up' command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/support-and-feedback/faq.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f docker-compose.json up\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration in .env File\nDESCRIPTION: An example .env file that defines environment variables that can be used in a Compose file. In this case, it sets the TAG variable to v1.1.0.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/compose-file.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# .env\nTAG=v1.1.0\n```\n\n----------------------------------------\n\nTITLE: Making HTTP HEAD Request with Docker Extension API\nDESCRIPTION: Demonstrates how to perform an HTTP HEAD request to a backend service using the Docker Extension API. This method is marked for deprecation in favor of the 'head' method from HttpService.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/BackendV0.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.backend\n .head(\"/some/service\")\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Hello World Binary Example\nDESCRIPTION: Console commands to create a new directory for the hello world binary example and navigate to it.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/export.md#2025-04-11_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\n$ mkdir hello-world-bin\n$ cd hello-world-bin\n```\n\n----------------------------------------\n\nTITLE: Disabling Docker Desktop Update Notifications\nDESCRIPTION: Command for disabling Docker Desktop update notifications. This prevents Docker Desktop from showing notifications when new versions are available.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/disable/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker desktop disable update-notification\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Working Directory in Docker Container\nDESCRIPTION: Example showing how to override the default working directory when running a Docker container. Uses the -w or --workdir flag to specify a custom directory path.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_44\n\nLANGUAGE: text\nCODE:\n```\n$ docker run --rm -w /my/workdir alpine pwd\n/my/workdir\n```\n\n----------------------------------------\n\nTITLE: Running Alpine Containers on Default Bridge Network\nDESCRIPTION: These commands start two detached, interactive Alpine containers with TTY enabled, connected to the default bridge network since no specific network is specified.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -dit --name alpine1 alpine ash\n\n$ docker run -dit --name alpine2 alpine ash\n```\n\n----------------------------------------\n\nTITLE: Docker Dev Create Command\nDESCRIPTION: Creates a new dev environment from a repository URL. Options allow for detached operation and automatic IDE opening.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/dev-cli.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker dev create [OPTIONS] REPOSITORY_URL\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Stage Naming in Dockerfile\nDESCRIPTION: This snippet demonstrates the correct way to name stages in a Dockerfile, using unique names for each stage to avoid conflicts and ensure proper resolution of stage name references.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/duplicate-stage-name.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian:latest AS deb-builder\nRUN apt-get update; apt-get install -y curl\n\nFROM golang:latest AS go-builder\n```\n\n----------------------------------------\n\nTITLE: Reloading systemd configuration\nDESCRIPTION: Command to reload the systemd configuration after modifying the Docker service file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/remote-access.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Valid CMD with HEALTHCHECK Example\nDESCRIPTION: Example showing correct usage of CMD instruction with a separate HEALTHCHECK CMD, which is allowed.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/multiple-instructions-disallowed.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:alpine\nRUN apk add curl\nHEALTHCHECK --interval=1s --timeout=3s \\\n  CMD [\"curl\", \"-f\", \"http://localhost:8080\"]\nCMD [\"python\", \"-m\", \"http.server\", \"8080\"]\n```\n\n----------------------------------------\n\nTITLE: Testing Connection to Container without Port Publishing\nDESCRIPTION: Attempt to connect to the containerized application on port 8080, which fails because the container's ports are not published to the host.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ curl http://localhost:8080/\ncurl: (7) Failed to connect to localhost port 8080: Connection refused\n```\n\n----------------------------------------\n\nTITLE: Setting up Docker Registry Service\nDESCRIPTION: Creates a Docker registry service on port 5000 for distributing images across the swarm\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/stack-deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name registry --publish published=5000,target=5000 registry:2\n```\n\n----------------------------------------\n\nTITLE: Running Background Container - Multiple Implementations\nDESCRIPTION: Shows how to run a container in detached mode using the 'bfirsh/reticulate-splines' image. Includes container creation and background execution without waiting for completion.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/docker/docker/api/types/container\"\n\t\"github.com/docker/docker/api/types/image\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tcli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer cli.Close()\n\n\timageName := \"bfirsh/reticulate-splines\"\n\n\tout, err := cli.ImagePull(ctx, imageName, image.PullOptions{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer out.Close()\n\tio.Copy(os.Stdout, out)\n\n\tresp, err := cli.ContainerCreate(ctx, &container.Config{\n\t\tImage: imageName,\n\t}, nil, nil, nil, \"\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := cli.ContainerStart(ctx, resp.ID, container.StartOptions{}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(resp.ID)\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport docker\nclient = docker.from_env()\ncontainer = client.containers.run(\"bfirsh/reticulate-splines\", detach=True)\nprint(container.id)\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --unix-socket /var/run/docker.sock -H \"Content-Type: application/json\" \\\n  -d '{\"Image\": \"bfirsh/reticulate-splines\"}' \\\n  -X POST http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/create\ncurl --unix-socket /var/run/docker.sock -X POST http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/1c6594faf5/start\n```\n\n----------------------------------------\n\nTITLE: Docker Scout Version Command Output Example\nDESCRIPTION: This snippet shows an example output of the 'docker scout version' command. It displays a ASCII art logo of Docker Scout, followed by detailed version information including the version number, Go version, operating system, architecture, and git commit hash.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_version.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout version\n\n      ⢀⢀⢀             ⣀⣀⡤⣔⢖⣖⢽⢝\n   ⡠⡢⡣⡣⡣⡣⡣⡣⡢⡀    ⢀⣠⢴⡲⣫⡺⣜⢞⢮⡳⡵⡹⡅\n  ⡜⡜⡜⡜⡜⡜⠜⠈⠈        ⠁⠙⠮⣺⡪⡯⣺⡪⡯⣺ \n ⢘⢜⢜⢜⢜⠜               ⠈⠪⡳⡵⣹⡪⠇ \n ⠨⡪⡪⡪⠂    ⢀⡤⣖⢽⡹⣝⡝⣖⢤⡀    ⠘⢝⢮⡚       _____                 _   \n  ⠱⡱⠁    ⡴⡫⣞⢮⡳⣝⢮⡺⣪⡳⣝⢦    ⠘⡵⠁      / ____| Docker        | |  \n   ⠁    ⣸⢝⣕⢗⡵⣝⢮⡳⣝⢮⡺⣪⡳⣣    ⠁      | (___   ___ ___  _   _| |_ \n        ⣗⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⢮⡳            \\___ \\ / __/ _ \\| | | | __|\n   ⢀    ⢱⡳⡵⣹⡪⡳⣝⢮⡳⣝⢮⡳⡣⡏    ⡀       ____) | (_| (_) | |_| | |_ \n  ⢀⢾⠄    ⠫⣞⢮⡺⣝⢮⡳⣝⢮⡳⣝⠝    ⢠⢣⢂     |_____/ \\___\\___/ \\__,_|\\__|\n  ⡼⣕⢗⡄    ⠈⠓⠝⢮⡳⣝⠮⠳⠙     ⢠⢢⢣⢣  \n ⢰⡫⡮⡳⣝⢦⡀              ⢀⢔⢕⢕⢕⢕⠅ \n ⡯⣎⢯⡺⣪⡳⣝⢖⣄⣀        ⡀⡠⡢⡣⡣⡣⡣⡣⡃  \n⢸⢝⢮⡳⣝⢮⡺⣪⡳⠕⠗⠉⠁    ⠘⠜⡜⡜⡜⡜⡜⡜⠜⠈   \n⡯⡳⠳⠝⠊⠓⠉             ⠈⠈⠈⠈      \n\n\n\nversion: v1.0.9 (go1.21.3 - darwin/arm64)\ngit commit: 8bf95bf60d084af341f70e8263342f71b0a3cd16\n```\n\n----------------------------------------\n\nTITLE: Exec Start API Response in Docker\nDESCRIPTION: HTTP response when starting an exec instance, returning a raw stream of container output.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_58\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/vnd.docker.raw-stream\n\n{% raw %}\n{{ STREAM }}\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Streaming CLI Command Output in Docker Extension Host\nDESCRIPTION: Shows how to execute a command in the host while streaming its output. This example runs kubectl with the -h flag and handles stdout/stderr streams, errors, and process closure events.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExtensionHost.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.extension.host.cli.exec(\"kubectl\", [\"-h\"], {\n           stream: {\n             onOutput(data): void {\n                 // As we can receive both `stdout` and `stderr`, we wrap them in a JSON object\n                 JSON.stringify(\n                   {\n                     stdout: data.stdout,\n                     stderr: data.stderr,\n                   },\n                   null,\n                   \"  \"\n                 );\n             },\n             onError(error: any): void {\n               console.error(error);\n             },\n             onClose(exitCode: number): void {\n               console.log(\"onClose with exit code \" + exitCode);\n             },\n           },\n         });\n```\n\n----------------------------------------\n\nTITLE: Example Attestation Manifest in JSON\nDESCRIPTION: Example of an attestation manifest that contains an in-toto attestation with an SPDX document predicate. This demonstrates how attestations are structured within the manifest including media types and annotations.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n    \"digest\": \"sha256:a781560066f20ec9c28f2115a95a886e5e71c7c7aa9d8fd680678498b82f3ea3\",\n    \"size\": 123\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.in-toto+json\",\n      \"digest\": \"sha256:133ae3f9bcc385295b66c2d83b28c25a9f294ce20954d5cf922dda860429734a\",\n      \"size\": 1234,\n      \"annotations\": {\n        \"in-toto.io/predicate-type\": \"https://spdx.dev/Document\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Image Tags in Docker Buildx Bake (HCL)\nDESCRIPTION: Shows how to specify image names and tags for the build target using the 'tags' attribute.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_35\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  tags = [\n    \"org/repo:latest\",\n    \"myregistry.azurecr.io/team/image:v1\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Service Removal in Docker Swarm\nDESCRIPTION: Command to verify that a service has been removed from a Docker swarm. When a service no longer exists, the inspect command returns an error message indicating the service cannot be found.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/delete-service.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker service inspect helloworld\n[]\nStatus: Error: no such service: helloworld, Code: 1\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js Server\nDESCRIPTION: Command to start the Node.js server that will handle requests to the AccuWeather API.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Running the NLP Container Interactively\nDESCRIPTION: Command to run the 'basic-nlp' Docker image as an interactive container, executing the sentiment analysis Python script. The -it flags enable an interactive terminal session with the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/sentiment-analysis.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it basic-nlp 01_sentiment_analysis.py\n```\n\n----------------------------------------\n\nTITLE: Cloning the Text Summarization Repository\nDESCRIPTION: Command to clone the Docker-NLP repository containing the text summarization application and related NLP samples.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/harsh4870/Docker-NLP.git\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variable to Disable iptables Raw Table in Docker\nDESCRIPTION: Code showing the environment variable that can be set to allow Docker to run on systems where the Linux kernel doesn't support CONFIG_IP_NF_RAW, which disables rules in the iptables raw table but reduces security.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nDOCKER_INSECURE_NO_IPTABLES_RAW=1\n```\n\n----------------------------------------\n\nTITLE: Datadog Agent Status Output\nDESCRIPTION: Example output of the Datadog agent status command showing successful configuration of the OpenMetrics check for Docker Scout metrics.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/metrics-exporter.md#2025-04-11_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nopenmetrics (4.2.0)\n-------------------\n  Instance ID: openmetrics:scout-prometheus-exporter:6393910f4d92f7c2 [OK]\n  Configuration Source: file:/etc/datadog-agent/conf.d/openmetrics.d/conf.yaml\n  Total Runs: 1\n  Metric Samples: Last Run: 236, Total: 236\n  Events: Last Run: 0, Total: 0\n  Service Checks: Last Run: 1, Total: 1\n  Average Execution Time : 2.537s\n  Last Execution Date : 2024-05-08 10:41:07 UTC (1715164867000)\n  Last Successful Execution Date : 2024-05-08 10:41:07 UTC (1715164867000)\n```\n\n----------------------------------------\n\nTITLE: Deleting Cloud Engine in Project Harmonia\nDESCRIPTION: This command removes a specified cloud engine from Project Harmonia. It demonstrates how to clean up cloud resources when they are no longer needed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker harmonia engine delete <name-of-engine>\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Release Date Template\nDESCRIPTION: Template syntax used for specifying release dates in the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{{< release-date date=\"2022-12-20\" >}}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Swarm Init Documentation\nDESCRIPTION: YAML front matter that defines metadata for the 'docker swarm init' documentation page, including data folder and file paths, title, and URL aliases for various versions of the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/swarm/init.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_swarm_init\ntitle: docker swarm init\naliases:\n- /edge/engine/reference/commandline/swarm_init/\n- /engine/reference/commandline/swarm_init/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Error for Incorrectly Formatted Groups in Docker SSO\nDESCRIPTION: This error message indicates that groups assigned to users in the identity provider are not properly formatted according to Docker's required format of '<organization name>:<team name>'. When this occurs, directory groups are ignored and the user is placed in the default organization and team.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/troubleshoot/troubleshoot-sso.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSome of the groups assigned to the user are not formatted as '<organization name>:<team name>'. Directory groups will be ignored and user will be provisioned into the default organization and team.\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Source Code Reference\nDESCRIPTION: HTML comment that provides information about the auto-generation of the page from Docker's source code and instructions for contributing changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/context/export.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Set Constraints in Docker\nDESCRIPTION: Examples demonstrating how to restrict container processes to specific CPU cores using the --cpuset-cpus flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --cpuset-cpus=\"1,3\" ubuntu:24.04 /bin/bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --cpuset-cpus=\"0-2\" ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Docker Dev Check Command\nDESCRIPTION: Checks the status of Dev Environments with optional formatting options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/dev-cli.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker dev check [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Build Attestations with Buildx CLI\nDESCRIPTION: Command to build a Docker image with both SBOM and provenance attestations enabled. This ensures the final image has metadata about its contents and build process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --sbom=true --provenance=true .\n```\n\n----------------------------------------\n\nTITLE: Good Example: Using OCI Label for Author Information\nDESCRIPTION: The recommended approach for specifying author information in a Dockerfile using the OCI standard label 'org.opencontainers.image.authors'.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/maintainer-deprecated.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nLABEL org.opencontainers.image.authors=\"moby@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Running Named Container\nDESCRIPTION: Command to run a Rust container with a custom name for better identification and management.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/run-containers.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d -p 3001:8000 --name docker-rust-container docker-rust-image\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Logs with journalctl\nDESCRIPTION: Command to retrieve log messages for a specific container using the journalctl utility and filtering by container name.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/journald.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo journalctl CONTAINER_NAME=webserver\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Building and Pushing Docker Images\nDESCRIPTION: YAML configuration for a GitHub Actions workflow that logs into Docker Hub, sets up Docker Buildx, and builds and pushes a multi-architecture Docker image to Docker Hub on pushes to the main branch.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/configure-ci-cd.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKER_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      -\n        name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: ${{ vars.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Image via API\nDESCRIPTION: DELETE endpoint to remove a Docker image from the filesystem with optional force and noprune parameters.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_43\n\nLANGUAGE: http\nCODE:\n```\nDELETE /v1.24/images/test HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Updating a Swarm Configuration with Docker API\nDESCRIPTION: API request to update an existing Docker swarm configuration. Allows modifying orchestration parameters, Raft consensus settings, dispatcher configuration, and certificate authority settings.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_99\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/swarm/update HTTP/1.1\nContent-Length: 12345\n\n{\n  \"Name\": \"default\",\n  \"Orchestration\": {\n    \"TaskHistoryRetentionLimit\": 10\n  },\n  \"Raft\": {\n    \"SnapshotInterval\": 10000,\n    \"LogEntriesForSlowFollowers\": 500,\n    \"HeartbeatTick\": 1,\n    \"ElectionTick\": 3\n  },\n  \"Dispatcher\": {\n    \"HeartbeatPeriod\": 5000000000\n  },\n  \"CAConfig\": {\n    \"NodeCertExpiry\": 7776000000000000\n  },\n  \"JoinTokens\": {\n    \"Worker\": \"SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx\",\n    \"Manager\": \"SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Docker Scout Security Comparison in GitHub Actions\nDESCRIPTION: Additional workflow steps for running Docker Scout security comparison between pull request images and production images. Includes authentication and configuration for vulnerability scanning with severity filtering.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/ci/gha.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n      # You can skip this step if Docker Hub is your registry\n      # and you already authenticated before\n      - name: Authenticate to Docker\n        uses: docker/login-action@v3\n        with:\n          username: ${{ secrets.DOCKER_USER }}\n          password: ${{ secrets.DOCKER_PAT }}\n\n      # Compare the image built in the pull request with the one in production\n      - name: Docker Scout\n        id: docker-scout\n        if: ${{ github.event_name == 'pull_request' }}\n        uses: docker/scout-action@v1\n        with:\n          command: compare\n          image: ${{ steps.meta.outputs.tags }}\n          to-env: production\n          ignore-unchanged: true\n          only-severities: critical,high\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Network Configuration\nDESCRIPTION: This command inspects and displays detailed information about the 'my-network' overlay network, including its configuration, connected containers, and other network properties.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network inspect my-network\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings for Multiple Docker Daemons\nDESCRIPTION: This JSON snippet shows how to configure proxy settings for the default daemon and override settings for a specific daemon in the ~/.docker/config.json file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/proxy.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n \"proxies\": {\n   \"default\": {\n     \"httpProxy\": \"http://proxy.example.com:3128\",\n     \"httpsProxy\": \"https://proxy.example.com:3129\",\n     \"noProxy\": \"*.test.example.com,.example.org,127.0.0.0/8\"\n   },\n   \"tcp://docker-daemon1.example.com\": {\n     \"noProxy\": \"*.internal.example.net\"\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching to Container Example\nDESCRIPTION: HTTP request and response for attaching to a Docker container with specified parameters for logs and stream settings.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_32\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/16253994b7c4/attach?logs=1&stream=0&stdout=1 HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 101 UPGRADED\nContent-Type: application/vnd.docker.raw-stream\nConnection: Upgrade\nUpgrade: tcp\n```\n\n----------------------------------------\n\nTITLE: Supervisord Configuration for Log Management\nDESCRIPTION: Configuration file for supervisord that ensures process outputs are properly redirected to container logs. Sets up logging parameters for supervisor and managed applications.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/multi-service_container.md#2025-04-11_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[supervisord]\nnodaemon=true\nlogfile=/dev/null\nlogfile_maxbytes=0\n\n[program:app]\nstdout_logfile=/dev/fd/1\nstdout_logfile_maxbytes=0\nredirect_stderr=true\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate Permissions\nDESCRIPTION: Modifies permissions for certificate files to make them read-only, preventing accidental modification while allowing them to be readable.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ chmod -v 0444 ca.pem server-cert.pem cert.pem\n```\n\n----------------------------------------\n\nTITLE: Generating SPDX-formatted SBOM with Docker Scout CLI\nDESCRIPTION: Use the --format spdx flag with the docker scout sbom command to output the SBOM in SPDX format.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/view-create-sboms.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout sbom --format spdx [IMAGE]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Info Page YAML\nDESCRIPTION: YAML configuration that specifies the page title and build settings for the Docker info command documentation. Includes a sidebar redirect to the system info reference page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/info.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: docker info\nbuild:\n  render: never\nsidebar:\n  goto: /reference/cli/docker/system/info/\n---\n```\n\n----------------------------------------\n\nTITLE: Displaying Error for User Not Assigned to SSO Organization\nDESCRIPTION: This error message appears when a user attempts to authenticate via SSO but is not assigned to the organization in Docker. This typically occurs when Just-in-Time (JIT) provisioning is disabled and the user hasn't been manually invited to the organization.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/troubleshoot/troubleshoot-sso.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUser '$username' is not assigned to this SSO organization. Contact your administrator. TraceID: XXXXXXXXXXXXX\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Docker Documentation\nDESCRIPTION: This YAML front matter block configures metadata for a documentation page titled 'Metadata'. It sets the build render to 'never' and assigns a weight of 80 to determine the page's position in the navigation hierarchy.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Metadata\nweight: 80\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Scout Offline Mode via Environment Variable\nDESCRIPTION: Sets the DOCKER_SCOUT_OFFLINE environment variable to true, which prevents Docker Scout from making outbound requests to external systems when analyzing images. In offline mode, Docker Scout won't cross-reference external package repositories like npm or NuGet.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/configure-cli.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ export DOCKER_SCOUT_OFFLINE=true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Host User Namespace Flag Override\nDESCRIPTION: Shows how Enhanced Container Isolation ignores the --userns=host flag, enforcing user namespace isolation even when users attempt to disable it. The container still gets a proper user mapping (100000) despite the flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm --userns=host alpine\n/ # cat /proc/self/uid_map\n         0     100000      65536\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Tag Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker image tag command documentation page, including the data folder, file name, title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/image/tag.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_image_tag\ntitle: docker image tag\naliases:\n- /edge/engine/reference/commandline/image_tag/\n- /engine/reference/commandline/image_tag/\n- /engine/reference/commandline/tag/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Generic Resources in Docker Daemon\nDESCRIPTION: Example of configuring node-generic-resources in daemon.json to advertise NVIDIA GPUs in a Swarm cluster. This allows services requesting NVIDIA-GPU resources to be scheduled on nodes with available GPUs.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"node-generic-resources\": [\n    \"NVIDIA-GPU=UUID1\",\n    \"NVIDIA-GPU=UUID2\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Subordinate ID Mappings for Docker Desktop on Linux\nDESCRIPTION: Commands to create necessary entries in /etc/subuid and /etc/subgid files to enable file sharing between the host and Docker Desktop VM. These commands add the current user to the files with an ID range from 100000 to 165535 if entries don't already exist.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/linuxfaqs.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ grep \"$USER\" /etc/subuid >> /dev/null 2&>1 || (echo \"$USER:100000:65536\" | sudo tee -a /etc/subuid)\n$ grep \"$USER\" /etc/subgid >> /dev/null 2&>1 || (echo \"$USER:100000:65536\" | sudo tee -a /etc/subgid)\n```\n\n----------------------------------------\n\nTITLE: Using Named Contexts for Environment-Specific Configurations\nDESCRIPTION: Example demonstrating how to inject configuration files dynamically using named contexts. The build command specifies a 'config' context that points to a directory of configuration files, which are then copied into the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --build-context config=./configs/prod .\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM nginx:alpine\n\n# Use the \"config\" context for environment-specific configurations\nCOPY --from=config nginx.conf /etc/nginx/nginx.conf\n```\n\n----------------------------------------\n\nTITLE: Installing awscli-local Package\nDESCRIPTION: Command to install the awscli-local package for interacting with LocalStack.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ pip install awscli-local\n```\n\n----------------------------------------\n\nTITLE: Viewing the Current Unlock Key for a Docker Swarm\nDESCRIPTION: Demonstrates how to retrieve the current unlock key for a running swarm using the docker swarm unlock-key command, which is useful when a manager node needs to be unlocked.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm_manager_locking.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm unlock-key\n\nTo unlock a swarm manager after it restarts, run the `docker swarm unlock`\ncommand and provide the following key:\n\n    SWMKEY-1-8jDgbUNlJtUe5P/lcr9IXGVxqZpZUXPzd+qzcGp4ZYA\n\nPlease remember to store this key in a password manager, since without it you\nwill not be able to restart the manager.\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dockerfile Comment Format Example\nDESCRIPTION: This snippet demonstrates incorrect usage of comments in a Dockerfile, where non-descriptive comments immediately precede FROM and ARG instructions without proper separation.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-definition-description.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# a non-descriptive comment\nFROM scratch AS base\n\n# another non-descriptive comment\nARG VERSION=1\n```\n\n----------------------------------------\n\nTITLE: Cloning the TensorFlow.js Face Detection Sample Repository\nDESCRIPTION: Command to clone the sample TensorFlow.js face detection application repository from GitHub to your local machine.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/tensorflowjs.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/harsh4870/TensorJS-Face-Detection\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Manifest Documentation\nDESCRIPTION: YAML frontmatter configuration that defines metadata for the Docker manifest annotate command documentation page, including the data folder, file name, title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/manifest/annotate.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_manifest_annotate\ntitle: docker manifest annotate\naliases:\n- /edge/engine/reference/commandline/manifest_annotate/\n- /engine/reference/commandline/manifest_annotate/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Starting a Container in Docker API\nDESCRIPTION: API call to start a Docker container by its ID or name. Optional detachKeys parameter can override the key sequence for detaching a container.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/start HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Setting Base Python Image in Dockerfile\nDESCRIPTION: Specifies the base Python slim image for the container build.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.8-slim\n```\n\n----------------------------------------\n\nTITLE: Analyzing SPDX File using Docker Scout\nDESCRIPTION: Example demonstrating how to analyze an SPDX file generated from Alpine 3.16.1 image using syft and piping it to docker scout quickview.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_quickview.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$  syft -o spdx-json alpine:3.16.1 | docker scout quickview sbom://\n ✔ Loaded image                                                                                                                              alpine:3.16.1\n ✔ Parsed image                                                                    sha256:3d81c46cd8756ddb6db9ec36fa06a6fb71c287fb265232ba516739dc67a5f07d\n ✔ Cataloged contents                                                                     274a317d88b54f9e67799244a1250cad3fe7080f45249fa9167d1f871218d35f\n   ├── ✔ Packages                        [14 packages]\n   ├── ✔ File digests                    [75 files]\n   ├── ✔ File metadata                   [75 locations]\n   └── ✔ Executables                     [16 executables]\n\n  Target   │ <stdin>        │    1C     2H     8M     0L\n    digest │  274a317d88b5  │\n```\n\n----------------------------------------\n\nTITLE: Demo of Attribute Override When Merging Bake Files\nDESCRIPTION: Example showing how the `tags` attribute is overridden when both `compose.yaml` and `docker-bake.hcl` define it. In this case, the `docker-bake.hcl` definition takes precedence according to the lookup order.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cat compose.yaml\nservices:\n  webapp:\n    build:\n      context: .\n      tags:\n        - bar\n$ cat docker-bake.hcl\ntarget \"webapp\" {\n  tags = [\"foo\"]\n}\n$ docker buildx bake --print webapp\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\n        \"webapp\"\n      ]\n    }\n  },\n  \"target\": {\n    \"webapp\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile\",\n      \"tags\": [\n        \"foo\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Node from Docker Swarm\nDESCRIPTION: Demonstrates removing a node from the swarm's node list using the docker node rm command after it has left the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/manage-nodes.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker node rm node-2\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Container Builder with TLS\nDESCRIPTION: Command to create a Buildx builder that connects to a containerized BuildKit instance using TLS certificates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/remote.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create \\\n  --name remote-container \\\n  --driver remote \\\n  --driver-opt cacert=${PWD}/.certs/client/ca.pem,cert=${PWD}/.certs/client/cert.pem,key=${PWD}/.certs/client/key.pem,servername=<TLS_SERVER_NAME> \\\n  tcp://localhost:1234\n```\n\n----------------------------------------\n\nTITLE: Setting Target Platforms in Docker Buildx Bake (HCL)\nDESCRIPTION: Demonstrates how to specify target platforms for multi-architecture builds using the 'platforms' attribute.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_28\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  platforms = [\"linux/amd64\", \"linux/arm64\", \"linux/arm/v7\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Docker Binaries on Linux\nDESCRIPTION: Commands to extract Docker binary archive and copy executables to system path on Linux systems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/binaries.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ tar xzvf /path/to/<FILE>.tar.gz\n$ sudo cp docker/* /usr/bin/\n```\n\n----------------------------------------\n\nTITLE: Building Final Docker Image\nDESCRIPTION: This console command builds the final Docker image using the Dockerfile file. It tags the image as acme/my-final-image:1.0.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t acme/my-final-image:1.0 -f Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: OpenVEX JSON Document Format Example\nDESCRIPTION: This JSON example shows the structure of an OpenVEX document generated by the vexctl tool. It includes context information, document ID, author details, timestamp, version, and vulnerability statements with product information, status, and justification.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/create-exceptions-vex.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": \"https://openvex.dev/ns/v0.2.0\",\n  \"@id\": \"https://openvex.dev/docs/public/vex-749f79b50f5f2f0f07747c2de9f1239b37c2bda663579f87a35e5f0fdfc13de5\",\n  \"author\": \"author@example.com\",\n  \"timestamp\": \"2024-05-27T13:20:22.395824+02:00\",\n  \"version\": 1,\n  \"statements\": [\n    {\n      \"vulnerability\": {\n        \"name\": \"CVE-2022-24999\"\n      },\n      \"timestamp\": \"2024-05-27T13:20:22.395829+02:00\",\n      \"products\": [\n        {\n          \"@id\": \"pkg:docker/example/app@v1\",\n          \"subcomponents\": [\n            {\n              \"@id\": \"pkg:npm/express@4.17.1\"\n            }\n          ]\n        }\n      ],\n      \"status\": \"not_affected\",\n      \"justification\": \"vulnerable_code_not_in_execute_path\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Post-Start Lifecycle Hook Configuration\nDESCRIPTION: Configuration for post-start lifecycle hooks that run after container startup, including command execution and environment settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_63\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  test:\n    post_start:\n      - command: ./do_something_on_startup.sh\n        user: root\n        privileged: true\n        environment:\n          - FOO=BAR\n```\n\n----------------------------------------\n\nTITLE: Closing Exec Process in Docker Extension API (TypeScript)\nDESCRIPTION: Defines the 'close' method of the ExecProcess interface. This method is used to terminate a process that was started using exec(streamingOptions) in the Docker extension API.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExecProcess.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclose(): void\n```\n\n----------------------------------------\n\nTITLE: Defining AWS IAM Policy for CloudWatch Logs Access in JSON\nDESCRIPTION: This JSON snippet defines an AWS IAM policy that grants the necessary permissions for the awslogs driver to interact with CloudWatch Logs. It allows the actions to create log streams and put log events.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/awslogs.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\"logs:CreateLogStream\", \"logs:PutLogEvents\"],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Context with SSH Authentication\nDESCRIPTION: Creates a Docker context to connect to a remote Docker daemon using SSH authentication. This allows secure communication with a remote Docker engine.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker context create \\\n    --docker host=ssh://docker-user@host1.example.com \\\n    --description=\"Remote engine\" \\\n    my-remote-engine\n\nmy-remote-engine\nSuccessfully created context \"my-remote-engine\"\n```\n\n----------------------------------------\n\nTITLE: Attempting to Share PID Namespace with Linux VM\nDESCRIPTION: Demonstrates how Enhanced Container Isolation prevents containers from sharing the PID namespace with the host, which is a common isolation breach. The error message clearly explains why this operation is denied.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm --pid=host alpine\ndocker: Error response from daemon: failed to create shim task: OCI runtime create failed: error in the container spec: invalid or unsupported container spec: sysbox containers can't share namespaces [pid] with the host (because they use the linux user-namespace for isolation): unknown.\n```\n\n----------------------------------------\n\nTITLE: Using docker swarm update with Basic Options\nDESCRIPTION: Example of updating a Docker Swarm with basic configuration options including certificate expiry period, dispatcher heartbeat settings, and task timeout values.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/swarm/update.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm update --cert-expiry 72h --dispatcher-heartbeat 10s --task-history-limit 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Runc Drop-in Replacement in daemon.json\nDESCRIPTION: Configuration format for registering a runtime that can act as a drop-in replacement for runc. Specifies the path to the runtime binary and optional arguments.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtimes\": {\n    \"<runtime>\": {\n      \"path\": \"/path/to/binary\",\n      \"runtimeArgs\": [\"...args\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDX_NO_DEFAULT_ATTESTATIONS Environment Variable in Console\nDESCRIPTION: Disables the default provenance attestations that BuildKit v0.11 and later adds to built images. Set to 1 to prevent automatic addition of these attestations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ export BUILDX_NO_DEFAULT_ATTESTATIONS=1\n```\n\n----------------------------------------\n\nTITLE: Valid FROM Instruction with Defined ARG\nDESCRIPTION: Example of correct usage where VARIANT build argument is properly defined before use.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-arg-in-from.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG VARIANT=\"-alpine3.20\"\nFROM node:22${VARIANT} AS jsbuilder\n```\n\n----------------------------------------\n\nTITLE: Providing default value for ARG used in FROM instruction\nDESCRIPTION: This example shows a good practice of providing a default value for an ARG that is used in a FROM instruction, ensuring the build will succeed even without build arguments.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-default-arg-in-from.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG TAG=latest\nFROM busybox:${TAG}\n```\n\n----------------------------------------\n\nTITLE: Cloning Kafka Development Node Project\nDESCRIPTION: Clones a GitHub repository containing a Node.js project for Kafka development.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dockersamples/kafka-development-node.git\n```\n\n----------------------------------------\n\nTITLE: Checking Thin Pool Monitoring Status\nDESCRIPTION: Command to verify the monitoring status of the logical volume to ensure automatic extension will work.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo lvs -o+seg_monitor\n\nLV       VG     Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert Monitor\nthinpool docker twi-a-t--- 95.00g             0.00   0.01                             not monitored\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Deployment and Service for R Application\nDESCRIPTION: This YAML file defines a Kubernetes Deployment and NodePort Service for an R Shiny application. It specifies the container image, environment variables, and port configurations for the application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: docker-r-demo\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      service: shiny\n  template:\n    metadata:\n      labels:\n        service: shiny\n    spec:\n      containers:\n        - name: shiny-service\n          image: DOCKER_USERNAME/REPO_NAME\n          imagePullPolicy: Always\n          env:\n            - name: POSTGRES_PASSWORD\n              value: mysecretpassword\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: service-entrypoint\n  namespace: default\nspec:\n  type: NodePort\n  selector:\n    service: shiny\n  ports:\n    - port: 3838\n      targetPort: 3838\n      nodePort: 30001\n```\n\n----------------------------------------\n\nTITLE: Device Access Permission Control in Docker\nDESCRIPTION: Examples demonstrating different device access permissions (read, write, mknod) using the --device flag with permission modifiers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_34\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --device=/dev/sda:/dev/xvdc --rm -it ubuntu fdisk  /dev/xvdc\n\nCommand (m for help): q\n$ docker run --device=/dev/sda:/dev/xvdc:r --rm -it ubuntu fdisk  /dev/xvdc\nYou will not be able to write the partition table.\n\nCommand (m for help): q\n\n$ docker run --device=/dev/sda:/dev/xvdc:w --rm -it ubuntu fdisk  /dev/xvdc\n    crash....\n\n$ docker run --device=/dev/sda:/dev/xvdc:m --rm -it ubuntu fdisk  /dev/xvdc\nfdisk: unable to open /dev/xvdc: Operation not permitted\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Image Trust Information\nDESCRIPTION: Shows how to view trust data for a Docker image tag using the docker trust inspect command, displaying signatures, signers, and administrative keys.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/_index.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust inspect --pretty registry.example.com/admin/demo:1\n\nSignatures for registry.example.com/admin/demo:1\n\nSIGNED TAG          DIGEST                                                             SIGNERS\n1                   3d2e482b82608d153a374df3357c0291589a61cc194ec4a9ca2381073a17f58e   jeff\n\nList of signers and their keys for registry.example.com/admin/demo:1\n\nSIGNER              KEYS\njeff                8ae710e3ba82\n\nAdministrative keys for registry.example.com/admin/demo:1\n\n  Repository Key:\t10b5e94c916a0977471cc08fa56c1a5679819b2005ba6a257aa78ce76d3a1e27\n  Root Key:\t84ca6e4416416d78c4597e754f38517bea95ab427e5f95871f90d460573071fc\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Tables in Markdown for Docker Documentation\nDESCRIPTION: This snippet demonstrates how to create a basic table in Markdown, including text formatting such as bold and italic text, empty cells, and monospace code. The table shows different permission levels and their corresponding access rights.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/tables.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Permission level                                                         | Access                                                        |\n| :----------------------------------------------------------------------- | :------------------------------------------------------------ |\n| **Bold** or _italic_ within a table cell. Next cell is empty on purpose. |                                                               |\n|                                                                          | Previous cell is empty. A `--flag` in mono text.              |\n| Read                                                                     | Pull                                                          |\n| Read/Write                                                               | Pull, push                                                    |\n| Admin                                                                    | All of the above, plus update description, create, and delete |\n```\n\n----------------------------------------\n\nTITLE: Creating Global Service Bypassing Routing Mesh with Host Mode\nDESCRIPTION: Command to create a global DNS cache service that bypasses the routing mesh by using host mode networking, binding directly to port 53 UDP on each host where the service runs.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name dns-cache \\\n  --publish published=53,target=53,protocol=udp,mode=host \\\n  --mode global \\\n  dns-cache\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Packages Manually on Raspberry Pi OS\nDESCRIPTION: Installs Docker Engine and its components from downloaded .deb package files using dpkg. This method is useful when direct internet access to Docker repositories is not available.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dpkg -i ./containerd.io_<version>_<arch>.deb \\\n  ./docker-ce_<version>_<arch>.deb \\\n  ./docker-ce-cli_<version>_<arch>.deb \\\n  ./docker-buildx-plugin_<version>_<arch>.deb \\\n  ./docker-compose-plugin_<version>_<arch>.deb\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages for RHEL 8\nDESCRIPTION: Commands to enable CodeReady Linux Builder repository and install EPEL and pass package on RHEL 8\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/rhel.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo subscription-manager repos --enable codeready-builder-for-rhel-8-$(arch)-rpms\n$ sudo dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm\n$ sudo dnf install pass\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Hub SSO Navigation Variables with Go Templates\nDESCRIPTION: This code uses Go templating to define variables that change based on whether the user is accessing the standard Docker Hub or the Admin Console. It sets the appropriate product link and navigation instructions.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/shortcodes/admin-sso-management-orgs.md#2025-04-11_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{ $product_link := \"[Docker Hub](https://hub.docker.com)\" }}\n{{ $sso_navigation := \"Select **My Hub**, your organization, and then **Settings**.\" }}\n{{ if eq (.Get \"product\") \"admin\" }}\n  {{ $product_link = \"the [Admin Console](https://app.docker.com/admin)\" }}\n  {{ $sso_navigation = \"Select your company from the **Choose profile** page, and then select **SSO and SCIM**.\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Desktop Restart Documentation\nDESCRIPTION: YAML frontmatter defining the metadata and layout configuration for the Docker Desktop restart command documentation page. Specifies the data folder, data file name, page title and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/restart.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: desktop-cli\ndatafile: docker_desktop_restart\ntitle: docker desktop restart\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Creating UDP-only Service with Long Syntax\nDESCRIPTION: Command to create a DNS cache service that publishes only UDP port 53 using the long syntax format with protocol=udp parameter in Docker Swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name dns-cache \\\n  --publish published=53,target=53,protocol=udp \\\n  dns-cache\n```\n\n----------------------------------------\n\nTITLE: Showing All Policy Results in Docker Scout Comparison\nDESCRIPTION: Example of comparing two Docker images and displaying all policy results for both images.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndocker scout compare --to namespace/repo:latest namespace/repo:v1.2.3-pre\n```\n\n----------------------------------------\n\nTITLE: Configuring Volume Driver in Docker Compose\nDESCRIPTION: Example showing how to specify a custom volume driver for a volume named 'db-data'.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  db-data:\n    driver: foobar\n```\n\n----------------------------------------\n\nTITLE: Error Message Example for SSL Certificate Issues\nDESCRIPTION: Shows the common error message displayed when Docker encounters SSL certificate validation issues in a Zscaler-proxied environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/zscaler/index.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nx509: certificate signed by unknown authority\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Context Documentation\nDESCRIPTION: YAML frontmatter block defining metadata for the Docker context ls command documentation page, including folder structure, file name, page title, layout, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/context/ls.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_context_ls\ntitle: docker context ls\nlayout: cli\naliases:\n- /engine/reference/commandline/context_ls/\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Scout Documentation\nDESCRIPTION: YAML configuration block defining metadata for the Docker Scout repository enable command documentation page, including folder structure, file naming, and page layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/scout/repo/enable.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: scout-cli\ndatafile: docker_scout_repo_enable\naliases:\n- /engine/reference/commandline/scout_repo_enable\ntitle: docker scout repo enable\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Docker Go SDK Deprecated Image Type Aliases\nDESCRIPTION: List of deprecated aliases for Image types that have been removed from the Docker Go SDK.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n- ImageImportOptions\n- ImageCreateOptions\n- ImagePullOptions\n- ImagePushOptions\n- ImageListOptions\n- ImageRemoveOptions\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Java Docker Samples Page\nDESCRIPTION: This YAML block defines metadata for a documentation page about Java Docker samples. It specifies the title, description, service type, and aliases for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/java.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Java samples\ndescription: Docker samples for Java.\nservice: java\naliases:\n- /samples/java/\n---\n```\n\n----------------------------------------\n\nTITLE: BuildKit Parallelism Configuration\nDESCRIPTION: TOML configuration file for limiting BuildKit solver parallelism, useful for resource-constrained environments.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/configure.md#2025-04-11_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n# /etc/buildkitd.toml\n[worker.oci]\n  max-parallelism = 4\n```\n\n----------------------------------------\n\nTITLE: Build Output for Rust Docker Image\nDESCRIPTION: Detailed output of the Docker build process showing the multi-stage build steps, including dependencies installation and image layer creation for a Rust application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/build-images.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n[+] Building 62.6s (14/14) FINISHED\n => [internal] load .dockerignore                                                                                                    0.1s\n => => transferring context: 2B                                                                                                      0.0s\n => [internal] load build definition from Dockerfile                                                                                 0.1s\n => => transferring dockerfile: 2.70kB                                                                                               0.0s\n => resolve image config for docker.io/docker/dockerfile:1                                                                           2.3s\n => CACHED docker-image://docker.io/docker/dockerfile:1@sha256:39b85bbfa7536a5feceb7372a0817649ecb2724562a38360f4d6a7782a409b14      0.0s\n => [internal] load metadata for docker.io/library/debian:bullseye-slim                                                              1.9s\n => [internal] load metadata for docker.io/library/rust:1.70.0-slim-bullseye                                                         1.7s\n => [build 1/3] FROM docker.io/library/rust:1.70.0-slim-bullseye@sha256:585eeddab1ec712dade54381e115f676bba239b1c79198832ddda397c1f  0.0s\n => [internal] load build context                                                                                                    0.0s\n => => transferring context: 35.29kB                                                                                                 0.0s\n => [final 1/3] FROM docker.io/library/debian:bullseye-slim@sha256:7606bef5684b393434f06a50a3d1a09808fee5a0240d37da5d181b1b121e7637  0.0s\n => CACHED [build 2/3] WORKDIR /app                                                                                                  0.0s\n => [build 3/3] RUN --mount=type=bind,source=src,target=src     --mount=type=bind,source=Cargo.toml,target=Cargo.toml     --mount=  57.7s\n => CACHED [final 2/3] RUN adduser     --disabled-password     --gecos \"\"     --home \"/nonexistent\"     --shell \"/sbin/nologin\"      0.0s\n => CACHED [final 3/3] COPY --from=build /bin/server /bin/                                                                           0.0s\n => exporting to image                                                                                                               0.0s\n => => exporting layers                                                                                                              0.0s\n => => writing image sha256:f1aa4a9f58d2ecf73b0c2b7f28a6646d9849b32c3921e42adc3ab75e12a3de14                                         0.0s\n => => naming to docker.io/library/docker-rust-image\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Service Using the Default Latest Tag\nDESCRIPTION: Two equivalent commands for creating a Docker service named 'myservice' using the Ubuntu latest image. This demonstrates that omitting the tag defaults to using the 'latest' tag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name=\"myservice\" ubuntu\n\n$ docker service create --name=\"myservice\" ubuntu:latest\n```\n\n----------------------------------------\n\nTITLE: Correct FROM/AS Casing (Uppercase) in Dockerfile\nDESCRIPTION: Example showing correct usage where both 'FROM' and 'AS' keywords are uppercase, maintaining consistent casing.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-as-casing.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian:latest AS deb-builder\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Permissions in Dockerfile\nDESCRIPTION: Modifies the file permissions of entrypoint.sh to make it executable, ensuring the Docker container can run this script to start the application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_14\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN chmod +x /app/entrypoint.sh\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline Docker Build Cloud Integration\nDESCRIPTION: Jenkins pipeline configuration in Groovy for Docker Build Cloud integration. Sets up environment variables, installs Buildx, and provides build stages for both cache-only and push operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#2025-04-11_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\npipeline {\n  agent any\n\n  environment {\n    ARCH = 'amd64'\n    DOCKER_PAT = credentials('docker-personal-access-token')\n    DOCKER_USER = credentials('docker-username')\n    DOCKER_ORG = '<ORG>'\n    IMAGE_NAME = '<IMAGE>'\n  }\n\n  stages {\n    stage('Build') {\n      environment {\n        BUILDX_URL = sh (returnStdout: true, script: 'curl -s https://raw.githubusercontent.com/docker/actions-toolkit/main/.github/buildx-lab-releases.json | jq -r \".latest.assets[] | select(endswith(\\\"linux-$ARCH\\\"))\"').trim()\n      }\n      steps {\n        sh 'mkdir -vp ~/.docker/cli-plugins/'\n        sh 'curl --silent -L --output ~/.docker/cli-plugins/docker-buildx $BUILDX_URL'\n        sh 'chmod a+x ~/.docker/cli-plugins/docker-buildx'\n        sh 'echo \"$DOCKER_PAT\" | docker login --username $DOCKER_USER --password-stdin'\n        sh 'docker buildx create --use --driver cloud \"$DOCKER_ORG/default\"'\n        sh 'docker buildx build --platform linux/amd64,linux/arm64 --tag \"$IMAGE_NAME\" --output type=cacheonly .'\n        sh 'docker buildx build --platform linux/amd64,linux/arm64 --push --tag \"$IMAGE_NAME\" .'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the EBS Plugin\nDESCRIPTION: These shell commands demonstrate setting AWS credentials for the plugin, enabling it, creating an EBS volume, and verifying functionality by writing and reading data from the volume through Docker containers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/EBS_volume.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ docker plugin set tiborvass/rexray-plugin EBS_ACCESSKEY=$AWS_ACCESSKEY EBS_SECRETKEY=$AWS_SECRETKEY`\n$ docker plugin enable tiborvass/rexray-plugin\n$ docker volume create -d tiborvass/rexray-plugin my-ebs-volume\n$ docker volume ls\nDRIVER                              VOLUME NAME\ntiborvass/rexray-plugin:latest      my-ebs-volume\n$ docker run --rm -v my-ebs-volume:/volume busybox sh -c 'echo bye > /volume/hi'\n$ docker run --rm -v my-ebs-volume:/volume busybox cat /volume/hi\nbye\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Services with Bake Support in YAML\nDESCRIPTION: A sample Compose file showing how to define services with build configurations for Bake. It demonstrates using YAML anchors to share build configurations between services and the x-bake extension for multi-platform builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/compose-file.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# compose.yaml\nservices:\n  webapp-dev:\n    build: &build-dev\n      dockerfile: Dockerfile.webapp\n      tags:\n        - docker.io/username/webapp:latest\n      cache_from:\n        - docker.io/username/webapp:cache\n      cache_to:\n        - docker.io/username/webapp:cache\n\n  webapp-release:\n    build:\n      <<: *build-dev\n      x-bake:\n        platforms:\n          - linux/amd64\n          - linux/arm64\n\n  db:\n    image: docker.io/username/db\n    build:\n      dockerfile: Dockerfile.db\n```\n\n----------------------------------------\n\nTITLE: Spawning Command in VM Extension with Docker Extension API\nDESCRIPTION: Demonstrates how to spawn a command in the backend container and receive a stream of output. This method is marked for deprecation in future versions.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/BackendV0.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.spawnInVMExtension(\n  `cmd`,\n  [`arg1`, `arg2`],\n  (data: any, err: any) => {\n    console.log(data.stdout, data.stderr);\n    // Once the command exits we get the status code\n    if (data.code) {\n      console.log(data.code);\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Configuration with docker info\nDESCRIPTION: Command to verify that Docker is properly configured with the devicemapper storage driver and using the thin pool.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ docker info\n\nContainers: 0\n Running: 0\n Paused: 0\n Stopped: 0\nImages: 0\nServer Version: 17.03.1-ce\nStorage Driver: devicemapper\n Pool Name: docker-thinpool\n Pool Blocksize: 524.3 kB\n Base Device Size: 10.74 GB\n Backing Filesystem: xfs\n Data file:\n Metadata file:\n Data Space Used: 19.92 MB\n Data Space Total: 102 GB\n Data Space Available: 102 GB\n Metadata Space Used: 147.5 kB\n Metadata Space Total: 1.07 GB\n Metadata Space Available: 1.069 GB\n Thin Pool Minimum Free Space: 10.2 GB\n Udev Sync Supported: true\n Deferred Removal Enabled: true\n Deferred Deletion Enabled: true\n Deferred Deleted Device Count: 0\n Library Version: 1.02.135-RHEL7 (2016-11-16)\n<...>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Image Index Annotations with Buildx\nDESCRIPTION: This command uses docker buildx imagetools inspect to view annotations on an image index, showing annotations on both the index itself and on descriptors within the index.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/annotations.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx imagetools inspect <IMAGE> --raw\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.oci.image.index.v1+json\",\n  \"manifests\": [\n    {\n      \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n      \"digest\": \"sha256:d20246ef744b1d05a1dd69d0b3fa907db007c07f79fe3e68c17223439be9fefb\",\n      \"size\": 911,\n      \"annotations\": {\n        \"org.opencontainers.image.documentation\": \"https://foo.example/docs\",\n      },\n      \"platform\": {\n        \"architecture\": \"amd64\",\n        \"os\": \"linux\"\n      }\n    },\n  ],\n  \"annotations\": {\n    \"org.opencontainers.image.authors\": \"dvdksn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Docker Compose PS Output as JSON\nDESCRIPTION: Using the --format json option to output container information in JSON format, which is useful for programmatic processing of the results.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps --format json\n[{\"ID\":\"1553b0236cf4d2715845f053a4ee97042c4f9a2ef655731ee34f1f7940eaa41a\",\"Name\":\"example-bar-1\",\"Command\":\"/docker-entrypoint.sh nginx -g 'daemon off;'\",\"Project\":\"example\",\"Service\":\"bar\",\"State\":\"exited\",\"Health\":\"\",\"ExitCode\":0,\"Publishers\":null},{\"ID\":\"f02a4efaabb67416e1ff127d51c4b5578634a0ad5743bd65225ff7d1909a3fa0\",\"Name\":\"example-foo-1\",\"Command\":\"/docker-entrypoint.sh nginx -g 'daemon off;'\",\"Project\":\"example\",\"Service\":\"foo\",\"State\":\"running\",\"Health\":\"\",\"ExitCode\":0,\"Publishers\":[{\"URL\":\"0.0.0.0\",\"TargetPort\":80,\"PublishedPort\":8080,\"Protocol\":\"tcp\"}]}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Instances of Same Runtime Type in daemon.json\nDESCRIPTION: Example showing how to configure multiple runtimes using the same runtimeType but with different configurations. This allows having different configurations of the same runtime.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtimes\": {\n    \"gvisor-foo\": {\n      \"runtimeType\": \"io.containerd.runsc.v1\",\n      \"options\": {\n        \"TypeUrl\": \"io.containerd.runsc.v1.options\",\n        \"ConfigPath\": \"/etc/containerd/runsc-foo.toml\"\n      }\n    },\n    \"gvisor-bar\": {\n      \"runtimeType\": \"io.containerd.runsc.v1\",\n      \"options\": {\n        \"TypeUrl\": \"io.containerd.runsc.v1.options\",\n        \"ConfigPath\": \"/etc/containerd/runsc-bar.toml\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Scout Repository List Command Options\nDESCRIPTION: A markdown table showing the available options for the 'docker scout repo list' command, including filters for repositories by name, enabled/disabled status, registry type, and organization namespace.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_list.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name              | Type     | Default | Description                                                                |\n|:------------------|:---------|:--------|:---------------------------------------------------------------------------|\n| `--filter`        | `string` |         | Regular expression to filter repositories by name                          |\n| `--only-disabled` |          |         | Filter to disabled repositories only                                       |\n| `--only-enabled`  |          |         | Filter to enabled repositories only                                        |\n| `--only-registry` | `string` |         | Filter to a specific registry only:<br>- hub.docker.com<br>- ecr (AWS ECR) |\n| `--org`           | `string` |         | Namespace of the Docker organization                                       |\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Configuration for devicemapper\nDESCRIPTION: JSON configuration for /etc/docker/daemon.json to enable and configure the devicemapper storage driver with the thin pool and deferred options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"storage-driver\": \"devicemapper\",\n    \"storage-opts\": [\n    \"dm.thinpooldev=/dev/mapper/docker-thinpool\",\n    \"dm.use_deferred_removal=true\",\n    \"dm.use_deferred_deletion=true\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Docker Desktop Using Product Code in PowerShell\nDESCRIPTION: Command to uninstall Docker Desktop using its product code with verbose logging and silent execution, useful when the original MSI file is not available.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /x {10FC87E2-9145-4D7D-B493-2E99E8D8E103} /L*V \".\\msi.log\" /quiet\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Service and Network\nDESCRIPTION: Cleans up by removing the nginx service and overlay network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker service rm my-nginx\n\n$ docker network rm my-overlay\n```\n\n----------------------------------------\n\nTITLE: Docker Swarm Initialization Output\nDESCRIPTION: Example output when initializing Docker Swarm mode showing the join token.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/orchestration.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nSwarm initialized: current node (tjjggogqpnpj2phbfbz8jd5oq) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join --token SWMTKN-1-3e0hh0jd5t4yjg209f4g5qpowbsczfahv2dea9a1ay2l8787cf-2h4ly330d0j917ocvzw30j5x9 192.168.65.3:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Swarm Service with Custom Volume Driver\nDESCRIPTION: This command creates a service with a volume that uses a specific volume driver and options. If the volume doesn't exist, it will be created on-demand with the specified driver and options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_38\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --mount type=volume,src=<VOLUME-NAME>,dst=<CONTAINER-PATH>,volume-driver=<DRIVER>,volume-opt=<KEY0>=<VALUE0>,volume-opt=<KEY1>=<VALUE1>\n  --name myservice \\\n  <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name in Docker Compose YAML\nDESCRIPTION: This snippet demonstrates how to set the project name using the 'name' top-level element in a Docker Compose file. It also shows how to use the project name in a service command through variable interpolation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/version-and-name.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: myapp\n\nservices:\n  foo:\n    image: busybox\n    command: echo \"I'm running ${COMPOSE_PROJECT_NAME}\"\n```\n\n----------------------------------------\n\nTITLE: Defining MariaDB Documentation Frontmatter in YAML\nDESCRIPTION: This YAML frontmatter defines the metadata for a MariaDB samples documentation page in Docker. It specifies the title, description, service type, and URL aliases for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/mariadb.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: MariaDB samples\ndescription: Docker samples for MariaDB.\nservice: mariadb\naliases:\n- /samples/mariadb/\n---\n```\n\n----------------------------------------\n\nTITLE: Cleaning Docker Data After Uninstallation\nDESCRIPTION: Removes all Docker data directories including images, containers, and volumes. This should be done after uninstalling Docker packages if you want to completely remove all Docker-related data.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ sudo rm -rf /var/lib/docker\n$ sudo rm -rf /var/lib/containerd\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Source Code Reference\nDESCRIPTION: HTML comment that explains the page is automatically generated from Docker's source code and provides guidance on how to suggest changes to the documentation through GitHub tickets or pull requests.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/login.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Pod Logs Output\nDESCRIPTION: Example output from a running Kubernetes pod showing ping results.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/orchestration.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nPING 8.8.8.8 (8.8.8.8): 56 data bytes\n64 bytes from 8.8.8.8: seq=0 ttl=37 time=21.393 ms\n64 bytes from 8.8.8.8: seq=1 ttl=37 time=15.320 ms\n64 bytes from 8.8.8.8: seq=2 ttl=37 time=11.111 ms\n...\n```\n\n----------------------------------------\n\nTITLE: Fixing Docker Logs Hang for Non-Existent Containers\nDESCRIPTION: Prevents docker logs --no-stream from hanging when attempting to retrieve logs for containers that no longer exist.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.07.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* Prevent `docker logs --no-stream` from hanging due to non-existing containers [moby/moby#34004](https://github.com/moby/moby/pull/34004)\n```\n\n----------------------------------------\n\nTITLE: Allocating All Available GPUs to a Docker Container\nDESCRIPTION: Shorthand syntax for allocating all available GPU devices to a container by setting the gpus property to 'all'.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  model:\n    gpus: all\n```\n\n----------------------------------------\n\nTITLE: Exporting Local Filesystem\nDESCRIPTION: Commands for exporting build results to the local filesystem using the local exporter.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --output type=local,dest=<path/to/output> .\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Desktop Reset Command Syntax\nDESCRIPTION: Shows the basic syntax for the 'docker desktop reset' command, including its optional parameters for resetting specific components or performing a full reset.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/module/reset.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```console\n$ docker desktop reset [OPTIONS] [COMPONENT...]\n```\n```\n\n----------------------------------------\n\nTITLE: Correct Dockerfile with All Lowercase Instructions\nDESCRIPTION: An alternative properly formatted Dockerfile example using all lowercase for instruction keywords, which is less common but still acceptable for consistency.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/consistent-instruction-casing.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nfrom alpine\nrun echo hello > /greeting.txt\nentrypoint [\"cat\", \"/greeting.txt\"]\n```\n\n----------------------------------------\n\nTITLE: Cloning the Notary Repository\nDESCRIPTION: Command to clone the Notary repository from GitHub, which is the first step in deploying Notary Server.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/deploying_notary.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/theupdateframework/notary.git\n```\n\n----------------------------------------\n\nTITLE: Running Docker Scout Artifactory Agent in Backfill Mode\nDESCRIPTION: Command to run the Artifactory agent in backfill mode to analyze pre-existing images. This mode processes all images pushed between the specified time and when the agent starts, then exits.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/registry/artifactory.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n  --mount type=bind,src=/var/opt/artifactory-agent,target=/opt/artifactory-agent/data \\\n  docker/artifactory-agent:v1 --backfill-from=2022-04-10T10:00:00Z\n```\n\n----------------------------------------\n\nTITLE: Listing All Docker Containers (Running and Stopped)\nDESCRIPTION: List all containers using docker ps --all command to view both running and stopped containers, showing the complete history of containers on the system.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps --all\n\nCONTAINER ID   IMAGE            COMMAND                  CREATED              STATUS                      PORTS     NAMES\nd75e61fcad1e   docker-gs-ping   \"/docker-gs-ping\"        About a minute ago   Exited (2) 23 seconds ago             inspiring_ishizaka\nf65dbbb9a548   docker-gs-ping   \"/docker-gs-ping\"        3 minutes ago        Exited (2) 2 minutes ago              wizardly_joliot\naade1bf3d330   docker-gs-ping   \"/docker-gs-ping\"        3 minutes ago        Exited (2) 3 minutes ago              magical_carson\n52d5ce3c15f0   docker-gs-ping   \"/docker-gs-ping\"        9 minutes ago        Exited (2) 3 minutes ago              gifted_mestorf\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Source in SLSA Provenance\nDESCRIPTION: Example of the 'invocation.configSource' field which describes the configuration that initialized the build, including the source repository, commit hash, and entry point. This is included in both min and max attestation modes.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n    \"invocation\": {\n      \"configSource\": {\n        \"uri\": \"https://github.com/moby/buildkit.git#refs/tags/v0.11.0\",\n        \"digest\": {\n          \"sha1\": \"4b220de5058abfd01ff619c9d2ff6b09a049bea0\"\n        },\n        \"entryPoint\": \"Dockerfile\"\n      },\n      ...\n    },\n```\n\n----------------------------------------\n\nTITLE: Updating GRUB Configuration\nDESCRIPTION: Command to update the GRUB boot loader after changing the configuration, required for the cgroup memory and swap accounting changes to take effect on system reboot.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo update-grub\n```\n\n----------------------------------------\n\nTITLE: GitHub Cache API Implementation\nDESCRIPTION: Configuration for using GitHub Actions cache exporter backend with the GitHub Cache service API. This setup is specific to GitHub Action workflows and requires proper workflow context.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/cache.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      \n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: user/app:latest\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n```\n\n----------------------------------------\n\nTITLE: Connecting a Container to a Network with HTTP POST Request\nDESCRIPTION: Shows how to connect a container to a network with specific IP address configurations for both IPv4 and IPv6. This enables fine-grained control over container networking.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_77\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/networks/22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30/connect HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Container\":\"3613f73ba0e4\",\n  \"EndpointConfig\": {\n    \"IPAMConfig\": {\n        \"IPv4Address\":\"172.24.56.89\",\n        \"IPv6Address\":\"2001:db8::5689\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Dockerfile from Max Mode Provenance\nDESCRIPTION: Command to extract the full source code of the Dockerfile used to build the image from a provenance attestation generated with 'mode=max'. It uses a complex Go template expression with 'docker buildx imagetools inspect'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/slsa-provenance.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx imagetools inspect <namespace>/<image>:<version> \\\n    --format '{{ range (index .Provenance.SLSA.metadata \"https://mobyproject.org/buildkit@v1#metadata\").source.infos }}{{ if eq .filename \"Dockerfile\" }}{{ .data }}{{ end }}{{ end }}' | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Failed Systemctl User Command\nDESCRIPTION: Shows the error when attempting to start Docker daemon without proper user session.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ systemctl --user start docker\nFailed to connect to bus: No such file or directory\n```\n\n----------------------------------------\n\nTITLE: IPVlan Network Error in Docker Daemon\nDESCRIPTION: This snippet demonstrates an error that prevents the Docker daemon from starting when ipvlan networks exist after upgrading to the 23.0 branch. The error is due to a panic in the ipvlan driver configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/23.0.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\npanic: interface conversion: interface {} is nil, not string\n\ngoroutine 1 [running]:\ngithub.com/docker/docker/libnetwork/drivers/ipvlan.(*configuration).UnmarshalJSON(0x40011533b0, {0x400069c2d0, 0xef, 0xef})\n        /go/src/github.com/docker/docker/libnetwork/drivers/ipvlan/ipvlan_store.go:196 +0x414\nencoding/json.(*decodeState).object(0x4001153440, {0x5597157640?, 0x40011533b0?, 0x559524115c?})\n        /usr/local/go/src/encoding/json/decode.go:613 +0x650\nencoding/json.(*decodeState).value(0x4001153440, {0x5597157640?, 0x40011533b0?, 0x559524005c?})\n        /usr/local/go/src/encoding/json/decode.go:374 +0x40\nencoding/json.(*decodeState).unmarshal(0x4001153440, {0x5597157640?, 0x40011533b0?})\n        /usr/local/go/src/encoding/json/decode.go:181 +0x204\nencoding/json.Unmarshal({0x400069c2d0, 0xef, 0xef}, {0x5597157640, 0x40011533b0})\n        /usr/local/go/src/encoding/json/decode.go:108 +0xf4\ngithub.com/docker/docker/libnetwork/drivers/ipvlan.(*configuration).SetValue(0x4000d18050?, {0x400069c2d0?, 0x23?, 0x23?})\n        /go/src/github.com/docker/docker/libnetwork/drivers/ipvlan/ipvlan_store.go:230 +0x38\n```\n\n----------------------------------------\n\nTITLE: Retrieving Docker Hub Token with Authentication\nDESCRIPTION: This command retrieves an authenticated token from Docker Hub for checking rate limits. It requires the user to input their username and password, and uses curl to make an authenticated HTTP request.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/usage/pulls.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ TOKEN=$(curl --user 'username:password' \"https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull\" | jq -r .token)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Reserved Stage Names\nDESCRIPTION: Examples showing incorrect usage of reserved words 'scratch' and 'context' as stage names in Dockerfile\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/reserved-stage-name.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine AS scratch\nFROM alpine AS context\n```\n\n----------------------------------------\n\nTITLE: Mounting Secret to Custom Path in Dockerfile\nDESCRIPTION: Dockerfile instruction showing how to mount a secret to a custom path using the target option in the mount flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=secret,id=aws,target=/root/.aws/credentials \\\n    aws s3 cp ...\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Docker Service's Command\nDESCRIPTION: Updates the command of an existing Docker service named 'helloworld' to run 'ping docker.com'. This demonstrates how to modify the behavior of a running service without recreating it.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker service update --args \"ping docker.com\" helloworld\n```\n\n----------------------------------------\n\nTITLE: Named External Config with Variable Reference\nDESCRIPTION: Demonstrates using an external config with a custom name specified through variable interpolation. The HTTP_CONFIG_KEY variable is resolved at deployment time.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/configs.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfigs:\n  http_config:\n    external: true\n    name: \"${HTTP_CONFIG_KEY}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Attestations in Docker Bake\nDESCRIPTION: Demonstrates how to apply build attestations to a target using the attest attribute. The example shows how to configure provenance and SBOM attestation types.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  attest = [\n    {\n      type = \"provenance\",\n      mode = \"max\",\n    },\n    {\n      type = \"sbom\",\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Engine Version Output\nDESCRIPTION: Example showing the version string format for Docker Buildx in the release\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker buildx version\nbuildx v0.11.2-desktop.1\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Docker CLI Documentation\nDESCRIPTION: This YAML front matter defines metadata for the 'docker system df' command documentation page. It specifies the data folder, file name, title, aliases for alternative URLs, and the layout to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/system/df.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_system_df\ntitle: docker system df\naliases:\n- /edge/engine/reference/commandline/system_df/\n- /engine/reference/commandline/system_df/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Building and Copying Multi-platform Docker Images\nDESCRIPTION: This GitHub Actions workflow builds multi-platform Docker images for linux/amd64 and linux/arm64 architectures, pushes them to Docker Hub, and then copies the images to GitHub Container Registry using buildx imagetools. The workflow includes steps for authentication to both registries, setting up the necessary tools, and performing the build and copy operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/copy-image-registries.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: ${{ github.repository_owner }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: |\n            user/app:latest\n            user/app:1.0.0\n\n      - name: Push image to GHCR\n        run: |\n          docker buildx imagetools create \\\n            --tag ghcr.io/user/app:latest \\\n            --tag ghcr.io/user/app:1.0.0 \\\n            user/app:latest\n```\n\n----------------------------------------\n\nTITLE: Implementing STDIN Password Input for Docker Login\nDESCRIPTION: Adds a new --password-stdin flag to docker login command, allowing passwords to be passed via STDIN for improved security.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.07.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Passwords can now be passed using `STDIN` using the new  `--password-stdin` flag on `docker login` [docker/cli#271](https://github.com/docker/cli/pull/271)\n```\n\n----------------------------------------\n\nTITLE: Merging YAML Mappings in Docker Compose\nDESCRIPTION: Demonstrates how YAML mappings are merged by adding missing entries and merging conflicting ones in Docker Compose files.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/merge.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    key1: value1\n    key2: value2\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    key2: VALUE\n    key3: value3\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    key1: value1\n    key2: VALUE\n    key3: value3\n```\n\n----------------------------------------\n\nTITLE: Using extends to reference another service in Docker Compose\nDESCRIPTION: Extends configuration from another service, either in the same file or in another Compose file. Requires specifying the service name and optionally the file path.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nextends:\n  file: common.yml\n  service: webapp\n```\n\n----------------------------------------\n\nTITLE: Running Ubuntu Container with Bind Mount on PowerShell\nDESCRIPTION: This command runs an interactive Ubuntu container with a bind mount that maps the current directory to /src inside the container using PowerShell syntax.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --mount \"type=bind,src=$($pwd),target=/src\" ubuntu bash\n```\n\n----------------------------------------\n\nTITLE: Running the Redis Container\nDESCRIPTION: This command starts a Redis container in detached mode, names it 'redis', connects it to the 'sample-app' network, and sets a network alias 'redis' for DNS lookups by other containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d  --name redis --network sample-app --network-alias redis redis\n```\n\n----------------------------------------\n\nTITLE: Running Rails Application with Docker Compose\nDESCRIPTION: A console command to build and run a Ruby on Rails application using Docker Compose. This command builds the Docker image, sets the Rails master key as an environment variable, and starts the application in the foreground.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/containerize.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ RAILS_MASTER_KEY=<master_key_value> docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Listing Existing Deployment Streams in Docker Scout\nDESCRIPTION: Lists all existing deployment streams available to the user. The output shows a simple list of stream names which can be used in other Docker Scout commands.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_stream.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ %[1]s %[2]s\nprod-cluster-123\nstage-cluster-234\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images on Mac\nDESCRIPTION: Command to list all Docker images stored in Docker Desktop for Mac.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/macfaqs.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker image ls\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration\nDESCRIPTION: Configuration for the OpenTelemetry collector defining receivers and exporters for metrics collection.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/otel.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Receive signals over gRPC and HTTP\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\n# Establish an endpoint for Prometheus to scrape from\nexporters:\n  prometheus:\n    endpoint: \"0.0.0.0:8889\"\n\nservice:\n  pipelines:\n    metrics:\n      receivers: [otlp]\n      exporters: [prometheus]\n```\n\n----------------------------------------\n\nTITLE: Attempting to Share Network Namespace with Linux VM\nDESCRIPTION: Shows how Enhanced Container Isolation prevents containers from sharing the network namespace with the host, which would break isolation. The error message provides a clear explanation of why this operation fails.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm --network=host alpine\ndocker: Error response from daemon: failed to create shim task: OCI runtime create failed: error in the container spec: invalid or unsupported container spec: sysbox containers can't share a network namespace with the host (because they use the linux user-namespace for isolation): unknown.\n```\n\n----------------------------------------\n\nTITLE: Error response when using a blocked Docker command via curl\nDESCRIPTION: Console output showing the error received when attempting to use the 'push' command via direct HTTP API call to the Docker socket when it has been blocked by commandList configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/config.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n/ # curl --unix-socket /var/run/docker.sock -XPOST http://localhost/v1.43/images/myimage/push?tag=latest\nError response from daemon: enhanced container isolation: docker command \"/v1.43/images/myimage/push?tag=latest\" is blocked; if you wish to allow it, configure the docker socket command list in the Docker Desktop settings or admin-settings.\n```\n\n----------------------------------------\n\nTITLE: Joining a Swarm with Separate Network Interfaces\nDESCRIPTION: This command joins a Docker swarm using separate network interfaces for different types of traffic. It specifies eth0 for the advertise address (control traffic) and eth1 for the data path (service traffic).\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm join \\\n  --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2d7c \\\n  --advertise-addr eth0 \\\n  --data-path-addr eth1 \\\n  192.168.99.100:2377\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Updates v1.39\nDESCRIPTION: Details changes to info endpoint responses and session management functionality.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/version-history.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* `GET /info` now returns an empty string for `KernelVersion`\n* `POST /swarm/init` now accepts `DefaultAddrPool` property\n* `POST /session` is no longer experimental\n```\n\n----------------------------------------\n\nTITLE: Sensitive Data Publishing Confirmation\nDESCRIPTION: Interactive prompt showing the confirmation process for publishing sensitive data and environment variables in an OCI artifact.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/oci-artifact.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n...\nyou are about to publish sensitive data within your OCI artifact.\nplease double check that you are not leaking sensitive data\nAWS Client ID\n\"services.serviceA.environment.AWS_ACCESS_KEY_ID\": xxxxxxxxxx\nAWS Secret Key\n\"services.serviceA.environment.AWS_SECRET_ACCESS_KEY\": aws\"xxxx/xxxx+xxxx+\"\nGithub authentication\n\"GITHUB_TOKEN\": ghp_xxxxxxxxxx\nJSON Web Token\n\"\": xxxxxxx.xxxxxxxx.xxxxxxxx\nPrivate Key\n\"\": -----BEGIN DSA PRIVATE KEY-----\nxxxxx\n-----END DSA PRIVATE KEY-----\nAre you ok to publish these sensitive data? [y/N]:y\n\nyou are about to publish environment variables within your OCI artifact.\nplease double check that you are not leaking sensitive data\nService/Config  serviceA\nFOO=bar\nService/Config  serviceB\nFOO=bar\nQUIX=\nBAR=baz\nAre you ok to publish these environment variables? [y/N]: \n```\n\n----------------------------------------\n\nTITLE: Listing Delegations with Notary CLI\nDESCRIPTION: This command uses the Notary CLI to list delegations and keys for a repository, clearly showing which keys are attached to targets/releases and targets/jeff delegations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ notary delegation list registry.example.com/admin/demo\n\nROLE                PATHS             KEY IDS                                                             THRESHOLD\n----                -----             -------                                                             ---------\ntargets/jeff        \"\" <all paths>    1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1    1\n                                          \ntargets/releases    \"\" <all paths>    1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1    1 \n```\n\n----------------------------------------\n\nTITLE: Docker Init Configuration Dialog\nDESCRIPTION: Interactive Docker initialization process showing the configuration of Docker assets for an ASP.NET Core application, including platform selection, project naming, .NET version, and port configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker init\nWelcome to the Docker Init CLI!\n\nThis utility will walk you through creating the following files with sensible defaults for your project:\n  - .dockerignore\n  - Dockerfile\n  - compose.yaml\n  - README.Docker.md\n\nLet's get started!\n\n? What application platform does your project use? ASP.NET Core\n? What's the name of your solution's main project? myWebApp\n? What version of .NET do you want to use? 8.0\n? What local port do you want to use to access your server? 8080\n```\n\n----------------------------------------\n\nTITLE: Multi-platform Docker Build with Containerd Image Store\nDESCRIPTION: Workflow that enables containerd image store to support loading multi-platform images to the local image store of the GitHub Actions runner.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/multi-platform.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker\n        uses: docker/setup-docker-action@v4\n        with:\n          daemon-config: |\n            {\n              \"debug\": true,\n              \"features\": {\n                \"containerd-snapshotter\": true\n              }\n            }\n\n      - name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ vars.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          platforms: linux/amd64,linux/arm64\n          load: true\n          tags: user/app:latest\n```\n\n----------------------------------------\n\nTITLE: Logging into Docker Registry\nDESCRIPTION: Demonstrates the process of logging into a Docker registry before pushing data to the Notary server, which is necessary for authenticated Notary servers or DTR.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker login registry.example.com/user/repo\nUsername: admin\nPassword:\n\nLogin Succeeded\n\n$ docker trust signer add --key cert.pem jeff registry.example.com/user/repo\nAdding signer \"jeff\" to registry.example.com/user/repo...\nInitializing signed repository for registry.example.com/user/repo...\nSuccessfully initialized \"registry.example.com/user/repo\"\nSuccessfully added signer: jeff to registry.example.com/user/repo\n```\n\n----------------------------------------\n\nTITLE: Windows PowerShell Docker Desktop Uninstall Command\nDESCRIPTION: PowerShell command to uninstall Docker Desktop using the installer\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/uninstall.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ Start-Process 'Docker Desktop Installer.exe' -Wait uninstall\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Setup Commands\nDESCRIPTION: Commands for starting the services and configuring the Docker CLI for OpenTelemetry metrics export.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/otel.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ export DOCKER_CLI_OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker version\n```\n\n----------------------------------------\n\nTITLE: Checking Proxy Environment Variables in Docker Container\nDESCRIPTION: This console command runs an Alpine Linux container and prints out the proxy-related environment variables, demonstrating how the Docker client configuration is applied to containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/proxy.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm alpine sh -c 'env | grep -i  _PROXY'\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Services in compose.yaml\nDESCRIPTION: This YAML snippet demonstrates how to use a compose.yaml file to define multiple backend services for a Docker extension, including specific options like volume mounts and capabilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/architecture/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    image: backend-image:tag\n    volumes:\n      - /host/path:/container/path\n    cap_add:\n      - SYS_ADMIN\n  database:\n    image: database-image:tag\n  message-broker:\n    image: broker-image:tag\n```\n\n----------------------------------------\n\nTITLE: Configuring restart policy in Compose Deploy\nDESCRIPTION: Demonstrates how to set up restart conditions for containers that exit. This configuration attempts to restart failed containers up to 3 times with delays between attempts.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy:\n  restart_policy:\n    condition: on-failure\n    delay: 5s\n    max_attempts: 3\n    window: 120s\n```\n\n----------------------------------------\n\nTITLE: Pinning Image Version with Additional Build Contexts\nDESCRIPTION: Shows how to pin an image version using the contexts attribute with a docker-image reference. This is paired with a Dockerfile that uses the named context.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\n# docker-bake.hcl\ntarget \"app\" {\n    contexts = {\n        alpine = \"docker-image://alpine:3.13\"\n    }\n}\n```\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Dockerfile\nFROM alpine\nRUN echo \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: HTML Comment with Source Repository Information\nDESCRIPTION: HTML comment providing information about how to contribute to the documentation by submitting changes to the source repository on GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/du.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/buildx\n-->\n```\n\n----------------------------------------\n\nTITLE: Documentation Source Note in HTML Comment\nDESCRIPTION: HTML comment providing information about the automatic generation of the documentation from Docker's source code and instructions for suggesting changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/trust/signer/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Specifying a Particular Bake File in a Repository\nDESCRIPTION: Console command demonstrating how to use the '--file' or '-f' flag to specify which Bake definition to use when a repository contains multiple Bake files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndocker buildx bake -f bake.hcl \"https://github.com/crazy-max/buildx.git#remote-with-local\"\n```\n\n----------------------------------------\n\nTITLE: Specifying replicas in Compose Deploy\nDESCRIPTION: Demonstrates how to set the number of container instances for a replicated service. This example configures 6 replicas of the frontend service.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    deploy:\n      mode: replicated\n      replicas: 6\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Documentation Front Matter in YAML\nDESCRIPTION: YAML front matter that configures a documentation page titled 'The basics'. It specifies build parameters with 'render: never', sets the page title, and assigns a weight of 10 for ordering within the documentation hierarchy.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: The basics\nweight: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Healthcheck Configuration\nDESCRIPTION: Example of launching a Docker container with custom healthcheck parameters. The command sets up a container running busybox that checks health by verifying the existence of /etc/passwd every 2 seconds.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_42\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --name=test -d \\\n    --health-cmd='stat /etc/passwd || exit 1' \\\n    --health-interval=2s \\\n    busybox sleep 1d\n$ sleep 2; docker inspect --format='{{.State.Health.Status}}' test\nhealthy\n$ docker exec test rm /etc/passwd\n$ sleep 2; docker inspect --format='{{json .State.Health}}' test\n{\n  \"Status\": \"unhealthy\",\n  \"FailingStreak\": 3,\n  \"Log\": [\n    {\n      \"Start\": \"2016-05-25T17:22:04.635478668Z\",\n      \"End\": \"2016-05-25T17:22:04.7272552Z\",\n      \"ExitCode\": 0,\n      \"Output\": \"  File: /etc/passwd\\n  Size: 334       \\tBlocks: 8          IO Block: 4096   regular file\\nDevice: 32h/50d\\tInode: 12          Links: 1\\nAccess: (0664/-rw-rw-r--)  Uid: (    0/    root)   Gid: (    0/    root)\\nAccess: 2015-12-05 22:05:32.000000000\\nModify: 2015...\"\n    },\n    {\n      \"Start\": \"2016-05-25T17:22:06.732900633Z\",\n      \"End\": \"2016-05-25T17:22:06.822168935Z\",\n      \"ExitCode\": 0,\n      \"Output\": \"  File: /etc/passwd\\n  Size: 334       \\tBlocks: 8          IO Block: 4096   regular file\\nDevice: 32h/50d\\tInode: 12          Links: 1\\nAccess: (0664/-rw-rw-r--)  Uid: (    0/    root)   Gid: (    0/    root)\\nAccess: 2015-12-05 22:05:32.000000000\\nModify: 2015...\"\n    },\n    {\n      \"Start\": \"2016-05-25T17:22:08.823956535Z\",\n      \"End\": \"2016-05-25T17:22:08.897359124Z\",\n      \"ExitCode\": 1,\n      \"Output\": \"stat: can't stat '/etc/passwd': No such file or directory\\n\"\n    },\n    {\n      \"Start\": \"2016-05-25T17:22:10.898802931Z\",\n      \"End\": \"2016-05-25T17:22:10.969631866Z\",\n      \"ExitCode\": 1,\n      \"Output\": \"stat: can't stat '/etc/passwd': No such file or directory\\n\"\n    },\n    {\n      \"Start\": \"2016-05-25T17:22:12.971033523Z\",\n      \"End\": \"2016-05-25T17:22:13.082015516Z\",\n      \"ExitCode\": 1,\n      \"Output\": \"stat: can't stat '/etc/passwd': No such file or directory\\n\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Scout with Repository Filter\nDESCRIPTION: Demonstrates using the --filter option to enable Docker Scout for repositories matching a specific pattern.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_enable.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout repo enable --filter namespace/backend\n```\n\n----------------------------------------\n\nTITLE: Listing All Docker Containers on Linux\nDESCRIPTION: Command to list all Docker containers on the system including stopped containers. The -a flag ensures all containers are shown, not just running ones.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/linuxfaqs.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker container ls -a\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Scout Environments Using CLI\nDESCRIPTION: This command lists all available environments for an organization using the Docker Scout CLI. It can be used with or without specifying an organization.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/environment/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout env\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout env --org <org>\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Stage Dockerfile for Go Development\nDESCRIPTION: Example Dockerfile that uses multi-stage builds to create development and production environments for a Go application. The development stage includes additional tools like git while the production stage creates a minimal Alpine-based image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/set-up.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM golang:1.16-alpine AS build\nWORKDIR /go/src/github.com/org/repo\nCOPY . .\nRUN go build -o server .\nFROM build AS development\nRUN apk update \\\n    && apk add git\nCMD [\"go\", \"run\", \"main.go\"]\nFROM alpine:3.12\nEXPOSE 8000\nCOPY --from=build /go/src/github.com/org/repo/server /server\nCMD [\"/server\"]\n```\n\n----------------------------------------\n\nTITLE: Web Application Output Example\nDESCRIPTION: This shows the expected output when accessing the web application through a browser, displaying the host that handled the request and the total number of visits, which are stored in Redis and served by either web1 or web2 containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nweb2: Number of visits is: 9\nweb1: Number of visits is: 10\nweb2: Number of visits is: 11\nweb1: Number of visits is: 12\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH in GitHub Actions for Docker Build\nDESCRIPTION: This GitHub Actions workflow sets up SSH and uses it in a Docker build process, demonstrating how to use SSH mounts with the docker/build-push-action.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/secrets.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up SSH\n        uses: MrSquaare/ssh-setup-action@2d028b70b5e397cf8314c6eaea229a6c3e34977a # v3.1.0\n        with:\n          host: github.com\n          private-key: ${{ secrets.SSH_GITHUB_PPK }}\n          private-key-name: github-ppk\n\n      - name: Build and push\n        uses: docker/build-push-action@v6\n        with:\n          ssh: default\n          push: true\n          tags: user/app:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Plugin with JSON\nDESCRIPTION: This snippet provides an example of a config.json file for a Docker plugin. It defines the plugin's description, documentation, entrypoint, network type, interface, and required Linux capabilities.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"sshFS plugin for Docker\",\n  \"documentation\": \"https://docs.docker.com/engine/extend/plugins/\",\n  \"entrypoint\": [\"/docker-volume-sshfs\"],\n  \"network\": {\n    \"type\": \"host\"\n  },\n  \"interface\": {\n    \"types\": [\"docker.volumedriver/1.0\"],\n    \"socket\": \"sshfs.sock\"\n  },\n  \"linux\": {\n    \"capabilities\": [\"CAP_SYS_ADMIN\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building with Docker Container Driver\nDESCRIPTION: Example of running a build using the container builder. This command shows how Buildx pulls the BuildKit image and starts a container to run the build process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/docker-container.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build -t <image> --builder=container .\nWARNING: No output specified with docker-container driver. Build result will only remain in the build cache. To push result image into registry use --push or to load image into docker use --load\n#1 [internal] booting buildkit\n#1 pulling image moby/buildkit:buildx-stable-1\n#1 pulling image moby/buildkit:buildx-stable-1 1.9s done\n#1 creating container buildx_buildkit_container0\n#1 creating container buildx_buildkit_container0 0.5s done\n#1 DONE 2.4s\n...\n```\n\n----------------------------------------\n\nTITLE: Removing a Key from Docker Trust Store\nDESCRIPTION: Demonstrates the process of removing a specific key from the Docker Trust store using its Key ID. The command requires confirmation before deletion.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ notary key remove 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1\n\nAre you sure you want to remove 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1 (role jeff) from /home/ubuntu/.docker/trust/private?  (yes/no)  y\n\nDeleted 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1 (role jeff) from /home/ubuntu/.docker/trust/private.\n```\n\n----------------------------------------\n\nTITLE: Validating Docker Daemon Configuration Files\nDESCRIPTION: Examples of using the --validate flag with dockerd to check configuration files without starting the daemon. Shows successful validation of a valid config file and the error returned for an invalid one.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_38\n\nLANGUAGE: console\nCODE:\n```\n$ dockerd --validate --config-file=/tmp/valid-config.json\nconfiguration OK\n\n$ echo $?\n0\n\n$ dockerd --validate --config-file /tmp/invalid-config.json\nunable to configure the Docker daemon with file /tmp/invalid-config.json: the following directives don't match any configuration option: unknown-option\n\n$ echo $?\n1\n```\n\n----------------------------------------\n\nTITLE: Testing Mount System Call Vetting with SYS_ADMIN Capability\nDESCRIPTION: Demonstrates how Enhanced Container Isolation prevents containers from remounting a read-only bind mount as read-write, even when the container has the CAP_SYS_ADMIN capability which is typically required for mount operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm --cap-add SYS_ADMIN -v $HOME:/mnt:ro alpine\n/ # mount -o remount,rw /mnt /mnt\nmount: permission denied (are you root?)\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Rootfs Directory in Docker\nDESCRIPTION: This snippet shows how to create the rootfs directory for a Docker plugin using a Dockerfile and Docker commands. It demonstrates the process of building an image, creating a container, and extracting its filesystem.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/vieux/docker-volume-sshfs\n$ cd docker-volume-sshfs\n$ docker build -t rootfsimage .\n$ id=$(docker create rootfsimage true) # id was cd851ce43a403 when the image was created\n$ sudo mkdir -p myplugin/rootfs\n$ sudo docker export \"$id\" | sudo tar -x -C myplugin/rootfs\n$ docker rm -vf \"$id\"\n$ docker rmi rootfsimage\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Plugin\nDESCRIPTION: Command to inspect details of a specific Docker plugin.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/plugins.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker inspect\n```\n\n----------------------------------------\n\nTITLE: Resolving Unprivileged Namespaces Restriction in Ubuntu 24.04\nDESCRIPTION: Command to modify kernel settings to allow unprivileged namespaces, required for running Docker Desktop on Ubuntu 24.04 LTS which restricts them by default.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0\n```\n\n----------------------------------------\n\nTITLE: Configuring metadata.json for Docker Extension with Backend\nDESCRIPTION: This JSON snippet shows the configuration in metadata.json required to enable the backend service for a Docker extension. It specifies the image to use for the VM that runs the backend service.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/backend-extension-tutorial.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vm\": {\n    \"image\": \"${DESKTOP_PLUGIN_IMAGE}\"\n  },\n  \"icon\": \"docker.svg\",\n  \"ui\": {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Container Recreation\nDESCRIPTION: Example of using the --no-recreate flag to prevent Compose from recreating containers even if their configuration has changed.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_up.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`--no-recreate`\n```\n\n----------------------------------------\n\nTITLE: Docker Compose File for Extension with Volume\nDESCRIPTION: Example Docker Compose file that can be referenced in the VM section of metadata.json. It defines a service using the extension image and mounts a volume from host to container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/architecture/metadata.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myExtension:\n    image: ${DESKTOP_PLUGIN_IMAGE}\n    volumes:\n      - /host/path:/container/path\n```\n\n----------------------------------------\n\nTITLE: Reserving specific devices by ID in Compose Deploy\nDESCRIPTION: Demonstrates how to reserve devices with specific IDs, provided they satisfy the requested capabilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy:\n  resources:\n    reservations:\n      devices:\n        - capabilities: [\"gpu\"]\n          device_ids: [\"GPU-f123d1c9-26bb-df9b-1c23-4a731f61d8c7\"]\n```\n\n----------------------------------------\n\nTITLE: Running Docker Daemon on Custom Port\nDESCRIPTION: Example of running the Docker daemon in the background, binding it to a specific port accessible from any host.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo <path to>/dockerd -H 0.0.0.0:5555 &\n```\n\n----------------------------------------\n\nTITLE: HTML Comment with Source Code Repository Information\nDESCRIPTION: HTML comment providing information about the automatic generation of this documentation and instructions for suggesting changes via GitHub tickets or pull requests.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/history/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/buildx\n-->\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Docker Compose CLI Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the 'docker compose alpha publish' documentation page, including data folder/file paths, title, layout, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/alpha/publish.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_alpha_publish\ntitle: docker compose alpha publish\nlayout: cli\naliases:\n- /engine/reference/commandline/compose_alpha_publish/\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Flask Application with CMD (Exec Form)\nDESCRIPTION: Demonstrates how to use the CMD instruction in exec form to start a Flask development server that listens on all addresses on port 8000. This form provides better signal handling capabilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nCMD [\"flask\", \"run\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 ULA prefix in Docker daemon.json\nDESCRIPTION: Example of adding an IPv6 Unique Local Address (ULA) base prefix to the default-address-pools configuration in the Docker daemon.json file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"default-address-pools\": [{ \"base\": \"fd00::/8\", \"size\": 64 }]\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Volume Names in Docker Compose\nDESCRIPTION: Example showing how to set a custom name for a volume that doesn't follow the default naming convention.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  db-data:\n    name: \"my-app-data\"\n```\n\n----------------------------------------\n\nTITLE: Defining Build Context with Relative Path\nDESCRIPTION: Example of setting the build context to a relative path, which is interpreted relative to the project directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: ./dir\n```\n\n----------------------------------------\n\nTITLE: Pageless Sidebar Entry Configuration in YAML\nDESCRIPTION: YAML front matter configuration for creating a sidebar entry that links to a different page. This demonstrates the use of the sidebar.goto parameter in combination with build.render to create navigational links without actual page content.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/file-conventions.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Dummy sidebar link\nbuild:\n  render: never\nsidebar:\n  goto: /some/other/page/\nweight: 30\n---\n```\n\n----------------------------------------\n\nTITLE: Making HTTP POST Request with Docker Extension API\nDESCRIPTION: Performs an HTTP POST request with data payload to a backend service using the Docker client extension VM service. Returns a promise that resolves to the response data.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/HttpService.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.extension.vm.service\n .post(\"/some/service\", { ... })\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Deprecated VM Extension Command Execution\nDESCRIPTION: Shows the deprecated method for executing commands in the backend container using execInVMExtension.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/backend.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await window.ddClient.backend.execInVMExtension(\n  `cliShippedInTheVm xxx`\n);\nconsole.log(output);\n```\n\n----------------------------------------\n\nTITLE: Pushing an Image to Docker Scout using CLI\nDESCRIPTION: This example demonstrates how to use the 'docker scout push' command to push an image to Docker Scout. It specifies an organization and a registry path for the image.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_push.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout push --org my-org registry.example.com/repo:tag\n```\n\n----------------------------------------\n\nTITLE: Submitting Feedback via Command Line in Docker\nDESCRIPTION: This snippet demonstrates how to use the 'docker feedback' command to submit feedback directly from the command line interface. It utilizes an asciinema player to show the command in action.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/feedback.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script async id=\"asciicast-KkC0fFrhV8nAzvXUGqay06UXx\" src=\"https://asciinema.org/a/KkC0fFrhV8nAzvXUGqay06UXx.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Page with YAML Frontmatter in Docker Documentation\nDESCRIPTION: YAML frontmatter configuration for a search page in Docker documentation. It sets the page title to 'Search', specifies a search-specific layout, excludes the page from the sitemap, and assigns a search icon.\nSOURCE: https://github.com/docker/docs/blob/main/content/search.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Search\nlayout: search\nparams:\n  sitemap: false\n  icon: search\n---\n```\n\n----------------------------------------\n\nTITLE: Deduplicating Context Transfer in Docker Bake\nDESCRIPTION: Example demonstrating how to optimize build performance by defining a named context that loads files once and is referenced by multiple targets, avoiding redundant context transfers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/contexts.md#2025-04-11_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"default\" {\n  targets = [\"target1\", \"target2\"]\n}\n\ntarget \"ctx\" {\n  context = \".\"\n  target = \"ctx\"\n}\n\ntarget \"target1\" {\n  target = \"target1\"\n  contexts = {\n    ctx = \"target:ctx\"\n  }\n}\n\ntarget \"target2\" {\n  target = \"target2\"\n  contexts = {\n    ctx = \"target:ctx\"\n  }\n}\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM scratch AS ctx\nCOPY --link . .\n\nFROM golang:alpine AS target1\nWORKDIR /work\nRUN --mount=from=ctx \\\n    go build -o /out/client ./cmd/client \\\n\nFROM golang:alpine AS target2\nWORKDIR /work\nRUN --mount=from=ctx \\\n    go build -o /out/server ./cmd/server\n```\n\n----------------------------------------\n\nTITLE: Pulling a Docker Image with HTTP API\nDESCRIPTION: Demonstrates making a direct HTTP POST request to pull a Docker image. The example shows pulling the Alpine image with output showing the download progress.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ curl --unix-socket /var/run/docker.sock \\\n  -X POST \"http://localhost/v{{% param \"latest_engine_api_version\" %}}/images/create?fromImage=alpine\"\n{\"status\":\"Pulling from library/alpine\",\"id\":\"3.1\"}\n{\"status\":\"Pulling fs layer\",\"progressDetail\":{},\"id\":\"8f13703509f7\"}\n{\"status\":\"Downloading\",\"progressDetail\":{\"current\":32768,\"total\":2244027},\"progress\":\"[\\u003e                                                  ] 32.77 kB/2.244 MB\",\"id\":\"8f13703509f7\"}\n...\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker CLI Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker CLI documentation page. Includes the data folder location, specific command documentation file, page title, and URL aliases for different versions of the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/swarm/join-token.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_swarm_join-token\ntitle: docker swarm join-token\naliases:\n- /engine/reference/commandline/swarm_join_token/\n- /edge/engine/reference/commandline/swarm_join_token/\n- /edge/engine/reference/commandline/swarm_join-token/\n- /engine/reference/commandline/swarm_join-token/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: OCI Artifact Application Variables Confirmation\nDESCRIPTION: Interactive prompt showing the confirmation process for variables and remote resources when running an OCI artifact application.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/oci-artifact.md#2025-04-11_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ REGISTRY=myregistry.com docker compose -f oci://docker.io/username/my-compose-app:latest up\n\nFound the following variables in configuration:\nVARIABLE     VALUE                SOURCE        REQUIRED    DEFAULT\nREGISTRY     myregistry.com      command-line   yes         \nTAG          v1.0                environment    no          latest\nDOCKERFILE   Dockerfile          default        no          Dockerfile\nAPI_KEY      <unset>             none           no          \n\nDo you want to proceed with these variables? [Y/n]:y\n\nWarning: This Compose project includes files from remote sources:\n- oci://registry.example.com/stack:latest\nRemote includes could potentially be malicious. Make sure you trust the source.\nDo you want to continue? [y/N]: \n```\n\n----------------------------------------\n\nTITLE: Setting Up TLS Test Environment in Boot2Docker\nDESCRIPTION: This snippet shows the process of cloning the Docker repository, navigating to the HTTPS examples directory, and generating certificates using OpenSSL. It's important to enter the correct hostname when prompted.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/https/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ boot2docker ssh\nroot@boot2docker:/# git clone https://github.com/moby/moby\nroot@boot2docker:/# cd docker/docs/articles/https\nroot@boot2docker:/# make cert\n```\n\n----------------------------------------\n\nTITLE: Example ETW Event Message Output\nDESCRIPTION: A sample ETW event message showing the actual format with container details and a log message.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/etwlogs.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncontainer_name: backstabbing_spence,\nimage_name: windowsservercore,\ncontainer_id: f14bb55aa862d7596b03a33251c1be7dbbec8056bbdead1da8ec5ecebbe29731,\nimage_id: sha256:2f9e19bd998d3565b4f345ac9aaf6e3fc555406239a4fb1b1ba879673713824b,\nsource: stdout,\nlog: Hello world!\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop for Non-Admin Windows Users\nDESCRIPTION: Command to install Docker Desktop on Windows with the --always-run-service flag, which allows non-administrator users to run Docker Desktop after installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/general.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ \"Docker Desktop Installer.exe\" install —always-run-service\n```\n\n----------------------------------------\n\nTITLE: Running TLS Test Server in Boot2Docker\nDESCRIPTION: This command runs the TLS test server using sudo privileges. It should be executed after generating the certificates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/https/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nroot@boot2docker:/# sudo make run\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Login Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the Docker login command documentation page, including the datafolder, datafile, title, and layout information along with alias paths for URL routing.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/login.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_login\ntitle: docker login\naliases:\n- /edge/engine/reference/commandline/login/\n- /engine/reference/commandline/login/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring metadata.json for Docker Extension\nDESCRIPTION: Defines the metadata.json file required for Docker extensions. This configuration sets up the dashboard tab with a title, root directory, and source HTML file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/minimal-frontend-extension.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui\": {\n    \"dashboard-tab\": {\n      \"title\": \"Minimal frontend\",\n      \"root\": \"/ui\",\n      \"src\": \"index.html\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring placement preferences in Compose Deploy\nDESCRIPTION: Shows how to define preferences for distributing service tasks across nodes using a spread strategy based on node labels.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/deploy.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy:\n  placement:\n    preferences:\n      - spread: node.labels.zone\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Network Configuration\nDESCRIPTION: This command creates a new Docker network and inspects its configuration to verify that the default options have been applied. It uses the docker network create and docker network inspect commands.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create mynet\n$ docker network inspect mynet --format \"{{json .Options}}\"\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Block for Documentation Source\nDESCRIPTION: A comment block explaining that the content is automatically generated from Docker's source code and directing users where to suggest changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/unpause.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nSorry, but the contents of this page are automatically generated from\nDocker's source code. If you want to suggest a change to the text that appears\nhere, you'll need to find the string by searching this repo:\nhttps://github.com/docker/compose\n-->\n```\n\n----------------------------------------\n\nTITLE: Committing a Docker Container to Create an Image with Python SDK\nDESCRIPTION: Shows how to create and commit a container to a new image using the Docker Python SDK. The code runs a container with Alpine, executes a touch command, and commits the container as a new image named 'helloworld'.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nimport docker\nclient = docker.from_env()\ncontainer = client.containers.run(\"alpine\", [\"touch\", \"/helloworld\"], detach=True)\ncontainer.wait()\nimage = container.commit(\"helloworld\")\nprint(image.id)\n```\n\n----------------------------------------\n\nTITLE: Defining onError Callback for Command Execution in TypeScript\nDESCRIPTION: This code defines the onError callback function that is invoked to report errors that occur during command execution. It receives the error object from the executed command.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExecStreamOptions.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonError?: (error: any) => void\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Minecraft Docker Documentation\nDESCRIPTION: This YAML frontmatter snippet sets up metadata for a documentation page about Minecraft Docker samples. It includes the title, description, service identifier, and URL aliases for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/minecraft.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Minecraft samples\ndescription: Docker samples for Minecraft.\nservice: minecraft\naliases:\n- /samples/minecraft/\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Secret Documentation\nDESCRIPTION: YAML configuration block defining metadata for the Docker secret rm command documentation page, including data folder location, file name, page title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/secret/rm.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_secret_rm\ntitle: docker secret rm\naliases:\n- /edge/engine/reference/commandline/secret_rm/\n- /engine/reference/commandline/secret_rm/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Fetching User Data in JavaScript\nDESCRIPTION: A JavaScript code snippet demonstrating an asynchronous fetch request to retrieve user data. This is used in the tab group example.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/tabs.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst res = await fetch(\"/users/1\")\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration Example\nDESCRIPTION: Sample configuration options for docker-compose.yml including dockerfile, labels, extra_hosts, pid, cpuset, read_only, security_opt, and log_driver settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    dockerfile: custom.dockerfile\n    labels:\n      - \"com.example.description=Example web app\"\n    extra_hosts:\n      - \"somehost:162.242.195.82\"\n    pid: \"host\"\n    cpuset: \"0,1\"\n    read_only: true\n    security_opt:\n      - \"label:user:USER\"\n    log_driver: \"syslog\"\n```\n\n----------------------------------------\n\nTITLE: Docker Scout Enroll Command Definition\nDESCRIPTION: Command definition and basic syntax for enrolling an organization with Docker Scout service.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_enroll.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# docker scout enroll\n```\n\n----------------------------------------\n\nTITLE: Retrieving Docker Version Information\nDESCRIPTION: Example of using the GET /version endpoint to retrieve version details of the Docker daemon, including version numbers, OS information, and build details.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_47\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/version HTTP/1.1\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n     \"Version\": \"1.12.0\",\n     \"Os\": \"linux\",\n     \"KernelVersion\": \"3.19.0-23-generic\",\n     \"GoVersion\": \"go1.6.3\",\n     \"GitCommit\": \"deadbee\",\n     \"Arch\": \"amd64\",\n     \"ApiVersion\": \"1.24\",\n     \"BuildTime\": \"2016-06-14T07:09:13.444803460+00:00\",\n     \"Experimental\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Cache Sources Configuration\nDESCRIPTION: Example showing how to use multiple cache sources, importing from both branch-specific and main branch caches\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=registry,ref=<registry>/<cache-image>:<branch> \\\n  --cache-from type=registry,ref=<registry>/<cache-image>:<branch> \\\n  --cache-from type=registry,ref=<registry>/<cache-image>:main .\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for OpenTelemetry Setup\nDESCRIPTION: Docker Compose configuration that sets up Prometheus and OpenTelemetry collector services for metrics collection.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/otel.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: cli-otel\nservices:\n  prometheus:\n    image: prom/prometheus\n    command:\n      - \"--config.file=/etc/prometheus/prom.yml\"\n    ports:\n      # Publish the Prometheus frontend on localhost:9091\n      - 9091:9090\n    restart: always\n    volumes:\n      # Store Prometheus data in a volume:\n      - prom_data:/prometheus\n      # Mount the prom.yml config file\n      - ./prom.yml:/etc/prometheus/prom.yml\n  otelcol:\n    image: otel/opentelemetry-collector\n    restart: always\n    depends_on:\n      - prometheus\n    ports:\n      - 4317:4317\n    volumes:\n      # Mount the otelcol.yml config file\n      - ./otelcol.yml:/etc/otelcol/config.yaml\n\nvolumes:\n  prom_data:\n```\n\n----------------------------------------\n\nTITLE: Streaming Command Output in Docker Extensions\nDESCRIPTION: This function signature is used when the command output needs to be streamed. It's recommended for commands with extensive output or those that run indefinitely like container logs. It returns an ExecProcess object that allows interaction with the running process.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Exec.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nExec(cmd: string, args: string[], options: SpawnOptions): ExecProcess\n```\n\n----------------------------------------\n\nTITLE: Updating a Node with POST Request in Docker Swarm API\nDESCRIPTION: API endpoint for updating a node's configuration in a Docker Swarm cluster. Requires specifying the node's version to avoid conflicts. Allows updating availability, name, role, and labels.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_91\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1.24/nodes/24ifsmvkjbyhk/update?version=8 HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Availability\": \"active\",\n  \"Name\": \"node-name\",\n  \"Role\": \"manager\",\n  \"Labels\": {\n    \"foo\": \"bar\"\n  }\n}\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 0\nContent-Type: text/plain; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Installing CA Certificates in Ubuntu-based Docker Images\nDESCRIPTION: This Dockerfile snippet demonstrates how to add custom CA certificates to an Ubuntu-based Docker image during the build process. It installs the ca-certificates package, copies a certificate file from the build context, and updates the certificate store.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/ca-certs.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Install the ca-certificate package\nRUN apt-get update && apt-get install -y ca-certificates\n# Copy the CA certificate from the context to the build container\nCOPY your_certificate.crt /usr/local/share/ca-certificates/\n# Update the CA certificates in the container\nRUN update-ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Displaying Error for IdP-Initiated Sign In Not Enabled\nDESCRIPTION: This error message appears when a user attempts to initiate the authentication flow from the identity provider instead of from Docker applications. Docker does not support IdP-initiated SAML flow, requiring users to start the authentication from Docker applications.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/troubleshoot/troubleshoot-sso.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nIdP-Initiated sign in is not enabled for connection '$ssoConnection'.\n```\n\n----------------------------------------\n\nTITLE: Defining Volumes with Long Syntax in Docker Compose YAML\nDESCRIPTION: Shows how to use the long syntax to define volumes for a service in a Docker Compose file, including both named volumes and bind mounts with detailed configuration options.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_71\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    image: example/backend\n    volumes:\n      - type: volume\n        source: db-data\n        target: /data\n        volume:\n          nocopy: true\n          subpath: sub\n      - type: bind\n        source: /var/run/postgres/postgres.sock\n        target: /var/run/postgres/postgres.sock\n\nvolumes:\n  db-data:\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Comment for Source Code Reference\nDESCRIPTION: This HTML comment provides information about the automatic generation of the page content from Docker's source code. It directs users to search the Docker Compose repository for suggesting changes to the text.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/down.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nSorry, but the contents of this page are automatically generated from\nDocker's source code. If you want to suggest a change to the text that appears\nhere, you'll need to find the string by searching this repo:\nhttps://github.com/docker/compose\n-->\n```\n\n----------------------------------------\n\nTITLE: Using the Title Function in Docker Command Output\nDESCRIPTION: The title function capitalizes the first character of a string. This example capitalizes the first letter of the container name in docker inspect output.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker inspect --format \"{{title .Name}}\" container\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker Volume\nDESCRIPTION: This command removes a specific Docker volume when it's no longer needed, freeing up storage space.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ docker volume rm postgres_data\n```\n\n----------------------------------------\n\nTITLE: TypeScript ExecResult Interface Definition\nDESCRIPTION: Interface definition for ExecResult that extends RawExecResult and provides methods for parsing command execution output. Includes methods for splitting output into lines, parsing JSON lines, and parsing complete JSON objects.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExecResult.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExecResult extends RawExecResult {\n    lines(): string[];\n    parseJsonLines(): any[];\n    parseJsonObject(): any;\n    readonly cmd?: string;\n    readonly killed?: boolean;\n    readonly signal?: string;\n    readonly code?: number;\n    readonly stdout: string;\n    readonly stderr: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Docker Image with Custom Builder\nDESCRIPTION: Command to build a Docker image using a non-default driver and load it into the local image store using the --load flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --load -t <image> --builder=container .\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Desktop in GitHub Actions\nDESCRIPTION: This YAML snippet shows how to use the Docker Desktop Action in a GitHub Actions workflow to start Docker Desktop for CI testing.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/continuous-integration.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - id: start_desktop\n    uses: docker/desktop-action/start@v0.1.0\n```\n\n----------------------------------------\n\nTITLE: Include with Multiple Environment Files (YAML)\nDESCRIPTION: Shows how to specify multiple environment files when including another Compose file, allowing for layered environment variable configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/include.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n   - path: ../another/compose.yaml\n     env_file:\n       - ../another/.env\n       - ../another/dev.env\n```\n\n----------------------------------------\n\nTITLE: Disabling OOM Killer with Memory Limit in Docker\nDESCRIPTION: Configures a Docker container with a 100MB memory limit and disables the Out-of-Memory (OOM) killer, preventing the container's processes from being killed when memory is exhausted.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it -m 100M --oom-kill-disable ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Valid Host Directory Bind Mount with Enhanced Isolation\nDESCRIPTION: Shows that mounting directories from the host machine (as configured in Docker Desktop's File Sharing settings) continues to work normally with Enhanced Container Isolation, maintaining legitimate use cases.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm -v $HOME:/mnt alpine\n/ #\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Compose Stop Command\nDESCRIPTION: YAML configuration block defining metadata and routing information for the Docker Compose stop command documentation. Includes data folder location, filename, title and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/stop.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_stop\ntitle: docker compose stop\naliases:\n- /compose/reference/stop/\n- /engine/reference/commandline/compose_stop/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Enabling Hypervisor at Windows Startup\nDESCRIPTION: Shows the command to enable Hypervisor at Windows startup, which is necessary for Docker Desktop to function properly.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/topics.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nbcdedit /set hypervisorlaunchtype auto\n```\n\n----------------------------------------\n\nTITLE: Configuring Pi-hole with Docker Compose\nDESCRIPTION: A basic Docker Compose configuration for setting up Pi-hole. This sample defines a Pi-hole service with port mappings for DNS and web interface, persistent volumes for configuration storage, and essential environment variables for initial setup including password, timezone, and DNS settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/pi-hole.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  pihole:\n    container_name: pihole\n    image: pihole/pihole:latest\n    # For DHCP it is recommended to remove these ports and instead add: network_mode: \"host\"\n    ports:\n      - \"53:53/tcp\"\n      - \"53:53/udp\"\n      - \"80:80/tcp\"\n    environment:\n      TZ: 'America/Chicago'\n      # WEBPASSWORD: 'set a secure password here or it will be random'\n    # Volumes store your data between container upgrades\n    volumes:\n      - './etc-pihole:/etc/pihole'\n      - './etc-dnsmasq.d:/etc/dnsmasq.d'\n    restart: unless-stopped\n```\n\n----------------------------------------\n\nTITLE: HTML Comment with GitHub Repository Reference\nDESCRIPTION: HTML comment specifying that the page is auto-generated from Docker's source code, with instructions on how to suggest changes via GitHub tickets or pull requests.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/manifest/rm.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Displaying Hello World in JavaScript\nDESCRIPTION: A simple JavaScript code snippet that logs 'hello world' to the console. This is used as an example in the tabs component.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/tabs.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"hello world\")\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Data and Configuration Files\nDESCRIPTION: Commands to delete all Docker images, containers, volumes, and related data after uninstalling the packages.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/sles.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ sudo rm -rf /var/lib/docker\n$ sudo rm -rf /var/lib/containerd\n```\n\n----------------------------------------\n\nTITLE: Setting plist Properties with macOS Defaults Command\nDESCRIPTION: This snippet demonstrates how to use the macOS defaults command to write the allowedOrgs property to the desktop.plist file, which enforces Docker Desktop sign-in requirements.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ defaults write /Library/Application\\ Support/com.docker.docker/desktop.plist allowedOrgs -string \"myorg\"\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Get v1 Response Format\nDESCRIPTION: JSON v1 response format for the Get endpoint in the volume plugin protocol. The response includes volume details with name, mountpoint, and status.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Volume\": {\n    \"Name\": \"volume_name\",\n    \"Mountpoint\": \"/path/to/directory/on/host\",\n    \"Status\": {}\n  },\n  \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inspect Volume API Response in Docker\nDESCRIPTION: HTTP response containing detailed information about a volume, including its driver, mountpoint, status, and labels.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_68\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"Name\": \"tardis\",\n  \"Driver\": \"custom\",\n  \"Mountpoint\": \"/var/lib/docker/volumes/tardis/_data\",\n  \"Status\": {\n    \"hello\": \"world\"\n  },\n  \"Labels\": {\n      \"com.example.some-label\": \"some-value\",\n      \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Scope\": \"local\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Updating Docker Extension\nDESCRIPTION: Commands to build and update a Docker extension after code modifications\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/frontend-extension-tutorial.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker build --tag=awesome-inc/my-extension:latest .\n$ docker extension update awesome-inc/my-extension:latest\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Admin Documentation Page\nDESCRIPTION: This YAML front matter defines configuration settings for a documentation page intended for Docker administrators. It specifies that the page should never be rendered during build, sets the title to 'For admins', and assigns a weight of 10 to control the page's position in navigation menus.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: For admins\nweight: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Running Google cAdvisor with Docker Volume Mounts\nDESCRIPTION: Command to run Google cAdvisor in a Docker container with several volume mounts. This example shows how cAdvisor requires mounting system directories including /var/lib/docker to monitor containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_30\n\nLANGUAGE: console\nCODE:\n```\n$ sudo docker run \\\n  --volume=/:/rootfs:ro \\\n  --volume=/var/run:/var/run:rw \\\n  --volume=/sys:/sys:ro \\\n  --volume=/var/lib/docker/:/var/lib/docker:ro \\\n  --publish=8080:8080 \\\n  --detach=true \\\n  --name=cadvisor \\\n  google/cadvisor:latest\n```\n\n----------------------------------------\n\nTITLE: Traefik File Provider Configuration for Non-Containerized Workloads\nDESCRIPTION: YAML configuration for Traefik's File provider to route traffic to applications running natively on the host machine through the 'host.docker.internal' hostname.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  routers:\n    native-api:\n      rule: \"Host(`localhost`) && PathPrefix(`/api`)\"\n      service: native-api\n    native-client:\n      rule: \"Host(`localhost`)\"\n      service: native-client\n\n  services:\n    native-api:\n      loadBalancer:\n        servers:\n          - url: \"http://host.docker.internal:3000/\"\n    native-client:\n      loadBalancer:\n        servers:\n          - url: \"http://host.docker.internal:5173/\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Containers by Status with Docker Compose PS\nDESCRIPTION: Using the --status flag to filter the list of containers by their status, such as running or exited, to focus on specific container states.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps --status=running\nNAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS\nexample-foo-1   alpine    \"/entrypoint.…\"   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp\n\n$ docker compose ps --status=exited\nNAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS\nexample-bar-1   alpine    \"/entrypoint.…\"   bar        4 seconds ago   exited (0)\n```\n\n----------------------------------------\n\nTITLE: Listing Networks with HTTP GET Request\nDESCRIPTION: Demonstrates how to list Docker networks using a GET request with an optional filter to show only custom networks. The response includes details of all networks including their IDs, names, scopes, drivers, and IP configurations.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_71\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/networks?filters={\"type\":{\"custom\":true}} HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Defining BuildKit's SLSA Builder ID Field in JSON\nDESCRIPTION: Example of the 'builder.id' field in SLSA Provenance format, which identifies the build URL. This field is included in both min and max attestation modes and can be set using the 'builder-id' parameter.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"builder\": {\n      \"id\": \"https://github.com/docker/buildx/actions/runs/3709599520\"\n    },\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Logs with Docker API\nDESCRIPTION: Shows how to fetch container logs with various query parameters to filter results. This endpoint supports stdout/stderr output, timestamps, following the log stream, and filtering by time.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/logs?stderr=1&stdout=1&timestamps=1&follow=1&tail=10&since=1428990821 HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 101 UPGRADED\nContent-Type: application/vnd.docker.raw-stream\nConnection: Upgrade\nUpgrade: tcp\n\n{{ STREAM }}\n```\n\n----------------------------------------\n\nTITLE: Restarting a Docker Container\nDESCRIPTION: Restart a stopped container using the docker restart command, which preserves the container's configuration and starts it with the same options used previously.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker restart inspiring_ishizaka\n```\n\n----------------------------------------\n\nTITLE: Combined Bake Definition Output\nDESCRIPTION: JSON output showing the merged configuration from both the remote and local Bake definitions, with the local arguments ('HELLO: foo') overriding or supplementing the remote configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"default\": {\n      \"context\": \"https://github.com/crazy-max/buildx.git#remote-with-local\",\n      \"dockerfile\": \"Dockerfile\",\n      \"args\": {\n        \"HELLO\": \"foo\"\n      },\n      \"target\": \"build\",\n      \"output\": [\n        {\n          \"type\": \"cacheonly\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling an Ubuntu Docker Image with Multiple Layers\nDESCRIPTION: Example of pulling the Ubuntu image with Docker, showing how the image is composed of five distinct layers that are downloaded separately.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/aufs-driver.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ubuntu\n\nUsing default tag: latest\nlatest: Pulling from library/ubuntu\nb6f892c0043b: Pull complete\n55010f332b04: Pull complete\n2955fb827c94: Pull complete\n3deef3fcbd30: Pull complete\ncf9722e506aa: Pull complete\nDigest: sha256:382452f82a8bbd34443b2c727650af46aced0f94a44463c62a9848133ecb1aa8\nStatus: Downloaded newer image for ubuntu:latest\n```\n\n----------------------------------------\n\nTITLE: Signing and Pushing Docker Image with Trust\nDESCRIPTION: Shows how to sign a Docker image tag and push both the image and its trust metadata to a registry using the docker trust sign command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/_index.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust sign registry.example.com/admin/demo:1\nSigning and pushing trust data for local image registry.example.com/admin/demo:1, may overwrite remote trust data\nThe push refers to repository [registry.example.com/admin/demo]\n7bff100f35cb: Pushed\n1: digest: sha256:3d2e482b82608d153a374df3357c0291589a61cc194ec4a9ca2381073a17f58e size: 528\nSigning and pushing trust metadata\nEnter passphrase for signer key with ID 8ae710e:\nSuccessfully signed registry.example.com/admin/demo:1\n```\n\n----------------------------------------\n\nTITLE: Using Project Name Flag in Docker Compose\nDESCRIPTION: Example of using the `-p` flag to specify a project name in Docker Compose. The example shows how to check the status of containers and view logs with a custom project name.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -p my_project ps -a\nNAME                 SERVICE    STATUS     PORTS\nmy_project_demo_1    demo       running\n\n$ docker compose -p my_project logs\ndemo_1  | PING localhost (127.0.0.1): 56 data bytes\ndemo_1  | 64 bytes from 127.0.0.1: seq=0 ttl=64 time=0.095 ms\n```\n\n----------------------------------------\n\nTITLE: Calling OpenAI API from Host using TCP\nDESCRIPTION: Example bash script showing how to call the OpenAI-compatible chat completions endpoint from the host using TCP instead of a Docker socket.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\n\tcurl http://localhost:12434/engines/llama.cpp/v1/chat/completions \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n        \"model\": \"ai/smollm2\",\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful assistant.\"\n            },\n            {\n                \"role\": \"user\",\n                \"content\": \"Please write 500 words about the fall of Rome.\"\n            }\n        ]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Docker Swarm Task via API\nDESCRIPTION: Example of making a GET request to the Docker API to retrieve detailed information about a specific task in a Swarm cluster using its ID. The response includes comprehensive information about the task's configuration and current status.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_107\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/tasks/0kzzo1i0y4jz6027t0k7aezc7 HTTP/1.1\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ID\": \"0kzzo1i0y4jz6027t0k7aezc7\",\n  \"Version\": {\n    \"Index\": 71\n  },\n  \"CreatedAt\": \"2016-06-07T21:07:31.171892745Z\",\n  \"UpdatedAt\": \"2016-06-07T21:07:31.376370513Z\",\n  \"Spec\": {\n    \"ContainerSpec\": {\n      \"Image\": \"redis\"\n    },\n    \"Resources\": {\n      \"Limits\": {},\n      \"Reservations\": {}\n    },\n    \"RestartPolicy\": {\n      \"Condition\": \"any\",\n      \"MaxAttempts\": 0\n    },\n    \"Placement\": {}\n  },\n  \"ServiceID\": \"9mnpnzenvg8p8tdbtq4wvbkcz\",\n  \"Slot\": 1,\n  \"NodeID\": \"60gvrl6tm78dmak4yl7srz94v\",\n  \"Status\": {\n    \"Timestamp\": \"2016-06-07T21:07:31.290032978Z\",\n    \"State\": \"running\",\n    \"Message\": \"started\",\n    \"ContainerStatus\": {\n      \"ContainerID\": \"e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035\",\n      \"PID\": 677\n    }\n  },\n  \"DesiredState\": \"running\",\n  \"NetworksAttachments\": [\n    {\n      \"Network\": {\n        \"ID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n        \"Version\": {\n          \"Index\": 18\n        },\n        \"CreatedAt\": \"2016-06-07T20:31:11.912919752Z\",\n        \"UpdatedAt\": \"2016-06-07T21:07:29.955277358Z\",\n        \"Spec\": {\n          \"Name\": \"ingress\",\n          \"Labels\": {\n            \"com.docker.swarm.internal\": \"true\"\n          },\n          \"DriverConfiguration\": {},\n          \"IPAMOptions\": {\n            \"Driver\": {},\n            \"Configs\": [\n              {\n                \"Subnet\": \"10.255.0.0/16\",\n                \"Gateway\": \"10.255.0.1\"\n              }\n            ]\n          }\n        },\n        \"DriverState\": {\n          \"Name\": \"overlay\",\n          \"Options\": {\n            \"com.docker.network.driver.overlay.vxlanid_list\": \"256\"\n          }\n        },\n        \"IPAMOptions\": {\n          \"Driver\": {\n            \"Name\": \"default\"\n          },\n          \"Configs\": [\n            {\n              \"Subnet\": \"10.255.0.0/16\",\n              \"Gateway\": \"10.255.0.1\"\n            }\n          ]\n        }\n      },\n      \"Addresses\": [\n        \"10.255.0.10/16\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Service Status Output\nDESCRIPTION: Sample output from kubectl showing the services running in the Kubernetes cluster. The output shows the default Kubernetes service and the NodePort service exposing port 8080 through node port 30001.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/deploy.md#2025-04-11_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nNAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE\nkubernetes           ClusterIP   10.96.0.1       <none>        443/TCP          23h\nservice-entrypoint   NodePort    10.99.128.230   <none>        8080:30001/TCP   75s\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Stack\nDESCRIPTION: Command to stop the running Docker Compose stack. This ensures a clean slate before starting the new configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration for Vote Service in Compose\nDESCRIPTION: YAML snippet showing the build configuration for the vote service in the Compose file. It specifies the build context and target stage to use for development.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  vote:\n    build:\n      context: ./vote # Build context\n      target: dev # Dockerfile stage\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Repository to GitHub\nDESCRIPTION: Series of Git commands to stage all changes, commit them with a message, and push to the main branch of the GitHub repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/configure-ci-cd.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git add -A\n$ git commit -m \"my commit\"\n$ git push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Docker Image History Output\nDESCRIPTION: This is an example output of the 'docker image history' command, showing the layers of the image, their creation times, sizes, and the commands used to create each layer.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nIMAGE          CREATED         CREATED BY                                      SIZE      COMMENT\nf279389d5f01   8 seconds ago   CMD [\"node\" \"./src/index.js\"]                   0B        buildkit.dockerfile.v0\n<missing>      8 seconds ago   EXPOSE map[3000/tcp:{}]                         0B        buildkit.dockerfile.v0 \n<missing>      8 seconds ago   WORKDIR /app                                    8.19kB    buildkit.dockerfile.v0\n<missing>      4 days ago      /bin/sh -c #(nop)  CMD [\"node\"]                 0B\n<missing>      4 days ago      /bin/sh -c #(nop)  ENTRYPOINT [\"docker-entry…   0B\n<missing>      4 days ago      /bin/sh -c #(nop) COPY file:4d192565a7220e13…   20.5kB\n<missing>      4 days ago      /bin/sh -c apk add --no-cache --virtual .bui…   7.92MB\n<missing>      4 days ago      /bin/sh -c #(nop)  ENV YARN_VERSION=1.22.19     0B\n<missing>      4 days ago      /bin/sh -c addgroup -g 1000 node     && addu…   126MB\n<missing>      4 days ago      /bin/sh -c #(nop)  ENV NODE_VERSION=20.12.0     0B\n<missing>      2 months ago    /bin/sh -c #(nop)  CMD [\"/bin/sh\"]              0B\n<missing>      2 months ago    /bin/sh -c #(nop) ADD file:d0764a717d1e9d0af…   8.42MB\n```\n\n----------------------------------------\n\nTITLE: Installing a Docker Extension via CLI\nDESCRIPTION: Command for installing a Docker extension directly using the Docker CLI. This approach allows users to install extensions without previewing them first.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/share.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker extension install my/awesome-extension:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Networks in Docker Compose\nDESCRIPTION: This snippet shows how to configure custom networks in Docker Compose. It includes examples of creating networks and connecting services to them.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/_default/single.markdown.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    networks:\n      - frontend\n      - backend\n\nnetworks:\n  frontend:\n    name: custom_frontend\n    driver: bridge\n  backend:\n    driver: bridge\n```\n\n----------------------------------------\n\nTITLE: Defining Options for Docker Compose Pause Command in Markdown\nDESCRIPTION: This snippet defines the options available for the 'docker compose pause' command using a Markdown table. It includes the option name, type, default value, and description.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_pause.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type   | Default | Description                     |\n|:------------|:-------|:--------|:--------------------------------|\n| `--dry-run` | `bool` |         | Execute command in dry run mode |\n```\n\n----------------------------------------\n\nTITLE: Creating Python .gitignore File\nDESCRIPTION: A standard .gitignore file for Python projects that excludes common Python-related files and directories from version control, including bytecode files, cache directories, and virtual environments.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/containerize.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Users Group and Adding Current User\nDESCRIPTION: PowerShell script to create the docker-users group and add the current user to it. This is a workaround for MDM deployments where the docker-users group isn't automatically populated with the user's account.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/faq.md#2025-04-11_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$Group = \"docker-users\"\n$CurrentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name\n\n# Create the group\nNew-LocalGroup -Name $Group\n\n# Add the user to the group\nAdd-LocalGroupMember -Group $Group -Member $CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Disabling Docker Scout for a Repository in a Specific Registry\nDESCRIPTION: This command disables Docker Scout on a specific repository in a named registry. The --registry flag specifies which container registry to target.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_disable.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout repo disable my/repository --registry 123456.dkr.ecr.us-east-1.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Scout CLI Documentation\nDESCRIPTION: YAML configuration block that defines metadata and layout settings for the Docker Scout enroll command documentation page. Specifies the data folder, file name, aliases for URL routing, page title, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/scout/enroll.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: scout-cli\ndatafile: docker_scout_enroll\naliases:\n- /engine/reference/commandline/scout_enroll\ntitle: docker scout enroll\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Swarm Join API Response Example\nDESCRIPTION: Response from the Docker API when successfully joining a swarm. A 200 status code with an empty response body indicates successful operation.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_96\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 0\nContent-Type: text/plain; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Tagging Docker Image for Push\nDESCRIPTION: Command to tag an existing Docker image with a new name for pushing to Docker Hub. Replace YOUR-USER-NAME with your Docker ID.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/04_sharing_app.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker tag getting-started YOUR-USER-NAME/getting-started\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Mode in Docker Buildx Bake (HCL)\nDESCRIPTION: Shows how to set the network mode for a build target using the 'network' attribute. It explains the available options and security considerations.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_25\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  # make sure this build does not access internet\n  network = \"none\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image from Dockerfile via API\nDESCRIPTION: This snippet shows how to build a Docker image from a Dockerfile using the API. It includes the request format, example response, and details on various query parameters and headers that can be used to customize the build process.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_37\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/build HTTP/1.1\nContent-Type: application/x-tar\n\n{{ TAR STREAM }}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\"stream\": \"Step 1/5...\"}\n{\"stream\": \"...\"}\n{\"error\": \"Error...\", \"errorDetail\": {\"code\": 123, \"message\": \"Error...\"}}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Container Stats Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the Docker container stats documentation page. It specifies the data folder and file, sets the page title, defines URL aliases for different versions of the command, and sets the layout type.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/stats.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_container_stats\ntitle: docker container stats\naliases:\n- /edge/engine/reference/commandline/container_stats/\n- /engine/reference/commandline/container_stats/\n- /engine/reference/commandline/stats/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Build Invocation ID in SLSA Provenance\nDESCRIPTION: Example of the 'metadata.buildInvocationID' field which provides a unique identifier for the build invocation. This ID is shared across all platform versions when building a multi-platform image in a single build request.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n    \"metadata\": {\n      \"buildInvocationID\": \"rpv7a389uzil5lqmrgwhijwjz\",\n      ...\n    },\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Docker Engine API v1.36 Documentation\nDESCRIPTION: YAML front matter that configures the metadata for the Docker Engine API v1.36 reference documentation. It sets the linkTitle to 'v1.36', specifies the full title as 'Docker Engine API v1.36 reference', and defines an alias path for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.36.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.36\ntitle: Docker Engine API v1.36 reference\naliases:\n  - /engine/api/v1.36/\n---\n```\n\n----------------------------------------\n\nTITLE: Git Labels JSON Example for Buildx\nDESCRIPTION: Shows the format of Git-based labels that can be added to images. These labels provide information about the source repository, commit revision, and Dockerfile location.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n  \"Labels\": {\n    \"com.docker.image.source.entrypoint\": \"Dockerfile\",\n    \"org.opencontainers.image.revision\": \"5734329c6af43c2ae295010778cd308866b95d9b\",\n    \"org.opencontainers.image.source\": \"git@github.com:foo/bar.git\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Checking MountFlags Configuration for Docker Service\nDESCRIPTION: This command displays the current value of MountFlags property for the docker.service. It's important for troubleshooting container startup issues when upgrading to Docker Engine 18.09 where containerd is managed by systemd instead of the Docker engine daemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/18.09.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl show --property=MountFlags docker.service\nMountFlags=\n```\n\n----------------------------------------\n\nTITLE: Example of volume merging with extends in Docker Compose\nDESCRIPTION: Shows how volume definitions are merged when using extends. The main service's volume definition overrides the extended service's volume that targets the same container path.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  common:\n    image: busybox\n    volumes:\n      - common-volume:/var/lib/backup/data:rw\n  cli:\n    extends:\n      service: common\n    volumes:\n      - cli-volume:/var/lib/backup/data:ro\n```\n\n----------------------------------------\n\nTITLE: Navigating to Container Logs in Docker Desktop UI\nDESCRIPTION: Example showing how to navigate to a specific container's logs view using the desktopUI.navigate API, including error handling and user feedback via toast notifications.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/dashboard-routes-navigation.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst id = '8c7881e6a107';\ntry {\n  await ddClient.desktopUI.navigate.viewContainerLogs(id);\n} catch (e) {\n  console.error(e);\n  ddClient.desktopUI.toast.error(\n    `Failed to navigate to logs for container \"${id}\".`\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Create Volume API Response in Docker\nDESCRIPTION: HTTP response from creating a volume, showing detailed information about the created volume including name, driver, mountpoint, and labels.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_66\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Type: application/json\n\n{\n  \"Name\": \"tardis\",\n  \"Driver\": \"custom\",\n  \"Mountpoint\": \"/var/lib/docker/volumes/tardis\",\n  \"Status\": {\n    \"hello\": \"world\"\n  },\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Scope\": \"local\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Host Binary Command Output\nDESCRIPTION: Shows how to execute a host binary command while streaming its output with error handling and exit code monitoring.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/backend.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.extension.host.cli.exec(\"kubectl\", [\"-h\"], {\n  stream: {\n    onOutput(data: { stdout: string } | { stderr: string }): void {\n      if (data.stdout) {\n        console.error(data.stdout);\n      } else {\n        console.log(data.stderr);\n      }\n    },\n    onError(error: any): void {\n      console.error(error);\n    },\n    onClose(exitCode: number): void {\n      console.log(\"onClose with exit code \" + exitCode);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Calling OpenAI API from Within a Container\nDESCRIPTION: Example bash script showing how to call the OpenAI-compatible chat completions endpoint from within a Docker container using curl.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\ncurl http://model-runner.docker.internal/engines/llama.cpp/v1/chat/completions \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\n        \"model\": \"ai/smollm2\",\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful assistant.\"\n            },\n            {\n                \"role\": \"user\",\n                \"content\": \"Please write 500 words about the fall of Rome.\"\n            }\n        ]\n    }'\n```\n\n----------------------------------------\n\nTITLE: Mounting Files from Linux Filesystem in Docker\nDESCRIPTION: Examples of Docker volume mounting commands showing how to properly bind-mount files from Linux filesystem for better performance. Includes an example of what to avoid (mounting from Windows) and the recommended approach (mounting from Linux home directory).\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/wsl/best-practices.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v <host-path>:<container-path>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v /mnt/c/users:/users\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v ~/my-project:/sources <my-image>\n```\n\n----------------------------------------\n\nTITLE: Using Bind Mounts with Docker Run Commands\nDESCRIPTION: Examples of how to use bind mounts when running containers, demonstrating both the -v flag and --mount flag approaches to mount host directories into containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# bind mount using the -v flag\ndocker run -v $(pwd):/path/in/container image-name\n# bind mount using the --mount flag\ndocker run --mount=type=bind,src=.,dst=/path/in/container image-name\n```\n\n----------------------------------------\n\nTITLE: HTML Comment with Source Repository Information\nDESCRIPTION: HTML comment indicating that the page is automatically generated from Docker's source code and providing instructions for suggesting changes to the text through GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/bake.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/buildx\n-->\n```\n\n----------------------------------------\n\nTITLE: Running a Bootstrap Docker Daemon Instance\nDESCRIPTION: Example command for running a separate 'bootstrap' instance of the Docker daemon without network configuration. This demonstrates how to configure a daemon with separate paths and settings to avoid conflicts.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dockerd \\\n        -H unix:///var/run/docker-bootstrap.sock \\\n        -p /var/run/docker-bootstrap.pid \\\n        --iptables=false \\\n        --ip-masq=false \\\n        --bridge=none \\\n        --data-root=/var/lib/docker-bootstrap \\\n        --exec-root=/var/run/docker-bootstrap\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Trust Inspect Documentation\nDESCRIPTION: YAML front matter that configures the metadata for the Docker trust inspect documentation page. It specifies the data folder, data file, title, aliases for URL redirects, and the layout template to use.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/trust/inspect.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_trust_inspect\ntitle: docker trust inspect\naliases:\n- /edge/engine/reference/commandline/trust_inspect/\n- /engine/reference/commandline/trust_inspect/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Network Inspect Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the docker network inspect command documentation page, including the data folder, data file name, title, URL aliases for different versions of the documentation, and the layout template to use.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/network/inspect.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_network_inspect\ntitle: docker network inspect\naliases:\n- /edge/engine/reference/commandline/network_inspect/\n- /engine/reference/commandline/network_inspect/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Old Docker Packages on Fedora\nDESCRIPTION: This command removes any previously installed Docker packages that might conflict with the official Docker Engine installation. It's a necessary prerequisite step to ensure a clean installation environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/fedora.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-selinux \\\n                  docker-engine-selinux \\\n                  docker-engine\n```\n\n----------------------------------------\n\nTITLE: Listing Running Containers with Docker Compose PS\nDESCRIPTION: Basic usage of the docker compose ps command to list running containers for a Compose project, showing container name, image, command, service, creation time, status, and port mappings.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps\nNAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS\nexample-foo-1   alpine    \"/entrypoint.…\"   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp\n```\n\n----------------------------------------\n\nTITLE: Configuring Btrfs Minimum Space in Docker Daemon\nDESCRIPTION: Sets the minimum size when creating Btrfs subvolumes for containers. This ensures that when using disk quotas with the --storage-opt size option, the size can't be smaller than the specified minimum.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dockerd -s btrfs --storage-opt btrfs.min_space=10G\n```\n\n----------------------------------------\n\nTITLE: Defining a Remote Bake File with Local Context\nDESCRIPTION: HCL Bake definition that uses the current working directory as its build context with the 'cwd://' prefix. It includes an inline Dockerfile that copies the local files into the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#2025-04-11_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  context = \"cwd://\"\n  dockerfile-inline = <<EOT\nFROM alpine\nWORKDIR /src\nCOPY . .\nRUN ls -l && stop\nEOT\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend Server Natively\nDESCRIPTION: Series of commands to navigate to the client directory, install dependencies, and start the development server for the frontend component.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\ncd client\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Go Tests with Specific Target Stage\nDESCRIPTION: This command builds a Docker image targeting the test stage of a multi-stage Dockerfile. It uses flags to ensure tests always run and to display the build output.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-tests.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -f Dockerfile.multistage -t docker-gs-ping-test --progress plain --no-cache --target run-test-stage .\n```\n\n----------------------------------------\n\nTITLE: Using Different Authentication for Multiple Git Hosts\nDESCRIPTION: Command demonstrating how to specify different authentication parameters for multiple Git hosts by using hostname suffixes on secret IDs.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/secrets.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ export GITLAB_TOKEN=$(cat gitlab-token.txt)\n$ export GERRIT_TOKEN=$(cat gerrit-username-password.txt)\n$ export GERRIT_SCHEME=basic\n$ docker build \\\n  --secret id=GIT_AUTH_TOKEN.gitlab.com,env=GITLAB_TOKEN \\\n  --secret id=GIT_AUTH_TOKEN.gerrit.internal.example,env=GERRIT_TOKEN \\\n  --secret id=GIT_AUTH_HEADER.gerrit.internal.example,env=GERRIT_SCHEME \\\n  https://gitlab.com/example/todo-app.git\n```\n\n----------------------------------------\n\nTITLE: Persisting Kubeconfig in Docker Volume using TypeScript\nDESCRIPTION: Saves kubeconfig data to a Docker volume using alpine container for persistent storage.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/guides/kubernetes.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst kubeConfig = await ddClient.extension.host?.cli.exec(\"kubectl\", [\n  \"config\",\n  \"view\",\n  \"--raw\",\n  \"--minify\",\n  \"--context\",\n  \"docker-desktop\",\n]);\nif (kubeConfig?.stderr) {\n  console.log(\"error\", kubeConfig?.stderr);\n  return false;\n}\n\nawait ddClient.docker.cli.exec(\"run\", [\n  \"--rm\",\n  \"-v\",\n  \"my-vol:/tmp\",\n  \"alpine\",\n  \"/bin/sh\",\n  \"-c\",\n  `\"touch /tmp/.kube/config && echo '${kubeConfig?.stdout}' > /tmp/.kube/config\"`,\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Compose with a File in Another Directory\nDESCRIPTION: An example command showing how to use docker compose with a configuration file that is located in a different directory using the -f flag to specify the absolute path.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f ~/sandbox/rails/compose.yaml pull db\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Run with Manual Port Mapping\nDESCRIPTION: Demonstrates manual port mapping using --publish/-p flags to specify exact port bindings.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run --publish 8080:80 -p 2022:22 -p 127.0.0.1:2021:21 web python manage.py shell\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Manifest Remove Command Documentation\nDESCRIPTION: YAML front matter defining metadata for the Docker manifest remove command documentation page, including data folder, file name, title, layout, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/manifest/rm.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_manifest_rm\ntitle: docker manifest rm\nlayout: cli\naliases:\n- /engine/reference/commandline/manifest_rm/\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Nodes\nDESCRIPTION: Command to verify Kubernetes installation by listing available nodes in the cluster\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/kubernetes.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get nodes\nNAME                 STATUS    ROLES            AGE       VERSION\ndocker-desktop       Ready     control-plane    3h        v1.29.1\n```\n\n----------------------------------------\n\nTITLE: Defining Build Secrets in Docker Buildx Bake (HCL)\nDESCRIPTION: Demonstrates how to define secrets for use in builds using the 'secret' attribute. It includes examples of environment variable and file-based secrets.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_30\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"HOME\" {\n  default = null\n}\n\ntarget \"default\" {\n  secret = [\n    { type = \"env\", id = \"KUBECONFIG\" },\n    { type = \"file\", id = \"aws\", src = \"${HOME}/.aws/credentials\" },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Compose Run Documentation\nDESCRIPTION: This YAML frontmatter defines metadata for the 'docker compose run' command documentation. It specifies the data folder, file name, title, aliases for redirects, and layout template to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/run.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_run\ntitle: docker compose run\naliases:\n- /compose/reference/run/\n- /engine/reference/commandline/compose_run/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images via API\nDESCRIPTION: This snippet demonstrates how to list Docker images using the API. It includes examples of both basic and digest-based requests, along with their corresponding JSON responses. The API supports various query parameters for filtering and customizing the output.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_36\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/images/json?all=0 HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n     \"RepoTags\": [\n       \"ubuntu:12.04\",\n       \"ubuntu:precise\",\n       \"ubuntu:latest\"\n     ],\n     \"Id\": \"8dbd9e392a964056420e5d58ca5cc376ef18e2de93b5cc90e868a1bbc8318c1c\",\n     \"Created\": 1365714795,\n     \"Size\": 131506275,\n     \"VirtualSize\": 131506275,\n     \"Labels\": {}\n  },\n  {\n     \"RepoTags\": [\n       \"ubuntu:12.10\",\n       \"ubuntu:quantal\"\n     ],\n     \"ParentId\": \"27cf784147099545\",\n     \"Id\": \"b750fe79269d2ec9a3c593ef05b4332b1d1a02a62b4accb2c21d589ff2f5f2dc\",\n     \"Created\": 1364102658,\n     \"Size\": 24653,\n     \"VirtualSize\": 180116135,\n     \"Labels\": {\n        \"com.example.version\": \"v1\"\n     }\n  }\n]\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/images/json?digests=1 HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    \"Created\": 1420064636,\n    \"Id\": \"4986bf8c15363d1c5d15512d5266f8777bfba4974ac56e3270e7760f6f0a8125\",\n    \"ParentId\": \"ea13149945cb6b1e746bf28032f02e9b5a793523481a0a18645fc77ad53c4ea2\",\n    \"RepoDigests\": [\n      \"localhost:5000/test/busybox@sha256:cbbf2f9a99b47fc460d422812b6a5adff7dfee951d8fa2e4a98caa0382cfbdbf\"\n    ],\n    \"RepoTags\": [\n      \"localhost:5000/test/busybox:latest\",\n      \"playdate:latest\"\n    ],\n    \"Size\": 0,\n    \"VirtualSize\": 2429728,\n    \"Labels\": {}\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Local Cache Directory Structure\nDESCRIPTION: This snippet shows how to inspect the contents of a local cache directory, revealing the OCI image layout structure.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/local.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ ls cache\nblobs  index.json  ingest\n$ cat cache/index.json | jq\n{\n  \"schemaVersion\": 2,\n  \"manifests\": [\n    {\n      \"mediaType\": \"application/vnd.oci.image.index.v1+json\",\n      \"digest\": \"sha256:6982c70595cb91769f61cd1e064cf5f41d5357387bab6b18c0164c5f98c1f707\",\n      \"size\": 1560,\n      \"annotations\": {\n        \"org.opencontainers.image.ref.name\": \"latest\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Service with systemctl\nDESCRIPTION: Command to stop the Docker service using systemctl before configuring the VFS storage driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/vfs-driver.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl stop docker\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-level Image Annotations in Docker Bake\nDESCRIPTION: Shows how to add annotations to multiple levels (index and manifest) of an image using prefixed notation in the annotations attribute.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  output = [{ type = \"image\", name = \"foo\" }]\n  annotations = [\"index,manifest:org.opencontainers.image.authors=dvdksn\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Container in Docker API\nDESCRIPTION: API call to rename a Docker container by its ID to a new name specified in the 'name' query parameter.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/rename?name=new_name HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Updates v1.38\nDESCRIPTION: Documents changes to task endpoints for network attachment specifications.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/version-history.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `GET /tasks` and `GET /tasks/{id}` now return a `NetworkAttachmentSpec` field\n```\n\n----------------------------------------\n\nTITLE: IPAM Configuration Example\nDESCRIPTION: Shows detailed IPAM (IP Address Management) configuration with custom subnet, IP range, gateway, and auxiliary addresses.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/networks.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  mynet1:\n    ipam:\n      driver: default\n      config:\n        - subnet: 172.28.0.0/16\n          ip_range: 172.28.5.0/24\n          gateway: 172.28.5.254\n          aux_addresses:\n            host1: 172.28.1.5\n            host2: 172.28.1.6\n            host3: 172.28.1.7\n      options:\n        foo: bar\n        baz: \"0\"\n```\n\n----------------------------------------\n\nTITLE: SSH Authentication Setup for Remote Builder\nDESCRIPTION: Workflow showing how to set up SSH authentication for connecting to remote builder nodes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/configure-builder.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  buildx:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up SSH\n        uses: MrSquaare/ssh-setup-action@2d028b70b5e397cf8314c6eaea229a6c3e34977a # v3.1.0\n        with:\n          host: graviton2\n          private-key: ${{ secrets.SSH_PRIVATE_KEY }}\n          private-key-name: aws_graviton2\n      \n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n        with:\n          endpoint: ssh://me@graviton2\n```\n\n----------------------------------------\n\nTITLE: Executing Commands with Promise Return in Docker Extensions\nDESCRIPTION: This function signature allows executing a command and receiving the result as a Promise. It takes the command, arguments, and optional configuration, returning a Promise that resolves with the execution result once the command completes.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Exec.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nExec(cmd: string, args: string[], options?: ExecOptions): Promise<ExecResult>\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker configuration with ZFS driver\nDESCRIPTION: Command output showing Docker info with ZFS storage driver details including pool health, space usage, and availability.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/zfs-driver.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo docker info\n  Containers: 0\n   Running: 0\n   Paused: 0\n   Stopped: 0\n  Images: 0\n  Server Version: 17.03.1-ce\n  Storage Driver: zfs\n   Zpool: zpool-docker\n   Zpool Health: ONLINE\n   Parent Dataset: zpool-docker\n   Space Used By Parent: 249856\n   Space Available: 103498395648\n   Parent Quota: no\n   Compression: off\n<...>\n```\n\n----------------------------------------\n\nTITLE: Removing a Key from targets/releases Delegation\nDESCRIPTION: This command removes a specific key from the targets/releases delegation using the Notary CLI, which is part of the key rotation process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ notary delegation remove registry.example.com/admin/demo targets/releases 1091060d7bfd938dfa5be703fa057974f9322a4faef6f580334f3d6df44c02d1 --publish\n\nAuto-publishing changes to registry.example.com/admin/demo\nEnter username: admin\nEnter password: \nEnter passphrase for targets key with ID b0014f8: \nSuccessfully published changes for repository registry.example.com/admin/demo\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Network Create Documentation\nDESCRIPTION: YAML front matter configuration block that defines metadata for the Docker network create command documentation page, including data folder location, data file name, page title and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/network/create.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_network_create\ntitle: docker network create\naliases:\n- /edge/engine/reference/commandline/network_create/\n- /engine/reference/commandline/network_create/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Secrets\nDESCRIPTION: This command lists the Docker secrets that have been created, showing their IDs, names, and creation times.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker secret ls\n\nID                          NAME                  CREATED             UPDATED\n2hvoi9mnnaof7olr3z5g3g7fp   site.key       58 seconds ago      58 seconds ago\naya1dh363719pkiuoldpter4b   site.crt       24 seconds ago      24 seconds ago\nzoa5df26f7vpcoz42qf2csth8   site.conf      11 seconds ago      11 seconds ago\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Bind Mount (Mac/Linux)\nDESCRIPTION: Command to run a Node.js application in a Docker container with a bind mount for development. Sets up port mapping, working directory, and starts the development server with nodemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ndocker run -dp 127.0.0.1:3000:3000 \\\n    -w /app --mount type=bind,src=\"$(pwd)\",target=/app \\\n    node:18-alpine \\\n    sh -c \"yarn install && yarn run dev\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm\nDESCRIPTION: Initializes a Docker swarm on the first host, returning a join token for additional nodes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker swarm init\nSwarm initialized: current node (vz1mm9am11qcmo979tlrlox42) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join --token SWMTKN-1-5g90q48weqrtqryq4kj6ow0e8xm9wmv9o6vgqc5j320ymybd5c-8ex8j0bc40s6hgvy5ui5gl4gy 172.31.47.252:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n```\n\n----------------------------------------\n\nTITLE: Defining Port Ranges in Docker Compose\nDESCRIPTION: Example of specifying port ranges in a Docker Compose file using the ports directive. This allows mapping multiple sequential ports between the host and container, shown both for same-range and different-range mappings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nports:\n  - \"3000-3005\"\n  - \"9000-9001:8000-8001\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BlkioDeviceReadIOps in Docker Container\nDESCRIPTION: Sets a limit on read rate (IO per second) for a specific device. This configuration restricts how many read operations per second a container can perform on the specified block device.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"BlkioDeviceReadIOps\": [{\"Path\": \"/dev/sda\", \"Rate\": \"1000\"}]\n```\n\n----------------------------------------\n\nTITLE: Swarm Init API Response Example\nDESCRIPTION: Response from the Docker API when successfully initializing a new swarm. The response body contains the node ID, which is a unique identifier for the node in the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_94\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 28\nContent-Type: application/json\nDate: Thu, 01 Sep 2016 21:49:13 GMT\nServer: Docker/1.12.0 (linux)\n\n\"7v2t30z9blmxuhnyo6s4cpenp\"\n```\n\n----------------------------------------\n\nTITLE: Using volumes for data persistence between containers\nDESCRIPTION: Demonstrates how to create and use a volume to persist data between different container instances, allowing data to be shared even after containers are removed.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm --mount source=my_volume,target=/foo busybox \\\n  echo \"hello, volume!\" > /foo/hello.txt\n$ docker run --mount source=my_volume,target=/bar busybox\n  cat /bar/hello.txt\nhello, volume!\n```\n\n----------------------------------------\n\nTITLE: Creating Matrix Builds in Docker Buildx Bake (HCL)\nDESCRIPTION: Demonstrates how to use the 'matrix' attribute to create multiple build variants from a single target definition. It covers single-axis, multi-axis, and complex matrix configurations.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_24\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  name = \"app-${tgt}\"\n  matrix = {\n    tgt = [\"foo\", \"bar\"]\n  }\n  target = tgt\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  name = \"app-${tgt}-${replace(version, \".\", \"-\")}\"\n  matrix = {\n    tgt = [\"foo\", \"bar\"]\n    version = [\"1.0\", \"2.0\"]\n  }\n  target = tgt\n  args = {\n    VERSION = version\n  }\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  name = \"app-${item.tgt}-${replace(item.version, \".\", \"-\")}\"\n  matrix = {\n    item = [\n      {\n        tgt = \"foo\"\n        version = \"1.0\"\n      },\n      {\n        tgt = \"bar\"\n        version = \"2.0\"\n      }\n    ]\n  }\n  target = item.tgt\n  args = {\n    VERSION = item.version\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Volume Sharing Between Services in Docker Compose\nDESCRIPTION: Example showing how to share a volume named 'db-data' between a database service and a backup service. The volume is mounted at different paths in each container.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    image: example/database\n    volumes:\n      - db-data:/etc/data\n\n  backup:\n    image: backup-service\n    volumes:\n      - db-data:/var/lib/backup/data\n\nvolumes:\n  db-data:\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Engine from DEB Packages on Debian\nDESCRIPTION: Command to manually install Docker Engine using downloaded DEB packages. This method is useful when direct access to the apt repository is not available.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dpkg -i ./containerd.io_<version>_<arch>.deb \\\n  ./docker-ce_<version>_<arch>.deb \\\n  ./docker-ce-cli_<version>_<arch>.deb \\\n  ./docker-buildx-plugin_<version>_<arch>.deb \\\n  ./docker-compose-plugin_<version>_<arch>.deb\n```\n\n----------------------------------------\n\nTITLE: Named Multi-stage Dockerfile with Go Binary\nDESCRIPTION: Shows how to name build stages using AS keyword and reference them in COPY instructions for better maintainability.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/multi-stage.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM golang:{{% param \"example_go_version\" %}} AS build\nWORKDIR /src\nCOPY <<EOF /src/main.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"hello, world\")\n}\nEOF\nRUN go build -o /bin/hello ./main.go\n\nFROM scratch\nCOPY --from=build /bin/hello /bin/hello\nCMD [\"/bin/hello\"]\n```\n\n----------------------------------------\n\nTITLE: Mounting a Data Volume in a Docker Swarm Service\nDESCRIPTION: This command demonstrates how to create a Docker Swarm service with a data volume mounted into the container. It uses the --mount flag to specify the source volume name and destination path inside the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_37\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --mount src=<VOLUME-NAME>,dst=<CONTAINER-PATH> \\\n  --name myservice \\\n  <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Using Bind Mounts in Docker Compose\nDESCRIPTION: This YAML snippet demonstrates how to configure a bind mount in a Docker Compose file. It shows a single service named 'frontend' that uses a bind mount to map the ./static directory to /opt/app/static in the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: node:lts\n    volumes:\n      - type: bind\n        source: ./static\n        target: /opt/app/static\nvolumes:\n  myapp:\n```\n\n----------------------------------------\n\nTITLE: Docker Init Configuration Dialog\nDESCRIPTION: Interactive dialog showing the configuration options when using docker init to set up Docker assets for a Node.js application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker init\nWelcome to the Docker Init CLI!\n\nThis utility will walk you through creating the following files with sensible defaults for your project:\n  - .dockerignore\n  - Dockerfile\n  - compose.yaml\n  - README.Docker.md\n\nLet's get started!\n\n? What application platform does your project use? Node\n? What version of Node do you want to use? 18.0.0\n? Which package manager do you want to use? npm\n? What command do you want to use to start the app: node src/index.js\n? What port does your server listen on? 3000\n```\n\n----------------------------------------\n\nTITLE: Listening to Docker Events\nDESCRIPTION: Example of listening to Docker events for a specific container. The events are streamed as JSON objects that can be parsed and processed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/docker.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.docker.cli.exec(\n  \"events\",\n  [\"--format\", \"{{ json . }}\", \"--filter\", \"container=my-container\"],\n  {\n    stream: {\n      onOutput(data) {\n        if (data.stdout) {\n          const event = JSON.parse(data.stdout);\n          console.log(event);\n        } else {\n          console.log(data.stderr);\n        }\n      },\n      onClose(exitCode) {\n        console.log(\"onClose with exit code \" + exitCode);\n      },\n      splitOutputLines: true,\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Published Ports on a Service in Docker Swarm\nDESCRIPTION: Lists all services to verify that the port publication update was successful, showing the newly published port in the PORTS column of the output.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker service ls\n\nID                  NAME                MODE                REPLICAS            IMAGE                                                                                             PORTS\n4nhxl7oxw5vz        my_web              replicated          1/1                 docker.io/library/nginx@sha256:41ad9967ea448d7c2b203c699b429abe1ed5af331cd92533900c6d77490e0268   *:0->80/tcp\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Trust Documentation\nDESCRIPTION: This YAML snippet defines the metadata for the 'docker trust' command documentation. It specifies the data folder, file name, title, aliases for URL routing, and the layout to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/trust/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_trust\ntitle: docker trust\naliases:\n- /edge/engine/reference/commandline/trust/\n- /engine/reference/commandline/trust/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Image Pull Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the docker image pull command documentation page, including data folder, data file, title, aliases for different URL paths, and layout type.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/image/pull.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_image_pull\ntitle: docker image pull\naliases:\n- /edge/engine/reference/commandline/image_pull/\n- /engine/reference/commandline/image_pull/\n- /engine/reference/commandline/pull/\n- /reference/cli/docker/pull/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Repository to GitHub in Bash\nDESCRIPTION: Series of Git commands to stage all changes, commit them, and push the local repository to GitHub. This is used to initialize the GitHub repository with the local project files.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/configure-ci-cd.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git add -A\n$ git commit -m \"my commit\"\n$ git push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Building Wasmtime containerd shim from source\nDESCRIPTION: Docker build command that creates a Dockerfile on-the-fly to build the Wasmtime containerd shim from source and export it to the local filesystem.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/alternative-runtimes.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --output . - <<EOF\nFROM rust:latest as build\nRUN cargo install \\\n    --git https://github.com/containerd/runwasi.git \\\n    --bin containerd-shim-wasmtime-v1 \\\n    --root /out \\\n    containerd-shim-wasmtime\nFROM scratch\nCOPY --from=build /out/bin /\nEOF\n```\n\n----------------------------------------\n\nTITLE: Multi-Process Wrapper Script Implementation in Bash\nDESCRIPTION: A wrapper script that launches multiple processes in the background and monitors their execution. The script starts two processes concurrently and exits with the status of whichever process exits first.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/multi-service_container.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Start the first process\n./my_first_process &\n\n# Start the second process\n./my_second_process &\n\n# Wait for any process to exit\nwait -n\n\n# Exit with status of process that exited first\nexit $?\n```\n\n----------------------------------------\n\nTITLE: Implementing Secrets in Docker Compose Configuration\nDESCRIPTION: Final Docker Compose configuration that implements secure password handling using Docker secrets for both server and database services.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    environment:\n      NODE_ENV: production\n      POSTGRES_HOST: db\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD_FILE: /run/secrets/db-password\n      POSTGRES_DB: example\n    ports:\n      - 3000:3000\n    depends_on:\n      db:\n        condition: service_healthy\n    secrets:\n      - db-password\n```\n\n----------------------------------------\n\nTITLE: Creating registry.json with PowerShell for Docker Desktop on Windows\nDESCRIPTION: This PowerShell command creates a registry.json file in the ProgramData directory to enforce organization sign-in for Docker Desktop. It requires administrator privileges and accepts an organization name that must be in lowercase.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nPS>  Set-Content /ProgramData/DockerDesktop/registry.json '{\"allowedOrgs\":[\"myorg\"]}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Gvisor Runtime with Options in daemon.json\nDESCRIPTION: Example configuration for the gvisor runtime using io.containerd.runsc.v1 shim. Sets TypeUrl and ConfigPath options to customize the runtime behavior.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtimes\": {\n    \"gvisor\": {\n      \"runtimeType\": \"io.containerd.runsc.v1\",\n      \"options\": {\n        \"TypeUrl\": \"io.containerd.runsc.v1.options\",\n        \"ConfigPath\": \"/etc/containerd/runsc.toml\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Shared Docker Image from Docker Hub\nDESCRIPTION: Command for other users to download and run the shared Docker image from Docker Hub. It maps port 80 of the container to port 80 on the host system.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/tensorflowjs.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -p 80:80 YOUR-USER-NAME/face-detection-tensorjs\n```\n\n----------------------------------------\n\nTITLE: Making HTTP POST Request with Docker Extension API\nDESCRIPTION: Illustrates how to perform an HTTP POST request to a backend service using the Docker Extension API. This method is marked for deprecation in favor of the 'post' method from HttpService.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/BackendV0.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.backend\n .post(\"/some/service\", { ... })\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Configuration Files\nDESCRIPTION: Configuration files for root CA and site certificate settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_16\n\nLANGUAGE: none\nCODE:\n```\n[root_ca]\nbasicConstraints = critical,CA:TRUE,pathlen:1\nkeyUsage = critical, nonRepudiation, cRLSign, keyCertSign\nsubjectKeyIdentifier=hash\n```\n\nLANGUAGE: none\nCODE:\n```\n[server]\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints = critical,CA:FALSE\nextendedKeyUsage=serverAuth\nkeyUsage = critical, digitalSignature, keyEncipherment\nsubjectAltName = DNS:localhost, IP:127.0.0.1\nsubjectKeyIdentifier=hash\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Docker Compose Kill Command in Console\nDESCRIPTION: This snippet shows the basic usage of the 'docker compose kill' command to stop running containers using the default SIGKILL signal.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_kill.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose kill\n```\n\n----------------------------------------\n\nTITLE: Mounting Docker Socket in Extension Backend Container YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to properly mount the Docker socket for an extension backend container running in the Docker Desktop VM. It uses /var/run/docker.sock.raw instead of the host filesystem socket to avoid permission issues.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/guides/use-docker-socket-from-backend.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myExtension:\n    image: ${DESKTOP_PLUGIN_IMAGE}\n    volumes:\n      - /var/run/docker.sock.raw:/var/run/docker.sock\n```\n\n----------------------------------------\n\nTITLE: Sample Compose File with Postgres Database and Web Service\nDESCRIPTION: A sample compose.yaml file defining two services: a database service using the postgres image and a web service built from a local Dockerfile. The web service depends on the database service.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_pull.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    image: postgres\n  web:\n    build: .\n    command: bundle exec rails s -p 3000 -b '0.0.0.0'\n    volumes:\n      - .:/myapp\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n```\n\n----------------------------------------\n\nTITLE: Recording Build Finish Time in SLSA Provenance\nDESCRIPTION: Example of the 'metadata.buildFinishedOn' field which records the timestamp when the build finished. This field is included in both min and max attestation modes.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n    \"metadata\": {\n      \"buildFinishedOn\": \"2021-11-17T15:01:00Z\",\n      ...\n    },\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Source Comment for Docker CLI Documentation\nDESCRIPTION: HTML comment indicating that the page is automatically generated from Docker's source code, with instructions on how to suggest changes by opening tickets or pull requests in the GitHub repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/image/pull.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Network Driver Options Configuration\nDESCRIPTION: Example showing how to configure network driver options for a service.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    networks:\n      app_net:\n        driver_opts:\n          com.docker.network.bridge.host_binding_ipv4: \"127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Services\nDESCRIPTION: Command to stop and remove all containers created by Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/containerize.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Recording Build Start Time in SLSA Provenance\nDESCRIPTION: Example of the 'metadata.buildStartedOn' field which records the timestamp when the build started. This field is included in both min and max attestation modes.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n    \"metadata\": {\n      \"buildStartedOn\": \"2021-11-17T15:00:00Z\",\n      ...\n    },\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Buildx Documentation\nDESCRIPTION: YAML frontmatter configuration that defines metadata for the Docker Buildx imagetools documentation page, including data folder, file name, title, layout and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/imagetools/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: buildx\ndatafile: docker_buildx_imagetools\ntitle: docker buildx imagetools\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_imagetools/\n```\n\n----------------------------------------\n\nTITLE: Container Wait Operation Example\nDESCRIPTION: HTTP request and response for waiting until a container stops and returns its exit code.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_33\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/16253994b7c4/wait HTTP/1.1\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"StatusCode\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Network Plugin Socket with curl\nDESCRIPTION: Makes a POST request to the Network plugin socket to get capabilities. The request is made to a Unix socket located at /var/run/docker/plugins with a specific plugin ID.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ curl -H \"Content-Type: application/json\" -XPOST -d '{}' --unix-socket /var/run/docker/plugins/45e00a7ce6185d6e365904c8bcf62eb724b1fe307e0d4e7ecc9f6c1eb7bcdb70/plugin.sock http:/NetworkDriver.GetCapabilities\n\n{\"Scope\":\"local\"}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images After Untagging\nDESCRIPTION: Command showing the Docker images after removing a tag, confirming that the image itself still exists with its remaining tag.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/build-images.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker images\nREPOSITORY               TAG               IMAGE ID       CREATED         SIZE\ndocker-rust-image        latest            8cae92a8fbd6   6 minutes ago   123MB\nrust                     latest            be5d294735c6   6 minutes ago   113MB\n```\n\n----------------------------------------\n\nTITLE: Configuring Ulimits in Docker Container\nDESCRIPTION: Sets resource limits in the container. This example configures the maximum number of open file descriptors (nofile) with both soft and hard limits.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{ \"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048 }\n```\n\n----------------------------------------\n\nTITLE: Pushing a Docker Image to Docker Hub\nDESCRIPTION: Command to push a tagged Docker image to Docker Hub, allowing others to access and run your JupyterLab environment. Requires Docker Hub credentials and a properly tagged image.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker push YOUR-USER-NAME/my-jupyter-image\n```\n\n----------------------------------------\n\nTITLE: Attaching VEX Document to Image as Attestation\nDESCRIPTION: Command to attach a VEX document to a Docker image as an attestation using Docker Scout. This is the recommended approach as it allows updating the VEX document later without rebuilding the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/create-exceptions-vex.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker scout attestation add \\\n  --file <cve-id>.vex.json \\\n  --predicate-type https://openvex.dev/ns/v0.2.0 \\\n  <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Updates v1.40\nDESCRIPTION: Documents changes to API endpoints including new ping behavior, service creation parameters, container specifications, and build configurations.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/version-history.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* The `/_ping` endpoint can now be accessed both using `GET` or `HEAD` requests\n* `GET /services` now returns `Sysctls` as part of the `ContainerSpec`\n* `POST /services/create` now accepts `Sysctls` as part of the `ContainerSpec`\n* `POST /containers/create` now accepts `DeviceRequests` as part of `HostConfig`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Dockerfile Comment Format\nDESCRIPTION: This snippet shows the correct format for Dockerfile comments that describe build stages and arguments. The comments immediately precede the FROM or ARG instructions and begin with the name of the stage or argument.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-definition-description.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\n# build-cli builds the CLI binary\nFROM alpine AS build-cli\n# VERSION controls the version of the program\nARG VERSION=1\n```\n\n----------------------------------------\n\nTITLE: Documentation Source Repository Comment in HTML\nDESCRIPTION: HTML comment block that informs readers the page is automatically generated from Docker's source code and provides guidance on how to suggest changes through GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/commit.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: EPSS Score Analysis\nDESCRIPTION: Shows vulnerability analysis with EPSS (Exploit Prediction Scoring System) scores and filtering\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves --epss nginx\n ✓ Provenance obtained from attestation\n ✓ SBOM obtained from attestation, 232 packages indexed\n ✓ Pulled\n ✗ Detected 23 vulnerable packages with a total of 39 vulnerabilities\n\n...\n\n ✗ HIGH CVE-2023-52425\n   https://scout.docker.com/v/CVE-2023-52425\n   Affected range  : >=2.5.0-1\n   Fixed version   : not fixed\n   EPSS Score      : 0.000510\n   EPSS Percentile : 0.173680\n```\n\n----------------------------------------\n\nTITLE: Using Docker Buildx Bake with a Specific File Path\nDESCRIPTION: Example of using the `--file` flag to specify the location of a Bake file when running `docker buildx bake`. This command also uses the `--print` flag to output the configuration without executing the build.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake --file ../docker/bake.hcl --print\n```\n\n----------------------------------------\n\nTITLE: Listing Container Processes with Docker API\nDESCRIPTION: Demonstrates how to list processes running inside a container using the top endpoint. This uses the ps command on Unix systems and returns process information in a structured format.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/top HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"Titles\" : [\n     \"UID\", \"PID\", \"PPID\", \"C\", \"STIME\", \"TTY\", \"TIME\", \"CMD\"\n   ],\n   \"Processes\" : [\n     [\n       \"root\", \"13642\", \"882\", \"0\", \"17:03\", \"pts/0\", \"00:00:00\", \"/bin/bash\"\n     ],\n     [\n       \"root\", \"13735\", \"13642\", \"0\", \"17:06\", \"pts/0\", \"00:00:00\", \"sleep 10\"\n     ]\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Scout Attestation Add Command Options Table\nDESCRIPTION: A markdown table showing the available options for the 'docker scout attestation add' command, including the option names, types, default values, and descriptions.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_attestation_add.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name               | Type          | Default | Description                             |\n|:-------------------|:--------------|:--------|:----------------------------------------|\n| `--file`           | `stringSlice` |         | File location of attestations to attach |\n| `--predicate-type` | `string`      |         | Predicate-type for attestations         |\n```\n\n----------------------------------------\n\nTITLE: Function Configuration Extension Example\nDESCRIPTION: Complex example showing how to use extensions to share common function configurations across multiple services.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/extension.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nx-function: &function\n labels:\n   function: \"true\"\n depends_on:\n   - gateway\n networks:\n   - functions\n deploy:\n   placement:\n     constraints:\n       - 'node.platform.os == linux'\nservices:\n nodeinfo:\n   <<: *function\n   image: functions/nodeinfo:latest\n   environment:\n     no_proxy: \"gateway\"\n     https_proxy: $https_proxy\n echoit:\n   <<: *function\n   image: functions/alpine:health\n   environment:\n     fprocess: \"cat\"\n     no_proxy: \"gateway\"\n     https_proxy: $https_proxy\n```\n\n----------------------------------------\n\nTITLE: Creating a Card Shortcode in Docker Docs\nDESCRIPTION: Example of using the card shortcode to create a navigational card with title, icon, link and description. This component creates an interactive element that links to the specified URL.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/cards.md#2025-04-11_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{</* card\n  title=\"Get your Docker on\"\n  icon=favorite\n  link=https://docs.docker.com/\n  description=\"Build, share, and run your apps with Docker\"\n*/>}}\n```\n\n----------------------------------------\n\nTITLE: Simple Bake File in HCL Format\nDESCRIPTION: An HCL representation of a basic Bake file that defines a variable with a default value, a default group targeting a webapp, and a webapp target with Dockerfile and tags configuration.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"TAG\" {\n  default = \"latest\"\n}\n\ngroup \"default\" {\n  targets = [\"webapp\"]\n}\n\ntarget \"webapp\" {\n  dockerfile = \"Dockerfile\"\n  tags = [\"docker.io/username/webapp:${TAG}\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Network Plugin Service\nDESCRIPTION: Creates a network using the plugin, deploys a service with multiple replicas, and demonstrates container scheduling\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create --driver=bboreham/weave2:latest globalnet\n\n$ docker network ls\nNETWORK ID          NAME                DRIVER                   SCOPE\nqlj7ueteg6ly        globalnet           bboreham/weave2:latest   swarm\n\n$ docker service create --network globalnet --name myservice --replicas=8 mrjana/simpleweb simpleweb\nw90drnfzw85nygbie9kb89vpa\n```\n\n----------------------------------------\n\nTITLE: Using Remote and Local Bake Files in GitHub Actions\nDESCRIPTION: YAML snippet for GitHub Actions workflow showing how to use both a remote Bake definition and a locally generated metadata Bake file with the docker/bake-action.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/remote-definition.md#2025-04-11_snippet_11\n\nLANGUAGE: yml\nCODE:\n```\n      - name: Build\n        uses: docker/bake-action@v6\n        with:\n          files: |\n            ./docker-bake.hcl\n            cwd://${{ steps.meta.outputs.bake-file }}\n          targets: build\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Config Create Documentation\nDESCRIPTION: YAML front matter that defines metadata for the Docker config create documentation page, including the data folder, file name, title, aliases for URL routing, and page layout.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/config/create.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_config_create\ntitle: docker config create\naliases:\n- /edge/engine/reference/commandline/config_create/\n- /engine/reference/commandline/config_create/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Images After Adding a New Tag\nDESCRIPTION: Output showing the result of listing images after adding a new tag to the docker-gs-ping image. Both tags reference the same IMAGE ID.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker image ls\n\nREPOSITORY                       TAG       IMAGE ID       CREATED         SIZE\ndocker-gs-ping                   latest    7f153fbcc0a8   6 minutes ago   1.11GB\ndocker-gs-ping                   v1.0      7f153fbcc0a8   6 minutes ago   1.11GB\n...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Watch Command Options Table\nDESCRIPTION: Markdown table defining the available options for the docker compose alpha watch command, including dry-run, no-up, and quiet flags with their descriptions.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_alpha_watch.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type | Default | Description                                   |\n|:------------|:-----|:--------|:----------------------------------------------|\n| `--dry-run` |      |         | Execute command in dry run mode               |\n| `--no-up`   |      |         | Do not build & start services before watching |\n| `--quiet`   |      |         | hide build output                             |\n```\n\n----------------------------------------\n\nTITLE: Setting per-interface sysctls in Docker network connection\nDESCRIPTION: Example of the new syntax for setting per-interface sysctl options when connecting a container to a network. This will be the only supported method in future releases.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--network name=mynet,driver-opt=com.docker.network.endpoint.sysctls=net.ipv4.conf.IFNAME.log_martians=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Bake as Default Builder in Docker Config\nDESCRIPTION: This JSON configuration shows how to set Bake as the default builder for Compose by editing the Docker config file. This eliminates the need to set the COMPOSE_BAKE environment variable for each build.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/dependent-images.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"plugins\": {\n    \"compose\": {\n      \"build\": \"bake\"\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying BuildKit's SLSA buildType Field in JSON\nDESCRIPTION: Example of the 'buildType' field which identifies the structure of the provenance content. This field is set to a specific URI and is included in both min and max attestation modes.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n    \"buildType\": \"https://mobyproject.org/buildkit@v1\",\n```\n\n----------------------------------------\n\nTITLE: Docker Context Use Command Syntax and Usage\nDESCRIPTION: This snippet shows the syntax and usage of the 'docker context use' command, which sets the default docker context. The command supports both a context name and an optional '--default' flag to make the context the default for new shells.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/context/use.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker context use [OPTIONS] CONTEXT\n```\n\n----------------------------------------\n\nTITLE: Staging, Committing, and Pushing Code to GitHub\nDESCRIPTION: Series of Git commands to stage all changes, commit them with a message, and push the local repository to GitHub's main branch.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/configure-ci-cd.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git add -A\n$ git commit -m \"my commit\"\n$ git push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Example Syslog Output with Custom Tag Template\nDESCRIPTION: Shows the resulting log output format when using a custom tag template '{{.ImageName}}/{{.Name}}/{{.ID}}' with the syslog driver. Demonstrates how template variables are rendered in the actual log output.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/log_tags.md#2025-04-11_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nAug  7 18:33:19 HOSTNAME hello-world/foobar/5790672ab6a0[9103]: Hello from Docker.\n```\n\n----------------------------------------\n\nTITLE: Creating a Service with Published Port in Docker Swarm\nDESCRIPTION: Command to create a Docker service with a published port where the target port is inside the container and the published port is bound on the routing mesh. If the published port is omitted, a random high-numbered port is assigned.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --name <SERVICE-NAME> \\\n  --publish published=<PUBLISHED-PORT>,target=<CONTAINER-PORT> \\\n  <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Creating Nginx Service with Overlay Network in Docker Swarm\nDESCRIPTION: Command to create a replicated Nginx service connected to a custom overlay network. The service publishes port 80 to the outside world and deploys 5 replicas across the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker service create \\\n  --name my-nginx \\\n  --publish target=80,published=80 \\\n  --replicas=5 \\\n  --network nginx-net \\\n  nginx\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon with Multiple Socket Types\nDESCRIPTION: Example showing how to configure the Docker daemon to listen on both TCP and Unix sockets and how to connect to either socket type.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dockerd -H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock &\n# Download an ubuntu image, use default Unix socket\n$ docker pull ubuntu\n# OR use the TCP port\n$ docker -H tcp://127.0.0.1:2375 pull ubuntu\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Container Rename Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker container rename command documentation page, including the data folder, file name, title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/rename.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_container_rename\ntitle: docker container rename\naliases:\n- /edge/engine/reference/commandline/container_rename/\n- /engine/reference/commandline/container_rename/\n- /engine/reference/commandline/rename/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Concrete Services Using Common Configuration\nDESCRIPTION: Example showing how multiple services can extend a common configuration while adding their own specific attributes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/extends.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    extends:\n      file: common.yaml\n      service: app\n    command: /code/run_web_app\n    ports:\n      - 8080:8080\n    depends_on:\n      - queue\n      - db\n\n  queue_worker:\n    extends:\n      file: common.yaml\n      service: app\n    command: /code/run_worker\n    depends_on:\n      - queue\n```\n\n----------------------------------------\n\nTITLE: Inspecting Kubernetes Resources Created by Buildx\nDESCRIPTION: Commands to inspect the deployments and pods created by the Docker Buildx Kubernetes driver in the dedicated namespace, showing the resources it manages in the cluster.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl -n buildkit get deployments\nNAME    READY   UP-TO-DATE   AVAILABLE   AGE\nkube0   1/1     1            1           32s\n\n$ kubectl -n buildkit get pods\nNAME                     READY   STATUS    RESTARTS   AGE\nkube0-6977cdcb75-k9h9m   1/1     Running   0          32s\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Volume Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker volume command documentation page, including the data folder structure, file name, page title, URL aliases, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/volume/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_volume\ntitle: docker volume\naliases:\n- /edge/engine/reference/commandline/volume/\n- /engine/reference/commandline/volume/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database Container\nDESCRIPTION: Uses the docker exec command to connect to the PostgreSQL database running inside the container for verification.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker exec -it db psql -U postgres\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic GitHub Actions Workflow for Docker\nDESCRIPTION: Sets up the basic structure of a GitHub Actions workflow for Docker builds, triggering on pushes to the main branch and pull requests.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/gha.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Build and Push Docker Image\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n```\n\n----------------------------------------\n\nTITLE: Removing a Docker Container\nDESCRIPTION: Command to remove a stopped Docker container by specifying its container ID, which must be replaced with the actual ID from docker ps.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/03_updating_app.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker rm <the-container-id>\n```\n\n----------------------------------------\n\nTITLE: Embedding Video with iframe in HTML\nDESCRIPTION: HTML code snippet for embedding a video player in Docker documentation pages using an iframe element. The iframe includes essential attributes for responsive sizing and fullscreen capability.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/videos.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n  class=\"border-0 w-full aspect-video mb-8\"\n  allow=\"fullscreen\"\n  title=\"\"\n  src=\"\"\n  ></iframe>\n```\n\n----------------------------------------\n\nTITLE: Embedding VEX Documents in Docker Image Filesystem\nDESCRIPTION: Dockerfile example showing how to embed VEX documents directly in the image filesystem by copying them from the build context. This approach is suitable when exceptions are known before building the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/create-exceptions-vex.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM alpine\nCOPY .vex/* /var/lib/db/\n```\n\n----------------------------------------\n\nTITLE: HTML Comment with Contribution Instructions\nDESCRIPTION: HTML comment providing information on how to contribute to the Docker documentation. It explains that the page is auto-generated from Docker's source code and directs contributors to open tickets or pull requests in the GitHub repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Requesting Container List via Docker API\nDESCRIPTION: Example HTTP GET request to the Docker API endpoint for listing containers. The request includes query parameters for showing all containers, filtering by container ID, and including size information.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/containers/json?all=1&before=8dfafdbc3a40&size=1 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Context and Dockerfile in Docker Compose\nDESCRIPTION: This example shows how to specify a build context and custom Dockerfile for a service in Docker Compose. It demonstrates the use of the 'build' option with context and dockerfile properties.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/_default/single.markdown.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    build:\n      context: ./dir\n      dockerfile: Dockerfile-alternate\n```\n\n----------------------------------------\n\nTITLE: Using Include Attribute in Compose Develop Watch\nDESCRIPTION: This YAML snippet demonstrates how to use the 'include' attribute in the 'watch' section of Compose Develop. It shows how to specify which files to watch for rebuilding the image and recreating the service.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  backend:\n    image: example/backend\n    develop:\n      watch: \n        # rebuild image and recreate service\n        - path: ./src\n          include: *.go  \n          action: rebuild\n```\n\n----------------------------------------\n\nTITLE: Correct Dockerfile Copy Example\nDESCRIPTION: Shows the correct way to copy a file that does not match any .dockerignore patterns.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/copy-ignored-file.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM scratch\nCOPY ./forever/helloworld.txt /helloworld.txt\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Buildx History Open Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the 'docker buildx history open' command documentation page. It specifies the data folder, file, title, layout, and aliases for the documentation system.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/history/open.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx_history_open\ntitle: docker buildx history open\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_history_open/\n---\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Unmount Request Format\nDESCRIPTION: JSON format for the Unmount request in the volume plugin protocol. This endpoint is called when Docker is no longer using a named volume.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Name\": \"volume_name\",\n    \"ID\": \"b87d7442095999a92b65b3d9691e697b61713829cc0ffd1bb72e4ccd51aa4d6c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Documentation Page Frontmatter in YAML\nDESCRIPTION: YAML frontmatter that defines a documentation page for PHP. It sets the title of the page and configures a parameter for the PHP icon using a CDN-hosted SVG file from the devicons repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/languages/php/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: PHP\nparams:\n  icon: https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/php/php-original.svg\n---\n```\n\n----------------------------------------\n\nTITLE: Opening Container Terminal in TypeScript\nDESCRIPTION: Navigates to the container terminal window for a specific container using its full ID. Available since version 0.3.4. Returns a promise that fails if the container doesn't exist.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/NavigationIntents.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.desktopUI.navigate.viewContainerTerminal(id)\n```\n\n----------------------------------------\n\nTITLE: Running Docker Init for a Rust Project\nDESCRIPTION: Interactive command to initialize Docker configuration files for a Rust project, including Dockerfile, .dockerignore, and compose.yaml files with appropriate configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/build-images.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker init\nWelcome to the Docker Init CLI!\n\nThis utility will walk you through creating the following files with sensible defaults for your project:\n  - .dockerignore\n  - Dockerfile\n  - compose.yaml\n  - README.Docker.md\n\nLet's get started!\n\n? What application platform does your project use? Rust\n? What version of Rust do you want to use? 1.70.0\n? What port does your server listen on? 8000\n```\n\n----------------------------------------\n\nTITLE: Example Output of Docker Model List Command\nDESCRIPTION: Example of the output from the list command showing available models with their parameters, quantization, architecture, and other details.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n+MODEL       PARAMETERS  QUANTIZATION    ARCHITECTURE  MODEL ID      CREATED     SIZE\n+ai/smollm2  361.82 M    IQ2_XXS/Q4_K_M  llama         354bf30d0aa3  3 days ago  256.35 MiB\n```\n\n----------------------------------------\n\nTITLE: Navigating to the sample project directory\nDESCRIPTION: Commands to navigate to the hello directory and list its contents.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/multistage.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd c-plus-plus-docker/hello\n$ ls\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in Container Network Namespace with ip-netns\nDESCRIPTION: Demonstrates the syntax for running a command in a container's network namespace using ip-netns exec. This allows the host to access network-related information inside the container's isolated network environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/runmetrics.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ip netns exec <nsname> <command...>\n```\n\n----------------------------------------\n\nTITLE: Using Docker Scout to Display CVEs in Software Artifacts\nDESCRIPTION: Command syntax for the Docker Scout 'cves' command, which scans and displays Common Vulnerabilities and Exposures (CVEs) identified in a specified Docker image, directory, or archive file.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker scout cves [OPTIONS] [IMAGE|DIRECTORY|ARCHIVE]\n```\n\n----------------------------------------\n\nTITLE: Docker Scout Integration Command Options Table\nDESCRIPTION: Markdown table defining the available options for the docker scout integration configure command, including name, organization, and parameter settings.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_integration_configure.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name          | Type          | Default | Description                                                  |\n|:--------------|:--------------|:--------|:-------------------------------------------------------------|\n| `--name`      | `string`      |         | Name of integration configuration to create                  |\n| `--org`       | `string`      |         | Namespace of the Docker organization                         |\n| `--parameter` | `stringSlice` |         | Integration parameters in the form of --parameter NAME=VALUE |\n```\n\n----------------------------------------\n\nTITLE: Setting log level in docker-compose commands\nDESCRIPTION: Command syntax for controlling the verbosity of Docker Compose output. Valid values include debug, info, warning, error, and critical, with the default being info.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose --log-level debug up\n```\n\n----------------------------------------\n\nTITLE: Verifying registry.json permissions on macOS\nDESCRIPTION: This command checks the file permissions and ownership of registry.json on macOS to ensure it has the expected permissions (-rw-r--r--) and is owned by root and admin.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ sudo ls -l \"/Library/Application Support/com.docker.docker/registry.json\"\n-rw-r--r--  1 root  admin  26 Jul 27 22:01 /Library/Application Support/com.docker.docker/registry.json\n```\n\n----------------------------------------\n\nTITLE: Manually Installing Docker Compose CLI Plugin\nDESCRIPTION: Commands to download and install the Docker Compose CLI plugin manually for the active user. This creates required directories and downloads the binary from GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}\n$ mkdir -p $DOCKER_CONFIG/cli-plugins\n$ curl -SL https://github.com/docker/compose/releases/download/{{% param \"compose_version\" %}}/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Example of Bad Practice: Using Constant --platform Flag in Dockerfile\nDESCRIPTION: This snippet demonstrates an incorrect usage of the --platform flag with a constant value, which limits the image to a single platform and prevents multi-platform builds.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-platform-flag-const-disallowed.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM --platform=linux/amd64 alpine AS base\nRUN apk add --no-cache git\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Swarm CA Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the 'docker swarm ca' command documentation page. It specifies the data folder, file name, title, aliases for URL routing, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/swarm/ca.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_swarm_ca\ntitle: docker swarm ca\naliases:\n- /edge/engine/reference/commandline/swarm_ca/\n- /engine/reference/commandline/swarm_ca/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Multi-line LABEL Instruction with Line Continuation\nDESCRIPTION: Example demonstrating how to format a long LABEL instruction across multiple lines using backslash characters for better readability.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Set multiple labels at once, using line-continuation characters to break long lines\nLABEL vendor=ACME\\ Incorporated \\\n      com.example.is-beta= \\\n      com.example.is-production=\"\" \\\n      com.example.version=\"0.0.1-beta\" \\\n      com.example.release-date=\"2015-02-12\"\n```\n\n----------------------------------------\n\nTITLE: Getting Container Stats in Docker API\nDESCRIPTION: API call to retrieve a live stream of container resource usage statistics. The response includes detailed stats about CPU, memory, network, block I/O, and process usage.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/containers/redis1/stats HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n   \"read\" : \"2015-01-08T22:57:31.547920715Z\",\n   \"pids_stats\": {\n      \"current\": 3\n   },\n   \"networks\": {\n           \"eth0\": {\n               \"rx_bytes\": 5338,\n               \"rx_dropped\": 0,\n               \"rx_errors\": 0,\n               \"rx_packets\": 36,\n               \"tx_bytes\": 648,\n               \"tx_dropped\": 0,\n               \"tx_errors\": 0,\n               \"tx_packets\": 8\n           },\n           \"eth5\": {\n               \"rx_bytes\": 4641,\n               \"rx_dropped\": 0,\n               \"rx_errors\": 0,\n               \"rx_packets\": 26,\n               \"tx_bytes\": 690,\n               \"tx_dropped\": 0,\n               \"tx_errors\": 0,\n               \"tx_packets\": 9\n           }\n   },\n   \"memory_stats\" : {\n      \"stats\" : {\n         \"total_pgmajfault\" : 0,\n         \"cache\" : 0,\n         \"mapped_file\" : 0,\n         \"total_inactive_file\" : 0,\n         \"pgpgout\" : 414,\n         \"rss\" : 6537216,\n         \"total_mapped_file\" : 0,\n         \"writeback\" : 0,\n         \"unevictable\" : 0,\n         \"pgpgin\" : 477,\n         \"total_unevictable\" : 0,\n         \"pgmajfault\" : 0,\n         \"total_rss\" : 6537216,\n         \"total_rss_huge\" : 6291456,\n         \"total_writeback\" : 0,\n         \"total_inactive_anon\" : 0,\n         \"rss_huge\" : 6291456,\n         \"hierarchical_memory_limit\" : 67108864,\n         \"total_pgfault\" : 964,\n         \"total_active_file\" : 0,\n         \"active_anon\" : 6537216,\n         \"total_active_anon\" : 6537216,\n         \"total_pgpgout\" : 414,\n         \"total_cache\" : 0,\n         \"inactive_anon\" : 0,\n         \"active_file\" : 0,\n         \"pgfault\" : 964,\n         \"inactive_file\" : 0,\n         \"total_pgpgin\" : 477\n      },\n      \"max_usage\" : 6651904,\n      \"usage\" : 6537216,\n      \"failcnt\" : 0,\n      \"limit\" : 67108864\n   },\n   \"blkio_stats\" : {},\n   \"cpu_stats\" : {\n      \"cpu_usage\" : {\n         \"percpu_usage\" : [\n            8646879,\n            24472255,\n            36438778,\n            30657443\n         ],\n         \"usage_in_usermode\" : 50000000,\n         \"total_usage\" : 100215355,\n         \"usage_in_kernelmode\" : 30000000\n      },\n      \"system_cpu_usage\" : 739306590000000,\n      \"throttling_data\" : {\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}\n   },\n   \"precpu_stats\" : {\n      \"cpu_usage\" : {\n         \"percpu_usage\" : [\n            8646879,\n            24350896,\n            36438778,\n            30657443\n         ],\n         \"usage_in_usermode\" : 50000000,\n         \"total_usage\" : 100093996,\n         \"usage_in_kernelmode\" : 30000000\n      },\n      \"system_cpu_usage\" : 9492140000000,\n      \"throttling_data\" : {\"periods\":0,\"throttled_periods\":0,\"throttled_time\":0}\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Base Image Dockerfile Example\nDESCRIPTION: A simple Dockerfile that creates a base image from Alpine Linux and adds the bash package. This demonstrates how to create a minimal base image that other Dockerfiles can build upon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine\nRUN apk add --no-cache bash\n```\n\n----------------------------------------\n\nTITLE: Using Scratch as Base Image in Dockerfile\nDESCRIPTION: This snippet shows how to use the 'scratch' image as a starting point for creating a minimal container. It's useful when you want complete control over the contents of your image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/base-images.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM scratch\n```\n\n----------------------------------------\n\nTITLE: Complete Prometheus Configuration with Authentication\nDESCRIPTION: Full Prometheus configuration example including job definition, metrics path, and bearer token authentication setup.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/metrics-exporter.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  scrape_interval: 60s\n  scrape_timeout: 40s\nscrape_configs:\n  - job_name: Docker Scout policy\n    metrics_path: /v1/exporter/org/<ORG>/metrics\n    scheme: https\n    static_configs:\n      - targets:\n          - api.scout.docker.com\n    authorization:\n      type: Bearer\n      credentials_file: /etc/prometheus/token\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Network Disconnect Documentation\nDESCRIPTION: YAML frontmatter specifying metadata for the 'docker network disconnect' command documentation page. It includes the data folder, data file, title, aliases for redirects, and layout information.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/network/disconnect.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_network_disconnect\ntitle: docker network disconnect\naliases:\n- /edge/engine/reference/commandline/network_disconnect/\n- /engine/reference/commandline/network_disconnect/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Indicating Source Repository\nDESCRIPTION: HTML comment that explains the documentation is automatically generated from Docker's source code and provides guidance on how to suggest changes through GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/service/scale.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Image Push Documentation\nDESCRIPTION: YAML front matter defining the metadata for the Docker image push command documentation page. It specifies the data location, title, aliases for various documentation paths, and layout type.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/image/push.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_image_push\ntitle: docker image push\naliases:\n- /edge/engine/reference/commandline/image_push/\n- /engine/reference/commandline/image_push/\n- /engine/reference/commandline/push/\n- /reference/cli/docker/push/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Docker Exit Code 127\nDESCRIPTION: Shows exit code 127, which indicates that the specified container command cannot be found. This occurs when trying to run a non-existent command.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker run busybox foo; echo $?\n\ndocker: Error response from daemon: Container command 'foo' not found or does not exist.\n127\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Logs Output\nDESCRIPTION: Sample log output from the running containers showing MySQL and Node.js application startup messages.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/08_using_compose.md#2025-04-11_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nmysql_1  | 2019-10-03T03:07:16.083639Z 0 [Note] mysqld: ready for connections.\nmysql_1  | Version: '8.0.31'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  MySQL Community Server (GPL)\napp_1    | Connected to mysql db at host mysql\napp_1    | Listening on port 3000\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Buildx Debug Build Docs\nDESCRIPTION: YAML frontmatter defining metadata configuration for the Docker Buildx debug build command documentation page, including data folder, file name, title, layout and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/debug/build.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx_debug_build\ntitle: docker buildx debug build\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_debug_build/\n---\n```\n\n----------------------------------------\n\nTITLE: Setting CPU Period Constraint in Docker\nDESCRIPTION: Example showing how to set CPU period and quota constraints for a Docker container. This limits the container to 50% CPU worth of run-time every 50ms.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --cpu-period=50000 --cpu-quota=25000 ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Docker Container for Laravel\nDESCRIPTION: Dockerfile instructions for setting up Nginx with custom configuration and Laravel public assets. Copies nginx configuration, sets up public directory, and exposes port 80.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY ./docker/nginx/nginx.conf /etc/nginx/nginx.conf\n\nCOPY --from=builder /var/www/public /var/www/public\n\nWORKDIR /var/www/public\n\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n----------------------------------------\n\nTITLE: Alternative CMD for Rails Applications without Thruster\nDESCRIPTION: An alternative CMD instruction for the Dockerfile that starts the Rails server directly without using Thruster. This configuration is suitable for applications using standard Puma or other application servers.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Start the application server\nEXPOSE 3000\nCMD [\"./bin/rails\", \"server\"]\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Buildx Use Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the documentation page of the 'docker buildx use' command. It specifies the data folder, data file, title, layout, and aliases for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/use.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx_use\ntitle: docker buildx use\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_use/\n---\n```\n\n----------------------------------------\n\nTITLE: Pushing to Multiple Repositories in Post-Push Hook\nDESCRIPTION: This Bash snippet shows how to set up a post_push hook to tag and push an image to additional repositories after the main build process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/builds/advanced.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker tag $IMAGE_NAME $DOCKER_REPO:$SOURCE_COMMIT\ndocker push $DOCKER_REPO:$SOURCE_COMMIT\n```\n\n----------------------------------------\n\nTITLE: Running Postgres Container with Command Parameters\nDESCRIPTION: This console command shows how to run a Postgres container while passing parameters to the Postgres server. It will display the help information for Postgres by passing the '--help' flag through the entrypoint script.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_31\n\nLANGUAGE: console\nCODE:\n```\n$ docker run postgres postgres --help\n```\n\n----------------------------------------\n\nTITLE: Using a list of environment files in Docker Compose\nDESCRIPTION: Specifies multiple environment files that are processed in order from top to bottom. When variables are defined in multiple files, the value from the last file takes precedence.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nenv_file:\n  - ./a.env\n  - ./b.env\n```\n\n----------------------------------------\n\nTITLE: Creating a Swarm Stack YAML File for a Todo Application\nDESCRIPTION: This YAML file defines a Swarm service that deploys the getting-started container image with port forwarding from host port 8000 to container port 3000.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/swarm-deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.7\"\n\nservices:\n  bb-app:\n    image: getting-started\n    ports:\n      - \"8000:3000\"\n```\n\n----------------------------------------\n\nTITLE: Using Splunk Logging Driver for a Specific Container\nDESCRIPTION: This command demonstrates how to configure a specific container to use the Splunk logging driver by passing the --log-driver flag and associated --log-opt parameters to the docker run command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/splunk.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --log-driver=splunk --log-opt splunk-token=VALUE --log-opt splunk-url=VALUE ...\n```\n\n----------------------------------------\n\nTITLE: Building the Nginx Docker Image\nDESCRIPTION: This command builds a Docker image named 'nginx' from the Dockerfile in the current directory (nginx subdirectory). This image will be used as a reverse proxy for the web application.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t nginx .\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Reservation Without Hard Limit in Docker\nDESCRIPTION: Configures a Docker container with only a 1GB memory reservation without a hard limit, allowing the container to use as much memory as needed but encouraging memory reclaim when under pressure.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --memory-reservation 1G ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Enabling Features in Docker Daemon via Configuration File\nDESCRIPTION: JSON configuration equivalent for enabling the CDI and containerd-snapshotter features in the daemon.json file. This achieves the same result as using the --feature command line flags.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"cdi\": true,\n    \"containerd-snapshotter\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Target Description in Docker Bake\nDESCRIPTION: Demonstrates how to add a human-readable description to a target using the description attribute. This helps clarify the target's purpose when listing available targets.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_18\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"lint\" {\n    description = \"Runs golangci-lint to detect style errors\"\n    args = {\n        GOLANGCI_LINT_VERSION = null\n    }\n    dockerfile = \"lint.Dockerfile\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Container Ports to Host Ports with Docker Run\nDESCRIPTION: This command runs a PostgreSQL container in detached mode and maps a host port to the container's port 5432. This allows running multiple instances of the same container without port conflicts.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p HOST_PORT:CONTAINER_PORT postgres\n```\n\n----------------------------------------\n\nTITLE: Printing Container Logs with Docker API in Python\nDESCRIPTION: Shows how to retrieve and print logs of a specific container using the Docker Python SDK. The code connects to Docker, gets a container by ID, and prints its logs.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport docker\nclient = docker.from_env()\ncontainer = client.containers.get('f1064a8a4c82')\nprint(container.logs())\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js App Logs for MySQL Connection\nDESCRIPTION: This command shows how to check the logs of the Node.js application container to verify the MySQL database connection. It uses the docker logs command with the -f flag for following the log output.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker logs -f <container-id>\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Test Execution\nDESCRIPTION: Command to build a Docker image targeting the build stage, which includes running the tests. Uses specific flags to ensure tests always run and build output is visible.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/run-tests.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t dotnet-docker-image-test --progress=plain --no-cache --target build .\n```\n\n----------------------------------------\n\nTITLE: Netplan Configuration to Prevent Network Overrides\nDESCRIPTION: Netplan configuration file to prevent cloud-init from overriding network settings. This YAML configuration ensures Netplan only manages Ethernet interfaces and leaves Docker interfaces alone.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nnetwork:\n  ethernets:\n    all:\n      dhcp4: true\n      dhcp6: true\n      match:\n        # edit this filter to match whatever makes sense for your system\n        name: en*\n  renderer: networkd\n  version: 2\n```\n\n----------------------------------------\n\nTITLE: Using build secrets with cache invalidation in Dockerfile\nDESCRIPTION: This snippet shows how to use build secrets in a Dockerfile while also allowing for forced cache invalidation using a build argument. It mounts a secret as an environment variable and uses it in a command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/invalidation.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nARG CACHEBUST\nRUN --mount=type=secret,id=TOKEN,env=TOKEN \\\n    some-command ...\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from File in Docker\nDESCRIPTION: This command shows how to use a .env file to set multiple environment variables for a Docker container instead of using individual -e flags, making the command cleaner and more maintainable.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --env-file .env postgres env\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container in Detached Mode\nDESCRIPTION: Run a Go container in the background (detached mode) with port publishing using the -d flag, allowing the terminal to be used for other commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d -p 8080:8080 docker-gs-ping\nd75e61fcad1e0c0eca69a3f767be6ba28a66625ce4dc42201a8a323e8313c14e\n```\n\n----------------------------------------\n\nTITLE: Filtering CVEs with CISA KEV in Docker Scout GitHub Action\nDESCRIPTION: Example of using the only-cisa-kev option in the Docker Scout GitHub Action to filter CVEs listed in the CISA Known Exploited Vulnerabilities catalog.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/release-notes/cli.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuses: docker/scout-action@v1\nwith:\n  command: cves\n  image: [IMAGE]\n  only-cisa-kev: true\n```\n\n----------------------------------------\n\nTITLE: Docker Service Command Example\nDESCRIPTION: Important notice about the default behavior change in docker service commands where non-detached mode is now the default. The --detach flag must be used to maintain previous behavior.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.10.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndocker service create, docker service update,\\ndocker service scale and docker service rollback use non-detached mode as default,\\nuse --detach to keep the old behaviour.\n```\n\n----------------------------------------\n\nTITLE: Creating Dex Project Directory in Bash\nDESCRIPTION: Commands to create a directory for the Dex project and navigate into it.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dex.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir dex-mock-server\ncd dex-mock-server\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Node.js App\nDESCRIPTION: Original docker run command used to start the Node.js application container with various configurations and environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/08_using_compose.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -dp 127.0.0.1:3000:3000 \\\n  -w /app -v \"$(pwd):/app\" \\\n  --network todo-app \\\n  -e MYSQL_HOST=mysql \\\n  -e MYSQL_USER=root \\\n  -e MYSQL_PASSWORD=secret \\\n  -e MYSQL_DB=todos \\\n  node:18-alpine \\\n  sh -c \"yarn install && yarn run dev\"\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Images Documentation\nDESCRIPTION: YAML frontmatter that configures a documentation page for the 'docker images' command. It specifies that the page should never be rendered directly and provides a sidebar redirect to the '/reference/cli/docker/image/ls/' path.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/images.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: docker images\nbuild:\n  render: never\nsidebar:\n  goto: /reference/cli/docker/image/ls/\n---\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Size Information with Docker API\nDESCRIPTION: Shows how to request container size information by using the size=1 query parameter. This returns additional SizeRw and SizeRootFs data in the response.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/json?size=1 HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n....\n\"SizeRw\": 0,\n\"SizeRootFs\": 972,\n....\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascade Settings in YAML for Docker Documentation\nDESCRIPTION: This YAML configuration sets up cascade properties for a documentation build system. It specifies that content with these properties should never be rendered in the build process.\nSOURCE: https://github.com/docker/docs/blob/main/content/languages/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncascade:\n  build:\n    render: never\n---\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Containers with Docker Extension SDK\nDESCRIPTION: Demonstrates how to list Docker containers using the Docker Extension SDK's listContainers method. By default, this lists only running containers, but can be configured to show all containers including stopped ones through options.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Docker.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst containers = await ddClient.docker.listContainers();\n```\n\n----------------------------------------\n\nTITLE: Production Override Compose File\nDESCRIPTION: A production override Compose file that configures production-specific settings like port mappings and environment variables.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    ports:\n      - 80:80\n    environment:\n      PRODUCTION: 'true'\n\n  cache:\n    environment:\n      TTL: '500'\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for .NET Docker Documentation\nDESCRIPTION: YAML frontmatter block defining metadata for a documentation page about .NET Docker samples. Includes the title, description, service identifier, and multiple URL aliases for redirects.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/dotnet.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: .NET samples\ndescription: Docker samples for .NET.\nservice: .net\naliases:\n- /samples/dotnetcore/\n- /compose/aspnet-mssql-compose/\n- /samples/aspnet-mssql-compose/\n- /samples/dotnet/\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Remove Request Format\nDESCRIPTION: JSON format for the Remove request in the volume plugin protocol. This endpoint is called when a user removes volumes associated with a container.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Name\": \"volume_name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Upper Function in Docker Command Output\nDESCRIPTION: The upper function transforms a string into its uppercase representation. This example converts the container name to uppercase in docker inspect output.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker inspect --format \"{{upper .Name}}\" container\n```\n\n----------------------------------------\n\nTITLE: Docker Build Output Example\nDESCRIPTION: Sample output from the Docker build process showing the various steps of building an image from a Dockerfile, including layer caching and creation.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n[+] Building 2.2s (15/15) FINISHED\n => [internal] load build definition from Dockerfile                                                                                       0.0s\n => => transferring dockerfile: 701B                                                                                                       0.0s\n => [internal] load .dockerignore                                                                                                          0.0s\n => => transferring context: 2B                                                                                                            0.0s\n => resolve image config for docker.io/docker/dockerfile:1                                                                                 1.1s\n => CACHED docker-image://docker.io/docker/dockerfile:1@sha256:39b85bbfa7536a5feceb7372a0817649ecb2724562a38360f4d6a7782a409b14            0.0s\n => [internal] load build definition from Dockerfile                                                                                       0.0s\n => [internal] load .dockerignore                                                                                                          0.0s\n => [internal] load metadata for docker.io/library/golang:1.19                                                                             0.7s\n => [1/6] FROM docker.io/library/golang:1.19@sha256:5d947843dde82ba1df5ac1b2ebb70b203d106f0423bf5183df3dc96f6bc5a705                       0.0s\n => [internal] load build context                                                                                                          0.0s\n => => transferring context: 6.08kB                                                                                                        0.0s\n => CACHED [2/6] WORKDIR /app                                                                                                              0.0s\n => CACHED [3/6] COPY go.mod go.sum ./                                                                                                     0.0s\n => CACHED [4/6] RUN go mod download                                                                                                       0.0s\n => CACHED [5/6] COPY *.go ./                                                                                                              0.0s\n => CACHED [6/6] RUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping                                                                  0.0s\n => exporting to image                                                                                                                     0.0s\n => => exporting layers                                                                                                                    0.0s\n => => writing image sha256:ede8ff889a0d9bc33f7a8da0673763c887a258eb53837dd52445cdca7b7df7e3                                               0.0s\n => => naming to docker.io/library/docker-gs-ping                                                                                          0.0s\n```\n\n----------------------------------------\n\nTITLE: Executing Docker Scout Version Command\nDESCRIPTION: This command displays the version information for Docker Scout. It shows the version number, Go version, operating system, architecture, and git commit hash.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_version.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker scout version\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Scout Documentation\nDESCRIPTION: YAML frontmatter configuration block defining metadata for the Docker Scout environment command documentation page, including data folder paths, aliases, and layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/scout/environment.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: scout-cli\ndatafile: docker_scout_environment\naliases:\n- /engine/reference/commandline/scout_environment\ntitle: docker scout environment\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Securing Private Key Permissions\nDESCRIPTION: Changes file permissions for private key files to make them readable only by the owner, preventing unauthorized access to sensitive cryptographic material.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ chmod -v 0400 ca-key.pem key.pem server-key.pem\n```\n\n----------------------------------------\n\nTITLE: Golang Middleware Functions - Metrics Handling\nDESCRIPTION: Implementation of middleware functions for handling Prometheus metrics and request monitoring.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/application.md#2025-04-11_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Custom metrics handler with custom registry\nfunc PrometheusHandler() gin.HandlerFunc {\n\th := promhttp.HandlerFor(customRegistry, promhttp.HandlerOpts{})\n\treturn func(c *gin.Context) {\n\t\th.ServeHTTP(c.Writer, c.Request)\n\t}\n}\n\n// Middleware to record incoming requests metrics\nfunc RequestMetricsMiddleware() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tpath := c.Request.URL.Path\n\t\tc.Next()\n\t\tstatus := c.Writer.Status()\n\t\tif status < 400 {\n\t\t\tHttpRequestTotal.WithLabelValues(path, strconv.Itoa(status)).Inc()\n\t\t} else {\n\t\t\tHttpRequestErrorTotal.WithLabelValues(path, strconv.Itoa(status)).Inc()\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Docker Data to Backup Location\nDESCRIPTION: Commands to create a backup of the Docker data directory before reconfiguring the storage driver, then clearing the original directory to prepare for the new filesystem.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/btrfs-driver.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo cp -au /var/lib/docker /var/lib/docker.bk\n$ sudo rm -rf /var/lib/docker/*\n```\n\n----------------------------------------\n\nTITLE: Setting Git Remote URL for GitHub Repository\nDESCRIPTION: Command to change the git remote URL to point to your newly created GitHub repository. This prepares your local repository to push code to GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/configure-ci-cd.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git remote set-url origin https://github.com/your-username/your-repository.git\n```\n\n----------------------------------------\n\nTITLE: Verifying SQL Initialization Script Execution\nDESCRIPTION: Command to execute a query in the MySQL container to verify that the initialization script has run correctly and the table has been created with data.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec my-mysql mysql -u root -pmy-secret-pw -e \"SELECT * FROM mydb.myothertable;\"\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.List v2 Response Format\nDESCRIPTION: JSON v2 response format for the List endpoint in the volume plugin protocol. The response includes details of all volumes with their names and mountpoints under PropagatedMount.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Volumes\": [\n    {\n      \"Name\": \"volume_name\",\n      \"Mountpoint\": \"/path/under/PropagatedMount\"\n    }\n  ],\n  \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Containers with Docker Compose PS\nDESCRIPTION: Using the --all flag with docker compose ps to show both running and stopped containers for a Compose project.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps --all\nNAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS\nexample-foo-1   alpine    \"/entrypoint.…\"   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp\nexample-bar-1   alpine    \"/entrypoint.…\"   bar        4 seconds ago   exited (0)\n```\n\n----------------------------------------\n\nTITLE: Resizing Container TTY in Docker API\nDESCRIPTION: API call to resize a container's TTY (terminal) dimensions. Requires height and width parameters, and the container must be restarted for changes to take effect.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/4fa6e0f0c678/resize?h=40&w=80 HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 0\nContent-Type: text/plain; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Removing a Network with HTTP DELETE Request\nDESCRIPTION: Shows how to delete a Docker network using its ID. This completely removes the network and disconnects all attached containers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_81\n\nLANGUAGE: http\nCODE:\n```\nDELETE /v1.24/networks/22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Exposing ports in Docker Compose\nDESCRIPTION: Exposes ports or port ranges from a container for access by linked services, without publishing them to the host. Supports specifying protocols and port ranges.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nexpose:\n  - \"3000\"\n  - \"8000\"\n  - \"8080-8085/tcp\"\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Containers with Gordon CLI\nDESCRIPTION: Examples of using Gordon AI to list, monitor and manage Docker containers through the command line interface.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/built-in-tools.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# List all running containers\n$ docker ai \"Show me all running containers\"\n\n# List containers using specific resources\n$ docker ai \"List all containers using more than 1GB of memory\"\n\n# View logs from a specific container\n$ docker ai \"Show me logs from my running api-container from the last hour\"\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for docker compose up documentation page\nDESCRIPTION: YAML configuration for the documentation page that defines metadata including the data folder, data file, title, aliases for redirects, and layout specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/up.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_up\ntitle: docker compose up\naliases:\n- /compose/reference/up/\n- /compose/reference/scale/\n- /engine/reference/commandline/compose_up/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Setting WSL 2 as Default Version for Future Installations\nDESCRIPTION: Command to set WSL 2 as the default version for any new Linux distributions installed through WSL. This ensures all new distributions automatically use the WSL 2 architecture.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/wsl/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwsl.exe --set-default-version 2\n```\n\n----------------------------------------\n\nTITLE: Listing Container Processes with Custom PS Arguments\nDESCRIPTION: Shows how to list processes using custom ps arguments (aux) to provide more detailed process information including CPU and memory usage.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/top?ps_args=aux HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n  \"Titles\" : [\n    \"USER\",\"PID\",\"%CPU\",\"%MEM\",\"VSZ\",\"RSS\",\"TTY\",\"STAT\",\"START\",\"TIME\",\"COMMAND\"\n  ]\n  \"Processes\" : [\n    [\n      \"root\",\"13642\",\"0.0\",\"0.1\",\"18172\",\"3184\",\"pts/0\",\"Ss\",\"17:03\",\"0:00\",\"/bin/bash\"\n    ],\n    [\n      \"root\",\"13895\",\"0.0\",\"0.0\",\"4348\",\"692\",\"pts/0\",\"S+\",\"17:15\",\"0:00\",\"sleep 10\"\n    ]\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Error Message for Image Resolution Failure\nDESCRIPTION: Example error message displayed when the Docker manager cannot resolve an image tag to a digest. This helps troubleshoot image-related issues when creating or updating services.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_20\n\nLANGUAGE: none\nCODE:\n```\nunable to pin image <IMAGE-NAME> to digest: <REASON>\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Feature Options Configuration\nDESCRIPTION: Example of enabling or disabling specific Docker daemon features using the features field in the daemon.json configuration file. This shows how to toggle individual features like containerd-snapshotter.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"some-feature\": true,\n    \"some-disabled-feature-enabled-by-default\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands in Docker Container\nDESCRIPTION: This snippet demonstrates how to run shell commands within a running Docker container using the docker exec command. It shows examples for both Linux and Windows containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/use-desktop/container.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it <container-id> /bin/sh\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it <container-id> cmd.exe\n```\n\n----------------------------------------\n\nTITLE: Starting Containerized Application Stack with Docker Compose\nDESCRIPTION: Command to build and start the application stack defined in the compose.yml file in detached mode, ensuring all services are freshly built.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/localstack.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f compose.yml up -d --build\n```\n\n----------------------------------------\n\nTITLE: Removing All Trust Data from a Repository\nDESCRIPTION: Shows the process of completely removing all trust data from a repository, including verification of the deletion using docker trust inspect command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ notary delete registry.example.com/admin/demo --remote\n\nDeleting trust data for repository registry.example.com/admin/demo\nEnter username: admin\nEnter password: \nSuccessfully deleted local and remote trust data for repository registry.example.com/admin/demo\n\n$ docker trust inspect --pretty registry.example.com/admin/demo\n\nNo signatures or cannot access registry.example.com/admin/demo\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Context Show Documentation\nDESCRIPTION: YAML front matter metadata that defines properties for the Docker context show documentation page. It specifies the data folder, data file, title, layout, and URL aliases for the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/context/show.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_context_show\ntitle: docker context show\nlayout: cli\naliases:\n- /engine/reference/commandline/context_show/\n---\n```\n\n----------------------------------------\n\nTITLE: Running a Custom MySQL Docker Container\nDESCRIPTION: Command line instruction for running a custom MySQL Docker container with root password configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --name my-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d my-custom-mysql\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Engine API v1.41 Documentation\nDESCRIPTION: YAML frontmatter defining the linkTitle, title, and aliases for the Docker Engine API v1.41 reference documentation. This metadata is used for organizing and linking to the documentation in a content management system.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.41.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.41\ntitle: Docker Engine API v1.41 reference\naliases:\n  - /engine/api/v1.41/\n---\n```\n\n----------------------------------------\n\nTITLE: Pruning Docker Containers with Time Filter\nDESCRIPTION: This command prunes stopped containers that are older than 24 hours. It demonstrates the use of the --filter flag to limit which containers are pruned based on age.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker container prune --filter \"until=24h\"\n```\n\n----------------------------------------\n\nTITLE: Creating Bind Mounts in Docker Containers\nDESCRIPTION: Demonstrates how to create a bind mount for a Docker container using the --mount flag. Bind mounts allow sharing of files and directories between the host and container.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --mount type=bind,source=[PATH],target=[PATH] busybox\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Service Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker service documentation page, including data locations, title, URL aliases, and layout specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/service/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_service\ntitle: docker service\naliases:\n- /edge/engine/reference/commandline/service/\n- /engine/reference/commandline/service/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Buildx History Logs Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the Docker Buildx history logs documentation page. It specifies the data folder, file name, page title, layout, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/history/logs.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx_history_logs\ntitle: docker buildx history logs\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_history_logs/\n---\n```\n\n----------------------------------------\n\nTITLE: Appending ARM64 Architecture Node to Existing Kubernetes Builder\nDESCRIPTION: Command to add an additional ARM64 architecture node to an existing Kubernetes builder using the --append flag, enabling native multi-architecture builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create \\\n  --append \\\n  --bootstrap \\\n  --name=kube \\\n  --driver=kubernetes \\\n  --platform=linux/arm64 \\\n  --node=builder-arm64 \\\n  --driver-opt=namespace=buildkit,nodeselector=\"kubernetes.io/arch=arm64\"\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Service Rollback Docs\nDESCRIPTION: YAML front matter configuration that defines metadata for the Docker service rollback documentation page, including title, aliases for URL routing, and layout specification.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/service/rollback.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_service_rollback\ntitle: docker service rollback\naliases:\n- /edge/engine/reference/commandline/service_rollback/\n- /engine/reference/commandline/service_rollback/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Code to GitHub\nDESCRIPTION: Git commands to stage, commit, and push local code to the GitHub repository. This initializes the remote repository with your R application code.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/configure-ci-cd.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git add -A\n$ git commit -m \"my commit\"\n$ git push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Converting Docker Build Command to Bake File Target\nDESCRIPTION: Example showing how a standard Docker build command can be expressed as a target in a Bake file. The target includes dockerfile, tags, and context attributes.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"webapp\" {\n  dockerfile = \"Dockerfile.webapp\"\n  tags = [\"docker.io/username/webapp:latest\"]\n  context = \"https://github.com/username/webapp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Repository on Fedora\nDESCRIPTION: This two-step process installs the DNF plugins core package and adds the official Docker repository to your system. This is the recommended approach for installing Docker Engine.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/fedora.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf -y install dnf-plugins-core\n$ sudo dnf-3 config-manager --add-repo {{% param \"download-url-base\" %}}/docker-ce.repo\n```\n\n----------------------------------------\n\nTITLE: Viewing Specific Image in TypeScript\nDESCRIPTION: Navigates to a specific image view using its full ID and tag. Shows image layers, commands, creation time, and size. Returns a promise that fails if the image doesn't exist.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/NavigationIntents.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.desktopUI.navigate.viewImage(id, tag)\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker CP Documentation\nDESCRIPTION: YAML frontmatter configuration that defines metadata for the Docker container cp command documentation page, including the data folder, file name, title and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/cp.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_container_cp\ntitle: docker container cp\naliases:\n- /edge/engine/reference/commandline/container_cp/\n- /engine/reference/commandline/container_cp/\n- /engine/reference/commandline/cp/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Main Execution Block for Text Summarization Application\nDESCRIPTION: Defines the main execution block that ensures the code runs only when the script is executed directly, not when imported as a module.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n```\n\n----------------------------------------\n\nTITLE: Group Precedence Example\nDESCRIPTION: Illustrates how groups take precedence over targets with the same name, showing target override behavior.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_39\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  dockerfile-inline = \"FROM ubuntu\"\n}\n\ngroup \"default\" {\n  targets = [\"alpine\", \"debian\"]\n}\ntarget \"alpine\" {\n  dockerfile-inline = \"FROM alpine\"\n}\ntarget \"debian\" {\n  dockerfile-inline = \"FROM debian\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pruning All Unused Docker Objects\nDESCRIPTION: This command prunes all unused containers, networks, and dangling images. It also removes unused build cache. It prompts for confirmation before deletion.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/pruning.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker system prune\n\nWARNING! This will remove:\n        - all stopped containers\n        - all networks not used by at least one container\n        - all dangling images\n        - unused build cache\n\nAre you sure you want to continue? [y/N] y\n```\n\n----------------------------------------\n\nTITLE: Converting Logical Volumes to Thin Pool\nDESCRIPTION: Command to convert the logical volumes to a thin pool and metadata storage for Docker using lvconvert.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo lvconvert -y \\\n--zero n \\\n-c 512K \\\n--thinpool docker/thinpool \\\n--poolmetadata docker/thinpoolmeta\n\nWARNING: Converting logical volume docker/thinpool and docker/thinpoolmeta to\nthin pool's data and metadata volumes with metadata wiping.\nTHIS WILL DESTROY CONTENT OF LOGICAL VOLUME (filesystem etc.)\nConverted docker/thinpool to thin pool.\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Repository Configuration\nDESCRIPTION: Removes Docker's APT repository configuration files and GPG keys from the system. This is typically done as part of a complete Docker uninstallation process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/raspberry-pi-os.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ sudo rm /etc/apt/sources.list.d/docker.list\n$ sudo rm /etc/apt/keyrings/docker.asc\n```\n\n----------------------------------------\n\nTITLE: Authorization Request Response Schema\nDESCRIPTION: JSON schema for the response to /AuthZPlugin.AuthZReq API call. The plugin returns whether the request is allowed, along with optional message and error information.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Allow\": \"Determined whether the user is allowed or not\",\n    \"Msg\":   \"The authorization message\",\n    \"Err\":   \"The error message if things go wrong\"\n}\n```\n\n----------------------------------------\n\nTITLE: Go Application Output when Running in Container\nDESCRIPTION: The standard output from the Go Echo web server when it starts successfully in the container, showing the server is running on port 8080.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n   ____    __\n  / __/___/ /  ___\n / _// __/ _ \\/ _ \\\n/___/\\__/_//_/\\___/ v4.10.2\nHigh performance, minimalist Go web framework\nhttps://echo.labstack.com\n____________________________________O/_______\n                                    O\\\n⇨ http server started on [::]:8080\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Toast in Docker Desktop Extension (TypeScript)\nDESCRIPTION: Shows how to display a warning toast message. This method is deprecated and will be removed in a future version. The 'warning' method from Toast is recommended as a replacement.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/DockerDesktopClient.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.toastWarning(\"message\");\n```\n\n----------------------------------------\n\nTITLE: Setting Read-Only Root Filesystem in Docker Container\nDESCRIPTION: Shows how to make a container's root filesystem read-only using the --read-only flag, which can be combined with volumes to restrict write access to specific locations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n--read-only\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose with Native Apps Configuration\nDESCRIPTION: Command to start the Docker Compose stack using a specific compose file for native app integration. This sets up Traefik and any required containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f compose-native.yaml up\n```\n\n----------------------------------------\n\nTITLE: Removing a Node with DELETE Request in Docker Swarm API\nDESCRIPTION: API endpoint for removing a node from a Docker Swarm cluster. The node can be specified by ID or name. Supports a force parameter to forcibly remove a node.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_90\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /v1.24/nodes/24ifsmvkjbyhk HTTP/1.1\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 0\nContent-Type: text/plain; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Switching Back to Default Docker Context\nDESCRIPTION: Shows how to switch back to the default (local) Docker context after using a remote context. This restores connection to the local Docker daemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker context use default\ndefault\nCurrent context is now \"default\"\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Unpause Command Options Table\nDESCRIPTION: Markdown table showing the available options for the docker compose unpause command. Currently includes the --dry-run option which enables executing the command in dry run mode.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_unpause.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type   | Default | Description                     |\n|:------------|:-------|:--------|:--------------------------------|\n| `--dry-run` | `bool` |         | Execute command in dry run mode |\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose in Detached Mode\nDESCRIPTION: A command to run Docker Compose in detached mode, which runs containers in the background. The -d flag enables detached mode while --build ensures images are built before starting.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build -d\n```\n\n----------------------------------------\n\nTITLE: Template Variable for Summary Bar\nDESCRIPTION: Template variable insertion for displaying a summary bar component with the feature name 'Admin orgs'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/admin/organization/manage-products.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< summary-bar feature_name=\"Admin orgs\" >}}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Docker System Command Documentation\nDESCRIPTION: This YAML code block defines the metadata for the Docker system command documentation page. It specifies the data folder, file name, page title, aliases for redirects, and the layout to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/system/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_system\ntitle: docker system\naliases:\n- /edge/engine/reference/commandline/system/\n- /engine/reference/commandline/system/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Running Node.js App Container with MySQL Connection (PowerShell)\nDESCRIPTION: This PowerShell command runs a Node.js application container, setting up MySQL connection environment variables, network, and volume mappings. It uses the node:18-alpine image and runs yarn install and dev commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$ docker run -dp 127.0.0.1:3000:3000 `\n  -w /app -v \"$(pwd):/app\" `\n  --network todo-app `\n  -e MYSQL_HOST=mysql `\n  -e MYSQL_USER=root `\n  -e MYSQL_PASSWORD=secret `\n  -e MYSQL_DB=todos `\n  node:18-alpine `\n  sh -c \"yarn install && yarn run dev\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated Docker Hub API v1 Routes\nDESCRIPTION: List of deprecated v1 API endpoints that will return a 410 status code. These endpoints previously handled repository image and tag operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/hub/deprecated.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/v1/repositories/{name}/images\n/v1/repositories/{name}/tags\n/v1/repositories/{name}/tags/{tag_name}\n/v1/repositories/{namespace}/{name}/images\n/v1/repositories/{namespace}/{name}/tags\n/v1/repositories/{namespace}/{name}/tags/{tag_name}\n```\n\n----------------------------------------\n\nTITLE: Installing curl in Dockerfile with Alpine base image\nDESCRIPTION: This snippet demonstrates a Dockerfile instruction to install curl using apk package manager in an Alpine Linux base image. It's used to explain cache invalidation for RUN instructions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/invalidation.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine:{{% param \"example_alpine_version\" %}} AS install\nRUN apk add curl\n```\n\n----------------------------------------\n\nTITLE: Templated HTML Configuration\nDESCRIPTION: HTML template using golang template syntax for dynamic content generation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<html lang=\"en\">\n  <head><title>Hello Docker</title></head>\n  <body>\n    <p>Hello {{ env \"HELLO\" }}! I'm service {{ .Service.Name }}.</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Making HTTP PATCH Request with Docker Extension API\nDESCRIPTION: Performs an HTTP PATCH request with data payload to a backend service using the Docker client extension VM service. Returns a promise that resolves to the response data.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/HttpService.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.extension.vm.service\n .patch(\"/some/service\", { ... })\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Implementing StartMetrics Endpoint for Docker MetricsCollector\nDESCRIPTION: Defines the request and response format for the StartMetrics endpoint of the MetricsCollector interface. This endpoint signals that the metrics socket is available for scraping.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_metrics.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// Request:\n{}\n\n// Response:\n{\n  \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Go Application in Dockerfile\nDESCRIPTION: Dockerfile instruction to compile the Go application with specific build flags. Creates a statically-linked binary at /docker-gs-ping with CGO disabled and targeting Linux.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN CGO_ENABLED=0 GOOS=linux go build -o /docker-gs-ping\n```\n\n----------------------------------------\n\nTITLE: Installing Go Dependencies in Dockerfile\nDESCRIPTION: Dockerfile instruction to download and install Go module dependencies specified in the module files. This is done before copying the application code to leverage Docker's layer caching.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN go mod download\n```\n\n----------------------------------------\n\nTITLE: Comparing SBOMs using Docker Scout GitHub Action\nDESCRIPTION: Example of comparing two SBOM files using the sbom:// prefix in the Docker Scout GitHub Action.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/release-notes/cli.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nuses: docker/scout-action@v1\nwith:\n  command: compare\n  image: sbom://image1.json\n  to: sbom://image2.json\n```\n\n----------------------------------------\n\nTITLE: Cache-Only Build Output\nDESCRIPTION: Command to build with a tag but only export results to build cache without loading to local image store.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/usage.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --builder cloud-<ORG>-<BUILDER_NAME> \\\n  --platform linux/amd64,linux/arm64 \\\n  --tag <IMAGE> \\\n  --output type=cacheonly .\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scrape Job for Docker Scout\nDESCRIPTION: Basic Prometheus configuration to scrape metrics from Docker Scout API. Requires organization name replacement and proper endpoint configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/metrics-exporter.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: <ORG>\n    metrics_path: /v1/exporter/org/<ORG>/metrics\n    scheme: https\n    static_configs:\n      - targets:\n          - api.scout.docker.com\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Docker Network\nDESCRIPTION: This command creates a custom Docker network named 'mynetwork' which can be used to connect containers for better isolation and communication compared to the default bridge network.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create mynetwork\n```\n\n----------------------------------------\n\nTITLE: Inspecting Redis Service Configuration in Docker Swarm\nDESCRIPTION: Displays detailed information about the Redis service in a human-readable format, showing the service ID, replicas, update configuration, and container image currently in use.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/rolling-update.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker service inspect --pretty redis\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker CLI Documentation\nDESCRIPTION: YAML configuration block defining metadata for the Docker config inspect command documentation page, including file paths, title, and layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/config/inspect.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_config_inspect\ntitle: docker config inspect\naliases:\n- /edge/engine/reference/commandline/config_inspect/\n- /engine/reference/commandline/config_inspect/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Setting environment variables with map syntax in Docker Compose\nDESCRIPTION: Defines environment variables directly in the Compose file using map syntax. Variables can have values, be quoted, or have no value (to be resolved externally).\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  RACK_ENV: development\n  SHOW: \"true\"\n  USER_INPUT:\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Docker Swarm Container's Hostname\nDESCRIPTION: This command inspects a specific container from a service and returns only the hostname configuration, using the format flag to filter the output.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_43\n\nLANGUAGE: console\nCODE:\n```\n$ docker inspect --format=\"{{.Config.Hostname}}\" hosttempl.1.wo41w8hg8qanxwjwsg4kxpprj\n```\n\n----------------------------------------\n\nTITLE: Example of Good Practice: Using Meta Variable for Platform in Dockerfile\nDESCRIPTION: This snippet demonstrates the use of a meta variable (${BUILDPLATFORM}) for the --platform flag, allowing for dynamic platform selection during build time.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-platform-flag-const-disallowed.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM --platform=${BUILDPLATFORM} alpine AS base\nRUN apk add --no-cache git\n```\n\n----------------------------------------\n\nTITLE: Inspecting SBOM Contents\nDESCRIPTION: Commands to inspect SBOM contents using docker buildx imagetools, including examples of formatting output to show package information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/sbom.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx imagetools inspect <namespace>/<image>:<version> \\\n    --format \"{{ json .SBOM.SPDX }}\"\n\n$ docker buildx imagetools inspect <namespace>/<image>:<version> \\\n    --format \"{{ range .SBOM.SPDX.packages }}{{ .name }}@{{ .versionInfo }}{{ println }}{{ end }}\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Docker Events via HTTP Stream\nDESCRIPTION: GET endpoint that streams Docker events in real-time. Supports filtering by timestamp and various attributes like container, image, volume, and network events.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_50\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/events?since=1374067924\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Compose Wait Command Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the 'docker compose wait' command documentation page. It specifies the data folder, file name, title, layout, and aliases for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/wait.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_wait\ntitle: docker compose wait\nlayout: cli\naliases:\n- /engine/reference/commandline/compose_wait/\n---\n```\n\n----------------------------------------\n\nTITLE: Buildkite Docker Build Cloud Setup\nDESCRIPTION: Buildkite pipeline configuration with environment hooks for Docker Build Cloud integration. Includes setup scripts and build commands for both cache-only and push scenarios.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/ci.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nset -euo pipefail\n\nif [[ \"$BUILDKITE_PIPELINE_NAME\" == \"build-push-docker\" ]]; then\n export DOCKER_PAT=\"<DOCKER_PERSONAL_ACCESS_TOKEN>\"\nfi\n```\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  DOCKER_ORG: <ORG>\n  IMAGE_NAME: <IMAGE>\n\nsteps:\n  - command: ./build.sh\n    key: build-push\n    plugins:\n      - docker-login#v2.1.0:\n          username: <DOCKER_USER>\n          password-env: DOCKER_PAT\n```\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_DIR=/usr/libexec/docker\n\nUNAME_ARCH=`uname -m`\ncase $UNAME_ARCH in\n  aarch64)\n    ARCH=\"arm64\";\n    ;;\n  amd64)\n    ARCH=\"amd64\";\n    ;;\n  *)\n    ARCH=\"amd64\";\n    ;;\nesac\nBUILDX_URL=$(curl -s https://raw.githubusercontent.com/docker/actions-toolkit/main/.github/buildx-lab-releases.json | jq -r \".latest.assets[] | select(endswith(\\\"linux-$ARCH\\\"))\")\n\ncurl --silent -L --output $DOCKER_DIR/cli-plugins/docker-buildx $BUILDX_URL\nchmod a+x ~/.docker/cli-plugins/docker-buildx\n\ndocker buildx create --use --driver cloud \"$DOCKER_ORG/default\"\n\ndocker buildx build \\\n    --platform linux/amd64,linux/arm64 \\\n    --tag \"$IMAGE_NAME:$BUILDKITE_COMMIT\" \\\n    --output type=cacheonly \\\n    .\n```\n\n----------------------------------------\n\nTITLE: Displaying Network Interface Configuration in Linux\nDESCRIPTION: This command shows the configuration of the eth0 network interface, including its IP address and subnet mask.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ ip addr show eth0\n3: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000\n    inet 192.168.1.250/24 brd 192.168.1.255 scope global eth0\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Docker Engine API v1.35 Documentation\nDESCRIPTION: This YAML frontmatter configures metadata for the Docker Engine API v1.35 reference documentation. It sets the link title, page title, and defines an alias for the page URL.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.35.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.35\ntitle: Docker Engine API v1.35 reference\naliases:\n  - /engine/api/v1.35/\n---\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Docker Exit Code 126\nDESCRIPTION: Shows exit code 126, which indicates that the specified container command cannot be invoked. In this example, a directory is specified as a command.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker run busybox /etc; echo $?\n\ndocker: Error response from daemon: Container command '/etc' could not be invoked.\n126\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Volumes with Volume Driver\nDESCRIPTION: Example commands showing how to create a volume with a specific driver and use it in a container. This demonstrates using the Flocker driver to create an external volume.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker volume create --driver=flocker volumename\n\n$ docker container run -it --volume volumename:/data busybox sh\n```\n\n----------------------------------------\n\nTITLE: Listing Nodes with GET Request in Docker Swarm API\nDESCRIPTION: API endpoint for listing all nodes in a Docker Swarm cluster with an example request and response. Supports filtering nodes by ID, label, membership, name, and role.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_88\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/nodes HTTP/1.1\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n  {\n    \"ID\": \"24ifsmvkjbyhk\",\n    \"Version\": {\n      \"Index\": 8\n    },\n    \"CreatedAt\": \"2016-06-07T20:31:11.853781916Z\",\n    \"UpdatedAt\": \"2016-06-07T20:31:11.999868824Z\",\n    \"Spec\": {\n      \"Name\": \"my-node\",\n      \"Role\": \"manager\",\n      \"Availability\": \"active\"\n      \"Labels\": {\n          \"foo\": \"bar\"\n      }\n    },\n    \"Description\": {\n      \"Hostname\": \"bf3067039e47\",\n      \"Platform\": {\n        \"Architecture\": \"x86_64\",\n        \"OS\": \"linux\"\n      },\n      \"Resources\": {\n        \"NanoCPUs\": 4000000000,\n        \"MemoryBytes\": 8272408576\n      },\n      \"Engine\": {\n        \"EngineVersion\": \"1.12.0\",\n        \"Labels\": {\n            \"foo\": \"bar\",\n        }\n        \"Plugins\": [\n          {\n            \"Type\": \"Volume\",\n            \"Name\": \"local\"\n          },\n          {\n            \"Type\": \"Network\",\n            \"Name\": \"bridge\"\n          }\n          {\n            \"Type\": \"Network\",\n            \"Name\": \"null\"\n          }\n          {\n            \"Type\": \"Network\",\n            \"Name\": \"overlay\"\n          }\n        ]\n      }\n    },\n    \"Status\": {\n      \"State\": \"ready\"\n    },\n    \"ManagerStatus\": {\n      \"Leader\": true,\n      \"Reachability\": \"reachable\",\n      \"Addr\": \"172.17.0.2:2377\"\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Job Control Setup\nDESCRIPTION: Dockerfile configuration for implementing Bash job control approach. Sets up the container with main and helper processes along with the control script.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/multi-service_container.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM ubuntu:latest\nCOPY my_main_process my_main_process\nCOPY my_helper_process my_helper_process\nCOPY my_wrapper_script.sh my_wrapper_script.sh\nCMD ./my_wrapper_script.sh\n```\n\n----------------------------------------\n\nTITLE: Exporting Container Contents with Docker API\nDESCRIPTION: Shows how to export a container's filesystem as a tar archive. The response is a binary stream containing the container's files and directories.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/export HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/octet-stream\n\n{{ TAR STREAM }}\n```\n\n----------------------------------------\n\nTITLE: Building an Application Docker Image\nDESCRIPTION: This snippet shows how to extend a base image to create an application-specific Docker image with a simple Node.js script.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/understanding-image-layers.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name=app-container -ti node-base\necho 'console.log(\"Hello from an app\")' > app.js\nnode app.js\ndocker container commit -c \"CMD node app.js\" -m \"Add app\" app-container sample-app\ndocker image history sample-app\ndocker run sample-app\ndocker rm -f app-container\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Docker Container Commit Documentation\nDESCRIPTION: YAML frontmatter that specifies metadata for the Docker container commit command documentation page, including the datafolder, datafile, title, aliases, and layout.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/commit.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_container_commit\ntitle: docker container commit\naliases:\n- /edge/engine/reference/commandline/container_commit/\n- /engine/reference/commandline/container_commit/\n- /engine/reference/commandline/commit/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Using SSH in Dockerfile for Private Repository Access\nDESCRIPTION: Demonstrates how to use the SSH configuration from the Bake file within a Dockerfile to clone a private repository.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_34\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nRUN --mount=type=ssh \\\n    apk add git openssh-client \\\n    && install -m 0700 -d ~/.ssh \\\n    && ssh-keyscan github.com >> ~/.ssh/known_hosts \\\n    && git clone git@github.com:user/my-private-repo.git\n```\n\n----------------------------------------\n\nTITLE: List Docker Plugins Request/Response\nDESCRIPTION: GET endpoint to retrieve information about installed Docker plugins with example response showing plugin details including ID, name, configuration and manifest.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_83\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/plugins HTTP/1.1\n```\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"Id\": \"5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\",\n    \"Name\": \"tiborvass/no-remove\",\n    \"Tag\": \"latest\",\n    \"Active\": true,\n    \"Config\": {\n      \"Mounts\": [\n        {\n          \"Name\": \"\",\n          \"Description\": \"\",\n          \"Settable\": null,\n          \"Source\": \"/data\",\n          \"Destination\": \"/data\",\n          \"Type\": \"bind\",\n          \"Options\": [\n            \"shared\",\n            \"rbind\"\n          ]\n        }\n      ]\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon Registry Mirrors in JSON\nDESCRIPTION: This JSON configuration for the Docker daemon specifies the registry mirror to use. It should be added to the daemon.json file to make the change persistent.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/image-library/mirror.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"registry-mirrors\": [\"https://<my-docker-mirror-host>\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Swarm Leave API Response Example\nDESCRIPTION: Response from the Docker API when successfully leaving a swarm. A 200 status code with an empty response body indicates successful operation.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_98\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 0\nContent-Type: text/plain; charset=utf-8\n```\n\n----------------------------------------\n\nTITLE: Docker Events Response Format\nDESCRIPTION: Example response showing the JSON format of Docker events including status, ID, type, action, actor details, and timestamps.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_51\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nServer: Docker/1.12.0 (linux)\nDate: Fri, 29 Apr 2016 15:18:06 GMT\nTransfer-Encoding: chunked\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"pull\",\n  \"id\": \"alpine:latest\",\n  \"Type\": \"image\",\n  \"Action\": \"pull\",\n  \"Actor\": {\n    \"ID\": \"alpine:latest\",\n    \"Attributes\": {\n      \"name\": \"alpine\"\n    }\n  },\n  \"time\": 1461943101,\n  \"timeNano\": 1461943101301854122\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample Application Repository with Git\nDESCRIPTION: This command clones the nginx-node-redis sample application repository from GitHub, which contains the necessary files to demonstrate a multi-container application setup.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dockersamples/nginx-node-redis\n```\n\n----------------------------------------\n\nTITLE: Specifying Frontend Method in Docker Bake\nDESCRIPTION: Shows how to specify the frontend method using the call attribute. This example demonstrates using the 'check' method to evaluate build checks instead of running a build.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  call = \"check\"\n}\n```\n\n----------------------------------------\n\nTITLE: Package Type Filtering\nDESCRIPTION: Example of filtering vulnerable packages by type and displaying in a specific format\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves --format only-packages --only-package-type golang --only-vuln-packages golang:1.18.0\n✓ Pulled\n✓ SBOM of image already cached, 296 packages indexed\n✗ Detected 1 vulnerable package with 40 vulnerabilities\n\nName   Version   Type         Vulnerabilities\n───────────────────────────────────────────────────────────\nstdlib  1.18     golang     2C    29H     8M     1L\n```\n\n----------------------------------------\n\nTITLE: Running WebAssembly container with Wasmtime runtime\nDESCRIPTION: Command to run a WebAssembly container using the Wasmtime runtime, specifying the wasi/wasm32 platform to indicate it's a WebAssembly container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/alternative-runtimes.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm \\\n --runtime io.containerd.wasmtime.v1 \\\n --platform wasi/wasm32 \\\n michaelirwin244/wasm-example\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Spark Samples Documentation\nDESCRIPTION: This YAML frontmatter defines metadata for a documentation page about Spark samples in Docker. It specifies the title, description, service type, and URL aliases for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/spark.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Spark samples\ndescription: Docker samples for Spark.\nservice: spark\naliases:\n- /samples/spark/\n---\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Certificate Signing Requests\nDESCRIPTION: Removes temporary certificate signing request files and extension configuration files that are no longer needed after certificate generation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/protect-access.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ rm -v client.csr server.csr extfile.cnf extfile-client.cnf\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Scout Version Documentation\nDESCRIPTION: YAML frontmatter configuration that defines metadata for the Docker Scout version command documentation page, including data folder, file name, aliases, and layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/scout/version.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: scout-cli\ndatafile: docker_scout_version\naliases:\n- /engine/reference/commandline/scout_version\ntitle: docker scout version\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Removing a Container with Bind Mount\nDESCRIPTION: Command to stop and remove a container along with its volumes using the -fv flags, which forcefully removes the container and any associated anonymous volumes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker container rm -fv devtest\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Daemon via SSH\nDESCRIPTION: Examples of connecting to a remote Docker daemon using SSH with various connection format options including with and without port specification.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker -H ssh://me@example.com:22/var/run/docker.sock ps\n$ docker -H ssh://me@example.com:22 ps\n$ docker -H ssh://me@example.com ps\n$ docker -H ssh://example.com ps\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Documentation Build Settings in YAML\nDESCRIPTION: YAML configuration that sets up build parameters for Docker documentation, specifying that the content should never be rendered and setting metadata like title and weight for organization purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-developers/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  render: never\ntitle: For developers\nweight: 20\n```\n\n----------------------------------------\n\nTITLE: Docker Build Output\nDESCRIPTION: Example output from a successful Docker build command, showing the build steps, layers, and final image details including the SHA256 hash and tag name. This demonstrates the layered build process Docker uses.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/quickstart.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n[+] Building 0.6s (6/6) FINISHED                      docker:desktop-linux\n => [internal] load build definition from Dockerfile                  0.0s\n => => transferring dockerfile: 128B                                  0.0s\n => [internal] load metadata for docker.io/library/nginx:latest       0.0s\n => [internal] load .dockerignore                                     0.0s\n => => transferring context: 2B                                       0.0s\n => [1/2] FROM docker.io/library/nginx:latest                         0.1s\n => [2/2] RUN echo \"<h1>Hello world from Docker!</h1>\" > /usr/share/  0.2s\n => exporting to image                                                0.1s\n => => exporting layers                                               0.0s\n => => writing image sha256:f85ab68f4987847713e87a95c39009a5c9f4ad78  0.0s\n => => naming to docker.io/mobyismyname/nginx-custom                  0.0s\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Docker Compose Services\nDESCRIPTION: Command to stop and remove all running services defined in the compose.yaml file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/intro/compose-application-model.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Generating a Share URL for a Docker Extension\nDESCRIPTION: Command for generating a shareable URL for a Docker extension. This link opens Docker Desktop and displays a preview of the extension before installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/extensions/share.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker extension share my/awesome-extension:0.0.1\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images with Go SDK\nDESCRIPTION: Code example for listing all Docker images on the system using the Docker Go SDK. This is equivalent to the 'docker image ls' command and prints all image IDs.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/docker/docker/api/types/image\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tcli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer cli.Close()\n\n\timages, err := cli.ImageList(ctx, image.ListOptions{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, image := range images {\n\t\tfmt.Println(image.ID)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: This command lists all Docker images on the system, allowing the user to verify that their newly built image is present and view its details such as repository, tag, and size.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker image ls\n```\n\n----------------------------------------\n\nTITLE: Example of Good Practice: Using Default Platform in Dockerfile\nDESCRIPTION: This snippet shows the recommended approach of omitting the --platform flag, allowing for default platform selection and multi-platform builds.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-platform-flag-const-disallowed.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine AS base\nRUN apk add --no-cache git\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Stack Deploy Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the documentation page. It specifies the data folder and file, page title, multiple aliases for URL routing, and the layout template to use.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/stack/deploy.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_stack_deploy\ntitle: docker stack deploy\naliases:\n- /compose/bundles/\n- /engine/reference/commandline/deploy/\n- /edge/engine/reference/commandline/deploy/\n- /edge/engine/reference/commandline/stack_deploy/\n- /engine/reference/commandline/stack_deploy/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Installing NLP Language Model\nDESCRIPTION: Downloads the English language model for spaCy, which may be used by other NLP applications in the repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-summarization.md#2025-04-11_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN python -m spacy download en_core_web_sm\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Service with Escaped Volume Options\nDESCRIPTION: This snippet demonstrates how to create a Docker service with escaped volume options for the local driver. It shows the correct way to escape a comma-separated list of mount options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ docker service create \\\n --mount 'type=volume,src=<VOLUME-NAME>,dst=<CONTAINER-PATH>,volume-driver=local,volume-opt=type=nfs,volume-opt=device=<nfs-server>:<nfs-path>,\"volume-opt=o=addr=<nfs-address>,vers=4,soft,timeo=180,bg,tcp,rw\"'\n --name myservice \\\n <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Running a container with Docker socket mount in ECI\nDESCRIPTION: Example of running a container with a bind-mounted Docker socket, which by default would allow the container to issue any command via that socket.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/config.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock sh\n/ #\n```\n\n----------------------------------------\n\nTITLE: StopLogging Request/Response Format in JSON\nDESCRIPTION: JSON structure for the /LogDriver.StopLogging endpoint request and response that signals the plugin to stop collecting logs.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_logging.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"File\": \"/path/to/file/stream\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Groups to Container User\nDESCRIPTION: Using group_add to specify additional groups that the user inside the container should be a member of, useful for shared file access between containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    image: alpine\n    group_add:\n      - mail\n```\n\n----------------------------------------\n\nTITLE: Using Docker Init to Configure the Application\nDESCRIPTION: Interactive docker init command execution that creates Docker assets (Dockerfile, compose.yaml, etc.) with Python configuration for a Streamlit application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/containerize.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker init\nWelcome to the Docker Init CLI!\n\nThis utility will walk you through creating the following files with sensible defaults for your project:\n  - .dockerignore\n  - Dockerfile\n  - compose.yaml\n  - README.Docker.md\n\nLet's get started!\n\n? What application platform does your project use? Python\n? What version of Python do you want to use? 3.11.4\n? What port do you want your app to listen on? 8000\n? What is the command to run your app? streamlit run app.py --server.address=0.0.0.0 --server.port=8000\n```\n\n----------------------------------------\n\nTITLE: Using SBOM Input in Docker Scout CLI\nDESCRIPTION: Example of using the sbom:// protocol to read a Docker Scout SBOM from standard input in the CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/release-notes/cli.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout sbom IMAGE | docker scout qv sbom://\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Docker Version\nDESCRIPTION: Commands to install a specific version of Docker Engine\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ VERSION_STRING=5:5.0.0-1~ubuntu.24.04~noble\n$ sudo apt-get install docker-ce=$VERSION_STRING docker-ce-cli=$VERSION_STRING containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating an Infrastructure Compose File in YAML\nDESCRIPTION: This snippet shows how to create a separate Compose file for infrastructure components. It defines a Redis service using the redis:alpine image in a file called infra.yaml.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/gettingstarted.md#2025-04-11_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  redis:\n    image: \"redis:alpine\"\n```\n\n----------------------------------------\n\nTITLE: Authorization Response Response Schema\nDESCRIPTION: JSON schema for the response to /AuthZPlugin.AuthZRes API call. Similar to the request authorization response, it determines if the response should be allowed to reach the client.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"Allow\":              \"Determined whether the user is allowed or not\",\n   \"Msg\":                \"The authorization message\",\n   \"Err\":                \"The error message if things go wrong\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Scout Quickview Analysis on PostgreSQL Image\nDESCRIPTION: This command performs a quick vulnerability analysis on PostgreSQL 13.1 image, showing vulnerabilities in the current image, base image, and potential improvements with base image updates.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/analysis.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker scout quickview postgres:13.1\n```\n\n----------------------------------------\n\nTITLE: Converting Certificate Format using OpenSSL\nDESCRIPTION: This command demonstrates how to convert a certificate from DER format to CRT format using OpenSSL, which may be necessary before adding it to a Docker container's certificate store.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/ca-certs.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ openssl x509 -in cacert.der -inform DER -out myca.crt\n```\n\n----------------------------------------\n\nTITLE: Listing ZFS filesystems\nDESCRIPTION: Command to verify that the ZFS pool was created and mounted correctly, showing available space and mount points.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/zfs-driver.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo zfs list\n\nNAME           USED  AVAIL  REFER  MOUNTPOINT\nzpool-docker    55K  96.4G    19K  /var/lib/docker\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Using dockerd CLI\nDESCRIPTION: Example of how to register a runtime using the dockerd command line interface with the --add-runtime flag. This is an alternative to using the daemon.json configuration file.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dockerd --add-runtime <runtime>=<path>\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Container - HTTP Request\nDESCRIPTION: Example HTTP POST request to create a new Docker container with detailed configuration options including networking, resources, volumes, and health checks.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/create HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Logging Driver in daemon.json\nDESCRIPTION: JSON configuration for setting gcplogs as the default logging driver in Docker's daemon.json file, with the gcp-meta-name option specified to identify the instance.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/gcplogs.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-driver\": \"gcplogs\",\n  \"log-opts\": {\n    \"gcp-meta-name\": \"example-instance-12345\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Dockerfile with Separate apt-get Commands\nDESCRIPTION: Example showing the incorrect approach of separating apt-get update from apt-get install, which can lead to caching issues.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/best-practices.md#2025-04-11_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM ubuntu:22.04\nRUN apt-get update\nRUN apt-get install -y --no-install-recommends curl\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Up with Service Selection\nDESCRIPTION: Example of using the --attach flag to select specific services for log output. This prevents log output from being flooded by verbose services.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_up.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`--attach` flag\n```\n\n----------------------------------------\n\nTITLE: Configuring Containerd Socket Path in Docker Daemon\nDESCRIPTION: Example of how to manually specify the path to the containerd socket when Docker doesn't automatically start containerd. This allows for controlling containerd separately.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dockerd --containerd /run/containerd/containerd.sock\n```\n\n----------------------------------------\n\nTITLE: Overriding Inherited Attributes in Docker Bake\nDESCRIPTION: Demonstrates how to override specific inherited attributes in a target, in this case replacing the GO_VERSION argument with a specific version.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/inheritance.md#2025-04-11_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app-dev\" {\n  inherits = [\"_common\"]\n  args = {\n    GO_VERSION = \"1.17\"\n  }\n  tags = [\"docker.io/username/myapp:dev\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User-Defined Functions in Docker Bake\nDESCRIPTION: Shows how to create custom user-defined functions in HCL. Implements an 'increment' function that adds 1 to a number parameter.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/funcs.md#2025-04-11_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nfunction \"increment\" {\n  params = [number]\n  result = number + 1\n}\n\ngroup \"default\" {\n  targets = [\"webapp\"]\n}\n\ntarget \"webapp\" {\n  args = {\n    buildno = \"${increment(123)}\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\"webapp\"]\n    }\n  },\n  \"target\": {\n    \"webapp\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile\",\n      \"args\": {\n        \"buildno\": \"124\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying dockremap user creation\nDESCRIPTION: Command to verify that Docker has created the dockremap user for user namespace remapping, showing the user ID, group ID, and group memberships.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/userns-remap.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ id dockremap\n\nuid=112(dockremap) gid=116(dockremap) groups=116(dockremap)\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Inside a Container\nDESCRIPTION: This command, executed within a PostgreSQL container, connects to the PostgreSQL server using the psql client as the postgres user, without requiring a password when connecting locally.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# psql -U postgres\n```\n\n----------------------------------------\n\nTITLE: Specifying Annotations in Bake File\nDESCRIPTION: This Bake file configuration shows how to add annotations to images using the annotations attribute in a target definition, which will be applied when using docker buildx bake.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/annotations.md#2025-04-11_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  output = [\"type=registry\"]\n  annotations = [\"foo=bar\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rootless Kubernetes Builder for Docker Buildx\nDESCRIPTION: Command to create a Docker Buildx builder using the Kubernetes driver in rootless mode, which runs without privileged security context for improved security.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create \\\n  --name=kube \\\n  --driver=kubernetes \\\n  --driver-opt=namespace=buildkit,rootless=true\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Image to Docker Hub\nDESCRIPTION: This command pushes the built Docker image to Docker Hub. It requires the user to be logged in to Docker Hub and uses the previously defined image name and tag.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker push <YOUR_DOCKER_USERNAME>/concepts-build-image-demo\n```\n\n----------------------------------------\n\nTITLE: Checking Actual Disk Size of Docker.raw File\nDESCRIPTION: Commands to navigate to the Docker data directory and check the actual size of the Docker.raw disk image file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/macfaqs.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ cd ~/Library/Containers/com.docker.docker/Data/vms/0/data\n$ ls -klsh Docker.raw\n2333548 -rw-r--r--@ 1 username  staff    64G Dec 13 17:42 Docker.raw\n```\n\n----------------------------------------\n\nTITLE: Base Compose File for Multi-Environment Example\nDESCRIPTION: A base Compose file that defines the canonical configuration for web, database, and cache services for a multi-environment setup.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    image: example/my_web_app:latest\n    depends_on:\n      - db\n      - cache\n\n  db:\n    image: postgres:latest\n\n  cache:\n    image: redis:latest\n```\n\n----------------------------------------\n\nTITLE: Variable Definition and Usage\nDESCRIPTION: Shows how to define and use variables in Bake files, including tag interpolation and environment variable override examples.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_40\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"TAG\" {\n  default = \"latest\"\n}\n\ntarget \"webapp-dev\" {\n  dockerfile = \"Dockerfile.webapp\"\n  tags = [\"docker.io/username/webapp:${TAG}\"]\n}\n```\n\nLANGUAGE: console\nCODE:\n```\n$ TAG=dev docker buildx bake webapp-dev\n```\n\n----------------------------------------\n\nTITLE: Using local and tar exporters with Docker Buildx\nDESCRIPTION: Commands demonstrating how to build a container image using the local and tar exporters to save the results to the local filesystem instead of producing container images.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/local-tar.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --output type=local[,parameters] .\n$ docker buildx build --output type=tar[,parameters] .\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker API Documentation\nDESCRIPTION: YAML front matter block defining metadata for the Docker Engine API v1.28 documentation page. Includes the link title, page title, and URL aliases for the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.28.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlinkTitle: v1.28\ntitle: Docker Engine API v1.28 reference\naliases:\n- /engine/api/v1.28/\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Mount Request Format\nDESCRIPTION: JSON format for the Mount request in the volume plugin protocol. This endpoint is called when Docker needs the plugin to provide a volume for a container.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Name\": \"volume_name\",\n    \"ID\": \"b87d7442095999a92b65b3d9691e697b61713829cc0ffd1bb72e4ccd51aa4d6c\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Development Stage to .NET Dockerfile\nDESCRIPTION: This Dockerfile snippet adds a new development stage to the existing Dockerfile, providing SDK tools and dependencies for development purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/develop.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM mcr.microsoft.com/dotnet/sdk:7.0 as dev\nWORKDIR /app\nCOPY ./src/*.csproj .\nRUN dotnet restore\nCOPY ./src .\nCMD [\"dotnet\", \"run\", \"--no-launch-profile\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for AccuWeather API\nDESCRIPTION: Environment variables configuration in the .env file for the AccuWeather API integration, including the API key and endpoint base URL.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/wiremock.md#2025-04-11_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nACCUWEATHER_API_KEY=XXXXXX\nAPI_ENDPOINT_BASE=http://dataservice.accuweather.com\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtraHosts in Docker Container\nDESCRIPTION: Adds hostname to IP mappings to the container's /etc/hosts file. This allows custom DNS resolution within the container for specified host names.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\"hostname:IP\"]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Stage Naming in Dockerfile\nDESCRIPTION: This snippet shows an example of incorrect Dockerfile syntax where the stage name 'builder' is used twice, which can lead to errors in the build process.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/duplicate-stage-name.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian:latest AS builder\nRUN apt-get update; apt-get install -y curl\n\nFROM golang:latest AS builder\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Container Isolation Technology\nDESCRIPTION: Example of how to set the default container isolation technology for Windows containers to Hyper-V. On Windows client, the default is hyperv, and on Windows server, the default is process.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_26\n\nLANGUAGE: console\nCODE:\n```\n> dockerd --exec-opt isolation=hyperv\n```\n\n----------------------------------------\n\nTITLE: Setting Only Kernel Memory Limit in Docker\nDESCRIPTION: Configures a Docker container with only a 50MB kernel memory limit without restricting total memory usage, allowing unlimited user memory but controlled kernel memory usage.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_24\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --kernel-memory 50M ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Listing Local Images\nDESCRIPTION: Shows the trusttest images present in the local Docker cache\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_sandbox.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n/ # docker image ls | grep trusttest\nREPOSITORY                            TAG                 IMAGE ID            CREATED             SIZE\ndocker/trusttest                      latest              cc7629d1331a        11 months ago       5.025 MB\nsandboxregistry:5000/test/trusttest   latest              cc7629d1331a        11 months ago       5.025 MB\nsandboxregistry:5000/test/trusttest   <none>              cc7629d1331a        11 months ago       5.025 MB\n```\n\n----------------------------------------\n\nTITLE: Docker Buildx Prune Filters\nDESCRIPTION: Enhanced buildx prune command with new filter options for managing build cache and storage space.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/28.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx prune --filter \"reserved-space\"\ndocker buildx prune --filter \"max-used-space\"\ndocker buildx prune --filter \"min-free-space\"\ndocker buildx prune --filter \"keep-bytes\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker to Recognize Scout Plugin (Linux)\nDESCRIPTION: JSON configuration to add the scout subdirectory to Docker's config.json as a plugin directory on Linux. This enables Docker to find and use the Scout plugin.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/install.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cliPluginsExtraDirs\": [\n    \"/home/<USER>/.docker/scout\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Docker Scout Configuration Value\nDESCRIPTION: Shows how to set a value for a specific configuration key using the 'docker scout config' command. This example sets the 'organization' key to 'my-org-namespace'.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_config.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout config organization my-org-namespace\n    ✓ Successfully set organization to my-org-namespace\n```\n\n----------------------------------------\n\nTITLE: Plugin Error Response Example\nDESCRIPTION: Example output when the authorization plugin itself encounters an error during request processing, showing how the error is propagated to the client.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull centos\n<...>\ndocker: Error response from daemon: plugin PLUGIN_NAME failed with error: AuthZPlugin.AuthZReq: Cannot connect to the Docker daemon. Is the docker daemon running on this host?.\n```\n\n----------------------------------------\n\nTITLE: Creating Attachable Overlay Network in Docker\nDESCRIPTION: Creates an overlay network that allows both standalone containers and Swarm services to connect. The --attachable flag enables this dual connectivity.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/overlay.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create -d overlay --attachable my-attachable-overlay\n```\n\n----------------------------------------\n\nTITLE: Using ADD Instruction for Remote File Fetching in Dockerfile\nDESCRIPTION: Shows the ADD instruction usage for fetching remote files directly during build time, reducing the build context size and improving network efficiency.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/optimization.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nADD\n```\n\n----------------------------------------\n\nTITLE: Starting a Service with Volumes\nDESCRIPTION: Shows how to create a Docker service with replicas, each using a local volume, and how to verify and remove the service.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create -d \\\n  --replicas=4 \\\n  --name devtest-service \\\n  --mount source=myvol2,target=/app \\\n  nginx:latest\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker service ps devtest-service\n\nID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS\n4d7oz1j85wwn        devtest-service.1   nginx:latest        moby                Running             Running 14 seconds ago\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker service rm devtest-service\n```\n\n----------------------------------------\n\nTITLE: Configuring ulimits in Docker Bake Target\nDESCRIPTION: Demonstrates how to set ulimits for build containers when using RUN instructions, specifying soft and hard limits.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_37\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  ulimits = [\n    \"nofile=1024:1024\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a MySQL Container Shell with Docker CLI\nDESCRIPTION: Command to execute an interactive bash shell in a running MySQL container. The -it flags ensure the terminal is interactive so you can input commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -it my-mysql bash\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the standard boilerplate notice to apply the Apache License 2.0 to a project. It includes placeholders for copyright year and owner name, followed by the standard license text that should be included in project files.\nSOURCE: https://github.com/docker/docs/blob/main/static/assets/fonts/RobotoMono_LICENSE.txt#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Recreating Docker Compose Symlink on Mac After Docker Desktop Update\nDESCRIPTION: Commands to fix a broken docker-compose symlink after Docker Desktop auto-update on Mac. This addresses an issue where the symlink might break after updates since Docker Compose V1 was removed in Docker Desktop version 4.23.0.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo rm /usr/local/bin/docker-compose\n$ sudo ln -s /Applications/Docker.app/Contents/Resources/cli-plugins/docker-compose /usr/local/bin/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Docker Build Command for Running Java Tests\nDESCRIPTION: A command to build a Docker image targeting specifically the test stage in the multi-stage Dockerfile. It includes flags to show build progress, disable caching to ensure tests always run, and specifies the test stage as the build target.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/run-tests.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t java-docker-image-test --progress=plain --no-cache --target=test .\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon Proxy Settings in daemon.json\nDESCRIPTION: JSON configuration for setting up HTTP and HTTPS proxies in the Docker daemon configuration file. Includes proxy URLs and no-proxy patterns for excluding specific domains.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/proxy.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"proxies\": {\n    \"http-proxy\": \"http://proxy.example.com:3128\",\n    \"https-proxy\": \"https://proxy.example.com:3129\",\n    \"no-proxy\": \"*.test.example.com,.example.org,127.0.0.0/8\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Node.js Application Script\nDESCRIPTION: A simple Node.js application script that prints 'Hello from an app' to the console, used to demonstrate creating an application-specific Docker image.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/understanding-image-layers.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\"Hello from an app\")\n```\n\n----------------------------------------\n\nTITLE: Bad Example: Using Deprecated MAINTAINER Instruction\nDESCRIPTION: An example showing the incorrect way to specify author information using the deprecated MAINTAINER instruction in a Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/maintainer-deprecated.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nMAINTAINER moby@example.com\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Docker Desktop MSI Non-Interactively without Verbose Logging in PowerShell\nDESCRIPTION: Command to silently uninstall Docker Desktop MSI without logging, providing the simplest method for automated removal.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/enterprise-deployment/msi-install-and-configure.md#2025-04-11_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nmsiexec /x \"DockerDesktop.msi\" /quiet\n```\n\n----------------------------------------\n\nTITLE: Running a Development Container with Docker Compose\nDESCRIPTION: A console command to build and run the development container using Docker Compose. This will apply the changes made to the Dockerfile and compose.yaml file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/develop.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample Application Repository\nDESCRIPTION: Command to clone the todo-list-app sample application from GitHub repository. This is the first step to get the application code locally.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/using-the-build-cache.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dockersamples/todo-list-app\n```\n\n----------------------------------------\n\nTITLE: Swarm Stack Deployment Output\nDESCRIPTION: The output shows Swarm creating both a default network and the service defined in the stack file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/swarm-deploy.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nCreating network demo_default\nCreating service demo_bb-app\n```\n\n----------------------------------------\n\nTITLE: Authorization Response API Schema\nDESCRIPTION: JSON schema for the /AuthZPlugin.AuthZRes API that is called before Docker daemon returns a response to the client. It includes the original request details plus response data.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"User\":              \"The user identification\",\n    \"UserAuthNMethod\":   \"The authentication method used\",\n    \"RequestMethod\":     \"The HTTP method\",\n    \"RequestURI\":        \"The HTTP request URI\",\n    \"RequestBody\":       \"Byte array containing the raw HTTP request body\",\n    \"RequestHeader\":     \"Byte array containing the raw HTTP request header as a map[string][]string\",\n    \"ResponseBody\":      \"Byte array containing the raw HTTP response body\",\n    \"ResponseHeader\":    \"Byte array containing the raw HTTP response header as a map[string][]string\",\n    \"ResponseStatusCode\":\"Response status code\"\n}\n```\n\n----------------------------------------\n\nTITLE: Quick Overview of Most Recent Built Image\nDESCRIPTION: Example showing the shortened command to analyze the most recently built Docker image.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_quickview.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout qv\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 for the Default Bridge Network in Docker\nDESCRIPTION: JSON configuration for enabling IPv6 on the default bridge network. This example enables IPv6 and sets the bridge IPv6 address, container IPv6 address range, and default IPv6 gateway.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ipv6\": true,\n  \"bip6\": \"2001:db8::1111/64\",\n  \"fixed-cidr-v6\": \"2001:db8::/64\",\n  \"default-gateway-v6\": \"2001:db8:abcd::89\"\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Output Example\nDESCRIPTION: Sample output from the /metrics endpoint showing the format of collected metrics.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/application.md#2025-04-11_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# HELP api_http_request_error_total Total number of errors returned by the API\n# TYPE api_http_request_error_total counter\napi_http_request_error_total{path=\"/\",status=\"404\"} 1\napi_http_request_error_total{path=\"//v1/users\",status=\"404\"} 1\napi_http_request_error_total{path=\"/favicon.ico\",status=\"404\"} 1\n# HELP api_http_request_total Total number of requests processed by the API\n# TYPE api_http_request_total counter\napi_http_request_total{path=\"/health\",status=\"200\"} 2\napi_http_request_total{path=\"/v1/users\",status=\"200\"} 1\n```\n\n----------------------------------------\n\nTITLE: Viewing Images for a Docker Scout Environment Using CLI\nDESCRIPTION: This command displays the images assigned to the production environment using the Docker Scout CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/environment/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout env production\n```\n\n----------------------------------------\n\nTITLE: Setting Image Labels in Docker Buildx Bake (HCL)\nDESCRIPTION: Shows how to assign labels to a build target using the 'labels' attribute. Labels can be set to specific values or null to use the value from the Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_23\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  labels = {\n    \"org.opencontainers.image.source\" = \"https://github.com/username/myapp\"\n    \"com.docker.image.source.entrypoint\" = \"Dockerfile\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Docker Scout for Filtered Repositories\nDESCRIPTION: This command disables Docker Scout on repositories that match a specific filter pattern. The --filter flag allows for targeting repositories based on a regular expression.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_disable.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout repo disable --filter namespace/backend\n```\n\n----------------------------------------\n\nTITLE: Accessing Host Devices in Docker Container\nDESCRIPTION: Shows how to allow containers to access specific devices from the host using the --device flag, providing direct access to hardware devices inside containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n--device\n```\n\n----------------------------------------\n\nTITLE: Mounting Btrfs Filesystem for Docker\nDESCRIPTION: Command to mount the newly created Btrfs filesystem to Docker's data directory. This makes the filesystem available for Docker to use.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/btrfs-driver.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo mount -t btrfs /dev/xvdf /var/lib/docker\n```\n\n----------------------------------------\n\nTITLE: Running a named container in Docker\nDESCRIPTION: Creates a container with a custom name 'web' using the --name flag, making it easier to reference in subsequent commands and for container linking.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -P --name web training/webapp python app.py\n```\n\n----------------------------------------\n\nTITLE: Building and Updating Docker Extension\nDESCRIPTION: Commands for building and updating a Docker extension after making changes to the configuration or Dockerfile. Includes steps for building a new version and updating the installed extension.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/backend-extension-tutorial.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --tag=awesome-inc/my-extension:latest .\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker extension update awesome-inc/my-extension:latest\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Docs Local Development Server\nDESCRIPTION: Command to start the local development server using Docker Compose with watch mode, which automatically rebuilds the site when changes are detected.\nSOURCE: https://github.com/docker/docs/blob/main/CONTRIBUTING.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose watch\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Data After Uninstallation\nDESCRIPTION: Commands to remove Docker data directories after uninstalling Docker Engine. This deletes all images, containers, and volumes from the system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ sudo rm -rf /var/lib/docker\n$ sudo rm -rf /var/lib/containerd\n```\n\n----------------------------------------\n\nTITLE: Using Local Directory as Build Context in Docker Bake\nDESCRIPTION: Demonstrates how to use a local directory as an additional build context using the contexts attribute. The example shows how to use the named context in a Dockerfile.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\n# docker-bake.hcl\ntarget \"app\" {\n    contexts = {\n        src = \"../path/to/source\"\n    }\n}\n```\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Dockerfile\nFROM scratch AS src\nFROM golang\nCOPY --from=src . .\n```\n\n----------------------------------------\n\nTITLE: Create Volume API Request in Docker\nDESCRIPTION: HTTP request to create a new volume, specifying name, labels, and driver parameters.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_65\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/volumes/create HTTP/1.1\nContent-Type: application/json\nContent-Length: 12345\n\n{\n  \"Name\": \"tardis\",\n  \"Labels\": {\n    \"com.example.some-label\": \"some-value\",\n    \"com.example.some-other-label\": \"some-other-value\"\n  },\n  \"Driver\": \"custom\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample Application Repository\nDESCRIPTION: Git command to clone the sample Docker application repository for the hands-on guide. This provides the source code needed for the exercise.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/docker/getting-started-todo-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Sysctls in Docker Container\nDESCRIPTION: Sets kernel parameters (sysctls) in the container. This example enables IP forwarding within the container by setting the corresponding sysctl parameter.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{ \"net.ipv4.ip_forward\": \"1\" }\n```\n\n----------------------------------------\n\nTITLE: Creating Custom BuildKit Image with CNI Support\nDESCRIPTION: Dockerfile to create a custom BuildKit image that includes CNI networking support, using a sample CNI configuration from BuildKit's integration tests.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/configure.md#2025-04-11_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Dockerfile content not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Performing Arithmetic Operations in Docker Bake HCL\nDESCRIPTION: This snippet demonstrates how to perform arithmetic operations in a Bake file by multiplying two numbers and using the result as a build argument.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/expressions.md#2025-04-11_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsum = 7*6\n\ntarget \"default\" {\n  args = {\n    answer = sum\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Alpha Command Reference Table - Markdown\nDESCRIPTION: Markdown table showing experimental subcommands viz and watch with their descriptions.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_alpha.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                              | Description                                                                                          |\n|:----------------------------------|:-----------------------------------------------------------------------------------------------------|\n| [`viz`](compose_alpha_viz.md)     | EXPERIMENTAL - Generate a graphviz graph from your compose file                                      |\n| [`watch`](compose_alpha_watch.md) | EXPERIMENTAL - Watch build context for service and rebuild/refresh containers when files are updated |\n```\n\n----------------------------------------\n\nTITLE: Explicit Shell Definition in Dockerfile\nDESCRIPTION: Example showing how to explicitly define a shell to use shell form features while acknowledging the implications.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/json-args-recommended.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nRUN apk add bash\nSHELL [\"/bin/bash\", \"-c\"]\nENTRYPOINT echo \"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Named Container is Running\nDESCRIPTION: List running containers to confirm the container is running with the custom name, making it easier to identify in the container list.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps\n\nCONTAINER ID   IMAGE            COMMAND             CREATED          STATUS          PORTS                    NAMES\n3bbc6a3102ea   docker-gs-ping   \"/docker-gs-ping\"   25 seconds ago   Up 24 seconds   0.0.0.0:8080->8080/tcp   rest-server\n```\n\n----------------------------------------\n\nTITLE: Stopping a Container in Docker API\nDESCRIPTION: API call to stop a Docker container by its ID or name. The 't' parameter specifies the number of seconds to wait before killing the container.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/stop?t=5 HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Development Workflow Management with Gordon CLI\nDESCRIPTION: Commands for managing development workflows including git operations and code analysis.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/mcp/built-in-tools.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n# Analyze and commit changes\n$ docker ai \"Look at my local changes, create multiple commits with sensible commit messages\"\n\n# Review branch status\n$ docker ai \"Show me the status of my current branch compared to main\"\n```\n\n----------------------------------------\n\nTITLE: Exposing Docker API Socket Through SSH\nDESCRIPTION: Commands to verify Docker host environment on a remote system and connect to a remote rootless Docker daemon through SSH protocol.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ ssh -l <REMOTEUSER> <REMOTEHOST> 'echo $DOCKER_HOST'\nunix:///run/user/1001/docker.sock\n$ docker -H ssh://<REMOTEUSER>@<REMOTEHOST> run ...\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Container Metadata Storage\nDESCRIPTION: This Linux-specific command shows the disk space used by Docker container metadata and log files. It requires access to the Docker daemon's file storage location.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo du -sh /var/lib/docker/containers/*\n```\n\n----------------------------------------\n\nTITLE: Analyzing Local Docker Image with Scout\nDESCRIPTION: Use the docker scout cves command to analyze a local Docker image for vulnerabilities. If the image doesn't exist locally, Docker pulls it before analysis.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/how-tos/artifact-types.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves <image>\n```\n\n----------------------------------------\n\nTITLE: Configuring IPC Mode in Docker Compose\nDESCRIPTION: IPC (Inter-Process Communication) isolation mode configuration for service containers, either making it shareable or joining another container's IPC namespace.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\n    ipc: \"shareable\"\n    ipc: \"service:[service name]\"\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Secrets in Swarm\nDESCRIPTION: Displays all secrets currently managed by Docker in the swarm. This command shows the ID, name, and creation/update timestamps of each secret.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker secret ls\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose with Watch Mode\nDESCRIPTION: Command to run the application with Compose Watch enabled, which automatically rebuilds the container when code changes are detected.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/develop.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose watch\n```\n\n----------------------------------------\n\nTITLE: Scaling 'helloworld' Service to 5 Tasks\nDESCRIPTION: This example demonstrates scaling the 'helloworld' service to 5 tasks. It shows the command and its output, confirming that the service has been scaled.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/scale-service.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker service scale helloworld=5\n\nhelloworld scaled to 5\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Repository Configuration from Debian\nDESCRIPTION: Commands to remove Docker's repository configuration files after uninstallation. This cleans up the apt sources and keyring files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ sudo rm /etc/apt/sources.list.d/docker.list\n$ sudo rm /etc/apt/keyrings/docker.asc\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose Remove Command\nDESCRIPTION: Example showing how to remove a stopped container using docker compose rm. The command prompts for confirmation before removing the container 'djangoquickstart_web_run_1'.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_rm.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose rm\nGoing to remove djangoquickstart_web_run_1\nAre you sure? [yN] y\nRemoving djangoquickstart_web_run_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Running Container with Red Hat Subscription\nDESCRIPTION: Example command to run a container with Red Hat subscription data attached\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/rhel.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -it -v \"/etc/pki/entitlement:/etc/pki/entitlement\" -v \"/etc/rhsm:/etc/rhsm-host\" -v \"/etc/yum.repos.d/redhat.repo:/etc/yum.repos.d/redhat.repo\" registry.access.redhat.com/ubi9\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Service Configuration in YAML\nDESCRIPTION: An example of a basic service configuration in a compose.yaml file that specifies an image, ports mapping, and volume configuration for a webapp service.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    image: examples/web\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - \"/data\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Image Details via API\nDESCRIPTION: GET endpoint to retrieve detailed information about a Docker image including its ID, config, layers and other metadata.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_39\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/images/example/json HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Up with Service Exclusion\nDESCRIPTION: Example of using the --no-attach flag to exclude specific services from log output. This helps manage output from verbose services.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_up.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`--no-attach`\n```\n\n----------------------------------------\n\nTITLE: Checking KVM Device Ownership on Linux\nDESCRIPTION: Command to verify the ownership and permissions of the KVM device file. This is important for ensuring the current user has access to KVM functionality.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/_index.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ ls -al /dev/kvm\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon with Bridge Network Options\nDESCRIPTION: Examples of Docker daemon flags for configuring bridge network options. These flags correspond to network options that can be set when creating a custom bridge network.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/bridge.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndockerd --ip-masq\ndockerd --icc\ndockerd --ip\ndockerd --mtu\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Toast in Docker Extension (TypeScript)\nDESCRIPTION: This code shows how to display a warning toast message in a Docker extension. It utilizes the warning method of the toast interface to present a temporary alert to the user.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Toast.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.desktopUI.toast.warning(\"message\");\n```\n\n----------------------------------------\n\nTITLE: Restoring Docker Data to Btrfs Filesystem\nDESCRIPTION: Command to copy the previously backed up Docker data to the newly mounted Btrfs filesystem, preserving attributes and permissions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/btrfs-driver.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo cp -au /var/lib/docker.bk/* /var/lib/docker/\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDX_BAKE_GIT_SSH for SSH Authentication\nDESCRIPTION: Specifies SSH agent socket filepaths to forward to Bake for Git authentication. Takes multiple paths using a comma-separated string.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nexport BUILDX_BAKE_GIT_SSH=/run/foo/listener.sock,~/.creds/ssh.sock\n```\n\n----------------------------------------\n\nTITLE: Exporting a Docker Context\nDESCRIPTION: The docker context export command saves a context configuration to a file, which can then be imported on another host to recreate the same context configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/contexts.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker context export docker-test\nWritten file \"docker-test.dockercontext\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Docker Engine from Debian\nDESCRIPTION: Command to remove Docker Engine and related packages from a Debian system using apt-get purge. This removes the packages but preserves data.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras\n```\n\n----------------------------------------\n\nTITLE: Running phpMyAdmin Container on Docker Network\nDESCRIPTION: Runs a phpMyAdmin container on the 'my-network' network, mapping port 8080 and setting the MySQL host.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --name my-phpmyadmin -d --network my-network -p 8080:80 -e PMA_HOST=my-mysql phpmyadmin\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Port Mapping\nDESCRIPTION: Command to run a Docker container from the built image, mapping container port 8000 to localhost:8000 on the host machine.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/dockerfile.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -p 127.0.0.1:8000:8000 test:latest\n```\n\n----------------------------------------\n\nTITLE: Using the Lower Function in Docker Command Output\nDESCRIPTION: The lower function transforms a string into its lowercase representation. This example converts the container name to lowercase in docker inspect output.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker inspect --format \"{{lower .Name}}\" container\n```\n\n----------------------------------------\n\nTITLE: Setting Build Arguments in a Bake Target\nDESCRIPTION: Example of using the `args` attribute to define build arguments in a Bake target, similar to using the `--build-arg` flag in a Docker build command.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  args = {\n    VERSION = \"0.0.0+unknown\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running CockroachDB Container\nDESCRIPTION: Starts a CockroachDB container with volume and network configurations, exposing necessary ports.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  --name roach \\\n  --hostname db \\\n  --network mynet \\\n  -p 26257:26257 \\\n  -p 8080:8080 \\\n  -v roach:/cockroach/cockroach-data \\\n  cockroachdb/cockroach:latest-v20.1 start-single-node \\\n  --insecure\n```\n\n----------------------------------------\n\nTITLE: Listing Running Containers with Docker PS\nDESCRIPTION: Command to list all running Docker containers, which will display container IDs that can be used to stop or remove specific containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/03_updating_app.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Configuring awslogs Driver in daemon.json\nDESCRIPTION: Sets the default logging driver to awslogs and specifies the AWS region in the Docker daemon configuration file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/awslogs.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-driver\": \"awslogs\",\n  \"log-opts\": {\n    \"awslogs-region\": \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Docker Scout Configuration Value\nDESCRIPTION: Demonstrates how to retrieve the value of a specific configuration key (in this case 'organization') using the 'docker scout config' command followed by the key name.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_config.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout config organization\nmy-org-namespace\n```\n\n----------------------------------------\n\nTITLE: Implementing StopMetrics Endpoint for Docker MetricsCollector\nDESCRIPTION: Defines the request and response format for the StopMetrics endpoint of the MetricsCollector interface. This endpoint signals that the metrics socket is no longer available.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_metrics.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// Request:\n{}\n\n// Response:\n{\n  \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inspect Docker Plugin Request/Response\nDESCRIPTION: GET endpoint to retrieve detailed information about a specific installed plugin including its configuration and manifest details.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_85\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v1.24/plugins/tiborvass/no-remove:latest HTTP/1.1\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Id\": \"5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078\",\n  \"Name\": \"tiborvass/no-remove\",\n  \"Tag\": \"latest\",\n  \"Active\": false,\n  \"Config\": {\n    \"Mounts\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Shows the directory structure generated after Docker initialization, including Docker configuration files and project contents.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/containerize.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n├── docker-dotnet-sample/\n│ ├── .git/\n│ ├── src/\n│ ├── .dockerignore\n│ ├── compose.yaml\n│ ├── Dockerfile\n│ ├── README.Docker.md\n│ └── README.md\n```\n\n----------------------------------------\n\nTITLE: HTML Comment with Source Code Repository Reference\nDESCRIPTION: HTML comment containing information about the source of the documentation and instructions for suggesting changes to the text via GitHub issues or pull requests.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/system/info.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Scout for All Organization Repositories\nDESCRIPTION: Shows how to enable Docker Scout for all repositories within an organization using the --all flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_enable.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout repo enable --all\n```\n\n----------------------------------------\n\nTITLE: Optimized Node.js Dockerfile with Caching\nDESCRIPTION: Improved Dockerfile that optimizes dependency caching. It first copies only package.json and yarn.lock to install dependencies, then copies the rest of the application code, allowing Docker to cache the dependency installation step.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/using-the-build-cache.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:20-alpine\nWORKDIR /app\nCOPY package.json yarn.lock ./\nRUN yarn install --production \nCOPY . . \nEXPOSE 3000\nCMD [\"node\", \"src/index.js\"]\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in New Container\nDESCRIPTION: Attempts to check if the previously created file exists in a new Alpine container, demonstrating filesystem isolation between containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/05_persisting_data.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm alpine stat greeting.txt\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Container List Documentation\nDESCRIPTION: YAML configuration block defining metadata for the Docker container ls command documentation page, including the data folder, file name, title, and various URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/ls.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_container_ls\ntitle: docker container ls\naliases:\n- /edge/engine/reference/commandline/container_ls/\n- /engine/reference/commandline/container_ls/\n- /engine/reference/commandline/ps/\n- /reference/cli/docker/ps/\n- /reference/cli/docker/container/ps/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Updating JavaScript Code in a Live Development Container\nDESCRIPTION: A diff snippet showing how to update button text in a JavaScript file. Changes in the source code are immediately reflected in the running container due to the bind mount.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/develop.md#2025-04-11_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n+                         {submitting ? 'Adding...' : 'Add'}\n-                         {submitting ? 'Adding...' : 'Add Item'}\n```\n\n----------------------------------------\n\nTITLE: Viewing Specific Volume in TypeScript\nDESCRIPTION: Navigates to a specific volume view using its name. Returns a promise that resolves when the navigation is complete.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/NavigationIntents.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.desktopUI.navigate.viewVolume(volume)\n```\n\n----------------------------------------\n\nTITLE: Release Notes Structure - Markdown\nDESCRIPTION: Organized changelog documenting improvements, fixes and new features in Docker Engine 17.04.0-ce\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.04.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 17.04.0-ce\n2017-04-05\n\n### Builder\n\n* Disable container logging for build containers [#29552]\n* Fix use of `**/` in `.dockerignore` [#29043]\n\n### Client\n\n+ Sort `docker stack ls` by name [#31085]\n+ Flags for specifying bind mount consistency [#31047]\n* Output of docker CLI --help is now wrapped to the terminal width [#28751]\n* Suppress image digest in docker ps [#30848]\n* Hide command options that are related to Windows [#30788]\n* Fix `docker plugin install` prompt to accept \"enter\" for the \"N\" default [#30769]\n+ Add `truncate` function for Go templates [#30484]\n* Support expanded syntax of ports in `stack deploy` [#30476]\n* Support expanded syntax of mounts in `stack deploy` [#30597] [#31795]\n+ Add `--add-host` for docker build [#30383]\n+ Add `.CreatedAt` placeholder for `docker network ls --format` [#29900]\n* Update order of `--secret-rm` and `--secret-add` [#29802]\n+ Add `--filter enabled=true` for `docker plugin ls` [#28627]\n+ Add `--format` to `docker service ls` [#28199]\n+ Add `publish` and `expose` filter for `docker ps --filter` [#27557]\n* Support multiple service IDs on `docker service ps` [#25234]\n+ Allow swarm join with `--availability=drain` [#24993]\n* Docker inspect now shows \"docker-default\" when AppArmor is enabled and no other profile was defined [#27083]\n```\n\n----------------------------------------\n\nTITLE: Running Docker Daemon with Multiple Socket Listeners\nDESCRIPTION: Example of running the Docker daemon listening on the default Unix socket and on two specific IP addresses simultaneously using multiple -H options.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dockerd -H unix:///var/run/docker.sock -H tcp://192.168.59.106 -H tcp://10.10.10.2\n```\n\n----------------------------------------\n\nTITLE: Analyzing CVEs for a Specific Package\nDESCRIPTION: Command to scan and display all CVEs (Common Vulnerabilities and Exposures) affecting the Express package in the most recently built image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves --only-package express\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for .NET Web Application\nDESCRIPTION: A multi-stage Dockerfile for a .NET web application with build, development, and production stages. The build stage compiles the application, the development stage provides a development environment, and the final stage creates a production-ready container with security considerations.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/develop.md#2025-04-11_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n\nFROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS build\nARG TARGETARCH\nCOPY . /source\nWORKDIR /source/src\nRUN --mount=type=cache,id=nuget,target=/root/.nuget/packages \\\n    dotnet publish -a ${TARGETARCH/amd64/x64} --use-current-runtime --self-contained false -o /app\n\nFROM mcr.microsoft.com/dotnet/sdk:8.0-alpine AS development\nCOPY . /source\nWORKDIR /source/src\nCMD dotnet run --no-launch-profile\n\nFROM mcr.microsoft.com/dotnet/aspnet:8.0-alpine AS final\nWORKDIR /app\nCOPY --from=build /app .\nARG UID=10001\nRUN adduser \\\n    --disabled-password \\\n    --gecos \"\" \\\n    --home \"/nonexistent\" \\\n    --shell \"/sbin/nologin\" \\\n    --no-create-home \\\n    --uid \"${UID}\" \\\n    appuser\nUSER appuser\nENTRYPOINT [\"dotnet\", \"myWebApp.dll\"]\n```\n\n----------------------------------------\n\nTITLE: Docker Scout Integration List Options Table\nDESCRIPTION: Markdown table showing the available options for the docker scout integration list command. Includes the name, type, default value and description for each option.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_integration_list.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name     | Type     | Default | Description                               |\n|:---------|:---------|:--------|:------------------------------------------|\n| `--name` | `string` |         | Name of integration configuration to list |\n| `--org`  | `string` |         | Namespace of the Docker organization      |\n```\n\n----------------------------------------\n\nTITLE: Demo of Attribute Merging When Combining Bake Files\nDESCRIPTION: Example showing how the `labels` attribute is merged when both `compose.yaml` and `docker-bake.hcl` define it. Unique labels from both files are included, while duplicates are overridden by the last occurrence.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cat compose.yaml\nservices:\n  webapp:\n    build:\n      context: .\n      labels: \n        com.example.foo: \"foo\"\n        com.example.name: \"Alice\"\n$ cat docker-bake.hcl\ntarget \"webapp\" {\n  labels = {\n    \"com.example.bar\" = \"bar\"\n    \"com.example.name\" = \"Bob\"\n  }\n}\n$ docker buildx bake --print webapp\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\n        \"webapp\"\n      ]\n    }\n  },\n  \"target\": {\n    \"webapp\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile\",\n      \"labels\": {\n        \"com.example.foo\": \"foo\",\n        \"com.example.bar\": \"bar\",\n        \"com.example.name\": \"Bob\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking KVM Status on Linux\nDESCRIPTION: Command to verify if KVM is properly functioning on the Linux system. This helps diagnose virtualization support issues that might affect Docker Desktop installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/_index.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ kvm-ok\n```\n\n----------------------------------------\n\nTITLE: Converting Docker Compose to Kubernetes with compose-bridge\nDESCRIPTION: The basic command to convert a docker-compose.yaml file in the current directory to Kubernetes manifests using Compose Bridge's default transformation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/usage.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ compose-bridge convert\n```\n\n----------------------------------------\n\nTITLE: Storing Docker Access Token in a File\nDESCRIPTION: Command to save a Docker Personal Access Token (PAT) to a token file that will be mounted into the Datadog agent container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/metrics-exporter.md#2025-04-11_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n$ echo $DOCKER_PAT > ./token\n```\n\n----------------------------------------\n\nTITLE: Error Output for Relative Workdir Warning\nDESCRIPTION: Example error message shown when a relative workdir path is used without an absolute workdir being declared first.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/workdir-relative-path.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nRelative workdir 'app/src' can have unexpected results if the base image changes\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Checkpoint Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the Docker checkpoint ls command documentation page, including title, aliases, and layout configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/checkpoint/ls.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_checkpoint_ls\ntitle: docker checkpoint ls\naliases:\n- /edge/engine/reference/commandline/checkpoint_ls/\n- /engine/reference/commandline/checkpoint_ls/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Correct Dockerfile with All Uppercase Instructions\nDESCRIPTION: A properly formatted Dockerfile example using all uppercase for instruction keywords, which is the conventional and recommended approach.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/consistent-instruction-casing.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nRUN echo hello > /greeting.txt\nENTRYPOINT [\"cat\", \"/greeting.txt\"]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Service via GET API\nDESCRIPTION: GET endpoint to retrieve detailed information about a specific Docker service including configurations, specs, and endpoint details.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_104\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/services/1cb4dnqcyx6m66g2t538x3rxha HTTP/1.1\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ID\": \"ak7w3gjqoa3kuz8xcpnyy0pvl\",\n  \"Version\": {\n    \"Index\": 95\n  },\n  \"CreatedAt\": \"2016-06-07T21:10:20.269723157Z\",\n  \"UpdatedAt\": \"2016-06-07T21:10:20.276301259Z\",\n  \"Spec\": {\n    \"Name\": \"redis\",\n    \"TaskTemplate\": {\n      \"ContainerSpec\": {\n        \"Image\": \"redis\"\n      },\n      \"Resources\": {\n        \"Limits\": {},\n        \"Reservations\": {}\n      },\n      \"RestartPolicy\": {\n        \"Condition\": \"any\",\n        \"MaxAttempts\": 0\n      },\n      \"Placement\": {}\n    },\n    \"Mode\": {\n      \"Replicated\": {\n        \"Replicas\": 1\n      }\n    },\n    \"UpdateConfig\": {\n      \"Parallelism\": 1,\n      \"FailureAction\": \"pause\"\n    },\n    \"EndpointSpec\": {\n      \"Mode\": \"vip\",\n      \"Ports\": [\n        {\n          \"Protocol\": \"tcp\",\n          \"TargetPort\": 6379,\n          \"PublishedPort\": 30001\n        }\n      ]\n    }\n  },\n  \"Endpoint\": {\n    \"Spec\": {\n      \"Mode\": \"vip\",\n      \"Ports\": [\n        {\n          \"Protocol\": \"tcp\",\n          \"TargetPort\": 6379,\n          \"PublishedPort\": 30001\n        }\n      ]\n    },\n    \"Ports\": [\n      {\n        \"Protocol\": \"tcp\",\n        \"TargetPort\": 6379,\n        \"PublishedPort\": 30001\n      }\n    ],\n    \"VirtualIPs\": [\n      {\n        \"NetworkID\": \"4qvuz4ko70xaltuqbt8956gd1\",\n        \"Addr\": \"10.255.0.4/16\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Docker API Version Environment Variable\nDESCRIPTION: This snippet shows how to force Docker CLI or SDKs to use a specific older version of the API by setting the DOCKER_API_VERSION environment variable.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ DOCKER_API_VERSION={{ $major }}.{{ math.Sub $minor 1 }}\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Buildx Inline Cache Usage\nDESCRIPTION: Basic example of using inline cache with Docker Buildx build command, demonstrating both cache export and import using registry references.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/inline.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=inline \\\n  --cache-from type=registry,ref=<registry>/<image> .\n```\n\n----------------------------------------\n\nTITLE: Creating an IPv6-only Network\nDESCRIPTION: This example demonstrates creating a Docker network with IPv6 addressing enabled and IPv4 addressing disabled using the network create command with appropriate flags.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/_index.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create --ipv6 --ipv4=false v6net\n```\n\n----------------------------------------\n\nTITLE: Modifying .NET Razor Page for Text Update\nDESCRIPTION: This diff shows a minor text change in the Index.cshtml file to update the display text for the student name.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/develop.md#2025-04-11_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-    <p>Student Name is @Model.StudentName</p>\n+    <p>Student name: @Model.StudentName</p>\n```\n\n----------------------------------------\n\nTITLE: Error Output Example for Ignored File Copy\nDESCRIPTION: Shows the error message displayed when attempting to copy a file that matches a .dockerignore pattern.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/copy-ignored-file.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAttempting to Copy file \"./tmp/Dockerfile\" that is excluded by .dockerignore\n```\n\n----------------------------------------\n\nTITLE: Running a Spring Boot Container\nDESCRIPTION: Command to run a Spring Boot application container, exposing port 8080 from the container to the host system.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -p 8080:8080 spring-helloworld\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Path v2 Response Format\nDESCRIPTION: JSON v2 response format for the Path endpoint in the volume plugin protocol. The response includes the mountpoint under PropagatedMount and an error field.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Mountpoint\": \"/path/under/PropagatedMount\",\n    \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Validation Tests for Docker Docs\nDESCRIPTION: Command to validate the documentation by checking for broken links, incorrectly formatted markup, and other issues using Docker Buildx.\nSOURCE: https://github.com/docker/docs/blob/main/CONTRIBUTING.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake validate\n```\n\n----------------------------------------\n\nTITLE: Setting Container Labels in Docker Daemon\nDESCRIPTION: Demonstrates how to set key-value labels for the Docker daemon using the -label flag, which will be displayed in docker info output.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n-label\n```\n\n----------------------------------------\n\nTITLE: Replacing Values in Docker Compose Override\nDESCRIPTION: Demonstrates how to use the !override YAML tag to fully replace an attribute, bypassing standard merge rules in Docker Compose files.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/merge.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: myapp\n    ports:\n      - \"8080:80\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    ports: !override\n      - \"8443:443\" \n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  app:\n    image: myapp\n    ports:\n      - \"8443:443\" \n```\n\n----------------------------------------\n\nTITLE: Docker Desktop Release Date Shortcode in Markdown\nDESCRIPTION: A shortcode used in the documentation to render release dates for Docker Desktop versions. This shows the usage pattern for the release-date shortcode which takes a date parameter.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n{{< release-date date=\"2023-12-14\" >}}\n```\n\n----------------------------------------\n\nTITLE: Demoting Manager Nodes to Worker Role in Docker Swarm\nDESCRIPTION: Demonstrates demoting manager nodes to worker role using the docker node demote command, which changes their responsibilities in the swarm.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/manage-nodes.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker node demote node-3 node-2\n\nManager node-3 demoted in the swarm.\nManager node-2 demoted in the swarm.\n```\n\n----------------------------------------\n\nTITLE: Docker Command Execution Result Format\nDESCRIPTION: Shows the structure of the result object returned when executing Docker commands. The result contains both standard output and standard error.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/docker.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stderr\": \"...\",\n  \"stdout\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Docker Compose V2.2 CPU Configuration\nDESCRIPTION: Version 2.2 added support for CPU runtime configuration including cpu_rt_period and cpu_rt_runtime parameters.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"2.2\"\nservices:\n  myservice:\n    cpu_rt_period: 100000\n    cpu_rt_runtime: 50000\n```\n\n----------------------------------------\n\nTITLE: Correct Multi-line ENV Declaration with Equals Sign and Quotes\nDESCRIPTION: Example of the recommended format for multi-line environment variable declarations using an equals sign and wrapping the value in quotes.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/legacy-key-value-format.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV DEPS=\"\\\n    curl \\\n    git \\\n    make\"\n```\n\n----------------------------------------\n\nTITLE: Using variable interpolation with defaults in Docker Compose\nDESCRIPTION: Demonstrates shell-style inline defaults for variable interpolation in Docker Compose files. Provides fallback values if variables are unset or empty.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n${FOO-default}\n${FOO:-default}\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Engine Installation on Debian\nDESCRIPTION: Command to verify that Docker Engine is installed correctly by running the hello-world container. This confirms that Docker can pull images and run containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Specifying Port Mappings in Fig YAML\nDESCRIPTION: Illustrates how to define port mappings in a Fig YAML file, including specifying host addresses for the mappings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nports:\n - \"0.0.0.0:8000:8000\"\n - \"127.0.0.1:8001:8001\"\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Desktop via Command Line on Linux\nDESCRIPTION: This command uses systemctl to start the Docker Desktop application for the current user. It's an alternative method to launching Docker Desktop from the GUI.\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/desktop-linux-launch.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ systemctl --user start docker-desktop\n```\n\n----------------------------------------\n\nTITLE: Using Secrets in Dockerfile RUN Instructions\nDESCRIPTION: Shows how to use secrets defined in the Bake file within Dockerfile RUN instructions using the --mount flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_31\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN --mount=type=secret,id=aws,target=/root/.aws/credentials \\\n    aws cloudfront create-invalidation ...\nRUN --mount=type=secret,id=KUBECONFIG,env=KUBECONFIG \\\n    helm upgrade --install\n```\n\n----------------------------------------\n\nTITLE: Using Docker Exporter with Docker Buildx\nDESCRIPTION: Command to build a container image using the Docker exporter, which outputs the build result into a Docker image layout tarball.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/oci-docker.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --output type=docker[,parameters] .\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Toast Notification in Docker Extensions\nDESCRIPTION: Use this method to display an error toast notification to the user. Toast notifications appear temporarily and don't interrupt the user experience.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/dashboard.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.desktopUI.toast.error(\"message\");\n```\n\n----------------------------------------\n\nTITLE: Setting Block IO Weight in Docker\nDESCRIPTION: Examples demonstrating how to set block IO bandwidth weights for containers and perform IO testing.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --name c1 --blkio-weight 300 ubuntu:24.04 /bin/bash\n$ docker run -it --name c2 --blkio-weight 600 ubuntu:24.04 /bin/bash\n```\n\nLANGUAGE: console\nCODE:\n```\n$ time dd if=/mnt/zerofile of=test.out bs=1M count=1024 oflag=direct\n```\n\n----------------------------------------\n\nTITLE: Creating Database Password Secret File\nDESCRIPTION: A simple text file containing the secret password for the PostgreSQL database service. This file will be mounted as a Docker secret and used for database authentication.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nmysecretpassword\n```\n\n----------------------------------------\n\nTITLE: Searching Docker Images via API\nDESCRIPTION: GET endpoint to search for Docker images on Docker Hub with optional filters for stars, automation and official status.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_44\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/images/search?term=sshd HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Using Docker Compose Stop Command in CLI\nDESCRIPTION: Example of using the 'docker compose stop' command to stop running containers without removing them. These containers can be started again with 'docker compose start'.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_stop.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndocker compose stop\n```\n\n----------------------------------------\n\nTITLE: Running a container in detached mode\nDESCRIPTION: Demonstrates how to run a container in the background (detached mode) using the -d flag, allowing it to run without occupying the terminal.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d <IMAGE>\n```\n\n----------------------------------------\n\nTITLE: Using the JSON Function in Docker Command Output\nDESCRIPTION: The json function encodes an element as a JSON string. This example formats the Mounts information from docker inspect as JSON.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/formatting.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker inspect --format '{{json .Mounts}}' container\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Merging Example\nDESCRIPTION: Example showing how environment variables are merged with locally defined values taking precedence based on variable names.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ...\n    environment:\n      - FOO=original\n      - BAR=original\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ...\n    environment:\n      - BAR=local\n      - BAZ=local\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ...\n    environment:\n      - FOO=original\n      - BAR=local\n      - BAZ=local\n```\n\n----------------------------------------\n\nTITLE: Analyzing User Input Text Sentiment\nDESCRIPTION: Code to determine the sentiment score of user-provided text and classify it as positive or negative based on the threshold.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ninput_text_score = sia.polarity_scores(input_text)[\"compound\"]\ninput_text_classification = 0 if input_text_score > threshold else 1\n```\n\n----------------------------------------\n\nTITLE: Incorrect Stage Name Casing in Dockerfile\nDESCRIPTION: This example demonstrates the incorrect usage of stage naming in a Dockerfile, where the stage name 'BuilderBase' uses mixed case instead of lowercase.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/stage-name-casing.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine AS BuilderBase\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Compose CLI plugin location\nDESCRIPTION: This command checks and displays the installation location of the Docker Compose CLI plugin using the docker info command with specific formatting.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/uninstall.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker info --format '{{range .ClientInfo.Plugins}}{{if eq .Name \"compose\"}}{{.Path}}{{end}}{{end}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Documentation Build Settings in YAML\nDESCRIPTION: YAML configuration that sets up build parameters for Docker documentation. Specifies render settings, page title, and weight for controlling page order.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  render: never\ntitle: Setup\nweight: 10\n```\n\n----------------------------------------\n\nTITLE: Implementing the Docker Plugin.Activate Handshake Response\nDESCRIPTION: This JSON response is sent by a plugin during activation to indicate which Docker subsystems it implements. The example shows a plugin implementing the VolumeDriver interface.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugin_api.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Implements\": [\"VolumeDriver\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Docker Scout Metrics Exporter Repository\nDESCRIPTION: Commands to clone the sample project repository containing the Docker Scout metrics exporter and navigate to the Datadog configuration directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/metrics-exporter.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ git clone git@github.com:dockersamples/scout-metrics-exporter.git\n$ cd scout-metrics-exporter/datadog\n```\n\n----------------------------------------\n\nTITLE: Docker Image Name Structure\nDESCRIPTION: The structure of a Docker image name, showing the components including optional registry hostname, port number, image path, and tag.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[HOST[:PORT_NUMBER]/]PATH[:TAG]\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Port Publishing\nDESCRIPTION: Run a Go container with port 8080 published to host port 8080 using the --publish flag, allowing external connections to the containerized application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --publish 8080:8080 docker-gs-ping\n```\n\n----------------------------------------\n\nTITLE: Pushing All Images with Docker Scout Watch\nDESCRIPTION: Example showing how to push all images from a repository, not just newly discovered ones, to Docker Scout.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_watch.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout watch--org my-org --repository registry.example.com/my-service --all-images\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Temporary Directory\nDESCRIPTION: Example of setting custom Docker temporary directory and data root path using environment variables and command line flags.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_34\n\nLANGUAGE: console\nCODE:\n```\n$ export DOCKER_TMPDIR=/mnt/disk2/tmp\n$ sudo -E dockerd --data-root /var/lib/docker -H unix://\n```\n\n----------------------------------------\n\nTITLE: Docker Go SDK Context Parameter Requirements\nDESCRIPTION: Updates to Go SDK client API callbacks that now require a context parameter for privilege and permission functions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n- client.RequestPrivilegeFunc\n- client.ImageSearchOptions.AcceptPermissionsFunc\n- image.ImportOptions.PrivilegeFunc\n```\n\n----------------------------------------\n\nTITLE: Service Deployment Mode Template\nDESCRIPTION: Example showing how to access nested service attributes and conditional template logic\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/customize.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# iterate over a yaml sequence\n{{ range $name, $service := .services }}\n  # access a nested attribute using dot notation\n  {{ if eq $service.deploy.mode \"global\" }}\nkind: DaemonSet\n  {{ end }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Searching for Official Nginx Image using Docker CLI\nDESCRIPTION: This command searches Docker Hub for the official Nginx image using the Docker CLI. It filters results to show only official images.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/quickstart.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker search --filter is-official=true nginx\n```\n\n----------------------------------------\n\nTITLE: Converting Docker Compose with Specific File Path\nDESCRIPTION: Command to convert a docker-compose.yaml file from a specific location to Kubernetes manifests using Compose Bridge.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/usage.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ compose-bridge convert -f <path-to-file>/compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Network Control Status\nDESCRIPTION: Command to verify that Docker interfaces have the unmanaged state in systemd-networkd. This confirms that the configuration change was successful.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n$ networkctl\n```\n\n----------------------------------------\n\nTITLE: Incorrect Dockerfile with Mixed Instruction Casing\nDESCRIPTION: An example showing incorrect usage of mixed case instructions in a Dockerfile, combining different casing styles which reduces readability.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/consistent-instruction-casing.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFrom alpine\nRun echo hello > /greeting.txt\nEntRYpOiNT [\"cat\", \"/greeting.txt\"]\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Compose Config Documentation\nDESCRIPTION: This YAML front matter defines metadata for the Docker Compose config documentation page. It specifies the data folder, file name, title, aliases for various related pages, and the layout to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/config.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_config\ntitle: docker compose config\naliases:\n- /compose/reference/config/\n- /engine/reference/commandline/compose_convert/\n- /engine/reference/commandline/compose_config/\n- /compose/config/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Navigating to Dev Environments in TypeScript\nDESCRIPTION: Uses the desktopUI.navigate.viewDevEnvironments() method to navigate to the Dev Environments window in Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/NavigationIntents.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.desktopUI.navigate.viewDevEnvironments()\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-line Logging with Regular Expression\nDESCRIPTION: Shows how to configure multi-line logging using a regular expression pattern with the awslogs driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/awslogs.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker run \\\n    --log-driver=awslogs \\\n    --log-opt awslogs-region=us-east-1 \\\n    --log-opt awslogs-group=myLogGroup \\\n    --log-opt awslogs-multiline-pattern='^INFO' \\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose with Watch Feature\nDESCRIPTION: Docker Compose configuration file that sets up a Bun server with watch functionality for automatic rebuilds when code changes are detected.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    image: bun-server\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"3000:3000\"\n    develop:\n      watch:\n        - action: rebuild\n          path: .\n```\n\n----------------------------------------\n\nTITLE: Running Second PostgreSQL Instance with Alternative Port Mapping\nDESCRIPTION: This command starts another PostgreSQL container but maps it to port 5433 on the host while maintaining the standard port 5432 inside the container, avoiding conflicts with the first instance.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/overriding-container-defaults.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -e POSTGRES_PASSWORD=secret -p 5433:5432 postgres\n```\n\n----------------------------------------\n\nTITLE: Executing Docker CLI Commands with Docker Extension SDK\nDESCRIPTION: Demonstrates how to execute Docker CLI commands using the Docker Extension SDK. This example shows how to list volumes with a filter for dangling volumes. The output is returned as an object with stdout and stderr properties.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/Docker.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await ddClient.docker.cli.exec(\"volume\", [\n  \"ls\",\n  \"--filter\",\n  \"dangling=true\"\n]);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"stderr\": \"...\",\n  \"stdout\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Trust Repository Signatures\nDESCRIPTION: The docker trust inspect command shows which keys have been pushed to the Notary server for a specific repository, displaying signers and administrative keys.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust inspect --pretty registry.example.com/admin/demo\n\nNo signatures for registry.example.com/admin/demo\n\n\nList of signers and their keys for registry.example.com/admin/demo\n\nSIGNER              KEYS\njeff                1091060d7bfd\n\nAdministrative keys for registry.example.com/admin/demo\n\n  Repository Key:\tb0014f8e4863df2d028095b74efcb05d872c3591de0af06652944e310d96598d\n  Root Key:\t64d147e59e44870311dd2d80b9f7840039115ef3dfa5008127d769a5f657a5d7\n```\n\n----------------------------------------\n\nTITLE: Using Another Target as Base Context in Docker Bake\nDESCRIPTION: Shows how to use another Bake target as a build context using the target: prefix in the contexts attribute. This is useful when working with multiple Dockerfiles that can't be merged.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\n# docker-bake.hcl\ntarget \"base\" {\n    dockerfile = \"baseapp.Dockerfile\"\n}\ntarget \"app\" {\n    contexts = {\n        baseapp = \"target:base\"\n    }\n}\n```\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Dockerfile\nFROM baseapp\nRUN echo \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Java Spring Boot Application Example\nDESCRIPTION: A simple Spring Boot application that creates a RESTful web service displaying \"Hello World!\". This Java file defines the main application class with a controller mapping for the root URL.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#2025-04-11_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage com.example.spring_boot_docker;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@RestController\n@SpringBootApplication\npublic class SpringBootDockerApplication {\n\n    @RequestMapping(\"/\")\n        public String home() {\n        return \"Hello World\";\n    }\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringBootDockerApplication.class, args);\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging a Docker Image\nDESCRIPTION: Command to create an additional tag (v1.0.0) for an existing Docker image without creating a new image, just adding another reference to the same image.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/build-images.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker tag docker-rust-image:latest docker-rust-image:v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with SBOM Attestation\nDESCRIPTION: Command to build a Docker image with SBOM attestation enabled\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/security.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --sbom=true -t hello:sbom .\n```\n\n----------------------------------------\n\nTITLE: Making Custom HTTP Request with Docker Extension API\nDESCRIPTION: Performs a custom HTTP request to a backend service with configurable method, headers, and data using the Docker client extension VM service. Returns a promise that resolves to the response data.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/HttpService.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.extension.vm.service\n .request({ url: \"/url\", method: \"GET\", headers: { 'header-key': 'header-value' }, data: { ... }})\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote for GitHub Repository\nDESCRIPTION: Command to change the Git remote URL to point to a newly created GitHub repository. This prepares the local repository for pushing to GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/configure-ci-cd.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote set-url origin https://github.com/your-username/your-repository.git\n```\n\n----------------------------------------\n\nTITLE: Specifying Annotation Level in Docker Build\nDESCRIPTION: This command shows the format for specifying which OCI image component to attach an annotation to using a type declaration prefix.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/annotations.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --annotation \"<TYPE>:<KEY>=<VALUE>\" .\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon Logging Configuration\nDESCRIPTION: Examples of configuring JSON logging format using both command line and daemon.json configuration file.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_33\n\nLANGUAGE: console\nCODE:\n```\n$ dockerd --log-format=json\n# ...\n{\"level\":\"info\",\"msg\":\"API listen on /var/run/docker.sock\",\"time\":\"2024-09-16T11:06:08.558145428Z\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-format\": \"json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Container Capabilities\nDESCRIPTION: Examples of adding and dropping Linux capabilities for Docker containers using --cap-add and --cap-drop flags.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_35\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --cap-add=ALL --cap-drop=MKNOD ...\n$ docker run --cap-add=SYS_ADMIN ...\n$ docker run --cap-add=CAP_SYS_ADMIN ...\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Mount v1 Response Format\nDESCRIPTION: JSON v1 response format for the Mount endpoint in the volume plugin protocol. The response includes the mountpoint on the host and an error field.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Mountpoint\": \"/path/to/directory/on/host\",\n    \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting an interactive shell in a container\nDESCRIPTION: Shows how to run a container with an interactive shell by using the -it flags and specifying 'sh' as the command to run.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it IMAGE sh\n```\n\n----------------------------------------\n\nTITLE: Volumes Merging Example\nDESCRIPTION: Example showing how volumes are merged using the mount path in the container as the key for determining precedence.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ...\n    volumes:\n      - ./original:/foo\n      - ./original:/bar\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ...\n    volumes:\n      - ./local:/bar\n      - ./local:/baz\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    # ...\n    volumes:\n      - ./original:/foo\n      - ./local:/bar\n      - ./local:/baz\n```\n\n----------------------------------------\n\nTITLE: Signing in to Docker account using CLI\nDESCRIPTION: This command is used to authenticate the user with their Docker account, which is a prerequisite for using Docker Build Cloud.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/setup.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker login\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Compose Services\nDESCRIPTION: Command to list all services defined in the compose.yaml file along with their current status.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/intro/compose-application-model.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose ps\n```\n\n----------------------------------------\n\nTITLE: Configuring Networks for Docker Compose Services\nDESCRIPTION: Specifies which networks a service connects to. This example shows how to connect a service to multiple networks.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  some-service:\n    networks:\n      - some-network\n      - other-network\n```\n\n----------------------------------------\n\nTITLE: Disabling Docker Scout for All Organization Repositories\nDESCRIPTION: This command disables Docker Scout on all repositories in the user's organization. The --all flag indicates that all repositories should be affected.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_disable.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout repo disable --all\n```\n\n----------------------------------------\n\nTITLE: Inspecting Docker Image History\nDESCRIPTION: These console commands show the history of the base and final Docker images, displaying the layers and their sizes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/_index.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker image history acme/my-base-image:1.0\n\n$ docker image history  acme/my-final-image:1.0\n```\n\n----------------------------------------\n\nTITLE: Filtering Docker Swarm Nodes by Role\nDESCRIPTION: Commands to list only manager or worker nodes in a swarm using the --filter flag to filter by node role.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/overlay.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker node ls --filter role=manager\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker node ls --filter role=worker\n```\n\n----------------------------------------\n\nTITLE: Building and Exporting Rust Binary with Docker\nDESCRIPTION: Console command to build the Dockerfile and export the resulting binary to the current working directory using the --output flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/export.md#2025-04-11_snippet_2\n\nLANGUAGE: Console\nCODE:\n```\n$ docker build --output=. .\n```\n\n----------------------------------------\n\nTITLE: Correct JSON Form Usage in Dockerfile ENTRYPOINT\nDESCRIPTION: Example showing correct exec form usage that enables proper signal handling in containers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/json-args-recommended.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nENTRYPOINT [\"my-program\", \"start\"]\n# entrypoint becomes: my-program start\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Shows the layout of the getting-started-app project directory including the Dockerfile, compose.yaml and other files.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/08_using_compose.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── getting-started-app/\n│ ├── Dockerfile\n│ ├── compose.yaml\n│ ├── node_modules/\n│ ├── package.json\n│ ├── spec/\n│ ├── src/\n│ └── yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Extending Docker Service from External File\nDESCRIPTION: Basic example showing how to extend a service configuration from another Compose file using the extends keyword.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/extends.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    extends:\n      file: common-services.yml\n      service: webapp\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Engine from Package File on Fedora\nDESCRIPTION: This command installs Docker Engine from a downloaded RPM package file. Replace /path/to/package.rpm with the actual path to the downloaded Docker package.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/fedora.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dnf install /path/to/package.rpm\n```\n\n----------------------------------------\n\nTITLE: Install Docker Plugin Request/Response\nDESCRIPTION: POST endpoint to pull and install a Docker plugin. Returns plugin configuration details after successful installation.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_84\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1.24/plugins/pull?name=tiborvass/no-remove:latest HTTP/1.1\n```\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"Name\": \"network\",\n    \"Description\": \"\",\n    \"Value\": [\n      \"host\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Network Stack Administration in Docker\nDESCRIPTION: Demonstration of using NET_ADMIN capability to modify network interfaces within a container.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_36\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm  ubuntu:24.04 ip link add dummy0 type dummy\n\nRTNETLINK answers: Operation not permitted\n\n$ docker run -it --rm --cap-add=NET_ADMIN ubuntu:24.04 ip link add dummy0 type dummy\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka with Multiple Listeners in Docker Compose\nDESCRIPTION: Docker Compose configuration for setting up Kafka with multiple listeners to support both host and container connections. It configures HOST and DOCKER listeners on different ports and includes essential KRaft mode settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  kafka:\n    image: apache/kafka-native\n    ports:\n      - \"9092:9092\"\n    environment:\n      # Configure listeners for both docker and host communication\n      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093\n      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093\n      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT\n\n      # Settings required for KRaft mode\n      KAFKA_NODE_ID: 1\n      KAFKA_PROCESS_ROLES: broker,controller\n      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER\n      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091\n\n      # Listener to use for broker-to-broker communication\n      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER\n\n      # Required for a single node cluster\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Repository on SLES\nDESCRIPTION: Command to add the official Docker repository to the system, enabling installation and updates through the package manager.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/sles.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ sudo zypper addrepo https://download.docker.com/linux/sles/docker-ce.repo\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images on Linux\nDESCRIPTION: Command to list all Docker images on the system, showing repositories, tags, image IDs, creation dates, and sizes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/linuxfaqs.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker image ls\n```\n\n----------------------------------------\n\nTITLE: Evaluating Policies for a Specific Organization\nDESCRIPTION: Evaluates policies against a Docker image for a specific organization using the --org flag to specify the organization namespace.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_policy.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker scout policy dockerscoutpolicy/customers-api-service:0.0.1 --org dockerscoutpolicy\n```\n\n----------------------------------------\n\nTITLE: Enabling Windows Features for BuildKit on Windows\nDESCRIPTION: PowerShell command to enable the required Windows features (Hyper-V and Containers) needed for running BuildKit on Windows systems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n> Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V, Containers -All\n```\n\n----------------------------------------\n\nTITLE: Output Message for MAINTAINER Deprecation\nDESCRIPTION: The output message that appears when a deprecated MAINTAINER instruction is used in a Dockerfile, indicating that it should be replaced with a label.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/maintainer-deprecated.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nMAINTAINER instruction is deprecated in favor of using label\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Command Syntax\nDESCRIPTION: The basic syntax for using the docker compose command line interface, showing the format for specifying compose files, options, commands and arguments.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndocker compose [-f <arg>...] [options] [COMMAND] [ARGS...]\n```\n\n----------------------------------------\n\nTITLE: Reloading Docker Daemon After Configuration Changes\nDESCRIPTION: Command to reload the Docker daemon after making changes to the runtime configuration in the configuration file. This applies changes without having to restart containers.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_29\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl reload dockerd\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Capabilities Response Format\nDESCRIPTION: JSON response format for the Capabilities endpoint in the volume plugin protocol. The response includes driver capabilities such as the scope (global or local).\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Capabilities\": {\n    \"Scope\": \"global\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Client on macOS\nDESCRIPTION: Commands to extract Docker client binary, clear extended attributes, and verify installation on macOS.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/binaries.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tar xzvf /path/to/<FILE>.tar.gz\n$ sudo xattr -rc docker\n$ sudo cp docker/docker /usr/local/bin/\n$ sudo docker -H <hostname> run hello-world\n```\n\n----------------------------------------\n\nTITLE: Cloning Sample Node.js Project\nDESCRIPTION: Command to clone a sample Node.js project from GitHub that contains a pre-built Dockerfile for creating a Docker image.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-registry.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/dockersamples/helloworld-demo-node\n```\n\n----------------------------------------\n\nTITLE: Customizing the Default Build Group in Bake\nDESCRIPTION: HCL configuration for customizing the default build group in Bake. This configuration excludes the 'seed' target from the build group.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\ngroup \"default\" {\n  targets = [\"vote\", \"result\", \"worker\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Bake Configuration in HCL\nDESCRIPTION: A simple Bake configuration file in HCL format that defines a build target named 'myapp', equivalent to the basic docker build command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/introduction.md#2025-04-11_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"myapp\" {\n  context = \".\"\n  dockerfile = \"Dockerfile\"\n  tags = [\"myapp:latest\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Production Environment\nDESCRIPTION: Command to build and start all services in detached mode for the production environment using the production compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f compose.prod.yaml up --build -d\n```\n\n----------------------------------------\n\nTITLE: Fluentd Configuration File for Testing\nDESCRIPTION: A basic Fluentd configuration file (test.conf) that sets up a forward source and stdout output for testing Docker logging integration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/fluentd.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n<source>\n  @type forward\n</source>\n\n<match *>\n  @type stdout\n</match>\n```\n\n----------------------------------------\n\nTITLE: Filtering Package Types in Docker Scout SBOM\nDESCRIPTION: Command to display only APK packages from an Alpine Linux container image using package type filtering.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_sbom.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout sbom --format list --only-package-type apk alpine\n```\n\n----------------------------------------\n\nTITLE: Installing gnome-terminal on Ubuntu for Docker Desktop\nDESCRIPTION: Command to install gnome-terminal, which is required for terminal access from Docker Desktop if you're not using GNOME as your desktop environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/ubuntu.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install gnome-terminal\n```\n\n----------------------------------------\n\nTITLE: Comparing SBOMs using Docker Scout CLI\nDESCRIPTION: Example of comparing two SBOM files using the sbom:// prefix in the Docker Scout CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/release-notes/cli.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout compare sbom://image1.json --to sbom://image2.json\n```\n\n----------------------------------------\n\nTITLE: Setting Build Context in Docker Bake\nDESCRIPTION: Demonstrates how to specify the build context location using the context attribute. The context can be a URL or directory path.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"app\" {\n  context = \"./src/www\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exec Create API Response in Docker\nDESCRIPTION: HTTP response from creating an exec instance, returning the created exec ID and any warnings.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_56\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Type: application/json\n\n{\n     \"Id\": \"f90e34656806\",\n     \"Warnings\":[]\n}\n```\n\n----------------------------------------\n\nTITLE: Correct FROM/AS Casing (Lowercase) in Dockerfile\nDESCRIPTION: Example showing correct usage where both 'from' and 'as' keywords are lowercase, maintaining consistent casing.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-as-casing.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nfrom debian:latest as deb-builder\n```\n\n----------------------------------------\n\nTITLE: Basic ENV/ARG Format Output\nDESCRIPTION: Sample output of the proper environment variable format that should be used in Dockerfiles, emphasizing the equals sign separator.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/legacy-key-value-format.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"ENV key=value\" should be used instead of legacy \"ENV key value\" format\n```\n\n----------------------------------------\n\nTITLE: Comparing Local Build to Registry Image in Docker Scout\nDESCRIPTION: Example of comparing a local Docker image build to the same tag pulled from a registry using source prefixes.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout compare local://namespace/repo:latest --to registry://namespace/repo:latest\n```\n\n----------------------------------------\n\nTITLE: Incorrect Space Separator in ARG Declaration\nDESCRIPTION: Example of the deprecated format using a space separator between ARG key and value, which should be avoided in Dockerfiles.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/legacy-key-value-format.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nARG foo bar\n```\n\n----------------------------------------\n\nTITLE: Opening Windows Command Prompt\nDESCRIPTION: Command to open Windows command prompt using cmd\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/open-terminal.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncmd\n```\n\n----------------------------------------\n\nTITLE: Inspecting Node Details in Docker Swarm\nDESCRIPTION: Gets detailed information about a specific node in a user-friendly format. Shows node status, availability, and other configuration details.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/drain-node.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker node inspect --pretty worker1\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image and Running Docker Scout Security Scan in Azure DevOps\nDESCRIPTION: This YAML snippet defines the build stage of the Azure DevOps pipeline. It builds a Docker image using the project's Dockerfile, installs the Docker Scout CLI, authenticates with Docker Hub, and then runs a security scan on the built image to detect critical and high-severity vulnerabilities.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/ci/azure.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n  - stage: Build\n    displayName: Build image\n    jobs:\n      - job: Build\n        displayName: Build\n        pool:\n          vmImage: ubuntu-latest\n        steps:\n          - task: Docker@2\n            displayName: Build an image\n            inputs:\n              command: build\n              dockerfile: \"$(Build.SourcesDirectory)/Dockerfile\"\n              repository: $(image)\n              tags: |\n                $(tag)\n          - task: CmdLine@2\n            displayName: Find CVEs on image\n            inputs:\n              script: |\n                # Install the Docker Scout CLI\n                curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --\n                # Login to Docker Hub required for Docker Scout CLI\n                echo $(DOCKER_HUB_PAT) | docker login -u $(DOCKER_HUB_USER) --password-stdin\n                # Get a CVE report for the built image and fail the pipeline when critical or high CVEs are detected\n                docker scout cves $(image):$(tag) --exit-code --only-severity critical,high\n```\n\n----------------------------------------\n\nTITLE: Simple Deno API Server Using Oak Framework\nDESCRIPTION: A basic Deno application that creates a REST API using the Oak framework. It listens on port 8000 and returns a JSON response with status 'OK'.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// server.ts\nimport { Application, Router } from \"https://deno.land/x/oak@v12.0.0/mod.ts\";\n\nconst app = new Application();\nconst router = new Router();\n\n// Define a route that returns JSON\nrouter.get(\"/\", (context) => {\n  context.response.body = { Status: \"OK\" };\n  context.response.type = \"application/json\";\n});\n\napp.use(router.routes());\napp.use(router.allowedMethods());\n\nconsole.log(\"Server running on http://localhost:8000\");\nawait app.listen({ port: 8000 });\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Table\nDESCRIPTION: This SQL command selects all records from the tasks table to verify the data was properly inserted.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM tasks;\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Node Documentation\nDESCRIPTION: YAML front matter configuration block that defines metadata for the Docker node CLI documentation page, including data folder location, file name, page title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/node/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_node\ntitle: docker node\naliases:\n- /edge/engine/reference/commandline/node/\n- /engine/reference/commandline/node/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker Container Documentation\nDESCRIPTION: This YAML snippet defines the front matter for a documentation page about running Docker containers. It specifies that the page should never be rendered during the build process, sets the page title, and assigns a weight for ordering purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Running containers\nweight: 30\n---\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated Toast Notification Methods in Docker Extensions\nDESCRIPTION: These are deprecated toast notification methods that will be removed in a future version. It's recommended to use the newer toast methods instead.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/dashboard.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.toastSuccess(\"message\");\nwindow.ddClient.toastWarning(\"message\");\nwindow.ddClient.toastError(\"message\");\n```\n\n----------------------------------------\n\nTITLE: Listing Images in TypeScript\nDESCRIPTION: Shows how to retrieve a list of Docker images using the DockerDesktopClient interface. This method is deprecated and will be replaced in the future.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/DockerDesktopClient.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst images = await window.ddClient.listImages();\n```\n\n----------------------------------------\n\nTITLE: Database Configuration SQL Commands\nDESCRIPTION: SQL commands to create database, user and grant permissions in CockroachDB.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE mydb;\nCREATE USER totoro;\nGRANT ALL ON DATABASE mydb TO totoro;\n```\n\n----------------------------------------\n\nTITLE: Simple Bake File in JSON Format\nDESCRIPTION: A JSON representation of a basic Bake file that defines a variable with a default value, a default group targeting a webapp, and a webapp target with Dockerfile and tags configuration.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"variable\": {\n    \"TAG\": {\n      \"default\": \"latest\"\n    }\n  },\n  \"group\": {\n    \"default\": {\n      \"targets\": [\"webapp\"]\n    }\n  },\n  \"target\": {\n    \"webapp\": {\n      \"dockerfile\": \"Dockerfile\",\n      \"tags\": [\"docker.io/username/webapp:${TAG}\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Node.js App Container with MySQL Connection (Command Prompt)\nDESCRIPTION: This Command Prompt command runs a Node.js application container, setting up MySQL connection environment variables, network, and volume mappings. It uses the node:18-alpine image and runs yarn install and dev commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -dp 127.0.0.1:3000:3000 ^\n  -w /app -v \"%cd%:/app\" ^\n  --network todo-app ^\n  -e MYSQL_HOST=mysql ^\n  -e MYSQL_USER=root ^\n  -e MYSQL_PASSWORD=secret ^\n  -e MYSQL_DB=todos ^\n  node:18-alpine ^\n  sh -c \"yarn install && yarn run dev\"\n```\n\n----------------------------------------\n\nTITLE: Port Already Allocated Error Message\nDESCRIPTION: Error message displayed when trying to start a new container that uses a port that's already allocated by another running container.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/03_updating_app.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker: Error response from daemon: driver failed programming external connectivity on endpoint laughing_burnell \n(bb242b2ca4d67eba76e79474fb36bb5125708ebdabd7f45c8eaf16caaabde9dd): Bind for 127.0.0.1:3000 failed: port is already allocated.\n```\n\n----------------------------------------\n\nTITLE: Specifying Metadata for Docker Version Command Documentation\nDESCRIPTION: This YAML frontmatter defines metadata for the 'docker version' command documentation page, including the data folder, file name, title, aliases, and layout.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/version.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_version\ntitle: docker version\naliases:\n- /edge/engine/reference/commandline/version/\n- /engine/reference/commandline/version/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon without Dual Logging\nDESCRIPTION: Example showing Docker daemon configuration with Splunk logging driver and disabled cache\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/dual-logging.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ cat /etc/docker/daemon.json\n{\n  \"log-driver\": \"splunk\",\n  \"log-opts\": {\n    \"cache-disabled\": \"true\",\n    ... (options for \"splunk\" logging driver)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SELinux Workaround for IPTables\nDESCRIPTION: Commands to disable SELinux for iptables when encountering permission denied errors in older Docker versions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf install -y policycoreutils-python-utils && sudo semanage permissive -a iptables_t\n```\n\n----------------------------------------\n\nTITLE: Enabling Thin Pool Monitoring\nDESCRIPTION: Command to enable monitoring for the Docker thin pool, which is required for automatic extension to function.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo lvchange --monitor y docker/thinpool\n```\n\n----------------------------------------\n\nTITLE: Using Docker Scout CLI Basic Command\nDESCRIPTION: The basic command structure for using Docker Scout CLI tool. This is the root command that requires additional subcommands to perform specific operations.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker scout COMMAND\n```\n\n----------------------------------------\n\nTITLE: Building Services with Bake\nDESCRIPTION: Command to build all services in the default group using Bake. This executes the build configuration derived from the Compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake\n```\n\n----------------------------------------\n\nTITLE: Running the Docker container\nDESCRIPTION: Command to run the Docker container from the hello image, which will execute the C++ application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/multistage.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run hello\n```\n\n----------------------------------------\n\nTITLE: Dockerfile with Default Root User (Implicit)\nDESCRIPTION: Example of a non-compliant Dockerfile that implicitly runs as root by default without explicitly setting the user.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/policy/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM alpine\nRUN echo \"Hi\"\n```\n\n----------------------------------------\n\nTITLE: Forcing Container Recreation\nDESCRIPTION: Example of using the --force-recreate flag to force Compose to stop and recreate all containers regardless of changes.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_up.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`--force-recreate`\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus Container\nDESCRIPTION: Docker command to run Prometheus in a container with mounted configuration and exposed ports.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/prometheus.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --name my-prometheus \\\n    --mount type=bind,source=/tmp/prometheus.yml,destination=/etc/prometheus/prometheus.yml \\\n    -p 9090:9090 \\\n    --add-host host.docker.internal=host-gateway \\\n    prom/prometheus\n```\n\n----------------------------------------\n\nTITLE: Docker Desktop Access Denied Error\nDESCRIPTION: Displays the error message that appears when a user doesn't have the necessary permissions to start Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/topics.md#2025-04-11_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nDocker Desktop - Access Denied\n```\n\n----------------------------------------\n\nTITLE: Python Documentation YAML Frontmatter\nDESCRIPTION: YAML frontmatter block defining metadata for Python documentation, including title and icon path from devicons CDN.\nSOURCE: https://github.com/docker/docs/blob/main/content/languages/python/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Python\nparams:\n  icon: https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/python/python-original.svg\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring VFS Storage Driver with Size Quota\nDESCRIPTION: JSON configuration that sets VFS as the storage driver and adds a size quota limitation of 256MB.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/vfs-driver.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storage-driver\": \"vfs\",\n  \"storage-opts\": [\"size=256M\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Kubernetes Resources\nDESCRIPTION: Command to delete all Kubernetes resources created by the YAML file. This cleans up the deployment and service after testing is complete.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/deploy.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl delete -f docker-java-kubernetes.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing Docker Swarm Manager\nDESCRIPTION: Creates a new swarm and initializes the first node as a manager\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker swarm init\nSwarm initialized: current node (dxn1zf6l61qsb1josjja83ngz) is now a manager.\n```\n\n----------------------------------------\n\nTITLE: OCI Directory Vulnerability Analysis\nDESCRIPTION: Example of analyzing vulnerabilities from an OCI directory layout\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ skopeo copy --override-os linux docker://alpine oci:alpine\n\n$ docker scout cves oci-dir://alpine\nAnalyzing OCI directory alpine\n✓ OCI directory read\n✓ Image stored for indexing\n✓ Indexed 19 packages\n✓ No vulnerable package detected\n```\n\n----------------------------------------\n\nTITLE: Starting Docker with service command\nDESCRIPTION: Alternative command to start the Docker daemon on non-systemd systems after configuring the devicemapper storage driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo service docker start\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Container with Docker\nDESCRIPTION: Launches a Kafka container using Docker, exposing port 9092 for external connections.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/kafka.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d --name=kafka -p 9092:9092 apache/kafka\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Unmount Response Format\nDESCRIPTION: JSON response format for the Unmount endpoint in the volume plugin protocol. The response includes an error field that is empty on success.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Run with Auto-remove\nDESCRIPTION: Shows how to run a command and automatically remove the container after execution using --rm flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run --rm web python manage.py db upgrade\n```\n\n----------------------------------------\n\nTITLE: Loading Image to Docker Store\nDESCRIPTION: Examples of loading a built image to the local Docker image store using both explicit and implicit exporter configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build \\\n  --output type=docker,name=<registry>/<image> .\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Password File\nDESCRIPTION: A simple text file containing the password for the PostgreSQL database container. This file is referenced in the Compose configuration as a secret.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmysecretpassword\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Tarball\nDESCRIPTION: GET endpoint to retrieve a tarball containing Docker images and metadata for a specific repository or image ID.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_52\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/images/ubuntu/get\n```\n\n----------------------------------------\n\nTITLE: Error Output Example for Empty Continuation\nDESCRIPTION: Shows the error message format when an empty continuation line is detected in a Dockerfile command.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/no-empty-continuation.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nEmpty continuation line found in: RUN apk add     gnupg     curl\n```\n\n----------------------------------------\n\nTITLE: Using a Variable in a Docker Bake Target\nDESCRIPTION: Shows how to use a previously defined 'TAG' variable within a target definition in a Docker Bake HCL file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/variables.md#2025-04-11_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"webapp\" {\n  context = \".\"\n  dockerfile = \"Dockerfile\"\n  tags = [ TAG ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Docker Plugin Request/Response\nDESCRIPTION: POST endpoints to enable or disable an installed Docker plugin. Returns 200 OK on success.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_86\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1.24/plugins/tiborvass/no-remove:latest/enable HTTP/1.1\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /v1.24/plugins/tiborvass/no-remove:latest/disable HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Correct Stage Name Casing in Dockerfile\nDESCRIPTION: This example shows the correct way to name a stage in a Dockerfile, using all lowercase characters for the stage name 'builder-base'.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/stage-name-casing.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine AS builder-base\n```\n\n----------------------------------------\n\nTITLE: Multi-Platform Build with Push\nDESCRIPTION: Command to build multi-platform images and push them to a registry using Docker Build Cloud.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/usage.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --builder cloud-<ORG>-<BUILDER_NAME> \\\n  --platform linux/amd64,linux/arm64 \\\n  --tag <IMAGE> \\\n  --push .\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Arguments in Dockerfile\nDESCRIPTION: Example Dockerfile that uses ARG to define build-time variables that can be set from the Compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG GIT_COMMIT\nRUN echo \"Based on commit: $GIT_COMMIT\"\n```\n\n----------------------------------------\n\nTITLE: Vue.js Documentation Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for Vue.js documentation page, specifying title, description, service type and URL aliases\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/vuejs.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Vue.js samples\ndescription: Docker samples for Vue.js.\nservice: vuejs\naliases:\n- /samples/vuejs/\n---\n```\n\n----------------------------------------\n\nTITLE: Creating BuildKit Builder with Resource Limits\nDESCRIPTION: Console command to create a docker-container builder with custom BuildKit configuration for resource limiting.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/configure.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create --use \\\n  --name mybuilder \\\n  --driver docker-container \\\n  --config /etc/buildkitd.toml\n```\n\n----------------------------------------\n\nTITLE: Getting Docker Image History via API\nDESCRIPTION: GET endpoint to retrieve the history/layers of a Docker image showing how it was built.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_40\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/images/ubuntu/history HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Permissions for kubectl Plugin\nDESCRIPTION: Sets the necessary executable permissions for the kubectl-compose_bridge binary to function as a kubectl plugin.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/bridge/advanced-integration.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ chmod +x /usr/local/bin/kubectl-compose_bridge\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Scout with Specific Registry\nDESCRIPTION: Shows how to enable Docker Scout for a repository in a specific registry using the --registry flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_enable.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout repo enable my/repository --registry 123456.dkr.ecr.us-east-1.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container\nDESCRIPTION: Command to run the Docker container from the newly created image, mapping port 8080.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-registry.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndocker run -d -p 8080:8080 <YOUR_DOCKER_USERNAME>/docker-quickstart\n```\n\n----------------------------------------\n\nTITLE: Configuring PropagatedMount for Docker Metrics Plugin\nDESCRIPTION: Sets the PropagatedMount in the plugin config.json to allow the plugin to receive updated mounts from Docker after configuration.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_metrics.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"PropagatedMount\": \"/run/docker\"\n```\n\n----------------------------------------\n\nTITLE: Defining Options for Docker Scout Integration Delete Command in Markdown\nDESCRIPTION: This markdown table defines the options available for the 'docker scout integration delete' command. It includes the 'name' option for specifying the integration configuration to delete, and the 'org' option for specifying the Docker organization namespace.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_integration_delete.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name     | Type     | Default | Description                                 |\n|:---------|:---------|:--------|:--------------------------------------------|\n| `--name` | `string` |         | Name of integration configuration to delete |\n| `--org`  | `string` |         | Namespace of the Docker organization        |\n```\n\n----------------------------------------\n\nTITLE: Displaying Original and Translated Text\nDESCRIPTION: Prints both the original user input and the resulting translated text, providing immediate feedback on the translation process.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n      print(f\"Original Text: {input_text}\")\n      print(f\"Translated Text: {translated_text}\")\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change directory to the cloned todo-list-app project directory. This is where the Dockerfile exists.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/using-the-build-cache.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cd todo-list-app\n```\n\n----------------------------------------\n\nTITLE: Building Container Images with Image and Registry Exporters in Docker\nDESCRIPTION: Commands showing how to use the image and registry exporters with Docker Buildx. The image exporter outputs build results to container image format, while the registry exporter does the same but automatically pushes the result.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/image-registry.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --output type=image[,parameters] .\n$ docker buildx build --output type=registry[,parameters] .\n```\n\n----------------------------------------\n\nTITLE: Deploying Kubernetes Resources with kubectl\nDESCRIPTION: Command to apply the Kubernetes configuration file to create deployment and service resources in a Kubernetes cluster.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f docker-kubernetes.yml\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Deployment Output\nDESCRIPTION: Console output showing the successful creation of network and starting of containers including web, redis, and nginx services\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\nRunning 5/5\n✔ Network nginx-nodejs-redis_default    Created                                                0.0s\n✔ Container nginx-nodejs-redis-web1-1   Started                                                0.1s\n✔ Container nginx-nodejs-redis-redis-1  Started                                                0.1s\n✔ Container nginx-nodejs-redis-web2-1   Started                                                0.1s\n✔ Container nginx-nodejs-redis-nginx-1  Started\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: Command to build a Docker image from the Dockerfile, tagging it with the user's Docker username.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-registry.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker build -t <YOUR_DOCKER_USERNAME>/docker-quickstart .\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Hub Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the Docker Hub automated builds documentation page, including description, keywords, title, and aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/builds/setup.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Set up automated builds\nkeywords: automated, build, images, Docker Hub\ntitle: Set up automated builds\nlinkTitle: Set up\nweight: 10\naliases:\n- /docker-hub/builds/automated-build/\n- /docker-hub/builds/classic/\n- /docker-hub/builds/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Docker Extension with Go Backend\nDESCRIPTION: This Dockerfile sets up a multi-stage build process for a Docker extension with a Go backend. It builds the frontend, compiles the Go backend, and creates the final image with the extension components.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/backend-extension-tutorial.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM node:17.7-alpine3.14 AS client-builder\n# ... build frontend application\n\n# Build the Go backend\nFROM golang:1.17-alpine AS builder\nENV CGO_ENABLED=0\nWORKDIR /backend\nCOPY vm/go.* .\nRUN --mount=type=cache,target=/go/pkg/mod \\\n    --mount=type=cache,target=/root/.cache/go-build \\\n    go mod download\nCOPY vm/. .\nRUN --mount=type=cache,target=/go/pkg/mod \\\n    --mount=type=cache,target=/root/.cache/go-build \\\n    go build -trimpath -ldflags=\"-s -w\" -o bin/service\n\nFROM alpine:3.15\n# ... add labels and copy the frontend application\n\nCOPY --from=builder /backend/bin/service /\nCMD /service -socket /run/guest-services/extension-allthethings-extension.sock\n```\n\n----------------------------------------\n\nTITLE: Loading Docker Build Results with GitHub Actions Workflow\nDESCRIPTION: This GitHub Actions workflow demonstrates how to build a Docker image and load it into the local Docker daemon. The workflow sets up Docker Buildx, builds an image with the 'load: true' option, and then inspects the loaded image using Docker CLI commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/ci/github-actions/export-docker.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\n\non:\n  push:\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      \n      - name: Build\n        uses: docker/build-push-action@v6\n        with:\n          load: true\n          tags: myimage:latest\n      \n      - name: Inspect\n        run: |\n          docker image inspect myimage:latest\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing the Updated Image\nDESCRIPTION: Command to build and push a new version of the image with the fixed dependencies, tagged as v2.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker build --push -t <ORG_NAME>/scout-demo:v2 .\n```\n\n----------------------------------------\n\nTITLE: Inline Format Example in Docker Splunk Logging\nDESCRIPTION: Example of the default 'inline' format where each log message is embedded as a string. This format shows how a simple message and a JSON string are formatted when logged.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/splunk.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attrs\": {\n    \"env1\": \"val1\",\n    \"label1\": \"label1\"\n  },\n  \"tag\": \"MyImage/MyContainer\",\n  \"source\": \"stdout\",\n  \"line\": \"my message\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attrs\": {\n    \"env1\": \"val1\",\n    \"label1\": \"label1\"\n  },\n  \"tag\": \"MyImage/MyContainer\",\n  \"source\": \"stdout\",\n  \"line\": \"{\\\"foo\\\": \\\"bar\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Socket Mount Permissions for Paketo Buildpacks\nDESCRIPTION: This JSON snippet demonstrates how to configure the imageList to allow Paketo buildpacks to work with Docker Desktop and ECI by enabling the allowDerivedImages feature.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/config.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"imageList\": {\n  \"images\": [\n    \"paketobuildpacks/builder:base\"\n  ],\n  \"allowDerivedImages\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: The file structure of the cloned repository showing key files and directories.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/02_our_app.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n├── getting-started-app/\n│ ├── .dockerignore\n│ ├── package.json\n│ ├── README.md\n│ ├── spec/\n│ ├── src/\n│ └── yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for Docker Service Create Documentation\nDESCRIPTION: YAML frontmatter configuration block that defines metadata for the documentation page, including the data folder location, file name, page title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/service/create.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_service_create\ntitle: docker service create\naliases:\n- /edge/engine/reference/commandline/service_create/\n- /engine/reference/commandline/service_create/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with NVIDIA Capabilities\nDESCRIPTION: Command to run an Ubuntu container with all NVIDIA GPUs and specific capabilities. This example shows how to use the capabilities option with the --gpus flag to enable the utility driver capability for nvidia-smi.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/resource_constraints.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --gpus 'all,capabilities=utility' --rm ubuntu nvidia-smi\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request to Backend Service\nDESCRIPTION: Demonstrates how to perform an HTTP GET request to a backend service using the ddClient extension VM service API.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/backend.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.extension.vm.service\n .get(\"/some/service\")\n .then((value: any) => console.log(value)\n```\n\n----------------------------------------\n\nTITLE: Saving Docker Scout SBOM to File\nDESCRIPTION: Command to generate an SBOM for an Alpine Linux container image and save it to a file named alpine.sbom.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_sbom.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout sbom --output alpine.sbom alpine\n```\n\n----------------------------------------\n\nTITLE: Cloning the Scout Demo Service Repository\nDESCRIPTION: Command to clone the Docker Scout demo service repository that contains a vulnerable Node.js application for testing.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/docker/scout-demo-service.git\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: Command to build a Docker image using the Dockerfile in the current directory. This processes the Dockerfile instructions to create a runnable container image.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/using-the-build-cache.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker build .\n```\n\n----------------------------------------\n\nTITLE: SARIF Report Generation\nDESCRIPTION: Demonstrates exporting vulnerability report to SARIF JSON format\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves --format sarif --output alpine.sarif.json alpine\nAnalyzing image alpine\n✓ SBOM of image already cached, 18 packages indexed\n✓ No vulnerable package detected\n✓ Report written to alpine.sarif.json\n```\n\n----------------------------------------\n\nTITLE: Exec Inspect API Request in Docker\nDESCRIPTION: HTTP request to get detailed information about an exec command instance.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_61\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/exec/11fb006128e8ceb3942e7c58d77750f24210e35f879dd204ac975c184b820b39/json HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Successful Authorized Docker Command Example\nDESCRIPTION: Example output of a docker pull command that has been successfully authorized by the authorization plugin.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull centos\n<...>\nf1b10cd84249: Pull complete\n<...>\n```\n\n----------------------------------------\n\nTITLE: Extending Services within Same File\nDESCRIPTION: Demonstration of extending one service from another within the same Compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/extends.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    build: alpine\n    extends: webapp\n  webapp:\n    environment:\n      - DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Compose CLI plugin on Ubuntu/Debian\nDESCRIPTION: This command removes the Docker Compose CLI plugin using the apt package manager on Ubuntu or Debian-based systems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/uninstall.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get remove docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Building from a Relative Path\nDESCRIPTION: Example of configuring a service to build from a relative path, where the build context is a directory relative to the Compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    build: ./dir\n```\n\n----------------------------------------\n\nTITLE: Docker Dev List Command\nDESCRIPTION: Lists all dev environments with options for formatting output or showing only environment names.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/dev-cli.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker dev list [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Volume Names in Docker Compose\nDESCRIPTION: Example demonstrating how to use environment variables to dynamically set volume names at runtime.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/volumes.md#2025-04-11_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  db-data:\n    name: ${DATABASE_VOLUME}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Run with Service Ports\nDESCRIPTION: Shows how to run a command while mapping service ports to the host using --service-ports flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run --service-ports web python manage.py shell\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Environment Files in COMPOSE_ENV_FILES\nDESCRIPTION: Example of specifying multiple environment files using the COMPOSE_ENV_FILES environment variable. The files are separated by a comma.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/environment-variables/envvars.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nCOMPOSE_ENV_FILES=.env.envfile1, .env.envfile2\n```\n\n----------------------------------------\n\nTITLE: Configuring Credential Spec with File Protocol\nDESCRIPTION: Example showing how to configure credential specification using a file reference.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncredential_spec:\n  file: my-credential-spec.json\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Project Directory in Bash\nDESCRIPTION: Command to change directory to the cloned todo-list-app folder where the compose.yaml file is located.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-docker-compose.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncd todo-list-app\n```\n\n----------------------------------------\n\nTITLE: Connecting to Docker Daemon on Custom Port\nDESCRIPTION: Example of using the Docker client to connect to a daemon running on a non-standard port to pull an image.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker -H :5555 pull ubuntu\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Scout CLI Plugin\nDESCRIPTION: Command to install the Docker Scout CLI plugin for Docker Engine environments\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/security.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Compose Logs\nDESCRIPTION: Command to view the logs of all running containers managed by Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/intro/compose-application-model.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose logs\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Capabilities Request Format\nDESCRIPTION: JSON format for the Capabilities request in the volume plugin protocol. This endpoint retrieves the list of capabilities supported by the driver.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker to use ZFS storage driver\nDESCRIPTION: JSON configuration for Docker daemon to set ZFS as the storage driver. This goes in the /etc/docker/daemon.json file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/zfs-driver.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storage-driver\": \"zfs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing a Docker Container with tmpfs Mount\nDESCRIPTION: Shows the commands to stop and remove a Docker container after using it with a tmpfs mount.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/tmpfs.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ docker stop tmptest\n$ docker rm tmptest\n```\n\n----------------------------------------\n\nTITLE: Container Removal Example\nDESCRIPTION: HTTP request and response for removing a container from the filesystem.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_34\n\nLANGUAGE: http\nCODE:\n```\nDELETE /v1.24/containers/16253994b7c4?v=1 HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Windows CLI Docker Desktop Uninstall Location\nDESCRIPTION: Command showing the default installer location for Docker Desktop on Windows\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/uninstall.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ C:\\Program Files\\Docker\\Docker\\Docker Desktop Installer.exe\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Container Status\nDESCRIPTION: Command to list running Docker containers and verify that the MySQL container is running correctly.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps\n```\n\n----------------------------------------\n\nTITLE: Managing Kubeconfig in localStorage using TypeScript\nDESCRIPTION: Examples of storing and retrieving kubeconfig data using browser's localStorage API.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/guides/kubernetes.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlocalStorage.setItem(\"kubeconfig\", kubeConfig);\n\nlocalStorage.getItem(\"kubeconfig\");\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Variable Example\nDESCRIPTION: Example showing a limitation regarding DOCKER_HOST configuration in environment files for Docker Compose v2.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Setting DOCKER_HOST via .env files is not supported in Compose v2\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Custom VLAN Interfaces\nDESCRIPTION: Demonstrates how to remove a manually created VLAN interface when it's no longer needed.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_21\n\nLANGUAGE: console\nCODE:\n```\n$ ip link del foo\n```\n\n----------------------------------------\n\nTITLE: Correct Equals Sign Separator in ARG Declaration\nDESCRIPTION: Example of the recommended format using an equals sign separator between ARG key and value in Dockerfiles.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/legacy-key-value-format.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nARG foo=bar\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Application\nDESCRIPTION: Command to start a multi-container application using Docker Compose with detached mode and build option\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/multi-container-applications.md#2025-04-11_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up -d --build\n```\n\n----------------------------------------\n\nTITLE: Capabilities Response Format in JSON\nDESCRIPTION: JSON structure for the /LogDriver.Capabilities endpoint response that defines the capabilities of the log driver.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_logging.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ReadLogs\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Dockerfile with Undefined Build Argument\nDESCRIPTION: Example of an incorrect Dockerfile where $foo is used without being defined as a build argument first.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine AS base\nCOPY $foo .\n```\n\n----------------------------------------\n\nTITLE: Watching All Repositories in a Registry\nDESCRIPTION: Command to monitor all repositories within a specified registry and push new images to Docker Scout.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_watch.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout watch --org my-org --registry registry.example.com\n```\n\n----------------------------------------\n\nTITLE: API Response from Rust Application\nDESCRIPTION: Example JSON response from the Rust application's users API endpoint showing successful database connectivity.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[{ \"id\": 1, \"login\": \"root\" }]\n```\n\n----------------------------------------\n\nTITLE: Recording Platform-Specific Image to Environment\nDESCRIPTION: Example showing how to record a specific image to an environment with platform specification (linux/amd64).\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_environment.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout environment staging namespace/repo:stage-latest --platform linux/amd64\n✓ Pulled\n✓ Successfully recorded namespace/repo:stage-latest in environment staging\n```\n\n----------------------------------------\n\nTITLE: Displaying Inline Code in Markdown\nDESCRIPTION: Shows how to format inline code by wrapping text in a single backtick. This formatting should be applied to Docker commands, instructions, and filenames.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/style/formatting.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`docker extension install <name-of-your-extension>`\n```\n\n----------------------------------------\n\nTITLE: Validating Docker Compose Configuration\nDESCRIPTION: A command to validate the Docker Compose configuration file before applying changes. This checks the syntax and structure of the compose.yaml file.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose config\n```\n\n----------------------------------------\n\nTITLE: Checking WSL Distribution Mode in Windows\nDESCRIPTION: Command to check which WSL mode (v1 or v2) your Linux distributions are running in. This helps verify if your WSL distributions are properly configured for Docker Desktop integration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/wsl/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwsl.exe -l -v\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace Container for Laravel CLI Tasks\nDESCRIPTION: Dockerfile for a dedicated workspace container that provides CLI tools for Laravel development, including Composer, NPM via NVM, and Xdebug. This container is used for running Artisan commands, building front-end assets, and other development tasks.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/development-setup.md#2025-04-11_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\n# docker/development/workspace/Dockerfile\n# Use the official PHP CLI image as the base\nFROM php:8.3-cli\n\n# Set environment variables for user and group ID\nARG UID=1000\nARG GID=1000\nARG NODE_VERSION=22.0.0\n\n# Install system dependencies and build libraries\nRUN apt-get update && apt-get install -y --no-install-recommends \\\n    curl \\\n    unzip \\\n    libpq-dev \\\n    libonig-dev \\\n    libssl-dev \\\n    libxml2-dev \\\n    libcurl4-openssl-dev \\\n    libicu-dev \\\n    libzip-dev \\\n    && docker-php-ext-install -j$(nproc) \\\n    pdo_mysql \\\n    pdo_pgsql \\\n    pgsql \\\n    opcache \\\n    intl \\\n    zip \\\n    bcmath \\\n    soap \\\n    && pecl install redis xdebug \\\n    && docker-php-ext-enable redis xdebug\\\n    && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer \\\n    && apt-get autoremove -y && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n# Use ARG to define environment variables passed from the Docker build command or Docker Compose.\nARG XDEBUG_ENABLED\nARG XDEBUG_MODE\nARG XDEBUG_HOST\nARG XDEBUG_IDE_KEY\nARG XDEBUG_LOG\nARG XDEBUG_LOG_LEVEL\n\n# Configure Xdebug if enabled\nRUN if [ \"${XDEBUG_ENABLED}\" = \"true\" ]; then \\\n    docker-php-ext-enable xdebug && \\\n    echo \"xdebug.mode=${XDEBUG_MODE}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \\\n    echo \"xdebug.idekey=${XDEBUG_IDE_KEY}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \\\n    echo \"xdebug.log=${XDEBUG_LOG}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \\\n    echo \"xdebug.log_level=${XDEBUG_LOG_LEVEL}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \\\n    echo \"xdebug.client_host=${XDEBUG_HOST}\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini ; \\\n    echo \"xdebug.start_with_request=yes\" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini ; \\\nfi\n\n# If the group already exists, use it; otherwise, create the 'www' group\nRUN if getent group ${GID}; then \\\n      useradd -m -u ${UID} -g ${GID} -s /bin/bash www; \\\n    else \\\n      groupadd -g ${GID} www && \\\n      useradd -m -u ${UID} -g www -s /bin/bash www; \\\n    fi && \\\n    usermod -aG sudo www && \\\n    echo 'www ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers\n\n# Switch to the non-root user to install NVM and Node.js\nUSER www\n\n# Install NVM (Node Version Manager) as the www user\nRUN export NVM_DIR=\"$HOME/.nvm\" && \\\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash && \\\n    [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" && \\\n    nvm install ${NODE_VERSION} && \\\n    nvm alias default ${NODE_VERSION} && \\\n    nvm use default\n\n# Ensure NVM is available for all future shells\nRUN echo 'export NVM_DIR=\"$HOME/.nvm\"' >> /home/www/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"' >> /home/www/.bashrc && \\\n    echo '[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"' >> /home/www/.bashrc\n\n# Set the working directory\nWORKDIR /var/www\n\n# Override the entrypoint to avoid the default php entrypoint\nENTRYPOINT []\n\n# Default command to keep the container running\nCMD [\"bash\"]\n```\n\n----------------------------------------\n\nTITLE: Docker Image Size Comparison Results\nDESCRIPTION: Output of the docker images command showing the significant size reduction achieved with multi-stage builds for a Spring Boot application.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/multi-stage-builds.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nspring-helloworld-builder latest    c5c76cb815c0   24 minutes ago      428MB\nspring-helloworld         latest    ff708d5ee194   About an hour ago   880MB\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Config Documentation\nDESCRIPTION: YAML frontmatter block defining metadata for the Docker config command documentation page, including data folder location, page title, aliases for URL routing, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/config/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_config\ntitle: docker config\naliases:\n- /edge/engine/reference/commandline/config/\n- /engine/reference/commandline/config/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Docker Container Logs Output\nDESCRIPTION: Example output from docker logs showing nodemon startup and application initialization status\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker logs -f <container-id>\nnodemon -L src/index.js\n[nodemon] 2.0.20\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching path(s): *.*\n[nodemon] watching extensions: js,mjs,json\n[nodemon] starting `node src/index.js`\nUsing sqlite database at /etc/todos/todo.db\nListening on port 3000\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Buildx Stop Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the Docker Buildx stop command documentation page, including data folder, data file, title, layout, and aliases for URL redirects.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/stop.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx_stop\ntitle: docker buildx stop\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_stop/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Driver in Docker daemon.json\nDESCRIPTION: JSON configuration for setting syslog as the default logging driver in Docker daemon.json. This example sets the driver to syslog and configures it to send logs to a UDP endpoint at 1.2.3.4:1111.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/syslog.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-driver\": \"syslog\",\n  \"log-opts\": {\n    \"syslog-address\": \"udp://1.2.3.4:1111\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Backend HTTP Operations\nDESCRIPTION: Shows various deprecated HTTP methods (GET, POST, PUT, PATCH, DELETE, HEAD) and custom request configuration using the window.ddClient.backend API.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/backend.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.backend\n  .get(\"/some/service\")\n  .then((value: any) => console.log(value));\n\nwindow.ddClient.backend\n  .post(\"/some/service\", { ... })\n  .then((value: any) => console.log(value));\n\nwindow.ddClient.backend\n  .put(\"/some/service\", { ... })\n  .then((value: any) => console.log(value));\n\nwindow.ddClient.backend\n  .patch(\"/some/service\", { ... })\n  .then((value: any) => console.log(value));\n\nwindow.ddClient.backend\n  .delete(\"/some/service\")\n  .then((value: any) => console.log(value));\n\nwindow.ddClient.backend\n  .head(\"/some/service\")\n  .then((value: any) => console.log(value));\n\nwindow.ddClient.backend\n  .request({ url: \"/url\", method: \"GET\", headers: { 'header-key': 'header-value' }, data: { ... }})\n  .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Installing GNOME Terminal\nDESCRIPTION: Command to install GNOME terminal for non-GNOME desktop environments\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/rhel.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf install gnome-terminal\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JFrog Artifactory via Docker CLI\nDESCRIPTION: Command to authenticate with JFrog Artifactory using Docker login before performing local image analysis. The URL parameter should be replaced with your Artifactory instance URL.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/integrations/registry/artifactory.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker login {URL}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Docker ps Documentation\nDESCRIPTION: This YAML frontmatter defines metadata and build settings for the 'docker ps' command documentation page. It specifies that the page should not be rendered and redirects to the 'docker container ls' command documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/ps.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: docker ps\nbuild:\n  render: never\nsidebar:\n  goto: /reference/cli/docker/container/ls/\n---\n```\n\n----------------------------------------\n\nTITLE: Force Removing a Container\nDESCRIPTION: This command forcefully stops and removes a container in a single operation, which is necessary before removing its associated volume.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/running-containers/persisting-container-data.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ docker rm -f new-db\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Secret Create Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker secret create command documentation page, including the data folder location, filename, page title and layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/secret/create.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_secret_create\ntitle: docker secret create\naliases:\n- /edge/engine/reference/commandline/secret_create/\n- /engine/reference/commandline/secret_create/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Python Code for Iris Dataset Visualization\nDESCRIPTION: Python code that loads the Iris dataset from scikit-learn and creates a scatter plot visualization with proper labels and legend.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/jupyter.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn import datasets\n\niris = datasets.load_iris()\nimport matplotlib.pyplot as plt\n\n_, ax = plt.subplots()\nscatter = ax.scatter(iris.data[:, 0], iris.data[:, 1], c=iris.target)\nax.set(xlabel=iris.feature_names[0], ylabel=iris.feature_names[1])\n_ = ax.legend(\n   scatter.legend_elements()[0], iris.target_names, loc=\"lower right\", title=\"Classes\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Docker Volumes\nDESCRIPTION: Demonstrates how to create, list, inspect, and remove Docker volumes using command-line operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/volumes.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker volume create my-vol\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker volume ls\n\nlocal               my-vol\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker volume inspect my-vol\n[\n    {\n        \"Driver\": \"local\",\n        \"Labels\": {},\n        \"Mountpoint\": \"/var/lib/docker/volumes/my-vol/_data\",\n        \"Name\": \"my-vol\",\n        \"Options\": {},\n        \"Scope\": \"local\"\n    }\n]\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker volume rm my-vol\n```\n\n----------------------------------------\n\nTITLE: Docker TLS Version Environment Variable\nDESCRIPTION: Environment variable example showing how to specify custom TLS version for Docker Engine interaction.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nCOMPOSE_TLS_VERSION=TLSv1.2\n```\n\n----------------------------------------\n\nTITLE: Release Date Template Syntax in Markdown\nDESCRIPTION: Template syntax used to display release dates in the documentation using a custom shortcode.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/20.10.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< release-date date=\"2022-09-09\" >}}\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Compose on Ubuntu/Debian\nDESCRIPTION: Commands to update the Docker Compose plugin on Ubuntu and Debian-based distributions using apt-get.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/install/linux.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get update\n$ sudo apt-get install docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Docker Run Bind Mount Example\nDESCRIPTION: Example showing bind mount syntax in docker run command that requires file-sync setup\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n-v /localpath:/incontainer\n```\n\n----------------------------------------\n\nTITLE: Generating JSON SBOM with Docker Scout\nDESCRIPTION: Command to display the complete SBOM in JSON format for an Alpine Linux container image.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_sbom.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout sbom alpine\n```\n\n----------------------------------------\n\nTITLE: Stopping the Bun Application Container\nDESCRIPTION: Command to stop and remove the Bun application container and associated resources using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/containerize.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Running the Deno Application in Detached Mode\nDESCRIPTION: Command to run the Deno application in the background (detached mode) using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/containerize.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build -d\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multi-line ENV Declaration with Space Separator\nDESCRIPTION: Example of a multi-line environment variable declaration using the deprecated space separator format in Dockerfiles.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/legacy-key-value-format.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV DEPS \\\n    curl \\\n    git \\\n    make\n```\n\n----------------------------------------\n\nTITLE: Viewing Docker Image Layer History\nDESCRIPTION: Illustrates how to examine the layer history of a Docker image using the docker image history command.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-an-image.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker image history docker/welcome-to-docker\n```\n\n----------------------------------------\n\nTITLE: Docker Network Configuration\nDESCRIPTION: Example of network configuration flags for IPv4/IPv6 bridge networks and iptables settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/27.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--iptables=false --ip6tables=true\n```\n\n----------------------------------------\n\nTITLE: Copying Application Files in Dockerfile\nDESCRIPTION: Transfers Python scripts and entrypoint script into the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_17\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY *.py /app\nCOPY entrypoint.sh /app\n```\n\n----------------------------------------\n\nTITLE: Creating Private Marketplace Directory in Console\nDESCRIPTION: Commands to create and navigate to a new directory for the private marketplace content\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/private-marketplace.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir my-marketplace\n$ cd my-marketplace\n```\n\n----------------------------------------\n\nTITLE: Updating a Service to Remove a Secret\nDESCRIPTION: Updates the MySQL service to remove access to the mysql_password secret.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/secrets.md#2025-04-11_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndocker service update \\\n     --secret-rm mysql_password mysql\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Service with systemctl\nDESCRIPTION: Command to start the Docker service using systemctl after configuring the VFS storage driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/vfs-driver.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl start docker\n```\n\n----------------------------------------\n\nTITLE: Disabling Docker Scout for a Specific Repository\nDESCRIPTION: This command disables Docker Scout on a specific repository. It targets a single repository identified by its name.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_disable.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout repo disable my/repository\n```\n\n----------------------------------------\n\nTITLE: Docker IPv6 Container Deployment\nDESCRIPTION: Commands for running and testing containers with IPv6 networking enabled.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/ipv6.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm --network ip6net -p 80:80 traefik/whoami\n```\n\nLANGUAGE: console\nCODE:\n```\n$ curl http://[::1]:80\n```\n\n----------------------------------------\n\nTITLE: Finding Container ID for a Service\nDESCRIPTION: Gets the container ID of the running Redis service task to interact with it directly.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps --filter name=redis -q\n```\n\n----------------------------------------\n\nTITLE: Verifying docker scan version\nDESCRIPTION: Command to check the installed version of the docker scan plugin after updating.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/20.10.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker scan --accept-license --version\n```\n\n----------------------------------------\n\nTITLE: Docker Daemon IPv6 Configuration\nDESCRIPTION: JSON configuration for enabling IPv6 on the default bridge network in Docker daemon.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/ipv6.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ipv6\": true,\n  \"fixed-cidr-v6\": \"2001:db8:1::/64\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Sandbox Environment\nDESCRIPTION: Removes all services and anonymous volumes created during the trust testing\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_sandbox.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Deleting Temporary and Cached Data with Docker Scout Cache Prune\nDESCRIPTION: This example shows how to use the 'docker scout cache prune' command with the '--sboms' flag to delete both temporary data and cached SBOMs. It prompts for confirmation before executing the deletion.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cache_prune.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cache prune --sboms\n? Are you sure to delete all temporary data and all cached SBOMs? Yes\n    ✓ temporary data deleted\n    ✓ cached SBOMs deleted\n```\n\n----------------------------------------\n\nTITLE: Creating Switch Expression for Role Mapping in Azure AD SCIM Integration\nDESCRIPTION: A text expression used in Azure AD's Expression mapping for SCIM integration with Docker. This expression maps Azure AD app roles to Docker roles using a Switch statement that handles both direct role names and custom role names.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/provisioning/scim.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nSwitch(SingleAppRoleAssignment([appRoleAssignments]), \"member\", \"My Corp Administrator\", \"owner\", \"My Corp Editor\", \"editor\")`\n```\n\n----------------------------------------\n\nTITLE: Disabling Swap in Docker Container\nDESCRIPTION: Sets the memory-swappiness value to 0 for a Docker container, which turns off anonymous page swapping and helps retain the container's working set.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_25\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --memory-swappiness=0 ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Compose Develop for Frontend and Backend Services\nDESCRIPTION: This YAML snippet demonstrates how to configure the 'develop' section for frontend and backend services in a Compose file. It shows how to set up file watching for syncing static content and rebuilding images based on source code changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/develop.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    build: ./webapp\n    develop:\n      watch: \n        # sync static content\n        - path: ./webapp/html\n          action: sync\n          target: /var/www\n          ignore:\n            - node_modules/\n\n  backend:\n    image: example/backend\n    build: ./backend\n    develop:\n      watch: \n        # rebuild image and recreate service\n        - path: ./backend/src\n          action: rebuild\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of the Sample Application\nDESCRIPTION: The file structure of the cloned sample application, showing the key files including app.py, chains.py, and requirements.txt.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/containerize.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n├── docker-genai-sample/\n│ ├── .gitignore\n│ ├── app.py\n│ ├── chains.py\n│ ├── env.example\n│ ├── requirements.txt\n│ ├── util.py\n│ ├── LICENSE\n│ └── README.md\n```\n\n----------------------------------------\n\nTITLE: Searching for Docker Images via CLI\nDESCRIPTION: Uses the docker search command to find images on Docker Hub matching a specific name.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-an-image.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker search docker/welcome-to-docker\n```\n\n----------------------------------------\n\nTITLE: Running Dex Container with Docker Compose\nDESCRIPTION: Command to start the Dex container in detached mode using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dex.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Log File Parameters\nDESCRIPTION: Example showing how to start an Alpine container with local logging configured for maximum file size and count limits.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/local.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --log-driver local --log-opt max-size=10m --log-opt max-file=3 alpine ash\n```\n\n----------------------------------------\n\nTITLE: Dex Configuration for GitHub Actions\nDESCRIPTION: YAML configuration for Dex to be used in GitHub Actions, including mock authentication settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dex.md#2025-04-11_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nissuer: http://127.0.0.1:5556/dex\n\nstorage:\n  type: memory\n\nweb:\n  http: 0.0.0.0:5556\n\noauth2:\n  skipApprovalScreen: true\n\nstaticClients:\n  - name: TestClient\n    id: client_test_id\n    secret: client_test_secret\n    redirectURIs:\n      - http://{ip-your-app}/path/to/callback/ # example: http://localhost:5555/callback\n\nconnectors:\n# mockCallback connector always returns the user 'kilgore@kilgore.trout'.\n- type: mockCallback\n  id: mock\n  name: Mock\n```\n\n----------------------------------------\n\nTITLE: Error response when using a blocked Docker command\nDESCRIPTION: Console output showing the error received when attempting to use the 'push' command via the Docker CLI when it has been blocked by commandList configuration.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/config.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n/ # docker push myimage\nError response from daemon: enhanced container isolation: docker command \"/v1.43/images/myimage/push?tag=latest\" is blocked; if you wish to allow it, configure the docker socket command list in the Docker Desktop settings or admin-settings.\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for MySQL and phpMyAdmin\nDESCRIPTION: A Docker Compose configuration file that defines two services: a MySQL database and phpMyAdmin for web-based database management. It includes environment variables, port mappings, and volume configuration for data persistence.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  db:\n    image: mysql:latest\n    environment:\n      MYSQL_ROOT_PASSWORD: my-secret-pw\n      MYSQL_DATABASE: mydb\n    ports:\n      - 3307:3306\n    volumes:\n      - my-db-volume:/var/lib/mysql\n\n  phpmyadmin:\n    image: phpmyadmin/phpmyadmin:latest\n    environment:\n      PMA_HOST: db\n      PMA_PORT: 3306\n      MYSQL_ROOT_PASSWORD: my-secret-pw\n    ports:\n      - 8080:80\n    depends_on:\n      - db\n\nvolumes:\n  my-db-volume:\n```\n\n----------------------------------------\n\nTITLE: Creating a File in the Bind-Mounted Directory\nDESCRIPTION: Creating a new file in the container's bind-mounted directory and verifying it appears in the directory listing.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/06_bind_mounts.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nroot@ac1237fad8db:/src# touch myfile.txt\nroot@ac1237fad8db:/src# ls\nDockerfile  myfile.txt  node_modules  package.json  spec  src  yarn.lock\n```\n\n----------------------------------------\n\nTITLE: Test Stage Dockerfile Configuration\nDESCRIPTION: Dockerfile stage for running Go tests with cache mounting\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM base AS test\nRUN --mount=target=. \\\n    --mount=type=cache,target=/go/pkg/mod \\\n    go test .\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Docker Volume rm Documentation\nDESCRIPTION: This YAML front matter defines metadata for the documentation page, including the data folder, data file, title, aliases, and layout.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/volume/rm.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_volume_rm\ntitle: docker volume rm\naliases:\n- /edge/engine/reference/commandline/volume_rm/\n- /engine/reference/commandline/volume_rm/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Running MySQL Container with Network and Volume Configuration (Command Prompt)\nDESCRIPTION: Windows Command Prompt version of the command to start a MySQL 8.0 container connected to the 'todo-app' network with appropriate environment variables and volume mounting.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d ^\n    --network todo-app --network-alias mysql ^\n    -v todo-mysql-data:/var/lib/mysql ^\n    -e MYSQL_ROOT_PASSWORD=secret ^\n    -e MYSQL_DATABASE=todos ^\n    mysql:8.0\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Run Without Dependencies\nDESCRIPTION: Demonstrates running a command without starting linked services using --no-deps flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run --no-deps web python manage.py shell\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: View the list of Docker images on your local machine, including the newly built image.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/build-and-push-first-image.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker image ls\n```\n\n----------------------------------------\n\nTITLE: Version Reference Link in Markdown\nDESCRIPTION: Markdown syntax for internal version reference link used in the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/20.10.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[20.10.16](#201016)\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Application\nDESCRIPTION: Command to stop and remove the running Docker Compose application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/containerize.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Python Web Response\nDESCRIPTION: Python code snippet showing HTML response formatting with environment variables\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nreturn html.format(name=os.getenv('NAME', \"world\"), hostname=socket.gethostname(), visits=visits)\n```\n\n----------------------------------------\n\nTITLE: Defining Variables Across Multiple Docker Bake Files\nDESCRIPTION: Shows how to define and use variables across multiple Docker Bake HCL files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/variables.md#2025-04-11_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"BASE_IMAGE\" {\n  default = \"docker.io/library/alpine\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"BASE_LATEST\" {\n  default = \"${BASE_IMAGE}:latest\"\n}\n\ntarget \"webapp\" {\n  contexts = {\n    base = BASE_LATEST\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Running Containers\nDESCRIPTION: Command to list running containers and example output showing container details.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/02_our_app.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker ps\n```\n\nLANGUAGE: console\nCODE:\n```\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES\ndf784548666d        getting-started     \"docker-entrypoint.s…\"   2 minutes ago       Up 2 minutes        127.0.0.1:3000->3000/tcp   priceless_mcclintock\n```\n\n----------------------------------------\n\nTITLE: Changing Background Color in SCSS\nDESCRIPTION: Adjust the background color of the application by modifying the SCSS file.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/develop-with-containers.md#2025-04-11_snippet_4\n\nLANGUAGE: css\nCODE:\n```\nbody {\n    background-color: #99bbff;\n    margin-top: 50px;\n    font-family: 'Lato';\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable References for Buildx\nDESCRIPTION: References to environment variables used for CPU and memory profiling in Docker Buildx.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/release-notes.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nBUILDX_CPU_PROFILE\nBUILDX_MEM_PROFILE\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: Command to list all Docker images on the system, showing the newly created image.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-registry.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker images\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Environment Variable Definition\nDESCRIPTION: Defines a Docker environment variable DOCKER_RAMDISK to enable Docker operation with root on ramdisk\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_20\n\nLANGUAGE: docker\nCODE:\n```\nDOCKER_RAMDISK\n```\n\n----------------------------------------\n\nTITLE: Adding Supplementary Groups in Docker\nDESCRIPTION: Examples showing how to add additional groups to a Docker container process.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_32\n\nLANGUAGE: console\nCODE:\n```\n--group-add: Add additional groups to run as\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm --group-add audio --group-add nogroup --group-add 777 busybox id\n```\n\n----------------------------------------\n\nTITLE: Starting OCI Artifact Application\nDESCRIPTION: Commands to start a Docker Compose application from an OCI artifact stored in a registry.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/oci-artifact.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f oci://docker.io/username/my-compose-app:latest up\n```\n\n----------------------------------------\n\nTITLE: Navigating to Volumes View in TypeScript\nDESCRIPTION: Uses the desktopUI.navigate.viewVolumes() method to navigate to the Volumes tab in Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/NavigationIntents.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.desktopUI.navigate.viewVolumes()\n```\n\n----------------------------------------\n\nTITLE: Navigating to Images View in TypeScript\nDESCRIPTION: Uses the desktopUI.navigate.viewImages() method to navigate to the Images tab in Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/NavigationIntents.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.desktopUI.navigate.viewImages()\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop 4.40.0\nDESCRIPTION: Docker Desktop install command for version 4.40.0 across platforms.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{< desktop-install-v2 all=true beta_win_arm=true version=\"4.40.0\" build_path=\"/187762/\" >}}\n```\n\n----------------------------------------\n\nTITLE: Inspect Volume API Request in Docker\nDESCRIPTION: HTTP request to get detailed information about a specific volume by name.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_67\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/volumes/tardis\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Run Command\nDESCRIPTION: Demonstrates the basic usage of docker compose run to start a web service and run bash command.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose run web bash\n```\n\n----------------------------------------\n\nTITLE: Markdown Lists Formatting Example\nDESCRIPTION: Comprehensive markdown example showing how to format various types of lists in Docker documentation, including bullet lists, numbered lists with notes, code blocks, nested lists, and tables.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/lists.md#2025-04-11_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n- Bullet list item 1\n- Bullet list item 2\n- Bullet list item 3\n\n1.  Numbered list item 1. Two spaces between the period and the first letter\n    helps with alignment.\n\n2.  Numbered list item 2. Let's put a note in it.\n\n    > [!NOTE]: We did it!\n\n3.  Numbered list item 3 with a code block in it. You need the blank line before\n    the code block happens.\n\n    ```bash\n    $ docker run hello-world\n    ```\n\n4.  Numbered list item 4 with a bullet list inside it and a numbered list\n    inside that.\n\n    - Sub-item 1\n    - Sub-item 2\n\n      1.  Sub-sub-item 1\n      2.  Sub-sub-item-2 with a table inside it.\n          Indentation is super important.\n\n          | Header 1 | Header 2 |\n          | -------- | -------- |\n          | Thing 1  | Thing 2  |\n          | Thing 3  | Thing 4  |\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated External URL Opening Method in Docker Extensions\nDESCRIPTION: This is a deprecated method for opening external URLs and will be removed in a future version. It's recommended to use the newer openExternal method instead.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/dashboard.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.openExternal(\"https://docker.com\");\n```\n\n----------------------------------------\n\nTITLE: Evaluating Policies Against a Docker Image\nDESCRIPTION: Basic usage of the docker scout policy command to evaluate policies against a Docker image. The image analysis is uploaded to Docker Scout where policies get evaluated.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_policy.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker scout policy dockerscoutpolicy/customers-api-service:0.0.1\n```\n\n----------------------------------------\n\nTITLE: Adding Ollama-Pull Service to Docker Compose\nDESCRIPTION: This YAML snippet shows how to add an ollama-pull service to the Docker Compose configuration. This service automatically pulls the model for the Ollama container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/develop.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  server:\n    build:\n      context: .\n    ports:\n      - 8000:8000\n    env_file:\n      - .env\n    depends_on:\n      database:\n        condition: service_healthy\n      ollama-pull:\n        condition: service_completed_successfully\n  ollama-pull:\n    image: docker/genai:ollama-pull\n    env_file:\n      - .env\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Watch\nDESCRIPTION: Use Docker Compose to start the development environment and watch for changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/develop-with-containers.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose watch\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker CLI Documentation\nDESCRIPTION: YAML configuration block defining metadata for the Docker container top command documentation page, including data folder location, filename, title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/container/top.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_container_top\ntitle: docker container top\naliases:\n- /edge/engine/reference/commandline/container_top/\n- /engine/reference/commandline/container_top/\n- /engine/reference/commandline/top/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Directory Structure After Docker Init\nDESCRIPTION: The updated file structure showing Docker-related files (Dockerfile, compose.yaml, .dockerignore) created by the docker init command.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-pdf-bot/containerize.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n├── docker-genai-sample/\n│ ├── .dockerignore\n│ ├── .gitignore\n│ ├── app.py\n│ ├── chains.py\n│ ├── compose.yaml\n│ ├── env.example\n│ ├── requirements.txt\n│ ├── util.py\n│ ├── Dockerfile\n│ ├── LICENSE\n│ ├── README.Docker.md\n│ └── README.md\n```\n\n----------------------------------------\n\nTITLE: Deprecated Methods for Executing Docker Commands\nDESCRIPTION: Shows the deprecated methods for executing Docker commands. These methods will be removed in a future version and should be replaced with the newer exec methods.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/docker.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = await window.ddClient.execDockerCmd(\n  \"info\",\n  \"--format\",\n  '\"{{ json . }}\"'\n);\n\nwindow.ddClient.spawnDockerCmd(\"logs\", [\"-f\", \"...\"], (data, error) => {\n  console.log(data.stdout);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Swarm with Separate Data Path Interface\nDESCRIPTION: This command initializes a Docker swarm with separate interfaces for control/management traffic and service data traffic. It uses 10.0.0.1 for control and management traffic and 192.168.0.1 for service-related traffic.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/networking.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker swarm init --advertise-addr 10.0.0.1 --data-path-addr 192.168.0.1\n```\n\n----------------------------------------\n\nTITLE: Configuration Profile for Docker Desktop Authentication (Mac)\nDESCRIPTION: XML configuration profile for macOS that enforces Docker Desktop sign-in requirements. This mobile config file defines allowed organizations and various payload settings for deployment via MDM solutions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n  <dict>\n    <key>PayloadContent</key>\n    <array>\n      <dict>\n        <key>PayloadType</key>\n        <string>com.docker.config</string>\n        <key>PayloadVersion</key>\n        <integer>1</integer>\n        <key>PayloadIdentifier</key>\n        <string>com.docker.config</string>\n        <key>PayloadUUID</key>\n        <string>eed295b0-a650-40b0-9dda-90efb12be3c7</string>\n        <key>PayloadDisplayName</key>\n        <string>Docker Desktop Configuration</string>\n        <key>PayloadDescription</key>\n        <string>Configuration profile to manage Docker Desktop settings.</string>\n        <key>PayloadOrganization</key>\n        <string>Your Company Name</string>\n        <key>allowedOrgs</key>\n        <string>first_org;second_org</string>\n      </dict>\n    </array>\n    <key>PayloadType</key>\n    <string>Configuration</string>\n    <key>PayloadVersion</key>\n    <integer>1</integer>\n    <key>PayloadIdentifier</key>\n    <string>com.yourcompany.docker.config</string>\n    <key>PayloadUUID</key>\n    <string>0deedb64-7dc9-46e5-b6bf-69d64a9561ce</string>\n    <key>PayloadDisplayName</key>\n    <string>Docker Desktop Config Profile</string>\n    <key>PayloadDescription</key>\n    <string>Config profile to enforce Docker Desktop settings for allowed organizations.</string>\n    <key>PayloadOrganization</key>\n    <string>Your Company Name</string>\n  </dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Enabling BuildKit with Environment Variable in Docker Build\nDESCRIPTION: Shows how to enable BuildKit for a single build command by setting the DOCKER_BUILDKIT environment variable to 1 when running the docker build command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ DOCKER_BUILDKIT=1 docker build .\n```\n\n----------------------------------------\n\nTITLE: Viewing Bake Build Configuration\nDESCRIPTION: Command to view the build configuration that Bake would use based on the Compose file. The --print flag evaluates and outputs the build definition in JSON format.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake --print\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Volume Update Documentation\nDESCRIPTION: This YAML snippet defines the metadata for the 'docker volume update' command documentation page. It specifies the data folder, file name, aliases for URL routing, page title, and layout template.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/volume/update.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_volume_update\naliases:\n- /engine/reference/commandline/volume_update\ntitle: docker volume update\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Service with Both TCP and UDP Ports Using Long Syntax\nDESCRIPTION: Command to create a DNS cache service that publishes both TCP and UDP on port 53 using the long syntax format, specifying the protocol parameter for the UDP port.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create --name dns-cache \\\n  --publish published=53,target=53 \\\n  --publish published=53,target=53,protocol=udp \\\n  dns-cache\n```\n\n----------------------------------------\n\nTITLE: Creating File in Alpine Container\nDESCRIPTION: Creates a new file inside an Alpine container to demonstrate container filesystem isolation.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/05_persisting_data.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm alpine touch greeting.txt\n```\n\n----------------------------------------\n\nTITLE: Include Template Usage\nDESCRIPTION: A template directive for including a disclaimer about Buildx v0.10\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/release-notes.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{{% include \"buildx-v0.10-disclaimer.md\" %}}\n```\n\n----------------------------------------\n\nTITLE: Pausing a Container in Docker API\nDESCRIPTION: API call to pause a container's processes. This suspends all processes in the specified container.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_30\n\nLANGUAGE: http\nCODE:\n```\nPOST /v1.24/containers/e90e34656806/pause HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop Package\nDESCRIPTION: Command to install Docker Desktop RPM package using dnf\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/setup/install/linux/rhel.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ sudo dnf install ./docker-desktop-x86_64-rhel.rpm\n```\n\n----------------------------------------\n\nTITLE: Monitoring Btrfs Filesystem Space\nDESCRIPTION: Command to monitor available space on a Btrfs filesystem device\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/btrfs-driver.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbtrfs filesys show\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Network\nDESCRIPTION: Creates a Docker network named 'my-network' to allow containers to communicate.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker network create my-network\n```\n\n----------------------------------------\n\nTITLE: Copying Requirements File in Dockerfile\nDESCRIPTION: Transfers the Python dependencies file into the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_14\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY requirements.txt /app\n```\n\n----------------------------------------\n\nTITLE: Reloading Shell Configuration for Bash\nDESCRIPTION: Command to reload the Bash shell configuration after adding bash-completion settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/completion.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ source ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Building Multiple Bake Targets\nDESCRIPTION: Shows how to build multiple targets simultaneously using docker buildx bake.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/targets.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx bake webapp api tests\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change directory into the cloned project folder.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-registry.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncd helloworld-demo-node\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Compose Commit Command Options in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the available options for the 'docker compose commit' command. It includes option names, types, default values, and descriptions for each parameter.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_commit.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name              | Type     | Default | Description                                                |\n|:------------------|:---------|:--------|:-----------------------------------------------------------|\n| `-a`, `--author`  | `string` |         | Author (e.g., \"John Hannibal Smith <hannibal@a-team.com>\") |\n| `-c`, `--change`  | `list`   |         | Apply Dockerfile instruction to the created image          |\n| `--dry-run`       | `bool`   |         | Execute command in dry run mode                            |\n| `--index`         | `int`    | `0`     | index of the container if service has multiple replicas.   |\n| `-m`, `--message` | `string` |         | Commit message                                             |\n| `-p`, `--pause`   | `bool`   | `true`  | Pause container during commit                              |\n```\n\n----------------------------------------\n\nTITLE: Accessing a Running Docker Container Shell\nDESCRIPTION: This command starts an interactive shell session in a running Docker container, allowing you to execute commands directly within the container environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/ca-certs.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -it <containerid> sh\n```\n\n----------------------------------------\n\nTITLE: Comparing Docker Image Sizes to Demonstrate Multi-stage Build Benefits\nDESCRIPTION: This command lists Docker images to compare the sizes of the standard build versus the multi-stage build. It shows the dramatic size reduction from 1.11GB to 28.1MB achieved through the multi-stage approach.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ docker image ls\nREPOSITORY       TAG          IMAGE ID       CREATED              SIZE\ndocker-gs-ping   multistage   e3fdde09f172   About a minute ago   28.1MB\ndocker-gs-ping   latest       336a3f164d0f   About an hour ago    1.11GB\n```\n\n----------------------------------------\n\nTITLE: Setting Git Remote URL for GitHub Repository\nDESCRIPTION: Command to update the Git remote URL to point to a newly created GitHub repository. This connects your local repository to the remote GitHub repository for pushing changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/configure-ci-cd.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git remote set-url origin https://github.com/your-username/your-repository.git\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image in GitHub Actions\nDESCRIPTION: Configures the docker/build-push-action to build the Docker image and push it to the registry, applying tags and annotations from the metadata step.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/gha.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v6\n        with:\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ steps.meta.outputs.tags }}\n          annotations: ${{ steps.meta.outputs.annotations }}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Neo4j Database Schema\nDESCRIPTION: Cypher query to generate a visual representation of the database schema in Neo4j. This provides a graphical overview of the node types and relationships.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-leveraging-rag/index.md#2025-04-11_snippet_6\n\nLANGUAGE: cypher\nCODE:\n```\nCALL db.schema.visualization()\n```\n\n----------------------------------------\n\nTITLE: Displaying AppArmor Parser Error in Docker Daemon\nDESCRIPTION: This snippet shows an error message from the Docker daemon when the AppArmor parser is missing. The error occurs when trying to start containers after upgrading to Docker 23.0 on some Debian systems.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/23.0.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nError response from daemon: AppArmor enabled on system but the docker-default profile could not be loaded: running `apparmor_parser apparmor_parser --version` failed with output:\nerror: exec: \"apparmor_parser\": executable file not found in $PATH\nError: failed to start containers: somecontainer\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Style Guide Page\nDESCRIPTION: This YAML frontmatter block configures a documentation page about style guidelines. It specifies that the page should never be rendered, sets the title to 'Style guide', and assigns a weight of 20 for ordering in the navigation.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/style/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Style guide\nweight: 20\n---\n```\n\n----------------------------------------\n\nTITLE: Cloning Example Repository\nDESCRIPTION: Commands to clone and navigate to the example repository for demonstrating Buildx Bake\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bake/index.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dvdksn/bakeme.git\ncd bakeme\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Swarm Nodes using CLI\nDESCRIPTION: Shows how to use the docker node ls command to display all nodes in a swarm, with their status, availability, and manager status information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/manage-nodes.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker node ls\n\nID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS\n46aqrk4e473hjbt745z53cr3t    node-5    Ready   Active        Reachable\n61pi3d91s0w3b90ijw3deeb2q    node-4    Ready   Active        Reachable\na5b2m3oghd48m8eu391pefq5u    node-3    Ready   Active\ne7p8btxeu3ioshyuj6lxiv6g0    node-2    Ready   Active\nehkv3bcimagdese79dn78otj5 *  node-1    Ready   Active        Leader\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Services with kubectl\nDESCRIPTION: Command to retrieve and display all services in the Kubernetes cluster to verify the Deno application service status.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/deno/deploy.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get services\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Empty Context - PowerShell\nDESCRIPTION: Shows how to build a Docker image without a context using PowerShell.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/context.md#2025-04-11_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Content Dockerfile | docker build -\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Linux User Namespace in First Container\nDESCRIPTION: Shows how the root user in a container is mapped to an unprivileged user (100000) in the Docker Desktop Linux VM when using Enhanced Container Isolation. The output displays the user ID mapping from the container namespace to the host namespace.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/features-benefits.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --rm --name=first alpine\n/ # cat /proc/self/uid_map\n         0     100000      65536\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Buildx Documentation\nDESCRIPTION: YAML front matter defining metadata for the docker buildx history documentation page, including data folder paths, title, layout, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/history/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx_history\ntitle: docker buildx history\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_history/\n---\n```\n\n----------------------------------------\n\nTITLE: Running Docker Init for Python Project Setup\nDESCRIPTION: Example of using the Docker Init CLI to generate Docker assets for a Python project. This interactive command creates Dockerfile, compose.yaml, and other necessary files with sensible defaults.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker init\nWelcome to the Docker Init CLI!\n\nThis utility will walk you through creating the following files with sensible defaults for your project:\n  - .dockerignore\n  - Dockerfile\n  - compose.yaml\n  - README.Docker.md\n\nLet's get started!\n\n? What application platform does your project use? Python\n? What version of Python do you want to use? 3.11.4\n? What port do you want your app to listen on? 8001\n? What is the command to run your app? python3 -m uvicorn app:app --host=0.0.0.0 --port=8001\n```\n\n----------------------------------------\n\nTITLE: Removing a Downloaded AI Model\nDESCRIPTION: Command to remove a previously downloaded AI model from the local system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/model-runner.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker model rm <model>\n```\n\n----------------------------------------\n\nTITLE: Exec Resize API Response in Docker\nDESCRIPTION: HTTP response from resizing an exec TTY session.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_60\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Type: text/plain\n```\n\n----------------------------------------\n\nTITLE: Error Message for Reserved Stage Name\nDESCRIPTION: Example error message when using 'scratch' as a stage name\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/reserved-stage-name.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n'scratch' is reserved and should not be used as a stage name\n```\n\n----------------------------------------\n\nTITLE: Docker Dev Logs Command\nDESCRIPTION: Retrieves and displays logs from a specified dev environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/dev-environments/dev-cli.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker dev logs [OPTIONS] DEV_ENV_NAME\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Exec Command Usage Example\nDESCRIPTION: Example showing basic usage of docker compose exec command for accessing an interactive shell\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_exec.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose exec web sh\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Container\nDESCRIPTION: Stops and removes the MySQL container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/databases.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ docker remove --force my-mysql\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Service and Verification\nDESCRIPTION: Commands to start Docker service and verify installation\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/ubuntu.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ sudo service docker start\n$ sudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Docker Entrypoint Override Examples\nDESCRIPTION: Examples of overriding container entrypoint using --entrypoint flag with various configurations.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_39\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --entrypoint /bin/bash example/redis\n$ docker run -it --entrypoint /bin/bash example/redis -c ls -l\n$ docker run -it --entrypoint /usr/bin/redis-cli example/redis --help\n$ docker run -it --entrypoint=\"\" mysql bash\n```\n\n----------------------------------------\n\nTITLE: Cloning USB/IP Server Repository\nDESCRIPTION: Commands to clone and navigate to the USB/IP implementation repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/usbip.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/jiegec/usbip\n$ cd usbip\n```\n\n----------------------------------------\n\nTITLE: Draining a Manager Node in Docker Swarm\nDESCRIPTION: This command updates a node's availability to 'drain', preventing it from accepting new tasks. This is useful for isolating manager nodes from worker duties to prevent resource contention with Raft consensus operations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/admin_guide.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker node update --availability drain <NODE>\n```\n\n----------------------------------------\n\nTITLE: Copying Application Code in Dockerfile\nDESCRIPTION: Transfers the Python scripts and entrypoint.sh script from the local machine into the Docker image's /app directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/language-translation.md#2025-04-11_snippet_13\n\nLANGUAGE: dockerfile\nCODE:\n```\nCOPY *.py /app\nCOPY entrypoint.sh /app\n```\n\n----------------------------------------\n\nTITLE: CockroachDB Authentication Error Output\nDESCRIPTION: Error output showing authentication failures when the REST server tries to connect to the CockroachDB instance before the user is created. This demonstrates the restart_policy in action.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/develop.md#2025-04-11_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n# ... omitted output ...\nrest-server             | 2021/05/10 00:54:25 failed to initialise the store: pq: password authentication failed for user totoro\nroach                   | *\nroach                   | * INFO: Replication was disabled for this cluster.\nroach                   | * When/if adding nodes in the future, update zone configurations to increase the replication factor.\nroach                   | *\nroach                   | CockroachDB node starting at 2021-05-10 00:54:26.398177 +0000 UTC (took 3.0s)\nroach                   | build:               CCL v20.1.15 @ 2021/04/26 16:11:58 (go1.13.9)\nroach                   | webui:               http://db:8080\nroach                   | sql:                 postgresql://root@db:26257?sslmode=disable\nroach                   | RPC client flags:    /cockroach/cockroach <client cmd> --host=db:26257 --insecure\nroach                   | logs:                /cockroach/cockroach-data/logs\nroach                   | temp dir:            /cockroach/cockroach-data/cockroach-temp349434348\nroach                   | external I/O path:   /cockroach/cockroach-data/extern\nroach                   | store[0]:            path=/cockroach/cockroach-data\nroach                   | storage engine:      rocksdb\nroach                   | status:              initialized new cluster\nroach                   | clusterID:           b7b1cb93-558f-4058-b77e-8a4ddb329a88\nroach                   | nodeID:              1\nrest-server exited with code 0\nrest-server             | 2021/05/10 00:54:25 failed to initialise the store: pq: password authentication failed for user totoro\nrest-server             | 2021/05/10 00:54:26 failed to initialise the store: pq: password authentication failed for user totoro\nrest-server             | 2021/05/10 00:54:29 failed to initialise the store: pq: password authentication failed for user totoro\nrest-server             | 2021/05/10 00:54:25 failed to initialise the store: pq: password authentication failed for user totoro\nrest-server             | 2021/05/10 00:54:26 failed to initialise the store: pq: password authentication failed for user totoro\nrest-server             | 2021/05/10 00:54:29 failed to initialise the store: pq: password authentication failed for user totoro\nrest-server exited with code 1\n# ... omitted output ...\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for PHP Documentation\nDESCRIPTION: YAML configuration header defining metadata for PHP Docker samples documentation page, including title, description, service type and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/php.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: PHP samples\ndescription: Docker samples for PHP.\nservice: php\naliases:\n- /samples/php/\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a .dockerignore File for Rails Applications\nDESCRIPTION: A .dockerignore file that specifies which files and directories should be excluded from the Docker build context. This helps to create smaller, more efficient Docker images by excluding unnecessary files like Git repositories, logs, and temporary files.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/containerize.md#2025-04-11_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# See https://docs.docker.com/engine/reference/builder/#dockerignore-file for more about ignoring files.\n\n# Ignore git directory.\n/.git/\n/.gitignore\n\n# Ignore bundler config.\n/.bundle\n\n# Ignore all environment files.\n/.env*\n\n# Ignore all default key files.\n/config/master.key\n/config/credentials/*.key\n\n# Ignore all logfiles and tempfiles.\n/log/*\n/tmp/*\n!/log/.keep\n!/tmp/.keep\n\n# Ignore pidfiles, but keep the directory.\n/tmp/pids/*\n!/tmp/pids/.keep\n\n# Ignore storage (uploaded files in development and any SQLite databases).\n/storage/*\n!/storage/.keep\n/tmp/storage/*\n!/tmp/storage/.keep\n\n# Ignore assets.\n/node_modules/\n/app/assets/builds/*\n!/app/assets/builds/.keep\n/public/assets\n\n# Ignore CI service files.\n/.github\n\n# Ignore development files\n/.devcontainer\n\n# Ignore Docker-related files\n/.dockerignore\n/Dockerfile*\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Portainer Documentation Page\nDESCRIPTION: YAML frontmatter that defines metadata for a documentation page about Portainer samples. It includes the page title, description, service identifier, and URL aliases for redirects.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/portainer.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Portainer samples\ndescription: Docker samples for Portainer.\nservice: portainer\naliases:\n- /samples/portainer/\n---\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Commands for PHP Application\nDESCRIPTION: Command line instructions for deploying and managing the PHP application in Kubernetes, including applying configurations, checking deployment status, and cleaning up resources.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/deploy.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f docker-php-kubernetes.yaml\n```\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get deployments\n```\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get services\n```\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl delete -f docker-php-kubernetes.yaml\n```\n\n----------------------------------------\n\nTITLE: Pulling Ubuntu Image Example\nDESCRIPTION: Command output showing the process of pulling an Ubuntu image with multiple layers\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/overlayfs-driver.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull ubuntu\n\nUsing default tag: latest\nlatest: Pulling from library/ubuntu\n\n5ba4f30e5bea: Pull complete\n9d7d19c9dc56: Pull complete\nac6ad7efd0f9: Pull complete\ne7491a747824: Pull complete\na3ed95caeb02: Pull complete\nDigest: sha256:46fb5d001b88ad904c5c732b086b596b92cfb4a4840a3abd0e35dbb6870585e4\nStatus: Downloaded newer image for ubuntu:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring priority for service network connections\nDESCRIPTION: Syntax for setting the order in which a service connects to networks in Compose file version 2.x. This allows controlling the sequence of network connections for multi-network services.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  web:\n    networks:\n      network1:\n        priority: 1000\n      network2:\n        priority: 500\n```\n\n----------------------------------------\n\nTITLE: Deprecated Docker Desktop Navigation Methods\nDESCRIPTION: Legacy navigation methods for Docker Desktop UI that are marked for removal in future versions, including navigation to containers, images, volumes, and dev environments.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/dashboard-routes-navigation.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.navigateToContainers();\n// id - the full container id, e.g. `46b57e400d801762e9e115734bf902a2450d89669d85881058a46136520aca28`\nwindow.ddClient.navigateToContainer(id);\nwindow.ddClient.navigateToContainerLogs(id);\nwindow.ddClient.navigateToContainerInspect(id);\nwindow.ddClient.navigateToContainerStats(id);\n\nwindow.ddClient.navigateToImages();\nwindow.ddClient.navigateToImage(id, tag);\n\nwindow.ddClient.navigateToVolumes();\nwindow.ddClient.navigateToVolume(volume);\n\nwindow.ddClient.navigateToDevEnvironments();\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Scale Command Options Table\nDESCRIPTION: Markdown table showing the available options for the docker compose scale command, including dry-run mode and dependency handling options.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_scale.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Type   | Default | Description                     |\n|:------------|:-------|:--------|:--------------------------------|\n| `--dry-run` | `bool` |         | Execute command in dry run mode |\n| `--no-deps` | `bool` |         | Don't start linked services     |\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Docker Buildx Bake Documentation\nDESCRIPTION: YAML front matter defining metadata for the Docker Buildx Bake documentation page. It specifies the data folder, data file, title, layout, and URL aliases for the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/bake.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: buildx\ndatafile: docker_buildx_bake\ntitle: docker buildx bake\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_bake/\n---\n```\n\n----------------------------------------\n\nTITLE: List Volumes API Request in Docker\nDESCRIPTION: HTTP request to list all volumes in Docker.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_63\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/volumes HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Running Container with Specific Runtime\nDESCRIPTION: Example of how to run a container with a specific runtime that has been installed on PATH. This command selects the Kata Containers runtime without needing to edit the daemon's configuration.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_14\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --runtime io.containerd.kata.v2\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Arguments in Docker Compose 1.6.0\nDESCRIPTION: Example of specifying build arguments in a docker-compose.yml file using the new file format in Compose 1.6.0. This allows passing build-time variables to the Docker build process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  args:\n    buildno: 1\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Custom Functions\nDESCRIPTION: Demonstrates how to use global variables within custom functions in a Bake configuration. Creates a 'tag' function that uses a REPO variable to generate image tags.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/bake/funcs.md#2025-04-11_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"REPO\" {\n  default = \"user/repo\"\n}\n\nfunction \"tag\" {\n  params = [tag]\n  result = [\"${REPO}:${tag}\"]\n}\n\ntarget \"webapp\" {\n  tags = tag(\"v1\")\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"group\": {\n    \"default\": {\n      \"targets\": [\"webapp\"]\n    }\n  },\n  \"target\": {\n    \"webapp\": {\n      \"context\": \".\",\n      \"dockerfile\": \"Dockerfile\",\n      \"tags\": [\"user/repo:v1\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker Documentation Build\nDESCRIPTION: This YAML snippet defines the configuration for a Docker documentation page. It sets the build render option to 'never', specifies the title as 'Part one: Build', and assigns a weight of 30 for ordering purposes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: \"Part one: Build\"\nweight: 30\n---\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Users Table\nDESCRIPTION: SQL query to select all records from the users table to verify that the database was properly seeded with the initial data.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nsampledb=# SELECT * FROM users;\n  id | name  |       email\n----+-------+-------------------\n   1 | Alpha | alpha@example.com\n   2 | Beta  | beta@example.com\n   3 | Gamma | gamma@example.com\n (3 rows)\n\nsampledb=#\n```\n\n----------------------------------------\n\nTITLE: Docker Ignore Configuration for Java Project\nDESCRIPTION: A .dockerignore file example that can be used to exclude unnecessary files from being copied to the Docker container during build.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/containerize.md#2025-04-11_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n# Include any files or directories that you don't want to be copied to your\n# container here (e.g., local build artifacts, temporary files, etc.).\n#\n# For more help, visit the .dockerignore file reference guide at\n```\n\n----------------------------------------\n\nTITLE: Billing Events Table in Markdown\nDESCRIPTION: Markdown table defining billing-related events and their descriptions including plan changes, seat management, and billing cycle modifications.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/admin/organization/activity-logs.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Event                                                          | Description                                   |\n|:------------------------------------------------------------------|:------------------------------------------------|\n| Plan Upgraded | Occurs when your organization's billing plan is upgraded to a higher tier plan.|\n| Plan Downgraded | Occurs when your organization's billing plan is downgraded to a lower tier plan. |\n| Seat Added | Occurs when a seat is added to your organization's billing plan. |\n```\n\n----------------------------------------\n\nTITLE: Making Custom HTTP Request with Docker Extension API\nDESCRIPTION: Shows how to perform a custom HTTP request to a backend service using the Docker Extension API. This method is marked for deprecation in favor of the 'request' method from HttpService.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/BackendV0.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.backend\n .request({ url: \"/url\", method: \"GET\", headers: { 'header-key': 'header-value' }, data: { ... }})\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Making HTTP PATCH Request with Docker Extension API\nDESCRIPTION: Shows how to perform an HTTP PATCH request to a backend service using the Docker Extension API. This method is marked for deprecation in favor of the 'patch' method from HttpService.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/BackendV0.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.backend\n .patch(\"/some/service\", { ... })\n .then((value: any) => console.log(value));\n```\n\n----------------------------------------\n\nTITLE: Testing Connection to Container with Published Port\nDESCRIPTION: Successfully connect to the containerized application after publishing the container's port to the host, displaying the application's response.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/run-containers.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ curl http://localhost:8080/\nHello, Docker! <3\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Service with systemctl\nDESCRIPTION: Command to stop the Docker daemon using systemd before configuring the devicemapper storage driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo systemctl stop docker\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Builder with QEMU Emulation Enabled\nDESCRIPTION: Command to create a new Docker Buildx builder using the Kubernetes driver with QEMU emulation explicitly enabled, which is necessary for non-native binary execution during builds.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create \\\n  --bootstrap \\\n  --name=kube \\\n  --driver=kubernetes \\\n  --driver-opt=namespace=buildkit,qemu.install=true\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images After Tagging\nDESCRIPTION: Command showing the list of Docker images after adding a new tag, demonstrating how multiple tags can point to the same image ID.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/build-images.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker images\nREPOSITORY                TAG               IMAGE ID       CREATED         SIZE\ndocker-rust-image         latest            8cae92a8fbd6   4 minutes ago   123MB\ndocker-rust-image         v1.0.0            8cae92a8fbd6   4 minutes ago   123MB\nrust                      latest            be5d294735c6   4 minutes ago   113MB\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Build Settings for Docker Developer SDK Tools\nDESCRIPTION: This YAML snippet defines build settings and metadata for a documentation page about Docker's developer SDK tools. It specifies that the page should never be rendered and sets the title for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Developer SDK tools\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Concepts Documentation Page with YAML Frontmatter\nDESCRIPTION: This YAML frontmatter configures a documentation page about Docker concepts. It specifies that the page should never be rendered directly, sets the page title to 'Docker concepts', and assigns a weight of 40 to determine its position in the navigation hierarchy.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Docker concepts\nweight: 40\n---\n```\n\n----------------------------------------\n\nTITLE: Comparing Policy Results Against a Specific Environment\nDESCRIPTION: Compares policy results for a Docker repository in a specific environment using the --to-env flag to specify the target environment.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_policy.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker scout policy dockerscoutpolicy/customers-api-service --to-env production\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Runtimes in daemon.json\nDESCRIPTION: Basic structure for registering container runtimes in the Docker daemon configuration file. This enables referencing the runtime when running containers with --runtime.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtimes\": {\n    \"<runtime>\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FAQ Page Front Matter in YAML\nDESCRIPTION: YAML front matter defining metadata for a Docker FAQ page. It specifies the build settings to never render the content directly, sets the page title to 'FAQs', and assigns a weight of 30 for sorting in navigation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: FAQs\nweight: 30\n---\n```\n\n----------------------------------------\n\nTITLE: Docker User Flag Format Options\nDESCRIPTION: Shows the valid syntax formats for specifying users when running Docker containers. The -u or --user flag can accept various formats including username, UID, or combinations with groups.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_43\n\nLANGUAGE: text\nCODE:\n```\n-u=\"\", --user=\"\": Sets the username or UID used and optionally the groupname or GID for the specified command.\n```\n\nLANGUAGE: text\nCODE:\n```\n--user=[ user | user:group | uid | uid:gid | user:gid | uid:group ]\n```\n\n----------------------------------------\n\nTITLE: Configuring GELF Logging Driver in Docker Daemon JSON\nDESCRIPTION: Example of setting the GELF logging driver as the default in the daemon.json file. It specifies the log driver as 'gelf' and sets the 'gelf-address' option.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/gelf.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log-driver\": \"gelf\",\n  \"log-opts\": {\n    \"gelf-address\": \"udp://1.2.3.4:12201\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Streamlit Server Output\nDESCRIPTION: Example console output showing the Streamlit server successfully running and providing access URL.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rag-ollama/containerize.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nserver-1  |   You can now view your Streamlit app in your browser.\nserver-1  |\nserver-1  |   URL: http://0.0.0.0:8501\nserver-1  |\n```\n\n----------------------------------------\n\nTITLE: Health Check Response\nDESCRIPTION: Sample response from the Java application's health endpoint. The UP status indicates that the application is running correctly, with liveness and readiness groups reported.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/java/deploy.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n{\"status\":\"UP\",\"groups\":[\"liveness\",\"readiness\"]}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Automated Tests in Docker Compose\nDESCRIPTION: This YAML snippet shows how to declare build environment variables in a docker-compose.test.yml file for use in automated testing. It demonstrates setting up the SOURCE_BRANCH variable for the sut service.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/builds/advanced.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  sut:\n    build: .\n    command: run_tests.sh\n    environment:\n      - SOURCE_BRANCH\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Deployments Status\nDESCRIPTION: Commands to check the status of Kubernetes deployments and services. The output shows that both the database and server deployments are running with one replica each.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/deploy.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get deployments\n```\n\nLANGUAGE: shell\nCODE:\n```\nNAME     READY   UP-TO-DATE   AVAILABLE   AGE\ndb       1/1     1            1           76s\nserver   1/1     1            1           76s\n```\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl get services\n```\n\nLANGUAGE: shell\nCODE:\n```\nNAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE\ndb           ClusterIP   10.96.156.90    <none>        5432/TCP         2m8s\nkubernetes   ClusterIP   10.96.0.1       <none>        443/TCP          164m\nserver       NodePort    10.102.94.225   <none>        8080:30001/TCP   2m8s\n```\n\n----------------------------------------\n\nTITLE: Docker API Example\nDESCRIPTION: HTTP API endpoints and configuration for Docker remote access and management.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n/events\n/images\n/containers/top\n/auth/push\n```\n\n----------------------------------------\n\nTITLE: Inspecting Container Filesystem Changes with Docker API\nDESCRIPTION: Demonstrates how to retrieve a list of filesystem changes that have occurred in a container. The response indicates the type of change (modify, add, or delete) for each file path.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nGET /v1.24/containers/4fa6e0f0c678/changes HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n[\n     {\n             \"Path\": \"/dev\",\n             \"Kind\": 0\n     },\n     {\n             \"Path\": \"/dev/kmsg\",\n             \"Kind\": 1\n     },\n     {\n             \"Path\": \"/test\",\n             \"Kind\": 1\n     }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Extension Components in metadata.json\nDESCRIPTION: This JSON snippet shows the structure of the metadata.json file used to configure the components of a Docker extension. It includes sections for the UI, VM (backend), and host executables.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/architecture/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ui\": {\n    // UI configuration\n  },\n  \"vm\": {\n    \"image\": \"backend-image:tag\"\n    // or\n    \"composefile\": \"compose.yaml\"\n  },\n  \"host\": {\n    // Host executables configuration\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Documentation Page\nDESCRIPTION: This YAML frontmatter defines the metadata for a documentation page about managing Docker resources. It specifies that the page should never be rendered during build, sets the page title as 'Manage resources', and assigns a weight of 60 for ordering in the documentation navigation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/manage-resources/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Manage resources\nweight: 60\n---\n```\n\n----------------------------------------\n\nTITLE: Extracting Docker Image Metadata in GitHub Actions\nDESCRIPTION: Uses docker/metadata-action to generate metadata for Docker images, including tags and annotations based on Git information.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/gha.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Extract Docker image metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ vars.DOCKER_USERNAME }}/my-image\n```\n\n----------------------------------------\n\nTITLE: Docker Extension Install Command\nDESCRIPTION: Command to install a Docker extension from a specified image\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/usage.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker extension install\n```\n\n----------------------------------------\n\nTITLE: Opening Mac Terminal\nDESCRIPTION: Command to open Mac terminal using Terminal\nSOURCE: https://github.com/docker/docs/blob/main/content/includes/open-terminal.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTerminal\n```\n\n----------------------------------------\n\nTITLE: Configuring Containerd Shim Runtime in daemon.json\nDESCRIPTION: Configuration format for registering a runtime that implements a containerd shim. Includes runtimeType to specify the shim and optional configuration options.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtimes\": {\n    \"<runtime>\": {\n      \"runtimeType\": \"<name-or-path>\",\n      \"options\": {}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Docker Compose Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the Docker Compose rm command documentation page, including the data folder, file name, title, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/rm.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: compose-cli\ndatafile: docker_compose_rm\ntitle: docker compose rm\naliases:\n- /compose/reference/rm/\n- /engine/reference/commandline/compose_rm/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Generating Provenance Attestation JSON for Docker with mode=max\nDESCRIPTION: This JSON example demonstrates the structure of a provenance attestation for Docker with mode=max. It includes details about the build process, materials used, and metadata such as build configuration, start and end times, and source code information.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/slsa-provenance.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_type\": \"https://in-toto.io/Statement/v0.1\",\n  \"predicateType\": \"https://slsa.dev/provenance/v0.2\",\n  \"subject\": [\n    {\n      \"name\": \"pkg:docker/<registry>/<image>@<tag/digest>?platform=<platform>\",\n      \"digest\": {\n        \"sha256\": \"e8275b2b76280af67e26f068e5d585eb905f8dfd2f1918b3229db98133cb4862\"\n      }\n    }\n  ],\n  \"predicate\": {\n    \"builder\": { \"id\": \"\" },\n    \"buildType\": \"https://mobyproject.org/buildkit@v1\",\n    \"materials\": [\n      {\n        \"uri\": \"pkg:docker/docker/dockerfile@1\",\n        \"digest\": {\n          \"sha256\": \"9ba7531bd80fb0a858632727cf7a112fbfd19b17e94c4e84ced81e24ef1a0dbc\"\n        }\n      },\n      {\n        \"uri\": \"pkg:docker/golang@1.19.4-alpine?platform=linux%2Farm64\",\n        \"digest\": {\n          \"sha256\": \"a9b24b67dc83b3383d22a14941c2b2b2ca6a103d805cac6820fd1355943beaf1\"\n        }\n      }\n    ],\n    \"buildConfig\": {\n      \"llbDefinition\": [\n        {\n          \"id\": \"step4\",\n          \"op\": {\n            \"Op\": {\n              \"exec\": {\n                \"meta\": {\n                  \"args\": [\"/bin/sh\", \"-c\", \"go mod download -x\"],\n                  \"env\": [\n                    \"PATH=/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n                    \"GOLANG_VERSION=1.19.4\",\n                    \"GOPATH=/go\",\n                    \"CGO_ENABLED=0\"\n                  ],\n                  \"cwd\": \"/src\"\n                },\n                \"mounts\": [\n                  { \"input\": 0, \"dest\": \"/\", \"output\": 0 },\n                  {\n                    \"input\": -1,\n                    \"dest\": \"/go/pkg/mod\",\n                    \"output\": -1,\n                    \"mountType\": 3,\n                    \"cacheOpt\": { \"ID\": \"//go/pkg/mod\" }\n                  },\n                  {\n                    \"input\": 1,\n                    \"selector\": \"/go.mod\",\n                    \"dest\": \"/src/go.mod\",\n                    \"output\": -1,\n                    \"readonly\": true\n                  },\n                  {\n                    \"input\": 1,\n                    \"selector\": \"/go.sum\",\n                    \"dest\": \"/src/go.sum\",\n                    \"output\": -1,\n                    \"readonly\": true\n                  }\n                ]\n              }\n            },\n            \"platform\": { \"Architecture\": \"arm64\", \"OS\": \"linux\" },\n            \"constraints\": {}\n          },\n          \"inputs\": [\"step3:0\", \"step1:0\"]\n        }\n      ]\n    },\n    \"metadata\": {\n      \"buildInvocationID\": \"edf52vxjyf9b6o5qd7vgx0gru\",\n      \"buildStartedOn\": \"2022-12-15T15:38:13.391980297Z\",\n      \"buildFinishedOn\": \"2022-12-15T15:38:14.274565297Z\",\n      \"reproducible\": false,\n      \"completeness\": {\n        \"parameters\": true,\n        \"environment\": true,\n        \"materials\": false\n      },\n      \"https://mobyproject.org/buildkit@v1#metadata\": {\n        \"vcs\": {\n          \"revision\": \"a9ba846486420e07d30db1107411ac3697ecab68-dirty\",\n          \"source\": \"git@github.com:<org>/<repo>.git\"\n        },\n        \"source\": {\n          \"locations\": {\n            \"step4\": {\n              \"locations\": [\n                {\n                  \"ranges\": [\n                    { \"start\": { \"line\": 5 }, \"end\": { \"line\": 5 } },\n                    { \"start\": { \"line\": 6 }, \"end\": { \"line\": 6 } },\n                    { \"start\": { \"line\": 7 }, \"end\": { \"line\": 7 } },\n                    { \"start\": { \"line\": 8 }, \"end\": { \"line\": 8 } }\n                  ]\n                }\n              ]\n            }\n          },\n          \"infos\": [\n            {\n              \"filename\": \"Dockerfile\",\n              \"data\": \"RlJPTSBhbHBpbmU6bGF0ZXN0Cg==\",\n              \"llbDefinition\": [\n                {\n                  \"id\": \"step0\",\n                  \"op\": {\n                    \"Op\": {\n                      \"source\": {\n                        \"identifier\": \"local://dockerfile\",\n                        \"attrs\": {\n                          \"local.differ\": \"none\",\n                          \"local.followpaths\": \"[\\\"Dockerfile\\\",\\\"Dockerfile.dockerignore\\\",\\\"dockerfile\\\"]\",\n                          \"local.session\": \"s4j58ngehdal1b5hn7msiqaqe\",\n                          \"local.sharedkeyhint\": \"dockerfile\"\n                        }\n                      }\n                    },\n                    \"constraints\": {}\n                  }\n                },\n                { \"id\": \"step1\", \"op\": { \"Op\": null }, \"inputs\": [\"step0:0\"] }\n              ]\n            }\n          ]\n        },\n        \"layers\": {\n          \"step2:0\": [\n            [\n              {\n                \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n                \"digest\": \"sha256:261da4162673b93e5c0e7700a3718d40bcc086dbf24b1ec9b54bca0b82300626\",\n                \"size\": 3259190\n              },\n              {\n                \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n                \"digest\": \"sha256:bc729abf26b5aade3c4426d388b5ea6907fe357dec915ac323bb2fa592d6288f\",\n                \"size\": 286218\n              },\n              {\n                \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n                \"digest\": \"sha256:7f1d6579712341e8062db43195deb2d84f63b0f2d1ed7c3d2074891085ea1b56\",\n                \"size\": 116878653\n              },\n              {\n                \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n                \"digest\": \"sha256:652874aefa1343799c619d092ab9280b25f96d97939d5d796437e7288f5599c9\",\n                \"size\": 156\n              }\n            ]\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for JavaScript Docs\nDESCRIPTION: YAML frontmatter configuration for a documentation page about JavaScript Docker samples. Defines the page title, description, service category, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/javascript.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: JavaScript samples\ndescription: Docker samples for JavaScript.\nservice: javascript\naliases:\n- /samples/javascript/\n---\n```\n\n----------------------------------------\n\nTITLE: Modifying Dockerfile to Use Database-Enabled Source Code\nDESCRIPTION: Diff showing how to modify the Dockerfile to use the database-connected version of the application by changing the COPY instruction.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-COPY src/ .\n+COPY src_db/ .\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Resources\nDESCRIPTION: This command removes the deployed Kubernetes resources (Deployment and Service) for the Node.js application, effectively tearing down the application from the cluster.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/nodejs/deploy.md#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl delete -f docker-node-kubernetes.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for NGINX Docker Samples Documentation\nDESCRIPTION: This YAML block defines metadata for a documentation page about NGINX samples in Docker. It specifies the title, description, service type, and URL aliases for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/nginx.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: NGINX samples\ndescription: Docker samples for NGINX.\nservice: nginx\naliases:\n- /samples/nginx/\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Docker Trust Key for Image Signing\nDESCRIPTION: Demonstrates generating a new delegation key pair for Docker Content Trust using the docker trust key generate command, which creates both a private and public key for signing images.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker trust key generate jeff\nGenerating key for jeff...\nEnter passphrase for new jeff key with ID 9deed25:\nRepeat passphrase for new jeff key with ID 9deed25:\nSuccessfully generated and loaded private key. Corresponding public key available: /home/ubuntu/Documents/mytrustdir/jeff.pub\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Notes Build Settings in YAML\nDESCRIPTION: YAML front matter configuration that disables rendering during build and sets up reverse sidebar ordering for release notes documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Release notes\nsidebar:\n  reverse: true\n---\n```\n\n----------------------------------------\n\nTITLE: Watching Multiple Repositories with Docker Scout\nDESCRIPTION: Example command to watch for new images from two repositories and push them to Docker Scout under a specified organization.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_watch.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout watch --org my-org --repository registry-1.example.com/repo-1 --repository registry-2.example.com/repo-2\n```\n\n----------------------------------------\n\nTITLE: Cloning Sample Rust Application Repository\nDESCRIPTION: Retrieves the sample Rust application code from GitHub to demonstrate Docker with a Rust and PostgreSQL application.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/docker/docker-rust-postgres\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Client for Custom Notary Server\nDESCRIPTION: Sets the DOCKER_CONTENT_TRUST_SERVER environment variable to specify a custom Notary server URL for self-hosted environments or 3rd party registries.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_delegation.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export DOCKER_CONTENT_TRUST_SERVER=https://<URL>:<PORT>\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker Troubleshooting Documentation\nDESCRIPTION: YAML front matter configuration for a Docker documentation page about troubleshooting and support. It specifies that the page should never be rendered on its own, sets the page title, and assigns a weight of 50 to determine its position in the navigation hierarchy.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Troubleshoot and support\nweight: 50\n---\n```\n\n----------------------------------------\n\nTITLE: NVIDIA GPU Status Output\nDESCRIPTION: Sample output from the nvidia-smi command when run inside a Docker container with GPU access. This shows the GPU status information including driver version, memory usage, and performance metrics.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/containers/resource_constraints.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n+-------------------------------------------------------------------------------+\n| NVIDIA-SMI 384.130            \tDriver Version: 384.130               \t|\n|-------------------------------+----------------------+------------------------+\n| GPU  Name \t   Persistence-M| Bus-Id    \tDisp.A | Volatile Uncorr. ECC   |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M.   |\n|===============================+======================+========================|\n|   0  GRID K520       \tOff  | 00000000:00:03.0 Off |                  N/A      |\n| N/A   36C\tP0    39W / 125W |  \t0MiB /  4036MiB |      0%  \tDefault |\n+-------------------------------+----------------------+------------------------+\n+-------------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory   |\n|  GPU   \tPID   Type   Process name                         \tUsage  \t|\n|===============================================================================|\n|  No running processes found                                                   |\n+-------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Engine Installation on CentOS\nDESCRIPTION: Command to verify that Docker Engine is correctly installed by running the hello-world test container, which downloads a test image and confirms proper functionality.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/centos.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Engine API v1.30 Documentation\nDESCRIPTION: This YAML snippet defines the frontmatter for the Docker Engine API v1.30 reference documentation. It specifies the link title, page title, and URL aliases for the documentation page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.30.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.30\ntitle: Docker Engine API v1.30 reference\naliases:\n  - /engine/api/v1.30/\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Container - Response\nDESCRIPTION: Example HTTP response for successful container creation, returning the container ID and any warnings.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Id\":\"e90e34656806\",\n    \"Warnings\":[]\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Compression Configuration\nDESCRIPTION: Example of configuring zstd compression for registry cache backend\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-to type=registry,ref=<registry>/<cache-image>,compression=zstd \\\n  --cache-from type=registry,ref=<registry>/<cache-image> .\n```\n\n----------------------------------------\n\nTITLE: Displaying Classification Results to User\nDESCRIPTION: Code that outputs the accuracy metrics, classification report, and predicted sentiment for the user's input text.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"Accuracy: {accuracy:.2f}\")\nprint(\"\\nVADER Classification Report:\")\nprint(report_vader)\n\nprint(f\"\\nTest Text (Positive): '{input_text}'\")\nprint(f\"Predicted Sentiment: {'Positive' if input_text_classification == 0 else 'Negative'}\")\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Test Stage\nDESCRIPTION: Command to build a Docker image targeting the test stage, ensuring tests are executed during the build process.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/php/run-tests.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker build -t php-docker-image-test --progress plain --no-cache --target test .\n```\n\n----------------------------------------\n\nTITLE: Setting secure mount point using tmpfs.size property\nDESCRIPTION: Configuration syntax for specifying the size of a tmpfs mount in Docker Compose files version 3.6 and above. This allows limiting the size of the temporary filesystem mount.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  myservice:\n    tmpfs:\n      - /run:rw,noexec,nosuid,size=65536k\n```\n\n----------------------------------------\n\nTITLE: Docker Volume Creation Command Example\nDESCRIPTION: Example of an unsupported Docker volume creation command using local driver with bind options\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/harmonia/_index.md#2025-04-11_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume create --driver local --opt type=none --opt o=bind --opt device=/some/host/path myvolname\n```\n\n----------------------------------------\n\nTITLE: WSL Docker Desktop Access Command\nDESCRIPTION: Command to access Docker Desktop's Linux VM as root in WSL environment.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/hardened-desktop/enhanced-container-isolation/limitations.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nwsl -d docker-desktop\n```\n\n----------------------------------------\n\nTITLE: Implementing Docker Scout Policy Evaluation in GitHub Actions Workflow\nDESCRIPTION: This GitHub Actions workflow demonstrates how to run Docker Scout policy evaluation in CI pipelines. It builds a Docker image, authenticates with Docker and the registry, and uses docker/scout-action to compare the image against a production baseline, failing if policy compliance worsens.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/policy/ci.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Docker\n\non:\n  push:\n    tags: [\"*\"]\n    branches:\n      - \"main\"\n  pull_request:\n    branches: [\"**\"]\n\nenv:\n  REGISTRY: docker.io\n  IMAGE_NAME: <IMAGE_NAME>\n  DOCKER_ORG: <ORG>\n\njobs:\n  build:\n    permissions:\n      pull-requests: write\n\n    runs-on: ubuntu-latest\n    steps:\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ secrets.REGISTRY_USER }}\n          password: ${{ secrets.REGISTRY_TOKEN }}\n      \n      - name: Setup Docker buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.IMAGE_NAME }}\n\n      - name: Build image\n        id: build-and-push\n        uses: docker/build-push-action@v4\n        with:\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          sbom: ${{ github.event_name != 'pull_request' }}\n          provenance: ${{ github.event_name != 'pull_request' }}\n          push: ${{ github.event_name != 'pull_request' }}\n          load: ${{ github.event_name == 'pull_request' }}\n\n      - name: Authenticate with Docker\n        uses: docker/login-action@v3\n        with:\n          username: ${{ secrets.DOCKER_USER }}\n          password: ${{ secrets.DOCKER_PAT }}\n\n      - name: Compare\n        if: ${{ github.event_name == 'pull_request' }}\n        uses: docker/scout-action@v1\n        with:\n          command: compare\n          image: ${{ steps.meta.outputs.tags }}\n          to-env: production\n          platform: \"linux/amd64\"\n          ignore-unchanged: true\n          only-severities: critical,high\n          organization: ${{ env.DOCKER_ORG }}\n          exit-on: policy\n```\n\n----------------------------------------\n\nTITLE: Creating and Testing an IPvlan L3 Mode Network\nDESCRIPTION: Creates an IPvlan network in L3 mode with multiple subnets and demonstrates container-to-container connectivity between different subnets. This example shows how L3 mode enables routing between subnets without requiring an external router.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/ipvlan.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n# Create the IPvlan L3 network\n$ docker network create -d ipvlan \\\n    --subnet=192.168.214.0/24 \\\n    --subnet=10.1.214.0/24 \\\n    -o ipvlan_mode=l3 ipnet210\n\n# Test 192.168.214.0/24 connectivity\n$ docker run --net=ipnet210 --ip=192.168.214.10 -itd alpine /bin/sh\n$ docker run --net=ipnet210 --ip=10.1.214.10 -itd alpine /bin/sh\n\n# Test L3 connectivity from 10.1.214.0/24 to 192.168.214.0/24\n$ docker run --net=ipnet210 --ip=192.168.214.9 -it --rm alpine ping -c 2 10.1.214.10\n\n# Test L3 connectivity from 192.168.214.0/24 to 10.1.214.0/24\n$ docker run --net=ipnet210 --ip=10.1.214.9 -it --rm alpine ping -c 2 192.168.214.10\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Service and Config Resources\nDESCRIPTION: Removes the Redis service and then deletes the config from Docker, completing the cleanup process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker service rm redis\n\ndocker config rm my-config\n```\n\n----------------------------------------\n\nTITLE: Signing Docker Image with Content Trust\nDESCRIPTION: This snippet illustrates how to sign a Docker image using Content Trust. It exports the repository passphrase and uses the docker trust sign command to sign and push the image.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/trust/trust_automation.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=\"mypassphrase123\"\n\n$ docker trust sign registry.example.com/admin/demo:1\nSigning and pushing trust data for local image registry.example.com/admin/demo:1, may overwrite remote trust data\nThe push refers to repository [registry.example.com/admin/demo]\n428c97da766c: Layer already exists\n2: digest: sha256:1a6fd470b9ce10849be79e99529a88371dff60c60aab424c077007f6979b4812 size: 524\nSigning and pushing trust metadata\nSuccessfully signed registry.example.com/admin/demo:1\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker Docs Tag Page\nDESCRIPTION: This YAML snippet defines the front matter for a Docker documentation page. It sets the title of the page to 'Tags' and specifies an icon parameter with the value 'tag'.\nSOURCE: https://github.com/docker/docs/blob/main/content/tags/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Tags\nparams:\n  icon: tag\n---\n```\n\n----------------------------------------\n\nTITLE: Network Removal HTTP Response\nDESCRIPTION: No Content response indicating the network was successfully removed with no additional information returned.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_82\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 204 No Content\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker Core Concepts Documentation\nDESCRIPTION: This YAML snippet defines the front matter for a documentation page about Docker core concepts. It specifies that the page should never be rendered during the build process, sets the title to 'Core concepts', and assigns a weight of 10 for ordering in the documentation structure.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/concepts/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Core concepts\nweight: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Runc in daemon.json\nDESCRIPTION: Example configuration for the runc runtime using the path format. This configuration sets runc as a runtime that can be selected with --runtime runc.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#2025-04-11_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtimes\": {\n    \"runc\": {\n      \"path\": \"runc\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Main Program Loop for Text Input and Analysis\nDESCRIPTION: Infinite loop that continuously prompts the user for text input, analyzes its sentiment, and displays the results until the user exits.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/text-classification.md#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n   while True:\n    input_text = input(\"Enter the text for classification (type 'exit' to end): \")\n\n      if input_text.lower() == 'exit':\n         print(\"Exiting...\")\n         break\n```\n\n----------------------------------------\n\nTITLE: Testing Updated API Endpoint\nDESCRIPTION: A curl command demonstrating that the API endpoint now returns the updated greeting message after the code change and automatic rebuild.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/python/develop.md#2025-04-11_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ curl http://localhost:8001\nHello, Docker!!!\n```\n\n----------------------------------------\n\nTITLE: Docker Extension Dockerfile Configuration\nDESCRIPTION: Dockerfile for building a React-based Docker Desktop extension, including multi-stage build process for frontend compilation and final image configuration with required labels.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/build/frontend-extension-tutorial.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM --platform=$BUILDPLATFORM node:18.9-alpine3.15 AS client-builder\nWORKDIR /ui\nCOPY ui/package.json /ui/package.json\nCOPY ui/package-lock.json /ui/package-lock.json\nRUN --mount=type=cache,target=/usr/src/app/.npm \\\n    npm set cache /usr/src/app/.npm && \\\n    npm ci\nCOPY ui /ui\nRUN npm run build\n\nFROM alpine\nLABEL org.opencontainers.image.title=\"My extension\" \\\n    org.opencontainers.image.description=\"Your Desktop Extension Description\" \\\n    org.opencontainers.image.vendor=\"Awesome Inc.\" \\\n    com.docker.desktop.extension.api.version=\"0.3.3\" \\\n    com.docker.desktop.extension.icon=\"https://www.docker.com/wp-content/uploads/2022/03/Moby-logo.png\" \\\n    com.docker.extension.screenshots=\"\" \\\n    com.docker.extension.detailed-description=\"\" \\\n    com.docker.extension.publisher-url=\"\" \\\n    com.docker.extension.additional-urls=\"\" \\\n    com.docker.extension.changelog=\"\"\n\nCOPY metadata.json .\nCOPY docker.svg .\nCOPY --from=client-builder /ui/build ui\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining the page metadata including title, description, service type and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/python.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Python samples\ndescription: Docker samples for Python.\nservice: python\naliases:\n- /samples/python/\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing a Docker Swarm with Autolock Enabled\nDESCRIPTION: Demonstrates how to initialize a new Docker Swarm with autolock enabled using the --autolock flag. When enabled, Docker requires a key to unlock the swarm after restarting.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm_manager_locking.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker swarm init --autolock\n\nSwarm initialized: current node (k1q27tfyx9rncpixhk69sa61v) is now a manager.\n\nTo add a worker to this swarm, run the following command:\n\n    docker swarm join \\\n    --token SWMTKN-1-0j52ln6hxjpxk2wgk917abcnxywj3xed0y8vi1e5m9t3uttrtu-7bnxvvlz2mrcpfonjuztmtts9 \\\n    172.31.46.109:2377\n\nTo add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.\n\nTo unlock a swarm manager after it restarts, run the `docker swarm unlock`\ncommand and provide the following key:\n\n    SWMKEY-1-WuYH/IX284+lRcXuoVf38viIDK3HJEKY13MIHX+tTt8\n```\n\n----------------------------------------\n\nTITLE: Unsetting Docker Host Environment Variable\nDESCRIPTION: Command to unset the DOCKER_HOST environment variable, allowing the Docker client to connect to the daemon on the local host.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/troubleshoot.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ unset DOCKER_HOST\n```\n\n----------------------------------------\n\nTITLE: Specifying Target Platform for Docker Compose Services\nDESCRIPTION: Defines the target platform for service containers using the os[/arch[/variant]] syntax. Used to determine which version of an image to pull or which platform to build on.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\nplatform: darwin\nplatform: windows/amd64\nplatform: linux/arm64/v8\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Storage Driver\nDESCRIPTION: JSON configuration to set overlay2 as the storage driver in daemon.json\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/overlayfs-driver.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storage-driver\": \"overlay2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Client Environment for Rootless Mode\nDESCRIPTION: Methods to connect the Docker client to a rootless daemon by either specifying the socket path via DOCKER_HOST environment variable or using docker context.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock\n$ docker run -d -p 8080:80 nginx\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker context use rootless\nrootless\nCurrent context is now \"rootless\"\n$ docker run -d -p 8080:80 nginx\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Shows the recommended directory layout for a Laravel application with Docker configuration files separated into development and production environments.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/frameworks/laravel/production-setup.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy-laravel-app/\n├── app/\n├── bootstrap/\n├── config/\n├── database/\n├── public/\n├── docker/\n│   ├── common/\n│   │   └── php-fpm/\n│   │       └── Dockerfile\n│   ├── development/\n│   ├── production/\n│   │   ├── php-fpm/\n│   │   │   └── entrypoint.sh\n│   │   └── nginx\n│   │       ├── Dockerfile\n│   │       └── nginx.conf\n├── compose.dev.yaml\n├── compose.prod.yaml\n├── .dockerignore\n├── .env\n├── vendor/\n├── ...\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker API Documentation\nDESCRIPTION: YAML front matter block defining the configuration for the Docker Engine API v1.40 reference documentation page, including link title and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.40.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.40\ntitle: Docker Engine API v1.40 reference\naliases:\n  - /engine/api/v1.40/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker Engine API v1.48 Documentation\nDESCRIPTION: This YAML snippet defines the front matter for the Docker Engine API v1.48 reference documentation. It specifies the link title, page title, and sets up aliases for different versions of the API documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/version/v1.48.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlinkTitle: v1.48\ntitle: Docker Engine API v1.48 reference\naliases:\n  - /engine/api/v1.48/\n  - /engine/api/latest/\n  - /reference/api/engine/latest/\n---\n```\n\n----------------------------------------\n\nTITLE: Committing a Docker Container to Create an Image with HTTP API\nDESCRIPTION: Demonstrates using Docker commands and the HTTP API to create and commit a container. First runs a container with 'docker run' and then uses a curl request to commit the container to a new image named 'helloworld'.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d alpine touch /helloworld\n0888269a9d584f0fa8fc96b3c0d8d57969ceea3a64acf47cd34eebb4744dbc52\n$ curl --unix-socket /var/run/docker.sock\\\n  -X POST \"http://localhost/v{{% param \"latest_engine_api_version\" %}}/commit?container=0888269a9d&repo=helloworld\"\n{\"Id\":\"sha256:6c86a5cd4b87f2771648ce619e319f3e508394b5bfc2cdbd2d60f59d52acda6c\"}\n```\n\n----------------------------------------\n\nTITLE: Optimized Dockerfile with Efficient Layer Ordering\nDESCRIPTION: An improved Dockerfile that separates dependency installation from code changes, allowing the build cache to be reused when only source code changes but dependencies remain the same.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/optimize.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM node\nWORKDIR /app\nCOPY package.json yarn.lock .    # Copy package management files\nRUN npm install                  # Install dependencies\nCOPY . .                         # Copy over project files\nRUN npm build                    # Run build\n```\n\n----------------------------------------\n\nTITLE: Starting API Server Natively\nDESCRIPTION: Series of commands to navigate to the API directory, install dependencies, and start the development server for the API component.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/traefik.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ncd api\nyarn install\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Watch\nDESCRIPTION: Command to run the application with Docker Compose Watch enabled for automatic rebuilds on code changes.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/cpp/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose watch\n```\n\n----------------------------------------\n\nTITLE: Setting Organization for Single Docker Scout Command\nDESCRIPTION: Command to specify the Docker organization for a single CVE scan command using the --org flag.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/exceptions.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cves --org <organization> <image>\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Node.js Docker Documentation\nDESCRIPTION: YAML frontmatter configuration for a documentation page about Node.js Docker samples. It defines the title, description, service type, and URL aliases for the page.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/samples/nodejs.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Node.js samples\ndescription: Docker samples for Node.js.\nservice: nodejs\naliases:\n- /samples/nodejs/\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker CLI Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker context create command documentation page, including the data folder, file name, title, layout, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/context/create.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_context_create\ntitle: docker context create\nlayout: cli\naliases:\n- /engine/reference/commandline/context_create/\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Release Notes Page\nDESCRIPTION: YAML frontmatter block that configures the metadata for the Docker release notes documentation page, including the page title, icon, description and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/tags/release-notes/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Release notes\nicon: note_stack_add\ndescription: Find out about the latest features\naliases:\n- /release-notes/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Docker Swarm Documentation\nDESCRIPTION: This YAML snippet defines the build configuration and title for a Docker Swarm documentation page. It specifies that the page should never be rendered and sets the title to 'How swarm works'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/how-swarm-mode-works/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: How swarm works\n---\n```\n\n----------------------------------------\n\nTITLE: Matching Original IP and Ports with conntrack\nDESCRIPTION: Example of using the conntrack iptables extension to match traffic based on original IP addresses and ports before DNAT processing.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/packet-filtering-firewalls.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo iptables -I DOCKER-USER -p tcp -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT\nsudo iptables -I DOCKER-USER -p tcp -m conntrack --ctorigdst 198.51.100.2 --ctorigdstport 80 -j ACCEPT\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Scout for a Repository\nDESCRIPTION: Command to enable Docker Scout for a specific image repository, allowing it to analyze images in that repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout repo enable --org <ORG_NAME> <ORG_NAME>/scout-demo\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML for Latest Docker Engine API Documentation\nDESCRIPTION: This YAML snippet configures the build and rendering settings for the latest version of the Docker Engine API documentation. It specifies that the page should never be rendered, sets the title to 'Latest', configures the sidebar navigation, and sets the page weight for ordering.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/latest.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nbuild:\n  render: never\ntitle: Latest\nparams:\n  sidebar:\n    goto: /reference/api/engine/latest/\nweight: 20\n---\n```\n\n----------------------------------------\n\nTITLE: Example SPDX SBOM Attestation Content in JSON\nDESCRIPTION: Beginning of an example attestation body containing SBOM data in SPDX format. This shows how the in-toto attestation format is used to wrap SPDX content and reference the subject image.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_type\": \"https://in-toto.io/Statement/v0.1\",\n  \"predicateType\": \"https://spdx.dev/Document\",\n  \"subject\": [\n    {\n      \"name\": \"_\",\n      \"digest\": {\n        \"sha256\": \"23678f31b3b3586c4fb318aecfe64a96a1f0916ba8faf9b2be2abee63fa9e827\"\n      }\n    }\n  ],\n  \"predicate\": {\n    \"SPDXID\": \"SPDXRef-DOCUMENT\",\n    \"spdxVersion\": \"SPDX-2.2\",\n    ...\n\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository - Console Command\nDESCRIPTION: Command to clone the sample application repository containing the Golang server with Prometheus metrics.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/application.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dockersamples/go-prometheus-monitoring.git\n```\n\n----------------------------------------\n\nTITLE: Specifying Image Names in Compose File\nDESCRIPTION: YAML snippet showing how to specify image names for services in a Compose file. This configuration enables pushing the built images to Docker Hub.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/compose-bake/index.md#2025-04-11_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  vote:\n    image: username/vote\n    build:\n      context: ./vote\n      target: dev\n    #...\n\n  result:\n    image: username/result\n    build:\n      context: ./result\n    #...\n\n  worker:\n    image: username/worker\n    build:\n      context: ./worker\n    #...\n```\n\n----------------------------------------\n\nTITLE: Git Commands for Committing and Pushing to GitHub\nDESCRIPTION: A sequence of Git commands to stage all changes, commit them with a message, and push to the main branch of the GitHub repository. This establishes the initial codebase in the remote repository.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/configure-ci-cd.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git add -A\n$ git commit -m \"my commit\"\n$ git push -u origin main\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Bearer Token Authentication\nDESCRIPTION: Prometheus configuration for authentication using Personal Access Token (PAT) as bearer token.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/explore/metrics-exporter.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: $ORG\n    authorization:\n      type: Bearer\n      credentials_file: /etc/prometheus/token\n```\n\n----------------------------------------\n\nTITLE: Docker Documentation Source Comment in HTML\nDESCRIPTION: HTML comment explaining that the documentation is automatically generated from Docker's source code and providing instructions for suggesting changes through GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/secret/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Examples of Custom Dockerfile Syntax References\nDESCRIPTION: Demonstrates different ways to reference the Docker Dockerfile frontend. You can use short or fully qualified image references, and even include digest values for immutability.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/buildkit/frontend.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\n# syntax=docker.io/docker/dockerfile:1\n# syntax=example.com/user/repo:tag@sha256:abcdef...\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration\nDESCRIPTION: Configuration for Prometheus to scrape metrics from the OpenTelemetry collector.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/cli/otel.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Configure Prometheus to scrape the OpenTelemetry collector endpoint\nscrape_configs:\n  - job_name: \"otel-collector\"\n    scrape_interval: 1s\n    static_configs:\n      - targets: [\"otelcol:8889\"]\n```\n\n----------------------------------------\n\nTITLE: Stopping Nginx Container\nDESCRIPTION: Stops the running Nginx container, which will be automatically removed due to the --rm flag used when starting it.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/host.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker container stop my_nginx\n```\n\n----------------------------------------\n\nTITLE: Ruby Docker Service\nDESCRIPTION: Ruby code for creating and starting a Docker service\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/code-blocks.md#2025-04-11_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndocker_service 'default' do\n  action [:create, :start]\nend\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Docker Docs Repository\nDESCRIPTION: Commands for cloning the forked Docker docs repository and configuring Git to sync with the upstream repository.\nSOURCE: https://github.com/docker/docs/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/<your-username>/docs\n$ cd docs\n```\n\n----------------------------------------\n\nTITLE: Configuring PortBindings in Docker Container\nDESCRIPTION: Maps exposed container ports to host ports. This JSON object specifies which ports from the container should be accessible on the host and through which host ports.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{ <port>/<protocol>: [{ \"HostPort\": \"<port>\" }] }\n```\n\n----------------------------------------\n\nTITLE: Configuring StorageOpt in Docker Container\nDESCRIPTION: Specifies storage driver options for the container. This example sets a size limit of 120GB for the container's filesystem.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\"size\":\"120G\"}\n```\n\n----------------------------------------\n\nTITLE: Opening External URL in Docker Desktop Extension (TypeScript)\nDESCRIPTION: Shows how to open an external URL using the system's default browser. This method is deprecated and will be removed in a future version. The 'openExternal' method from Host is recommended as a replacement.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/DockerDesktopClient.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.openExternal(\"https://docker.com\");\n```\n\n----------------------------------------\n\nTITLE: Sample AI Response Without RAG\nDESCRIPTION: Example of an AI model response to a question about Apache NiFi when RAG is disabled. The response demonstrates the AI's knowledge limitations due to its training cutoff date.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-leveraging-rag/index.md#2025-04-11_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nQuestion: What is Apache Nifi? \nRAG: Disabled\nHello! I'm here to help you with your question about Apache NiFi. Unfortunately, I don't know the answer to that question. I'm just an AI and my knowledge cutoff is December 2022, so I may not be familiar with the latest technologies or software. Can you please provide more context or details about Apache NiFi? Maybe there's something I can help you with related to it.\n```\n\n----------------------------------------\n\nTITLE: Basic Include Directive with Service References (YAML)\nDESCRIPTION: Demonstrates how to include another Compose file and reference a service defined in that included file. The example shows how serviceA can depend on serviceB which is defined in the included file.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/include.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n  - my-compose-include.yaml  #with serviceB declared\nservices:\n  serviceA:\n    build: .\n    depends_on:\n      - serviceB #use serviceB directly as if it was declared in this Compose file\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pulling in Docker Buildx Bake (HCL)\nDESCRIPTION: Shows how to control image pulling behavior during builds using the 'pull' attribute.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_29\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  pull = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon for Prometheus Metrics\nDESCRIPTION: JSON configuration to enable metrics exposure on Docker daemon. Sets the metrics address to localhost port 9323.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/prometheus.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metrics-addr\": \"127.0.0.1:9323\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Quick Policy Compliance Check\nDESCRIPTION: Command to get an overview of policy compliance status for the image, evaluating it against default policy configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout quickview\n\n...\nPolicy status  FAILED  (2/6 policies met, 2 missing data)\n\n  Status │                  Policy                      │           Results\n─────────┼──────────────────────────────────────────────┼──────────────────────────────\n  ✓      │ No copyleft licenses                         │    0 packages\n  !      │ Default non-root user                        │\n  !      │ No fixable critical or high vulnerabilities  │    2C    16H     0M     0L\n  ✓      │ No high-profile vulnerabilities              │    0C     0H     0M     0L\n  ?      │ No outdated base images                      │    No data\n  ?      │ Supply chain attestations                    │    No data\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows DNS Proxy Feature in daemon.json\nDESCRIPTION: JSON configuration for enabling the Windows DNS proxy feature in Docker Engine. This allows the internal DNS server to forward requests to external resolvers, which helps with container name resolution.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/26.1.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"windows-dns-proxy\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Hello World Example in Console\nDESCRIPTION: This snippet shows a simple Docker command to run the 'hello-world' container. It's used as an example within the accordion content.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/components/accordions.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Extending Logical Volume in Bash\nDESCRIPTION: This command shows how to extend the docker/thinpool logical volume using the lvextend command.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo lvextend -l+100%FREE -n docker/thinpool\n\nSize of logical volume docker/thinpool_tdata changed from 95.00 GiB (24319 extents) to 198.00 GiB (50688 extents).\nLogical volume docker/thinpool_tdata successfully resized.\n```\n\n----------------------------------------\n\nTITLE: Executing Commands in Docker Extension Backend Container with TypeScript\nDESCRIPTION: Example of executing the 'ls -l' command inside a Docker extension's backend container synchronously. This demonstrates basic command execution through the Extension VM CLI interface.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExtensionVM.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait ddClient.extension.vm.cli.exec(\n  \"ls\",\n  [\"-l\"]\n);\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Admin Service Configuration in YAML\nDESCRIPTION: An example of an administrative override configuration that specifies build context and environment variables for a webapp service. This would be used to extend the base configuration.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#2025-04-11_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  webapp:\n    build: .\n    environment:\n      - DEBUG=1\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request with Docker Extension API\nDESCRIPTION: Performs an HTTP GET request to a backend service using the Docker client extension VM service. Returns a promise that resolves to the response data.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/HttpService.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nddClient.extension.vm.service\n .get(\"/some/service\")\n .then((value: any) => console.log(value)\n```\n\n----------------------------------------\n\nTITLE: Defining ExecOptions Interface Properties in TypeScript\nDESCRIPTION: Defines the properties of the ExecOptions interface which allows configuring command execution in Docker extensions. It includes optional properties for working directory (cwd) and environment variables (env).\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/extensions-sdk/ExecOptions.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **cwd**: `string`\n```\n\nLANGUAGE: typescript\nCODE:\n```\n• `Optional` **env**: `ProcessEnv`\n```\n\n----------------------------------------\n\nTITLE: Sample AI Response With RAG Enabled\nDESCRIPTION: Example of an AI model response to the same question about Apache NiFi, but with RAG enabled. The response is more detailed and includes information retrieved from the Neo4j database.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-leveraging-rag/index.md#2025-04-11_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nQuestion: What is Apache Nifi? \nRAG: Enabled\n\nAnswer:\nApache NiFi is an open-source, distributed data processing system that allows you to collect, transform, and transport data across various sources and sinks. It provides a graphical user interface for designing and managing data flows, as well as a set of APIs for integrating with other systems.\nAccording to this Stack Overflow question, the free Neo4J JDBC driver doesn't understand SQL, only Cypher, so you would need to use a non-free BI Connector to connect to Neo4j from Apache Drill.\nAdditionally, this Stack Overflow question suggests that Apache POI does work in a Neo4j User Defined Function. However, there may be an unknown glitch in the standalone UDF mentioned in the initial question.\nTo export data from Neo4j to Excel using APOC Extended procedures, you can use apoc.export.xls.query which takes a Cypher query and exports the results to an Excel file.\n\nReferences:\nHow to connect and query Neo4j Database on Apache Drill?\nIs a Neo4j UDF compatible with Apache POI?\n```\n\n----------------------------------------\n\nTITLE: Merging Unique Resources in Docker Compose\nDESCRIPTION: Demonstrates how unique resources like volumes are merged based on their unique keys in Docker Compose files.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/merge.md#2025-04-11_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    volumes:\n      - foo:/work\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    volumes:\n      - bar:/work\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  foo:\n    volumes:\n      - bar:/work\n```\n\n----------------------------------------\n\nTITLE: Templating Variables for Docker SSO Configuration\nDESCRIPTION: Go template variables that conditionally set product links and navigation instructions based on whether the context is Docker Hub or Admin Console.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/shortcodes/admin-sso-connect.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{ $product_link := \"[Docker Hub](https://hub.docker.com)\" }}\n{{ $sso_navigation := `Navigate to the SSO settings page for your organization. Select **My Hub**, your organization, **Settings**, and then **Security**.` }}\n\n{{ if eq (.Get \"product\") \"admin\" }}\n  {{ $product_link = \"the [Admin Console](https://admin.docker.com)\" }}\n  {{ $sso_navigation = \"Select your organization or company from the **Choose profile** page, and then select **SSO and SCIM**. Note that when an organization is part of a company, you must select the company and configure SSO for that organization at the company level. Each organization can have its own SSO configuration and domain, but it must be configured at the company level.\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Scout Environments\nDESCRIPTION: Command to list all existing Docker Scout environments in the system.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_environment.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout environment\nprod\nstaging\n```\n\n----------------------------------------\n\nTITLE: Testing Rust Application API with curl\nDESCRIPTION: Uses curl to test the Rust application's API endpoint that retrieves users from the PostgreSQL database.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ curl http://localhost:3001/users\n```\n\n----------------------------------------\n\nTITLE: Non-compliant Dockerfile with Multi-stage Build\nDESCRIPTION: A non-compliant multi-stage Dockerfile example that doesn't specify a non-root user in the runtime stage, which violates the Default Non-Root User policy.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/policy/_index.md#2025-04-11_snippet_3\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM alpine AS builder\nCOPY Makefile ./src /\nRUN make build\n\nFROM alpine AS runtime\nCOPY --from=builder bin/production /app\nENTRYPOINT [\"/app/production\"]\n```\n\n----------------------------------------\n\nTITLE: Invalid usage of ARG without default value in FROM instruction\nDESCRIPTION: This example shows an incorrect pattern where an ARG used in a FROM instruction doesn't have a default value, making the build require --build-arg to succeed.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-default-arg-in-from.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG TAG\nFROM busybox:${TAG}\n```\n\n----------------------------------------\n\nTITLE: Example of LLM response limitations without RAG\nDESCRIPTION: This code snippet shows an example of how a large language model responds to a query about recent events when RAG is disabled. It demonstrates the limitation of LLMs without access to real-time information beyond their training cutoff.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/genai-leveraging-rag/index.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nQuestion: What important events happened in 2024?\nRAG: Disabled\nI'm happy to help! Unfortunately, I'm a large language model, I don't have access to real-time information or events that occurred after my training data cutoff in 2024. Therefore, I cannot provide you with any important events that happened in 2024. My apologize for any inconvenience this may cause. Is there anything else I can help you with?\n```\n\n----------------------------------------\n\nTITLE: Version Information in YAML Front Matter\nDESCRIPTION: YAML front matter defining the document metadata including title, description and TOC settings for the Docker Engine release notes.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/20.10.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Docker Engine 20.10 release notes\nlinkTitle: Engine v20.10\ndescription: Learn about the new features, bug fixes, and breaking changes for Docker Engine\nkeywords: docker, docker engine, ce, whats new, release notes\ntoc_min: 1\ntoc_max: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Invalid Multiple ENTRYPOINT Example\nDESCRIPTION: Example showing incorrect usage of multiple ENTRYPOINT instructions where only the last one takes effect.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/multiple-instructions-disallowed.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM alpine\nENTRYPOINT [\"echo\", \"Hello, Norway!\"]\nENTRYPOINT [\"echo\", \"Hello, Sweden!\"]\n# Only \"Hello, Sweden!\" will be printed\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample Application Repository\nDESCRIPTION: Clone the sample application's repository from GitHub using Git.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/harsh4870/Docker-NLP.git\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Variable-Based Secrets in Docker Compose\nDESCRIPTION: This snippet shows how to create a secret named 'token' from an environment variable. The secret will be registered with the platform as '<project_name>_token' with the value of the OAUTH_TOKEN environment variable.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/secrets.md#2025-04-11_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecrets:\n  token:\n    environment: \"OAUTH_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated Methods for Accessing Docker Objects\nDESCRIPTION: Shows the deprecated methods for listing containers and images. These methods will be removed in a future version and should be replaced with the newer methods above.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/docker.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst containers = await window.ddClient.listContainers();\n\nconst images = await window.ddClient.listImages();\n```\n\n----------------------------------------\n\nTITLE: Example Front Matter for Docker Documentation\nDESCRIPTION: A sample front matter block demonstrating various metadata fields used in Docker documentation pages. It includes required fields like title, description, and keywords, along with optional parameters such as aliases, TOC settings, and sitemap configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/file-conventions.md#2025-04-11_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n---\ndescription: Instructions for installing Docker Engine on Ubuntu\nkeywords: requirements, apt, installation, ubuntu, install, uninstall, upgrade, update\ntitle: Install Docker Engine on Ubuntu\naliases:\n- /ee/docker-ee/ubuntu/\n- /engine/installation/linux/docker-ce/ubuntu/\n- /engine/installation/linux/docker-ee/ubuntu/\n- /engine/installation/linux/ubuntu/\n- /engine/installation/linux/ubuntulinux/\n- /engine/installation/ubuntulinux/\n- /install/linux/docker-ce/ubuntu/\n- /install/linux/docker-ee/ubuntu/\n- /install/linux/ubuntu/\n- /installation/ubuntulinux/\ntoc_max: 4\n---\n```\n\n----------------------------------------\n\nTITLE: Using Go Templates to Customize SSO Navigation Instructions\nDESCRIPTION: This code snippet uses Go template variables to customize navigation instructions for SSO settings based on whether the context is the Admin Console or Docker Hub. It sets product links and navigation paths conditionally.\nSOURCE: https://github.com/docker/docs/blob/main/layouts/shortcodes/admin-sso-management.md#2025-04-11_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ $product_link := \"[Docker Hub](https://hub.docker.com)\" }}\n{{ $sso_navigation := `Navigate to the SSO settings page for your organization. Select **My Hub**, your organization, **Settings**, and then **Security**.` }}\n\n{{ if eq (.Get \"product\") \"admin\" }}\n  {{ $product_link = \"the [Admin Console](https://app.docker.com/admin)\" }}\n  {{ $sso_navigation = \"Select your organization or company from the **Choose profile** page, and then select **SSO and SCIM**.\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Fixing Devmapper UdevWait Call\nDESCRIPTION: Ensures UdevWait is called after calls to setCookie in the Devmapper storage driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/17.06.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Devmapper: ensure UdevWait is called after calls to setCookie [moby/moby#33732](https://github.com/moby/moby/pull/33732)\n```\n\n----------------------------------------\n\nTITLE: Listing All Nodes in a Docker Swarm\nDESCRIPTION: Command to list all nodes in the swarm, displaying their ID, hostname, status, availability, and manager status. This command must be run on a manager node.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/swarm-tutorial/add-nodes.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker node ls\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries in Python\nDESCRIPTION: Import the spaCy library for natural language processing in Python.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/named-entity-recognition.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport spacy\n```\n\n----------------------------------------\n\nTITLE: Secrets Configuration Example\nDESCRIPTION: Demonstration of secrets configuration in Docker Compose using short syntax for granting service access to secrets.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_65\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frontend:\n    image: example/webapp\n    secrets:\n      - server-certificate\nsecrets:\n  server-certificate:\n    file: ./server.cert\n```\n\n----------------------------------------\n\nTITLE: Evaluating Policies for a Specific Platform\nDESCRIPTION: Evaluates policies against a Docker image for a specific platform architecture using the --platform flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_policy.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker scout policy dockerscoutpolicy/customers-api-service:0.0.1 --platform linux/amd64\n```\n\n----------------------------------------\n\nTITLE: Deleting Temporary Data with Docker Scout Cache Prune\nDESCRIPTION: This example demonstrates how to use the 'docker scout cache prune' command to delete temporary data. It prompts for confirmation before executing the deletion.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cache_prune.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout cache prune\n? Are you sure to delete all temporary data? Yes\n    ✓ temporary data deleted\n```\n\n----------------------------------------\n\nTITLE: Invoking debootstrap with HTTP proxy in Docker\nDESCRIPTION: Adds a -p option to invoke debootstrap with an HTTP proxy when building Docker images.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n* Add -p option to invoke debootstrap with http_proxy\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Network Configuration\nDESCRIPTION: Example of network configuration with IPAM options in docker-compose file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nnetworks:\n  mynetwork:\n    ipam:\n      config:\n        - subnet: 172.28.0.0/16\n      options:\n        foo: bar\n```\n\n----------------------------------------\n\nTITLE: Defining Product Link and SSO Navigation Variables in Markdown\nDESCRIPTION: This snippet defines variables for product links and SSO navigation instructions using Markdown templating syntax. It sets different values based on the product type (admin or default).\nSOURCE: https://github.com/docker/docs/blob/main/layouts/shortcodes/admin-sso-management-connections.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{ $product_link := \"[Docker Hub](https://hub.docker.com)\" }}\n{{ $sso_navigation := `Navigate to the SSO settings page for your organization. Select **My Hub**, your organization, **Settings**, and then **Security**.` }}\n\n{{ if eq (.Get \"product\") \"admin\" }}\n  {{ $product_link = \"the [Admin Console](https://app.docker.com/admin)\" }}\n  {{ $sso_navigation = \"Select your organization or company from the Choose profile page, and then select **SSO and SCIM**. Note that when an organization is part of a company, you must select the company and configure SSO for that organization at the company level. Each organization can have its own SSO configuration and domain, but it must be configured at the company level.\" }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Scout Repository Management Commands in Markdown\nDESCRIPTION: This snippet provides a markdown table listing the subcommands for Docker Scout repository management, including their names and descriptions.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                               | Description                    |\n|:-----------------------------------|:-------------------------------|\n| [`disable`](scout_repo_disable.md) | Disable Docker Scout           |\n| [`enable`](scout_repo_enable.md)   | Enable Docker Scout            |\n| [`list`](scout_repo_list.md)       | List Docker Scout repositories |\n```\n\n----------------------------------------\n\nTITLE: Displaying Too Many Requests Error Message in Docker CLI\nDESCRIPTION: This snippet shows the error message displayed when a user has reached the abuse rate limit in Docker Hub. It indicates that the user is sending too many requests in a short period.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/troubleshoot.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nToo Many Requests\n```\n\n----------------------------------------\n\nTITLE: Defining Ruby Documentation Metadata in YAML\nDESCRIPTION: YAML frontmatter configuration defining the title and icon path for Ruby documentation section.\nSOURCE: https://github.com/docker/docs/blob/main/content/languages/ruby/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Ruby\nparams:\n  icon: https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/ruby/ruby-original.svg\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for Docker API\nDESCRIPTION: Example command for configuring Cross-Origin Resource Sharing (CORS) headers when running Docker in daemon mode. This allows cross-origin requests to the Docker Engine API from specified origins.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_108\n\nLANGUAGE: bash\nCODE:\n```\n$ dockerd -H=\"192.168.1.9:2375\" --api-cors-header=\"http://foo.bar\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Parameters in SLSA Provenance\nDESCRIPTION: Example of the 'invocation.parameters' field which documents build inputs like frontend type, build arguments, secrets, and SSH configurations. Some fields are included in min mode, while others are only in max mode.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"invocation\": {\n      \"parameters\": {\n        \"frontend\": \"gateway.v0\",\n        \"args\": {\n          \"build-arg:BUILDKIT_CONTEXT_KEEP_GIT_DIR\": \"1\",\n          \"label:FOO\": \"bar\",\n          \"source\": \"docker/dockerfile-upstream:master\",\n          \"target\": \"release\"\n        },\n        \"secrets\": [\n          {\n            \"id\": \"GIT_AUTH_HEADER\",\n            \"optional\": true\n          },\n          ...\n        ],\n        \"ssh\": [],\n        \"locals\": []\n      },\n      ...\n    },\n```\n\n----------------------------------------\n\nTITLE: Volume Management Features\nDESCRIPTION: Improvements to Docker volume functionality including label support, force removal, and NFS enhancements\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n+ Add support for labels on volumes\\n+ Add support for filtering volumes by label\\n* Add a `--force` flag in volume removal\\n* Enhance volume inspection\\n* Add support for local NFS volumes hostname resolution\n```\n\n----------------------------------------\n\nTITLE: Creating Symlink for Docker Compose on Mac\nDESCRIPTION: Workaround command for creating a symlink to resolve the 'command not found' error when running docker-compose after an update on macOS.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/release-notes.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -sf /Applications/Docker.app/Contents/Resources/cli-plugins/docker-compose /usr/local/bin/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Creating a Systemd Service File for Docker Plugin\nDESCRIPTION: This systemd service unit file configures a Docker plugin as a service. It defines execution order dependencies, ensuring the plugin starts after the network but before Docker, and specifies the executable path.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugin_api.md#2025-04-11_snippet_1\n\nLANGUAGE: systemd\nCODE:\n```\n[Unit]\nDescription=Your plugin\nBefore=docker.service\nAfter=network.target your-plugin.socket\nRequires=your-plugin.socket docker.service\n\n[Service]\nExecStart=/usr/lib/docker/your-plugin\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Resolving Docker Service Start Error in Systemd\nDESCRIPTION: Steps to resolve a Docker service start error caused by outdated systemd unit files or conflicting socket configurations.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nFailed to start docker.service: Unit docker.socket failed to load: No such file or directory.\n```\n\nLANGUAGE: Bash\nCODE:\n```\nno sockets found via socket activation: make sure the service was started by systemd.\n```\n\nLANGUAGE: Bash\nCODE:\n```\nsudo systemctl daemon-reload\n```\n\nLANGUAGE: Bash\nCODE:\n```\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Mapper Storage Driver in Docker daemon.json\nDESCRIPTION: JSON configuration to set Device Mapper as the storage driver in Docker's daemon.json file. This basic configuration enables the devicemapper driver without additional options.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storage-driver\": \"devicemapper\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ubuntu Image Digest Output Example\nDESCRIPTION: Example JSON output showing the digest information for the Ubuntu latest image. This shows how a tag maps to a specific digest, similar to a Git hash.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/services.md#2025-04-11_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n\"RepoDigests\": [\n    \"ubuntu@sha256:35bc48a1ca97c3971611dc4662d08d131869daa692acb281c7e9e052924e38b1\"\n],\n```\n\n----------------------------------------\n\nTITLE: Cache-Only Build Export\nDESCRIPTION: Example of running a build that only creates cache without exporting results.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/exporters/_index.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker buildx build --output type=cacheonly\n```\n\n----------------------------------------\n\nTITLE: Output Example of SecretsUsedInArgOrEnv Rule\nDESCRIPTION: Example of the warning message displayed when the rule detects potentially sensitive data in ARG or ENV commands.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/secrets-used-in-arg-or-env.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPotentially sensitive data should not be used in the ARG or ENV commands\n```\n\n----------------------------------------\n\nTITLE: Redundant Platform Specification in Dockerfile FROM Instruction\nDESCRIPTION: This example demonstrates the incorrect usage of --platform=$TARGETPLATFORM in a Dockerfile FROM instruction. This is redundant because $TARGETPLATFORM is already the default behavior.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/redundant-target-platform.md#2025-04-11_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM --platform=$TARGETPLATFORM alpine AS builder\nRUN apk add --no-cache git\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Docker Desktop CLI Documentation\nDESCRIPTION: YAML frontmatter that defines the configuration for the Docker Desktop enable command documentation page. Specifies the data folder as 'desktop-cli', data file as 'docker_desktop_enable', page title, and layout type.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/enable/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: desktop-cli\ndatafile: docker_desktop_enable\ntitle: docker desktop enable\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling OOM Killer Without Memory Limit in Docker (Dangerous)\nDESCRIPTION: Disables the Out-of-Memory (OOM) killer for a Docker container without setting a memory limit, which can potentially cause the host to run out of memory and crash.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_22\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -it --oom-kill-disable ubuntu:24.04 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Starting Container with USB Device\nDESCRIPTION: Commands to start a new container with the attached USB device and test it using evtest.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/usbip.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm -it --device \"/dev/input/event0\" alpine\n$ apk add evtest\n$ evtest /dev/input/event0\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Date in YAML\nDESCRIPTION: YAML snippet for configuring the release date of a Docker Compose version using a custom Hugo shortcode.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/releases/release-notes.md#2025-04-11_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{{< release-date date=\"2023-03-23\" >}}\n```\n\n----------------------------------------\n\nTITLE: Importing Docker Buildx Cache from Registry\nDESCRIPTION: Example demonstrating how to import previously exported cache from a registry using the --cache-from flag with registry type.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/cache/backends/inline.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --push -t <registry>/<image> \\\n  --cache-from type=registry,ref=<registry>/<image> .\n```\n\n----------------------------------------\n\nTITLE: Backing Up Existing Docker Data\nDESCRIPTION: Commands to backup existing Docker data before configuring the new storage driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo su -\n# mkdir /var/lib/docker.bk\n# mv /var/lib/docker/* /var/lib/docker.bk\n# exit\n```\n\n----------------------------------------\n\nTITLE: Setting BUILDX_BAKE_GIT_AUTH_TOKEN for Git Authentication\nDESCRIPTION: Sets the HTTP authentication token for accessing private Git repositories when using remote Bake definitions. This enables pre-flight authentication for loading remote Bake files.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/building/variables.md#2025-04-11_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nexport BUILDX_BAKE_GIT_AUTH_TOKEN=$(cat git-token.txt)\n```\n\n----------------------------------------\n\nTITLE: Accessing Host Service from Container\nDESCRIPTION: Command to access a service running on the host (in this case a web server on port 80) from within a container that has host networking enabled.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/drivers/host.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ nc localhost 80\n```\n\n----------------------------------------\n\nTITLE: Updating Todo App Text Using Diff\nDESCRIPTION: A diff showing how to update the empty text message in the todo application from 'No items yet! Add one above!' to 'You have no todo items yet! Add one above!' in the src/static/js/app.js file at line 56.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/03_updating_app.md#2025-04-11_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- <p className=\"text-center\">No items yet! Add one above!</p>\n+ <p className=\"text-center\">You have no todo items yet! Add one above!</p>\n```\n\n----------------------------------------\n\nTITLE: Listing Images in a Specific Docker Scout Stream\nDESCRIPTION: Shows how to retrieve all images recorded in a specific deployment stream. The command takes the stream name as an argument and outputs the full image references including digest.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_stream.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ %[1]s %[2]s prod-cluster-123\nnamespace/repo:tag@sha256:9a4df4fadc9bbd44c345e473e0688c2066a6583d4741679494ba9228cfd93e1b\nnamespace/other-repo:tag@sha256:0001d6ce124855b0a158569c584162097fe0ca8d72519067c2c8e3ce407c580f\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Kubernetes Driver for Docker Buildx\nDESCRIPTION: Command to create and bootstrap a Docker Buildx builder using the Kubernetes driver, specifying the namespace where Buildx resources will be created.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/builders/drivers/kubernetes.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx create \\\n  --bootstrap \\\n  --name=kube \\\n  --driver=kubernetes \\\n  --driver-opt=namespace=buildkit\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Docker Buildx Documentation\nDESCRIPTION: YAML frontmatter configuration for a documentation page about the Docker Buildx inspect command. Specifies the data folder, file name, title, layout, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/buildx/inspect.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: buildx\ndatafile: docker_buildx_inspect\ntitle: docker buildx inspect\nlayout: cli\naliases:\n- /engine/reference/commandline/buildx_inspect/\n```\n\n----------------------------------------\n\nTITLE: Creating Nginx Service with Secrets and Config\nDESCRIPTION: Docker service create command that runs Nginx with access to TLS secrets and configuration. Sets up appropriate file permissions and publishes HTTPS port.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_20\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n     --name nginx \\\n     --secret site.key \\\n     --secret site.crt \\\n     --config source=site.conf,target=/etc/nginx/conf.d/site.conf,mode=0440 \\\n     --publish published=3000,target=443 \\\n     nginx:latest \\\n     sh -c \"exec nginx -g 'daemon off;'\"\n```\n\n----------------------------------------\n\nTITLE: Cloning RAG Application Repository\nDESCRIPTION: Command to clone the sample RAG application repository called 'winy' from GitHub.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rag-ollama/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/mfranzon/winy.git\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata in YAML for Docker Guide\nDESCRIPTION: Example of the required YAML front matter metadata that should be included at the beginning of each Docker guide document. This metadata helps users discover and filter guides based on their interests and needs.\nSOURCE: https://github.com/docker/docs/blob/main/content/contribute/guides.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Deploy a machine learning model with Docker\nlinkTitle: Docker for ML deployment\ndescription: Learn how to containerize and deploy a machine learning model using Docker.\nsummary: |\n  This guide walks you through the steps to containerize a machine learning\n  model and deploy it using Docker, enabling scalable and portable AI\n  solutions.\ntags: [machine-learning, deployment]\nlanguages: [python]\nparams:\n  time: 30 minutes\n---\n```\n\n----------------------------------------\n\nTITLE: Monitoring LVM Events with journalctl\nDESCRIPTION: Command to view LVM event logs for troubleshooting thin pool issues using journalctl.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo journalctl -fu dm-event.service\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Context Documentation\nDESCRIPTION: YAML configuration block that defines metadata for the Docker context CLI documentation page, including the data folder location, file name, layout type, and URL aliases.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/context/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_context\ntitle: docker context\nlayout: cli\naliases:\n- /engine/reference/commandline/context/\n---\n```\n\n----------------------------------------\n\nTITLE: Using Bind Mount Options with --volume Flag\nDESCRIPTION: Example of using multiple options with the --volume (-v) flag, including setting the current directory as source, /project as destination, with read-only access and shared recursively binding.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/bind-mounts.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -v .:/project:ro,rshared\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Daemon on Linux\nDESCRIPTION: Commands to start the Docker daemon and verify installation by running a test container.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/binaries.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo dockerd &\n$ sudo docker run hello-world\n```\n\n----------------------------------------\n\nTITLE: Cloning the Sample Bun Application Repository\nDESCRIPTION: Command to clone the sample Bun application repository from GitHub and change to the project directory.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/bun/containerize.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ git clone https://github.com/dockersamples/bun-docker.git && cd bun-docker\n```\n\n----------------------------------------\n\nTITLE: Running Docker Init for Rust Application\nDESCRIPTION: Interactive session with docker init to automatically create Docker configuration files with defaults for a Rust project.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker init\nWelcome to the Docker Init CLI!\n\nThis utility will walk you through creating the following files with sensible defaults for your project:\n  - .dockerignore\n  - Dockerfile\n  - compose.yaml\n  - README.Docker.md\n\nLet's get started!\n\n? What application platform does your project use? Rust\n? What version of Rust do you want to use? 1.70.0\n? What port does your server listen on? 8000\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies Configuration\nDESCRIPTION: Requirements file specifying Flask and Redis as Python package dependencies\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/stack-deploy.md#2025-04-11_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nflask\nredis\n```\n\n----------------------------------------\n\nTITLE: Partial Docker Compose Configuration for Rust Application\nDESCRIPTION: Partially updated Docker Compose configuration showing highlighted sections that need modification for the Rust application with PostgreSQL.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/rust/develop.md#2025-04-11_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# Comments are provided throughout this file to help you get started.\n# If you need more help, visit the Docker compose reference guide at\n# https://docs.docker.com/reference/compose-file/\n\n# Here the instructions define your application as a service called \"server\".\n# This service is built from the Dockerfile in the current directory.\n# You can add other services your application may depend on here, such as a\n# database or a cache. For examples, see the Awesome Compose repository:\n```\n\n----------------------------------------\n\nTITLE: Creating a linked container in Docker\nDESCRIPTION: Creates a new 'web' container that is linked to the 'db' container using the --link flag, establishing a secure communication channel between the containers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -P --name web --link db:db training/webapp python app.py\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Watch\nDESCRIPTION: Command to initiate Docker Compose Watch for development\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/go-prometheus-monitoring/develop.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose watch\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Volume\nDESCRIPTION: Creates a named volume for persisting todo application data.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/05_persisting_data.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker volume create todo-db\n```\n\n----------------------------------------\n\nTITLE: Hardware Acceleration Configuration\nDESCRIPTION: JSON configuration to disable hardware acceleration in Docker Desktop when experiencing UI display issues.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/troubleshoot/topics.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"disableHardwareAcceleration\": true\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres Container\nDESCRIPTION: Command to connect to Postgres database using psql interactive shell through Docker exec.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/pre-seeding.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker exec -it postgres psql -h localhost -U postgres\n```\n\n----------------------------------------\n\nTITLE: Adding an Additional Tag to an Existing Docker Image\nDESCRIPTION: Command to add another tag to an existing Docker image. This is useful for giving different names or version tags to the same image content.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/building-images/build-tag-and-publish-an-image.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndocker image tag my-username/my-image another-username/another-image:v1\n```\n\n----------------------------------------\n\nTITLE: Viewing Task States in Docker Swarm\nDESCRIPTION: This command shows how to use the 'docker service ps' command to view the current state of tasks for a service named 'webserver'. The output displays task IDs, names, images, nodes, desired states, current states with timestamps, and any errors.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/how-swarm-mode-works/swarm-task-states.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker service ps webserver\nID             NAME              IMAGE    NODE        DESIRED STATE  CURRENT STATE            ERROR                              PORTS\nowsz0yp6z375   webserver.1       nginx    UbuntuVM    Running        Running 44 seconds ago\nj91iahr8s74p    \\_ webserver.1   nginx    UbuntuVM    Shutdown       Failed 50 seconds ago    \"No such container: webserver.…\"\n7dyaszg13mw2    \\_ webserver.1   nginx    UbuntuVM    Shutdown       Failed 5 hours ago       \"No such container: webserver.…\"\n```\n\n----------------------------------------\n\nTITLE: Analyzing Docker Save Archive\nDESCRIPTION: Shows how to analyze vulnerabilities from a docker save tarball archive\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker save alpine > alpine.tar\n\n$ docker scout cves archive://alpine.tar\nAnalyzing archive alpine.tar\n✓ Archive read\n✓ SBOM of image already cached, 18 packages indexed\n✓ No vulnerable package detected\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker AI in Settings JSON\nDESCRIPTION: JSON configuration to enable Docker AI for an organization using Settings Management. This snippet shows how to set the 'enableDockerAI' property to false and lock it.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/features/gordon/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enableDockerAI\": {\n    \"value\": false,\n    \"locked\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images on Local Machine\nDESCRIPTION: Command to list all Docker images present on the local machine using the docker image ls command, showing repositories, tags, image IDs, creation time and size.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/golang/build-images.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker image ls\n\nREPOSITORY                       TAG       IMAGE ID       CREATED         SIZE\ndocker-gs-ping                   latest    7f153fbcc0a8   2 minutes ago   1.11GB\n...\n```\n\n----------------------------------------\n\nTITLE: Reading Compose Configuration from stdin\nDESCRIPTION: Example showing how to provide Compose configuration via stdin using the dash (-) as the filename parameter.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/how-tos/multiple-compose-files/merge.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose -f - <<EOF\n  webapp:\n    image: examples/web\n    ports:\n     - \"8000:8000\"\n    volumes:\n     - \"/data\"\n    environment:\n     - DEBUG=1\n  EOF\n```\n\n----------------------------------------\n\nTITLE: Retrieving Container Logs with Python Journal API\nDESCRIPTION: Python script example using the systemd.journal module to programmatically retrieve and format container logs filtered by container name.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/drivers/journald.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport systemd.journal\n\nreader = systemd.journal.Reader()\nreader.add_match('CONTAINER_NAME=web')\n\nfor msg in reader:\n    print '{CONTAINER_ID_FULL}: {MESSAGE}'.format(**msg)\n```\n\n----------------------------------------\n\nTITLE: Creating a User-Defined Bridge Network in Docker\nDESCRIPTION: Creates a new bridge network named 'alpine-net' using the Docker CLI.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/tutorials/standalone.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker network create --driver bridge alpine-net\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Docker Stack Documentation\nDESCRIPTION: YAML front matter configuration block that defines metadata for the Docker stack command documentation page. Specifies the data folder, file name, title, aliases, and layout settings.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/stack/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_stack\ntitle: docker stack\naliases:\n- /edge/engine/reference/commandline/stack/\n- /engine/reference/commandline/stack/\nlayout: cli\n```\n\n----------------------------------------\n\nTITLE: Using Inline Dockerfile in Docker Bake\nDESCRIPTION: Shows how to specify an inline Dockerfile using the dockerfile-inline attribute. This allows embedding the Dockerfile content directly in the Bake file.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#2025-04-11_snippet_19\n\nLANGUAGE: hcl\nCODE:\n```\ntarget \"default\" {\n  dockerfile-inline = \"FROM alpine\\nENTRYPOINT [\\\"echo\\\", \\\"hello\\\"]\"\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Docker Pull Documentation\nDESCRIPTION: YAML frontmatter configuration that specifies the title, build settings, and sidebar navigation for the Docker pull command documentation. The build render is set to never and includes a redirect path to the reference documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/pull.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: docker pull\nbuild:\n  render: never\nsidebar:\n  goto: /reference/cli/docker/image/pull/\n---\n```\n\n----------------------------------------\n\nTITLE: Manually Reclaiming Disk Space in Docker Desktop for Linux\nDESCRIPTION: Command to trigger space reclamation in Docker Desktop at any point by running a privileged container. This is useful when files are deleted inside running containers but space isn't freed automatically.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/troubleshoot-and-support/faqs/linuxfaqs.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --privileged --pid=host docker/desktop-reclaim-space\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Docker Builder Documentation\nDESCRIPTION: YAML frontmatter block that defines metadata for the Docker builder CLI documentation page. Specifies the data folder structure, filename, page title, layout template, and URL aliases for the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/builder/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatafolder: engine-cli\ndatafile: docker_builder\ntitle: docker builder\nlayout: cli\naliases:\n- /engine/reference/commandline/builder/\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Docker Engine Version on Debian\nDESCRIPTION: Commands to install a specific version of Docker Engine by setting the desired version string. This is important for environments that require version pinning.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/debian.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ VERSION_STRING=5:{{% param \"docker_ce_version\" %}}-1~debian.12~bookworm\n$ sudo apt-get install docker-ce=$VERSION_STRING docker-ce-cli=$VERSION_STRING containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Basic VFS Storage Driver Configuration in daemon.json\nDESCRIPTION: JSON configuration for setting VFS as the storage driver in Docker's daemon.json file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/vfs-driver.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storage-driver\": \"vfs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Change directory to the newly cloned project folder.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/introduction/build-and-push-first-image.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd getting-started-todo-app\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Build Cloud Command\nDESCRIPTION: Basic command to build using Docker Build Cloud by specifying the cloud builder name.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build-cloud/usage.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker buildx build --builder cloud-<ORG>-<BUILDER_NAME> --tag <IMAGE> .\n```\n\n----------------------------------------\n\nTITLE: Registering a containerd shim without PATH installation\nDESCRIPTION: JSON configuration for the Docker daemon to register a containerd shim that is not installed on PATH, specifying the path to the shim binary.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/daemon/alternative-runtimes.md#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"runtimes\": {\n    \"foo\": {\n      \"runtimeType\": \"/path/to/containerd-shim-foobar-v1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Override for MTU Configuration\nDESCRIPTION: Systemd service override configuration to specify custom MTU value for improving network throughput in rootless mode.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/rootless.md#2025-04-11_snippet_19\n\nLANGUAGE: systemd\nCODE:\n```\n[Service]\nEnvironment=\"DOCKERD_ROOTLESS_ROOTLESSKIT_MTU=<INTEGER>\"\n```\n\n----------------------------------------\n\nTITLE: Running Node.js App Container with MySQL Connection (Git Bash)\nDESCRIPTION: This Git Bash command runs a Node.js application container, setting up MySQL connection environment variables, network, and volume mappings. It uses the node:18-alpine image and runs yarn install and dev commands.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/07_multi_container.md#2025-04-11_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -dp 127.0.0.1:3000:3000 \\\n  -w //app -v \"/$(pwd):/app\" \\\n  --network todo-app \\\n  -e MYSQL_HOST=mysql \\\n  -e MYSQL_USER=root \\\n  -e MYSQL_PASSWORD=secret \\\n  -e MYSQL_DB=todos \\\n  node:18-alpine \\\n  sh -c \"yarn install && yarn run dev\"\n```\n\n----------------------------------------\n\nTITLE: Running Updated Docker Container\nDESCRIPTION: Command to run a new Docker container in detached mode, mapping port 3000 from the host (127.0.0.1) to port 3000 in the container, using the 'getting-started' image.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/workshop/03_updating_app.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -dp 127.0.0.1:3000:3000 getting-started\n```\n\n----------------------------------------\n\nTITLE: Configuring userns-remap in daemon.json\nDESCRIPTION: JSON configuration for enabling user namespace remapping in Docker's daemon.json file. This setting tells Docker to remap container user and group IDs to the specified user's subordinate ID range.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/userns-remap.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"userns-remap\": \"testuser\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Container Logs Without Dual Logging\nDESCRIPTION: Example showing error when attempting to read logs without dual logging enabled\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/dual-logging.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker logs 7d6ac83a89a0\nError response from daemon: configured logging driver does not support reading\n```\n\n----------------------------------------\n\nTITLE: Examining Hard-Linked Files Across Docker Image Layers\nDESCRIPTION: This snippet shows how to inspect inode information for files across different image layers using ls -i. The identical inode numbers demonstrate how Docker uses hard links to efficiently share data between layers.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/overlayfs-driver.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ ls -i /var/lib/docker/overlay2/38f3ed2eac129654acef11c32670b534670c3a06e483fce313d72e3e0a15baa8/root/bin/ls\n\n19793696 /var/lib/docker/overlay2/38f3ed2eac129654acef11c32670b534670c3a06e483fce313d72e3e0a15baa8/root/bin/ls\n\n$ ls -i /var/lib/docker/overlay2/55f1e14c361b90570df46371b20ce6d480c434981cbda5fd68c6ff61aa0a5358/root/bin/ls\n\n19793696 /var/lib/docker/overlay2/55f1e14c361b90570df46371b20ce6d480c434981cbda5fd68c6ff61aa0a5358/root/bin/ls\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Scout for Single Repository\nDESCRIPTION: Demonstrates how to enable Docker Scout for a specific repository using the basic command syntax.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_enable.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout repo enable my/repository\n```\n\n----------------------------------------\n\nTITLE: Creating Logical Volumes for Thin Pool\nDESCRIPTION: Commands to create thinpool and thinpoolmeta logical volumes on the docker volume group to be used by the devicemapper storage driver.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/device-mapper-driver.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo lvcreate --wipesignatures y -n thinpool docker -l 95%VG\n\nLogical volume \"thinpool\" created.\n\n$ sudo lvcreate --wipesignatures y -n thinpoolmeta docker -l 1%VG\n\nLogical volume \"thinpoolmeta\" created.\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Docker Compose Documentation\nDESCRIPTION: This YAML front matter defines metadata for the 'docker compose down' command documentation page. It specifies the data folder, file name, title, aliases for URL routing, and layout type.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/compose/down.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: compose-cli\ndatafile: docker_compose_down\ntitle: docker compose down\naliases:\n- /compose/reference/down/\n- /engine/reference/commandline/compose_down/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Using Recursive Read-Only Mounts with Docker Run Command\nDESCRIPTION: Example of using the bind-recursive option with the --mount flag to specify that submounts should be writable even when the parent mount is read-only. This new feature in Docker Engine v25.0.0 allows controlling recursive mount permissions.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/25.0.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --mount type=bind,src=SRC,dst=DST,readonly,bind-recursive=writable IMAGE\n```\n\n----------------------------------------\n\nTITLE: Displaying Only Base Image Refresh Recommendations with Docker Scout\nDESCRIPTION: Example demonstrating how to use the --only-refresh flag to display only base image refresh recommendations for a golang image.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_recommendations.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout recommendations --only-refresh golang:1.19.4\n```\n\n----------------------------------------\n\nTITLE: Running Rails Application with Docker Compose in Detached Mode\nDESCRIPTION: A console command to build and run a Ruby on Rails application in detached mode using Docker Compose. This allows the application to run in the background, detached from the terminal.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/ruby/containerize.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build -d\n```\n\n----------------------------------------\n\nTITLE: Defining Dockerfile Content Inline\nDESCRIPTION: Example of embedding Dockerfile content directly in the Compose file using YAML multi-line string syntax.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/build.md#2025-04-11_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  context: .\n  dockerfile_inline: |\n    FROM baseimage\n    RUN some command\n```\n\n----------------------------------------\n\nTITLE: Inserting Records into PostgreSQL Database\nDESCRIPTION: This SQL command inserts a sample record into the Students table of the PostgreSQL database running in a Docker container.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/dotnet/develop.md#2025-04-11_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO \"Students\" (\"ID\", \"LastName\", \"FirstMidName\", \"EnrollmentDate\") VALUES (DEFAULT, 'Whale', 'Moby', '2013-03-20');\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Docker Version on SLES\nDESCRIPTION: Command to install a specific version of Docker Engine by specifying the complete package name with version string.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/sles.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo zypper install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Service\nDESCRIPTION: Command to start the Docker daemon using systemctl\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/storage/drivers/overlayfs-driver.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo systemctl start docker\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache in Docker Daemon Configuration\nDESCRIPTION: Example showing how to disable logging cache using daemon configuration file\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/dual-logging.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ cat /etc/docker/daemon.json\n{\n  \"log-driver\": \"splunk\",\n  \"log-opts\": {\n    \"cache-disabled\": \"true\",\n    ... (options for \"splunk\" logging driver)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VolumeDriver.Path v1 Response Format\nDESCRIPTION: JSON v1 response format for the Path endpoint in the volume plugin protocol. The response includes the mountpoint on the host and an error field.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Mountpoint\": \"/path/to/directory/on/host\",\n    \"Err\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hugo Website Multi-stage Build with SBOM Scanning\nDESCRIPTION: Dockerfile example demonstrating SBOM scanning in a multi-stage build for a Hugo static website, including build-time dependencies.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/build/metadata/attestations/sbom.md#2025-04-11_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1\nFROM alpine as hugo\nARG BUILDKIT_SBOM_SCAN_STAGE=true\nWORKDIR /src\nCOPY <<config.yml ./\ntitle: My Hugo website\nconfig.yml\nRUN apk add --upgrade hugo && hugo\n\nFROM scratch\nCOPY --from=hugo /src/public /\n```\n\n----------------------------------------\n\nTITLE: Configuring HAProxy for Docker Swarm Load Balancing\nDESCRIPTION: Example HAProxy configuration that balances requests to a Docker Swarm service published on port 8080 across multiple nodes, demonstrating external load balancer integration with the routing mesh.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/ingress.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nglobal\n        log /dev/log    local0\n        log /dev/log    local1 notice\n...snip...\n\n# Configure HAProxy to listen on port 80\nfrontend http_front\n   bind *:80\n   stats uri /haproxy?stats\n   default_backend http_back\n\n# Configure HAProxy to route requests to swarm nodes on port 8080\nbackend http_back\n   balance roundrobin\n   server node1 192.168.99.100:8080 check\n   server node2 192.168.99.101:8080 check\n   server node3 192.168.99.102:8080 check\n```\n\n----------------------------------------\n\nTITLE: Providing Source Code Information in HTML Comment\nDESCRIPTION: This HTML comment provides information about the source of the documentation and instructions for suggesting changes to the content.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/volume/rm.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis page is automatically generated from Docker's source code. If you want to\nsuggest a change to the text that appears here, open a ticket or pull request\nin the source repository on GitHub:\n\nhttps://github.com/docker/cli\n-->\n```\n\n----------------------------------------\n\nTITLE: Switching Docker Engine in Docker Desktop CLI\nDESCRIPTION: Command syntax for using the 'docker desktop engine use' command to switch between available Docker engines in Docker Desktop. The command requires specifying an engine name as an argument.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/engine/use.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker desktop engine use [OPTIONS] ENGINE\n```\n\n----------------------------------------\n\nTITLE: Starting Container for Log Testing\nDESCRIPTION: Command to start a test container for logging demonstration\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/dual-logging.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d busybox --name testlog top\n```\n\n----------------------------------------\n\nTITLE: Running R Application with Docker Compose\nDESCRIPTION: Command to build and start the R application and PostgreSQL database using Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/guides/r/develop.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Updating /etc/hosts After Restarting a Linked Docker Container\nDESCRIPTION: This snippet shows how restarting a linked container automatically updates the /etc/hosts file in containers linked to it. It demonstrates the dynamic nature of container linking in Docker.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_18\n\nLANGUAGE: console\nCODE:\n```\n$ docker restart db\ndb\n\n$ docker run -t -i --rm --link db:db training/webapp /bin/bash\n\nroot@aed84ee21bde:/opt/webapp# cat /etc/hosts\n172.17.0.7  aed84ee21bde\n<...>\n172.17.0.9  db\n```\n\n----------------------------------------\n\nTITLE: Listing Available Docker Engine Versions\nDESCRIPTION: This command lists all available versions of Docker Engine in the repository, allowing you to select a specific version for installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/install/rhel.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ dnf list docker-ce --showduplicates | sort -r\n\ndocker-ce.x86_64    3:{{% param \"docker_ce_version\" %}}-1.el9    docker-ce-stable\ndocker-ce.x86_64    3:{{% param \"docker_ce_version_prev\" %}}-1.el9    docker-ce-stable\n<...>\n```\n\n----------------------------------------\n\nTITLE: Adding Docker CLI Tools to User Path on macOS\nDESCRIPTION: Command to add Docker CLI tools installation directory to the user's PATH environment variable when using user-based installation method.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/settings-and-maintenance/settings.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export PATH=$PATH:~/.docker/bin\n```\n\n----------------------------------------\n\nTITLE: Stopping a Docker Container\nDESCRIPTION: Command to stop a running Docker container by specifying its container ID. This gracefully shuts down the container.\nSOURCE: https://github.com/docker/docs/blob/main/content/get-started/docker-concepts/the-basics/what-is-a-container.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker stop <the-container-id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Hosts with IPv6 Addresses\nDESCRIPTION: Example showing how to specify IPv6 addresses in square brackets when configuring extra hosts in Docker Compose.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/compose-file/services.md#2025-04-11_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nextra_hosts:\n  - \"myhostv6=[::1]\"\n```\n\n----------------------------------------\n\nTITLE: Verifying registry.json permissions on Windows\nDESCRIPTION: This command displays the access control list (ACL) for the registry.json file on Windows to verify that only administrators have write permissions to the file.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nPS C:\\ProgramData\\DockerDesktop> Get-Acl .\\registry.json\n\n\n    Directory: C:\\ProgramData\\DockerDesktop\n\n\nPath          Owner                  Access\n----          -----                  ------\nregistry.json BUILTIN\\Administrators NT AUTHORITY\\SYSTEM Allow  FullControl...\n```\n\n----------------------------------------\n\nTITLE: Listing Config File Properties in Container\nDESCRIPTION: Executes a command in the Redis container to list the properties of the mounted config file, showing permissions and ownership.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/swarm/configs.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker container exec $(docker ps --filter name=redis -q) ls -l /my-config\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Builder Prune Documentation\nDESCRIPTION: YAML frontmatter that defines metadata for the Docker builder prune command documentation page. It specifies the datafolder, datafile, title, layout, and URL aliases for the documentation.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/builder/prune.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_builder_prune\ntitle: docker builder prune\nlayout: cli\naliases:\n- /engine/reference/commandline/builder_prune/\n---\n```\n\n----------------------------------------\n\nTITLE: Submitting Feedback via Docker CLI\nDESCRIPTION: This command allows users to submit feedback directly from the command line if Docker Compose was obtained through Docker Desktop.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/compose/support-and-feedback/feedback.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker feedback\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Desktop with Sign-in Enforcement using PowerShell\nDESCRIPTION: PowerShell command to install Docker Desktop with automatic sign-in enforcement by creating a registry.json file during installation. This approach avoids manual file creation after installation.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/security/for-admins/enforce-sign-in/methods.md#2025-04-11_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nPS> Start-Process '.\\Docker Desktop Installer.exe' -Wait 'install --allowed-org=myorg'\n```\n\n----------------------------------------\n\nTITLE: Testing AppArmor Restrictions in the Nginx Container\nDESCRIPTION: A series of commands to test the AppArmor profile restrictions, showing how specific operations are denied according to the profile rules.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/security/apparmor.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nroot@6da5a2a930b9:~# ping 8.8.8.8\nping: Lacking privilege for raw socket.\n\nroot@6da5a2a930b9:/# top\nbash: /usr/bin/top: Permission denied\n\nroot@6da5a2a930b9:~# touch ~/thing\ntouch: cannot touch 'thing': Permission denied\n\nroot@6da5a2a930b9:/# sh\nbash: /bin/sh: Permission denied\n\nroot@6da5a2a930b9:/# dash\nbash: /bin/dash: Permission denied\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Tag with Fluentd Driver\nDESCRIPTION: Example of running a Docker container with the Fluentd logging driver using a custom tag. Shows how to specify the Fluentd address and set a custom tag value 'mailer'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/logging/log_tags.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --log-driver=fluentd --log-opt fluentd-address=myhost.local:24224 --log-opt tag=\"mailer\"\n```\n\n----------------------------------------\n\nTITLE: Deprecated Host Command Execution\nDESCRIPTION: Shows deprecated methods for executing and streaming command output on the host system.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/dev/api/backend.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.ddClient.execHostCmd(`cliShippedOnHost xxx`).then((cmdResult: any) => {\n  console.log(cmdResult);\n});\n\nwindow.ddClient.spawnHostCmd(\n  `cliShippedOnHost`,\n  [`arg1`, `arg2`],\n  (data: any, err: any) => {\n    console.log(data.stdout, data.stderr);\n    // Once the command exits we get the status code\n    if (data.code) {\n      console.log(data.code);\n    }\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Hugo Template Shortcode for Summary Bar\nDESCRIPTION: Hugo template shortcode that renders a summary bar component with the feature name parameter set to 'Automated builds'.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/repos/manage/builds/_index.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< summary-bar feature_name=\"Automated builds\" >}}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Docker Plugin Documentation\nDESCRIPTION: This YAML snippet defines metadata for the Docker plugin documentation page. It specifies the data folder, file name, title, aliases for the page, and the layout to be used.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/plugin/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: engine-cli\ndatafile: docker_plugin\ntitle: docker plugin\naliases:\n- /edge/engine/reference/commandline/plugin/\n- /engine/reference/commandline/plugin/\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Remove Docker Plugin Request/Response\nDESCRIPTION: DELETE endpoint to remove an installed Docker plugin. Returns 200 OK on successful removal.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#2025-04-11_snippet_87\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /v1.24/plugins/tiborvass/no-remove:latest HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Listing Removed API Endpoints for Advanced Image Management\nDESCRIPTION: Lists the API endpoints that were removed when the Advanced Image Management feature was retired on December 11, 2023, as referenced in docker/roadmap#534.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/docker-hub/release-notes.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/namespaces/{namespace}/repositories/{repository}/images\n/namespaces/{namespace}/repositories/{repository}/images/{digest}/tags\n/namespaces/{namespace}/repositories/{repository}/images-summary\n/namespaces/{namespace}/delete-images\n```\n\n----------------------------------------\n\nTITLE: Deprecated Go API Changes\nDESCRIPTION: List of deprecated API methods and their replacements in the Go client API, including removal of SetCustomHTTPHeaders, CustomHTTPHeaders, and WithDialer methods.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/23.0.md#2025-04-11_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nSetCustomHTTPHeaders() // Removed\nCustomHTTPHeaders()   // Removed\nWithDialer()         // Removed - Use WithDialContext() instead\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Attach Command Options Table in Markdown\nDESCRIPTION: A markdown table listing the options available for the 'docker compose attach' command. It includes the option names, types, default values, and descriptions for each flag.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_attach.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name            | Type     | Default | Description                                               |\n|:----------------|:---------|:--------|:----------------------------------------------------------|\n| `--detach-keys` | `string` |         | Override the key sequence for detaching from a container. |\n| `--dry-run`     | `bool`   |         | Execute command in dry run mode                           |\n| `--index`       | `int`    | `0`     | index of the container if service has multiple replicas.  |\n| `--no-stdin`    | `bool`   |         | Do not attach STDIN                                       |\n| `--sig-proxy`   | `bool`   | `true`  | Proxy all received signals to the process                 |\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Scout Demo Directory\nDESCRIPTION: Command to change the current directory to the cloned Scout demo project.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/quickstart.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd scout-demo-service\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Docker Desktop Engine CLI Documentation\nDESCRIPTION: YAML frontmatter configuration that specifies the documentation structure for the 'docker desktop engine ls' CLI command page\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/cli/docker/desktop/engine/ls.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndatafolder: desktop-cli\ndatafile: docker_desktop_engine_ls\ntitle: docker desktop engine ls\nlayout: cli\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Notes Build Settings in YAML\nDESCRIPTION: YAML frontmatter configuration that sets build parameters and metadata for Docker release notes documentation. Specifies that the page should never be rendered automatically and sets the page title and weight.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/scout/release-notes/_index.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  render: never\ntitle: Release notes\nweight: 999\n```\n\n----------------------------------------\n\nTITLE: Docker IPv6 Daemon Error Message\nDESCRIPTION: Error message displayed when starting Docker daemon with --ipv6 flag without specifying --fixed-cidr-v6 option.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nError starting daemon: Error initializing network controller: Error creating\n                       default \"bridge\" network: failed to parse pool request\n                       for address space \"LocalDefault\" pool \" subpool \":\n                       could not find an available, non-overlapping IPv6 address\n                       pool among the defaults to assign to the network\n```\n\n----------------------------------------\n\nTITLE: Valid ARG Usage in FROM Instruction\nDESCRIPTION: Demonstrates proper declaration and usage of build arguments in FROM instructions using Alpine as an example.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-arg-in-from.md#2025-04-11_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG ALPINE_VERSION=3.20\n\nFROM alpine:${ALPINE_VERSION}\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command Syntax\nDESCRIPTION: Basic syntax for docker run command showing options, image specification, and command arguments.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#2025-04-11_snippet_38\n\nLANGUAGE: console\nCODE:\n```\n$ docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]\n```\n\n----------------------------------------\n\nTITLE: Mapping container port to dynamic port on localhost in Docker\nDESCRIPTION: Runs a container with port 5000 mapped to a random port on the localhost interface only, combining dynamic port allocation with interface restriction.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/network/links.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 127.0.0.1::5000 training/webapp python app.py\n```\n\n----------------------------------------\n\nTITLE: Changing working directory in Docker init process\nDESCRIPTION: Checks the return value of syscall.Chdir when changing the working directory inside the Docker init process.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/engine/release-notes/prior-releases.md#2025-04-11_snippet_25\n\nLANGUAGE: go\nCODE:\n```\n* Check return value of syscall.Chdir when changing working directory inside dockerinit\n```\n\n----------------------------------------\n\nTITLE: Host Binaries Configuration for Cross-Platform Support\nDESCRIPTION: Configuration for the host section that defines platform-specific binaries to be copied from the extension image to the host system. It includes paths for Darwin (macOS), Windows, and Linux.\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/extensions/extensions-sdk/architecture/metadata.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  \"host\": {\n    \"binaries\": [\n      {\n        \"darwin\": [\n          {\n            \"path\": \"/darwin/myBinary\"\n          },\n        ],\n        \"windows\": [\n          {\n            \"path\": \"/windows/myBinary.exe\"\n          },\n        ],\n        \"linux\": [\n          {\n            \"path\": \"/linux/myBinary\"\n          },\n        ]\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Comparing Docker Scout Environments\nDESCRIPTION: Example showing how to compare Docker images with a production environment using the docker scout compare command.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_environment.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker scout compare --to-env production\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Containers - Multiple Implementations\nDESCRIPTION: Demonstrates how to list running Docker containers using different SDKs. Similar to the 'docker ps' command, retrieving container IDs and basic information.\nSOURCE: https://github.com/docker/docs/blob/main/content/reference/api/engine/sdk/examples.md#2025-04-11_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\tcontainertypes \"github.com/docker/docker/api/types/container\"\n\t\"github.com/docker/docker/client\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\tcli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer cli.Close()\n\n\tcontainers, err := cli.ContainerList(ctx, containertypes.ListOptions{})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, container := range containers {\n\t\tfmt.Println(container.ID)\n\t}\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nimport docker\nclient = docker.from_env()\nfor container in client.containers.list():\n  print(container.id)\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl --unix-socket /var/run/docker.sock http://localhost/v{{% param \"latest_engine_api_version\" %}}/containers/json\n```\n\n----------------------------------------\n\nTITLE: Windows Command Prompt Docker Desktop Uninstall Command\nDESCRIPTION: Command Prompt instruction to uninstall Docker Desktop using the installer\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/uninstall.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ start /w \"\" \"Docker Desktop Installer.exe\" uninstall\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Wait Command Definition in Markdown\nDESCRIPTION: Markdown documentation that describes the 'docker compose wait' command, which blocks until containers of all or specified services stop running. It includes a table of available options including '--down-project' and '--dry-run'.\nSOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_wait.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# docker compose wait\n\n<!---MARKER_GEN_START-->\nBlock until containers of all (or specified) services stop.\n\n### Options\n\n| Name             | Type   | Default | Description                                  |\n|:-----------------|:-------|:--------|:---------------------------------------------|\n| `--down-project` | `bool` |         | Drops project when the first container stops |\n| `--dry-run`      | `bool` |         | Execute command in dry run mode              |\n\n\n<!---MARKER_GEN_END-->\n```\n\n----------------------------------------\n\nTITLE: Debian Docker Desktop Removal Commands\nDESCRIPTION: Commands to uninstall Docker Desktop and clean up residual files on Debian\nSOURCE: https://github.com/docker/docs/blob/main/content/manuals/desktop/uninstall.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt remove docker-desktop\n$ rm -r $HOME/.docker/desktop\n$ sudo rm /usr/local/bin/com.docker.cli\n$ sudo apt purge docker-desktop\n```"
  }
]