[
  {
    "owner": "gardener",
    "repo": "documentation",
    "content": "TITLE: AWS Security Hardened Shoot Configuration\nDESCRIPTION: YAML configuration for creating a security hardened Gardener shoot cluster on AWS with baseline pod security, audit logging, and specific networking/infrastructure settings.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/hardened-shoot-report/hardened_shoots_docu_report.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Shoot\napiVersion: core.gardener.cloud/v1beta1\nmetadata:\n  name: aws\nspec:\n  cloudProfile:\n    name: aws\n  kubernetes:\n    kubeAPIServer:\n      admissionPlugins:\n        - name: PodSecurity\n          config:\n            apiVersion: pod-security.admission.config.k8s.io/v1beta1\n            kind: PodSecurityConfiguration\n            defaults:\n              enforce: baseline\n              audit: baseline\n              warn: baseline\n          disabled: false\n      auditConfig:\n        auditPolicy:\n          configMapRef:\n            name: audit-policy\n    version: \"1.28\"\n    enableStaticTokenKubeconfig: false\n  networking:\n    type: calico\n    pods: 100.64.0.0/12\n    nodes: 10.180.0.0/16\n    services: 100.104.0.0/13\n    ipFamilies:\n      - IPv4\n  provider:\n    type: aws\n    controlPlaneConfig:\n      apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1\n      kind: ControlPlaneConfig\n    infrastructureConfig:\n      apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1\n      kind: InfrastructureConfig\n      networks:\n        vpc:\n          cidr: 10.180.0.0/16\n        zones:\n          - internal: 10.180.48.0/20\n            name: eu-west-1c\n            public: 10.180.32.0/20\n            workers: 10.180.0.0/19\n    workers:\n      - cri:\n          name: containerd\n        name: worker-kkfk1\n        machine:\n          type: m5.large\n          image:\n            name: gardenlinux\n          architecture: amd64\n        maximum: 2\n        minimum: 2\n        maxSurge: 1\n        maxUnavailable: 0\n        volume:\n          type: gp3\n          size: 50Gi\n        zones:\n          - eu-west-1c\n    workersSettings:\n      sshAccess:\n        enabled: false\n  purpose: evaluation\n  region: eu-west-1\n  secretBindingName: secretBindingName\n```\n\n----------------------------------------\n\nTITLE: Defining minAvailable in Pod Disruption Budget - Kubernetes YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the 'minAvailable' property within the 'spec' of a PodDisruptionBudget (PDB), ensuring at least one replica of the matching pods remains available during voluntary disruptions. No additional dependencies are required other than standard Kubernetes cluster access and permissions to apply YAML manifests. Key input: 'spec.minAvailable' must be an integer or percentage, aligned with controller replica count; improper configuration (e.g. minAvailable equal to total replicas) risks blocking rolling updates or upgrades.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/pod-disruption-budget.md#2025-04-22_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n  spec:\n    minAvailable: 1\n```\n\n----------------------------------------\n\nTITLE: Creating Privileged Pod on Kubernetes Node\nDESCRIPTION: This YAML configuration is used to create a privileged pod on a specific Kubernetes node. The pod is set with necessary security and volume properties to allow root access. Replace <target-node-name> with the desired node's name.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: privileged-pod\n  namespace: default\nspec:\n  nodeSelector:\n    kubernetes.io/hostname: <target-node-name>\n  containers:\n  - name: busybox\n    image: busybox\n    stdin: true\n    securityContext:\n      privileged: true\n    volumeMounts:\n    - name: host-root-volume\n      mountPath: /host\n      readOnly: true\n  volumes:\n  - name: host-root-volume\n    hostPath:\n      path: /\n  hostNetwork: true\n  hostPID: true\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Installing NVIDIA Driver DaemonSet in Kubernetes\nDESCRIPTION: Kubernetes DaemonSet configuration for installing NVIDIA drivers on cluster nodes. Uses the modulus container to compile and install NVIDIA driver version 410.104 with necessary volume mounts and security contexts.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/gpu.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: nvidia-driver-installer\n  namespace: kube-system\n  labels:\n    k8s-app: nvidia-driver-installer\nspec:\n  selector:\n    matchLabels:\n      name: nvidia-driver-installer\n      k8s-app: nvidia-driver-installer\n  template:\n    metadata:\n      labels:\n        name: nvidia-driver-installer\n        k8s-app: nvidia-driver-installer\n    spec:\n      hostPID: true\n      initContainers:\n      - image: squat/modulus:4a1799e7aa0143bcbb70d354bab3e419b1f54972\n        name: modulus\n        args:\n        - compile\n        - nvidia\n        - \"410.104\"\n        securityContext:\n          privileged: true\n        env:\n        - name: MODULUS_CHROOT\n          value: \"true\"\n        - name: MODULUS_INSTALL\n          value: \"true\"\n        - name: MODULUS_INSTALL_DIR\n          value: /opt/drivers\n        - name: MODULUS_CACHE_DIR\n          value: /opt/modulus/cache\n        - name: MODULUS_LD_ROOT\n          value: /root\n        - name: IGNORE_MISSING_MODULE_SYMVERS\n          value: \"1\"          \n        volumeMounts:\n        - name: etc-coreos\n          mountPath: /etc/coreos\n          readOnly: true\n        - name: usr-share-coreos\n          mountPath: /usr/share/coreos\n          readOnly: true\n        - name: ld-root\n          mountPath: /root\n        - name: module-cache\n          mountPath: /opt/modulus/cache\n        - name: module-install-dir-base\n          mountPath: /opt/drivers\n        - name: dev\n          mountPath: /dev\n      containers:\n      - image: \"gcr.io/google-containers/pause:3.1\"\n        name: pause\n      tolerations:\n      - key: \"nvidia.com/gpu\"\n        effect: \"NoSchedule\"\n        operator: \"Exists\"\n      volumes:\n      - name: etc-coreos\n        hostPath:\n          path: /etc/coreos\n      - name: usr-share-coreos\n        hostPath:\n          path: /usr/share/coreos\n      - name: ld-root\n        hostPath:\n          path: /\n      - name: module-cache\n        hostPath:\n          path: /opt/modulus/cache\n      - name: dev\n        hostPath:\n          path: /dev\n      - name: module-install-dir-base\n        hostPath:\n          path: /opt/drivers\n```\n\n----------------------------------------\n\nTITLE: Configuring Velero Deployment for Separate Backup Locations in Kubernetes (YAML)\nDESCRIPTION: This YAML manifest defines a Kubernetes Deployment for Velero, specifically configured to handle separate cloud providers for volumes and backups. It mounts the `cloud-credentials` secret (containing credentials for both providers) into the Velero container. Environment variables (`AWS_SHARED_CREDENTIALS_FILE` and `GOOGLE_APPLICATION_CREDENTIALS`) are set to point to the respective credential files within the mounted secret, allowing Velero to authenticate correctly with AWS for volumes and GCP for backup storage in this example.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/backup-restore.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Copyright 2017 the Heptio Ark contributors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n---\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n  namespace: velero\n  name: velero\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        component: velero\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/port: \"8085\"\n        prometheus.io/path: \"/metrics\"\n    spec:\n      restartPolicy: Always\n      serviceAccountName: velero\n      containers:\n        - name: velero\n          image: gcr.io/heptio-images/velero:latest\n          command:\n            - /velero\n          args:\n            - server\n          volumeMounts:\n            - name: cloud-credentials\n              mountPath: /credentials\n            - name: plugins\n              mountPath: /plugins\n            - name: scratch\n              mountPath: /scratch\n          env:\n            - name: AWS_SHARED_CREDENTIALS_FILE\n              value: /credentials/cloud\n            - name: GOOGLE_APPLICATION_CREDENTIALS\n              value: /credentials/backup-target\n            - name: VELERO_SCRATCH_DIR\n              value: /scratch\n      volumes:\n        - name: cloud-credentials\n          secret:\n            secretName: cloud-credentials\n        - name: plugins\n          emptyDir: {}\n        - name: scratch\n          emptyDir: {}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ClusterRoleBinding for Prometheus ServiceAccount (YAML)\nDESCRIPTION: Defines a Kubernetes ClusterRoleBinding resource in YAML format. This binding grants the specified Prometheus ServiceAccount ('<your-prometheus-name>-server' in namespace '<your-prometheus-namespace>') the permissions defined in the 'garden.sapcloud.io:monitoring:prometheus' ClusterRole. This is necessary for Prometheus to access hardware and OS metrics from worker nodes in RBAC-enabled clusters, particularly those managed by Gardener. This configuration should be saved as 'crbinding.yaml' and applied using 'kubectl apply -f crbinding.yaml' after replacing the placeholders.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/prometheus.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: <your-prometheus-name>-server\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: garden.sapcloud.io:monitoring:prometheus\nsubjects:\n- kind: ServiceAccount\n  name: <your-prometheus-name>-server\n  namespace: <your-prometheus-namespace>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Kubernetes Security Requirements\nDESCRIPTION: A structured table listing security requirements and compliance rules for Kubernetes service providers, including rule IDs and detailed descriptions.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/kubernetes-hardening.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n|ID| Description |\n| -------- | ------- |\n|242376|The Kubernetes Controller Manager must use TLS 1.2, at a minimum, to protect the confidentiality of sensitive data during electronic dissemination.|\n|242377|The Kubernetes Scheduler must use TLS 1.2, at a minimum, to protect the confidentiality of sensitive data during electronic dissemination.|\n```\n\n----------------------------------------\n\nTITLE: Configuring High Availability Settings in Gardener Shoot YAML\nDESCRIPTION: This YAML snippet shows the important configuration settings for a Gardener Shoot resource to optimize high availability across multiple zones. It includes settings for control plane HA, pod eviction timeouts, autoscaling, worker configuration, and system components.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2023/03-27-High-Availability-and-Zone-Outage-Toleration.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  controlPlane:\n    highAvailability:\n      failureTolerance:\n        type: zone # valid values are `node` and `zone` (only available if your control plane resides in a region with 3+ zones)\n  kubernetes:\n    kubeAPIServer:\n      defaultNotReadyTolerationSeconds: 300\n      defaultUnreachableTolerationSeconds: 300\n    kubelet:\n      ...\n    kubeScheduler:\n      featureGates:\n        MinDomainsInPodTopologySpread: true\n    kubeControllerManager:\n      nodeMonitorPeriod: 10s\n      nodeMonitorGracePeriod: 40s\n      horizontalPodAutoscaler:\n        syncPeriod: 15s\n        tolerance: 0.1\n        downscaleStabilization: 5m0s\n        initialReadinessDelay: 30s\n        cpuInitializationPeriod: 5m0s\n    verticalPodAutoscaler:\n      enabled: true\n      evictAfterOOMThreshold: 10m0s\n      evictionRateBurst: 1\n      evictionRateLimit: -1\n      evictionTolerance: 0.5\n      recommendationMarginFraction: 0.15\n      updaterInterval: 1m0s\n      recommenderInterval: 1m0s\n    clusterAutoscaler:\n      expander: \"least-waste\"\n      scanInterval: 10s\n      scaleDownDelayAfterAdd: 60m\n      scaleDownDelayAfterDelete: 0s\n      scaleDownDelayAfterFailure: 3m\n      scaleDownUnneededTime: 30m\n      scaleDownUtilizationThreshold: 0.5\n  provider:\n    workers:\n    - name: ...\n      minimum: 6\n      maximum: 60\n      maxSurge: 3\n      maxUnavailable: 0\n      zones:\n      - ... # list of zones you want your worker pool nodes to be spread across, see above\n      kubernetes:\n        kubelet:\n          ... # similar to `kubelet` above (cluster-wide settings), but here per worker pool (pool-specific settings), see above\n      machineControllerManager: # optional, it allows to configure the machine-controller settings.\n        machineCreationTimeout: 20m\n        machineHealthTimeout: 10m\n        machineDrainTimeout: 60h\n  systemComponents:\n    coreDNS:\n      autoscaling:\n        mode: horizontal # valid values are `horizontal` (driven by CPU load) and `cluster-proportional` (driven by number of nodes/cores)\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Multi-Cloud Velero Credentials using kubectl\nDESCRIPTION: This command creates a Kubernetes generic secret named `cloud-credentials` in the `heptio-ark` namespace. It uses two separate credential files: `credentials-ark` (for the volume provider, e.g., AWS) mounted as `cloud`, and `backup-ark` (for the backup storage provider, e.g., GCP) mounted as `backup-target`. This secret is necessary for Velero to authenticate with different cloud providers for volume snapshots and backup storage.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/backup-restore.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic cloud-credentials --namespace heptio-ark \\\n    --from-file cloud=credentials-ark --from-file backup-target=backup-ark\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Deployment with YAML\nDESCRIPTION: This YAML configuration file sets up Prometheus with custom scrape configs for Kubernetes components and services. It includes job configurations for kubelet, cAdvisor, services, pods, and endpoints.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/prometheus.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrbac:\n  create: false # Already created in Preparation step\nnodeExporter:\n  enabled: false # The node-exporter is already deployed by default\n\nserver:\n  global:\n    scrape_interval: 30s\n    scrape_timeout: 30s\n\nserverFiles:\n  prometheus.yml:\n    rule_files:\n      - /etc/config/rules\n      - /etc/config/alerts      \n    scrape_configs:\n    - job_name: 'kube-kubelet'\n      honor_labels: false\n      scheme: https\n\n      tls_config:\n      # This is needed because the kubelets' certificates are not generated\n      # for a specific pod IP\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n      kubernetes_sd_configs:\n      - role: node\n      relabel_configs:\n      - target_label: __metrics_path__\n        replacement: /metrics\n      - source_labels: [__meta_kubernetes_node_address_InternalIP]\n        target_label: instance\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\n\n    - job_name: 'kube-kubelet-cadvisor'\n      honor_labels: false\n      scheme: https\n\n      tls_config:\n      # This is needed because the kubelets' certificates are not generated\n      # for a specific pod IP\n        insecure_skip_verify: true\n      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token\n\n      kubernetes_sd_configs:\n      - role: node\n      relabel_configs:\n      - target_label: __metrics_path__\n        replacement: /metrics/cadvisor\n      - source_labels: [__meta_kubernetes_node_address_InternalIP]\n        target_label: instance\n      - action: labelmap\n        regex: __meta_kubernetes_node_label_(.+)\n\n    # Example scrape config for probing services via the Blackbox Exporter.\n    #\n    # Relabelling allows to configure the actual service scrape endpoint using the following annotations:\n    #\n    # * `prometheus.io/probe`: Only probe services that have a value of `true`\n    - job_name: 'kubernetes-services'\n      metrics_path: /probe\n      params:\n        module: [http_2xx]\n      kubernetes_sd_configs:\n        - role: service\n      relabel_configs:\n        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]\n          action: keep\n          regex: true\n        - source_labels: [__address__]\n          target_label: __param_target\n        - target_label: __address__\n          replacement: blackbox\n        - source_labels: [__param_target]\n          target_label: instance\n        - action: labelmap\n          regex: __meta_kubernetes_service_label_(.+)\n        - source_labels: [__meta_kubernetes_namespace]\n          target_label: kubernetes_namespace\n        - source_labels: [__meta_kubernetes_service_name]\n          target_label: kubernetes_name\n    # Example scrape config for pods\n    #\n    # Relabelling allows to configure the actual service scrape endpoint using the following annotations:\n    #\n    # * `prometheus.io/scrape`: Only scrape pods that have a value of `true`\n    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.\n    # * `prometheus.io/port`: Scrape the pod on the indicated port instead of the default of `9102`.\n    - job_name: 'kubernetes-pods'\n      kubernetes_sd_configs:\n        - role: pod\n      relabel_configs:\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n          action: keep\n          regex: true\n        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n          action: replace\n          target_label: __metrics_path__\n          regex: (.+)\n        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]\n          action: replace\n          regex: (.+):(?:\\d+);(\\d+)\n          replacement: ${1}:${2}\n          target_label: __address__\n        - action: labelmap\n          regex: __meta_kubernetes_pod_label_(.+)\n        - source_labels: [__meta_kubernetes_namespace]\n          action: replace\n          target_label: kubernetes_namespace\n        - source_labels: [__meta_kubernetes_pod_name]\n          action: replace\n          target_label: kubernetes_pod_name\n    # Scrape config for service endpoints.\n    #\n    # The relabeling allows the actual service scrape endpoint to be configured\n    # via the following annotations:\n    #\n    # * `prometheus.io/scrape`: Only scrape services that have a value of `true`\n    # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need\n    # to set this to `https` & most likely set the `tls_config` of the scrape config.\n    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.\n    # * `prometheus.io/port`: If the metrics are exposed on a different port to the\n    # service then set this appropriately.\n    - job_name: 'kubernetes-service-endpoints'\n      kubernetes_sd_configs:\n        - role: endpoints\n      relabel_configs:\n        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]\n          action: keep\n          regex: true\n        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]\n          action: replace\n          target_label: __scheme__\n          regex: (https?)\n        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]\n          action: replace\n          target_label: __metrics_path__\n          regex: (.+)\n        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]\n          action: replace\n          target_label: __address__\n          regex: (.+)(?::\\d+);(\\d+)\n          replacement: $1:$2\n        - action: labelmap\n          regex: __meta_kubernetes_service_label_(.+)\n        - source_labels: [__meta_kubernetes_namespace]\n          action: replace\n          target_label: kubernetes_namespace\n        - source_labels: [__meta_kubernetes_service_name]\n          action: replace\n          target_label: kubernetes_name # Add your additional configuration here...\n```\n\n----------------------------------------\n\nTITLE: Exposing Kubernetes API Server via Tailscale\nDESCRIPTION: Command to annotate the Kubernetes service to expose it through Tailscale network with a specific hostname.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/tailscale.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl annotate -n default kubernetes tailscale.com/expose=true tailscale.com/hostname=kubernetes\n```\n\n----------------------------------------\n\nTITLE: Configuring Maintenance and Kubernetes Version in Shoot Cluster Spec - YAML\nDESCRIPTION: This YAML snippet shows a shoot cluster specification that references a concrete Kubernetes version and specifies a maintenance time window. It also disables automatic Kubernetes version updates. The configuration is used by Gardener to schedule maintenance and manage forceful updates once the referenced Kubernetes version expires. Key parameters include the targeted version and time window definitions.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/maintain-shoot.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetes:\n    version: 1.10.12\n  maintenance:\n    timeWindow:\n      begin: 220000+0100\n      end: 230000+0100\n    autoUpdate:\n      kubernetesVersion: false\n```\n\n----------------------------------------\n\nTITLE: Implementing InitContainers in Kubernetes Deployment\nDESCRIPTION: YAML configuration for a web application deployment that uses an InitContainer to check if the PostgreSQL database is ready before starting the main application container, preventing startup failures.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/container-startup.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: webapp\nspec:\n  selector:\n    matchLabels:\n      app: webapp\n  template:\n    metadata:\n      labels:\n        app: webapp\n    spec:\n      initContainers:  # check if DB is ready, and only continue when true\n      - name: check-db-ready\n        image: postgres:9.6.5\n        command: ['sh', '-c',  'until pg_isready -h postgres -p 5432;  do echo waiting for database; sleep 2; done;']\n      containers:\n      - image: xcoulon/go-url-shortener:0.1.0\n        name: go-url-shortener\n        env:\n        - name: POSTGRES_HOST\n          value: postgres\n        - name: POSTGRES_PORT\n          value: \"5432\"\n        - name: POSTGRES_DATABASE\n          value: url_shortener_db\n        - name: POSTGRES_USER\n          value: user\n        - name: POSTGRES_PASSWORD\n          value: mysecretpassword\n        ports:\n        - containerPort: 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Pools Across Multiple Zones in Gardener Shoot Resource\nDESCRIPTION: This YAML snippet demonstrates how to configure worker pools to spread across multiple zones in a Gardener shoot resource. It specifies the minimum and maximum number of nodes and lists the target zones for improved availability.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2023/03-27-High-Availability-and-Zone-Outage-Toleration.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  provider:\n    workers:\n    - name: ...\n      minimum: 6\n      maximum: 60\n      zones:\n      - ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Diki Security Scanner for Gardener\nDESCRIPTION: YAML configuration for diki security scanner specifying provider settings, DISA STIG ruleset options, and audit logging exceptions. Includes custom rule configurations for node-local-dns, file ownership permissions, and token acceptance criteria.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/hardened-shoot-report/hardened_shoots_docu_report.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata: ...\nproviders:\n- id: gardener\n  name: Gardener\n  metadata: ...\n  args: ...\n  rulesets:\n  - id: disa-kubernetes-stig\n    name: DISA Kubernetes Security Technical Implementation Guide\n    version: v2r1\n    args:\n      maxRetries: 5\n    ruleOptions:\n    - ruleID: \"242402\"\n      skip:\n        enabled: true\n        justification: \"Gardener can integrate with different audit logging solutions\"\n    - ruleID: \"242403\"\n      skip:\n        enabled: true\n        justification: \"Gardener can integrate with different audit logging solutions\"\n    - ruleID: \"242414\"\n      args:\n        acceptedPods:\n        - podMatchLabels:\n            k8s-app: node-local-dns\n          namespaceMatchLabels:\n            kubernetes.io/metadata.name: kube-system\n          justification: \"node local dns requires port 53 in order to operate properly\"\n          ports:\n          - 53\n    - ruleID: \"242445\"\n      args:\n        expectedFileOwner:\n          users: [\"0\", \"65532\"]\n          groups: [\"0\", \"65532\"]\n    - ruleID: \"242446\"\n      args:\n        expectedFileOwner:\n          users: [\"0\", \"65532\"]\n          groups: [\"0\", \"65532\"]\n    - ruleID: \"242451\"\n      args:\n        expectedFileOwner:\n          users: [\"0\", \"65532\"]\n          groups: [\"0\", \"65532\"]\n    - ruleID: \"242462\"\n      skip:\n        enabled: true\n        justification: \"Gardener can integrate with different audit logging solutions\"\n    - ruleID: \"242463\"\n      skip:\n        enabled: true\n        justification: \"Gardener can integrate with different audit logging solutions\"\n    - ruleID: \"242464\"\n      skip:\n        enabled: true\n        justification: \"Gardener can integrate with different audit logging solutions\"\n    - ruleID: \"245543\"\n      args:\n        acceptedTokens:\n        - user: \"health-check\"\n          uid: \"health-check\"\n    - ruleID: \"254800\"\n      args:\n        minPodSecurityLevel: \"baseline\"\noutput:\n  minStatus: Passed\n```\n\n----------------------------------------\n\nTITLE: Configuring Control Plane High Availability in Gardener Shoot Resource\nDESCRIPTION: This YAML snippet shows how to configure the control plane for high availability in a Gardener shoot resource. It sets the failure tolerance type to 'zone', which scales out control plane components across multiple zones for improved resilience.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2023/03-27-High-Availability-and-Zone-Outage-Toleration.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  controlPlane:\n    highAvailability:\n      failureTolerance:\n        type: zone # valid values are `node` and `zone` (only available if your control plane resides in a region with 3+ zones)\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Authentication in kubeconfig\nDESCRIPTION: YAML configuration for setting up OIDC authentication in the kubectl config file, including the oidc-login plugin configuration and necessary parameters\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/oidc-login.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Config\n\n...\n\ncontexts:\n- context:\n    cluster: shoot--project--mycluster\n    user: my-oidc\n  name: shoot--project--mycluster\n\n...\n\nusers:\n- name: my-oidc\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1beta1\n      command: kubectl\n      args:\n      - oidc-login\n      - get-token\n      - --oidc-issuer-url=https://<Issuer>/ \n      - --oidc-client-id=<Client ID>\n      - --oidc-client-secret=<Client Secret>\n      - --oidc-extra-scope=email,offline_access,profile\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Registry Secret in Kubernetes\nDESCRIPTION: Creates a Kubernetes secret to store Docker registry credentials, which are required to pull private images. It is essential to replace placeholders with actual username, password, and email credentials.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/missing-registry-permission.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create secret docker-registry dockersecret --docker-server=https://index.docker.io/v1/ --docker-username=<username> --docker-password=<password> --docker-email=<email>\n```\n\n----------------------------------------\n\nTITLE: OpenStack Security Hardened Shoot Configuration\nDESCRIPTION: YAML configuration for creating a security hardened Gardener shoot cluster on OpenStack with baseline pod security, audit logging, and specific networking/infrastructure settings.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/hardened-shoot-report/hardened_shoots_docu_report.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Shoot\napiVersion: core.gardener.cloud/v1beta1\nmetadata:\n  name: openstack\nspec:\n  cloudProfile:\n    name: converged-cloud-cp\n  kubernetes:\n    kubeAPIServer:\n      admissionPlugins:\n        - name: PodSecurity\n          config:\n            apiVersion: pod-security.admission.config.k8s.io/v1beta1\n            kind: PodSecurityConfiguration\n            defaults:\n              enforce: baseline\n              audit: baseline\n              warn: baseline\n          disabled: false\n      auditConfig:\n        auditPolicy:\n          configMapRef:\n            name: audit-policy\n    version: \"1.28\"\n    enableStaticTokenKubeconfig: false\n  networking:\n    type: calico\n    pods: 100.64.0.0/12\n    nodes: 10.180.0.0/16\n    services: 100.104.0.0/13\n    ipFamilies:\n      - IPv4\n  provider:\n    type: openstack\n    controlPlaneConfig:\n      apiVersion: openstack.provider.extensions.gardener.cloud/v1alpha1\n      kind: ControlPlaneConfig\n      loadBalancerProvider: f5\n    infrastructureConfig:\n      apiVersion: openstack.provider.extensions.gardener.cloud/v1alpha1\n      kind: InfrastructureConfig\n      networks:\n        workers: 10.180.0.0/16\n      floatingPoolName: FloatingIP-external-cp\n    workers:\n      - cri:\n          name: containerd\n        name: worker-dqty2\n        machine:\n          type: g_c2_m4\n          image:\n            name: gardenlinux\n          architecture: amd64\n        maximum: 2\n        minimum: 2\n        maxSurge: 1\n        maxUnavailable: 0\n        zones:\n          - eu-de-1b\n    workersSettings:\n      sshAccess:\n        enabled: false\n  purpose: evaluation\n  region: eu-de-1\n  secretBindingName: secretBindingName\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubectl Bash Completion\nDESCRIPTION: This snippet enables bash completion for kubectl commands. It provides an alias 'k' for kubectl and sets up command completion in bash using the .bashrc file. The completion script replaces occurrences of 'kubectl' with 'k', maintaining efficiency without losing command completion functionality.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/client-tools/bash-tips.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# time save number one. shortcut for kubectl\n#\nalias k=\"kubectl\"\n\n# Enable kubectl completion\nsource <(k completion bash | sed s/kubectl/k/g)\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubelet Resource Reservations and Eviction Thresholds in Gardener\nDESCRIPTION: YAML configuration for setting resource reservations and eviction policies in a Gardener-managed Kubernetes cluster. This snippet demonstrates how to configure system and Kubernetes reserved resources, along with soft and hard eviction thresholds to prevent node failures.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2023/03-27-High-Availability-and-Zone-Outage-Toleration.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  kubernetes:\n    kubelet:\n      systemReserved:                          # explicit resource reservation for operating system daemons\n        cpu: 100m\n        memory: 1Gi\n        ephemeralStorage: 1Gi\n        pid: 1000\n      kubeReserved:                            # explicit resource reservation for Kubernetes daemons\n        cpu: 100m\n        memory: 1Gi\n        ephemeralStorage: 1Gi\n        pid: 1000\n      evictionSoft:                            # soft, i.e. graceful eviction (used if the node is about to run out of resources, avoiding hard evictions)\n        memoryAvailable: 200Mi\n        imageFSAvailable: 10%\n        imageFSInodesFree: 10%\n        nodeFSAvailable: 10%\n        nodeFSInodesFree: 10%\n      evictionSoftGracePeriod:                 # caps pod's `terminationGracePeriodSeconds` value during soft evictions (specific grace periods)\n        memoryAvailable: 1m30s\n        imageFSAvailable: 1m30s\n        imageFSInodesFree: 1m30s\n        nodeFSAvailable: 1m30s\n        nodeFSInodesFree: 1m30s\n      evictionHard:                            # hard, i.e. immediate eviction (used if the node is out of resources, avoiding the OS generally run out of resources fail processes indiscriminately)\n        memoryAvailable: 100Mi\n        imageFSAvailable: 5%\n        imageFSInodesFree: 5%\n        nodeFSAvailable: 5%\n        nodeFSInodesFree: 5%\n      evictionMinimumReclaim:                  # additional resources to reclaim after hitting the hard eviction thresholds to not hit the same thresholds soon after again\n        memoryAvailable: 0Mi\n        imageFSAvailable: 0Mi\n        imageFSInodesFree: 0Mi\n        nodeFSAvailable: 0Mi\n        nodeFSInodesFree: 0Mi\n      evictionMaxPodGracePeriod: 90            # caps pod's `terminationGracePeriodSeconds` value during soft evictions (general grace periods)\n      evictionPressureTransitionPeriod: 5m0s   # stabilization time window to avoid flapping of node eviction state\n```\n\n----------------------------------------\n\nTITLE: Defining CloudProfile for KubeVirt in Gardener (YAML)\nDESCRIPTION: This YAML snippet defines a CloudProfile custom resource for KubeVirt in Gardener. It specifies machine types, volume types, regions, and machine images available for VM creation. This configuration is used by the KubeVirt Provider Extension to generate necessary resources for managing worker nodes in shoot clusters.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2020/10.19-Gardener-Integrates-with-KubeVirt.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: CloudProfile\nmetadata:\n  name: kubevirt\nspec:\n  type: kubevirt\n  providerConfig:\n    apiVersion: kubevirt.provider.extensions.gardener.cloud/v1alpha1\n    kind: CloudProfileConfig\n    machineImages:\n    - name: ubuntu\n      versions:\n      - version: \"18.04\"\n        sourceURL: \"https://cloud-images.ubuntu.com/bionic/current/bionic-server-cloudimg-amd64.img\"\n  kubernetes:\n    versions:\n    - version: \"1.18.5\"\n  machineImages:\n  - name: ubuntu\n    versions:\n    - version: \"18.04\"\n  machineTypes:\n  - name: standard-1\n    cpu: \"1\"\n    gpu: \"0\"\n    memory: 4Gi\n  volumeTypes:\n  - name: default\n    class: default\n  regions:\n  - name: europe-west1\n    zones:\n    - name: europe-west1-b\n    - name: europe-west1-c\n    - name: europe-west1-d\n```\n\n----------------------------------------\n\nTITLE: Defining a DaemonSet to Install Seccomp Profile on Nodes (YAML)\nDESCRIPTION: This YAML snippet defines a Kubernetes DaemonSet named 'seccomp' in the 'kube-system' namespace. It ensures that on each node, an init container ('installer') copies the Seccomp profile(s) from the 'seccomp-profile' ConfigMap (mounted at '/seccomp') to the host's kubelet Seccomp directory ('/var/lib/kubelet/seccomp/', mounted at '/host/seccomp'). A simple pause container runs afterwards. This distributes the profile defined in the ConfigMap to all nodes.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/secure-seccomp.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: seccomp\n  namespace: kube-system\n  labels:\n    security: seccomp\nspec:\n  selector:\n    matchLabels:\n      security: seccomp\n  template:\n    metadata:\n      labels:\n        security: seccomp\n    spec:\n      initContainers:\n      - name: installer\n        image: alpine:3.10.0\n        command: [\"/bin/sh\", \"-c\", \"cp -r -L /seccomp/*.json /host/seccomp/\"]\n        volumeMounts:\n        - name: profiles\n          mountPath: /seccomp\n        - name: hostseccomp\n          mountPath: /host/seccomp\n          readOnly: false\n      containers:\n      - name: pause\n        image: k8s.gcr.io/pause:3.1\n      terminationGracePeriodSeconds: 5\n      volumes:\n      - name: hostseccomp\n        hostPath:\n          path: /var/lib/kubelet/seccomp\n      - name: profiles\n        configMap:\n          name: seccomp-profile\n```\n\n----------------------------------------\n\nTITLE: Creating User and Group in Dockerfile\nDESCRIPTION: The snippet demonstrates how to create a non-root user within a Docker container. This helps to prevent compromised containers from gaining full control of the host node. The `groupadd` and `useradd` commands are used to add a group and a user, respectively, using configurable UID and GID. The `USER` command switches the running user from root to the created user.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/antipattern.md#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nARG GF_UID=\\\"500\\\"\nARG GF_GID=\\\"500\\\"\n\n# add group & user\nRUN groupadd -r -g $GF_GID appgroup && \\\n   useradd appuser -r -u $GF_UID -g appgroup\n\nUSER appuser\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Machine Image and Maintenance in Shoot Cluster Spec - YAML\nDESCRIPTION: This YAML snippet provides a shoot cluster specification for a provider (e.g., AWS) with a worker group configuration referencing a specific machine image version. It includes settings for worker type, volume, and maintenance time window, as well as disables automatic machine image version updates. This configuration is used by Gardener to determine if forceful updating to a newer image version is required once the referenced version expires. Key fields are the image name, version, and maintenance settings.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/maintain-shoot.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  provider:\n    type: aws\n    workers:\n    - name: name\n      maximum: 1\n      minimum: 1\n      maxSurge: 1\n      maxUnavailable: 0\n      image:\n        name: coreos\n        version: 2135.6.0\n        type: m5.large\n      volume:\n        type: gp2\n        size: 20Gi\n  maintenance:\n    timeWindow:\n      begin: 220000+0100\n      end: 230000+0100\n    autoUpdate:\n      machineImageVersion: false\n```\n\n----------------------------------------\n\nTITLE: Configuring the Kubernetes API Server Client CA - Bash\nDESCRIPTION: This snippet demonstrates how to launch the Kubernetes API server using the --client-ca-file flag, specifying the certificate authority used for authenticating client certificates. The specified file path (/srv/kubernetes/ca/ca.crt) must contain the CA certificate that signs authorized client certificates. Requires the Kubernetes hyperkube binary and a correctly provisioned CA; input is the command-line invocation and output is the API server process securing access by client certificate authentication.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/insecure-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"/hyperkube apiserver --client-ca-file=/srv/kubernetes/ca/ca.crt ...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring KubeVirt Infrastructure in Gardener\nDESCRIPTION: YAML configuration example showing how to set up infrastructure for a KubeVirt-based shoot cluster in Gardener. Demonstrates network configuration using Multus CNI and NetworkAttachmentDefinitions.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2020/10.19-Gardener-Integrates-with-KubeVirt.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: kubevirt\n  infrastructureConfig:\n    apiVersion: kubevirt.provider.extensions.gardener.cloud/v1alpha1\n    kind: InfrastructureConfig\n    networks:\n      tenantNetworks:\n      - name: network-1\n        config: |\n          {\n            \"cniVersion\": \"0.4.0\",\n            \"name\": \"bridge-firewall\",\n            \"plugins\": [\n              {\n                \"type\": \"bridge\",\n                \"isGateway\": true,\n                \"isDefaultGateway\": true,\n                \"ipMasq\": true,\n                \"ipam\": {\n                  \"type\": \"host-local\",\n                  \"subnet\": \"10.100.0.0/16\"\n                }\n              },\n              {\n                \"type\": \"firewall\"\n              }\n            ]\n          }\n        default: true\n```\n\n----------------------------------------\n\nTITLE: Configuring KubeVirt Workers in Gardener\nDESCRIPTION: YAML configuration example showing how to configure worker nodes for a KubeVirt-based shoot cluster in Gardener. Specifies worker pool settings including machine type, image, volume configuration, and zone placement.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2020/10.19-Gardener-Integrates-with-KubeVirt.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprovider:\n  type: kubevirt\n  workers:\n  - name: cpu-worker\n    minimum: 1\n    maximum: 2\n    machine:\n      type: standard-1\n      image:\n        name: ubuntu\n        version: \"18.04\"\n    volume:\n      type: default\n      size: 20Gi\n    zones:\n    - europe-west1-c\n```\n\n----------------------------------------\n\nTITLE: Defining a PersistentVolumeClaim in Kubernetes (YAML)\nDESCRIPTION: This YAML snippet defines a Kubernetes PersistentVolumeClaim (PVC) named 'postgresdb-pvc'. It requests 9Gi of storage with ReadWriteOnce access mode, utilizing the 'default' storage class for dynamic provisioning. PVCs allow applications to request storage resources without needing details about the underlying storage infrastructure.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/dynamic-pvc.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: postgresdb-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 9Gi\n  storageClassName: 'default'\n```\n\n----------------------------------------\n\nTITLE: Switching kubectl Context for OIDC\nDESCRIPTION: Commands to switch kubectl context to use OIDC authentication\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/oidc-login.md#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncd ~/.kube\nexport KUBECONFIG=$(pwd)/config-oidc\nkubectl config use-context `shoot--project--mycluster`\n```\n\n----------------------------------------\n\nTITLE: Security Requirements Table - End User Workload\nDESCRIPTION: Markdown table describing security requirements for user workloads including namespace usage, pod security policies, and resource management.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/kubernetes-hardening.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n|ID| Description | Secure By Default | Comments |\n| -------- | ------- | ------- | ------- |\n|242395|Kubernetes dashboard must not be enabled|:white_check_mark:| Not installed unless via kubernetesDashboard|\n|242414|Kubernetes cluster must use non-privileged host ports for user pods|:x:| Do not use ports below 1024|\n|242415|Secrets in Kubernetes must not be stored as environment variables|:x:| Always mount secrets as volumes|\n```\n\n----------------------------------------\n\nTITLE: Defining a Pod Using the Custom Seccomp Profile (YAML)\nDESCRIPTION: This YAML snippet defines a simple Kubernetes Pod named 'seccomp-app'. It uses the annotation 'seccomp.security.alpha.kubernetes.io/pod: \"localhost/my-profile.json\"' to instruct the kubelet to apply the custom Seccomp profile 'my-profile.json' (which was previously installed to '/var/lib/kubelet/seccomp/' on the node) to all containers within this Pod. The 'localhost/' prefix indicates that the profile is located on the node's filesystem.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/secure-seccomp.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: seccomp-app\n  namespace: default\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: \"localhost/my-profile.json\"\n    # you can specify seccomp profile per container. If you add another profile you can configure\n    # it for a specific container - 'pause' in this case.\n    # container.seccomp.security.alpha.kubernetes.io/pause: \"localhost/some-other-profile.json\"\nspec:\n  containers:\n  - name: pause\n    image: k8s.gcr.io/pause:3.1\n```\n\n----------------------------------------\n\nTITLE: Setting Up Namespaces and Deploying NGINX Servers - Kubernetes with Bash\nDESCRIPTION: This Bash snippet sets up two Kubernetes namespaces, deploys NGINX HTTP servers in each, and exposes their ports for external access. Dependencies include a functioning Kubernetes cluster and kubectl CLI with appropriate permissions. Key commands involve creating namespaces, running deployments, and exposing deployments via NodePort, preparing the environment for subsequent network policy testing.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/network-isolation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create two namespaces for test purpose\\nkubectl create ns customer1\\nkubectl create ns customer2\\n\\n# create a standard HTTP web server\\nkubectl run nginx --image=nginx --replicas=1 --port=80 -n=customer1\\nkubectl run nginx --image=nginx --replicas=1 --port=80 -n=customer2\\n\\n# expose the port 80 for external access\\nkubectl expose deployment nginx --port=80 --type=NodePort -n=customer1\\nkubectl expose deployment nginx --port=80 --type=NodePort -n=customer2\\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Deep Learning Workbench with GPU Support\nDESCRIPTION: Kubernetes Deployment configuration for a deep learning workbench that requests GPU resources. Uses a custom image with TensorFlow and Keras support.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/gpu.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: deeplearning-workbench\n  namespace: default\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: deeplearning-workbench\n  template:\n    metadata:\n      labels:\n        app: deeplearning-workbench\n    spec:\n      containers:\n      - name: deeplearning-workbench\n        image: afritzler/deeplearning-workbench\n        resources:\n          limits:\n            nvidia.com/gpu: 1\n      tolerations:\n      - key: \"nvidia.com/gpu\"\n        effect: \"NoSchedule\"\n        operator: \"Exists\"\n```\n\n----------------------------------------\n\nTITLE: Configuring minReplicas in HorizontalPodAutoscaler - Kubernetes YAML\nDESCRIPTION: This YAML snippet shows the configuration of 'minReplicas' under 'spec' for a Kubernetes HorizontalPodAutoscaler (HPA), establishing the minimum number of pod replicas the autoscaler will maintain. This setting must be logically consistent with PDB requirements to avoid scheduling violations; for example, if PDB minAvailable is 1, minReplicas should be set to 2 or higher. The manifest requires a running Kubernetes cluster with permissions to deploy HPAs.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/pod-disruption-budget.md#2025-04-22_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n  spec:\n    minReplicas: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Deployment with YAML\nDESCRIPTION: This YAML configuration file sets up Grafana with ingress disabled and service type set to ClusterIP. It's a minimal configuration for deploying Grafana alongside Prometheus.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/prometheus.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  ingress:\n    enabled: false\n  service:\n    type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Migrating CRD Storage Version in Kubernetes\nDESCRIPTION: This snippet shows steps to migrate CRD storage versions in Kubernetes by modifying the storage attribute of version definitions in the CRD manifest. It helps transition from an old to a new version, ensuring data consistency and resource accessibility. Key dependencies include Kubernetes setup with CRDs and kubectl for operation execution.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/conversion-webhook.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nspec:\nversions:\n- name: v1beta1\n......\nstorage: true\n\n- name: v1\n......\nstorage: false\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nspec:\nversions:\n- name: v1beta1\n......\nstorage: false\n\n- name: v1\n......\nstorage: true\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get <custom-resource-name> -A -ojson | k apply -f -\n\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch customresourcedefinitions <crd-name> --subresource='status' --type='merge' -p '{\"status\":{\"storedVersions\":[\"your-latest-cr-version\"]}}'\n\n```\n\n----------------------------------------\n\nTITLE: Installing kwasm-operator for containerd-wasm-shim Support\nDESCRIPTION: Commands to install kwasm-operator, which manages the containerd-wasm-shim on Kubernetes nodes. The process includes adding the kwasm Helm repository, installing the operator, and annotating nodes to enable provisioning of the required containerd shim.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Add the kwasm helm repository\nhelm repo add kwasm http://kwasm.sh/kwasm-operator/\nhelm repo update\n\n# Install KWasm operator\nhelm install \\\n  kwasm-operator kwasm/kwasm-operator \\\n  --namespace kwasm \\\n  --create-namespace \\\n  --set kwasmOperator.installerImage=ghcr.io/spinkube/containerd-shim-spin/node-installer:v0.13.1\n\n# Annotate all nodes in the cluster so kwasm can select them and provision the required containerd shim\nkubectl annotate node --all kwasm.sh/kwasm-node=true\n```\n\n----------------------------------------\n\nTITLE: Installing NVIDIA GPU Device Plugin DaemonSet\nDESCRIPTION: Kubernetes DaemonSet configuration for the NVIDIA GPU device plugin that enables GPU support in the cluster. Includes resource limits and necessary volume mounts for device access.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/gpu.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: nvidia-gpu-device-plugin\n  namespace: kube-system\n  labels:\n    k8s-app: nvidia-gpu-device-plugin\nspec:\n  selector:\n    matchLabels:\n      k8s-app: nvidia-gpu-device-plugin\n  template:\n    metadata:\n      labels:\n        k8s-app: nvidia-gpu-device-plugin\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: ''\n    spec:\n      priorityClassName: system-node-critical\n      volumes:\n      - name: device-plugin\n        hostPath:\n          path: /var/lib/kubelet/device-plugins\n      - name: dev\n        hostPath:\n          path: /dev\n      containers:\n      - image: \"k8s.gcr.io/nvidia-gpu-device-plugin@sha256:08509a36233c5096bb273a492251a9a5ca28558ab36d74007ca2a9d3f0b61e1d\"\n        command: [\"/usr/bin/nvidia-gpu-device-plugin\", \"-logtostderr\", \"-host-path=/opt/drivers/nvidia\"]\n        name: nvidia-gpu-device-plugin\n        resources:\n          requests:\n            cpu: 50m\n            memory: 10Mi\n          limits:\n            cpu: 50m\n            memory: 10Mi\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - name: device-plugin\n          mountPath: /device-plugin\n        - name: dev\n          mountPath: /dev\n  updateStrategy:\n    type: RollingUpdate\n```\n\n----------------------------------------\n\nTITLE: Accessing a Service via Kubernetes apiserver proxy\nDESCRIPTION: This example shows the URL format for accessing a Kubernetes service through the apiserver proxy. This method requires an existing service but offers more stability than port-forwarding as it doesn't depend on specific pod names.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/access-pod-from-local.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttps://<your-cluster-master>/api/v1/namespace/<your-namespace>/services/<your-service>:<your-service-port>/proxy/<service-endpoint>\n```\n\n----------------------------------------\n\nTITLE: Querying Node Events with Loki in Grafana\nDESCRIPTION: This JSON query is used in Grafana's Explore tab to fetch node-related events from Loki, identifying nodes' status changes. It is necessary to select 'loki' as the datasource to execute this query. No additional dependencies are required. The main parameter includes <node-name> to specify the particular node of interest, and it returns event details relevant to that node.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/analyzing-node-failures.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"_entry\":\"Node ip-10-55-138-185.eu-central-1.compute.internal status is now: NodeNotReady\",\"count\":1,\"firstTimestamp\":\"2023-04-05T12:02:08Z\",\"lastTimestamp\":\"2023-04-05T12:02:08Z\",\"namespace\":\"default\",\"object\":\"Node/ip-10-55-138-185.eu-central-1.compute.internal\",\"origin\":\"shoot\",\"reason\":\"NodeNotReady\",\"source\":\"node-controller\",\"type\":\"Normal\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Bash Aliases for kubectl\nDESCRIPTION: This snippet creates bash aliases for frequently used kubectl commands to improve terminal efficiency. Key aliases include 'k' for kubectl, 'ksh' for launching a shell in a pod, and 'kurl' for using a custom Docker image for curl. The '.profile' file is used to store these aliases, which are beneficial for reducing typing effort and maintaining efficiency while managing Kubernetes applications.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/client-tools/bash-tips.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# time save number one. shortcut for kubectl\n#\nalias k=\"kubectl\"\n\n# Start a shell in a pod AND kill them after leaving\n#\nalias ksh=\"kubectl run busybox -i --tty --image=busybox --restart=Never --rm -- sh\"\n\n# opens a bash\n#\nalias kbash=\"kubectl run busybox -i --tty --image=busybox --restart=Never --rm -- ash\"\n\n# activate/exports the kuberconfig.yaml in the current working directory\n#\nalias kexport=\"export KUBECONFIG=\\`pwd\\`/kubeconfig.yaml\"\n\n\n# usage: kurl http://your-svc.namespace.cluster.local\n#\n# we need for this our very own image...never trust an unknown image..\nalias kurl=\"docker run --rm byrnedo/alpine-curl\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Shoot Cluster Using Script\nDESCRIPTION: Command to delete a Shoot cluster using the provided delete script. Takes Shoot name as first parameter and optional namespace as second parameter. Handles the required deletion annotation automatically.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/create-delete-shoot.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./hack/usage/delete shoot johndoe-1 johndoe\n```\n\n----------------------------------------\n\nTITLE: Enabling ExtendedResourceToleration Admission Plugin\nDESCRIPTION: Kubernetes API server configuration to enable the ExtendedResourceToleration admission plugin for automatic GPU tolerations.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/gpu.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n  kubernetes:\n    kubeAPIServer:\n      admissionPlugins:\n      - name: ExtendedResourceToleration\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Seccomp Profile in a Kubernetes ConfigMap (YAML)\nDESCRIPTION: This YAML snippet defines a Kubernetes ConfigMap named 'seccomp-profile' in the 'kube-system' namespace. It contains a data entry 'my-profile.json' which holds a simple Seccomp profile in JSON format. This profile allows all system calls by default ('SCMP_ACT_ALLOW') but specifically denies the 'chmod' system call ('SCMP_ACT_ERRNO').\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/secure-seccomp.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: seccomp-profile\n  namespace: kube-system\ndata:\n  my-profile.json: |\n    {\n      \"defaultAction\": \"SCMP_ACT_ALLOW\",\n      \"syscalls\": [\n        {\n          \"name\": \"chmod\",\n          \"action\": \"SCMP_ACT_ERRNO\"\n        }\n      ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Deny-All Inter-Namespace NetworkPolicy - Kubernetes NetworkPolicy YAML\nDESCRIPTION: This YAML manifest defines a NetworkPolicy that denies all ingress traffic from outside the namespace, while allowing all intra-namespace traffic. Dependencies include Kubernetes with the networking.k8s.io/v1 API enabled. 'spec.podSelector.matchLabels' and 'ingress.from.podSelector' are left empty to select all pods within the namespace, effectively enforcing namespace isolation. No explicit IPs or CIDRs are needed due to Kubernetes label selectors.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/network-isolation.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\\nkind: NetworkPolicy\\nmetadata:\\n  name: deny-from-other-namespaces\\nspec:\\n  podSelector:\\n    matchLabels:\\n  ingress:\\n  - from:\\n    - podSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Configuration ConfigMap\nDESCRIPTION: YAML definition for the authentication configuration ConfigMap that specifies OIDC settings and claim mappings\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/oidc-login.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: authentication-config\n  namespace: garden-project\ndata:\n  config.yaml: |\n    apiVersion: apiserver.config.k8s.io/v1beta1\n    kind: AuthenticationConfiguration\n    jwt:\n    - issuer:\n        url: https://<Issuer>/\n        audiences:\n        - <Client ID>\n      claimMappings:\n        username:\n          claim: 'email'\n        prefix: 'unique-issuer-identifier:'\n```\n\n----------------------------------------\n\nTITLE: Security Requirements Table - Audit Configuration\nDESCRIPTION: Markdown table outlining audit logging requirements including path settings, log retention, and audit record specifications.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/kubernetes-hardening.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|ID| Description | Secure By Default | Comments |\n| -------- | ------- | ------- | ------- |\n|242402|The Kubernetes API Server must have an audit log path set| :x: | It is the user's responsibility to configure an audit extension|\n|242403|Kubernetes API Server must generate audit records| :x: | Users should set an audit policy that meets their requirements|\n|242461|Kubernetes API Server audit logs must be enabled| :x: | Users should set an audit policy that meets their requirements|\n```\n\n----------------------------------------\n\nTITLE: Attaching Internet Gateway to VPC\nDESCRIPTION: Attach the created Internet Gateway to the VPC using their respective IDs.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/create-shoot-into-existing-aws-vpc.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 attach-internet-gateway --internet-gateway-id igw-c0a643a9 --vpc-id vpc-ff7bbf86\n```\n\n----------------------------------------\n\nTITLE: Checking Problematic CRDs in Kubernetes\nDESCRIPTION: This Bash script checks for problematic Custom Resource Definitions (CRDs) in a Kubernetes cluster by examining the conversion strategy and stored versions. It identifies CRDs with conversion webhooks where the returned version differs from the stored version, or if there are multiple stored versions, indicating the need for user intervention. Dependencies include kubectl and jq.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/conversion-webhook.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nset -e -o pipefail\n\necho \"Checking all CRDs in the cluster...\"\nfor p in $(kubectl get crd | awk 'NR>1' | awk '{print $1}'); do\n  strategy=$(kubectl get crd \"$p\" -o json | jq -r .spec.conversion.strategy)\n\n  if [ \"$strategy\" == \"Webhook\" ]; then\n     crd_name=$(kubectl get crd \"$p\" -o json | jq -r .metadata.name)\n\n     number_of_stored_versions=$(kubectl get crd \"$crd_name\" -o json  | jq '.status.storedVersions | length')\n\n      if [[ \"$number_of_stored_versions\" == 1 ]]; then\n         returned_cr_version=$(kubectl get \"$crd_name\" -A -o json |  jq -r '.items[] | .apiVersion'  | sed 's:.*/::')\n         if [ -z \"$returned_cr_version\" ]; then\n           continue\n         else\n           variable=$(echo \"$returned_cr_version\" | xargs -n1 | sort -u | xargs)\n           present_version=$(kubectl get crd \"$crd_name\" -o json  |  jq -cr '.status.storedVersions |.[]')\n           if [[ $variable != \"$present_version\" ]]; then\n             echo \"ERROR: Stored version differs from the version that CRs are being returned. $crd_name with conversion webhook needs to be fixed\"\n           fi\n         fi\n      fi\n\n      if [[ \"$number_of_stored_versions\" -gt 1 ]]; then\n         returned_cr_version=$(kubectl get \"$crd_name\" -A -o json |  jq -r '.items[] | .apiVersion'  | sed 's:.*/::')\n         if [ -z \"$returned_cr_version\" ]; then\n           continue\n         else\n           echo \"ERROR: Too many stored versions defined. $crd_name with conversion webhook needs to be fixed\"\n         fi\n      fi\n  fi\ndone\necho \"Problematic CRDs are reported above.\"\n\n```\n\n----------------------------------------\n\nTITLE: Using Immutable Pinned Digest Base Image - Docker - Dockerfile\nDESCRIPTION: Illustrates the recommended method of referencing a base image in Dockerfiles using a specific SHA256 digest. This guarantees consistent builds by using the exact same image every time. Requires Docker and access to the image with the specified digest. The FROM instruction pulls a specific image version, ensuring repeatable build outputs.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/dockerfile-pitfall.md#2025-04-22_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM alpine@sha256:7043076348bf5040220df6ad703798fd8593a0918d06d3ce30c6c93be117e430\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Grafana Admin Password\nDESCRIPTION: This Bash command retrieves and decodes the Grafana admin password from the Kubernetes secret. It's useful for accessing the Grafana web UI after deployment.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/prometheus.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret --namespace <my-grafana-namespace> grafana -o jsonpath=\"{.data.admin-password}\" | base64 --decode ; echo\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS VPC\nDESCRIPTION: Execute an AWS CLI command to create a new VPC with a specified CIDR block. The command returns details about the created VPC, including its ID.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/create-shoot-into-existing-aws-vpc.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 create-vpc --cidr-block <cidr-block>\n{\n  \"Vpc\": {\n      \"VpcId\": \"vpc-ff7bbf86\",\n      \"InstanceTenancy\": \"default\",\n      \"Tags\": [],\n      \"CidrBlockAssociations\": [\n          {\n              \"AssociationId\": \"vpc-cidr-assoc-6e42b505\",\n              \"CidrBlock\": \"10.0.0.0/16\",\n              \"CidrBlockState\": {\n                  \"State\": \"associated\"\n              }\n          }\n      ],\n      \"Ipv6CidrBlockAssociationSet\": [],\n      \"State\": \"pending\",\n      \"DhcpOptionsId\": \"dopt-38f7a057\",\n      \"CidrBlock\": \"10.0.0.0/16\",\n      \"IsDefault\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Kubernetes Ingress Routing Rules in YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes Ingress resource named `vuejs-ingress`. It configures routing rules to direct traffic for a specific host (constructed using Gardener cluster and project names) to the `vuejs-svc` service running on port 8080. It requires a running Kubernetes cluster managed by Gardener and the corresponding service `vuejs-svc` to exist.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/service-cache-control.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n  name: vuejs-ingress\nspec:\n  rules:\n  - host: test.ingress.<GARDENER-CLUSTER>.<GARDENER-PROJECT>.shoot.canary.k8s-hana.ondemand.com\n    http:\n      paths:\n      - backend:\n          serviceName: vuejs-svc\n          servicePort: 8080\n```\n\n----------------------------------------\n\nTITLE: Retrieve Kubernetes Node Name\nDESCRIPTION: A shell command using kubectl and jq to get the node name from a Gardener Machine CRD. It identifies instances with issues, assisting in troubleshooting. Replace <machine-name> with the appropriate machine name.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get machine <machine-name> -o json | jq -r .status.node\n```\n\n----------------------------------------\n\nTITLE: Preparing Credential Rotation via kubectl in Gardener\nDESCRIPTION: Command to initiate the preparation phase of credential rotation for a shoot cluster by annotating the shoot resource. This starts the process of introducing new keys while keeping old ones valid.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/getting-started/features/credential-rotation.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-credentials-start\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes PodDisruptionBudget in YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes `PodDisruptionBudget` (PDB) resource using the `policy/v1` API. It specifies `maxUnavailable: 1`, meaning that at most one pod matching the selector can be voluntarily disrupted at any given time. The `selector.matchLabels` field (indicated by '...') is used to link this PDB to the specific pods it should protect, ensuring a minimum level of availability during planned disruptions like node maintenance or deployments.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2023/03-27-High-Availability-and-Zone-Outage-Toleration.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: policy/v1\nkind: PodDisruptionBudget\nspec:\n  maxUnavailable: 1\n  selector:\n    matchLabels:\n      ...\n```\n\n----------------------------------------\n\nTITLE: Querying CPU Usage with PromQL\nDESCRIPTION: This PromQL query calculates the average CPU usage across all instances. It's used to test the Prometheus setup by graphing overall CPU utilization.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/prometheus.md#2025-04-22_snippet_4\n\nLANGUAGE: promql\nCODE:\n```\n100 * (1 - avg by(instance)(irate(node_cpu{mode='idle'}[5m])))\n```\n\n----------------------------------------\n\nTITLE: Exporting Kubernetes KUBECONFIG Environment Variable with Bash\nDESCRIPTION: This snippet sets the KUBECONFIG environment variable to the path of the desired kubeconfig YAML file in a bash shell. The environment variable overrides the default kubeconfig path and controls which Kubernetes cluster kubectl commands interact with. Replace <PATH-TO-M>-CONFIG>/kubeconfig-dev.yaml with the path to your kubeconfig; input is via the user setting an environment variable, which affects child processes and shell sessions.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/client-tools/bash-kubeconfig.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbash$ export KUBECONFIG=<PATH-TO-M>-CONFIG>/kubeconfig-dev.yaml\n```\n\n----------------------------------------\n\nTITLE: Enabling DNS Hostnames for AWS VPC\nDESCRIPTION: Modify the VPC attributes to enable DNS hostnames, which is required by Gardener. This command sets the 'enableDnsHostnames' attribute to true.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/create-shoot-into-existing-aws-vpc.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 modify-vpc-attribute --vpc-id vpc-ff7bbf86 --enable-dns-hostnames\n```\n\n----------------------------------------\n\nTITLE: Analyzing Machine Controller Manager Logs\nDESCRIPTION: This text snippet illustrates how to interpret machine controller manager logs to diagnose node issues. Logs indicating changes in machine state or node conditions are captured to determine causes of node unhealthiness. Requires understanding of potential AWS-specific machine naming conventions or other infrastructure specifics for complete analysis.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/analyzing-node-failures.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2023-04-05 12:02:08 {\"log\":\"Conditions of Machine \\\"shoot--demo--cluster-pool-z1-6dffc-jh4z4\\\" with providerID \\\"aws:///eu-central-1/i-0a6ad1ca4c2e615dc\\\" and backing node \\\"ip-10-55-138-185.eu-central-1.compute.internal\\\" are changing\",\"pid\":\"1\",\"severity\":\"INFO\",\"source\":\"machine_util.go:629\"}\n```\n\nLANGUAGE: text\nCODE:\n```\n2023-04-05 12:02:08 {\"log\":\"Machine shoot--demo--cluster-pool-z1-6dffc-jh4z4 is unhealthy - changing MachineState to Unknown. Node conditions: [{Type:ClusterNetworkProblem Status:False LastHeartbeatTime:2023-04-05 11:58:39 +0000 UTC LastTransitionTime:2023-03-23 11:59:29 +0000 UTC Reason:NoNetworkProblems Message:no cluster network problems} ... {Type:Ready Status:Unknown LastHeartbeatTime:2023-04-05 11:55:27 +0000 UTC LastTransitionTime:2023-04-05 12:02:07 +0000 UTC Reason:NodeStatusUnknown Message:Kubelet stopped posting node status.}]\",\"pid\":\"1\",\"severity\":\"WARN\",\"source\":\"machine_util.go:637\"}\n```\n\n----------------------------------------\n\nTITLE: Installing cert-manager for TLS Certificate Provisioning\nDESCRIPTION: Commands to install cert-manager using Helm, which is required for provisioning TLS certificates used by the admission webhook of the Spin Operator. The installation includes adding the Jetstack repository and installing cert-manager with its required CRDs.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Add and update the Jetstack repository\nhelm repo add jetstack https://charts.jetstack.io\nhelm repo update\n\n# Install the cert-manager chart alongside with CRDs needed by cert-manager\nhelm install \\\n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.14.4 \\\n  --set installCRDs=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Tolerations for Fast Node Eviction in Kubernetes\nDESCRIPTION: YAML snippet demonstrating how to set custom tolerations on a pod to override cluster-wide settings for node eviction timing. This example shows immediate (0-second) eviction for pods on unreachable or not-ready nodes.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2023/03-27-High-Availability-and-Zone-Outage-Toleration.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  tolerations:\n  - key: \"node.kubernetes.io/unreachable\"\n    operator: \"Exists\"\n    effect: \"NoExecute\"\n    tolerationSeconds: 0\n  - key: \"node.kubernetes.io/not-ready\"\n    operator: \"Exists\"\n    effect: \"NoExecute\"\n    tolerationSeconds: 0\n```\n\n----------------------------------------\n\nTITLE: Creating a Curl Client Pod and Testing Connectivity - Kubernetes with Bash\nDESCRIPTION: This Bash snippet creates an interactive curl client pod in the 'customer1' namespace for network connectivity testing. Subsequent curl commands verify HTTP access to both NGINX servers before any network policy is applied. Requirements include an existing Kubernetes environment and the 'tutum/curl' image. The snippet enables manual verification of open network access across namespaces.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/network-isolation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# create a \\\"bash\\\" pod in one namespace\\nkubectl run -i --tty client --image=tutum/curl -n=customer1\n```\n\nLANGUAGE: bash\nCODE:\n```\n# get the index.html from the nginx of the namespace \\\"customer1\\\" => success\\ncurl http://nginx.customer1\\n# get the index.html from the nginx of the namespace \\\"customer2\\\" => success\\ncurl http://nginx.customer2\n```\n\n----------------------------------------\n\nTITLE: Applying the Seccomp Profile ConfigMap using kubectl (Console)\nDESCRIPTION: This command uses kubectl to apply the Kubernetes configuration defined in the 'seccomp-profile.yaml' file. This creates the ConfigMap resource in the cluster, making the custom Seccomp profile available.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/secure-seccomp.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f seccomp-profile.yaml\nconfigmap/seccomp-profile created\n```\n\n----------------------------------------\n\nTITLE: Verifying Access to Gardener Shoot Cluster with kubectl\nDESCRIPTION: A command to verify access to the Gardener Shoot cluster by listing available namespaces, which should display default, kube-node-lease, kube-public, and kube-system namespaces if properly connected.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Verify the access to the Gardener Shoot cluster\nkubectl get ns\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Resources and Verifying PV/PVC Creation (Bash)\nDESCRIPTION: These Bash commands demonstrate creating Kubernetes resources defined in 'postgres_deployment.yaml' using `kubectl create -f`. Subsequently, `kubectl get pv` and `kubectl get pvc` are used to verify that the PersistentVolumeClaim ('postgresdb-pvc') was created and that a corresponding PersistentVolume (PV) was dynamically provisioned and bound to the PVC.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/dynamic-pvc.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl create -f .\\postgres_deployment.yaml\npersistentvolumeclaim \"postgresdb-pvc\" created\n\n$ kubectl get pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                    STORAGECLASS   REASON    AGE\npvc-06c81c30-72ea-11e8-ada2-aa3b2329c8bb   9Gi        RWO            Delete           Bound     default/postgresdb-pvc   default                  3s\n\n$ kubectl get pvc\nNAME             STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\npostgresdb-pvc   Bound     pvc-06c81c30-72ea-11e8-ada2-aa3b2329c8bb   9Gi        RWO            default        8s\n```\n\n----------------------------------------\n\nTITLE: Azure Security Hardened Shoot Configuration\nDESCRIPTION: YAML configuration for creating a security hardened Gardener shoot cluster on Azure with baseline pod security, audit logging, and specific networking/infrastructure settings.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/hardened-shoot-report/hardened_shoots_docu_report.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Shoot\napiVersion: core.gardener.cloud/v1beta1\nmetadata:\n  name: azure\nspec:\n  cloudProfile:\n    name: az\n  kubernetes:\n    kubeAPIServer:\n      admissionPlugins:\n        - name: PodSecurity\n          config:\n            apiVersion: pod-security.admission.config.k8s.io/v1beta1\n            kind: PodSecurityConfiguration\n            defaults:\n              enforce: baseline\n              audit: baseline\n              warn: baseline\n          disabled: false\n      auditConfig:\n        auditPolicy:\n          configMapRef:\n            name: audit-policy\n    version: \"1.28\"\n    enableStaticTokenKubeconfig: false\n  networking:\n    type: calico\n    pods: 100.64.0.0/12\n    nodes: 10.180.0.0/16\n    services: 100.104.0.0/13\n    ipFamilies:\n      - IPv4\n  provider:\n    type: azure\n    controlPlaneConfig:\n      apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1\n      kind: ControlPlaneConfig\n    infrastructureConfig:\n      apiVersion: azure.provider.extensions.gardener.cloud/v1alpha1\n      kind: InfrastructureConfig\n      networks:\n        vnet:\n          cidr: 10.180.0.0/16\n        workers: 10.180.0.0/16\n      zoned: true\n    workers:\n      - cri:\n          name: containerd\n        name: worker-g7p4p\n        machine:\n          type: Standard_A4_v2\n          image:\n            name: gardenlinux\n          architecture: amd64\n        maximum: 2\n        minimum: 2\n        maxSurge: 1\n        maxUnavailable: 0\n        volume:\n          type: StandardSSD_LRS\n          size: 50Gi\n        zones:\n          - '3'\n    workersSettings:\n      sshAccess:\n        enabled: false\n  purpose: evaluation\n  region: westeurope\n  secretBindingName: secretBindingName\n```\n\n----------------------------------------\n\nTITLE: Querying Shoot API Server Availability using kubectl and jq\nDESCRIPTION: This command fetches the shoot resource and extracts the API server availability condition using kubectl and jq. It requires a kubeconfig for the Garden cluster, which can be obtained from the Gardener dashboard.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/faq/clusterhealthz.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get shoot <shoot-name> -o json | jq -r '.status.conditions[] | select(.type==\"APIServerAvailable\")'\n```\n\n----------------------------------------\n\nTITLE: Configuring Shoot Cluster for OIDC\nDESCRIPTION: YAML configuration for the shoot cluster to enable structured authentication using the authentication ConfigMap\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/oidc-login.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Shoot\napiVersion: garden.sapcloud.io/v1beta1\nmetadata:\n  name: mycluster\n  namespace: garden-project\n...\nspec:\n  kubernetes:\n    kubeAPIServer:\n      structuredAuthentication:\n        configMapName: authentication-config\n```\n\n----------------------------------------\n\nTITLE: Configuring Shoot Manifest for Existing VPC\nDESCRIPTION: Prepare the shoot manifest by specifying the region and VPC ID in the infrastructureConfig section. This configuration tells Gardener to use the existing VPC for the shoot cluster.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/create-shoot-into-existing-aws-vpc.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  region: <aws-region-of-vpc>\n  provider:\n    type: aws\n    infrastructureConfig:\n      apiVersion: aws.provider.extensions.gardener.cloud/v1alpha1\n      kind: InfrastructureConfig\n      networks:\n        vpc:\n          id: vpc-ff7bbf86\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Completing Credential Rotation via kubectl in Gardener\nDESCRIPTION: Command to initiate the completion phase of credential rotation for a shoot cluster by annotating the shoot resource. This invalidates the old keys/CA bundles after new ones have been deployed and verified.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/getting-started/features/credential-rotation.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n <shoot-namespace> annotate shoot <shoot-name> gardener.cloud/operation=rotate-credentials-complete\n```\n\n----------------------------------------\n\nTITLE: Deploying spin-operator with Helm and shim-executor\nDESCRIPTION: Commands to deploy the spin-operator Helm chart and apply the shim-executor configuration, completing the SpinKube infrastructure setup for running WebAssembly workloads.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm install spin-operator \\\n  --namespace spin-operator \\\n  --create-namespace \\\n  --version 0.1.0 \\\n  --wait \\\n  oci://ghcr.io/spinkube/charts/spin-operator\n\nkubectl apply -f https://github.com/spinkube/spin-operator/releases/download/v0.1.0/spin-operator.shim-executor.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Current K8s Context in PowerShell Window Title\nDESCRIPTION: This PowerShell function prompt_k8s extracts the current Kubernetes context using kubectl config current-context and updates the PowerShell window title with it. If context retrieval fails, it displays a fallback message. This code is meant to be added to the user's Microsoft.PowerShell_profile.ps1 file, is dependent on kubectl being accessible on PATH, and helps users avoid mistakes by clearly identifying the active cluster context. Input: none (reads from current configuration). Output: changes the console window title.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/client-tools/bash-kubeconfig.md#2025-04-22_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n function prompt_k8s {\n     $k8s_current_context = (kubectl config current-context) | Out-String\n     if($?) {\n         return $k8s_current_context\n     }else {\n         return \"No K8S contenxt found\"\n     }\n }\n\n $host.ui.rawui.WindowTitle = prompt_k8s\n```\n\n----------------------------------------\n\nTITLE: Checking Tailscale Operator Status in Bash\nDESCRIPTION: Command to verify successful installation of Tailscale operator by checking its status and IP address in the network.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/tailscale.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# tailscale status\n...\n100.83.240.121  tailscale-operator   tagged-devices linux   -\n...\n```\n\n----------------------------------------\n\nTITLE: Accessing a Pod using kubectl port-forward\nDESCRIPTION: This snippet demonstrates how to use kubectl port-forward to expose a pod's port on your local machine. This method directly forwards traffic from a local port to the pod without requiring a service.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/access-pod-from-local.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward <your-pod-name> <local-port>:<your-app-port>\n```\n\nLANGUAGE: bash\nCODE:\n```\nhttp(s)://localhost:<local-port>\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with Image Digest\nDESCRIPTION: This command starts a Docker container using an image digest (SHA-256 hash) instead of a tag, ensuring that the exact same image is used regardless of tag mutations. This provides deterministic deployments.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/content_trust.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name mynginx1 -P -d nginx@sha256:4771d09578c7c6a65299e110b3ee1c0a2592f5ea2618d23e4ffe7a4cab1ce5de\n```\n\n----------------------------------------\n\nTITLE: Running Tests and Verification in Gardener (Bash)\nDESCRIPTION: Commands to run tests and static code checks for the Gardener project using make. The 'test' command runs tests, while 'verify' runs both static code checks and tests.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/code/dependencies.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake test         # runs tests\nmake verify       # runs static code checks and test\n```\n\n----------------------------------------\n\nTITLE: Executing Ops-Pod Script in Gardener\nDESCRIPTION: This shell script command leverages the Gardener ops-toolbelt to deploy a root pod on a specific Kubernetes node, enabling root shell access. Prerequisite: kubectl must be available. Supply the target node name as an argument to the script.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n<path-to-ops-toolbelt-repo>/hacks/ops-pod <target-node>\n```\n\n----------------------------------------\n\nTITLE: Generating and Managing Custom kubeconfig with ServiceAccounts using Kubernetes and Deno TypeScript\nDESCRIPTION: This script automates the entire lifecycle of granting a user access to a Kubernetes cluster by creating or removing a ServiceAccount, the necessary Secret, RoleBinding/ClusterRoleBinding, and emitting a ready-to-use kubeconfig file to the console. It is written in TypeScript for the Deno runtime and relies on the kubectl CLI being available in the specified path. The script expects a username as the first argument and an optional '--delete' flag; it can be run cross-platform with suitable adjustments to the kubectl path. Required dependencies include Deno, access to kubectl, and sufficient cluster privileges. Inputs are the username and an optional '--delete' operation. Outputs are either the kubeconfig file or resource deletion actions. Limitations include shebang support on Windows and the need to customize RoleBindings for specific roles or namespaces as appropriate.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/client-tools/working-with-kubeconfig.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n#!/usr/bin/env -S deno run --allow-run\n\n/*\n* This script create Kubernetes ServiceAccount and other required resource and print KUBECONFIG to console.\n* Depending on your requirements you might want change clusterRoleBindingTemplate() function\n*\n* In order to execute this script it's required to install Deno.js https://deno.land/ (TypeScript & JavaScript runtime).\n* It's single executable binary for the major OSs from the original author of the Node.js\n* example: deno run --allow-run kubeconfig-for-custom-user.ts d00001\n* example: deno run --allow-run kubeconfig-for-custom-user.ts d00001 --delete\n*\n* known issue: shebang does works under the Linux but not for Windows Linux Subsystem\n*/\n\nconst KUBECTL = \"/usr/local/bin/kubectl\" //or\n// const KUBECTL = \"C:\\\\Program Files\\\\Docker\\\\Docker\\\\resources\\\\bin\\\\kubectl.exe\"\n\nconst serviceAccName = Deno.args[0]\nconst deleteIt = Deno.args[1]\nif (serviceAccName == undefined || serviceAccName == \"--delete\" ) {\n    console.log(\"please provide username as an argument, for example: deno run --allow-run kubeconfig-for-custom-user.ts USER_NAME [--delete]\")\n    Deno.exit(1)\n}\n\nif (deleteIt == \"--delete\") {\n    exec([KUBECTL, \"delete\", \"serviceaccount\", serviceAccName])\n    exec([KUBECTL, \"delete\", \"secret\", `${serviceAccName}-secret`])\n    exec([KUBECTL, \"delete\", \"clusterrolebinding\", `view-${serviceAccName}-global`])\n    Deno.exit(0)\n}\n\nawait exec([KUBECTL, \"create\", \"serviceaccount\", serviceAccName, \"-o\", \"json\"])\n\nawait exec([KUBECTL, \"create\", \"-o\", \"json\", \"-f\", \"-\"], secretYamlTemplate())\nlet secret = await exec([KUBECTL, \"get\", \"secret\", `${serviceAccName}-secret`, \"-o\", \"json\"])\nlet caCRT = secret.data[\"ca.crt\"];\nlet userToken = atob(secret.data[\"token\"]); //decode base64\n\nlet kubeConfig = await exec([KUBECTL, \"config\", \"view\", \"--minify\", \"-o\", \"json\"]);\nlet clusterApi = kubeConfig.clusters[0].cluster.server\nlet clusterName = kubeConfig.clusters[0].name\n\nawait exec([KUBECTL, \"create\", \"-o\", \"json\", \"-f\", \"-\"], clusterRoleBindingTemplate())\n\nconsole.log(kubeConfigTemplate(caCRT, userToken, clusterApi, clusterName, serviceAccName + \"-\" + clusterName))\n\nasync function exec(args: string[], stdInput?: string): Promise<Object> {\n    console.log(\"# \"+args.join(\" \"))\n    let opt: Deno.RunOptions = {\n        cmd: args,\n        stdout: \"piped\",\n        stderr: \"piped\",\n        stdin: \"piped\",\n    };\n\n    const p = Deno.run(opt);\n\n    if (stdInput != undefined) {\n        await p.stdin.write(new TextEncoder().encode(stdInput));\n        await p.stdin.close();\n    }\n\n    const status = await p.status()\n    const output = await p.output()\n    const stderrOutput = await p.stderrOutput()\n    if (status.code === 0) {\n        return JSON.parse(new TextDecoder().decode(output))\n    } else {\n        let error = new TextDecoder().decode(stderrOutput);\n        return \"\"\n    }\n}\n\nfunction clusterRoleBindingTemplate() {\n    return `\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: view-${serviceAccName}-global\nsubjects:\n- kind: ServiceAccount\n  name: ${serviceAccName}\n  namespace: default\nroleRef:\n  kind: ClusterRole\n  name: view\n  apiGroup: rbac.authorization.k8s.io    \n`\n}\n\nfunction secretYamlTemplate() {\n    return `\napiVersion: v1\nkind: Secret\nmetadata:\n  name: ${serviceAccName}-secret\n  annotations:\n    kubernetes.io/service-account.name: ${serviceAccName}\ntype: kubernetes.io/service-account-token`\n}\n\nfunction kubeConfigTemplate(certificateAuthority: string, token: string, clusterApi: string, clusterName: string, username: string) {\n    return `\n## KUBECONFIG generated on ${new Date()}\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: ${certificateAuthority}\n    server: ${clusterApi}\n  name: ${clusterName}\ncontexts:\n- context:\n    cluster: ${clusterName}\n    user: ${username}\n  name: ${clusterName}\ncurrent-context: ${clusterName}\nkind: Config\npreferences: {}\nusers:\n- name: ${username}\n  user:\n    token: ${token}\n`\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Shoot Cluster with kubectl\nDESCRIPTION: Command to apply a Shoot cluster manifest to the Kubernetes API server. Requires KUBECONFIG environment variable pointing to the Garden development cluster.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/create-delete-shoot.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f your-shoot-aws.yaml\n```\n\n----------------------------------------\n\nTITLE: Querying CloudProfile in Gardener\nDESCRIPTION: Command to check supported target versions for a specific IaaS provider in Gardener.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/maintain-shoot.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get cloudprofile [IAAS-SPECIFIC-PROFILE] -o yaml\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Deployment for Postgres (YAML)\nDESCRIPTION: This YAML snippet defines a Kubernetes Deployment named 'postgres'. It configures a single replica Pod running a Postgres image. The Pod uses environment variables for configuration and mounts the previously defined 'postgresdb-pvc' PersistentVolumeClaim at two specified paths ('/var/lib/postgresql/data' and '/var/log/postgresql/logs') using subPaths within the volume.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/dynamic-pvc.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\n  namespace: default\n  labels:\n    app: postgres\n  annotations:\n    deployment.kubernetes.io/revision: \"1\"\nspec:\n  replicas: 1\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 1\n      maxSurge: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      name: postgres\n      labels:\n        app: postgres\n    spec:\n      containers:\n        - name: postgres\n          image: \"cpettech.docker.repositories.sap.ondemand.com/jtrack_postgres:howto\"\n          env:\n            - name: POSTGRES_USER\n              value: postgres\n            - name: POSTGRES_PASSWORD\n              value: p5FVqfuJFrM42cVX9muQXxrC3r8S9yn0zqWnFR6xCoPqxqVQ\n            - name: POSTGRES_INITDB_XLOGDIR\n              value: \"/var/log/postgresql/logs\"\n          ports:\n            - containerPort: 5432\n          volumeMounts:\n            - mountPath: /var/lib/postgresql/data\n              name: postgre-db\n              subPath: data     # https://github.com/kubernetes/website/pull/2292.  Solve the issue of crashing initdb due to non-empty directory (i.e. lost+found)\n            - mountPath: /var/log/postgresql/logs\n              name: postgre-db\n              subPath: logs\n      volumes:\n        - name: postgre-db\n          persistentVolumeClaim:\n            claimName: postgresdb-pvc\n            readOnly: false\n      imagePullSecrets:\n      - name: cpettechregistry\n```\n\n----------------------------------------\n\nTITLE: Checking Prometheus Deployment Status\nDESCRIPTION: This Helm command checks the status of the Prometheus deployment. It's used to retrieve the Prometheus server name, which is needed for configuring Grafana data source.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/prometheus.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm status <your-prometheus-name>\n```\n\n----------------------------------------\n\nTITLE: Basic Shoot Configuration YAML Example\nDESCRIPTION: Example showing a basic worker pool configuration in Gardener shoot YAML format. Demonstrates machine type, OS image, volume settings, and autoscaling parameters.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/getting-started/shoots.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nworkers:\n- name: cpu-worker\n  minimum: 2\n  maximum: 5\n  maxSurge: 1\n  machine:\n    type: n1-standard-4\n    image:\n      name: gardenlinux\n      version: latest\n  volume:\n    type: pd-ssd\n    size: 50Gi\n  zones:\n  - europe-west1-b\n  - europe-west1-c\n```\n\n----------------------------------------\n\nTITLE: Displaying the Current Kubernetes Context in Bash Prompt using Shell Function\nDESCRIPTION: This snippet adds a function prompt_k8s to your .bash_profile, which uses kubectl config current-context to get the current Kubernetes context and updates the bash PS1 prompt to display it each time the prompt is shown. Dependencies include bash and kubectl. The function uses shell exit status for error handling and only alters the prompt if kubectl returns successfully. Inputs: none (uses current environment). Output: the current context in the prompt, helping avoid mistakes when working across clusters.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/client-tools/bash-kubeconfig.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nprompt_k8s(){\n  k8s_current_context=$(kubectl config current-context 2> /dev/null)\n  if [[ $? -eq 0 ]] ; then echo -e \"(${k8s_current_context}) \"; fi\n}\n \n \nPS1+='$(prompt_k8s)'\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Replicas in Kubernetes Deployment or StatefulSet\nDESCRIPTION: This YAML snippet shows how to set the number of replicas for a Kubernetes Deployment or StatefulSet. The 'replicas' field specifies the desired number of pod replicas to maintain.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2023/03-27-High-Availability-and-Zone-Outage-Toleration.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment | StatefulSet\nspec:\n  replicas: ...\n```\n\n----------------------------------------\n\nTITLE: Checking kwasm Deployment Status with kubectl\nDESCRIPTION: Commands to verify the status of the kwasm-operator deployment by checking pod status and logs in the kwasm namespace. This confirms proper installation of the containerd shim on cluster nodes.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kwasm get pod\n```\n\n----------------------------------------\n\nTITLE: Configuring VerticalPodAutoscaler in Gardener-managed Kubernetes Clusters\nDESCRIPTION: YAML configuration for enabling and configuring the Vertical Pod Autoscaler in a Gardener-managed Kubernetes cluster. This snippet shows how to set various VPA parameters including eviction thresholds, rate limits, and recommendation intervals.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2023/03-27-High-Availability-and-Zone-Outage-Toleration.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  kubernetes:\n    verticalPodAutoscaler:\n      enabled: true\n      evictAfterOOMThreshold: 10m0s\n      evictionRateBurst: 1\n      evictionRateLimit: -1\n      evictionTolerance: 0.5\n      recommendationMarginFraction: 0.15\n      updaterInterval: 1m0s\n      recommenderInterval: 1m0s\n```\n\n----------------------------------------\n\nTITLE: Declaring Expiring Kubernetes Versions in CloudProfile - YAML\nDESCRIPTION: This YAML snippet defines a CloudProfile spec listing available Kubernetes versions, including one with an expirationDate. It demonstrates how to configure multiple Kubernetes versions and mark specific versions as expired with an ISO8601 timestamp. Gardener uses this specification to determine whether a shoot referencing an expired version needs to be forcefully updated. Expected input is a CloudProfile resource; the output affects update behavior in dependent shoots.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/maintain-shoot.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetes:\n    versions:\n    - version: 1.12.8\n    - version: 1.11.10\n    - version: 1.11.09\n    - version: 1.10.12\n      expirationDate: \"2019-04-13T08:00:00Z\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting the Default StorageClass using kubectl (Bash)\nDESCRIPTION: This Bash command uses `kubectl describe sc default` to display detailed information about the Kubernetes storage class named 'default'. The output shows its properties, including annotations like 'storageclass.kubernetes.io/is-default-class=true', the provisioner (e.g., 'kubernetes.io/aws-ebs'), parameters ('type=gp2'), and the default reclaim policy ('Delete').\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/dynamic-pvc.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl describe sc default\nName:            default\nIsDefaultClass:  Yes\nAnnotations:     kubectl.kubernetes.io/last-applied-configuration={\"apiVersion\":\"storage.k8s.io/v1beta1\",\"kind\":\"StorageClass\",\"metadata\":{\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Exists\"},\"name\":\"default\",\"namespace\":\"\"},\"parameters\":{\"type\":\"gp2\"},\"provisioner\":\"kubernetes.io/aws-ebs\"}\n,storageclass.kubernetes.io/is-default-class=true\nProvisioner:           kubernetes.io/aws-ebs\nParameters:            type=gp2\nAllowVolumeExpansion:  <unset>\nMountOptions:          <none>\nReclaimPolicy:         Delete\nVolumeBindingMode:     Immediate\nEvents:                <none>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Port Forwarding for Prometheus\nDESCRIPTION: This Bash command sets up port forwarding to access the Prometheus web UI on localhost:9090. It forwards traffic from the local machine to the Prometheus server pod in the Kubernetes cluster.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/prometheus.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward -n <your-prometheus-namespace> <your-prometheus-server-pod> 9090:9090\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shoot Status in Kubernetes\nDESCRIPTION: Command to get detailed shoot status information including conditions, constraints, and operations in YAML format\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/getting-started/observability/shoot-status.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get shoot -oyaml\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Autoscaler Status using kubectl\nDESCRIPTION: This command retrieves the `cluster-autoscaler-status` ConfigMap from the `kube-system` namespace in YAML format. This ConfigMap contains information about the current state and activities of the Gardener cluster autoscaler, including details about node groups and scaling events. Requires `kubectl` access to the target shoot cluster.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/getting-started/features/cluster-autoscaler.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get cm -n kube-system cluster-autoscaler-status -oyaml\n```\n\n----------------------------------------\n\nTITLE: Installing Spin Operator CRDs and Runtime Class on Kubernetes\nDESCRIPTION: Commands to install the Spin Operator Custom Resource Definitions and the Runtime Class needed by wasmtime-spin-v2, which are prerequisites for running WebAssembly workloads in the cluster.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install Spin Operator CRDs\nkubectl apply -f https://github.com/spinkube/spin-operator/releases/download/v0.1.0/spin-operator.crds.yaml\n\n# Install the Runtime Class\nkubectl apply -f https://github.com/spinkube/spin-operator/releases/download/v0.1.0/spin-operator.runtime-class.yaml\n```\n\n----------------------------------------\n\nTITLE: Automating Container Image Tagging and Pushing with Bash\nDESCRIPTION: This Bash script automates the process of assigning a unique, incremented tag to a Docker image, building it, and pushing it to a registry (Docker Hub). It ensures each deployment update uses a new tag by querying the registry for the latest tag, incrementing the version, and updating the deployment accordingly. Dependencies include curl, sed, tr, awk, grep, Docker CLI, and npm. Variables PROJECT and REPOSITORY should be updated according to your own settings, and docker login must be completed before running. Input requires the project/repository names; output is a new versioned image pushed to the registry. Limitations: assumes semantic versioning with 'v' prefix and access rights to the repository.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/image-pull-policy.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n#!/usr/bin/env bash\n\n# Set the docker image name and the corresponding repository\n# Ensure that you change them in the deployment.yml as well.\n# You must be logged in with docker login.\n#\n# CHANGE THIS TO YOUR Docker.io SETTINGS\n#\nPROJECT=awesomeapp\nREPOSITORY=cp-enablement\n\n# causes the shell to exit if any subcommand or pipeline returns a non-zero status.\n#\nset -e\n\n# set debug mode\n#\nset -x\n\n# build my nodeJS app\n#\nnpm run build\n\n# get the latest version ID from the Docker.io registry and increment them\n#\nVERSION=$(curl https://registry.hub.docker.com/v1/repositories/$REPOSITORY/$PROJECT/tags  | sed -e 's/[][]//g' -e 's/\"//g' -e 's/ //g' | tr '}' '\\n'  | awk -F: '{print $3}' | grep v| tail -n 1)\nVERSION=${VERSION:1}\n((VERSION++))\nVERSION=\"v$VERSION\"\n\n\n# build the new docker image\n#\necho '>>> Building new image'\n\necho '>>> Push new image'\ndocker push $REPOSITORY/$PROJECT:$VERSION\n```\n\n----------------------------------------\n\nTITLE: Modified Kubeconfig for Tailscale Access\nDESCRIPTION: Example YAML configuration showing how to modify the kubeconfig file to point to the Kubernetes service exposed in the Tailscale network.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/tailscale.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nclusters:\n  - cluster:\n      certificate-authority-data: <base64 encoded secret>\n      server: https://kubernetes\n    name: my-cluster\n...\n```\n\n----------------------------------------\n\nTITLE: Testing GPU Workload Deployment\nDESCRIPTION: Commands to execute into the deep learning workbench container and run a Keras example training job.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/gpu.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it deeplearning-workbench-8676458f5d-p4d2v -- /bin/bash\ncd /keras/example\npython imdb_cnn.py\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Environment Variables with YAML in Kubernetes\nDESCRIPTION: This scenario describes handling pod errors caused by missing environment variables using YAML. The deployment creates a pod that fails if environment variables are absent. A ConfigMap is used to provide the required variables. Ensure 'kubectl' is installed and connected to the correct cluster for applying the configuration. The deployment requires manual intervention to fix missing artifacts using ConfigMaps.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/debug-a-pod.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl delete deployment termination-demo\nkubectl delete configmaps app-env\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1beta2 \nkind: Deployment\nmetadata:\n  name: termination-demo\n  labels:\n     app: termination-demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: termination-demo\n  template:\n    metadata:\n      labels:\n        app: termination-demo\n    spec:\n      containers:\n      - name: termination-demo-container\n        image: debian\n        command: [\"/bin/sh\"]\n        args: [\"-c\", \"sed \\\"s/foo/bar/\\\" < $MYFILE\"]\n```\n\nLANGUAGE: shell\nCODE:\n```\nEvents:\n  FirstSeen\\tLastSeen\\tCount\\tFrom\\t\\t\\t\\t\\t\\t\\tSubObjectPath\\t\\t\\t\\tType\\t\\tReason\\tMessage\n  ---------\\t--------\\t-----\\t----\\t\\t\\t\\t\\t\\t\\t-------------\\t\\t\\t\\t--------\\t------\\t-------\n  19m\\t\\t19m\\t\\t1\\tdefault-scheduler\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tNormal\\t\\tScheduled\\tSuccessfully assigned termination-demo-5fb484867d-xz2x9 to ip-10-250-17-112.eu-west-1.compute.internal\n  19m\\t\\t19m\\t\\t1\\tkubelet, ip-10-250-17-112.eu-west-1.compute.internal\\t\\t\\t\\tNormal\\t\\tSuccessfulMountVolume\\tMountVolume.SetUp succeeded for volume \"default-token-sgccm\" \n  19m\\t\\t19m\\t\\t4\\tkubelet, ip-10-250-17-112.eu-west-1.compute.internal\\tspec.containers{termination-demo-container}\\tNormal\\t\\tPulling\\tpulling image \"debian\"\n  19m\\t\\t19m\\t\\t4\\tkubelet, ip-10-250-17-112.eu-west-1.compute.internal\\tspec.containers{termination-demo-container}\\tNormal\\t\\tPulled\\tSuccessfully pulled image \"debian\"\n  19m\\t\\t19m\\t\\t4\\tkubelet, ip-10-250-17-112.eu-west-1.compute.internal\\tspec.containers{termination-demo-container}\\tNormal\\t\\tCreated\\tCreated container\n  19m\\t\\t19m\\t\\t4\\tkubelet, ip-10-250-17-112.eu-west-1.compute.internal\\tspec.containers{termination-demo-container}\\tNormal\\t\\tStarted\\tStarted container\n  19m\\t\\t14m\\t\\t24\\tkubelet, ip-10-250-17-112.eu-west-1.compute.internal\\tspec.containers{termination-demo-container}\\tWarning\\tBackOff\\tBack-off restarting failed container\n  19m\\t\\t4m\\t\\t69\\tkubelet, ip-10-250-17-112.eu-west-1.compute.internal\\t\\t\\t\\tWarning\\tFailedSync\\tError syncing pod\n\n```\n\nLANGUAGE: shell\nCODE:\n```\n/bin/sh: 1: cannot open : No such file\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-env\ndata:\n  MYFILE: \"/etc/profile\"\n---\napiVersion: apps/v1beta2 \nkind: Deployment\nmetadata:\n  name: termination-demo\n  labels:\n     app: termination-demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: termination-demo\n  template:\n    metadata:\n      labels:\n        app: termination-demo\n    spec:\n      containers:\n      - name: termination-demo-container\n        image: debian\n        command: [\"/bin/sh\"]\n        args: [\"-c\", \"sed \\\"s/foo/bar/\\\" < $MYFILE\"]\n        envFrom:\n        - configMapRef:\n            name: app-env\n```\n\n----------------------------------------\n\nTITLE: Modifying PersistentVolume Reclaim Policy using kubectl (Bash)\nDESCRIPTION: This sequence of Bash commands shows how to change the reclaim policy of a PersistentVolume (PV). First, `kubectl get pv` displays the current PV status, including the 'Delete' reclaim policy. Then, `kubectl edit pv <pv-name>` is used to interactively change the policy to 'Retain'. Finally, `kubectl get pv` confirms the policy has been updated.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/dynamic-pvc.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                    STORAGECLASS   REASON    AGE\npvc-06c81c30-72ea-11e8-ada2-aa3b2329c8bb   9Gi        RWO            Delete           Bound     default/postgresdb-pvc   default                  44m\n\n# change the reclaim policy from \"Delete\" to \"Retain\"\n$ kubectl edit pv pvc-06c81c30-72ea-11e8-ada2-aa3b2329c8bb\npersistentvolume \"pvc-06c81c30-72ea-11e8-ada2-aa3b2329c8bb\" edited\n\n# check the reclaim policy afterwards\n$ kubectl get pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                    STORAGECLASS   REASON    AGE\npvc-06c81c30-72ea-11e8-ada2-aa3b2329c8bb   9Gi        RWO            Retain           Bound     default/postgresdb-pvc   default                  45m\n```\n\n----------------------------------------\n\nTITLE: Deploying a Sample SpinApp WebAssembly Application\nDESCRIPTION: Command to deploy a sample WebAssembly application using the SpinApp CRD, which demonstrates how to run a WASM application on the Kubernetes cluster.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/spinkube/spin-operator/main/config/samples/simple.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating ClusterRoleBinding for OIDC User\nDESCRIPTION: YAML definition for creating a ClusterRoleBinding to authorize an authenticated OIDC user with view permissions\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/oidc-login.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: viewer-test\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: view\nsubjects:\n- apiGroup: rbac.authorization.k8s.io\n  kind: User\n  name: unique-issuer-identifier:test@test.com\n```\n\n----------------------------------------\n\nTITLE: Deleting a PersistentVolumeClaim and Observing PV Status (Bash)\nDESCRIPTION: This sequence of Bash commands demonstrates the effect of deleting a PersistentVolumeClaim (PVC) when the PersistentVolume (PV) has a 'Retain' reclaim policy. Initial `kubectl get pvc` and `kubectl get pv` commands show the bound state. After deleting the PVC using `kubectl delete pvc postgresdb-pvc`, a final `kubectl get pv` shows the PV's status has changed to 'Released', indicating the volume data is preserved but no longer bound to a claim.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/dynamic-pvc.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Check pvc and pv before deletion\n$ kubectl get pvc\nNAME             STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\npostgresdb-pvc   Bound     pvc-06c81c30-72ea-11e8-ada2-aa3b2329c8bb   9Gi        RWO            default        50m\n\n$ kubectl get pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                    STORAGECLASS   REASON    AGE\npvc-06c81c30-72ea-11e8-ada2-aa3b2329c8bb   9Gi        RWO            Retain           Bound     default/postgresdb-pvc   default                  50m\n\n# delete pvc\n$ kubectl delete pvc postgresdb-pvc\npersistentvolumeclaim \"postgresdb-pvc\" deleted\n\n# pv changed to status \"Released\"\n$ kubectl get pv\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM                    STORAGECLASS   REASON    AGE\npvc-06c81c30-72ea-11e8-ada2-aa3b2329c8bb   9Gi        RWO            Retain           Released   default/postgresdb-pvc   default                  51m\n```\n\n----------------------------------------\n\nTITLE: Describing a Failing Kubernetes Pod\nDESCRIPTION: Fetches detailed information about a specific pod, including events. This command is helpful to diagnose the reason behind an ErrImagePull by showing the events related to image pulling failures.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/missing-registry-permission.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl describe pod fail-6667d7685d-7v6w8\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI Credentials\nDESCRIPTION: Use the 'aws configure' command to set up AWS CLI with your credentials and default settings for subsequent AWS operations.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/create-shoot-into-existing-aws-vpc.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws configure\nAWS Access Key ID [None]: <ACCESS_KEY_ID>\nAWS Secret Access Key [None]: <SECRET_ACCESS_KEY>\nDefault region name [None]: <DEFAULT_REGION>\nDefault output format [None]: <DEFAULT_OUTPUT_FORMAT>\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Receivers for Gardener Alerts in YAML\nDESCRIPTION: This snippet demonstrates how to configure email receivers in the shoot specification to receive notifications for predefined alerts of your control plane. These email addresses will automatically receive notifications for alerts with visibility 'owner' or 'all'.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/getting-started/observability/alerts.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  monitoring:\n    alerting:\n      emailReceivers:\n      - john.doe@example.com\n```\n\n----------------------------------------\n\nTITLE: Viewing SpinApp Application Logs\nDESCRIPTION: Command to view the logs of the deployed SpinApp application pod, which shows the available routes and confirms the application is running properly.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs simple-spinapp-56687588d9-nbrtq\n```\n\n----------------------------------------\n\nTITLE: Pod Events Inspection with Shell\nDESCRIPTION: This shell output snippet shows events related to the 'termination-demo' pod. It highlights a failed image pull due to a wrong image name 'debiann'. This data can be obtained using 'kubectl describe pod termination-demo'. It provides useful details about various events and reasons for failures.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/debug-a-pod.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nEvents:\n  FirstSeen\\tLastSeen\\tCount\\tFrom\\t\\t\\t\\t\\t\\t\\tSubObjectPath\\t\\t\\t\\tType\\t\\tReason\\t\\tMessage\n  ---------\\t--------\\t-----\\t----\\t\\t\\t\\t\\t\\t\\t-------------\\t\\t\\t\\t--------\\t------\\t\\t-------\n  2m\\t\\t2m\\t\\t1\\tdefault-scheduler\\t\\t\\t\\t\\t\\t\\t\\t\\tNormal\\t\\tScheduled\\t\\tSuccessfully assigned termination-demo to ip-10-250-17-112.eu-west-1.compute.internal\n  2m\\t\\t2m\\t\\t1\\tkubelet, ip-10-250-17-112.eu-west-1.compute.internal\\t\\t\\t\\tNormal\\t\\tSuccessfulMountVolume\\tMountVolume.SetUp succeeded for volume \"default-token-sgccm\" \n  2m\\t\\t1m\\t\\t4\\tkubelet, ip-10-250-17-112.eu-west-1.compute.internal\\tspec.containers{termination-demo-container}\\tNormal\\t\\tPulling\\t\\tpulling image \"debiann\"\n  2m\\t\\t1m\\t\\t4\\tkubelet, ip-10-250-17-112.eu-west-1.compute.internal\\tspec.containers{termination-demo-container}\\tWarning\\tFailed\\t\\tFailed to pull image \"debiann\": rpc error: code = Unknown desc = Error: image library/debiann:latest not found\n  2m\\t\\t54s\\t\\t10\\tkubelet, ip-10-250-17-112.eu-west-1.compute.internal\\t\\t\\t\\tWarning\\tFailedSync\\tError syncing pod\n  2m\\t\\t54s\\t\\t6\\tkubelet, ip-10-250-17-112.eu-west-1.compute.internal\\tspec.containers{termination-demo-container}\\tNormal\\t\\tBackOff\\t\\tBack-off pulling image \"debiann\"\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Autoscaler Settings in Gardener Shoot Resource\nDESCRIPTION: This YAML snippet shows how to configure cluster autoscaler settings in a Gardener shoot resource. It includes parameters for expander strategy, scan interval, scale down delays, and utilization threshold to optimize autoscaling behavior.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2023/03-27-High-Availability-and-Zone-Outage-Toleration.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  kubernetes:\n    clusterAutoscaler:\n      expander: \"least-waste\"\n      scanInterval: 10s\n      scaleDownDelayAfterAdd: 60m\n      scaleDownDelayAfterDelete: 0s\n      scaleDownDelayAfterFailure: 3m\n      scaleDownUnneededTime: 30m\n      scaleDownUtilizationThreshold: 0.5\n```\n\n----------------------------------------\n\nTITLE: Describing a Pending Kubernetes Pod\nDESCRIPTION: This bash command describes a Kubernetes pod that is in a Pending state due to insufficient CPU resources. It demonstrates how to get detailed information about pod scheduling issues.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/debug-a-pod.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl describe po termination-demo-fdb7bb7d9-mzvfw\nName:           termination-demo-fdb7bb7d9-mzvfw\nNamespace:      default\n...\nContainers:\n  termination-demo-container:\n    Image:      debian\n    Port:       <none>\n    Host Port:  <none>\n    Command:\n      /bin/sh\n    Args:\n      -c\n      sleep 10 && echo Sleep expired > /dev/termination-log\n    Requests:\n      cpu:        6\n    Environment:  <none>\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from default-token-t549m (ro)\nConditions:\n  Type           Status\n  PodScheduled   False\nEvents:\n  Type     Reason            Age               From               Message\n  ----     ------            ----              ----               -------\n  Warning  FailedScheduling  9s (x7 over 40s)  default-scheduler  0/2 nodes are available: 2 Insufficient cpu.\n```\n\n----------------------------------------\n\nTITLE: Applying and Verifying the Pod with Custom Seccomp Profile (Console)\nDESCRIPTION: These commands use kubectl first to apply the Pod definition from 'my-seccomp-pod.yaml', creating the Pod that uses the custom profile. Then, 'kubectl get pod' is used to check the status of the 'seccomp-app' Pod, confirming it is running successfully with the applied Seccomp profile.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/secure-seccomp.md#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f my-seccomp-pod.yaml\npod/seccomp-app created\n\n$ kubectl get pod seccomp-app\nNAME         READY   STATUS    RESTARTS   AGE\nseccomp-app  1/1     Running   0          42s\n```\n\n----------------------------------------\n\nTITLE: Testing the SpinApp with curl\nDESCRIPTION: Command to test the deployed SpinApp by making an HTTP request to the /hello endpoint through the port-forwarded connection, which should return a greeting message.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:8000/hello\n```\n\n----------------------------------------\n\nTITLE: Applying and Verifying the Seccomp Installer DaemonSet (Console)\nDESCRIPTION: These commands first apply the DaemonSet definition from 'seccomp-installer.yaml' using kubectl. Then, they list the pods managed by this DaemonSet in the 'kube-system' namespace, filtering by the label 'security=seccomp', to verify that the installer pod is running on the node(s).\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/secure-seccomp.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f seccomp-installer.yaml\ndaemonset.apps/seccomp-installer created\n\n$ kubectl -n kube-system get pods -l security=seccomp\nNAME                      READY   STATUS    RESTARTS   AGE\nseccomp-installer-wjbxq   1/1     Running   0          21s\n```\n\n----------------------------------------\n\nTITLE: Declaring Expiring Machine Image Versions in CloudProfile - YAML\nDESCRIPTION: This YAML snippet details a CloudProfile specifying available machineImages for a cluster, along with individual version entries and an expirationDate. It is used by Gardener to determine forceful updates for shoot clusters referencing expired machine image versions. Dependencies include the correct naming of machine images and versioning; expiration dates are adhered to during cluster maintenance.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/maintain-shoot.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  machineImages:\n  - name: coreos\n    versions:\n    - version: 2191.5.0\n    - version: 2191.4.1\n    - version: 2135.6.0\n      expirationDate: \"2019-04-13T08:00:00Z\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve Cloud Provider Instance ID\nDESCRIPTION: This shell command extracts the cloud provider specific instance ID from a Machine CRD. Useful for identifying problematic AWS instances, the command outputs the provider's ID for further cloud-specific investigation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get machine <machine-name> -o json | jq -r .spec.providerID\n```\n\n----------------------------------------\n\nTITLE: Applying the Namespace Isolation NetworkPolicy - Kubernetes with Bash\nDESCRIPTION: This Bash snippet applies the previously defined NetworkPolicy YAML manifest to both namespaces using kubectl. The cluster must have the YAML file saved locally as './network-policy.yaml'. Applying this policy restricts pods in each namespace to only receive traffic from within the same namespace. Access from external sources and other namespaces is blocked, as confirmed through subsequent connectivity tests.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/network-isolation.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f ./network-policy.yaml -n=customer1\\nkubectl apply -f ./network-policy.yaml -n=customer2\n```\n\n----------------------------------------\n\nTITLE: Downloading Kubeconfig for Gardener Cluster\nDESCRIPTION: This bash command retrieves and decodes the kubeconfig file necessary for accessing your Gardener cluster, giving full administrative access.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/knative-install.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace shoot--my-project--my-cluster get secret kubecfg --output jsonpath={.data.kubeconfig} | base64 --decode > my-cluster.yaml\n```\n\n----------------------------------------\n\nTITLE: Observing InitContainer Behavior in Kubernetes\nDESCRIPTION: Bash command output showing the pod startup process with InitContainers, demonstrating how the pod stays in the Init state while waiting for dependencies to become available.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/container-startup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get po -w\nNAME                                READY     STATUS    RESTARTS   AGE\nnginx-deployment-5cc79d6bfd-t9n8h   1/1       Running   0          5d\nprivileged-pod                      1/1       Running   0          4d\nwebapp-fdcb49cbc-4gs4n   0/1       Pending   0         0s\nwebapp-fdcb49cbc-4gs4n   0/1       Pending   0         0s\nwebapp-fdcb49cbc-4gs4n   0/1       Init:0/1   0         0s\nwebapp-fdcb49cbc-4gs4n   0/1       Init:0/1   0         1s\n\n\n$ kubectl  logs webapp-fdcb49cbc-4gs4n\nError from server (BadRequest): container \"go-url-shortener\" in pod \"webapp-fdcb49cbc-4gs4n\" is waiting to start: PodInitializing\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Using Tagged Images\nDESCRIPTION: This YAML manifest creates a Kubernetes Deployment named 'rss-site' with one replica of an nginx:1.13.9 container exposed on port 80. The deployment uses label selectors to manage the pods.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/content_trust.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rss-site\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: web\n  template:\n    metadata:\n      labels:\n        app: web\n    spec:\n      containers:\n        - name: front-end\n          image: nginx:1.13.9\n          ports:\n            - containerPort: 80\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Pod Creation with Invalid Seccomp Profile (Console)\nDESCRIPTION: These commands demonstrate how to troubleshoot a Pod failing due to an invalid Seccomp profile. First, the broken Pod definition ('broken-seccomp-pod.yaml') is applied. Then, 'kubectl get pod' shows the Pod stuck in the 'ContainerCreating' status. Finally, 'kubectl describe pod' reveals the specific error event from the kubelet, indicating it failed to load the specified Seccomp profile because the file does not exist at the expected path.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/secure-seccomp.md#2025-04-22_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl apply -f broken-seccomp-pod.yaml\npod/broken-seccomp created\n\n$ kubectl get pod broken-seccomp\nNAME            READY   STATUS              RESTARTS   AGE\nbroken-seccomp  1/1     ContainerCreating   0          2m\n\n$ kubectl describe pod broken-seccomp\nName:               broken-seccomp\nNamespace:          default\n....\nEvents:\n  Type     Reason                  Age               From                     Message\n  ----     ------                  ----              ----                     -------\n  Normal   Scheduled               18s               default-scheduler        Successfully assigned kube-system/broken-seccomp to docker-desktop\n  Warning  FailedCreatePodSandBox  4s (x2 over 18s)  kubelet, docker-desktop  Failed create pod sandbox: rpc error: code = Unknown desc = failed to make sandbox docker config for pod \"broken-seccomp\": failed to generate sandbox security options\nfor sandbox \"broken-seccomp\": failed to generate seccomp security options for container: cannot load seccomp profile \"/var/lib/kubelet/seccomp/not-existing-profile.json\": open /var/lib/kubelet/seccomp/not-existing-profile.json: no such file or directory\n```\n\n----------------------------------------\n\nTITLE: Examining Application Failure Without Orchestration in Kubernetes\nDESCRIPTION: Bash command output showing how an application fails when started before its database dependency is ready, resulting in a crash loop backoff scenario.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/container-startup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl logs webapp-958cf5567-h247n\ntime=\"2018-06-12T11:02:42Z\" level=info msg=\"Connecting to Postgres database using: host=`postgres:5432` dbname=`url_shortener_db` username=`user`\\n\"\ntime=\"2018-06-12T11:02:42Z\" level=fatal msg=\"failed to start: failed to open connection to database: dial tcp: lookup postgres on 100.64.0.10:53: no such host\\n\"\n\n\n$ kubectl get po -w\nNAME                                READY     STATUS    RESTARTS   AGE\nwebapp-958cf5567-h247n   0/1       Pending   0         0s\nwebapp-958cf5567-h247n   0/1       Pending   0         0s\nwebapp-958cf5567-h247n   0/1       ContainerCreating   0         0s\nwebapp-958cf5567-h247n   0/1       ContainerCreating   0         1s\nwebapp-958cf5567-h247n   0/1       Error     0         2s\nwebapp-958cf5567-h247n   0/1       Error     1         3s\nwebapp-958cf5567-h247n   0/1       CrashLoopBackOff   1         4s\nwebapp-958cf5567-h247n   0/1       Error     2         18s\nwebapp-958cf5567-h247n   0/1       CrashLoopBackOff   2         29s\nwebapp-958cf5567-h247n   0/1       Error     3         43s\nwebapp-958cf5567-h247n   0/1       CrashLoopBackOff   3         56s\n```\n\n----------------------------------------\n\nTITLE: YAML Example of Shoot Toleration Configuration\nDESCRIPTION: Example showing how to configure shoot tolerations to allow placement on tainted seeds.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/regional-restrictions.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n90-shoot.yaml#L360-L361\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Gates in shoot.yaml\nDESCRIPTION: Demonstrates how to enable a Kubernetes feature gate by adding it to the appropriate section in the shoot.yaml configuration file. The feature gate can be added to sections like kubelet, kubernetes, kubeAPIServer, kubeControllerManager, kubeScheduler, or kubeProxy.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/faq/add-feature-gates.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nSectionName:\n    featureGates:\n        SomeKubernetesFeature: true\n```\n\n----------------------------------------\n\nTITLE: Adding Repository Content to Gardener Documentation (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to add content from an entire repository to the Gardener documentation. It includes examples of key elements such as directory naming, file structure, frontmatter, and content source specification.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/adding-existing-documentation.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- dir: machine-controller-manager\n  structure:\n  - file: _index.md\n    frontmatter:\n      title: Machine Controller Manager\n      weight: 1\n      description: Declarative way of managing machines for Kubernetes cluster\n    source: https://github.com/gardener/machine-controller-manager/blob/master/README.md\n  - fileTree: https://github.com/gardener/machine-controller-manager/tree/master/docs\n```\n\n----------------------------------------\n\nTITLE: Inspecting Pod Status and Executing Commands within a Container (Bash)\nDESCRIPTION: These Bash commands first use `kubectl get po` to list running pods and check the status of the 'postgres' pod. Then, `kubectl exec -it <pod-name> bash` is used to open an interactive shell session inside the running container. The subsequent `ls` commands verify the content of the directories mounted from the PersistentVolumeClaim.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/dynamic-pvc.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl get po\nNAME                        READY     STATUS    RESTARTS   AGE\npostgres-7f485fd768-c5jf9   1/1       Running   0          32m\n\n$ kubectl exec -it postgres-7f485fd768-c5jf9 bash\n\nroot@postgres-7f485fd768-c5jf9:/# ls /var/lib/postgresql/data/\nbase    pg_clog       pg_dynshmem  pg_ident.conf  pg_multixact  pg_replslot  pg_snapshots  pg_stat_tmp  pg_tblspc    PG_VERSION  postgresql.auto.conf  postmaster.opts\nglobal  pg_commit_ts  pg_hba.conf  pg_logical     pg_notify     pg_serial    pg_stat       pg_subtrans  pg_twophase  pg_xlog     postgresql.conf       postmaster.pid\n\nroot@postgres-7f485fd768-c5jf9:/# ls /var/log/postgresql/logs/\n000000010000000000000001  archive_status\n```\n\n----------------------------------------\n\nTITLE: GCP Security Hardened Shoot Configuration\nDESCRIPTION: YAML configuration for creating a security hardened Gardener shoot cluster on GCP with baseline pod security, audit logging, and specific networking/infrastructure settings.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/hardened-shoot-report/hardened_shoots_docu_report.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Shoot\napiVersion: core.gardener.cloud/v1beta1\nmetadata:\n  name: gcp\nspec:\n  cloudProfile:\n    name: gcp\n  kubernetes:\n    kubeAPIServer:\n      admissionPlugins:\n        - name: PodSecurity\n          config:\n            apiVersion: pod-security.admission.config.k8s.io/v1beta1\n            kind: PodSecurityConfiguration\n            defaults:\n              enforce: baseline\n              audit: baseline\n              warn: baseline\n          disabled: false\n      auditConfig:\n        auditPolicy:\n          configMapRef:\n            name: audit-policy\n    version: \"1.28\"\n    enableStaticTokenKubeconfig: false\n  networking:\n    type: calico\n    pods: 100.64.0.0/12\n    nodes: 10.180.0.0/16\n    services: 100.104.0.0/13\n    ipFamilies:\n      - IPv4\n  provider:\n    type: gcp\n    controlPlaneConfig:\n      apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1\n      kind: ControlPlaneConfig\n      zone: europe-west1-b\n    infrastructureConfig:\n      apiVersion: gcp.provider.extensions.gardener.cloud/v1alpha1\n      kind: InfrastructureConfig\n      networks:\n        workers: 10.180.0.0/16\n    workers:\n      - cri:\n          name: containerd\n        name: worker-bex82\n        machine:\n          type: n1-standard-2\n          image:\n            name: gardenlinux\n          architecture: amd64\n        maximum: 2\n        minimum: 2\n        maxSurge: 1\n        maxUnavailable: 0\n        volume:\n          type: pd-balanced\n          size: 50Gi\n        zones:\n          - europe-west1-b\n    workersSettings:\n      sshAccess:\n        enabled: false\n  purpose: evaluation\n  region: europe-west1\n  secretBindingName: secretBindingName\n```\n\n----------------------------------------\n\nTITLE: Inspecting Pod Status in Minikube\nDESCRIPTION: Retrieves the status of all pods on a Minikube cluster. Useful for identifying pods that are experiencing image pull errors, as they will have a status of ErrImagePull or ImagePullBackOff.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/missing-registry-permission.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ (minikube) kubectl get pods\nNAME                      READY     STATUS         RESTARTS   AGE\nclient-5b65b6c866-cs4ch   1/1       Running        1          1m\nfail-6667d7685d-7v6w8     0/1       ErrImagePull   0          <invalid>\nvuejs-578574b75f-5x98z    1/1       Running        0          1d\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Creating a Pod with YAML in Kubernetes\nDESCRIPTION: This YAML snippet deletes an existing pod named 'termination-demo' and creates a new one with the same name. The pod uses a container from the image 'debiann' and executes a command to sleep for a duration and log to '/dev/termination-log'. The dependency is Kubernetes with a namespace setup correctly. The pod can be created with 'kubectl apply -f <file-name>'. The key limitation is the misspelled image name, which causes a pull error.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/debug-a-pod.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl delete pod termination-demo\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod \nmetadata:\n  name: termination-demo\nspec:\n  containers:\n  - name: termination-demo-container\n    image: debiann\n    command: [\"/bin/sh\"]\n    args: [\"-c\", \"sleep 10 \\u0026\\u0026 echo Sleep expired > /dev/termination-log\"]\n```\n\n----------------------------------------\n\nTITLE: Disabling NGINX Cache in Kubernetes Ingress via Annotation in YAML\nDESCRIPTION: This YAML snippet modifies a Kubernetes Ingress resource (`vuejs-ingress`) to disable caching by the NGINX Ingress controller. It achieves this by adding the `ingress.kubernetes.io/cache-enable: \"false\"` annotation to the metadata section. This is useful during development to ensure the latest static files are always served, bypassing potentially aggressive default caching behavior. It depends on the NGINX Ingress controller being used.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/service-cache-control.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: networking.k8s.io/v1beta1\nkind: Ingress\nmetadata:\n  annotations:\n    ingress.kubernetes.io/cache-enable: \"false\"\n  name: vuejs-ingress\nspec:\n  rules:\n  - host: test.ingress.<GARDENER-CLUSTER>.<GARDENER-PROJECT>.shoot.canary.k8s-hana.ondemand.com\n    http:\n      paths:\n      - backend:\n          serviceName: vuejs-svc\n          servicePort: 8080\n```\n\n----------------------------------------\n\nTITLE: CloudProfile Configuration for Kubernetes Version Updates\nDESCRIPTION: Example YAML configuration showing how to define supported Kubernetes versions in a CloudProfile, including version 1.11.0 and 1.10.x.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/maintain-shoot.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetes:\n    versions:\n    - version: 1.11.0\n    - version: 1.10.5\n    - version: 1.10.0\n```\n\n----------------------------------------\n\nTITLE: Adding a Single File to Gardener Documentation (YAML)\nDESCRIPTION: This YAML snippet shows how to add a single topic to the Gardener website by providing a link to it in the manifest. It includes elements for directory naming, file structure, frontmatter properties, and content source.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/adding-existing-documentation.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- dir: <dir-name>\n  structure:\n  - file: <file-name>\n    frontmatter:\n      title: <topic-name>\n      description: <topic-description>\n      weight: <weight>\n    source: https://github.com/<path>/<file>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes API Server RequestHeader Authentication - Bash\nDESCRIPTION: These configuration flags set up the Kubernetes API server to authenticate requests received via an authenticating proxy. The --requestheader-client-ca-file specifies a dedicated CA certificate to verify proxy-signed client certificates, while the username and group headers (X-Remote-User, X-Remote-Group) define HTTP headers to extract user and group identity. Expected inputs are file paths for the CA certificate and header names, used as command-line arguments; output is a more secure API server that only trusts authenticated proxy traffic. Proper separation of proxy and client CAs is essential to prevent privilege escalation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/insecure-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"--requestheader-client-ca-file=/srv/kubernetes/ca/ca-proxy.crt\\n--requestheader-username-headers=X-Remote-User\\n--requestheader-group-headers=X-Remote-Group\"\n```\n\n----------------------------------------\n\nTITLE: Querying Kubernetes Cluster Information with Kubectl in Bash\nDESCRIPTION: This snippet demonstrates running the kubectl cluster-info command in bash to display the cluster 'master' and core DNS endpoints for the context specified by KUBECONFIG. The output provides critical connection URLs and indicates which cluster is active, aiding in debugging and verifying the current cluster config. Requires kubectl to be installed and configured.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/client-tools/bash-kubeconfig.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbash$ kubectl cluster-info\nKubernetes master is running at https://api.dev.garden.shoot.canary.k8s-hana.ondemand.com\nKubeDNS is running at https://api.dev.garden.shoot.canary.k8s-hana.ondemand.com/api/v1/proxy/namespaces/kube-system/services/kube-dns\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\nbash$ \n```\n\n----------------------------------------\n\nTITLE: Using Unpinned Base Image in Dockerfile - Docker - Dockerfile\nDESCRIPTION: Demonstrates a problematic Dockerfile pattern that uses an unpinned (latest) base image, such as \"alpine\" without a tag or digest. This approach can lead to unpredictable builds if the upstream image changes. Requires Docker as dependency. No parameters, takes no input; output is the built image, but lacks build reproducibility and may break across environments.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/dockerfile-pitfall.md#2025-04-22_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM alpine\n\n```\n\n----------------------------------------\n\nTITLE: Running a Failing Pod with Kubectl\nDESCRIPTION: Demonstrates how to create a pod in Kubernetes that references a non-existent Docker image, resulting in an ErrImagePull. The command is intended to showcase error handling for missing images.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/missing-registry-permission.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubectl run -i --tty fail --image=tutum/curl:1.123456\n```\n\n----------------------------------------\n\nTITLE: Configuring Horizontal Pod Autoscaler Settings in Gardener Shoot\nDESCRIPTION: This YAML snippet demonstrates how to configure Horizontal Pod Autoscaler (HPA) settings for a Gardener-managed Kubernetes cluster. It specifies various HPA parameters such as sync period, tolerance, downscale stabilization, and initialization periods.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2023/03-27-High-Availability-and-Zone-Outage-Toleration.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Shoot\nspec:\n  kubernetes:\n    kubeControllerManager:\n      horizontalPodAutoscaler:\n        syncPeriod: 15s\n        tolerance: 0.1\n        downscaleStabilization: 5m0s\n        initialReadinessDelay: 30s\n        cpuInitializationPeriod: 5m0s\n```\n\n----------------------------------------\n\nTITLE: Structuring Gardener Pull Request Descriptions using Markdown Template\nDESCRIPTION: This Markdown template defines the standard structure for pull request descriptions in the Gardener project. It includes placeholders for explaining the PR's purpose (`What this PR does / why we need it`), linking to fixed issues (`Which issue(s) this PR fixes`), providing special reviewer notes (`Special notes for your reviewer`), and adding formatted release notes (`Release note`) with specific category (improvement|noteworthy|action) and target group (user|operator|developer) tags. An example release note block structure is included within the comments.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/pr-description.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```md\n**What this PR does / why we need it**:\n<!-- Describe the purpose of this PR and what changes have been proposed in it -->\n**Which issue(s) this PR fixes**:\nFixes #\n<!-- If you are opening a PR in response to a specific issue, linking it will automatically \nclose the issue once the PR has been merged -->\n**Special notes for your reviewer**:\n<!-- Any additional information your reviewer might need to know to better process your PR -->\n**Release note**:\n<!--  Write your release note:\n1. Enter your release note in the below block.\n2. If no release note is required, just write \"NONE\" within the block.\n\nFormat of block header: <category> <target_group>\nPossible values:\n- category:       improvement|noteworthy|action\n- target_group:   user|operator|developer\n-->\n```other operator\nEXAMPLE\n\\```\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Knative Domain\nDESCRIPTION: This snippet involves using the kubectl command to update the Knative config-domain ConfigMap, essential for applying custom domains to your Knative setup.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/knative-install.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace knative-serving get configmaps config-domain --output yaml\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes API Server Exposure in Tailscale\nDESCRIPTION: Command output showing both the Tailscale operator and exposed Kubernetes API server in the Tailscale network status.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/tailscale.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# tailscale status\n...\n100.83.240.121  tailscale-operator   tagged-devices linux   -\n100.96.191.87   kubernetes           tagged-devices linux   idle, tx 19548 rx 71656\n...\n```\n\n----------------------------------------\n\nTITLE: Completing Knative Installation\nDESCRIPTION: This command completes the installation of Knative components by applying the main YAML files for serving, eventing, and monitoring.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/knative-install.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply --filename https://github.com/knative/serving/releases/download/v0.12.1/serving.yaml \\\n--filename https://github.com/knative/eventing/releases/download/v0.12.1/eventing.yaml \\\n--filename https://github.com/knative/serving/releases/download/v0.12.1/monitoring.yaml\n```\n\n----------------------------------------\n\nTITLE: Shoot Specification Update Example\nDESCRIPTION: YAML configuration showing how to confine Shoot specification updates to maintenance windows using the confineSpecUpdateRollout flag.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/news/003/release.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n.spec.maintenance.confineSpecUpdateRollout=true\n```\n\n----------------------------------------\n\nTITLE: YAML Example of Shoot Seed Selector Configuration\nDESCRIPTION: Example showing how to configure shoot control plane placement using seedSelector to restrict to specific labeled seeds.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/regional-restrictions.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspec.seedSelector\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Gardener Cluster\nDESCRIPTION: This command sequence shows how to delete a Gardener cluster using kubectl, by annotating the shoot resource for deletion and then deleting it.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/knative-install.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --kubeconfig garden-my-project.yaml --namespace garden--my-project annotate shoot my-cluster confirmation.gardener.cloud/deletion=true\n\nkubectl --kubeconfig garden-my-project.yaml --namespace garden--my-project delete shoot my-cluster\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter Metadata in YAML for Gardener Documentation\nDESCRIPTION: This snippet demonstrates how to structure front matter metadata for a Gardener documentation file. It includes essential properties like title, description, and weight for controlling page organization.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/style-guide/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Getting Started\ndescription: Guides to get you accustomed with Gardener\nweight: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Removing Sensitive Files from Git History with filter-branch\nDESCRIPTION: Command that uses git filter-branch to remove a specified file from the entire Git history. The command processes all branches and tags, removes the targeted file, and removes any empty commits that result.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/commit-secret-fail.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit filter-branch --force --index-filter \\\n'git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA' \\\n--prune-empty --tag-name-filter cat -- --all\n```\n\n----------------------------------------\n\nTITLE: Deploying a Resource-Intensive Kubernetes Deployment\nDESCRIPTION: This YAML manifest creates a Kubernetes deployment that requests a high amount of CPU resources. It's used to demonstrate what happens when resource requests exceed cluster capacity.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/debug-a-pod.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1beta2 \nkind: Deployment\nmetadata:\n  name: termination-demo\n  labels:\n     app: termination-demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: termination-demo\n  template:\n    metadata:\n      labels:\n        app: termination-demo\n    spec:\n      containers:\n      - name: termination-demo-container\n        image: debian\n        command: [\"/bin/sh\"]\n        args: [\"-c\", \"sleep 10 && echo Sleep expired > /dev/termination-log\"]\n        resources:\n          requests:\n            cpu: \"600m\" \n```\n\n----------------------------------------\n\nTITLE: Installing kubectl oidc-login Plugin\nDESCRIPTION: Command to install the kubectl oidc-login plugin using krew package manager\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/oidc-login.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nkubectl krew install oidc-login\n```\n\n----------------------------------------\n\nTITLE: AWS Bastion Instance Creation\nDESCRIPTION: Command to create the bastion EC2 instance with all required configurations.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nec2 run-instances --iam-instance-profile Name=<bastion-IAM-instance-profile-name> --image-id <image-id>  --count 1 --instance-type t3.nano --key-name <ssh-public-key-name>  --security-group-ids <bastion-security-group-id> --subnet-id <subnet-id> --associate-public-ip-address --user-data <file-path-to-userdata> --tag-specifications ResourceType=instance,Tags=[{Key=Name,Value=<bastion-instance-name>},{Key=component,Value=<mytag>}] ResourceType=volume,Tags=[{Key=component,Value=<mytag>}]\"\n```\n\n----------------------------------------\n\nTITLE: Shoot Cluster Auto-Update Configuration\nDESCRIPTION: YAML configuration for a shoot cluster specifying maintenance window and auto-update settings for Kubernetes version.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/maintain-shoot.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetes:\n    version: 1.10.0\n  maintenance:\n    timeWindow:\n      begin: 220000+0000\n      end: 230000+0000\n    autoUpdate:\n      kubernetesVersion: true\n```\n\n----------------------------------------\n\nTITLE: Markdown Placeholder Usage\nDESCRIPTION: Example showing how to format command placeholders using angle brackets\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/formatting-guide.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nkubectl describe pod <pod-name>\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding to Access the SpinApp Service\nDESCRIPTION: Command to set up port forwarding from localhost port 8000 to the SpinApp service port 80, allowing local access to the application for testing.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl port-forward services/simple-spinapp 8000:80\n```\n\n----------------------------------------\n\nTITLE: Comparing Container Image Sizes - Docker CLI - bash\nDESCRIPTION: Shows how to use the 'docker images' command in bash to list all local Docker images, revealing their tags and sizes. Useful for comparing image sizes and highlighting the efficiency of using smaller base images like those based on Alpine Linux. Requires Docker installed and some locally built or pulled images for output. Output displays image repository, tag, ID, creation date, and size.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/dockerfile-pitfall.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$  docker images\nREPOSITORY                                                      TAG                     IMAGE ID            CREATED             SIZE\npostgres                                                        9.6.9-alpine            6583932564f8        13 days ago         39.26 MB\npostgres                                                        9.6                     d92dad241eff        13 days ago         235.4 MB\npostgres                                                        10.4-alpine             93797b0f31f4        13 days ago         39.56 MB\n\n```\n\n----------------------------------------\n\nTITLE: AWS Bastion Security Group Creation\nDESCRIPTION: Commands to create and configure the bastion security group and IAM roles.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\naws ec2 create-security-group --group-name <bastion-security-group-name>  --description ssh-access --vpc-id <VPC-ID>\n```\n\nLANGUAGE: sh\nCODE:\n```\naws ec2 create-tags --resources <bastion-security-group-id> --tags Key=component,Value=<tag>\n```\n\nLANGUAGE: sh\nCODE:\n```\naws ec2 authorize-security-group-ingress --group-id <bastion-security-group-id>  --protocol tcp --port 22 --cidr 0.0.0.0/0\n```\n\nLANGUAGE: sh\nCODE:\n```\naws iam create-role --role-name <shoot-name>-bastions\n```\n\n----------------------------------------\n\nTITLE: Applying Cluster Specification in Kubernetes\nDESCRIPTION: This snippet uses the kubectl CLI to apply a cluster specification YAML file to create a Kubernetes cluster. It is essential that the namespace in the YAML file matches your Gardener project namespace.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/knative-install.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply --filename my-cluster.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Mermaid Diagram in Markdown\nDESCRIPTION: This snippet demonstrates how to create a basic Mermaid diagram using fenced code block syntax in Markdown. It shows a simple graph with nodes and edges.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/shortcodes.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\ngraph LR;\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Knative CRDs\nDESCRIPTION: This command installs Knative Custom Resource Definitions (CRDs) by applying the Knative serving, eventing, and monitoring YAML files. This step is crucial to avoid race conditions that cause errors during the installation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/knative-install.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply --selector knative.dev/crd-install=true \\\n--filename https://github.com/knative/serving/releases/download/v0.12.1/serving.yaml \\\n--filename https://github.com/knative/eventing/releases/download/v0.12.1/eventing.yaml \\\n--filename https://github.com/knative/serving/releases/download/v0.12.1/monitoring.yaml\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Previous Deployments in Kubernetes\nDESCRIPTION: This snippet demonstrates how to delete a previous deployment and configmap in Kubernetes. It's a preparatory step before deploying a new configuration.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/debug-a-pod.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkubectl delete deployment termination-demo\nkubectl delete configmaps app-env\n```\n\n----------------------------------------\n\nTITLE: AWS Security Group Configuration\nDESCRIPTION: Set of commands to check and configure security group settings for SSH access.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\naws ec2 describe-instances --instance-ids <instance-id>\n```\n\nLANGUAGE: sh\nCODE:\n```\naws ec2 describe-security-groups --group-ids=<security-group-id>\n```\n\nLANGUAGE: sh\nCODE:\n```\naws ec2 authorize-security-group-ingress --group-id <security-group-id>  --protocol tcp --port 22 --cidr 0.0.0.0/0\n```\n\n----------------------------------------\n\nTITLE: Adding a Folder to Gardener Documentation (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to add multiple topics to the Gardener website at once by linking a whole folder. It includes elements for directory naming and file tree structure.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/adding-existing-documentation.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n  - dir: <dir-name>\n    structure:\n    - fileTree: https://github.com/<path>/<folder>\n```\n\n----------------------------------------\n\nTITLE: Implementing Responsive Images with HTML5 Picture Element\nDESCRIPTION: Example of using HTML5's picture element to serve responsive images based on different viewport sizes. Demonstrates how to specify different image sources for various screen widths from mobile to desktop.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/images.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n    <!-- default, laptop-width-L max 1200px -->\n    <source srcset=\"image-link\"\n            media=\"(min-width: 1000px)\">\n    <!-- default, laptop-width max 1000px -->\n    <source srcset=\"image-link\"\n            media=\"(min-width: 1400px)\">\n    <!-- default, tablets-width max 750px -->\n    <source srcset=\"image-link\"\n            media=\"(min-width: 750px)\">\n    <!-- default, phones-width max 450px -->\n    <img src=\"image-link\" />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: CloudProfile with Version Expiration Configuration\nDESCRIPTION: Example YAML showing how to configure Kubernetes versions with expiration dates in a CloudProfile.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/maintain-shoot.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetes:\n    versions:\n    - version: 1.12.8\n    - version: 1.11.10\n    - version: 1.10.13\n    - version: 1.10.12\n      expirationDate: \"2019-04-13T08:00:00Z\"\n```\n\n----------------------------------------\n\nTITLE: Setting KUBECONFIG and Verifying Prompt Context in Bash\nDESCRIPTION: This snippet sets the bash environment variable KUBECONFIG to a specific kubeconfig file and shows an example of the command prompt after customization, demonstrating how the active Kubernetes context appears as a prefix. Requires prior setup of the prompt_k8s function from the previous snippet. Input: KUBECONFIG path. Output: Visible context in the shell prompt.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/client-tools/bash-kubeconfig.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbash$ export KUBECONFIG=/Users/d023280/Documents/workspace/gardener-ui/kubeconfig_gardendev.yaml \nbash (garden_dev)$ \n```\n\n----------------------------------------\n\nTITLE: SSH Key Extraction and Connection Setup\nDESCRIPTION: Commands for extracting private key and establishing SSH connections through the bastion.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\numask 077\n\nkubectl get secret <shoot-name>.ssh-keypair -o json | jq -r .data.\\\"id_rsa\\\" | base64 -d > id_rsa.key\n```\n\nLANGUAGE: sh\nCODE:\n```\nssh -i <path-to-private-key> gardener@<public-bastion-instance-ip> \n```\n\nLANGUAGE: sh\nCODE:\n```\nssh  -i <path-to-private-key> -o ProxyCommand=\"ssh -W %h:%p -i <private-key> -o IdentitiesOnly=yes -o StrictHostKeyChecking=no gardener@<public-ip-bastion>\" gardener@<private-ip-target-instance> -o IdentitiesOnly=yes -o StrictHostKeyChecking=no\n```\n\n----------------------------------------\n\nTITLE: Defining a Pod with an Invalid Seccomp Profile (YAML)\nDESCRIPTION: This YAML snippet defines a Pod named 'broken-seccomp' intended for troubleshooting. It attempts to apply a non-existent Seccomp profile 'not-existing-profile.json' using the 'seccomp.security.alpha.kubernetes.io/pod' annotation. This configuration is expected to fail.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/secure-seccomp.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: broken-seccomp\n  namespace: default\n  annotations:\n    seccomp.security.alpha.kubernetes.io/pod: \"localhost/not-existing-profile.json\"\nspec:\n  containers:\n  - name: pause\n    image: k8s.gcr.io/pause:3.1\n```\n\n----------------------------------------\n\nTITLE: Cleaning up SpinKube and Related Resources\nDESCRIPTION: Series of commands to clean up all deployed resources including the SpinApp, executors, operators, and CRDs. This performs a complete removal of all components installed as part of the tutorial.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Delete the spin app and its executor\nkubectl delete spinapp simple-spinapp\nkubectl delete spinappexecutors.core.spinoperator.dev containerd-shim-spin\n\n# Uninstall the spin-operator chart\nhelm -n spin-operator uninstall spin-operator\n\n# Remove the kwasm.sh/kwasm-node annotation from nodes\nkubectl annotate node --all kwasm.sh/kwasm-node-\n\n# Uninstall the kwasm-operator chart\nhelm -n kwasm uninstall kwasm-operator\n\n# Uninstall the cert-manager chart\nhelm -n cert-manager uninstall cert-manager\n\n# Delete the runtime class and SpinApp CRDs\nkubectl delete runtimeclass wasmtime-spin-v2\nkubectl delete crd spinappexecutors.core.spinoperator.dev\nkubectl delete crd spinapps.core.spinoperator.dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Concept Documentation\nDESCRIPTION: Demonstrates the standard markdown format for concept documentation, including frontmatter metadata, hierarchical headings, and related links section.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/style-guide/concept_template.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nTitle: Concept Topic Structure\nDescription: Describes the contents of a concept topic\n---\n\n# Concept Title\n(the topic title can also be placed in the frontmatter)\n\n## Overview\nThis section provides an overview of the topic and the information provided in it. \n\n## Relevant heading 1\nThis section gives the user all the information needed in order to understand the topic.\n\n### Relevant subheading\nThis adds additional information that belongs to the topic discussed in the parent heading.\n\n## Relevant heading 2\nThis section gives the user all the information needed in order to understand the topic.\n\n## Related Links\n* [Link 1]()\n* [Link 2]()\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Container with Tags\nDESCRIPTION: This command starts a Docker container named 'mynginx1' with the nginx:1.13.9 tag in detached mode (-d) and publishing all exposed ports (-P).\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/content_trust.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name mynginx1 -P -d nginx:1.13.9\n```\n\n----------------------------------------\n\nTITLE: Setting Custom DNS for Knative\nDESCRIPTION: This snippet shows how to map your custom domain to the external IP or CNAME retrieved for the Knative ingress gateway, required for custom domain setup.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/knative-install.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n*.knative.<my domain> == A 35.233.41.212\n#.knative.<my domain> == CNAME a317a278525d111e89f272a164fd35fb-1510370581.eu-central-1.elb.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: SSH Access via Gardenctl\nDESCRIPTION: Command to establish SSH connection to target node using gardenctl's automated bastion setup.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngardenctl ssh <target-node>\n```\n\n----------------------------------------\n\nTITLE: Accessing Plutono Credentials\nDESCRIPTION: kubectl command to retrieve Plutono URL from cluster monitoring secret annotation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/getting-started/observability/components.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get secret <clustername>.monitoring -o jsonpath=\"{.metadata.annotations.url}\"\n```\n\n----------------------------------------\n\nTITLE: Security Requirements Table - Control Plane Configuration\nDESCRIPTION: Markdown table showing control plane security requirements including API server settings, worker node configurations, and kubelet security settings.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/kubernetes-hardening.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|ID| Description | Secure By Default | Comments |\n| -------- | ------- | ------- | ------- |\n|242390|Kubernetes API server must have anonymous authentication disabled| :white_check_mark: |Disabled unless you enable it via [enableAnnonymousAuthentication]|  \n|245543|Kubernetes API Server must disable token authentication to protect information in transit|:white_check_mark:|Disabled unless you enable it via [enableStaticTokenKubeconfig]|\n|242400|Kubernetes API server must have Alpha APIs disabled| :white_check_mark:| Disabled unless you enable it via [featureGates]|\n|242436|Kubernetes API server must have the ValidatingAdmissionWebhook enabled|:white_check_mark:|Enabled unless you disable it explicitly via [admissionPlugins]|\n```\n\n----------------------------------------\n\nTITLE: Targeting Shoot Cluster with Gardenctl\nDESCRIPTION: Command to target a specific Shoot cluster which sets up context and credentials.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngardenctl target shoot <target-shoot>\n```\n\n----------------------------------------\n\nTITLE: Bastion User Data Script Generation\nDESCRIPTION: Bash script to generate user data for bastion instance setup.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash -eu\nsaveUserDataFile () {\n  ssh_key=$1\n\ncat > gardener-bastion-userdata.sh <<EOF\n#!/bin/bash -eu\nid gardener || useradd gardener -mU\nmkdir -p /home/gardener/.ssh\necho \"$ssh_key\" > /home/gardener/.ssh/authorized_keys\nchown gardener:gardener /home/gardener/.ssh/authorized_keys\necho \"gardener ALL=(ALL) NOPASSWD:ALL\" >/etc/sudoers.d/99-gardener-user\nEOF\n}\n\n\nif [ -p /dev/stdin ]; then\n    read -r input\n    cat | saveUserDataFile \"$input\"\nelse\n    pbpaste | saveUserDataFile \"$input\"\nfi\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Gardener (Bash)\nDESCRIPTION: Command to update dependencies using go modules in the Gardener project. It uses 'go mod vendor' to reset the vendor directory and 'go mod tidy' to ensure go.mod matches the source code.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/code/dependencies.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake revendor\n```\n\n----------------------------------------\n\nTITLE: Applying Shoot Manifest\nDESCRIPTION: Apply the prepared shoot manifest using kubectl to create the shoot cluster in the specified VPC.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/create-shoot-into-existing-aws-vpc.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f your-shoot-aws.yaml\n```\n\n----------------------------------------\n\nTITLE: Generate User Data Script Execution\nDESCRIPTION: Command to execute the user data generation script with SSH key.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get secret aws-gvisor.ssh-keypair -o json | jq -r .data.\\\"id_rsa.pub\\\" | ./generate-userdata.sh\n```\n\n----------------------------------------\n\nTITLE: Targeting Garden Cluster with Gardenctl\nDESCRIPTION: Command to target a specific Garden cluster containing Shoot definitions.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngardenctl target garden <target-garden>\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Internet Gateway\nDESCRIPTION: Create an Internet Gateway using AWS CLI. This step is necessary as Gardener requires an Internet Gateway attached to the VPC.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/create-shoot-into-existing-aws-vpc.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 create-internet-gateway\n{\n    \"InternetGateway\": {\n        \"Tags\": [],\n        \"InternetGatewayId\": \"igw-c0a643a9\",\n        \"Attachments\": []\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing kwasm-operator Logs\nDESCRIPTION: Command to view the logs of the kwasm-operator pod, which provides information about the status of the containerd shim provisioning process on cluster nodes.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/04-18-SpinKube-Gardener-Shoot-Cluster.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl -n kwasm logs kwasm-operator-6c76c5f94b-8zt4s\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Role Policy\nDESCRIPTION: JSON policy definition for bastion IAM role permissions.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\"Version\": \"2012-10-17\",\n\"Statement\": [\n    {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"ec2:DescribeRegions\"\n        ],\n        \"Resource\": [\n            \"*\"\n        ]\n    }\n]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Knative Ingressgateway External IP\nDESCRIPTION: This kubectl command retrieves the external IP address for the Knative ingress gateway. It is part of the setup process for configuring custom domains and DNS entries.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/knative-install.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace istio-system get service knative-ingressgateway\n```\n\n----------------------------------------\n\nTITLE: Error Message for Cloud Provider Capacity Issues\nDESCRIPTION: An example error message that occurs when a cloud provider cannot fulfill a node creation request due to insufficient capacity for the requested instance type in a specific availability zone.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/scalability.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nCloud provider message - machine codes error: code = [Internal] message = [InsufficientInstanceCapacity: We currently do not have sufficient <instance type> capacity in the Availability Zone you requested. Our system will be working on provisioning additional capacity. \n```\n\n----------------------------------------\n\nTITLE: Verifying Shoot Cluster Creation\nDESCRIPTION: Check the status of the created shoot cluster using kubectl to ensure it has been properly created and is operational.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/create-shoot-into-existing-aws-vpc.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get shoot $SHOOT_NAME -n $SHOOT_NAMESPACE\nNAME           CLOUDPROFILE   VERSION   SEED   DOMAIN           OPERATION   PROGRESS   APISERVER   CONTROL   NODES   SYSTEM   AGE\n<SHOOT_NAME>   aws            1.15.0    aws    <SHOOT_DOMAIN>   Succeeded   100        True        True      True    True     20m\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Root User in Docker Container\nDESCRIPTION: Demonstrates how to create a non-root user and group in a Docker container for improved security. This command creates a new group 'anygroup' and a user 'myuser' belonging to that group.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2018/06.11-Anti-Patterns.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nRUN groupadd -r anygroup && useradd -r -g anygroup myuser\n```\n\n----------------------------------------\n\nTITLE: AWS Instance Profile Setup\nDESCRIPTION: Commands to create and configure instance profile for the bastion.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\naws iam create-instance-profile --instance-profile-name <name>\n```\n\nLANGUAGE: sh\nCODE:\n```\naws iam add-role-to-instance-profile --instance-profile-name <instance-profile-name> --role-name <role-name>\n```\n\n----------------------------------------\n\nTITLE: Force Pushing Changes to Git Tags\nDESCRIPTION: Command to force push against Git tags to ensure sensitive files are removed from tagged releases.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/commit-secret-fail.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin --force --tags\n```\n\n----------------------------------------\n\nTITLE: Markdown Command Example\nDESCRIPTION: Example of properly formatting a kubectl command and its output\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/formatting-guide.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nkubectl get pods --output=wide\n\nNAME     READY     STATUS    RESTARTS   AGE    IP           NODE\nnginx    1/1       Running   0          13s    10.200.0.4   worker0\n```\n\n----------------------------------------\n\nTITLE: ETCD Performance Error Log Example\nDESCRIPTION: Example log output showing a slow read-only range request in ETCD that took approximately 14 seconds to execute, indicating performance issues with the underlying storage.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2020/11.20-Case-Study-Migrating-ETCD-Volumes-in-Production.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\netcd-main-0 etcd 2020-09-03 06:00:07.556157 W | etcdserver: read-only range request \"key:\\\"/registry/deployments/shoot--pwhhcd--devcluster2/kube-apiserver\\\" \" with result \"range_response_count:1 size:9566\" took too long (13.95374909s) to execute\n```\n\n----------------------------------------\n\nTITLE: ETCD Resource Configuration\nDESCRIPTION: YAML configuration showing the ETCD resource with updated storage class configuration.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2020/11.20-Case-Study-Migrating-ETCD-Volumes-in-Production.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ kubectl get -n <shoot-namespace> etcd etcd-main -o yaml\napiVersion: druid.gardener.cloud/v1alpha1\nkind: Etcd\nmetadata:\n  ...\n  name: etcd-main\nspec:\n  ...\n  storageClass: gardener.cloud-fast # <-- was pointing to default storage class before!\n  volumeClaimTemplate: main-etcd\n...\n```\n\n----------------------------------------\n\nTITLE: Navigating to Repository Directory\nDESCRIPTION: Command to change directory to the repository where sensitive data was committed.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/commit-secret-fail.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd YOUR-REPOSITORY\n```\n\n----------------------------------------\n\nTITLE: Documentation Directory Structure Example in TXT\nDESCRIPTION: Example folder structure showing recommended organization of documentation files within a repository, with separate folders for different user roles like usage, operations, and deployment.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/organization.md#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nrepositoryX\n|_ docs\n   |_ usage\n   |  |_ images\n   |  |_ 01.png\n   |  |_ hibernation.md\n   |_ operations\n   |_ deployment\n```\n\n----------------------------------------\n\nTITLE: Initial Seed Resource Configuration in YAML\nDESCRIPTION: Example of an incorrectly configured Seed resource using metal provider type instead of GCP for a GKE-based cluster.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2020/11.20-Case-Study-Migrating-ETCD-Volumes-in-Production.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.gardener.cloud/v1beta1\nkind: Seed\nmetadata:\n  name: initial-seed\nspec:\n  ...\n  provider:\n    region: gke\n    type: metal\n  ...\n...\n```\n\n----------------------------------------\n\nTITLE: Shoot Cluster Specification with Expiring Version\nDESCRIPTION: YAML configuration for a shoot cluster using a Kubernetes version that has an expiration date.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/maintain-shoot.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  kubernetes:\n    version: 1.10.12\n  maintenance:\n    timeWindow:\n      begin: 220000+0100\n      end: 230000+0100\n    autoUpdate:\n      kubernetesVersion: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Front Matter for Applications Documentation Page in YAML\nDESCRIPTION: YAML front matter configuration for the Applications documentation page in the Gardener project. It sets the title, layout type, aggregation settings, and navigation weight for proper rendering in the documentation site.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Applications\nlayout: guides-home\naggregate: true\nweight: 50\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Home Page Front Matter (YAML)\nDESCRIPTION: This snippet contains YAML front matter used to configure a documentation page. It sets the page's title, layout template ('home'), associates it with a specific menu ('sln'), and defines its display order or importance ('weight: 1'). This metadata is typically processed by static site generators to build the final HTML page.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/home/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Home\nlayout: home\nmenu: sln\nweight: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Checking ControlPlanes Status\nDESCRIPTION: Shell command and output showing the status of Gardener control planes before the configuration fix.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2020/11.20-Case-Study-Migrating-ETCD-Volumes-in-Production.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ kubectl get controlplanes.extensions.gardener.cloud\nNAME                 TYPE    PURPOSE    STATUS      AGE\nfra-equ01            metal              Succeeded   85d\nfra-equ01-exposure   metal   exposure   Succeeded   85d\n```\n\n----------------------------------------\n\nTITLE: Adding Sensitive File to .gitignore\nDESCRIPTION: Command to append the sensitive file to .gitignore to prevent accidentally recommitting it in the future.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/commit-secret-fail.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"YOUR-FILE-WITH-SENSITIVE-DATA\" >> .gitignore\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Security Documentation\nDESCRIPTION: YAML frontmatter block defining metadata for a documentation page about security and compliance. Includes page title, description, navigation weight, and URL aliases.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Security and Compliance\ndescription: Make sure that your clusters are compliant and secure\nweight: 3\naliases: [\"/docs/security-and-compliance/\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Resource Metadata Generation\nDESCRIPTION: YAML configuration demonstrating the use of generateName as an alternative to explicit name in Kubernetes resource metadata.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/news/003/release.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmetadata.generateName\n```\n\n----------------------------------------\n\nTITLE: Configuring News Aggregation in YAML Front Matter\nDESCRIPTION: This YAML front matter block configures settings for a news section in a website or documentation system. It sets the title to 'News', specifies the URL path, enables content aggregation, and hides the section from navigation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/news/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: News\nurl: /news\naggregate: true\nhidden: true\n---\n```\n\n----------------------------------------\n\nTITLE: Corrected Seed Resource Configuration\nDESCRIPTION: YAML configuration showing the corrected Seed resource with GCP provider type.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2020/11.20-Case-Study-Migrating-ETCD-Volumes-in-Production.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ kubectl get seed initial-seed -o yaml\napiVersion: core.gardener.cloud/v1beta1\nkind: Seed\nmetadata:\n  name: initial-seed\nspec:\n  ...\n  provider:\n    region: gke\n    type: gcp # <-- here\n  ...\n...\n```\n\n----------------------------------------\n\nTITLE: Force Pushing Changes to GitHub Repository\nDESCRIPTION: Command to force push local changes to the remote repository, overwriting the repository's history on all branches.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/applications/commit-secret-fail.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin --force --all\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using YAML Front Matter\nDESCRIPTION: This YAML block defines metadata for a documentation page generated by a static site generator like Hugo. It includes the 'title' and 'description' for the content, the 'video_id' corresponding to the YouTube video, and a 'weight' attribute likely used for ordering pages within a navigation structure.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/resources/videos/microservices-in_kubernetes.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: High Performance Microservices with Kubernetes, Go, and gRPC\ndescription: \"In this talk Andrew Jessup walks through the essential elements of building a performant, secure and well factored micro-service in Go and how to deploy it to Google Container Engine.You'll also learn how to use Google Stackdriver to monitor, instrument, trace and even debug a production service in real time.\"\nvideo_id: YiNt4kUnnIM\nweight: 20\n---\n```\n\n----------------------------------------\n\nTITLE: Updated ControlPlanes Status\nDESCRIPTION: Shell command and output showing the status of control planes after fixing the configuration.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2020/11.20-Case-Study-Migrating-ETCD-Volumes-in-Production.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ kubectl get -n <shoot-namespace> controlplanes.extensions.gardener.cloud\nNAME                 TYPE    PURPOSE    STATUS      AGE\nfra-equ01            metal              Succeeded   85d\nfra-equ01-exposure   gcp     exposure   Succeeded   85d\n```\n\n----------------------------------------\n\nTITLE: Analyzing Code Coverage in Gardener Tests (Bash)\nDESCRIPTION: Commands to generate and view code coverage reports for Gardener tests. It uses Ginkgo to generate cover profiles, which are then converted to HTML by the Go Cover Tool.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/code/dependencies.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake test-cov\nopen gardener.coverage.html\nmake test-cov-clean\n```\n\n----------------------------------------\n\nTITLE: Embedding a YouTube Video using Hugo Shortcode\nDESCRIPTION: This snippet uses a Hugo shortcode named 'youtube' to embed a YouTube video directly into the page content. The 'id' parameter specifies the unique YouTube video identifier ('YiNt4kUnnIM'), and the 'title' parameter provides an accessible title for the embedded video player. This requires the Hugo static site generator and a corresponding 'youtube.html' shortcode template.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/resources/videos/microservices-in_kubernetes.md#2025-04-22_snippet_1\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{< youtube id=\"YiNt4kUnnIM\" title=\"High Performance Microservices with Kubernetes, Go, and gRPC\" >}}\n```\n\n----------------------------------------\n\nTITLE: Storage Class Verification\nDESCRIPTION: Shell command showing the available storage classes after the configuration fix.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2020/11.20-Case-Study-Migrating-ETCD-Volumes-in-Production.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ kubectl get sc\nNAME                  PROVISIONER            \ngardener.cloud-fast   kubernetes.io/gce-pd\nstandard (default)    kubernetes.io/gce-pd\n```\n\n----------------------------------------\n\nTITLE: Linking a Manifest File in Gardener Documentation (YAML)\nDESCRIPTION: This YAML snippet shows how to add multiple topics to the Gardener website by linking a manifest file that contains the documentation structure. It includes elements for directory naming and manifest file location.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/adding-existing-documentation.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- dir: <dir-name>\n  structure:\n  - manifest: https://github.com/<path>/manifest.yaml\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Hugo Shortcode\nDESCRIPTION: Hugo shortcode syntax for embedding a YouTube video about Kubernetes overview. The shortcode includes the video ID and title parameters.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/resources/videos/why-kubernetes.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{< youtube id=\"N6r-9ZzFgzw\" title=\"Why Kubernetes\" >}}\n```\n\n----------------------------------------\n\nTITLE: Basic kubectl and kubetail log commands\nDESCRIPTION: Demonstrates the contrast between standard kubectl log viewing and the multi-pod capability needed. Shows the limitation of kubectl for watching multiple pod logs simultaneously.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2018/06.11-Watching-logs-of-several-pods.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs -f <pod-id>\n```\n\nLANGUAGE: bash\nCODE:\n```\ntail -f <path-to-logfile>\n```\n\n----------------------------------------\n\nTITLE: Retrieving SSH Public Key\nDESCRIPTION: Command to extract the public SSH key from Kubernetes secret.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/shell-to-node.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get secret aws-gvisor.ssh-keypair -o json | jq -r .data.\\\"id_rsa.pub\\\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Meeting Table Structure\nDESCRIPTION: Table format used to structure meeting demo agendas, including presenter, duration, topic, and reference columns.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/community/review-meetings/2025-reviews.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Presenter(s)  | Duration | Topic                                                        | Reference(s)                                                     |\n| ----------- | -------- | ------------------------------------------------------------ | ------------------------------------------------------- |\n| [@axel7born](https://github.com/axel7born) | `10m` | 👯 Single-Stack IPv4 -> Dual-Stack IPv{4,6} Migration | [#11692](https://github.com/gardener/gardener/pull/11692) |\n```\n\n----------------------------------------\n\nTITLE: YAML Example of Seed Tainting Configuration\nDESCRIPTION: Example demonstrating how to configure seed tainting to restrict control plane hosting capabilities.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/security-and-compliance/regional-restrictions.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n50-seed.yaml#L86-L88\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - v1.108 Release Demo Agenda\nDESCRIPTION: Table showing presenters, duration, topics and references for the v1.108 release demo agenda.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/community/review-meetings/2024-reviews.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Presenter(s)  | Duration | Topic                                                        | Reference(s)                                                     |\n| ----------- | -------- | ------------------------------------------------------------ | ------------------------------------------------------- |\n| [@LucaBernstein](https://github.com/LucaBernstein) | `10m` | 🖼️ Custom Machine Images For `NamespacedCloudProfile`s | [#10629](https://github.com/gardener/gardener/pull/10629), [#10811](https://github.com/gardener/gardener/pull/10811) |\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Hackathon Wrap Up Demo Agenda\nDESCRIPTION: Table showing presenters, duration, topics and references for the Hack The Garden wrap up demo agenda.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/community/review-meetings/2024-reviews.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Presenter(s)  | Duration | Topic                                                        | Reference(s)                                                     |\n| ----------- | -------- | ------------------------------------------------------------ | ------------------------------------------------------- |\n| [@damyan](https://github.com/damyan) | `5m` | 🌐 IPv6 Support On [IronCore](https://github.com/ironcore-dev) | [Summary](https://github.com/gardener-community/hackathon/blob/main/2024-12_Schelklingen/README.md#-ipv6-support-on-ironcore) |\n```\n\n----------------------------------------\n\nTITLE: Customizing Mermaid Diagram Theme in Markdown\nDESCRIPTION: This snippet shows how to override default Mermaid diagram settings using the %%init%% header. It demonstrates setting a custom theme and background color for the diagram.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/shortcodes.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\n%%{init: {'theme': 'neutral', 'themeVariables': { 'mainBkg': '#eee'}}}%%\ngraph LR;\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for 2024 Blog List\nDESCRIPTION: YAML frontmatter block that configures a blog listing page. Sets the title to '2024', specifies a 'blog-list' layout, and enables content aggregation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 2024\nlayout: blog-list\naggregate: true\n---\n```\n\n----------------------------------------\n\nTITLE: Blog Post Front Matter Configuration in YAML\nDESCRIPTION: YAML configuration block defining metadata for the blog post including title, authors, publication date and aliases.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/12-08-Unleashing-Potential-Highlights-from-the-6th-Gardener-Community-Hackathon.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Unleashing Potential: Highlights from the 6th Gardener Community Hackathon\"\nlinkTitle: \"Unleashing Potential: Highlights from the 6th Gardener Community Hackathon\"\nnewsSubtitle: December 08, 2024\npublishdate: 2024-12-08\nauthors:\n- name: Rafael Franzke\n  email: rafael.franzke@sap.com\n  avatar: https://avatars.githubusercontent.com/u/19169361\naliases: [\"/blog/2024/12/08/01\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - v1.109/v1.110 Demo Agenda\nDESCRIPTION: Table showing presenters, duration, topics and references for the v1.109 and v1.110 release demo agenda.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/community/review-meetings/2024-reviews.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Presenter(s)  | Duration | Topic                                                        | Reference(s)                                                     |\n| ----------- | -------- | ------------------------------------------------------------ | ------------------------------------------------------- |\n| [@timuthy](https://github.com/timuthy) | `5m` | 🫣 Virtual Cluster Watch In `gardener-operator` | [#10663](https://github.com/gardener/gardener/pull/10663) |\n| [@oliver-goetz](https://github.com/oliver-goetz) | `10m` | 💂 Node Agent Authorizer | [#10781](https://github.com/gardener/gardener/pull/10781) |\n```\n\n----------------------------------------\n\nTITLE: Configuring 2023 Blog List Page in YAML\nDESCRIPTION: This YAML configuration sets up a blog list page for the year 2023. It specifies the title, layout type, and enables content aggregation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2023/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 2023\nlayout: blog-list\naggregate: true\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Vali Logs in Plutono\nDESCRIPTION: Example log queries for filtering and retrieving logs from different components in the Gardener cluster using Vali through Plutono interface.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/getting-started/observability/components.md#2025-04-22_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\n{container_name=\"cluster-autoscaler\" }\n{container_name=\"kube-apiserver\"} |~ \"error\"\n{unit=\"kubelet.service\", nodename=\"ip-123\"}\n{unit=\"containerd.service\", nodename=\"ip-123\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Front Matter for 2022 Blog Archive\nDESCRIPTION: YAML front matter configuration for a Jekyll blog archive page. It sets the title to '2022', uses the 'blog-list' layout template, and enables content aggregation with the 'aggregate: true' setting.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2022/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 2022\nlayout: blog-list\naggregate: true\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter for Community Page\nDESCRIPTION: YAML frontmatter defining the title and URL for the Community page in the Gardener documentation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/community/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Community\nurl: /community\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Blog List Layout\nDESCRIPTION: YAML frontmatter that configures a blog listing page. Sets the title to '2020', specifies a blog-list layout, and enables content aggregation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2020/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: 2020\nlayout: blog-list\naggregate: true\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter Configuration\nDESCRIPTION: YAML configuration for the blog post metadata including title, authors, and publishing information.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2024/05-21-Innovation-Unleashed-A-Deep-Dive-into-the-5th-Gardener-Community-Hackathon.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Innovation Unleashed: A Deep Dive into the 5th Gardener Community Hackathon\"\nlinkTitle: \"Innovation Unleashed: A Deep Dive into the 5th Gardener Community Hackathon\"\nnewsSubtitle: May 21, 2024\npublishdate: 2024-05-21\nauthors:\n- name: Rafael Franzke\n  email: rafael.franzke@sap.com\n  avatar: https://avatars.githubusercontent.com/u/19169361\naliases: [\"/blog/2024/05/21/01\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter for 2018 Gardener Blog List Page\nDESCRIPTION: This YAML frontmatter configures a blog list page for Gardener posts from 2018. It sets the title to '2018', specifies a 'blog-list' layout, and enables content aggregation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2018/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 2018\nlayout: blog-list\naggregate: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Front Matter for 2019 Blog Archive\nDESCRIPTION: YAML front matter configuration that sets up a Jekyll blog archive page for 2019 posts. It specifies the title, uses a blog-list layout, and enables content aggregation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2019/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 2019\nlayout: blog-list\naggregate: true\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown Note Block for Recording Consent\nDESCRIPTION: A Markdown note block informing users about the recording of meetings and how to participate if they do not consent to being recorded.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/community/_index.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> From 2025 onwards, all meetings are recorded and uploaded publicly to the [Gardener YouTube channel](https://www.youtube.com/@GardenerProject).\n>\n> If you do not consent to being recorded, please do not enable your microphone or camera, or do not join the meetings.\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Gardener Blog Page\nDESCRIPTION: YAML front matter configuration for the Gardener blog listing page. It sets the page title, specifies the layout as 'blog-list', and enables content aggregation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Blogs\nlayout: blog-list\naggregate: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for 2021 Blog List Page\nDESCRIPTION: This YAML snippet defines the front matter for a blog list page. It sets the title to '2021', specifies a 'blog-list' layout, and enables content aggregation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2021/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 2021\nlayout: blog-list\naggregate: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Frontmatter for Gardener Bio Page\nDESCRIPTION: Markdown frontmatter configuration that sets up the title and weight for the Gardener biography page using YAML syntax.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/community/community-bio.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Gardener Bio\nweight: 40\n---\n```\n\n----------------------------------------\n\nTITLE: Including Hugo Shortcode for Community Bio\nDESCRIPTION: Hugo shortcode inclusion that renders the community biography component using the community-bio shortcode.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/community/community-bio.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{< community-bio >}}\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for Product Steering Documentation\nDESCRIPTION: Markdown formatting for the product steering documentation page, including headers, lists, and collapsible sections\nSOURCE: https://github.com/gardener/documentation/blob/master/website/community/product-steering/_index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Product Steering\nweight: 20\n---\n```\n\n----------------------------------------\n\nTITLE: Markdown API Object Formatting\nDESCRIPTION: Example showing how to format API object references using backticks in markdown\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/contribute/documentation/formatting-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDeploy a `Pod`.\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice\nDESCRIPTION: Standard boilerplate notice text for applying the Apache License 2.0 to a project. Includes copyright notice, license declaration, and standard permissions and limitations text.\nSOURCE: https://github.com/gardener/documentation/blob/master/LICENSES/Apache-2.0.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Hugo Shortcode\nDESCRIPTION: Utilizes the Hugo 'youtube' shortcode to embed a YouTube video within the documentation page. It specifies the video using its unique YouTube ID ('y2bhV81MfKQ') and provides a title ('The Ins and Outs of Networking') for the embedded video player or accessibility purposes. This relies on Hugo's processing of shortcodes during site generation.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/resources/videos/in-out-networking.md#2025-04-22_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{< youtube id=\"y2bhV81MfKQ\" title=\"The Ins and Outs of Networking\" >}}\n```\n\n----------------------------------------\n\nTITLE: Release Notes Table Structure - Markdown\nDESCRIPTION: Markdown table structure used for organizing demo presentation schedules, including presenter, duration, topic, and reference information.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/community/review-meetings/2023-reviews.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Presenter(s)  | Duration | Topic                                                        | Reference(s)                                                     |\n| ----------- | -------- | ------------------------------------------------------------ | ------------------------------------------------------- |\n| [@Kristian-ZH](https://github.com/Kristian-ZH) | `10m` | 🪵 Introduction Of Fluent Operator | [#7568](https://github.com/gardener/gardener/pull/7568) |\n```\n\n----------------------------------------\n\nTITLE: Keeping Pod Running with Long-running Task in YAML\nDESCRIPTION: This example configures a Kubernetes pod to execute a long-running task to avoid 'CrashLoopBackOff' status. It updates the ConfigMap and deployment to include a sleep command, ensuring the container stays active. The environment variables are loaded from the ConfigMap. The YAML should be applied using kubectl.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/monitoring-and-troubleshooting/debug-a-pod.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-env\ndata:\n  MYFILE: \"/etc/profile\"\n  SLEEP: \"5\"\n---\napiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n  name: termination-demo\n  labels:\n     app: termination-demo\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: termination-demo\n  template:\n    metadata:\n      labels:\n        app: termination-demo\n    spec:\n      containers:\n      - name: termination-demo-container\n        image: debian\n        command: [\"/bin/sh\"]\n        # args: [\"-c\", \"sed \\\"s/foo/bar/\\\" < $MYFILE\"]\n        args: [\"-c\", \"while true; do sleep $SLEEP; echo sleeping; done;\"]\n        envFrom:\n        - configMapRef:\n            name: app-env\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Gardener v1.13 Release Blog Post\nDESCRIPTION: YAML front matter configuration for the Gardener v1.13 release blog post, including title, publication date, authors, and aliases.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2020/11.23-Gardener-v1.13-Released.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Gardener v1.13 Released\nlinkTitle: Gardener v1.13\nnewsSubtitle: November 23, 2020\npublishdate: 2020-11-23\narchivedate: 2021-01-22\nauthors:\n- name: Rafael Franzke\n  email: rafael.franzke@sap.com\n  avatar: https://avatars2.githubusercontent.com/u/19169361?s=460&v=4\naliases: [\"/blog/2020/11/23/00\"]\n---\n```\n\n----------------------------------------\n\nTITLE: Initial Gardener Commit Message\nDESCRIPTION: The first public commit message that marked the beginning of Gardener as an open source project on January 10, 2018.\nSOURCE: https://github.com/gardener/documentation/blob/master/website/blog/2021/02.01-Happy-anniversary-Gardener.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncommit d9619d01845db8c7105d27596fdb7563158effe1\nAuthor: Gardener Development Community <gardener.opensource@sap.com>\nDate:   Wed Jan 10 13:07:09 2018 +0100\n    Initial version of gardener\n    This is the initial contribution to the Open Source Gardener project.\n...\n```\n\n----------------------------------------\n\nTITLE: Testing RBAC Permissions\nDESCRIPTION: Shell commands to verify RBAC permissions for the authenticated OIDC user\nSOURCE: https://github.com/gardener/documentation/blob/master/website/documentation/guides/administer-shoots/oidc-login.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl auth can-i create clusterrolebindings\nkubectl auth can-i get secrets\nkubectl auth can-i describe secrets\nkubectl auth can-i list pods\nkubectl auth can-i get pods\n```"
  }
]