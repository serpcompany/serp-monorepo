[
  {
    "owner": "strawberry-graphql",
    "repo": "strawberry",
    "content": "TITLE: Defining GraphQL Schema with Strawberry in Python\nDESCRIPTION: Python implementation of the GraphQL schema using Strawberry's code-first approach. Shows how Book and Author types are defined using Python class decorators and type hints.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nimport strawberry\n\n\n@strawberry.type\nclass Book:\n    title: str\n    author: \"Author\"\n\n\n@strawberry.type\nclass Author:\n    name: str\n    books: typing.List[Book]\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query Type in Strawberry\nDESCRIPTION: Implementation of a Query type in Strawberry that exposes books and authors data to clients. This defines the entry points for read operations in the GraphQL API.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    books: typing.List[Book]\n    authors: typing.List[Author]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GraphQL Schema with Strawberry\nDESCRIPTION: This Python code defines a simple GraphQL schema using Strawberry. It creates a User type and a Query type with a single field that returns a hardcoded user.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass User:\n    name: str\n    age: int\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self) -> User:\n        return User(name=\"Patrick\", age=100)\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Implementing Query with Arguments in Strawberry (Python)\nDESCRIPTION: This snippet demonstrates how to implement a query field that accepts arguments, which can be used to filter or retrieve specific objects.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/queries.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nFRUITS = [\n    \"Strawberry\",\n    \"Apple\",\n    \"Orange\",\n]\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def fruit(self, startswith: str) -> str | None:\n        for fruit in FRUITS:\n            if fruit.startswith(startswith):\n                return fruit\n        return None\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Type and Query Structures in Strawberry GraphQL\nDESCRIPTION: Shows how to define a basic GraphQL schema with User and Query types in Strawberry. This creates the schema structure but doesn't yet implement the resolver logic for retrieving data.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/resolvers.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass User:\n    name: str\n\n\n@strawberry.type\nclass Query:\n    last_user: User\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  name: String!\n}\n\ntype Query {\n  lastUser: User!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Mutations in Strawberry GraphQL\nDESCRIPTION: Implementation of nested mutations using a namespace type. This defines a FruitMutations type containing mutation fields and exposes it through the main Mutation type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/mutations.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass FruitMutations:\n    @strawberry.mutation\n    def add(self, info, input: AddFruitInput) -> Fruit: ...\n\n    @strawberry.mutation\n    def update_weight(self, info, input: UpdateFruitWeightInput) -> Fruit: ...\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.field\n    def fruit(self) -> FruitMutations:\n        return FruitMutations()\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema with Strawberry\nDESCRIPTION: Basic schema definition using Strawberry decorators to create Book and Query types for a GraphQL API.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nimport strawberry\n\n\n@strawberry.type\nclass Book:\n    title: str\n    author: str\n\n\n@strawberry.type\nclass Query:\n    books: typing.List[Book]\n```\n\n----------------------------------------\n\nTITLE: Implementing DataLoader in Strawberry GraphQL ASGI Context\nDESCRIPTION: This snippet demonstrates how to create a DataLoader within the GraphQL context using Strawberry and ASGI. It includes a custom GraphQL class that initializes the DataLoader in the context, a User type, and a Query with a resolver that uses the DataLoader.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/dataloaders.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Union, Any, Optional\n\nimport strawberry\nfrom strawberry.asgi import GraphQL\nfrom strawberry.dataloader import DataLoader\n\nfrom starlette.requests import Request\nfrom starlette.websockets import WebSocket\nfrom starlette.responses import Response\n\n\n@strawberry.type\nclass User:\n    id: strawberry.ID\n\n\nasync def load_users(keys) -> List[User]:\n    return [User(id=key) for key in keys]\n\n\nclass MyGraphQL(GraphQL):\n    async def get_context(\n        self, request: Union[Request, WebSocket], response: Optional[Response]\n    ) -> Any:\n        return {\"user_loader\": DataLoader(load_fn=load_users)}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    async def get_user(self, info: strawberry.Info, id: strawberry.ID) -> User:\n        return await info.context[\"user_loader\"].load(id)\n\n\nschema = strawberry.Schema(query=Query)\napp = MyGraphQL(schema)\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Mutations for ASGI/FastAPI/Starlette (Python)\nDESCRIPTION: Demonstrates how to create mutations for handling single file uploads, multiple file uploads, and nested file uploads using async functions in ASGI-based integrations.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/file-upload.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nimport strawberry\nfrom strawberry.file_uploads import Upload\n\n\n@strawberry.input\nclass FolderInput:\n    files: typing.List[Upload]\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    async def read_file(self, file: Upload) -> str:\n        return (await file.read()).decode(\"utf-8\")\n\n    @strawberry.mutation\n    async def read_files(self, files: typing.List[Upload]) -> typing.List[str]:\n        contents = []\n        for file in files:\n            content = (await file.read()).decode(\"utf-8\")\n            contents.append(content)\n        return contents\n\n    @strawberry.mutation\n    async def read_folder(self, folder: FolderInput) -> typing.List[str]:\n        contents = []\n        for file in folder.files:\n            content = (await file.read()).decode(\"utf-8\")\n            contents.append(content)\n        return contents\n```\n\n----------------------------------------\n\nTITLE: Defining Object Types with Python and Strawberry\nDESCRIPTION: Example demonstrating how to define a GraphQL object type using Strawberry's Python decorator. This shows the Python class definition and the resulting GraphQL schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/object-types.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Character:\n    name: str\n    age: int\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Character {\n  name: String!\n  age: int!\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition Example\nDESCRIPTION: An example of schema definition using GraphQL Schema Definition Language (SDL). This defines Book and Author types with their relationships.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Book {\n  title: String!\n  author: Author!\n}\n\ntype Author {\n  name: String!\n  books: [Book!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Default Error Processing in Strawberry GraphQL Schema\nDESCRIPTION: Shows the default implementation of process_errors in Strawberry GraphQL's BaseSchema class, which logs errors encountered during query execution.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# strawberry/schema/base.py\nfrom strawberry.types import ExecutionContext\n\nlogger = logging.getLogger(\"strawberry.execution\")\n\n\nclass BaseSchema:\n    ...\n\n    def process_errors(\n        self,\n        errors: List[GraphQLError],\n        execution_context: Optional[ExecutionContext] = None,\n    ) -> None:\n        for error in errors:\n            StrawberryLogger.error(error, execution_context)\n```\n\n----------------------------------------\n\nTITLE: Customizing WebSocket Connection Handling in Strawberry GraphQL\nDESCRIPTION: This snippet shows how to override the on_ws_connect method to implement custom authentication and authorization for GraphQL WebSocket connections. It demonstrates accepting connections with or without acknowledgment payloads and rejecting connections with custom error messages.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/fastapi.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict\nfrom strawberry.exceptions import ConnectionRejectionError\nfrom strawberry.fastapi import GraphQLRouter\n\n\nclass MyGraphQLRouter(GraphQLRouter):\n    async def on_ws_connect(self, context: Dict[str, object]):\n        connection_params = context[\"connection_params\"]\n\n        if not isinstance(connection_params, dict):\n            # Reject without a custom graphql-ws error payload\n            raise ConnectionRejectionError()\n\n        if connection_params.get(\"password\") != \"secret\":\n            # Reject with a custom graphql-ws error payload\n            raise ConnectionRejectionError({\"reason\": \"Invalid password\"})\n\n        if username := connection_params.get(\"username\"):\n            # Accept with a custom acknowledgment payload\n            return {\"message\": f\"Hello, {username}!\"}\n\n        # Accept without a acknowledgment payload\n        return await super().on_ws_connect(context)\n```\n\n----------------------------------------\n\nTITLE: Initializing Strawberry GraphQL with AIOHTTP in Python\nDESCRIPTION: This snippet demonstrates how to set up a basic GraphQL server using Strawberry with AIOHTTP. It defines a simple Query type, creates a schema, and adds a GraphQL route to the AIOHTTP application.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/aiohttp.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom aiohttp import web\nfrom strawberry.aiohttp.views import GraphQLView\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self, name: str = \"World\") -> str:\n        return f\"Hello, {name}!\"\n\n\nschema = strawberry.Schema(query=Query)\n\napp = web.Application()\n\napp.router.add_route(\"*\", \"/graphql\", GraphQLView(schema=schema))\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Page Object Type in Python with Strawberry\nDESCRIPTION: Creates a reusable Page type that can contain items of any type using Python's Generic typing. This pattern allows for flexible page representation in GraphQL schemas.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/generics.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Generic, List, TypeVar\n\nimport strawberry\n\nT = TypeVar(\"T\")\n\n\n@strawberry.type\nclass Page(Generic[T]):\n    number: int\n    items: List[T]\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Schema in Strawberry GraphQL with Python\nDESCRIPTION: This snippet demonstrates how to define a basic GraphQL schema using Strawberry. It creates a Query type with a hello field that returns a string, then initializes a Schema with this Query type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"Hello World\"\n\n\nschema = strawberry.Schema(Query)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cursor-Based Pagination for User Data in Strawberry GraphQL\nDESCRIPTION: This comprehensive Python implementation demonstrates cursor-based pagination in a Strawberry GraphQL API. It includes functions for encoding/decoding cursor values using base64, type definitions for user data and pagination metadata, and a query resolver that fetches paginated user results based on limit and cursor parameters.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/cursor-based.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom base64 import b64encode, b64decode\nfrom typing import List, Optional, Dict, Any, cast\n\nimport strawberry\n\nuser_data = [\n    {\n        \"id\": 1,\n        \"name\": \"Norman Osborn\",\n        \"occupation\": \"Founder, Oscorp Industries\",\n        \"age\": 42,\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Peter Parker\",\n        \"occupation\": \"Freelance Photographer, The Daily Bugle\",\n        \"age\": 20,\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Harold Osborn\",\n        \"occupation\": \"President, Oscorp Industries\",\n        \"age\": 19,\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Eddie Brock\",\n        \"occupation\": \"Journalist, The Eddie Brock Report\",\n        \"age\": 20,\n    },\n]\n\n\ndef encode_user_cursor(id: int) -> str:\n    \"\"\"\n    Encodes the given user ID into a cursor.\n\n    :param id: The user ID to encode.\n\n    :return: The encoded cursor.\n    \"\"\"\n    return b64encode(f\"user:{id}\".encode(\"ascii\")).decode(\"ascii\")\n\n\ndef decode_user_cursor(cursor: str) -> int:\n    \"\"\"\n    Decodes the user ID from the given cursor.\n\n    :param cursor: The cursor to decode.\n\n    :return: The decoded user ID.\n    \"\"\"\n    cursor_data = b64decode(cursor.encode(\"ascii\")).decode(\"ascii\")\n    return int(cursor_data.split(\":\")[1])\n\n\n@strawberry.type\nclass User:\n    id: str = strawberry.field(description=\"ID of the user.\")\n    name: str = strawberry.field(description=\"The name of the user.\")\n    occupation: str = strawberry.field(description=\"The occupation of the user.\")\n    age: int = strawberry.field(description=\"The age of the user.\")\n\n    @staticmethod\n    def from_row(row: Dict[str, Any]) -> \"User\":\n        return User(\n            id=row[\"id\"], name=row[\"name\"], occupation=row[\"occupation\"], age=row[\"age\"]\n        )\n\n\n@strawberry.type\nclass PageMeta:\n    next_cursor: Optional[str] = strawberry.field(\n        description=\"The next cursor to continue with.\"\n    )\n\n\n@strawberry.type\nclass UserResponse:\n    users: List[User] = strawberry.field(description=\"The list of users.\")\n    page_meta: PageMeta = strawberry.field(description=\"Metadata to aid in pagination.\")\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(description=\"Get a list of users.\")\n    def get_users(self, limit: int, cursor: Optional[str] = None) -> UserResponse:\n        if cursor is not None:\n            # decode the user ID from the given cursor.\n            user_id = decode_user_cursor(cursor=cursor)\n        else:\n            # no cursor was given (this happens usually when the\n            # client sends a query for the first time).\n            user_id = 0\n\n        # filter the user data, going through the next set of results.\n        filtered_data = [user for user in user_data if user[\"id\"] >= user_id]\n\n        # slice the relevant user data (Here, we also slice an\n        # additional user instance, to prepare the next cursor).\n        sliced_users = filtered_data[: limit + 1]\n\n        if len(sliced_users) > limit:\n            # calculate the client's next cursor.\n            last_user = sliced_users.pop(-1)\n            next_cursor = encode_user_cursor(id=last_user[\"id\"])\n        else:\n            # We have reached the last page, and\n            # don't have the next cursor.\n            next_cursor = None\n\n        sliced_users = [User.from_row(x) for x in sliced_users]\n\n        return UserResponse(\n            users=sliced_users, page_meta=PageMeta(next_cursor=next_cursor)\n        )\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Batching Multiple Requests with DataLoader\nDESCRIPTION: This code example illustrates how to use asyncio.gather with DataLoader to batch multiple user requests into a single call, optimizing database or API requests.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/dataloaders.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\n[user_a, user_b] = await asyncio.gather(loader.load(1), loader.load(2))\n```\n\n----------------------------------------\n\nTITLE: Using Decorator Syntax for Query Fields in Strawberry (Python)\nDESCRIPTION: This snippet demonstrates an alternative way to declare a field using the @strawberry.field decorator, which allows defining the resolver as a method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/queries.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def name(self) -> str:\n        return \"Strawberry\"\n```\n\n----------------------------------------\n\nTITLE: Basic Subscription Implementation in Strawberry\nDESCRIPTION: Demonstrates how to create a basic subscription that counts from 0 to a target number with a delay between iterations. Shows the basic structure of defining subscriptions in Strawberry with AsyncGenerator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/subscriptions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import AsyncGenerator\n\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"world\"\n\n\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def count(self, target: int = 100) -> AsyncGenerator[int, None]:\n        for i in range(target):\n            yield i\n            await asyncio.sleep(0.5)\n\n\nschema = strawberry.Schema(query=Query, subscription=Subscription)\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Implementation in Strawberry GraphQL\nDESCRIPTION: Shows how to create a basic IsAuthenticated permission class by extending BasePermission and implementing the has_permission method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/permissions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nimport strawberry\nfrom strawberry.permission import BasePermission\n\n\nclass IsAuthenticated(BasePermission):\n    message = \"User is not authenticated\"\n\n    # This method can also be async!\n    def has_permission(\n        self, source: typing.Any, info: strawberry.Info, **kwargs\n    ) -> bool:\n        return False\n\n\n@strawberry.type\nclass Query:\n    user: str = strawberry.field(permission_classes=[IsAuthenticated])\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Flask GraphQL Server with Strawberry\nDESCRIPTION: Basic setup for integrating Strawberry GraphQL with Flask using GraphQLView. Shows how to create a Flask app and add a GraphQL endpoint.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/flask.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom strawberry.flask.views import GraphQLView\n\nfrom api.schema import schema\n\napp = Flask(__name__)\n\napp.add_url_rule(\n    \"/graphql\",\n    view_func=GraphQLView.as_view(\"graphql_view\", schema=schema),\n)\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Arguments in Strawberry GraphQL\nDESCRIPTION: Shows how to implement optional arguments in Strawberry GraphQL using Python's Optional type and strawberry.UNSET. This demonstrates the difference between null values and unset parameters.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/resolvers.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self, name: Optional[str] = None) -> str:\n        if name is None:\n            return \"Hello world!\"\n        return f\"Hello {name}!\"\n\n    @strawberry.field\n    def greet(self, name: Optional[str] = strawberry.UNSET) -> str:\n        if name is strawberry.UNSET:\n            return \"Name was not set!\"\n        if name is None:\n            return \"Name was null!\"\n        return f\"Hello {name}!\"\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  hello(name: String = null): String!\n  greet(name: String): String!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic GraphQL Schema with Strawberry in Python\nDESCRIPTION: This snippet demonstrates how to create a simple GraphQL schema with a Query type using Strawberry. It defines a Query type with two fields and creates a schema object.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_145\n\nLANGUAGE: python\nCODE:\n```\nQuery = create_type(\"Query\", [hello, my_name])\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Mutation Type in Strawberry\nDESCRIPTION: Implementation of a Mutation type in Strawberry that allows adding a new book. This defines the entry point for write operations in the GraphQL API.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def add_book(self, title: str, author: str) -> Book: ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated User in Resolver with FastAPI (Python)\nDESCRIPTION: This code snippet shows how to access authenticated user information within a resolver using a custom context dataclass in Strawberry GraphQL with FastAPI. It includes setting up a Context class, defining a Query type, and configuring the FastAPI application.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/authentication.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import cached_property\n\nimport strawberry\nfrom fastapi import FastAPI\nfrom strawberry.fastapi import BaseContext, GraphQLRouter\n\n\n@strawberry.type\nclass User: ...  # This is just a stub for an actual user object\n\n\nclass Context(BaseContext):\n    @cached_property\n    def user(self) -> User | None:\n        if not self.request:\n            return None\n\n        authorization = self.request.headers.get(\"Authorization\", None)\n        return authorization_service.authorize(authorization)\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def get_authenticated_user(self, info: strawberry.Info[Context]) -> User | None:\n        return info.context.user\n\n\nasync def get_context() -> Context:\n    return Context()\n\n\nschema = strawberry.Schema(Query)\n\n\ngraphql_app = GraphQLRouter(\n    schema,\n    context_getter=get_context,\n)\n\napp = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Resolvers in Strawberry\nDESCRIPTION: Example showing how to provide data to GraphQL fields using resolvers in Strawberry. Includes resolvers for books, authors, and a Query type to expose the data.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_author_for_book(root) -> \"Author\":\n    return Author(name=\"Michael Crichton\")\n\n\n@strawberry.type\nclass Book:\n    title: str\n    author: \"Author\" = strawberry.field(resolver=get_author_for_book)\n\n\ndef get_books_for_author(root) -> typing.List[Book]:\n    return [Book(title=\"Jurassic Park\")]\n\n\n@strawberry.type\nclass Author:\n    name: str\n    books: typing.List[Book] = strawberry.field(resolver=get_books_for_author)\n\n\ndef get_authors(root) -> typing.List[Author]:\n    return [Author(name=\"Michael Crichton\")]\n\n\n@strawberry.type\nclass Query:\n    authors: typing.List[Author] = strawberry.field(resolver=get_authors)\n    books: typing.List[Book] = strawberry.field(resolver=get_books_for_author)\n```\n\n----------------------------------------\n\nTITLE: Basic FastAPI Integration with Strawberry\nDESCRIPTION: Basic example showing how to integrate Strawberry GraphQL with FastAPI using GraphQLRouter\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/fastapi.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom fastapi import FastAPI\nfrom strawberry.fastapi import GraphQLRouter\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"Hello World\"\n\n\nschema = strawberry.Schema(Query)\n\ngraphql_app = GraphQLRouter(schema)\n\napp = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Resolver in Strawberry GraphQL with Python\nDESCRIPTION: This snippet demonstrates how to create an async resolver function and use it in a Strawberry GraphQL schema. It uses asyncio.sleep() to simulate an asynchronous operation and returns a string after a delay.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/concepts/async.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport strawberry\n\n\nasync def resolve_hello(root) -> str:\n    await asyncio.sleep(1)\n\n    return \"Hello world\"\n\n\n@strawberry.type\nclass Query:\n    hello: str = strawberry.field(resolver=resolve_hello)\n\n\nschema = strawberry.Schema(Query)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Input Type in Strawberry\nDESCRIPTION: Demonstrates how to create a basic 2D point input type with required x and y coordinates using the @strawberry.input decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/input-types.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.input\nclass Point2D:\n    x: float\n    y: float\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninput Point2D {\n  x: Float!\n  y: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Example for Adding a Book\nDESCRIPTION: Example of a GraphQL mutation that adds a new book and requests specific fields from the newly created object in the response.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  addBook(title: \"Fox in Socks\", author: \"Dr. Seuss\") {\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Product Type with Various Scalars in Python\nDESCRIPTION: This snippet demonstrates how to define a Product type using various built-in scalar types in Strawberry GraphQL, including UUID, string, integer, boolean, date, time, datetime, and decimal.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/scalars.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport decimal\nimport uuid\nimport strawberry\n\n\n@strawberry.type\nclass Product:\n    id: uuid.UUID\n    name: str\n    stock: int\n    is_available: bool\n    available_from: datetime.date\n    same_day_shipping_before: datetime.time\n    created_at: datetime.datetime\n    price: decimal.Decimal\n    void: None\n```\n\n----------------------------------------\n\nTITLE: Configuring Starlette with Strawberry GraphQL\nDESCRIPTION: This snippet demonstrates how to create a Starlette application and add GraphQL routes using Strawberry. It sets up both HTTP and WebSocket endpoints for GraphQL queries.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/starlette.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom strawberry.asgi import GraphQL\n\nfrom api.schema import schema\n\ngraphql_app = GraphQL(schema)\n\napp = Starlette()\napp.add_route(\"/graphql\", graphql_app)\napp.add_websocket_route(\"/graphql\", graphql_app)\n```\n\n----------------------------------------\n\nTITLE: Implementing a basic GraphQL API with Strawberry and Chalice\nDESCRIPTION: A complete example of setting up a GraphQL API using Strawberry with AWS Chalice. Includes Query and Mutation types with sample resolvers and route configuration.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/chalice.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom chalice import Chalice\nfrom chalice.app import Request, Response\n\nimport strawberry\nfrom strawberry.chalice.views import GraphQLView\n\napp = Chalice(app_name=\"BadgerProject\")\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def greetings(self) -> str:\n        return \"hello from the illustrious stack badger\"\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def echo(self, string_to_echo: str) -> str:\n        return string_to_echo\n\n\nschema = strawberry.Schema(query=Query, mutation=Mutation)\nview = GraphQLView(schema=schema)\n\n\n@app.route(\"/graphql\", methods=[\"GET\", \"POST\"], content_types=[\"application/json\"])\ndef handle_graphql() -> Response:\n    request: Request = app.current_request\n    result = view.execute_request(request)\n    return result\n```\n\n----------------------------------------\n\nTITLE: Nested Mutations Example Schema\nDESCRIPTION: GraphQL schema example for organizing mutations in namespaces to improve discoverability, showing a nested FruitMutations type that groups related mutations.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/mutations.md#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  fruit: FruitMutations!\n}\n\ntype FruitMutations {\n  add(input: AddFruitInput): Fruit!\n  updateWeight(input: UpdateFruitWeightInput!): Fruit!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Arguments in Strawberry Resolvers\nDESCRIPTION: Demonstrates how to define arguments for GraphQL fields using resolver function parameters. The example shows how to implement a 'user' field that accepts an ID parameter to fetch a specific user.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/resolvers.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass User:\n    name: str\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self, id: strawberry.ID) -> User:\n        # here you'd use the `id` to get the user from the database\n        return User(name=\"Marco\")\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  name: String!\n}\n\ntype Query {\n  user(id: ID!): User!\n}\n```\n\n----------------------------------------\n\nTITLE: Using Interface Types with Schema in Strawberry GraphQL\nDESCRIPTION: Example of defining and using interfaces in Strawberry GraphQL. Shows how to create Customer interface with Individual and Company implementations, and register these types with the schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import date\nimport strawberry\n\n\n@strawberry.interface\nclass Customer:\n    name: str\n\n\n@strawberry.type\nclass Individual(Customer):\n    date_of_birth: date\n\n\n@strawberry.type\nclass Company(Customer):\n    founded: date\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def get_customer(\n        self, id: strawberry.ID\n    ) -> Customer:  # note we're returning the interface here\n        if id == \"mark\":\n            return Individual(name=\"Mark\", date_of_birth=date(1984, 5, 14))\n\n        if id == \"facebook\":\n            return Company(name=\"Facebook\", founded=date(2004, 2, 1))\n\n\nschema = strawberry.Schema(Query, types=[Individual, Company])\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Types with Strawberry in Python\nDESCRIPTION: This code snippet demonstrates how to use type hints with Strawberry to define GraphQL types, including Book, Author, and Group. It shows the use of various Python types like datetime, decimal, and typing modules to map to GraphQL types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/concepts/typings.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nimport decimal\nfrom typing import List, Optional\n\nimport strawberry\n\nBOOKS_LOOKUP = {\n    \"Frank Herbert\": [\n        {\n            \"title\": \"Dune\",\n            \"date_published\": \"1965-08-01\",\n            \"price\": \"5.99\",\n            \"isbn\": 9780801950773,\n        }\n    ],\n}\n\n\n@strawberry.type\nclass Book:\n    title: str\n    author: \"Author\"\n    date_published: datetime.date\n    price: decimal.Decimal\n    isbn: str\n\n\ndef get_books_by_author(root: \"Author\") -> List[\"Book\"]:\n    stored_books = BOOKS_LOOKUP[root.name]\n\n    return [\n        Book(\n            title=book.get(\"title\"),\n            author=root,\n            date_published=book.get(\"date_published\"),\n            price=book.get(\"price\"),\n            isbn=book.get(\"isbn\"),\n        )\n        for book in stored_books\n    ]\n\n\n@strawberry.type\nclass Author:\n    name: str\n    books: List[Book] = strawberry.field(resolver=get_books_by_author)\n\n\n@strawberry.type\nclass Group:\n    name: Optional[str]  # groups of authors don't necessarily have names\n    authors: List[Author]\n\n    @strawberry.field\n    def books(self) -> List[Book]:\n        books = []\n\n        for author in self.authors:\n            books += get_books_by_author(author)\n\n        return books\n```\n\n----------------------------------------\n\nTITLE: Integrating DataLoader with GraphQL Query\nDESCRIPTION: This example demonstrates how to use DataLoader within a GraphQL query. It defines a User type, a load_users function, and a Query type with a get_user field that uses the DataLoader to fetch user data.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/dataloaders.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nfrom strawberry.dataloader import DataLoader\nimport strawberry\n\n\n@strawberry.type\nclass User:\n    id: strawberry.ID\n\n\nasync def load_users(keys) -> List[User]:\n    return [User(id=key) for key in keys]\n\n\nloader = DataLoader(load_fn=load_users)\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    async def get_user(self, id: strawberry.ID) -> User:\n        return await loader.load(id)\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Setting up Async GraphQL View with Django\nDESCRIPTION: Example showing how to set up an asynchronous GraphQL view for Django 3.1+ applications. Uses AsyncGraphQLView instead of the standard synchronous view.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom strawberry.django.views import AsyncGraphQLView\n\nfrom api.schema import schema\n\nurlpatterns = [\n    path(\"graphql/\", AsyncGraphQLView.as_view(schema=schema)),\n]\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Mutation in Strawberry GraphQL\nDESCRIPTION: A basic mutation example that accepts individual parameters for adding a book. This demonstrates the simple approach before introducing input types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def add_book(self, title: str, author: str) -> Book: ...\n```\n\n----------------------------------------\n\nTITLE: Using Annotated Arguments in Strawberry GraphQL\nDESCRIPTION: Shows how to add metadata to arguments using typing.Annotated with strawberry.argument. This example demonstrates setting a custom name and deprecation reason for a field argument.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/resolvers.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional, Annotated\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def greet(\n        self,\n        name: Optional[str] = strawberry.UNSET,\n        is_morning: Annotated[\n            Optional[bool],\n            strawberry.argument(\n                name=\"morning\",\n                deprecation_reason=\"The field now automatically detects if it's morning or not\",\n            ),\n        ] = None,\n    ) -> str: ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cursor-Based Pagination for Relay Connections\nDESCRIPTION: A custom implementation of cursor-based pagination by extending the Connection class and implementing the resolve_connection method with custom sorting and slicing logic.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/relay.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry import relay\n\n\n@strawberry.type\nclass FruitCustomPaginationConnection(relay.Connection[Fruit]):\n    @classmethod\n    def resolve_connection(\n        cls,\n        nodes: Iterable[Fruit],\n        *,\n        info: Optional[Info] = None,\n        before: Optional[str] = None,\n        after: Optional[str] = None,\n        first: Optional[int] = None,\n        last: Optional[int] = None,\n    ):\n        # NOTE: This is a showcase implementation and is far from\n        # being optimal performance wise\n        edges_mapping = {\n            relay.to_base64(\"fruit_name\", n.name): relay.Edge(\n                node=n,\n                cursor=relay.to_base64(\"fruit_name\", n.name),\n            )\n            for n in sorted(nodes, key=lambda f: f.name)\n        }\n        edges = list(edges_mapping.values())\n        first_edge = edges[0] if edges else None\n        last_edge = edges[-1] if edges else None\n\n        if after is not None:\n            after_edge_idx = edges.index(edges_mapping[after])\n            edges = [e for e in edges if edges.index(e) > after_edge_idx]\n\n        if before is not None:\n            before_edge_idx = edges.index(edges_mapping[before])\n            edges = [e for e in edges if edges.index(e) < before_edge_idx]\n\n        if first is not None:\n            edges = edges[:first]\n\n        if last is not None:\n            edges = edges[-last:]\n\n        return cls(\n            edges=edges,\n            page_info=strawberry.relay.PageInfo(\n                start_cursor=edges[0].cursor if edges else None,\n                end_cursor=edges[-1].cursor if edges else None,\n                has_previous_page=(\n                    first_edge is not None and bool(edges) and edges[0] != first_edge\n                ),\n                has_next_page=(\n                    last_edge is not None and bool(edges) and edges[-1] != last_edge\n                ),\n            ),\n        )\n\n\n@strawberry.type\nclass Query:\n    @relay.connection(FruitCustomPaginationConnection)\n    def fruits(self) -> Iterable[Fruit]:\n        # This can be a database query, a generator, an async generator, etc\n        return all_fruits.values()\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Encoder Implementation\nDESCRIPTION: Example showing how to implement a custom JSON encoder with indentation\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/fastapi.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.fastapi import GraphQLRouter\nimport json\n\n\nclass MyGraphQLRouter(GraphQLRouter):\n    def encode_json(self, data: object) -> bytes:\n        return json.dumps(data, indent=2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Permission Classes in Strawberry GraphQL\nDESCRIPTION: Example showing how to implement asynchronous permission classes in Strawberry GraphQL by creating a class that extends BasePermission with an async has_permission method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_133\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.permission import BasePermission\n\n\nclass IsAuthenticated(BasePermission):\n    message = \"User is not authenticated\"\n\n    async def has_permission(self, source, info, **kwargs):\n        return True\n```\n\n----------------------------------------\n\nTITLE: Background Tasks Implementation\nDESCRIPTION: Example showing how to implement background tasks in Strawberry with FastAPI\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/fastapi.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom fastapi import FastAPI, BackgroundTasks\nfrom strawberry.fastapi import GraphQLRouter\n\n\nasync def notify_new_flavour(name: str):\n    print(name)\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"Hello World\"\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def create_flavour(self, name: str, info: strawberry.Info) -> bool:\n        info.context[\"background_tasks\"].add_task(notify_new_flavour, name)\n        return True\n\n\nschema = strawberry.Schema(Query, Mutation)\n\ngraphql_app = GraphQLRouter(schema)\n\napp = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Reviews Service with Federation 2\nDESCRIPTION: Creates a federated GraphQL service for reviews that extends the Book type with reviews. Implements resolve_reference for entity resolution across services.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nimport strawberry\n\n\n@strawberry.type\nclass Review:\n    id: int\n    body: str\n\n\ndef get_reviews(root: \"Book\") -> List[Review]:\n    return [\n        Review(id=id_, body=f\"A review for {root.id}\")\n        for id_ in range(root.reviews_count)\n    ]\n\n\n@strawberry.federation.type(keys=[\"id\"])\nclass Book:\n    id: strawberry.ID\n    reviews_count: int\n    reviews: List[Review] = strawberry.field(resolver=get_reviews)\n\n    @classmethod\n    def resolve_reference(cls, id: strawberry.ID):\n        # here we could fetch the book from the database\n        # or even from an API\n        return Book(id=id, reviews_count=3)\n\n\n@strawberry.type\nclass Query:\n    _hi: str = strawberry.field(resolver=lambda: \"Hello World!\")\n\n\nschema = strawberry.federation.Schema(\n    query=Query, types=[Book, Review], enable_federation_2=True\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom JSON Scalar in Python\nDESCRIPTION: This snippet demonstrates how to create a custom JSON scalar type in Strawberry GraphQL, with serialization and deserialization functions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/scalars.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom typing import Any, NewType\n\nimport strawberry\n\nJSON = strawberry.scalar(\n    NewType(\"JSON\", object),\n    description=\"The `JSON` scalar type represents JSON values as specified by ECMA-404\",\n    serialize=lambda v: v,\n    parse_value=lambda v: v,\n)\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def data(self, info) -> JSON:\n        return {\"hello\": {\"a\": 1}, \"someNumbers\": [1, 2, 3]}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Query Type in Strawberry (Python)\nDESCRIPTION: This snippet demonstrates how to define a basic root query type in Strawberry with a single field 'name' of type string.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/queries.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    name: str\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Mutations in Strawberry GraphQL\nDESCRIPTION: Example showing how to implement a basic mutation to add a book in Strawberry GraphQL. The mutation accepts title and author parameters and returns a Book object with those values.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/mutations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n# Reader, you can safely ignore Query in this example, it is required by\n# strawberry.Schema so it is included here for completeness\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello() -> str:\n        return \"world\"\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def add_book(self, title: str, author: str) -> Book:\n        print(f\"Adding {title} by {author}\")\n\n        return Book(title=title, author=author)\n\n\nschema = strawberry.Schema(query=Query, mutation=Mutation)\n```\n\n----------------------------------------\n\nTITLE: Basic Strawberry and Litestar Integration\nDESCRIPTION: Shows how to set up a basic GraphQL API using Strawberry with Litestar. Creates a simple schema with a hello query and integrates it with Litestar using make_graphql_controller.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/litestar.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom litestar import Litestar\nfrom strawberry.litestar import make_graphql_controller\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"Hello World\"\n\n\nschema = strawberry.Schema(Query)\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n)\n\napp = Litestar(route_handlers=[GraphQLController])\n```\n\n----------------------------------------\n\nTITLE: Customizing Async Context in Django GraphQL View\nDESCRIPTION: Example showing how to provide a custom context in an async Django GraphQL view. The custom context is then accessible in resolvers via the info parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.django.views import AsyncGraphQLView\nfrom django.http import HttpRequest, HttpResponse\n\n\nclass MyGraphQLView(AsyncGraphQLView):\n    async def get_context(self, request: HttpRequest, response: HttpResponse):\n        return {\"example\": 1}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self, info: strawberry.Info) -> str:\n        return str(info.context[\"example\"])\n```\n\n----------------------------------------\n\nTITLE: Deprecating Fields in Strawberry GraphQL Schema\nDESCRIPTION: Example of deprecating fields in a Strawberry GraphQL schema using the deprecation_reason parameter, which adds the @deprecated directive in the GraphQL schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nimport datetime\nfrom typing import Optional\n\n\n@strawberry.type\nclass User:\n    name: str\n    dob: datetime.date\n    age: Optional[int] = strawberry.field(deprecation_reason=\"Age is deprecated\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Strawberry Schema with StrawberryConfig\nDESCRIPTION: Demonstrates how to create a Strawberry GraphQL schema with custom configuration by using the StrawberryConfig class. This example specifically disables auto camel casing for field names.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema-configurations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom strawberry.schema.config import StrawberryConfig\n\n\n@strawberry.type\nclass Query:\n    example_field: str\n\n\nschema = strawberry.Schema(query=Query, config=StrawberryConfig(auto_camel_case=False))\n```\n\n----------------------------------------\n\nTITLE: WebSocket Connection Handling in Strawberry AIOHTTP GraphQL View\nDESCRIPTION: This code demonstrates how to customize WebSocket connection handling for graphql-ws or graphql-transport-ws protocols. It overrides the on_ws_connect method to implement authentication and authorization logic for incoming connections.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/aiohttp.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict\nfrom strawberry.exceptions import ConnectionRejectionError\nfrom strawberry.aiohttp.views import GraphQLView\n\n\nclass MyGraphQLView(GraphQLView):\n    async def on_ws_connect(self, context: Dict[str, object]):\n        connection_params = context[\"connection_params\"]\n\n        if not isinstance(connection_params, dict):\n            # Reject without a custom graphql-ws error payload\n            raise ConnectionRejectionError()\n\n        if connection_params.get(\"password\") != \"secret\":\n            # Reject with a custom graphql-ws error payload\n            raise ConnectionRejectionError({\"reason\": \"Invalid password\"})\n\n        if username := connection_params.get(\"username\"):\n            # Accept with a custom acknowledgment payload\n            return {\"message\": f\"Hello, {username}!\"}\n\n        # Accept without a acknowledgment payload\n        return await super().on_ws_connect(context)\n```\n\n----------------------------------------\n\nTITLE: Exposing Node and Connection in Query Schema\nDESCRIPTION: Defining a GraphQL query type that exposes both a Node field for direct object retrieval and a connection field for paginated access to a list of Fruits.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/relay.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    node: relay.Node = relay.node()\n\n    @relay.connection(relay.ListConnection[Fruit])\n    def fruits(self) -> Iterable[Fruit]:\n        # This can be a database query, a generator, an async generator, etc\n        return all_fruits.values()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom DateTime Scalar with Pendulum Library in Python\nDESCRIPTION: This snippet demonstrates how to create a custom DateTime scalar using the Pendulum library in Strawberry GraphQL, including serialization and deserialization methods.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/scalars.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pendulum\nfrom datetime import datetime\n\n\nclass DateTime:\n    \"\"\"\n    This class is used to convert the pendulum.DateTime type to a string\n    and back to a pendulum.DateTime type\n    \"\"\"\n\n    @staticmethod\n    def serialize(dt: Union[pendulum.DateTime, datetime]) -> str:  # type: ignore\n        try:\n            return dt.isoformat()\n        except ValueError:\n            return dt.to_iso8601_string()  # type: ignore\n\n    @staticmethod\n    def parse_value(value: str) -> Union[pendulum.DateTime, datetime]:  # type: ignore\n        return pendulum.parse(value)  # type: ignore\n\n\ndate_time = strawberry.scalar(\n    Union[pendulum.DateTime, datetime],  # type: ignore\n    name=\"datetime\",\n    description=\"A date and time\",\n    serialize=DateTime.serialize,\n    parse_value=DateTime.parse_value,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Resolver for Query Field in Strawberry (Python)\nDESCRIPTION: This example shows how to implement a resolver function for a query field, which returns a fixed value when the field is requested.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/queries.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_name() -> str:\n    return \"Strawberry\"\n\n\n@strawberry.type\nclass Query:\n    name: str = strawberry.field(resolver=get_name)\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Schema Class Signature in Strawberry GraphQL\nDESCRIPTION: The API reference signature for the Schema class in Strawberry GraphQL, showing the initialization parameters for creating a schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Schema(Query, mutation=None, subscription=None, **kwargs): ...\n```\n\n----------------------------------------\n\nTITLE: Resolving Circular Imports with strawberry.lazy\nDESCRIPTION: Shows how to handle circular dependencies between types using strawberry.lazy. The example demonstrates a Post type referencing a User type from another module.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# posts.py\nfrom typing import TYPE_CHECKING, Annotated\n\nimport strawberry\n\nif TYPE_CHECKING:\n    from .users import User\n\n\n@strawberry.type\nclass Post:\n    title: str\n    author: Annotated[\"User\", strawberry.lazy(\".users\")]\n```\n\n----------------------------------------\n\nTITLE: Custom Error Extensions Implementation\nDESCRIPTION: Example of implementing custom error extensions and error class in permission handling\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/permissions.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport typing\n\nfrom strawberry.permission import BasePermission\n\nfrom your_business_logic import GQLNotImplementedError\n\n\nclass IsAuthenticated(BasePermission):\n    message = \"User is not authenticated\"\n    error_class = GQLNotImplementedError\n    error_extensions = {\"code\": \"UNAUTHORIZED\"}\n\n    def has_permission(\n        self, source: typing.Any, info: strawberry.Info, **kwargs\n    ) -> bool:\n        return False\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Field Extension in Strawberry\nDESCRIPTION: Example of creating a field extension that supports both synchronous and asynchronous resolvers by implementing both resolve and resolve_async methods.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/field-extensions.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import FieldExtension\n\n\nclass UpperCaseExtension(FieldExtension):\n    def resolve(\n        self, next: Callable[..., Any], source: Any, info: strawberry.Info, **kwargs\n    ):\n        result = next(source, info, **kwargs)\n        return str(result).upper()\n\n    async def resolve_async(\n        self,\n        next: Callable[..., Awaitable[Any]],\n        source: Any,\n        info: strawberry.Info,\n        **kwargs\n    ):\n        result = await next(source, info, **kwargs)\n        return str(result).upper()\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(extensions=[UpperCaseExtension()])\n    async def string(self) -> str:\n        return \"This is a test!!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Cursor-Based Pagination with Strawberry\nDESCRIPTION: Complete implementation of a paginated GraphQL API with Strawberry. Includes user data, cursor encoding/decoding functions, connection types for pagination (Connection, Edge, PageInfo), and a get_users query field that supports pagination.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/connections.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# example.py\n\nfrom base64 import b64encode, b64decode\nfrom typing import List, Optional, Generic, TypeVar\n\nimport strawberry\n\nuser_data = [\n    {\n        \"id\": 1,\n        \"name\": \"Norman Osborn\",\n        \"occupation\": \"Founder, Oscorp Industries\",\n        \"age\": 42,\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Peter Parker\",\n        \"occupation\": \"Freelance Photographer, The Daily Bugle\",\n        \"age\": 20,\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Harold Osborn\",\n        \"occupation\": \"President, Oscorp Industries\",\n        \"age\": 19,\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Eddie Brock\",\n        \"occupation\": \"Journalist, The Eddie Brock Report\",\n        \"age\": 20,\n    },\n]\n\n\ndef encode_user_cursor(id: int) -> str:\n    \"\"\"\n    Encodes the given user ID into a cursor.\n\n    :param id: The user ID to encode.\n\n    :return: The encoded cursor.\n    \"\"\"\n    return b64encode(f\"user:{id}\".encode(\"ascii\")).decode(\"ascii\")\n\n\ndef decode_user_cursor(cursor: str) -> int:\n    \"\"\"\n    Decodes the user ID from the given cursor.\n\n    :param cursor: The cursor to decode.\n\n    :return: The decoded user ID.\n    \"\"\"\n    cursor_data = b64decode(cursor.encode(\"ascii\")).decode(\"ascii\")\n    return int(cursor_data.split(\":\")[1])\n\n\nGenericType = TypeVar(\"GenericType\")\n\n\n@strawberry.type\nclass Connection(Generic[GenericType]):\n    page_info: \"PageInfo\" = strawberry.field(\n        description=\"Information to aid in pagination.\"\n    )\n\n    edges: list[\"Edge[GenericType]\"] = strawberry.field(\n        description=\"A list of edges in this connection.\"\n    )\n\n\n@strawberry.type\nclass PageInfo:\n    has_next_page: bool = strawberry.field(\n        description=\"When paginating forwards, are there more items?\"\n    )\n\n    has_previous_page: bool = strawberry.field(\n        description=\"When paginating backwards, are there more items?\"\n    )\n\n    start_cursor: Optional[str] = strawberry.field(\n        description=\"When paginating backwards, the cursor to continue.\"\n    )\n\n    end_cursor: Optional[str] = strawberry.field(\n        description=\"When paginating forwards, the cursor to continue.\"\n    )\n\n\n@strawberry.type\nclass Edge(Generic[GenericType]):\n    node: GenericType = strawberry.field(description=\"The item at the end of the edge.\")\n\n    cursor: str = strawberry.field(description=\"A cursor for use in pagination.\")\n\n\n@strawberry.type\nclass User:\n    id: int = strawberry.field(description=\"The id of the user.\")\n\n    name: str = strawberry.field(description=\"The name of the user.\")\n\n    occupation: str = strawberry.field(description=\"The occupation of the user.\")\n\n    age: int = strawberry.field(description=\"The age of the user.\")\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(description=\"Get a list of users.\")\n    def get_users(\n        self, first: int = 2, after: Optional[str] = None\n    ) -> Connection[User]:\n        if after is not None:\n            # decode the user ID from the given cursor.\n            user_id = decode_user_cursor(cursor=after)\n        else:\n            # no cursor was given (this happens usually when the\n            # client sends a query for the first time).\n            user_id = 0\n\n        # filter the user data, going through the next set of results.\n        filtered_data = list(filter(lambda user: user[\"id\"] > user_id, user_data))\n\n        # slice the relevant user data (Here, we also slice an\n        # additional user instance, to prepare the next cursor).\n        sliced_users = filtered_data[: first + 1]\n\n        if len(sliced_users) > first:\n            # calculate the client's next cursor.\n            last_user = sliced_users.pop(-1)\n            next_cursor = encode_user_cursor(id=last_user[\"id\"])\n            has_next_page = True\n        else:\n            # We have reached the last page, and\n            # don't have the next cursor.\n            next_cursor = None\n            has_next_page = False\n\n        # We know that we have items in the\n        # previous page window if the initial user ID\n        # was not the first one.\n        has_previous_page = user_id > 0\n\n        # build user edges.\n        edges = [\n            Edge(\n                node=User(**user),\n                cursor=encode_user_cursor(id=user[\"id\"]),\n            )\n            for user in sliced_users\n        ]\n\n        if edges:\n            # we have atleast one edge. Get the cursor\n            # of the first edge we have.\n            start_cursor = edges[0].cursor\n        else:\n            # We have no edges to work with.\n            start_cursor = None\n\n        if len(edges) > 1:\n            # We have atleast 2 edges. Get the cursor\n            # of the last edge we have.\n            end_cursor = edges[-1].cursor\n        else:\n            # We don't have enough edges to work with.\n            end_cursor = None\n\n        return Connection(\n            edges=edges,\n            page_info=PageInfo(\n                has_next_page=has_next_page,\n                has_previous_page=has_previous_page,\n                start_cursor=start_cursor,\n                end_cursor=end_cursor,\n            ),\n        )\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Customizing GraphQL Context in Django View\nDESCRIPTION: Example showing how to extend the GraphQLView to provide a custom context. The custom context is then accessible in resolvers via the info parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.django.views import GraphQLView\nfrom django.http import HttpRequest, HttpResponse\n\n\nclass MyGraphQLView(GraphQLView):\n    def get_context(self, request: HttpRequest, response: HttpResponse):\n        return {\"example\": 1}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self, info: strawberry.Info) -> str:\n        return str(info.context[\"example\"])\n```\n\n----------------------------------------\n\nTITLE: Setting up GraphQL View with Django URLs\nDESCRIPTION: Basic setup for adding a GraphQL endpoint to Django URLs using Strawberry's GraphQLView. Demonstrates how to map a URL path to a GraphQL view with CSRF exemption.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom django.views.decorators.csrf import csrf_exempt\n\nfrom strawberry.django.views import GraphQLView\n\nfrom api.schema import schema\n\nurlpatterns = [\n    path(\"graphql/\", csrf_exempt(GraphQLView.as_view(schema=schema))),\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Mutations for Sanic/Flask/Django/Channels/AIOHTTP (Python)\nDESCRIPTION: Shows how to create mutations for handling single file uploads, multiple file uploads, and nested file uploads using synchronous functions in various Python web frameworks.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/file-upload.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nimport strawberry\nfrom strawberry.file_uploads import Upload\n\n\n@strawberry.input\nclass FolderInput:\n    files: typing.List[Upload]\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def read_file(self, file: Upload) -> str:\n        return file.read().decode(\"utf-8\")\n\n    @strawberry.mutation\n    def read_files(self, files: typing.List[Upload]) -> typing.List[str]:\n        contents = []\n        for file in files:\n            content = file.read().decode(\"utf-8\")\n            contents.append(content)\n        return contents\n\n    @strawberry.mutation\n    def read_folder(self, folder: FolderInput) -> typing.List[str]:\n        contents = []\n        for file in folder.files:\n            contents.append(file.read().decode(\"utf-8\"))\n        return contents\n```\n\n----------------------------------------\n\nTITLE: Using CachingExtension with a Client Type\nDESCRIPTION: Example of applying the CachingExtension to a field in a Client type, with a specific caching time parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/field-extensions.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Client:\n\n    @strawberry.field(extensions=[CachingExtensions(caching_time=200)])\n    def analyzed_hours(self, info) -> int:\n        return do_expensive_computation()\n```\n\n----------------------------------------\n\nTITLE: Using Input Types in Mutations\nDESCRIPTION: Shows how to use input types as arguments in GraphQL mutations.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/input-types.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def store_point(self, a: Point2D) -> bool:\n        return True\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of MaskErrors Extension in Strawberry GraphQL\nDESCRIPTION: Demonstrates how to apply the MaskErrors extension to a Strawberry Schema to hide error messages from clients. This prevents exposing sensitive details to end users when errors occur in field resolvers.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/mask-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import MaskErrors\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        MaskErrors(),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing Other Types in Object Definitions\nDESCRIPTION: Example showing how to reference other object types within a Strawberry type definition. A Book type is created that references the Character type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/object-types.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Character:\n    name: str\n    age: int\n\n\n@strawberry.type\nclass Book:\n    title: str\n    main_character: Character\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Character {\n  name: String!\n  age: Int!\n}\n\ntype Book {\n  title: String!\n  mainCharacter: Character!\n}\n```\n\n----------------------------------------\n\nTITLE: Using GlobalID in Strawberry GraphQL Mutations (Python)\nDESCRIPTION: This snippet shows how to use the GlobalID scalar in mutations to identify and retrieve objects. It includes both asynchronous and synchronous examples of updating a fruit's weight using its GlobalID.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/relay.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    async def update_fruit_weight(\n        self,\n        info: strawberry.Info,\n        id: relay.GlobalID,\n        weight: float,\n    ) -> Fruit:\n        # resolve_node will return an awaitable that returns the Fruit object\n        fruit = await id.resolve_node(info, ensure_type=Fruit)\n        fruit.weight = weight\n        return fruit\n\n    @strawberry.mutation\n    def update_fruit_weight_sync(\n        self,\n        info: strawberry.Info,\n        id: relay.GlobalID,\n        weight: float,\n    ) -> Fruit:\n        # resolve_node will return the Fruit object\n        fruit = id.resolve_node_sync(info, ensure_type=Fruit)\n        fruit.weight = weight\n        return fruit\n```\n\n----------------------------------------\n\nTITLE: Class-based Context Implementation\nDESCRIPTION: Example of implementing custom context using a class-based approach inheriting from BaseContext\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/fastapi.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom fastapi import FastAPI, Depends, Request, WebSocket, BackgroundTasks\nfrom strawberry.fastapi import BaseContext, GraphQLRouter\n\n\nclass CustomContext(BaseContext):\n    def __init__(self, greeting: str, name: str):\n        self.greeting = greeting\n        self.name = name\n\n\ndef custom_context_dependency() -> CustomContext:\n    return CustomContext(greeting=\"you rock!\", name=\"John\")\n\n\nasync def get_context(\n    custom_context=Depends(custom_context_dependency),\n):\n    return custom_context\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self, info: strawberry.Info) -> str:\n        return f\"Hello {info.context.name}, {info.context.greeting}\"\n\n\nschema = strawberry.Schema(Query)\n\ngraphql_app = GraphQLRouter(\n    schema,\n    context_getter=get_context,\n)\n\napp = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Creating a GraphQL Subscription with Strawberry\nDESCRIPTION: Example of implementing GraphQL subscriptions with AIOHTTP integration. The code shows how to create a subscription that emits sequential numbers up to a target value with a delay between emissions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_138\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport typing\nimport strawberry\n\n\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def count(self, target: int = 100) -> typing.AsyncGenerator[int, None]:\n        for i in range(target):\n            yield i\n            await asyncio.sleep(0.5)\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def _unused(self) -> str:\n        return \"\"\n\n\nschema = strawberry.Schema(subscription=Subscription, query=Query)\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Directive in Strawberry GraphQL\nDESCRIPTION: Example of creating a schema directive called 'Keys' that can be applied to Object types and accepts a 'fields' parameter. The directive is defined using the strawberry.schema_directive decorator with location specification.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema-directives.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.schema_directive import Location\n\n\n@strawberry.schema_directive(locations=[Location.OBJECT])\nclass Keys:\n    fields: str\n\n\nfrom .directives import Keys\n\n\n@strawberry.type(directives=[Keys(fields=\"id\")])\nclass User:\n    id: strawberry.ID\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Object Type in Schema Language\nDESCRIPTION: Example of a basic object type definition using the GraphQL schema language. This shows how to define a Character type with name and age fields.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/object-types.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Character {\n  name: String!\n  age: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Execution Context with Info Parameter\nDESCRIPTION: Demonstrates how to access execution information in resolvers using the Info parameter. This allows accessing context, field information, and other execution details in resolver functions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/resolvers.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.types import Info\n\n\ndef full_name(root: \"User\", info: strawberry.Info) -> str:\n    return f\"{root.first_name} {root.last_name} {info.field_name}\"\n\n\n@strawberry.type\nclass User:\n    first_name: str\n    last_name: str\n    full_name: str = strawberry.field(resolver=full_name)\n```\n\n----------------------------------------\n\nTITLE: Using Input Types for Mutations in Strawberry GraphQL\nDESCRIPTION: Implementation of an input type to encapsulate multiple fields for a mutation. This refactors the add_book mutation to accept a single structured input object instead of multiple parameters.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.input\nclass AddBookInput:\n    title: str\n    author: str\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def add_book(self, book: AddBookInput) -> Book: ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Window Function\nDESCRIPTION: Generic function to handle pagination, sorting and filtering of data sets. Includes validation for limit and offset parameters.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/offset-based.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_pagination_window(\n    dataset: List[GenericType],\n    ItemType: type,\n    order_by: str,\n    limit: int,\n    offset: int = 0,\n    filters: dict[str, str] = {},\n) -> PaginationWindow:\n    if limit <= 0 or limit > 100:\n        raise Exception(f\"limit ({limit}) must be between 0-100\")\n\n    if filters:\n        dataset = list(filter(lambda x: matches(x, filters), dataset))\n\n    dataset.sort(key=lambda x: x[order_by])\n\n    if offset != 0 and not 0 <= offset < len(dataset):\n        raise Exception(f\"offset ({offset}) is out of range \" f\"(0-{len(dataset) - 1})\")\n\n    total_items_count = len(dataset)\n\n    items = dataset[offset : offset + limit]\n\n    items = [ItemType.from_row(x) for x in items]\n\n    return PaginationWindow(items=items, total_items_count=total_items_count)\n\n\ndef matches(item, filters):\n    for attr_name, val in filters.items():\n        if val not in item[attr_name]:\n            return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Defining a User Type with Lazy Post References in Strawberry GraphQL\nDESCRIPTION: This snippet demonstrates how to define a User type that references a list of Post types using strawberry.lazy. It prevents circular imports while maintaining type safety through TYPE_CHECKING.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/lazy.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# users.py\nfrom typing import TYPE_CHECKING, Annotated, List\n\nimport strawberry\n\nif TYPE_CHECKING:\n    from .posts import Post\n\n\n@strawberry.type\nclass User:\n    name: str\n    posts: List[Annotated[\"Post\", strawberry.lazy(\".posts\")]]\n```\n\n----------------------------------------\n\nTITLE: Defining User Type with Full Name Field in Python and GraphQL\nDESCRIPTION: This snippet defines a User type with first_name, last_name, and full_name fields using Strawberry in Python, and shows the corresponding GraphQL schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/accessing-parent-data.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.type\nclass User:\n    first_name: str\n    last_name: str\n    full_name: str\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  firstName: String!\n  lastName: String!\n  fullName: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Context Objects for Strawberry Channels GraphQL\nDESCRIPTION: Shows how to extend the base consumer classes to provide custom context objects with properties for accessing the current user and session in GraphQL resolvers.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.auth.models import AnonymousUser\n\nfrom strawberry.channels import ChannelsConsumer, ChannelsRequest\nfrom strawberry.channels import GraphQLHTTPConsumer as BaseGraphQLHTTPConsumer\nfrom strawberry.channels import GraphQLWSConsumer as BaseGraphQLWSConsumer\nfrom strawberry.http.temporal_response import TemporalResponse\n\n\n@dataclass\nclass ChannelsContext:\n    request: ChannelsRequest\n    response: TemporalResponse\n\n    @property\n    def user(self):\n        # Depends on Channels' AuthMiddlewareStack\n        if \"user\" in self.request.consumer.scope:\n            return self.request.consumer.scope[\"user\"]\n\n        return AnonymousUser()\n\n    @property\n    def session(self):\n        # Depends on Channels' SessionMiddleware / AuthMiddlewareStack\n        if \"session\" in self.request.consumer.scope:\n            return self.request.consumer.scope[\"session\"]\n\n        return None\n\n\n@dataclass\nclass ChannelsWSContext:\n    request: ChannelsConsumer\n    connection_params: Optional[Dict[str, Any]] = None\n\n    @property\n    def ws(self) -> ChannelsConsumer:\n        return self.request\n\n\nclass GraphQLHTTPConsumer(BaseGraphQLHTTPConsumer):\n    @override\n    async def get_context(\n        self, request: ChannelsRequest, response: TemporalResponse\n    ) -> ChannelsContext:\n        return ChannelsContext(\n            request=request,\n            response=response,\n        )\n\n\nclass GraphQLWSConsumer(BaseGraphQLWSConsumer):\n    @override\n    async def get_context(\n        self, request: ChannelsConsumer, connection_params: Any\n    ) -> ChannelsWSContext:\n        return ChannelsWSContext(\n            request=request,\n            connection_params=connection_params,\n        )\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Gateway for Federation Services\nDESCRIPTION: JavaScript code for setting up an Apollo Gateway that connects to the books and reviews services, allowing them to be queried through a single GraphQL endpoint.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation-v1.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ApolloServer } = require(\"apollo-server\");\nconst { ApolloGateway } = require(\"@apollo/gateway\");\n\nconst gateway = new ApolloGateway({\n  serviceList: [\n    { name: \"books\", url: \"http://localhost:8000\" },\n    { name: \"reviews\", url: \"http://localhost:8080\" },\n  ],\n});\n\nconst server = new ApolloServer({ gateway });\n\nserver.listen().then(({ url }) => {\n  console.log(`🚀 Server ready at ${url}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Subscription with Strawberry in Python\nDESCRIPTION: This snippet shows how to test a GraphQL subscription using Strawberry. It defines a subscription type, creates a schema, and tests the subscription by iterating over the results.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/testing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport pytest\nimport strawberry\n\n\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def count(self, target: int = 100) -> int:\n        for i in range(target):\n            yield i\n            await asyncio.sleep(0.5)\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello() -> str:\n        return \"world\"\n\n\nschema = strawberry.Schema(query=Query, subscription=Subscription)\n\n\n@pytest.mark.asyncio\nasync def test_subscription():\n    query = \"\"\"\n    \tsubscription {\n        \tcount(target: 3)\n    \t}\n    \"\"\"\n\n    sub = await schema.subscribe(query)\n\n    index = 0\n    async for result in sub:\n        assert not result.errors\n        assert result.data == {\"count\": index}\n\n        index += 1\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload with Lists in Strawberry GraphQL\nDESCRIPTION: Example of how to implement file upload with lists using the ASGI integration in Strawberry GraphQL. This code demonstrates reading multiple uploaded files and returning their contents as a list of strings.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_137\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nimport strawberry\nfrom strawberry.file_uploads import Upload\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    async def read_files(self, files: typing.List[Upload]) -> typing.List[str]:\n        contents = []\n        for file in files:\n            content = (await file.read()).decode()\n            contents.append(content)\n        return contents\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Interfaces with Strawberry\nDESCRIPTION: Example showing how to define a GraphQL interface using the @strawberry.interface decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_183\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.interface\nclass Node:\n    id: strawberry.ID\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resolver with Function Parameter in Strawberry\nDESCRIPTION: Demonstrates how to define a resolver by passing a function to the field definition. The resolver function 'get_last_user' returns a User object when the 'lastUser' field is queried.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/resolvers.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_last_user() -> User:\n    return User(name=\"Marco\")\n\n\n@strawberry.type\nclass Query:\n    last_user: User = strawberry.field(resolver=get_last_user)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using GraphQL Unions in Strawberry\nDESCRIPTION: Example of creating and using a GraphQL union type in Strawberry. This pattern enables returning different types from the same field while maintaining type safety.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_125\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass User:\n    name: str\n\n\n@strawberry.type\nclass Error:\n    message: str\n\n\nUserOrError = strawberry.union(\"UserOrError\", (User, Error))\n\nx: UserOrError = User(name=\"Patrick\")\n```\n\n----------------------------------------\n\nTITLE: Defining Strawberry Schema for Paginated Users\nDESCRIPTION: Python code using Strawberry to define the GraphQL schema for paginated user queries, including User, PageMeta, and UserResponse types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/cursor-based.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# example.py\n\nfrom typing import List, Optional, Dict, Any, cast\n\nimport strawberry\n\n\n@strawberry.type\nclass User:\n    id: str = strawberry.field(description=\"ID of the user.\")\n    name: str = strawberry.field(description=\"The name of the user.\")\n    occupation: str = strawberry.field(description=\"The occupation of the user.\")\n    age: int = strawberry.field(description=\"The age of the user.\")\n\n    @staticmethod\n    def from_row(row: Dict[str, Any]) -> \"User\":\n        return User(\n            id=row[\"id\"], name=row[\"name\"], occupation=row[\"occupation\"], age=row[\"age\"]\n        )\n\n\n@strawberry.type\nclass PageMeta:\n    next_cursor: Optional[str] = strawberry.field(\n        description=\"The next cursor to continue with.\"\n    )\n\n\n@strawberry.type\nclass UserResponse:\n    users: List[User] = strawberry.field(description=\"The list of users.\")\n\n    page_meta: PageMeta = strawberry.field(description=\"Metadata to aid in pagination.\")\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(description=\"Get a list of users.\")\n    def get_users(self) -> UserResponse: ...\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Extending GraphQLView for Custom Context in Strawberry AIOHTTP\nDESCRIPTION: This code extends the GraphQLView class to provide a custom context object for resolvers. It overrides the get_context method to include additional data in the context, which can be accessed in the resolver functions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/aiohttp.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom typing import Union\nfrom strawberry.types import Info\nfrom strawberry.aiohttp.views import GraphQLView\nfrom aiohttp.web import Request, Response, WebSocketResponse\n\n\nclass MyGraphQLView(GraphQLView):\n    async def get_context(\n        self, request: Request, response: Union[Response, WebSocketResponse]\n    ):\n        return {\"request\": request, \"response\": response, \"example\": 1}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self, info: strawberry.Info) -> str:\n        return str(info.context[\"example\"])\n```\n\n----------------------------------------\n\nTITLE: Framework-Specific Authentication Implementation\nDESCRIPTION: Implementation of authentication checks using Starlette request object with header and query parameter validation\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/permissions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport typing\nfrom myauth import authenticate_header, authenticate_query_param\n\nfrom starlette.requests import Request\nfrom starlette.websockets import WebSocket\nfrom strawberry.permission import BasePermission\n\n\nclass IsAuthenticated(BasePermission):\n    message = \"User is not authenticated\"\n\n    def has_permission(\n        self, source: typing.Any, info: strawberry.Info, **kwargs\n    ) -> bool:\n        request: typing.Union[Request, WebSocket] = info.context[\"request\"]\n\n        if \"Authorization\" in request.headers:\n            return authenticate_header(request)\n\n        if \"auth\" in request.query_params:\n            return authenticate_query_params(request)\n\n        return False\n```\n\n----------------------------------------\n\nTITLE: Overriding Cache Key in DataLoader\nDESCRIPTION: This example shows how to override the default cache key behavior in DataLoader by providing a custom cache_key_fn. It demonstrates using a custom User class with id and name attributes, and using the id as the cache key.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/dataloaders.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Union\nfrom strawberry.dataloader import DataLoader\n\nclass User:\n    def __init__(self, custom_id: int, name: str):\n        self.id: int = custom_id\n        self.name: str = name\n\nasync def loader_fn(keys):\n    return keys\n\ndef custom_cache_key(key):\n    return key.id\n\nloader = DataLoader(load_fn=loader_fn, cache_key_fn=custom_cache_key)\ndata1 = await loader.load(User(1, \"Nick\"))\ndata2 = await loader.load(User(1, \"Nick\"))\nassert data1 == data2  # returns true\n```\n\n----------------------------------------\n\nTITLE: Advanced Context Handling with Database Session\nDESCRIPTION: Shows how to use a custom context getter to inject database dependencies and user information into resolvers. Demonstrates accessing database sessions and user data in GraphQL resolvers.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/litestar.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom litestar import Request, Litestar\nfrom strawberry.litestar import make_graphql_controller\nfrom strawberry.types.info import Info\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom app.models import User\nfrom sqlalchemy import select\n\n\nasync def custom_context_getter(request: Request, db_session: AsyncSession):\n    return {\"user\": request.user, \"session\": db_session}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    async def hello(self, info: strawberry.Info[dict, None]) -> str:\n        session: AsyncSession = info.context[\"session\"]\n        user: User = info.context[\"user\"]\n\n        query = select(User).where(User.id == user.id)\n        user = (await session.execute((query))).scalar_one()\n        return f\"Hello {user.first_name}\"\n\n\nschema = strawberry.Schema(Query)\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n    context_getter=custom_context_getter,\n)\n\napp = Litestar(route_handlers=[GraphQLController])\n```\n\n----------------------------------------\n\nTITLE: Implementing PaginationWindow Type\nDESCRIPTION: Defines a generic PaginationWindow type that represents a slice of paginated items with total count information.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/offset-based.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nItem = TypeVar(\"Item\")\n\n@strawberry.type\nclass PaginationWindow(Generic[Item]):\n    items: List[Item] = strawberry.field(\n        description=\"The list of items in this pagination window.\"\n    )\n\n    total_items_count: int = strawberry.field(\n        description=\"Total number of items in the filtered dataset.\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in DataLoader\nDESCRIPTION: This snippet demonstrates how to handle errors in the DataLoader by returning exceptions for invalid keys. It shows a load_users function that returns User objects or ValueError exceptions based on the input keys.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/dataloaders.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Union\nfrom strawberry.dataloader import DataLoader\n\nusers_database = {\n    1: User(id=1),\n    2: User(id=2),\n}\n\nasync def load_users(keys: List[int]) -> List[Union[User, ValueError]]:\n    def lookup(key: int) -> Union[User, ValueError]:\n        if user := users_database.get(key):\n            return user\n\n        return ValueError(\"not found\")\n\n    return [lookup(key) for key in keys]\n\n\nloader = DataLoader(load_fn=load_users)\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in GraphQL Resolver\nDESCRIPTION: Example showing how to access request information from the context object in a GraphQL resolver. This allows access to Django request properties like the user.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self, info: strawberry.Info) -> str:\n        return str(info.context.request.user)\n```\n\n----------------------------------------\n\nTITLE: Defining Union Types Using Python's typing.Union\nDESCRIPTION: Implementation of a GraphQL union type in Strawberry using Python's built-in Union type from the typing module, which autogenerates the union type name.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/union.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\nimport strawberry\n\n\n@strawberry.type\nclass Audio:\n    duration: int\n\n\n@strawberry.type\nclass Video:\n    thumbnail_url: str\n\n\n@strawberry.type\nclass Image:\n    src: str\n\n\n@strawberry.type\nclass Query:\n    latest_media: Union[Audio, Video, Image]\n```\n\n----------------------------------------\n\nTITLE: Union Type Error Handling\nDESCRIPTION: Shows how to handle complex error cases using union types in mutations.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/errors.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom typing import Annotated, Union\n\n@strawberry.type\nclass RegisterUserSuccess:\n    user: User\n\n@strawberry.type\nclass UsernameAlreadyExistsError:\n    username: str\n    alternative_username: str\n\nResponse = Annotated[\n    Union[RegisterUserSuccess, UsernameAlreadyExistsError],\n    strawberry.union(\"RegisterUserResponse\"),\n]\n\n@strawberry.mutation\ndef register_user(username: str, password: str) -> Response:\n    if username_already_exists(username):\n        return UsernameAlreadyExistsError(\n            username=username,\n            alternative_username=generate_username_suggestion(username),\n        )\n\n    user = create_user(username, password)\n    return RegisterUserSuccess(user=user)\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity Interface in Apollo Federation with Strawberry\nDESCRIPTION: Example of how to define a basic entity interface using the @strawberry.federation.interface decorator with a key field. This creates an interface that can be referenced across subgraphs.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/federation/entity-interfaces.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.federation.interface(keys=[\"id\"])\nclass Media:\n    id: strawberry.ID\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Media @key(fields: \"id\") @interface {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Resolver with Type Hints (Python)\nDESCRIPTION: Demonstrates how to implement an async resolver with proper type hints in Strawberry, resolving previous typing issues with async resolvers.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_70\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\nasync def get_user_age() -> int:\n    return 0\n\n\n@strawberry.type\nclass User:\n    name: str\n    age: int = strawberry.field(resolver=get_user_age)\n```\n\n----------------------------------------\n\nTITLE: Implementing MaskErrors Extension in Python with Strawberry GraphQL\nDESCRIPTION: Example showing how to use the MaskErrors extension to hide error messages from clients for security purposes. The extension masks all errors raised in field resolvers by default.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_83\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import MaskErrors\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        MaskErrors(),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Strawberry Input Type from Pydantic Model\nDESCRIPTION: This snippet demonstrates how to create a Strawberry GraphQL input type from a Pydantic model using the @strawberry.experimental.pydantic.input decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/pydantic.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom .models import User\n\n\n@strawberry.experimental.pydantic.input(model=User)\nclass UserInput:\n    id: strawberry.auto\n    name: strawberry.auto\n    friends: strawberry.auto\n```\n\n----------------------------------------\n\nTITLE: Defining a User Type in Strawberry and GraphQL\nDESCRIPTION: This snippet demonstrates how to define a User type in Strawberry Python and compares it to the equivalent GraphQL SDL. It showcases Strawberry's decorator syntax and type hinting, which closely resembles the GraphQL schema definition.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/why.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass User:\n    id: strawberry.ID\n    name: str\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  id: ID!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Datadog Tracing by Extending the Extension\nDESCRIPTION: Example of how to customize the Datadog tracing by extending the DatadogTracingExtension class and overriding the create_span method to add custom tags to spans.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/datadog.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom ddtrace import Span\n\nfrom strawberry.extensions import LifecycleStep\nfrom strawberry.extensions.tracing import DatadogTracingExtension\n\n\nclass DataDogExtension(DatadogTracingExtension):\n    def create_span(\n        self,\n        lifecycle_step: LifecycleStep,\n        name: str,\n        **kwargs,\n    ) -> Span:\n        span = super().create_span(lifecycle_step, name, **kwargs)\n        if lifecycle_step == LifecycleStep.OPERATION:\n            span.set_tag(\"graphql.query\", self.execution_context.query)\n        return span\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query Type\nDESCRIPTION: Implements the GraphQL query type with a users field that supports pagination, ordering, and filtering options.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/offset-based.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    @strawberry.field(description=\"Get a list of users.\")\n    def users(\n        self,\n        order_by: str,\n        limit: int,\n        offset: int = 0,\n        name: str | None = None,\n        occupation: str | None = None,\n    ) -> PaginationWindow[User]:\n        filters = {}\n\n        if name:\n            filters[\"name\"] = name\n\n        if occupation:\n            filters[\"occupation\"] = occupation\n\n        return get_pagination_window(\n            dataset=user_data,\n            ItemType=User,\n            order_by=order_by,\n            limit=limit,\n            offset=offset,\n            filters=filters,\n        )\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema in Strawberry Python\nDESCRIPTION: Example schema definition with User and Post types using Strawberry decorators. Demonstrates type definitions, field relationships, and query resolvers.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/codegen/query-codegen.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nimport strawberry\n\n\n@strawberry.type\nclass Post:\n    id: strawberry.ID\n    title: str\n\n\n@strawberry.type\nclass User:\n    id: strawberry.ID\n    name: str\n    email: str\n\n    @strawberry.field\n    def post(self) -> Post:\n        return Post(id=self.id, title=f\"Post for {self.name}\")\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self, info) -> User:\n        return User(id=strawberry.ID(\"1\"), name=\"John\", email=\"abc@bac.com\")\n\n    @strawberry.field\n    def all_users(self) -> List[User]:\n        return [\n            User(id=strawberry.ID(\"1\"), name=\"John\", email=\"abc@bac.com\"),\n        ]\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Defining Query Directives in Strawberry GraphQL\nDESCRIPTION: Example of how to create a directive in Strawberry GraphQL that can be applied to fields. This example shows an uppercase directive that transforms string values.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_175\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.directive import DirectiveLocation\n\n\n@strawberry.type\nclass Query:\n    cake: str = \"made_in_switzerland\"\n\n\n@strawberry.directive(\n    locations=[DirectiveLocation.FIELD], description=\"Make string uppercase\"\n)\ndef uppercase(value: str, example: str):\n    return value.upper()\n\n\nschema = strawberry.Schema(query=Query, directives=[uppercase])\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Mutation in Strawberry GraphQL (Python)\nDESCRIPTION: This snippet demonstrates how to create a login mutation in Strawberry GraphQL. It defines LoginSuccess and LoginError types, and a login field that returns a union of these types based on authentication success.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom .types import User\n\nfrom typing import Annotated, Union\n\n\n@strawberry.type\nclass LoginSuccess:\n    user: User\n\n\n@strawberry.type\nclass LoginError:\n    message: str\n\n\nLoginResult = Annotated[\n    Union[LoginSuccess, LoginError], strawberry.union(\"LoginResult\")\n]\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.field\n    def login(self, username: str, password: str) -> LoginResult:\n        # Your domain-specific authentication logic would go here\n        user = ...\n\n        if user is None:\n            return LoginError(message=\"Something went wrong\")\n\n        return LoginSuccess(user=User(username=username))\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hook in Strawberry GraphQL Extension\nDESCRIPTION: Shows how to implement a lifecycle hook (on_operation) using generator syntax to run code at the start and end of a GraphQL operation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/custom-extensions.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions import SchemaExtension\n\n\nclass MyExtension(SchemaExtension):\n    def on_operation(self):\n        print(\"GraphQL operation start\")\n        yield\n        print(\"GraphQL operation end\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Reference Resolution for Entity\nDESCRIPTION: Demonstrates how to implement a resolve_reference method for an entity to handle fetching data when referenced across subgraphs.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/federation/entities.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.federation.type(keys=[\"id\"])\nclass Book:\n    id: strawberry.ID\n    title: str\n\n    @classmethod\n    def resolve_reference(cls, id: strawberry.ID) -> \"Book\":\n        # here we could fetch the book from the database\n        # or even from an API\n        return Book(id=id, title=\"My Book\")\n```\n\n----------------------------------------\n\nTITLE: Hiding Fields with Private Type in Strawberry GraphQL\nDESCRIPTION: Demonstrates how to use strawberry.Private to hide sensitive fields from the GraphQL schema. The example shows hiding a password field from a User type while keeping name and age visible.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass User:\n    name: str\n    age: int\n    password: strawberry.Private[str]\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self) -> User:\n        return User(name=\"Patrick\", age=100, password=\"This is fake\")\n\n\nschema = strawberry.Schema(query=Query)\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  user: User!\n}\n\ntype User {\n  name: String!\n  age: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Using New Scalar Types in Strawberry GraphQL\nDESCRIPTION: Demonstrates how to use the newly added scalar types JSON, Base16, Base32, and Base64 in a Strawberry GraphQL type definition.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_112\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.scalar import Base16, Base32, Base64, JSON\n\n\n@strawberry.type\nclass Example:\n    a: Base16\n    b: Base32\n    c: Base64\n    d: JSON\n```\n\n----------------------------------------\n\nTITLE: Defining User Type in Strawberry GraphQL\nDESCRIPTION: This snippet demonstrates how to define a simple User type using Strawberry decorators. It creates a User class with a single ID field of type strawberry.ID.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/dataloaders.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.type\nclass User:\n    id: strawberry.ID\n```\n\n----------------------------------------\n\nTITLE: Using a Generic Page Type with User Objects\nDESCRIPTION: Demonstrates how to use the generic Page type with a User object type, showing how Strawberry automatically generates the appropriate GraphQL schema with correctly named types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/generics.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass User:\n    name: str\n\n\n@strawberry.type\nclass Query:\n    users: Page[User]\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  users: UserPage!\n}\n\ntype User {\n  name: String!\n}\n\ntype UserPage {\n  number: Int!\n  items: [User!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Reviews Service with Strawberry Federation\nDESCRIPTION: Code for implementing a reviews service that extends the Book type from another service. It defines a Review type and extends Book with reviews and reviews_count fields, implementing resolve_reference for entity resolution.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation-v1.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Review:\n    id: int\n    body: str\n\n\ndef get_reviews(root: \"Book\") -> List[Review]:\n    return [\n        Review(id=id_, body=f\"A review for {root.id}\")\n        for id_ in range(root.reviews_count)\n    ]\n\n\n@strawberry.federation.type(extend=True, keys=[\"id\"])\nclass Book:\n    id: strawberry.ID = strawberry.federation.field(external=True)\n    reviews_count: int\n    reviews: List[Review] = strawberry.field(resolver=get_reviews)\n\n    @classmethod\n    def resolve_reference(cls, id: strawberry.ID):\n        # here we could fetch the book from the database\n        # or even from an API\n        return Book(id=id, reviews_count=3)\n```\n\n----------------------------------------\n\nTITLE: Passing Keyword Arguments to to_pydantic in Strawberry-Pydantic Integration\nDESCRIPTION: This snippet demonstrates how to use the new feature of passing keyword arguments to the to_pydantic method when converting a Strawberry type to a Pydantic model. It shows the creation of a Pydantic model, a corresponding Strawberry type, and how to use the to_pydantic method with additional arguments.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_94\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nimport strawberry\n\n\nclass MyModel(BaseModel):\n    email: str\n    password: str\n\n\n@strawberry.experimental.pydantic.input(model=MyModel)\nclass MyModelStrawberry:\n    email: strawberry.auto\n    # no password field here\n\n\nMyModelStrawberry(email=\"\").to_pydantic(password=\"hunter\")\n```\n\n----------------------------------------\n\nTITLE: Merging GraphQL Types in Strawberry\nDESCRIPTION: Demonstrates how to merge multiple GraphQL type definitions into a combined query type using Strawberry's merge_types utility.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_128\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.tools import merge_types\n\n\n@strawberry.type\nclass QueryA: ...\n\n\n@strawberry.type\nclass QueryB: ...\n\n\nComboQuery = merge_types(\"ComboQuery\", (QueryB, QueryA))\nschema = strawberry.Schema(query=ComboQuery)\n```\n\n----------------------------------------\n\nTITLE: Using InputMutationExtension to Create Input Type Mutations\nDESCRIPTION: Example showing how to use the InputMutationExtension to automatically create an input type for a mutation. This creates a single 'input' parameter containing all the required arguments.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/mutations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.field_extensions import InputMutationExtension\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation(extensions=[InputMutationExtension()])\n    def update_fruit_weight(\n        self,\n        info: strawberry.Info,\n        id: strawberry.ID,\n        weight: Annotated[\n            float,\n            strawberry.argument(description=\"The fruit's new weight in grams\"),\n        ],\n    ) -> Fruit:\n        fruit = ...  # retrieve the fruit with the given ID\n        fruit.weight = weight\n        ...  # maybe save the fruit in the database\n        return fruit\n```\n\n----------------------------------------\n\nTITLE: Implementing In-Memory Cached Execution in Strawberry GraphQL\nDESCRIPTION: Demonstrates how to implement an in-memory cache for GraphQL execution results using a custom extension.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/custom-extensions.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport strawberry\nfrom strawberry.extensions import SchemaExtension\n\n# Use an actual cache in production so that this doesn't grow unbounded\nresponse_cache = {}\n\n\nclass ExecutionCache(SchemaExtension):\n    def on_execute(self):\n        # Check if we've come across this query before\n        execution_context = self.execution_context\n        self.cache_key = (\n            f\"{execution_context.query}:{json.dumps(execution_context.variables)}\"\n        )\n        if self.cache_key in response_cache:\n            self.execution_context.result = response_cache[self.cache_key]\n        yield\n        execution_context = self.execution_context\n        if self.cache_key not in response_cache:\n            response_cache[self.cache_key] = execution_context.result\n\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        ExecutionCache,\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Connection Arguments in Strawberry GraphQL (Python)\nDESCRIPTION: This snippet shows how to add a custom argument 'name_endswith' to a Relay connection for filtering fruits. It demonstrates the use of the @relay.connection decorator and how to yield filtered results.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/relay.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    @relay.connection(relay.ListConnection[Fruit])\n    def fruits_with_filter(\n        self,\n        info: strawberry.Info,\n        name_endswith: str,\n    ) -> Iterable[Fruit]:\n        for f in fruits.values():\n            if f.name.endswith(name_endswith):\n                yield f\n```\n\n----------------------------------------\n\nTITLE: Custom Processing of GraphQL Results in Django\nDESCRIPTION: Example showing how to customize result processing before sending to clients by extending the GraphQLView. This can be used for error handling, logging, or transforming results.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.http import GraphQLHTTPResponse\nfrom strawberry.types import ExecutionResult\nfrom strawberry.django.views import GraphQLView\nfrom django.http import HttpRequest\n\n\nclass MyGraphQLView(GraphQLView):\n    def process_result(\n        self, request: HttpRequest, result: ExecutionResult\n    ) -> GraphQLHTTPResponse:\n        data: GraphQLHTTPResponse = {\"data\": result.data}\n\n        if result.errors:\n            data[\"errors\"] = [err.formatted for err in result.errors]\n\n        return data\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Default Resolver in Strawberry\nDESCRIPTION: Shows how to customize the default resolver to support dictionary access in addition to attribute access. This allows returning dictionaries from resolvers that expect class instances.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema-configurations.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom strawberry.schema.config import StrawberryConfig\n\n\ndef custom_resolver(obj, field):\n    try:\n        return obj[field]\n    except (KeyError, TypeError):\n        return getattr(obj, field)\n\n\n@strawberry.type\nclass User:\n    name: str\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self, info) -> User:  # this won't type check, but will work at runtime\n        return {\"name\": \"Patrick\"}\n\n\nschema = strawberry.Schema(\n    query=Query, config=StrawberryConfig(default_resolver=custom_resolver)\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Federated Entity Type in Strawberry GraphQL\nDESCRIPTION: Example of creating a federated entity using Strawberry's federation shortcuts. This creates a Book type with an ID field that can be used as a federation key.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/federation/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.federation.type(keys=[\"id\"])\nclass Book:\n    id: strawberry.ID\n    title: str\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Example\nDESCRIPTION: Example of a GraphQL mutation for sending a message to a chat room. This demonstrates how to trigger events that will be received by active subscriptions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation echo {\n  sendChatMessage(message: \"hello room 1\", room: { roomName: \"room1\" })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Input Types for Mutations\nDESCRIPTION: Implements a generic collection input type that can be used with any other input type, demonstrating how to use generics with input types and mutation arguments.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/generics.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom typing import Generic, List, Optional, TypeVar\n\nT = TypeVar(\"T\")\n\n\n@strawberry.input\nclass CollectionInput(Generic[T]):\n    values: List[T]\n\n\n@strawberry.input\nclass PostInput:\n    name: str\n\n\n@strawberry.type\nclass Post:\n    id: int\n    name: str\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def add_posts(self, posts: CollectionInput[PostInput]) -> bool:\n        return True\n\n\n@strawberry.type\nclass Query:\n    most_recent_post: Optional[Post] = None\n\n\nschema = strawberry.Schema(query=Query, mutation=Mutation)\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninput PostInputCollectionInput {\n  values: [PostInput!]!\n}\n\ninput PostInput {\n  name: String!\n}\n\ntype Post {\n  id: Int!\n  name: String!\n}\n\ntype Query {\n  mostRecentPost: Post\n}\n\ntype Mutation {\n  addPosts(posts: PostInputCollectionInput!): Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Using enum_value with IntEnum in Strawberry GraphQL\nDESCRIPTION: Demonstrates how to use strawberry.enum_value with IntEnum to define enum values with custom descriptions and underlying integer values. This allows for more control over the serialization of enum values.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom enum import IntEnum\n\n\n@strawberry.enum\nclass Color(IntEnum):\n    OTHER = strawberry.enum_value(\n        -1, description=\"Other: The color is not red, blue, or green.\"\n    )\n    RED = strawberry.enum_value(0, description=\"Red: The color red.\")\n    BLUE = strawberry.enum_value(1, description=\"Blue: The color blue.\")\n    GREEN = strawberry.enum_value(2, description=\"Green: The color green.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache for DataLoader\nDESCRIPTION: This code snippet demonstrates how to implement a custom cache for DataLoader by creating a class that implements the AbstractCache interface. It includes methods for get, set, delete, and clear operations on the cache.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/dataloaders.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List, Union, Any, Optional\n\nimport strawberry\nfrom strawberry.asgi import GraphQL\nfrom strawberry.dataloader import DataLoader, AbstractCache\n\nfrom starlette.requests import Request\nfrom starlette.websockets import WebSocket\nfrom starlette.responses import Response\n\n\nclass UserCache(AbstractCache):\n    def __init__(self):\n        self.cache = {}\n\n    def get(self, key: Any) -> Union[Any, None]:\n        return self.cache.get(key)  # fetch data from persistent cache\n\n    def set(self, key: Any, value: Any) -> None:\n        self.cache[key] = value  # store data in the cache\n\n    def delete(self, key: Any) -> None:\n        del self.cache[key]  # delete key from the cache\n\n    def clear(self) -> None:\n        self.cache.clear()  # clear the cache\n\n\n@strawberry.type\nclass User:\n    id: strawberry.ID\n    name: str\n\n\nasync def load_users(keys) -> List[User]:\n    return [User(id=key, name=\"Jane Doe\") for key in keys]\n\n\nclass MyGraphQL(GraphQL):\n    async def get_context(\n        self, request: Union[Request, WebSocket], response: Optional[Response]\n    ) -> Any:\n        return {\"user_loader\": DataLoader(load_fn=load_users, cache_map=UserCache())}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    async def get_user(self, info: strawberry.Info, id: strawberry.ID) -> User:\n        return await info.context[\"user_loader\"].load(id)\n\n\nschema = strawberry.Schema(query=Query)\napp = MyGraphQL(schema)\n```\n\n----------------------------------------\n\nTITLE: Testing Synchronous GraphQL Query with Strawberry in Python\nDESCRIPTION: This snippet demonstrates how to write a test for a synchronous GraphQL query using Strawberry. It defines a query, executes it with the schema, and asserts the expected results.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef test_query():\n    query = \"\"\"\n        query TestQuery($title: String!) {\n            books(title: $title) {\n                title\n                author\n            }\n        }\n    \"\"\"\n\n    result = schema.execute_sync(\n        query,\n        variable_values={\"title\": \"The Great Gatsby\"},\n    )\n\n    assert result.errors is None\n    assert result.data[\"books\"] == [\n        {\n            \"title\": \"The Great Gatsby\",\n            \"author\": \"F. Scott Fitzgerald\",\n        }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring ASGI Application with GraphQLProtocolTypeRouter\nDESCRIPTION: Python code to configure an ASGI application using Strawberry's GraphQLProtocolTypeRouter for handling both HTTP and WebSocket GraphQL requests.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom django.core.asgi import get_asgi_application\nfrom strawberry.channels import GraphQLProtocolTypeRouter\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"mysite.settings\")\ndjango_asgi_app = get_asgi_application()\n\n# Import your Strawberry schema after creating the django ASGI application\n# This ensures django.setup() has been called before any ORM models are imported\n# for the schema.\nfrom mysite.graphql import schema\n\n\napplication = GraphQLProtocolTypeRouter(\n    schema,\n    django_application=django_asgi_app,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing the Relay Node Interface on a Fruit Type\nDESCRIPTION: Example showing how to make a Fruit type implement the Relay Node interface with a globally unique ID and a resolve_nodes method for object retrieval.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/relay.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry import relay\n\n\n@strawberry.type\nclass Fruit(relay.Node):\n    code: relay.NodeID[int]\n    name: str\n    weight: float\n\n    @classmethod\n    def resolve_nodes(\n        cls,\n        *,\n        info: strawberry.Info,\n        node_ids: Iterable[str],\n        required: bool = False,\n    ):\n        return [\n            all_fruits[int(nid)] if required else all_fruits.get(nid)\n            for nid in node_ids\n        ]\n\n\n# In this example, assume we have a dict mapping the fruits code to the Fruit\n# object itself\nall_fruits: Dict[int, Fruit]\n```\n\n----------------------------------------\n\nTITLE: Customizing Async Root Value in Django GraphQL View\nDESCRIPTION: Example showing how to provide a custom root value in an async Django GraphQL view. This allows setting initial values for query fields in an asynchronous context.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.django.views import AsyncGraphQLView\nfrom django.http import HttpRequest\n\n\nclass MyGraphQLView(AsyncGraphQLView):\n    async def get_root_value(self, request: HttpRequest):\n        return Query(name=\"Patrick\")\n\n\n@strawberry.type\nclass Query:\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Running Strawberry GraphQL ASGI App with Uvicorn\nDESCRIPTION: This command starts the Uvicorn server to run the Strawberry GraphQL ASGI application. It assumes the schema is defined in a file named 'schema.py'.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/dataloaders.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nuvicorn schema:app\n```\n\n----------------------------------------\n\nTITLE: Creating Strawberry Type with All Fields from Pydantic Model\nDESCRIPTION: This snippet shows how to create a Strawberry type that includes all fields from a Pydantic model using the all_fields=True parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/pydantic.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom .models import User\n\n\n@strawberry.experimental.pydantic.type(model=User, all_fields=True)\nclass UserType:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Entity with Federation Type Decorator\nDESCRIPTION: Shows how to create a basic Book entity using the @strawberry.federation.type decorator with a specified key field.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/federation/entities.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.federation.type(keys=[\"id\"])\nclass Book:\n    id: strawberry.ID\n    title: str\n```\n\n----------------------------------------\n\nTITLE: Creating Strawberry Interface Type from Pydantic Model\nDESCRIPTION: This snippet shows how to create a Strawberry GraphQL interface type and implementing types from Pydantic models using the @strawberry.experimental.pydantic.interface decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/pydantic.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom pydantic import BaseModel\nfrom typing import List\n\n\n# pydantic types\nclass User(BaseModel):\n    id: int\n    name: str\n\n\nclass NormalUser(User):\n    friends: List[int] = []\n\n\nclass AdminUser(User):\n    role: int\n\n\n# strawberry types\n@strawberry.experimental.pydantic.interface(model=User)\nclass UserType:\n    id: strawberry.auto\n    name: strawberry.auto\n\n\n@strawberry.experimental.pydantic.type(model=NormalUser)\nclass NormalUserType(UserType):  # note the base class\n    friends: strawberry.auto\n\n\n@strawberry.experimental.pydantic.type(model=AdminUser)\nclass AdminUserType(UserType):\n    role: strawberry.auto\n```\n\n----------------------------------------\n\nTITLE: Customizing Context in Strawberry ASGI GraphQL\nDESCRIPTION: Example of extending the GraphQL class to provide a custom context object for resolvers. This demonstrates overriding the get_context method to return custom data.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/asgi.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom typing import Union\nfrom strawberry.asgi import GraphQL\nfrom starlette.requests import Request\nfrom starlette.responses import Response\n\n\nclass MyGraphQL(GraphQL):\n    async def get_context(\n        self, request: Union[Request, WebSocket], response: Optional[Response] = None\n    ):\n        return {\"example\": 1}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self, info: strawberry.Info) -> str:\n        return str(info.context[\"example\"])\n```\n\n----------------------------------------\n\nTITLE: Setting up Django Channels with Strawberry GraphQL\nDESCRIPTION: Example of integrating Strawberry GraphQL with Django Channels, showing proper configuration of the ASGI application with GraphQL protocol routing.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/subscriptions.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom django.core.asgi import get_asgi_application\nfrom strawberry.channels import GraphQLProtocolTypeRouter\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"mysite.settings\")\ndjango_asgi_app = get_asgi_application()\n\n# Import your Strawberry schema after creating the django ASGI application\n# This ensures django.setup() has been called before any ORM models are imported\n# for the schema.\nfrom mysite.graphql import schema\n\n\napplication = GraphQLProtocolTypeRouter(\n    schema,\n    django_application=django_asgi_app,\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Confirmation in Strawberry GraphQL\nDESCRIPTION: Implementation of a subscription resolver that yields an initial null value to confirm the subscription has started successfully, before yielding actual messages.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# mysite/gqlchat/subscription.py\n\n\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def join_chat_rooms(\n        self,\n        info: strawberry.Info,\n        rooms: List[ChatRoom],\n        user: str,\n    ) -> AsyncGenerator[ChatRoomMessage | None, None]:\n        ...\n        async with ws.listen_to_channel(\"chat.message\", groups=room_ids) as cm:\n            yield None\n            async for message in cm:\n                if message[\"room_id\"] in room_ids:\n                    yield ChatRoomMessage(\n                        room_name=message[\"room_id\"],\n                        message=message[\"message\"],\n                        current_user=user,\n                    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Books Service with Federation 2\nDESCRIPTION: Creates a federated GraphQL service for books using Strawberry with Federation 2 enabled. Defines a Book entity with an ID key and a query to fetch all books.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nimport strawberry\n\n\n@strawberry.federation.type(keys=[\"id\"])\nclass Book:\n    id: strawberry.ID\n    title: str\n\n\ndef get_all_books() -> List[Book]:\n    return [Book(id=strawberry.ID(\"1\"), title=\"The Dark Tower\")]\n\n\n@strawberry.type\nclass Query:\n    all_books: List[Book] = strawberry.field(resolver=get_all_books)\n\n\nschema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Output with Cached Directive\nDESCRIPTION: The resulting GraphQL schema showing how the Cached directive is applied to the field by the CachingExtension.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/field-extensions.md#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Client {\n    analyzedHours: Int! @Cached(time=200)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces in Strawberry\nDESCRIPTION: Shows how to create object types that implement an interface in Strawberry.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/interfaces.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.type\nclass Individual(Customer):\n    # additional fields\n    ...\n\n@strawberry.type\nclass Company(Customer):\n    # additional fields\n    ...\n```\n\n----------------------------------------\n\nTITLE: Extending Error Format in Strawberry GraphQL Extension\nDESCRIPTION: Demonstrates how to extend the error response format using a custom extension and the on_operation hook.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/custom-extensions.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ExtendErrorFormat(SchemaExtension):\n    def on_operation(self):\n        yield\n        result = self.execution_context.result\n        if getattr(result, \"errors\", None):\n            result.errors = [\n                StrawberryGraphQLError(\n                    extensions={\"additional_key\": \"additional_value\"},\n                    nodes=error.nodes,\n                    source=error.source,\n                    positions=error.positions,\n                    path=error.path,\n                    original_error=error.original_error,\n                    message=error.message,\n                )\n                for error in result.errors\n            ]\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def ping(self) -> str:\n        raise Exception(\"This error occurred while querying the ping field\")\n\n\nschema = strawberry.Schema(query=Query, extensions=[ExtendErrorFormat])\n```\n\n----------------------------------------\n\nTITLE: Implementing Datadog Tracing in Sync GraphQL Context\nDESCRIPTION: Example of implementing Datadog tracing in a synchronous Strawberry GraphQL server using the DatadogTracingExtensionSync class.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/datadog.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions.tracing import DatadogTracingExtensionSync\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        DatadogTracingExtensionSync,\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidationCache in Strawberry GraphQL Schema (Python)\nDESCRIPTION: This snippet demonstrates how to use the ValidationCache extension in a Strawberry GraphQL schema. It improves performance by caching validation errors in memory.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/validation-cache.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import ValidationCache\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        ValidationCache(),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Strawberry Type from Pydantic Model\nDESCRIPTION: This snippet demonstrates how to create a Strawberry GraphQL type from a Pydantic model using the @strawberry.experimental.pydantic.type decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/pydantic.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom .models import User\n\n\n@strawberry.experimental.pydantic.type(model=User)\nclass UserType:\n    id: strawberry.auto\n    name: strawberry.auto\n    friends: strawberry.auto\n```\n\n----------------------------------------\n\nTITLE: Implementing MaxAliasesLimiter in Strawberry GraphQL Schema\nDESCRIPTION: Example showing how to add the MaxAliasesLimiter extension to a Strawberry GraphQL schema. This extension limits the maximum number of aliases allowed in a GraphQL document to enhance security.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/max-aliases-limiter.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import MaxAliasesLimiter\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        MaxAliasesLimiter(max_alias_count=15),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Using GraphQLTestClient for Testing Queries in Strawberry\nDESCRIPTION: Example showing how to use the GraphQLTestClient to test a GraphQL query with variables. The client simplifies assertions by automatically checking for errors in the response.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_122\n\nLANGUAGE: python\nCODE:\n```\ndef test_strawberry(graphql_client):\n    query = \"\"\"\n        query Hi($name: String!) {\n            hi(name: $name)\n        }\n    \"\"\"\n\n    result = graphql_client.query(query, variables={\"name\": \"Marcotte\"})\n\n    assert result.data == {\"hi\": \"Hi Marcotte!\"}\n```\n\n----------------------------------------\n\nTITLE: Input Type with Optional Fields using UNSET\nDESCRIPTION: Shows how to create an input type with optional fields using strawberry.UNSET.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/input-types.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.input\nclass Point2D:\n    x: float\n    y: float\n    label: Optional[str] = strawberry.UNSET\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Point2D {\n  x: Float!\n  y: Float!\n  label: String\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Subscription with Strawberry and Channels\nDESCRIPTION: Python code for a GraphQL subscription that joins chat rooms and listens for messages using Django Channels.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport threading\n\nfrom typing import AsyncGenerator, List\n\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def join_chat_rooms(\n        self,\n        info: strawberry.Info,\n        rooms: List[ChatRoom],\n        user: str,\n    ) -> AsyncGenerator[ChatRoomMessage, None]:\n        \"\"\"Join and subscribe to message sent to the given rooms.\"\"\"\n        ws = info.context[\"ws\"]\n        channel_layer = ws.channel_layer\n\n        room_ids = [f\"chat_{room.room_name}\" for room in rooms]\n\n        for room in room_ids:\n            # Join room group\n            await channel_layer.group_add(room, ws.channel_name)\n\n        for room in room_ids:\n            await channel_layer.group_send(\n                room,\n                {\n                    \"type\": \"chat.message\",\n                    \"room_id\": room,\n                    \"message\": f\"process: {os.getpid()} thread: {threading.current_thread().name}\"\n                    f\" -> Hello my name is {user}!\",\n                },\n            )\n\n        async with ws.listen_to_channel(\"chat.message\", groups=room_ids) as cm:\n            async for message in cm:\n                if message[\"room_id\"] in room_ids:\n                    yield ChatRoomMessage(\n                        room_name=message[\"room_id\"],\n                        message=message[\"message\"],\n                        current_user=user,\n                    )\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query Type with Connection in Strawberry\nDESCRIPTION: Example showing how to define a GraphQL Query type with a connection field using Strawberry's lazy annotation pattern. This allows for defining connections to other types while avoiding circular imports.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    fruits: Annotated[\"FruitConnection\", strawberry.lazy(\"types\")] = (\n        strawberry.connection()\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Argument Filtering\nDESCRIPTION: Example showing how to implement custom argument filtering to exclude sensitive data from tracing.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/opentelemetry.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions.tracing import OpenTelemetryExtensionSync\n\n\ndef arg_filter(kwargs, info):\n    filtered_kwargs = {}\n    for name, value in kwargs:\n        # Never include any arguments called \"password\"\n        if name == \"password\":\n            continue\n        filtered_kwargs[name] = value\n\n    return filtered_kwargs\n\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        OpenTelemetryExtensionSync(\n            arg_filter=arg_filter,\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Conversion Methods Implementation in Strawberry GraphQL\nDESCRIPTION: Shows how to implement custom from_pydantic and to_pydantic methods for complex data transformations. Demonstrates flattening a dictionary structure into specific GraphQL fields and handling enum-based dictionary keys.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/pydantic.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport enum\nimport dataclasses\nimport strawberry\nfrom pydantic import BaseModel\nfrom typing import Any, Dict, Optional\n\n\nclass ContentType(enum.Enum):\n    NAME = \"name\"\n    DESCRIPTION = \"description\"\n\n\nclass User(BaseModel):\n    id: str\n    content: Dict[ContentType, str]\n\n\n@strawberry.experimental.pydantic.type(model=User)\nclass UserType:\n    id: strawberry.auto\n    # Flatten the content dict into specific fields in the query\n    content_name: Optional[str] = None\n    content_description: Optional[str] = None\n\n    @staticmethod\n    def from_pydantic(instance: User, extra: Dict[str, Any] = None) -> \"UserType\":\n        data = instance.dict()\n        content = data.pop(\"content\")\n        data.update({f\"content_{k.value}\": v for k, v in content.items()})\n        return UserType(**data)\n\n    def to_pydantic(self) -> User:\n        data = dataclasses.asdict(self)\n\n        # Pull out the content_* fields into a dict\n        content = {}\n        for enum_member in ContentType:\n            key = f\"content_{enum_member.value}\"\n            if data.get(key) is not None:\n                content[enum_member.value] = data.pop(key)\n        return User(content=content, **data)\n\n\nuser = User(id=\"abc\", content={ContentType.NAME: \"Bob\"})\nprint(UserType.from_pydantic(user))\n# UserType(id='abc', content_name='Bob', content_description=None)\n\nuser_type = UserType(id=\"abc\", content_name=\"Bob\", content_description=None)\nprint(user_type.to_pydantic())\n# id='abc' content={<ContentType.NAME: 'name'>: 'Bob'}\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to Strawberry GraphQL Fields\nDESCRIPTION: Example of how to implement permission classes in Strawberry GraphQL and apply them to specific fields using the permission_classes parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_176\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom strawberry.permission import BasePermission\n\n\nclass IsAdmin(BasePermission):\n    message = \"You are not authorized\"\n\n    def has_permission(self, info):\n        return False\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(permission_classes=[IsAdmin])\n    def hello(self, info) -> str:\n        return \"Hello\"\n```\n\n----------------------------------------\n\nTITLE: Customizing GraphQL IDE Rendering in Strawberry FastAPI\nDESCRIPTION: This snippet demonstrates how to override the render_graphql_ide method to provide a custom HTML interface for the GraphQL IDE instead of using the default one. It creates a custom router class that returns a custom HTML response.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/fastapi.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.fastapi import GraphQLRouter\nfrom starlette.responses import HTMLResponse, Response\nfrom starlette.requests import Request\n\n\nclass MyGraphQLRouter(GraphQLRouter):\n    async def render_graphql_ide(self, request: Request) -> HTMLResponse:\n        custom_html = \"\"\"<html><body><h1>Custom GraphQL IDE</h1></body></html>\"\"\"\n\n        return HTMLResponse(custom_html)\n```\n\n----------------------------------------\n\nTITLE: Querying a Type with Private Field in GraphQL\nDESCRIPTION: Example GraphQL query demonstrating how to access the exposed methods that use the private field. The query requests formatted, string, and representation versions of the datetime value.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/private.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  now {\n    format(template: \"{my.year}\")\n    string\n    repr\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Execution Context in Strawberry GraphQL Extension\nDESCRIPTION: Demonstrates how to use the execution_context property in a custom extension to access and modify the GraphQL context.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/custom-extensions.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions import SchemaExtension\n\nfrom mydb import get_db_session\n\n\nclass MyExtension(SchemaExtension):\n    def on_operation(self):\n        self.execution_context.context[\"db\"] = get_db_session()\n        yield\n        self.execution_context.context[\"db\"].close()\n```\n\n----------------------------------------\n\nTITLE: Input Type with Optional Fields using None\nDESCRIPTION: Demonstrates how to create an input type with optional fields using None as default value.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/input-types.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.input\nclass Point2D:\n    x: float\n    y: float\n    label: Optional[str] = None\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Point2D {\n    x: Float!\n    y: Float!\n    label: String = null\n}\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Subscriptions with pytest and Channels\nDESCRIPTION: Unit test setup for GraphQL subscriptions using pytest-async and a custom GraphQLWebsocketCommunicator to test subscription functionality.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom channels.testing import WebsocketCommunicator\nimport pytest\nfrom myapp.asgi import application  # your channels asgi\nfrom strawberry.channels.testing import GraphQLWebsocketCommunicator\n\n\n@pytest.fixture\nasync def gql_communicator() -> GraphQLWebsocketCommunicator:\n    client = GraphQLWebsocketCommunicator(application=application, path=\"/graphql\")\n    await client.gql_init()\n    yield client\n    await client.disconnect()\n\n\nchat_subscription_query = \"\"\"\n                subscription fooChat {\n                joinChatRooms(\n                    rooms: [{ roomName: \"room1\" }, { roomName: \"room2\" }]\n                    user: \"foo\"){\n                        roomName\n                        message\n                        currentUser\n                    }\n                }\n\"\"\"\n\n\n@pytest.mark.asyncio\nasync def test_joinChatRooms_sends_welcome_message(gql_communicator):\n    async for result in gql_communicator.subscribe(query=chat_subscription_query):\n        data = result.data\n        assert data[\"currentUser\"] == \"foo\"\n        assert \"room1\" in data[\"roomName\"]\n        assert \"hello\" in data[\"message\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Strawberry GraphQL with Sanic\nDESCRIPTION: Sets up a basic Sanic application with a Strawberry GraphQL endpoint. It creates a Sanic app and adds a GraphQLView route for handling GraphQL requests.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/sanic.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.sanic.views import GraphQLView\n\nfrom api.schema import Schema\n\napp = Sanic(__name__)\n\napp.add_route(\n    GraphQLView.as_view(schema=schema, graphiql=True),\n    \"/graphql\",\n)\n```\n\n----------------------------------------\n\nTITLE: Nested GraphQL Query for Books with Authors\nDESCRIPTION: Example of a GraphQL query that fetches books with their nested author information, demonstrating GraphQL's ability to traverse relationships.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  books {\n    title\n    author {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rejecting Operations Before Execution in Strawberry GraphQL\nDESCRIPTION: Shows how to implement a custom extension that rejects certain operations before they are executed based on the operation name.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/custom-extensions.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import SchemaExtension\n\n\nclass RejectSomeQueries(SchemaExtension):\n    def on_execute(self):\n        # Reject all operations called \"RejectMe\"\n        execution_context = self.execution_context\n        if execution_context.operation_name == \"RejectMe\":\n            self.execution_context.result = GraphQLExecutionResult(\n                data=None,\n                errors=[GraphQLError(\"Well you asked for it\")],\n            )\n\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        RejectSomeQueries,\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Field Extension in Strawberry GraphQL (Python)\nDESCRIPTION: Example of creating a basic UpperCaseExtension that transforms the result of a field resolver to uppercase. The extension wraps the resolver and modifies its return value.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/field-extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import FieldExtension\n\n\nclass UpperCaseExtension(FieldExtension):\n    def resolve(\n        self, next_: Callable[..., Any], source: Any, info: strawberry.Info, **kwargs\n    ):\n        result = next_(source, info, **kwargs)\n        return str(result).upper()\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(extensions=[UpperCaseExtension()])\n    def string(self) -> str:\n        return \"This is a test!!\"\n```\n\n----------------------------------------\n\nTITLE: Resolving a Union Type in Strawberry\nDESCRIPTION: Example of a resolver function that returns a specific concrete type when a field's return type is a union type, which is required for GraphQL type resolution.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/union.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Union\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def latest_media(self) -> Union[Audio, Video, Image]:\n        return Video(\n            thumbnail_url=\"https://i.ytimg.com/vi/dQw4w9WgXcQ/hq720.jpg\",\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Depth Limiting in Strawberry GraphQL\nDESCRIPTION: Demonstrates how to use the QueryDepthLimiter extension with the should_ignore function to selectively limit query depth based on field arguments. This allows for fine-grained control over which parts of a query contribute to the depth calculation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions import IgnoreContext\n\n\ndef should_ignore(ignore: IgnoreContext):\n    return ignore.field_args.get(\"name\") == \"matt\"\n\n\nquery_depth_limiter = QueryDepthLimiter(should_ignore=should_ignore)\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface Fields\nDESCRIPTION: Shows how to provide field implementations in interfaces and override them in implementing types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/interfaces.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.interface\nclass Customer:\n    @strawberry.field\n    def name(self) -> str:\n        return self.name.title()\n```\n\n----------------------------------------\n\nTITLE: Setting Background Tasks in Strawberry Mutations\nDESCRIPTION: Example showing how to set Starlette background tasks in mutation resolvers using the response object from the context.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/asgi.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom starlette.background import BackgroundTask\n\n\nasync def notify_new_flavour(name: str): ...\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def create_flavour(self, name: str, info: strawberry.Info) -> bool:\n        info.context[\"response\"].background = BackgroundTask(notify_new_flavour, name)\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Extension with Field Modification in Strawberry\nDESCRIPTION: Example of a CachingExtension that both modifies the field during schema conversion to add a directive and implements caching logic in the resolver.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/field-extensions.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport time\nimport strawberry\nfrom strawberry.extensions import FieldExtension\nfrom strawberry.schema_directive import Location\nfrom strawberry.types.field import StrawberryField\n\n\n@strawberry.schema_directive(locations=[Location.FIELD_DEFINITION])\nclass Cached:\n    time: int = 100\n\n\nclass CachingExtension(FieldExtension):\n    def __init__(self, caching_time=100):\n        self.caching_time = caching_time\n        self.last_cached = 0.0\n        self.cached_result = None\n\n    def apply(self, field: StrawberryField) -> None:\n        field.directives.append(Cached(time=self.caching_time))\n\n    def resolve(\n        self, next_: Callable[..., Any], source: Any, info: strawberry.Info, **kwargs\n    ) -> Any:\n        current_time = time.time()\n        if self.last_cached + self.caching_time > current_time:\n            return self.cached_result\n        self.cached_result = next_(source, info, **kwargs)\n        return self.cached_result\n```\n\n----------------------------------------\n\nTITLE: Creating and Using DataLoader in Strawberry GraphQL\nDESCRIPTION: This snippet shows how to create a DataLoader instance using the previously defined load_users function. It also demonstrates how to use the loader to fetch user data asynchronously.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/dataloaders.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.dataloader import DataLoader\n\nloader = DataLoader(load_fn=load_users)\n\nuser = await loader.load(1)\n```\n\n----------------------------------------\n\nTITLE: Querying User Data with GraphQL\nDESCRIPTION: Shows a GraphQL query to retrieve user data and the corresponding JSON response. The query requests the 'lastUser' field and its 'name' property.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/resolvers.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  lastUser {\n    name\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"lastUser\": {\n      \"name\": \"Marco\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Permission Error Response Example\nDESCRIPTION: Example of the JSON error response when permission is denied\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/permissions.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": null,\n  \"errors\": [\n    {\n      \"message\": \"User is not authenticated\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic GraphQL Schema with Interfaces\nDESCRIPTION: Example schema showing a Customer interface implemented by Company and Individual types in GraphQL SDL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/interfaces.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Customer {\n  name: String!\n}\n\ntype Company implements Customer {\n  employees: [Individual!]!\n  name: String!\n}\n\ntype Individual implements Customer {\n  employed_by: Company\n  name: String!\n}\n\ntype Query {\n  customers: [Customer!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Root Value in Strawberry ASGI GraphQL\nDESCRIPTION: Example of extending the GraphQL class to provide a custom root value for the schema by overriding the get_root_value method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/asgi.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom typing import Union\nfrom strawberry.asgi import GraphQL\nfrom starlette.requests import Request\nfrom starlette.websockets import WebSocket\n\n\nclass MyGraphQL(GraphQL):\n    async def get_root_value(self, request: Union[Request, WebSocket]):\n        return Query(name=\"Patrick\")\n\n\n@strawberry.type\nclass Query:\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Generic Types Support in Strawberry GraphQL\nDESCRIPTION: Demonstrates how to use generic types in Strawberry GraphQL to create reusable type definitions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_172\n\nLANGUAGE: python\nCODE:\n```\nT = typing.TypeVar(\"T\")\n\n\n@strawberry.type\nclass Edge(typing.Generic[T]):\n    cursor: strawberry.ID\n    node: T\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def int_edge(self, info, **kwargs) -> Edge[int]:\n        return Edge(cursor=strawberry.ID(\"1\"), node=1)\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Reference Resolution with info Parameter\nDESCRIPTION: Example of using the info parameter in the resolve_reference method when implementing Federation in Strawberry GraphQL. This allows access to the GraphQL execution context during reference resolution.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_140\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.federation.type(keys=[\"upc\"])\nclass Product:\n    upc: str\n    info: str\n\n    @classmethod\n    def resolve_reference(cls, info, upc):\n        return Product(upc, info)\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Data in Function Resolver with Strawberry\nDESCRIPTION: This snippet shows how to access parent data in a function resolver using strawberry.Parent[ParentType] annotation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/accessing-parent-data.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\ndef get_full_name(parent: strawberry.Parent[User]) -> str:\n    return f\"{parent.first_name} {parent.last_name}\"\n\n@strawberry.type\nclass User:\n    first_name: str\n    last_name: str\n    full_name: str = strawberry.field(resolver=get_full_name)\n```\n\n----------------------------------------\n\nTITLE: Dictionary-based Context Implementation\nDESCRIPTION: Example of implementing custom context using a dictionary approach with FastAPI dependencies\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/fastapi.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom fastapi import FastAPI, Depends, Request, WebSocket, BackgroundTasks\nfrom strawberry.fastapi import GraphQLRouter\n\n\ndef custom_context_dependency() -> str:\n    return \"John\"\n\n\nasync def get_context(\n    custom_value=Depends(custom_context_dependency),\n):\n    return {\n        \"custom_value\": custom_value,\n    }\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self, info: strawberry.Info) -> str:\n        return f\"Hello {info.context['custom_value']}\"\n\n\nschema = strawberry.Schema(Query)\n\ngraphql_app = GraphQLRouter(\n    schema,\n    context_getter=get_context,\n)\n\napp = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Resolve Hook in Strawberry GraphQL Extension\nDESCRIPTION: Shows how to implement the resolve hook in a custom extension to run code before and after the execution of all resolvers.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/custom-extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions import SchemaExtension\n\n\nclass MyExtension(SchemaExtension):\n    def resolve(self, _next, root, info: strawberry.Info, *args, **kwargs):\n        return _next(root, info, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Permission Extension Implementation\nDESCRIPTION: Shows how to use PermissionExtension directly instead of permission_classes argument\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/permissions.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.permission import PermissionExtension\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(extensions=[PermissionExtension(permissions=[IsAuthenticated()])])\n    def name(self) -> str:\n        return \"ABC\"\n```\n\n----------------------------------------\n\nTITLE: Creating a BigInt Scalar for 64-bit Integers in Python\nDESCRIPTION: This example shows how to implement a BigInt scalar in Strawberry GraphQL to handle 64-bit integers, which are not supported by default in the GraphQL spec.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/scalars.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# This is needed because GraphQL does not support 64 bit integers\nBigInt = strawberry.scalar(\n    Union[int, str],  # type: ignore\n    serialize=lambda v: int(v),\n    parse_value=lambda v: str(v),\n    description=\"BigInt field\",\n)\n\nuser_schema = strawberry.Schema(\n    query=Query,\n    mutation=Mutation,\n    subscription=Subscription,\n    scalar_overrides={datetime: date_time, int: BigInt},\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Data in Method Resolver with Strawberry\nDESCRIPTION: This snippet demonstrates how to access parent data in a method resolver using self or strawberry.Parent[ParentType] annotation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/accessing-parent-data.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.type\nclass User:\n    first_name: str\n    last_name: str\n\n    @strawberry.field\n    def full_name(self) -> str:\n        return f\"{self.first_name} {self.last_name}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Datadog Tracing in Async GraphQL Context\nDESCRIPTION: Example of implementing Datadog tracing in an asynchronous Strawberry GraphQL server by adding the DatadogTracingExtension to the schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/datadog.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions.tracing import DatadogTracingExtension\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        DatadogTracingExtension,\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Root Value in Strawberry with Litestar\nDESCRIPTION: Shows how to provide a custom root value for GraphQL operations using the root_value_getter parameter. This enables initializing the Query object with specific values.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/litestar.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom litestar import Request, Litestar\nfrom strawberry.litestar import make_graphql_controller\n\n\n@strawberry.type\nclass Query:\n    example: str = \"Hello World\"\n\n    @strawberry.field\n    def hello(self) -> str:\n        return self.example\n\n\ndef custom_get_root_value():\n    return Query()\n\n\nschema = strawberry.Schema(Query)\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n    root_value_getter=custom_get_root_value,\n)\n\napp = Litestar(route_handlers=[GraphQLController])\n```\n\n----------------------------------------\n\nTITLE: OneOf Input Type Definition\nDESCRIPTION: Demonstrates how to create a OneOf input type where only one field can be set at a time.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/input-types.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.input(one_of=True)\nclass SearchBy:\n    name: str | None = strawberry.UNSET\n    email: str | None = strawberry.UNSET\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninput SearchBy @oneOf {\n  name: String\n  email: String\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extensions with Execution Context in Strawberry\nDESCRIPTION: Example of creating a custom extension in Strawberry that accesses the execution context. This demonstrates how to use the execution context's root_value in an extension hook.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_143\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import Extension\n\n\nclass MyExtension(Extension):\n    def on_request_end(self):\n        root_value = self.execution_context.root_value\n        # do something with the root_value\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Base64 Scalar in Python\nDESCRIPTION: This example shows how to create a custom Base64 scalar type in Strawberry GraphQL, including serialization and deserialization functions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/scalars.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport base64\nfrom typing import NewType\n\nimport strawberry\n\nBase64 = strawberry.scalar(\n    NewType(\"Base64\", bytes),\n    serialize=lambda v: base64.b64encode(v).decode(\"utf-8\"),\n    parse_value=lambda v: base64.b64decode(v.encode(\"utf-8\")),\n)\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def base64(self) -> Base64:\n        return Base64(b\"hi\")\n\n\nschema = strawberry.Schema(Query)\n\nresult = schema.execute_sync(\"{ base64 }\")\n\nassert results.data == {\"base64\": \"aGk=\"}\n```\n\n----------------------------------------\n\nTITLE: Subscription Cleanup Implementation\nDESCRIPTION: Demonstrates how to handle subscription cleanup when clients unsubscribe using asyncio.CancelledError.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/subscriptions.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import AsyncGenerator\nfrom uuid import uuid4\n\nimport strawberry\n\n# track active subscribers\nevent_messages = {}\n\n\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def message(self) -> AsyncGenerator[int, None]:\n        try:\n            subscription_id = uuid4()\n\n            event_messages[subscription_id] = []\n\n            while True:\n                if len(event_messages[subscription_id]) > 0:\n                    yield event_messages[subscription_id]\n                    event_messages[subscription_id].clear()\n\n                await asyncio.sleep(1)\n        except asyncio.CancelledError:\n            # stop listening to events\n            del event_messages[subscription_id]\n```\n\n----------------------------------------\n\nTITLE: Partial Response Implementation\nDESCRIPTION: Shows how GraphQL handles partial responses when some resolvers succeed and others fail.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/errors.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nimport strawberry\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def successful_field(self) -> Optional[str]:\n        return \"This field works\"\n\n    @strawberry.field\n    def error_field(self) -> Optional[str]:\n        raise Exception(\"This field fails\")\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Creating Strawberry Types from Pydantic Models\nDESCRIPTION: Shows how to create Strawberry types from Pydantic models using the experimental pydantic decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_154\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom datetime import datetime\nfrom typing import List, Optional\nfrom pydantic import BaseModel\n\n\nclass UserModel(BaseModel):\n    id: int\n    name = \"John Doe\"\n    signup_ts: Optional[datetime] = None\n    friends: List[int] = []\n\n\n@strawberry.experimental.pydantic.type(\n    model=UserModel, fields=[\"id\", \"name\", \"friends\"]\n)\nclass UserType:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Root Value Getter Implementation\nDESCRIPTION: Example demonstrating how to implement a custom root value getter in Strawberry FastAPI\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/fastapi.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom fastapi import FastAPI\nfrom strawberry.fastapi import GraphQLRouter\n\n\nasync def get_root_value():\n    return Query(name=\"Patrick\")\n\n\n@strawberry.type\nclass Query:\n    name: str\n\n\nschema = strawberry.Schema(Query)\n\ngraphql_app = GraphQLRouter(\n    schema,\n    root_value_getter=get_root_value,\n)\n\napp = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom Extension in Strawberry GraphQL\nDESCRIPTION: Demonstrates how to create a simple custom extension by extending the SchemaExtension class and implementing the get_results method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/custom-extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import SchemaExtension\n\n\nclass MyExtension(SchemaExtension):\n    def get_results(self):\n        return {\"example\": \"this is an example for an extension\"}\n\n\nschema = strawberry.Schema(query=Query, extensions=[MyExtension])\n```\n\n----------------------------------------\n\nTITLE: Configuring Upload Scalar Override in Strawberry Schema (Python)\nDESCRIPTION: Example of setting up a scalar override for the Upload type in a Strawberry schema, specifically for Starlette integration.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/file-upload.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom starlette.datastructures import UploadFile\nfrom strawberry.file_uploads import Upload\n\nschema = strawberry.Schema(\n  ...\n  scalar_overrides={UploadFile: Upload}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic ASGI GraphQL Server\nDESCRIPTION: Basic setup for creating an ASGI GraphQL server using Strawberry. This example imports the GraphQL class from strawberry.asgi and creates an app instance with a schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/asgi.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# server.py\nfrom strawberry.asgi import GraphQL\n\nfrom api.schema import schema\n\napp = GraphQL(schema)\n```\n\n----------------------------------------\n\nTITLE: Overriding Built-in DateTime Scalar with Unix Timestamp in Python\nDESCRIPTION: This example shows how to override the built-in DateTime scalar in Strawberry GraphQL to use Unix timestamps for serialization and deserialization.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/scalars.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timezone\nimport strawberry\n\n# Define your custom scalar\nEpochDateTime = strawberry.scalar(\n    datetime,\n    serialize=lambda value: int(value.timestamp()),\n    parse_value=lambda value: datetime.fromtimestamp(int(value), timezone.utc),\n)\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def current_time(self) -> datetime:\n        return datetime.now()\n\n\nschema = strawberry.Schema(\n    Query,\n    scalar_overrides={\n        datetime: EpochDateTime,\n    },\n)\nresult = schema.execute_sync(\"{ currentTime }\")\nassert result.data == {\"currentTime\": 1628683200}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry Tracing Extension in Strawberry GraphQL\nDESCRIPTION: Code snippet demonstrating how to enable OpenTelemetry tracing in a Strawberry GraphQL schema using the OpenTelemetryExtension.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/tracing.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions.tracing import OpenTelemetryExtension\n\nschema = strawberry.Schema(query=Query, extensions=[OpenTelemetryExtension])\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Enum Value Names in Strawberry GraphQL\nDESCRIPTION: Demonstrates how to use the name parameter in strawberry.enum_value to specify custom names for enum values in the GraphQL schema while maintaining different Python enum member names.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.enum\nclass IceCreamFlavour(Enum):\n    VANILLA = \"vanilla\"\n    CHOCOLATE_COOKIE = strawberry.enum_value(\"chocolate\", name=\"chocolateCookie\")\n```\n\nLANGUAGE: graphql\nCODE:\n```\nenum IceCreamFlavour {\n    VANILLA\n    chocolateCookie\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enums in Strawberry GraphQL Object Types\nDESCRIPTION: Demonstrates how to use enums as fields in object types and query them.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/enums.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Cone:\n    flavour: IceCreamFlavour\n    num_scoops: int\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def cone(self) -> Cone:\n        return Cone(flavour=IceCreamFlavour.STRAWBERRY, num_scoops=4)\n```\n\n----------------------------------------\n\nTITLE: Creating a Composed Schema Directive in Python with Strawberry GraphQL\nDESCRIPTION: This code snippet demonstrates how to create a `cacheControl` directive using Strawberry's federation module. The directive is set to be composed into the supergraph schema using the `compose=True` parameter. It is defined with an `OBJECT` location and includes a `max_age` integer field.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/federation/custom_directives.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.federation.schema_directive(\n    locations=[Location.OBJECT], name=\"cacheControl\", compose=True\n)\nclass CacheControl:\n    max_age: int\n```\n\n----------------------------------------\n\nTITLE: Defining a Stringable Type with Private Field in Strawberry GraphQL\nDESCRIPTION: Creates a Stringable type with a private field that can accept any Python object and handle converting it to string, representation, or templated output. The private field 'value' provides context for the GraphQL-exposed methods but isn't directly accessible through the API.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/private.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Stringable:\n    value: strawberry.Private[object]\n\n    @strawberry.field\n    def string(self) -> str:\n        return str(self.value)\n\n    @strawberry.field\n    def repr(self) -> str:\n        return repr(self.value)\n\n    @strawberry.field\n    def format(self, template: str) -> str:\n        return template.format(my=self.value)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Extensions with Result Access in Strawberry\nDESCRIPTION: Example of creating a custom extension in Strawberry that accesses the execution result. This demonstrates how to access and use the GraphQL execution result in the on_request_end hook.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_144\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions import Extension\n\n\nclass MyExtension(Extension):\n    def on_request_end(self):\n        result = self.execution_context.result\n        # Do something with the result\n\n\nschema = strawberry.Schema(query=Query, extensions=[MyExtension])\n```\n\n----------------------------------------\n\nTITLE: Apollo Router Configuration for Federation\nDESCRIPTION: YAML configuration for Apollo Router that defines the subgraphs for the federated schema, including routing and schema URLs.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfederation_version: 2\nsubgraphs:\n  reviews:\n    routing_url: http://localhost:3000\n    schema:\n      subgraph_url: http://localhost:3000\n\n  books:\n    routing_url: http://localhost:3500\n    schema:\n      subgraph_url: http://localhost:3500\n```\n\n----------------------------------------\n\nTITLE: Implementing Permission Classes in Strawberry GraphQL\nDESCRIPTION: Demonstrates how to implement permission classes using BasePermission and field decorators. Shows the change in kwargs argument keys from camel case to python naming convention.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nclass IsAuthorized(BasePermission):\n    message = \"User is not authorized\"\n\n    def has_permission(\n        self, source, info, **kwargs: typing.Any\n    ) -> bool:  # pragma: no cover\n        # kwargs will have a key called \"a_key\"\n        # instead of `aKey`\n\n        return False\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(permission_classes=[IsAuthorized])\n    def name(self, a_key: str) -> str:  # pragma: no cover\n        return \"Erik\"\n```\n\n----------------------------------------\n\nTITLE: Customizing the GraphQL context in Chalice\nDESCRIPTION: Example of extending the GraphQLView class to provide a custom context object for GraphQL resolvers.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/chalice.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.chalice.views import GraphQLView\nfrom strawberry.http.temporal import TemporalResponse\nfrom chalice.app import Request\n\n\nclass MyGraphQLView(GraphQLView):\n    def get_context(self, request: Request, response: TemporalResponse):\n        return {\"example\": 1}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self, info: strawberry.Info) -> str:\n        return str(info.context[\"example\"])\n```\n\n----------------------------------------\n\nTITLE: Customizing Datadog Tracing Extension in Strawberry GraphQL\nDESCRIPTION: Shows how to extend the DatadogTracingExtension class by overriding the create_span method to add custom tags to the span. This example adds the GraphQL query as a tag for operation spans.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nfrom ddtrace import Span\n\nfrom strawberry.extensions import LifecycleStep\nfrom strawberry.extensions.tracing import DatadogTracingExtension\n\n\nclass DataDogExtension(DatadogTracingExtension):\n    def create_span(\n        self,\n        lifecycle_step: LifecycleStep,\n        name: str,\n        **kwargs,\n    ) -> Span:\n        span = super().create_span(lifecycle_step, name, **kwargs)\n        if lifecycle_step == LifeCycleStep.OPERATION:\n            span.set_tag(\"graphql.query\", self.execution_context.query)\n        return span\n```\n\n----------------------------------------\n\nTITLE: Configuring Async OpenTelemetry Extension\nDESCRIPTION: Basic setup for adding OpenTelemetry tracing to an async Strawberry GraphQL schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/opentelemetry.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions.tracing import OpenTelemetryExtension\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        OpenTelemetryExtension,\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Mutation with Strawberry in Python\nDESCRIPTION: This snippet demonstrates how to test a GraphQL mutation using Strawberry. It defines a mutation, executes it asynchronously, and asserts the expected results.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.asyncio\nasync def test_mutation():\n    mutation = \"\"\"\n        mutation TestMutation($title: String!, $author: String!) {\n            addBook(title: $title, author: $author) {\n                title\n            }\n        }\n    \"\"\"\n\n    resp = await schema.execute(\n        mutation,\n        variable_values={\n            \"title\": \"The Little Prince\",\n            \"author\": \"Antoine de Saint-Exupéry\",\n        },\n    )\n\n    assert resp.errors is None\n    assert resp.data[\"addBook\"] == {\n        \"title\": \"The Little Prince\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Returning Interfaces Directly in Strawberry Resolvers\nDESCRIPTION: Example showing how to return interface types directly from resolvers in Strawberry GraphQL, using a type resolution mechanism to determine the concrete type at runtime.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.interface\nclass Node:\n    id: strawberry.ID\n\n    @classmethod\n    def resolve_type(cls, obj: Any, *args: Any, **kwargs: Any) -> str:\n        return \"Video\" if obj.id == \"1\" else \"Image\"\n\n\n@strawberry.type\nclass Video(Node): ...\n\n\n@strawberry.type\nclass Image(Node): ...\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def node(self, id: strawberry.ID) -> Node:\n        return Node(id=id)\n\n\nschema = strawberry.Schema(query=Query, types=[Video, Image])\n```\n\n----------------------------------------\n\nTITLE: Creating and Running Schema\nDESCRIPTION: Code to create the GraphQL schema and command to run the Strawberry server.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/index.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nschema = strawberry.Schema(query=Query)\n```\n\nLANGUAGE: shell\nCODE:\n```\nstrawberry server schema\n```\n\n----------------------------------------\n\nTITLE: Custom Result Processing in Flask GraphQL View\nDESCRIPTION: Example of customizing how GraphQL execution results are processed before being sent to clients. Shows process_result method implementation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/flask.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.flask.views import GraphQLView\nfrom strawberry.http import GraphQLHTTPResponse\nfrom strawberry.types import ExecutionResult\n\n\nclass MyGraphQLView(GraphQLView):\n    def process_result(self, result: ExecutionResult) -> GraphQLHTTPResponse:\n        data: GraphQLHTTPResponse = {\"data\": result.data}\n\n        if result.errors:\n            data[\"errors\"] = [err.formatted for err in result.errors]\n\n        return data\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic-based GraphQL Types with Strawberry\nDESCRIPTION: Example of using Strawberry's Pydantic integration to define GraphQL types based on Pydantic models, with options for controlling field aliases.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_115\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, Field\nimport strawberry\n\n\nclass UserModel(BaseModel):\n    id: int = Field(..., alias=\"my_alias_name\")\n\n\n@strawberry.experimental.pydantic.type(UserModel, use_pydantic_alias=False)\nclass User:\n    id: strawberry.auto\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous GraphQL Query with Strawberry in Python\nDESCRIPTION: This snippet shows how to write an asynchronous test for a GraphQL query using Strawberry. It uses pytest's asyncio marker and awaits the schema execution.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.asyncio\nasync def test_query_async():\n    ...\n\n    resp = await schema.execute(query, variable_values={\"title\": \"The Great Gatsby\"})\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Result Processing in Sanic GraphQLView\nDESCRIPTION: Demonstrates how to override the process_result method in GraphQLView to customize the handling of execution results. This example shows how to format error messages before sending the response.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/sanic.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.sanic.views import GraphQLView\nfrom strawberry.http import GraphQLHTTPResponse, process_result\nfrom strawberry.types import ExecutionResult\nfrom sanic.request import Request\n\n\nclass MyGraphQLView(GraphQLView):\n    async def process_result(\n        self, request: Request, result: ExecutionResult\n    ) -> GraphQLHTTPResponse:\n        if result.errors:\n            result.errors = [err.formatted for err in result.errors]\n\n        return process_result(data)\n```\n\n----------------------------------------\n\nTITLE: Interface Inheritance Example\nDESCRIPTION: Demonstrates how interfaces can implement other interfaces creating an inheritance chain.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/interfaces.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.interface\nclass Error:\n    message: str\n\n@strawberry.interface\nclass FieldError(Error):\n    message: str\n    field: str\n\n@strawberry.type\nclass PasswordTooShort(FieldError):\n    message: str\n    field: str\n    min_length: int\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Cache Size for Parser Cache\nDESCRIPTION: Example showing how to configure the ParserCache extension with a maximum size limit of 100 entries to prevent unbounded memory growth.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/parser-cache.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import ParserCache\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        ParserCache(maxsize=100),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Processing GraphQL Results in Django View\nDESCRIPTION: Demonstrates how to customize the processing of GraphQL execution results before sending to clients. This can be used for logging or modifying error responses.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.http import GraphQLHTTPResponse\nfrom strawberry.types import ExecutionResult\nfrom strawberry.django.views import AsyncGraphQLView\nfrom django.http import HttpRequest\n\n\nclass MyGraphQLView(AsyncGraphQLView):\n    async def process_result(\n        self, request: HttpRequest, result: ExecutionResult\n    ) -> GraphQLHTTPResponse:\n        data: GraphQLHTTPResponse = {\"data\": result.data}\n\n        if result.errors:\n            data[\"errors\"] = [err.formatted for err in result.errors]\n\n        return data\n```\n\n----------------------------------------\n\nTITLE: Converting a Strawberry Type to Dictionary using asdict in Python\nDESCRIPTION: Demonstrates how to use the strawberry.asdict() function to convert a Strawberry type object to a Python dictionary. The example defines a User type with name and age fields, then converts an instance to a dictionary with the asdict utility.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/convert-to-dictionary.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass User:\n    name: str\n    age: int\n\n\n# should be {\"name\": \"Lorem\", \"age\": 25}\nuser_dict = strawberry.asdict(User(name=\"Lorem\", age=25))\n```\n\n----------------------------------------\n\nTITLE: Using merge_types to combine multiple GraphQL types\nDESCRIPTION: Example showing how to use the merge_types function to combine multiple Strawberry types into a single type. This allows for modular definition of types that can be combined as needed.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/tools.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.tools import merge_types\n\n\n@strawberry.type\nclass QueryA:\n    @strawberry.field\n    def perform_a(self) -> str: ...\n\n\n@strawberry.type\nclass QueryB:\n    @strawberry.field\n    def perform_b(self) -> str: ...\n\n\nComboQuery = merge_types(\"ComboQuery\", (QueryB, QueryA))\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype ComboQuery {\n  performB: String!\n  performA: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Interface Types\nDESCRIPTION: Demonstrates how to resolve interface types by returning specific implementing objects.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/interfaces.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def best_customer(self) -> Customer:\n        return Individual(name=\"Patrick\")\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Paginated Users Connection\nDESCRIPTION: A GraphQL query demonstrating how to request paginated user data using the Relay Connection pattern with 'first' parameter and retrieving edges containing nodes with user data and cursors.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/connections.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery getUsers {\n  getUsers(first: 2) {\n    users {\n      edges {\n        node {\n          id\n          name\n          occupation\n          age\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sync Apollo Tracing in Strawberry GraphQL\nDESCRIPTION: Example of how to add Apollo tracing to a Strawberry GraphQL schema using the synchronous ApolloTracingExtensionSync for non-async contexts.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/apollo-tracing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions.tracing import ApolloTracingExtensionSync\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        ApolloTracingExtensionSync,\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticated Subscription Implementation\nDESCRIPTION: Shows how to implement authentication in Strawberry subscriptions using connection parameters from the WebSocket connection.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/subscriptions.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import AsyncGenerator\n\nimport strawberry\n\nfrom .auth import authenticate_token\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"world\"\n\n\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def count(\n        self, info: strawberry.Info, target: int = 100\n    ) -> AsyncGenerator[int, None]:\n        connection_params: dict = info.context.get(\"connection_params\")\n        token: str = connection_params.get(\n            \"authToken\"\n        )  # equal to \"Bearer I_AM_A_VALID_AUTH_TOKEN\"\n        if not authenticate_token(token):\n            raise Exception(\"Forbidden!\")\n        for i in range(target):\n            yield i\n            await asyncio.sleep(0.5)\n\n\nschema = strawberry.Schema(query=Query, subscription=Subscription)\n```\n\n----------------------------------------\n\nTITLE: Implementing Interfaces in Strawberry\nDESCRIPTION: Demonstrates how to implement and extend interfaces using Strawberry decorators.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_157\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.interface\nclass Error:\n    message: str\n\n\n@strawberry.interface\nclass FieldError(Error):\n    message: str\n    field: str\n\n\n@strawberry.type\nclass PasswordTooShort(FieldError):\n    message: str\n    field: str\n    fix: str\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Websockets with Channels (Python)\nDESCRIPTION: Shows how to use GraphQLWebsocketCommunicator for testing websockets in Django Channels with Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_71\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom strawberry.channels.testing import GraphQLWebsocketCommunicator\nfrom myapp.asgi import application\n\n\n@pytest.fixture\nasync def gql_communicator():\n    async with GraphQLWebsocketCommunicator(\n        application=application, path=\"/graphql\"\n    ) as client:\n        yield client\n\n\nasync def test_subscribe_echo(gql_communicator):\n    async for res in gql_communicator.subscribe(\n        query='subscription { echo(message: \"Hi\") }'\n    ):\n        assert res.data == {\"echo\": \"Hi\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Quart Integration with Strawberry GraphQL\nDESCRIPTION: Shows how to set up a basic GraphQL endpoint using Strawberry with Quart web framework. Creates a Quart application and adds a GraphQL view rule.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/quart.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom quart import Quart\nfrom strawberry.quart.views import GraphQLView\n\nfrom api.schema import schema\n\napp = Quart(__name__)\n\napp.add_url_rule(\n    \"/graphql\",\n    view_func=GraphQLView.as_view(\"graphql_view\", schema=schema),\n)\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Schema Generated by Relay Implementation\nDESCRIPTION: The complete GraphQL schema generated when implementing Relay with Node and Connection patterns in Strawberry, showing the interface, types, and query fields.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/relay.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nscalar GlobalID\n\ninterface Node {\n  id: GlobalID!\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n  startCursor: String\n  endCursor: String\n}\n\ntype Fruit implements Node {\n  id: GlobalID!\n  name: String!\n  weight: Float!\n}\n\ntype FruitEdge {\n  cursor: String!\n  node: Fruit!\n}\n\ntype FruitConnection {\n  pageInfo: PageInfo!\n  edges: [FruitEdge!]!\n}\n\ntype Query {\n  node(id: GlobalID!): Node!\n  fruits(\n    before: String = null\n    after: String = null\n    first: Int = null\n    last: Int = null\n  ): FruitConnection!\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Context Typing with HTTP and WebSocket Types\nDESCRIPTION: Shows how to implement strong typing for both HTTP and WebSocket contexts using HTTPContextType and WebSocketContextType. Demonstrates separate context types for queries/mutations vs subscriptions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/litestar.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom typing import Any\nfrom litestar import Request, Litestar\nfrom litestar.datastructures import State\nfrom strawberry.litestar import (\n    make_graphql_controller,\n    BaseContext,\n    HTTPContextType,\n    WebSocketContextType,\n)\nfrom strawberry.types.info import Info\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom app.models import User\nfrom sqlalchemy import select\n\n\nclass CustomContext(BaseContext, kw_only=True):\n    user: User\n    session: AsyncSession\n\n\nclass CustomHTTPContextType(HTTPContextType, CustomContext):\n    request: Request[User, Any, State]\n\n\nclass CustomWSContextType(WebSocketContextType, CustomContext):\n    socket: WebSocket[User, Token, State]\n\n\nasync def custom_context_getter(\n    request: Request, db_session: AsyncSession\n) -> CustomContext:\n    return CustomContext(user=request.user, session=db_session)\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    async def hello(self, info: strawberry.Info[CustomHTTPContextType, None]) -> str:\n        session: AsyncSession = info.context.session\n        user: User = info.context.user\n\n        query = select(User).where(User.id == user.id)\n        user = (await session.execute((query))).scalar_one()\n        return f\"Hello {user.first_name}\"\n\n\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def count(\n        self, info: strawberry.Info[CustomWSContextType, None], target: int = 100\n    ) -> AsyncGenerator[int, None]:\n        import devtools\n\n        devtools.debug(info.context)\n        devtools.debug(info.context.socket)\n        for i in range(target):\n            yield i\n            await asyncio.sleep(0.5)\n\n\nschema = strawberry.Schema(Query, subscription=Subscription)\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n    context_getter=custom_context_getter,\n)\n\napp = Litestar(route_handlers=[GraphQLController])\n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Loading Function for Users\nDESCRIPTION: This code defines an asynchronous function 'load_users' that takes a list of keys (user IDs) and returns a list of User objects. This function is used as the load function for the DataLoader.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/dataloaders.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nasync def load_users(keys: List[int]) -> List[User]:\n    return [User(id=key) for key in keys]\n```\n\n----------------------------------------\n\nTITLE: Interface Query with Inline Fragments\nDESCRIPTION: Advanced GraphQL query showing how to access type-specific fields using inline fragments.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/interfaces.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  customers {\n    name\n    ... on Individual {\n      company {\n        name\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Root Value in Django GraphQL View\nDESCRIPTION: Example demonstrating how to provide a custom root value for a GraphQL schema by extending the GraphQLView. This allows setting initial values for query fields.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.django.views import GraphQLView\nfrom django.http import HttpRequest\n\n\nclass MyGraphQLView(GraphQLView):\n    def get_root_value(self, request: HttpRequest):\n        return Query(name=\"Patrick\")\n\n\n@strawberry.type\nclass Query:\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Query Example for Paginated Fruit Connection\nDESCRIPTION: GraphQL query demonstrating how to retrieve a paginated list of fruits with cursor-based pagination, including page information and edge data.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/relay.md#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  fruits(first: 10) {\n    pageInfo {\n      firstCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      # node here is the Fruit type\n      node {\n        id\n        name\n        weight\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Strawberry GraphQL Server with Example Schema\nDESCRIPTION: Command to start a debug server using Strawberry CLI that serves the defined GraphQL schema. This allows interaction with the API through the GraphiQL explorer interface.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/cursor-based.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nstrawberry server example:schema\n```\n\n----------------------------------------\n\nTITLE: Resolving References for Entity Interfaces in Strawberry\nDESCRIPTION: Example demonstrating how to implement the resolve_reference class method to resolve references to entity interfaces. This method is called when a service needs to resolve an entity reference from another service.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/federation/entity-interfaces.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.federation.interface_object(keys=[\"id\"])\nclass Media:\n    id: strawberry.ID\n    title: str\n\n    # TODO: check this\n\n    @classmethod\n    def resolve_reference(cls, id: strawberry.ID) -> \"Media\":\n        # here we could fetch the media from the database\n        # or even from an API\n        return Media(id=id, title=\"My Media\")\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query for Paginated Users\nDESCRIPTION: GraphQL query to fetch paginated user data with a limit and return next cursor information.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/cursor-based.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery getUsers {\n  getUsers(limit: 2) {\n    users {\n      id\n      name\n      occupation\n      age\n    }\n    pageMeta {\n      nextCursor\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Root Value and Context in Django GraphQL View in Python\nDESCRIPTION: This snippet demonstrates how to override get_context and get_root_value methods in a Django GraphQL view to provide custom values per request. It also shows how to set up the URL routing for the view.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_165\n\nLANGUAGE: python\nCODE:\n```\n# views.py\nfrom strawberry.django.views import GraphQLView as BaseGraphQLView\n\n\nclass GraphQLView(BaseGraphQLView):\n    def get_context(self, request):\n        return {\n            \"request\": request,\n            \"custom_context_value\": \"Hi!\",\n        }\n\n    def get_root_value(self, request):\n        return {\n            \"custom_root_value\": \"🍓\",\n        }\n\n\n# urls.py\nfrom django.urls import path\n\nfrom .views import GraphQLView\nfrom .schema import schema\n\nurlpatterns = [\n    path(\"graphql/\", GraphQLView.as_view(schema=schema)),\n]\n```\n\n----------------------------------------\n\nTITLE: Advanced Subscription Pattern with Process Execution\nDESCRIPTION: Demonstrates an advanced subscription pattern that executes a subprocess and streams its output using AsyncGenerator and AsyncIterator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/subscriptions.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nimport asyncio\nimport asyncio.subprocess as subprocess\nfrom asyncio import streams\nfrom typing import Any, AsyncGenerator, AsyncIterator, Coroutine, Optional\n\n\nasync def wait_for_call(coro: Coroutine[Any, Any, bytes]) -> Optional[bytes]:\n    try:\n        return await asyncio.wait_for(coro(), timeout=0.1)\n    except asyncio.TimeoutError:\n        pass\n\n\nasync def lines(stream: streams.StreamReader) -> AsyncIterator[str]:\n    while True:\n        b = await wait_for_call(stream.readline)\n        if b:\n            yield b.decode(\"UTF-8\").rstrip()\n        else:\n            break\n\n\nasync def exec_proc(target: int) -> subprocess.Process:\n    return await asyncio.create_subprocess_exec(\n        \"/bin/bash\",\n        \"-c\",\n        f\"for ((i = 0 ; i < {target} ; i++)); do echo $i; sleep 0.2; done\",\n        stdout=subprocess.PIPE,\n    )\n\n\nasync def tail(proc: subprocess.Process) -> AsyncGenerator[str, None]:\n    while proc.returncode is None:\n        async for l in lines(proc.stdout):\n            yield l\n    else:\n        async for l in lines(proc.stdout):\n            yield l\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello() -> str:\n        return \"world\"\n\n\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def run_command(self, target: int = 100) -> AsyncGenerator[str, None]:\n        proc = await exec_proc(target)\n        return tail(proc)\n\n\nschema = strawberry.Schema(query=Query, subscription=Subscription)\n```\n\n----------------------------------------\n\nTITLE: Custom Result Processing Router\nDESCRIPTION: Example of extending GraphQLRouter to customize result processing\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/fastapi.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.requests import Request\nfrom strawberry.fastapi import GraphQLRouter\nfrom strawberry.http import GraphQLHTTPResponse\nfrom strawberry.types import ExecutionResult\n\n\nclass MyGraphQLRouter(GraphQLRouter):\n    async def process_result(\n        self, request: Request, result: ExecutionResult\n    ) -> GraphQLHTTPResponse:\n        data: GraphQLHTTPResponse = {\"data\": result.data}\n\n        if result.errors:\n            data[\"errors\"] = [err.formatted for err in result.errors]\n\n        return data\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Operation in Custom View for Python\nDESCRIPTION: This snippet shows how to execute a GraphQL operation using the run method provided by the base view. It also includes error handling for HTTP exceptions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/creating-an-integration.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.http.exceptions import HTTPException\n\n\nclass MyView(\n    AsyncBaseHTTPView[\n        MyRequest,\n        MyResponse,\n        TemporalResponse,\n        Context,\n        RootValue,\n    ]\n):\n    ...\n\n    async def get(self, request: MyRequest) -> MyResponse:\n        try:\n            return await self.run(request)\n        except HTTPException as e:\n            response = Response(e.reason, status_code=e.status_code)\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Protocols in AIOHTTP with Strawberry\nDESCRIPTION: Shows how to set up GraphQL WebSocket protocols in an AIOHTTP application using Strawberry's GraphQLView with support for both legacy and new transport protocols.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/subscriptions.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.aiohttp.views import GraphQLView\nfrom strawberry.subscriptions import GRAPHQL_TRANSPORT_WS_PROTOCOL, GRAPHQL_WS_PROTOCOL\nfrom api.schema import schema\n\n\nview = GraphQLView(\n    schema, subscription_protocols=[GRAPHQL_TRANSPORT_WS_PROTOCOL, GRAPHQL_WS_PROTOCOL]\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecating and Customizing Enum Values in Strawberry GraphQL\nDESCRIPTION: Shows how to deprecate enum values and assign custom names to them using strawberry.enum_value.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/enums.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.enum\nclass IceCreamFlavour(Enum):\n    VANILLA = strawberry.enum_value(\"vanilla\")\n    CHOCOLATE = \"chocolate\"\n    STRAWBERRY = strawberry.enum_value(\n        \"strawberry\", deprecation_reason=\"Let's call the whole thing off\"\n    )\n```\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.enum\nclass IceCreamFlavour(Enum):\n    VANILLA = \"vanilla\"\n    CHOCOLATE_COOKIE = strawberry.enum_value(\"chocolate\", name=\"chocolateCookie\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Relay Edge Classes in Strawberry\nDESCRIPTION: Shows how to create custom Edge classes with additional fields and custom cursor handling in Relay connections.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type(name=\"Edge\", description=\"An edge in a connection.\")\nclass CustomEdge(relay.Edge[NodeType]):\n    index: int\n\n    @classmethod\n    def resolve_edge(cls, node: NodeType, *, cursor: Any = None, **kwargs: Any) -> Self:\n        assert isinstance(cursor, int)\n        return super().resolve_edge(node, cursor=cursor, index=cursor, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Interface in Strawberry\nDESCRIPTION: Example showing how to define a basic interface using the @strawberry.interface decorator in Python.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/interfaces.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.interface\nclass Customer:\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Implementing a Books Service with Strawberry Federation\nDESCRIPTION: Code for implementing a books service using Strawberry's federation functionality. It defines a Book type with ID as its federation key and creates a query to fetch all books.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation-v1.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.federation.type(keys=[\"id\"])\nclass Book:\n    id: strawberry.ID\n    title: str\n\n\ndef get_all_books() -> List[Book]:\n    return [Book(id=1, title=\"The Dark Tower\")]\n\n\n@strawberry.type\nclass Query:\n    all_books: List[Book] = strawberry.field(resolver=get_all_books)\n\n\nschema = strawberry.federation.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Specifying GraphQL Type for Query Field in Strawberry (Python)\nDESCRIPTION: This example shows how to specify a GraphQL type for a field when the return type of the function doesn't match the desired GraphQL type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/queries.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass User:\n    id: str\n    name: str\n\n    def __init__(self, id: str, name: str):\n        self.id = id\n        self.name = name\n\n@strawberry.type(name=\"User\")\nclass UserType:\n    id: strawberry.ID\n    name: str\n\n@strawberry.type\nclass Query:\n    @strawberry.field(graphql_type=UserType)\n    def user(self) -> User\n        return User(id=\"ringo\", name=\"Ringo\")\n```\n\n----------------------------------------\n\nTITLE: Installing Strawberry ASGI Dependencies\nDESCRIPTION: Command to install Strawberry GraphQL with ASGI support dependencies using pip.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/asgi.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install 'strawberry-graphql[asgi]'\n```\n\n----------------------------------------\n\nTITLE: Customizing GraphQL IDE Rendering in Sanic GraphQLView\nDESCRIPTION: Shows how to override the render_graphql_ide method in GraphQLView to provide a custom HTML response for the GraphQL IDE interface. This example returns a simple custom HTML page.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/sanic.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.sanic.views import GraphQLView\nfrom sanic.request import Request\nfrom sanic.response import HTTPResponse, html\n\n\nclass MyGraphQLView(GraphQLView):\n    async def render_graphql_ide(self, request: Request) -> HTTPResponse:\n        custom_html = \"\"\"<html><body><h1>Custom GraphQL IDE</h1></body></html>\"\"\"\n\n        return html(custom_html)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Directives in GraphQL Query\nDESCRIPTION: Example of using custom directives (@turnUppercase and @replace) in a GraphQL query, along with the @include directive.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/operation-directives.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery People($identified: Boolean!) {\n  person {\n    name @turnUppercase\n  }\n  jess: person {\n    name @replace(old: \"Jess\", new: \"Jessica\")\n  }\n  johnDoe: person {\n    name @replace(old: \"Jess\", new: \"John\") @include(if: $identified)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async GraphQL View in Flask with Strawberry\nDESCRIPTION: This snippet demonstrates how to set up an async GraphQL view in Flask using Strawberry. It's useful for handling asynchronous requests, especially when using dataloaders with Flask.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_102\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.flask.views import AsyncGraphQLView\n\n...\n\napp.add_url_rule(\n    \"/graphql\",\n    view_func=AsyncGraphQLView.as_view(\"graphql_view\", schema=schema, **kwargs),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload with Sanic Integration\nDESCRIPTION: Example of how to handle file uploads in a Strawberry GraphQL mutation when using the Sanic integration. The code demonstrates reading and decoding the contents of an uploaded text file.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_141\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.file_uploads import Upload\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def read_text(self, text_file: Upload) -> str:\n        return text_file.read().decode()\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Connection Authentication in Strawberry GraphQL\nDESCRIPTION: Demonstrates how to customize WebSocket connection handling by overriding the on_ws_connect method to implement authentication and authorization logic for GraphQL subscriptions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict\nfrom strawberry.exceptions import ConnectionRejectionError\nfrom strawberry.channels import GraphQLWSConsumer\n\n\nclass MyGraphQLWSConsumer(GraphQLWSConsumer):\n    async def on_ws_connect(self, context: Dict[str, object]):\n        connection_params = context[\"connection_params\"]\n\n        if not isinstance(connection_params, dict):\n            # Reject without a custom graphql-ws error payload\n            raise ConnectionRejectionError()\n\n        if connection_params.get(\"password\") != \"secret\":\n            # Reject with a custom graphql-ws error payload\n            raise ConnectionRejectionError({\"reason\": \"Invalid password\"})\n\n        if username := connection_params.get(\"username\"):\n            # Accept with a custom acknowledgment payload\n            return {\"message\": f\"Hello, {username}!\"}\n\n        # Accept without a acknowledgment payload\n        return await super().on_ws_connect(context)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Context in Flask GraphQL View\nDESCRIPTION: Example of extending GraphQLView to provide custom context object for resolvers. Shows how to override get_context method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/flask.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.flask.views import GraphQLView\nfrom flask import Request, Response\n\n\nclass MyGraphQLView(GraphQLView):\n    def get_context(self, request: Request, response: Response):\n        return {\"example\": 1}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self, info: strawberry.Info) -> str:\n        return str(info.context[\"example\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing AsyncBaseHTTPView for Custom Integration in Python\nDESCRIPTION: This snippet demonstrates how to create a custom view by inheriting from AsyncBaseHTTPView. It includes implementations for required methods such as get_context, get_root_value, and others.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/creating-an-integration.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.http.async_base_view import AsyncBaseHTTPView\nfrom strawberry.http.temporal_response import TemporalResponse\nfrom strawberry.http.typevars import Context, RootValue\n\n\nclass MyView(\n    AsyncBaseHTTPView[\n        MyRequest,\n        MyResponse,\n        TemporalResponse,\n        Context,\n        RootValue,\n    ]\n):\n    @property\n    def allow_queries_via_get(self) -> bool:\n        # this will usually be a setting on the view\n        return True\n\n    async def get_sub_response(self, request: MyRequest) -> TemporalResponse:\n        return TemporalResponse(status_code=200)\n\n    async def get_context(self, request: Request, response: SubResponse) -> Context:\n        return {\"request\": request, \"response\": response}\n\n    async def get_root_value(self, request: Request) -> Optional[RootValue]:\n        return None\n\n    def render_graphql_ide(self, request: Request) -> Response: ...\n\n    def create_response(\n        self, response_data: GraphQLHTTPResponse, sub_response: SubResponse\n    ) -> Response: ...\n```\n\n----------------------------------------\n\nTITLE: Processing GraphQL Results in ASGI\nDESCRIPTION: Demonstrates how to customize result processing before sending to clients by overriding the process_result method, which can be useful for logging or modifying errors.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/asgi.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.asgi import GraphQL\nfrom strawberry.http import GraphQLHTTPResponse\nfrom strawberry.types import ExecutionResult\nfrom starlette.requests import Request\n\n\nclass MyGraphQL(GraphQL):\n    async def process_result(\n        self, request: Request, result: ExecutionResult\n    ) -> GraphQLHTTPResponse:\n        data: GraphQLHTTPResponse = {\"data\": result.data}\n\n        if result.errors:\n            data[\"errors\"] = [err.formatted for err in result.errors]\n\n        return data\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Rule in Strawberry (Python)\nDESCRIPTION: This example demonstrates how to implement a custom validation rule that prevents querying a specific field named 'example' and add it to the schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/add-validation-rules.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import AddValidationRules\nfrom graphql import ValidationRule\n\n\nclass CustomRule(ValidationRule):\n    def enter_field(self, node, *args) -> None:\n        if node.name.value == \"example\":\n            self.report_error(GraphQLError(\"Can't query field 'example'\"))\n\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        AddValidationRules([CustomRule]),\n    ],\n)\n\nresult = schema.execute_sync(\"{ example }\")\n\nassert str(result.errors[0]) == \"Can't query field 'example'\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Void Mutations in Strawberry GraphQL\nDESCRIPTION: Example showing how to create a mutation that doesn't return any data (void result). This maps to a Void GraphQL scalar and always returns null.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/mutations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def restart() -> None:\n        print(f\"Restarting the server\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Directives in Strawberry GraphQL\nDESCRIPTION: Demonstration of defining custom directives in Strawberry GraphQL, including a directive to turn a string uppercase and another to replace substrings.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/operation-directives.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.directive(\n    locations=[DirectiveLocation.FIELD], description=\"Make string uppercase\"\n)\ndef turn_uppercase(value: str):\n    return value.upper()\n\n\n@strawberry.directive(locations=[DirectiveLocation.FIELD])\ndef replace(value: str, old: str, new: str):\n    return value.replace(old, new)\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Relay Connections with Permission Classes\nDESCRIPTION: Example of making Relay connections optional by using Union types with None, allowing them to be combined with permission classes. This enables queries to continue executing even if a user doesn't have permission to access a particular connection.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry import relay\nfrom strawberry.permission import BasePermission\n\n\nclass IsAuthenticated(BasePermission):\n    message = \"User is not authenticated\"\n\n    # This method can also be async!\n    def has_permission(\n        self, source: typing.Any, info: strawberry.Info, **kwargs\n    ) -> bool:\n        return False\n\n\n@strawberry.type\nclass Fruit(relay.Node):\n    code: relay.NodeID[int]\n    name: str\n    weight: float\n\n    @classmethod\n    def resolve_nodes(\n        cls,\n        *,\n        info: strawberry.Info,\n        node_ids: Iterable[str],\n    ):\n        return []\n\n\n@strawberry.type\nclass Query:\n    node: relay.Node = relay.node()\n\n    @relay.connection(\n        relay.ListConnection[Fruit] | None, permission_classes=[IsAuthenticated()]\n    )\n    def fruits(self) -> Iterable[Fruit]:\n        # This can be a database query, a generator, an async generator, etc\n        return all_fruits.values()\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Enums with Strawberry\nDESCRIPTION: Example of defining a GraphQL enum using Strawberry's @strawberry.enum decorator, with improved type checking support.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_117\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.enum\nclass IceCreamFlavour(Enum):\n    VANILLA = \"vanilla\"\n    STRAWBERRY = \"strawberry\"\n    CHOCOLATE = \"chocolate\"\n```\n\n----------------------------------------\n\nTITLE: Custom JSON encoding in Chalice GraphQL\nDESCRIPTION: Example of customizing JSON encoding for GraphQL responses with formatted indentation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/chalice.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom strawberry.chalice.views import GraphQLView\n\n\nclass MyGraphQLView(GraphQLView):\n    def encode_json(self, data: object) -> str:\n        return json.dumps(data, indent=2)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription Query Example\nDESCRIPTION: Shows the GraphQL query syntax for subscribing to the count subscription with a specific target value.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/subscriptions.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription {\n  count(target: 5)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Single-Member Union Types\nDESCRIPTION: Implementation of a GraphQL union type with only one member using Annotated and strawberry.union, useful for future extensibility of the schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/union.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom typing import Annotated\n\n\n@strawberry.type\nclass Audio:\n    duration: int\n\n\n@strawberry.type\nclass Query:\n    latest_media: Annotated[Audio, strawberry.union(\"MediaItem\")]\n```\n\n----------------------------------------\n\nTITLE: Extending an Interface with Interface Object in Apollo Federation\nDESCRIPTION: Example showing how to extend an interface from another service using the @strawberry.federation.interface_object decorator. This allows adding fields to an interface without having to redefine all implementing types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/federation/entity-interfaces.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.federation.interface_object(keys=[\"id\"])\nclass Media:\n    id: strawberry.ID\n    title: str\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Media @key(fields: \"id\") @interfaceObject {\n  id: ID!\n  title: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Specialized Generic Types (Python)\nDESCRIPTION: Demonstrates how to use specialized generic types in Strawberry, allowing for more flexible type definitions and schema generation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_72\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Foo(Generic[T]):\n    some_var: T\n\n\n@strawberry.type\nclass IntFoo(Foo[int]): ...\n\n\n@strawberry.type\nclass Query:\n    int_foo: IntFoo\n    str_foo: Foo[str]\n```\n\n----------------------------------------\n\nTITLE: Implementing Datadog Tracing Extension in Strawberry GraphQL\nDESCRIPTION: Code snippet demonstrating how to enable Datadog tracing in a Strawberry GraphQL schema using the DatadogTracingExtension.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/tracing.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions.tracing import DatadogTracingExtension\n\nschema = strawberry.Schema(query=Query, extensions=[DatadogTracingExtension])\n```\n\n----------------------------------------\n\nTITLE: Processing GraphQL Results in Strawberry AIOHTTP View\nDESCRIPTION: This snippet demonstrates how to customize the processing of GraphQL execution results before sending them to the client. It overrides the process_result method to format the response data and errors.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/aiohttp.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp.web import Request\nfrom strawberry.aiohttp.views import GraphQLView\nfrom strawberry.http import GraphQLHTTPResponse\nfrom strawberry.types import ExecutionResult\n\n\nclass MyGraphQLView(GraphQLView):\n    async def process_result(\n        self, request: Request, result: ExecutionResult\n    ) -> GraphQLHTTPResponse:\n        data: GraphQLHTTPResponse = {\"data\": result.data}\n\n        if result.errors:\n            data[\"errors\"] = [err.formatted for err in result.errors]\n\n        return data\n```\n\n----------------------------------------\n\nTITLE: Configuring MaxTokensLimiter in Strawberry Schema\nDESCRIPTION: Example showing how to add the MaxTokensLimiter extension to a Strawberry GraphQL schema with a maximum token limit of 1000. This will cause the server to reject queries that exceed the token limit.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/max-tokens-limiter.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import MaxTokensLimiter\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        MaxTokensLimiter(max_token_count=1000),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Union Type Definition\nDESCRIPTION: Example of a GraphQL union type definition in SDL (Schema Definition Language) that combines Audio, Video, and Image types into a MediaItem union.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/union.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nunion MediaItem = Audio | Video | Image\n```\n\n----------------------------------------\n\nTITLE: Overriding Interface Fields\nDESCRIPTION: Example of overriding interface field implementation in an implementing type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/interfaces.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.type\nclass Company(Customer):\n    @strawberry.field\n    def name(self) -> str:\n        return f\"{self.name} Limited\"\n```\n\n----------------------------------------\n\nTITLE: Defining Strawberry Types for Chat Application\nDESCRIPTION: Python code defining Strawberry types for a chat application, including ChatRoom input type and ChatRoomMessage output type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.input\nclass ChatRoom:\n    room_name: str\n\n@strawberry.type\nclass ChatRoomMessage:\n    room_name: str\n    current_user: str\n    message: str\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Subscription with Channel Listening in Strawberry\nDESCRIPTION: Example showing how to create a GraphQL subscription that listens to a specific channel with group filtering. The subscription yields data of type MyDataType parsed from channel messages.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def my_data_subscription(\n        self, info: strawberry.Info, groups: list[str]\n    ) -> AsyncGenerator[MyDataType | None, None]:\n        async with info.context[\"ws\"].listen_to_channel(\"my_data\", groups=groups) as cm:\n            yield None\n            async for message in cm:\n                yield MyDataType(name=message[\"payload\"])\n```\n\n----------------------------------------\n\nTITLE: Defining Resolvers as Methods with Decorators\nDESCRIPTION: Shows how to define a resolver using @strawberry.field as a decorator on a method. This approach is useful for co-locating resolvers with types or for small resolver implementations.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/resolvers.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def last_user(self) -> User:\n        return User(name=\"Marco\")\n```\n\n----------------------------------------\n\nTITLE: Using Annotated with Lazy Annotations in Strawberry\nDESCRIPTION: Example showing how to use Annotated with strawberry.lazy and deferred annotations to avoid circular imports. This pattern allows referencing types that might not be imported directly.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport strawberry\nfrom typing import Annotated\n\n\n@strawberry.type\nclass Query:\n    a: Annotated[\"datetime\", strawberry.lazy(\"datetime\")]\n\n\nschema = strawberry.Schema(Query)\n```\n\n----------------------------------------\n\nTITLE: Defining AsyncHTTPRequestAdapter for Custom Integration in Python\nDESCRIPTION: This snippet shows the base class for an async HTTP request adapter. It defines properties and methods for accessing request data such as query parameters, headers, and body.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/creating-an-integration.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.http.types import HTTPMethod, QueryParams, FormData\n\n\nclass AsyncHTTPRequestAdapter:\n    @property\n    def query_params(self) -> Mapping[str, Optional[Union[str, List[str]]]]: ...\n\n    @property\n    def method(self) -> HTTPMethod: ...\n\n    @property\n    def headers(self) -> Mapping[str, str]: ...\n\n    @property\n    def content_type(self) -> Optional[str]: ...\n\n    async def get_body(self) -> Union[bytes, str]: ...\n\n    async def get_form_data(self) -> FormData: ...\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Encoding in Strawberry AIOHTTP GraphQL View\nDESCRIPTION: This example demonstrates how to customize the JSON encoding of HTTP and WebSocket responses by overriding the encode_json method in GraphQLView. It uses json.dumps with indentation for prettier output.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/aiohttp.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom strawberry.aiohttp.views import GraphQLView\n\n\nclass MyGraphQLView(GraphQLView):\n    def encode_json(self, data: object) -> str:\n        return json.dumps(data, indent=2)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Context with Litestar and Strawberry\nDESCRIPTION: Demonstrates how to provide a custom context object to GraphQL resolvers using the context_getter parameter. This allows access to custom data in resolver functions via the info.context object.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/litestar.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom litestar import Request, Litestar\nfrom strawberry.litestar import make_graphql_controller\nfrom strawberry.types.info import Info\n\n\nasync def custom_context_getter():\n    return {\"custom\": \"context\"}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self, info: strawberry.Info[dict, None]) -> str:\n        return info.context[\"custom\"]\n\n\nschema = strawberry.Schema(Query)\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n    context_getter=custom_context_getter,\n)\n\napp = Litestar(route_handlers=[GraphQLController])\n```\n\n----------------------------------------\n\nTITLE: Using Generic Types with Lists in Interfaces and Unions\nDESCRIPTION: Example showing improved support for generic types in Strawberry, where the same generic can be used multiple times with different type parameters inside interfaces or unions, including when nested in lists.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass BlockRow[T]:\n    items: list[T]\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def blocks(self) -> list[BlockRow[str] | BlockRow[int]]:\n        return [\n            BlockRow(items=[\"a\", \"b\", \"c\"]),\n            BlockRow(items=[1, 2, 3, 4]),\n        ]\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Using @staticmethod with strawberry.Parent in Resolver\nDESCRIPTION: This snippet demonstrates how to use @staticmethod decorator with strawberry.Parent to access parent data in a resolver method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/accessing-parent-data.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.type\nclass User:\n    first_name: str\n    last_name: str\n\n    @strawberry.field\n    @staticmethod\n    def full_name(parent: strawberry.Parent[User]) -> str:\n        return f\"{parent.first_name} {parent.last_name}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing custom root value in Chalice GraphQL\nDESCRIPTION: Example of extending the GraphQLView to provide a custom root value for the GraphQL schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/chalice.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.chalice.views import GraphQLView\n\n\nclass MyGraphQLView(GraphQLView):\n    def get_root_value(self):\n        return Query(name=\"Patrick\")\n\n\n@strawberry.type\nclass Query:\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Implementing Apollo Federation 2 Directives in Strawberry\nDESCRIPTION: This example demonstrates the use of Apollo Federation 2 directives in Strawberry, including @shareable, @tag, @override, and @inaccessible. It shows how to use the @override directive with a Product type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_104\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom typing import List\n\n\n@strawberry.interface\nclass SomeInterface:\n    id: strawberry.ID\n\n\n@strawberry.federation.type(keys=[\"upc\"], extend=True)\nclass Product(SomeInterface):\n    upc: str = strawberry.federation.field(external=True, override=[\"mySubGraph\"])\n\n\n@strawberry.federation.type\nclass Query:\n    @strawberry.field\n    def top_products(self, first: int) -> List[Product]:\n        return []\n\n\nschema = strawberry.federation.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Customizing Root Value in Strawberry AIOHTTP GraphQL View\nDESCRIPTION: This example shows how to override the get_root_value method of GraphQLView to provide a custom root value for the schema. It demonstrates setting a predefined value for a Query field.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/aiohttp.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom aiohttp.web import Request\nfrom strawberry.aiohttp.views import GraphQLView\n\n\nclass MyGraphQLView(GraphQLView):\n    async def get_root_value(self, request: Request):\n        return Query(name=\"Patrick\")\n\n\n@strawberry.type\nclass Query:\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Implementing Execution Hook in Strawberry GraphQL Extension\nDESCRIPTION: Shows how to implement the on_execute hook to run code during the execution step of GraphQL execution.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/custom-extensions.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions import SchemaExtension\n\n\nclass MyExtension(SchemaExtension):\n    def on_execute(self):\n        print(\"GraphQL execution start\")\n        yield\n        print(\"GraphQL execution end\")\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Union Types Using Inline Fragments\nDESCRIPTION: Example of a GraphQL query that leverages inline fragments to handle different possible types returned by a field that returns a union type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/union.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nsearchMedia(term: \"strawberry\") {\n  ... on Audio {\n    duration\n  }\n  ... on Video {\n    thumbnailUrl\n  }\n  ... on Image {\n    src\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Custom Types with __get_validators__ in Strawberry\nDESCRIPTION: This snippet demonstrates how to handle Pydantic custom types with __get_validators__ in Strawberry using scalar types and scalar_overrides.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/pydantic.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom pydantic import BaseModel\n\n\nclass MyCustomType:\n    @classmethod\n    def __get_validators__(cls):\n        yield cls.validate\n\n    @classmethod\n    def validate(cls, v):\n        return MyCustomType()\n\n\nclass Example(BaseModel):\n    custom: MyCustomType\n\n\n@strawberry.experimental.pydantic.type(model=Example, all_fields=True)\nclass ExampleGQL: ...\n\n\nMyScalarType = strawberry.scalar(\n    MyCustomType,\n    # or another function describing how to represent MyCustomType in the response\n    serialize=str,\n    parse_value=lambda v: MyCustomType(),\n)\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field()\n    def test(self) -> ExampleGQL:\n        return Example(custom=MyCustomType())\n\n\n# Tells strawberry to convert MyCustomType into MyScalarType\nschema = strawberry.Schema(query=Query, scalar_overrides={MyCustomType: MyScalarType})\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Resolver Factory in Strawberry\nDESCRIPTION: This code snippet shows how to create a resolver factory using generic type variables in Strawberry. It allows for flexible resolver creation without raising MissingTypesForGenericError.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_103\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom typing import Type, TypeVar\n\nT = TypeVar(\"T\")  # or TypeVar(\"T\", bound=StrawberryType) etc\n\n\ndef resolver_factory(strawberry_type: Type[T]):\n    def resolver(id: strawberry.ID) -> T:\n        # some actual logic here\n        return strawberry_type(...)\n\n    return resolver\n```\n\n----------------------------------------\n\nTITLE: Using MaxTokensLimiter Extension with Strawberry GraphQL\nDESCRIPTION: Demonstrates how to configure the MaxTokensLimiter extension to limit the number of tokens in a GraphQL document. This extension provides a way to prevent large or complex queries from overloading the server.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_55\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import MaxTokensLimiter\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        MaxTokensLimiter(max_token_count=1000),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Using Generic Type Variables with Python 3.12 Syntax in Strawberry\nDESCRIPTION: Example of using Python 3.12's new generic syntax with Strawberry GraphQL types, showing how to create and use generic edge types with typed node fields.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Edge[T]:\n    cursor: strawberry.ID\n    node_field: T\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self) -> Edge[int]:\n        return Edge(cursor=strawberry.ID(\"1\"), node_field=1)\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Implementing ValidationCache with Custom Maxsize in Strawberry GraphQL (Python)\nDESCRIPTION: This example shows how to use the ValidationCache extension with a custom maxsize parameter. It limits the cache to 100 entries, after which old entries will be evicted.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/validation-cache.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import ValidationCache\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        ValidationCache(maxsize=100),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Single File Upload Request (Shell)\nDESCRIPTION: cURL command to send a single file upload request to a GraphQL endpoint using multipart form data.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/file-upload.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl localhost:8000/graphql \\\n  -F operations='{ \"query\": \"mutation($file: Upload!){ readFile(file: $file) }\", \"variables\": { \"file\": null } }' \\\n  -F map='{ \"file\": [\"variables.file\"] }' \\\n  -F file=@a.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Private Fields with Forward References in Python\nDESCRIPTION: Demonstrates how to use strawberry.Private with forward references for type hints. This allows defining private fields that reference types defined later in the code.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_110\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    foo: \"strawberry.Private[int]\"\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\n\n\n@strawberry.type\nclass Query:\n    private_foo: strawberry.Private[SensitiveData]\n\n    @strawberry.field\n    def foo(self) -> int:\n        return self.private_foo.visible\n\n\n@dataclass\nclass SensitiveData:\n    visible: int\n    not_visible: int\n```\n\n----------------------------------------\n\nTITLE: Fixing PermissionExtension with fail_silently by making the field optional (Python)\nDESCRIPTION: This code snippet shows how to fix the error by making the 'name' field optional. The return type is changed to 'str | None', allowing the field to be nullable and compatible with fail_silently behavior.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/permission-fail-silently-requires-optional.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.permission import PermissionExtension\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(\n        extensions=[PermissionExtension([IsAuthorized()], fail_silently=True)]\n    )\n    def name(self) -> str | None:  # This is now a nullable field\n        return \"ABC\"\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Configuring Strawberry Schema with Extensions\nDESCRIPTION: This snippet shows how to create a Strawberry Schema with multiple extensions, including MaxTokensLimiter and ParserCache. It demonstrates the correct way to combine these extensions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nschema = strawberry.Schema(\n    query=Query, extensions=[MaxTokensLimiter(max_token_count=20), ParserCache()]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Depth Validation in Python GraphQL\nDESCRIPTION: Sets up a depth limit validator and executes a GraphQL query to test the depth restriction. Validates that queries exceeding maximum depth of 3 are rejected with appropriate error message.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_135\n\nLANGUAGE: python\nCODE:\n```\nvalidation_rules = default_validation_rules + [depth_limit_validator(3)]\n\nresult = schema.execute_sync(\n    \"\"\"\n    query MyQuery {\n      user {\n        pets {\n          owner {\n            pets {\n              name\n            }\n          }\n        }\n      }\n    }\n    \"\"\",\n    validation_rules=validation_rules,\n)\nassert len(result.errors) == 1\nassert result.errors[0].message == \"'MyQuery' exceeds maximum operation depth of 3\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Specializations of a Generic Type\nDESCRIPTION: Demonstrates using multiple specializations of the same generic type (Point2D) with different type parameters (float and int), showing how Strawberry generates distinct GraphQL types for each specialization.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/generics.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Generic, TypeVar\n\nimport strawberry\n\nT = TypeVar(\"T\")\n\n\n@strawberry.input\nclass Point2D(Generic[T]):\n    x: T\n    y: T\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def store_line_float(self, a: Point2D[float], b: Point2D[float]) -> bool:\n        return True\n\n    @strawberry.mutation\n    def store_line_int(self, a: Point2D[int], b: Point2D[int]) -> bool:\n        return True\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  storeLineFloat(a: FloatPoint2D!, b: FloatPoint2D!): Boolean!\n  storeLineInt(a: IntPoint2D!, b: IntPoint2D!): Boolean!\n}\n\ninput FloatPoint2D {\n  x: Float!\n  y: Float!\n}\n\ninput IntPoint2D {\n  x: Int!\n  y: Int!\n}\n```\n\n----------------------------------------\n\nTITLE: Using Metadata with Strawberry Arguments in Python\nDESCRIPTION: Example of passing metadata to Strawberry arguments, which can later be accessed from the Info object. This allows for adding additional information to arguments that can be used during execution.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(\n        self,\n        info,\n        input: Annotated[str, strawberry.argument(metadata={\"test\": \"foo\"})],\n    ) -> str:\n        argument_definition = info.get_argument_definition(\"input\")\n        assert argument_definition.metadata[\"test\"] == \"foo\"\n\n        return f\"Hi {input}\"\n```\n\n----------------------------------------\n\nTITLE: Using Strawberry Parent Type for Static Method Resolvers\nDESCRIPTION: This example shows how to use the strawberry.Parent type annotation to create resolvers without using self. It demonstrates a static method resolver that accesses the parent object.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass UserRow:\n    id_: str\n\n\n@strawberry.type\nclass User:\n    @strawberry.field\n    @staticmethod\n    async def name(parent: strawberry.Parent[UserRow]) -> str:\n        return f\"User Number {parent.id_}\"\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self) -> User:\n        return UserRow(id_=\"1234\")\n```\n\n----------------------------------------\n\nTITLE: Defining Named Union Types with Annotated\nDESCRIPTION: Implementation of a GraphQL union type in Strawberry using Python's Annotated type and strawberry.union to explicitly name the union type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/union.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom typing import Union, Annotated\n\n\n@strawberry.type\nclass Query:\n    latest_media: Annotated[Union[Audio, Video, Image], strawberry.union(\"MediaItem\")]\n```\n\n----------------------------------------\n\nTITLE: Setting Response Headers in Mutation Resolvers\nDESCRIPTION: Demonstrates how to set response headers (like cookies) in mutation resolvers by accessing the response object from the context.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/asgi.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def login(self, info: strawberry.Info) -> bool:\n        token = do_login()\n        info.context[\"response\"].set_cookie(key=\"token\", value=token)\n        return True\n```\n\n----------------------------------------\n\nTITLE: Apollo Client WebSocket Configuration\nDESCRIPTION: Example of configuring Apollo client for authenticated WebSocket connections with Strawberry subscriptions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/subscriptions.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GraphQLWsLink } from \"@apollo/client/link/subscriptions\";\nimport { createClient } from \"graphql-ws\";\n\nconst wsLink = new GraphQLWsLink(\n  createClient({\n    url: \"ws://localhost:4000/subscriptions\",\n    connectionParams: {\n      authToken: \"Bearer I_AM_A_VALID_AUTH_TOKEN\",\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Silent Permission Failure Implementation\nDESCRIPTION: Demonstrates how to implement silent permission failures using fail_silently parameter\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/permissions.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.permission import PermissionExtension, BasePermission\nfrom typing import Optional\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(\n        extensions=[\n            PermissionExtension(permissions=[IsAuthenticated()], fail_silently=True)\n        ]\n    )\n    def name(self) -> Optional[str]:\n        return \"ABC\"\n```\n\n----------------------------------------\n\nTITLE: Defining Union Types with Annotated in Strawberry\nDESCRIPTION: Migration example showing the transition from the old union type syntax to the new typing.Annotated syntax, which improves type checking and IDE support, especially with pyright.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n# Before:\nAnimal = strawberry.union(\"Animal\", (Cat, Dog))\n\n# After:\nfrom typing import Annotated, Union\n\nAnimal = Annotated[Union[Cat, Dog], strawberry.union(\"Animal\")]\n```\n\n----------------------------------------\n\nTITLE: Ignoring Fields by Arguments in QueryDepthLimiter for Strawberry GraphQL\nDESCRIPTION: This example shows how to use the should_ignore parameter to ignore fields based on their arguments. It defines a schema and executes two queries, one that fails due to depth and another that succeeds because the 'user' field with argument 'name: \"matt\"' is ignored.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/query-depth-limiter.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import QueryDepthLimiter\n\n\ndef should_ignore(ignore: IgnoreContext):\n    return ignore.field_args.get(\"name\") == \"matt\"\n\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        QueryDepthLimiter(max_depth=2, should_ignore=should_ignore),\n    ],\n)\n\n# This query fails\nschema.execute(\n    \"\"\"\n  query TooDeep {\n    book {\n      author {\n        publishedBooks {\n          title\n        }\n      }\n    }\n  }\n\"\"\"\n)\n\n# This query succeeds because the `user` field is ignored\nschema.execute(\n    \"\"\"\n  query NotTooDeep {\n    user(name:\"matt\") {\n      favouriteBooks {\n        author {\n          publishedBooks {\n            title\n          }\n        }\n      }\n    }\n  }\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Generics with Enums in Strawberry GraphQL\nDESCRIPTION: This code demonstrates how to use Generic types with Enums in Strawberry GraphQL. It defines a VehicleMake enum, creates a generic container class, and then uses that container with the enum in a type definition - a pattern that now works correctly after the 0.77.7 bugfix.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_129\n\nLANGUAGE: python\nCODE:\n```\nT = TypeVar(\"T\")\n\n\n@strawberry.enum\nclass VehicleMake(Enum):\n    FORD = \"ford\"\n    TOYOTA = \"toyota\"\n    HONDA = \"honda\"\n\n\n@strawberry.type\nclass GenericForEnum(Generic[T]):\n    generic_slot: T\n\n\n@strawberry.type\nclass SomeType:\n    field: GenericForEnum[VehicleMake]\n```\n\n----------------------------------------\n\nTITLE: API Reference for AddValidationRules Extension (Python)\nDESCRIPTION: This snippet shows the API reference for the AddValidationRules class, which takes a list of GraphQL validation rules as an argument.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/add-validation-rules.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass AddValidationRules(validation_rules): ...\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema for Custom Connection Arguments (GraphQL)\nDESCRIPTION: This snippet shows the resulting GraphQL schema generated from the custom connection implementation. It includes the custom 'nameEndswith' argument along with standard Relay pagination arguments.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/relay.md#2025-04-21_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  fruitsWithFilter(\n    nameEndswith: String!\n    before: String = null\n    after: String = null\n    first: Int = null\n    last: Int = null\n  ): FruitConnection!\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Connection Authentication in Strawberry ASGI\nDESCRIPTION: Example of customizing WebSocket connection handling by overriding on_ws_connect method to implement authentication and authorization for GraphQL subscriptions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/asgi.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Dict\nfrom strawberry.exceptions import ConnectionRejectionError\nfrom strawberry.asgi import GraphQL\n\n\nclass MyGraphQL(GraphQL):\n    async def on_ws_connect(self, context: Dict[str, object]):\n        connection_params = context[\"connection_params\"]\n\n        if not isinstance(connection_params, dict):\n            # Reject without a custom graphql-ws error payload\n            raise ConnectionRejectionError()\n\n        if connection_params.get(\"password\") != \"secret\":\n            # Reject with a custom graphql-ws error payload\n            raise ConnectionRejectionError({\"reason\": \"Invalid password\"})\n\n        if username := connection_params.get(\"username\"):\n            # Accept with a custom acknowledgment payload\n            return {\"message\": f\"Hello, {username}!\"}\n\n        # Accept without a acknowledgment payload\n        return await super().on_ws_connect(context)\n```\n\n----------------------------------------\n\nTITLE: MaskErrors Class Definition in Strawberry GraphQL\nDESCRIPTION: API reference for the MaskErrors class, showing its constructor with parameters for customizing error masking behavior and the message shown to clients.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/mask-errors.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MaskErrors(\n    should_mask_error=default_should_mask_error, error_message=\"Unexpected error.\"\n): ...\n```\n\n----------------------------------------\n\nTITLE: Customizing WebSocket Connection Handling in Strawberry GraphQL Controller\nDESCRIPTION: This snippet demonstrates how to customize the behavior when a WebSocket connection is established for GraphQL subscriptions. It implements authentication and provides custom connection responses.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/litestar.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom typing import Dict\nfrom strawberry.exceptions import ConnectionRejectionError\nfrom strawberry.litestar import make_graphql_controller\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"world\"\n\n\nschema = strawberry.Schema(Query)\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n)\n\n\nclass MyGraphQLController(GraphQLController):\n    async def on_ws_connect(self, context: Dict[str, object]):\n        connection_params = context[\"connection_params\"]\n\n        if not isinstance(connection_params, dict):\n            # Reject without a custom graphql-ws error payload\n            raise ConnectionRejectionError()\n\n        if connection_params.get(\"password\") != \"secret\":\n            # Reject with a custom graphql-ws error payload\n            raise ConnectionRejectionError({\"reason\": \"Invalid password\"})\n\n        if username := connection_params.get(\"username\"):\n            # Accept with a custom acknowledgment payload\n            return {\"message\": f\"Hello, {username}!\"}\n\n        # Accept without a acknowledgment payload\n        return await super().on_ws_connect(context)\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Connection Type for Relay-based Pagination\nDESCRIPTION: Implementation of a generic Connection type class using Strawberry's type system with Generic TypeVar support, containing the required pageInfo and edges fields according to Relay specification.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/connections.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# example.py\n\nfrom typing import Generic, TypeVar\n\nimport strawberry\n\n\nGenericType = TypeVar(\"GenericType\")\n\n\n@strawberry.type\nclass Connection(Generic[GenericType]):\n    page_info: \"PageInfo\" = strawberry.field(\n        description=\"Information to aid in pagination.\"\n    )\n\n    edges: list[\"Edge[GenericType]\"] = strawberry.field(\n        description=\"A list of edges in this connection.\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Defining Strawberry Types with Pydantic Integration\nDESCRIPTION: This example shows how to use Strawberry's experimental Pydantic integration to create an input type based on a Pydantic model. It demonstrates the use of Annotated fields in the Pydantic model.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    age: Optional[Annotated[int, \"metadata\"]]\n\n\n@strawberry.experimental.pydantic.input(all_fields=True)\nclass UserInput:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL IDE in FastAPI with Strawberry\nDESCRIPTION: Shows how to configure different GraphQL IDEs (GraphiQL, Apollo Sandbox, or Pathfinder) in a FastAPI application using Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom fastapi import FastAPI\nfrom strawberry.fastapi import GraphQLRouter\nfrom api.schema import schema\n\ngraphql_app = GraphQLRouter(schema, graphql_ide=\"apollo-sandbox\")\n\napp = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Including Pydantic Computed Fields in Strawberry Types\nDESCRIPTION: Demonstrates how to include Pydantic computed fields when using the pydantic.type decorator in Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass UserModel(pydantic.BaseModel):\n    age: int\n\n    @computed_field\n    @property\n    def next_age(self) -> int:\n        return self.age + 1\n\n\n@strawberry.experimental.pydantic.type(\n    UserModel, all_fields=True, include_computed=True\n)\nclass User:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Books Query Response in JSON\nDESCRIPTION: Example JSON response for a GraphQL query requesting books and authors data. Shows how the response structure mirrors the query structure.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"books\": [{ \"title\": \"Jurassic Park\" }],\n    \"authors\": [{ \"name\": \"Michael Crichton\" }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Apollo Federation v2.7 Support in Strawberry (Python)\nDESCRIPTION: Shows how to use Apollo Federation v2.7 features like @authenticated, @requiresScopes, @policy directives, and the label argument for @override in Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.federation.schema_directives import Override\n\n\n@strawberry.federation.type(\n    authenticated=True,\n    policy=[[\"client\", \"poweruser\"], [\"admin\"]],\n    requires_scopes=[[\"client\", \"poweruser\"], [\"admin\"]],\n)\nclass Product:\n    upc: str = strawberry.federation.field(\n        override=Override(override_from=\"mySubGraph\", label=\"percent(1)\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Using create_type to dynamically build a GraphQL Query type\nDESCRIPTION: Example demonstrating how to use the create_type function to dynamically build a GraphQL Query type with field definitions. It shows defining field resolvers and combining them into a type used in a schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/tools.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.tools import create_type\n\n\n@strawberry.field\ndef hello(info) -> str:\n    return \"World\"\n\n\ndef get_name(info) -> str:\n    return info.context.user.name\n\n\nmy_name = strawberry.field(name=\"myName\", resolver=get_name)\n\nQuery = create_type(\"Query\", [hello, my_name])\n\nschema = strawberry.Schema(query=Query)\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  hello: String!\n  myName: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Mutation in Python with Strawberry\nDESCRIPTION: Example of defining a GraphQL mutation using the Strawberry library in Python. The mutation takes an integer argument and returns None.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_114\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Mutation:\n    @strawberry.field\n    def do_something(self, arg: int) -> None:\n        return\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n    doSomething(arg: Int!): Void\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Messages in Strawberry GraphQL\nDESCRIPTION: Example showing how to customize the error message displayed to clients when errors are masked. This allows for more user-friendly or context-appropriate messages.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/mask-errors.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import MaskErrors\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        MaskErrors(error_message=\"Oh no! An error occured. Very sorry about that.\"),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Pydantic Model Integration with Constrained Float Types\nDESCRIPTION: Shows how to use constrained float field types in Pydantic models with Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_76\n\nLANGUAGE: python\nCODE:\n```\nimport pydantic\n\nclass Model(pydantic.BaseModel):\n    field: pydantic.confloat(le=100.0)\n    equivalent_field: float = pydantic.Field(le=100.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Hooks - New Style (Python)\nDESCRIPTION: Demonstrates the new style of defining extension hooks introduced in v0.159.0, using generator functions with yield to handle both pre and post execution code in a single method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.159.0.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyExtension(Extension):\n    def on_execute(self):\n        # code before the execution starts\n        yield\n        # code after the execution ends\n```\n\n----------------------------------------\n\nTITLE: Custom Codegen Plugin Interface\nDESCRIPTION: Interface definition for creating custom codegen plugins in Strawberry, showing required methods and their purposes.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/codegen/query-codegen.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.codegen import CodegenPlugin, CodegenFile, CodegenResult\nfrom strawberry.codegen.types import GraphQLType, GraphQLOperation\n\n\nclass QueryCodegenPlugin:\n    def __init__(self, query: Path) -> None:\n        \"\"\"Initialize the plugin.\n\n        The singular argument is the path to the file that is being processed by this plugin.\n        \"\"\"\n        self.query = query\n\n    def on_start(self) -> None: ...\n\n    def on_end(self, result: CodegenResult) -> None: ...\n\n    def generate_code(\n        self, types: List[GraphQLType], operation: GraphQLOperation\n    ) -> List[CodegenFile]:\n        return []\n```\n\n----------------------------------------\n\nTITLE: Custom Node Resolution for Database Models in Strawberry GraphQL (Python)\nDESCRIPTION: This snippet demonstrates how to create a custom Connection class that converts database models to GraphQL types. It uses a custom 'resolve_node' method to perform the conversion after pagination.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/relay.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry import relay\n\nfrom db import models\n\n\n@strawberry.type\nclass Fruit(relay.Node):\n    code: relay.NodeID[int]\n    name: str\n    weight: float\n\n\n@strawberry.type\nclass FruitDBConnection(relay.ListConnection[Fruit]):\n    @classmethod\n    def resolve_node(cls, node: FruitDB, *, info: strawberry.Info, **kwargs) -> Fruit:\n        return Fruit(\n            code=node.code,\n            name=node.name,\n            weight=node.weight,\n        )\n\n\n@strawberry.type\nclass Query:\n    @relay.connection(FruitDBConnection)\n    def fruits_with_filter(\n        self,\n        info: strawberry.Info,\n        name_endswith: str,\n    ) -> Iterable[models.Fruit]:\n        return models.Fruit.objects.filter(name__endswith=name_endswith)\n```\n\n----------------------------------------\n\nTITLE: Creating an Edge Type for Relay Connection Pagination\nDESCRIPTION: Implementation of the Edge type class using Generic TypeVar to handle different node types, containing node and cursor fields as required by the Relay Connection specification.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/connections.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# example.py\n\nfrom typing import Generic, TypeVar\n\nimport strawberry\n\n\nGenericType = TypeVar(\"GenericType\")\n\n\n@strawberry.type\nclass Connection(Generic[GenericType]):\n    page_info: \"PageInfo\" = strawberry.field(\n        description=\"Information to aid in pagination.\"\n    )\n\n    edges: list[\"Edge[GenericType]\"] = strawberry.field(\n        description=\"A list of edges in this connection.\"\n    )\n\n\n@strawberry.type\nclass PageInfo:\n    has_next_page: bool = strawberry.field(\n        description=\"When paginating forwards, are there more items?\"\n    )\n\n    has_previous_page: bool = strawberry.field(\n        description=\"When paginating backwards, are there more items?\"\n    )\n\n    start_cursor: Optional[str] = strawberry.field(\n        description=\"When paginating backwards, the cursor to continue.\"\n    )\n\n    end_cursor: Optional[str] = strawberry.field(\n        description=\"When paginating forwards, the cursor to continue.\"\n    )\n\n\n@strawberry.type\nclass Edge(Generic[GenericType]):\n    node: GenericType = strawberry.field(description=\"The item at the end of the edge.\")\n\n    cursor: str = strawberry.field(description=\"A cursor for use in pagination.\")\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Encoding in Strawberry GraphQL Controller\nDESCRIPTION: This snippet demonstrates how to customize the JSON encoding process for HTTP and WebSocket responses in the GraphQL controller. It overrides the encode_json method to use indented JSON formatting.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/litestar.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport strawberry\nfrom strawberry.litestar import make_graphql_controller\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"world\"\n\n\nschema = strawberry.Schema(Query)\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n)\n\n\nclass MyGraphQLController(GraphQLController):\n    def encode_json(self, data: object) -> bytes:\n        return json.dumps(data, indent=2)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Paginated Users Query\nDESCRIPTION: Example JSON response for the paginated users query, showing user data and next cursor.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/cursor-based.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"getUsers\": {\n      \"users\": [\n        {\n          \"id\": 1,\n          \"name\": \"Norman Osborn\",\n          \"occupation\": \"Founder, Oscorp Industries\",\n          \"age\": 42\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Peter Parker\",\n          \"occupation\": \"Freelance Photographer, The Daily Bugle\",\n          \"age\": 20\n        }\n      ],\n      \"pageMeta\": {\n        \"nextCursor\": \"dXNlcjoz\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Types with Strawberry Input Types\nDESCRIPTION: This snippet demonstrates how to use generic types with Strawberry input types. It defines a generic Input class and uses it in a Query field.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_147\n\nLANGUAGE: python\nCODE:\n```\nT = typing.TypeVar(\"T\")\n\n\n@strawberry.input\nclass Input(typing.Generic[T]):\n    field: T\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def field(self, input: Input[str]) -> str:\n        return input.field\n```\n\n----------------------------------------\n\nTITLE: Cursor-Based Pagination Initial Request\nDESCRIPTION: Initial request for cursor-based pagination with null cursor value.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/overview.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"limit\": 2,\n  \"cursor\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Apollo Federation 2.0 Schema Configuration\nDESCRIPTION: Example demonstrating how to enable Apollo Federation 2.0 support in a Strawberry GraphQL schema using the enable_federation_2 flag.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_92\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.federation.type(keys=[\"id\"])\nclass User:\n    id: strawberry.ID\n\n\n@strawberry.type\nclass Query:\n    user: User\n\n\nschema = strawberry.federation.Schema(query=Query, enable_federation_2=True)\n```\n\n----------------------------------------\n\nTITLE: Converting Between Pydantic and Strawberry Instances\nDESCRIPTION: This snippet demonstrates how to convert between Pydantic and Strawberry instances using the from_pydantic and to_pydantic methods.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/pydantic.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom typing import List, Optional\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str\n\n\n@strawberry.experimental.pydantic.type(model=User)\nclass UserType:\n    id: strawberry.auto\n    name: strawberry.auto\n\n\ninstance = User(id=\"123\", name=\"Jake\")\n\ndata = UserType.from_pydantic(instance)\n\n# Converting back to Pydantic\ninput_data = UserInput(id=\"abc\", name=\"Jake\")\n\n# this will run pydantic's validation\ninstance = input_data.to_pydantic()\n```\n\n----------------------------------------\n\nTITLE: Defining Fields with Default Values in Strawberry Types\nDESCRIPTION: This snippet demonstrates how to define fields with default values and default factories in Strawberry types using the strawberry.field decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_149\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Droid:\n    name: str = strawberry.field(default=\"R2D2\")\n    aka: List[str] = strawberry.field(default_factory=lambda: [\"Artoo\"])\n```\n\n----------------------------------------\n\nTITLE: Using Federation Schema Directives in Strawberry\nDESCRIPTION: Example showing how to use various Apollo Federation directives like Key, Tag, Shareable, and Inaccessible in Strawberry GraphQL schema definitions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.federation.schema_directives import Inaccessible, Shareable, Tag\n\n\n@strawberry.type(directives=[Key(fields=\"id\"), Tag(name=\"experimental\")])\nclass Book:\n    id: strawberry.ID\n\n\n@strawberry.type(directives=[Shareable()])\nclass CommonType:\n    foo: str\n    woops: bool = strawberry.field(directives=[Inaccessible()])\n```\n\n----------------------------------------\n\nTITLE: Configuring Django GraphQL View with JSON Parameters\nDESCRIPTION: Example showing how to configure Django GraphQL view with custom JSON encoder and parameters for JSON response formatting\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_119\n\nLANGUAGE: python\nCODE:\n```\nfrom json import JSONEncoder\n\nfrom django.urls import path\nfrom strawberry.django.views import AsyncGraphQLView\n\nfrom .schema import schema\n\n# Pass the JSON params to `.as_view`\nurlpatterns = [\n    path(\n        \"graphql\",\n        AsyncGraphQLView.as_view(\n            schema=schema,\n            json_encoder=JSONEncoder,\n            json_dumps_params={\"separators\": (\",\", \":\")},\n        ),\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Customizing Context in Sanic GraphQLView\nDESCRIPTION: Demonstrates how to extend the GraphQLView class to provide a custom context object for resolvers. It overrides the get_context method to return a custom dictionary.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/sanic.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.sanic.views import GraphQLView\nfrom strawberry.http.temporal_response import TemporalResponse\nfrom sanic.request import Request\n\n\nclass MyGraphQLView(GraphQLView):\n    async def get_context(self, request: Request, response: TemporalResponse):\n        return {\"example\": 1}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self, info: strawberry.Info) -> str:\n        return str(info.context[\"example\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing Parse Hook in Strawberry GraphQL Extension\nDESCRIPTION: Demonstrates how to implement the on_parse hook to run code during the parsing step of GraphQL execution.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/custom-extensions.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions import SchemaExtension\n\n\nclass MyExtension(SchemaExtension):\n    def on_parse(self):\n        print(\"GraphQL parsing start\")\n        yield\n        print(\"GraphQL parsing end\")\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation of relay.Node with NodeID (Python)\nDESCRIPTION: This example shows the correct way to implement a relay.Node type by annotating exactly one field with relay.NodeID, which allows the system to properly generate and resolve GlobalIDs.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/node-id-annotation.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry import relay\n\n\n@strawberry.type\nclass Fruit(relay.Node):\n    code: relay.NodeID[str]\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Types with Custom Names in Python\nDESCRIPTION: Demonstrates how to define generic types with custom names using Strawberry decorators.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_151\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type(name=\"AnotherName\")\nclass EdgeName:\n    node: str\n\n\n@strawberry.type\nclass Connection(Generic[T]):\n    edge: T\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Lists in Strawberry GraphQL Resolvers\nDESCRIPTION: This code shows how to define a GraphQL field that returns a nested list of floats. It demonstrates the use of typing annotations and the strawberry.field decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_146\n\nLANGUAGE: python\nCODE:\n```\ndef get_polygons() -> List[List[float]]:\n    return [[2.0, 6.0]]\n\n\n@strawberry.type\nclass Query:\n    polygons: List[List[float]] = strawberry.field(resolver=get_polygons)\n\n\nschema = strawberry.Schema(query=Query)\n\nquery = \"{ polygons }\"\n\nresult = schema.execute_sync(query, root_value=Query())\n```\n\n----------------------------------------\n\nTITLE: Creating a Specialized Generic Type with Class Inheritance\nDESCRIPTION: Shows how to create a specialized version of a generic type through class inheritance, creating a UserPage type that inherits from Page[User].\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/generics.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass User:\n    name: str\n\n\n@strawberry.type\nclass UserPage(Page[User]): ...\n\n\n@strawberry.type\nclass Query:\n    users: UserPage\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  users: UserPage!\n}\n\ntype User {\n  name: String!\n}\n\ntype UserPage {\n  number: Int!\n  items: [User!]!\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Decoding in Django GraphQL View\nDESCRIPTION: Example showing how to customize JSON decoding for GraphQL requests by overriding the decode_json method in GraphQLView. Uses orjson as an alternative JSON parser.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.django.views import GraphQLView\nfrom typing import Union\nimport orjson\n\n\nclass MyGraphQLView(GraphQLView):\n    def decode_json(self, data: Union[str, bytes]) -> object:\n        return orjson.loads(data)\n```\n\n----------------------------------------\n\nTITLE: Overriding Field Names in Schema Directives\nDESCRIPTION: Example showing how to override the name of a field in a schema directive using strawberry.directive_field. This allows defining fields with different names in Python versus the GraphQL schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema-directives.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.schema_directive(locations=[Location.OBJECT])\nclass Keys:\n    fields: str = strawberry.directive_field(name=\"as\")\n```\n\n----------------------------------------\n\nTITLE: Defining Strawberry Types with Generic Connections\nDESCRIPTION: This snippet demonstrates how to create Strawberry types using generics and unions. It shows a Connection type that can be used with different entity types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Generic, TypeVar, Union\nimport strawberry\n\nT = TypeVar(\"T\")\n\n\n@strawberry.type\nclass Connection(Generic[T]):\n    nodes: list[T]\n\n\n@strawberry.type\nclass Entity1:\n    id: int\n\n\n@strawberry.type\nclass Entity2:\n    id: int\n\n\n@strawberry.type\nclass Query:\n    entities: Connection[Union[Entity1, Entity2]]\n```\n\n----------------------------------------\n\nTITLE: Pagination Response with Metadata\nDESCRIPTION: Example showing how metadata can be included in pagination responses.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/overview.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"users\": [\n    ...\n  ],\n  \"metadata\": {\n    \"count\": 25\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation with @requires and @provides in Strawberry\nDESCRIPTION: Example of using Federation directives @requires to specify required fields for resolving other fields. The code demonstrates creating an extended Product type with a field that requires the 'code' field to resolve.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_139\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.federation.type(keys=[\"id\"], extend=True)\nclass Product:\n    id: strawberry.ID = strawberry.federation.field(external=True)\n    code: str = strawberry.federation.field(external=True)\n\n    @classmethod\n    def resolve_reference(cls, id: strawberry.ID, code: str):\n        return cls(id=id, code=code)\n\n    @strawberry.federation.field(requires=[\"code\"])\n    def my_code(self) -> str:\n        return self.code\n```\n\n----------------------------------------\n\nTITLE: Implementing PageInfo Type for Relay Connection Pagination\nDESCRIPTION: Definition of the PageInfo type class containing pagination metadata fields like hasNextPage, hasPreviousPage, startCursor and endCursor as specified by the Relay Connection specification.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/connections.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# example.py\n\nfrom typing import Generic, TypeVar\n\nimport strawberry\n\n\nGenericType = TypeVar(\"GenericType\")\n\n\n@strawberry.type\nclass Connection(Generic[GenericType]):\n    page_info: \"PageInfo\" = strawberry.field(\n        description=\"Information to aid in pagination.\"\n    )\n\n    edges: list[\"Edge[GenericType]\"] = strawberry.field(\n        description=\"A list of edges in this connection.\"\n    )\n\n\n@strawberry.type\nclass PageInfo:\n    has_next_page: bool = strawberry.field(\n        description=\"When paginating forwards, are there more items?\"\n    )\n\n    has_previous_page: bool = strawberry.field(\n        description=\"When paginating backwards, are there more items?\"\n    )\n\n    start_cursor: Optional[str] = strawberry.field(\n        description=\"When paginating backwards, the cursor to continue.\"\n    )\n\n    end_cursor: Optional[str] = strawberry.field(\n        description=\"When paginating forwards, the cursor to continue.\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Apollo Federation Support in Strawberry GraphQL\nDESCRIPTION: Shows how to implement Apollo Federation support in Strawberry GraphQL, including extending types and resolving references.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_171\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.federation.type(extend=True, keys=[\"id\"])\nclass Campaign:\n    id: strawberry.ID = strawberry.federation.field(external=True)\n\n    @strawberry.field\n    def title(self) -> str:\n        return f\"Title for {self.id}\"\n\n    @classmethod\n    def resolve_reference(cls, id):\n        return Campaign(id)\n\n\n@strawberry.federation.type(extend=True)\nclass Query:\n    @strawberry.field\n    def strawberry(self) -> str:\n        return \"🍓\"\n\n\nschema = strawberry.federation.Schema(query=Query, types=[Campaign])\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Decoding in GraphQL View\nDESCRIPTION: Shows how to implement custom JSON decoding for HTTP and WebSocket requests using orjson instead of the default json.loads\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.django.views import AsyncGraphQLView\nfrom typing import Union\nimport orjson\n\n\nclass MyGraphQLView(AsyncGraphQLView):\n    def decode_json(self, data: Union[str, bytes]) -> object:\n        return orjson.loads(data)\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Decoding in Sanic GraphQLView\nDESCRIPTION: Shows how to override the decode_json method in GraphQLView to use a custom JSON decoder. This example uses the orjson library for faster JSON parsing.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/sanic.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.sanic.views import GraphQLView\nfrom typing import Union\nimport orjson\n\n\nclass MyGraphQLView(GraphQLView):\n    def decode_json(self, data: Union[str, bytes]) -> object:\n        return orjson.loads(data)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unresolved Field Type Error in Python with Strawberry GraphQL\nDESCRIPTION: This code snippet shows an example that triggers the Unresolved Field Type Error in Strawberry GraphQL. It defines a Query type with a user field of type 'User', but the User type is not defined or imported.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/unresolved-field-type.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    user: \"User\"\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Using FastAPI APIRouter Arguments in GraphQLRouter (Python)\nDESCRIPTION: Demonstrates how to use FastAPI APIRouter arguments like tags, route_class, deprecated, and include_in_schema in GraphQLRouter for Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom fastapi import FastAPI\nfrom strawberry.fastapi import GraphQLRouter\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"Hello World\"\n\n\nschema = strawberry.Schema(Query)\n\ngraphql_app = GraphQLRouter(schema, tags=[\"graphql\"])\n\napp = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Unhandled Execution Error Example\nDESCRIPTION: Demonstrates how unhandled exceptions are caught and exposed in the GraphQL response.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/errors.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.type\nclass User:\n    name: str\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user() -> User:\n        raise Exception(\"Can't find user\")\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Pydantic Field Aliasing in Strawberry\nDESCRIPTION: Example showing how to add an alias to fields generated from pydantic using strawberry.field(name=)\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_96\n\nLANGUAGE: python\nCODE:\n```\nclass User(pydantic.BaseModel):\n    age: int\n\n@strawberry.experimental.pydantic.type(User)\nclass UserType:\n    age: strawberry.auto = strawberry.field(name=\"ageAlias\")\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL IDE Rendering in Django\nDESCRIPTION: Shows how to customize the rendering of the GraphQL IDE using a custom template\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.django.views import AsyncGraphQLView\nfrom django.http import HttpResponse\nfrom django.template.loader import render_to_string\n\n\nclass MyGraphQLView(AsyncGraphQLView):\n    async def render_graphql_ide(self, request: HttpRequest) -> HttpResponse:\n        content = render_to_string(\"myapp/my_graphql_ide_template.html\")\n\n        return HttpResponse(content)\n```\n\n----------------------------------------\n\nTITLE: Using Enums in Strawberry GraphQL Queries\nDESCRIPTION: Demonstrates how to use the defined enum in a GraphQL query type, returning a specific enum value.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/enums.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def best_flavour(self) -> IceCreamFlavour:\n        return IceCreamFlavour.STRAWBERRY\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Encoding in Sanic GraphQLView\nDESCRIPTION: Demonstrates how to override the encode_json method in GraphQLView to use a custom JSON encoder. This example adds indentation to the JSON output for better readability.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/sanic.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom strawberry.sanic.views import GraphQLView\n\n\nclass MyGraphQLView(GraphQLView):\n    def encode_json(self, data: object) -> str:\n        return json.dumps(data, indent=2)\n```\n\n----------------------------------------\n\nTITLE: Adding NoSchemaIntrospectionCustomRule from GraphQL-core (Python)\nDESCRIPTION: This example demonstrates how to add the pre-defined NoSchemaIntrospectionCustomRule from GraphQL-core to a Strawberry schema using the AddValidationRules extension.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/add-validation-rules.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import AddValidationRules\nfrom graphql.validation import NoSchemaIntrospectionCustomRule\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        AddValidationRules([NoSchemaIntrospectionCustomRule]),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Resolver Functions in Strawberry GraphQL\nDESCRIPTION: Example showing how to pass external resolver functions to Strawberry fields rather than defining them as methods.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_181\n\nLANGUAGE: python\nCODE:\n```\ndef resolver(root, info, par: str) -> str:\n    return f\"hello {par}\"\n\n\n@strawberry.type\nclass Query:\n    example: str = strawberry.field(resolver=resolver)\n```\n\n----------------------------------------\n\nTITLE: Customizing GraphQL View for Flask in Strawberry\nDESCRIPTION: Demonstrates how to create a custom GraphQLView class for Flask integration with Strawberry, including custom context and root value methods.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_166\n\nLANGUAGE: python\nCODE:\n```\n# views.py\nfrom strawberry.flask.views import GraphQLView as BaseGraphQLView\n\n\nclass GraphQLView(BaseGraphQLView):\n    def get_context(self, request):\n        return {\n            \"request\": request,\n            \"custom_context_value\": \"Hi!\",\n        }\n\n    def get_root_value(self, request):\n        return {\n            \"custom_root_value\": \"🍓\",\n        }\n\n\n# app.py\nfrom flask import Flask\n\nfrom .views import GraphQLView\nfrom .schema import schema\n\napp = Flask(__name__)\n\napp.add_url_rule(\n    \"/graphql\",\n    view_func=GraphQLView.as_view(\"graphql_view\", schema=schema),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining User Type in Strawberry GraphQL\nDESCRIPTION: Creates a User type class with name, occupation and age fields using Strawberry decorators. Includes a static method to create User instances from dictionary data.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/offset-based.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass User:\n    name: str = strawberry.field(description=\"The name of the user.\")\n    occupation: str = strawberry.field(description=\"The occupation of the user.\")\n    age: int = strawberry.field(description=\"The age of the user.\")\n\n    @staticmethod\n    def from_row(row: Dict[str, Any]):\n        return User(name=row[\"name\"], occupation=row[\"occupation\"], age=row[\"age\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Context with Response Parameter in Sanic GraphQL View\nDESCRIPTION: Example demonstrating the updated get_context function implementation that now accepts both request and response parameters. The response parameter enables setting cookies and headers in the context.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.146.0.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.sanic.views import GraphQLView\nfrom strawberry.sanic.context import StrawberrySanicContext\nfrom strawberry.http.temporal_response import TemporalResponse\nfrom sanic.request import Request\n\n\nclass MyGraphQLView(GraphQLView):\n    async def get_context(\n        self, request: Request, response: TemporalResponse\n    ) -> StrawberrySanicContext:\n        return {\"request\": request, \"response\": response}\n```\n\n----------------------------------------\n\nTITLE: Defining a Post Type with Lazy User Reference in Strawberry GraphQL\nDESCRIPTION: This snippet shows how to define a Post type that references a User type using strawberry.lazy to prevent circular imports. It uses TYPE_CHECKING for type safety and Annotated to specify the lazy loading path.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/lazy.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# posts.py\nfrom typing import TYPE_CHECKING, Annotated\n\nimport strawberry\n\nif TYPE_CHECKING:\n    from .users import User\n\n\n@strawberry.type\nclass Post:\n    title: str\n    author: Annotated[\"User\", strawberry.lazy(\".users\")]\n```\n\n----------------------------------------\n\nTITLE: FieldWithResolverAndDefaultFactoryError Example in Python\nDESCRIPTION: Demonstrates the error thrown when a field is defined with both resolver and default_factory arguments.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/exceptions.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    @strawberry.field(default_factory=lambda: \"Example C\")\n    def c(self) -> str:\n        return \"I'm a resolver\"\n```\n\n----------------------------------------\n\nTITLE: Custom Type Annotation Conversion in Strawberry GraphQL\nDESCRIPTION: Demonstrates converting Pydantic types to custom GraphQL scalar types, including handling union types and byte serialization. Uses a custom Base64 scalar type to properly serialize byte data and converts numeric IDs to strings.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/pydantic.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport base64\nimport strawberry\nfrom pydantic import BaseModel\nfrom typing import Union, NewType\n\n\nclass User(BaseModel):\n    id: Union[int, str]  # Not representable in GraphQL\n    hash: bytes\n\n\nBase64 = strawberry.scalar(\n    NewType(\"Base64\", bytes),\n    serialize=lambda v: base64.b64encode(v).decode(\"utf-8\"),\n    parse_value=lambda v: base64.b64decode(v.encode(\"utf-8\")),\n)\n\n\n@strawberry.experimental.pydantic.type(model=User)\nclass UserType:\n    id: str  # Serialize int values to strings\n    hash: Base64  # Use a custom scalar to serialize values\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def test() -> UserType:\n        return UserType.from_pydantic(User(id=123, hash=b\"abcd\"))\n\n\nschema = strawberry.Schema(query=Query)\n\nprint(schema.execute_sync(\"query { test { id, hash } }\").data)\n# {\"test\": {\"id\": \"123\", \"hash\": \"YWJjZA==\"}}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Relay Connection Resolver Implementation in Python\nDESCRIPTION: This code snippet demonstrates incorrect implementations of relay connection resolvers that would throw the 'Relay wrong resolver annotation error'. The resolvers return types that are not compatible with pagination.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/relay-wrong-resolver-annotation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\n\nimport strawberry\nfrom strawberry import relay\n\n\n@strawberry.type\nclass MyType(relay.Node): ...\n\n\n@strawberry.type\nclass Query:\n    @relay.connection(relay.Connection[MyType])\n    def some_connection_returning_mytype(self) -> MyType: ...\n\n    @relay.connection(relay.Connection[MyType])\n    def some_connection_returning_any(self) -> Any: ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Apollo Tracing in Strawberry GraphQL\nDESCRIPTION: Example of how to add Apollo tracing to a Strawberry GraphQL schema using the async ApolloTracingExtension. This enables tracing information to be added to responses for Apollo Engine.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/apollo-tracing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions.tracing import ApolloTracingExtension\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        ApolloTracingExtension,\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Error Implementation\nDESCRIPTION: Shows how type errors occur when returning None for a non-nullable field in Python.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/errors.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello() -> str:\n        return None\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Customizing Result Processing in Strawberry GraphQL Controller\nDESCRIPTION: This snippet demonstrates how to customize the processing of GraphQL execution results before sending them to clients. It overrides the process_result method to handle data and errors in the response.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/litestar.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.http import GraphQLHTTPResponse\nfrom strawberry.types import ExecutionResult\nfrom strawberry.litestar import make_graphql_controller\nfrom litestar import Request\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"world\"\n\n\nschema = strawberry.Schema(Query)\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n)\n\n\nclass MyGraphQLController(GraphQLController):\n    async def process_result(\n        self, request: Request, result: ExecutionResult\n    ) -> GraphQLHTTPResponse:\n        data: GraphQLHTTPResponse = {\"data\": result.data}\n\n        if result.errors:\n            data[\"errors\"] = [err.formatted for err in result.errors]\n\n        return data\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL IDE Rendering Implementation\nDESCRIPTION: Demonstrates how to customize the rendering of the GraphQL IDE interface by extending the GraphQLView class. Shows implementation of render_graphql_ide method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/quart.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.quart.views import GraphQLView\nfrom quart import Request, Response\n\n\nclass MyGraphQLView(GraphQLView):\n    async def render_graphql_ide(self, request: Request) -> Response:\n        custom_html = \"\"\"<html><body><h1>Custom GraphQL IDE</h1></body></html>\"\"\"\n\n        return Response(self.graphql_ide_html)\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Message Mutation with Strawberry and Channels\nDESCRIPTION: Python code for a GraphQL mutation that sends chat messages using Django Channels.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom channels.layers import get_channel_layer\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    async def send_chat_message(\n        self,\n        info: strawberry.Info,\n        room: ChatRoom,\n        message: str,\n    ) -> None:\n        channel_layer = get_channel_layer()\n\n        await channel_layer.group_send(\n            f\"chat_{room.room_name}\",\n            {\n                \"type\": \"chat.message\",\n                \"room_id\": f\"chat_{room.room_name}\",\n                \"message\": message,\n            },\n        )\n```\n\n----------------------------------------\n\nTITLE: Custom Result Processing Implementation\nDESCRIPTION: Demonstrates how to customize result processing before sending to clients by extending the GraphQLView class. Shows implementation of process_result method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/quart.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.quart.views import GraphQLView\nfrom strawberry.http import GraphQLHTTPResponse\nfrom strawberry.types import ExecutionResult\nfrom quart import Request\n\n\nclass MyGraphQLView(GraphQLView):\n    async def process_result(\n        self, request: Request, result: ExecutionResult\n    ) -> GraphQLHTTPResponse:\n        data: GraphQLHTTPResponse = {\"data\": result.data}\n\n        if result.errors:\n            data[\"errors\"] = [err.formatted for err in result.errors]\n\n        return data\n```\n\n----------------------------------------\n\nTITLE: Forward References in Strawberry GraphQL Types\nDESCRIPTION: Examples demonstrating support for forward references in Strawberry, including use with `from __future__ import annotations` and Annotated types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    foo: str | None\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom typing import Annotated\n\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    foo: Annotated[str, \"some annotation\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing resolve_reference with strawberry.Info in Federation\nDESCRIPTION: Demonstrates how to implement a resolve_reference classmethod using the new strawberry.Info object in Federation. Shows how to access the original GraphQL-core info object through the _raw_info attribute when needed.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.233.0.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.federation.type(keys=[\"upc\"])\nclass Product:\n    upc: str\n\n    @classmethod\n    def resolve_reference(cls, info: strawberry.Info, upc: str) -> \"Product\":\n        # Access the original info object\n        original_info = info._raw_info\n\n        return Product(upc=upc)\n```\n\n----------------------------------------\n\nTITLE: Implementing Apollo Tracing Extension in Strawberry GraphQL\nDESCRIPTION: Code snippet demonstrating how to enable Apollo tracing in a Strawberry GraphQL schema by adding the ApolloTracingExtension to the schema's extensions list.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/tracing.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions.tracing import ApolloTracingExtension\n\nschema = strawberry.Schema(query=Query, extensions=[ApolloTracingExtension])\n```\n\n----------------------------------------\n\nTITLE: File Upload Support in Strawberry with Django\nDESCRIPTION: Demonstrates how to implement file uploads in Strawberry GraphQL with Django, following the GraphQL multipart request specification.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_168\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.file_uploads import Upload\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def read_text(self, text_file: Upload) -> str:\n        return text_file.read().decode()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation Rule to Strawberry Schema (Python)\nDESCRIPTION: This snippet demonstrates how to create a custom validation rule and add it to a Strawberry GraphQL schema using the AddValidationRules extension.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/add-validation-rules.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import AddValidationRules\nfrom graphql import ValidationRule\n\n\nclass MyCustomRule(ValidationRule): ...\n\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        AddValidationRules(MyCustomRule),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Encoding in Strawberry ASGI\nDESCRIPTION: Example of customizing JSON encoding for HTTP and WebSocket responses by overriding the encode_json method to use custom formatting.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/asgi.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom strawberry.asgi import GraphQL\n\n\nclass MyGraphQLView(GraphQL):\n    def encode_json(self, data: object) -> str:\n        return json.dumps(data, indent=2)\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Encoding in GraphQL View\nDESCRIPTION: Demonstrates how to customize JSON encoding for HTTP and WebSocket responses with custom indentation\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom strawberry.django.views import AsyncGraphQLView\n\n\nclass MyGraphQLView(AsyncGraphQLView):\n    def encode_json(self, data: object) -> str:\n        return json.dumps(data, indent=2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pydantic Model with Strawberry Field Customization\nDESCRIPTION: Example demonstrating how to customize Pydantic fields with Strawberry decorators, including deprecation, permissions, and directives.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_109\n\nLANGUAGE: python\nCODE:\n```\nimport pydantic\nimport strawberry\n\n\nclass MyModel(pydantic.BaseModel):\n    age: int\n    name: str\n\n\n@strawberry.experimental.pydantic.type(MyModel)\nclass MyType:\n    age: strawberry.auto\n    name: strawberry.auto = strawberry.field(\n        deprecation_reason=\"Because\",\n        permission_classes=[MyPermission],\n        directives=[MyDirective],\n    )\n```\n\n----------------------------------------\n\nTITLE: Mock User Dataset\nDESCRIPTION: Defines sample user data for demonstration purposes with four users containing various properties.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/offset-based.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nuser_data = [\n    {\n        \"id\": 1,\n        \"name\": \"Norman Osborn\",\n        \"occupation\": \"Founder, Oscorp Industries\",\n        \"age\": 42,\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Peter Parker\",\n        \"occupation\": \"Freelance Photographer, The Daily Bugle\",\n        \"age\": 20,\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Harold Osborn\",\n        \"occupation\": \"President, Oscorp Industries\",\n        \"age\": 19,\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Eddie Brock\",\n        \"occupation\": \"Journalist, The Eddie Brock Report\",\n        \"age\": 20,\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Circular Dependencies with Lazy Loading in GraphQL Types\nDESCRIPTION: Example demonstrating how to handle circular dependencies between User and Post types using strawberry.lazy for type annotations.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_89\n\nLANGUAGE: python\nCODE:\n```\n# posts.py\nfrom typing import TYPE_CHECKING, Annotated\n\nimport strawberry\n\nif TYPE_CHECKING:\n    from .users import User\n\n\n@strawberry.type\nclass Post:\n    title: str\n    author: Annotated[\"User\", strawberry.lazy(\".users\")]\n```\n\nLANGUAGE: python\nCODE:\n```\n# users.py\nfrom typing import TYPE_CHECKING, Annotated, List\n\nimport strawberry\n\nif TYPE_CHECKING:\n    from .posts import Post\n\n\n@strawberry.type\nclass User:\n    name: str\n    posts: List[Annotated[\"Post\", strawberry.lazy(\".posts\")]]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Validation Error Example\nDESCRIPTION: Demonstrates how GraphQL validation errors are returned when querying an invalid field.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/errors.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  hi\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": null,\n  \"errors\": [\n    {\n      \"message\": \"Cannot query field 'hi' on type 'Query'.\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 3\n        }\n      ],\n      \"path\": null\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using GraphQLWebsocketCommunicator with Connection Parameters\nDESCRIPTION: Example of passing connection parameters to GraphQLWebsocketCommunicator for testing websocket authentication.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nGraphQLWebsocketCommunicator(\n    application=application,\n    path=\"/graphql\",\n    connection_params={\"token\": \"strawberry\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Strawberry GraphQL View to Django URLs\nDESCRIPTION: This Python code demonstrates how to add a Strawberry GraphQL view to a Django project's URL configuration, creating a GraphQL endpoint.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.django.views import GraphQLView\nfrom .schema import schema\n\nurlpatterns = [\n    ...,\n    path(\"graphql\", GraphQLView.as_view(schema=schema)),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Strawberry Error Type from Pydantic Model\nDESCRIPTION: This snippet demonstrates how to create a Strawberry GraphQL error type from a Pydantic model using the @strawberry.experimental.pydantic.error_type decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/pydantic.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, constr\nimport strawberry\n\n\nclass User(BaseModel):\n    id: int\n    name: constr(min_length=2)\n    signup_ts: Optional[datetime] = None\n    friends: List[int] = []\n\n\n@strawberry.experimental.pydantic.error_type(model=User)\nclass UserError:\n    id: strawberry.auto\n    name: strawberry.auto\n    friends: strawberry.auto\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Enum Type in Strawberry\nDESCRIPTION: Example showing how to define an enum type for ice cream flavors using Strawberry's enum decorator, along with the resulting GraphQL schema output.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_91\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.enum\nclass IceCreamFlavour(Enum):\n    VANILLA = strawberry.enum_value(\"vanilla\")\n    STRAWBERRY = strawberry.enum_value(\n        \"strawberry\",\n        description=\"Our favourite\",\n    )\n    CHOCOLATE = \"chocolate\"\n\n\n@strawberry.type\nclass Query:\n    favorite_ice_cream: IceCreamFlavour = IceCreamFlavour.STRAWBERRY\n\n\nschema = strawberry.Schema(query=Query)\n```\n\nLANGUAGE: graphql\nCODE:\n```\nenum IceCreamFlavour {\n  VANILLA\n\n  \"\"\"Our favourite.\"\"\"\n  STRAWBERRY\n  CHOCOLATE\n}\n\ntype Query {\n  favoriteIceCream: IceCreamFlavour!\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Strawberry Services for Federation\nDESCRIPTION: Commands to start the books and reviews services using Strawberry's built-in server on different ports.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd books\nstrawberry server --port 3500 app\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd reviews\nstrawberry server --port 3000 app\n```\n\n----------------------------------------\n\nTITLE: Using PermissionExtension in Strawberry GraphQL (Python)\nDESCRIPTION: Shows how to use the new PermissionExtension class for adding permissions to fields in Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.permission import PermissionExtension, BasePermission\n\n\nclass IsAuthorized(BasePermission):\n    message = \"User is not authorized\"\n    error_extensions = {\"code\": \"UNAUTHORIZED\"}\n\n    def has_permission(self, source, info, **kwargs) -> bool:\n        return False\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(extensions=[PermissionExtension(permissions=[IsAuthorized()])])\n    def name(self) -> str:\n        return \"ABC\"\n```\n\n----------------------------------------\n\nTITLE: Basic Interface Query Example\nDESCRIPTION: Sample GraphQL query demonstrating how to query interface fields.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/interfaces.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  customers {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Paginated Users\nDESCRIPTION: Sample GraphQL query that fetches the first two users with their details and pagination information including cursor and hasNextPage flag.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/connections.md#2025-04-21_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery getUsers {\n  getUsers(first: 2) {\n    edges {\n      node {\n        id\n        name\n        occupation\n        age\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync OpenTelemetry Extension\nDESCRIPTION: Setup for adding OpenTelemetry tracing to a synchronous Strawberry GraphQL schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/opentelemetry.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions.tracing import OpenTelemetryExtensionSync\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        OpenTelemetryExtensionSync,\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Selective Error Masking in Strawberry GraphQL\nDESCRIPTION: Example showing how to selectively mask errors by defining a custom predicate function. This allows certain exceptions (like VisibleError) to be shown to clients while masking others.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/mask-errors.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import MaskErrors\nfrom graphql.error import GraphQLError\n\n\nclass VisibleError(Exception):\n    pass\n\n\ndef should_mask_error(error: GraphQLError) -> bool:\n    original_error = error.original_error\n    if original_error and isinstance(original_error, VisibleError):\n        return False\n\n    return True\n\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        MaskErrors(should_mask_error=should_mask_error),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Context Implementation for GraphQL View\nDESCRIPTION: Demonstrates how to extend the GraphQLView to provide a custom context object for resolvers. Shows implementation of get_context method and its usage in a resolver.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/quart.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.quart.views import GraphQLView\nfrom quart import Request, Response\n\n\nclass MyGraphQLView(GraphQLView):\n    async def get_context(self, request: Request, response: Response):\n        return {\"example\": 1}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self, info: strawberry.Info) -> str:\n        return str(info.context[\"example\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Permission Class in Strawberry GraphQL Python\nDESCRIPTION: Demonstrates how to implement a custom permission class using BasePermission and how kwargs are now passed using Python's snake_case naming convention instead of camelCase. Shows usage with a Query type and permission_classes decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.217.0.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass IsAuthorized(BasePermission):\n    message = \"User is not authorized\"\n\n    def has_permission(\n        self, source, info, **kwargs: typing.Any\n    ) -> bool:  # pragma: no cover\n        # kwargs will have a key called \"a_key\"\n        # instead of `aKey`\n\n        return False\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(permission_classes=[IsAuthorized])\n    def name(self, a_key: str) -> str:  # pragma: no cover\n        return \"Erik\"\n```\n\n----------------------------------------\n\nTITLE: Using Static and Class Methods as Resolvers in Strawberry\nDESCRIPTION: Example demonstrating how to use staticmethod and classmethod as field resolvers in Strawberry GraphQL types. This pattern allows for more flexible resolver implementation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_124\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    @staticmethod\n    def static_text() -> str:\n        return \"Strawberry\"\n\n    @strawberry.field\n    @classmethod\n    def class_name(cls) -> str:\n        return cls.__name__\n```\n\n----------------------------------------\n\nTITLE: Renaming Fields in Strawberry GraphQL\nDESCRIPTION: Example showing how to rename fields in the GraphQL schema by using the name parameter in the field decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_182\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    example: str = strawberry.field(name=\"test\")\n```\n\n----------------------------------------\n\nTITLE: ValidationCache Class Definition in Strawberry GraphQL (Python)\nDESCRIPTION: This code defines the ValidationCache class. It allows setting the maxsize of the cache, which determines how many items can be stored before old entries are evicted.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/validation-cache.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ValidationCache(maxsize=None): ...\n```\n\n----------------------------------------\n\nTITLE: Optional Field Error Handling\nDESCRIPTION: Demonstrates handling expected errors by making fields optional.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/errors.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\nimport strawberry\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def get_user(self, id: str) -> Optional[User]:\n        try:\n            user = get_a_user_by_their_ID\n            return user\n        except UserDoesNotExist:\n            return None\n```\n\n----------------------------------------\n\nTITLE: Reusing Resolvers for Multiple Fields in Python\nDESCRIPTION: Demonstrates how to reuse the same resolver function for multiple fields in a Strawberry type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_155\n\nLANGUAGE: python\nCODE:\n```\ndef get_name(self) -> str:\n    return \"Name\"\n\n\n@strawberry.type\nclass Query:\n    name: str = strawberry.field(resolver=get_name)\n    name_2: str = strawberry.field(resolver=get_name)\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Decoding in Flask GraphQL View\nDESCRIPTION: Example of implementing custom JSON decoding using orjson library for GraphQL requests.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/flask.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.flask.views import GraphQLView\nfrom typing import Union\nimport orjson\n\n\nclass MyGraphQLView(GraphQLView):\n    def decode_json(self, data: Union[str, bytes]) -> object:\n        return orjson.loads(data)\n```\n\n----------------------------------------\n\nTITLE: Using Union Types in Strawberry Subscriptions\nDESCRIPTION: Example of using union types within async generators for Strawberry GraphQL subscriptions, allowing different types to be yielded from subscription resolvers.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass A:\n    a: str\n\n\n@strawberry.type\nclass B:\n    b: str\n\n\n@strawberry.type\nclass Query:\n    x: str = \"Hello\"\n\n\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def example_with_union(self) -> AsyncGenerator[Union[A, B], None]:\n        yield A(a=\"Hi\")\n```\n\n----------------------------------------\n\nTITLE: Resolving Unresolved Field Type Error by Importing User Type in Python\nDESCRIPTION: This code snippet demonstrates how to fix the Unresolved Field Type Error by importing the User type from another module. It defines a Query type with a user field of type 'User', and properly imports the User type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/unresolved-field-type.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom .user import User\n\n\n@strawberry.type\nclass Query:\n    user: \"User\"\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Persisted Query Extension Implementation\nDESCRIPTION: Implementation of a custom extension for handling persisted queries in Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_78\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions import Extension\n\ndef get_doc_id(request) -> str:\n    \"\"\"Implement this to get the document ID using your framework's request object\"\"\"\n    ...\n\ndef load_persisted_query(doc_id: str) -> str:\n    \"\"\"Implement this load a query by document ID. For example, from a database.\"\"\"\n    ...\n\nclass PersistedQuery(Extension):\n    def on_request_start(self):\n        request = self.execution_context.context.request\n\n        doc_id = get_doc_id(request)\n\n        self.execution_context.query = load_persisted_query(doc_id)\n```\n\n----------------------------------------\n\nTITLE: Querying with @include Directive in GraphQL\nDESCRIPTION: Example of using the @include directive in a GraphQL query to conditionally include a field based on a boolean variable.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/operation-directives.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery getPerson($includePoints: Boolean!) {\n  person {\n    name\n    points @include(if: $includePoints)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response from Federated Query\nDESCRIPTION: The JSON response from the federated GraphQL query showing books with their reviews, demonstrating successful data combination across services.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allBooks\": [\n      {\n        \"id\": \"1\",\n        \"reviewsCount\": 3,\n        \"reviews\": [\n          {\n            \"body\": \"A review for 1\"\n          },\n          {\n            \"body\": \"A review for 1\"\n          },\n          {\n            \"body\": \"A review for 1\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starlite Integration with Strawberry GraphQL\nDESCRIPTION: Example showing how to integrate Strawberry with the Starlite web framework, including setting up a GraphQL controller and custom context getter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_60\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom starlite import Request, Starlite\nfrom strawberry.starlite import make_graphql_controller\nfrom strawberry.types.info import Info\n\n\ndef custom_context_getter(request: Request):\n    return {\"custom\": \"context\"}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self, info: strawberry.Info[object, None]) -> str:\n        return info.context[\"custom\"]\n\n\nschema = strawberry.Schema(Query)\n\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n    context_getter=custom_context_getter,\n)\n\napp = Starlite(\n    route_handlers=[GraphQLController],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Query with Missing Type Annotation\nDESCRIPTION: Example showing a GraphQL query implementation that will trigger a type annotation error in Strawberry. The code demonstrates a common mistake of not providing return type annotations for resolvers.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello_world(self):\n        return \"Hello there!\"\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Litestar Integration with Strawberry GraphQL (Python)\nDESCRIPTION: Shows how to integrate Strawberry GraphQL with Litestar, including custom context getter and GraphQL controller setup.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom litestar import Request, Litestar\nfrom strawberry.litestar import make_graphql_controller\nfrom strawberry.types.info import Info\n\n\ndef custom_context_getter(request: Request):\n    return {\"custom\": \"context\"}\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self, info: strawberry.Info[object, None]) -> str:\n        return info.context[\"custom\"]\n\n\nschema = strawberry.Schema(Query)\n\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n    context_getter=custom_context_getter,\n)\n\napp = Litestar(\n    route_handlers=[GraphQLController],\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing GraphQL IDE Rendering in Strawberry Channels\nDESCRIPTION: Shows how to override the render_graphql_ide method in the GraphQLHTTPConsumer class to provide a custom HTML interface for the GraphQL IDE.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.channels import GraphQLHTTPConsumer, ChannelsRequest, ChannelsResponse\n\n\nclass MyGraphQLHTTPConsumer(GraphQLHTTPConsumer):\n    async def render_graphql_ide(self, request: ChannelsRequest) -> ChannelsResponse:\n        custom_html = \"\"\"<html><body><h1>Custom GraphQL IDE</h1></body></html>\"\"\"\n\n        return ChannelsResponse(content=custom_html, content_type=\"text/html\")\n```\n\n----------------------------------------\n\nTITLE: Adding Parser Cache Extension to a Strawberry Schema\nDESCRIPTION: Basic example showing how to add the ParserCache extension to a Strawberry GraphQL schema to enable query parsing caching.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/parser-cache.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import ParserCache\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        ParserCache(),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Apollo Tracing Extension in Strawberry GraphQL\nDESCRIPTION: Code snippet showing how to use the synchronous version of Apollo tracing extension for non-ASGI environments in Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/tracing.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions.tracing import ApolloTracingExtensionSync\n\nschema = strawberry.Schema(query=Query, extensions=[ApolloTracingExtensionSync])\n```\n\n----------------------------------------\n\nTITLE: Testing File Uploads with GraphQLTestClient in Strawberry\nDESCRIPTION: Example showing how to test file upload mutations using GraphQLTestClient in Strawberry. This demonstrates handling file uploads with the multipart request format.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_123\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.files.uploadedfile import SimpleUploadedFile\n\n\ndef test_upload(graphql_client):\n    f = SimpleUploadedFile(\"file.txt\", b\"strawberry\")\n    query = \"\"\"\n        mutation($textFile: Upload!) {\n            readText(textFile: $textFile)\n        }\n    \"\"\"\n\n    response = graphql_client.query(\n        query=query,\n        variables={\"textFile\": None},\n        files={\"textFile\": f},\n    )\n\n    assert response.data[\"readText\"] == \"strawberry\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Root Value in Sanic GraphQLView\nDESCRIPTION: Shows how to override the get_root_value method in GraphQLView to provide a custom root value for the schema. This example sets a predefined name for the Query type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/sanic.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.sanic.views import GraphQLView\nfrom sanic.request import Request\n\n\nclass MyGraphQLView(GraphQLView):\n    async def get_root_value(self, request: Request):\n        return Query(name=\"Patrick\")\n\n\n@strawberry.type\nclass Query:\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Configuring PyInstrument Extension for Performance Profiling in Strawberry\nDESCRIPTION: Shows how to set up the PyInstrument extension for profiling and identifying slow code paths in a Strawberry GraphQL server. The extension generates an HTML report with performance metrics.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import pyinstrument\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        pyinstrument.PyInstrument(report_path=\"pyinstrument.html\"),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Encoding Implementation\nDESCRIPTION: Shows how to customize JSON encoding for HTTP and WebSocket responses by extending the GraphQLView class. Demonstrates adding indentation to JSON output.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/quart.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom strawberry.quart.views import GraphQLView\n\n\nclass MyGraphQLView(GraphQLView):\n    def encode_json(self, data: object) -> str:\n        return json.dumps(data, indent=2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Results for Relay Connections in Strawberry GraphQL\nDESCRIPTION: Example showing how to override the maximum number of results a relay connection can return on a per-field basis. This allows for setting different limits for different connection fields rather than using a single global configuration.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@strawerry.type\nclass Query:\n    # This will still use the default value in the schema's config\n    fruits: ListConnection[Fruit] = relay.connection()\n\n    # This will reduce the maximum number of results to 10\n    limited_fruits: ListConnection[Fruit] = relay.connection(max_results=10)\n\n    # This will increase the maximum number of results to 10\n    higher_limited_fruits: ListConnection[Fruit] = relay.connection(max_results=10_000)\n```\n\n----------------------------------------\n\nTITLE: Setting Max Results for Relay Connections\nDESCRIPTION: Example showing how to configure a maximum number of results for a connection field by providing the max_results parameter to the connection decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/relay.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@strawerry.type\nclass Query:\n    fruits: ListConnection[Fruit] = relay.connection(max_results=10_000)\n```\n\n----------------------------------------\n\nTITLE: Console Plugin Interface\nDESCRIPTION: Interface definition for the console plugin that manages codegen process notifications and user feedback.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/codegen/query-codegen.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass ConsolePlugin:\n    def __init__(self, output_dir: Path):\n        \"\"\"Initialize the plugin and tell it where the output should be written.\"\"\"\n        ...\n\n    def before_any_start(self) -> None:\n        \"\"\"This method is called before any plugins have been invoked or any queries have been processed.\"\"\"\n        ...\n\n    def after_all_finished(self) -> None:\n        \"\"\"This method is called after the full code generation is complete.\n\n        It can be used to report on all the things that have happened during the codegen.\n        \"\"\"\n        ...\n\n    def on_start(self, plugins: Iterable[QueryCodegenPlugin], query: Path) -> None:\n        \"\"\"This method is called before any of the individual plugins have been started.\"\"\"\n        ...\n\n    def on_end(self, result: CodegenResult) -> None:\n        \"\"\"This method typically persists the results from a single query to the output directory.\"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining the create_type function signature in Strawberry GraphQL\nDESCRIPTION: Function signature for create_type, which allows creating a Strawberry type from a list of fields. It accepts parameters for name, fields, type characteristics, description, directives, and extension options.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/tools.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef create_type(\n    name: str,\n    fields: List[StrawberryField],\n    is_input: bool = False,\n    is_interface: bool = False,\n    description: Optional[str] = None,\n    directives: Optional[Sequence[object]] = (),\n    extend: bool = False,\n) -> Type: ...\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query\nDESCRIPTION: Sample GraphQL query demonstrating pagination and filtering of users.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/offset-based.md#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  users(orderBy: \"name\", offset: 0, limit: 2, occupation: \"ie\") {\n    items {\n      name\n      age\n      occupation\n    }\n    totalItemsCount\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Info Class in Strawberry Schema\nDESCRIPTION: This example demonstrates how to configure a Strawberry schema with a custom Info class. It includes a custom Info class implementation that provides access to a selected group ID from request headers.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.schema.config import StrawberryConfig\n\nfrom .models import ProductModel\n\n\nclass CustomInfo(strawberry.Info):\n    @property\n    def selected_group_id(self) -> int | None:\n        \"\"\"Get the ID of the group you're logged in as.\"\"\"\n        return self.context[\"request\"].headers.get(\"Group-ID\")\n\n\n@strawberry.type\nclass Group:\n    id: strawberry.ID\n    name: str\n\n\n@strawberry.type\nclass User:\n    id: strawberry.ID\n    name: str\n    group: Group\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self, id: strawberry.ID, info: CustomInfo) -> Product:\n        kwargs = {\"id\": id, \"name\": ...}\n\n        if info.selected_group_id is not None:\n            # Get information about the group you're a part of, if\n            # available.\n            kwargs[\"group\"] = ...\n\n        return User(**kwargs)\n\n\nschema = strawberry.Schema(\n    Query,\n    config=StrawberryConfig(info_class=CustomInfo),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous OpenTelemetry Tracing Extension in Strawberry GraphQL\nDESCRIPTION: Code snippet showing how to use the synchronous version of OpenTelemetry tracing extension for non-ASGI environments in Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/tracing.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions.tracing import OpenTelemetryExtensionSync\n\nschema = strawberry.Schema(query=Query, extensions=[OpenTelemetryExtensionSync])\n```\n\n----------------------------------------\n\nTITLE: Custom Tracer Provider Implementation\nDESCRIPTION: Example demonstrating how to implement and use a custom TracerProvider with the OpenTelemetry extension.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/opentelemetry.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom opentelemetry.trace import TracerProvider\nfrom strawberry.extensions.tracing import OpenTelemetryExtension\n\n\nclass MyTracerProvider(TracerProvider):\n    def get_tracer(self, name, version=None, schema_url=None):\n        return super().get_tracer(name, version, schema_url)\n\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        OpenTelemetryExtension(\n            tracer_provider=MyTracerProvider(),\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Directive Location in Strawberry GraphQL\nDESCRIPTION: Example of specifying the location for a directive in Strawberry GraphQL using the locations parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/operation-directives.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n@strawberry.directive(locations=[DirectiveLocation.FIELD])\n```\n\n----------------------------------------\n\nTITLE: Using UNSET as Default Value for Optional Arguments\nDESCRIPTION: Shows how to use UNSET as a default value for optional arguments in Strawberry fields.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_156\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.arguments import UNSET, is_unset\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self, name: Optional[str] = UNSET) -> str:\n        if is_unset(name):\n            return \"Hi there\"\n        return \"Hi {name}\"\n\n\nschema = strawberry.Schema(query=Query)\n\nresult = schema.execute_async(\"{ hello }\")\nassert result.data == {\"hello\": \"Hi there\"}\n\nresult = schema.execute_async('{ hello(name: \"Patrick\" }')\nassert result.data == {\"hello\": \"Hi Patrick\"}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Query Example\nDESCRIPTION: Example GraphQL document for executing the addBook mutation with title and author parameters. The query requests only the title field in the response.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/mutations.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nmutation {\n  addBook(title: \"The Little Prince\", author: \"Antoine de Saint-Exupéry\") {\n    title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Type Definitions in Strawberry GraphQL (Python)\nDESCRIPTION: Demonstrates how to define generic types and edges in Strawberry GraphQL using type annotations and lazy loading.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_75\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated, Generic, TypeVar\n\nimport strawberry\n\nT = TypeVar(\"T\")\n\n@strawberry.type\nclass Item:\n    name: str\n\n@strawberry.type\nclass Edge(Generic[T]):\n    node: T\n\n@strawberry.type\nclass Query:\n    edges_normal: Edge[Item]\n    edges_lazy: Edge[Annotated[\"Item\", strawberry.lazy(\"issue_2397\")]]\n\nif __name__ == \"__main__\":\n    schema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Hook in Strawberry GraphQL Extension\nDESCRIPTION: Shows how to implement the on_validate hook to run code during the validation step of GraphQL execution.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/custom-extensions.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions import SchemaExtension\n\n\nclass MyExtension(SchemaExtension):\n    def on_validate(self):\n        print(\"GraphQL validation start\")\n        yield\n        print(\"GraphQL validation end\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Directive with Composition (Python)\nDESCRIPTION: Demonstrates how to create a schema directive that can be composed in Apollo Federation 2.x using the @composeDirective feature.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_67\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.federation.schema_directive(\n    locations=[Location.OBJECT], name=\"cacheControl\", compose=True\n)\nclass CacheControl:\n    max_age: int\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Source Function\nDESCRIPTION: Function to return sample book data using the defined Book class.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_books():\n    return [\n        Book(\n            title=\"The Great Gatsby\",\n            author=\"F. Scott Fitzgerald\",\n        ),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Serial Execution of Nested Mutations with Aliases\nDESCRIPTION: GraphQL example showing how to use aliases to ensure serial execution of nested mutations, guaranteeing that updateFruitWeight only begins after addFruit completes.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/mutations.md#2025-04-21_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nmutation (\n  $addFruitInput: AddFruitInput!\n  $updateFruitWeightInput: UpdateFruitWeightInput!\n) {\n  addFruit: fruit {\n    add(input: $addFruitInput) {\n      id\n    }\n  }\n\n  updateFruitWeight: fruit {\n    updateWeight(input: $updateFruitWeightInput) {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Field Descriptions to Input Types in Strawberry GraphQL\nDESCRIPTION: Enhanced input type definition with field descriptions that will be exposed in GraphQL documentation. This improves schema documentation for GraphQL-enabled tools.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.input\nclass AddBookInput:\n    title: str = strawberry.field(description=\"The title of the book\")\n    author: str = strawberry.field(description=\"The name of the author\")\n```\n\n----------------------------------------\n\nTITLE: Initializing QueryDepthLimiter Extension in Strawberry GraphQL Schema\nDESCRIPTION: This snippet shows how to add the QueryDepthLimiter extension to a Strawberry GraphQL schema. It sets a maximum depth of 10 for any operation in the GraphQL document.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/query-depth-limiter.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import QueryDepthLimiter\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        QueryDepthLimiter(max_depth=10),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Extension Usage in Strawberry GraphQL\nDESCRIPTION: Shows how to import and apply a custom extension to a Strawberry Schema. The extension is added to the schema's extensions list when initializing the schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/_template.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import ExtensionName\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        ExtensionName(),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Valid Union with Wrapper Type in Strawberry GraphQL (Python)\nDESCRIPTION: This code example shows the correct approach to handle scalar types in unions by creating a wrapper type. It creates a wrapper class (IntWrapper) for the int scalar and uses it in the union definition instead of using the scalar directly.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/invalid-union-type.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom typing import Union, Annotated\n\n\n@strawberry.type\nclass Example:\n    name: str\n\n\n@strawberry.type\nclass IntWrapper:\n    value: int\n\n\nExampleUnion = Annotated[Union[Example, IntWrapper], strawberry.union(\"ExampleUnion\")]\n\n\n@strawberry.type\nclass Query:\n    field: ExampleUnion\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Generic Type Usage in Strawberry GraphQL\nDESCRIPTION: Example showing how to use lazy type with generics in a Query type\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_80\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    regular: Edge[User]\n    lazy: Edge[Annotated[\"User\", strawberry.lazy(\".user\")]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Strawberry Schema to Disable Field Suggestions\nDESCRIPTION: Shows how to create a Strawberry Schema with field suggestions disabled in the error response. This example defines a Query type and configures the schema to not suggest similar field names when an error occurs.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    name: str\n\n\nschema = strawberry.Schema(\n    query=Query, config=StrawberryConfig(disable_field_suggestions=True)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous Datadog Tracing Extension in Strawberry GraphQL\nDESCRIPTION: Code snippet showing how to use the synchronous version of Datadog tracing extension for non-ASGI environments in Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/tracing.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions.tracing import DatadogTracingExtensionSync\n\nschema = strawberry.Schema(query=Query, extensions=[DatadogTracingExtensionSync])\n```\n\n----------------------------------------\n\nTITLE: Synchronous Schema Execution Method in Strawberry GraphQL\nDESCRIPTION: API reference for the synchronous execute_sync method in Strawberry GraphQL schema, used to execute GraphQL operations against a schema without async.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef execute_sync(query, variable_values, context_value, root_value, operation_name): ...\n```\n\n----------------------------------------\n\nTITLE: MaxAliasesLimiter API Reference\nDESCRIPTION: The class definition for MaxAliasesLimiter which takes a max_alias_count parameter to specify the maximum allowed number of aliases in a GraphQL document.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/max-aliases-limiter.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MaxAliasesLimiter(max_alias_count): ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Correct Relay Connection Annotations in Strawberry GraphQL\nDESCRIPTION: This code snippet demonstrates how to properly annotate relay connections in Strawberry. It shows the correct usage of relay.Connection[MyType] for field annotations and how to properly use the relay.connection decorator with explicit connection types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/relay-wrong-annotation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nimport strawberry\nfrom strawberry import relay\n\n\n@strawberry.type\nclass MyType(relay.Node): ...\n\n\ndef get_my_type_list() -> List[MyType]: ...\n\n\n@strawberry.type\nclass Query:\n    my_type_conn: relay.Connection[MyType] = relay.connection(\n        resolver=get_my_type_list,\n    )\n\n    # Missing the Connection class annotation\n    @relay.connection(relay.Connection[MyType])\n    def my_type_conn_with_resolver(self) -> List[MyType]: ...\n\n    # The connection class is not a subclass of relay.Connection\n    @relay.connection(relay.Connection[MyType])\n    def my_type_conn_with_resolver2(self) -> List[MyType]: ...\n```\n\n----------------------------------------\n\nTITLE: Handling Constrained Types in Strawberry\nDESCRIPTION: This snippet shows how to handle Pydantic constrained types in Strawberry, emphasizing the importance of validation on the Pydantic side.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/pydantic.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel, conlist\nimport strawberry\n\n\nclass Example(BaseModel):\n    friends: conlist(str, min_items=1)\n\n\n@strawberry.experimental.pydantic.input(model=Example, all_fields=True)\nclass ExampleGQL: ...\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field()\n    def test(self, example: ExampleGQL) -> None:\n        # friends may be an empty list here\n        print(example.friends)\n        # calling to_pydantic() runs the validation and raises\n        # an error if friends is empty\n        print(example.to_pydantic().friends)\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Using Union Types in Strawberry GraphQL Mutations\nDESCRIPTION: Example demonstrating how to use Union types in GraphQL mutations with Strawberry. The mutation returns either type A or type B based on business logic.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_177\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass A:\n    x: int\n\n\n@strawberry.type\nclass B:\n    y: int\n\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def hello(self, info) -> Union[A, B]:\n        return B(y=5)\n\n\nschema = strawberry.Schema(query=A, mutation=Mutation)\n\nquery = \"\"\"\nmutation {\n    hello {\n        __typename\n\n        ... on A {\n            x\n        }\n\n        ... on B {\n            y\n        }\n    }\n}\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using InitVar with Strawberry GraphQL Types\nDESCRIPTION: Example demonstrating how to use InitVar to exclude fields from the GraphQL schema in Strawberry types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_180\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Category:\n    name: str\n    id: InitVar[str]\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def category(self, info) -> Category:\n        return Category(name=\"example\", id=\"123\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Operation Logging in Strawberry Server\nDESCRIPTION: Command to start Strawberry's built-in server with operation logging disabled. This can be useful when prototyping to reduce noise in the console output.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/server.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstrawberry server package.module:schema --log-operations False\n```\n\n----------------------------------------\n\nTITLE: Using Named Union Types in Strawberry GraphQL\nDESCRIPTION: Shows how to create and use named union types in Strawberry GraphQL, including optional union types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_169\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass A:\n    a: int\n\n\n@strawberry.type\nclass B:\n    b: int\n\n\nResult = strawberry.union(\"Result\", (A, B))\n\n\n@strawberry.type\nclass Query:\n    ab: Optional[Result] = None\n```\n\n----------------------------------------\n\nTITLE: Ignoring Fields by Name in QueryDepthLimiter for Strawberry GraphQL\nDESCRIPTION: This example demonstrates how to use the should_ignore parameter to ignore specific fields based on their name. It shows a schema definition and two query executions, one that fails due to depth and another that succeeds because the 'user' field is ignored.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/query-depth-limiter.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import QueryDepthLimiter\n\n\ndef should_ignore(ignore: IgnoreContext):\n    return ignore.field_name == \"user\"\n\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        QueryDepthLimiter(max_depth=2, should_ignore=should_ignore),\n    ],\n)\n\n# This query fails\nschema.execute(\n    \"\"\"\n  query TooDeep {\n    book {\n      author {\n        publishedBooks {\n          title\n        }\n      }\n    }\n  }\n\"\"\"\n)\n\n# This query succeeds because the `user` field is ignored\nschema.execute(\n    \"\"\"\n  query NotTooDeep {\n    user {\n      favouriteBooks {\n        author {\n          publishedBooks {\n            title\n          }\n        }\n      }\n    }\n  }\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Input Type with Deprecated Fields\nDESCRIPTION: Shows how to deprecate fields in an input type using the deprecation_reason argument.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/input-types.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.input\nclass Point2D:\n    x: float\n    y: float\n    z: Optional[float] = strawberry.field(\n        deprecation_reason=\"3D coordinates are deprecated\"\n    )\n    label: Optional[str] = strawberry.UNSET\n```\n\nLANGUAGE: graphql\nCODE:\n```\ninput Point2D {\n  x: Float!\n  y: Float!\n  z: Float @deprecated(reason: \"3D coordinates are deprecated\")\n  label: String\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Field Annotation Error in Strawberry GraphQL\nDESCRIPTION: This code snippet demonstrates how to fix the missing field annotation error by properly adding a type annotation to the field. The 'age' field now has an 'int' type annotation along with the strawberry.field definition.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/missing-field-annotation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    name: str\n    age: int = strawberry.field(name=\"ageInYears\")\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Filtering Fields in Strawberry GraphQL Schema\nDESCRIPTION: Example of customizing exposed fields in a GraphQL schema by subclassing Schema and overriding the get_fields method. This implementation filters out fields tagged as 'internal'.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass User:\n    name: str\n    email: str = strawberry.field(metadata={\"tags\": [\"internal\"]})\n\n\n@strawberry.type\nclass Query:\n    user: User\n\n\ndef public_field_filter(field: StrawberryField) -> bool:\n    return \"internal\" not in field.metadata.get(\"tags\", [])\n\n\nclass PublicSchema(strawberry.Schema):\n    def get_fields(\n        self, type_definition: StrawberryObjectDefinition\n    ) -> List[StrawberryField]:\n        return list(filter(public_field_filter, type_definition.fields))\n\n\nschema = PublicSchema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Initializing PyInstrument Extension with Strawberry Schema\nDESCRIPTION: Example showing how to integrate the PyInstrument extension when creating a Strawberry GraphQL schema. The extension is configured to output profiling results to a specified HTML file.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/pyinstrument.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import pyinstrument\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        pyinstrument.PyInstrument(report_path=\"pyinstrument.html\"),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Querying with @skip Directive in GraphQL\nDESCRIPTION: Example of using the @skip directive in a GraphQL query to conditionally skip a field based on a boolean variable.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/operation-directives.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery getPerson($hideName: Boolean!) {\n  person {\n    name @skip(if: $hideName)\n    points\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Request Adapter for Custom View in Python\nDESCRIPTION: This snippet demonstrates how to specify a custom request adapter for a view by setting the request_adapter_class attribute.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/creating-an-integration.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyView(\n    AsyncBaseHTTPView[\n        MyRequest,\n        MyResponse,\n        TemporalResponse,\n        Context,\n        RootValue,\n    ]\n):\n    request_adapter_class = MyRequestAdapter\n```\n\n----------------------------------------\n\nTITLE: Using UNSET in Strawberry GraphQL\nDESCRIPTION: This code demonstrates the usage of UNSET in Strawberry GraphQL, including the new location of UNSET and the recommended way to check for unset values using the 'is' operator instead of the deprecated 'is_unset' function.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_106\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry import UNSET\nfrom strawberry.arguments import is_unset  # old\n\na = UNSET\n\nassert a is UNSET  # new\nassert is_unset(a)  # old\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Protocols in ASGI with Strawberry\nDESCRIPTION: Demonstrates configuration of GraphQL WebSocket protocols in an ASGI application using Strawberry's GraphQL class with both transport protocols enabled.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/subscriptions.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.asgi import GraphQL\nfrom strawberry.subscriptions import GRAPHQL_TRANSPORT_WS_PROTOCOL, GRAPHQL_WS_PROTOCOL\nfrom api.schema import schema\n\n\napp = GraphQL(\n    schema,\n    subscription_protocols=[\n        GRAPHQL_TRANSPORT_WS_PROTOCOL,\n        GRAPHQL_WS_PROTOCOL,\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Using typing_extensions.Annotated for Python <3.9 in Strawberry GraphQL\nDESCRIPTION: This snippet shows how to use the typing_extensions.Annotated module for projects using Python versions older than 3.9, while still implementing lazy loading for circular references.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/lazy.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# users.py\nfrom typing import TYPE_CHECKING, List\nfrom typing_extensions import Annotated\n\nimport strawberry\n\nif TYPE_CHECKING:\n    from .posts import Post\n\n\n@strawberry.type\nclass User:\n    name: str\n    posts: List[Annotated[\"Post\", strawberry.lazy(\".posts\")]]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Info Parameter Type Annotations\nDESCRIPTION: Example showing how to use type annotations for info and value parameters in resolvers and directives\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_98\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.types import Info\n\ndef some_resolver(info: strawberry.Info) -> str:\n    return info.context.get(\"some_key\", \"default\")\n\n@strawberry.type\nclass Example:\n    a_field: str = strawberry.resolver(some_resolver)\n```\n\n----------------------------------------\n\nTITLE: Defining In-Memory User Dataset and Cursor Encoding/Decoding Functions\nDESCRIPTION: Python code defining an in-memory user dataset and helper functions for encoding and decoding user cursors using base64.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/cursor-based.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# example.py\n\nfrom base64 import b64encode, b64decode\nfrom typing import List, Optional, Dict, Any, cast\n\nimport strawberry\n\nuser_data = [\n    {\n        \"id\": 1,\n        \"name\": \"Norman Osborn\",\n        \"occupation\": \"Founder, Oscorp Industries\",\n        \"age\": 42,\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Peter Parker\",\n        \"occupation\": \"Freelance Photographer, The Daily Bugle\",\n        \"age\": 20,\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Harold Osborn\",\n        \"occupation\": \"President, Oscorp Industries\",\n        \"age\": 19,\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Eddie Brock\",\n        \"occupation\": \"Journalist, The Eddie Brock Report\",\n        \"age\": 20,\n    },\n]\n\n\ndef encode_user_cursor(id: int) -> str:\n    \"\"\"\n    Encodes the given user ID into a cursor.\n\n    :param id: The user ID to encode.\n\n    :return: The encoded cursor.\n    \"\"\"\n    return b64encode(f\"user:{id}\".encode(\"ascii\")).decode(\"ascii\")\n\n\ndef decode_user_cursor(cursor: str) -> int:\n    \"\"\"\n    Decodes the user ID from the given cursor.\n\n    :param cursor: The cursor to decode.\n\n    :return: The decoded user ID.\n    \"\"\"\n    cursor_data = b64decode(cursor.encode(\"ascii\")).decode(\"ascii\")\n    return int(cursor_data.split(\":\")[1])\n\n\n@strawberry.type\nclass User:\n    id: str = strawberry.field(description=\"ID of the user.\")\n    name: str = strawberry.field(description=\"The name of the user.\")\n    occupation: str = strawberry.field(description=\"The occupation of the user.\")\n    age: int = strawberry.field(description=\"The age of the user.\")\n\n    @staticmethod\n    def from_row(row: Dict[str, Any]) -> \"User\":\n        return User(\n            id=row[\"id\"], name=row[\"name\"], occupation=row[\"occupation\"], age=row[\"age\"]\n        )\n\n\n@strawberry.type\nclass PageMeta:\n    next_cursor: Optional[str] = strawberry.field(\n        description=\"The next cursor to continue with.\"\n    )\n\n\n@strawberry.type\nclass UserResponse:\n    users: List[User] = strawberry.field(description=\"The list of users.\")\n    page_meta: PageMeta = strawberry.field(description=\"Metadata to aid in pagination.\")\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(description=\"Get a list of users.\")\n    def get_users(self) -> UserResponse: ...\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Defining Generic GraphQL Types with Strawberry\nDESCRIPTION: Example of defining generic GraphQL types using Strawberry, including nested generics and custom type names.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_116\n\nLANGUAGE: python\nCODE:\n```\nT = TypeVar(\"T\")\nK = TypeVar(\"K\")\nV = TypeVar(\"V\")\n\n\n@strawberry.type\nclass Value(Generic[T]):\n    value: T\n\n\n@strawberry.type\nclass DictItem(Generic[K, V]):\n    key: K\n    value: V\n\n\n@strawberry.type\nclass Query:\n    d: Value[List[DictItem[int, str]]]\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype IntStrDictItem {\n  key: Int!\n  value: String!\n}\n\ntype IntStrDictItemListValue {\n  value: [IntStrDictItem!]!\n}\n\ntype Query {\n  d: IntStrDictItemListValue!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relay Max Results in Strawberry\nDESCRIPTION: Demonstrates how to set a custom maximum limit for relay connections. This example changes the default limit of 100 to 50.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema-configurations.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nschema = strawberry.Schema(query=Query, config=StrawberryConfig(relay_max_results=50))\n```\n\n----------------------------------------\n\nTITLE: Testing Different Parameter States in GraphQL Queries\nDESCRIPTION: Demonstrates querying with different parameter states (unset, null, and provided) and the corresponding JSON responses. Shows how Strawberry handles these different input scenarios.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/resolvers.md#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  unset: greet\n  null: greet(name: null)\n  name: greet(name: \"Dominique\")\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"unset\": \"Name was not set!\",\n    \"null\": \"Name was null!\",\n    \"name\": \"Hello Dominique!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL IDE rendering in Chalice\nDESCRIPTION: Example of customizing the GraphQL IDE HTML interface by overriding the render_graphql_ide method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/chalice.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.chalice.views import GraphQLView\nfrom chalice.app import Request, Response\n\n\nclass MyGraphQLView(GraphQLView):\n    def render_graphql_ide(self, request: Request) -> Response:\n        custom_html = \"\"\"<html><body><h1>Custom GraphQL IDE</h1></body></html>\"\"\"\n\n        return Response(custom_html, headers={\"Content-Type\": \"text/html\"})\n```\n\n----------------------------------------\n\nTITLE: Entity with Default Reference Resolution\nDESCRIPTION: Shows an entity implementation that relies on Strawberry's default reference resolution behavior with a computed field.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/federation/entities.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.federation.type(keys=[\"id\"])\nclass Book:\n    id: strawberry.ID\n    reviews_count: int = strawberry.field(resolver=lambda: 3)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Relay Connection Annotations in Strawberry GraphQL\nDESCRIPTION: This code snippet shows three common mistakes when working with relay connections: using List[MyType] instead of relay.Connection, missing the Connection class annotation with the relay.connection decorator, and using an incorrect connection class type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/relay-wrong-annotation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import List\n\nimport strawberry\nfrom strawberry import relay\n\n\n@strawberry.type\nclass MyType(relay.Node): ...\n\n\n@strawberry.type\nclass Query:\n    # The annotation is not a subclass of relay.Connection\n    my_type_conn: List[MyType] = relay.connection()\n\n    # Missing the Connection class annotation\n    @relay.connection\n    def my_type_conn_with_resolver(self) -> List[MyType]: ...\n\n    # The connection class is not a subclass of relay.Connection\n    @relay.connection(List[MyType])\n    def my_type_conn_with_resolver2(self) -> List[MyType]: ...\n```\n\n----------------------------------------\n\nTITLE: Customizing GraphQL IDE Rendering in ASGI\nDESCRIPTION: Shows how to customize the GraphQL IDE interface by overriding the render_graphql_ide method to return a custom HTML response.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/asgi.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.asgi import GraphQL\nfrom starlette.responses import HTMLResponse, Response\n\n\nclass MyGraphQL(GraphQL):\n    async def render_graphql_ide(self, request: Request) -> Response:\n        custom_html = \"\"\"<html><body><h1>Custom GraphQL IDE</h1></body></html>\"\"\"\n\n        return HTMLResponse(custom_html)\n```\n\n----------------------------------------\n\nTITLE: Integrating Strawberry GraphQL with AIOHTTP\nDESCRIPTION: Example of how to integrate Strawberry GraphQL with the AIOHTTP web framework. The code shows setting up a GraphQL endpoint using the GraphQLView class provided by Strawberry's AIOHTTP integration.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_142\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom aiohttp import web\nfrom strawberry.aiohttp.views import GraphQLView\n\n\n@strawberry.type\nclass Query:\n    pass\n\n\nschema = strawberry.Schema(query=Query)\n\napp = web.Application()\n\napp.router.add_route(\"*\", \"/graphql\", GraphQLView(schema=schema))\n```\n\n----------------------------------------\n\nTITLE: User List Response with Pagination\nDESCRIPTION: Server response containing paginated user data with detailed user information.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/overview.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"users\": [\n    {\n      \"id\": 1,\n      \"name\": \"Norman Osborn\",\n      \"occupation\": \"Founder, Oscorp Industries\",\n      \"age\": 42\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Peter Parker\",\n      \"occupation\": \"Freelance Photographer, The Daily Bugle\",\n      \"age\": 20\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Decoder Implementation\nDESCRIPTION: Example showing how to implement a custom JSON decoder using orjson\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/fastapi.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.fastapi import GraphQLRouter\nfrom typing import Union\nimport orjson\n\n\nclass MyGraphQLRouter(GraphQLRouter):\n    def decode_json(self, data: Union[str, bytes]) -> object:\n        return orjson.loads(data)\n```\n\n----------------------------------------\n\nTITLE: JSON Response with UpperCase Extension\nDESCRIPTION: The JSON response showing the result of the UpperCaseExtension, where the string field value has been converted to uppercase.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/field-extensions.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"string\": \"THIS IS A TEST!!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Process Result in Django GraphQL View in Python\nDESCRIPTION: This code shows how to override the process_result method in a Django GraphQL view. It customizes the response format for GraphQL execution results.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_164\n\nLANGUAGE: python\nCODE:\n```\n# views.py\nfrom django.http import HttpRequest\nfrom strawberry.django.views import GraphQLView as BaseGraphQLView\nfrom strawberry.http import GraphQLHTTPResponse\nfrom strawberry.types import ExecutionResult\n\n\nclass GraphQLView(BaseGraphQLView):\n    def process_result(\n        self, request: HttpRequest, result: ExecutionResult\n    ) -> GraphQLHTTPResponse:\n        return {\"data\": result.data, \"errors\": result.errors or []}\n```\n\n----------------------------------------\n\nTITLE: Using Future Annotations with Lazy Types in Python\nDESCRIPTION: Illustrates how to use optional lazy types with future annotations in Strawberry GraphQL. This example defines a Person type with a lazy reference to a Group type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom typing import Annotated, TYPE_CHECKING\n\nimport strawberry\n\nif TYPE_CHECKING:\n    from types import Group\n\n\n@strawberry.type\nclass Person:\n    group: Annotated[\"Group\", strawberry.lazy(\"types.group\")] | None\n```\n\n----------------------------------------\n\nTITLE: Implementing List Arguments in Operation Directives (Python)\nDESCRIPTION: Demonstrates how to use List arguments in operation directives with Strawberry. This feature allows passing multiple values to a directive.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_63\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.directive(locations=[DirectiveLocation.FIELD])\ndef append_names(\n    value: DirectiveValue[str], names: List[str]\n):  # note the usage of List here\n    return f\"{value} {', '.join(names)}\"\n```\n\n----------------------------------------\n\nTITLE: Correctly Applying Strawberry Type Decorator to a Class in Python\nDESCRIPTION: This example shows the correct approach to fix the error by using a class definition instead of a function. The @strawberry.type decorator is applied to a proper class definition, making it valid for use in Strawberry GraphQL schemas.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/object-is-not-class.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass AFunction:\n    field: int\n\n\n@strawberry.type\nclass Query:\n    field: AFunction\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Federated Schema\nDESCRIPTION: A GraphQL query that demonstrates fetching data across multiple services, combining book data from the books service with reviews from the reviews service.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation.md#2025-04-21_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allBooks {\n    id\n    reviewsCount\n    reviews {\n      body\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Schema.subscribe Method Signature in Python\nDESCRIPTION: The new signature of the Schema.subscribe method after the breaking change in version 0.240.0. It includes modifications to support schema extensions and pre-execution errors.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.240.0.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def subscribe(\n    self,\n    query: Optional[str],\n    variable_values: Optional[Dict[str, Any]] = None,\n    context_value: Optional[Any] = None,\n    root_value: Optional[Any] = None,\n    operation_name: Optional[str] = None,\n) -> Union[AsyncGenerator[ExecutionResult, None], PreExecutionError]:\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Subscriptions with GQL Client and ChannelsLiveServerTestCase\nDESCRIPTION: End-to-end test for GraphQL subscriptions using the Python GQL client and Django Channels' ChannelsLiveServerTestCase to test real server connections.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom gql import Client, gql\nfrom gql.transport.websockets import WebsocketsTransport\n\n\ndef test_send_message_via_channels_chat_joinChatRooms_recieves(self):\n    transport = WebsocketsTransport(url=self.live_server_ws_url + \"/graphql\")\n\n    client = Client(\n        transport=transport,\n        fetch_schema_from_transport=False,\n    )\n\n    query = gql(chat_subscription_query)\n    for index, result in enumerate(client.subscribe(query)):\n        if index == 0 or 1:\n            print(result)\n        # because we subscribed to 2 rooms we received two welcome messages.\n        elif index == 2:\n            print(result)\n            assert \"hello from web browser\" in result[\"joinChatRooms\"][\"message\"]\n            break\n\n        try:\n            self._enter_chat_room(\"room1\")\n            self._post_message(\"hello from web browser\")\n        finally:\n            self._close_all_new_windows()\n```\n\n----------------------------------------\n\nTITLE: Cursor-Based Pagination Response\nDESCRIPTION: Server response for cursor-based pagination including next cursor value.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/overview.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"users\": [\n    {\n      \"id\": 3,\n      \"name\": \"Harold Osborn\",\n      \"occupation\": \"President, Oscorp Industries\",\n      \"age\": 19\n    },\n    {\n      \"id\": 4,\n      \"name\": \"Eddie Brock\",\n      \"occupation\": \"Journalist, The Eddie Brock Report\",\n      \"age\": 20\n    }\n  ],\n  \"next_cursor\": \"3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extension API Reference Pattern\nDESCRIPTION: Provides the class signature pattern for a Strawberry extension, showing how arguments are defined in the class constructor.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/_template.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ExtensionName(an_argument=None): ...\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Using Enum\nDESCRIPTION: Provides an example of how to query the best_flavour field that returns an enum value.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/enums.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  bestFlavour\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Encoding in Flask GraphQL View\nDESCRIPTION: Example of implementing custom JSON encoding for GraphQL responses with indentation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/flask.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom strawberry.flask.views import GraphQLView\n\n\nclass MyGraphQLView(GraphQLView):\n    def encode_json(self, data: object) -> str:\n        return json.dumps(data, indent=2)\n```\n\n----------------------------------------\n\nTITLE: Correct Implementation - Adding Return Type Annotation in Strawberry GraphQL Resolver\nDESCRIPTION: Fixed version of the code that includes the required return type annotation (-> str) for the resolver. This allows Strawberry to properly generate the GraphQL schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/missing-return-annotation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self) -> str:\n        return \"this is an example\"\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Fixing Duplicated Type Name Error in Strawberry GraphQL (Python)\nDESCRIPTION: This code snippet demonstrates how to fix the Duplicated Type Name Error by ensuring unique names for all types in the schema. It changes the name of the 'UserB' type to resolve the conflict.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/duplicated-type-name.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass User:\n    name: str\n\n\n# Note: Strawberry will automatically use the name of the class\n# if it is not provided, in this case we are passing the name\n# to show how it works and how to fix the error\n@strawberry.type(name=\"UserB\")\nclass UserB:\n    name: str\n\n\n@strawberry.type\nclass Query:\n    user: User\n    user_b: UserB\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Field Arguments Using Annotated Type in Python\nDESCRIPTION: This snippet demonstrates how to add a description to field arguments in a Strawberry GraphQL schema using the Annotated type. It shows defining a Query type with a user_by_id field that has a described id argument.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_159\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user_by_id(\n        id: Annotated[str, strawberry.argument(description=\"The ID of the user\")],\n    ) -> User: ...\n```\n\n----------------------------------------\n\nTITLE: Forward References for Lazy Types in Python\nDESCRIPTION: Example showing how to use forward references with lazy types in Strawberry GraphQL types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nfrom typing import Optional, Annotated\nimport strawberry\n\n@strawberry.type\nclass MyType:\n    other_type: Optional[Annotated[\"OtherType\", strawberry.lazy(\"some.module\")]]\n    # or like this\n    other_type: Annotated[\"OtherType\", strawberry.lazy(\"some.module\")] | None\n```\n\n----------------------------------------\n\nTITLE: Invalid Union with Scalar Type in Strawberry GraphQL (Python)\nDESCRIPTION: This code example demonstrates an invalid implementation that causes an error because it attempts to include a scalar type (int) as a member of a GraphQL union, which is not supported by the GraphQL specification.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/invalid-union-type.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom typing import Union, Annotated\n\n\n@strawberry.type\nclass Example:\n    name: str\n\n\nExampleUnion = Annotated[Union[Example, int], strawberry.union(\"ExampleUnion\")]\n\n\n@strawberry.type\nclass Query:\n    field: ExampleUnion\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL IDE Rendering in Django\nDESCRIPTION: Example showing how to customize the rendering of the GraphQL IDE interface by overriding the render_graphql_ide method in GraphQLView. Uses a custom template.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.django.views import GraphQLView\nfrom django.http import HttpResponse, HttpRequest\nfrom django.template.loader import render_to_string\n\n\nclass MyGraphQLView(GraphQLView):\n    def render_graphql_ide(self, request: HttpRequest) -> HttpResponse:\n        content = render_to_string(\"myapp/my_graphql_ide_template.html\")\n\n        return HttpResponse(content)\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query for Federated Services\nDESCRIPTION: A GraphQL query example that demonstrates how to fetch books with their reviews across the federated services. This shows the power of federation by seamlessly joining data from different services.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation-v1.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  allBooks {\n    id\n    reviewsCount\n    reviews {\n      body\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Output with Disabled Camel Case\nDESCRIPTION: Shows the resulting GraphQL schema when auto_camel_case is disabled. The field name 'example_field' remains in snake_case instead of being converted to 'exampleField'.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema-configurations.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  example_field: String!\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query and Response Example\nDESCRIPTION: Demonstrates how to show a GraphQL query and its corresponding JSON response in a combined code block using the graphql+response format.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/_test.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql+response\nCODE:\n```\n{\n  ping\n}\n---\n{\n  \"data\": {\n    \"ping\": \"pong\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Response in JSON\nDESCRIPTION: Example JSON response for a mutation that adds a new book. Shows the response structure matching the requested fields in the mutation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"addBook\": {\n      \"title\": \"Fox in Socks\",\n      \"author\": {\n        \"name\": \"Dr. Seuss\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic File Structure for Federation Example\nDESCRIPTION: Shows the folder structure for a federated GraphQL application with two services: books and reviews.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmy-app/\n├─ books/\n│  ├─ app.py\n├─ reviews/\n│  ├─ app.py\n```\n\n----------------------------------------\n\nTITLE: Integrating FastAPI with Strawberry GraphQL using APIRouter\nDESCRIPTION: Demonstrates how to set up a GraphQL endpoint using Strawberry with FastAPI's APIRouter. Creates a basic schema with a hello query and mounts it on a FastAPI application.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_126\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom fastapi import FastAPI\nfrom strawberry.fastapi import GraphQLRouter\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"Hello World\"\n\n\nschema = strawberry.Schema(Query)\n\ngraphql_app = GraphQLRouter(schema)\n\napp = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL IDE Rendering in Strawberry AIOHTTP View\nDESCRIPTION: This snippet shows how to override the render_graphql_ide method to provide a custom HTML response for the GraphQL IDE interface. This allows for more control over the IDE presentation than the default graphql_ide option.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/aiohttp.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom aiohttp.web import Request, Response\nfrom strawberry.aiohttp.views import GraphQLView\n\n\nclass MyGraphQLView(GraphQLView):\n    async def render_graphql_ide(self, request: Request) -> Response:\n        custom_html = \"\"\"<html><body><h1>Custom GraphQL IDE</h1></body></html>\"\"\"\n\n        return Response(text=custom_html, content_type=\"text/html\")\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Decoding in Strawberry GraphQL Controller\nDESCRIPTION: This snippet shows how to customize the JSON decoding process for HTTP and WebSocket requests in the GraphQL controller. It uses the orjson library for faster JSON parsing.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/litestar.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nimport orjson\nfrom strawberry.litestar import make_graphql_controller\nfrom typing import Union\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"world\"\n\n\nschema = strawberry.Schema(Query)\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n)\n\n\nclass MyGraphQLController(GraphQLController):\n    def decode_json(self, data: Union[str, bytes]) -> object:\n        return orjson.loads(data)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Implementation - Missing Return Type Annotation in Strawberry GraphQL Resolver\nDESCRIPTION: Example of code that will raise an error due to missing return type annotation in the resolver. Strawberry requires explicit return type annotations to generate correct GraphQL types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/missing-return-annotation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self):\n        return \"this is an example\"\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Query with Private Field in Strawberry GraphQL\nDESCRIPTION: Defines a Query type with a field that returns a Stringable object containing a datetime value as a private field. This demonstrates how to initialize a type with a private field.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/private.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def now(self) -> Stringable:\n        return Stringable(value=datetime.datetime.now())\n```\n\n----------------------------------------\n\nTITLE: Modifying ChatConsumer for Subscription Compatibility\nDESCRIPTION: Code update for the Django Channels ChatConsumer to make it compatible with the GraphQL ChatRoomMessage type by adding a room_id to the message payload.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Send message to room group\nawait self.channel_layer.group_send(\n    self.room_group_name,\n    {\n        \"type\": \"chat.message\",\n        \"room_id\": self.room_group_name,  # <<< here is the change\n        \"message\": f\"process is {os.getpid()}, Thread is {threading.current_thread().name}\"\n        f\" -> {message}\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sanic GraphQL View with JSON Parameters\nDESCRIPTION: Example showing how to set up a Sanic GraphQL view with custom JSON encoder and parameters. Demonstrates integration of Strawberry with Sanic web framework.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_108\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.sanic.views import GraphQLView\n\nfrom api.schema import Schema\n\napp = Sanic(__name__)\n\napp.add_route(\n    GraphQLView.as_view(\n        schema=schema,\n        graphiql=True,\n        json_encoder=CustomEncoder,\n        json_dumps_params={},\n    ),\n    \"/graphql\",\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Applying Strawberry Type Decorator to a Function in Python\nDESCRIPTION: This example demonstrates the incorrect usage that causes the 'Object is not an Class Error'. The code attempts to apply @strawberry.type decorator to a function instead of a class, which is not supported by Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/object-is-not-class.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\ndef a_function(): ...\n\n\n@strawberry.type\nclass Query:\n    field: a_function\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Custom GraphQL IDE Rendering in Flask\nDESCRIPTION: Example of customizing the GraphQL IDE interface rendering by overriding the render_graphql_ide method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/flask.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.flask.views import GraphQLView\nfrom flask import Request, Response\n\n\nclass MyGraphQLView(GraphQLView):\n    def render_graphql_ide(self, request: Request) -> Response:\n        custom_html = \"\"\"<html><body><h1>Custom GraphQL IDE</h1></body></html>\"\"\"\n\n        return Response(custom_html, status=200, content_type=\"text/html\")\n```\n\n----------------------------------------\n\nTITLE: Extension with Custom Argument\nDESCRIPTION: Demonstrates how to use a custom extension with a specific argument value. This example shows passing a string value to the 'an_argument' parameter when initializing the extension.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/_template.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import ValidationCache\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        ExtensionName(an_argument=\"something\"),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Datadog Tracing Package\nDESCRIPTION: Command to install the ddtrace package which is required before using the DatadogExtension.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/datadog.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install ddtrace\n```\n\n----------------------------------------\n\nTITLE: Custom Enum Name Conversion in Strawberry GraphQL\nDESCRIPTION: Example demonstrating how to create a custom name converter for Enum values in Strawberry, which appends '_enum_value' to each enum value name.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_58\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nimport strawberry\nfrom strawberry.enum import EnumDefinition, EnumValue\nfrom strawberry.schema.config import StrawberryConfig\nfrom strawberry.schema.name_converter import NameConverter\n\n\nclass EnumNameConverter(NameConverter):\n    def from_enum_value(self, enum: EnumDefinition, enum_value: EnumValue) -> str:\n        return f\"{super().from_enum_value(enum, enum_value)}_enum_value\"\n\n\n@strawberry.enum\nclass MyEnum(Enum):\n    A = \"a\"\n    B = \"b\"\n\n\n@strawberry.type\nclass Query:\n    a_enum: MyEnum\n\n\nschema = strawberry.Schema(\n    query=Query,\n    config=StrawberryConfig(name_converter=EnumNameConverter()),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Schema Extensions with Subscriptions in Strawberry\nDESCRIPTION: This code demonstrates how to use schema extensions with GraphQL subscriptions in Strawberry. It includes a simple subscription that yields notifications and an extension that runs code at subscription start and end.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom typing import AsyncIterator\n\nimport strawberry\nfrom strawberry.extensions.base_extension import SchemaExtension\n\n\n@strawberry.type\nclass Subscription:\n    @strawberry.subscription\n    async def notifications(self, info: strawberry.Info) -> AsyncIterator[str]:\n        for _ in range(3):\n            yield \"Hello\"\n\n\nclass MyExtension(SchemaExtension):\n    async def on_operation(self):\n        # This would run when the subscription starts\n        print(\"Subscription started\")\n        yield\n        # The subscription has ended\n        print(\"Subscription ended\")\n\n\nschema = strawberry.Schema(\n    query=Query, subscription=Subscription, extensions=[MyExtension]\n)\n```\n\n----------------------------------------\n\nTITLE: MultipleStrawberryArgumentsError Example in Python\nDESCRIPTION: Illustrates the error when multiple strawberry.argument decorators are used in a type annotation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/exceptions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom typing_extensions import Annotated\n\n@strawberry.field\ndef name(\n    argument: Annotated[\n        str,\n        strawberry.argument(description=\"This is a description\"),\n        strawberry.argument(description=\"Another description\"),\n    ],\n) -> str:\n    return \"Name\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Django URL Pattern with CSRF Exempt GraphQL View\nDESCRIPTION: Code example showing how to configure a Django URL pattern with CSRF exemption for the Strawberry GraphQL view. This demonstrates how to restore pre-v0.243.0 behavior by explicitly disabling CSRF protection using Django's csrf_exempt decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.243.0.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom django.views.decorators.csrf import csrf_exempt\n\nfrom strawberry.django.views import GraphQLView\n\nfrom api.schema import schema\n\nurlpatterns = [\n    path(\"graphql/\", csrf_exempt(GraphQLView.as_view(schema=schema))),\n]\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Decoding Implementation\nDESCRIPTION: Shows how to customize JSON decoding for HTTP requests by extending the GraphQLView class. Demonstrates using orjson as an alternative decoder.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/quart.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.quart.views import GraphQLView\nfrom typing import Union\nimport orjson\n\n\nclass MyGraphQLView(GraphQLView):\n    def decode_json(self, data: Union[str, bytes]) -> object:\n        return orjson.loads(data)\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema with Federation Directives\nDESCRIPTION: The resulting GraphQL schema showing how Strawberry's federation directives are translated into the standard Apollo Federation directive syntax.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation.md#2025-04-21_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\nschema\n  @link(\n    url: \"https://specs.apollo.dev/federation/v2.7\"\n    import: [\"@key\", \"@inaccessible\", \"@shareable\", \"@tag\"]\n  ) {\n  query: Query\n  mutation: Mutation\n}\n\ntype Book @tag(name: \"experimental\") @key(fields: \"id\", resolveable: true) {\n  id: ID!\n}\n\ntype CommonType @shareable {\n  foo: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Lazy Aliased Connections in Python\nDESCRIPTION: Demonstrates how to use lazy aliased connections to annotate a connection field in Strawberry GraphQL. This example shows the definition of a Fruit type and a FruitConnection type alias.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# types.py\n\n\n@strawberry.type\nclass Fruit: ...\n\n\nFruitConnection: TypeAlias = ListConnection[Fruit]\n```\n\n----------------------------------------\n\nTITLE: Extending Generic Interface Types in Strawberry\nDESCRIPTION: This code shows how to extend a generic interface type in Strawberry. It defines a Node interface and extends it with a Book type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_148\n\nLANGUAGE: python\nCODE:\n```\nT = typing.TypeVar(\"T\")\n\n\n@strawberry.interface\nclass Node(typing.Generic[T]):\n    id: strawberry.ID\n\n    def _resolve(self) -> typing.Optional[T]:\n        return None\n\n\n@strawberry.type\nclass Book(Node[str]):\n    name: str\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def books(self) -> typing.List[Book]:\n        return list()\n```\n\n----------------------------------------\n\nTITLE: ASGI Integration with Strawberry GraphQL\nDESCRIPTION: Shows how to create a custom GraphQL class for ASGI integration with Strawberry, including asynchronous context and root value methods.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_167\n\nLANGUAGE: python\nCODE:\n```\n# app.py\nfrom strawberry.asgi import GraphQL as BaseGraphQL\n\nfrom .schema import schema\n\n\nclass GraphQL(BaseGraphQLView):\n    async def get_context(self, request):\n        return {\n            \"request\": request,\n            \"custom_context_value\": \"Hi!\",\n        }\n\n    async def get_root_value(self, request):\n        return {\n            \"custom_root_value\": \"🍓\",\n        }\n\n\napp = GraphQL(schema)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cross-Module Resolver Issue in Python Strawberry GraphQL\nDESCRIPTION: Example showing a potential type resolution issue when using generic resolvers from different modules. The resolver's origin setting could cause type lookup failures when resolving relative to the wrong module context.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/tests/types/cross_module_resolvers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom other_module import generic_resolver\n\n\n@strawberry.field\nclass Foo:\n    bar: \"Bar\" = strawberry.field(resolver=generic_resolver)\n\n\n@strawberry.field\nclass Bar:\n    awesome: bool\n```\n\n----------------------------------------\n\nTITLE: Using Constrained Lists with Pydantic and Strawberry\nDESCRIPTION: Example demonstrating how to use Pydantic's constrained lists with Strawberry GraphQL. This feature allows enforcing constraints on list properties like minimum number of items.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom pydantic import BaseModel, ConstrainedList\n\n\nclass FriendList(ConstrainedList):\n    min_items = 1\n\n\nclass UserModel(BaseModel):\n    age: int\n    friend_names: FriendList[str]\n\n\n@strawberry.experimental.pydantic.type(UserModel)\nclass User:\n    age: strawberry.auto\n    friend_names: strawberry.auto\n```\n\n----------------------------------------\n\nTITLE: Customizing GraphQL IDE Rendering in Strawberry GraphQL Controller\nDESCRIPTION: This snippet shows how to customize the rendering of the GraphQL IDE by overriding the render_graphql_ide method. It returns a custom HTML response instead of the default GraphQL IDE.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/litestar.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.litestar import make_graphql_controller\nfrom litestar import MediaType, Request, Response\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"world\"\n\n\nschema = strawberry.Schema(Query)\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n)\n\n\nclass MyGraphQLController(GraphQLController):\n    async def render_graphql_ide(self, request: Request) -> Response:\n        custom_html = \"\"\"<html><body><h1>Custom GraphQL IDE</h1></body></html>\"\"\"\n\n        return Response(custom_html, media_type=MediaType.HTML)\n```\n\n----------------------------------------\n\nTITLE: Configuring Complex ASGI Application with ProtocolTypeRouter\nDESCRIPTION: Python code demonstrating a more complex ASGI application setup using Channels' ProtocolTypeRouter for flexible routing of different protocols and URLs.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom channels.auth import AuthMiddlewareStack\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom django.core.asgi import get_asgi_application\nfrom django.urls import re_path\nfrom strawberry.channels import GraphQLHTTPConsumer, GraphQLWSConsumer\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"berry.settings\")\ndjango_asgi_app = get_asgi_application()\n\n# Import your Strawberry schema after creating the django ASGI application\n# This ensures django.setup() has been called before any ORM models are imported\n```\n\n----------------------------------------\n\nTITLE: Updated Flask Method Signatures in Strawberry GraphQL v0.169.0\nDESCRIPTION: Updated method signatures for Flask integration in Strawberry GraphQL v0.169.0. Both get_root_value and get_context methods now receive the request as a parameter, with get_context also receiving the response parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.169.0.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_root_value(self, request: Request) -> Any: ...\n\n\ndef get_context(self, request: Request, response: Response) -> Any: ...\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Field Extensions in Strawberry\nDESCRIPTION: Example of chaining multiple field extensions together, where the order of execution is important. The last extension in the list is called first.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/field-extensions.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.field(extensions=[LowerCaseExtension(), UpperCaseExtension()])\ndef my_field():\n    return \"My Result\"\n```\n\n----------------------------------------\n\nTITLE: Class-Based Context with BaseContext\nDESCRIPTION: Demonstrates how to use a structured class-based context instead of a dictionary. Uses msgspec's BaseContext for strong typing of context data in resolvers.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/litestar.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom litestar import Request, Litestar\nfrom strawberry.litestar import make_graphql_controller, BaseContext\nfrom strawberry.types.info import Info\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom app.models import User\nfrom sqlalchemy import select\n\n\nclass CustomContext(BaseContext):\n    user: User\n    session: AsyncSession\n\n\nasync def custom_context_getter(\n    request: Request, db_session: AsyncSession\n) -> CustomContext:\n    return CustomContext(user=request.user, session=db_session)\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    async def hello(self, info: strawberry.Info[CustomContext, None]) -> str:\n        session: AsyncSession = info.context.session\n        user: User = info.context.user\n\n        query = select(User).where(User.id == user.id)\n        user = (await session.execute((query))).scalar_one()\n        return f\"Hello {user.first_name}\"\n\n\nschema = strawberry.Schema(Query)\n\nGraphQLController = make_graphql_controller(\n    schema,\n    path=\"/graphql\",\n    context_getter=custom_context_getter,\n)\n\napp = Litestar(route_handlers=[GraphQLController])\n```\n\n----------------------------------------\n\nTITLE: Using Pydantic Fields with Strawberry GraphQL Types\nDESCRIPTION: Shows how to copy Pydantic field descriptions to GraphQL schema definitions using Strawberry's experimental Pydantic integration.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_127\n\nLANGUAGE: python\nCODE:\n```\nimport pydantic\nimport strawberry\n\n\nclass UserModel(pydantic.BaseModel):\n    age: str = pydantic.Field(..., description=\"Description\")\n\n\n@strawberry.experimental.pydantic.type(UserModel)\nclass User:\n    age: strawberry.auto\n```\n\n----------------------------------------\n\nTITLE: Defining Query Type with User Field in Strawberry\nDESCRIPTION: This snippet shows how to define a Query type with a user field that returns a User object.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/accessing-parent-data.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def user(self) -> User:\n        return User(first_name=\"Albert\", last_name=\"Heijn\")\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Decoding in Strawberry ASGI\nDESCRIPTION: Example showing how to customize JSON decoding for HTTP requests by overriding the decode_json method, using orjson instead of the default json module.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/asgi.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.asgi import GraphQL\nfrom typing import Union\nimport orjson\n\n\nclass MyGraphQLView(GraphQL):\n    def decode_json(self, data: Union[str, bytes]) -> object:\n        return orjson.loads(data)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry in Django's manage.py\nDESCRIPTION: Python code to configure OpenTelemetry in a Django application's manage.py file, including setting up the tracer provider, exporter, and Django instrumentation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/tracing.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.instrumentation.django import DjangoInstrumentor\nfrom opentelemetry.sdk.resources import Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\n\nresource = Resource(attributes={\"service.name\": \"yourservicename\"})\ntrace.set_tracer_provider(TracerProvider(resource=resource))\ntracer = trace.get_tracer(__name__)\notlp_exporter = OTLPSpanExporter(endpoint=\"http://localhost:4317\", insecure=True)\nspan_processor = BatchSpanProcessor(otlp_exporter)\ntrace.get_tracer_provider().add_span_processor(span_processor)\n\n...\n\n\ndef main():\n    DjangoInstrumentor().instrument()\n    ...\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Camel Case in Strawberry Schema\nDESCRIPTION: Example of configuring a Strawberry schema with auto_camel_case set to False. This prevents field names from being automatically converted from snake_case to camelCase.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema-configurations.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nschema = strawberry.Schema(query=Query, config=StrawberryConfig(auto_camel_case=False))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Conflicting Arguments Error in Strawberry GraphQL Python\nDESCRIPTION: This code snippet shows an example of a resolver that will trigger the Conflicting Arguments Error. It defines a Query type with a 'hello' field that has multiple conflicting arguments: 'self', 'root', and 'parent'. These arguments all identify the same input, causing the error.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/conflicting-arguments.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(\n        self, root, parent: strawberry.Parent[str]\n    ) -> str:  #  <-- self, root, and parent all identify the same input\n        return f\"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Decimal Type Support in Strawberry GraphQL\nDESCRIPTION: Demonstrates how to use the Decimal type in Strawberry GraphQL fields.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_170\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example_decimal(self) -> Decimal:\n        return Decimal(\"3.14159\")\n```\n\n----------------------------------------\n\nTITLE: Unsubscribe Handling in Apollo Client\nDESCRIPTION: Shows how to unsubscribe from a subscription using Apollo Client.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/subscriptions.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = useApolloClient();\nconst subscriber = client.subscribe({query: ...}).subscribe({...})\n// ...\n// done with subscription. now unsubscribe\nsubscriber.unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Schema Directive Example with Custom Enum\nDESCRIPTION: Example showing how to define and use schema directives with custom enums in Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_93\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.enum\nclass Reason(str, Enum):\n    EXAMPLE = \"example\"\n\n\n@strawberry.schema_directive(locations=[Location.FIELD_DEFINITION])\nclass Sensitive:\n    reason: Reason\n\n\n@strawberry.type\nclass Query:\n    first_name: str = strawberry.field(directives=[Sensitive(reason=Reason.EXAMPLE)])\n```\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @sensitive(reason: Reason!) on FIELD_DEFINITION\n\ntype Query {\n    firstName: String! @sensitive(reason: EXAMPLE)\n}\n\nenum Reason {\n    EXAMPLE\n}\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query for Paginated User Data\nDESCRIPTION: Example GraphQL query that requests a paginated list of users with a limit of 2 entries per page. The query retrieves user details (id, name, occupation, age) along with the pagination metadata including the next cursor for subsequent requests.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/cursor-based.md#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery getUsers {\n  getUsers(limit: 2) {\n    users {\n      id\n      name\n      occupation\n      age\n    }\n    pageMeta {\n      nextCursor\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UnsupportedTypeError Example with Pydantic in Python\nDESCRIPTION: Shows the error when using unsupported type annotations with Pydantic integration.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/exceptions.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass Model(pydantic.BaseModel):\n    field: pydantic.Json\n\n@strawberry.experimental.pydantic.type(Model, fields=[\"field\"])\nclass Type:\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Hooks - Legacy Style (Python)\nDESCRIPTION: Shows the old style of defining extension hooks in Strawberry GraphQL before version 0.159.0. This approach uses separate methods for start and end events.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.159.0.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyExtension(Extension):\n    def on_executing_start(self): ...\n\n    def on_executing_end(self): ...\n```\n\n----------------------------------------\n\nTITLE: Starting the Docker Compose Setup for OpenTelemetry\nDESCRIPTION: Command to start the Docker Compose setup for OpenTelemetry tracing with Elasticsearch, Kibana, and APM server.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/tracing.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose up --force-recreate --build\n```\n\n----------------------------------------\n\nTITLE: Defining Query Type for Reviews Service Schema\nDESCRIPTION: Code for defining a minimal Query type for the reviews service to satisfy GraphQL spec requirements, and creating a schema with explicitly provided types since they are not directly reachable from Query.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation-v1.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    _hi: str = strawberry.field(resolver=lambda: \"Hello world!\")\n\n\nschema = strawberry.federation.Schema(query=Query, types=[Book, Review])\n```\n\n----------------------------------------\n\nTITLE: Sending Nested File Upload Request (Shell)\nDESCRIPTION: cURL command to send a nested file upload request to a GraphQL endpoint using multipart form data, demonstrating how to structure more complex file upload scenarios.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/file-upload.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl localhost:8000/graphql \\\n  -F operations='{ \"query\": \"mutation($folder: FolderInput!) { readFolder(folder: $folder) }\", \"variables\": {\"folder\": {\"files\": [null, null]}} }' \\\n  -F map='{\"file1\": [\"variables.folder.files.0\"], \"file2\": [\"variables.folder.files.1\"]}' \\\n  -F file1=@b.txt \\\n  -F file2=@c.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Using Key Directive\nDESCRIPTION: Alternative approach to defining an entity using the Key directive directly instead of the federation type decorator.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/federation/entities.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom strawberry.federation.schema_directives import Key\n\n\n@strawberry.type(directives=[Key(fields=\"id\")])\nclass Book:\n    id: strawberry.ID\n    title: str\n```\n\n----------------------------------------\n\nTITLE: Setting up Local Development Environment for Strawberry using Git and Poetry\nDESCRIPTION: Commands for cloning the Strawberry repository and setting up a local development environment using Poetry. This includes installing dependencies and running tests to ensure everything works correctly.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone git@github.com:strawberry-graphql/strawberry.git\n$ cd strawberry\n```\n\n----------------------------------------\n\nTITLE: Custom URL Configuration for GraphQL Test Client\nDESCRIPTION: Shows how to configure a custom URL endpoint for the GraphQLTestClient using Starlette.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_87\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\nfrom starlette.testclient import TestClient\nfrom strawberry.asgi.test import GraphQLTestClient\n\n\n@pytest.fixture\ndef graphql_client() -> GraphQLTestClient:\n    return GraphQLTestClient(\n        TestClient(app, base_url=\"http://localhost:8000\"), url=\"/api/\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Using Strawberry Enum as a Function with MyPy in Python\nDESCRIPTION: This code snippet shows how to use strawberry.enum as a function with MyPy for type checking. It defines an Enum class for ice cream flavors and creates a Strawberry enum from it.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_160\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\n\nimport strawberry\n\n\nclass IceCreamFlavour(Enum):\n    VANILLA = \"vanilla\"\n    STRAWBERRY = \"strawberry\"\n    CHOCOLATE = \"chocolate\"\n\n\nFlavour = strawberry.enum(IceCreamFlavour)\n```\n\n----------------------------------------\n\nTITLE: Query Example for Retrieving a Node by ID\nDESCRIPTION: GraphQL query example showing how to retrieve a specific Node by its global ID and access type-specific fields using fragments.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/relay.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  node(id: \"<some id>\") {\n    id\n    ... on Fruit {\n      name\n      weight\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Relay Connection Resolver Implementation in Python\nDESCRIPTION: This code snippet shows the correct implementation of a relay connection resolver. It uses the proper return type annotation (Iterable[MyType]) that is compatible with pagination.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/relay-wrong-resolver-annotation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any\n\nimport strawberry\nfrom strawberry import relay\n\n\n@strawberry.type\nclass MyType(relay.Node): ...\n\n\n@strawberry.type\nclass Query:\n    @relay.connection(relay.Connection[MyType])\n    def some_connection(self) -> Iterable[MyType]: ...\n```\n\n----------------------------------------\n\nTITLE: Customizing AsyncGraphQLView in Strawberry GraphQL\nDESCRIPTION: This snippet demonstrates how to create a custom AsyncGraphQLView class to override the default JSON encoding behavior by specifying a custom encoder and configuration parameters.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_120\n\nLANGUAGE: python\nCODE:\n```\nclass CustomAsyncGraphQLView(AsyncGraphQLView):\n    json_encoder = JSONEncoder\n    json_dumps_params = {\"separators\": (\",\", \":\")}\n```\n\n----------------------------------------\n\nTITLE: Fixing the Private Strawberry Field Error using dataclasses.field in Python\nDESCRIPTION: This code example demonstrates the correct approach to fix the error by using `dataclasses.field` instead of `strawberry.field` when you need to provide a default value for a Private field using default_factory.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/private-strawberry-field.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nimport dataclasses\n\n\n@strawberry.type\nclass Query:\n    name: str\n    tags: strawberry.Private[str] = dataclasses.field(default_factory=list)\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Installing WebSocket Support for Strawberry Debug Server\nDESCRIPTION: These commands install the necessary dependencies to enable WebSocket support for GraphQL subscriptions in the Strawberry debug server.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npip install 'strawberry-graphql[debug-server]'\npip install 'uvicorn[standard]'\n```\n\n----------------------------------------\n\nTITLE: Missing NodeID Field in relay.Node Implementation (Python)\nDESCRIPTION: This example demonstrates an error case where a Fruit class inherits from relay.Node but does not have any field annotated with relay.NodeID, causing the system to not know which field should be used for the GlobalID.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/node-id-annotation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry import relay\n\n\n@strawberry.type\nclass Fruit(relay.Node):\n    code: str\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Field Extensions (Python)\nDESCRIPTION: Shows how to create and use a custom field extension in Strawberry. The example demonstrates an UpperCaseExtension that converts the field's result to uppercase.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_64\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions import FieldExtension\n\n\nclass UpperCaseExtension(FieldExtension):\n    async def resolve_async(\n        self,\n        next: Callable[..., Awaitable[Any]],\n        source: Any,\n        info: strawberry.Info,\n        **kwargs\n    ):\n        result = await next(source, info, **kwargs)\n        return str(result).upper()\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(extensions=[UpperCaseExtension()])\n    async def string(self) -> str:\n        return \"This is a test!!\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Using DataLoader\nDESCRIPTION: This GraphQL query demonstrates how to fetch multiple users using the DataLoader-enabled get_user field. It retrieves two users with different IDs in a single query.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/dataloaders.md#2025-04-21_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  first: getUser(id: 1) {\n    id\n  }\n  second: getUser(id: 2) {\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Python Types\nDESCRIPTION: Example of generated Python types from the GraphQL query, showing nested type structures.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/codegen/query-codegen.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyQueryResultUserPost:\n    title: str\n\n\nclass MyQueryResultUser:\n    post: MyQueryResultUserPost\n\n\nclass MyQueryResult:\n    user: MyQueryResultUser\n```\n\n----------------------------------------\n\nTITLE: Adding NoDeprecatedCustomRule from GraphQL-core (Python)\nDESCRIPTION: This snippet shows how to add the pre-defined NoDeprecatedCustomRule from GraphQL-core to a Strawberry schema using the AddValidationRules extension.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/add-validation-rules.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import AddValidationRules\nfrom graphql.validation import NoDeprecatedCustomRule\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        AddValidationRules([NoDeprecatedCustomRule]),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Generic Edge Type in Strawberry\nDESCRIPTION: This example demonstrates how to define a type that uses a generic typevar but is not considered generic in the GraphQL schema. The typevar T is used only in a private field, so it doesn't generate a generic type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Edge[T]:\n    cursor: strawberry.ID\n    some_interna_value: strawberry.Private[T]\n```\n\n----------------------------------------\n\nTITLE: Configuring Flask App with Strawberry GraphQL Endpoint\nDESCRIPTION: Sets up a Flask app with a GraphQL endpoint using Strawberry's Flask integration. It imports the necessary modules, creates a Flask app, and adds a GraphQL view using Strawberry's schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_173\n\nLANGUAGE: python\nCODE:\n```\n# app.py\nfrom strawberry.flask.views import GraphQLView\nfrom your_project.schema import schema\n\napp = Flask(__name__)\n\napp.add_url_rule(\n    \"/graphql\", view_func=GraphQLView.as_view(\"graphql_view\", schema=schema)\n)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for Annotated Type Arguments in GraphQL Fields\nDESCRIPTION: Example demonstrating an issue with typing.Annotated in resolver arguments when used after reserved arguments like Info. The code shows how argument names would previously be incorrectly translated in the GraphQL schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nimport strawberry\nimport uuid\nfrom typing_extensions import Annotated\nfrom strawberry.types import Info\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def get_testing(\n        self,\n        info: strawberry.Info,\n        id_: Annotated[uuid.UUID, strawberry.argument(name=\"id\")],\n    ) -> str | None:\n        return None\n\n\nschema = strawberry.Schema(query=Query)\n\nprint(schema)\n```\n\n----------------------------------------\n\nTITLE: Federation with Schema Directives\nDESCRIPTION: Example showing federation type definition with additional schema directives\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_101\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.schema.config import StrawberryConfig\nfrom strawberry.schema_directive import Location\n\n@strawberry.schema_directive(locations=[Location.OBJECT])\nclass CacheControl:\n    max_age: int\n\n@strawberry.federation.type(\n    keys=[\"id\"], shareable=True, extend=True, directives=[CacheControl(max_age=42)]\n)\nclass FederatedType:\n    id: strawberry.ID\n\nschema = strawberry.Schema(query=Query, config=StrawberryConfig(auto_camel_case=False))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Missing Argument Annotation Error in Strawberry GraphQL Python\nDESCRIPTION: This code snippet shows an example that triggers the 'Missing arguments annotation Error' in Strawberry GraphQL. The 'name' argument in the 'hello' field is missing a type annotation, which causes the error.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/missing-arguments-annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self, name) -> str:  #  <-- note name here is missing an annotation\n        return f\"hello {name}\"\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Encoding in Django GraphQL View\nDESCRIPTION: Example showing how to customize JSON encoding for GraphQL responses by overriding the encode_json method in GraphQLView. Adds indentation to the JSON output.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/django.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom strawberry.django.views import GraphQLView\n\n\nclass MyGraphQLView(GraphQLView):\n    def encode_json(self, data: object) -> str:\n        return json.dumps(data, indent=2)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Subscription Query Example\nDESCRIPTION: Example of a GraphQL subscription query that subscribes to chat room messages. It demonstrates the syntax for subscribing to multiple rooms with a specific user.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nsubscription SubscribeToChatRooms {\n  joinChatRooms(\n    rooms: [{ roomName: \"room1\" }, { roomName: \"room2\" }]\n    user: \"foo\"\n  ) {\n    roomName\n    message\n    currentUser\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Query Response in JSON\nDESCRIPTION: Example JSON response for a nested GraphQL query that includes books with their authors. Demonstrates how the response structure matches the nested query.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"books\": [\n      { \"title\": \"Jurassic Park\", \"author\": { \"name\": \"Michael Crichton\" } }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Strawberry Development Environment\nDESCRIPTION: These shell commands clone the Strawberry repository, install dependencies using Poetry, and run the test suite, setting up a development environment for contributing to Strawberry.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/strawberry-graphql/strawberry\ncd strawberry\npoetry install --with integrations\npoetry run pytest\n```\n\n----------------------------------------\n\nTITLE: Configuring MaxAliasesLimiter Extension in Strawberry GraphQL\nDESCRIPTION: Example showing how to use the MaxAliasesLimiter extension in Strawberry to limit the number of aliases in GraphQL queries to 15.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_57\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import MaxAliasesLimiter\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        MaxAliasesLimiter(max_alias_count=15),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Type Definition for Interface Object\nDESCRIPTION: The resulting GraphQL type definition for the interface object, including Federation directives.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_69\n\nLANGUAGE: graphql\nCODE:\n```\ntype SomeInterface @key(fields: \"id\") @interfaceObject {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Offset-Based Pagination Request\nDESCRIPTION: Example of an initial offset-based pagination request with limit and offset parameters.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/overview.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"limit\": 2,\n  \"offset\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Books Query Example in GraphQL\nDESCRIPTION: Example of a GraphQL query for fetching books data with their titles and authors. Shows how clients can request specific fields from the API.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/schema-basics.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  books {\n    title\n  }\n\n  authors {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Fruit Type in Strawberry GraphQL\nDESCRIPTION: A simple Strawberry GraphQL type definition for a Fruit object with name and weight properties.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/relay.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Fruit:\n    name: str\n    weight: str\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for OpenTelemetry with Elasticsearch and Kibana\nDESCRIPTION: Docker Compose configuration that sets up Elasticsearch, Kibana, APM server, and OpenTelemetry collector for tracing Strawberry GraphQL applications.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/tracing.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3\"\n\nservices:\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2\n    container_name: elasticsearch\n    restart: always\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    environment:\n      - discovery.type=single-node\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms1024m -Xmx1024m\"\n      - ELASTIC_PASSWORD=changeme\n      - xpack.security.enabled=true\n    volumes:\n      - elasticsearch-data:/usr/share/elasticsearch/data\n    healthcheck:\n      interval: 10s\n      retries: 12\n      test:\n        curl -s http://localhost:9200/_cluster/health | grep -vq\n        '\"status\":\"red\"'\n\n  kibana:\n    image: docker.elastic.co/kibana/kibana:7.16.2\n    container_name: kibana\n    environment:\n      ELASTICSEARCH_URL: \"http://elasticsearch:9200\"\n      ELASTICSEARCH_HOSTS: '[\"http://elasticsearch:9200\"]'\n      ELASTICSEARCH_USERNAME: elastic\n      ELASTICSEARCH_PASSWORD: changeme\n    restart: always\n    depends_on:\n      elasticsearch:\n        condition: service_healthy\n    ports:\n      - 127.0.0.1:5601:5601\n\n  apm-server:\n    image: docker.elastic.co/apm/apm-server:7.16.2\n    container_name: apm-server\n    user: apm-server\n    restart: always\n    command:\n      [\n        \"--strict.perms=false\",\n        \"-e\",\n        \"-E\",\n        \"apm-server.host=0.0.0.0:8200\",\n        \"-E\",\n        \"apm-server.kibana.enabled=true\",\n        \"-E\",\n        \"apm-server.kibana.host=kibana:5601\",\n        \"-E\",\n        \"apm-server.kibana.username=elastic\",\n        \"-E\",\n        \"apm-server.kibana.password=changeme\",\n        \"-E\",\n        \"output.elasticsearch.hosts=['elasticsearch:9200']\",\n        \"-E\",\n        \"output.elasticsearch.enabled=true\",\n        \"-E\",\n        \"output.elasticsearch.username=elastic\",\n        \"-E\",\n        \"output.elasticsearch.password=changeme\",\n      ]\n    depends_on:\n      elasticsearch:\n        condition: service_healthy\n    cap_add: [\"CHOWN\", \"DAC_OVERRIDE\", \"SETGID\", \"SETUID\"]\n    cap_drop: [\"ALL\"]\n    healthcheck:\n      interval: 10s\n      retries: 12\n      test:\n        curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null\n        http://localhost:8200/\n\n  otel-collector:\n    image: otel/opentelemetry-collector:0.41.0\n    container_name: otel-collector\n    restart: always\n    command: \"--config=/etc/otel-collector-config.yaml\"\n    volumes:\n      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro\n    depends_on:\n      apm-server:\n        condition: service_healthy\n    ports:\n      - 127.0.0.1:4317:4317\n\nvolumes:\n  elasticsearch-data:\n    external: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic LazyType Reference (Python/Strawberry)\nDESCRIPTION: Implements a generic type system with LazyType to reference types from other files. Uses TypeVar for generic type parameters and demonstrates lazy loading of external types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_131\n\nLANGUAGE: python\nCODE:\n```\nT = TypeVar(\"T\")\n\n\n@strawberry.type\nclass GenericType(Generic[T]):\n    item: T\n\n\n@strawberry.type\nclass RealType:\n    lazy: GenericType[LazyType[\"TypeFromAnotherFile\", \"another_file.py\"]]\n```\n\n----------------------------------------\n\nTITLE: Fixing Scalar Already Registered Error in Strawberry GraphQL\nDESCRIPTION: This code snippet demonstrates how to fix the 'Scalar already registered' error by renaming one of the conflicting scalars. In this case, 'MyCustomScalar2' is given a unique name 'MyCustomScalar2', allowing both scalars to be used in the schema without conflicts.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/scalar-already-registered.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nMyCustomScalar = strawberry.scalar(\n    str,\n    name=\"MyCustomScalar\",\n)\n\nMyCustomScalar2 = strawberry.scalar(\n    int,\n    name=\"MyCustomScalar2\",\n)\n\n\n@strawberry.type\nclass Query:\n    scalar_1: MyCustomScalar\n    scalar_2: MyCustomScalar2\n\n\nstrawberry.Schema(Query)\n```\n\n----------------------------------------\n\nTITLE: Async Schema Execution Method in Strawberry GraphQL\nDESCRIPTION: API reference for the asynchronous execute method in Strawberry GraphQL schema, used to execute GraphQL operations against a schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nasync def execute(\n    query, variable_values, context_value, root_value, operation_name\n): ...\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema for InputMutationExtension\nDESCRIPTION: The GraphQL schema generated when using the InputMutationExtension, showing how it creates an input type with the same fields as the mutation arguments.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/mutations.md#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ninput UpdateFruitWeightInput {\n  id: ID!\n\n  \"\"\"\n  The fruit's new weight in grams\n  \"\"\"\n  weight: Float!\n}\n\ntype Mutation {\n  updateFruitWeight(input: UpdateFruitWeightInput!): Fruit!\n}\n```\n\n----------------------------------------\n\nTITLE: Subclassing Info Type in Python with GraphQL\nDESCRIPTION: Example showing how to subclass the Info type in Strawberry GraphQL without raising deprecation warnings. Demonstrates custom Info type implementation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_88\n\nLANGUAGE: python\nCODE:\n```\nclass MyInfo(Info):\n    pass\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def is_tasty(self, info: MyInfo) -> bool:\n        \"\"\"Subclassed ``info`` argument no longer raises deprecation warning.\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Apollo Client WebSocket Subscription Setup\nDESCRIPTION: Example of setting up WebSocket subscriptions with Apollo Client and connection parameters.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { createClient } from 'graphql-ws';\n\nconst wsLink = new GraphQLWsLink(createClient({\n  url: 'ws://localhost:4000/subscriptions',\n  connectionParams: {\n    authToken: user.authToken,\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Running Strawberry Debug Server\nDESCRIPTION: This command starts the Strawberry debug server, which allows testing the GraphQL API using GraphiQL interface.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstrawberry server app\n```\n\n----------------------------------------\n\nTITLE: Input Mutation Extension Example\nDESCRIPTION: Example demonstrating use of the new InputMutationExtension for creating mutations with a single input type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.field_extensions import InputMutationExtension\n\n@strawberry.type\nclass Fruit:\n    id: strawberry.ID\n    name: str\n    weight: float\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation(extensions=[InputMutationExtension()])\n    def update_fruit_weight(\n        self,\n        info: strawberry.Info,\n        id: strawberry.ID,\n        weight: Annotated[\n            float,\n            strawberry.argument(description=\"The fruit's new weight in grams\"),\n        ],\n    ) -> Fruit:\n        fruit = ...  # retrieve the fruit with the given ID\n        fruit.weight = weight\n        ...  # maybe save the fruit in the database\n        return fruit\n```\n\n----------------------------------------\n\nTITLE: Setting Up GraphQLProtocolTypeRouter for Strawberry GraphQL and Django\nDESCRIPTION: Demonstrates how to use the GraphQLProtocolTypeRouter to integrate Strawberry GraphQL with a Django ASGI application, routing GraphQL requests to the appropriate handlers.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.channels import GraphQLProtocolTypeRouter\nfrom django.core.asgi import get_asgi_application\n\ndjango_asgi = get_asgi_application()\n\nfrom myapi import schema\n\napplication = GraphQLProtocolTypeRouter(\n    schema,\n    django_application=django_asgi,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring FastAPI with Strawberry GraphQL WebSocket Support\nDESCRIPTION: Shows how to integrate Strawberry GraphQL with FastAPI, including setup of WebSocket protocols for subscriptions and configuration of the GraphQL router.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/subscriptions.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.fastapi import GraphQLRouter\nfrom strawberry.subscriptions import GRAPHQL_TRANSPORT_WS_PROTOCOL, GRAPHQL_WS_PROTOCOL\nfrom fastapi import FastAPI\nfrom api.schema import schema\n\ngraphql_router = GraphQLRouter(\n    schema,\n    subscription_protocols=[\n        GRAPHQL_TRANSPORT_WS_PROTOCOL,\n        GRAPHQL_WS_PROTOCOL,\n    ],\n)\napp = FastAPI()\napp.include_router(graphql_router, prefix=\"/graphql\")\n```\n\n----------------------------------------\n\nTITLE: Adding Strawberry to Django INSTALLED_APPS\nDESCRIPTION: This Python code snippet shows how to add Strawberry's Django integration to the INSTALLED_APPS list in a Django project's settings.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...,  # your other apps\n    \"strawberry.django\",\n]\n```\n\n----------------------------------------\n\nTITLE: Migrating from graphiql to graphql_ide parameter in Strawberry GraphQL v0.213.0\nDESCRIPTION: This example shows how to update GraphQLRouter initialization to use the new 'graphql_ide' parameter instead of the deprecated 'graphiql' parameter. For enabling GraphiQL, replace graphiql=True with graphql_ide=\"graphiql\", and for disabling it, replace graphiql=False with graphql_ide=None.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.213.0.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-graphql_app = GraphQLRouter(schema, graphiql=True)\n+graphql_app = GraphQLRouter(schema, graphql_ide=\"graphiql\")\n\n-graphql_app = GraphQLRouter(schema, graphiql=False)\n+graphql_app = GraphQLRouter(schema, graphql_ide=None)\n```\n\n----------------------------------------\n\nTITLE: Unhashable Default Values in Resolvers\nDESCRIPTION: Example demonstrating the usage of unhashable default values like lists and dicts in resolver functions\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_97\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def field(self, x: List[str] = [\"foo\"], y: JSON = {\"foo\": 42}) -> str:  # noqa: B006\n        return f\"{x} {y}\"\n```\n\n----------------------------------------\n\nTITLE: Lazy Type Resolution with Relative Paths in Strawberry GraphQL\nDESCRIPTION: Example showing how to use strawberry.lazy with relative paths for type references.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_85\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass TypeA:\n    b: Annotated[\"TypeB\", strawberry.lazy(\".type_b\")]\n```\n\n----------------------------------------\n\nTITLE: Defining Pydantic User Model in Python\nDESCRIPTION: This snippet defines a Pydantic BaseModel for a User with fields for id, name, signup timestamp, and friends list.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/pydantic.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom typing import List, Optional\nfrom pydantic import BaseModel\n\n\nclass User(BaseModel):\n    id: int\n    name: str\n    signup_ts: Optional[datetime] = None\n    friends: List[int] = []\n```\n\n----------------------------------------\n\nTITLE: StrawberryLogger Error Handling Implementation\nDESCRIPTION: Implementation of the StrawberryLogger class that handles error logging in Strawberry GraphQL, including how errors are formatted and logged.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# strawberry/utils/logging.py\nfrom strawberry.types import ExecutionContext\n\n\nclass StrawberryLogger:\n    logger: Final[logging.Logger] = logging.getLogger(\"strawberry.execution\")\n\n    @classmethod\n    def error(\n        cls,\n        error: GraphQLError,\n        execution_context: Optional[ExecutionContext] = None,\n        # https://www.python.org/dev/peps/pep-0484/#arbitrary-argument-lists-and-default-argument-values\n        **logger_kwargs: Any,\n    ) -> None:\n        # \"stack_info\" is a boolean; check for None explicitly\n        if logger_kwargs.get(\"stack_info\") is None:\n            logger_kwargs[\"stack_info\"] = True\n\n        logger_kwargs[\"stacklevel\"] = 3\n\n        cls.logger.error(error, exc_info=error.original_error, **logger_kwargs)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sample Dataset for Connection Pagination Example\nDESCRIPTION: Definition of a sample user dataset as a list of dictionaries containing user information like id, name, occupation, and age to demonstrate pagination implementation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/connections.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# example.py\n\nfrom typing import Generic, TypeVar\n\nimport strawberry\n\nuser_data = [\n    {\n        \"id\": 1,\n        \"name\": \"Norman Osborn\",\n        \"occupation\": \"Founder, Oscorp Industries\",\n        \"age\": 42,\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Peter Parker\",\n        \"occupation\": \"Freelance Photographer, The Daily Bugle\",\n        \"age\": 20,\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Harold Osborn\",\n        \"occupation\": \"President, Oscorp Industries\",\n        \"age\": 19,\n    },\n    {\n        \"id\": 4,\n        \"name\": \"Eddie Brock\",\n        \"occupation\": \"Journalist, The Eddie Brock Report\",\n        \"age\": 20,\n    },\n]\n\n\nGenericType = TypeVar(\"GenericType\")\n\n\n@strawberry.type\nclass Connection(Generic[GenericType]):\n    page_info: \"PageInfo\" = strawberry.field(\n        description=\"Information to aid in pagination.\"\n    )\n\n    edges: list[\"Edge[GenericType]\"] = strawberry.field(\n        description=\"A list of edges in this connection.\"\n    )\n\n\n@strawberry.type\nclass PageInfo:\n    has_next_page: bool = strawberry.field(\n        description=\"When paginating forwards, are there more items?\"\n    )\n\n    has_previous_page: bool = strawberry.field(\n        description=\"When paginating backwards, are there more items?\"\n    )\n\n    start_cursor: Optional[str] = strawberry.field(\n        description=\"When paginating backwards, the cursor to continue.\"\n    )\n\n    end_cursor: Optional[str] = strawberry.field(\n        description=\"When paginating forwards, the cursor to continue.\"\n    )\n\n\n@strawberry.type\nclass Edge(Generic[GenericType]):\n    node: GenericType = strawberry.field(description=\"The item at the end of the edge.\")\n\n    cursor: str = strawberry.field(description=\"A cursor for use in pagination.\")\n```\n\n----------------------------------------\n\nTITLE: Custom result processing for GraphQL responses in Chalice\nDESCRIPTION: Example of customizing how GraphQL execution results are processed before being sent to clients.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/chalice.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.http import GraphQLHTTPResponse\nfrom strawberry.types import ExecutionResult\nfrom strawberry.chalice.views import GraphQLView\n\n\nclass MyGraphQLView(GraphQLView):\n    def process_result(self, result: ExecutionResult) -> GraphQLHTTPResponse:\n        data: GraphQLHTTPResponse = {\"data\": result.data}\n\n        if result.errors:\n            data[\"errors\"] = [err.formatted for err in result.errors]\n\n        return data\n```\n\n----------------------------------------\n\nTITLE: Using UNSET Sentinel Value with Strawberry Codegen\nDESCRIPTION: Example showing how the UNSET sentinel value is handled with code generation. This allows differentiating between unset values and default values in GraphQL requests.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n# For codegen, we treat the `UNSET` default value as a `GraphQLNullValue`.\n# The `.value` property is the `UNSET` object in this case (instead of\n# the usual `None`).  In the built-in python code generator, this causes\n# the client to generate an object with a `None` default.  Custom client\n# generators can sniff at this value and update their behavior.\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition for Enum\nDESCRIPTION: Shows the resulting GraphQL schema definition for the IceCreamFlavour enum.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/enums.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nenum IceCreamFlavour {\n  VANILLA\n  STRAWBERRY\n  CHOCOLATE\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory and Virtual Environment\nDESCRIPTION: Commands to create a new project directory and set up a Python virtual environment for the Strawberry GraphQL project.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir strawberry-demo\ncd strawberry-demo\n```\n\nLANGUAGE: shell\nCODE:\n```\npython -m venv virtualenv\n```\n\nLANGUAGE: shell\nCODE:\n```\nsource virtualenv/bin/activate\npip install 'strawberry-graphql[debug-server]'\n```\n\n----------------------------------------\n\nTITLE: Implementing Single-Member Union Types in Strawberry GraphQL\nDESCRIPTION: Example demonstrating how to create a union with a single member type in Strawberry GraphQL using Annotated and strawberry.union. This is useful for future-proofing schemas where a field might become a union type later.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom typing import Annotated\n\n\n@strawberry.type\nclass Audio:\n    duration: int\n\n\n@strawberry.type\nclass Query:\n    # note: Python's Union type doesn't support single members,\n    # Union[Audio] is exactly the same as Audio, so we use\n    # use Annotated and strawberry.union to tell Strawberry this is\n    # a union with a single member\n    latest_media: Annotated[Audio, strawberry.union(\"MediaItem\")]\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Customizing Info Class in Strawberry Schema\nDESCRIPTION: Example of creating a custom Info class that extends strawberry.Info with additional functionality. This demonstrates adding a response_headers property that accesses headers from the context.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema-configurations.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass CustomInfo(Info):\n    @property\n    def response_headers(self) -> Headers:\n        return self.context[\"response\"].headers\n\n\nschema = strawberry.Schema(query=Query, config=StrawberryConfig(info_class=CustomInfo))\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Extension for Strawberry GraphQL in Python\nDESCRIPTION: This snippet demonstrates how to create a custom extension for Strawberry GraphQL. It defines a MyExtension class that inherits from Extension and implements the get_results method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_163\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.extensions import Extension\n\n\nclass MyExtension(Extension):\n    def get_results(self):\n        return {\"example\": \"this is an example for an extension\"}\n\n\nschema = strawberry.Schema(query=Query, extensions=[MyExtension])\n```\n\n----------------------------------------\n\nTITLE: Pydantic Integration with Default Values in Strawberry\nDESCRIPTION: Example showing the consistent behavior between Pydantic and normal Strawberry types for required fields with default values.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_62\n\nLANGUAGE: python\nCODE:\n```\nimport pydantic\nimport strawberry\n\n\nclass UserPydantic(pydantic.BaseModel):\n    name: str = \"James\"\n\n\n@strawberry.experimental.pydantic.type(UserPydantic, all_fields=True)\nclass User: ...\n\n\n@strawberry.type\nclass Query:\n    a: User = strawberry.field()\n\n    @strawberry.field\n    def a(self) -> User:\n        return User()\n```\n\n----------------------------------------\n\nTITLE: Configuring Strawberry Plugin in pyproject.toml\nDESCRIPTION: Alternative configuration that enables the Strawberry plugin for Mypy through pyproject.toml. This approach is useful for projects that already use pyproject.toml for other tools and configurations.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/editors/mypy.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.mypy]\nplugins = [\"strawberry.ext.mypy_plugin\"]\n```\n\n----------------------------------------\n\nTITLE: Importing ExecutionResult in Python\nDESCRIPTION: Shows how to import the ExecutionResult type from strawberry.types after it was removed from strawberry.schema.base.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_150\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.types import ExecutionResult\n```\n\n----------------------------------------\n\nTITLE: Generic Types with Lazy Loading in Strawberry GraphQL\nDESCRIPTION: Implementation of generic types using lazy loading for type references.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_86\n\nLANGUAGE: python\nCODE:\n```\nT = TypeVar(\"T\")\n\nTypeAType = Annotated[\"TypeA\", strawberry.lazy(\"tests.schema.test_lazy.type_a\")]\n\n\n@strawberry.type\nclass Edge(Generic[T]):\n    node: T\n\n\n@strawberry.type\nclass Query:\n    users: Edge[TypeAType]\n```\n\n----------------------------------------\n\nTITLE: Running Strawberry's Built-in Server\nDESCRIPTION: Command to start Strawberry's built-in development server. It requires specifying the package.module and schema name. The schema name defaults to 'schema' if not provided.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/server.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nstrawberry server package.module:schema\n```\n\n----------------------------------------\n\nTITLE: Initializing Sentry SDK with Strawberry Integration\nDESCRIPTION: This code demonstrates how to initialize the Sentry SDK with the Strawberry integration. It configures the StrawberryIntegration with async execution and sets the traces sample rate.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport sentry_sdk\nfrom sentry_sdk.integrations.strawberry import StrawberryIntegration\n\nsentry_sdk.init(\n    dsn=\"___PUBLIC_DSN___\",\n    integrations=[\n        # make sure to set async_execution to False if you're executing\n        # GraphQL queries synchronously\n        StrawberryIntegration(async_execution=True),\n    ],\n    traces_sample_rate=1.0,\n)\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Paginated Users Connection\nDESCRIPTION: The JSON response returned from the GraphQL query showing paginated user data following the Relay Connection pattern, including user nodes with their details and pagination metadata.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/connections.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"getUsers\": {\n      \"users\": {\n        \"edges\": [\n          {\n            \"node\": {\n              \"id\": 1,\n              \"name\": \"Norman Osborn\",\n              \"occupation\": \"Founder, Oscorp Industries\",\n              \"age\": 42\n            },\n            \"cursor\": \"dXNlcjox\"\n          },\n          {\n            \"node\": {\n              \"id\": 2,\n              \"name\": \"Peter Parker\",\n              \"occupation\": \"Freelance Photographer, The Daily Bugle\",\n              \"age\": 20\n            },\n            \"cursor\": \"dXNlcjoy\"\n          }\n        ]\n      },\n      \"pageInfo\": {\n        \"endCursor\": \"dXNlcjoz\",\n        \"hasNextPage\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JSON decoding in Chalice GraphQL\nDESCRIPTION: Example of customizing JSON decoding for GraphQL HTTP requests using a third-party library (orjson).\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/chalice.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.chalice.views import GraphQLView\nfrom typing import Union\nimport orjson\n\n\nclass MyGraphQLView(GraphQLView):\n    def decode_json(self, data: Union[str, bytes]) -> object:\n        return orjson.loads(data)\n```\n\n----------------------------------------\n\nTITLE: Installing Strawberry with Enhanced Error Reporting\nDESCRIPTION: Command to install Strawberry GraphQL with CLI support, which enables enhanced error reporting features using rich and libcst dependencies.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install \"strawberry-graphql[cli]\"\n```\n\n----------------------------------------\n\nTITLE: Parser Cache Class Definition\nDESCRIPTION: API reference for the ParserCache class, showing its signature with the optional maxsize parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/parser-cache.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass ParserCache(maxsize=None): ...\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies for Strawberry GraphQL\nDESCRIPTION: Command to install the OpenTelemetry extras package required for using OpenTelemetry with Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/tracing.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npip install 'strawberry-graphql[opentelemetry]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Strawberry GraphQL View in Django URLs\nDESCRIPTION: This snippet shows how to set up a GraphQL endpoint in a Django project using Strawberry. It configures the URL path and uses the GraphQLView with a custom schema and GraphQL IDE.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\n\nfrom strawberry.django.views import GraphQLView\n\nfrom api.schema import schema\n\nurlpatterns = [\n    path(\"graphql/\", GraphQLView.as_view(schema=schema, graphql_ide=\"pathfinder\")),\n]\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema with Deprecated Field\nDESCRIPTION: The resulting GraphQL schema type definition showing how a deprecated field appears with the @deprecated directive and reason annotation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema.md#2025-04-21_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ntype User {\n  name: String!\n  dob: Date!\n  age: Int @deprecated(reason: \"Age is deprecated\")\n}\n```\n\n----------------------------------------\n\nTITLE: Next Page Cursor Request\nDESCRIPTION: Example of requesting the next page using cursor-based pagination.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/overview.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"limit\": 2,\n  \"cursor\": \"3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django URLs for Strawberry GraphQL\nDESCRIPTION: Example of how to configure URL patterns in Django to expose a Strawberry GraphQL endpoint using the GraphQLView.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_174\n\nLANGUAGE: python\nCODE:\n```\n# urls.py\nfrom strawberry.django.views import GraphQLView\nfrom your_project.schema import schema\n\nurlpatterns = [\n    path(\"graphql/\", GraphQLView.as_view(schema=schema)),\n]\n```\n\n----------------------------------------\n\nTITLE: Updated Sanic Method Signature in Strawberry GraphQL v0.169.0\nDESCRIPTION: Updated method signature for Sanic integration in Strawberry GraphQL v0.169.0. The get_root_value method is now asynchronous and receives the request as a parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.169.0.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nasync def get_root_value(self, request: Request) -> Any: ...\n```\n\n----------------------------------------\n\nTITLE: WrongNumberOfResultsReturned Example in Python\nDESCRIPTION: Demonstrates the error when DataLoader returns incorrect number of results.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/exceptions.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nasync def idx(keys):\n    return [1, 2]\n\nloader = DataLoader(load_fn=idx)\n\nawait loader.load(1)\n```\n\n----------------------------------------\n\nTITLE: Installing Strawberry GraphQL with Debug Server\nDESCRIPTION: This command installs Strawberry GraphQL with the debug server feature, which provides a quick start method for running a GraphQL server.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install \"strawberry-graphql[debug-server]\"\n```\n\n----------------------------------------\n\nTITLE: Generic Type with Private Field\nDESCRIPTION: Example showing usage of strawberry.Private with Generic types and implicit Any\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_100\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\nfrom typing import Generic, Sequence, TypeVar\nimport strawberry\n\nT = TypeVar(\"T\")\n\n@strawberry.type\nclass Foo(Generic[T]):\n    private_field: strawberry.Private[Sequence]  # instead of Sequence[Any]\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def foo(self) -> Foo[str]:\n        return Foo(private_field=[1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Defining Base Type in External File (Python/Strawberry)\nDESCRIPTION: Defines a basic Strawberry type in a separate file that will be lazily loaded. Contains a single boolean field.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_130\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass TypeFromAnotherFile:\n    something: bool\n```\n\n----------------------------------------\n\nTITLE: Updated encode_json Method Signature for Strawberry GraphQL v0.251.0\nDESCRIPTION: The new method signature for encode_json that accepts generic objects and must handle the same inputs as json.dumps. This change allows the method to be used for both HTTP responses and WebSocket messages.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.251.0.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef encode_json(self, data: object) -> str: ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Enum in Python for Strawberry GraphQL\nDESCRIPTION: Creates a simple enum class for ice cream flavors using Python's standard Enum class and registers it as a Strawberry type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/enums.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.enum\nclass IceCreamFlavour(Enum):\n    VANILLA = \"vanilla\"\n    STRAWBERRY = \"strawberry\"\n    CHOCOLATE = \"chocolate\"\n```\n\n----------------------------------------\n\nTITLE: Directive Implementation with Custom Parameter Names\nDESCRIPTION: Example showing directive implementation with custom names for value and info parameters\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_99\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.types import Info\nfrom strawberry.directive import DirectiveLocation, DirectiveValue\n\n@strawberry.type\nclass Cake:\n    frosting: Optional[str] = None\n    flavor: str = \"Chocolate\"\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def cake(self) -> Cake:\n        return Cake()\n\n@strawberry.directive(\n    locations=[DirectiveLocation.FIELD],\n    description=\"Add frosting with ``value`` to a cake.\",\n)\ndef add_frosting(value: str, v: DirectiveValue[Cake], my_info: strawberry.Info):\n    assert isinstance(v, Cake)\n    if (value in my_info.context[\"allergies\"]):\n        raise AllergyError(\"You are allergic to this frosting!\")\n    else:\n        v.frosting = value\n    return v\n```\n\n----------------------------------------\n\nTITLE: Exporting GraphQL Schema Using Strawberry CLI\nDESCRIPTION: Basic command to export a GraphQL schema from a Python module using Strawberry. The command expects a package.module path and schema symbol name.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/schema-export.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstrawberry export-schema package.module:schema\n```\n\n----------------------------------------\n\nTITLE: Configuring PermissionExtension with fail_silently on a required field (Python)\nDESCRIPTION: This code snippet demonstrates the incorrect usage of fail_silently on a required field, which causes an error. The field 'name' is defined as a non-nullable string, which conflicts with the fail_silently behavior.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/permission-fail-silently-requires-optional.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.permission import PermissionExtension\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(\n        extensions=[PermissionExtension([IsAuthorized()], fail_silently=True)]\n    )\n    def name(\n        self,\n    ) -> str:  # This is a required field, the schema type will be NonNull (String!)\n        return \"ABC\"\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Implementing Federation Type with Reference Resolution in Python\nDESCRIPTION: Demonstrates how to create a federated type with a reference resolver in Strawberry GraphQL. This example shows a Product type with a resolve_reference method that uses the new info object.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.federation.type(keys=[\"upc\"])\nclass Product:\n    upc: str\n\n    @classmethod\n    def resolve_reference(cls, info: strawberry.Info, upc: str) -> \"Product\":\n        # Access the original info object\n        original_info = info._raw_info\n\n        return Product(upc=upc)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the Private Strawberry Field Error in Python\nDESCRIPTION: This code example shows the incorrect approach that triggers the error by using both `strawberry.Private[int]` and `strawberry.field` on the same field. This is problematic because private fields aren't exposed in the GraphQL schema, making the strawberry.field decorator pointless.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/private-strawberry-field.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    name: str\n    age: strawberry.Private[int] = strawberry.field(name=\"ageInYears\")\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Generated SDL for Named Union Type\nDESCRIPTION: The GraphQL SDL output for a union type that has been explicitly named using strawberry.union annotation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/union.md#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nunion MediaItem = Audio | Video | Image\n\ntype Query {\n  latest_media: MediaItem!\n}\n\ntype Audio {\n  duration: Int!\n}\n\ntype Video {\n  thumbnailUrl: String!\n}\n\ntype Image {\n  src: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Schema with Generic Types\nDESCRIPTION: Demonstration of using generic types in schema's extra types\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_81\n\nLANGUAGE: python\nCODE:\n```\nT = TypeVar(\"T\")\n\n@strawberry.type\nclass Node(Generic[T]):\n    field: T\n\n@strawberry.type\nclass Query:\n    name: str\n\nschema = strawberry.Schema(Query, types=[Node[int]])\n```\n\n----------------------------------------\n\nTITLE: Generated Python Strawberry Types\nDESCRIPTION: Generated Python code using Strawberry decorators to define equivalent GraphQL types. Includes Query and User classes with corresponding field definitions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/codegen/schema-codegen.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    user: User | None\n\n\n@strawberry.type\nclass User:\n    id: strawberry.ID\n    name: str\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: MissingQueryError Example in Python\nDESCRIPTION: Shows the error when a GraphQL request is missing the query parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/exceptions.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclient.post(\"/graphql\", data={})\n```\n\n----------------------------------------\n\nTITLE: Resulting GraphQL Schema with Directive\nDESCRIPTION: The GraphQL schema that results from applying the 'Keys' directive to the User type. It shows how the directive appears in the schema with its field parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema-directives.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype User @keys(fields: \"id\") {\n  id: ID!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Strawberry Plugin in mypy.ini\nDESCRIPTION: This configuration enables the Strawberry plugin for Mypy by adding it to the plugins setting in mypy.ini. This allows Mypy to perform proper type checking on Strawberry GraphQL code.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/editors/mypy.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[mypy]\nplugins = strawberry.ext.mypy_plugin\n```\n\n----------------------------------------\n\nTITLE: Multiple NodeID Fields in relay.Node Implementation (Python)\nDESCRIPTION: This example shows another error case where a Fruit class has multiple fields annotated with relay.NodeID, causing ambiguity about which field should be used for the GlobalID generation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/node-id-annotation.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry import relay\n\n\n@strawberry.type\nclass Fruit(relay.Node):\n    code: relay.NodeID[str]\n    name: relay.NodeID[str]\n```\n\n----------------------------------------\n\nTITLE: Previous Schema.subscribe Method Signature in Python\nDESCRIPTION: The original signature of the Schema.subscribe method before the breaking change in version 0.240.0. It shows the method parameters and return type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.240.0.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nasync def subscribe(\n    self,\n    query: str,\n    variable_values: Optional[Dict[str, Any]] = None,\n    context_value: Optional[Any] = None,\n    root_value: Optional[Any] = None,\n    operation_name: Optional[str] = None,\n) -> Union[AsyncIterator[GraphQLExecutionResult], GraphQLExecutionResult]:\n```\n\n----------------------------------------\n\nTITLE: Creating a new Chalice project using CLI\nDESCRIPTION: Commands to create a new AWS Chalice project using the Chalice CLI tool.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/chalice.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nchalice new-project badger-project\ncd badger-project\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration for Tracing\nDESCRIPTION: Configuration file for the OpenTelemetry collector that defines receivers, processors, exporters, and service pipelines for tracing Strawberry GraphQL applications.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/tracing.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n\nprocessors:\n  memory_limiter:\n    check_interval: 1s\n    limit_mib: 2000\n  batch:\n\nexporters:\n  logging:\n    loglevel: warn\n  otlp/elastic:\n    endpoint: \"apm-server:8200\"\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [logging, otlp/elastic]\n      processors: [batch]\n    metrics:\n      receivers: [otlp]\n      exporters: [logging, otlp/elastic]\n      processors: [batch]\n```\n\n----------------------------------------\n\nTITLE: Exporting GraphQL Schema to File Using Redirection\nDESCRIPTION: Command to export a GraphQL schema and save it to a file using shell redirection. This creates a schema.graphql file containing the SDL output.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/schema-export.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nstrawberry export-schema package.module:schema > schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Incorrect Enum Definition in Strawberry GraphQL\nDESCRIPTION: Example showing incorrect enum definition that causes the 'Object is not an Enum Error'. The code attempts to use a regular class as an enum without proper decoration.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/object-is-not-an-enum.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n# note the lack of @strawberry.enum here:\nclass NotAnEnum:\n    A = \"A\"\n\n\n@strawberry.type\nclass Query:\n    field: NotAnEnum\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Converting Pydantic Constrained List to Strawberry GraphQL Input\nDESCRIPTION: Shows how to convert a Pydantic model with a constrained list (conlist) to a Strawberry GraphQL input type. Note that the list constraints are not enforced in the GraphQL type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_113\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom pydantic import BaseModel, conlist\n\n\nclass Example(BaseModel):\n    friends: conlist(str, min_items=1)\n\n\n@strawberry.experimental.pydantic.input(model=Example, all_fields=True)\nclass ExampleGQL: ...\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field()\n    def test(self, example: ExampleGQL) -> None:\n        # friends may be an empty list here\n        print(example.friends)\n        # calling to_pydantic() runs the validation and raises\n        # an error if friends is empty\n        print(example.to_pydantic().friends)\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Fields with Default Arguments in Strawberry GraphQL\nDESCRIPTION: Example showing how to define an optional field with a default argument in the GraphQL schema using Strawberry.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_179\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self, info, name: str = \"world\") -> str:\n        return name\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Scalar Already Registered Error in Strawberry GraphQL\nDESCRIPTION: This code snippet shows how attempting to register two different scalars with the same name leads to the 'Scalar already registered' error in Strawberry GraphQL. It defines two custom scalars, 'MyCustomScalar' and 'MyCustomScalar2', both using the same name 'MyCustomScalar', which causes the error when creating the schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/scalar-already-registered.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nMyCustomScalar = strawberry.scalar(\n    str,\n    name=\"MyCustomScalar\",\n)\n\nMyCustomScalar2 = strawberry.scalar(\n    int,\n    name=\"MyCustomScalar\",\n)\n\n\n@strawberry.type\nclass Query:\n    scalar_1: MyCustomScalar\n    scalar_2: MyCustomScalar2\n\n\nstrawberry.Schema(Query)\n```\n\n----------------------------------------\n\nTITLE: Correct Type Hints for Pydantic Integration in Strawberry\nDESCRIPTION: Demonstrates the fixed type hinting for StrawberryTypeFromPydantic._pydantic_type, showing how to properly use this private API when working with Pydantic models.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_59\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom typing import Type, List\n\nimport strawberry\nfrom strawberry.experimental.pydantic.conversion_types import StrawberryTypeFromPydantic\n\n\nclass User(BaseModel):\n    name: str\n\n    @staticmethod\n    def foo() -> List[str]:\n        return [\"Patrick\", \"Pietro\", \"Pablo\"]\n\n\n@strawberry.experimental.pydantic.type(model=User, all_fields=True)\nclass UserType:\n    @strawberry.field\n    def foo(self: StrawberryTypeFromPydantic[User]) -> List[str]:\n        # This is now inferred correctly as Type[User] instead of User\n        # We still highly discourage using this private API, but it's\n        # now typed correctly\n        pydantic_type: Type[User] = self._pydantic_type\n        return pydantic_type.foo()\n\n\ndef get_users() -> UserType:\n    user: User = User(name=\"Patrick\")\n    return UserType.from_pydantic(user)\n\n\n@strawberry.type\nclass Query:\n    user: UserType = strawberry.field(resolver=get_users)\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Type for Union Merge Error in Python with Strawberry\nDESCRIPTION: This code snippet shows an example that triggers the 'Invalid Type for Union Merge Error' by trying to include an int scalar in a union type, which is not allowed in GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/invalid-type-for-union-merge.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom typing import Union, Annotated\n\n\n@strawberry.type\nclass Example:\n    name: str\n\n\nExampleUnion = Annotated[Union[Example], strawberry.union(\"ExampleUnion\")]\n\n\n@strawberry.type\nclass Query:\n    field: ExampleUnion | int\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Duplicated Type Name Error in Strawberry GraphQL (Python)\nDESCRIPTION: This code snippet shows an example that triggers the Duplicated Type Name Error by defining two types with the same name 'User' in a Strawberry GraphQL schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/duplicated-type-name.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass User:\n    name: str\n\n\n@strawberry.type(name=\"User\")\nclass UserB:\n    name: str\n\n\n@strawberry.type\nclass Query:\n    user: User\n    user_b: UserB\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: FieldWithResolverAndDefaultValueError Example in Python\nDESCRIPTION: Shows the error raised when a field is defined with both resolver and default value arguments.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/exceptions.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef test_resolver() -> str:\n    return \"I'm a resolver\"\n\n@strawberry.type\nclass Query:\n    c: str = strawberry.field(default=\"Example C\", resolver=test_resolver)\n```\n\n----------------------------------------\n\nTITLE: Disabling Field Suggestions in Strawberry Schema\nDESCRIPTION: Shows how to disable the field suggestion feature in Strawberry. When enabled, Strawberry suggests similar field names when a requested field is not found in the schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/schema-configurations.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nschema = strawberry.Schema(\n    query=Query, config=StrawberryConfig(disable_field_suggestions=True)\n)\n```\n\n----------------------------------------\n\nTITLE: Generated GraphQL Schema for Specialized Types\nDESCRIPTION: The resulting GraphQL schema generated from the specialized generic types, showing how type names are preserved and specialized.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_73\n\nLANGUAGE: graphql\nCODE:\n```\ntype IntFoo {\n  someVar: Int!\n}\n\ntype StrFoo {\n  someVar: String!\n}\n\ntype Query {\n  intFoo: IntFoo!\n  strfoo: StrFoo!\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SDL for Union Type Using typing.Union\nDESCRIPTION: The GraphQL Schema Definition Language output generated from the Python Union type definition, showing how Strawberry creates a union from the Python types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/union.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nunion AudioVideoImage = Audio | Video | Image\n\ntype Query {\n  latestMedia: AudioVideoImage!\n}\n\ntype Audio {\n  duration: Int!\n}\n\ntype Video {\n  thumbnailUrl: String!\n}\n\ntype Image {\n  src: String!\n}\n```\n\n----------------------------------------\n\nTITLE: UnallowedReturnTypeForUnion Example in Python\nDESCRIPTION: Demonstrates the error when returning a type not included in a Union's type list.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/exceptions.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Outside:\n    c: int\n\n@strawberry.type\nclass A:\n    a: int\n\n@strawberry.type\nclass B:\n    b: int\n\n@strawberry.type\nclass Mutation:\n    @strawberry.mutation\n    def hello(self) -> Union[A, B]:\n        return Outside(c=5)\n```\n\n----------------------------------------\n\nTITLE: Multiple Plugin Codegen Command\nDESCRIPTION: Example of using multiple plugins (Python and TypeScript) in the codegen command.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/codegen/query-codegen.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nstrawberry codegen --schema schema --output-dir ./output -p python -p typescript query.graphql\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Missing Field Annotation Error in Strawberry GraphQL\nDESCRIPTION: This code snippet shows an example that will throw a missing field annotation error. The 'age' field uses strawberry.field but doesn't have a type annotation, which Strawberry needs to generate the correct GraphQL type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/missing-field-annotation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    name: str\n    age = strawberry.field(\n        name=\"ageInYears\"\n    )  # note that here we don't have a type for this field\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Names for Schema Directive Fields in Strawberry\nDESCRIPTION: This snippet shows how to use strawberry.directive_field to pass custom names to schema directive fields. It demonstrates creating a Sensitive directive with custom field names.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_105\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.schema_directive(locations=[Location.FIELD_DEFINITION])\nclass Sensitive:\n    reason: str = strawberry.directive_field(name=\"as\")\n    real_age_2: str = strawberry.directive_field(name=\"real_age\")\n\n\n@strawberry.type\nclass Query:\n    first_name: str = strawberry.field(\n        directives=[Sensitive(reason=\"GDPR\", real_age_2=\"42\")]\n    )\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Private Field GraphQL Query\nDESCRIPTION: Shows the JSON response returned from the GraphQL query. The response includes the formatted year, string representation, and Python repr of the datetime object, demonstrating how private fields can be used for internal context.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/private.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"now\": {\n      \"format\": \"2022\",\n      \"string\": \"2022-09-03 17:03:04.923068\",\n      \"repr\": \"datetime.datetime(2022, 9, 3, 17, 3, 4, 923068)\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error Formatting in Strawberry GraphQL\nDESCRIPTION: Example showing the improved default logging format for errors in Strawberry GraphQL, which includes more information about where an error originated in a GraphQL request.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_132\n\nLANGUAGE: graphql\nCODE:\n```\nGraphQL request:2:5\n1 | query {\n2 |     example\n  |     ^\n3 | }\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Custom Field Extension (JSON)\nDESCRIPTION: Expected JSON response from the GraphQL query using the custom field extension, showing the uppercase conversion.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"string\": \"THIS IS A TEST!!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DisableValidation Extension in Strawberry Schema\nDESCRIPTION: Shows how to implement the DisableValidation extension when creating a Strawberry GraphQL schema. This configuration disables all query validation, which can improve performance for trusted internal APIs but should be used with caution.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/disable-validation.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.extensions import DisableValidation\n\nschema = strawberry.Schema(\n    Query,\n    extensions=[\n        DisableValidation(),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Argument Filter Type Definition\nDESCRIPTION: Type definition for the argument filter callable used to filter field arguments in tracing data.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/opentelemetry.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nArgFilter = Callable[[Dict[str, Any], GraphQLResolveInfo], Dict[str, Any]]\n```\n\n----------------------------------------\n\nTITLE: Executing Strawberry Upgrade Command for Annotated Unions\nDESCRIPTION: This shell command uses the Strawberry CLI to automatically upgrade the codebase, specifically updating unions to use the new syntax with annotated. It is run in the current directory.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/upgrades.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nstrawberry upgrade annotated-union .\n```\n\n----------------------------------------\n\nTITLE: Error Output Example for Missing Type Annotation\nDESCRIPTION: Example of the formatted error output that Strawberry produces when a field resolver is missing a return type annotation. Shows the rich error formatting with line numbers and error location indicators.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\n  error: Missing annotation for field `hello_world`\n\n       @ demo.py:7\n\n     6 |     @strawberry.field\n  ❱  7 |     def hello_world(self):\n                 ^^^^^^^^^^^ resolver missing annotation\n     8 |         return \"Hello there!\"\n\n\n  To fix this error you can add an annotation, like so `def hello_world(...) -> str:`\n\n  Read more about this error on https://errors.strawberry.rocks/missing-return-annotation\n\n```\n\n----------------------------------------\n\nTITLE: Generated SDL for Single-Member Union Type\nDESCRIPTION: The GraphQL SDL output showing a union type with only one member, a pattern that can be useful for future-proofing schemas.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/union.md#2025-04-21_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nunion MediaItem = Audio\n\ntype Query {\n  latestMedia: MediaItem!\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking with Mypy for Missing Arguments in to_pydantic\nDESCRIPTION: This snippet illustrates that mypy will raise a type checking error if required arguments are not provided to the to_pydantic method. It shows an example of calling to_pydantic without the required 'password' argument, which would result in a mypy complaint.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_95\n\nLANGUAGE: python\nCODE:\n```\nMyModelStrawberry(email=\"\").to_pydantic()\n```\n\n----------------------------------------\n\nTITLE: Exporting GraphQL Schema Using Output Option\nDESCRIPTION: Alternative command to export a GraphQL schema using Strawberry's built-in output option. This creates a schema.graphql file using the --output flag.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/schema-export.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstrawberry export-schema package.module:schema --output schema.graphql\n```\n\n----------------------------------------\n\nTITLE: WrongReturnTypeForUnion Example in Python\nDESCRIPTION: Shows the error when a Union type field is not properly defined with strawberry.field.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/types/exceptions.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass A:\n    a: int\n\n@strawberry.type\nclass B:\n    b: int\n\n@strawberry.type\nclass Query:\n    ab: Union[A, B] = \"ciao\"  # missing `strawberry.field` !\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema for Void Mutation\nDESCRIPTION: The resulting GraphQL schema definition for a void mutation, showing how it is defined with the Void return type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/general/mutations.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  restart: Void\n}\n```\n\n----------------------------------------\n\nTITLE: Running Strawberry update-imports codemod utility for v0.236.0\nDESCRIPTION: This command runs a codemod utility provided by Strawberry to automatically update import statements affected by the file reorganization in v0.236.0.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.236.0.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstrawberry upgrade update-imports\n```\n\n----------------------------------------\n\nTITLE: Defining Query Resolver\nDESCRIPTION: Updated Query class with a resolver to fetch book data using the get_books function.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/index.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    books: typing.List[Book] = strawberry.field(resolver=get_books)\n```\n\n----------------------------------------\n\nTITLE: Starting the GraphQL Server\nDESCRIPTION: Command to start the Strawberry GraphQL server using the defined schema.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/offset-based.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nstrawberry server example:schema\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Root Value in Flask GraphQL View\nDESCRIPTION: Example of extending GraphQLView to provide custom root value for the schema. Demonstrates get_root_value method override.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/flask.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.flask.views import GraphQLView\nfrom flask import Request\n\n\nclass MyGraphQLView(GraphQLView):\n    def get_root_value(self, request: Request):\n        return Query(name=\"Patrick\")\n\n\n@strawberry.type\nclass Query:\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Starting Strawberry GraphQL Server\nDESCRIPTION: Command to start the Strawberry GraphQL debug server using the schema defined in the example.py file.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/connections.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nstrawberry server example:schema\n```\n\n----------------------------------------\n\nTITLE: MaxTokensLimiter Class Definition\nDESCRIPTION: Class signature for the MaxTokensLimiter extension that takes a max_token_count parameter to specify the maximum allowed tokens in a GraphQL document. Tokens include brackets, colons, and words but exclude quotes.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/max-tokens-limiter.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MaxTokensLimiter(max_token_count): ...\n```\n\n----------------------------------------\n\nTITLE: Installing Strawberry FastAPI Dependencies\nDESCRIPTION: Command to install the required dependencies for using Strawberry with FastAPI\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/fastapi.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install 'strawberry-graphql[fastapi]'\n```\n\n----------------------------------------\n\nTITLE: Executing Strawberry Codegen Command\nDESCRIPTION: Shell command to generate types from a GraphQL query using Strawberry's codegen feature.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/codegen/query-codegen.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nstrawberry codegen --schema schema --output-dir ./output -p python query.graphql\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Query\nDESCRIPTION: Sample GraphQL query to fetch books with their titles and authors.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/index.md#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  books {\n    title\n    author\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Process Result in Sanic GraphQL View\nDESCRIPTION: Example showing how to implement the updated process_result function in a custom GraphQLView class. The function is now async and accepts the request as its first argument, followed by the execution result parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.146.0.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.sanic.views import GraphQLView\nfrom strawberry.http import GraphQLHTTPResponse, process_result\nfrom strawberry.types import ExecutionResult\nfrom sanic.request import Request\nfrom graphql.error.graphql_error import format_error as format_graphql_error\n\n\nclass MyGraphQLView(GraphQLView):\n    async def process_result(\n        self, request: Request, result: ExecutionResult\n    ) -> GraphQLHTTPResponse:\n        if result.errors:\n            result.errors = [format_graphql_error(err) for err in result.errors]\n\n        return process_result(data)\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Camel Case in Strawberry Schema\nDESCRIPTION: Shows how to configure a Strawberry GraphQL schema to disable automatic camel casing of field names using the StrawberryConfig option.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_136\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Query:\n    example_field: str = \"Example\"\n\n\nschema = strawberry.Schema(query=Query, config=StrawberryConfig(auto_camel_case=False))\n```\n\n----------------------------------------\n\nTITLE: Installing Strawberry GraphQL CLI\nDESCRIPTION: Command to install Strawberry GraphQL with CLI extra for rich error messages\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_79\n\nLANGUAGE: bash\nCODE:\n```\npip install \"strawberry-graphql[cli]\"\n```\n\n----------------------------------------\n\nTITLE: GraphQL Schema Definition Example\nDESCRIPTION: Sample GraphQL SDL defining a Query type with a user field that returns a User type. The User type has an ID and name field.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/codegen/schema-codegen.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  user: User\n}\n\ntype User {\n  id: ID!\n  name: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Previous encode_json Method Signature in Strawberry GraphQL\nDESCRIPTION: The original method signature for encode_json which was specifically typed to handle GraphQLHTTPResponse objects. This signature is no longer valid as of v0.251.0.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/breaking-changes/0.251.0.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef encode_json(self, response_data: GraphQLHTTPResponse) -> str: ...\n```\n\n----------------------------------------\n\nTITLE: Self Type in Strawberry GraphQL\nDESCRIPTION: Example of using typing_extensions.Self in type definitions\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_82\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Self\n\n@strawberry.type\nclass Node:\n    @strawberry.field\n    def field(self) -> Self:\n        return self\n```\n\n----------------------------------------\n\nTITLE: Importing Async GraphQL View for Flask\nDESCRIPTION: Alternative import for using asynchronous GraphQL view in Flask, useful when implementing dataloaders.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/flask.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.flask.views import AsyncGraphQLView\n```\n\n----------------------------------------\n\nTITLE: Starting the Chalice local development server\nDESCRIPTION: Command to run the Chalice local development server to test the GraphQL API.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/chalice.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nchalice local\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Union Argument Type in Strawberry GraphQL\nDESCRIPTION: This code example demonstrates an invalid implementation that tries to use a Union type as an argument in a GraphQL query, which is not allowed by the GraphQL specification. The code shows the creation of a Union type and attempts to use it as a field argument, which will result in an error.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/invalid-argument-type.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom typing import Union, Annotated\n\n\n@strawberry.type\nclass TypeA:\n    id: strawberry.ID\n\n\nExampleUnion = Annotated[Union[TypeA], strawberry.union(\"ExampleUnion\")]\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def example(self, data: Example) -> str:\n        return \"this is an example\"\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies\nDESCRIPTION: Command to install the OpenTelemetry extension for Strawberry GraphQL via pip.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/opentelemetry.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install 'strawberry-graphql[opentelemetry]'\n```\n\n----------------------------------------\n\nTITLE: Using Strawberry's Upgrade Command for Codebase Migration\nDESCRIPTION: Example showing how to use the new 'upgrade' command to run codemods on your codebase. The example demonstrates upgrading union type definitions to use the new Annotated syntax.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\nstrawberry upgrade annotated-union .\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query\nDESCRIPTION: Example GraphQL query to fetch user data with nested post information.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/codegen/query-codegen.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  user {\n    post {\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hooks for Strawberry Development\nDESCRIPTION: This command installs pre-commit hooks for the Strawberry project, ensuring code quality checks are run before commits.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Fixing Invalid Type for Union Merge Error with Wrapper Type in Python\nDESCRIPTION: This code snippet demonstrates a workaround for including a scalar in a union type by creating a wrapper type (IntWrapper) for the int scalar. This approach allows the creation of a valid union type in GraphQL using Strawberry.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/invalid-type-for-union-merge.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom typing import Union, Annotated\n\n\n@strawberry.type\nclass Example:\n    name: str\n\n\n@strawberry.type\nclass IntWrapper:\n    value: int\n\n\nExampleUnion = Annotated[Union[Example, IntWrapper], strawberry.union(\"ExampleUnion\")]\n\n\n@strawberry.type\nclass Query:\n    field: ExampleUnion\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Configuring MyPy for Strawberry Type-Checking\nDESCRIPTION: This configuration enables Strawberry's MyPy plugin for static type-checking of GraphQL schemas. It should be added to the mypy.ini file.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[mypy]\nplugins = strawberry.ext.mypy_plugin\n```\n\n----------------------------------------\n\nTITLE: Defining a GraphQL Type with AnimalKind in Python\nDESCRIPTION: This snippet defines a GraphQL type using the Strawberry decorator, with a field of type AnimalKind which is imported from an external module.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass AnimalType:\n    kind: AnimalKind\n```\n\n----------------------------------------\n\nTITLE: Next Page Offset Request\nDESCRIPTION: Example of requesting the next page using offset-based pagination.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/pagination/overview.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"limit\": 2,\n  \"offset\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple File Upload Request (Shell)\nDESCRIPTION: cURL command to send multiple file uploads in a single request to a GraphQL endpoint using multipart form data.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/file-upload.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl localhost:8000/graphql \\\n  -F operations='{ \"query\": \"mutation($files: [Upload!]!) { readFiles(files: $files) }\", \"variables\": { \"files\": [null, null] } }' \\\n  -F map='{\"file1\": [\"variables.files.0\"], \"file2\": [\"variables.files.1\"]}' \\\n  -F file1=@b.txt \\\n  -F file2=@c.txt\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in Python Code\nDESCRIPTION: Shows how to highlight specific line ranges (1-4) in a Python code block using the 'lines' attribute.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/_test.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass X:\n    name: str\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Extension Class Definition\nDESCRIPTION: Class signature for the OpenTelemetry extension showing optional argument filter parameter.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/opentelemetry.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass OpenTelemetryExtension(arg_filter=None): ...\n```\n\n----------------------------------------\n\nTITLE: Running Strawberry Server Command\nDESCRIPTION: Example of how to start the Strawberry debug server by running it as a Python module\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_118\n\nLANGUAGE: shell\nCODE:\n```\npython -m strawberry server schema\n```\n\n----------------------------------------\n\nTITLE: Strawberry Schema Generation Command\nDESCRIPTION: Shell command to generate Python code from a GraphQL SDL file using Strawberry's schema-codegen feature.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/codegen/schema-codegen.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nstrawberry schema-codegen schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Configuring Pylance Type Checking in VS Code for Strawberry GraphQL\nDESCRIPTION: Required VS Code settings to enable Pylance as the language server and activate basic type checking mode for Strawberry GraphQL development. These settings enable intelligent code completion and type validation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/editors/vscode.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"python.languageServer\": \"Pylance\",\n  \"python.analysis.typeCheckingMode\": \"basic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Argument Annotation Error in Strawberry GraphQL Python\nDESCRIPTION: This code snippet demonstrates how to fix the 'Missing arguments annotation Error' by adding the appropriate type annotation to the 'name' argument in the 'hello' field.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/missing-arguments-annotations.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self, name: str) -> str:\n        return f\"hello {name}\"\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Installing Uvicorn for ASGI Server\nDESCRIPTION: This command installs Uvicorn, an ASGI server that can be used to run the Strawberry GraphQL application.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/dataloaders.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npip install uvicorn\n```\n\n----------------------------------------\n\nTITLE: Split Code Blocks Comparing Python and GraphQL\nDESCRIPTION: Shows how to display Python code alongside its equivalent GraphQL schema using the CodeGrid component, which allows side-by-side comparison.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/_test.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def ping(self) -> str:\n        return \"pong\"\n```\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  ping: String!\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for UpperCase Extension Example\nDESCRIPTION: A simple GraphQL query to demonstrate the result of the UpperCaseExtension being applied to a field resolver.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/field-extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  string\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Strawberry GraphQL with ASGI Dependencies\nDESCRIPTION: Command to install Strawberry GraphQL with the required dependencies for ASGI integration using pip's extras feature.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_134\n\nLANGUAGE: bash\nCODE:\n```\npip install 'strawberry-graphql[asgi]'\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-commit Hook for Strawberry Code Style\nDESCRIPTION: Command for setting up a pre-commit hook that enforces the Black coding style. This ensures all contributions follow the project's style guidelines before they can be committed.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ poetry run pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Schema Directive Example with GraphQL JSON Scalar\nDESCRIPTION: Example showing how to use schema directives with a JSON scalar type in Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_90\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.scalars import JSON\nfrom strawberry.schema_directive import Location\n\n\n@strawberry.type\nclass Query:\n    example: JSON\n\n\n@strawberry.schema_directive(locations=[Location.SCALAR], name=\"specifiedBy\")\nclass SpecifiedBy:\n    name: str\n\n\nschema = strawberry.Schema(query=Query, types=[SpecifiedBy])\n```\n\n----------------------------------------\n\nTITLE: Composing Federated Schema with Apollo Rover\nDESCRIPTION: Command to use Apollo Rover to compose the federated schema from multiple subgraphs and save it to a file.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Creates prod-schema.graphql or overwrites if it already exists\nrover supergraph compose --config ./supergraph.yaml > supergraph-schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Example RELEASE.md File for Strawberry Pull Requests\nDESCRIPTION: Example of a RELEASE.md file required for pull requests. This file specifies the release type (patch, minor, or major) and describes the changes being made, which is used for automated releases to GitHub and PyPI.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nRelease type: patch\n\nDescription of the changes, ideally with some examples, if adding a new feature.\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface Object for Federation (Python)\nDESCRIPTION: Shows how to use the @strawberry.federation.interface_object decorator to create an interface object type compatible with Apollo Federation.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_68\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.federation.interface_object(keys=[\"id\"])\nclass SomeInterface:\n    id: strawberry.ID\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Some Error in Strawberry GraphQL (Python)\nDESCRIPTION: This code snippet shows an example of how to trigger the 'Some Error' in Strawberry GraphQL. It imports the strawberry module and attempts to create a Schema object, which under certain conditions will raise the error being documented.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/_template.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Implementing Get Results Method in Strawberry GraphQL Extension\nDESCRIPTION: Demonstrates how to implement the get_results method to return additional data in the GraphQL response.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/custom-extensions.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Dict\nfrom strawberry.extensions import SchemaExtension\n\n\nclass MyExtension(SchemaExtension):\n    def get_results(self) -> Dict[str, Any]:\n        return {}\n```\n\n----------------------------------------\n\nTITLE: Typed Async Resolver with Incorrect Return Type\nDESCRIPTION: Example showing a type error case in Strawberry where the resolver function's return type (int) doesn't match the field's declared type (str). This mismatch will now raise a type error during static type checking.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\ndef some_resolver() -> int:\n    return 0\n\n\n@strawberry.type\nclass User:\n    # Note the field being typed as str instead of int\n    name: str = strawberry.field(resolver=some_resolver)\n```\n\n----------------------------------------\n\nTITLE: Starting Apollo Router with Composed Schema\nDESCRIPTION: Command to start the Apollo Router using the composed supergraph schema file.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/guides/federation.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./router --supergraph supergraph-schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Schema Directive Implementation with Strawberry GraphQL\nDESCRIPTION: Demonstrates how to define and use schema directives on input type objects, showing input field validation using range constraints.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_84\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.schema_directive(locations=[Location.INPUT_FIELD_DEFINITION])\nclass RangeInput:\n    min: int\n    max: int\n\n\n@strawberry.input\nclass CreateUserInput:\n    name: str\n    age: int = strawberry.field(directives=[RangeInput(min=1, max=100)])\n```\n\nLANGUAGE: graphql\nCODE:\n```\ndirective @rangeInput(min: Int!, max: Int!) on INPUT_FIELD_DEFINITION\n\ninput Input @sensitiveInput(reason: \"GDPR\") {\n  firstName: String!\n  age: Int! @rangeInput(min: 1, max: 100)\n}\n```\n\n----------------------------------------\n\nTITLE: API Reference for QueryDepthLimiter Class in Strawberry GraphQL\nDESCRIPTION: This snippet provides the API reference for the QueryDepthLimiter class. It shows the class constructor with its parameters: max_depth, callback, and should_ignore.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/query-depth-limiter.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass QueryDepthLimiter(max_depth, callback=None, should_ignore=None): ...\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Custom Field Extension (GraphQL)\nDESCRIPTION: GraphQL query to test the custom field extension that converts the result to uppercase.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_65\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n    string\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Notes to Code Comments in Python\nDESCRIPTION: Demonstrates how to add explanatory notes to specific lines of code using a special comment format with carets pointing to the relevant code.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/_test.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n#      ^^^^^^^^^^\n#      This is a note about this line\n\n\n# this is a standard comment\n@strawberry.type\nclass X:\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Custom JSON Decoding in Strawberry AIOHTTP GraphQL View\nDESCRIPTION: This code shows how to override the decode_json method in GraphQLView to use a custom JSON decoder (orjson in this case) for processing HTTP and WebSocket JSON requests.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/aiohttp.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.aiohttp.views import GraphQLView\nfrom typing import Union\nimport orjson\n\n\nclass MyGraphQLView(GraphQLView):\n    def decode_json(self, data: Union[str, bytes]) -> object:\n        return orjson.loads(data)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Enum Class Example (Incomplete)\nDESCRIPTION: An example showing how to define a Python enum class called AnimalKind that can be used in Strawberry schemas without being decorated with @strawberry.enum. This code snippet is incomplete in the provided text.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# somewhere.py\nfrom enum import Enum\n\n\nclass AnimalKind(Enum):\n    AXOLOTL, CAPYBARA = range(2)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests for Strawberry\nDESCRIPTION: Commands for installing the required dependencies with Poetry and running tests and type checking to ensure code quality. This is a necessary step before contributing code to the project.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ poetry install --with integrations\n$ poetry run pytest\n$ poetry run mypy\n```\n\n----------------------------------------\n\nTITLE: Fragment Query Example\nDESCRIPTION: Example showing how fragments are used in GraphQL queries with corresponding generated Python types.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_49\n\nLANGUAGE: graphql\nCODE:\n```\nfragment Point on Bar {\n   id\n   x\n   y\n}\n\nquery GetPoints {\n  circlePoints {\n    ...Point\n  }\n  squarePoints {\n    ...Point\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nclass Point:\n    id: str\n    x: float\n    y: float\n\nclass GetPointsResult:\n    circle_points: List[Point]\n    square_points: List[Point]\n```\n\n----------------------------------------\n\nTITLE: Highlighting Words in Python Code with Strawberry\nDESCRIPTION: Demonstrates how to highlight specific words like 'strawberry' and 'str' in a code block showing a basic Strawberry type definition.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/_test.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass X:\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Mermaid Sequence Diagram\nDESCRIPTION: Illustrates how to include a Mermaid sequence diagram in documentation to visualize interactions between components.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/_test.md#2025-04-21_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice ->> Bob: Hello Bob, how are you?\n    Bob-->>John: How about you John?\n    Bob--x Alice: I am good thanks!\n    Bob-x John: I am good thanks!\n    Note right of John: Bob thinks a long<br/>long time, so long<br/>that the text does<br/>not fit on a row.\n\n    Bob-->Alice: Checking with John...\n    Alice->John: Yes... John, how are you?\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Type with Pydantic and Key Directive in Python\nDESCRIPTION: This snippet defines a Product class using Strawberry's experimental Pydantic integration. It uses the @strawberry.experimental.pydantic.type decorator to create a GraphQL type from a Pydantic model, and applies the Key directive to specify the 'upc' field as a key. The class also includes a custom resolve_reference method for resolving references based on the UPC.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_74\n\nLANGUAGE: Python\nCODE:\n```\n@strawberry.experimental.pydantic.type(\n    model=ProductInDb, directives=[Key(fields=\"upc\", resolvable=True)]\n)\nclass Product:\n    upc: str\n    name: str\n\n    @classmethod\n    def resolve_reference(cls, upc):\n        return Product(upc=upc, name=\"\")\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Connection Handling in Strawberry GraphQL\nDESCRIPTION: Implementation of a custom WebSocket connection handler for GraphQL subscriptions that demonstrates how to validate connection parameters and customize connection acknowledgment behavior, including support for accepting or rejecting connections with custom payloads.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyGraphQLView(GraphQLView):\n    async def on_ws_connect(self, context: Dict[str, object]):\n        connection_params = context[\"connection_params\"]\n\n        if not isinstance(connection_params, dict):\n            # Reject without a custom graphql-ws error payload\n            raise ConnectionRejectionError()\n\n        if connection_params.get(\"password\") != \"secret:\n            # Reject with a custom graphql-ws error payload\n            raise ConnectionRejectionError({\"reason\": \"Invalid password\"})\n\n        if username := connection_params.get(\"username\"):\n            # Accept with a custom acknowledgement payload\n            return {\"message\": f\"Hello, {username}!\"}\n\n        # Accept without a acknowledgement payload\n        return await super().on_ws_connect(context)\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry Extension for Strawberry GraphQL in Python\nDESCRIPTION: This snippet demonstrates how to implement an OpenTelemetry extension for Strawberry GraphQL. It sets up a tracer provider, adds a console span exporter, and defines a schema with the OpenTelemetryExtension.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_161\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import (\n    ConsoleSpanExporter,\n    SimpleExportSpanProcessor,\n)\n\nimport strawberry\nfrom strawberry.extensions.tracing import OpenTelemetryExtension\n\n\ntrace.set_tracer_provider(TracerProvider())\ntrace.get_tracer_provider().add_span_processor(\n    SimpleExportSpanProcessor(ConsoleSpanExporter())\n)\n\n\n@strawberry.type\nclass User:\n    name: str\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    async def user(self, name: str) -> User:\n        await asyncio.sleep(0.1)\n        return User(name)\n\n\nschema = strawberry.Schema(Query, extensions=[OpenTelemetryExtension])\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Directive with UNSET Fields in Python\nDESCRIPTION: This snippet demonstrates how to define a schema directive with fields that can be UNSET, which affects how they are printed in the GraphQL schema. It includes both the Python definition and shows how it impacts the generated GraphQL schema output.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.input\nclass FooInput:\n    a: str | None = strawberry.UNSET\n    b: str | None = strawberry.UNSET\n\n\n@strawberry.schema_directive(locations=[Location.FIELD_DEFINITION])\nclass FooDirective:\n    input: FooInput\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field(directives=[FooDirective(input=FooInput(a=\"aaa\"))])\n    def foo(self, info) -> str: ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Argument Definitions with get_argument_definition in Strawberry GraphQL\nDESCRIPTION: Shows how to use the get_argument_definition helper function on the Info object to retrieve the StrawberryArgument definition by argument name from inside a resolver or Field Extension. This allows access to argument metadata such as type and description.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def field(\n        self,\n        info,\n        my_input: Annotated[\n            str,\n            strawberry.argument(description=\"Some description\"),\n        ],\n    ) -> str:\n        my_input_def = info.get_argument_definition(\"my_input\")\n        assert my_input_def.type is str\n        assert my_input_def.description == \"Some description\"\n\n        return my_input\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Channels ASGI Application with Strawberry GraphQL\nDESCRIPTION: Sets up the ASGI application with ProtocolTypeRouter to handle both HTTP and WebSocket connections for GraphQL. Includes configuration for both GraphQL HTTP and WebSocket consumers with authentication middleware.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngql_http_consumer = AuthMiddlewareStack(GraphQLHTTPConsumer.as_asgi(schema=schema))\ngql_ws_consumer = GraphQLWSConsumer.as_asgi(schema=schema)\n\nwebsocket_urlpatterns = routing.websocket_urlpatterns + [\n    re_path(r\"graphql\", gql_ws_consumer),\n]\n\napplication = ProtocolTypeRouter(\n    {\n        \"http\": URLRouter(\n            [\n                re_path(\"^graphql\", gql_http_consumer),\n                re_path(\n                    \"^\", django_asgi_app\n                ),  # This might be another endpoint in your app\n            ]\n        ),\n        \"websocket\": AuthMiddlewareStack(URLRouter(websocket_urlpatterns)),\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQLTestClient for Django in Strawberry\nDESCRIPTION: A code example showing how to set up a GraphQLTestClient fixture for pytest when using Strawberry with Django. The client simplifies testing GraphQL queries by hiding HTTP request details and automatically asserting no errors in responses.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_121\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\n\nfrom django.test.client import Client\n\nfrom strawberry.django.test import GraphQLTestClient\n\n\n@pytest.fixture\ndef graphql_client():\n    yield GraphQLTestClient(Client())\n```\n\n----------------------------------------\n\nTITLE: Custom Field Filtering in Strawberry Schema (Python)\nDESCRIPTION: Demonstrates how to use the new get_fields method on the Schema class to filter fields based on custom conditions.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass User:\n    name: str\n    email: str = strawberry.field(metadata={\"tags\": [\"internal\"]})\n\n\n@strawberry.type\nclass Query:\n    user: User\n\n\ndef public_field_filter(field: StrawberryField) -> bool:\n    return \"internal\" not in field.metadata.get(\"tags\", [])\n\n\nclass PublicSchema(strawberry.Schema):\n    def get_fields(\n        self, type_definition: StrawberryObjectDefinition\n    ) -> List[StrawberryField]:\n        return list(filter(public_field_filter, type_definition.fields))\n\n\nschema = PublicSchema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Creating a OneOf Input Type in Strawberry\nDESCRIPTION: Example demonstrating how to create an input type with the @oneOf directive in Strawberry. This ensures that only one field of the input type can be set at a time, following the GraphQL spec.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.input(one_of=True)\nclass ExampleInputTagged:\n    a: str | None = strawberry.UNSET\n    b: int | None = strawberry.UNSET\n```\n\n----------------------------------------\n\nTITLE: Creating a MaxQueryLength Schema Extension\nDESCRIPTION: Example of a schema extension that aborts operations with queries exceeding a maximum length. The extension raises a StrawberryGraphQLError during the on_operation phase if the query is too large.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass MaxQueryLengthExtension(SchemaExtension):\n    MAX_QUERY_LENGTH = 8192\n\n    async def on_operation(self):\n        if len(self.execution_context.query) > self.MAX_QUERY_LENGTH:\n            raise StrawberryGraphQLError(message=\"Query too large\")\n        yield\n```\n\n----------------------------------------\n\nTITLE: Using Private Fields in Strawberry GraphQL Type Definition in Python\nDESCRIPTION: This code shows how to use the strawberry.Private type to mark fields as private in a Strawberry GraphQL schema. It defines a User type with a private age field and a public age_in_months field.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_162\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass User:\n    age: strawberry.Private[int]\n\n    @strawberry.field\n    def age_in_months(self) -> int:\n        return self.age * 12\n```\n\n----------------------------------------\n\nTITLE: Using Info Type with Context in Strawberry (Python)\nDESCRIPTION: Demonstrates how to use the Info type with context in Strawberry GraphQL, including the new export from the main module and default TypeVars.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\nfrom typing import TypedDict\n\n\nclass Context(TypedDict):\n    user_id: str\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def info(self, info: strawberry.Info[Context]) -> str:\n        return info.context[\"user_id\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Values with Deprecation in Strawberry\nDESCRIPTION: This example shows how to define enum values in Strawberry using strawberry.enum_value, including the ability to add a deprecation reason for specific enum values.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_107\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.enum\nclass IceCreamFlavour(Enum):\n    VANILLA = strawberry.enum_value(\"vanilla\")\n    STRAWBERRY = strawberry.enum_value(\"strawberry\", deprecation_reason=\"We ran out\")\n    CHOCOLATE = \"chocolate\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Flask Response Object in Strawberry Field Resolver\nDESCRIPTION: Shows how to access the Flask Response object within a Strawberry field resolver using the info.context. This allows modifying the response, such as setting the status code.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_111\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.field\ndef response_check(self, info: strawberry.Info) -> bool:\n    response: Response = info.context[\"response\"]\n    response.status_code = 401\n\n    return True\n```\n\n----------------------------------------\n\nTITLE: Extending Strawberry Types with Additional Fields\nDESCRIPTION: This snippet shows how to extend a Strawberry type created from a Pydantic model with additional fields not present in the original model.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/pydantic.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom pydantic import BaseModel\n\nfrom .models import User\n\n\nclass User(BaseModel):\n    id: int\n    name: str\n\n\n@strawberry.experimental.pydantic.type(model=User)\nclass User:\n    id: strawberry.auto\n    name: strawberry.auto\n    age: int\n```\n\n----------------------------------------\n\nTITLE: Using Generic Unions with Strawberry GraphQL Types\nDESCRIPTION: Shows how to implement generic unions with strawberry.union, allowing for flexible type handling in GraphQL queries.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass ObjectQueries[T]:\n    @strawberry.field\n    def by_id(\n        self, id: strawberry.ID\n    ) -> Union[T, Annotated[NotFoundError, strawberry.union(\"ByIdResult\")]]: ...\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def some_type_queries(self, id: strawberry.ID) -> ObjectQueries[SomeType]: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring ASGI for Strawberry GraphQL\nDESCRIPTION: Example of setting up a Starlette ASGI application with Strawberry GraphQL. Shows how to add both HTTP and WebSocket routes for GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_178\n\nLANGUAGE: python\nCODE:\n```\nfrom strawberry.asgi import GraphQL\nfrom starlette.applications import Starlette\n\ngraphql_app = GraphQL(schema_module.schema, debug=True)\n\napp = Starlette(debug=True)\napp.add_route(\"/graphql\", graphql_app)\napp.add_websocket_route(\"/graphql\", graphql_app)\n```\n\n----------------------------------------\n\nTITLE: Custom Root Value Implementation\nDESCRIPTION: Shows how to provide a custom root value for the GraphQL schema by extending the GraphQLView class. Demonstrates implementation of get_root_value method.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/quart.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nfrom strawberry.quart.views import GraphQLView\nfrom quart import Request\n\n\nclass MyGraphQLView(GraphQLView):\n    async def get_root_value(self, request: Request):\n        return Query(name=\"Patrick\")\n\n\n@strawberry.type\nclass Query:\n    name: str\n```\n\n----------------------------------------\n\nTITLE: Correct Enum Definition in Strawberry GraphQL\nDESCRIPTION: Example showing the correct way to define an enum using the @strawberry.enum decorator, which properly creates a GraphQL enum type.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/errors/object-is-not-an-enum.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.enum\nclass NotAnEnum:\n    A = \"A\"\n\n\n@strawberry.type\nclass Query:\n    field: NotAnEnum\n\n\nschema = strawberry.Schema(query=Query)\n```\n\n----------------------------------------\n\nTITLE: Defining Union Types with Generic Connections in Python\nDESCRIPTION: Demonstrates how to define union types inside generic connections using Strawberry decorators.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_153\n\nLANGUAGE: python\nCODE:\n```\n@strawberry.type\nclass Dog:\n    name: str\n\n\n@strawberry.type\nclass Cat:\n    name: str\n\n\n@strawberry.type\nclass Connection(Generic[T]):\n    nodes: List[T]\n\n\n@strawberry.type\nclass Query:\n    connection: Connection[Union[Dog, Cat]]\n```\n\n----------------------------------------\n\nTITLE: Disabling Query Validation in Strawberry Schema\nDESCRIPTION: Shows how to create a Strawberry schema with query validation disabled by setting validate_queries to False.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_152\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\n\n\n@strawberry.type\nclass Query:\n    @strawberry.field\n    def hello(self) -> str:\n        return \"Hello\"\n\n\nschema = strawberry.Schema(Query, validate_queries=validate_queries)\n```\n\n----------------------------------------\n\nTITLE: PyInstrument Class API Definition\nDESCRIPTION: API reference showing the PyInstrument class definition with its configurable report_path parameter. The default path for the HTML report is 'pyinstrument.html'.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions/pyinstrument.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass PyInstrument(report_Path=Path(\"pyinstrument.html\")): ...\n```\n\n----------------------------------------\n\nTITLE: Rendering Extension List Component in Markdown\nDESCRIPTION: This code snippet renders a custom component called ExtensionsList, which likely displays a list of available extensions for Strawberry GraphQL.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ExtensionsList />\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies for Django Integration\nDESCRIPTION: Commands to install the required OpenTelemetry packages for integrating with Django applications.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/operations/tracing.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-api\npip install opentelemetry-sdk\npip install opentelemetry-exporter-otlp\n```\n\n----------------------------------------\n\nTITLE: Creating a Union Type with Keyword Arguments\nDESCRIPTION: Shows how to create a union type using strawberry.union with keyword arguments.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/CHANGELOG.md#2025-04-21_snippet_158\n\nLANGUAGE: python\nCODE:\n```\nMyUnion = strawberry.union(types=(TypeA, TypeB), name=\"MyUnion\")\n```\n\n----------------------------------------\n\nTITLE: Installing Strawberry GraphQL with Channels Support\nDESCRIPTION: Command to install Strawberry GraphQL with Channels support using pip.\nSOURCE: https://github.com/strawberry-graphql/strawberry/blob/main/docs/integrations/channels.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install 'strawberry-graphql[channels]'\n```"
  }
]