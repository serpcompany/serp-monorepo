[
  {
    "owner": "telerik",
    "repo": "kendo-react.git",
    "content": "TITLE: Configuring Enzyme with Jest in setupTests.js\nDESCRIPTION: This snippet shows how to configure Enzyme with the React 16 adapter in a setupTests.js file. This setup enables Enzyme to work with React components for testing.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\n```\n\n----------------------------------------\n\nTITLE: Express Server Setup for Create React App Deployment\nDESCRIPTION: This JavaScript code sets up an Express server to serve a Create React App production build. It demonstrates how to serve static assets and handle the root route to serve the main HTML file.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'build')));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Splitting in React\nDESCRIPTION: Shows how to use dynamic imports for code splitting in a React component, allowing for on-demand loading of modules.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  handleClick = () => {\n    import('./moduleA')\n      .then(({ moduleA }) => {\n        // Use moduleA\n      })\n      .catch(err => {\n        // Handle failure\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Load</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Describing Kendo React Data Grid ASP.NET Core Project in Markdown\nDESCRIPTION: This Markdown snippet provides an overview of the project, explaining its purpose, technologies used, and key features. It also mentions an alternative example using an older .NET version with Grid editing capabilities.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Kendo React Data Grid ASP.NET Core\n\nThis repository contains a sample application showcasing how to implement common data operations for the KendoReact Data Grid with an ASP.NET Core backend. The project focuses on how data operations like paging, sorting, filtering, and grouping are triggered on the client and can be handled on the sever-side of things. The ultimate goal is to showcase a full-stack project and demystify the client and server-side interactions with an advanced UI component like the data grid.\n\nThis example is made with .NET version 6.\n\nWe have another example made with a older version of .NET and ASP.NET Core which is also showing a Grid with editing. You can find it here:  https://github.com/telerik/kendo-react-demo-aspnetcore-data\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Editor Integration in React Project\nDESCRIPTION: This snippet shows how to configure ESLint for editor integration in a React project. It extends the 'react-app' ESLint configuration.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"extends\": \"react-app\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic React Button Component\nDESCRIPTION: Demonstrates how to create a simple React component called Button using ES6 class syntax and export it as a default export.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don't forget to use export default!\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in a React Component\nDESCRIPTION: Shows how to import and use CSS styles directly in a React component file using Webpack's CSS handling capabilities.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin\nDESCRIPTION: Setup for integrating React-specific ESLint rules using eslint-plugin-react. Includes React version configuration and enables recommended rules along with JSX runtime rules.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-project-tracker-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from 'eslint-plugin-react'\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to run the application in development mode, which will be accessible at http://localhost:3000 in the browser with hot-reloading enabled.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-finance-portfolio/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: React Component Smoke Test\nDESCRIPTION: Basic smoke test example for React components using ReactDOM to verify rendering.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Jest Test Example\nDESCRIPTION: Example of writing a basic test using Jest's expect assertions to test a sum function.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Smoke Test with Enzyme\nDESCRIPTION: This code demonstrates how to write a simple smoke test using Enzyme's shallow rendering. It verifies that a React component renders without crashing.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin for TypeScript in Vite\nDESCRIPTION: This snippet demonstrates how to configure ESLint with the React plugin for a TypeScript project using Vite. It sets the React version, adds the React plugin, and enables recommended rules for React and JSX runtime.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-editor-strict-csp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from 'eslint-plugin-react'\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in JSX Components\nDESCRIPTION: Demonstrates how to access environment variables within a React component's render method.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_33\n\nLANGUAGE: jsx\nCODE:\n```\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript ESLint Parser Options\nDESCRIPTION: Configuration for enabling type-aware lint rules in ESLint by setting up parser options with TypeScript config files. Specifies project files and root directory for TypeScript configuration.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-project-tracker-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Component Content with Jest Assertions\nDESCRIPTION: This snippet shows how to test specific component output using Enzyme shallow rendering combined with Jest's built-in assertion matchers. It checks if a component contains specific elements.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Coverage in package.json\nDESCRIPTION: Example of configuring Jest coverage settings in package.json. This includes settings for which files to collect coverage from, coverage thresholds, and report formats.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"your-package\",\n  \"jest\": {\n    \"collectCoverageFrom\" : [\n      \"src/**/*.{js,jsx}\",\n      \"!<rootDir>/node_modules/\",\n      \"!<rootDir>/path/to/dir/\"\n    ],\n    \"coverageThreshold\": {\n      \"global\": {\n        \"branches\": 90,\n        \"functions\": 90,\n        \"lines\": 90,\n        \"statements\": 90\n      }\n    },\n    \"coverageReporters\": [\"text\"],\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables in JavaScript\nDESCRIPTION: Demonstrates how to properly access global variables defined in external scripts by explicitly reading them from the window object, which helps avoid linter errors.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nconst $ = window.$;\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server with npm\nDESCRIPTION: This command starts the React development server. It runs the app in development mode and opens it in the browser at http://localhost:3000.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-coffee-warehouse/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Using jest-enzyme for Simplified Test Assertions\nDESCRIPTION: This example demonstrates a simplified test assertion using the jest-enzyme library, which provides more readable matchers specifically designed for testing React components.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(wrapper).toContainReact(welcome)\n```\n\n----------------------------------------\n\nTITLE: Apache .htaccess Configuration for Create React App\nDESCRIPTION: This Apache .htaccess configuration enables client-side routing support for a Create React App project deployed on an Apache HTTP Server, ensuring all routes are directed to index.html.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_79\n\nLANGUAGE: apache\nCODE:\n```\n    Options -MultiViews\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.html [QSA,L]\n```\n\n----------------------------------------\n\nTITLE: Starting Production Server\nDESCRIPTION: Command to start the Next.js application in production mode after building.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/coffee-warehouse-nextjs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running KendoReact Next.js Example\nDESCRIPTION: Commands to install dependencies and start the development server for the KendoReact Next.js example project. These steps are essential for setting up and running the application locally.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-nextjs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n1) npm install\n2) npm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Automatic Code Formatting\nDESCRIPTION: These JSON snippets show how to configure package.json to use lint-staged and prettier for automatic code formatting before commits in a React project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n+   \"precommit\": \"lint-staged\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n```\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n    // ...\n  },\n+ \"lint-staged\": {\n+   \"src/**/*.{js,jsx,json,css}\": [\n+     \"prettier --single-quote --write\",\n+     \"git add\"\n+   ]\n+ },\n  \"scripts\": {\n```\n\n----------------------------------------\n\nTITLE: Server Data Injection Template\nDESCRIPTION: HTML template showing how to inject server data into the page through a global variable.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Starting the React Client Application\nDESCRIPTION: Command to start the React client application using the npm start script.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-nodejs-express/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding Deployment Scripts for GitHub Pages in package.json\nDESCRIPTION: This snippet demonstrates how to add 'predeploy' and 'deploy' scripts to the package.json file for deploying a React application to GitHub Pages using the gh-pages package.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_86\n\nLANGUAGE: diff\nCODE:\n```\n\"scripts\": {\n+   \"predeploy\": \"npm run build\",\n+   \"deploy\": \"gh-pages -d build\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic API Proxy in package.json\nDESCRIPTION: Sets up a simple proxy in package.json to forward all unknown requests to a specified backend server during development. This avoids CORS issues when the frontend and backend are on different ports.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n  \"proxy\": \"http://localhost:4000\",\n```\n\n----------------------------------------\n\nTITLE: Installing and Running KendoReact Dashboard\nDESCRIPTION: This snippet provides bash commands for setting up and running a KendoReact dashboard project. It covers installing dependencies, starting a development server with hot reload, and building for production.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-sales-dashboard/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install dependencies\nnpm install\n# serve with hot reload at localhost:3000\nnpm start\n# build for production with minification\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies for Automatic Code Formatting\nDESCRIPTION: This snippet shows the npm and yarn commands to install husky, lint-staged, and prettier for automatic code formatting in a React project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save husky lint-staged prettier\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add husky lint-staged prettier\n```\n\n----------------------------------------\n\nTITLE: Starting the Server\nDESCRIPTION: Command to start the Node.js server application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/ui/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the Next.js development server. The application will be available at http://localhost:3000.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/coffee-warehouse-nextjs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Proxy in package.json\nDESCRIPTION: Demonstrates how to set up a proxy specifically for WebSocket connections in package.json, allowing WebSocket requests to be forwarded to a compatible WebSocket server.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    \"/socket\": {\n      // Your compatible WebSocket server\n      \"target\": \"ws://<socket_url>\",\n      // Tell http-proxy-middleware that this is a WebSocket proxy.\n      // Also allows you to proxy WebSocket requests without an additional HTTP request\n      // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Travis CI Configuration for React Testing\nDESCRIPTION: A basic .travis.yml configuration file for setting up Travis CI with a React project. It includes Node.js version, caching for node_modules, and commands to run for build and test.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_61\n\nLANGUAGE: yaml\nCODE:\n```\nlanguage: node_js\nnode_js:\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm run build\n  - npm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Proxy with Path Matching in package.json\nDESCRIPTION: Sets up a more advanced proxy configuration in package.json that allows specifying different targets for different paths, and supports WebSocket connections.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    \"/api\": {\n      \"target\": \"<url>\",\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Client Application for KendoReact Project (npm)\nDESCRIPTION: This command runs the client application on localhost:3000 for the KendoReact project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-ssr/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the KendoReact with TailwindCSS Project\nDESCRIPTION: Basic commands to install dependencies and start the project that demonstrates KendoReact components in Unstyled mode with TailwindCSS styling.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-unstyled-tailwind/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n1. npm i\n2. npm start\n```\n\n----------------------------------------\n\nTITLE: Writing Flexbox CSS for Autoprefixing\nDESCRIPTION: Demonstrates how to write modern CSS (like flexbox) that will be automatically vendor-prefixed by Autoprefixer in the build process.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and using an image in a React component\nDESCRIPTION: Example of importing an image file in a React component and using it as the src attribute of an img element. Webpack handles the import and provides the correct path.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\n----------------------------------------\n\nTITLE: Starting the UI Application\nDESCRIPTION: Command to start the client-side React application that displays the KendoReact components.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Using basename with React Router for Subdirectory Deployment\nDESCRIPTION: This JavaScript code demonstrates how to use the 'basename' prop with React Router's BrowserRouter component to support deploying a Create React App to a subdirectory.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\n<BrowserRouter basename=\"/calendar\"/>\n<Link to=\"/today\"/> // renders <a href=\"/calendar/today\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Homepage in package.json for Relative Paths\nDESCRIPTION: This JSON snippet shows how to set the 'homepage' field in package.json to specify a relative path for deploying a Create React App project to a subdirectory of a domain.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\n----------------------------------------\n\nTITLE: Displaying React Project Folder Structure\nDESCRIPTION: Shows the typical folder structure of a React project created with Create React App, including key files and directories.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n```\n\n----------------------------------------\n\nTITLE: Installing and Running KendoReact Application\nDESCRIPTION: Basic npm commands for installing dependencies and running the application in different modes. Includes commands for building, development server, and linting.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-e-commerce-astro-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Configuring Netlify Redirects for Client-Side Routing\nDESCRIPTION: This snippet shows the content of the '_redirects' file needed to support client-side routing (pushState) when deploying a React application to Netlify. It ensures all routes are redirected to index.html.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_87\n\nLANGUAGE: plaintext\nCODE:\n```\n/*  /index.html  200\n```\n\n----------------------------------------\n\nTITLE: Importing Third-Party Assertion Libraries\nDESCRIPTION: Example of importing third-party assertion libraries like Chai and Sinon for use in React tests, which can be useful for developers with existing test code using these libraries.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for KendoReact Project\nDESCRIPTION: Command to install project dependencies using npm package manager.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/ecommerce-jewellery-store/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Kendo React Demo App\nDESCRIPTION: Commands for installing dependencies and starting the Kendo React demo application using either npm or yarn package manager.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-stackblitz-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n1) npm(or yarn) install\n2) npm start\n```\n\n----------------------------------------\n\nTITLE: Updating package.json scripts for parallel CSS and JS builds\nDESCRIPTION: Diff showing the modification of start and build scripts in package.json to run CSS preprocessing and React scripts in parallel using npm-run-all.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n     \"build-css\": \"node-sass-chokidar src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build-js\": \"react-scripts build\",\n+    \"build\": \"npm-run-all build-css build-js\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in HTML Templates\nDESCRIPTION: Shows how to reference environment variables in the public/index.html file using a special syntax.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_34\n\nLANGUAGE: html\nCODE:\n```\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Styles for a Button\nDESCRIPTION: Demonstrates how to define CSS styles for a Button component in a separate CSS file.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.Button {\n  padding: 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for KendoReact Project (npm)\nDESCRIPTION: This command installs all necessary packages and their dependencies for the KendoReact project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-ssr/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Proxies with Regular Expressions\nDESCRIPTION: Shows how to configure multiple proxy paths in package.json using regular expressions to match different request patterns and route them to different backend targets.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // ...\n  \"proxy\": {\n    // Matches any request starting with /api\n    \"/api\": {\n      \"target\": \"<url_1>\",\n      \"ws\": true\n      // ...\n    },\n    // Matches any request starting with /foo\n    \"/foo\": {\n      \"target\": \"<url_2>\",\n      \"ssl\": true,\n      \"pathRewrite\": {\n        \"^/foo\": \"/foo/beta\"\n      }\n      // ...\n    },\n    // Matches /bar/abc.html but not /bar/sub/def.html\n    \"/bar/[^/]*[.]html\": {\n      \"target\": \"<url_3>\",\n      // ...\n    },\n    // Matches /baz/abc.html and /baz/sub/def.html\n    \"/baz/.*/.*[.]html\": {\n      \"target\": \"<url_4>\"\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Between Multiple Moment.js Locales in React\nDESCRIPTION: Code snippet demonstrating how to import and switch between multiple Moment.js locales in a React application. This example imports French and Spanish locales and switches to French.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_90\n\nLANGUAGE: js\nCODE:\n```\nimport moment from 'moment';\nimport 'moment/locale/fr';\nimport 'moment/locale/es';\n\n// ...\n\nmoment.locale('fr');\n```\n\n----------------------------------------\n\nTITLE: Configuring Homepage for GitHub Pages Deployment in package.json\nDESCRIPTION: This snippet shows how to add the 'homepage' field to the package.json file for deploying a React application to GitHub Pages. It specifies the root URL for the built HTML file.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_85\n\nLANGUAGE: js\nCODE:\n```\n\"homepage\": \"https://myusername.github.io/my-app\",\n```\n\n----------------------------------------\n\nTITLE: Deploying React Application to Firebase Hosting\nDESCRIPTION: This snippet demonstrates the output of running 'firebase deploy' command to deploy a React application to Firebase Hosting. It shows the deployment process and provides the hosting URL.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_84\n\nLANGUAGE: sh\nCODE:\n```\n=== Deploying to 'example-app-fd690'...\n\ni  deploying database, hosting\n✔  database: rules ready to deploy.\ni  hosting: preparing build directory for upload...\nUploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully\n✔  hosting: 8 files uploaded successfully\ni  starting release process (may take several minutes)...\n\n✔  Deploy complete!\n\nProject Console: https://console.firebase.google.com/project/example-app-fd690/overview\nHosting URL: https://example-app-fd690.firebaseapp.com\n```\n\n----------------------------------------\n\nTITLE: Deploying Create React App with Static Server\nDESCRIPTION: This shell script demonstrates how to install and use the 'serve' package to deploy a Create React App project as a static site, serving the production build on port 5266.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_76\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g serve\nserve -s build\n```\n\n----------------------------------------\n\nTITLE: Creating a localStorage Mock in setupTests.js\nDESCRIPTION: This example shows how to create a mock for the localStorage browser API in setupTests.js. This is useful when testing components that interact with localStorage.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn()\n};\nglobal.localStorage = localStorageMock\n```\n\n----------------------------------------\n\nTITLE: Adding Source Map Explorer Script to package.json\nDESCRIPTION: This code diff shows how to add the analyze script to the package.json file, enabling the use of source-map-explorer to analyze the production build of a Create React App project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n  \"scripts\": {\n+    \"analyze\": \"source-map-explorer build/static/js/main.*\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n----------------------------------------\n\nTITLE: Installing React Router Dependency\nDESCRIPTION: These commands demonstrate how to install React Router as a dependency using npm or yarn in a React project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-router\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-router\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Hosting for React Application\nDESCRIPTION: This snippet shows the output of running 'firebase init' command to set up Firebase Hosting for a React application. It includes project setup, database rules configuration, and hosting setup.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_83\n\nLANGUAGE: sh\nCODE:\n```\n=== Project Setup\n\nFirst, let's associate this project directory with a Firebase project.\nYou can create multiple project aliases by running firebase use --add,\nbut for now we'll just set up a default project.\n\n? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n=== Database Setup\n\nFirebase Realtime Database Rules allow you to define how your data should be\nstructured and when your data can be read from and written to.\n\n? What file should be used for Database Rules? database.rules.json\n✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\nFuture modifications to database.rules.json will update Database Rules when you run\nfirebase deploy.\n\n=== Hosting Setup\n\nYour public directory is the folder (relative to your project directory) that\nwill contain Hosting assets to uploaded with firebase deploy. If you\nhave a build process for your assets, use your build's output directory.\n\n? What do you want to use as your public directory? build\n? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n✔  Wrote build/index.html\n\ni  Writing configuration info to firebase.json...\ni  Writing project information to .firebaserc...\n\n✔  Firebase initialization complete!\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: Command to build the React app for production, creating an optimized bundle in the 'build' folder.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS in Unix Development Environment\nDESCRIPTION: Command to enable HTTPS for React development server on Linux/macOS using Bash.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS=true npm start\n```\n\n----------------------------------------\n\nTITLE: Creating a Derived React Component with Import\nDESCRIPTION: Shows how to create a DangerButton component that imports and uses the Button component, demonstrating component composition in React.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n```\n\n----------------------------------------\n\nTITLE: Importing Bootstrap CSS in React Application\nDESCRIPTION: Shows how to import Bootstrap CSS in the entry point file (index.js) of a React application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Builds the React app for production, creating an optimized bundle in the 'build' folder ready for deployment.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-grid-live-data/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle with npm\nDESCRIPTION: This command builds the app for production, creating an optimized bundle in the 'build' folder.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-coffee-warehouse/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debugger for React Application\nDESCRIPTION: This JSON configuration sets up the Chrome debugger in Visual Studio Code for a React application running on localhost:3000. It includes source map path overrides for webpack.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [{\n    \"name\": \"Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"url\": \"http://localhost:3000\",\n    \"webRoot\": \"${workspaceRoot}/src\",\n    \"sourceMapPathOverrides\": {\n      \"webpack:///src/*\": \"${webRoot}/*\"\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Reactstrap Components\nDESCRIPTION: Demonstrates how to import specific React Bootstrap components for use in a React application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_31\n\nLANGUAGE: js\nCODE:\n```\nimport { Navbar, Button } from 'reactstrap';\n```\n\n----------------------------------------\n\nTITLE: Building KendoReact Grid Demo for Production\nDESCRIPTION: Bundles, minifies, and optimizes the KendoReact Grid demo project for deployment using best practices.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-homepage-demo/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1. npm build\n```\n\n----------------------------------------\n\nTITLE: Importing Sass files with relative and node_modules paths\nDESCRIPTION: Example of importing Sass files using both relative paths and from node_modules, enabled by the --include-path option in the build command.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_20\n\nLANGUAGE: scss\nCODE:\n```\n@import 'styles/_colors.scss'; // assuming a styles directory under src/\n@import 'nprogress/nprogress'; // importing a css file from the nprogress node module\n```\n\n----------------------------------------\n\nTITLE: Importing Moment.js Locale in React\nDESCRIPTION: Example of how to import a specific Moment.js locale in a React application. This code imports the French locale to be used with Moment.js.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_89\n\nLANGUAGE: js\nCODE:\n```\nimport moment from 'moment';\nimport 'moment/locale/fr';\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: Command to build the React application for production deployment. It creates optimized, minified bundle files with hashed filenames in the build folder.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-file-manager/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting KendoReact Grid Demo Application\nDESCRIPTION: Starts the KendoReact Grid demo application on the development server, accessible at localhost:3000/kendo-react-homepage-demo.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-homepage-demo/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## 2. npm start\n```\n\n----------------------------------------\n\nTITLE: Running tests with npm test\nDESCRIPTION: Launches the test runner in interactive watch mode. This command is used to run the test suite for the React application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-admin-dashboard/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Exporting a Module in JavaScript\nDESCRIPTION: Demonstrates how to export a single value from a JavaScript module using named export syntax.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst moduleA = 'Hello';\n\nexport { moduleA };\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to build the application for production, creating an optimized bundle in the build folder with minified files and hashed filenames.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-finance-portfolio/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-all for parallel script execution\nDESCRIPTION: Command to install the npm-run-all package, which allows running multiple npm scripts in parallel or sequentially.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save npm-run-all\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite\nDESCRIPTION: Command to launch the test runner in interactive watch mode for running React component tests.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Building production bundle with npm run build\nDESCRIPTION: Builds the app for production to the 'build' folder. It bundles React in production mode and optimizes the build for the best performance. The output is minified and filenames include hashes.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-admin-dashboard/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building KendoReact Application for Production\nDESCRIPTION: npm script to build the application for production usage.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/ecommerce-jewellery-store/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Environment Variables in Bash\nDESCRIPTION: Command to set temporary environment variables in Bash (Linux/macOS) before starting a React application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies\nDESCRIPTION: Command to install the necessary npm packages for the server application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Disabling Service Worker Registration - JavaScript\nDESCRIPTION: Code modification to unregister service workers in a React application by importing and calling the unregister function.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nimport { unregister } from './registerServiceWorker';\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme Testing Utilities\nDESCRIPTION: NPM command for installing Enzyme and related dependencies for React component testing.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_49\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save enzyme enzyme-adapter-react-16 react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server with npm\nDESCRIPTION: Command to start the React application in development mode. It runs a local development server that enables features like hot reloading when code changes are made.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-file-manager/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Explorer in Create React App (Yarn)\nDESCRIPTION: This snippet demonstrates how to install the source-map-explorer package using Yarn as an alternative to npm for analyzing JavaScript bundle sizes in a Create React App project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_74\n\nLANGUAGE: sh\nCODE:\n```\nyarn add source-map-explorer\n```\n\n----------------------------------------\n\nTITLE: Installing jest-enzyme with npm\nDESCRIPTION: Command to install the jest-enzyme package using npm, which provides additional Jest matchers for testing React components with Enzyme.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save jest-enzyme\n```\n\n----------------------------------------\n\nTITLE: Preparing KendoReact Grid Demo for Deployment\nDESCRIPTION: Runs the build script to prepare the KendoReact Grid demo application for deployment.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-homepage-demo/README.md#2025-04-21_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n## 4. npm predeploy\n```\n\n----------------------------------------\n\nTITLE: Running Tests with CI Flag in Unix/Linux\nDESCRIPTION: Command to run tests in CI mode on Unix/Linux systems. Setting the CI environment variable ensures tests run once without the interactive watcher.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\nCI=true npm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Express for Client-Side Routing in Create React App\nDESCRIPTION: This code diff shows how to modify an Express server configuration to support client-side routing in a Create React App project, ensuring that all routes serve the main index.html file.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n app.use(express.static(path.join(__dirname, 'build')));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, 'build', 'index.html'));\n });\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json to Disable jsdom\nDESCRIPTION: This diff shows how to modify the test script in package.json to remove the jsdom environment. This can speed up tests that don't require a DOM environment.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_66\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n-   \"test\": \"react-scripts test --env=jsdom\"\n+   \"test\": \"react-scripts test\"\n\n```\n\n----------------------------------------\n\nTITLE: Importing jest-enzyme in setupTests.js\nDESCRIPTION: This line imports jest-enzyme in the setupTests.js file to make its matchers available in all test files without having to import it in each one.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'jest-enzyme';\n```\n\n----------------------------------------\n\nTITLE: Running Builds with CI Flag in Windows\nDESCRIPTION: Command to run the build process in CI mode on Windows using cmd.exe. The CI environment variable enables linter warning checks during build.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_63\n\nLANGUAGE: cmd\nCODE:\n```\nset CI=true&&npm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Homepage for Relative Asset Paths\nDESCRIPTION: This JSON snippet shows how to set the 'homepage' field in package.json to '.' to ensure all asset paths are relative to index.html, allowing flexible deployment of a Create React App project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_82\n\nLANGUAGE: json\nCODE:\n```\n  \"homepage\": \".\",\n```\n\n----------------------------------------\n\nTITLE: Installing Enzyme with Yarn\nDESCRIPTION: Yarn command for installing Enzyme and related dependencies for React component testing.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_50\n\nLANGUAGE: sh\nCODE:\n```\nyarn add enzyme enzyme-adapter-react-16 react-test-renderer\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server\nDESCRIPTION: Command to start the React development server, which runs the app in development mode and opens it in the browser.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Command to install all project dependencies using npm. This should be run before starting the application for the first time.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/coffee-warehouse-nextjs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Referencing public assets in JavaScript\nDESCRIPTION: Example of referencing a file from the public folder in a React component using process.env.PUBLIC_URL, which provides the correct path to public assets.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in \"Adding Images and Fonts\" above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing jest-enzyme with yarn\nDESCRIPTION: Command to install the jest-enzyme package using yarn as an alternative to npm.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nyarn add jest-enzyme\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server\nDESCRIPTION: Starts the React application in development mode. It opens the app in the browser and enables hot-reloading for changes.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-grid-live-data/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Client Dependencies with npm\nDESCRIPTION: Command to install the required npm packages for the React client application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-nodejs-express/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Tests with CI Flag in Windows\nDESCRIPTION: Command to run tests in CI mode on Windows using cmd.exe. The CI environment variable forces tests to run once rather than in watch mode.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_62\n\nLANGUAGE: cmd\nCODE:\n```\nset CI=true&&npm test\n```\n\n----------------------------------------\n\nTITLE: Running development server with npm start\nDESCRIPTION: Starts the development server for the React application. It runs the app in development mode and opens it in the browser at http://localhost:3000. The page will automatically reload on changes.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-admin-dashboard/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for KendoReact Grid Demo\nDESCRIPTION: Installs all necessary packages and their dependencies for the KendoReact Grid demo application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-homepage-demo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 1. npm install\n```\n\n----------------------------------------\n\nTITLE: Running Linting Checks\nDESCRIPTION: Command to run linting checks on the codebase to identify potential errors or code style issues.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/coffee-warehouse-nextjs/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm\nDESCRIPTION: Command to install all necessary packages and dependencies for the KendoReact sample application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-finance-portfolio/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Referencing public assets in HTML\nDESCRIPTION: Example of referencing a file from the public folder in an HTML file using the %PUBLIC_URL% placeholder, which gets replaced with the correct path during build.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n```\n\n----------------------------------------\n\nTITLE: Running Tests for KendoReact Grid Demo\nDESCRIPTION: Launches the test runner in interactive watch mode for the KendoReact Grid demo, allowing keyboard control of Jest.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-homepage-demo/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## 2. npm test\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript in Vite\nDESCRIPTION: This snippet shows how to configure the top-level parserOptions property in the ESLint configuration for a TypeScript project using Vite. It specifies the TypeScript configuration files to use and the root directory for the TypeScript compiler.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-editor-strict-csp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to launch the test runner in interactive watch mode for testing the application components.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-finance-portfolio/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Disabling Analytics in Non-Production Environments\nDESCRIPTION: Shows how to conditionally execute code based on the NODE_ENV environment variable, which is useful for disabling certain features in development.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Vite Development Server for KendoReact Project\nDESCRIPTION: npm script to start a Vite production server for development.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/ecommerce-jewellery-store/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running MarkLogic Setup Script\nDESCRIPTION: Command to execute the setup script that configures MarkLogic for the application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode setup.js\n```\n\n----------------------------------------\n\nTITLE: Running React Tests in Watch Mode\nDESCRIPTION: Command to launch the test runner in interactive watch mode. This allows for continuous testing as changes are made to the codebase.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-file-manager/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Source Map Explorer in Create React App (NPM)\nDESCRIPTION: This snippet shows how to install the source-map-explorer package using npm to analyze JavaScript bundle sizes in a Create React App project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_73\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save source-map-explorer\n```\n\n----------------------------------------\n\nTITLE: Installing UI Dependencies\nDESCRIPTION: Command to install the necessary npm packages for the client-side React application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Command to eject from Create React App, giving full control over the configuration files and build tools.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Initializing Storybook - Shell Command\nDESCRIPTION: Command to initialize Storybook in a React application directory.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_68\n\nLANGUAGE: sh\nCODE:\n```\ngetstorybook\n```\n\n----------------------------------------\n\nTITLE: Installing node-sass-chokidar with npm\nDESCRIPTION: Command to install the node-sass-chokidar package using npm, which is used for compiling Sass files in a Create React App project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save node-sass-chokidar\n```\n\n----------------------------------------\n\nTITLE: Installing MarkLogic Setup Dependencies\nDESCRIPTION: Command to install the necessary packages for setting up MarkLogic using npm.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/ui/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Styleguidist - NPM Command\nDESCRIPTION: Command to install React Styleguidist using npm package manager.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_69\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save react-styleguidist\n```\n\n----------------------------------------\n\nTITLE: Installing npm-run-all with yarn\nDESCRIPTION: Alternative command to install the npm-run-all package using yarn, for running multiple npm scripts in parallel or sequentially.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nyarn add npm-run-all\n```\n\n----------------------------------------\n\nTITLE: Installing MarkLogic Setup Dependencies\nDESCRIPTION: Command to install the necessary npm packages for the MarkLogic setup process.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Deploying to Surge with Project Path Specification\nDESCRIPTION: Command example showing how to specify the build folder when deploying a React application to Surge. This ensures the correct files are uploaded to the Surge hosting platform.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_88\n\nLANGUAGE: sh\nCODE:\n```\n       project path: /path/to/project/build\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite with npm\nDESCRIPTION: This command launches the test runner in interactive watch mode for the React project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-coffee-warehouse/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Starting the Client Application\nDESCRIPTION: Command to start the client-side application, likely a React app using KendoReact components.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/ui/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS in Windows Development Environment\nDESCRIPTION: Command to enable HTTPS for React development server on Windows using cmd.exe. Note the intentional lack of whitespace.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_43\n\nLANGUAGE: cmd\nCODE:\n```\nset HTTPS=true&&npm start\n```\n\n----------------------------------------\n\nTITLE: Adding Styleguidist Scripts - Package.json Diff\nDESCRIPTION: Diff showing the addition of Styleguidist scripts to package.json configuration.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_71\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"styleguide\": \"styleguidist server\",\n+    \"styleguide:build\": \"styleguidist build\",\n     \"start\": \"react-scripts start\",\n```\n\n----------------------------------------\n\nTITLE: Setting Temporary Environment Variables in Windows Command Prompt\nDESCRIPTION: Command to set temporary environment variables in Windows Command Prompt before starting a React application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_35\n\nLANGUAGE: cmd\nCODE:\n```\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\n----------------------------------------\n\nTITLE: Installing Storybook CLI - Shell Command\nDESCRIPTION: Command to globally install the Storybook CLI tool for React component development.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_67\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @storybook/cli\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Command to eject from Create React App configuration, which copies all configuration files and dependencies into the project for full customization. This is a one-way operation.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-finance-portfolio/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Setting Public Development Host in .env.development\nDESCRIPTION: Configures a public development host in the .env.development file to resolve 'Invalid Host Header' errors when developing remotely with proxy enabled.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_38\n\nLANGUAGE: plaintext\nCODE:\n```\nHOST=mypublicdevhost.com\n```\n\n----------------------------------------\n\nTITLE: Building KendoReact Project for Deployment (npm)\nDESCRIPTION: This command creates a bundled, minified, and optimized version of the project, following best practices for deployment.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-ssr/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App with npm run eject\nDESCRIPTION: Removes the single build dependency from the project. This is a one-way operation that copies all configuration files and transitive dependencies into the project, giving full control over them.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-admin-dashboard/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Updating package.json scripts for Sass compilation\nDESCRIPTION: Diff showing the addition of build-css and watch-css scripts to package.json for compiling Sass files in a Create React App project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n   \"scripts\": {\n+    \"build-css\": \"node-sass-chokidar src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to build the Next.js application for production deployment.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/coffee-warehouse-nextjs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration\nDESCRIPTION: Command to eject from the Create React App configuration. This irreversible operation exposes all configuration files and dependencies, giving developers full control over the build setup.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-file-manager/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Using an imported image in CSS\nDESCRIPTION: Example of using an imported image file in a CSS rule. Webpack handles the import and provides the correct path in the compiled CSS.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying KendoReact Grid Demo to GitHub Pages\nDESCRIPTION: Deploys the KendoReact Grid demo application to GitHub Pages for public access.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-homepage-demo/README.md#2025-04-21_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n## 5. npm deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Bootstrap and Reactstrap in Create React App\nDESCRIPTION: Commands for installing Reactstrap and Bootstrap using npm or yarn package managers.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save reactstrap bootstrap@4\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add reactstrap bootstrap@4\n```\n\n----------------------------------------\n\nTITLE: Starting the Express Server\nDESCRIPTION: Command to start the Express server by running the index.js file using Node.js.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-nodejs-express/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Installing Styleguidist - Yarn Command\nDESCRIPTION: Alternative command to install React Styleguidist using Yarn package manager.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_70\n\nLANGUAGE: sh\nCODE:\n```\nyarn add react-styleguidist\n```\n\n----------------------------------------\n\nTITLE: Installing node-sass-chokidar with yarn\nDESCRIPTION: Alternative command to install the node-sass-chokidar package using yarn, for compiling Sass files in a Create React App project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nyarn add node-sass-chokidar\n```\n\n----------------------------------------\n\nTITLE: Checking for Linting Errors in KendoReact Project\nDESCRIPTION: npm script to run linting checks on the project code.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/ecommerce-jewellery-store/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies with npm\nDESCRIPTION: Command to install the required npm packages for the Express server application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-nodejs-express/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Navigating to Server Directory\nDESCRIPTION: Command to change directory to the 'server' folder where the server-side application is located.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/ui/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ../server\n```\n\n----------------------------------------\n\nTITLE: Dynamic Meta Tags Template\nDESCRIPTION: HTML template for implementing dynamic meta tags with placeholder values that can be replaced server-side.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_45\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\">\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\">\n```\n\n----------------------------------------\n\nTITLE: Running MarkLogic Setup Script\nDESCRIPTION: Command to execute the Node.js script for setting up MarkLogic after configuring the server details.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/ui/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode setup.js\n```\n\n----------------------------------------\n\nTITLE: Navigating to UI Directory\nDESCRIPTION: Command to change directory to the 'ui' folder where the client-side application is located.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/ui/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ui\n```\n\n----------------------------------------\n\nTITLE: Navigating to Server Directory\nDESCRIPTION: Command to navigate to the server directory where the backend code is located.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ../server\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Ejects the app from Create React App configuration, exposing all configs and scripts for full control. This is a one-way operation.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-grid-live-data/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Navigating to UI Directory\nDESCRIPTION: Command to navigate to the UI directory where the client-side React application is located.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/README.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ui\n```\n\n----------------------------------------\n\nTITLE: Ejecting KendoReact Grid Demo Configuration\nDESCRIPTION: Provides full control over the React app configuration for the KendoReact Grid demo project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-homepage-demo/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n## 3. npm eject\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies\nDESCRIPTION: Command to install the necessary packages for the server-side application using npm.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/ui/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration\nDESCRIPTION: This command removes the single build dependency and copies all configuration files into the project for full control. Note: This is a one-way operation.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-coffee-warehouse/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Installing Client Dependencies\nDESCRIPTION: Command to install the necessary packages for the client-side application using npm.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/ui/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Updating Watchman on macOS using Homebrew\nDESCRIPTION: Commands for updating Watchman on macOS using Homebrew to resolve issues with npm test hanging. These commands shutdown the Watchman server, update Homebrew, and reinstall Watchman.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_91\n\nLANGUAGE: sh\nCODE:\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\n----------------------------------------\n\nTITLE: Navigating to Server Directory in Bash\nDESCRIPTION: Command to change the current directory to the 'server' folder where the Express server code is located.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-nodejs-express/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd server\n```\n\n----------------------------------------\n\nTITLE: Bypassing Host Check for Development (Dangerous)\nDESCRIPTION: Adds a configuration to .env.development.local to bypass host checking completely. This is dangerous as it exposes the machine to attacks from malicious websites.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_39\n\nLANGUAGE: plaintext\nCODE:\n```\n# NOTE: THIS IS DANGEROUS!\n# It exposes your machine to attacks from the websites you visit.\nDANGEROUSLY_DISABLE_HOST_CHECK=true\n```\n\n----------------------------------------\n\nTITLE: Running React Test Suite\nDESCRIPTION: Launches the test runner in interactive watch mode for the React application.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-grid-live-data/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Starting the Server\nDESCRIPTION: Command to start the server application that communicates with MarkLogic.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Exclusion Protocol for Web Crawlers\nDESCRIPTION: This snippet defines the robot exclusion protocol settings. It allows all user agents (*) to access the entire website, as no specific paths are disallowed.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-coffee-warehouse/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Navigating to Setup Directory\nDESCRIPTION: Command to navigate to the setup directory where MarkLogic configuration files are located.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd setup\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: A standard robots.txt configuration that references the robotstxt.org specification. This configuration allows all web crawlers (User-agent: *) to access the entire site, as there are no Disallow directives present.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-finance-portfolio/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\n```\n\n----------------------------------------\n\nTITLE: Navigating to Setup Directory\nDESCRIPTION: Command to change directory to the 'setup' folder where MarkLogic setup scripts are located.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/ui/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd setup\n```\n\n----------------------------------------\n\nTITLE: Navigating to Client Directory in Bash\nDESCRIPTION: Command to change the current directory to the 'client' folder where the React client application is located.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-nodejs-express/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd client\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Build Tools and Node-gyp in Bash\nDESCRIPTION: These commands install global dependencies required for the project setup on Windows. They include windows-build-tools, node-gyp, and setting the Python environment variable.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-coffee-warehouse/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global --production windows-build-tools\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --global node-gyp\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm config set python \"%USERPROFILE%\\.windows-build-tools\\python27\\python.exe\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This snippet configures the robot.txt file to allow unrestricted access to web crawlers. It specifies that all user agents are allowed to crawl the entire website without any disallowed areas.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-grid-live-data/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring robots.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This configuration allows all web crawlers to access the entire website. It uses the wildcard (*) for the User-agent and leaves the Disallow directive empty, effectively permitting full access.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/react-admin-dashboard/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers to access all parts of the website. It includes a reference to the standard documentation and uses the wildcard user-agent with an empty disallow directive.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-nodejs-express/client/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot.txt Rules\nDESCRIPTION: This snippet defines the standard robot.txt configuration. It allows all user agents and does not disallow any paths, effectively giving full access to web crawlers.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-ssr/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with Robots.txt\nDESCRIPTION: A standard robots.txt configuration that permits all user agents (web crawlers) to access all content on the site. The empty 'Disallow:' directive indicates no restrictions are placed on any crawlers.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-marklogic-example/ui/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Basic robots.txt configuration that defines access rules for all web crawlers. Contains a reference to the standard specification and a universal User-agent directive.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-stackblitz-app/public/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\n```\n\n----------------------------------------\n\nTITLE: Running Builds with CI Flag in Unix/Linux\nDESCRIPTION: Command to run the build process in CI mode on Unix/Linux systems. The CI environment variable enables stricter linting checks during build.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-datagrid-asp-net-core/kendo-react-grid-crud/ClientApp/README.md#2025-04-21_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\nCI=true npm run build\n```\n\n----------------------------------------\n\nTITLE: Running KendoReact Dashboard with Create React App\nDESCRIPTION: Instructions for installing dependencies, serving the application locally, building for production, and running tests using npm commands.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-build-a-sales-dashboard/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# install dependencies\nnpm install\n\n# serve at localhost:3000\nnpm start\n\n# build\nnpm run build\n\n# tests\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Starting Server-Side Rendering Server for KendoReact (npm)\nDESCRIPTION: This command starts the server-side rendering (SSR) server on localhost:8000 for the KendoReact project.\nSOURCE: https://github.com/telerik/kendo-react.git/blob/master/examples/kendo-react-ssr/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run ssr\n```"
  }
]