[
  {
    "owner": "python-poetry",
    "repo": "website",
    "content": "TITLE: Using Poetry's Add Command with Various Package Formats\nDESCRIPTION: Examples of different ways to add dependencies with Poetry's add command, including version constraints, git repositories, local paths, and extras.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2019-12-12-announcing-poetry-1-0-0.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npoetry add \"requests[security]\"\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add requests@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry 1.2 using the new standalone installer\nDESCRIPTION: Commands to install Poetry 1.2 using the new standalone installer for different operating systems. The installer downloads and runs directly from install.python-poetry.org.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Linux, macOS, Windows (WSL)\n$ curl -sSL https://install.python-poetry.org | python3 -\n\n# Windows (Powershell)\n(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -\n```\n\n----------------------------------------\n\nTITLE: Managing Python Environment with Poetry CLI\nDESCRIPTION: Examples of using Poetry's env commands to manage Python environments, including specifying Python versions, getting environment information, and listing or removing virtualenvs.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2019-12-12-announcing-poetry-1-0-0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry env use /full/path/to/python\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry env use python3.7\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry env use 3.7\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry env use system\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry env info\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry env info --path\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry env list\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry env remove /full/path/to/python\npoetry env remove python3.7\npoetry env remove 3.7\npoetry env remove test-O3eWbxRl-py3.7\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry with Standalone Installer\nDESCRIPTION: Commands to install Poetry using the new standalone installer that vendorizes dependencies. Includes options for installing preview versions and specific versions.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-04-04-poetry-0-7-0-is-out.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python\n```\n\nLANGUAGE: bash\nCODE:\n```\npython get-poetry.py --preview\n```\n\nLANGUAGE: bash\nCODE:\n```\npython get-poetry.py --version 0.7.0\n```\n\n----------------------------------------\n\nTITLE: Adding Complex PEP 508 Dependencies\nDESCRIPTION: Examples of adding dependencies using PEP 508 syntax and the resulting TOML configuration.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry add 'pytest-xdist[psutil] (>=2.4.0,<2.5.0); python_version >= \"3.7\"'\n```\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.dependencies]\npytest-xdist = {version = \">=2.4.0,<2.5.0\", markers = \"python_version >= \\\"3.7\\\"\", extras = [\"psutil\"]}\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.2.0 using self update command\nDESCRIPTION: Command to update an existing Poetry installation to version 1.2.0. This works for installations via the new installer, pipx, or manual installations.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Using Environment Markers for Conditional Dependencies\nDESCRIPTION: Example of specifying complex installation conditions for dependencies using environment markers in pyproject.toml.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2019-12-12-announcing-poetry-1-0-0.md#2025-04-10_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.dependencies]\npathlib2 = { version = \"^2.2\", markers = \"python_version ~= '2.7' or sys_platform == 'win32'\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry 2.0.1 on Linux, macOS, or Windows WSL\nDESCRIPTION: Command to install Poetry 2.0.1 using the official installer script on Unix-based systems or Windows Subsystem for Linux.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-11-announcing-poetry-2-0-1.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sSL https://install.python-poetry.org | python3 -\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Poetry\nDESCRIPTION: Environment variables used to configure Poetry's behavior and directory locations. These include POETRY_CONFIG_DIR and POETRY_CACHE_DIR for specifying configuration and cache directories.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/history.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nPOETRY_CONFIG_DIR=\"/custom/config/path\"\nPOETRY_CACHE_DIR=\"/custom/cache/path\"\nPOETRY_EXPERIMENTAL_NEW_INSTALLER=\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry 2.0.1 on Windows using PowerShell\nDESCRIPTION: PowerShell command to install Poetry 2.0.1 using the official installer script on Windows systems.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-11-announcing-poetry-2-0-1.md#2025-04-10_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -\n```\n\n----------------------------------------\n\nTITLE: Declaring dependency groups in pyproject.toml\nDESCRIPTION: Example of how to declare a test dependency group in pyproject.toml. Groups allow organizing dependencies by their purpose, with each group having its own section for dependencies.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.group.test]  # This section can be omitted\n\n[tool.poetry.group.test.dependencies]\npytest = \"^7.1.0\"\npytest-mock = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Self-updating Poetry\nDESCRIPTION: Command to self-update Poetry using the official installer method\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-05-announcing-poetry-2-0-0.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Creating an Application Plugin for Poetry in Python\nDESCRIPTION: Example showing how to create an application plugin that adds a custom command to Poetry. It implements the ApplicationPlugin interface and registers a command factory.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom cleo.commands.command import Command\nfrom poetry.plugins.application_plugin import ApplicationPlugin\n\n\nclass CustomCommand(Command):\n\n    name = \"my-command\"\n\n    def handle(self) -> int:\n        self.line(\"My command\")\n\n        return 0\n\n\ndef factory():\n    return CustomCommand()\n\n\nclass MyApplicationPlugin(ApplicationPlugin):\n    def activate(self, application):\n        application.command_loader.register_factory(\"my-command\", factory)\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry using self update command\nDESCRIPTION: Command to update Poetry to the latest version using the built-in self update feature for versions below 2.0.0.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-11-announcing-poetry-2-0-1.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry Plugins using self add\nDESCRIPTION: Commands to install Poetry plugins using the self add command, which ensures plugin compatibility with the current Poetry version.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self add poetry-plugin-<NAME>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Poetry with pipx\nDESCRIPTION: Command to upgrade Poetry to version 2.0.1 using pipx package manager.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-11-announcing-poetry-2-0-1.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pipx upgrade poetry\n```\n\n----------------------------------------\n\nTITLE: Configuring PyPI API Tokens in Poetry\nDESCRIPTION: Example of configuring a PyPI API token for publishing packages, which is more secure than using username/password authentication.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2019-12-12-announcing-poetry-1-0-0.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npoetry config pypi-token.pypi my-token\n```\n\n----------------------------------------\n\nTITLE: Upgrading Poetry Using pipx\nDESCRIPTION: Command to upgrade an existing Poetry installation to version 2.1.0 using pipx.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-02-15-announcing-poetry-2-1-0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pipx upgrade poetry\n```\n\n----------------------------------------\n\nTITLE: Installing only specific dependency groups\nDESCRIPTION: Command to install only specific dependency groups without installing the main group. This allows installing just the needed dependencies for certain tasks.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry install --only docs,test\n```\n\n----------------------------------------\n\nTITLE: Upgrading Poetry to 1.7.0 using pipx\nDESCRIPTION: This command upgrades an existing Poetry installation to version 1.7.0 using the pipx package manager.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2023-11-03-announcing-poetry-1-7-0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pipx upgrade poetry\n```\n\n----------------------------------------\n\nTITLE: Installing optional dependency groups\nDESCRIPTION: Command to install the project's dependencies including an optional group (docs). The --with flag allows including specific optional groups during installation.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry install --with docs\n```\n\n----------------------------------------\n\nTITLE: Upgrading Poetry to 1.7.0 using self-update\nDESCRIPTION: This command updates Poetry to version 1.7.0 using the built-in self-update mechanism for installations done with the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2023-11-03-announcing-poetry-1-7-0.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Comparing legacy dev-dependencies with group syntax\nDESCRIPTION: Example showing the equivalence between the legacy dev-dependencies section and the new group syntax in pyproject.toml. Dependencies in dev-dependencies are automatically added to a dev group.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.dev-dependencies]\npytest = \"^7.1.0\"\npytest-mock = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to 1.8.0 using self-update command\nDESCRIPTION: Command to update Poetry to version 1.8.0 using the built-in self-update feature for installations done with the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2024-02-25-announcing-poetry-1-8-0.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Defining Poetry Scripts in pyproject.toml\nDESCRIPTION: Example of defining a script in the pyproject.toml configuration file that can be executed using the new script command.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-04-04-poetry-0-7-0-is-out.md#2025-04-10_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.scripts]\nmy-script = \"my_module:main\"\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to Version 1.6.0 Using Self Update Command\nDESCRIPTION: Command to update an existing Poetry installation to version 1.6.0 using the built-in self update mechanism.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2023-08-20-announcing-poetry-1-6-0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Poetry Configuration\nDESCRIPTION: Examples of setting Poetry configuration via environment variables, which is particularly useful in CI environments.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2019-12-12-announcing-poetry-1-0-0.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport POETRY_VIRTUALENVS_PATH=/path/to/virtualenvs/directory\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport POETRY_HTTP_BASIC_MY_REPOSITORY_PASSWORD=secret\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry via Command Line\nDESCRIPTION: Command to update Poetry to version 1.4.0 using the official installer\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2023-02-27-announcing-poetry-1-4-0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Setting Local Project Configuration in Poetry\nDESCRIPTION: Example of using the --local flag with the config command to create project-specific settings in poetry.toml.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2019-12-12-announcing-poetry-1-0-0.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry config virtualenvs.create false --local\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.2.2 using Bash\nDESCRIPTION: This command updates an existing Poetry installation to version 1.2.2 using the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-10-10-announcing-poetry-1-2-2.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: PEP 621 Project Configuration\nDESCRIPTION: Example of using the new project section in pyproject.toml following PEP 621 specification\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-05-announcing-poetry-2-0-0.md#2025-04-10_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"poetry-demo\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\n    {name = \"Sébastien Eustace\", email = \"sebastien@eustace.io\"}\n]\nreadme = \"README.md\"\nrequires-python = \">=3.8\"\n\n[tool.poetry]\npackages = [{include = \"poetry_demo\"}]\n\n[build-system]\nrequires = [\"poetry-core>=2.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to Version 1.2.1\nDESCRIPTION: Command to update Poetry to version 1.2.1 using the built-in self-update mechanism. This command is available for systems where Poetry was installed using the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-09-16-announcing-poetry-1-2-1.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Updating Build System Configuration in pyproject.toml\nDESCRIPTION: This TOML configuration updates the build-system section to use the new standalone build backend for Poetry-managed projects.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-10-01-announcing-poetry-1-1-0.md#2025-04-10_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Poetry using deprecated get-poetry.py script\nDESCRIPTION: Command to uninstall Poetry that was previously installed using the deprecated get-poetry.py method, which is required before migrating to the new installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 - --uninstall\n```\n\n----------------------------------------\n\nTITLE: Registering a Poetry Application Plugin in pyproject.toml\nDESCRIPTION: Configuration for registering an application plugin in the pyproject.toml file. This specifies the plugin entry point under the application.plugin category.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.plugins.\"poetry.application.plugin\"]\nfoo-command = \"poetry_demo_plugin.plugin:MyApplicationPlugin\"\n```\n\n----------------------------------------\n\nTITLE: Installing yanked version of cryptography package with Poetry\nDESCRIPTION: This snippet shows the warning message displayed when trying to add a yanked version of the cryptography package using Poetry.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-23-announcing-poetry-1-2-0rc1.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry add cryptography==37.0.3\n\n[...]\nWarning: The locked version 37.0.3 for cryptography is a yanked version. Reason for being yanked: Regression in OpenSSL.\n```\n\n----------------------------------------\n\nTITLE: Configuring Trove Classifiers\nDESCRIPTION: Example of specifying trove classifiers in the pyproject.toml configuration file for package metadata.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-04-04-poetry-0-7-0-is-out.md#2025-04-10_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nclassifiers = [\n    \"Topic :: Software Development :: Build Tools\",\n    \"Topic :: Software Development :: Libraries :: Python Modules\"\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.1.15 using the official installer\nDESCRIPTION: This command updates an existing Poetry installation to version 1.1.15 using the official installer. It's a simple one-line command that can be run in the terminal.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-22-announcing-poetry-1-1-15.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry for non-package projects\nDESCRIPTION: TOML configuration snippet to set Poetry's package-mode to false, indicating the project is not meant to be packaged.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2024-02-25-announcing-poetry-1-8-0.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[tool.poetry]\npackage-mode = false\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry via official installer\nDESCRIPTION: Command to update Poetry to version 1.1.14 using the built-in self update mechanism when installed via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-07-08-announcing-poetry-1-1-14.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Including and Excluding Files in Poetry Package\nDESCRIPTION: Demonstrates how to explicitly include or exclude files from a Poetry package build using the include and exclude properties. These properties accept glob patterns to specify which files to include or exclude.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-06-28-poetry-0-11-0-is-out.md#2025-04-10_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry]\n# ...\ninclude = [ \"CHANGELOG.md\" ]\nexclude = [ \"my_package/excluded.py\" ]\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to Version 1.2.0b1 Preview\nDESCRIPTION: Command to update an existing Poetry installation to the preview version 1.2.0b1 using the self-update mechanism. This requires having Poetry already installed via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-03-17-announcing-poetry-1-2-0b1.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update --preview\n```\n\n----------------------------------------\n\nTITLE: Configuring Maturin as Custom Build Backend in pyproject.toml\nDESCRIPTION: Example configuration for setting up maturin as a custom build backend in the pyproject.toml file. This specifies the build system requirements and backend name.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-02-15-announcing-poetry-2-1-0.md#2025-04-10_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nrequires = [\"maturin>=0.8.1,<0.9\"]\nbuild-backend = \"maturin\"\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.1.12 using self-update command\nDESCRIPTION: Command to update Poetry to version 1.1.12 using the built-in self-update mechanism when Poetry was installed via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-11-27-announcing-poetry-1-1-12.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Implementing an Event Handler Plugin for Poetry in Python\nDESCRIPTION: Example of an application plugin that adds an event listener to load environment variables from a .env file before executing a command. It demonstrates how to hook into Poetry's event system.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom cleo.events.console_events import COMMAND\nfrom cleo.events.console_command_event import ConsoleCommandEvent\nfrom cleo.events.event_dispatcher import EventDispatcher\nfrom dotenv import load_dotenv\nfrom poetry.console.application import Application\nfrom poetry.console.commands.env_command import EnvCommand\nfrom poetry.plugins.application_plugin import ApplicationPlugin\n\n\nclass MyApplicationPlugin(ApplicationPlugin):\n    def activate(self, application: Application):\n        application.event_dispatcher.add_listener(COMMAND, self.load_dotenv)\n\n    def load_dotenv(\n        self,\n        event: ConsoleCommandEvent,\n        event_name: str,\n        dispatcher: EventDispatcher\n    ) -> None:\n        command = event.command\n        if not isinstance(command, EnvCommand):\n            return\n\n        io = event.io\n\n        if io.is_debug():\n            io.write_line(\"<debug>Loading environment variables.</debug>\")\n\n        load_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.1.11 using the self update command\nDESCRIPTION: This command updates Poetry to version 1.1.11 if you have installed it using the official installer. Simply run this command in your terminal to perform the update.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-10-04-announcing-poetry-1-1-11.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Performing a Dry Run of Poetry Package Publishing\nDESCRIPTION: This command performs a dry run of the publish process to check for any issues before actually uploading the package to a remote repository.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-10-01-announcing-poetry-1-1-0.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry publish --dry-run\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to Version 1.1.10 Using Self Update Command\nDESCRIPTION: This command updates Poetry to the latest version (1.1.10) using Poetry's built-in self-update mechanism. It requires a previous installation of Poetry via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-09-21-announcing-poetry-1-1-10.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry Dependencies and Removing Untracked Packages\nDESCRIPTION: This command installs project dependencies and removes any untracked packages to keep the environment in sync with the poetry.lock file.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-10-01-announcing-poetry-1-1-0.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --remove-untracked\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.1.8 using self-update command\nDESCRIPTION: This command updates an existing Poetry installation to version 1.1.8 using the built-in self-update feature. It requires a previous version of Poetry to be installed via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-19-announcing-poetry-1-1-8.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Adding a Poetry Plugin Using the plugin add Command\nDESCRIPTION: Command to add a Poetry plugin using the built-in plugin management system. This is the recommended approach for installing plugins regardless of how Poetry was installed.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npoetry plugin add poetry-plugin\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to 1.2.0a2 Preview Version\nDESCRIPTION: Command to update Poetry to the preview version 1.2.0a2 using the self update feature.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-01-announcing-poetry-1-2-0a2.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update --preview\n```\n\n----------------------------------------\n\nTITLE: Using the self add command to install plugins\nDESCRIPTION: Example of adding a dependency to Poetry's runtime environment using the new self add command. This is particularly useful for installing Poetry plugins.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self add poetry-plugin-<NAME>\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to Version 1.1.7 via Command Line\nDESCRIPTION: Command to update an existing Poetry installation to version 1.1.7 using the self update feature. This requires Poetry to have been previously installed via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-06-25-announcing-poetry-1-1-7.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry Using the New install-poetry.py Script in Bash\nDESCRIPTION: Command to install Poetry using the new install-poetry.py script that replaces the deprecated get-poetry.py script. This new installer relies on standard install locations and doesn't modify PATH.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -\n```\n\n----------------------------------------\n\nTITLE: Removing a Poetry Plugin\nDESCRIPTION: Command to remove a Poetry plugin using the built-in plugin management system.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npoetry plugin remove poetry-plugin\n```\n\n----------------------------------------\n\nTITLE: Upgrading Poetry via pipx\nDESCRIPTION: Command to upgrade Poetry to version 2.0.0 using pipx package manager\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-05-announcing-poetry-2-0-0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pipx upgrade poetry\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.1.2\nDESCRIPTION: Command to update an existing Poetry installation to version 1.1.2 using the self update feature. This only works for installations done via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-10-06-announcing-poetry-1-1-2.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Upgrading Poetry to 1.8.0 using pipx\nDESCRIPTION: Command to upgrade Poetry to version 1.8.0 using pipx package manager.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2024-02-25-announcing-poetry-1-8-0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pipx upgrade poetry\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.1.1\nDESCRIPTION: Command to update Poetry to version 1.1.1 using the built-in self-update mechanism. This requires a previous installation via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-10-05-announcing-poetry-1-1-1.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Upgrading Poetry Using Official Installer\nDESCRIPTION: Command to update Poetry to version 2.1.0 using the official installer's self-update mechanism.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-02-15-announcing-poetry-2-1-0.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to Version 1.1.0 via Bash\nDESCRIPTION: This command updates an existing Poetry installation to version 1.1.0 using the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-10-01-announcing-poetry-1-1-0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.5.0 using bash\nDESCRIPTION: This command updates an existing Poetry installation to version 1.5.0 using the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2023-05-19-announcing-poetry-1-5-0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry via CLI\nDESCRIPTION: Command to update Poetry to version 1.0.7 using the official installer\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-06-05-announcing-poetry-1-0-7.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to Latest Version Using Self Update Command\nDESCRIPTION: Command to update an existing Poetry installation to version 1.3.0 using the built-in self update feature.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-12-09-announcing-poetry-1-3-0.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.0.6 using self-update command\nDESCRIPTION: This command updates an existing Poetry installation to version 1.0.6 using the built-in self-update feature. It's recommended to run this before upgrading to any other version.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-06-05-announcing-poetry-1-0-6.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.1.9 using self-update command\nDESCRIPTION: Command to update an existing Poetry installation to version 1.1.9 using the built-in self-update functionality. This applies to installations done via the official Poetry installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-09-18-announcing-poetry-1-1-9.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.0.5 using the official installer\nDESCRIPTION: This command updates an existing Poetry installation to version 1.0.5 using the self-update feature. It requires a previous version of Poetry to be installed via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-02-29-announcing-poetry-1-0-5.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.1.5 using self update command in Bash\nDESCRIPTION: Command to update Poetry to version 1.1.5 using the official installer. This simple command will update an existing Poetry installation to the latest version.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-03-03-announcing-poetry-1-1-5.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to Version 1.0.1 with the Self Update Command\nDESCRIPTION: This command updates an existing Poetry installation to version 1.0.1 using the built-in self update mechanism. It requires Poetry to have been previously installed using the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-01-10-announcing-poetry-1-0-1.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to Version 1.1.4 using Self Update Command\nDESCRIPTION: Command to update an existing Poetry installation to version 1.1.4 using the built-in self update mechanism. This applies to installations done via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-10-23-announcing-poetry-1-1-4.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Package Sources in Poetry\nDESCRIPTION: TOML configuration examples for setting up private package indices in pyproject.toml, including source-specific dependencies and index priority controls.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2019-12-12-announcing-poetry-1-0-0.md#2025-04-10_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.dependencies]\n# ...\npendulum = {version = \"^2.0.5\", source = \"my-index\"}\n\n[[tool.poetry.source]]\nname = \"my-index\"\nurl = \"https://example.com\"\n```\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.poetry.source]]\nname = \"my-index\"\nurl = \"https://example.com\"\nsecondary = true\n```\n\nLANGUAGE: toml\nCODE:\n```\n[[tool.poetry.source]]\nname = \"my-index\"\nurl = \"https://example.com\"\ndefault = true\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to Version 1.1.3\nDESCRIPTION: Command to update an existing Poetry installation to version 1.1.3 using the self update feature. This requires Poetry to be installed via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-10-14-announcing-poetry-1-1-3.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry Package Manager\nDESCRIPTION: Commands to update Poetry to different versions including the latest stable release, preview versions, or a specific version number.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-04-13-poetry-0-8-0-is-out.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry self:update\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry self:update --preview\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry self:update 0.8.0\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.0.10 using Bash\nDESCRIPTION: This command updates an existing Poetry installation to version 1.0.10 using the official installer. It assumes Poetry is already installed on the system.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-06-09-announcing-poetry-1-0-10.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Adding a Poetry Plugin Using pipx inject\nDESCRIPTION: Command to add a Poetry plugin when Poetry was installed using pipx. This injects the plugin package into the existing pipx installation.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npipx inject poetry poetry-plugin\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to Version 1.0.9\nDESCRIPTION: Command to update an existing Poetry installation to version 1.0.9 using the self-update feature. Requires Poetry to be installed via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-06-09-announcing-poetry-1-0-9.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Installing a Poetry Plugin with pip\nDESCRIPTION: Command to install a Poetry plugin when Poetry was installed using pip. This uses the --user flag to install it for the current user only.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip install --user poetry-plugin\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.0.8 using the official installer\nDESCRIPTION: This command updates an existing Poetry installation to version 1.0.8 using the official installer. It assumes Poetry was previously installed using the official method.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-06-05-announcing-poetry-1-0-8.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Poetry Plugin with pip\nDESCRIPTION: Command to uninstall a Poetry plugin when Poetry was installed using pip.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall poetry-plugin\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to version 1.0.4 using the self-update command\nDESCRIPTION: This command updates an existing Poetry installation to version 1.0.4 using the built-in self-update feature. It requires a previous version of Poetry to be installed via the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-02-28-announcing-poetry-1-0-4.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Removing Poetry Plugins\nDESCRIPTION: Command to uninstall Poetry plugins using the self remove command.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self remove poetry-plugin-<NAME>\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry Installation\nDESCRIPTION: Command to update an existing Poetry installation to version 1.0.3 using the official Poetry self-update mechanism.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-01-31-announcing-poetry-1-0-3.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Poetry Plugins\nDESCRIPTION: Command to display all currently installed and discovered Poetry plugins.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self show plugins\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to 1.0.2 using the self update command\nDESCRIPTION: A bash command to update an existing Poetry installation to version 1.0.2 when Poetry was installed using the official installer.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-01-10-announcing-poetry-1-0-2.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update\n```\n\n----------------------------------------\n\nTITLE: Using the self install command to manage Poetry's runtime environment\nDESCRIPTION: Example of the self install command which ensures all configured packages are installed into Poetry's runtime environment. Includes the sync option for exact matching.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self install\n$ poetry self install --sync\n```\n\n----------------------------------------\n\nTITLE: Removing packages from Poetry's runtime environment\nDESCRIPTION: Example of the self remove command which removes a package from Poetry's runtime environment. This is useful for removing installed plugins or dependencies.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self remove poetry-plugin-<NAME>\n```\n\n----------------------------------------\n\nTITLE: Locking Poetry's runtime environment dependencies\nDESCRIPTION: Example of the self lock command which ensures all configured packages are recorded to a runtime environment poetry.lock file.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self lock\n```\n\n----------------------------------------\n\nTITLE: Listing packages in Poetry's runtime environment\nDESCRIPTION: Example of the self show command which lists all configured runtime environment packages, similar to the poetry show command.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self show\n```\n\n----------------------------------------\n\nTITLE: Listing installed Poetry plugins\nDESCRIPTION: Example of the self show plugins command which lists all discovered plugins in Poetry's runtime environment.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self show plugins\n```\n\n----------------------------------------\n\nTITLE: Removing a dependency from a specific group\nDESCRIPTION: Command to remove a dependency from a specific group using the remove command with the --group flag. This allows precise management of dependencies within groups.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry remove mkdocs --group docs\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Poetry Plugins\nDESCRIPTION: Command to display all currently installed Poetry plugins.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npoetry plugin show\n```\n\n----------------------------------------\n\nTITLE: Adding a Dependency to a Specific Group\nDESCRIPTION: Command to add a new dependency 'pytest' to the 'test' group using the add command with the --group option.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-01-announcing-poetry-1-2-0a2.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry add pytest --group test\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Poetry Plugin in Python\nDESCRIPTION: Example implementation of a basic Poetry plugin that implements the Poetry.plugins.Plugin interface. This plugin modifies the package version when activated.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cleo.io.io import IO\n\nfrom poetry.plugins.plugin import Plugin\nfrom poetry.poetry import Poetry\n\n\nclass MyPlugin(Plugin):\n\n    def activate(self, poetry: Poetry, io: IO):\n        version = self.get_custom_version()\n        io.write_line(f\"Setting package version to <b>{version}</b>\")\n        poetry.package.set_version(version)\n\n    def get_custom_version(self) -> str:\n        ...\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies Excluding Specific Groups\nDESCRIPTION: Command to install Poetry dependencies while excluding the 'test' and 'docs' groups using the --without option.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-01-announcing-poetry-1-2-0a2.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --without test,docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry Plugin in pyproject.toml\nDESCRIPTION: Example configuration in pyproject.toml for declaring a Poetry plugin package. This shows how to specify the plugin's metadata, dependencies, and plugin registration point.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry]\nname = \"my-poetry-plugin\"\nversion = \"1.0.0\"\n\n# ...\n[tool.poetry.dependencies]\npython = \"~2.7 || ^3.7\"\npoetry = \"^1.2\"\n\n[tool.poetry.plugins.\"poetry.plugin\"]\ndemo = \"poetry_demo_plugin.plugin:MyPlugin\"\n```\n\n----------------------------------------\n\nTITLE: Installing Only Default Dependencies\nDESCRIPTION: Command to install only the default, non-grouped dependencies in Poetry using the --default option.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-01-announcing-poetry-1-2-0a2.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --default\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Python 3.13 with Poetry\nDESCRIPTION: Commands to install Python 3.13 using Poetry's new experimental Python management feature and configure the project environment to use it.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-02-15-announcing-poetry-2-1-0.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry python install 3.13\npoetry env use 3.13\n```\n\n----------------------------------------\n\nTITLE: Installing Only Specific Dependency Groups\nDESCRIPTION: Command to install only dependencies from a specific group 'docs' without installing default dependencies, using the --only option.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-01-announcing-poetry-1-2-0a2.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --only docs\n```\n\n----------------------------------------\n\nTITLE: Adding a new package source configuration\nDESCRIPTION: Example of the source add command which adds a new source configuration to pyproject.toml. This allows for adding custom package repositories.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry source add pypi-test https://test.pypi.org/simple/\n```\n\n----------------------------------------\n\nTITLE: Installing only main dependencies\nDESCRIPTION: Command to install only the default (main group) dependencies without any additional groups. The --only flag restricts installation to specified groups only.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry install --only main\n```\n\n----------------------------------------\n\nTITLE: Showing configured package sources\nDESCRIPTION: Example of the source show command which displays information on all configured sources for the project. Can be filtered to show specific sources by name.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry source show\n```\n\n----------------------------------------\n\nTITLE: Showing specific package sources by name\nDESCRIPTION: Example of filtering the source show command output to a specific source by specifying its name.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry source show pypi-test\n```\n\n----------------------------------------\n\nTITLE: Removing a configured package source\nDESCRIPTION: Example of the source remove command which removes a configured source from pyproject.toml by specifying its name.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry source remove pypi-test\n```\n\n----------------------------------------\n\nTITLE: Adding Single Page Repository Source\nDESCRIPTION: Command to add a single page repository as a package source in Poetry.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry source add <SOURCE_NAME> <PAGE_URL>\n\n# e.g.\n$ poetry source add jax https://storage.googleapis.com/jax-releases/jax_releases.html\n```\n\n----------------------------------------\n\nTITLE: Project Plugin Requirements\nDESCRIPTION: Configuration for specifying project plugin dependencies in pyproject.toml\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-05-announcing-poetry-2-0-0.md#2025-04-10_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.requires-plugins]\nmy-application-plugin = \">1.0\"\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry with pip\nDESCRIPTION: Alternative installation method using pip, with a warning about potential dependency conflicts.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-04-04-poetry-0-7-0-is-out.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install --user poetry\n```\n\n----------------------------------------\n\nTITLE: Executing Poetry Scripts\nDESCRIPTION: Command to execute a script defined in pyproject.toml using the new script command.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-04-04-poetry-0-7-0-is-out.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry script my-script\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependency Groups in TOML Configuration\nDESCRIPTION: Example of how to declare a new dependency group 'test' in the pyproject.toml file, specifying dependencies for that group.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-01-announcing-poetry-1-2-0a2.md#2025-04-10_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.group.test]  # This part can be left out\n\n[tool.poetry.group.test.dependencies]\npytest = \"^6.0.0\"\npytest-mock = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning About Virtualenv Creation in Markdown\nDESCRIPTION: This snippet shows a warning message in Markdown format, explaining that Poetry creates virtualenvs using the standard library 'venv' module for Python 3.6+. It advises users working with earlier Python versions to create their own virtualenvs using tools like 'pew'.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-03-16-poetry-0-6-0-is-out.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<aside class=\"warning\"><p>\nSince Poetry is 3.6+ only, it will create virtualenvs\nusing the standard library `venv` module.</p>\n\n<p>So, if you want to work with a previous Python version in your\nproject, you will need to create your own virtualenvs using, for instance,\n<a href=\"https://github.com/berdario/pew\">pew</a>.\n</p></aside>\n```\n\n----------------------------------------\n\nTITLE: Declaring Default and Group Dependencies in TOML\nDESCRIPTION: Example showing how to declare both default dependencies and a 'test' group of dependencies in the pyproject.toml file.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-01-announcing-poetry-1-2-0a2.md#2025-04-10_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.dependencies]  # Default dependency group\nhttpx = \"*\"\npendulum = \"*\"\n\n[tool.poetry.group.test.dependencies]\npytest = \"^6.0.0\"\npytest-mock = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PyPI Fallback Settings in Poetry\nDESCRIPTION: Command to disable the fallback mechanism for missing dependencies resolution in Poetry. This configuration prevents Poetry from downloading package distributions to check dependencies when PyPI JSON API data is incomplete.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-04-13-poetry-0-8-0-is-out.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry config settings.pypi.fallback false\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Dependency Groups in TOML\nDESCRIPTION: Example of how to declare an optional dependency group 'docs' in the pyproject.toml file, making it available for selective installation.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-01-announcing-poetry-1-2-0a2.md#2025-04-10_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.group.docs]\noptional = true\n\n[tool.poetry.group.docs.dependencies]\nmkdocs = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Poetry Installation in Bash\nDESCRIPTION: Command to check the installed version of Poetry after installation. This helps confirm that Poetry is correctly installed and accessible from the command line.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-10-17-poetry-0-12-0-is-out.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry --version\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry with Optional Group Dependencies\nDESCRIPTION: Command to install Poetry dependencies including an optional group 'docs' using the --with option.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-01-announcing-poetry-1-2-0a2.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --with docs\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Poetry Release Post\nDESCRIPTION: YAML frontmatter configuration for a blog post announcing Poetry version 0.11.5, including metadata like title, date, categories, tags and URL aliases.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-09-04-poetry-0-11-5-is-out.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: single\ntitle: \"Poetry 0.11.5 is out\"\ndate: 2018-09-04 10:12:35\ncategories: [releases]\ntags: [\"0.x\"]\n\naliases:\n  - poetry-0-11-5-is-out.html\n```\n\n----------------------------------------\n\nTITLE: Dev dependencies using new group syntax\nDESCRIPTION: Example showing the new recommended way to define development dependencies using the group syntax in pyproject.toml. This syntax replaces the deprecated dev-dependencies section.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.group.dev.dependencies]\npytest = \"^7.1.0\"\npytest-mock = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Dependency Resolver Error Messages in Poetry\nDESCRIPTION: Examples of the improved error messages from the new dependency resolver when no valid solution can be found. These messages are clearer and provide more context about conflicting dependencies.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-05-28-poetry-0-10-0-is-out.md#2025-04-10_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[SolverProblemError]\nBecause demo depends on django (2.0.1) which requires Python >=3.4,\nversion solving failed.\n```\n\nLANGUAGE: text\nCODE:\n```\n[SolverProblemError]\nBecause masonite (1.6.7) depends on both cryptography (2.1.4) and cryptography (2.2.2),\n masonite is forbidden.\nSo, because demo depends on masonite (1.6.7), version solving failed.\n```\n\n----------------------------------------\n\nTITLE: Declaring optional dependency groups\nDESCRIPTION: Example showing how to declare an optional dependency group for documentation in pyproject.toml. Optional groups are not installed by default and require explicit inclusion during installation.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.group.docs]\noptional = true\n\n[tool.poetry.group.docs.dependencies]\nmkdocs = \"*\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Source Directory in Poetry\nDESCRIPTION: Shows how to define a package that resides in a non-standard source directory using the from parameter. This is useful when your package is stored in a subdirectory like lib.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-06-28-poetry-0-11-0-is-out.md#2025-04-10_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry]\n# ...\npackages = [\n    { include = \"mypackage\", from = \"lib\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Adding a dependency to a specific group\nDESCRIPTION: Command to add a dependency to a specific group using the add command with the --group flag. If the specified group doesn't exist, it will be created automatically.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry add pytest --group test\n```\n\n----------------------------------------\n\nTITLE: Installing Yanked Package Warning\nDESCRIPTION: Example showing warning message when installing a project with yanked dependencies.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry install\n\n[...]\nWarning: The file chosen for install of cryptography 37.0.3 (cryptography-37.0.3-cp36-abi3-manylinux_2_24_x86_64.whl) is yanked. Reason for being yanked: Regression in OpenSSL.\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies without specific groups\nDESCRIPTION: Command to install dependencies while excluding specific groups using the --without flag. This allows skipping certain dependency groups during installation.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry install --without docs,test\n```\n\n----------------------------------------\n\nTITLE: Adding Yanked Package Version Warning\nDESCRIPTION: Example showing warning message when adding a yanked package version.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry add cryptography==37.0.3\n\n[...]\nWarning: The locked version 37.0.3 for cryptography is a yanked version. Reason for being yanked: Regression in OpenSSL.\n```\n\n----------------------------------------\n\nTITLE: Removing a Dependency from a Specific Group\nDESCRIPTION: Command to remove the 'mkdocs' package from the 'docs' group using the remove command with the --group option.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-01-announcing-poetry-1-2-0a2.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npoetry remove mkdocs --group docs\n```\n\n----------------------------------------\n\nTITLE: Installing project with yanked dependencies using Poetry\nDESCRIPTION: This snippet illustrates the warning message shown when installing a project that depends on yanked releases using Poetry.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-23-announcing-poetry-1-2-0rc1.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry install\n\n[...]\nWarning: The file chosen for install of cryptography 37.0.3 (cryptography-37.0.3-cp36-abi3-manylinux_2_24_x86_64.whl) is yanked. Reason for being yanked: Regression in OpenSSL.\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Dependencies with the Lock File\nDESCRIPTION: Command to install Poetry dependencies while ensuring synchronization with the lock file using the new --sync option.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-01-announcing-poetry-1-2-0a2.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --sync\n```\n\n----------------------------------------\n\nTITLE: Adding git dependency with subdirectory using Poetry\nDESCRIPTION: This snippet demonstrates how to add a git dependency with a specified subdirectory using Poetry's add command.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-23-announcing-poetry-1-2-0rc1.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry add git+https://github.com/myorg/mypackage_with_subdirs.git#subdirectory=subdir\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Specific Dependency Groups\nDESCRIPTION: Examples of combining the --sync option with group-specific options to synchronize the environment with particular dependency groups.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-08-01-announcing-poetry-1-2-0a2.md#2025-04-10_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --without dev --sync\npoetry install --with docs --sync\npoetry install --only dev\n```\n\n----------------------------------------\n\nTITLE: Clearing Poetry cache after update\nDESCRIPTION: Command to clear the Poetry cache for PyPI to ensure proper functionality after updating to version 1.1.14, needed due to PyPI JSON API changes.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-07-08-announcing-poetry-1-1-14.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry cache clear --all pypi\n```\n\n----------------------------------------\n\nTITLE: Adding Git Dependencies with Subdirectory\nDESCRIPTION: Command to add a Git-based dependency from a specific subdirectory using PEP 508 syntax.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry add git+https://github.com/myorg/mypackage_with_subdirs.git#subdirectory=subdir\n```\n\n----------------------------------------\n\nTITLE: Clearing Poetry Cache for PyPI\nDESCRIPTION: Command to clear Poetry's cache for PyPI after upgrading to fix a critical issue with dependency hash retrieval.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/history.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry cache clear pypi --all\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Environment with Lock File\nDESCRIPTION: Commands demonstrating various ways to synchronize the environment with the lock file using the --sync flag.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry install --sync\n$ poetry install --without dev --sync\n$ poetry install --with docs --sync\n$ poetry install --only dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Binary Distribution Settings\nDESCRIPTION: Commands to configure Poetry's binary distribution settings for specific packages or globally.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# Skip all binaries\n$ poetry config --local installer.no-binary :all:\n# Skip specific package binaries\n$ poetry config --local installer.no-binary httpx,uvicorn\n# Do not skip any binaries (default)\n$ poetry config --local installer.no-binary :none:\n```\n\n----------------------------------------\n\nTITLE: Demonstrating simplified error output in Poetry 1.2\nDESCRIPTION: Example of the simplified error handling in Poetry 1.2, which omits stack traces for common errors. Error messages are now more concise and user-friendly.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-31-announcing-poetry-1-2-0.md#2025-04-10_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry add httpx==0.0.0\n\nCould not find a matching version of package httpx\n```\n\n----------------------------------------\n\nTITLE: Poetry Environment Information Output Example\nDESCRIPTION: Sample output from the 'poetry env info' command showing virtualenv details and system information.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2019-12-12-announcing-poetry-1-0-0.md#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nVirtualenv\nPython:         3.7.1\nImplementation: CPython\nPath:           /path/to/poetry/cache/virtualenvs/test-O3eWbxRl-py3.7\nValid:          True\n\nSystem\nPlatform: darwin\nOS:       posix\nPython:   /path/to/main/python\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Dependency as Editable in pyproject.toml\nDESCRIPTION: This TOML configuration sets a directory dependency to be installed in editable mode by setting the develop property to true.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-10-01-announcing-poetry-1-1-0.md#2025-04-10_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.dependencies]\nmy-package = {path = \"../path/to/dependency\", develop = true}\n```\n\n----------------------------------------\n\nTITLE: Poetry Environment List Output Example\nDESCRIPTION: Sample output from the 'poetry env list' command showing available virtualenvs with the currently activated one.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2019-12-12-announcing-poetry-1-0-0.md#2025-04-10_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntest-O3eWbxRl-py2.7\ntest-O3eWbxRl-py3.6\ntest-O3eWbxRl-py3.7 (Activated)\n```\n\n----------------------------------------\n\nTITLE: Configuring PEP-517 Build System in TOML\nDESCRIPTION: Configuration for specifying Poetry as the PEP-517 compliant build backend in pyproject.toml. This allows tools that support PEP-517 to use Poetry for building the project.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-10-17-poetry-0-12-0-is-out.md#2025-04-10_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[build-system]\nrequires = [\"poetry>=0.12\"]\nbuild-backend = \"poetry.masonry.api\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Certificates for Poetry Repositories\nDESCRIPTION: Examples of setting up custom CA certificates and client certificates for secure repository connections.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2019-12-12-announcing-poetry-1-0-0.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npoetry config certificates.foo.cert /path/to/ca.pem\npoetry config certificates.foo.client-cert /path/to/client.pem\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Python Version Dependencies in TOML\nDESCRIPTION: Example of specifying multiple version constraints for a dependency based on different Python versions in pyproject.toml. This allows for more granular control over package versions across different Python environments.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-10-17-poetry-0-12-0-is-out.md#2025-04-10_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.dependencies]\nfoo = [\n    {version = \"<=1.9\", python = \"^2.7\"},\n    {version = \"^2.0\", python = \"^3.4\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Disabling New Installer in Poetry Configuration\nDESCRIPTION: This command disables the new experimental installer in Poetry by setting the configuration option to false.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2020-10-01-announcing-poetry-1-1-0.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry config experimental.new-installer false\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Package Paths in Poetry\nDESCRIPTION: Demonstrates how to use the new packages property to specify custom package locations when your project doesn't follow the standard structure. The include parameter defines which package directories to include in the project.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-06-28-poetry-0-11-0-is-out.md#2025-04-10_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry]\n# ...\npackages = [\n    { include = \"mypackage\" },\n    { include = \"extra_package/**/*.py\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Config Migration Command\nDESCRIPTION: Command to migrate outdated Poetry configuration settings\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-05-announcing-poetry-2-0-0.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npoetry config --migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry to Create Virtualenvs in Project Directory\nDESCRIPTION: Commands for enabling and disabling the in-project virtualenv setting, which creates virtualenvs in a .venv directory within the project folder.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-05-28-poetry-0-10-0-is-out.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry config settings.virtualenvs.in-project true\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry config settings.virtualenvs.in-project --unset\n```\n\n----------------------------------------\n\nTITLE: Poetry Check Command\nDESCRIPTION: Command to check for deprecated fields in pyproject.toml\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-05-announcing-poetry-2-0-0.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npoetry check\n```\n\n----------------------------------------\n\nTITLE: Initializing a Poetry Project with the init Command\nDESCRIPTION: Command for creating a new pyproject.toml file interactively by prompting for basic package information.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-05-28-poetry-0-10-0-is-out.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry init\n```\n\n----------------------------------------\n\nTITLE: Poetry Version Requirement\nDESCRIPTION: Configuration for specifying minimum Poetry version requirement\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-05-announcing-poetry-2-0-0.md#2025-04-10_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry]\nrequires-poetry = \">=2.0\"\n```\n\n----------------------------------------\n\nTITLE: Adding Path Dependencies with Poetry CLI\nDESCRIPTION: Shows different ways to add local path dependencies including directories, tar.gz archives, and wheel files.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-05-07-poetry-0-9-0-is-out.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry add my-package --path ../my-package/\npoetry add my-package --path ../my-package/dist/my-package-0.1.0.tar.gz\npoetry add my-package --path ../my-package/dist/my_package-0.1.0.whl\n```\n\n----------------------------------------\n\nTITLE: Configuring Setup File Generation in Poetry\nDESCRIPTION: Configuration in pyproject.toml to explicitly enable setup.py file generation, which is now disabled by default in Poetry 1.4.0\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2023-02-27-announcing-poetry-1-4-0.md#2025-04-10_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.build]\ngenerate-setup-file = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Dependencies in pyproject.toml\nDESCRIPTION: Example of specifying a directory dependency in the Poetry configuration file.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-05-07-poetry-0-9-0-is-out.md#2025-04-10_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tool.poetry.dependencies]\nmy-package = { path = \"../my-package/\" }\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a Poetry Plugin with pipx\nDESCRIPTION: Command to uninstall a Poetry plugin when Poetry was installed using pipx.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2021-05-21-announcing-poetry-1-2-0a1.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npipx runpip poetry uninstall poetry-plugin\n```\n\n----------------------------------------\n\nTITLE: Project Structure with src Layout\nDESCRIPTION: Shows the directory structure for a Poetry project using the src layout pattern.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-05-07-poetry-0-9-0-is-out.md#2025-04-10_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nmy-package/\n└── src/\n    └── my_package/\n        └── __init__.py\n```\n\n----------------------------------------\n\nTITLE: Using PEP 508 Strings with Poetry Add Command\nDESCRIPTION: Shows how to add dependencies using PEP 508 strings with the Poetry add command.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/history.md#2025-04-10_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npoetry add \"requests[security] (>=2.8.1, ==2.8.*)\" \"flask blinker>=1.0,<2.0\"\n```\n\n----------------------------------------\n\nTITLE: Clearing Poetry Cache Commands\nDESCRIPTION: Examples of using the new cache:clear command to clear specific package versions or entire repository caches.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-05-07-poetry-0-9-0-is-out.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry cache:clear pypy:pendulum:1.4.4\npoetry cache:clear pypy --all\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to 1.2.0rc2 Using Self-update Command\nDESCRIPTION: Command to update an existing Poetry installation to version 1.2.0rc2 preview release using the built-in self-update mechanism.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-26-announcing-poetry-1-2-0rc2.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update --preview\n```\n\n----------------------------------------\n\nTITLE: Adding Local File Dependencies in Poetry\nDESCRIPTION: TOML configuration example showing how to add local wheel or sdist files as project dependencies in the pyproject.toml file.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-04-13-poetry-0-8-0-is-out.md#2025-04-10_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\ndemo = { file = \"./distributions/demo-0.1.0-py2.py3-none-any.whl\" }\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry to 1.2.0rc1 using self update command\nDESCRIPTION: This snippet demonstrates how to update an existing Poetry installation to version 1.2.0rc1 using the self update command with the preview flag.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2022-08-23-announcing-poetry-1-2-0rc1.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ poetry self update --preview\n```\n\n----------------------------------------\n\nTITLE: Using the debug:info command in Poetry 0.6.4\nDESCRIPTION: New command added in Poetry 0.6.4 to retrieve debugging information about the current environment.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-03-21-poetry-0-6-4-is-out.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndebug:info\n```\n\n----------------------------------------\n\nTITLE: Using the add command with optional dependencies option\nDESCRIPTION: Reference to the `--optional` flag with the `add` command, which was fixed in this release to properly mark dependencies as optional.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-03-21-poetry-0-6-4-is-out.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n--optional\n```\n\n----------------------------------------\n\nTITLE: Lock File Group Configuration\nDESCRIPTION: Example of group and marker configuration in Poetry lock file\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-05-announcing-poetry-2-0-0.md#2025-04-10_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\ngroups = [\"main\", \"dev\"]\nmarkers = 'sys_platform == \"win32\"'\n```\n\n----------------------------------------\n\nTITLE: Installer Re-resolve Configuration\nDESCRIPTION: Command to configure Poetry's installer re-resolve behavior\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-05-announcing-poetry-2-0-0.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npoetry config installer.re-resolve false\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes - Python Poetry Documentation Updates\nDESCRIPTION: List of documentation improvements including test coverage information, pre-commit commands, exclude/include explanations, compatible release requirements, and build script documentation\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-05-announcing-poetry-2-0-0.md#2025-04-10_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n### Docs\n\n- Add information about getting test coverage in the contribution guide (#9726).\n- Mention `pre-commit-autoupdate` as an alternative to `pre-commit autoupdate` (#9716).\n- Improve the explanation of `exclude` and `include` (#9734).\n- Add information about compatible release requirements, i.e. `~=` (#9783).\n- Add documentation for using a build script to build extension modules (#9864).\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes - Poetry Core 2.0.0 Changes\nDESCRIPTION: Comprehensive list of changes in poetry-core 2.0.0 including new features, deprecations, and bug fixes with their corresponding PR references\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2025-01-05-announcing-poetry-2-0-0.md#2025-04-10_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n### poetry-core ([`2.0.0`](https://github.com/python-poetry/poetry-core/releases/tag/2.0.0))\n\n- Add support for non PEP440 compliant version in the `platform_release` marker (#722).\n- Add support for string comparisons with `in` / `not in` in generic constraints (#722).\n- Add support for script files that are generated by a build script (#710).\n- Add support for `SOURCE_DATE_EPOCH` when building packages (#766, #781).\n- Create `METADATA` files with version 2.3 instead of 2.2 (#707).\n- Remove support for `x` in version constraints (#770).\n- Remove support for scripts with extras (#708).\n- Remove deprecated features and interfaces (#702, #769).\n- Deprecate `tool.poetry.dev-dependencies` in favor of `tool.poetry.group.dev.dependencies` (#754).\n- Fix an issue where the `platlib` directory of the wrong Python was used (#726).\n- Fix an issue where building a wheel in a nested output directory results in an error (#762).\n- Fix an issue where `+` was not allowed in git URL paths (#765).\n- Fix an issue where the temporary directory was not cleaned up on error (#775).\n- Fix an issue where the regular expression for author names was too restrictive (#517).\n- Fix an issue where basic auth http(s) credentials could not be parsed (#791).\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog entries detailing version releases, bug fixes, feature additions, and documentation updates for the Poetry package manager.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/history.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntype: page\nlayout: single\ntitle: History\n---\n\n## [2.1.2] - 2025-03-29\n\n### Changed\n\n- Improve performance of locking dependencies (#10275).\n\n### Fixed\n\n- Fix an issue where markers were not locked correctly (#10240).\n- Fix an issue where the result of `poetry lock` was not deterministic (#10276).\n- Fix an issue where `poetry env activate` returned the wrong command for `tcsh` (#10243).\n- Fix an issue where `poetry env activate` returned the wrong command for `pwsh` on Linux (#10256).\n\n### Docs\n\n- Update basic usage section to reflect new default layout (#10203).\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Verification for Custom Package Sources in Poetry\nDESCRIPTION: Demonstrates how to disable TLS verification for custom package sources using the Poetry configuration command.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/history.md#2025-04-10_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npoetry config certificates.<repository>.cert false\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with All Extras in Poetry\nDESCRIPTION: Demonstrates how to install dependencies with all extras using the new --all-extras flag.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/history.md#2025-04-10_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\npoetry install --all-extras\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Binary Distribution Selection in Poetry\nDESCRIPTION: Shows how to configure Poetry to select non-binary distributions when installing dependencies.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/history.md#2025-04-10_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\npoetry config installer.no-binary <package_name>\n```\n\n----------------------------------------\n\nTITLE: Poetry Version Number Format\nDESCRIPTION: Version number format used in Poetry releases, following semantic versioning pattern.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/history.md#2025-04-10_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n[1.2.0b1]\n```\n\n----------------------------------------\n\nTITLE: Poetry Changelog Entry in Markdown\nDESCRIPTION: Changelog entries for Poetry package manager documenting version history from 0.2.0 to 0.6.2, including Added, Changed, and Fixed sections for each release.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/history.md#2025-04-10_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### Fixed\n\n- Fixed built wheels not getting information from the virtualenv.\n- Fixed building wheel with conditional extensions.\n- Fixed missing files in built wheel with extensions.\n- Fixed call to venv binaries on windows.\n- Fixed subdependencies representation in lock file.\n\n## [0.6.2] - 2018-03-19\n\n### Changed\n\n- Changed how wildcard constraints are handled.\n\n### Fixed\n\n- Fixed errors with pip 9.0.2.\n\n## [0.6.1] - 2018-02-18\n\n### Fixed\n\n- Fixed wheel entry points being written on a single line.\n- Fixed wheel metadata (Tag and Root-Is-Purelib).\n\n## [0.6.0] - 2018-03-16\n\n### Added\n\n- Added support for virtualenv autogeneration (Python 3.6+ only).\n- Added the `run` command to execute commands inside the created virtualenvs.\n- Added the `debug:resolve` command to debug dependency resolution.\n- Added `pyproject.toml` file validation.\n- Added support for Markdown readme files.\n\n### Fixed\n\n- Fixed color displayed in `show` command for semver-compatible updates.\n- Fixed Python requirements in publishing metadata.\n- Fixed `update` command reinstalling every dependency.\n\n## [0.5.0] - 2018-03-14\n\n### Added\n\n- Added experimental support for package with C extensions.\n\n### Changed\n\n- Added hashes check when installing packages.\n\n### Fixed\n\n- Fixed handling of post releases.\n- Fixed python restricted dependencies not being checked against virtualenv version.\n- Fixed python/platform constraint not being picked up for subdependencies.\n- Fixed skipped packages appearing as installing.\n- Fixed platform specification not being used when resolving dependencies.\n\n## [0.4.2] - 2018-03-10\n\n### Fixed\n\n- Fixed TypeError when `requires_dist` is null on PyPI.\n\n## [0.4.1] - 2018-03-08\n\n### Fixed\n\n- Fixed missing entry point\n\n## [0.4.0] - 2018-03-08\n\n### Added\n\n- Added packaging support (sdist and pure-python wheel).\n- Added the `build` command.\n- Added support for extras definition.\n- Added support for dependencies extras specification.\n- Added the `config` command.\n- Added the `publish` command.\n\n### Changed\n\n- Dependencies system constraints are now respected when installing packages.\n- Complied with PEP 440\n\n### Fixed\n\n- Fixed `show` command for VCS dependencies.\n- Fixed handling of releases with bad markers in PyPiRepository.\n\n## [0.3.0] - 2018-03-05\n\n### Added\n\n- Added `show` command.\n- Added the `--dry-run` option to the `add` command.\n\n### Changed\n\n- Changed the `poetry.toml` file for the new, standardized `pyproject.toml`.\n- Dependencies of each package is now stored in the lock file.\n- Improved TOML file management.\n- Dependency resolver now respects the root package python version requirements.\n\n### Fixed\n\n- Fixed the `add` command for packages with dots in their names.\n\n## [0.2.0] - 2018-03-01\n\n### Added\n\n- Added `remove` command.\n- Added basic support for VCS (git) dependencies.\n- Added support for private repositories.\n\n### Changed\n\n- Changed `poetry.lock` format.\n\n### Fixed\n\n- Fixed dependencies solving that would lead to dependencies not being written to lock.\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata in YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration for the blog post, defining layout, title, date, categories, tags and URL aliases.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-05-31-poetry-0-10-2-is-out.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: single\ntitle: \"Poetry 0.10.2 is out\"\ndate: 2018-05-31 10:12:35\ncategories: [releases]\ntags: [\"0.x\"]\n\naliases:\n  - poetry-0-10-2-is-out.html\n```\n\n----------------------------------------\n\nTITLE: Adding Git Dependencies with Poetry CLI\nDESCRIPTION: Demonstrates how to add a Git repository as a dependency using Poetry's add command.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-05-07-poetry-0-9-0-is-out.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry add pendulum --git https://github.com/sdispater/pendulum.git\n```\n\n----------------------------------------\n\nTITLE: Adding Git Dependencies with Poetry CLI\nDESCRIPTION: Demonstrates how to add a Git repository as a dependency using Poetry's add command.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-05-07-poetry-0-9-0-is-out.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry add pendulum --git https://github.com/sdispater/pendulum.git\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Poetry 0.5.0 Release Post\nDESCRIPTION: YAML front matter block specifying metadata for the Poetry 0.5.0 release blog post, including layout, title, date, categories, tags, and aliases.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2018-03-14-poetry-0-5-0-is-out.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: single\ntitle: \"Poetry 0.5.0 is out\"\ndate: 2018-03-14 09:12:35\ncategories: [releases]\ntags: [\"0.x\"]\n\naliases:\n  - poetry-0-5-0-is-out.html\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for Python Poetry Website Homepage\nDESCRIPTION: This YAML frontmatter sets up the basic configuration for the Python Poetry website homepage. It leaves the title empty, sets draft status to false, and specifies a 'home' layout template.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/_index.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"\"\ndraft: false\nlayout: \"home\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Posts List Page in YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration for a blog posts listing page. It sets the page title to 'Blog', marks it as not a draft, defines the content type as 'post', and specifies the layout as 'list'.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/_index.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Blog\"\ndraft: false\ntype: post\nlayout: list\n---\n```\n\n----------------------------------------\n\nTITLE: Hugo Page Front Matter Template with Go Template Directives\nDESCRIPTION: A Hugo front matter template in YAML format that automatically generates a title by replacing hyphens with spaces and capitalizing words, sets the current date, and marks the page as a draft.\nSOURCE: https://github.com/python-poetry/website/blob/main/archetypes/default.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Building Poetry Website Locally\nDESCRIPTION: Commands for setting up local development environment for the Poetry website. Includes options for using either remote docs or docs from a local Poetry repository.\nSOURCE: https://github.com/python-poetry/website/blob/main/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake site\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake site POETRY_REPO=../path/to/local/poetry/repo\n```\n\n----------------------------------------\n\nTITLE: Duplicate Dependencies with Overlapping Markers Example (Before Transformation)\nDESCRIPTION: Example of how duplicate dependencies with overlapping markers can be specified in a pyproject.toml file before Poetry's transformation. This demonstrates the format Poetry 1.6.0 now fully supports.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2023-08-20-announcing-poetry-1-6-0.md#2025-04-10_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nmy-package = [\n    { version = \">=1.0\" },\n    { version = \"<2\", markers = \"python_version < '3.10'\" },\n    { version = \">=1.5\", markers = \"sys_platform == 'win32'\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Transformed Dependencies with Mutually Exclusive Markers (After Transformation)\nDESCRIPTION: Example showing how Poetry 1.6.0 transforms dependencies with overlapping markers into an equivalent set with mutually exclusive markers during resolution, ensuring valid solutions for each combination.\nSOURCE: https://github.com/python-poetry/website/blob/main/content/blog/2023-08-20-announcing-poetry-1-6-0.md#2025-04-10_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\nmy-package = [\n    { version = \">=1.0\", markers = \"python_version >= '3.10' and sys_platform != 'win32'\" },\n    { version = \"<2\", markers = \"python_version < '3.10' and sys_platform != 'win32'\" },\n    { version = \">=1.5\", markers = \"python_version >= '3.10' and sys_platform = 'win32'\" },\n    { version = \">=1.5,<2\", markers = \"python_version < '3.10' and sys_platform == 'win32'\" },\n]\n```"
  }
]