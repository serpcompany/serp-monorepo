[
  {
    "owner": "questdb",
    "repo": "questdb",
    "content": "TITLE: Starting QuestDB with Docker\nDESCRIPTION: Command to launch QuestDB using Docker with ports 9000, 9009, and 8812 exposed to allow access to the web console, InfluxDB line protocol ingest, and PostgreSQL wire protocol.\nSOURCE: https://github.com/questdb/questdb/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9000:9000 -p 9009:9009 -p 8812:8812 questdb/questdb\n```\n\n----------------------------------------\n\nTITLE: Date Conversion Functions\nDESCRIPTION: Class paths for date and timestamp manipulation functions including conversions, extractions, and calculations\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nio.questdb.griffin.engine.functions.date.ToTimestampVCFunctionFactory\nio.questdb.griffin.engine.functions.date.VarcharToTimestampVCFunctionFactory\n// ... [additional date conversion functions]\n```\n\n----------------------------------------\n\nTITLE: Copying Data Between QuestDB Instances with Table2Ilp (Bash)\nDESCRIPTION: Table2Ilp is used to copy data from one QuestDB instance to another. It uses Postgres wire to select data and ILP to insert it, making it useful for migrating data to a running instance. The utility requires parameters for destination table name (-d), destination ILP connection (-dilp), source select query (-s), and source connection string (-sc). Optional parameters include timestamp column (-sts) and symbol columns (-sym).\nSOURCE: https://github.com/questdb/questdb/blob/master/utils/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njava -cp utils.jar io.questdb.cliutil.Table2Ilp -d trades -dilp \"https::addr=localhost:9000;username=admin;password=quest;\" -s \"trades WHERE start_time in '2022-06'\" \\ \n     -sc \"jdbc:postgresql://localhost:9812/qdb?user=account&password=secret&ssl=false\" \\\n     -sym \"ticker,exchagne\" -sts start_time\n```\n\n----------------------------------------\n\nTITLE: QuestDB Server Configuration Properties\nDESCRIPTION: Configuration properties for QuestDB server including file paths, worker settings, network bindings, and performance-related parameters. These settings control various aspects of server behavior and performance characteristics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ncairo.sql.copy.root=/home/pim/Downloads\ncairo.sql.backup.root=/home/pim/.questdb/dbbak\nshared.worker.count=1\nshared.worker.affinity=1\npgwire.enabled=false\nreplication.enabled=true\nreplication.udp.bind.to=127.0.0.1:9010\nhttp.security.readonly=false\n\nline.tcp.msg.buffer.size=32768\nline.tcp.max.uncommitted.rows=100\n#line.tcp.net.bind.to=10.0.0.1:9009\nline.tcp.net.bind.to=127.0.0.1:9009\n#line.tcp.auth.db.path=conf/authDb.txt\nline.tcp.writer.worker.count=1\nline.tcp.writer.worker.affinity=3\n#line.tcp.writer.halt.on.error=true\nline.tcp.io.worker.count=2\nline.tcp.io.worker.affinity=5,7\n#line.tcp.io.halt.on.error=true\n#line.tcp.io.aggressive.recv=true\nline.tcp.net.io.queue.capacity=256\n\nhttp.bind.to=127.0.0.1:9000\nline.udp.bind.to=127.0.0.1:9009\npg.net.bind.to=127.0.0.1:8812\ntelemetry.enabled=false\ncairo.sql.map.page.size=33554432\ncairo.sql.hash.join.light.value.page.size=33554432\n```\n\n----------------------------------------\n\nTITLE: Querying High CPU Usage for Specific Host\nDESCRIPTION: This SQL query selects all CPU data where usage is above 90% for a specific host within a given time range. It demonstrates filtering by CPU usage, hostname, and timestamp.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/cpu-only-example-queries.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM cpu\nWHERE usage_user > 90.0\n AND hostname IN ('host_249')\n AND timestamp >= '2016-01-01T07:47:52Z'\n AND timestamp < '2016-01-01T19:47:52Z\n```\n\n----------------------------------------\n\nTITLE: Compiling QuestDB and Building Web Console\nDESCRIPTION: Maven command to compile the QuestDB database and build the web console. This skips tests and activates the build-web-console profile.\nSOURCE: https://github.com/questdb/questdb/blob/master/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package -DskipTests -P build-web-console\n```\n\n----------------------------------------\n\nTITLE: Boolean 'in' and 'between' Comparison Function Factories\nDESCRIPTION: Function factory classes for implementing the SQL 'IN' and 'BETWEEN' operators in QuestDB. These functions check if a value exists within a set of values or falls within a specified range, supporting various data types.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\n# 'in'\nio.questdb.griffin.engine.functions.bool.InSymbolCursorFunctionFactory\nio.questdb.griffin.engine.functions.bool.InStrFunctionFactory\nio.questdb.griffin.engine.functions.bool.InVarcharFunctionFactory\nio.questdb.griffin.engine.functions.bool.InCharFunctionFactory\nio.questdb.griffin.engine.functions.bool.InDoubleFunctionFactory\nio.questdb.griffin.engine.functions.bool.InLongFunctionFactory\nio.questdb.griffin.engine.functions.bool.InSymbolFunctionFactory\nio.questdb.griffin.engine.functions.bool.InTimestampTimestampFunctionFactory\nio.questdb.griffin.engine.functions.bool.BetweenTimestampFunctionFactory\nio.questdb.griffin.engine.functions.bool.InUuidFunctionFactory\nio.questdb.griffin.engine.functions.bool.InTimestampIntervalFunctionFactory\n\n# 'all'\nio.questdb.griffin.engine.functions.bool.AllNotEqStrFunctionFactory\nio.questdb.griffin.engine.functions.bool.AllNotEqVarcharFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Recovering String Column Indexes with RecoverVarIndex in QuestDB (Bash)\nDESCRIPTION: RecoverVarIndex is used to rebuild the .i file for string columns from the .d file in QuestDB. It's helpful when the .i file is corrupted. The utility can rebuild indexes for all string columns or a specific column, and can target all partitions or a specific partition. It requires the full path to the table and offers optional parameters for column name (-c) and partition name (-p).\nSOURCE: https://github.com/questdb/questdb/blob/master/utils/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njava -cp utils.jar io.questdb.cliutil.RecoverVarIndex /questdb-root/db/trades-COINBASE\n\njava -cp utils.jar io.questdb.cliutil.RecoverVarIndex /questdb-root/db/trades-COINBASE -c stringColumn\n\njava -cp utils.jar io.questdb.cliutil.RecoverVarIndex /questdb-root/db/trades-COINBASE -p 2022-03-21\n\njava -cp utils.jar io.questdb.cliutil.RecoverVarIndex /questdb-root/db/trades-COINBASE -p 2022-03-21 -c stringColumn\n```\n\n----------------------------------------\n\nTITLE: QuestDB Line TCP Configuration Settings\nDESCRIPTION: Configuration parameters for QuestDB's Line TCP protocol including buffer size, queue capacity and measurement size settings.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_19\n\nLANGUAGE: properties\nCODE:\n```\nline.tcp.msg.buffer.size=32768\nline.tcp.net.io.queue.capacity=128\nline.tcp.max.measurement.size=400\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB using Docker\nDESCRIPTION: Command to start QuestDB using Docker, exposing the necessary ports for Web Console, InfluxDB Line Protocol, and PostgreSQL Wire Protocol.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.vi-vn.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9000:9000 -p 9009:9009 -p 8812:8812 questdb/questdb\n```\n\n----------------------------------------\n\nTITLE: String and Character Conversion Functions\nDESCRIPTION: Class paths for string manipulation functions including to_char and length operations\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nio.questdb.griffin.engine.functions.date.ToStrDateFunctionFactory\nio.questdb.griffin.engine.functions.date.ToStrTimestampFunctionFactory\nio.questdb.griffin.engine.functions.str.ToCharBinFunctionFactory\n\nio.questdb.griffin.engine.functions.str.LengthStrFunctionFactory\nio.questdb.griffin.engine.functions.str.LengthVarcharFunctionFactory\nio.questdb.griffin.engine.functions.str.LengthSymbolFunctionFactory\nio.questdb.griffin.engine.functions.str.LengthBinFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Table Indexes with RebuildIndex in QuestDB (Bash)\nDESCRIPTION: RebuildIndex is used to rebuild table indexes in QuestDB. It allows rebuilding indexes for all columns or specific columns, and can target all partitions or a specific partition. The utility requires the full path to the table and offers optional parameters for column name (-c) and partition name (-p).\nSOURCE: https://github.com/questdb/questdb/blob/master/utils/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava -cp utils.jar io.questdb.cliutil.IndexBuilder /questdb-root/db/trades-COINBASE\n\njava -cp utils.jar io.questdb.cliutil.IndexBuilder /questdb-root/db/trades-COINBASE -c symbol\n\njava -cp utils.jar io.questdb.cliutil.IndexBuilder /questdb-root/db/trades-COINBASE -p 2022-03-21\n\njava -cp utils.jar io.questdb.cliutil.IndexBuilder /questdb-root/db/trades-COINBASE -p 2022-03-21 -c symbol\n```\n\n----------------------------------------\n\nTITLE: QuestDB Line TCP Configuration\nDESCRIPTION: Configuration properties for QuestDB line protocol TCP settings including buffer sizes, worker counts, and network binding\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_24\n\nLANGUAGE: properties\nCODE:\n```\nshared.worker.count=1\nline.tcp.msg.buffer.size=32768\nline.tcp.max.uncommitted.rows=10000000\nline.tcp.net.bind.to=127.0.0.1:9009\nline.tcp.writer.worker.count=1\nline.tcp.io.worker.count=1\nline.tcp.maintenance.job.hysteresis.in.ms=300000\nline.tcp.net.io.queue.capacity=128\nline.tcp.max.measurement.size=2048\n```\n\n----------------------------------------\n\nTITLE: Aggregating Maximum CPU Metrics for Single Host\nDESCRIPTION: This SQL query calculates maximum values for various CPU metrics, grouped by hour, for a specific host within a given time range. It uses the SAMPLE BY clause for time-based aggregation.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/cpu-only-example-queries.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n hour(timestamp) AS hour,\n max(usage_user) AS max_usage_user, max(usage_system) AS max_usage_system, max(usage_idle) AS max_usage_idle, max(usage_nice) AS max_usage_nice, max(usage_iowait) AS max_usage_iowait, max(usage_irq) AS max_usage_irq, max(usage_softirq) AS max_usage_softirq, max(usage_steal) AS max_usage_steal, max(usage_guest) AS max_usage_guest, max(usage_guest_nice) AS max_usage_guest_nice\nFROM cpu\nWHERE hostname IN ('host_249')\n AND timestamp >= '2016-01-01T08:24:59Z'\n AND timestamp < '2016-01-01T16:24:59Z'\n SAMPLE BY 1h\n```\n\n----------------------------------------\n\nTITLE: Installing QuestDB using Docker\nDESCRIPTION: Command to run QuestDB using Docker with ports 9000 (Web Console/REST), 9009 (InfluxDB), and 8812 (PostgreSQL) exposed.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.pt.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9000:9000 -p 9009:9009 -p 8812:8812 questdb/questdb\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB with Docker\nDESCRIPTION: Command to quickly start QuestDB using Docker, exposing the necessary ports for web console (9000), InfluxDB line protocol (9009), and PostgreSQL wire protocol (8812).\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.tr-tr.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9000:9000 -p 9009:9009 -p 8812:8812 questdb/questdb\n```\n\n----------------------------------------\n\nTITLE: Random Generator Functions\nDESCRIPTION: Class paths for various random data generation functions including numbers, strings, dates, and UUIDs\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nio.questdb.griffin.engine.functions.rnd.LongSequenceFunctionFactory\nio.questdb.griffin.engine.functions.rnd.RndIntFunctionFactory\n// ... [additional random generator functions]\n```\n\n----------------------------------------\n\nTITLE: Aggregating Maximum CPU Metrics for Multiple Hosts\nDESCRIPTION: This SQL query calculates maximum values for various CPU metrics, grouped by hour, for multiple specified hosts within a given time range. It demonstrates the use of SAMPLE BY for time-based aggregation across multiple hosts.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/cpu-only-example-queries.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n hour(timestamp) AS hour,\n max(usage_user) AS max_usage_user, max(usage_system) AS max_usage_system, max(usage_idle) AS max_usage_idle, max(usage_nice) AS max_usage_nice, max(usage_iowait) AS max_usage_iowait, max(usage_irq) AS max_usage_irq, max(usage_softirq) AS max_usage_softirq, max(usage_steal) AS max_usage_steal, max(usage_guest) AS max_usage_guest, max(usage_guest_nice) AS max_usage_guest_nice\nFROM cpu\nWHERE hostname IN ('host_249', 'host_1403', 'host_1435', 'host_3539', 'host_3639', 'host_3075', 'host_815', 'host_2121')\n AND timestamp >= '2016-01-01T08:24:59Z'\n AND timestamp < '2016-01-01T16:24:59Z'\n SAMPLE BY 1h\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 3 Workers\nDESCRIPTION: Executing the tsbs_load_questdb benchmark tool with 3 workers and displaying performance metrics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 3\n```\n\n----------------------------------------\n\nTITLE: Running Compiled QuestDB\nDESCRIPTION: Java command to run the compiled QuestDB database. This uses the compiled jar file and specifies the root directory for the database.\nSOURCE: https://github.com/questdb/questdb/blob/master/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njava -p core/target/questdb-<version>-SNAPSHOT.jar -m io.questdb/io.questdb.ServerMain -d <root_dir>\n```\n\n----------------------------------------\n\nTITLE: Regex Function Factories\nDESCRIPTION: Class paths for regex-related function factories including pattern matching and LIKE operations\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nio.questdb.griffin.engine.functions.regex.NotMatchStrFunctionFactory\nio.questdb.griffin.engine.functions.regex.NotMatchVarcharFunctionFactory\nio.questdb.griffin.engine.functions.regex.NotMatchCharFunctionFactory\n\nio.questdb.griffin.engine.functions.regex.LikeStrFunctionFactory\nio.questdb.griffin.engine.functions.regex.LikeVarcharFunctionFactory\nio.questdb.griffin.engine.functions.regex.LikeSymbolFunctionFactory\nio.questdb.griffin.engine.functions.regex.ILikeStrFunctionFactory\nio.questdb.griffin.engine.functions.regex.ILikeVarcharFunctionFactory\nio.questdb.griffin.engine.functions.regex.ILikeSymbolFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Querying Latest CPU Data by Host\nDESCRIPTION: This SQL query retrieves the most recent CPU data for each hostname. It uses the 'latest by' clause to get the last recorded entry for each unique hostname.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/cpu-only-example-queries.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM cpu latest by hostname\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 512 Buffer Size\nDESCRIPTION: Executes the tsbs_load_questdb benchmark with a line.tcp.msg.buffer.size of 512. It loads 345,600,000 metrics in about 161 seconds, achieving a rate of 2,138,119 metrics/sec.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Installing and Managing QuestDB with Homebrew on macOS\nDESCRIPTION: Commands for macOS users to install QuestDB using Homebrew and manage the service, including starting and stopping the database.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.zh-hk.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install questdb\nbrew services start questdb\n\nquestdb start // To start questdb\nquestdb stop  // To stop questdb\n```\n\n----------------------------------------\n\nTITLE: Configuring QuestDB Authentication Database with Elliptic Curve Keys\nDESCRIPTION: Example of an authentication database file for QuestDB that uses elliptic curve cryptography (curve P-256) for securing connections. The file shows the format and includes a sample authentication entry for a user with key type 'ec-p-256-sha256'.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/test/resources/io/questdb/test/cutlass/line/tcp/authDb.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Test auth db file, format is\n# [key/user id] [key type] {key details} ...\n# Only elliptic curve (for curve P-256) are supported (key type ec-p-256-sha256), the key details for such a key are the base64url encoded x and y points that determine the public key as defined in the JSON web token standard (RFC 7519)\n#\n# The auth db file needs to be put somewhere in the questdbn server root and referenced in the line.tcp.auth.db.path setting of server conf, like:\n# line.tcp.auth.db.path=conf/authDb.txt\n#\n# Below is an elliptic curve (for curve P-256) JSON Web Key\n#{\n#  \"kty\": \"EC\",\n#  \"d\": \"5UjEMuA0Pj5pjK8a-fa24dyIf-Es5mYny3oE_Wmus48\",\n#  \"crv\": \"P-256\",\n#  \"kid\": \"testUser1\",\n#  \"x\": \"fLKYEaoEb9lrn3nkwLDA-M_xnuFOdSt9y0Z7_vWSHLU\",\n#  \"y\": \"Dt5tbS1dEDMSYfym3fgMv0B99szno-dFc1rYF9t0aac\"\n#}\n# For this kind of key the \"d\" parameter is used to generate the secret key. The \"x\" and \"y\" parameters are used to generate the public key\ntestUser1\tec-p-256-sha256\tAKfkxOBlqBN8uDfTxu2Oo6iNsOPBnXkEH4gt44tBJKCY\tAL7WVjoH-IfeX_CXo5G1xXKp_PqHUrdo3xeRyDuWNbBX\n```\n\n----------------------------------------\n\nTITLE: Releasing QuestDB to Maven Central\nDESCRIPTION: Maven command to deploy QuestDB to Maven Central, excluding benchmarks module and including the web console.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmvn -pl !benchmarks clean deploy -DskipTests -P build-web-console,maven-central-release\n```\n\n----------------------------------------\n\nTITLE: Type Casting Functions\nDESCRIPTION: Class paths for type casting operations, particularly for double and float conversions to other data types\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nio.questdb.griffin.engine.functions.cast.CastDoubleToIntFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDoubleToBooleanFunctionFactory\n// ... [additional casting functions]\n```\n\n----------------------------------------\n\nTITLE: Grouping Average CPU Usage by Time and Host\nDESCRIPTION: These SQL queries demonstrate grouping and averaging CPU usage metrics by timestamp and hostname. They show variations with different numbers of metrics and time ranges, using SAMPLE BY for time-based aggregation.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/cpu-only-example-queries.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT timestamp, hostname,\n avg(usage_user) AS avg_usage_user\nFROM cpu\nWHERE timestamp >= '2016-01-01T07:47:52Z'\n AND timestamp < '2016-01-01T19:47:52Z'\n SAMPLE BY 1h\n GROUP BY timestamp, hostname\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT timestamp, hostname,\n avg(usage_user) AS avg_usage_user, avg(usage_system) AS avg_usage_system, avg(usage_idle) AS avg_usage_idle, avg(usage_nice) AS avg_usage_nice, avg(usage_iowait) AS avg_usage_iowait\nFROM cpu\nWHERE timestamp >= '2016-01-01T07:47:52Z'\n AND timestamp < '2016-01-01T19:47:52Z'\n SAMPLE BY 1h\n GROUP BY timestamp, hostname\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT timestamp, hostname,\n avg(usage_user) AS avg_usage_user, avg(usage_system) AS avg_usage_system, avg(usage_idle) AS avg_usage_idle, avg(usage_nice) AS avg_usage_nice, avg(usage_iowait) AS avg_usage_iowait, avg(usage_irq) AS avg_usage_irq, avg(usage_softirq) AS avg_usage_softirq, avg(usage_steal) AS avg_usage_steal, avg(usage_guest) AS avg_usage_guest, avg(usage_guest_nice) AS avg_usage_guest_nice\nFROM cpu\nWHERE timestamp >= '2016-01-01T10:20:52Z'\n AND timestamp < '2016-01-01T22:20:52Z'\n SAMPLE BY 1h\n GROUP BY timestamp, hostname\n```\n\n----------------------------------------\n\nTITLE: Loading QuestDB Data with 8 Workers\nDESCRIPTION: Performance test results using tsbs_load_questdb with 8 workers, achieving ~6.2M metrics/sec and ~620K rows/sec throughput.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 8\n```\n\n----------------------------------------\n\nTITLE: Installing QuestDB with Homebrew on macOS\nDESCRIPTION: Instructions for installing QuestDB on macOS using Homebrew package manager, including commands to start and stop the database service.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.tr-tr.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install questdb\nbrew services start questdb\n\nquestdb start // To start questdb\nquestdb stop  // To stop questdb\n```\n\n----------------------------------------\n\nTITLE: Performing Maven Release\nDESCRIPTION: Commands to prepare and perform the Maven release, which creates a Git tag, updates version numbers, and publishes JAR files to Maven Central.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/release/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn -B release:prepare release:perform\n```\n\n----------------------------------------\n\nTITLE: Listing Int Type Casting Function Factories in QuestDB\nDESCRIPTION: A collection of fully qualified class names for function factories that handle casting from the Int data type to various other data types in QuestDB.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.cast.CastIntToShortFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToByteFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToCharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToLongFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToFloatFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToDoubleFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToVarcharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToDateFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToTimestampFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToSymbolFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToLong256FunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToBooleanFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIntToIPv4FunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Aggregating CPU Usage for Single and Multiple Hosts\nDESCRIPTION: These SQL queries demonstrate aggregating maximum CPU usage over time for single and multiple hosts. They use SAMPLE BY for time-based grouping and show variations in time ranges and host selections.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/cpu-only-example-queries.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT timestamp,\n max(usage_user) AS max_usage_user\nFROM cpu\nWHERE hostname IN ('host_249')\n AND timestamp >= '2016-01-01T07:47:52Z'\n AND timestamp < '2016-01-01T19:47:52Z'\n SAMPLE BY 1m\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT timestamp,\n max(usage_user) AS max_usage_user\nFROM cpu\nWHERE hostname IN ('host_249', 'host_1403', 'host_1435', 'host_3539', 'host_3639', 'host_3075', 'host_815', 'host_2121')\n AND timestamp >= '2016-01-01T02:17:08Z'\n AND timestamp < '2016-01-01T03:17:08Z'\n SAMPLE BY 1m\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load Test with Default Configuration (Second Run)\nDESCRIPTION: A second benchmark run loading test data into QuestDB using default configuration with the tsbs_load_questdb tool and a single worker. Results show performance metrics over time and final throughput statistics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB with Docker\nDESCRIPTION: Command to start a QuestDB instance using Docker, exposing the web console port (9000), InfluxDB line protocol port (9009), and PostgreSQL protocol port (8812).\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.zh-hk.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9000:9000 -p 9009:9009 -p 8812:8812 questdb/questdb\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB with Docker\nDESCRIPTION: Command to start a QuestDB instance using Docker with the standard ports exposed: 9000 for web console and REST API, 9009 for InfluxDB line protocol, and 8812 for PostgreSQL wire protocol.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.zh-cn.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9000:9000 -p 9009:9009 -p 8812:8812 questdb/questdb\n```\n\n----------------------------------------\n\nTITLE: Symbol to Various Types Cast Function Factories\nDESCRIPTION: Function factory classes for casting Symbol data type to various other data types in QuestDB. Symbol is a specialized string type optimized for repeating string values, and these classes handle conversion to numeric types, string types, and date types.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_18\n\nLANGUAGE: Java\nCODE:\n```\n# cast symbol to ...\nio.questdb.griffin.engine.functions.cast.CastSymbolToIntFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastSymbolToDoubleFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastSymbolToFloatFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastSymbolToLong256FunctionFactory\nio.questdb.griffin.engine.functions.cast.CastSymbolToLongFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastSymbolToShortFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastSymbolToByteFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastSymbolToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastSymbolToVarcharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastSymbolToCharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastSymbolToDateFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastSymbolToTimestampFunctionFactory\n\n# cast helpers\nio.questdb.griffin.engine.functions.cast.VarcharCastHelperFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parallel Processing of Parquet Pages in Rust\nDESCRIPTION: A code example showing how to implement higher parallelism when processing Parquet pages across multiple threads. This snippet demonstrates loading compressed pages from a file and distributing the CPU-intensive work of processing these pages across multiple threads.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/rust/qdbr/parquet2/README.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet handles = vec![];\nfor column in columns {\n    let column_meta = metadata.row_groups[row_group].column(column);\n    let compressed_pages = get_page_iterator(column_meta, &mut file, file)?.collect()?;\n    // each compressed_page has a buffer; cloning is expensive(!). We move it so that the memory\n    // is released at the end of the processing.\n    handles.push(thread::spawn move {\n        page_iter_to_array(compressed_pages.into_iter())\n    })\n}\nlet columns_from_all_groups = handles.join_all();\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load Test with Queue Capacity 256\nDESCRIPTION: Benchmark test using TSBS to load data into QuestDB with line.tcp.net.io.queue.capacity set to 256. The test shows metrics and row throughput measurements over time, with a final summary of overall performance.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Creating Table from Parquet Data\nDESCRIPTION: SQL query to create a new table from Parquet file data with type casting, timestamp configuration, and monthly partitioning.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/io/questdb/site/import/readme.txt#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE trades AS\n(SELECT symbol::symbol AS symbol, side::symbol AS side, price, amount, timestamp FROM read_parquet('trades.parquet'))\nTIMESTAMP(timestamp)\nPARTITION BY MONTH WAL;\n```\n\n----------------------------------------\n\nTITLE: Installing and Managing QuestDB on macOS with Homebrew\nDESCRIPTION: Commands for installing QuestDB via Homebrew on macOS and managing the service, including starting and stopping the database.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.zh-cn.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install questdb\nbrew services start questdb\n\nquestdb start // To start questdb\nquestdb stop  // To stop questdb\n```\n\n----------------------------------------\n\nTITLE: Installing QuestDB using Homebrew on macOS\nDESCRIPTION: Commands to install and manage QuestDB using Homebrew package manager on macOS, including start and stop operations.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.pt.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install questdb\nbrew services start questdb\n\nquestdb start // To start questdb\nquestdb stop  // To stop questdb\n```\n\n----------------------------------------\n\nTITLE: Installing and Managing QuestDB on macOS with Homebrew\nDESCRIPTION: Commands for installing QuestDB using Homebrew package manager on macOS, starting and stopping the QuestDB service.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.vi-vn.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install questdb\nbrew services start questdb\n\nquestdb start // To start questdb\nquestdb stop  // To stop questdb\n```\n\n----------------------------------------\n\nTITLE: Installing QuestDB with Homebrew on macOS\nDESCRIPTION: Commands for installing and managing QuestDB using Homebrew package manager on macOS, including start and stop operations.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.ja-ja.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install questdb\nbrew services start questdb\n\nquestdb start // To start questdb\nquestdb stop  // To stop questdb\n```\n\n----------------------------------------\n\nTITLE: Listing Boolean Type Casting Function Factories in QuestDB\nDESCRIPTION: A collection of fully qualified class names for function factories that handle casting from the Boolean data type to various other data types in QuestDB.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_13\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.cast.CastBooleanToShortFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastBooleanToByteFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastBooleanToCharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastBooleanToIntFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastBooleanToLongFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastBooleanToFloatFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastBooleanToDoubleFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastBooleanToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastBooleanToVarcharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastBooleanToDateFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastBooleanToTimestampFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastBooleanToSymbolFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastBooleanToLong256FunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Working with Statistics and Bloom Filters\nDESCRIPTION: Examples of using row group statistics and bloom filters for filter pushdown operations.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/rust/qdbr/parquet2/guide/src/README.md#2025-04-16_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nif let Some(statistics) = column_chunk.statistics() {\n    match statistics.physical_type() {\n        PhysicalType::BOOLEAN => {\n            let statistics = statistics.as_any().downcast_ref::<BooleanStatistics>().unwrap();\n        }\n        _ => ()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load Test with Message Buffer Size 16384\nDESCRIPTION: Loading test data into QuestDB with line.tcp.msg.buffer.size=16384 using the tsbs_load_questdb tool with a single worker. This test was initiated but no complete results are shown.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Creating Database and Running QuestDB\nDESCRIPTION: Commands to create a database root directory and run QuestDB JAR file with the specified database location.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmkdir <root_directory>\njava -jar core/target/questdb-<software_version>.jar -d <root_directory>\n```\n\n----------------------------------------\n\nTITLE: QuestDB Server Configuration\nDESCRIPTION: Configuration file for QuestDB server, specifying network settings, connection limits, buffer sizes, and worker settings for the Line Protocol endpoint.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_5\n\nLANGUAGE: conf\nCODE:\n```\nshared.worker.count=1\n\nline.tcp.net.active.connection.limit=64\nline.tcp.msg.buffer.size=32768\n#line.tcp.net.bind.to=10.0.0.1:9009\nline.tcp.max.uncommitted.rows=100\n#line.tcp.maintenance.job.hysteresis.in.ms=300000\nline.tcp.net.bind.to=127.0.0.1:9009\n#line.tcp.auth.db.path=conf/authDb.txt\nline.tcp.writer.worker.count=1\n#line.tcp.writer.worker.affinity=3\n#line.tcp.writer.halt.on.error=true\nline.tcp.io.worker.count=8\n#line.tcp.io.worker.affinity=5,7\n#line.tcp.io.halt.on.error=true\n#line.tcp.io.aggressive.recv=true\nline.tcp.net.io.queue.capacity=2560\nline.tcp.max.measurement.size=2048\n```\n\n----------------------------------------\n\nTITLE: TSBS Installation Commands\nDESCRIPTION: Bash commands for setting up the TSBS environment, cloning the repository, and building the necessary Go binaries.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/tmp/go/src/github.com/timescale/\ncd ~/tmp/go/src/github.com/timescale/\n\ngit clone git@github.com:timescale/tsbs.git\ncd tsbs\n\nGOPATH=~/tmp/go go build -v ./...\nGOPATH=~/tmp/go go test -v github.com/timescale/tsbs/cmd/tsbs_load_questdb\nGOPATH=~/tmp/go go install -v ./...\n```\n\n----------------------------------------\n\nTITLE: UUID, GeoHash, Interval Cast Function Factories\nDESCRIPTION: Function factory classes for casting UUID, GeoHash, and Interval data types to other types in QuestDB. These specialized type conversions maintain data integrity during transformation.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_17\n\nLANGUAGE: Java\nCODE:\n```\n# cast UUID to ...\nio.questdb.griffin.engine.functions.cast.CastUuidToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastUuidToVarcharFunctionFactory\n\n# cast GEOHASH to ...\nio.questdb.griffin.engine.functions.cast.CastGeoHashToGeoHashFunctionFactory\n\n# cast INTERVAL to ...\nio.questdb.griffin.engine.functions.cast.CastIntervalToStrFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Accessing Column Chunk Metadata\nDESCRIPTION: Example of accessing metadata for a specific column chunk in a Parquet file.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/rust/qdbr/parquet2/guide/src/README.md#2025-04-16_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet row_group = &metadata.row_groups[0];\nlet column_chunk = &row_group.columns()[0];\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load on QuestDB without VisualVM Attached\nDESCRIPTION: Terminal output showing performance metrics when running tsbs_load_questdb without VisualVM profiler attached. Test loads 34.56 million rows at approximately 313,157 rows per second.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Extensions\nDESCRIPTION: SQL query that retrieves detailed information about installed PostgreSQL extensions. This complex query joins multiple system catalogs to gather extension data including schemas and related tables.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/dbeaver/README.md#2025-04-16_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\ne.oid,\ncfg.tbls,\nn.nspname as schema_name,\ne.*\nFROM\npg_catalog.pg_extension e\njoin pg_namespace n on n.oid =e.extnamespace\nleft join  (\nselect\nARRAY_AGG(ns.nspname || '.' ||  cls.relname) tbls, oid_ext\nfrom\n(\nselect\nunnest(e1.extconfig) oid , e1.oid oid_ext\nfrom\npg_catalog.pg_extension e1 ) c\njoin    pg_class cls on cls.oid = c.oid\njoin pg_namespace ns on ns.oid = cls.relnamespace\ngroup by oid_ext\n) cfg on cfg.oid_ext = e.oid\nORDER BY e.oid;\n```\n\n----------------------------------------\n\nTITLE: Creating Git Branch for Release\nDESCRIPTION: Commands to fetch the latest master branch and create a new branch for the release version (e.g., v_7_1_1).\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/release/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch\ngit checkout master\ngit pull\ngit checkout -b v_7_1_1\n```\n\n----------------------------------------\n\nTITLE: Building Native Code with CMAKE\nDESCRIPTION: Commands to build native code using CMAKE in Release mode. This updates dynamic link libraries that will be loaded by Java through JNI.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/CMAKE_README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake -B build/release -DCMAKE_BUILD_TYPE=Release\ncmake --build build/release --config Release\n```\n\n----------------------------------------\n\nTITLE: Querying Active PostgreSQL Sessions\nDESCRIPTION: SQL query to retrieve all active database sessions. This query selects session statistics from the pg_stat_activity view which contains information about server processes.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/dbeaver/README.md#2025-04-16_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT sa.* FROM pg_catalog.pg_stat_activity sa\n```\n\n----------------------------------------\n\nTITLE: WriterJob Performance Test Results\nDESCRIPTION: Benchmarking results comparing different versions of the WriterJob implementation and their impact on QuestDB performance.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# writerjob regular\n~/tmp/go/bin/tsbs_load_questdb  --file /tmp/bigcpu  --workers 10\ntime,per. metric/s,metric total,overall metric/s,per. row/s,row total,overall row/s\n1613397753,10478929.17,1.048000E+08,10478929.17,1047892.92,1.048000E+07,1047892.92\n1613397763,10269112.79,2.075000E+08,10374021.81,1026911.28,2.075000E+07,1037402.18\n1613397773,10570729.06,3.132000E+08,10439583.76,1057072.91,3.132000E+07,1043958.38\n\nSummary:\nloaded 344804340 metrics in 32.942sec with 10 workers (mean rate 10466959.20 metrics/sec)\nloaded 34480434 rows in 32.942sec with 10 workers (mean rate 1046695.92 rows/sec)\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data Commands\nDESCRIPTION: Commands for generating sample data sets using TSBS, including both small and full dataset generation examples.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_generate_data \\\n--use-case=\"cpu-only\" --seed=123 --scale=4000 \\\n--timestamp-start=\"2016-01-01T00:00:00Z\" --timestamp-end=\"2016-01-01T01:00:00Z\" \\\n--log-interval=\"10s\" --format=\"influx\" > /tmp/data\n```\n\n----------------------------------------\n\nTITLE: Table Operation Function Factory Declarations - Java\nDESCRIPTION: Function factory implementations for table operations including metadata access, partitioning, storage management, and table writer operations.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.table.TableColumnsFunctionFactory\nio.questdb.griffin.engine.functions.table.TablePartitionsFunctionFactory\nio.questdb.griffin.engine.functions.table.TableStorageFunctionFactory\nio.questdb.griffin.engine.functions.table.TouchTableFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Serializing Transaction Files with TxSerializer in QuestDB (Bash)\nDESCRIPTION: TxSerializer is used to serialize binary _txn files to/from readable JSON format. It's primarily used for investigating storage issues. The utility provides options for printing _txn file contents to stdout in JSON format (-d) or transforming existing JSON files into binary _txn format (-s).\nSOURCE: https://github.com/questdb/questdb/blob/master/utils/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njava -cp utils.jar io.questdb.cliutil.TxSerializer -d /questdb-root/db/trades-COINBASE/_txn > /questdb-root/db/trades-COINBASE/txn.json\n\njava -cp utils.jar io.questdb.cliutil.TxSerializer -s /questdb-root/db/trades-COINBASE/txn.json /questdb-root/db/trades-COINBASE/_txnCopy\n```\n\n----------------------------------------\n\nTITLE: Configuring QuestDB Shared Library with Architecture-Specific Optimizations\nDESCRIPTION: Configures the QuestDB shared library build with platform-specific settings for ARM64 and x86 architectures. Defines compiler options, dependencies, and creates separate compilation units for different CPU instruction sets (SSE2, SSE4, AVX2, AVX512). Includes integration with external libraries like simdjson and jemalloc.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# ZLIB_SRCS is defined in Zlib Cmake config\nadd_library(questdb SHARED ${SOURCE_FILES} ${ZLIB_SRCS} ${ASMJIT_SRC})\n\nset(COMMON_OPTIONS \"-Wno-gnu-anonymous-struct;-Wno-nested-anon-types;-Wno-unused-parameter;-fPIC;-fno-rtti;-fno-exceptions\")\n\nset(DEBUG_OPTIONS \"-Wall;-pedantic;-Wextra;-g;-O0\")\nset(RELEASE_OPTIONS \"-O3\")\n\nlist(APPEND DEBUG_OPTIONS \"${ASMJIT_CFLAGS};${COMMON_OPTIONS}\")\nlist(APPEND RELEASE_OPTIONS \"${ASMJIT_CFLAGS};${COMMON_OPTIONS}\")\n\nif (OS_LINUX)\n    target_link_libraries(questdb liburing)\n    add_dependencies(questdb liburing)\nendif ()\n\nif (ARCH_AARCH64)\n    add_compile_definitions(__AARCH64__)\n\n    ## on ARM64 we use vanilla arithmetic functions for now\n    set(\n            AARCH64_FILES\n            src/main/c/share/rosti.cpp\n            src/main/c/aarch64/vect.cpp\n            src/main/c/share/vec_int_key_agg.cpp\n            src/main/c/share/vec_agg_vanilla.cpp\n            src/main/c/share/ooo_dispatch_vanilla.cpp\n            src/main/c/share/geohash_dispatch_vanilla.cpp\n    )\n\n    add_library(questdb-aarch64 OBJECT ${AARCH64_FILES})\n    target_compile_options(questdb-aarch64 PRIVATE \"-fPIC\"\n            \"$<$<CONFIG:DEBUG>:${DEBUG_OPTIONS}>\"\n            \"$<$<CONFIG:RELEASE>:${RELEASE_OPTIONS}>\")\n\n    target_link_libraries(\n            questdb\n            questdb-aarch64\n    )\n\n    target_compile_options(questdb PRIVATE\n            \"$<$<CONFIG:DEBUG>:${DEBUG_OPTIONS}>\"\n            \"$<$<CONFIG:RELEASE>:${RELEASE_OPTIONS}>\")\n\nelse ()\n\n    #assembler subroutines by Agner Fog\n    set(ASMLIB_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/main/c/share/asmlib/)\n    include(${ASMLIB_SOURCE_DIR}CMakeLists.txt)\n\n    ## We need to compile VCL four different times with different CXX options\n    ## for different instruction sets. As vect.cpp compiles it will produce\n    ## different function names for corresponding instruction sets.\n    ## Results of these compilations are then combined together in a single library.\n    ## This way same library will have a set of functions for each instruction sets.\n\n    ## Java will then call a dispatcher, which will check instruction set for the runtime\n    ## and fetch method pointer to the relevant implementation.\n    # SSE 4.1 lib\n    add_library(questdb-sse4 OBJECT ${VCL_FILES})\n    target_compile_options(questdb-sse4 PRIVATE \"-m64;-msse4.1;-fPIC\"\n            \"$<$<CONFIG:DEBUG>:${DEBUG_OPTIONS}>\"\n            \"$<$<CONFIG:RELEASE>:${RELEASE_OPTIONS}>\")\n\n    # AVX2 lib\n    add_library(questdb-avx2 OBJECT ${VCL_FILES})\n    target_compile_options(questdb-avx2 PRIVATE \"-m64;-mavx2;-fPIC;-mfma\"\n            \"$<$<CONFIG:DEBUG>:${DEBUG_OPTIONS}>\"\n            \"$<$<CONFIG:RELEASE>:${RELEASE_OPTIONS}>\")\n\n    #AVX512 lib\n    add_library(questdb-avx512 OBJECT ${VCL_FILES})\n    # A_memset, A_memcpy are faster on avx512 but slower on other CPU's on Linux\n    target_compile_definitions(questdb-avx512 PRIVATE ENABLE_ASMLIB)\n    target_compile_options(questdb-avx512 PRIVATE \"-m64;-mavx512f;-fPIC;-mfma;-mavx512vl;-mavx512bw;-mavx512dq\"\n            \"$<$<CONFIG:DEBUG>:${DEBUG_OPTIONS}>\"\n            \"$<$<CONFIG:RELEASE>:${RELEASE_OPTIONS}>\")\n\n    #SSE2 lib\n    add_library(questdb-sse2 OBJECT ${VCL_FILES_SSE2})\n    target_link_libraries(\n            questdb-sse2\n            questdb-sse4\n            questdb-avx2\n            questdb-avx512\n    )\n\n    if (WIN32)\n        target_compile_options(questdb-sse2 PRIVATE \"-m64;-march=core2;-msse2;-Wno-attributes\"\n                \"$<$<CONFIG:DEBUG>:${DEBUG_OPTIONS}>\"\n                \"$<$<CONFIG:RELEASE>:${RELEASE_OPTIONS}>\")\n    else ()\n        target_compile_options(questdb-sse2 PRIVATE \"-m64;-march=core2;-msse2;-fPIC\"\n                \"$<$<CONFIG:DEBUG>:${DEBUG_OPTIONS}>\"\n                \"$<$<CONFIG:RELEASE>:${RELEASE_OPTIONS}>\")\n    endif (WIN32)\n    target_compile_options(questdb PRIVATE \"-m64\"\n            \"$<$<CONFIG:DEBUG>:${DEBUG_OPTIONS}>\"\n            \"$<$<CONFIG:RELEASE>:${RELEASE_OPTIONS}>\")\n\n    ## Uncomment to measure time of ooo.cpp methods\n    ## add_compile_definitions(OOO_CPP_PROFILE_TIMING)\n\n    target_link_libraries(\n            questdb\n            questdb-sse2\n            questdb-sse4\n            questdb-avx2\n            questdb-avx512\n            asm\n    )\nendif (ARCH_AARCH64)\n\n#simdjson\nset(SIMDJSON_ENABLE_THREADS OFF CACHE BOOL \"Link with thread support\" FORCE)\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/src/main/c/share/simdjson-cmake/CMakeLists.txt)\n\nif (OS_WINDOWS)\n    target_link_libraries(questdb wsock32 ws2_32 secur32 shlwapi psapi -s -static-libgcc -static-libstdc++ _simdjson)\n    target_compile_options(questdb PRIVATE -fno-threadsafe-statics)\nelseif (OS_DARWIN)\n    target_link_libraries(questdb -nostdlib++ -dead_strip -lc++ _simdjson)\nelse ()\n    target_compile_options(questdb PRIVATE -fno-threadsafe-statics -ffunction-sections -fdata-sections)\n    target_link_libraries(questdb rt -Wl,--gc-sections -Wl,--exclude-libs=ALL -static-libgcc _simdjson)\nendif ()\n\n# create output directory in case it does not exist, e.g. after mvn clean\nadd_custom_command(TARGET _simdjson PRE_LINK\n        COMMAND ${CMAKE_COMMAND} -E make_directory ${OUTPUT}\n)\n\n# Define the secondary output directory\n\nset(SECONDARY_OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/questdb/bin-local/)\nset(SECONDARY_OUTPUT2 ${CMAKE_CURRENT_SOURCE_DIR}/target/classes/io/questdb/bin-local/)\n\nadd_custom_command(TARGET questdb POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E make_directory ${SECONDARY_OUTPUT}\n        COMMAND ${CMAKE_COMMAND} -E copy_directory ${OUTPUT} ${SECONDARY_OUTPUT}\n        COMMENT \"Copying all build outputs from ${OUTPUT} to ${SECONDARY_OUTPUT}\"\n)\n\nadd_custom_command(TARGET questdb POST_BUILD\n        COMMAND ${CMAKE_COMMAND} -E make_directory ${SECONDARY_OUTPUT2}\n        COMMAND ${CMAKE_COMMAND} -E copy_directory ${OUTPUT} ${SECONDARY_OUTPUT2}\n        COMMENT \"Copying all build outputs from ${OUTPUT} to ${SECONDARY_OUTPUT2}\"\n)\n\n#jemalloc\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/src/main/c/share/jemalloc-cmake/CMakeLists.txt)\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Schemas with Descriptions\nDESCRIPTION: SQL query that retrieves schema information with descriptions. This query joins the pg_namespace and pg_description tables to show schema details including object IDs and descriptions.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/dbeaver/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT n.oid,n.*,d.description FROM pg_catalog.pg_namespace n\nLEFT OUTER JOIN pg_catalog.pg_description d ON d.objoid=n.oid AND d.objsubid=0 AND d.classoid='pg_namespace'::regclass\nORDER BY nspname;\nselect * from pg_catalog.pg_description d where d.classoid='pg_namespace'::regclass\n```\n\n----------------------------------------\n\nTITLE: Setting QuestDB TCP Worker Count to 3\nDESCRIPTION: Updated configuration setting for QuestDB that increases the number of worker threads for line TCP I/O operations from 2 to 3.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nline.tcp.io.worker.count=3\n```\n\n----------------------------------------\n\nTITLE: String Aggregation Group By Function Factories\nDESCRIPTION: Function factory classes for string aggregation in GROUP BY operations in QuestDB. These functions handle string concatenation, distinct string aggregation for various string data types like Symbol and Varchar.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\n# 'agg' group by function\nio.questdb.griffin.engine.functions.groupby.StringAggGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.StringAggVarcharGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.StringDistinctAggGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.StringDistinctAggSymbolGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.StringDistinctAggVarcharGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.RegressionInterceptFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on FreeBSD\nDESCRIPTION: Commands to install required dependencies (OpenJDK 11, GCC 10, and CMAKE) on FreeBSD system.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/CMAKE_README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npkg install openjdk11-11.0.8+10.1\npkg install gcc10-devel\npkg install cmake\n```\n\n----------------------------------------\n\nTITLE: Checking System Dependencies and Large File Support\nDESCRIPTION: Performs system checks for required headers and large file support capabilities. Sets appropriate definitions based on the availability of off64_t and fseeko function to enable large file support.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/zlib-1.2.8/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ncheck_include_file(sys/types.h HAVE_SYS_TYPES_H)\ncheck_include_file(stdint.h HAVE_STDINT_H)\ncheck_include_file(stddef.h HAVE_STDDEF_H)\n\n#\n# Check to see if we have large file support\n#\nset(CMAKE_REQUIRED_DEFINITIONS -D_LARGEFILE64_SOURCE=1)\n# We add these other definitions here because CheckTypeSize.cmake\n# in CMake 2.4.x does not automatically do so and we want\n# compatibility with CMake 2.4.x.\nif (HAVE_SYS_TYPES_H)\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_SYS_TYPES_H)\nendif ()\nif (HAVE_STDINT_H)\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDINT_H)\nendif ()\nif (HAVE_STDDEF_H)\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS -DHAVE_STDDEF_H)\nendif ()\ncheck_type_size(off64_t OFF64_T)\nif (HAVE_OFF64_T)\n    add_definitions(-D_LARGEFILE64_SOURCE=1)\nendif ()\nset(CMAKE_REQUIRED_DEFINITIONS) # clear variable\n\n#\n# Check for fseeko\n#\ncheck_function_exists(fseeko HAVE_FSEEKO)\nif (NOT HAVE_FSEEKO)\n    add_definitions(-DNO_FSEEKO)\nendif ()\n\n#\n# Check for unistd.h\n#\ncheck_include_file(unistd.h Z_HAVE_UNISTD_H)\n```\n\n----------------------------------------\n\nTITLE: Installing and Managing QuestDB with Homebrew on macOS\nDESCRIPTION: Commands for macOS users to install QuestDB using Homebrew and start the service. Includes both the service management approach and direct start/stop commands.\nSOURCE: https://github.com/questdb/questdb/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install questdb\nbrew services start questdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nquestdb start\nquestdb stop\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data with TSBS for QuestDB\nDESCRIPTION: Command to generate CPU-only test data using TSBS (Time Series Benchmark Suite) with specific parameters for scale, time range, and output format. The generated data is saved to a temporary file for subsequent loading tests.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_generate_data --use-case=\"cpu-only\" --seed=123 --scale=4000 --timestamp-start=\"2016-01-01T00:00:00Z\" --timestamp-end=\"2016-01-02T00:00:00Z\" --log-interval=\"10s\" --format=\"influx\" > /tmp/bigcpu\n```\n\n----------------------------------------\n\nTITLE: First Group By Function Factories\nDESCRIPTION: Function factory classes for implementing the FIRST aggregation in GROUP BY operations in QuestDB. These functions return the first value in each group for various data types, complementing the LAST functions for time-series analysis.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_24\n\nLANGUAGE: Java\nCODE:\n```\n# 'first' group by function\nio.questdb.griffin.engine.functions.groupby.FirstDoubleGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstFloatGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstIntGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstIPv4GroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstCharGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstShortGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstBooleanGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstByteGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstTimestampGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstDateGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstLongGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstGeoHashGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstUuidGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.FirstVarcharGroupByFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: InfluxDB Setup and Performance Testing\nDESCRIPTION: Commands to reset an InfluxDB installation and run performance benchmarks on it using the TSBS benchmarking tool.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop influxdb\nsudo rm -rf /var/lib/influxdb/*\nsudo systemctl start influxdb\n~/tmp/go/bin/tsbs_load_influx --file /tmp/bigcpu2  --workers 10\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 10\n```\n\n----------------------------------------\n\nTITLE: Setting Microsoft Visual C++ Compiler Options\nDESCRIPTION: Configures compiler options specific to MSVC including debug postfix and security-related definitions. Adds include directories and handles platform-specific requirements for Visual C++ builds.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/zlib-1.2.8/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (MSVC)\n    set(CMAKE_DEBUG_POSTFIX \"d\")\n    add_definitions(-D_CRT_SECURE_NO_DEPRECATE)\n    add_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)\n    include_directories(${ZLIB_SOURCE_DIR})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML\nDESCRIPTION: This HTML snippet creates a table to display contributors to the QuestDB project. It includes their GitHub avatars, usernames, and contribution types using icons. The table is structured with multiple rows and columns to organize the contributors.\nSOURCE: https://github.com/questdb/questdb/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/CSharpDummy\"><img src=\"https://avatars.githubusercontent.com/u/7610502?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>CSharpDummy</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3ACSharpDummy\" title=\"Bug reports\">🐛</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shimondoodkin\"><img src=\"https://avatars.githubusercontent.com/u/314464?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>shimondoodkin</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Ashimondoodkin\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-shimondoodkin\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.zsmart.tech/\"><img src=\"https://avatars.githubusercontent.com/u/40519768?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>huuhait</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Ahuuhait\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-huuhait\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://clickhouse.com/\"><img src=\"https://avatars.githubusercontent.com/u/18581488?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>alexey-milovidov</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Aalexey-milovidov\" title=\"Bug reports\">🐛</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://blog.suconghou.cn\"><img src=\"https://avatars.githubusercontent.com/u/4580719?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>suconghou</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Asuconghou\" title=\"Bug reports\">🐛</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/allegraharris\"><img src=\"https://avatars.githubusercontent.com/u/89586969?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>allegraharris</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=allegraharris\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/oliver-daniel\"><img src=\"https://avatars.githubusercontent.com/u/17235417?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>oliver-daniel</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=oliver-daniel\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kerimsenturk5734\"><img src=\"https://avatars.githubusercontent.com/u/72925170?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>kerimsenturk5734</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=kerimsenturk5734\" title=\"Documentation\">📖</a></td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Performance Test Results\nDESCRIPTION: Output from running the TSBS benchmarking tool against ClickHouse, showing metrics per second and rows per second over multiple runs.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_clickhouse  --file /tmp/bigcpu3  --workers 10\ntime,per. metric/s,metric total,overall metric/s,per. row/s,row total,overall row/s\n1613147480,8809947.81,8.810000E+07,8809947.81,880994.78,8.810000E+06,880994.78\n1613147490,8749950.24,1.756000E+08,8779949.03,874995.02,1.756000E+07,877994.90\n1613147500,8869526.84,2.643000E+08,8809809.25,886952.68,2.643000E+07,880980.92\n\nSummary:\nloaded 345600000 metrics in 39.016sec with 10 workers (mean rate 8857793.40 metrics/sec)\nloaded 34560000 rows in 39.016sec with 10 workers (mean rate 885779.34 rows/sec)\n\n~/tmp/go/bin/tsbs_load_clickhouse  --file /tmp/bigcpu3  --workers 10\ntime,per. metric/s,metric total,overall metric/s,per. row/s,row total,overall row/s\n1613147560,8919939.74,8.920000E+07,8919939.74,891993.97,8.920000E+06,891993.97\n1613147570,8840008.46,1.776000E+08,8879974.26,884000.85,1.776000E+07,887997.43\n1613147580,8820031.37,2.658000E+08,8859993.38,882003.14,2.658000E+07,885999.34\n\nSummary:\nloaded 345600000 metrics in 38.954sec with 10 workers (mean rate 8872038.07 metrics/sec)\nloaded 34560000 rows in 38.954sec with 10 workers (mean rate 887203.81 rows/sec)\n\n~/tmp/go/bin/tsbs_load_clickhouse  --file /tmp/bigcpu3  --workers 10\ntime,per. metric/s,metric total,overall metric/s,per. row/s,row total,overall row/s\n1613147642,8909057.61,8.910000E+07,8909057.61,890905.76,8.910000E+06,890905.76\n1613147652,8980894.73,1.789000E+08,8944972.48,898089.47,1.789000E+07,894497.25\n1613147662,8859322.19,2.675000E+08,8916420.98,885932.22,2.675000E+07,891642.10\n\nSummary:\nloaded 345600000 metrics in 38.551sec with 10 workers (mean rate 8964701.85 metrics/sec)\nloaded 34560000 rows in 38.551sec with 10 workers (mean rate 896470.18 rows/sec)\n```\n\n----------------------------------------\n\nTITLE: String to Various Types Cast Function Factories\nDESCRIPTION: A list of function factory classes for casting string data type to various other data types in QuestDB. These classes handle the type conversion logic from string to numeric, boolean, date-related, and other specialized types.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_15\n\nLANGUAGE: Java\nCODE:\n```\n# cast str to ...\nio.questdb.griffin.engine.functions.cast.CastStrToIntFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToIPv4FunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToDoubleFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastCharToBooleanFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToBooleanFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToFloatFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToLong256FunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToLongFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToRegClassFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToRegProcedureFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToStrArrayFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToShortFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToByteFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToSymbolFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToVarcharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToCharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToDateFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToTimestampFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToBinaryFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToGeoHashFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastStrToUuidFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Mounting Host Directory with QuestDB Docker Container\nDESCRIPTION: Example Docker volume mount option to persist QuestDB data to a local directory.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n-v /local/dir:/var/lib/questdb\n```\n\n----------------------------------------\n\nTITLE: Building QuestDB with Web Console\nDESCRIPTION: Maven command to build QuestDB with the web console included in the package.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package -DskipTests -P build-web-console\n```\n\n----------------------------------------\n\nTITLE: Compiling C-libraries on Linux/OSX\nDESCRIPTION: Commands to compile C-libraries for QuestDB on Linux or OSX using CMake. This creates a release build in the 'build/release' directory.\nSOURCE: https://github.com/questdb/questdb/blob/master/CONTRIBUTING.md#2025-04-16_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncd core\ncmake -B build/release -DCMAKE_BUILD_TYPE=Release .\ncmake --build build/release --config Release\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Tool Commands\nDESCRIPTION: Commands for loading generated data into QuestDB using direct loading and shell script methods.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/data --workers 4\n\ncd ~/tmp/go/src/github.com/timescale/\n\n# generates data file /tmp/bulk_data/influx-data.gz\nPATH=${PATH}:~/tmp/go/bin FORMATS=influx TS_END=2016-01-01T02:00:00Z bash ./scripts/generate_data.sh\n# load data into QuestDB\nPATH=${PATH}:~/tmp/go/bin NUM_WORKERS=1 ./scripts/load/load_questdb.sh\n```\n\n----------------------------------------\n\nTITLE: Java Command for Running QuestDB Server\nDESCRIPTION: Complex Java command to run QuestDB server with specific memory settings, class paths, module settings, and deployment directory.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njava -Xms3g -Xmx3g -Dfile.encoding=UTF-8 -p /home/pim/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/home/pim/local/java/questdb/core/target/classes -classpath /home/pim/.m2/repository/junit/junit/4.13.1/junit-4.13.1.jar:/home/pim/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/pim/.m2/repository/org/postgresql/postgresql/42.2.12/postgresql-42.2.12.jar --patch-module io.questdb=/home/pim/local/java/questdb/core/target/test-classes --add-reads io.questdb=ALL-UNNAMED -m io.questdb/io.questdb.ServerMain -d /home/pim/deployments/questdb/questdb.1\n```\n\n----------------------------------------\n\nTITLE: Loading Time-Series Data with QuestDB and Different Queue Capacities\nDESCRIPTION: A collection of benchmark results showing performance metrics when loading time-series data into QuestDB with varying line.tcp.net.io.queue.capacity settings (128, 1024, 2048, 4096, 8192). Each test runs with a single worker and reports metrics per second, total metrics, and rows processed.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npim@patrick$ > ~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\nLANGUAGE: csv\nCODE:\n```\ntime,per. metric/s,metric total,overall metric/s,per. row/s,row total,overall row/s\n1611763801,3349905.70,3.350000E+07,3349905.70,334990.57,3.350000E+06,334990.57\n1611763811,3479999.88,6.830000E+07,3414951.88,347999.99,6.830000E+06,341495.19\n1611763821,3249997.89,1.008000E+08,3359967.71,324999.79,1.008000E+07,335996.77\n1611763831,3210002.86,1.329000E+08,3322476.79,321000.29,1.329000E+07,332247.68\n1611763841,3409989.54,1.670000E+08,3339979.29,340998.95,1.670000E+07,333997.93\n1611763851,3319911.26,2.002000E+08,3336634.56,331991.13,2.002000E+07,333663.46\n1611763861,3070079.04,2.309000E+08,3298556.35,307007.90,2.309000E+07,329855.64\n1611763871,3490015.50,2.658000E+08,3322488.56,349001.55,2.658000E+07,332248.86\n1611763881,3499984.03,3.008000E+08,3342210.29,349998.40,3.008000E+07,334221.03\n1611763891,2970011.31,3.305000E+08,3304990.64,297001.13,3.305000E+07,330499.06\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load Test with Queue Capacity 2048\nDESCRIPTION: Loading test data into QuestDB with line.tcp.net.io.queue.capacity=2048 using the tsbs_load_questdb tool with a single worker. Results show performance metrics over time and final throughput statistics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Building QuestDB with Web Console and Binaries\nDESCRIPTION: Maven command to build QuestDB with both the web console and executable binaries.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package -DskipTests -P build-web-console,build-binaries\n```\n\n----------------------------------------\n\nTITLE: Building QuestDB Linux AMD64 Docker Image\nDESCRIPTION: Command to build a QuestDB Docker image for Linux AMD64 architecture.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t questdb/questdb:<software_version>-linux-amd64 --file Dockerfile-linux .\n```\n\n----------------------------------------\n\nTITLE: Last Group By Function Factories\nDESCRIPTION: Function factory classes for implementing the LAST aggregation in GROUP BY operations in QuestDB. These functions return the last value in each group for various data types, useful for time-series analysis.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_22\n\nLANGUAGE: Java\nCODE:\n```\n# 'last' group by function\nio.questdb.griffin.engine.functions.groupby.LastDoubleGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastFloatGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastIntGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastIPv4GroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastCharGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastShortGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastBooleanGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastByteGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastSymbolGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastStrGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastVarcharGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastTimestampGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastDateGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastLongGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastGeoHashGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastUuidGroupByFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Running Performance Tests with tsbs_load_questdb in Bash\nDESCRIPTION: This snippet shows the execution of performance tests using tsbs_load_questdb tool. It demonstrates loading data into QuestDB with 10 workers and displays metrics such as load rate and total rows processed.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb  --file /tmp/bigcpu  --workers 10\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka and Zookeeper Services\nDESCRIPTION: Commands to start Zookeeper, Kafka server, and Kafka Connect from the Kafka home directory.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/kafka/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbin/windows/zookeeper-server-start.bat  config/zookeeper.properties\n```\n\nLANGUAGE: shell\nCODE:\n```\nbin/windows/kafka-server-start.bat  config/server.properties\n```\n\nLANGUAGE: shell\nCODE:\n```\nbin/windows/connect-standalone.bat config/connect-standalone.properties config/connect-jdbc.properties\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load Test with Queue Capacity 1024\nDESCRIPTION: Loading test data into QuestDB with line.tcp.net.io.queue.capacity=1024 using the tsbs_load_questdb tool with a single worker. Results show performance metrics over time and final throughput statistics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Pushing QuestDB Linux AMD64 Docker Image\nDESCRIPTION: Command to push the QuestDB Linux AMD64 Docker image to Docker Hub.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker push questdb/questdb:<software_version>-linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Publishing Kafka Messages\nDESCRIPTION: Commands to start Kafka console producer for publishing messages to specific topics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/kafka/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nbin/windows/kafka-console-producer.bat --topic quickstart-events2 --bootstrap-server localhost:9092\nbin/windows/kafka-console-producer.bat --topic spot --bootstrap-server localhost:9092\n```\n\n----------------------------------------\n\nTITLE: Sum Group By Function Factories\nDESCRIPTION: Function factory classes for implementing the SUM aggregation in GROUP BY operations in QuestDB. These functions compute the sum of numeric columns grouped by specified criteria, supporting various numeric data types.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_21\n\nLANGUAGE: Java\nCODE:\n```\n# 'sum' group by function\nio.questdb.griffin.engine.functions.groupby.SumDoubleGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.SumFloatGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.SumIntGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.SumLongGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.SumLong256GroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.KSumDoubleGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.NSumDoubleGroupByFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Database\nDESCRIPTION: Commands to create and start a new PostgreSQL database instance and connect to it.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/kafka/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ninitdb -D \"C:\\pgdata\"\n```\n\nLANGUAGE: shell\nCODE:\n```\npg_ctl -D \"C:\\pgdata\" start\n```\n\nLANGUAGE: shell\nCODE:\n```\npsql -d postgres\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB using Docker\nDESCRIPTION: Command to quickly start QuestDB using Docker, exposing the necessary ports for web console (9000), InfluxDB line protocol (9009), and PostgreSQL wire protocol (8812).\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.it-it.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9000:9000 -p 9009:9009 -p 8812:8812 questdb/questdb\n```\n\n----------------------------------------\n\nTITLE: Starting QuestDB using Docker\nDESCRIPTION: Command to run QuestDB in a Docker container with ports 9000, 9009, and 8812 exposed for web console, InfluxDB line protocol, and PostgreSQL wire protocol respectively.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.es-es.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9000:9000 -p 9009:9009 -p 8812:8812 questdb/questdb\n```\n\n----------------------------------------\n\nTITLE: Cleaning Previous Maven Release\nDESCRIPTION: Command to clear the previous release memory using Maven's release plugin.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/release/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn release:clean\n```\n\n----------------------------------------\n\nTITLE: Pushing QuestDB Linux ARM64 Docker Image\nDESCRIPTION: Command to push the QuestDB Linux ARM64 Docker image to Docker Hub.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ndocker push questdb/questdb:<software_version>-linux-arm64\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka JDBC Connector\nDESCRIPTION: Properties configuration for the Kafka JDBC sink connector connecting to PostgreSQL.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/kafka/README.md#2025-04-16_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nname=local-jdbc-sink\nconnector.class=io.confluent.connect.jdbc.JdbcSinkConnector\nconnection.url=jdbc:postgresql://127.0.0.1:8812/qdb?useSSL=false\nconnection.user=admin\nconnection.password=quest\n\ntopics=quickstart-events\ninsert.mode=insert\ndialect.name=PostgreSqlDatabaseDialect\npk.mode=none\nauto.create=true\n```\n\n----------------------------------------\n\nTITLE: Group By Function Factory Declarations - Java\nDESCRIPTION: Function factory class declarations for group by operations including first_not_null, max, min, count, and approximate count distinct operations. These handle different data types like char, date, double, float, and others.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_25\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.groupby.FirstNotNullCharGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.MaxDoubleGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.MinDoubleGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.CountGroupByFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Using Parquet-Tools CLI for Parquet File Operations\nDESCRIPTION: Command-line interface for parquet-tools utility showing usage syntax, available flags, arguments, and subcommands. The tool accepts a Parquet file path and provides subcommands for dumping column data, viewing metadata, displaying row counts, and accessing help information.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/rust/qdbr/parquet2/parquet-tools/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUSAGE:\n    parquet-tools <file> [SUBCOMMAND]\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nARGS:\n    <file>    Parquet file to read\n\nSUBCOMMANDS:\n    dump        dumps data from column\n    help        Prints this message or the help of the given subcommand(s)\n    meta        meta information about the file\n    rowcount    number of rows from file\n```\n\n----------------------------------------\n\nTITLE: Creating QuestDB Docker Manifest\nDESCRIPTION: Command to create a Docker manifest that includes Linux ARM64, Linux AMD64, and Windows AMD64 images.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndocker manifest create questdb/questdb:<software_version> questdb/questdb:<software_version>-linux-arm64 questdb/questdb:<software_version>-linux-amd64 questdb/questdb:<software_version>-windows-amd64\n```\n\n----------------------------------------\n\nTITLE: QuestDB Line TCP Configuration Settings\nDESCRIPTION: Configuration properties for QuestDB's line TCP protocol including buffer sizes, worker counts, network binding, and maintenance settings.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nshared.worker.count=1\nline.tcp.msg.buffer.size=32768\nline.tcp.max.uncommitted.rows=10000000\n#line.tcp.net.bind.to=10.0.0.1:9009\nline.tcp.net.bind.to=127.0.0.1:9009\n#line.tcp.auth.db.path=conf/authDb.txt\nline.tcp.writer.worker.count=1\n#line.tcp.writer.worker.affinity=\n#line.tcp.writer.halt.on.error=true\nline.tcp.io.worker.count=4\n#line.tcp.io.worker.affinity=\n#line.tcp.io.halt.on.error=true\nline.tcp.io.aggressive.recv=false\nline.tcp.maintenance.job.hysteresis.in.ms=300000\n```\n\n----------------------------------------\n\nTITLE: Mathematical Function Factory Declarations - Java\nDESCRIPTION: Function factory implementations for mathematical operations including round, sign, ceil, floor. These functions support various numeric data types like double, float, int, and long.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_26\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.math.RoundDoubleZeroScaleFunctionFactory\nio.questdb.griffin.engine.functions.math.SignByteFunctionFactory\nio.questdb.griffin.engine.functions.math.CeilDoubleFunctionFactory\nio.questdb.griffin.engine.functions.math.FloorDoubleFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Building QuestDB JAR without Web Console\nDESCRIPTION: Maven command to build QuestDB JAR file without tests, web console, or executable binaries.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd questdb\nmvn clean package -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Varchar to Various Types Cast Function Factories\nDESCRIPTION: A list of function factory classes for casting varchar data type to various other data types in QuestDB. These handle the conversion from varchar to primitive types, temporal types, and specialized types like GeoHash and UUID.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_16\n\nLANGUAGE: Java\nCODE:\n```\n# cast varchar to ...\nio.questdb.griffin.engine.functions.cast.CastVarcharToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToBooleanFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToByteFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToShortFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToCharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToIntFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToIPv4FunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToLongFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToDateFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToTimestampFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToGeoHashFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToFloatFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToDoubleFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToUuidFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToLong256FunctionFactory\nio.questdb.griffin.engine.functions.cast.CastVarcharToSymbolFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Pushing QuestDB Docker Manifest\nDESCRIPTION: Command to push the Docker manifest to Docker Hub and purge local manifests.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ndocker manifest push questdb/questdb:<software_version> --purge\n```\n\n----------------------------------------\n\nTITLE: Loading Test Data into QuestDB with TSBS\nDESCRIPTION: Command to load the previously generated test data into QuestDB using TSBS load tool with a single worker. This command is used repeatedly with different queue capacity settings to measure performance impact.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: String Manipulation Function Factory Declarations - Java\nDESCRIPTION: Function factory implementations for string operations including replace, substring, left/right, starts_with, and split_part. These functions handle both string and varchar data types.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_27\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.str.ReplaceStrFunctionFactory\nio.questdb.griffin.engine.functions.str.SubStringFunctionFactory\nio.questdb.griffin.engine.functions.str.LeftStrFunctionFactory\nio.questdb.griffin.engine.functions.str.StartsWithStrFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database\nDESCRIPTION: Command to connect to the default 'postgres' database using the psql command-line client. This establishes an interactive terminal session with the PostgreSQL server.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/dbeaver/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npsql -d postgres\n```\n\n----------------------------------------\n\nTITLE: Loading QuestDB Data with 6 Workers\nDESCRIPTION: Performance test results using tsbs_load_questdb with 6 workers, achieving ~5M metrics/sec and ~500K rows/sec throughput.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 6\n```\n\n----------------------------------------\n\nTITLE: Building Utils Project in QuestDB (Bash)\nDESCRIPTION: This command builds a single jar file with dependencies for the QuestDB Utils project. It uses Maven to clean the project, compile the source code, and package it into a jar file along with its dependencies.\nSOURCE: https://github.com/questdb/questdb/blob/master/utils/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Pulling QuestDB Docker Image\nDESCRIPTION: Command to pull the latest QuestDB Docker image from Docker Hub.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull questdb/questdb\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 2048 Buffer Size\nDESCRIPTION: Executes the tsbs_load_questdb benchmark with a line.tcp.msg.buffer.size of 2048. It loads 345,600,000 metrics in about 109 seconds, achieving a rate of 3,162,013 metrics/sec.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Deploying TimescaleDB in Docker Container\nDESCRIPTION: Pulls the TimescaleDB Docker image, generates a random password, and runs TimescaleDB in a Docker container with port mapping.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/timescale.txt#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker pull timescale/timescaledb:2.2.0-pg13\nPOSTGRES_PASSWORD=`dd if=/dev/urandom count=5 | sha1sum | awk '{print $1}'`\nTIMESCALE_DOCKER_ID=`sudo docker run -d --name timescaledb -p 127.0.0.1:5432:5432 -e POSTGRES_PASSWORD=${POSTGRES_PASSWORD} timescale/timescaledb:2.2.0-pg13`\nPGPASSWORD=${POSTGRES_PASSWORD} psql -h 127.0.0.1 -p 5432 -U postgres\n```\n\n----------------------------------------\n\nTITLE: Listing IPv4 Type Casting Function Factories in QuestDB\nDESCRIPTION: A collection of fully qualified class names for function factories that handle casting from the IPv4 data type to various other data types in QuestDB.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.cast.CastIPv4ToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIPv4ToVarcharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastIPv4ToIntFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Listing Long256 Type Casting Function Factories in QuestDB\nDESCRIPTION: A collection of fully qualified class names for function factories that handle casting from the Long256 data type to various other data types in QuestDB.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.cast.CastLong256ToShortFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLong256ToByteFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLong256ToCharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLong256ToIntFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLong256ToLongFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLong256ToFloatFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLong256ToDoubleFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLong256ToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLong256ToVarcharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLong256ToDateFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLong256ToTimestampFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLong256ToSymbolFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLong256ToBooleanFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Listing Long Type Casting Function Factories in QuestDB\nDESCRIPTION: A collection of fully qualified class names for function factories that handle casting from the Long data type to various other data types in QuestDB.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.cast.CastLongToShortFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToByteFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToCharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToIntFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToFloatFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToDoubleFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToDateFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToTimestampFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToVarcharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastNullTypeFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToSymbolFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToLong256FunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToBooleanFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastLongToGeoHashFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Generating Test Data with TSBS for QuestDB Benchmarking\nDESCRIPTION: Command to generate CPU-only test data using TSBS tool with specific parameters for scale, time range, and output format. The output is redirected to a temporary file for subsequent testing.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_generate_data --use-case=\"cpu-only\" --seed=123 --scale=4000 --timestamp-start=\"2016-01-01T00:00:00Z\" --timestamp-end=\"2016-01-02T00:00:00Z\" --log-interval=\"10s\" --format=\"influx\" > /tmp/bigcpu\n```\n\n----------------------------------------\n\nTITLE: Creating Named QuestDB Docker Container\nDESCRIPTION: Command to create a named QuestDB Docker container with appropriate port mappings.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ndocker create --name questdb -p 9009:9009 -p 9000:9000 -p 8812:8812 questdb/questdb\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 4096 Buffer Size\nDESCRIPTION: Executes the tsbs_load_questdb benchmark with a line.tcp.msg.buffer.size of 4096. It loads 345,600,000 metrics in about 126 seconds, achieving a rate of 2,735,868 metrics/sec.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Generating TSBS Benchmark Data for InfluxDB\nDESCRIPTION: Command to generate CPU-only benchmark data using TSBS with specific parameters for scale and time range.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/influxdb.txt#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_generate_data --use-case=\"cpu-only\" --seed=123 --scale=4000 --timestamp-start=\"2016-01-01T00:00:00Z\" --timestamp-end=\"2016-01-02T00:00:00Z\" --log-interval=\"10s\" --format=\"influx\" > /tmp/bigcpu\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load Test with Queue Capacity 8192\nDESCRIPTION: Loading test data into QuestDB with line.tcp.net.io.queue.capacity=8192 using the tsbs_load_questdb tool with a single worker. Results show performance metrics over time and final throughput statistics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Installing ClickHouse Packages on Amazon Linux\nDESCRIPTION: Commands to install ClickHouse server and client packages using yum package manager with GPG key configuration.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/clickhouse.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install yum-utils\nsudo rpm --import https://repo.clickhouse.tech/CLICKHOUSE-KEY.GPG\nsudo yum-config-manager --add-repo https://repo.clickhouse.tech/rpm/stable/x86_64\nsudo yum install clickhouse-server clickhouse-client\n```\n\n----------------------------------------\n\nTITLE: Configuring QuestDB Settings\nDESCRIPTION: QuestDB configuration properties including data paths, worker counts, network bindings, and performance-related settings.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_18\n\nLANGUAGE: properties\nCODE:\n```\ncairo.sql.copy.root=/home/pim/Downloads\ncairo.sql.backup.root=/home/pim/.questdb/dbbak\nshared.worker.count=1\n#shared.worker.affinity=1\npgwire.enabled=false\nreplication.enabled=true\nreplication.udp.bind.to=127.0.0.1:9010\nhttp.security.readonly=false\n\nline.tcp.msg.buffer.size=32768\n#line.tcp.net.bind.to=10.0.0.1:9009\nline.tcp.max.uncommitted.rows=100\n#line.tcp.maintenance.job.hysteresis.in.ms=300000\nline.tcp.net.bind.to=127.0.0.1:9009\n#line.tcp.auth.db.path=conf/authDb.txt\nline.tcp.writer.worker.count=1\n#line.tcp.writer.worker.affinity=3\n#line.tcp.writer.halt.on.error=true\nline.tcp.io.worker.count=1\n#line.tcp.io.worker.affinity=5,7\n#line.tcp.io.halt.on.error=true\n#line.tcp.io.aggressive.recv=true\nline.tcp.net.io.queue.capacity=128\nline.tcp.max.measurement.size=2048\n\nhttp.bind.to=127.0.0.1:9000\nline.udp.bind.to=127.0.0.1:9009\npg.net.bind.to=127.0.0.1:8812\ntelemetry.enabled=false\ncairo.sql.map.page.size=33554432\ncairo.sql.hash.join.light.value.page.size=33554432\n```\n\n----------------------------------------\n\nTITLE: Managing QuestDB Docker Container\nDESCRIPTION: Commands to start, stop, and view logs of a named QuestDB Docker container.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ndocker start questdb\ndocker stop questdb\ndocker logs questdb\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 4096 Buffer Size and 400 Max Measurement Size\nDESCRIPTION: Executes the tsbs_load_questdb benchmark with a line.tcp.msg.buffer.size of 4096 and line.tcp.max.measurement.size of 400. It loads 345,600,000 metrics in about 106 seconds, achieving a rate of 3,248,418 metrics/sec.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Installing InfluxDB on AWS Linux\nDESCRIPTION: Command to install InfluxDB using the package manager on AWS Linux 2.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/influxdb.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install influxdb\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 1024 Buffer Size\nDESCRIPTION: Executes the tsbs_load_questdb benchmark with a line.tcp.msg.buffer.size of 1024. It loads 345,600,000 metrics in about 109 seconds, achieving a rate of 3,146,009 metrics/sec.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Querying Schema by Name\nDESCRIPTION: SQL query to retrieve details of a specific schema by name. This parameterized query retrieves a schema's metadata including its object ID and description using a name parameter.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/dbeaver/README.md#2025-04-16_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT n.oid,n.*,d.description FROM pg_catalog.pg_namespace n\nLEFT OUTER JOIN pg_catalog.pg_description d ON d.objoid=n.oid AND d.objsubid=0 AND d.classoid='pg_namespace'::regclass\nWHERE nspname=$1 ORDER BY nspname\n```\n\n----------------------------------------\n\nTITLE: QuestDB Line TCP Configuration Settings\nDESCRIPTION: Configuration parameters for QuestDB's Line TCP protocol, including buffer size, queue capacity, and measurement size settings.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_16\n\nLANGUAGE: config\nCODE:\n```\nline.tcp.msg.buffer.size=32768\nline.tcp.net.io.queue.capacity=128\nline.tcp.max.measurement.size=400\n```\n\n----------------------------------------\n\nTITLE: Installing QuestDB via Homebrew on MacOS\nDESCRIPTION: Commands to install and manage QuestDB using Homebrew package manager on MacOS, including starting and stopping the service.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.es-es.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install questdb\nbrew services start questdb\n\nquestdb start // To start questdb\nquestdb stop  // To stop questdb\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 7 Workers\nDESCRIPTION: Executing the tsbs_load_questdb benchmark tool with 7 workers and displaying performance metrics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 7\n```\n\n----------------------------------------\n\nTITLE: Starting InfluxDB Service\nDESCRIPTION: Command to start the InfluxDB service using systemctl.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/influxdb.txt#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start influxdb\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 2 Workers\nDESCRIPTION: Executing the tsbs_load_questdb benchmark tool with 2 workers and displaying performance metrics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 2\n```\n\n----------------------------------------\n\nTITLE: Configuring JeMalloc Compilation Options and Definitions\nDESCRIPTION: Sets up various compilation options and definitions for JeMalloc, including debug options, profiling support, and platform-specific flags. It also configures JeMalloc to use a public namespace.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/jemalloc-cmake/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(jemalloc PUBLIC -DJEMALLOC_NO_PRIVATE_NAMESPACE)\n\ntarget_compile_options(jemalloc PRIVATE ${WITHOUT_COVERAGE_FLAGS_LIST})\n\nif (CMAKE_BUILD_TYPE_UC STREQUAL \"DEBUG\")\n    target_compile_definitions(jemalloc PUBLIC\n            -DJEMALLOC_DEBUG=1\n            -DJEMALLOC_LOG=1)\nendif ()\n\ntarget_compile_definitions(jemalloc PUBLIC -DJEMALLOC_PROF=1)\n\ntarget_compile_options(jemalloc PUBLIC -D_GNU_SOURCE)\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Docker on Amazon Linux\nDESCRIPTION: Installs Docker, enables it to start on boot, and starts the Docker service on an Amazon Linux instance.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/timescale.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install docker\nsudo systemctl enable docker\nsudo systemctl start docker\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB with Docker\nDESCRIPTION: Command to start QuestDB using Docker with ports 9000 (Web Console/REST), 9009 (InfluxDB protocol), and 8812 (PostgreSQL protocol) exposed.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.ja-ja.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 9000:9000 -p 9009:9009 -p 8812:8812 questdb/questdb\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Capacity to 16 for Performance Testing\nDESCRIPTION: Configuration change setting line.tcp.net.io.queue.capacity to 16 for performance comparison testing. This represents one of several tests with different queue capacity values.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_6\n\nLANGUAGE: properties\nCODE:\n```\nline.tcp.net.io.queue.capacity=16\n```\n\n----------------------------------------\n\nTITLE: Stopping and Cleaning Up InfluxDB\nDESCRIPTION: Commands to stop the InfluxDB service, disable it from starting at boot, and remove all data files.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/influxdb.txt#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop influxdb\nsudo systemctl disable influxdb\nsudo rm -rf /var/lib/influxdb/data/\n```\n\n----------------------------------------\n\nTITLE: Loading QuestDB Data with 7 Workers\nDESCRIPTION: Performance test results using tsbs_load_questdb with 7 workers, achieving ~4.5M metrics/sec and ~450K rows/sec throughput.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 7\n```\n\n----------------------------------------\n\nTITLE: Configuring JeMalloc Malloc Conf for Linux and Other Systems\nDESCRIPTION: Sets up JeMalloc configuration options differently for Linux and other systems. On Linux, it enables percpu_arena and sets other memory management parameters. For all systems, it allows overriding the default configuration.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/jemalloc-cmake/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (OS_LINUX)\n    set(JEMALLOC_CONFIG_MALLOC_CONF \"percpu_arena:percpu,oversize_threshold:0,muzzy_decay_ms:0,dirty_decay_ms:5000\")\nelse ()\n    set(JEMALLOC_CONFIG_MALLOC_CONF \"oversize_threshold:0,muzzy_decay_ms:0,dirty_decay_ms:5000\")\nendif ()\nset(JEMALLOC_CONFIG_MALLOC_CONF_OVERRIDE \"\" CACHE STRING \"Change default configuration string of JEMalloc\")\nif (JEMALLOC_CONFIG_MALLOC_CONF_OVERRIDE)\n    set(JEMALLOC_CONFIG_MALLOC_CONF \"${JEMALLOC_CONFIG_MALLOC_CONF_OVERRIDE}\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load Test with QuestDB\nDESCRIPTION: Command execution for loading test data into QuestDB using the Time Series Benchmark Suite with 2 workers and a specified input file.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n> ~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 2\n```\n\n----------------------------------------\n\nTITLE: Building QuestDB Binaries Manually\nDESCRIPTION: Commands to check out the release tag and build QuestDB binaries using Maven with special profiles for web console and binaries.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/release/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --tags\ngit checkout tags/7.1.1\nmvn clean package -DskipTests -P build-web-console,build-binaries\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Capacity to 512 for Performance Testing\nDESCRIPTION: Configuration change setting line.tcp.net.io.queue.capacity to 512 for performance comparison testing. This represents one of several tests with different queue capacity values.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_8\n\nLANGUAGE: properties\nCODE:\n```\nline.tcp.net.io.queue.capacity=512\n```\n\n----------------------------------------\n\nTITLE: Creating a New PostgreSQL Database\nDESCRIPTION: Command to initialize a new PostgreSQL database directory structure. This creates a new PostgreSQL database cluster at the specified location.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/dbeaver/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ninitdb -D \"C:\\pgdata\"\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load on QuestDB with Multiple Worker Configurations\nDESCRIPTION: Series of terminal commands showing TSBS load performance with different worker thread configurations (2-6 workers). Performance peaks at 605,295 rows per second with 3 workers.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 2\n```\n\n----------------------------------------\n\nTITLE: QuestDB Tab-Separated Data Sample with Various Data Types\nDESCRIPTION: A sample dataset in tab-separated format containing ID numbers, text codes, timestamps, decimal values, boolean flags, and text strings with various quote and formatting patterns. The data demonstrates how QuestDB handles different data types including strings with embedded quotes and commas.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/test/resources/csv/test.txt#2025-04-16_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\n123\tabc\t2015-01-20T21:00:00.000Z\t3.1415\tTRUE\tLorem ipsum dolor sit amet.\t122\n124\tabc\t2015-01-20T21:00:00.000Z\t7.342\tFALSE\t\"Lorem ipsum \n\ndolor \"\"sit\"\" amet.\"\t546756\n125\tabc\t2015-01-20T21:00:00.000Z\t9.334\t\t\"Lorem ipsum \"\"dolor\"\" sit amet.\"\t23\n126\tabc\t2015-01-20T21:00:00.000Z\t1.345\tTRUE\t\"Lorem, ipsum, dolor sit amet.\"\t434\n120\tabc\t2015-01-20T21:00:00.000Z\t1.345\tTRUE\t\"Lorem, ipsum, dolor sit amet.\"\t434\tasdfasdf\tasdfasdf\tasdfasd\n127\tabc\t2015-01-20T21:00:00.000Z\t1.53321\tTRUE\tLorem ipsum dolor sit amet.\t112\n128\tabc\t2015-01-20T21:00:00.000Z\t2.456\tTRUE\tLorem ipsum dolor sit amet.\t122\n```\n\n----------------------------------------\n\nTITLE: Querying High CPU Usage Across All Hosts\nDESCRIPTION: This SQL query selects all CPU data where usage is above 90% for all hosts within a specified time range. It demonstrates filtering by CPU usage and timestamp without host-specific criteria.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/cpu-only-example-queries.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM cpu\nWHERE usage_user > 90.0\n AND timestamp >= '2016-01-01T07:47:52Z'\n AND timestamp < '2016-01-01T19:47:52Z'\n```\n\n----------------------------------------\n\nTITLE: Query Benchmark Commands\nDESCRIPTION: Commands for generating and running query benchmarks using the single-groupby-5-8-1 query type.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_generate_queries \\\n--use-case=\"cpu-only\" --seed=123 --scale=4000 \\\n--timestamp-start=\"2016-01-01T00:00:00Z\" --timestamp-end=\"2016-01-02T00:00:01Z\" \\\n--queries=1000 --query-type=\"single-groupby-5-8-1\" \\\n--format=\"questdb\" > /tmp/queries_questdb\n\n~/tmp/go/bin/tsbs_run_queries_questdb --file /tmp/queries_questdb --print-interval 500\n```\n\n----------------------------------------\n\nTITLE: Running tsbs_load_questdb Performance Test with 4096 Buffer Size\nDESCRIPTION: Executes the tsbs_load_questdb tool to load test data into QuestDB with a 4096 byte buffer size. The output shows throughput metrics over time and a final summary.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npim@patrick$ > ~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Server\nDESCRIPTION: Command to start the PostgreSQL server using the specified data directory. This launches the PostgreSQL database server process using the data directory created by initdb.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/dbeaver/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npg_ctl -D \"C:\\pgdata\" start\n```\n\n----------------------------------------\n\nTITLE: Verifying Java and Maven Installation\nDESCRIPTION: Commands to verify Java and Maven installations, which are prerequisites for building QuestDB.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_2\n\nLANGUAGE: script\nCODE:\n```\njava --version\nmvn --version\n```\n\n----------------------------------------\n\nTITLE: Building QuestDB with Web Console for Local Run\nDESCRIPTION: Maven command to build QuestDB with web console and binaries for local execution.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package --batch-mode --quiet -DskipTests -P build-web-console,build-binaries\n```\n\n----------------------------------------\n\nTITLE: Last Not Null Group By Function Factories\nDESCRIPTION: Function factory classes for implementing the LAST_NOT_NULL aggregation in GROUP BY operations in QuestDB. These functions return the last non-null value in each group for various data types, providing more robust time-series analysis.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_23\n\nLANGUAGE: Java\nCODE:\n```\n# 'last_not_null' group by function\nio.questdb.griffin.engine.functions.groupby.LastNotNullCharGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastNotNullDateGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastNotNullDoubleGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastNotNullFloatGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastNotNullGeoHashGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastNotNullIntGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastNotNullIPv4GroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastNotNullLongGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastNotNullStrGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastNotNullVarcharGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastNotNullSymbolGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastNotNullTimestampGroupByFunctionFactory\nio.questdb.griffin.engine.functions.groupby.LastNotNullUuidGroupByFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Messages for Kafka Topics\nDESCRIPTION: Example JSON messages with schema definitions for testing the Kafka connector, including different data types and timestamp handling.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/kafka/README.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{    \"schema\": {        \"type\": \"struct\",        \"fields\": [            {                \"type\": \"boolean\",                \"optional\": false,               \"field\": \"flag\"            },            {                \"type\": \"int8\",                \"optional\": false,                \"field\": \"id8\"           },           {                \"type\": \"int16\",                \"optional\": false,                \"field\": \"id16\"            },            {                \"type\":\"int32\",                \"optional\": false,                \"field\": \"id32\"            },          {                  \"type\": \"int64\",               \"optional\": false,                \"field\": \"id64\"            },            {                \"type\": \"float\",                \"optional\": false,                \"field\": \"idFloat\"            },            {                \"type\": \"double\",                \"optional\": false,                \"field\": \"idDouble\"            },              {                \"type\": \"string\",                \"optional\": true,                \"field\": \"msg\"            }      ],        \"optional\": false,        \"name\": \"msgschema\"    },    \"payload\": {        \"flag\": false,        \"id8\": 222,        \"id16\": 222,        \"id32\": 222,        \"id64\": 222,        \"idFloat\": 222.0,        \"idDouble\": 333.0,               \"msg\": \"hi\"  }}\n```\n\nLANGUAGE: json\nCODE:\n```\n{    \"schema\": {        \"type\": \"struct\",        \"fields\": [{            \"type\": \"int32\",            \"optional\": true,            \"field\": \"c1\"        }, {            \"type\": \"string\",            \"optional\": true,            \"field\": \"c2\"        }, {            \"type\": \"int64\",            \"optional\": false,            \"name\": \"org.apache.kafka.connect.data.Timestamp\",            \"version\": 1,            \"field\": \"create_ts\"        }, {            \"type\": \"int64\",            \"optional\": false,            \"name\": \"org.apache.kafka.connect.data.Timestamp\",            \"version\": 1,            \"field\": \"update_ts\"        }],        \"optional\": false,        \"name\": \"foobar\"    },    \"payload\": {        \"c1\": 10000,        \"c2\": \"bar\",        \"create_ts\": 1501834166000,        \"update_ts\": 1501834166000    }}\n```\n\nLANGUAGE: json\nCODE:\n```\n{    \"schema\": {        \"type\": \"struct\",        \"fields\": [{            \"type\": \"int32\",            \"optional\": true,            \"field\": \"c1\"        }, {            \"type\": \"string\",            \"optional\": true,            \"field\": \"c2\"        }, {            \"type\": \"int64\",            \"optional\": false,            \"name\": \"org.apache.kafka.connect.data.Timestamp\",            \"version\": 1,            \"field\": \"create_ts\"        }, {            \"type\": \"int64\",            \"optional\": false,            \"name\": \"org.apache.kafka.connect.data.Timestamp\",            \"version\": 1,            \"field\": \"update_ts\"        }],        \"optional\": false,        \"name\": \"foobar\"    },    \"payload\": {        \"c1\": 10000,        \"c2\": \"bar\",        \"create_ts\": 1501834166000,        \"update_ts\": 0    }}\n```\n\nLANGUAGE: json\nCODE:\n```\n{    \"schema\": {        \"type\": \"struct\",        \"fields\": [{            \"type\": \"int32\",            \"optional\": true,            \"field\": \"c1\"        }, {            \"type\": \"string\",            \"optional\": true,            \"field\": \"c2\"        }, {            \"type\": \"int32\",            \"optional\": false,            \"name\": \"org.apache.kafka.connect.data.Date\",            \"version\": 1,            \"field\": \"create_ts\"        }, {            \"type\": \"int64\",            \"optional\": false,            \"name\": \"org.apache.kafka.connect.data.Timestamp\",            \"version\": 1,            \"field\": \"update_ts\"        }],        \"optional\": false,        \"name\": \"foobar\"    },    \"payload\": {        \"c1\": 10000,        \"c2\": \"bar\",        \"create_ts\": 1501834,        \"update_ts\": 1501834166    }}\n```\n\n----------------------------------------\n\nTITLE: QuestDB Performance Test Results\nDESCRIPTION: Output from running the TSBS benchmarking tool against QuestDB, showing metrics per second and rows per second over time.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb  --file /tmp/bigcpu  --workers 10\ntime,per. metric/s,metric total,overall metric/s,per. row/s,row total,overall row/s\n1613147061,9879054.12,9.880000E+07,9879054.12,987905.41,9.880000E+06,987905.41\n1613147071,10059194.21,1.994000E+08,9969123.46,1005919.42,1.994000E+07,996912.35\n1613147081,10100585.39,3.004000E+08,10012939.84,1010058.54,3.004000E+07,1001293.98\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Roles\nDESCRIPTION: SQL query to retrieve information about database roles. This query selects all role data from pg_roles catalog table and orders the results by role name.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/dbeaver/README.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.oid,a.* FROM pg_catalog.pg_roles a\nORDER BY a.rolname;\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Tests\nDESCRIPTION: Maven command to run QuestDB tests without building the web console or binaries.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean test\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 1 Worker\nDESCRIPTION: Executing the tsbs_load_questdb benchmark tool with 1 worker and displaying performance metrics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Generating CPU Data and Queries with TSBS\nDESCRIPTION: These bash commands use TSBS to generate CPU-related data and queries for QuestDB. The data covers a 24-hour period with 10-second intervals, while the queries are generated for various CPU analysis scenarios.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/cpu-only-example-queries.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_generate_data --use-case=\"cpu-only\" --seed=123 --scale=4000 \\\n  --timestamp-start=\"2016-01-01T00:00:00Z\" --timestamp-end=\"2016-01-02T00:00:00Z\" \\\n  --log-interval=\"10s\" --format=\"influx\" > /tmp/bigcpu\n\n~/tmp/go/bin/tsbs_generate_queries --use-case=\"cpu-only\" --seed=123 --scale=4000 \\\n  --timestamp-start=\"2016-01-01T00:00:00Z\" --timestamp-end=\"2016-01-02T00:00:01Z\" \\\n  --queries=1000 --query-type=\"high-cpu-1\" --format=\"questdb\" > /tmp/queries_questdb\n```\n\n----------------------------------------\n\nTITLE: Modifying LineTcpMeasurementScheduler for Performance Testing\nDESCRIPTION: Code diff showing a change to LineTcpMeasurementScheduler that forces the WriterJob to always return true for busy status.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n--- a/core/src/main/java/io/questdb/cutlass/line/tcp/LineTcpMeasurementScheduler.java\n+++ b/core/src/main/java/io/questdb/cutlass/line/tcp/LineTcpMeasurementScheduler.java\n@@ -889,7 +889,7 @@ class LineTcpMeasurementScheduler implements Closeable {\n             assert this.workerId == workerId;\n             boolean busy = drainQueue();\n             doMaintenance();\n-            return busy;\n+            return true;\n         }\n \n         private void close() {\n```\n\n----------------------------------------\n\nTITLE: Querying Current Schema and User\nDESCRIPTION: SQL query that retrieves the current schema and session user. This query is executed with every operation in DBeaver to maintain context awareness.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/dbeaver/README.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT current_schema(),session_user; -- DONE\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Benchmark\nDESCRIPTION: Commands to generate test data and load it into ClickHouse using TSBS benchmark tool with CPU-only use case and specific parameters.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/clickhouse.txt#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_generate_data --use-case=\"cpu-only\" --seed=123 --scale=4000 --timestamp-start=\"2016-01-01T00:00:00Z\" --timestamp-end=\"2016-01-02T00:00:00Z\" --log-interval=\"10s\" --format=\"clickhouse\" > /tmp/bigcpu\n~/tmp/go/bin/tsbs_load_clickhouse --file /tmp/bigcpu --workers 4\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Docker Container Interactively\nDESCRIPTION: Command to run QuestDB Docker container interactively with port mappings for all QuestDB services.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -p 9009:9009 -p 9000:9000 -p 8812:8812 questdb/questdb\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Capacity to 32 for Performance Testing\nDESCRIPTION: Configuration change setting line.tcp.net.io.queue.capacity to 32 for performance comparison testing. This represents one of several tests with different queue capacity values.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_5\n\nLANGUAGE: properties\nCODE:\n```\nline.tcp.net.io.queue.capacity=32\n```\n\n----------------------------------------\n\nTITLE: Querying Top CPU Usage with Grouping and Ordering\nDESCRIPTION: This SQL query selects the maximum CPU usage grouped by minute, ordered and limited to the top 5 results. It demonstrates the use of SAMPLE BY for time-based grouping, along with ORDER BY and LIMIT clauses.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/cpu-only-example-queries.md#2025-04-16_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT timestamp AS minute,\n max(usage_user)\nFROM cpu\nWHERE timestamp < '2016-01-01T03:17:08Z'\n SAMPLE BY 1m\n LIMIT 5\n```\n\n----------------------------------------\n\nTITLE: SSH Commands for AWS EC2 Connection\nDESCRIPTION: Various SSH commands to connect to an AWS EC2 instance using different authentication methods and hostnames.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh -i patrick-mackinlay-questdb-ssh-key ec2-user@34.241.150.237\nssh ec2-user@34.241.150.237\nssh -Y pim@ec2-34-241-150-237.eu-west-1.compute.amazonaws.com\nssh -Y pim@ec2-54-77-35-67.eu-west-1.compute.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Basic Parquet File Query in QuestDB\nDESCRIPTION: Simple SQL query to read all data from a Parquet file using the read_parquet() function.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/io/questdb/site/import/readme.txt#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM read_parquet('trades.parquet');\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Buildx Availability\nDESCRIPTION: Command to check if Docker buildx is available for multi-architecture builds.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx ls\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Benchmark with TimescaleDB\nDESCRIPTION: Generates benchmark data using TSBS and loads it into TimescaleDB. The benchmark simulates CPU usage data for 4000 hosts over a 24-hour period.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/timescale.txt#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_generate_data --use-case=\"cpu-only\" --seed=123 --scale=4000 --timestamp-start=\"2016-01-01T00:00:00Z\" --timestamp-end=\"2016-01-02T00:00:00Z\" --log-interval=\"10s\" --format=\"timescaledb\" > /tmp/bigcpu3\n~/tmp/go/bin/tsbs_load_timescaledb --pass ${POSTGRES_PASSWORD} --file /tmp/bigcpu3 --workers 4\n```\n\n----------------------------------------\n\nTITLE: Analyzing PostgreSQL Locks and Blocking Processes\nDESCRIPTION: Complex SQL query to analyze database locks and identify blocking processes. This query creates CTEs to identify lock conflicts, blocked processes, and blocking relationships in the PostgreSQL server.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/dbeaver/README.md#2025-04-16_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nwith locks as ( select  pid,locktype, mode,granted,transactionid tid,relation,page,tuple from pg_locks ), conflict as ( select *  from (values ('AccessShareLock','AccessExclusiveLock',1), ('RowShareLock','ExclusiveLock',1), ('RowShareLock','AccessExclusiveLock',2),        ('RowExclusiveLock','ShareLock', 1), ('RowExclusiveLock','ShareRowExclusiveLock',2),  ('RowExclusiveLock','ExclusiveLock',3), ('RowExclusiveLock','AccessExclusiveLock',4), ('ShareUpdateExclusiveLock','ShareUpdateExclusiveLock',1), ('ShareUpdateExclusiveLock','ShareLock',2),  ('ShareUpdateExclusiveLock','ShareRowExclusiveLock',3), ('ShareUpdateExclusiveLock','ExclusiveLock', 4), ('ShareUpdateExclusiveLock','AccessExclusiveLock',5), ('ShareLock','RowExclusiveLock',1),  ('ShareLock','ShareUpdateExclusiveLock',2),  ('ShareLock','ShareRowExclusiveLock',3),  ('ShareLock','ExclusiveLock',4),\t   ('ShareLock','AccessExclusiveLock',5), ('ShareRowExclusiveLock','RowExclusiveLock', 1),  ('ShareRowExclusiveLock','ShareUpdateExclusiveLock',    2),  ('ShareRowExclusiveLock','ShareLock',    3),  ('ShareRowExclusiveLock','ShareRowExclusiveLock',4),  ('ShareRowExclusiveLock','ExclusiveLock',5),  ('ShareRowExclusiveLock','AccessExclusiveLock', 6), ('ExclusiveLock','RowShareLock',1), ('ExclusiveLock','RowExclusiveLock',2), ('ExclusiveLock','ShareUpdateExclusiveLock',3),  ('ExclusiveLock','ShareLock',4),  ('ExclusiveLock','ShareRowExclusiveLock',5),   ('ExclusiveLock','ExclusiveLock',6),   ('ExclusiveLock','AccessExclusiveLock',7), ('AccessExclusiveLock','AccessShareLock',1), ('AccessExclusiveLock','RowShareLock',2), ('AccessExclusiveLock','RowExclusiveLock',3), ('AccessExclusiveLock','ShareUpdateExclusiveLock',4),   ('AccessExclusiveLock','ShareLock',5), ('AccessExclusiveLock','ShareRowExclusiveLock',6), ('AccessExclusiveLock','ExclusiveLock',7),  ('AccessExclusiveLock','AccessExclusiveLock',8) ) as t (mode1,mode2,prt)     )\t  ,real_locks as (select \t  la.pid as blocked_pid, blocked_activity.usename  AS blocked_user, la.blocked     AS blocking_pid, blocking_activity.usename AS blocking_user, blocked_activity.query    AS blocked_statement, blocking_activity.query   AS statement_in from  ( \tselect \t\t\t\t l.*, c.mode2, c.prt, l2.pid blocked, row_number() over(partition by l.pid order by c.prt) rid from   locks l join conflict c on l.mode = c.mode1 join locks l2 on l2.locktype = l.locktype and l2.mode = c.mode2 and l2.granted and l.pid != l2.pid and  coalesce(l.tid::text,'*') ||':'|| coalesce(l.relation::text,'*') ||':'|| coalesce(l.page::text,'*') ||':'|| coalesce(l.tuple::text,'*') = coalesce(l2.tid::text,'*') ||':'|| coalesce(l2.relation::text,'*') ||':'|| coalesce(l2.page::text,'*') ||':'|| coalesce(l2.tuple::text,'*') where not l.granted ) la join pg_catalog.pg_stat_activity blocked_activity  ON blocked_activity.pid = la.pid join pg_catalog.pg_stat_activity blocking_activity  ON blocking_activity.pid = la.blocked where la.rid = 1) , root_quest as (    select blocking_pid as blocking_pid from real_locks  except  select blocked_pid from real_locks )  select blocked_pid,        blocked_user,       blocking_pid,      blocking_user,     blocked_statement,    statement_in  from  real_locks union select real_locks.blocking_pid,  real_locks.blocking_user,  null::integer,  null::text,  real_locks.statement_in,  null::text  from real_locks,  root_quest  where real_locks.blocking_pid = root_quest.blocking_pid;\n```\n\n----------------------------------------\n\nTITLE: Building TSBS Load Tool in Go\nDESCRIPTION: Commands to build and install the TSBS load testing tool for QuestDB\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nGOPATH=~/tmp/go go build -v ./...\nGOPATH=~/tmp/go go install -v ./...\n```\n\n----------------------------------------\n\nTITLE: System Package Installation on AWS\nDESCRIPTION: Commands to install necessary packages on an Amazon Linux instance including development tools, GUI applications, and Java.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install xauth\nsudo yum install xterm\nsudo yum install xorg-x11-apps\nsudo yum install git-core\nsudo yum install tmux\nsudo yum install maven\nsudo amazon-linux-extras install java-openjdk11\n```\n\n----------------------------------------\n\nTITLE: Aggregation Query on Parquet Data\nDESCRIPTION: SQL query demonstrating price aggregation functions (MIN and MAX) on Parquet file data.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/io/questdb/site/import/readme.txt#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT MIN(price), MAX(price)\nFROM read_parquet('trades.parquet');\n```\n\n----------------------------------------\n\nTITLE: Building Rust JNI Bindings for SqlLogicTest\nDESCRIPTION: Commands for building the Rust JNI bindings, which outputs a shared library to be used in Java unit tests. The library can be built in debug or release mode.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/rust/qdb-sqllogictest/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build\n\n# or\n\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Assembly Build in CMake\nDESCRIPTION: This CMake configuration sets up an assembly library build with platform-specific settings. It defines assembly sources, enables NASM assembly language, configures platform-specific flags and object formats, and creates the library target with appropriate linking and include settings.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/asmlib/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n#Set to verbose to see NASM command line\n#set(CMAKE_VERBOSE_MAKEFILE ON)\n\nset(\n        ASM_SOURCES\n        ${ASMLIB_SOURCE_DIR}instrset64.asm\n        ${ASMLIB_SOURCE_DIR}procname64.asm\n        ${ASMLIB_SOURCE_DIR}memcpy64.asm\n        ${ASMLIB_SOURCE_DIR}memcmp64.asm\n        ${ASMLIB_SOURCE_DIR}memset64.asm\n        ${ASMLIB_SOURCE_DIR}cputype64.asm\n        ${ASMLIB_SOURCE_DIR}unalignedisfaster64.asm\n        ${ASMLIB_SOURCE_DIR}cachesize64.asm\n)\n\nenable_language(ASM_NASM)\nif (WIN32)\n    set(CMAKE_ASM_NASM_FLAGS \"-dWINDOWS\")\n    set(CMAKE_ASM_NASM_OBJECT_FORMAT win64)\nelseif (APPLE)\n    # prefix global symbols with _, Mach-O liker needs the leading underscore\n    set(CMAKE_ASM_NASM_FLAGS \"-dUNIX --prefix _\")\n    set(CMAKE_ASM_NASM_OBJECT_FORMAT macho64)\nelse ()\n    set(CMAKE_SHARED_LINKER_FLAGS \"-z noexecstack\")\n    # call instructions to be re-written as call %1 WRT ..plt for ELF\n    set(CMAKE_ASM_NASM_FLAGS \"-dUNIX -dELF\")\n    set(CMAKE_ASM_NASM_OBJECT_FORMAT elf64)\nendif ()\n\nset(CMAKE_ASM_NASM_FLAGS \"${CMAKE_ASM_NASM_FLAGS} -dPOSITIONINDEPENDENT\")\n\nadd_library(asm ${ASM_SOURCES})\n\ntarget_include_directories(asm PRIVATE ${CMAKE_CURRENT_LIST_DIR})\n\ntarget_link_libraries(\n        asm\n)\n```\n\n----------------------------------------\n\nTITLE: Updated Line TCP Measurement Size\nDESCRIPTION: Modified configuration showing increased maximum measurement size setting for Line TCP protocol.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_20\n\nLANGUAGE: properties\nCODE:\n```\nline.tcp.max.measurement.size=2048\n```\n\n----------------------------------------\n\nTITLE: Managing ClickHouse Service\nDESCRIPTION: Commands for starting the ClickHouse server service using systemctl.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/clickhouse.txt#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start clickhouse-server\n```\n\n----------------------------------------\n\nTITLE: Time-Series Sampling Query on Parquet Data\nDESCRIPTION: Advanced SQL query showing how to perform time-series analysis with daily sampling on timestamp-sorted Parquet data.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/io/questdb/site/import/readme.txt#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nWITH trades AS (\n    (SELECT * FROM read_parquet('trades.parquet')) TIMESTAMP(timestamp)\n)\nSELECT timestamp, MIN(price), MAX(price), FIRST(price) AS open, LAST(price) AS close FROM trades\nSAMPLE BY 1d;\n```\n\n----------------------------------------\n\nTITLE: Decompressing Page Data\nDESCRIPTION: Demonstrates decompression of Parquet page data.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/rust/qdbr/parquet2/guide/src/README.md#2025-04-16_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet decompressed = match page.compression() {\n    Compression::UNCOMPRESSED => Cow::Borrowed(page.buffer()),\n    _ => Cow::Owned(decompress(\n        page.compression(),\n        page.buffer(),\n        page.uncompressed_size() as usize,\n    )?),\n};\n```\n\n----------------------------------------\n\nTITLE: QuestDB Load Test Command\nDESCRIPTION: Command line instruction to load test data into QuestDB using tsbs_load_questdb utility with a single worker\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ntsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Client on Amazon Linux\nDESCRIPTION: Installs the PostgreSQL client on an Amazon Linux instance using yum package manager.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/timescale.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install postgresql.x86_64\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load Test with Default Configuration (First Run)\nDESCRIPTION: Loading test data into QuestDB using default configuration with the tsbs_load_questdb tool and a single worker. Results show performance metrics over time and final throughput statistics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Launching ClickHouse CLI Client\nDESCRIPTION: Command to start the ClickHouse command-line client interface.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/clickhouse.txt#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nclickhouse-client\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building SIMDJSON Library in CMake\nDESCRIPTION: Sets up the build configuration for the SIMDJSON library, specifying include directories, source files, and creating a library target. Includes commented-out CPU dispatching options that would disable AVX/AVX2 instruction sets due to potential conflicts with SIMDJSON's own CPU dispatching.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/simdjson-cmake/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SIMDJSON_INCLUDE_DIR \"src/main/c/share/simdjson/include\")\nset(SIMDJSON_SRC_DIR \"src/main/c/share/simdjson/src\")\nset(SIMDJSON_SRC \"${SIMDJSON_SRC_DIR}/simdjson.cpp\")\n\nadd_library(_simdjson ${SIMDJSON_SRC})\ntarget_include_directories(_simdjson SYSTEM PUBLIC \"${SIMDJSON_INCLUDE_DIR}\" PRIVATE \"${SIMDJSON_SRC_DIR}\")\n\n# simdjson is using its own CPU dispatching and get confused if we enable AVX/AVX2 flags.\n#if(ARCH_AMD64)\n#    target_compile_options(_simdjson PRIVATE -mno-avx -mno-avx2)\n#endif()\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load Test with Queue Capacity 4096\nDESCRIPTION: Loading test data into QuestDB with line.tcp.net.io.queue.capacity=4096 using the tsbs_load_questdb tool with a single worker. Results show performance metrics over time and final throughput statistics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard and Source Files for QuestDB\nDESCRIPTION: Configures the C++ standard to 11 and specifies the source files for building the QuestDB application. It includes header and implementation files needed for the service launcher.\nSOURCE: https://github.com/questdb/questdb/blob/master/win64svc/src/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\nset(SOURCE_FILES common.h getopt.h main.c svcctrl.c questdb.c service.c service.c)\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 8192 Buffer Size\nDESCRIPTION: Executes the tsbs_load_questdb benchmark with a line.tcp.msg.buffer.size of 8192. It loads 345,600,000 metrics in about 101 seconds, achieving a rate of 3,413,046 metrics/sec.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Cleanup ClickHouse Installation\nDESCRIPTION: Commands to stop ClickHouse service, disable it from auto-starting, and remove data directories.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/clickhouse.txt#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop clickhouse-server\nsudo systemctl disable clickhouse-server\nsudo rm -rf /var/lib/clickhouse/data/ /var/lib/clickhouse/store/\n```\n\n----------------------------------------\n\nTITLE: Setting zlib Version and Build Options in CMake\nDESCRIPTION: Configures the CMake environment with zlib version and architecture-specific build options. Sets the version to 1.2.8 and provides options for enabling i686 or AMD64 assembly implementations.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/zlib-1.2.8/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nset(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON)\n\nset(VERSION \"1.2.8\")\n\noption(ASM686 \"Enable building i686 assembly implementation\")\noption(AMD64 \"Enable building amd64 assembly implementation\")\n```\n\n----------------------------------------\n\nTITLE: Building QuestDB Linux ARM64 Docker Image\nDESCRIPTION: Command to build a QuestDB Docker image for Linux ARM64 architecture using buildx.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build --platform linux/arm64 -t questdb/questdb:<software_version>-linux-arm64 --file Dockerfile-linux-arm64 . --load\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load Test with Queue Capacity 128\nDESCRIPTION: Loading test data into QuestDB with line.tcp.net.io.queue.capacity=128 using the tsbs_load_questdb tool with a single worker. Results show performance metrics over time and final throughput statistics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Sample IOT Data Format in InfluxDB Line Protocol\nDESCRIPTION: Example of a single data point in InfluxDB line protocol format showing diagnostics data for a truck with various metrics and timestamp.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndiagnostics,name=truck_3985,fleet=West,driver=Seth,model=H-2,device_version=v1.5 load_capacity=1500,fuel_capacity=150,nominal_fuel_consumption=12,fuel_state=0.8,current_load=482,status=4i 1451609990000000000\n```\n\n----------------------------------------\n\nTITLE: TSBS Load Performance Testing Commands\nDESCRIPTION: Series of performance test commands using tsbs_load_questdb with different worker counts (1-4) showing load times and throughput metrics for loading CPU data.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntime cat /tmp/cpu | ~/tmp/go/bin/tsbs_load_questdb --workers 1\ntime cat /tmp/cpu2 | ~/tmp/go/bin/tsbs_load_questdb --workers 1\ntime cat /tmp/cpu3 | ~/tmp/go/bin/tsbs_load_questdb --workers 1\ntime cat /tmp/cpu | ~/tmp/go/bin/tsbs_load_questdb --workers 2\ntime cat /tmp/cpu2 | ~/tmp/go/bin/tsbs_load_questdb --workers 2\ntime cat /tmp/cpu3 | ~/tmp/go/bin/tsbs_load_questdb --workers 3\ntime cat /tmp/cpu | ~/tmp/go/bin/tsbs_load_questdb --workers 3\ntime cat /tmp/cpu2 | ~/tmp/go/bin/tsbs_load_questdb --workers 3\ntime cat /tmp/cpu3 | ~/tmp/go/bin/tsbs_load_questdb --workers 3\ntime cat /tmp/cpu | ~/tmp/go/bin/tsbs_load_questdb --workers 4\ntime cat /tmp/cpu2 | ~/tmp/go/bin/tsbs_load_questdb --workers 4\ntime cat /tmp/cpu3 | ~/tmp/go/bin/tsbs_load_questdb --workers 4\n```\n\n----------------------------------------\n\nTITLE: Running Validation Rule Tests with Node.js\nDESCRIPTION: Command to execute tests for the pull request title validation rules using Node.js.\nSOURCE: https://github.com/questdb/questdb/blob/master/ci/validate-pr-title/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ./validate.test.js\n```\n\n----------------------------------------\n\nTITLE: Creating JeMalloc Shared Library and Setting Include Directories\nDESCRIPTION: Adds the JeMalloc shared library target and sets up include directories. It also configures platform-specific include prefixes based on the operating system and architecture.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/jemalloc-cmake/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(jemalloc SHARED ${SRCS})\n\ntarget_include_directories(jemalloc PUBLIC \"${LIBRARY_CMAKE_DIR}/include\")\ntarget_include_directories(jemalloc PUBLIC \"${LIBRARY_DIR}/include\")\n\nset(JEMALLOC_INCLUDE_PREFIX)\nif (OS_LINUX)\n    set(JEMALLOC_INCLUDE_PREFIX \"include_linux\")\nelseif (OS_FREEBSD)\n    set(JEMALLOC_INCLUDE_PREFIX \"include_freebsd\")\nelseif (OS_DARWIN)\n    set(JEMALLOC_INCLUDE_PREFIX \"include_darwin\")\nelse ()\n    message(FATAL_ERROR \"internal jemalloc: This OS is not supported\")\nendif ()\nif (ARCH_AMD64)\n    set(JEMALLOC_INCLUDE_PREFIX \"${JEMALLOC_INCLUDE_PREFIX}_x86_64\")\nelseif (ARCH_AARCH64)\n    set(JEMALLOC_INCLUDE_PREFIX \"${JEMALLOC_INCLUDE_PREFIX}_aarch64\")\nelse ()\n    message(FATAL_ERROR \"internal jemalloc: This arch is not supported\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Building QuestDB Windows Docker Image\nDESCRIPTION: Command to build a QuestDB Docker image for Windows AMD64 architecture.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t questdb/questdb:<software_version>-windows-amd64 --file Dockerfile-windows .\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 8 Workers\nDESCRIPTION: Executing the tsbs_load_questdb benchmark tool with 8 workers and displaying performance metrics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 8\n```\n\n----------------------------------------\n\nTITLE: Listing Short Type Casting Function Factories in QuestDB\nDESCRIPTION: A collection of fully qualified class names for function factories that handle casting from the Short data type to various other data types in QuestDB.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.cast.CastShortToByteFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastShortToCharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastShortToIntFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastShortToLongFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastShortToFloatFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastShortToDoubleFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastShortToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastShortToVarcharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastShortToDateFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastShortToTimestampFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastShortToSymbolFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastShortToLong256FunctionFactory\nio.questdb.griffin.engine.functions.cast.CastShortToBooleanFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Capacity to 64 for Performance Testing\nDESCRIPTION: Configuration change setting line.tcp.net.io.queue.capacity to 64 for performance comparison testing. This represents one of several tests with different queue capacity values.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nline.tcp.net.io.queue.capacity=64\n```\n\n----------------------------------------\n\nTITLE: Creating QuestDB Executable with Configurable Main Class\nDESCRIPTION: Creates the QuestDB executable target with the specified source files and sets the main Java class to use. Uses a custom main class if provided through QUESTDB_MAIN_CLASS, otherwise defaults to io.questdb/io.questdb.ServerMain.\nSOURCE: https://github.com/questdb/questdb/blob/master/win64svc/src/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(questdb ${SOURCE_FILES})\nif (QUESTDB_MAIN_CLASS)\n    target_compile_definitions(questdb PRIVATE QUESTDB_MAIN_CLASS=\"${QUESTDB_MAIN_CLASS}\")\nelse()\n    target_compile_definitions(questdb PRIVATE QUESTDB_MAIN_CLASS=\"io.questdb/io.questdb.ServerMain\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Source Files Configuration\nDESCRIPTION: Defines source file lists for different components including VCL (Vector Class Library) files and platform-specific implementations.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(\n        VCL_FILES\n        src/main/c/share/vec_agg.cpp\n        src/main/c/share/vec_ts_agg.cpp\n        src/main/c/share/ooo_dispatch.cpp\n        src/main/c/share/geohash_dispatch.cpp\n)\n\nset(\n        SOURCE_FILES\n        src/main/c/share/simd.h\n        src/main/c/share/files.h\n        # ... additional files\n)\n```\n\n----------------------------------------\n\nTITLE: Pushing QuestDB Windows Docker Image\nDESCRIPTION: Command to push the QuestDB Windows AMD64 Docker image to Docker Hub.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndocker push questdb/questdb:<software_version>-windows-amd64\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 4 Workers\nDESCRIPTION: Executing the tsbs_load_questdb benchmark tool with 4 workers and displaying performance metrics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 4\n```\n\n----------------------------------------\n\nTITLE: Verifying ClickHouse Server Package\nDESCRIPTION: Command to verify the installed ClickHouse server package version on the system.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/clickhouse.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrpm -ql clickhouse-server-21.4.3.21-2\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 5 Workers\nDESCRIPTION: Executing the tsbs_load_questdb benchmark tool with 5 workers and displaying performance metrics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 5\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Windows Service Project\nDESCRIPTION: Sets up the CMake configuration for the win64svc project. It specifies the minimum CMake version, defines the project name, sets the output directory using generator expressions to handle different configurations, and includes the src subdirectory.\nSOURCE: https://github.com/questdb/questdb/blob/master/win64svc/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nproject(win64svc)\n\n# Use a generator expression so that the specified folder is used directly, without any\n# configuration-dependent suffix.\n#\n# See https://cmake.org/cmake/help/v3.8/prop_tgt/LIBRARY_OUTPUT_DIRECTORY.html\nset(OUTPUT ${CMAKE_CURRENT_LIST_DIR}/../core/src/main/bin/$<$<CONFIG:Debug>:>)\nadd_subdirectory(src)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Source Configuration\nDESCRIPTION: Configures platform-specific source files and include directories based on the detected operating system (Darwin, FreeBSD, Linux, or Windows).\nSOURCE: https://github.com/questdb/questdb/blob/master/core/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (OS_DARWIN)\n    include_directories($ENV{JAVA_HOME}/include/darwin/)\n    set(\n            SOURCE_FILES ${SOURCE_FILES}\n            src/main/c/osx/kqueue.c\n            src/main/c/share/net.c\n            src/main/c/osx/affinity.c\n            src/main/c/osx/accept.c\n            src/main/c/freebsd/files.c\n    )\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Configuration and Platform Detection\nDESCRIPTION: Sets up initial CMake configuration including C++ standard, visibility settings, and detects platform architecture (ARM64 vs AMD64) and operating system type.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/CMakeLists.txt#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nproject(questdb)\n\ninclude(ExternalProject)\n\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED True)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\n\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\nset(CMAKE_C_VISIBILITY_PRESET hidden)\n\nif ($ENV{JAVA_HOME})\n    FILE(TO_CMAKE_PATH $ENV{JAVA_HOME} JAVA_HOME)\nendif ($ENV{JAVA_HOME})\n\nif (CMAKE_SYSTEM_PROCESSOR MATCHES \"^arm64\" OR CMAKE_SYSTEM_PROCESSOR MATCHES \"^aarch64\")\n    set(ARCH_AARCH64 1)\nelse ()\n    set(ARCH_AMD64 1)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Running tsbs_load_questdb Performance Test with 512 Buffer Size\nDESCRIPTION: Executes the tsbs_load_questdb tool to load test data into QuestDB with a 512 byte buffer size. The output shows throughput metrics over time and a final summary.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npim@patrick$ > ~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Processing Log Statistics with Unix Shell Commands\nDESCRIPTION: Shell command that extracts the 'nUncontended' field from log lines containing 'closing stats nContended', sums the values using awk, and displays the total count.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/amazon.txt#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat log | grep \"t closing stats nContended\" | sed -E 's/.+nUncontended=([^,]+).*?/\\1/' | awk '{s+=$0} END {print s}'\n```\n\n----------------------------------------\n\nTITLE: Running QuestDB Benchmark with 6 Workers\nDESCRIPTION: Executing the tsbs_load_questdb benchmark tool with 6 workers and displaying performance metrics.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 6\n```\n\n----------------------------------------\n\nTITLE: Managing zconf.h Configuration File\nDESCRIPTION: Handles the zconf.h header file configuration in out-of-source builds. Renames existing zconf.h to avoid conflicts with CMake-generated version and configures zlib.pc and zconf.h from templates.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/zlib-1.2.8/CMakeLists.txt#2025-04-16_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT ZLIB_SOURCE_DIR STREQUAL CMAKE_CURRENT_BINARY_DIR)\n    # If we're doing an out of source build and the user has a zconf.h\n    # in their source tree...\n    if (EXISTS ${ZLIB_SOURCE_DIR}/zconf.h)\n        message(STATUS \"Renaming\")\n        message(STATUS \"    ${ZLIB_SOURCE_DIR}/zconf.h\")\n        message(STATUS \"to 'zconf.h.included' because this file is included with zlib\")\n        message(STATUS \"but CMake generates it automatically in the build directory.\")\n        file(RENAME ${ZLIB_SOURCE_DIR}/zconf.h ${ZLIB_SOURCE_DIR}/zconf.h.included)\n    endif ()\nendif ()\n\nset(ZLIB_PC ${CMAKE_CURRENT_BINARY_DIR}/zlib.pc)\nconfigure_file(${ZLIB_SOURCE_DIR}/zlib.pc.cmakein\n        ${ZLIB_PC} @ONLY)\nconfigure_file(${ZLIB_SOURCE_DIR}/zconf.h.cmakein\n        ${CMAKE_CURRENT_BINARY_DIR}/zconf.h @ONLY)\ninclude_directories(${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Logging into Docker Hub\nDESCRIPTION: Command to log into Docker Hub for pushing images.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker login\n```\n\n----------------------------------------\n\nTITLE: External Dependencies Configuration\nDESCRIPTION: Sets up external dependencies including asmjit and liburing, configuring their build and linking settings.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/CMakeLists.txt#2025-04-16_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(FetchContent)\nFetchContent_Declare(\n        asmjit\n        GIT_REPOSITORY https://github.com/questdb/asmjit.git\n        GIT_TAG 4ec760a3d1f69e32ba460ecd2513f29b8428700b\n)\n\nif (OS_LINUX)\n    ExternalProject_Add(\n            liburing_git\n            GIT_REPOSITORY http://github.com/axboe/liburing.git\n            GIT_TAG liburing-2.2\n            BUILD_IN_SOURCE 1\n            BUILD_BYPRODUCTS \"<SOURCE_DIR>/src/liburing.a\"\n            BUILD_COMMAND make \"CC=${CMAKE_C_COMPILER}\" \"CXX=${CMAKE_CXX_COMPILER}\" \"AR=${CMAKE_AR}\" \"RANLIB=${CMAKE_RANLIB}\"\n            CONFIGURE_COMMAND \"\"\n            INSTALL_COMMAND \"\"\n            TEST_COMMAND \"\"\n            LOG_BUILD ON\n    )\n```\n\n----------------------------------------\n\nTITLE: Running tsbs_load_questdb Performance Test with 8192 Buffer Size\nDESCRIPTION: Executes the tsbs_load_questdb tool to load test data into QuestDB with an 8192 byte buffer size. The output shows throughput metrics over time and a final summary.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npim@patrick$ > ~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Information in HTML Table\nDESCRIPTION: This HTML snippet represents a portion of a table that displays information about contributors to the QuestDB project. It includes their GitHub avatars, usernames, and contribution types using icons and links.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.zh-hk.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.questdb.io\"><img src=\"https://avatars.githubusercontent.com/u/52114895?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>TheTanc</b></sub></a><br /><a href=\"#projectManagement-TheTanc\" title=\"Project Management\">📆</a> <a href=\"#content-TheTanc\" title=\"Content\">🖋</a> <a href=\"#ideas-TheTanc\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://davidgs.com\"><img src=\"https://avatars.githubusercontent.com/u/2071898?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>davidgs</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Adavidgs\" title=\"Bug reports\">🐛</a> <a href=\"#content-davidgs\" title=\"Content\">🖋</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://redalemeden.com\"><img src=\"https://avatars.githubusercontent.com/u/519433?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>kaishin</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=kaishin\" title=\"Code\">💻</a> <a href=\"#example-kaishin\" title=\"Examples\">💡</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://questdb.io\"><img src=\"https://avatars.githubusercontent.com/u/7276403?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>bluestreak01</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=bluestreak01\" title=\"Code\">💻</a> <a href=\"#maintenance-bluestreak01\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/questdb/questdb/commits?author=bluestreak01\" title=\"Tests\">⚠️</a></td>\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Table in HTML\nDESCRIPTION: This HTML snippet displays a table of contributors to the QuestDB project. Each cell contains a contributor's avatar, username, and contribution types represented by emoji icons. The table is structured with rows and columns to organize multiple contributors.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.zh-cn.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.questdb.io\"><img src=\"https://avatars.githubusercontent.com/u/52114895?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>TheTanc</b></sub></a><br /><a href=\"#projectManagement-TheTanc\" title=\"Project Management\">📆</a> <a href=\"#content-TheTanc\" title=\"Content\">🖋</a> <a href=\"#ideas-TheTanc\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://davidgs.com\"><img src=\"https://avatars.githubusercontent.com/u/2071898?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>davidgs</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Adavidgs\" title=\"Bug reports\">🐛</a> <a href=\"#content-davidgs\" title=\"Content\">🖋</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://redalemeden.com\"><img src=\"https://avatars.githubusercontent.com/u/519433?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>kaishin</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=kaishin\" title=\"Code\">💻</a> <a href=\"#example-kaishin\" title=\"Examples\">💡</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://questdb.io\"><img src=\"https://avatars.githubusercontent.com/u/7276403?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>bluestreak01</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=bluestreak01\" title=\"Code\">💻</a> <a href=\"#maintenance-bluestreak01\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/questdb/questdb/commits?author=bluestreak01\" title=\"Tests\">⚠️</a></td>\n```\n\n----------------------------------------\n\nTITLE: Running TSBS Load on QuestDB with VisualVM Attached\nDESCRIPTION: Terminal output showing performance metrics when running tsbs_load_questdb with VisualVM profiler attached. Test loads 34.56 million rows at approximately 466,518 rows per second.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu2  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Extracting zlib Version and Setting up MinGW Resources\nDESCRIPTION: Extracts the full zlib version number from zlib.h using regex and configures resource files for MinGW builds. Sets up custom command for resource compilation on MinGW platforms.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/zlib-1.2.8/CMakeLists.txt#2025-04-16_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION\nfile(READ ${ZLIB_SOURCE_DIR}/zlib.h _zlib_h_contents)\nstring(REGEX REPLACE \".*#define[ \\t]+ZLIB_VERSION[ \\t]+\\\"([-0-9A-Za-z.]+)\\\".*\"\n        \"\\\\1\" ZLIB_FULL_VERSION ${_zlib_h_contents})\n\nif (MINGW)\n    # This gets us DLL resource information when compiling on MinGW.\n    if (NOT CMAKE_RC_COMPILER)\n        set(CMAKE_RC_COMPILER windres.exe)\n    endif ()\n\n    add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj\n            COMMAND ${CMAKE_RC_COMPILER}\n            -D GCC_WINDRES\n            -I ${ZLIB_SOURCE_DIR}\n            -I ${CMAKE_CURRENT_BINARY_DIR}\n            -o ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj\n            -i ${ZLIB_SOURCE_DIR}/win32/zlib1.rc)\n    set(ZLIB_DLL_SRCS ${CMAKE_CURRENT_BINARY_DIR}/zlib1rc.obj)\nendif (MINGW)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Buildx Builder\nDESCRIPTION: Commands to create and configure a Docker buildx builder for multi-architecture builds.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx create --name multiarchbuilder\ndocker buildx use multiarchbuilder\ndocker buildx inspect --bootstrap\n```\n\n----------------------------------------\n\nTITLE: Running tsbs_load_questdb Performance Test with 16384 Buffer Size\nDESCRIPTION: Executes the tsbs_load_questdb tool to load test data into QuestDB with a 16384 byte buffer size. The output shows throughput metrics over time and a final summary.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npim@patrick$ > ~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Grid in HTML\nDESCRIPTION: This HTML snippet creates a grid layout to display QuestDB project contributors. It uses table elements to organize contributors into rows and columns, with each cell containing the contributor's avatar, username, and contribution types represented by emoji icons.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.vi-vn.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/tim2skew\"><img src=\"https://avatars.githubusercontent.com/u/54268285?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>tim2skew</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Atim2skew\" title=\"Bug reports\">🐛</a> <a href=\"#userTesting-tim2skew\" title=\"User Testing\">📓</a></td>\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Table in HTML\nDESCRIPTION: This HTML snippet renders a table of contributors to the QuestDB project. It includes GitHub avatars, usernames, and contribution types for each contributor.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.tr-tr.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/tim2skew\"><img src=\"https://avatars.githubusercontent.com/u/54268285?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>tim2skew</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Atim2skew\" title=\"Bug reports\">🐛</a> <a href=\"#userTesting-tim2skew\" title=\"User Testing\">📓</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ospqsp\"><img src=\"https://avatars.githubusercontent.com/u/84992434?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>ospqsp</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Aospqsp\" title=\"Bug reports\">🐛</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SuperFluffy\"><img src=\"https://avatars.githubusercontent.com/u/701177?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>SuperFluffy</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3ASuperFluffy\" title=\"Bug reports\">🐛</a></td>\n```\n\n----------------------------------------\n\nTITLE: Cloning QuestDB Repository\nDESCRIPTION: Command to clone the QuestDB repository from GitHub using SSH.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_0\n\nLANGUAGE: script\nCODE:\n```\ngit clone git@github.com:questdb/questdb.git\n```\n\n----------------------------------------\n\nTITLE: Defining Installation Directories for zlib in CMake\nDESCRIPTION: Sets up the installation directories for zlib components including binaries, libraries, headers, man pages, and pkgconfig files. Uses CMake cache variables to allow customization of installation paths.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/zlib-1.2.8/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BIN_DIR \"${CMAKE_INSTALL_PREFIX}/bin\" CACHE PATH \"Installation directory for executables\")\nset(INSTALL_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\" CACHE PATH \"Installation directory for libraries\")\nset(INSTALL_INC_DIR \"${CMAKE_INSTALL_PREFIX}/include\" CACHE PATH \"Installation directory for headers\")\nset(INSTALL_MAN_DIR \"${CMAKE_INSTALL_PREFIX}/share/man\" CACHE PATH \"Installation directory for manual pages\")\nset(INSTALL_PKGCONFIG_DIR \"${CMAKE_INSTALL_PREFIX}/share/pkgconfig\" CACHE PATH \"Installation directory for pkgconfig (.pc) files\")\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME on Windows\nDESCRIPTION: Command to set the JAVA_HOME environment variable on Windows systems. This is required for Maven to function properly.\nSOURCE: https://github.com/questdb/questdb/blob/master/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset JAVA_HOME=\"c:\\path\\to\\java directory\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Directories for QuestDB Build\nDESCRIPTION: Defines the output directories for generated artifacts (archives, libraries, and executables) using the predefined OUTPUT variable.\nSOURCE: https://github.com/questdb/questdb/blob/master/win64svc/src/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT})\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT})\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT})\n```\n\n----------------------------------------\n\nTITLE: Running tsbs_load_questdb Performance Test with 2048 Buffer Size\nDESCRIPTION: Executes the tsbs_load_questdb tool to load test data into QuestDB with a 2048 byte buffer size. The output shows throughput metrics over time and a final summary.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npim@patrick$ > ~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Inspecting ClickHouse Data Directories\nDESCRIPTION: Commands to list contents of ClickHouse data and store directories.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/clickhouse.txt#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo ls -latrh /var/lib/clickhouse/store/\nsudo ls -latrh /var/lib/clickhouse/data/\n```\n\n----------------------------------------\n\nTITLE: Docker Push Example with Version Placeholder\nDESCRIPTION: Example showing how to use the version placeholder when pushing Docker images.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# example usage\ndocker push questdb/questdb:<software_version>-linux-amd64\n# equivalent to\ndocker push questdb/questdb:6.0.0-linux-amd64\n```\n\n----------------------------------------\n\nTITLE: Defining JeMalloc Source Files\nDESCRIPTION: Creates a list of source files for the JeMalloc library. This includes a large number of .c files that make up the JeMalloc implementation.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/jemalloc-cmake/CMakeLists.txt#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRCS\n        \"${LIBRARY_DIR}/src/arena.c\"\n        \"${LIBRARY_DIR}/src/background_thread.c\"\n        \"${LIBRARY_DIR}/src/base.c\"\n        # ... [additional files omitted for brevity]\n        \"${LIBRARY_DIR}/src/witness.c\"\n        \"${LIBRARY_DIR}/src/util.c\"\n)\nif (OS_DARWIN)\n    list(APPEND SRCS \"${LIBRARY_DIR}/src/zone.c\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Installing QuestDB on macOS with Homebrew\nDESCRIPTION: Commands for installing and managing QuestDB on macOS using Homebrew, including installation, starting and stopping the service.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.it-it.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew install questdb\nbrew services start questdb\n\nquestdb start // To start questdb\nquestdb stop  // To stop questdb\n```\n\n----------------------------------------\n\nTITLE: Running tsbs_load_questdb Performance Test with 1024 Buffer Size\nDESCRIPTION: Executes the tsbs_load_questdb tool to load test data into QuestDB with a 1024 byte buffer size. The output shows throughput metrics over time and a final summary.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npim@patrick$ > ~/tmp/go/bin/tsbs_load_questdb --file /tmp/bigcpu  --workers 1\n```\n\n----------------------------------------\n\nTITLE: Writing Sidecar Metadata\nDESCRIPTION: Complete example of writing sidecar metadata for multiple Parquet files.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/rust/qdbr/parquet2/guide/src/README.md#2025-04-16_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse std::error::Error;\n\nfn main() -> Result<(), Box<dyn Error>> {\n    let mut file = std::fs::File::create(\"test.parquet\")?;\n    let mut sidecar = std::fs::File::create(\"_metadata\")?;\n    parquet2::write::write_file_metadata(&mut sidecar, &metadata)?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Example Docker Buildx Output\nDESCRIPTION: Example output of the Docker buildx list command showing supported platforms.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/README.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nC:\\Users\\blues>docker buildx ls\nNAME/NODE DRIVER/ENDPOINT STATUS  PLATFORMS\ndefault * docker\n  default default         running linux/amd64, linux/arm64, linux/ppc64le, linux/s390x, linux/386, linux/arm/v7, linux/arm/v6\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: This snippet lists required Python packages and their specific versions. It includes DateTime, psycopg2-binary (PostgreSQL adapter), pytz (timezone handling), PyYAML (YAML parser), and zope.interface.\nSOURCE: https://github.com/questdb/questdb/blob/master/compat/src/test/python/requirements_psycopg2_stable.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDateTime==5.5\npsycopg2-binary==2.9.10\npytz==2024.2\nPyYAML==6.0.2\nzope.interface==7.0.3\n```\n\n----------------------------------------\n\nTITLE: Modifying LineTcpMeasurementScheduler in Java\nDESCRIPTION: This snippet shows changes to the LineTcpMeasurementScheduler class, where the return value of certain methods is changed from a variable 'busy' to always return true. This modification affects the behavior of the IO job and potentially impacts performance.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nclass LineTcpMeasurementScheduler implements Closeable {\n    // ...\n    boolean runSerially(int workerId) {\n        assert this.workerId == workerId;\n        boolean busy = drainQueue();\n        doMaintenance();\n        return true;\n    }\n    // ...\n    private boolean drainQueue() {\n        // ...\n        return true;\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME on FreeBSD\nDESCRIPTION: Command to set JAVA_HOME environment variable in FreeBSD profile configuration.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/CMAKE_README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"export JAVA_HOME=/usr/local/openjdk11\" >> ~/.profile\n```\n\n----------------------------------------\n\nTITLE: Reading Compressed Pages\nDESCRIPTION: Shows how to create an iterator of compressed pages from a column chunk.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/rust/qdbr/parquet2/guide/src/README.md#2025-04-16_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet pages = parquet2::read::get_page_iterator(&mut file, column_chunk, None)?;\n```\n\n----------------------------------------\n\nTITLE: Building with CMAKE on FreeBSD\nDESCRIPTION: Commands to build the project using CMAKE in Release mode on FreeBSD.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/CMAKE_README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmake -DCMAKE_BUILD_TYPE=Release -B build/release -H.\ncmake --build build/release --config Release\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML\nDESCRIPTION: HTML table layout for displaying contributor information including GitHub avatars, usernames, and contribution types using aligned cells and markdown-style emoji indicators for different contribution categories.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.zh-hk.md#2025-04-16_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Zapfmeister\"><img src=\"https://avatars.githubusercontent.com/u/20150586?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Zapfmeister</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=Zapfmeister\" title=\"Code\">💻</a> <a href=\"#userTesting-Zapfmeister\" title=\"User Testing\">📓</a></td>\n```\n\n----------------------------------------\n\nTITLE: Listing Date Type Casting Function Factories in QuestDB\nDESCRIPTION: A collection of fully qualified class names for function factories that handle casting from the Date data type to various other data types in QuestDB.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.cast.CastDateToShortFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDateToByteFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDateToCharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDateToIntFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDateToLongFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDateToFloatFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDateToDoubleFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDateToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDateToVarcharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDateToTimestampFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDateToSymbolFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDateToLong256FunctionFactory\nio.questdb.griffin.engine.functions.cast.CastDateToBooleanFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Git Commit Information for ILP Performance Improvements\nDESCRIPTION: Git commit details showing changes made to improve ILP (InfluxDB Line Protocol) performance by adding column type conversions.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncommit 3eabfeba1fb6df1d729baaa6ef8daad9cfe20eef (HEAD -> ilp_perf, origin/ilp_perf)\nAuthor: Patrick Mackinlay <github.9fadd@nospam.spacesurfer.com>\nDate:   Mon Feb 15 12:37:20 2021 +0000\n\n    feat(ilp): Add additional column type conversions\n```\n\n----------------------------------------\n\nTITLE: Building Multi-platform Docker Images with Version Tag\nDESCRIPTION: Command to build Docker images for multiple platforms (arm64, amd64) with a specific version tag.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/release/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd core\ndocker buildx build --push --platform linux/arm64,linux/amd64 --tag questdb/questdb:7.1.1 --build-arg tag_name=7.1.1 .\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Assembly Optimizations\nDESCRIPTION: Sets up architecture-specific assembly optimizations for zlib based on compiler and target architecture (i686 or AMD64). Handles assembly file configurations for GCC and MSVC compilers with appropriate definitions.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/zlib-1.2.8/CMakeLists.txt#2025-04-16_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT MINGW)\n    set(ZLIB_DLL_SRCS\n            ${ZLIB_SOURCE_DIR}/win32/zlib1.rc # If present will override custom build rule below.\n            )\nendif ()\n\nif (CMAKE_COMPILER_IS_GNUCC)\n    if (ASM686)\n        set(ZLIB_ASMS ${ZLIB_SOURCE_DIR}/contrib/asm686/match.S)\n    elseif (AMD64)\n        set(ZLIB_ASMS ${ZLIB_SOURCE_DIR}/contrib/amd64/amd64-match.S)\n    endif ()\n\n    if (ZLIB_ASMS)\n        add_definitions(-DASMV)\n        set_source_files_properties(${ZLIB_ASMS} PROPERTIES LANGUAGE C COMPILE_FLAGS -DNO_UNDERLINE)\n    endif ()\nendif ()\n\nif (MSVC)\n    if (ASM686)\n        ENABLE_LANGUAGE(ASM_MASM)\n        set(ZLIB_ASMS\n                ${ZLIB_SOURCE_DIR}/contrib/masmx86/inffas32.asm\n                ${ZLIB_SOURCE_DIR}/contrib/masmx86/match686.asm\n                )\n    elseif (AMD64)\n        ENABLE_LANGUAGE(ASM_MASM)\n        set(ZLIB_ASMS\n                ${ZLIB_SOURCE_DIR}/contrib/masmx64/gvmat64.asm\n                ${ZLIB_SOURCE_DIR}/contrib/masmx64/inffasx64.asm\n                )\n    endif ()\n\n    if (ZLIB_ASMS)\n        add_definitions(-DASMV -DASMINF)\n    endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Building with G++ Compiler on FreeBSD\nDESCRIPTION: Commands to build using g++ instead of default clang compiler on FreeBSD, specifying compiler paths explicitly.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/CMAKE_README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmake -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_C_COMPILER=/usr/local/bin/gcc10 -DCMAKE_CXX_COMPILER=/usr/local/bin/g++10 .\nmake\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributors Table in HTML\nDESCRIPTION: HTML table structure showing project contributors with their avatars, GitHub profiles, and contribution badges. Each cell includes centered content with avatar images, usernames as links, and contribution type indicators.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.zh-hk.md#2025-04-16_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ospqsp\"><img src=\"https://avatars.githubusercontent.com/u/84992434?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>ospqsp</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Aospqsp\" title=\"Bug reports\">🐛</a></td>\n```\n\n----------------------------------------\n\nTITLE: Listing Timestamp Type Casting Function Factories in QuestDB\nDESCRIPTION: A collection of fully qualified class names for function factories that handle casting from the Timestamp data type to various other data types in QuestDB.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.cast.CastTimestampToShortFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastTimestampToByteFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastTimestampToCharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastTimestampToIntFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastTimestampToLongFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastTimestampToFloatFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastTimestampToDoubleFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastTimestampToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastTimestampToVarcharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastTimestampToDateFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastTimestampToSymbolFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastTimestampToLong256FunctionFactory\nio.questdb.griffin.engine.functions.cast.CastTimestampToBooleanFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Pruning Docker Images\nDESCRIPTION: Command to clean up existing Docker images to ensure a clean build environment.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/release/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker system prune -a\n```\n\n----------------------------------------\n\nTITLE: Building Latest Docker Image\nDESCRIPTION: Command to build and tag the latest Docker image for multiple platforms.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/release/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker buildx build --push --platform linux/arm64,linux/amd64 --tag questdb/questdb:latest --build-arg tag_name=7.1.1 .\n```\n\n----------------------------------------\n\nTITLE: Adding Microsoft Visual C++ Specific Definitions\nDESCRIPTION: Adds MSVC-specific compiler definition to suppress secure function warnings. This is only applied when building with Microsoft Visual C++ compiler.\nSOURCE: https://github.com/questdb/questdb/blob/master/win64svc/src/CMakeLists.txt#2025-04-16_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Querying PostgreSQL Tablespaces\nDESCRIPTION: SQL query to retrieve information about PostgreSQL tablespaces. This query selects tablespace data and their physical locations from the pg_tablespace catalog and pg_tablespace_location function.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/dbeaver/README.md#2025-04-16_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT t.oid,t.*,pg_tablespace_location(t.oid) loc\nFROM pg_catalog.pg_tablespace t\nORDER BY t.oid;\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Contributor Grid in HTML\nDESCRIPTION: This HTML snippet creates a table-based grid to display GitHub contributors. Each cell contains an avatar image, username, and contribution icons for a specific contributor to the QuestDB project.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.vi-vn.md#2025-04-16_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/bziobrowski\"><img src=\"https://avatars.githubusercontent.com/u/26925920?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>bziobrowski</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=bziobrowski\" title=\"Code\">💻</a> <a href=\"#projectManagement-bziobrowski\" title=\"Project Management\">📆</a></td>\n```\n\n----------------------------------------\n\nTITLE: Listing Byte Type Casting Function Factories in QuestDB\nDESCRIPTION: A collection of fully qualified class names for function factories that handle casting from the Byte data type to various other data types in QuestDB.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.cast.CastByteToShortFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToByteFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToCharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToIntFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToLongFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToFloatFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToDoubleFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToVarcharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToDateFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToTimestampFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToSymbolFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToLong256FunctionFactory\nio.questdb.griffin.engine.functions.cast.CastByteToBooleanFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Capacity to 8 for Performance Testing\nDESCRIPTION: Configuration change setting line.tcp.net.io.queue.capacity to 8 for performance comparison testing. This represents one of several tests with different queue capacity values.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_7\n\nLANGUAGE: properties\nCODE:\n```\nline.tcp.net.io.queue.capacity=8\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies with Pinned Versions\nDESCRIPTION: A list of Python package dependencies with exact version specifications. This format is typically used in requirements.txt files for pip installation to ensure reproducible environments. The file includes database connectivity, date/time handling, configuration, and typing utility packages.\nSOURCE: https://github.com/questdb/questdb/blob/master/compat/src/test/python/requirements_psycopg3_stable.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nDateTime==5.5\npsycopg==3.2.2\npytz==2024.2\nPyYAML==6.0.2\ntyping_extensions==4.12.2\nzope.interface==7.0.3\n```\n\n----------------------------------------\n\nTITLE: Reading Parquet Metadata Asynchronously\nDESCRIPTION: Shows how to read Parquet file metadata using async operations with tokio::fs.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/rust/qdbr/parquet2/guide/src/README.md#2025-04-16_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse std::error::Error;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn Error>> {\n    let mut file = tokio::fs::File::open(\"test.parquet\").await?;\n    let metadata = parquet2::read::read_metadata_async(&mut file).await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying QuestDB Contributors Table in HTML\nDESCRIPTION: This HTML snippet renders a table of QuestDB contributors. It includes their GitHub avatars, usernames, and contribution types using icons. The table is structured with multiple rows and columns, each representing a contributor.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.ua-ua.md#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shimondoodkin\"><img src=\"https://avatars.githubusercontent.com/u/314464?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>shimondoodkin</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Ashimondoodkin\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-shimondoodkin\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.zsmart.tech/\"><img src=\"https://avatars.githubusercontent.com/u/40519768?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>huuhait</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Ahuuhait\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-huuhait\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://clickhouse.com/\"><img src=\"https://avatars.githubusercontent.com/u/18581488?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>alexey-milovidov</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Aalexey-milovidov\" title=\"Bug reports\">🐛</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://blog.suconghou.cn\"><img src=\"https://avatars.githubusercontent.com/u/4580719?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>suconghou</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Asuconghou\" title=\"Bug reports\">🐛</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/allegraharris\"><img src=\"https://avatars.githubusercontent.com/u/89586969?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>allegraharris</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=allegraharris\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/oliver-daniel\"><img src=\"https://avatars.githubusercontent.com/u/17235417?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>oliver-daniel</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=oliver-daniel\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kerimsenturk5734\"><img src=\"https://avatars.githubusercontent.com/u/72925170?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>kerimsenturk5734</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=kerimsenturk5734\" title=\"Documentation\">📖</a></td>\n    </tr>\n```\n\n----------------------------------------\n\nTITLE: Listing Char Type Casting Function Factories in QuestDB\nDESCRIPTION: A collection of fully qualified class names for function factories that handle casting from the Char data type to various other data types in QuestDB.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/resources/function_list.txt#2025-04-16_snippet_14\n\nLANGUAGE: Java\nCODE:\n```\nio.questdb.griffin.engine.functions.cast.CastCharToShortFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastCharToByteFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastCharToIntFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastCharToLongFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastCharToFloatFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastCharToDoubleFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastCharToStrFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastCharToVarcharFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastCharToDateFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastCharToSymbolFunctionFactory\nio.questdb.griffin.engine.functions.cast.CastCharToLong256FunctionFactory\nio.questdb.griffin.engine.functions.cast.CastCharToTimestampFunctionFactory\n```\n\n----------------------------------------\n\nTITLE: Defining zlib Source Files and Headers\nDESCRIPTION: Defines the public and private headers along with source files needed to build the zlib library. Lists all required source files for compilation including core functionality like compression, decompression, and CRC32.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/src/main/c/share/zlib-1.2.8/CMakeLists.txt#2025-04-16_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(ZLIB_PUBLIC_HDRS\n        ${CMAKE_CURRENT_BINARY_DIR}/zconf.h\n        zlib.h\n        )\nset(ZLIB_PRIVATE_HDRS\n        ${ZLIB_SOURCE_DIR}/crc32.h\n        ${ZLIB_SOURCE_DIR}/deflate.h\n        ${ZLIB_SOURCE_DIR}/gzguts.h\n        ${ZLIB_SOURCE_DIR}/inffast.h\n        ${ZLIB_SOURCE_DIR}/inffixed.h\n        ${ZLIB_SOURCE_DIR}/inflate.h\n        ${ZLIB_SOURCE_DIR}/inftrees.h\n        ${ZLIB_SOURCE_DIR}/trees.h\n        ${ZLIB_SOURCE_DIR}/zutil.h\n        )\nset(ZLIB_SRCS\n        ${ZLIB_SOURCE_DIR}/adler32.c\n        ${ZLIB_SOURCE_DIR}/compress.c\n        ${ZLIB_SOURCE_DIR}/crc32.c\n        ${ZLIB_SOURCE_DIR}/deflate.c\n        ${ZLIB_SOURCE_DIR}/gzclose.c\n        ${ZLIB_SOURCE_DIR}/gzlib.c\n        ${ZLIB_SOURCE_DIR}/gzread.c\n        ${ZLIB_SOURCE_DIR}/gzwrite.c\n        ${ZLIB_SOURCE_DIR}/inflate.c\n        ${ZLIB_SOURCE_DIR}/infback.c\n        ${ZLIB_SOURCE_DIR}/inftrees.c\n        ${ZLIB_SOURCE_DIR}/inffast.c\n        ${ZLIB_SOURCE_DIR}/trees.c\n        ${ZLIB_SOURCE_DIR}/uncompr.c\n        ${ZLIB_SOURCE_DIR}/zutil.c\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Capacity to 128 for Performance Testing\nDESCRIPTION: Configuration change setting line.tcp.net.io.queue.capacity to 128 for performance comparison testing. This represents one of several tests with different queue capacity values.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nline.tcp.net.io.queue.capacity=128\n```\n\n----------------------------------------\n\nTITLE: Additional WriterJob Performance Comparison\nDESCRIPTION: Further benchmarking results comparing standard implementation with the modified version that always returns busy=true.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# writerjob always returns true for busy\n~/tmp/go/bin/tsbs_load_questdb  --file /tmp/bigcpu  --workers 10\ntime,per. metric/s,metric total,overall metric/s,per. row/s,row total,overall row/s\n1613397939,10438618.16,1.044000E+08,10438618.16,1043861.82,1.044000E+07,1043861.82\n1613397949,10260487.64,2.070000E+08,10349560.91,1026048.76,2.070000E+07,1034956.09\n1613397959,10259611.44,3.096000E+08,10319577.85,1025961.14,3.096000E+07,1031957.78\n\nSummary:\nloaded 344804340 metrics in 33.274sec with 10 workers (mean rate 10362668.36 metrics/sec)\nloaded 34480434 rows in 33.274sec with 10 workers (mean rate 1036266.84 rows/sec)\n\n# writerjob regular\n~/tmp/go/bin/tsbs_load_questdb  --file /tmp/bigcpu  --workers 10\ntime,per. metric/s,metric total,overall metric/s,per. row/s,row total,overall row/s\n1613398382,10508480.22,1.051000E+08,10508480.22,1050848.02,1.051000E+07,1050848.02\n1613398392,10310186.24,2.082000E+08,10409341.29,1031018.62,2.082000E+07,1040934.13\n1613398402,10549664.54,3.137000E+08,10456114.73,1054966.45,3.137000E+07,1045611.47\n\nSummary:\nloaded 344804340 metrics in 32.922sec with 10 workers (mean rate 10473282.38 metrics/sec)\nloaded 34480434 rows in 32.922sec with 10 workers (mean rate 1047328.24 rows/sec)\n\n# writerjob always returns true for busy\n~/tmp/go/bin/tsbs_load_questdb  --file /tmp/bigcpu  --workers 10\ntime,per. metric/s,metric total,overall metric/s,per. row/s,row total,overall row/s\n1613398550,10248747.54,1.025000E+08,10248747.54,1024874.75,1.025000E+07,1024874.75\n1613398560,9839413.17,2.009000E+08,10044086.76,983941.32,2.009000E+07,1004408.68\n1613398570,10190636.08,3.028000E+08,10092931.54,1019063.61,3.028000E+07,1009293.15\n\nSummary:\nloaded 344804340 metrics in 34.066sec with 10 workers (mean rate 10121642.93 metrics/sec)\nloaded 34480434 rows in 34.066sec with 10 workers (mean rate 1012164.29 rows/sec)\n```\n\n----------------------------------------\n\nTITLE: Reading Parquet Metadata Synchronously\nDESCRIPTION: Demonstrates how to read Parquet file metadata using synchronous operations with parquet2::read::read_metadata.\nSOURCE: https://github.com/questdb/questdb/blob/master/core/rust/qdbr/parquet2/guide/src/README.md#2025-04-16_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet mut file = std::fs::File::open(\"test.parquet\")?;\nlet metadata = parquet2::read::read_metadata(&mut file)?;\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Table of QuestDB Contributors\nDESCRIPTION: This HTML snippet renders a table displaying QuestDB project contributors, their GitHub profiles, avatars, and contribution types. It uses inline styles for layout and includes emoji to represent different types of contributions.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.pt.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jaugsburger\"><img src=\"https://avatars.githubusercontent.com/u/10787042?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>jaugsburger</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=jaugsburger\" title=\"Code\">💻</a> <a href=\"#maintenance-jaugsburger\" title=\"Maintenance\">🚧</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.questdb.io\"><img src=\"https://avatars.githubusercontent.com/u/52114895?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>TheTanc</b></sub></a><br /><a href=\"#projectManagement-TheTanc\" title=\"Project Management\">📆</a> <a href=\"#content-TheTanc\" title=\"Content\">🖋</a> <a href=\"#ideas-TheTanc\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://davidgs.com\"><img src=\"https://avatars.githubusercontent.com/u/2071898?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>davidgs</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Adavidgs\" title=\"Bug reports\">🐛</a> <a href=\"#content-davidgs\" title=\"Content\">🖋</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://redalemeden.com\"><img src=\"https://avatars.githubusercontent.com/u/519433?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>kaishin</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=kaishin\" title=\"Code\">💻</a> <a href=\"#example-kaishin\" title=\"Examples\">💡</a></td>\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://questdb.io\"><img src=\"https://avatars.githubusercontent.com/u/7276403?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>bluestreak01</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=bluestreak01\" title=\"Code\">💻</a> <a href=\"#maintenance-bluestreak01\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/questdb/questdb/commits?author=bluestreak01\" title=\"Tests\">⚠️</a></td>\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: List of required Python packages including async libraries (async-timeout, asyncpg), date/time utilities (DateTime, pytz), YAML parsing (PyYAML), and interface definitions (zope.interface).\nSOURCE: https://github.com/questdb/questdb/blob/master/compat/src/test/python/requirements_asyncpg_latest.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasync-timeout\nasyncpg\nDateTime\npytz\nPyYAML\nzope.interface\n```\n\n----------------------------------------\n\nTITLE: QuestDB Line TCP Measurement Size Update\nDESCRIPTION: Updated configuration showing increased maximum measurement size setting for the Line TCP protocol.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/patrick.cpu.txt#2025-04-16_snippet_17\n\nLANGUAGE: config\nCODE:\n```\nline.tcp.max.measurement.size=2048\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies List\nDESCRIPTION: Lists required Python packages and their specific versions for the project. Includes packages for async operations, PostgreSQL support, datetime handling, timezone support, YAML processing, and Zope interfaces.\nSOURCE: https://github.com/questdb/questdb/blob/master/compat/src/test/python/requirements_asyncpg_stable.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nasync-timeout==4.0.3\nasyncpg==0.30.0\nDateTime==5.5\npytz==2024.2\nPyYAML==6.0.2\nzope.interface==7.0.3\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Contributors Table in HTML\nDESCRIPTION: This HTML snippet creates a table to display GitHub contributors. It includes avatar images, usernames, and contribution types for each contributor. The table is structured with rows and cells for a grid-like layout.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.pt.md#2025-04-16_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/bziobrowski\"><img src=\"https://avatars.githubusercontent.com/u/26925920?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>bziobrowski</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/commits?author=bziobrowski\" title=\"Code\">💻</a> <a href=\"#projectManagement-bziobrowski\" title=\"Project Management\">📆</a></td>\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Table in HTML\nDESCRIPTION: This HTML snippet renders a table of contributors to the QuestDB project. It includes their GitHub avatars, usernames, and contribution types using icons and links.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.es-es.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/tim2skew\"><img src=\"https://avatars.githubusercontent.com/u/54268285?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>tim2skew</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Atim2skew\" title=\"Bug reports\">🐛</a> <a href=\"#userTesting-tim2skew\" title=\"User Testing\">📓</a></td>\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker and TimescaleDB Resources\nDESCRIPTION: Stops and removes the TimescaleDB Docker container, cleans up Docker volumes, and disables the Docker service.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/timescale.txt#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker stop ${TIMESCALE_DOCKER_ID}\nsudo docker rm ${TIMESCALE_DOCKER_ID}\nsudo docker volume rm $(sudo docker volume ls -q)\nsudo docker ps\nsudo systemctl stop docker\nsudo systemctl disable docker\n```\n\n----------------------------------------\n\nTITLE: Setting QuestDB TCP Worker Count to 2\nDESCRIPTION: Configuration setting for QuestDB that specifies the number of worker threads for line TCP I/O operations.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\nline.tcp.io.worker.count=2\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: A requirements.txt style file listing the Python packages needed for the project. It includes DateTime for date/time operations, psycopg2-binary for PostgreSQL database connectivity, pytz for timezone support, PyYAML for YAML parsing, and zope.interface for interface definitions.\nSOURCE: https://github.com/questdb/questdb/blob/master/compat/src/test/python/requirements_psycopg2_latest.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDateTime\npsycopg2-binary\npytz\nPyYAML\nzope.interface\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Profiles in HTML\nDESCRIPTION: This HTML snippet creates a table layout to display contributor profiles. Each cell contains a contributor's GitHub avatar, username, and contribution types represented by emojis and links to their contributions.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.ja-ja.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ospqsp\"><img src=\"https://avatars.githubusercontent.com/u/84992434?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>ospqsp</b></sub></a><br /><a href=\"https://github.com/questdb/questdb/issues?q=author%3Aospqsp\" title=\"Bug reports\">🐛</a></td>\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Table in HTML\nDESCRIPTION: This HTML snippet creates a table to display contributor information including their GitHub profile, avatar, name, and contributions to the QuestDB project. It uses inline styles for layout and includes links to contributor profiles and contribution types.\nSOURCE: https://github.com/questdb/questdb/blob/master/i18n/README.hn-in.md#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.questdb.io\"><img src=\"https://avatars.githubusercontent.com/u/52114895?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>TheTanc</b></sub></a><br /><a href=\"#projectManagement-TheTanc\" title=\"Project Management\">📆</a> <a href=\"#content-TheTanc\" title=\"Content\">🖋</a> <a href=\"#ideas-TheTanc\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Installation and Benchmarking\nDESCRIPTION: Instructions for installing ClickHouse database, generating test data, and running performance benchmarks with the TSBS tool.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questdb-ec2.txt#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo rpm --import https://repo.clickhouse.tech/CLICKHOUSE-KEY.GPG\nsudo yum-config-manager --add-repo https://repo.clickhouse.tech/rpm/stable/x86_64\nsudo yum install clickhouse-server clickhouse-client\nsudo systemctl start clickhouse-server\n~/tmp/go/bin/tsbs_generate_data --use-case=\"cpu-only\" --seed=123 --scale=4000 --timestamp-start=\"2016-01-01T00:00:00Z\" --timestamp-end=\"2016-01-02T00:00:00Z\" --log-interval=\"10s\" --format=\"clickhouse\" > /tmp/bigcpu3\nsudo systemctl stop clickhouse-server\nrm -rf /var/lib/clickhouse/data/\nsudo systemctl start clickhouse-server\n~/tmp/go/bin/tsbs_load_clickhouse  --file /tmp/bigcpu3  --workers 10\n```\n\n----------------------------------------\n\nTITLE: Setting JAVA_HOME on Linux/OS X\nDESCRIPTION: Command to set the JAVA_HOME environment variable on Linux or OS X systems. This is required for Maven to function properly.\nSOURCE: https://github.com/questdb/questdb/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport JAVA_HOME=\"/path/to/java/\"\n```\n\n----------------------------------------\n\nTITLE: File Word Count in Unix Shell\nDESCRIPTION: Word count (wc) command that displays line count, word count, and byte count for a file named /tmp/bigcpu.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/amazon.txt#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwc /tmp/bigcpu\n```\n\n----------------------------------------\n\nTITLE: Viewing InfluxDB Data Directory\nDESCRIPTION: Command to list files in the InfluxDB data directory with human-readable file sizes and sorted by modification time.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/influxdb.txt#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nls -latrh /var/lib/influxdb/data/\n```\n\n----------------------------------------\n\nTITLE: Accessing InfluxDB CLI\nDESCRIPTION: Command to launch the InfluxDB command-line interface for database interaction.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/influxdb.txt#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninflux\n```\n\n----------------------------------------\n\nTITLE: QuestDB TCP Line Protocol Configuration\nDESCRIPTION: Configuration settings for QuestDB's TCP Line Protocol, including worker counts, thread affinity, buffer sizes, network binding, and queue capacity. These settings control how QuestDB handles incoming data over its Line Protocol interface.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nshared.worker.count=1\nshared.worker.affinity=1\nline.tcp.msg.buffer.size=32768\nline.tcp.max.uncommitted.rows=10000000\n#line.tcp.net.bind.to=10.0.0.1:9009\nline.tcp.net.bind.to=127.0.0.1:9009\n#line.tcp.auth.db.path=conf/authDb.txt\nline.tcp.writer.worker.count=1\nline.tcp.writer.worker.affinity=3\n#line.tcp.writer.halt.on.error=true\nline.tcp.io.worker.count=4\nline.tcp.io.worker.affinity=5,7,9,11\n#line.tcp.io.halt.on.error=true\n#line.tcp.io.aggressive.recv=true\nline.tcp.maintenance.job.hysteresis.in.ms=300000\nline.tcp.net.io.queue.capacity=256\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: A requirements.txt file listing Python packages needed for the project. It includes DateTime for date/time manipulation, psycopg for PostgreSQL connectivity, pytz for timezone support, PyYAML for YAML parsing, typing_extensions for enhanced typing features, and zope.interface for interface definitions.\nSOURCE: https://github.com/questdb/questdb/blob/master/compat/src/test/python/requirements_psycopg3_latest.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDateTime\npsycopg\npytz\nPyYAML\ntyping_extensions\nzope.interface\n```\n\n----------------------------------------\n\nTITLE: File Modification Commands\nDESCRIPTION: Bash commands to copy a file and modify it using sed, removing specific pattern matches and cleanup of backup files\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/ilp_perf/questbook.cpu.txt#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncp /tmp/bigcpu /tmp/bigcpu2\nsed -i.bak -E 's/i 14.+/i/' /tmp/bigcpu2\nrm /tmp/bigcpu2.bak\n```\n\n----------------------------------------\n\nTITLE: Loading TSBS Benchmark Data into InfluxDB\nDESCRIPTION: Command to load the generated benchmark data into InfluxDB using 4 worker threads.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/influxdb.txt#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n~/tmp/go/bin/tsbs_load_influx --file /tmp/bigcpu --workers 4\n```\n\n----------------------------------------\n\nTITLE: Checking InfluxDB Package Files\nDESCRIPTION: Command to list all files installed by the InfluxDB package to verify installation.\nSOURCE: https://github.com/questdb/questdb/blob/master/artifacts/tsbs/load/influxdb.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrpm -ql influxdb-1.8.4-1.x86_64\n```"
  }
]