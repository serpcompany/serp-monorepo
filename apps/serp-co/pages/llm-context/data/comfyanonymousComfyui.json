[
  {
    "owner": "comfyanonymous",
    "repo": "comfyui",
    "content": "TITLE: Installing ComfyUI via comfy-cli\nDESCRIPTION: Commands to install and start ComfyUI using the comfy-cli package manager, which simplifies the installation process.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install comfy-cli\ncomfy install\n```\n\n----------------------------------------\n\nTITLE: Setting up ComfyUI Environment\nDESCRIPTION: Initializes the ComfyUI environment by cloning the repository and installing dependencies. Includes options for Google Drive integration and ComfyUI updates. Uses pip to install required packages with specific CUDA versions.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/notebooks/comfyui_colab.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#@title Environment Setup\n\nOPTIONS = {}\n\nUSE_GOOGLE_DRIVE = False  #@param {type:\"boolean\"}\nUPDATE_COMFY_UI = True  #@param {type:\"boolean\"}\nWORKSPACE = 'ComfyUI'\nOPTIONS['USE_GOOGLE_DRIVE'] = USE_GOOGLE_DRIVE\nOPTIONS['UPDATE_COMFY_UI'] = UPDATE_COMFY_UI\n\nif OPTIONS['USE_GOOGLE_DRIVE']:\n    !echo \"Mounting Google Drive...\"\n    %cd /\n    \n    from google.colab import drive\n    drive.mount('/content/drive')\n\n    WORKSPACE = \"/content/drive/MyDrive/ComfyUI\"\n    %cd /content/drive/MyDrive\n\n![ ! -d $WORKSPACE ] && echo -= Initial setup ComfyUI =- && git clone https://github.com/comfyanonymous/ComfyUI\n%cd $WORKSPACE\n\nif OPTIONS['UPDATE_COMFY_UI']:\n  !echo -= Updating ComfyUI =-\n  !git pull\n\n!echo -= Install dependencies =-\n!pip install xformers!=0.0.18 -r requirements.txt --extra-index-url https://download.pytorch.org/whl/cu121 --extra-index-url https://download.pytorch.org/whl/cu118 --extra-index-url https://download.pytorch.org/whl/cu117\n```\n\n----------------------------------------\n\nTITLE: Installing ComfyUI Dependencies\nDESCRIPTION: Command to install all required dependencies for ComfyUI from the requirements.txt file.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Launching ComfyUI with Basic Configuration\nDESCRIPTION: Simple command to start ComfyUI with default settings.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython main.py\n```\n\n----------------------------------------\n\nTITLE: Downloading AI Models and Checkpoints\nDESCRIPTION: Script for downloading various AI models including Stable Diffusion checkpoints, VAE models, LoRA models, ControlNet models, and upscaling models. Contains commented-out wget commands for optional downloads from different sources.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/notebooks/comfyui_colab.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Checkpoints\n\n### SDXL\n### I recommend these workflow examples: https://comfyanonymous.github.io/ComfyUI_examples/sdxl/\n\n#!wget -c https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0/resolve/main/sd_xl_base_1.0.safetensors -P ./models/checkpoints/\n#!wget -c https://huggingface.co/stabilityai/stable-diffusion-xl-refiner-1.0/resolve/main/sd_xl_refiner_1.0.safetensors -P ./models/checkpoints/\n\n# SDXL ReVision\n#!wget -c https://huggingface.co/comfyanonymous/clip_vision_g/resolve/main/clip_vision_g.safetensors -P ./models/clip_vision/\n\n# SD1.5\n!wget -c https://huggingface.co/Comfy-Org/stable-diffusion-v1-5-archive/resolve/main/v1-5-pruned-emaonly-fp16.safetensors -P ./models/checkpoints/\n\n# SD2\n#!wget -c https://huggingface.co/stabilityai/stable-diffusion-2-1-base/resolve/main/v2-1_512-ema-pruned.safetensors -P ./models/checkpoints/\n#!wget -c https://huggingface.co/stabilityai/stable-diffusion-2-1/resolve/main/v2-1_768-ema-pruned.safetensors -P ./models/checkpoints/\n\n# Some SD1.5 anime style\n#!wget -c https://huggingface.co/WarriorMama777/OrangeMixs/resolve/main/Models/AbyssOrangeMix2/AbyssOrangeMix2_hard.safetensors -P ./models/checkpoints/\n#!wget -c https://huggingface.co/WarriorMama777/OrangeMixs/resolve/main/Models/AbyssOrangeMix3/AOM3A1_orangemixs.safetensors -P ./models/checkpoints/\n#!wget -c https://huggingface.co/WarriorMama777/OrangeMixs/resolve/main/Models/AbyssOrangeMix3/AOM3A3_orangemixs.safetensors -P ./models/checkpoints/\n#!wget -c https://huggingface.co/Linaqruf/anything-v3.0/resolve/main/anything-v3-fp16-pruned.safetensors -P ./models/checkpoints/\n\n# Waifu Diffusion 1.5 (anime style SD2.x 768-v)\n#!wget -c https://huggingface.co/waifu-diffusion/wd-1-5-beta3/resolve/main/wd-illusion-fp16.safetensors -P ./models/checkpoints/\n\n\n# unCLIP models\n#!wget -c https://huggingface.co/comfyanonymous/illuminatiDiffusionV1_v11_unCLIP/resolve/main/illuminatiDiffusionV1_v11-unclip-h-fp16.safetensors -P ./models/checkpoints/\n#!wget -c https://huggingface.co/comfyanonymous/wd-1.5-beta2_unCLIP/resolve/main/wd-1-5-beta2-aesthetic-unclip-h-fp16.safetensors -P ./models/checkpoints/\n\n\n# VAE\n!wget -c https://huggingface.co/stabilityai/sd-vae-ft-mse-original/resolve/main/vae-ft-mse-840000-ema-pruned.safetensors -P ./models/vae/\n#!wget -c https://huggingface.co/WarriorMama777/OrangeMixs/resolve/main/VAEs/orangemix.vae.pt -P ./models/vae/\n#!wget -c https://huggingface.co/hakurei/waifu-diffusion-v1-4/resolve/main/vae/kl-f8-anime2.ckpt -P ./models/vae/\n\n\n# Loras\n#!wget -c https://civitai.com/api/download/models/10350 -O ./models/loras/theovercomer8sContrastFix_sd21768.safetensors #theovercomer8sContrastFix SD2.x 768-v\n#!wget -c https://civitai.com/api/download/models/10638 -O ./models/loras/theovercomer8sContrastFix_sd15.safetensors #theovercomer8sContrastFix SD1.x\n#!wget -c https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0/resolve/main/sd_xl_offset_example-lora_1.0.safetensors -P ./models/loras/ #SDXL offset noise lora\n\n\n# T2I-Adapter\n#!wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_depth_sd14v1.pth -P ./models/controlnet/\n#!wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_seg_sd14v1.pth -P ./models/controlnet/\n#!wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_sketch_sd14v1.pth -P ./models/controlnet/\n#!wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_keypose_sd14v1.pth -P ./models/controlnet/\n#!wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_openpose_sd14v1.pth -P ./models/controlnet/\n#!wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_color_sd14v1.pth -P ./models/controlnet/\n#!wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_canny_sd14v1.pth -P ./models/controlnet/\n\n# T2I Styles Model\n#!wget -c https://huggingface.co/TencentARC/T2I-Adapter/resolve/main/models/t2iadapter_style_sd14v1.pth -P ./models/style_models/\n\n# CLIPVision model (needed for styles model)\n#!wget -c https://huggingface.co/openai/clip-vit-large-patch14/resolve/main/pytorch_model.bin -O ./models/clip_vision/clip_vit14.bin\n\n\n# ControlNet\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11e_sd15_ip2p_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11e_sd15_shuffle_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_canny_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11f1p_sd15_depth_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_inpaint_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_lineart_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_mlsd_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_normalbae_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_openpose_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_scribble_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_seg_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15_softedge_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11p_sd15s2_lineart_anime_fp16.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/comfyanonymous/ControlNet-v1-1_fp16_safetensors/resolve/main/control_v11u_sd15_tile_fp16.safetensors -P ./models/controlnet/\n\n# ControlNet SDXL\n#!wget -c https://huggingface.co/stabilityai/control-lora/resolve/main/control-LoRAs-rank256/control-lora-canny-rank256.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/stabilityai/control-lora/resolve/main/control-LoRAs-rank256/control-lora-depth-rank256.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/stabilityai/control-lora/resolve/main/control-LoRAs-rank256/control-lora-recolor-rank256.safetensors -P ./models/controlnet/\n#!wget -c https://huggingface.co/stabilityai/control-lora/resolve/main/control-LoRAs-rank256/control-lora-sketch-rank256.safetensors -P ./models/controlnet/\n\n# Controlnet Preprocessor nodes by Fannovel16\n#!cd custom_nodes && git clone https://github.com/Fannovel16/comfy_controlnet_preprocessors; cd comfy_controlnet_preprocessors && python install.py\n\n\n# GLIGEN\n#!wget -c https://huggingface.co/comfyanonymous/GLIGEN_pruned_safetensors/resolve/main/gligen_sd14_textbox_pruned_fp16.safetensors -P ./models/gligen/\n\n\n# ESRGAN upscale model\n#!wget -c https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth -P ./models/upscale_models/\n#!wget -c https://huggingface.co/sberbank-ai/Real-ESRGAN/resolve/main/RealESRGAN_x2.pth -P ./models/upscale_models/\n#!wget -c https://huggingface.co/sberbank-ai/Real-ESRGAN/resolve/main/RealESRGAN_x4.pth -P ./models/upscale_models/\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch for NVIDIA GPUs\nDESCRIPTION: Commands to install PyTorch for NVIDIA GPUs, including stable and nightly versions, with the nightly build supporting new Blackwell 50xx series GPUs.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu126\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu128\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch for AMD GPUs on Linux\nDESCRIPTION: Commands to install PyTorch with ROCm support for AMD GPUs, including both stable and nightly build options.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/rocm6.2.4\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/rocm6.3\n```\n\n----------------------------------------\n\nTITLE: Running ComfyUI with Cloudflared Remote Access\nDESCRIPTION: Sets up remote access to ComfyUI using cloudflared tunnel. Downloads and installs cloudflared, then creates a tunnel to expose the local ComfyUI server on port 8188 through a public URL.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/notebooks/comfyui_colab.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n!wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb\n!dpkg -i cloudflared-linux-amd64.deb\n\nimport subprocess\nimport threading\nimport time\nimport socket\nimport urllib.request\n\ndef iframe_thread(port):\n  while True:\n      time.sleep(0.5)\n      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      result = sock.connect_ex(('127.0.0.1', port))\n      if result == 0:\n        break\n      sock.close()\n  print(\"\\nComfyUI finished loading, trying to launch cloudflared (if it gets stuck here cloudflared is having issues)\\n\")\n\n  p = subprocess.Popen([\"cloudflared\", \"tunnel\", \"--url\", \"http://127.0.0.1:{}\".format(port)], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n  for line in p.stderr:\n    l = line.decode()\n    if \"trycloudflare.com \" in l:\n      print(\"This is the URL to access ComfyUI:\", l[l.find(\"http\"):], end='')\n\n\nthreading.Thread(target=iframe_thread, daemon=True, args=(8188,)).start()\n\n!python main.py --dont-print-server\n```\n\n----------------------------------------\n\nTITLE: Running ComfyUI with Localtunnel Remote Access\nDESCRIPTION: Implements remote access to ComfyUI using localtunnel. Installs localtunnel via npm and creates a tunnel to expose the local ComfyUI server on port 8188, providing both a public URL and the server's IP address.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/notebooks/comfyui_colab.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n!npm install -g localtunnel\n\nimport threading\n\ndef iframe_thread(port):\n  while True:\n      time.sleep(0.5)\n      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      result = sock.connect_ex(('127.0.0.1', port))\n      if result == 0:\n        break\n      sock.close()\n  print(\"\\nComfyUI finished loading, trying to launch localtunnel (if it gets stuck here localtunnel is having issues)\\n\")\n\n  print(\"The password/enpoint ip for localtunnel is:\", urllib.request.urlopen('https://ipv4.icanhazip.com').read().decode('utf8').strip(\"\\n\"))\n  p = subprocess.Popen([\"lt\", \"--port\", \"{}\".format(port)], stdout=subprocess.PIPE)\n  for line in p.stdout:\n    print(line.decode(), end='')\n\n\nthreading.Thread(target=iframe_thread, daemon=True, args=(8188,)).start()\n\n!python main.py --dont-print-server\n```\n\n----------------------------------------\n\nTITLE: Listing Essential Dependencies for ComfyUI\nDESCRIPTION: This snippet lists the essential Python packages required for the ComfyUI project. It includes packages for machine learning, data processing, and web services.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncomfyui-frontend-package==1.15.13\ntorch\ntorchsde\ntorchvision\ntorchaudio\nnumpy>=1.25.0\neinops\ntransformers>=4.28.1\ntokenizers>=0.13.3\nsentencepiece\nsafetensors>=0.4.2\naiohttp>=3.11.8\nyarl>=1.18.0\npyyaml\nPillow\nscipy\ntqdm\npsutil\n```\n\n----------------------------------------\n\nTITLE: Installing DirectML for AMD Cards on Windows\nDESCRIPTION: Command for installing the DirectML package for AMD GPU support on Windows, followed by the command to launch ComfyUI with DirectML support.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install torch-directml\n```\n\n----------------------------------------\n\nTITLE: Running ComfyUI on AMD Cards Not Officially Supported by ROCm\nDESCRIPTION: Commands to run ComfyUI on AMD RDNA2 (6700, 6600) or RDNA3 (7600) GPUs that aren't officially supported by ROCm, using HSA override for graphics version.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nHSA_OVERRIDE_GFX_VERSION=10.3.0 python main.py\n```\n\nLANGUAGE: bash\nCODE:\n```\nHSA_OVERRIDE_GFX_VERSION=11.0.0 python main.py\n```\n\n----------------------------------------\n\nTITLE: Installing PyTorch for Intel GPUs with Native XPU Support\nDESCRIPTION: Command to install PyTorch nightly build with native torch.xpu support for Intel Arc GPUs, followed by instructions to launch ComfyUI.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install --pre torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/xpu\n```\n\n----------------------------------------\n\nTITLE: Installing Intel Extension for PyTorch (IPEX) for Intel GPUs\nDESCRIPTION: Commands to set up a conda environment with Intel Extension for PyTorch (IPEX) for improved performance on Intel Arc A-Series Graphics.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconda install libuv\npip install torch==2.3.1.post0+cxx11.abi torchvision==0.18.1.post0+cxx11.abi torchaudio==2.3.1.post0+cxx11.abi intel-extension-for-pytorch==2.3.110.post0+xpu --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/us/ --extra-index-url https://pytorch-extension.intel.com/release-whl/stable/xpu/cn/\n```\n\n----------------------------------------\n\nTITLE: Running ComfyUI with Google Colab Iframe\nDESCRIPTION: Provides a fallback method for accessing ComfyUI through Google Colab's iframe functionality. Creates both an embedded iframe view and a separate window option, though with limited functionality due to websocket restrictions.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/notebooks/comfyui_colab.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport threading\ndef iframe_thread(port):\n  while True:\n      time.sleep(0.5)\n      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n      result = sock.connect_ex(('127.0.0.1', port))\n      if result == 0:\n        break\n      sock.close()\n  from google.colab import output\n  output.serve_kernel_port_as_iframe(port, height=1024)\n  print(\"to open it in a window you can open this link here:\")\n  output.serve_kernel_port_as_window(port)\n\nthreading.Thread(target=iframe_thread, daemon=True, args=(8188,)).start()\n\n!python main.py --dont-print-server\n```\n\n----------------------------------------\n\nTITLE: Using the Latest Frontend Version in ComfyUI\nDESCRIPTION: Command line arguments to launch ComfyUI with specific frontend versions, including the latest daily release or a specific version number.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n--front-end-version Comfy-Org/ComfyUI_frontend@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n--front-end-version Comfy-Org/ComfyUI_frontend@1.2.2\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Memory Efficient Attention on AMD ROCm\nDESCRIPTION: Command to enable experimental memory efficient attention on PyTorch 2.5 with AMD RDNA3 GPUs, using the TORCH_ROCM_AOTRITON_ENABLE_EXPERIMENTAL environment variable.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nTORCH_ROCM_AOTRITON_ENABLE_EXPERIMENTAL=1 python main.py --use-pytorch-cross-attention\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed SSL Certificate for ComfyUI\nDESCRIPTION: OpenSSL command to generate a self-signed certificate and key for enabling TLS/SSL in ComfyUI, allowing secure HTTPS connections.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 3650 -nodes -subj \"/C=XX/ST=StateName/L=CityName/O=CompanyName/OU=CompanySectionName/CN=CommonNameOrHostname\"\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies for ComfyUI\nDESCRIPTION: Installs the required Python packages for running tests in the ComfyUI project. This includes pytest for test execution, websocket-client for communication, and image processing libraries.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/tests/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest\npip install websocket-client==1.6.1\nopencv-python==4.6.0.66\nscikit-image==0.21.0\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies for ComfyUI\nDESCRIPTION: Command to install the required dependencies for running unit tests from the requirements file located in the tests-unit directory.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/tests-unit/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r tests-unit/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Uninstalling PyTorch for Troubleshooting\nDESCRIPTION: Command to uninstall PyTorch when encountering the \"Torch not compiled with CUDA enabled\" error before reinstalling it.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip uninstall torch\n```\n\n----------------------------------------\n\nTITLE: Running Inference Tests for ComfyUI\nDESCRIPTION: Executes the inference tests located in the tests/inference directory using pytest. This command is used to validate the inference functionality of ComfyUI.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/tests/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/inference\n```\n\n----------------------------------------\n\nTITLE: Running pytest Unit Tests for ComfyUI\nDESCRIPTION: Command to execute the pytest test suite located in the tests-unit directory, which will run all the unit tests for the ComfyUI project.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/tests-unit/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest tests-unit/\n```\n\n----------------------------------------\n\nTITLE: Accessing the Legacy Frontend in ComfyUI\nDESCRIPTION: Command line argument to use the legacy frontend from the ComfyUI Legacy Frontend repository.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/README.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n--front-end-version Comfy-Org/ComfyUI_legacy_frontend@latest\n```\n\n----------------------------------------\n\nTITLE: Generating Baseline Images for ComfyUI Quality Tests\nDESCRIPTION: Runs inference tests and saves the output images as a baseline for quality comparison. These images serve as the 'ground truth' for future quality regression tests.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/tests/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/inference --output_dir tests/inference/baseline\n```\n\n----------------------------------------\n\nTITLE: Running All Tests Including Quality Comparison for ComfyUI\nDESCRIPTION: Executes all tests, including inference tests and quality comparison tests. This command is used after making code changes to ensure that the output quality has not regressed compared to the baseline images.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/tests/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Importing ComfyUI Types in Python\nDESCRIPTION: Demonstrates how to import type hinting classes from the Comfy Typing module when it's cloned to the custom_nodes directory of ComfyUI.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/comfy/comfy_types/README.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom comfy.comfy_types import IO, ComfyNodeABC, CheckLazyMixin\n\nclass ExampleNode(ComfyNodeABC):\n    @classmethod\n    def INPUT_TYPES(s) -> InputTypeDict:\n        return {\"required\": {}}\n```\n\n----------------------------------------\n\nTITLE: Listing Non-Essential Dependencies for ComfyUI\nDESCRIPTION: This snippet lists additional, non-essential Python packages that may be used in the ComfyUI project. These packages provide extra functionality but are not required for core operations.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/requirements.txt#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n#non essential dependencies:\nkornia>=0.7.1\nspandrel\nsoundfile\nav\n```\n\n----------------------------------------\n\nTITLE: Testing Dependencies Configuration in requirements.txt\nDESCRIPTION: Specifies the required testing libraries and their versions for running the ComfyUI test suite. Includes pytest core package with minimum version 7.8.0, plus pytest extensions for handling async HTTP and general async functionality.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/tests-unit/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest>=7.8.0\npytest-aiohttp\npytest-asyncio\n```\n\n----------------------------------------\n\nTITLE: Markdown Header - Internal Routes Path Definition\nDESCRIPTION: Markdown heading defining the internal routes path prefix and warning about internal usage only.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/api_server/routes/internal/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ComfyUI Internal Routes\n```\n\n----------------------------------------\n\nTITLE: Special Token List\nDESCRIPTION: A comprehensive list of special tokens including padding token [PAD], unused tokens [unused1-99], and special markers like [UNK], [CLS], [SEP], [MASK], <S>, <T> and punctuation marks.\nSOURCE: https://github.com/comfyanonymous/ComfyUI/blob/master/comfy/text_encoders/hydit_clip_tokenizer/vocab.txt#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[PAD]\n[unused1]\n[unused2]\n[unused3]\n[unused4]\n[unused5]\n[unused6]\n[unused7]\n[unused8]\n[unused9]\n[unused10]\n[unused11]\n[unused12]\n[unused13]\n[unused14]\n[unused15]\n[unused16]\n[unused17]\n[unused18]\n[unused19]\n[unused20]\n[unused21]\n[unused22]\n[unused23]\n[unused24]\n[unused25]\n[unused26]\n[unused27]\n[unused28]\n[unused29]\n[unused30]\n[unused31]\n[unused32]\n[unused33]\n[unused34]\n[unused35]\n[unused36]\n[unused37]\n[unused38]\n[unused39]\n[unused40]\n[unused41]\n[unused42]\n[unused43]\n[unused44]\n[unused45]\n[unused46]\n[unused47]\n[unused48]\n[unused49]\n[unused50]\n[unused51]\n[unused52]\n[unused53]\n[unused54]\n[unused55]\n[unused56]\n[unused57]\n[unused58]\n[unused59]\n[unused60]\n[unused61]\n[unused62]\n[unused63]\n[unused64]\n[unused65]\n[unused66]\n[unused67]\n[unused68]\n[unused69]\n[unused70]\n[unused71]\n[unused72]\n[unused73]\n[unused74]\n[unused75]\n[unused76]\n[unused77]\n[unused78]\n[unused79]\n[unused80]\n[unused81]\n[unused82]\n[unused83]\n[unused84]\n[unused85]\n[unused86]\n[unused87]\n[unused88]\n[unused89]\n[unused90]\n[unused91]\n[unused92]\n[unused93]\n[unused94]\n[unused95]\n[unused96]\n[unused97]\n[unused98]\n[unused99]\n[UNK]\n[CLS]\n[SEP]\n[MASK]\n<S>\n<T>\n!\n\"\n```"
  }
]