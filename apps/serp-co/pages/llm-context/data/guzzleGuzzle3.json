[
  {
    "owner": "guzzle",
    "repo": "guzzle3",
    "content": "TITLE: Sending Requests with Guzzle Client in PHP\nDESCRIPTION: Shows how to send individual requests and multiple requests in parallel using a Guzzle client.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/client.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->get('http://www.amazon.com');\n$response = $client->send($request);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Guzzle HTTP Client in PHP\nDESCRIPTION: Demonstrates how to create a Guzzle HTTP client with a base URL, make a GET request, and process the response. This example shows authentication, URL merging, and response handling including JSON parsing.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/client.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\n\n// Create a client and provide a base URL\n$client = new Client('https://api.github.com');\n\n$request = $client->get('/user');\n$request->setAuth('user', 'pass');\necho $request->getUrl();\n// >>> https://api.github.com/user\n\n// You must send a request in order for the transfer to occur\n$response = $request->send();\n\necho $response->getBody();\n// >>> {\"type\":\"User\", ...\n\necho $response->getHeader('Content-Length');\n// >>> 792\n\n$data = $response->json();\necho $data['type'];\n// >>> User\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Authentication with Guzzle for Twitter API\nDESCRIPTION: Demonstrates how to create an authenticated HTTP client using Guzzle's OAuth plugin to access Twitter's REST API. The example shows configuration of OAuth credentials including consumer key/secret and token/secret, and making an authenticated GET request.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/oauth-plugin.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\nuse Guzzle\\Plugin\\Oauth\\OauthPlugin;\n\n$client = new Client('http://api.twitter.com/1');\n$oauth = new OauthPlugin(array(\n    'consumer_key'    => 'my_key',\n    'consumer_secret' => 'my_secret',\n    'token'           => 'my_token',\n    'token_secret'    => 'my_token_secret'\n));\n$client->addSubscriber($oauth);\n\n$response = $client->get('statuses/public_timeline.json')->send();\n```\n\n----------------------------------------\n\nTITLE: Creating Various HTTP Requests with Guzzle Client in PHP\nDESCRIPTION: Demonstrates creating different types of HTTP requests (GET, HEAD, DELETE, PUT) using a Guzzle client. Shows how to use relative URLs, absolute paths, absolute URLs, and how to include custom headers.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/client.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\n\n$client = new Client('http://baseurl.com/api/v1');\n\n// Create a GET request using Relative to base URL\n// URL of the request: http://baseurl.com/api/v1/path?query=123&value=abc)\n$request = $client->get('path?query=123&value=abc');\n$response = $request->send();\n\n// Create HEAD request using a relative URL with an absolute path\n// URL of the request: http://baseurl.com/path?query=123&value=abc\n$request = $client->head('/path?query=123&value=abc');\n$response = $request->send();\n\n// Create a DELETE request using an absolute URL\n$request = $client->delete('http://www.example.com/path?query=123&value=abc');\n$response = $request->send();\n\n// Create a PUT request using the contents of a PHP stream as the body\n// Specify custom HTTP headers\n$request = $client->put('http://www.example.com/upload', array(\n    'X-Header' => 'My Header'\n```\n\n----------------------------------------\n\nTITLE: Creating GET Requests with Custom Headers in Guzzle 3\nDESCRIPTION: Creates a GET request with query parameters and custom headers using the Guzzle HTTP client. The example shows how to instantiate a client, create a request with headers, and send it to receive a response.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\n\n$client = new Client();\n\n// Create a request that has a query string and an X-Foo header\n$request = $client->get('http://www.amazon.com?a=1', array('X-Foo' => 'Bar'));\n\n// Send the request and get the response\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Options for Guzzle Client in PHP\nDESCRIPTION: Shows how to configure a Guzzle client with various options including URI template variables, default headers, query parameters, authentication, and proxy settings. Demonstrates variable injection into the base URL.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/client.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\n\n$client = new Client('https://api.twitter.com/{version}', array(\n    'version'        => 'v1.1',\n    'request.options' => array(\n        'headers' => array('Foo' => 'Bar'),\n        'query'   => array('testing' => '123'),\n        'auth'    => array('username', 'password', 'Basic|Digest|NTLM|Any'),\n        'proxy'   => 'tcp://localhost:80'\n    )\n));\n```\n\n----------------------------------------\n\nTITLE: Executing Parallel HTTP Requests with Guzzle 3\nDESCRIPTION: Demonstrates sending multiple HTTP requests in parallel using Guzzle's client object. Includes error handling for failed requests using MultiTransferException.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/client.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Common\\Exception\\MultiTransferException;\n\ntry {\n    $responses = $client->send(array(\n        $client->get('http://www.google.com/'),\n        $client->head('http://www.google.com/'),\n        $client->get('https://www.github.com/')\n    ));\n} catch (MultiTransferException $e) {\n\n    echo \"The following exceptions were encountered:\\n\";\n    foreach ($e as $exception) {\n        echo $exception->getMessage() . \"\\n\";\n    }\n\n    echo \"The following requests failed:\\n\";\n    foreach ($e->getFailedRequests() as $request) {\n        echo $request . \"\\n\\n\";\n    }\n\n    echo \"The following requests succeeded:\\n\";\n    foreach ($e->getSuccessfulRequests() as $request) {\n        echo $request . \"\\n\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async HTTP Requests with Guzzle3 AsyncPlugin in PHP\nDESCRIPTION: Demonstrates how to set up and use the AsyncPlugin with a Guzzle HTTP client to make asynchronous requests. The plugin is added as a subscriber to the client, allowing requests to be sent without waiting for the response.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/async-plugin.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\nuse Guzzle\\Plugin\\Async\\AsyncPlugin;\n\n$client = new Client('http://www.example.com');\n$client->addSubscriber(new AsyncPlugin());\n$response = $client->get()->send();\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Service Description for a RESTful API in Guzzle3\nDESCRIPTION: A complete example of a Guzzle3 service description that implements a simple web service with GET, POST, and DELETE operations for users. It defines operations, parameters, and response models for each endpoint.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/guzzle-service-descriptions.rst#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Foo\",\n    \"apiVersion\": \"2012-10-14\",\n    \"baseUrl\": \"http://api.foo.com\",\n    \"description\": \"Foo is an API that allows you to Baz Bar\",\n    \"operations\": {\n        \"GetUsers\": {\n            \"httpMethod\": \"GET\",\n            \"uri\": \"/users\",\n            \"summary\": \"Gets a list of users\",\n            \"responseClass\": \"GetUsersOutput\"\n        },\n        \"CreateUser\": {\n            \"httpMethod\": \"POST\",\n            \"uri\": \"/users\",\n            \"summary\": \"Creates a new user\",\n            \"responseClass\": \"CreateUserOutput\",\n            \"parameters\": {\n                \"name\": {\n                    \"location\": \"json\",\n                    \"type\": \"string\"\n                },\n                \"age\": {\n                    \"location\": \"json\",\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"GetUser\": {\n            \"httpMethod\": \"GET\",\n            \"uri\": \"/users/{id}\",\n            \"summary\": \"Retrieves a single user\",\n            \"responseClass\": \"GetUserOutput\",\n            \"parameters\": {\n                \"id\": {\n                    \"location\": \"uri\",\n                    \"description\": \"User to retrieve by ID\",\n                    \"required\": true\n                }\n            }\n        },\n        \"DeleteUser\": {\n            \"httpMethod\": \"DELETE\",\n            \"uri\": \"/users/{id}\",\n            \"summary\": \"Deletes a user\",\n            \"responseClass\": \"DeleteUserOutput\",\n            \"parameters\": {\n                \"id\": {\n                    \"location\": \"uri\",\n                    \"description\": \"User to delete by ID\",\n                    \"required\": true\n                }\n            }\n        }\n    },\n    \"models\": {\n        \"GetUsersOutput\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"location\": \"json\",\n                        \"type\": \"string\"\n                    },\n                    \"age\": {\n                        \"location\": \"json\",\n                        \"type\": \"integer\"\n                    }\n                }\n            }\n        },\n        \"CreateUserOutput\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"location\": \"json\",\n                    \"type\": \"string\"\n                },\n                \"location\": {\n                    \"location\": \"header\",\n                    \"sentAs\": \"Location\",\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"GetUserOutput\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"name\": {\n                    \"location\": \"json\",\n                    \"type\": \"string\"\n                },\n                \"age\": {\n                    \"location\": \"json\",\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"DeleteUserOutput\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"status\": {\n                    \"location\": \"statusCode\",\n                    \"type\": \"integer\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with POST Fields and Files in Guzzle 3\nDESCRIPTION: Shows how to add, modify, and remove POST fields and files in Guzzle requests, which can be used with POST, PUT, PATCH, and DELETE requests.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->post('/post');\n// Set an overwrite any previously specified value\n$request->setPostField('foo', 'bar');\n// Append a value to any existing values\n$request->getPostFields()->add('foo', 'baz');\n// Remove a POST field by name\n$request->removePostField('fizz');\n\n// Add a file to upload (forces multipart/form-data)\n$request->addPostFile('my_file', '/path/to/file', 'plain/text');\n// Remove a POST file by POST key name\n$request->removePostFile('my_other_file');\n```\n\n----------------------------------------\n\nTITLE: Creating HEAD Requests in Guzzle 3\nDESCRIPTION: Shows how to create and send a HEAD request to retrieve meta information about a resource without downloading the actual content. The example demonstrates accessing response header information.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$client = new Guzzle\\Http\\Client();\n$request = $client->head('http://www.amazon.com');\n$response = $request->send();\necho $response->getContentLength();\n// >>> Will output the Content-Length header value\n```\n\n----------------------------------------\n\nTITLE: Implementing Twitter Client Class - PHP\nDESCRIPTION: Shows full implementation of a Twitter client class extending Guzzle's Client class with OAuth integration.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace mtdowling;\n\nuse Guzzle\\Common\\Collection;\nuse Guzzle\\Plugin\\Oauth\\OauthPlugin;\nuse Guzzle\\Service\\Client;\nuse Guzzle\\Service\\Description\\ServiceDescription;\n\n/**\n * A simple Twitter API client\n */\nclass TwitterClient extends Client\n{\n    public static function factory($config = array())\n    {\n        // Provide a hash of default client configuration options\n        $default = array('base_url' => 'https://api.twitter.com/1.1');\n\n        // The following values are required when creating the client\n        $required = array(\n            'base_url',\n            'consumer_key',\n            'consumer_secret',\n            'token',\n            'token_secret'\n        );\n\n        // Merge in default settings and validate the config\n        $config = Collection::fromConfig($config, $default, $required);\n\n        // Create a new Twitter client\n        $client = new self($config->get('base_url'), $config);\n\n        // Ensure that the OauthPlugin is attached to the client\n        $client->addSubscriber(new OauthPlugin($config->toArray()));\n\n        return $client;\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating OPTIONS Requests in Guzzle 3\nDESCRIPTION: Shows how to send an OPTIONS request to discover available communication options for a resource. The example demonstrates checking if a specific HTTP method is allowed based on the response.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->options('http://httpbin.org');\n$response = $request->send();\n\n// Check if the PUT method is supported by this resource\nvar_export($response->isMethodAllows('PUT'));\n```\n\n----------------------------------------\n\nTITLE: Creating Multipart POST Requests with Files in Guzzle 3\nDESCRIPTION: Shows how to create a POST request with both form fields and file uploads. The example demonstrates how to use the @ symbol prefix for file paths to create multipart/form-data requests.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->post('http://httpbin.org/post', array(), array(\n    'custom_field' => 'my custom value',\n    'file_field'   => '@/path/to/file.xml'\n));\n\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Guzzle in PHP\nDESCRIPTION: Demonstrates two methods of making HTTP requests with Guzzle: using the static facade and using a client class instance. Shows basic GET request implementation with both approaches.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/getting-started/overview.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Really simple using a static facade\nGuzzle\\Http\\StaticClient::mount();\n$response = Guzzle::get('http://guzzlephp.org');\n\n// More control using a client class\n$client = new \\Guzzle\\Http\\Client('http://guzzlephp.org');\n$request = $client->get('/');\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: Creating PATCH Requests in Guzzle 3\nDESCRIPTION: Demonstrates how to create and send a PATCH request to modify a resource. The example shows setting a string body for the PATCH request.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->patch('http://httpbin.org', array(), 'this is the body');\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using CookiePlugin with Guzzle Client in PHP\nDESCRIPTION: This snippet demonstrates how to set up the CookiePlugin with a Guzzle HTTP client. It shows creating the plugin with an ArrayCookieJar, adding it to a client, and sending requests that automatically handle cookies.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/cookie-plugin.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\nuse Guzzle\\Plugin\\Cookie\\CookiePlugin;\nuse Guzzle\\Plugin\\Cookie\\CookieJar\\ArrayCookieJar;\n\n$cookiePlugin = new CookiePlugin(new ArrayCookieJar());\n\n// Add the cookie plugin to a client\n$client = new Client('http://www.test.com/');\n$client->addSubscriber($cookiePlugin);\n\n// Send the request with no cookies and parse the returned cookies\n$client->get('http://www.yahoo.com/')->send();\n\n// Send the request again, noticing that cookies are being sent\n$request = $client->get('http://www.yahoo.com/');\n$request->send();\n\necho $request;\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Status Line in PHP using Guzzle\nDESCRIPTION: Shows how to access different components of an HTTP response status line including status code, reason phrase, protocol and version.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/response.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$response = $client->get('http://www.amazon.com')->send();\n\necho $response->getStatusCode();      // >>> 200\necho $response->getReasonPhrase();    // >>> OK\necho $response->getProtocol();        // >>> HTTP\necho $response->getProtocolVersion(); // >>> 1.1\n```\n\n----------------------------------------\n\nTITLE: Accessing Response Headers in PHP using Guzzle\nDESCRIPTION: Shows how to access HTTP response headers using various helper methods and direct header access.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/response.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\necho $response->getHeader('Content-Type');\necho $response->getHeader('Content-Length');\necho $response->getHeaders()['Content-Type']; // PHP 5.4\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response in PHP using Guzzle\nDESCRIPTION: Shows how to parse JSON response data into a PHP array using the json() method.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/response.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$data = $response->json();\necho gettype($data);\n// >>> array\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending HTTP Requests with Guzzle in PHP\nDESCRIPTION: Demonstrates how to create POST and OPTIONS requests using a Guzzle client, add files to a POST request, and check if a resource supports the DELETE method.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/client.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->post('http://localhost:8983/solr/update')\n    ->addPostFiles(array('file' => '/path/to/documents.xml'));\n$response = $request->send();\n\n// Check if a resource supports the DELETE method\n$supportsDelete = $client->options('/path')->send()->isMethodAllowed('DELETE');\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Echo Plugin for Guzzle in PHP\nDESCRIPTION: Shows how to create a simple plugin that prints information about requests before they are sent. The plugin implements EventSubscriberInterface and subscribes to the 'request.before_send' event.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/creating-plugins.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass EchoPlugin implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents()\n    {\n        return array('request.before_send' => 'onBeforeSend');\n    }\n\n    public function onBeforeSend(Guzzle\\Common\\Event $event)\n    {\n        echo 'About to send a request: ' . $event['request'] . \"\\n\";\n    }\n}\n\n$client = new Guzzle\\Service\\Client('http://www.test.com/');\n\n// Create the plugin and add it as an event subscriber\n$plugin = new EchoPlugin();\n$client->addSubscriber($plugin);\n\n// Send a request and notice that the request is printed to the screen\n$client->get('/')->send();\n```\n\n----------------------------------------\n\nTITLE: Building POST Requests with Methods in Guzzle 3\nDESCRIPTION: Shows how to incrementally build a POST request by setting fields and files using dedicated methods instead of passing them in the constructor. This approach provides more flexibility and readability.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->post('http://httpbin.org/post')\n    ->setPostField('custom_field', 'my custom value')\n    ->addPostFile('file', '/path/to/file.xml');\n\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating EntityBody in Guzzle3 PHP\nDESCRIPTION: This example demonstrates how to create an EntityBody object from a file, perform read and write operations on it, and send it in an HTTP request. The EntityBody class provides stream manipulation functionality for HTTP messages.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/entity-bodies.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\EntityBody;\n\n$body = EntityBody::factory(fopen('/path/to/file.txt', 'r+'));\necho $body->read(1024);\n$body->seek(0, SEEK_END);\n$body->write('foo');\necho $body->ftell();\n$body->rewind();\n\n// Send a request using the body\n$response = $client->put('http://localhost:8080/uploads', null, $body)->send();\n```\n\n----------------------------------------\n\nTITLE: Creating POST Requests with Raw Data in Guzzle 3\nDESCRIPTION: Demonstrates sending a POST request with raw data in the request body instead of form fields. This approach is useful for sending non-form data like JSON, XML, or plain text.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->post('http://httpbin.org/post', array(), 'this is the body');\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using CachePlugin with Guzzle HTTP Client in PHP\nDESCRIPTION: This snippet demonstrates how to set up and use the CachePlugin with a Guzzle HTTP client. It shows the initialization of cache storage, creation of the cache plugin, and how to add it to the client for automatic caching of requests.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/cache-plugin.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\nuse Doctrine\\Common\\Cache\\FilesystemCache;\nuse Guzzle\\Cache\\DoctrineCacheAdapter;\nuse Guzzle\\Plugin\\Cache\\CachePlugin;\nuse Guzzle\\Plugin\\Cache\\DefaultCacheStorage;\n\n$client = new Client('http://www.test.com/');\n\n$cachePlugin = new CachePlugin(array(\n    'storage' => new DefaultCacheStorage(\n        new DoctrineCacheAdapter(\n            new FilesystemCache('/path/to/cache/files')\n        )\n    )\n));\n\n// Add the cache plugin to the client object\n$client->addSubscriber($cachePlugin);\n$client->get('http://www.wikipedia.org/')->send();\n\n// The next request will revalidate against the origin server to see if it\n// has been modified. If a 304 response is received the response will be\n// served from cache\n$client->get('http://www.wikipedia.org/')->send();\n```\n\n----------------------------------------\n\nTITLE: Implementing BackoffPlugin with Exponential Backoff in Guzzle 3 (PHP)\nDESCRIPTION: This snippet demonstrates how to create a Guzzle client, instantiate a BackoffPlugin with an exponential backoff strategy, and add it to the client. The plugin will automatically retry failed 500 and 503 responses using truncated exponential backoff.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/backoff-plugin.rst#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Guzzle\\Http\\Client;\nuse Guzzle\\Plugin\\Backoff\\BackoffPlugin;\n\n$client = new Client('http://www.test.com/');\n// Use a static factory method to get a backoff plugin using the exponential backoff strategy\n$backoffPlugin = BackoffPlugin::getExponentialBackoff();\n\n// Add the backoff plugin to the client object\n$client->addSubscriber($backoffPlugin);\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Errors in Guzzle\nDESCRIPTION: Example of catching and handling HTTP errors in Guzzle using try-catch blocks and the BadResponseException class.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_25\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $response = $client->get('/not_found.xml')->send();\n} catch (Guzzle\\Http\\Exception\\BadResponseException $e) {\n    echo 'Uh oh! ' . $e->getMessage();\n    echo 'HTTP request URL: ' . $e->getRequest()->getUrl() . \"\\n\";\n    echo 'HTTP request: ' . $e->getRequest() . \"\\n\";\n    echo 'HTTP response status: ' . $e->getResponse()->getStatusCode() . \"\\n\";\n    echo 'HTTP response: ' . $e->getResponse() . \"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cookie Support with CookiePlugin in Guzzle 3\nDESCRIPTION: Shows how to add cookie support to a Guzzle client using the CookiePlugin. This enables consistent cookie sessions across all requests made by the client.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/client.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Plugin\\Cookie\\CookiePlugin;\nuse Guzzle\\Plugin\\Cookie\\CookieJar\\ArrayCookieJar;\n\n// Create a new cookie plugin\n$cookiePlugin = new CookiePlugin(new ArrayCookieJar());\n\n// Add the cookie plugin to the client\n$client->addSubscriber($cookiePlugin);\n```\n\n----------------------------------------\n\nTITLE: Handling Advanced Guzzle Request Options in PHP\nDESCRIPTION: Demonstrates advanced Guzzle request options such as SSL certificate validation, client certificates, private keys, proxies, and streaming responses.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/client.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->get('https://www.example.com', array(), array(\n    'cert' => '/etc/pki/client_certificate.pem'\n);\n\n$request = $client->get('https://www.example.com', array(), array(\n    'cert' => array('/etc/pki/client_certificate.pem', 's3cr3tp455w0rd')\n);\n\n$request = $client->get('https://www.example.com', array(), array(\n    'ssl_key' => '/etc/pki/private_key.pem'\n);\n\n$stream = Guzzle::get('http://guzzlephp.org', array('stream' => true));\nwhile (!$stream->feof()) {\n    echo $stream->readLine();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock HTTP Responses with Guzzle 3 MockPlugin in PHP\nDESCRIPTION: Shows how to create a mock plugin for Guzzle client testing by queuing predetermined HTTP responses. The example demonstrates creating a client, setting up mock responses with different status codes (200 and 404), and making requests that consume these responses in order.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/mock-plugin.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\nuse Guzzle\\Plugin\\Mock\\MockPlugin;\nuse Guzzle\\Http\\Message\\Response;\n\n$client = new Client('http://www.test.com/');\n\n$mock = new MockPlugin();\n$mock->addResponse(new Response(200))\n     ->addResponse(new Response(404));\n\n// Add the mock plugin to the client object\n$client->addSubscriber($mock);\n\n// The following request will receive a 200 response from the plugin\n$client->get('http://www.example.com/')->send();\n\n// The following request will receive a 404 response from the plugin\n$client->get('http://www.test.com/')->send();\n```\n\n----------------------------------------\n\nTITLE: Setting Request Body in Guzzle 3\nDESCRIPTION: Demonstrates how to set the body of a request using the setBody() method, which accepts a string, resource, array, or EntityBodyInterface instance, and how to set the Content-Type header.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->put('/user.json');\n$request->setBody('{\"foo\":\"baz\"}', 'application/json');\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests in Parallel with Client::send() in PHP\nDESCRIPTION: Demonstrates how to send multiple HTTP requests in parallel by passing an array of RequestInterface objects to the Client::send() method.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/batching/batching.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$responses = $client->send(array(\n    $client->get('http://www.example.com/foo'),\n    $client->get('http://www.example.com/baz')\n    $client->get('http://www.example.com/bar')\n));\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Key Filters for Guzzle Requests in PHP\nDESCRIPTION: This snippet demonstrates how to set cache key filters to ignore specific query string parameters when generating a cache key for a request. It helps in caching similar requests with dynamic query parameters.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/cache-plugin.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$request->getParams()->set('cache.key_filter', 'a, q');\n```\n\n----------------------------------------\n\nTITLE: Working with HTTP Headers in Guzzle 3\nDESCRIPTION: Demonstrates how to set, add, retrieve, and manipulate HTTP headers in Guzzle requests, including handling case-insensitive headers and iterating through header values.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$request = new Request('GET', 'http://httpbin.com/cookies');\n// addHeader will set and append to any existing header values\n$request->addHeader('Foo', 'bar');\n$request->addHeader('foo', 'baz');\n// setHeader overwrites any existing values\n$request->setHeader('Test', '123');\n\n// Request headers can be cast as a string\necho $request->getHeader('Foo');\n// >>> bar, baz\necho $request->getHeader('Test');\n// >>> 123\n\n// You can count the number of headers of a particular case insensitive name\necho count($request->getHeader('foO'));\n// >>> 2\n\n// You can iterate over Header objects\nforeach ($request->getHeader('foo') as $header) {\n    echo $header . \"\\n\";\n}\n\n// You can get all of the request headers as a Guzzle\\Http\\Message\\Header\\HeaderCollection object\n$headers = $request->getHeaders();\n\n// Missing headers return NULL\nvar_export($request->getHeader('Missing'));\n// >>> null\n\n// You can see all of the different variations of a header by calling raw() on the Header\nvar_export($request->getHeader('foo')->raw());\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Redirects in Guzzle 3\nDESCRIPTION: Sets up strict mode redirects to follow RFC compliance, either on a per-request basis or globally for a client. In strict mode, redirects for POST requests will follow the RFC specification rather than the browser-like behavior.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/http-redirects.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Set per request\n$request = $client->post();\n$request->getParams()->set('redirect.strict', true);\n\n// You can set globally on a client so all requests use strict redirects\n$client->getConfig()->set('request.params', array(\n    'redirect.strict' => true\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing ServiceBuilder with Shared Configuration in PHP\nDESCRIPTION: Shows how to use ServiceBuilder to create clients with shared configuration and extended parameters.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/using-the-service-builder.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Service\\Builder\\ServiceBuilder;\n\n$builder = ServiceBuilder::factory(array(\n    'services' => array(\n        'abstract_client' => array(\n            'params' => array(\n                'key'    => 'abc',\n                'secret' => '123'\n            )\n        ),\n        'foo' => array(\n            'extends' => 'abstract_client',\n            'class'   => 'MyService\\FooClient',\n            'params'  => array(\n                'custom' => 'and above all'\n            )\n        ),\n        'bar' => array(\n            'extends' => 'abstract_client',\n            'class'   => 'MyService\\FooClient',\n            'params'  => array(\n                'custom' => 'listen to me'\n            )\n        )\n    )\n));\n\n$foo = $builder->get('foo');\n$bar = $builder->get('bar');\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-wide Cache Settings for Guzzle in PHP\nDESCRIPTION: This code shows how to set cache settings that apply to all requests made by a Guzzle client. It configures a default TTL and revalidation behavior for all requests.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/cache-plugin.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$client = new Guzzle\\Http\\Client('http://www.test.com', array(\n    'request.params' => array(\n        'cache.override_ttl' => 3600,\n        'params.cache.revalidate' => 'never'\n    )\n));\n\necho $client->get('/')->getParams()->get('cache.override_ttl');\n// >>> 3600\n\necho $client->get('/')->getParams()->get('cache.revalidate');\n// >>> never\n```\n\n----------------------------------------\n\nTITLE: Initializing and Attaching LogPlugin in Guzzle 3 (PHP)\nDESCRIPTION: This snippet demonstrates how to set up the LogPlugin with a Zend_Log adapter and attach it to a Guzzle client. It uses the MessageFormatter::DEBUG_FORMAT for logging and sends a GET request to Google.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/log-plugin.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\nuse Guzzle\\Log\\Zf1LogAdapter;\nuse Guzzle\\Plugin\\Log\\LogPlugin;\nuse Guzzle\\Log\\MessageFormatter;\n\n$client = new Client('http://www.test.com/');\n\n$adapter = new Zf1LogAdapter(\n    new \\Zend_Log(new \\Zend_Log_Writer_Stream('php://output'))\n);\n$logPlugin = new LogPlugin($adapter, MessageFormatter::DEBUG_FORMAT);\n\n// Attach the plugin to the client, which will in turn be attached to all\n// requests generated by the client\n$client->addSubscriber($logPlugin);\n\n$response = $client->get('http://google.com')->send();\n```\n\n----------------------------------------\n\nTITLE: Using Guzzle History Plugin in PHP\nDESCRIPTION: This snippet demonstrates how to set up the History plugin with a Guzzle HTTP client to track requests and responses. It shows how to create a client, instantiate the history plugin with a custom limit, add it to the client, send a request, and then access the history data.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/history-plugin.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\nuse Guzzle\\Plugin\\History\\HistoryPlugin;\n\n$client = new Client('http://www.test.com/');\n\n// Add the history plugin to the client object\n$history = new HistoryPlugin();\n$history->setLimit(5);\n$client->addSubscriber($history);\n\n$client->get('http://www.yahoo.com/')->send();\n\necho $history->getLastRequest();\necho $history->getLastResponse();\necho count($history);\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects with Non-Repeatable Streams in Guzzle 3\nDESCRIPTION: Demonstrates how to handle redirects when sending data from a non-repeatable stream by adding a custom rewind method to the entity body. This allows Guzzle to restart the request after a redirect.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/http-redirects.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->post(\n    'http://httpbin.com/redirect/2',\n    null,\n    fopen('http://httpbin.com/get', 'r')\n);\n\n// Add a custom function that can be used to rewind the stream\n// (reopen in this example)\n$request->getBody()->setRewindFunction(function ($body) {\n    $body->setStream(fopen('http://httpbin.com/get', 'r'));\n    return true;\n});\n\n$response = $client->send();\n```\n\n----------------------------------------\n\nTITLE: Handling Streaming Responses with Twitter API in PHP using Guzzle\nDESCRIPTION: Example of using Guzzle's streaming functionality to consume Twitter's Streaming API.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/response.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\nuse Guzzle\\Stream\\PhpStreamRequestFactory;\n\n$client = new Client('https://stream.twitter.com/1');\n\n$request = $client->post('statuses/filter.json', null, array(\n    'track' => 'bieber'\n));\n\n$request->setAuth('myusername', 'mypassword');\n\n$factory = new PhpStreamRequestFactory();\n$stream = $factory->fromRequest($request);\n\n// Read until the stream is closed\nwhile (!$stream->feof()) {\n    // Read a line from the stream\n    $line = $stream->readLine();\n    // JSON decode the line of data\n    $data = json_decode($line, true);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom User-Agent in Guzzle HTTP Client\nDESCRIPTION: Demonstrates how to customize the User-Agent header in a Guzzle client. Shows both completely overriding the default User-Agent and prepending a custom string to the default.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/client.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Completely override the default User-Agent\n$client->setUserAgent('Test/123');\n\n// Prepend a string to the default User-Agent\n$client->setUserAgent('Test/123', true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Guzzle Client Request Options in PHP\nDESCRIPTION: Illustrates how to set various request options on a Guzzle client, including headers, query parameters, authentication, and event listeners.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/client.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$client = new Guzzle\\Http\\Client();\n\n// Set a single header using path syntax\n$client->setDefaultOption('headers/X-Foo', 'Bar');\n\n// Set all headers\n$client->setDefaultOption('headers', array('X-Foo' => 'Bar'));\n\n// Set a single query string parameter using path syntax\n$client->setDefaultOption('query/abc', '123');\n\n// Set an array of default query string parameters\n$client->setDefaultOption('query', array('abc' => '123'));\n\n$request = $client->get($url, array(), array(\n    'auth' => array('username', 'password', 'Digest')\n));\n\n$request = $client->get($url, array(), array(\n    'events' => array(\n        'request.before_send' => function (\\Guzzle\\Common\\Event $e) {\n            echo 'About to send ' . $e['request'];\n        }\n    )\n));\n```\n\n----------------------------------------\n\nTITLE: Installing Guzzle 3.x via Composer\nDESCRIPTION: Commands for installing Composer and adding Guzzle 3.x as a dependency to your project. This shows how to download the Composer installer and require Guzzle version ~3.9 in your project.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composer\ncurl -sS https://getcomposer.org/installer | php\n\n# Add Guzzle as a dependency\nphp composer.phar require guzzle/guzzle:~3.9\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom responseClass in PHP for Guzzle operations\nDESCRIPTION: Demonstrates how to create a custom response class that implements ResponseClassInterface to return domain-specific objects from Guzzle operations. This example shows a User class that processes XML responses.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/guzzle-service-descriptions.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyApplication;\n\nuse Guzzle\\Service\\Command\\ResponseClassInterface;\nuse Guzzle\\Service\\Command\\OperationCommand;\n\nclass User implements ResponseClassInterface\n{\n    protected $name;\n\n    public static function fromCommand(OperationCommand $command)\n    {\n        $response = $command->getResponse();\n        $xml = $response->xml();\n\n        return new self((string) $xml->name);\n    }\n\n    public function __construct($name)\n    {\n        $this->name = $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Response Content to File in Guzzle 3\nDESCRIPTION: Demonstrates how to download response content directly to a file or resource using the 'save_to' option in Guzzle requests. This approach allows streaming response data to disk without loading it into memory.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Send the response body to a file\n$request = $client->get('http://test.com', array(), array('save_to' => '/path/to/file'));\n\n// Send the response body to an fopen resource\n$request = $client->get('http://test.com', array(), array('save_to' => fopen('/path/to/file', 'w')));\n```\n\n----------------------------------------\n\nTITLE: Executing Commands with Guzzle 3 Client\nDESCRIPTION: This snippet demonstrates how to set a service description on a Guzzle client, create a command with parameters, execute it, and access the response data. The example shows deletion of a user with ID 123 and outputs the status from the response.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/guzzle-service-descriptions.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$client->setDescription($description);\n\n$command = $client->getCommand('DeleteUser', array('id' => 123));\n$responseModel = $client->execute($command);\necho $responseModel['status'];\n```\n\n----------------------------------------\n\nTITLE: Setting Auth Parameters in Guzzle 3 Client\nDESCRIPTION: Demonstrates the recommended way to add authentication credentials to a Guzzle client using the auth parameter. This method supports Basic, Digest, NTLM, or Any authentication types.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/curl-auth-plugin.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client->setDefaultOption('auth', array('username', 'password', 'Basic|Digest|NTLM|Any'));\n```\n\n----------------------------------------\n\nTITLE: Compressing and Decompressing EntityBody in Guzzle3\nDESCRIPTION: This snippet shows how to compress and uncompress an EntityBody using PHP stream filters. The compress() method uses zlib.deflate by default, and the uncompress() method can restore the original content.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/entity-bodies.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\EntityBody;\n\n$body = EntityBody::factory(fopen('/tmp/test.txt', 'r+'));\necho $body->getSize();\n// >>> 1048576\n\n// Compress using the default zlib.deflate filter\n$body->compress();\necho $body->getSize();\n// >>> 314572\n\n// Decompress the stream\n$body->uncompress();\necho $body->getSize();\n// >>> 1048576\n```\n\n----------------------------------------\n\nTITLE: Executing Service Commands in Parallel with Client::execute() in PHP\nDESCRIPTION: Shows how to execute multiple service commands in parallel by passing an array of CommandInterface objects to the Client::execute() method.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/batching/batching.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$commands = $client->execute(array(\n    $client->getCommand('foo'),\n    $client->getCommand('baz'),\n    $client->getCommand('bar')\n));\n```\n\n----------------------------------------\n\nTITLE: Manipulating Query Parameters in Guzzle 3 Requests\nDESCRIPTION: Demonstrates how to work with query parameters in a Guzzle HTTP request, including retrieving the query object, removing parameters, setting values, and adding new parameters to existing ones.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$request = new Guzzle\\Http\\Message\\Request('GET', 'http://www.example.com?foo=bar&abc=123');\n\n$query = $request->getQuery();\necho \"{$query}\\n\";\n// >>> foo=bar&abc=123\n\n$query->remove('abc');\necho \"{$query}\\n\";\n// >>> foo=bar\n\n$query->set('foo', 'baz');\necho \"{$query}\\n\";\n// >>> foo=baz\n\n$query->add('foo', 'bar');\necho \"{$query}\\n\";\n// >>> foo%5B0%5D=baz&foo%5B1%5D=bar\n```\n\n----------------------------------------\n\nTITLE: Creating Request Event Listener in PHP using Guzzle 3\nDESCRIPTION: This snippet demonstrates how to create an event listener for the 'request.complete' event in Guzzle 3. It prints out the request and response when the event is triggered.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Common\\Event;\n\n$request = $client->get('http://www.google.com');\n\n// Echo out the response that was received\n$request->getEventDispatcher()->addListener('request.complete', function (Event $e) {\n    echo $e['request'] . \"\\n\\n\";\n    echo $e['response'];\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Commands in Parallel with Error Handling\nDESCRIPTION: Code demonstrating how to execute multiple commands in parallel and handle potential errors. This uses the CommandTransferException to track which commands succeeded and which failed.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Service\\Exception\\CommandTransferException;\n\n$commands = array();\n$commands[] = $twitter->getCommand('getMentions');\n$commands[] = $twitter->getCommand('otherCommandName');\n// etc...\n\ntry {\n    $result = $client->execute($commands);\n    foreach ($result as $command) {\n        echo $command->getName() . ': ' . $command->getResponse()->getStatusCode() . \"\\n\";\n    }\n} catch (CommandTransferException $e) {\n    // Get an array of the commands that succeeded\n    foreach ($e->getSuccessfulCommands() as $command) {\n        echo $command->getName() . \" succeeded\\n\";\n    }\n    // Get an array of the commands that failed\n    foreach ($e->getFailedCommands() as $command) {\n        echo $command->getName() . \" failed\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling with Event Listeners\nDESCRIPTION: Example of implementing custom error handling using event listeners in Guzzle, specifically for handling 401 authentication errors.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$client->getEventDispatcher()->addListener('request.error', function(Event $event) {\n\n    if ($event['response']->getStatusCode() == 401) {\n\n        $newRequest = $event['request']->clone();\n        $newRequest->setHeader('X-Auth-Header', MyApplication::getNewAuthToken());\n        $newResponse = $newRequest->send();\n\n        // Set the response object of the request without firing more events\n        $event['response'] = $newResponse;\n\n        // You can also change the response and fire the normal chain of\n        // events by calling $event['request']->setResponse($newResponse);\n\n        // Stop other events from firing when you override 401 responses\n        $event->stopPropagation();\n    }\n\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom ResourceIterator in PHP for Guzzle 3\nDESCRIPTION: Shows how to create a custom ResourceIterator class for a 'get_users' command in Guzzle 3. This iterator handles paginated responses with a 'next_user' token for subsequent requests.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/iterators/resource-iterators.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyService\\Model;\n\nuse Guzzle\\Service\\Resource\\ResourceIterator;\n\n/**\n * Iterate over a get_users command\n */\nclass GetUsersIterator extends ResourceIterator\n{\n    protected function sendRequest()\n    {\n        // If a next token is set, then add it to the command\n        if ($this->nextToken) {\n            $this->command->set('next_user', $this->nextToken);\n        }\n\n        // Execute the command and parse the result\n        $result = $this->command->execute();\n\n        // Parse the next token\n        $this->nextToken = isset($result['next_user']) ? $result['next_user'] : false;\n\n        return $result['users'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Client Events in Guzzle 3\nDESCRIPTION: Example of adding an event listener to a Guzzle client that monitors request creation. Demonstrates the event system using the client.create_request event.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/client.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Common\\Event;\nuse Guzzle\\Http\\Client;\n\n$client = new Client();\n\n// Add a listener that will echo out requests as they are created\n$client->getEventDispatcher()->addListener('client.create_request', function (Event $e) {\n    echo 'Client object: ' . spl_object_hash($e['client']) . \"\\n\";\n    echo \"Request object: {$e['request']}\\n\";\n});\n```\n\n----------------------------------------\n\nTITLE: Using Guzzle's Static Client Facade in PHP\nDESCRIPTION: Shows how to use Guzzle's static client facade to send simple HTTP requests. It demonstrates mounting the client and sending GET and POST requests with options.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/client.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Mount the client so that you can access it at \\Guzzle\nGuzzle\\Http\\StaticClient::mount();\n$response = Guzzle::get('http://guzzlephp.org');\n\n$response = Guzzle::post('http://test.com', array(\n    'headers' => array('X-Foo' => 'Bar'),\n    'body'    => array('Test' => '123'),\n    'timeout' => 10\n));\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Batch Object in PHP\nDESCRIPTION: Demonstrates how to create a Batch object using BatchRequestTransfer as both the divisor and transfer strategy. The example shows adding requests to the queue and flushing them for parallel execution.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/batching/batching.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Batch\\Batch;\nuse Guzzle\\Http\\BatchRequestTransfer;\n\n// BatchRequestTransfer acts as both the divisor and transfer strategy\n$transferStrategy = new BatchRequestTransfer(10);\n$divisorStrategy = $transferStrategy;\n\n$batch = new Batch($transferStrategy, $divisorStrategy);\n\n// Add some requests to the batch queue\n$batch->add($request1)\n    ->add($request2)\n    ->add($request3);\n\n// Flush the queue and retrieve the flushed items\n$arrayOfTransferredRequests = $batch->flush();\n```\n\n----------------------------------------\n\nTITLE: Creating PUT Requests in Guzzle 3\nDESCRIPTION: Demonstrates creating a PUT request with a string body to store a resource on the server. The example shows the basic pattern for sending data with PUT requests.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->put('http://httpbin.org/put', array(), 'this is the body');\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Guzzle 3 PHP Client\nDESCRIPTION: Demonstrates how to add an event listener to a Guzzle 3 client. This example listens for the 'command.after_prepare' event and performs an action on the request object.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Common\\Event;\nuse Guzzle\\Service\\Client;\n\n$client = new Client();\n\n// create an event listener that operates on request objects\n$client->getEventDispatcher()->addListener('command.after_prepare', function (Event $event) {\n    $command = $event['command'];\n    $request = $command->getRequest();\n\n    // do something with request\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Notifying Batch in PHP\nDESCRIPTION: Demonstrates creating a batch that notifies a callback function whenever the queue is flushed, useful for monitoring batch operations.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/batching/batching.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Batch\\BatchBuilder;\n\n$batch = BatchBuilder::factory()\n    ->transferRequests(10)\n    ->autoFlushAt(10)\n    ->notify(function (array $transferredItems) {\n        echo 'Transferred ' . count($transferredItems) . \"items\\n\";\n    })\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Setting Request Options in Guzzle\nDESCRIPTION: Example of setting request options when creating a Guzzle request, including headers and proxy settings.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->get($url, $headers, array('proxy' => 'http://proxy.com'));\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Guzzle Events with Closure in PHP\nDESCRIPTION: Demonstrates how to subscribe to specific Guzzle events using a closure. This example listens for the 'request.create' event and echoes the event name and request object.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/creating-plugins.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client->getEventDispatcher()->addListener('request.create', function(Event $event) {\n    echo $event->getName();\n    echo $event['request'];\n});\n```\n\n----------------------------------------\n\nTITLE: Using Magic Methods in Guzzle 3 PHP Client\nDESCRIPTION: Shows how to use magic methods in Guzzle 3 to execute commands. This approach makes it appear as if methods are defined on the client object, when they are actually invoked using PHP's __call method.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// Use the magic method\n$result = $twitter->getMentions();\n\n// This is exactly the same as:\n$result = $twitter->getCommand('getMentions')->execute();\n```\n\n----------------------------------------\n\nTITLE: Adding a History Plugin to a Guzzle Client in PHP\nDESCRIPTION: This snippet demonstrates how to create a history plugin and attach it to a Guzzle client. When attached, the history plugin will track all requests sent through the client, allowing you to access the last request that was sent.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/plugins-overview.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Plugin\\History\\HistoryPlugin;\nuse Guzzle\\Service\\Client;\n\n$client = new Client();\n\n// Create a history plugin and attach it to the client\n$history = new HistoryPlugin();\n$client->addSubscriber($history);\n\n// Create and send a request. This request will also utilize the HistoryPlugin\n$client->get('http://httpbin.org')->send();\n\n// Echo out the last sent request by the client\necho $history->getLastRequest();\n```\n\n----------------------------------------\n\nTITLE: Parsing XML Response in PHP using Guzzle\nDESCRIPTION: Shows how to parse XML response data into a SimpleXMLElement object using the xml() method.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/response.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$xml = $response->xml();\necho $xml->foo;\n// >>> Bar!\n```\n\n----------------------------------------\n\nTITLE: Checking Response Type in PHP using Guzzle\nDESCRIPTION: Demonstrates helper methods to check the type of HTTP response (success, informational, redirect, client error, server error).\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/response.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$response->isSuccessful(); // true\n$response->isInformational();\n$response->isRedirect();\n$response->isClientError();\n$response->isServerError();\n```\n\n----------------------------------------\n\nTITLE: Setting Service Description on Twitter Client in PHP\nDESCRIPTION: Code showing how to attach a service description to a Twitter client. This should be added to the factory method of the client class to enable operation-based commands.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass TwitterClient extends Client\n{\n    public static function factory($config = array())\n    {\n        // ... same code as before ...\n\n        // Set the service description\n        $client->setDescription(ServiceDescription::factory('path/to/twitter.json'));\n\n        return $client;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in Guzzle 3 Requests\nDESCRIPTION: Demonstrates how to add, remove, and retrieve cookies from a Guzzle request.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$request->addCookie($name, $value);\n$request->removeCookie($name);\n$value = $request->getCookie($name);\n$valueArray = $request->getCookies();\n```\n\n----------------------------------------\n\nTITLE: Command Execution Examples - PHP\nDESCRIPTION: Shows different ways to execute commands using the Twitter client including parameter setting and response handling.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Get a command from the client and pass an array of parameters\n$command = $twitter->getCommand('getMentions', array(\n    'count' => 5\n));\n\n// Other parameters can be set on the command after it is created\n$command['trim_user'] = false;\n\n// Execute the command using the command object.\n// The result value contains an array of JSON data from the response\n$result = $command->execute();\n\n// You can retrieve the result of the command later too\n$result = $command->getResult().\n```\n\n----------------------------------------\n\nTITLE: Setting Default Command Parameters in Guzzle 3 PHP Client\nDESCRIPTION: Demonstrates how to specify default command parameters when creating a Guzzle 3 client object. These parameters will be added to all commands created by the client.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$client = new Guzzle\\Service\\Client(array(\n    'command.params' => array(\n        'default_1' => 'foo',\n        'another'   => 'bar'\n    )\n));\n```\n\n----------------------------------------\n\nTITLE: Automatic Content-Type Header Detection\nDESCRIPTION: Shows how Guzzle automatically adds Content-Type headers based on file extensions in the request path or the payload being sent.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->put('/user.json', array(), '{\"foo\":\"bar\"}');\n// The Content-Type was guessed based on the path of the request\necho $request->getHeader('Content-Type');\n// >>> application/json\n\n$request = $client->put('/user.json');\n$request->setBody(fopen('/tmp/user_data.json', 'r'));\n// The Content-Type was guessed based on the path of the entity body\necho $request->getHeader('Content-Type');\n// >>> application/json\n```\n\n----------------------------------------\n\nTITLE: Installing Composer and Guzzle with Bash\nDESCRIPTION: Commands for installing Composer and adding Guzzle as a dependency. This snippet shows how to download the Composer installer and use it to require Guzzle 3.9.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/getting-started/installation.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composer\ncurl -sS https://getcomposer.org/installer | php\n\n# Add Guzzle as a dependency\nphp composer.phar require guzzle/guzzle:~3.9\n```\n\n----------------------------------------\n\nTITLE: Creating Event Subscriber for Guzzle 3 PHP Client\nDESCRIPTION: Shows how to create and add an event subscriber to a Guzzle 3 client. The subscriber listens for multiple events and defines methods to handle each event.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Common\\Event;\nuse Guzzle\\Common\\Client;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\n\nclass EventSubscriber implements EventSubscriberInterface\n{\n    public static function getSubscribedEvents()\n    {\n        return array(\n            'client.command.create' => 'onCommandCreate',\n            'command.parse_response' => 'onParseResponse'\n        );\n    }\n\n    public function onCommandCreate(Event $event)\n    {\n        $client = $event['client'];\n        $command = $event['command'];\n        // operate on client and command\n    }\n\n    public function onParseResponse(Event $event)\n    {\n        $command = $event['command'];\n        // operate on the command\n    }\n}\n\n$client = new Client();\n\n$client->addSubscriber(new EventSubscriber());\n```\n\n----------------------------------------\n\nTITLE: Setting up Twitter API Request Parameters in a Concrete Command\nDESCRIPTION: Code that configures a Twitter API request with conditional parameter setting. This snippet shows how to create and configure a request object in a command class, with various conditional parameters added to the query string.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Create the request property of the command\n$this->request = $this->client->get('statuses/mentions_timeline.json');\n\n// Grab the query object of the request because we will use it for\n// serializing command parameters on the request\n$query = $this->request->getQuery();\n\nif ($this['count']) {\n    $query->set('count', $this['count']);\n}\n\nif ($this['since_id']) {\n    $query->set('since_id', $this['since_id']);\n}\n\nif ($this['max_id']) {\n    $query->set('max_id', $this['max_id']);\n}\n\nif ($this['trim_user'] !== null) {\n    $query->set('trim_user', $this['trim_user'] ? 'true' : 'false');\n}\n\nif ($this['contributor_details'] !== null) {\n    $query->set('contributor_details', $this['contributor_details'] ? 'true' : 'false');\n}\n\nif ($this['include_entities'] !== null) {\n    $query->set('include_entities', $this['include_entities'] ? 'true' : 'false');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Streaming Request Body from File in Guzzle 3\nDESCRIPTION: Shows how to stream the contents of a file as the body of a POST request using the setBody method with a file handle. This approach is memory-efficient for large request bodies.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->post('http://httpbin.org/post');\n// Set the body of the POST to stream the contents of /path/to/large_body.txt\n$request->setBody(fopen('/path/to/large_body.txt', 'r'));\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: Creating an Auto-Flushing Batch in PHP\nDESCRIPTION: Shows how to create a batch that automatically flushes the queue when it reaches a specified threshold using the FlushingBatch decorator.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/batching/batching.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Batch\\BatchBuilder;\n\n$batch = BatchBuilder::factory()\n    ->transferRequests(10)\n    ->autoFlushAt(10)\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Loading a Service Description in Guzzle3 with PHP\nDESCRIPTION: Example of loading a service description from a JSON file into a Guzzle3 client. The ServiceDescription::factory method is used to create a description object from a file path.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/guzzle-service-descriptions.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Service\\Description\\ServiceDescription;\n\n$description = ServiceDescription::factory('/path/to/client.json');\n```\n\n----------------------------------------\n\nTITLE: Streaming PUT Request Body from File in Guzzle 3\nDESCRIPTION: Shows how to create a PUT request that streams its body content from a file, which is useful for large file uploads without loading the entire file into memory.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->put('http://httpbin.org/put');\n$request->setBody(fopen('/path/to/large_body.txt', 'r'));\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: Service Builder Usage - PHP\nDESCRIPTION: Demonstrates using Guzzle's service builder to create and configure clients.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Service\\Builder\\ServiceBuilder;\n\n// Create a service builder and provide client configuration data\n$builder = ServiceBuilder::factory('/path/to/client_config.json');\n\n// Get the client from the service builder by name\n$twitter = $builder->get('twitter');\n```\n\n----------------------------------------\n\nTITLE: Example of parameter filters configuration in JSON\nDESCRIPTION: Shows how to configure parameter filters in a Guzzle service description. The example demonstrates both simple filters using PHP functions and complex filters with custom methods and arguments.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/guzzle-service-descriptions.rst#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filters\": [\n        \"strtolower\",\n        {\n            \"method\": \"MyClass::convertString\",\n            \"args\": [ \"test\", \"@value\", \"@api\" ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sanitizing User Input for POST Requests in Guzzle 3\nDESCRIPTION: Demonstrates a security practice of sanitizing user input before including it in POST requests to prevent file path injection attacks. The example shows stripping the @ character from user input.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Prevent users from accessing sensitive files by sanitizing input\n$_POST = array('firstname' => '@/etc/passwd');\n$request = $client->post('http://www.example.com', array(), array (\n    'firstname' => str_replace('@', '', $_POST['firstname'])\n));\n```\n\n----------------------------------------\n\nTITLE: Defining Operations in Guzzle Service Description JSON\nDESCRIPTION: This snippet demonstrates the structure of an operation within a Guzzle service description. It includes properties such as extends, httpMethod, uri, summary, class, responseClass, and parameters.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/guzzle-service-descriptions.rst#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operations\": {\n        \"operationName\": {\n            \"extends\": \"string\",\n            \"httpMethod\": \"GET|POST|PUT|DELETE|PATCH|string\",\n            \"uri\": \"string\",\n            \"summary\": \"string\",\n            \"class\": \"string\",\n            \"responseClass\": \"string\",\n            \"responseNotes\": \"string\",\n            \"type\": \"string\",\n            \"description\": \"string\",\n            \"responseType\": \"primitive|class|(model by name)|documentation|(string)\",\n            \"deprecated\": false,\n            \"errorResponses\": [\n                {\n                    \"code\": 500,\n                    \"reason\": \"Unexpected Error\",\n                    \"class\": \"string\"\n                }\n            ],\n            \"data\": {\n                \"foo\": \"bar\",\n                \"baz\": \"bam\"\n            },\n            \"parameters\": {}\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Parameters in Guzzle3 Service Description\nDESCRIPTION: Example of defining parameters that are injected into the query string of a request. The sentAs attribute is used to override the default parameter name in the query string.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/guzzle-service-descriptions.rst#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operations\": {\n        \"queryTest\": {\n            \"parameters\": {\n                \"testValue\": {\n                    \"location\": \"query\",\n                    \"sentAs\": \"test_value\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MD5 Validation in Guzzle HTTP Client\nDESCRIPTION: Demonstrates how to initialize and attach the MD5ValidatorPlugin to a Guzzle HTTP client for validating response integrity. The plugin automatically compares the calculated MD5 hash of response bodies against Content-MD5 headers and throws UnexpectedValueException if they don't match.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/md5-validator-plugin.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\nuse Guzzle\\Plugin\\Md5\\Md5ValidatorPlugin;\n\n$client = new Client('http://www.test.com/');\n\n$md5Plugin = new Md5ValidatorPlugin();\n\n// Add the md5 plugin to the client object\n$client->addSubscriber($md5Plugin);\n\n$request = $client->get('http://www.yahoo.com/');\n$request->send();\n```\n\n----------------------------------------\n\nTITLE: Simplified Twitter API Service Description with additionalParameters\nDESCRIPTION: A more concise version of the Twitter API service description using additionalParameters. This approach requires less detailed parameter definitions while still enabling automatic request serialization.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Twitter\",\n    \"apiVersion\": \"1.1\",\n    \"baseUrl\": \"https://api.twitter.com/1.1\",\n    \"description\": \"Twitter REST API client\",\n    \"operations\": {\n        \"GetMentions\": {\n            \"httpMethod\": \"GET\",\n            \"uri\": \"statuses/mentions_timeline.json\",\n            \"summary\": \"Returns the 20 most recent mentions for the authenticating user.\",\n            \"responseClass\": \"GetMentionsOutput\",\n            \"additionalParameters\": {\n                \"location\": \"query\"\n            }\n        }\n    },\n    \"models\": {\n        \"GetMentionsOutput\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"location\": \"json\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Debug LogPlugin to Guzzle Client (PHP)\nDESCRIPTION: This snippet shows how to add a debug LogPlugin to a Guzzle client using a helper method. This will output the full HTTP request and response of a transaction.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/log-plugin.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$client->addSubscriber(LogPlugin::getDebugPlugin());\n```\n\n----------------------------------------\n\nTITLE: Adding a Global Plugin to All Clients in PHP\nDESCRIPTION: Shows how to add a plugin that will be automatically attached to every client created by the ServiceBuilder. This example uses the LogPlugin for debugging all requests.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/using-the-service-builder.rst#2025-04-22_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Plugin\\Log\\LogPlugin;\n\n// Add a debug log plugin to every client as it is created\n$builder->addGlobalPlugin(LogPlugin::getDebugPlugin());\n\n$foo = $builder->get('foo');\n$foo->get('/')->send();\n// Should output all of the data sent over the wire\n```\n\n----------------------------------------\n\nTITLE: Using ReadLimitEntityBody Decorator in Guzzle3\nDESCRIPTION: The ReadLimitEntityBody decorator allows you to work with a slice of an existing EntityBody. This is useful for handling large files in chunks, such as when implementing Amazon S3's multipart upload API.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/entity-bodies.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\EntityBody;\nuse Guzzle\\Http\\ReadLimitEntityBody;\n\n$original = EntityBody::factory(fopen('/tmp/test.txt', 'r+'));\necho $original->getSize();\n// >>> 1048576\n\n// Limit the size of the body to 1024 bytes and start reading from byte 2048\n$body = new ReadLimitEntityBody($original, 1024, 2048);\necho $body->getSize();\n// >>> 1024\necho $body->ftell();\n// >>> 0\n```\n\n----------------------------------------\n\nTITLE: Using Operation-Based Commands with Twitter Client\nDESCRIPTION: Example of calling an operation-based command on the Twitter client. This shows how to use commands defined in the service description without creating concrete command classes.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$jsonData = $twitter->getMentions(array(\n    'count'     => 5,\n    'trim_user' => true\n));\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Client from ServiceBuilder in PHP\nDESCRIPTION: Demonstrates how to retrieve a named client from a Guzzle ServiceBuilder, using both the get() method and array access syntax.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/using-the-service-builder.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$client = $builder->get('foo');\n\n// You can also use the ServiceBuilder object as an array\n$client = $builder['foo'];\n```\n\n----------------------------------------\n\nTITLE: Tracking Redirect History with HistoryPlugin in Guzzle 3\nDESCRIPTION: Uses the HistoryPlugin to track and access the history of redirects for a request. This allows for debugging and testing by examining each redirect in the chain.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/http-redirects.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->get('/');\n$history = new Guzzle\\Plugin\\History\\HistoryPlugin();\n$request->addSubscriber($history);\n$response = $request->send();\n\n// Get the last redirect URL or the URL of the request that received\n// this response\necho $response->getEffectiveUrl();\n\n// Get the number of redirects\necho $response->getRedirectCount();\n\n// Iterate over each sent request and response\nforeach ($history->getAll() as $transaction) {\n    // Request object\n    echo $transaction['request']->getUrl() . \"\\n\";\n    // Response object\n    echo $transaction['response']->getEffectiveUrl() . \"\\n\";\n}\n\n// Or, simply cast the HistoryPlugin to a string to view each request and response\necho $history;\n```\n\n----------------------------------------\n\nTITLE: Using BatchBuilder to Transfer Commands in PHP\nDESCRIPTION: Demonstrates creating a batch object for transferring service commands in parallel, allowing commands from different clients to be efficiently grouped and executed.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/batching/batching.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Batch\\BatchBuilder;\n\n$batch = BatchBuilder::factory()\n    ->transferCommands(10)\n    ->build();\n\n$batch->add($client->getCommand('foo'))\n    ->add($client->getCommand('baz'))\n    ->add($client->getCommand('bar'));\n\n$commands = $batch->flush();\n```\n\n----------------------------------------\n\nTITLE: ServiceBuilder Factory Creation in PHP\nDESCRIPTION: Demonstrates creating a ServiceBuilder instance using a JSON configuration file.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/using-the-service-builder.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Service\\Builder\\ServiceBuilder;\n\n// Source service definitions from a JSON file\n$builder = ServiceBuilder::factory('services.json');\n```\n\n----------------------------------------\n\nTITLE: Defining Top-Level Attributes in Guzzle Service Description JSON\nDESCRIPTION: This snippet shows the structure of top-level attributes in a Guzzle service description JSON. It includes properties like name, apiVersion, baseUrl, description, operations, models, and includes.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/guzzle-service-descriptions.rst#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"string\",\n    \"apiVersion\": \"string|number\",\n    \"baseUrl\": \"string\",\n    \"description\": \"string\",\n    \"operations\": {},\n    \"models\": {},\n    \"includes\": [\"string.php\", \"string.json\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Files with Guzzle Request Options\nDESCRIPTION: Examples of downloading files using Guzzle request options and setResponseBody() method. Shows how to save HTTP response content directly to a file.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$request = $this->client->get('http://example.com/large.mov', array(), array(\n    'save_to' => '/tmp/large_file.mov'\n));\n$request->send();\nvar_export(file_exists('/tmp/large_file.mov'));\n```\n\nLANGUAGE: php\nCODE:\n```\n$body = fopen('/tmp/large_file.mov', 'w');\n$request = $this->client->get('http://example.com/large.mov');\n$request->setResponseBody($body);\n\n// You can more easily specify the name of a file to save the contents\n// of the response to by passing a string to ``setResponseBody()``.\n\n$request = $this->client->get('http://example.com/large.mov');\n$request->setResponseBody('/tmp/large_file.mov');\n```\n\n----------------------------------------\n\nTITLE: Basic URI Template Usage with Guzzle Client\nDESCRIPTION: Demonstrates basic URI template usage by creating a Guzzle HTTP client with a base URL and template variable.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/uri-templates.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new Guzzle\\Http\\Client('https://example.com/', array('a' => 'hi'));\n$request = $client->get('/{a}');\n```\n\n----------------------------------------\n\nTITLE: Using IoEmittingEntityBody Decorator in Guzzle3\nDESCRIPTION: The IoEmittingEntityBody decorator adds event emission capabilities to an EntityBody, allowing you to listen to read and write events. This is useful for monitoring or logging data transfers.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/entity-bodies.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Common\\Event;\nuse Guzzle\\Http\\EntityBody;\nuse Guzzle\\Http\\IoEmittingEntityBody;\n\n$original = EntityBody::factory(fopen('/tmp/test.txt', 'r+'));\n$body = new IoEmittingEntityBody($original);\n\n// Listen for read events\n$body->getEventDispatcher()->addListener('body.read', function (Event $e) {\n    // Grab data from the event\n    $entityBody = $e['body'];\n    // Amount of data retrieved from the body\n    $lengthOfData = $e['length'];\n    // The actual data that was read\n    $data = $e['read'];\n});\n\n// Listen for write events\n$body->getEventDispatcher()->addListener('body.write', function (Event $e) {\n    // Grab data from the event\n    $entityBody = $e['body'];\n    // The data that was written\n    $data = $e['write'];\n    // The actual amount of data that was written\n    $data = $e['read'];\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom HTTP Method Requests in Guzzle 3\nDESCRIPTION: Demonstrates how to create requests with non-standard HTTP methods like COPY using the createRequest method. This example shows setting both the method and required headers for a COPY operation.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->createRequest('COPY', 'http://example.com/foo', array(\n    'Destination' => 'http://example.com/bar',\n    'Overwrite'   => 'T'\n));\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: URI Template with Query Parameters\nDESCRIPTION: Shows how to use URI templates with query parameters by passing an array containing the template and variables.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/uri-templates.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->get(array('/test{?a,b}', array('b' => 'there')));\n```\n\n----------------------------------------\n\nTITLE: Creating Twitter Client Factory Method - PHP\nDESCRIPTION: Demonstrates creating a Twitter API client using the factory method pattern. Shows configuration setup and OAuth authentication.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse mtdowling\\TwitterClient;\n\n// Create a client and pass an array of configuration data\n$twitter = TwitterClient::factory(array(\n    'consumer_key'    => '****',\n    'consumer_secret' => '****',\n    'token'           => '****',\n    'token_secret'    => '****'\n));\n```\n\n----------------------------------------\n\nTITLE: Defining Twitter API operation with additionalParameters in JSON\nDESCRIPTION: Example of using additionalParameters in a service description to handle arbitrary query parameters for a Twitter API operation. This approach simplifies defining operations that accept many parameters.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/guzzle-service-descriptions.rst#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Twitter\",\n    \"apiVersion\": \"1.1\",\n    \"baseUrl\": \"https://api.twitter.com/1.1\",\n    \"operations\": {\n        \"GetMentions\": {\n            \"httpMethod\": \"GET\",\n            \"uri\": \"statuses/mentions_timeline.json\",\n            \"responseClass\": \"GetMentionsOutput\",\n            \"additionalParameters\": {\n                \"location\": \"query\"\n            }\n        }\n    },\n    \"models\": {\n        \"GetMentionsOutput\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"location\": \"json\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom URI Template Expression Pattern\nDESCRIPTION: Shows how to customize the URI template expression pattern using a different regex for special cases like Solr.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/uri-templates.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$client->getUriTemplate()->setRegex('/\\<\\$(.+)\\>/');\n$client->get('/<$a>');\n```\n\n----------------------------------------\n\nTITLE: Initializing Doctrine Cache Adapter for Guzzle CachePlugin in PHP\nDESCRIPTION: This snippet shows how to set up a Doctrine cache adapter for use with Guzzle's CachePlugin. It uses an ArrayCache backend for demonstration purposes.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/cache-plugin.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Common\\Cache\\ArrayCache;\nuse Guzzle\\Cache\\DoctrineCacheAdapter;\nuse Guzzle\\Plugin\\Cache\\CachePlugin;\n\n$backend = new ArrayCache();\n$adapter = new DoctrineCacheAdapter($backend);\n$cache = new CachePlugin($adapter);\n```\n\n----------------------------------------\n\nTITLE: Simple Streaming Response with Static Client in PHP using Guzzle\nDESCRIPTION: Shows how to create and read from a streaming response using Guzzle's static client interface.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/response.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$stream = Guzzle::get('http://guzzlephp.org', array('stream' => true));\nwhile (!$stream->feof()) {\n    echo $stream->readLine();\n}\n```\n\n----------------------------------------\n\nTITLE: Using ChunkedIterator in PHP with Guzzle\nDESCRIPTION: Demonstrates how to use the ChunkedIterator class to pull chunks of values from an inner iterator. This iterator yields an array of values for each outer iteration, grouping items from the source iterator.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/iterators/guzzle-iterators.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Iterator\\ChunkedIterator;\n\n$inner = new ArrayIterator(range(0, 8));\n$chunkedIterator = new ChunkedIterator($inner, 2);\n\nforeach ($chunkedIterator as $chunk) {\n    echo implode(', ', $chunk) . \"\\n\";\n}\n\n// >>> 0, 1\n// >>> 2, 3\n// >>> 4, 5\n// >>> 6, 7\n// >>> 8\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookies for a Specific Request in Guzzle PHP\nDESCRIPTION: This snippet shows how to disable cookies for a specific request in Guzzle. It sets the 'cookies.disable' parameter to true on the request's params object.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/cookie-plugin.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$request->getParams()->set('cookies.disable', true);\n```\n\n----------------------------------------\n\nTITLE: Using BatchBuilder to Transfer Requests in PHP\nDESCRIPTION: Shows how to use the BatchBuilder factory to create a batch object configured for transferring HTTP requests in parallel with a specified batch size.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/batching/batching.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Batch\\BatchBuilder;\n\n$batch = BatchBuilder::factory()\n    ->transferRequests(10)\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Using MethodProxyIterator in PHP with Guzzle\nDESCRIPTION: Shows how to use the MethodProxyIterator class to proxy method calls to inner iterators. This is useful when you need to access methods from an inner iterator that might be wrapped by iterator decorators.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/iterators/guzzle-iterators.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Iterator\\MethodProxyIterator;\n\n$inner = new \\ArrayIterator();\n$proxy = new MethodProxyIterator($inner);\n\n// Proxy method calls to the ArrayIterator\n$proxy->append('a');\n$proxy->append('b');\n```\n\n----------------------------------------\n\nTITLE: Listening to ServiceBuilder Events in PHP\nDESCRIPTION: Demonstrates how to listen for events emitted by a ServiceBuilder, specifically the service_builder.create_client event that fires whenever a new client is created.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/using-the-service-builder.rst#2025-04-22_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Common\\Event;\nuse Guzzle\\Service\\Builder\\ServiceBuilder;\n\n$builder = ServiceBuilder::factory('/path/to/config.json');\n\n// Add an event listener to print out each client client as it is created\n$builder->getEventDispatcher()->addListener('service_builder.create_client', function (Event $e) {\n    echo 'Client created: ' . get_class($e['client']) . \"\\n\";\n});\n\n$foo = $builder->get('foo');\n// Should output the class used for the \"foo\" client\n```\n\n----------------------------------------\n\nTITLE: Reading Response Body in PHP using Guzzle\nDESCRIPTION: Demonstrates how to retrieve and output the response body content.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/response.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->get('http://www.amazon.com');\n$response = $request->send();\necho $response->getBody();\n```\n\n----------------------------------------\n\nTITLE: Including Composer Autoloader for Guzzle\nDESCRIPTION: PHP code snippet showing how to include Composer's autoloader after installing Guzzle. This is required to use Guzzle in your PHP application.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire 'vendor/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: Using getIterator Method in PHP with Guzzle 3\nDESCRIPTION: Demonstrates how to use the getIterator method of a Guzzle\\Service\\ClientInterface object to create and use a resource iterator for paginated results.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/iterators/resource-iterators.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$iterator = $client->getIterator('get_users');\n\nforeach ($iterator as $user) {\n    echo $user['name'] . ' age ' . $user['age'] . PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling URL Encoding in Query Parameters\nDESCRIPTION: Shows how to disable URL encoding when working with Guzzle query parameters to better visualize how multi-value parameters are aggregated.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$query->useUrlEncoding(false);\necho \"{$query}\\n\";\n// >>> foo[0]=baz&foo[1]=bar\n```\n\n----------------------------------------\n\nTITLE: Creating Throwaway Clients with Custom Configuration in PHP\nDESCRIPTION: Shows how to create a throwaway client that overrides specific configuration settings from the ServiceBuilder. This client won't be persisted in the ServiceBuilder.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/using-the-service-builder.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Get a throwaway client and overwrite the \"custom\" setting of the client\n$foo = $builder->get('foo', array(\n    'custom' => 'in this world there are rules'\n));\n```\n\n----------------------------------------\n\nTITLE: Guzzle Composer Configuration for Bleeding Edge Version\nDESCRIPTION: JSON configuration for composer.json to use the development version of Guzzle. This setting allows developers to track the latest changes in the master branch.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/getting-started/installation.rst#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n   \"require\": {\n      \"guzzle/guzzle\": \"dev-master\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom cURL Options in Guzzle\nDESCRIPTION: Example of setting custom cURL options for Guzzle requests using the cURL options collection.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$request->getCurlOptions()->set(CURLOPT_LOW_SPEED_LIMIT, 200);\n```\n\n----------------------------------------\n\nTITLE: Using FilterIterator in PHP with Guzzle\nDESCRIPTION: Shows how to use the FilterIterator class to filter values from an inner iterator based on a callback function. This is useful when PHP 5.4's CallbackFilterIterator is not available.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/iterators/guzzle-iterators.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Iterator\\FilterIterator;\n\n$inner = new ArrayIterator(range(1, 10));\n$filterIterator = new FilterIterator($inner, function ($value) {\n    return $value % 2;\n});\n\nforeach ($filterIterator as $value) {\n    echo $value . \"\\n\";\n}\n\n// >>> 2\n// >>> 4\n// >>> 6\n// >>> 8\n// >>> 10\n```\n\n----------------------------------------\n\nTITLE: Setting Up Guzzle Development Environment with Bash\nDESCRIPTION: Commands for contributing to Guzzle, including cloning the repository and installing dependencies with Composer. This setup is required for developers who want to contribute to the Guzzle project.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/getting-started/installation.rst#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/guzzle/guzzle.git\ncd guzzle && curl -s http://getcomposer.org/installer | php && ./composer.phar install --dev\n```\n\n----------------------------------------\n\nTITLE: Automatic Transfer-Encoding with Non-Measurable Content\nDESCRIPTION: Demonstrates how Guzzle automatically adds the Transfer-Encoding: chunked header when the Content-Length cannot be determined.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->put('/user.json');\n$request->setBody(fopen('http://httpbin.org/get', 'r'));\n\n// The Content-Length could not be determined\necho $request->getHeader('Transfer-Encoding');\n// >>> chunked\n```\n\n----------------------------------------\n\nTITLE: Including Composer Autoloader in PHP\nDESCRIPTION: Code to include the Composer autoloader in your PHP project. This is a necessary step after installing Guzzle via Composer to enable autoloading of classes.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/getting-started/installation.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire 'vendor/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Guzzle Version via PEAR with Bash\nDESCRIPTION: Command for installing a specific version of Guzzle through PEAR. This allows users to install a particular version (3.9.0 in this example) instead of the latest release.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/getting-started/installation.rst#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npear install guzzle/guzzle-3.9.0\n```\n\n----------------------------------------\n\nTITLE: Complex URI Template Construction\nDESCRIPTION: Demonstrates advanced URI template usage with multiple segments, path variables, and query parameters.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/uri-templates.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->get(array('http://example.com{+path}{/segments*}{?query,data*}', array(\n    'path'     => '/foo/bar',\n    'segments' => array('one', 'two'),\n    'query'    => 'test',\n    'data'     => array(\n        'more' => 'value'\n    )\n)));\n```\n\n----------------------------------------\n\nTITLE: Using CachingEntityBody Decorator in Guzzle3\nDESCRIPTION: The CachingEntityBody decorator enables seeking on non-seekable streams by caching read data. This is useful when handling redirects or other scenarios where you need to rewind a non-seekable stream like a remote HTTP resource.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/entity-bodies.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\EntityBody;\nuse Guzzle\\Http\\CachingEntityBody;\n\n$original = EntityBody::factory(fopen('http://www.google.com', 'r'));\n$body = new CachingEntityBody($original);\n\n$body->read(1024);\necho $body->ftell();\n// >>> 1024\n\n$body->seek(0);\necho $body->ftell();\n// >>> 0\n```\n\n----------------------------------------\n\nTITLE: Command Inspection - PHP\nDESCRIPTION: Shows how to inspect HTTP request and response objects from executed commands.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$request = $command->getRequest();\n$response = $command->getResponse();\n```\n\n----------------------------------------\n\nTITLE: Removing Expect Header in Guzzle Request\nDESCRIPTION: Code snippet showing how to remove the Expect header from a request to prevent 417 responses from servers that don't support Expect: 100-Continue.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/getting-started/faq.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$request->removeHeader('Expect');\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Web Service Clients without ServiceBuilder in PHP\nDESCRIPTION: Example showing manual client instantiation without using ServiceBuilder, demonstrating redundant configuration across multiple clients.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/using-the-service-builder.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse MyService\\FooClient;\nuse MyService\\BarClient;\n\n$foo = FooClient::factory(array(\n    'key'    => 'abc',\n    'secret' => '123',\n    'custom' => 'and above all'\n));\n\n$bar = BarClient::factory(array(\n    'key'    => 'abc',\n    'secret' => '123',\n    'custom' => 'listen to me'\n));\n```\n\n----------------------------------------\n\nTITLE: Migrating ExponentialBackoffPlugin Usage in PHP\nDESCRIPTION: Demonstrates the migration from ExponentialBackoffPlugin to BackoffPlugin. The new implementation uses a factory method and introduces the HttpBackoffStrategy for handling failure codes.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/UPGRADING.md#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Plugin\\ExponentialBackoffPlugin;\n\n$backoffPlugin = new ExponentialBackoffPlugin($maxRetries, array_merge(\n        ExponentialBackoffPlugin::getDefaultFailureCodes(), array(429)\n    ));\n\n$client->addSubscriber($backoffPlugin);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Plugin\\Backoff\\BackoffPlugin;\nuse Guzzle\\Plugin\\Backoff\\HttpBackoffStrategy;\n\n// Use convenient factory method instead -- see implementation for ideas of what\n// you can do with chaining backoff strategies\n$backoffPlugin = BackoffPlugin::getExponentialBackoff($maxRetries, array_merge(\n        HttpBackoffStrategy::getDefaultFailureCodes(), array(429)\n    ));\n$client->addSubscriber($backoffPlugin);\n```\n\n----------------------------------------\n\nTITLE: Magic Method Command Execution - PHP\nDESCRIPTION: Demonstrates using magic methods to execute commands directly on the client.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$jsonData = $twitter->getMentions(array(\n    'count'     => 5,\n    'trim_user' => true\n));\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for ServiceBuilder\nDESCRIPTION: Example of ServiceBuilder configuration using JSON format, showing service definitions and inheritance.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/using-the-service-builder.rst#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"includes\": [\"/path/to/other/services.json\", \"/path/to/other/php_services.php\"],\n    \"services\": {\n        \"abstract.foo\": {\n            \"params\": {\n                \"username\": \"foo\",\n                \"password\": \"bar\"\n            }\n        },\n        \"bar\": {\n            \"extends\": \"abstract.foo\",\n            \"class\": \"MyClientClass\",\n            \"params\": {\n                \"other\": \"abc\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating LogPlugin Usage in PHP\nDESCRIPTION: Shows how to update LogPlugin implementation from old to new namespace and syntax. The main changes involve updated namespace imports and using MessageFormatter instead of verbosity levels.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/UPGRADING.md#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Common\\Log\\ClosureLogAdapter;\nuse Guzzle\\Http\\Plugin\\LogPlugin;\n\n/** @var \\Guzzle\\Http\\Client */\n$client;\n\n// $verbosity is an integer indicating desired message verbosity level\n$client->addSubscriber(new LogPlugin(new ClosureLogAdapter(function($m) { echo $m; }, $verbosity = LogPlugin::LOG_VERBOSE);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Log\\ClosureLogAdapter;\nuse Guzzle\\Log\\MessageFormatter;\nuse Guzzle\\Plugin\\Log\\LogPlugin;\n\n/** @var \\Guzzle\\Http\\Client */\n$client;\n\n// $format is a string indicating desired message format -- @see MessageFormatter\n$client->addSubscriber(new LogPlugin(new ClosureLogAdapter(function($m) { echo $m; }, $format = MessageFormatter::DEBUG_FORMAT);\n```\n\n----------------------------------------\n\nTITLE: Using MapIterator in PHP with Guzzle\nDESCRIPTION: Demonstrates how to use the MapIterator class to transform values from an inner iterator using a callback function before yielding them in the iteration.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/iterators/guzzle-iterators.rst#2025-04-22_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Iterator\\MapIterator;\n\n$inner = new ArrayIterator(range(0, 3));\n\n$mapIterator = new MapIterator($inner, function ($value) {\n    return $value * 10;\n});\n\nforeach ($mapIterator as $value) {\n    echo $value . \"\\n\";\n}\n\n// >>> 0\n// >>> 10\n// >>> 20\n// >>> 30\n```\n\n----------------------------------------\n\nTITLE: Creating DELETE Requests in Guzzle 3\nDESCRIPTION: Demonstrates how to create and send a DELETE request to remove a resource on the server. The example shows the basic pattern for DELETE request creation and execution.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/request.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$client = new Guzzle\\Http\\Client();\n$request = $client->delete('http://example.com');\n$response = $request->send();\n```\n\n----------------------------------------\n\nTITLE: Initializing Service Builder for Tests in PHP\nDESCRIPTION: Example showing how to set up a service builder in the bootstrap file for tests, including configuration of test clients with credentials.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/testing/unit-testing.rst#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nGuzzle\\Tests\\GuzzleTestCase::setServiceBuilder(Aws\\Common\\Aws::factory($_SERVER['CONFIG']));\n\nGuzzle\\Tests\\GuzzleTestCase::setServiceBuilder(Guzzle\\Service\\Builder\\ServiceBuilder::factory(array(\n    'test.unfuddle' => array(\n        'class' => 'Guzzle.Unfuddle.UnfuddleClient',\n        'params' => array(\n            'username' => 'test_user',\n            'password' => '****',\n            'subdomain' => 'test'\n        )\n    )\n)));\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom CurlMulti Object in PHP\nDESCRIPTION: Example of adding a listener to inject a custom CurlMulti object into each client as it is created. This preserves the previous behavior of reusing the same CurlMulti object globally.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/UPGRADING.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$multi = new Guzzle\\Http\\Curl\\CurlMulti();\n$builder = Guzzle\\Service\\Builder\\ServiceBuilder::factory('/path/to/config.json');\n$builder->addListener('service_builder.create_client', function ($event) use ($multi) {\n    $event['client']->setCurlMulti($multi);\n}\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Redirect Count in Guzzle 3\nDESCRIPTION: Configures the maximum number of redirects Guzzle will follow before throwing a TooManyRedirectsException. The default limit is 5 redirects.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/http-redirects.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$request->getParams()->set('redirect.max', 2);\n```\n\n----------------------------------------\n\nTITLE: Creating a History-Keeping Batch in PHP\nDESCRIPTION: Shows how to create a batch that maintains a history of all transferred items using the HistoryBatch decorator.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/batching/batching.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Batch\\BatchBuilder;\n\n$batch = BatchBuilder::factory()\n    ->transferRequests(10)\n    ->keepHistory()\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecated Warnings in Guzzle 3.7\nDESCRIPTION: Code snippet showing how to enable E_USER_DEPRECATED warnings to identify usage of deprecated methods in Guzzle 3.7. This setting allows developers to detect deprecated API usage in their codebase.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/UPGRADING.md#2025-04-22_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\Guzzle\\Common\\Version::$emitWarnings = true;\n```\n\n----------------------------------------\n\nTITLE: Client Configuration - JSON\nDESCRIPTION: JSON configuration file for the service builder showing Twitter API client setup.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"services\": {\n        \"twitter\": {\n            \"class\": \"mtdowling\\\\TwitterClient\",\n            \"params\": {\n                \"consumer_key\": \"****\",\n                \"consumer_secret\": \"****\",\n                \"token\": \"****\",\n                \"token_secret\": \"****\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Query String Example\nDESCRIPTION: Example showing query string parsing for foo&bar=baz\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfoo&bar=baz\n```\n\n----------------------------------------\n\nTITLE: URI Parameter Location Example in JSON\nDESCRIPTION: Demonstrates how to use the 'uri' location for parameters in a Guzzle service description. This example shows how parameters are injected into the URI using URI-template expansion.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/guzzle-service-descriptions.rst#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operations\": {\n        \"uriTest\": {\n            \"uri\": \"/test/{testValue}\",\n            \"parameters\": {\n                \"testValue\": {\n                    \"location\": \"uri\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: GetMentions Command Class - PHP\nDESCRIPTION: Implementation start of a concrete command class for the Twitter getMentions API endpoint.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace mtdowling\\Twitter\\Command;\n\nuse Guzzle\\Service\\Command\\AbstractCommand;\n\nclass GetMentions extends AbstractCommand\n{\n    protected function build()\n    {\n```\n\n----------------------------------------\n\nTITLE: Client Dependencies in ServiceBuilder JSON Configuration\nDESCRIPTION: Shows how to reference other clients as dependencies in ServiceBuilder configuration using JSON format.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/using-the-service-builder.rst#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"services\": {\n        \"token\": {\n            \"class\": \"My\\Token\\TokenFactory\",\n            \"params\": {\n                \"access_key\": \"xyz\"\n            }\n        },\n        \"client\": {\n            \"class\": \"My\\Client\",\n            \"params\": {\n                \"token_client\": \"{token}\",\n                \"version\": \"1.0\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP cURL Option Constants\nDESCRIPTION: cURL configuration options used in the library\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nCURLOPT_SSL_VERIFYHOST\nCURLOPT_PROGRESS\nCURLOPT_TIMEOUT_MS\n```\n\n----------------------------------------\n\nTITLE: Overriding Cache TTL for Guzzle Requests in PHP\nDESCRIPTION: This snippet shows how to override the Time To Live (TTL) for a cacheable response in Guzzle. It sets a custom cache duration of 100 seconds for the request.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/cache-plugin.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// If the response to the request is cacheable, then the response will be cached for 100 seconds\n$request->getParams()->set('cache.override_ttl', 100);\n```\n\n----------------------------------------\n\nTITLE: Installing Guzzle Iterator via Composer\nDESCRIPTION: Commands to install Composer and add Guzzle Iterator as a project dependency. Installs version 3.0 or higher of the guzzle/iterator package.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/src/Guzzle/Iterator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composer\ncurl -sS https://getcomposer.org/installer | php\n\n# Add Guzzle as a dependency\nphp composer.phar require guzzle/iterator:~3.0\n```\n\n----------------------------------------\n\nTITLE: Twitter API Service Description in JSON\nDESCRIPTION: A complete JSON service description for a Twitter API client. This defines operations, parameters, and response models that Guzzle can use to automatically generate commands and handle request/response processing.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/webservice-client.rst#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Twitter\",\n    \"apiVersion\": \"1.1\",\n    \"baseUrl\": \"https://api.twitter.com/1.1\",\n    \"description\": \"Twitter REST API client\",\n    \"operations\": {\n        \"GetMentions\": {\n            \"httpMethod\": \"GET\",\n            \"uri\": \"statuses/mentions_timeline.json\",\n            \"summary\": \"Returns the 20 most recent mentions for the authenticating user.\",\n            \"responseClass\": \"GetMentionsOutput\",\n            \"parameters\": {\n                \"count\": {\n                    \"description\": \"Specifies the number of tweets to try and retrieve\",\n                    \"type\": \"integer\",\n                    \"location\": \"query\"\n                },\n                \"since_id\": {\n                    \"description\": \"Returns results with an ID greater than the specified ID\",\n                    \"type\": \"integer\",\n                    \"location\": \"query\"\n                },\n                \"max_id\": {\n                    \"description\": \"Returns results with an ID less than or equal to the specified ID.\",\n                    \"type\": \"integer\",\n                    \"location\": \"query\"\n                },\n                \"trim_user\": {\n                    \"description\": \"Limits the amount of data returned for each user\",\n                    \"type\": \"boolean\",\n                    \"location\": \"query\"\n                },\n                \"contributor_details\": {\n                    \"description\": \"Adds more data to contributor elements\",\n                    \"type\": \"boolean\",\n                    \"location\": \"query\"\n                },\n                \"include_entities\": {\n                    \"description\": \"The entities node will be disincluded when set to false.\",\n                    \"type\": \"boolean\",\n                    \"location\": \"query\"\n                }\n            }\n        }\n    },\n    \"models\": {\n        \"GetMentionsOutput\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"location\": \"json\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Guzzle Iterator Autoloader\nDESCRIPTION: Code to include Composer's autoloader after installing the Guzzle Iterator package. This enables automatic class loading for the iterator components.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/src/Guzzle/Iterator/README.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire 'vendor/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: PHP Array Configuration for ServiceBuilder\nDESCRIPTION: Shows the structure of a PHP array configuration for ServiceBuilder including service definitions and includes.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/using-the-service-builder.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$services = array(\n    'includes' => array(\n        '/path/to/other/services.json',\n        '/path/to/other/php_services.php'\n    ),\n    'services' => array(\n        'abstract.foo' => array(\n            'params' => array(\n                'username' => 'foo',\n                'password' => 'bar'\n            )\n        ),\n        'bar' => array(\n            'extends' => 'abstract.foo',\n            'class'   => 'MyClientClass',\n            'params'  => array(\n                'other' => 'abc'\n            )\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Redirects Per Request in Guzzle 3\nDESCRIPTION: Disables redirects for a specific request by passing the 'allow_redirects' option set to false. This overrides the client's default redirect behavior for this request only.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/http-redirects.rst#2025-04-22_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->get($url, array(), array('allow_redirects' => false));\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit XML for API Testing\nDESCRIPTION: PHPUnit configuration file showing how to set up test parameters and API credentials for integration testing.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/testing/unit-testing.rst#2025-04-22_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit bootstrap=\"./tests/bootstrap.php\" colors=\"true\">\n    <php>\n        <!-- Specify the path to a service configuration file -->\n        <server name=\"CONFIG\" value=\"test_services.json\" />\n        <!-- Or, specify each require parameter individually -->\n        <server name=\"API_USER\" value=\"change_me\" />\n        <server name=\"API_PASSWORD\" value=\"****\" />\n    </php>\n    <testsuites>\n        <testsuite name=\"guzzle-service\">\n            <directory suffix=\"Test.php\">./Tests</directory>\n        </testsuite>\n    </testsuites>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Installing Guzzle via PEAR with Bash\nDESCRIPTION: Commands for installing Guzzle through PEAR package manager. The snippet shows how to discover the Guzzle channel and install the package.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/getting-started/installation.rst#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npear channel-discover guzzlephp.org/pear\npear install guzzle/guzzle\n```\n\n----------------------------------------\n\nTITLE: Disabling Redirects Globally in Guzzle 3\nDESCRIPTION: Disables all redirects for a client by passing a configuration option in the client's constructor. This prevents any requests made with this client from following redirects.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/http-client/http-redirects.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$client = new Client(null, array('redirect.disable' => true));\n```\n\n----------------------------------------\n\nTITLE: Configuring XDebug Nesting Level in PHP INI\nDESCRIPTION: PHP INI configuration to increase the XDebug maximum function nesting level to prevent fatal errors when executing multiple requests in callbacks.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/getting-started/faq.rst#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nxdebug.max_nesting_level = 1000\n```\n\n----------------------------------------\n\nTITLE: Running Guzzle Unit Tests with PHPUnit\nDESCRIPTION: Command for running Guzzle unit tests using the vendored PHPUnit binary. This is part of the testing process for developers contributing to Guzzle.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/getting-started/installation.rst#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Initializing Zend Framework Cache Adapter for Guzzle CachePlugin in PHP\nDESCRIPTION: This code demonstrates how to set up a Zend Framework cache adapter for use with Guzzle's CachePlugin. It uses a TestBackend for illustration.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/cache-plugin.rst#2025-04-22_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Cache\\ZendCacheAdapter;\nuse Zend\\Cache\\Backend\\TestBackend;\n\n$backend = new TestBackend();\n$adapter = new ZendCacheAdapter($backend);\n$cache = new CachePlugin($adapter);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raw Configuration from ServiceBuilder in PHP\nDESCRIPTION: Demonstrates how to access the raw configuration data for a specific service using the getData() method. This returns null if the service isn't found or an array of configuration settings if it exists.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/webservice-client/using-the-service-builder.rst#2025-04-22_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$data = $builder->getData('foo');\necho $data['key'] . \"\\n\";\necho $data['secret'] . \"\\n\";\necho $data['custom'] . \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Using CurlAuthPlugin for Basic Authentication\nDESCRIPTION: Shows how to implement basic authentication using the deprecated CurlAuthPlugin. The example demonstrates creating a client, adding authentication, making a request, and processing XML response data.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/plugins/curl-auth-plugin.rst#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Client;\nuse Guzzle\\Plugin\\CurlAuth\\CurlAuthPlugin;\n\n$client = new Client('http://www.test.com/');\n\n// Add the auth plugin to the client object\n$authPlugin = new CurlAuthPlugin('username', 'password');\n$client->addSubscriber($authPlugin);\n\n$response = $client->get('projects/1/people')->send();\n$xml = new SimpleXMLElement($response->getBody(true));\nforeach ($xml->person as $person) {\n    echo $person->email . \"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure in RST\nDESCRIPTION: Defines the title for the Sphinx documentation and sets up a hidden table of contents that includes the docs.rst file. This is a standard pattern for organizing Sphinx documentation projects.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. title:: Guzzle | PHP HTTP client and framework for consuming RESTful web services\n.. toctree::\n    :hidden:\n\n    docs.rst\n```\n\n----------------------------------------\n\nTITLE: Listing Sphinx Requirements for Guzzle 3 Documentation\nDESCRIPTION: This snippet lists the required Python packages for building Guzzle 3 documentation. It specifies Sphinx version 1.2 beta 1 or higher and the Guzzle Sphinx theme version 0.5.0 or higher.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSphinx>=1.2b1\nguzzle_sphinx_theme>=0.5.0\n```\n\n----------------------------------------\n\nTITLE: Command Configuration Updates in Guzzle 3.7\nDESCRIPTION: Example showing the migration from deprecated command configuration options to the new request options format. Demonstrates how to update header and response body configuration for commands.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/UPGRADING.md#2025-04-22_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$command = $client->getCommand('foo', array(\n    'command.headers' => array('Test' => '123'),\n    'command.response_body' => '/path/to/file'\n));\n\n// Should be changed to:\n\n$command = $client->getCommand('foo', array(\n    'command.request_options' => array(\n        'headers' => array('Test' => '123'),\n        'save_as' => '/path/to/file'\n    )\n));\n```\n\n----------------------------------------\n\nTITLE: Updating Client Factory Method in PHP\nDESCRIPTION: Shows how to update a client factory method to use Guzzle\\Common\\Collection instead of the deprecated Guzzle\\Service\\Inspector for configuration.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/UPGRADING.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Guzzle\\Common\\Collection;\n\nclass YourClient extends \\Guzzle\\Service\\Client\n{\n    public static function factory($config = array())\n    {\n        $default = array();\n        $required = array('base_url', 'username', 'api_key');\n        $config = Collection::fromConfig($config, $default, $required);\n\n        $client = new self(\n            $config->get('base_url'),\n            $config->get('username'),\n            $config->get('api_key')\n        );\n        $client->setConfig($config);\n\n        $client->setDescription(ServiceDescription::factory(__DIR__ . DIRECTORY_SEPARATOR . 'client.json'));\n\n        return $client;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Plugin for Guzzle Client\nDESCRIPTION: Code example showing how to use the MockPlugin to add mock responses to a Guzzle client for testing.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/testing/unit-testing.rst#2025-04-22_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$plugin = new Guzzle\\Plugin\\Mock\\MockPlugin();\n$plugin->addResponse(new Guzzle\\Http\\Message\\Response(200));\n$client = new Guzzle\\Http\\Client();\n$client->addSubscriber($plugin);\n\n// The following request will get the mock response from the plugin in FIFO order\n$request = $client->get('http://www.test.com/');\n$request->send();\n\n// The MockPlugin maintains a list of requests that were mocked\n$this->assertContainsOnly($request, $plugin->getReceivedRequests());\n```\n\n----------------------------------------\n\nTITLE: URL Default Path Behavior Change in PHP\nDESCRIPTION: Demonstrates the change in default path behavior for URLs. Previously, an empty path would default to '/', but now it remains empty.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/UPGRADING.md#2025-04-22_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// Before:\n$request = $client->get('http://www.foo.com');\necho $request->getUrl();\n// >> http://www.foo.com/\n\n// After:\n$request = $client->get('http://www.foo.com');\necho $request->getUrl();\n// >> http://www.foo.com\n```\n\n----------------------------------------\n\nTITLE: Creating Mock HTTP Response Example\nDESCRIPTION: Example of a mock HTTP response format used for testing, showing headers and XML body content.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/docs/testing/unit-testing.rst#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nDate: Wed, 25 Nov 2009 12:00:00 GMT\nConnection: close\nServer: AmazonS3\nContent-Type: application/xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<LocationConstraint xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">EU</LocationConstraint>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Request Headers in PHP\nDESCRIPTION: Shows how to set default request headers using the new configuration approach in Guzzle 3.7.0.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$client->getConfig()->setPath('request.options/headers/{header_name}', 'value');\n// or\n$client->getConfig()->setPath('request.options/headers', array('header_name' => 'value'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in PHP\nDESCRIPTION: Shows how to set up HTTP authentication using the new configuration approach, replacing the deprecated CurlAuthPlugin.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$client->getConfig()->setPath('request.options/auth', array('user', 'pass', 'Basic|Digest'));\n```\n\n----------------------------------------\n\nTITLE: Setting Nested Array Value in PHP\nDESCRIPTION: Demonstrates using the new setPath() method to set a nested value in a Collection object.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$collection->setPath('foo/baz/bar', 'test');\necho $collection['foo']['bar']['bar'];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Request Headers in PHP\nDESCRIPTION: Demonstrates how to get the default request headers using the new configuration approach in Guzzle 3.7.0.\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$headers = $client->getConfig()->getPath('request.options/headers');\n```\n\n----------------------------------------\n\nTITLE: PHP Service Description Event Example\nDESCRIPTION: Code reference showing domain object addition to service description parsing using operation.parse_class event\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\noperation.parse_class\n```\n\n----------------------------------------\n\nTITLE: PHP Cookie Path Pattern\nDESCRIPTION: Reference to cookie path matching pattern conforming to RFC 6265 s5.1.4\nSOURCE: https://github.com/guzzle/guzzle3/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"_guzzle_blank_\"\n```"
  }
]