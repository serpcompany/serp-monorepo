[
  {
    "owner": "composer",
    "repo": "composer",
    "content": "TITLE: Defining PHP Version Requirement in Composer JSON\nDESCRIPTION: Example showing how to specify a minimum PHP version requirement in a composer.json file. This ensures the package will only be installed on systems running PHP 7.4 or higher.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/composer-platform-dependencies.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"php\": \">=7.4\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Composer with Checksum Verification (Shell)\nDESCRIPTION: This shell script downloads the Composer installer, verifies its checksum, and installs Composer if the checksum is valid. It exits with a status code indicating success or failure.\nSOURCE: https://github.com/composer/composer/blob/main/doc/faqs/how-to-install-composer-programmatically.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\nEXPECTED_CHECKSUM=\"$(php -r 'copy(\"https://composer.github.io/installer.sig\", \"php://stdout\");')\"\nphp -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\nACTUAL_CHECKSUM=\"$(php -r \"echo hash_file('sha384', 'composer-setup.php');\")\"\n\nif [ \"$EXPECTED_CHECKSUM\" != \"$ACTUAL_CHECKSUM\" ]\nthen\n    >&2 echo 'ERROR: Invalid installer checksum'\n    rm composer-setup.php\n    exit 1\nfi\n\nphp composer-setup.php --quiet\nRESULT=$?\nrm composer-setup.php\nexit $RESULT\n```\n\n----------------------------------------\n\nTITLE: Installing Packages Safely Without Plugins and Scripts in Composer\nDESCRIPTION: Commands to install or update Composer packages while disabling plugins and scripts execution for security. This prevents third-party code execution during package operations by using the --no-plugins and --no-scripts flags.\nSOURCE: https://github.com/composer/composer/blob/main/doc/faqs/how-to-install-untrusted-packages-safely.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp composer.phar install --no-plugins --no-scripts ...\nphp composer.phar update --no-plugins --no-scripts ...\n```\n\n----------------------------------------\n\nTITLE: Validating Composer Files After Merge\nDESCRIPTION: Commands to validate the composer.json and composer.lock files after resolving merge conflicts. The validate command checks file consistency while install --dry-run verifies the installation process.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/resolving-merge-conflicts.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp composer.phar validate\nphp composer.phar install [--dry-run]\n```\n\n----------------------------------------\n\nTITLE: Configuring Authoritative Class Maps in composer.json\nDESCRIPTION: JSON configuration to enable authoritative class maps in Composer's autoloader for maximum performance but with potential limitations for runtime-generated classes.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/autoloader-optimization.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"config\": {\n        \"classmap-authoritative\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring APCu Cache in composer.json\nDESCRIPTION: JSON configuration to enable APCu caching in Composer's autoloader for improved performance using APCu memory cache.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/autoloader-optimization.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"config\": {\n        \"apcu-autoloader\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Class Map Optimization in composer.json\nDESCRIPTION: JSON configuration to enable class map optimization in Composer's autoloader for improved performance.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/autoloader-optimization.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"config\": {\n        \"optimize-autoloader\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Package Type for Framework Installation in composer.json\nDESCRIPTION: Example composer.json file for a WordPress theme that uses composer/installers to specify a custom installation path. By setting the type to 'wordpress-theme', the package will be installed in the wp-content/themes directory.\nSOURCE: https://github.com/composer/composer/blob/main/doc/faqs/how-do-i-install-a-package-to-a-custom-path-for-my-framework.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"you/themename\",\n    \"type\": \"wordpress-theme\",\n    \"require\": {\n        \"composer/installers\": \"~1.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Installation Paths in composer.json\nDESCRIPTION: Example configuration for a package consumer to override installation paths using the installer-paths extra. This demonstrates how to specify custom paths for specific packages and all packages of a certain type.\nSOURCE: https://github.com/composer/composer/blob/main/doc/faqs/how-do-i-install-a-package-to-a-custom-path-for-my-framework.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extra\": {\n        \"installer-paths\": {\n            \"sites/example.com/modules/{$name}\": [\"vendor/package\"],\n            \"sites/example.com/themes/{$name}\": [\"type:drupal-theme\"]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Missing Required Packages\nDESCRIPTION: Command to validate composer files and detect any packages that are required in composer.json but missing from composer.lock.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/resolving-merge-conflicts.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nphp composer.phar validate\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Packages\nDESCRIPTION: Command to detect and remove packages that are present in composer.lock but are not required as direct or indirect dependencies.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/resolving-merge-conflicts.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp composer.phar remove --unused\n```\n\n----------------------------------------\n\nTITLE: Configuring Branch Alias in composer.json\nDESCRIPTION: This snippet shows how to set up a branch alias in the composer.json file. It demonstrates aliasing the dev-main branch to a 1.0.x-dev version.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/aliases.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-main\": \"1.0.x-dev\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Alias in composer.json\nDESCRIPTION: This snippet demonstrates how to set up an inline alias in the composer.json file. It shows how to alias a specific branch (dev-bugfix) of a package to a version constraint (1.0.x-dev) that matches other dependencies.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/aliases.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/you/monolog\"\n        }\n    ],\n    \"require\": {\n        \"symfony/monolog-bundle\": \"2.0\",\n        \"monolog/monolog\": \"dev-bugfix as 1.0.x-dev\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Alias via Composer CLI\nDESCRIPTION: This snippet shows how to add an inline alias using the Composer command-line interface. It demonstrates requiring a specific branch of a package and aliasing it to a version constraint.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/aliases.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp composer.phar require \"monolog/monolog:dev-bugfix as 1.0.x-dev\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Packages in Composer Repository Configuration\nDESCRIPTION: This example shows how to filter packages in a Composer repository configuration. It uses the 'only' option to specify which packages should be considered from the repository, including a specific package and a wildcard for a vendor.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/repository-priorities.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://example.org\",\n            \"only\": [\"foo/bar\", \"some-vendor/*\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Packages in Composer Repository Configuration\nDESCRIPTION: This snippet illustrates how to exclude specific packages from a Composer repository. It uses the 'exclude' option to prevent a particular package from being loaded from the repository.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/repository-priorities.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://example.org\",\n            \"exclude\": [\"toy/package\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Canonical Repository in Composer JSON\nDESCRIPTION: This snippet demonstrates how to make a repository non-canonical in Composer's configuration. It specifies a Composer-type repository with a custom URL and sets the 'canonical' flag to false.\nSOURCE: https://github.com/composer/composer/blob/main/doc/articles/repository-priorities.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"https://example.org\",\n            \"canonical\": false\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Version Constraint Examples in Composer\nDESCRIPTION: Examples of invalid version constraints in Composer that combine comparison operators with wildcards, which lead to logical contradictions in package requirements.\nSOURCE: https://github.com/composer/composer/blob/main/doc/faqs/why-are-version-constraints-combining-comparisons-and-wildcards-a-bad-idea.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n>=2.*\n```\n\nLANGUAGE: markdown\nCODE:\n```\n>=1.1.*\n```\n\n----------------------------------------\n\nTITLE: Decomposition of Invalid Version Constraint in Composer\nDESCRIPTION: Breakdown of the contradictory components in an invalid version constraint using '>=2.*' as an example, showing how it creates logical ambiguity.\nSOURCE: https://github.com/composer/composer/blob/main/doc/faqs/why-are-version-constraints-combining-comparisons-and-wildcards-a-bad-idea.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n>=2\n```\n\nLANGUAGE: markdown\nCODE:\n```\n2.*\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Composer Version from GitHub (Shell)\nDESCRIPTION: This shell command fetches a specific version of the Composer installer from GitHub using a commit hash. It downloads and executes the installer in a single line.\nSOURCE: https://github.com/composer/composer/blob/main/doc/faqs/how-to-install-composer-programmatically.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwget https://raw.githubusercontent.com/composer/getcomposer.org/f3108f64b4e1c1ce6eb462b159956461592b3e3e/web/installer -O - -q | php -- --quiet\n```\n\n----------------------------------------\n\nTITLE: Adding Gitignore Rule for Vendor Git Directories\nDESCRIPTION: This gitignore rule excludes all .git folders within the vendor directory from version control, preventing git submodule issues without requiring deletion of dependencies.\nSOURCE: https://github.com/composer/composer/blob/main/doc/faqs/should-i-commit-the-dependencies-in-my-vendor-directory.md#2025-04-23_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n/vendor/**/.git\n```\n\n----------------------------------------\n\nTITLE: Removing Git Directories from Vendor Dependencies in Bash\nDESCRIPTION: This Bash command finds and removes all .git directories within the vendor folder, enabling dependencies to be added to the main git repository without git submodule conflicts.\nSOURCE: https://github.com/composer/composer/blob/main/doc/faqs/should-i-commit-the-dependencies-in-my-vendor-directory.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nfind vendor/ -type d -name \".git\" -exec rm -rf {} \\;\n```\n\n----------------------------------------\n\nTITLE: Removing Git Directories from Vendor Dependencies in ZSH\nDESCRIPTION: This ZSH command removes all .git directories from the vendor folder, allowing dependencies to be added to the main git repository without git submodule issues.\nSOURCE: https://github.com/composer/composer/blob/main/doc/faqs/should-i-commit-the-dependencies-in-my-vendor-directory.md#2025-04-23_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nrm -rf vendor/**/.git\n```\n\n----------------------------------------\n\nTITLE: Filesystem Component Changelog in Markdown\nDESCRIPTION: Documents version history with major changes, deprecations, and new features. Includes details about method changes, parameter modifications, and backwards compatibility breaks.\nSOURCE: https://github.com/composer/composer/blob/main/tests/Composer/Test/Fixtures/functional/installed-versions2/vendor/symfony/filesystem/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCHANGELOG\n=========\n\n5.0.0\n-----\n\n * `Filesystem::dumpFile()` and `appendToFile()` don't accept arrays anymore\n\n4.4.0\n-----\n\n * support for passing a `null` value to `Filesystem::isAbsolutePath()` is deprecated and will be removed in 5.0\n * `tempnam()` now accepts a third argument `$suffix`.\n\n4.3.0\n-----\n\n * support for passing arrays to `Filesystem::dumpFile()` is deprecated and will be removed in 5.0\n * support for passing arrays to `Filesystem::appendToFile()` is deprecated and will be removed in 5.0\n\n4.0.0\n-----\n\n * removed `LockHandler`\n * Support for passing relative paths to `Filesystem::makePathRelative()` has been removed.\n\n3.4.0\n-----\n\n * support for passing relative paths to `Filesystem::makePathRelative()` is deprecated and will be removed in 4.0\n\n3.3.0\n-----\n\n * added `appendToFile()` to append contents to existing files\n\n3.2.0\n-----\n\n * added `readlink()` as a platform independent method to read links\n\n3.0.0\n-----\n\n * removed `$mode` argument from `Filesystem::dumpFile()`\n\n2.8.0\n-----\n\n * added tempnam() a stream aware version of PHP's native tempnam()\n\n2.6.0\n-----\n\n * added LockHandler\n\n2.3.12\n------\n\n * deprecated dumpFile() file mode argument.\n\n2.3.0\n-----\n\n * added the dumpFile() method to atomically write files\n\n2.2.0\n-----\n\n * added a delete option for the mirror() method\n\n2.1.0\n-----\n\n * 24eb396 : BC Break : mkdir() function now throws exception in case of failure instead of returning Boolean value\n * created the component\n```"
  }
]