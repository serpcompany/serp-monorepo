[
  {
    "owner": "servicestack",
    "repo": "servicestack",
    "content": "TITLE: Configuring AutoQueryFeature with GenerateCrudServices in ServiceStack\nDESCRIPTION: Code snippet showing how to initialize and configure the AutoQueryFeature plugin with GenerateCrudServices to enable auto-generation of CRUD services for database tables.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindAuto/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nPlugins.Add(new AutoQueryFeature {\n    MaxLimit = 1000,\n    GenerateCrudServices = new GenerateCrudServices {}\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceStack AppHost and Customer Service in C#\nDESCRIPTION: This snippet shows how to set up a ServiceStack AppHost, define DTOs for CRUD operations on customers, and implement the CustomerService. It uses OrmLite for database operations.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n//Web Service Host Configuration\npublic class AppHost : AppSelfHostBase\n{\n    public AppHost() \n        : base(\"Customer REST Example\", typeof(CustomerService).Assembly) {}\n\n    public override void Configure(Container container)\n    {\n        //Register which RDBMS provider to use\n        container.Register<IDbConnectionFactory>(c => \n            new OrmLiteConnectionFactory(\":memory:\", SqliteDialect.Provider));\n\n        using (var db = container.Resolve<IDbConnectionFactory>().Open())\n        {\n            //Create the Customer POCO table if it doesn't already exist\n            db.CreateTableIfNotExists<Customer>();\n        }\n    }\n}\n\n//Web Service DTO's\n[Route(\"/customers\", \"GET\")]\npublic class GetCustomers : IReturn<GetCustomersResponse> {}\n\npublic class GetCustomersResponse\n{\n    public List<Customer> Results { get; set; } \n}\n\n[Route(\"/customers/{Id}\", \"GET\")]\npublic class GetCustomer : IReturn<Customer>\n{\n    public int Id { get; set; }\n}\n\n[Route(\"/customers\", \"POST\")]\npublic class CreateCustomer : IReturn<Customer>\n{\n    public string Name { get; set; }\n}\n\n[Route(\"/customers/{Id}\", \"PUT\")]\npublic class UpdateCustomer : IReturn<Customer>\n{\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n}\n\n[Route(\"/customers/{Id}\", \"DELETE\")]\npublic class DeleteCustomer : IReturnVoid\n{\n    public int Id { get; set; }\n}\n\n// POCO DB Model\npublic class Customer\n{\n    [AutoIncrement]\n    public int Id { get; set; }\n\n    public string Name { get; set; }\n}\n\n//Web Services Implementation\npublic class CustomerService : Service\n{\n    public object Get(GetCustomers request)\n    {\n        return new GetCustomersResponse { Results = Db.Select<Customer>() };\n    }\n\n    public object Get(GetCustomer request)\n    {\n        return Db.SingleById<Customer>(request.Id);\n    }\n\n    public object Post(CreateCustomer request)\n    {\n        var customer = new Customer { Name = request.Name };\n        Db.Save(customer);\n        return customer;\n    }\n\n    public object Put(UpdateCustomer request)\n    {\n        var customer = Db.SingleById<Customer>(request.Id);\n        if (customer == null)\n            throw HttpError.NotFound(\"Customer '{0}' does not exist\".Fmt(request.Id));\n\n        customer.Name = request.Name;\n        Db.Update(customer);\n\n        return customer;\n    }\n\n    public void Delete(DeleteCustomer request)\n    {\n        Db.DeleteById<Customer>(request.Id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Database Connection in ASP.NET Core IOC\nDESCRIPTION: Example of using IHostingStartup to register a database connection factory in ASP.NET Core's IOC container. This allows the connection to be used in both ServiceStack and ASP.NET Core components.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: HostingStartup(typeof(MyApp.ConfigureDb))]\n\nnamespace MyApp;\n\npublic class ConfigureDb : IHostingStartup\n{\n    public void Configure(IWebHostBuilder builder) => builder\n        .ConfigureServices((context, services) => {\n            services.AddSingleton<IDbConnectionFactory>(new OrmLiteConnectionFactory(\n                context.Configuration.GetConnectionString(\"DefaultConnection\"),\n                SqliteDialect.Provider));\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Endpoints in C#\nDESCRIPTION: This snippet shows how to configure endpoint mapping options in a ServiceStack application, including defining the use of endpoints, forcing execution through endpoints, and JSON serialization options.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseServiceStack(new AppHost(), options => {\n    options.MapEndpoints(use:true, force:true, useSystemJson:UseSystemJson.Always);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag-Based Post Filtering in Razor SSG\nDESCRIPTION: Razor page implementation for displaying posts filtered by tags with static site generation support. Implements IRenderStatic to generate static pages for each unique tag.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n@page \"/posts/tagged/{slug}\"\n@model TaggedModel\n@inject MarkdownBlog Blog\n\n@implements IRenderStatic<TaggedModel>\n@functions {\n    public List<TaggedModel> GetStaticProps(RenderContext ctx) => ctx.Resolve<MarkdownBlog>()\n        .TagSlugMap.Keys.Map(x => new TaggedModel { Slug = x });\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing ServiceStack AppHost with Endpoint Routing in ASP.NET Core\nDESCRIPTION: This snippet demonstrates how to initialize a ServiceStack AppHost using Endpoint Routing in an ASP.NET Core application. It shows the setup process including service registration and AppHost configuration.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-08_openapi-v3.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Register ServiceStack APIs, Dependencies and Plugins:\nservices.AddServiceStack(typeof(MyServices).Assembly);\n\nvar app = builder.Build();\n//...\n\n// Register ServiceStack AppHost\napp.UseServiceStack(new AppHost(), options => {\n    options.MapEndpoints();\n});\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Assigning Roles to Users in ASP.NET Core\nDESCRIPTION: This snippet shows how to assign roles to users using the UserManager in ASP.NET Core. It retrieves a user by their email and assigns multiple roles to that user, ensuring they have the proper access permissions.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nstring[] roles = [...]; // Roles to assign to User \nvar newUser = await userManager.FindByEmailAsync(user.Email!);\nawait userManager.AddToRolesAsync(user, roles);\n```\n\n----------------------------------------\n\nTITLE: Configuring ASP.NET Core JWT Authentication in Program.cs\nDESCRIPTION: Setup for ASP.NET Core's JWT Bearer authentication with configuration for token validation parameters including issuer, audience, and signing key.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-11_jwt-identity-auth.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddAuthentication()\n    .AddJwtBearer(options => {\n        options.TokenValidationParameters = new()\n        {\n            ValidIssuer = config[\"JwtBearer:ValidIssuer\"],\n            ValidAudience = config[\"JwtBearer:ValidAudience\"],\n            IssuerSigningKey = new SymmetricSecurityKey(\n                Encoding.UTF8.GetBytes(config[\"JwtBearer:IssuerSigningKey\"]!)),\n            ValidateIssuerSigningKey = true,\n        };\n    })\n    .AddIdentityCookies(options => options.DisableRedirectsForApis());\n```\n\n----------------------------------------\n\nTITLE: Dynamic Variable Usage in ServiceStack Markdown Templates\nDESCRIPTION: Demonstrates how to use ServiceStack's template syntax to incorporate dynamic variables within a markdown document. The template references Model properties such as FirstName and LastName that get replaced with actual values when rendered.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/ServiceStack.ServiceHost.Tests/Views/Shared/DynamicShared.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @Model.FirstName Dynamic Markdown Template\n\nHello @Model.FirstName,\n\n# heading 1\n\n  * @Model.LastName\n  * @Model.FirstName\n\n## heading 2\n\nThis is a [servicestack.net link](http://www.servicestack.net)\n\n### heading 3\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceStack to use ASP.NET Core IOC\nDESCRIPTION: Demonstrates how to switch ServiceStack to use ASP.NET Core's IOC container by calling AddServiceStack() before building the WebApplication. This registers all ServiceStack dependencies in ASP.NET Core's IOC.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddServiceStack(typeof(MyServices).Assembly);\n\nvar app = builder.Build();\n\n//...\napp.UseServiceStack(new AppHost());\n```\n\n----------------------------------------\n\nTITLE: Migrating Existing Users to Identity Auth Using ASP.NET Core\nDESCRIPTION: This code snippet implements a task to migrate existing users into the Identity Auth model, using the UserManager to create new AppUser instances from existing users' data, ensuring their passwords and details are accurately transferred.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConfigureDbMigrations : IHostingStartup\n{\n    public void Configure(IWebHostBuilder builder) => builder\n        .ConfigureAppHost(appHost => {\n            AppTasks.Register(\"migrate.users\", _ => {\n                var log = appHost.GetApplicationServices().GetRequiredService<ILogger<ConfigureDbMigrations>>();\n\n                log.LogInformation(\"Running migrate.users...\");\n                var scopeFactory = appHost.GetApplicationServices().GetRequiredService<IServiceScopeFactory>();\n                using var scope = scopeFactory.CreateScope();\n                using var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();\n                using var db = scope.ServiceProvider.GetRequiredService<IDbConnectionFactory>().Open();\n                var migrateUsers = db.Select(db.From<OldAppUser>().OrderBy(x => x.Id));\n\n                log.LogInformation(\"Migrating {Count} Existing ServiceStack Users to Identity Auth Users...\", migrateUsers.Count);\n                MigrateExistingUsers(dbContext, scope.ServiceProvider, migrateUsers).Wait();\n            });\n            AppTasks.Run();\n        });\n\n    private async Task MigrateExistingUsers(ApplicationDbContext dbContext, IServiceProvider services, \n        List<OldAppUser> migrateUsers, string tempPassword=\"p@55wOrd\")\n    {\n        var userManager = services.GetRequiredService<UserManager<AppUser>>();\n        var now = DateTime.UtcNow;\n\n        foreach (var user in migrateUsers)\n        {\n            var appUser = new AppUser\n            {\n                Id = user.Id,\n                UserName = user.Email,\n                Email = user.Email,\n                DisplayName = user.DisplayName,\n                FirstName = user.FirstName,\n                LastName = user.LastName,\n                Handle = user.Handle,\n                ProfileUrl = user.ProfileUrl,\n                Avatar = user.Avatar,\n                RefIdStr = user.RefIdStr ?? Guid.NewGuid().ToString(),\n                LockoutEnabled = true,\n                LockoutEnd = user.LockedDate != null ? now.AddYears(10) : now,\n                LastLoginDate = user.LastLoginDate,\n                LastLoginIp = user.LastLoginIp,\n                CreatedDate = user.CreatedDate,\n                ModifiedDate = user.ModifiedDate,\n                // Verify you want existing Users emails to be confirmed\n                EmailConfirmed = true,\n            };\n            await userManager.CreateAsync(appUser, tempPassword);\n\n            // Update raw Password Hash using EF\n            if (user.PasswordHash != null)\n            {\n                dbContext.Users\n                    .Where(x => x.Id == user.Id)\n                    .ExecuteUpdate(setters => setters.SetProperty(x => x.PasswordHash, user.PasswordHash));\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ServiceStack JWT Identity Auth in Configure.Auth.cs\nDESCRIPTION: Configuration for enabling ServiceStack's support for ASP.NET Core JWT Identity Auth using the AuthFeature plugin with custom user session and credentials authentication.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-11_jwt-identity-auth.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConfigureAuth : IHostingStartup\n{\n    public void Configure(IWebHostBuilder builder) => builder\n        .ConfigureServices(services => {\n            services.AddPlugin(new AuthFeature(IdentityAuth.For<ApplicationUser>(\n                options => {\n                    options.SessionFactory = () => new CustomUserSession();\n                    options.CredentialsAuth();\n                    options.JwtAuth(x => {\n                        // Enable JWT Auth Features...\n                    });\n                })));\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Authoring ServiceStack Plugins for ASP.NET Core IOC\nDESCRIPTION: Illustrates how to create a ServiceStack plugin that supports both Funq and ASP.NET Core IOC. The plugin registers its dependencies and services in the IConfigureServices.Configure method, allowing compatibility with both IOC containers.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ServerEventsFeature : IPlugin, IConfigureServices\n{\n    //...\n    public void Configure(IServiceCollection services)\n    {\n        if (!services.Exists<IServerEvents>())\n        {\n            services.AddSingleton<IServerEvents>(new MemoryServerEvents\n            {\n                IdleTimeout = IdleTimeout,\n                HouseKeepingInterval = HouseKeepingInterval,\n                OnSubscribeAsync = OnSubscribeAsync,\n                OnUnsubscribeAsync = OnUnsubscribeAsync,\n                OnUpdateAsync = OnUpdateAsync,\n                NotifyChannelOfSubscriptions = NotifyChannelOfSubscriptions,\n                Serialize = Serialize,\n                OnError = OnError,\n            });\n        }\n        \n        if (UnRegisterPath != null)\n            services.RegisterService<ServerEventsUnRegisterService>(UnRegisterPath);\n\n        if (SubscribersPath != null)\n            services.RegisterService<ServerEventsSubscribersService>(SubscribersPath);\n    }\n\n    public void Register(IAppHost appHost)\n    {\n        //...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Identity Auth Providers in ServiceStack\nDESCRIPTION: This code snippet shows how to customize individual Identity Auth Providers in ServiceStack, including ApplicationAuthProvider, CredentialsAuthProvider, and JwtAuthProvider.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nPlugins.Add(new AuthFeature(IdentityAuth.For<ApplicationUser>(options => {\n        // Configure IdentityApplicationAuthProvider\n        options.AuthApplication...\n\n        // Configure IdentityCredentialsAuthProvider\n        options.EnableCredentialsAuth = true;\n        options.AuthCredentials...\n\n        // Configure IdentityJwtAuthProvider\n        options.EnableJwtAuth = true;\n        options.AuthJwt...\n    })\n));\n```\n\n----------------------------------------\n\nTITLE: Adding Client-side Interactivity with JavaScript in Static Blazor Components\nDESCRIPTION: HTML example showing how to add client-side interactivity to a static Blazor component using JavaScript onclick handlers to toggle UI elements without requiring Blazor's interactive rendering modes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"nav-scrollable\" onclick=\"document.querySelector('.navbar-toggler').click()\">\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection with Primary Constructors in C# 12\nDESCRIPTION: Example of using constructor injection with primary constructors in ServiceStack Services, demonstrating dependency injection with IAutoQueryDb\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TechStackServices(IAutoQueryDb autoQuery) : Service\n{\n    public async Task<object> Any(QueryTechStacks request)\n    {\n        using var db = autoQuery.GetDb(request, base.Request);\n        var q = autoQuery.CreateQuery(request, Request, db);\n        return await autoQuery.ExecuteAsync(request, q, db);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity Auth in ServiceStack with ApplicationUser Model\nDESCRIPTION: Registering the AuthFeature plugin with the application's custom EF ApplicationUser data model to configure ServiceStack to use Identity Auth.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nPlugins.Add(new AuthFeature(IdentityAuth.For<ApplicationUser>()));\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthFeature with Identity Auth Admin UI in C#\nDESCRIPTION: This snippet shows how to enable the Identity Auth Admin UI when registering the AuthFeature plugin. It sets up credentials authentication and enables the AdminUsersFeature.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-10_identity-auth-admin-ui.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConfigureAuth : IHostingStartup\n{\n    public void Configure(IWebHostBuilder builder) => builder\n        .ConfigureServices(services => {\n            services.AddPlugin(new AuthFeature(IdentityAuth.For<ApplicationUser>(\n                options => {\n                    options.SessionFactory = () => new CustomUserSession();\n                    options.CredentialsAuth();\n                    options.AdminUsersFeature();\n                })));\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JsonApiClient to Use System.Text.Json\nDESCRIPTION: Shows how to configure the JsonApiClient to use System.Text.Json for external clients and how to customize the JsonSerializerOptions.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-09_system-text-json-apis.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nClientConfig.UseSystemJson = UseSystemJson.Always;\n```\n\nLANGUAGE: csharp\nCODE:\n```\nTextConfig.ConfigureSystemJsonOptions(options => {\n    options.PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower;\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Additional ServiceStack Auth Features with Identity Auth\nDESCRIPTION: This snippet demonstrates how to enable additional ServiceStack authentication features when using Identity Auth, such as the Register API and role assignment services.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nPlugins.Add(new AuthFeature(IdentityAuth.For<ApplicationUser>(options => {\n    // Include ServiceStack's Register API\n    options.IncludeRegisterService = true;\n    \n    // Include ServiceStack's AssignRoles and UnAssignRoles APIs\n    options.IncludeAssignRoleServices = true;\n)));\n```\n\n----------------------------------------\n\nTITLE: Calling ServiceStack REST Service from C# Client\nDESCRIPTION: This snippet demonstrates how to call the CustomerService REST endpoints using a C# client. It shows CRUD operations using the JsonServiceClient.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new JsonServiceClient(BaseUri);\n\n//GET /customers\nvar all = client.Get(new GetCustomers());                         // Count = 0\n\n//POST /customers\nvar customer = client.Post(new CreateCustomer { Name = \"Foo\" });\n\n//GET /customer/1\ncustomer = client.Get(new GetCustomer { Id = customer.Id });      // Name = Foo\n\n//GET /customers\nall = client.Get(new GetCustomers());                             // Count = 1\n\n//PUT /customers/1\ncustomer = client.Put(\n    new UpdateCustomer { Id = customer.Id, Name = \"Bar\" });       // Name = Bar\n\n//DELETE /customers/1\nclient.Delete(new DeleteCustomer { Id = customer.Id });\n\n//GET /customers\nall = client.Get(new GetCustomers());                             // Count = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached ICacheClient in ServiceStack AppHost\nDESCRIPTION: This snippet demonstrates how to register the MemcachedClientCache implementation as the ICacheClient in a ServiceStack application's AppHost configuration. It uses ServiceStack's dependency injection container to register the Memcached client adapter.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/src/ServiceStack.Caching.Memcached/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AppHost : AppHostBase\n{\n\tpublic override void Configure(Container container)\n\t{\n\t\tcontainer.Register<ICacheClient>(new MemcachedClientCache());\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using JsonServiceClient with ES modules in web pages\nDESCRIPTION: Example of using ServiceStack's JsonApiClient with ESM imports to call a typed API endpoint. The script imports the client library and typed DTOs, then sets up an event handler to call the API when the input value changes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-21_start.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\nimport { JsonApiClient, $1, on } from '@servicestack/client'\nimport { Hello } from '/types/mjs'\n\non('#txtName', {\n    async keyup(el) {\n        const client = JsonApiClient.create()\n        const api = await client.api(new Hello({ name:el.target.value }))\n        $1('#result').innerHTML = api.response.result\n    }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Roles in ASP.NET Core Identity\nDESCRIPTION: This snippet demonstrates how to create roles in the Identity system of ASP.NET Core by checking if each role already exists and creating it if it does not. This is essential for proper role management in applications.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nstring[] allRoles = [...]; // All Roles in your App\nvar roleManager = services.GetRequiredService<RoleManager<IdentityRole>>();\nforeach (var roleName in allRoles)\n{\n    var roleExist = await roleManager.RoleExistsAsync(roleName);\n    if (!roleExist)\n    {\n        await roleManager.CreateAsync(new IdentityRole(roleName));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication Options\nDESCRIPTION: Comprehensive configuration options for JWT authentication including token expiry, refresh token expiry, custom claims, and behavior on logout.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-11_jwt-identity-auth.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\noptions.JwtAuth(x => {\n    // How long should JWT Tokens be valid for. (default 14 days)\n    x.ExpireTokensIn = TimeSpan.FromDays(14);\n    \n    // How long should JWT Refresh Tokens be valid for. (default 90 days)\n    x.ExpireRefreshTokensIn = TimeSpan.FromDays(90);\n    \n    x.OnTokenCreated = (req, user, claims) => {\n        // Customize which claims are included in the JWT Token\n    };\n    \n    // Whether to invalidate Refresh Tokens on Logout (default true)\n    x.InvalidateRefreshTokenOnLogout = true;\n    \n    // How long to extend the expiry of Refresh Tokens after usage (default None)\n    x.ExtendRefreshTokenExpiryAfterUsage = null;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Application User Primary Key in ServiceStack\nDESCRIPTION: This snippet demonstrates how to configure a custom application user primary key (int) in ServiceStack when using Identity Auth, including modifying the EF IdentityUser Data Model and registering the AuthFeature plugin.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class AppUser : IdentityUser<int>\n{\n    //...\n}\n\npublic class ConfigureAuth : IHostingStartup\n{\n    public void Configure(IWebHostBuilder builder) => builder\n        .ConfigureAppHost(appHost => {\n            appHost.Plugins.Add(new AuthFeature(IdentityAuth.For<AppUser,int>(\n                options => {\n                    options.EnableCredentialsAuth = true;\n                    options.SessionFactory = () => new CustomUserSession();\n                })\n            ));\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity Auth Providers in ServiceStack\nDESCRIPTION: This snippet demonstrates how to configure Identity Auth Providers in ServiceStack using the AuthFeature plugin. It shows how to enable credentials auth and set up a custom user session.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConfigureAuth : IHostingStartup\n{\n    public void Configure(IWebHostBuilder builder) => builder\n        .ConfigureAppHost(appHost => \n        {\n            appHost.Plugins.Add(new AuthFeature(IdentityAuth.For<ApplicationUser>(\n                // Configure ServiceStack's Integration with Identity Auth\n                options => {\n                    options.EnableCredentialsAuth = true;\n                    options.SessionFactory = () => new CustomUserSession();\n                })\n            ));\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Blazor Loading Component for Prerendered Content\nDESCRIPTION: Razor component that prevents 'yanking' of prerendered content by checking if the current prerendered HTML matches the current route. If it does, it displays the prerendered content instead of the loading spinner.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/prerender.md#2025-04-16_snippet_6\n\nLANGUAGE: razor\nCODE:\n```\n@inject IJSRuntime JsRuntime\n@inject NavigationManager NavigationManager\n\n@if (!string.IsNullOrEmpty(prerenderedHtml))\n{\n    @((MarkupString)prerenderedHtml)\n}\nelse\n{\n    <div class=@CssUtils.ClassNames(\"spinner-border float-start mt-2 mr-2\", @class)>\n        <span class=\"sr-only\"></span>\n    </div>\n    <h1 style=\"font-size:36px\">\n        Loading...\n    </h1>\n}\n\n@code {\n    [Parameter]\n    public string Message { get; set; } = \"Loading...\";\n\n    [Parameter]\n    public string @class { get; set; } = \"\";\n\n    public string prerenderedHtml { get; set; } = \"\";\n\n    protected override async Task OnInitializedAsync()\n    {\n        var html = await JsRuntime.InvokeAsync<string>(\"JS.prerenderedPage\") ?? \"\";\n        var currentPath = new Uri(NavigationManager.Uri).AbsolutePath;\n        if (html.IndexOf($\"data-prerender=\\\"{currentPath}\\\"\") >= 0)\n            prerenderedHtml = html;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Schemes\nDESCRIPTION: Shows how to specify default authentication schemes for ServiceStack APIs\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseServiceStack(new AppHost(), options => {\n    options.AuthenticationSchemes = \"Identity.Application,Bearer\";\n    options.MapEndpoints();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Markdown Features in ASP.NET Core\nDESCRIPTION: Configures dependency injection for markdown-based features and initializes markdown content from specific directories using Virtual File System\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConfigureSsg : IHostingStartup\n{\n    public void Configure(IWebHostBuilder builder) => builder\n        .ConfigureServices(services =>{\n            services.AddSingleton<RazorPagesEngine>();\n            services.AddSingleton<MarkdownPages>();\n            services.AddSingleton<MarkdownWhatsNew>();\n            services.AddSingleton<MarkdownBlog>();\n        })\n        .ConfigureAppHost(afterPluginsLoaded: appHost => {\n            var pages = appHost.Resolve<MarkdownPages>();\n            var whatsNew = appHost.Resolve<MarkdownWhatsNew>();\n            var blogPosts = appHost.Resolve<MarkdownBlog>();\n            \n            var features = new IMarkdownPages[] { pages, whatsNew, blogPosts }; \n            features.Each(x => x.VirtualFiles = appHost.VirtualFiles);\n\n            // Custom initialization\n            blogPosts.Authors = Authors;\n\n            // Load feature markdown content\n            pages.LoadFrom(\"_pages\");\n            whatsNew.LoadFrom(\"_whatsnew\");\n            blogPosts.LoadFrom(\"_posts\");\n        });\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Calling ServiceStack REST Service from jQuery\nDESCRIPTION: This snippet demonstrates how to call the CustomerService GET endpoint using plain jQuery without TypeScript.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/README.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n$.getJSON(baseUri + \"/customers\", function(r) {\n\tvar results = r.results;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in ASP.NET Core\nDESCRIPTION: This snippet configures the authentication services for the application, including the setup of Identity options, Data Protection, and Entity Framework integration for the user context. This setup is fundamental for enabling secure identity management.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddAuthentication(IdentityConstants.ApplicationScheme)\n    .AddIdentityCookies();\nservices.AddDataProtection()\n    .PersistKeysToFileSystem(new DirectoryInfo(\"App_Data\"));\n\n// $ dotnet ef migrations add CreateIdentitySchema\n// $ dotnet ef database update\nvar connectionString = config.GetConnectionString(\"DefaultConnection\") ?? throw new InvalidOperationException(\"Connection string 'DefaultConnection' not found.\");\nservices.AddDbContext<ApplicationDbContext>(options =>\n    options.UseSqlite(connectionString, b => b.MigrationsAssembly(nameof(MyApp))));\nservices.AddDatabaseDeveloperPageExceptionFilter();\n\nservices.AddIdentityCore<ApplicationUser>(options => options.SignIn.RequireConfirmedAccount = true)\n    .AddRoles<IdentityRole>()\n    .AddEntityFrameworkStores<ApplicationDbContext>()\n    .AddSignInManager()\n    .AddDefaultTokenProviders();\n\nservices.AddSingleton<IEmailSender, NoOpEmailSender>();\nservices.AddScoped<IUserClaimsPrincipalFactory<ApplicationUser>, AdditionalUserClaimsPrincipalFactory>();\n```\n\n----------------------------------------\n\nTITLE: Customizing Endpoint Mapping in C#\nDESCRIPTION: This snippet illustrates how to customize endpoint registration using RouteHandlerBuilders within ServiceStack, providing support for Open API v3 integration.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\noptions.RouteHandlerBuilders.Add((builder, operation, method, route) =>\n{\n    builder.WithOpenApi(op => { ... });\n});\n```\n\n----------------------------------------\n\nTITLE: Calling ServiceStack REST Service from Angular HTTP Client\nDESCRIPTION: This snippet shows how to call the CustomerService GET endpoint using Angular's HTTP Client with TypeScript definitions.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/README.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthis.http.get<GetCustomersResponse>(createUrl('/customers', request)).subscribe(r => {\n    this.results = r.results;\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SQL Translation with OrmLite and Firebird in C#\nDESCRIPTION: This snippet contains the entire process of translating C# expressions into SQL using the SqlExpressionVisitor<T> in the ServiceStack OrmLite framework, specifically for Firebird SQL. It requires the FirebirdOrmLiteDialectProvider from ServiceStack.OrmLite and a connection string for the Firebird database. The code demonstrates creating and managing a collection of Author entities, executing SQL-like operations in C# such as selects, inserts, updates, deletes, and ordering. This is achieved through the setup of an IDbConnection and IDbCommand to execute translated queries based on defined expressions. Key functionalities include the manipulation of database records with conditions based on attributes of the Author class.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite.Oracle/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Author{\npublic Author(){}\n[AutoIncrement]\npublic Int32 Id { get; set;}\n[Index(Unique = true)]\n[StringLength(40)]\npublic string Name { get; set;}\npublic DateTime Birthday { get; set;}\npublic DateTime ? LastActivity  { get; set;}\npublic Decimal? Earnings { get; set;}  \npublic bool Active { get; set; } \n[StringLength(80)]\npublic string City { get; set;}\n[StringLength(80)]\npublic string Comments { get; set;}\npublic Int16 Rate{ get; set;}\n}\n\nclass MainClass\n{\npublic static void Main (string[] args)\n{\nConsole.WriteLine (\"Hello World!\");\nOrmLiteConfig.DialectProvider = new FirebirdOrmLiteDialectProvider();\nSqlExpressionVisitor<Author> ev = OrmLiteConfig.DialectProvider.ExpressionVisitor<Author>();\nusing (IDbConnection db =\n\"User=SYSDBA;Password=masterkey;Database=employee.fdb;DataSource=localhost;Dialect=3;charset=ISO8859_1;\".OpenDbConnection())\nusing ( IDbCommand dbCmd = db.CreateCommand())\n{\ndbCmd.DropTable<Author>();\ndbCmd.CreateTable<Author>();\ndbCmd.DeleteAll<Author>();\nList<Author> authors = new List<Author>();\nauthors.Add(new Author(){Name=\"Demis Bellot\",Birthday= DateTime.Today.AddYears(-20),Active=true,Earnings= 99.9m,Comments=\"CSharp books\", Rate=10, City=\"London\"});\nauthors.Add(new Author(){Name=\"Angel Colmenares\",Birthday= DateTime.Today.AddYears(-25),Active=true,Earnings= 50.0m,Comments=\"CSharp books\", Rate=5, City=\"Bogota\"});\nauthors.Add(new Author(){Name=\"Adam Witco\",Birthday= DateTime.Today.AddYears(-20),Active=true,Earnings= 80.0m,Comments=\"Math Books\", Rate=9, City=\"London\"});\nauthors.Add(new Author(){Name=\"Claudia Espinel\",Birthday= DateTime.Today.AddYears(-23),Active=true,Earnings= 60.0m,Comments=\"Cooking books\", Rate=10, City=\"Bogota\"});\nauthors.Add(new Author(){Name=\"Libardo Pajaro\",Birthday= DateTime.Today.AddYears(-25),Active=true,Earnings= 80.0m,Comments=\"CSharp books\", Rate=9, City=\"Bogota\"});\nauthors.Add(new Author(){Name=\"Jorge Garzon\",Birthday= DateTime.Today.AddYears(-28),Active=true,Earnings= 70.0m,Comments=\"CSharp books\", Rate=9, City=\"Bogota\"});\nauthors.Add(new Author(){Name=\"Alejandro Isaza\",Birthday= DateTime.Today.AddYears(-20),Active=true,Earnings= 70.0m,Comments=\"Java books\", Rate=0, City=\"Bogota\"});\nauthors.Add(new Author(){Name=\"Wilmer Agamez\",Birthday= DateTime.Today.AddYears(-20),Active=true,Earnings= 30.0m,Comments=\"Java books\", Rate=0, City=\"Cartagena\"});\nauthors.Add(new Author(){Name=\"Rodger Contreras\",Birthday= DateTime.Today.AddYears(-25),Active=true,Earnings= 90.0m,Comments=\"CSharp books\", Rate=8, City=\"Cartagena\"});\nauthors.Add(new Author(){Name=\"Chuck Benedict\",Birthday= DateTime.Today.AddYears(-22),Active=true,Earnings= 85.5m,Comments=\"CSharp books\", Rate=8, City=\"London\"});\nauthors.Add(new Author(){Name=\"James Benedict II\",Birthday= DateTime.Today.AddYears(-22),Active=true,Earnings= 85.5m,Comments=\"Java books\", Rate=5, City=\"Berlin\"});\nauthors.Add(new Author(){Name=\"Ethan Brown\",Birthday= DateTime.Today.AddYears(-20),Active=true,Earnings= 45.0m,Comments=\"CSharp books\", Rate=5, City=\"Madrid\"});\nauthors.Add(new Author(){Name=\"Xavi Garzon\",Birthday= DateTime.Today.AddYears(-22),Active=true,Earnings= 75.0m,Comments=\"CSharp books\", Rate=9, City=\"Madrid\"});\nauthors.Add(new Author(){Name=\"Luis garzon\",Birthday= DateTime.Today.AddYears(-22),Active=true,Earnings= 85.0m,Comments=\"CSharp books\", Rate=10, City=\"Mexico\"});\ndbCmd.InsertAll(authors);\n// lets start !\n// select authors born 20 year ago\nint year = DateTime.Today.AddYears(-20).Year;\nint expected=5;\nev.Where(rn=> rn.Birthday>=new DateTime(year, 1,1) && rn.Birthday<=new DateTime(year, 12,31));\nList<Author> result=dbCmd.Select(ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\n// select authors from London, Berlin and Madrid : 6\nexpected=6;\nev.Where(rn=> Sql.In( rn.City, new object[]{\"London\", \"Madrid\", \"Berlin\"}) );\nresult=dbCmd.Select(ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\n// select authors from Bogota and Cartagena : 7\nexpected=7;\nList<object> cities = new List<object>(new object[]{\"Bogota\", \"Cartagena\"}  ); //works only object..\nev.Where(rn=> Sql.In( rn.City, cities) );\nresult=dbCmd.Select(ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\n// select authors which name starts with A\nexpected=3;\nev.Where(rn=>  rn.Name.StartsWith(\"A\") );\nresult=dbCmd.Select(ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\n// select authors which name ends with Garzon o GARZON o garzon ( no case sensitive )\nexpected=3;\nev.Where(rn=>  rn.Name.ToUpper().EndsWith(\"GARZON\") );\nresult=dbCmd.Select(ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\n// select authors which name ends with garzon ( case sensitive )\nexpected=1;\nev.Where(rn=>  rn.Name.EndsWith(\"garzon\") );\nresult=dbCmd.Select(ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\n// select authors which name contains  Benedict \nexpected=2;\nev.Where(rn=>  rn.Name.Contains(\"Benedict\") );\nresult=dbCmd.Select(ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\n// select authors with Earnings <= 50 \nexpected=3;\nev.Where(rn=>  rn.Earnings<=50 );\nresult=dbCmd.Select(ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\n// select authors with Rate = 10 and city=Mexio \nexpected=1;\nev.Where(rn=>  rn.Rate==10 && rn.City==\"Mexico\");\nresult=dbCmd.Select(ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\n//  enough selecting, lets udpate;\n// set Active=false where rate =0\nexpected=2;\nev.Where(rn=>  rn.Rate==0 ).Update(rn=> rn.Active);\nvar rows = dbCmd.Update( new Author(){ Active=false }, ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, rows, expected==rows);\n// insert values  only in Id, Name, Birthday, Rate and Active fields \nexpected=4;\nev.Insert(rn =>new { rn.Id, rn.Name, rn.Birthday, rn.Active, rn.Rate} );\ndbCmd.Insert( new Author(){Active=false, Rate=0, Name=\"Victor Grozny\", Birthday=DateTime.Today.AddYears(-18)   }, ev);\ndbCmd.Insert( new Author(){Active=false, Rate=0, Name=\"Ivan Chorny\", Birthday=DateTime.Today.AddYears(-19)   }, ev);\nev.Where(rn=> !rn.Active);\nresult=dbCmd.Select(ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\n// delete where City is null \nexpected=2;\nev.Where( rn => rn.City==null );\nrows = dbCmd.Delete( ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, rows, expected==rows);\n//   lets select  all records ordered by Rate Descending and Name Ascending\nexpected=14;\nev.Where().OrderBy(rn=> new{ at=Sql.Desc(rn.Rate), rn.Name }); // clear where condition\nresult=dbCmd.Select(ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\nConsole.WriteLine(ev.OrderByExpression);\nvar author = result.FirstOrDefault();\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", \"Claudia Espinel\", author.Name, \"Claudia Espinel\"==author.Name);\n// select  only first 5 rows ....\nexpected=5;\nev.Limit(5); // note: order is the same as in the last sentence\nresult=dbCmd.Select(ev);\nConsole.WriteLine(ev.WhereExpression);\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\n// and finally lets select only Name and City (name will be \"UPPERCASED\" )\nev.Select(rn=> new { at= Sql.As( rn.Name.ToUpper(), \"Name\" ), rn.City} );\nConsole.WriteLine(ev.SelectExpression);\nresult=dbCmd.Select(ev);\nauthor = result.FirstOrDefault();\nConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", \"Claudia Espinel\".ToUpper(), author.Name, \"Claudia Espinel\".ToUpper()==author.Name);\nConsole.ReadLine();\nConsole.WriteLine(\"Press Enter to continue\");\n}\nConsole.WriteLine (\"This is The End my friend!\");\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceStack with Endpoint Routing\nDESCRIPTION: Example of enabling ServiceStack Endpoint Routing using the MapEndpoints() extension method\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseServiceStack(new AppHost(), options => {\n    options.MapEndpoints();\n});\n```\n\n----------------------------------------\n\nTITLE: ServiceStack Root Page Template with Razor Syntax\nDESCRIPTION: A mixed HTML/Markdown template that serves as the root page for a ServiceStack application. It includes a title variable, format options, navigation links, and a section for displaying rockstar data.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir2/default.md#2025-04-16_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\n@var Title = \"Root Page\"\n\n^<div style=\"float:right\">\n\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n\n^</div>\n\n### All Rockstars\n\nsource files for this demo\n\n<!--view:Pages/Dir2/default.md-->\n```\n\n----------------------------------------\n\nTITLE: Integrating ServiceStack API Call within Vue Component - JavaScript\nDESCRIPTION: This Vue component snippet uses the ServiceStack client to make an API call based on the 'name' data. It demonstrates reactivity with Vue's ref and includes error handling. The useClient hook provides contextual API management, ensuring simplified API interactions without extensive boilerplate code.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from \"vue\"\nimport { useClient } from \"@servicestack/vue\"\nimport { Hello } from \"../dtos.mjs\"\n\nexport default {\n    template:/*html*/`<div class=\"flex flex-wrap justify-center\">\n        <TextInput v-model=\"name\" @keyup=\"update\" />\n        <div class=\"ml-3 mt-2 text-lg\">{{ result }}</div>\n    </div>`,\n    props:['value'],\n    setup(props) {\n        let name = ref(props.value)\n        let result = ref('')\n        let client = useClient()\n\n        async function update() {\n            let api = await client.api(new Hello({ name }))\n            if (api.succeeded) {\n                result.value = api.response.result\n            }\n        }\n        update()\n\n        return { name, update, result }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin User Events in Identity Auth Admin UI\nDESCRIPTION: This code shows how to set up event handlers for various user management actions in the Identity Auth Admin UI, including before and after creating, updating, and deleting users.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-10_identity-auth-admin-ui.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nfeature.OnBeforeCreateUser = (request, user) => { ... };\nfeature.OnAfterCreateUser  = (request, user) => { ... };\nfeature.OnBeforeUpdateUser = (request, user) => { ... };\nfeature.OnAfterUpdateUser  = (request, user) => { ... };\nfeature.OnBeforeDeleteUser = (request, userId) => { ... };\nfeature.OnAfterDeleteUser  = (request, userId) => { ... };\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Operation Filter for Swagger UI Customization\nDESCRIPTION: This code implements a custom OperationFilter to customize the OpenAPI specification for a specific endpoint. It changes the schema reference for the request body of the UpdateTodo operation.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-08_openapi-v3.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OperationRenameFilter : IOperationFilter\n{\n    public void Apply(OpenApiOperation operation, OperationFilterContext context)\n    {\n        if (context.ApiDescription.HttpMethod == \"PUT\" &&\n            context.ApiDescription.RelativePath == \"todos/{Id}\")\n        {\n            operation.RequestBody.Content[\"application/json\"].Schema.Reference = \n                new OpenApiReference {\n                    Type = ReferenceType.Schema,\n                    Id = \"Todo\"\n                };\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Gateway API Call (C#)\nDESCRIPTION: This C# snippet showcases how to call an API using the Service Gateway and return its JSON response. It uses `Gateway.ApiAsync` to invoke the `QueryTodos` API and then extracts the `Results` from the response and converts them into raw JSON format.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\n(await Gateway.ApiAsync(new QueryTodos())).Response?.Results.AsRawJson();\n```\n\n----------------------------------------\n\nTITLE: Property Injection with FromServices Attribute\nDESCRIPTION: Demonstrates property injection using the [FromServices] attribute for optional dependencies in ServiceStack Services\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class TechStackServices : Service\n{\n    [FromServices]\n    public required IAutoQueryDb AutoQuery { get; set; }\n\n    [FromServices]\n    public MyDependency? OptionalDependency { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing C# Prerendering Tasks using bUnit\nDESCRIPTION: A C# test class that uses bUnit to render Blazor components and save their HTML output as prerendered content. The class uses NUnit testing framework and can be executed during build or deployment processes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/prerender.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture, Category(\"prerender\")]\npublic class PrerenderTasks\n{\n    Bunit.TestContext Context;\n    string ClientDir;\n    string WwrootDir => ClientDir.CombineWith(\"wwwroot\");\n    string PrerenderDir => WwrootDir.CombineWith(\"prerender\");\n\n    public PrerenderTasks()\n    {\n        Context = new();\n        var config = new ConfigurationBuilder().AddJsonFile(\"appsettings.json\").Build();\n        ClientDir = config[nameof(ClientDir)] \n            ?? throw new Exception($\"{nameof(ClientDir)} not defined in appsettings.json\");\n        FileSystemVirtualFiles.RecreateDirectory(PrerenderDir);\n    }\n\n    void Render<T>(params ComponentParameter[] parameters) where T : IComponent\n    {\n        WriteLine($\"Rendering: {typeof(T).FullName}...\");\n        var component = Context.RenderComponent<T>(parameters);\n        var route = typeof(T).GetCustomAttribute<RouteAttribute>()?.Template;\n        if (string.IsNullOrEmpty(route))\n            throw new Exception($\"Couldn't infer @page for component {typeof(T).Name}\");\n\n        var fileName = route.EndsWith(\"/\") ? route + \"index.html\" : $\"{route}.html\";\n\n        var writeTo = Path.GetFullPath(PrerenderDir.CombineWith(fileName));\n        WriteLine($\"Written to {writeTo}\");\n        File.WriteAllText(writeTo, component.Markup);\n    }\n\n    [Test]\n    public void PrerenderPages()\n    {\n        Render<Client.Pages.Index>();\n        // Add Pages to prerender...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Page Razor Template with Navigation and Format Options\nDESCRIPTION: This Razor template defines the root page of a ServiceStack application. It includes a title variable, links to view the page in different formats (JSON, XML, JSV, CSV), navigation links to other pages, and a section for displaying all rockstars with a reference to its source files.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/MRootPage.md#2025-04-16_snippet_0\n\nLANGUAGE: razor\nCODE:\n```\n@var Title = \"Root Page\"\n\n^<div style=\"float:right\">\n\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n\n^</div>\n\n### All Rockstars\n\nsource files for this demo\n\n<!--view:MRootPage.md-->\n```\n\n----------------------------------------\n\nTITLE: Main Method Implementation with Database Operations\nDESCRIPTION: The Main method showcases how to configure the OrmLite dialect provider for Firebird and execute a series of database operations using the SqlExpressionVisitor class. It includes creating a connection, creating the Author table, inserting records, performing selections with various conditions, updating records, and deleting entries based on specified criteria.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite.Firebird/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nclass MainClass\n{\n\tpublic static void Main (string[] args)\n\t{\n\t\tConsole.WriteLine (\"Hello World!\");\n\t\tOrmLiteConfig.DialectProvider = new FirebirdOrmLiteDialectProvider();\n\t\tSqlExpressionVisitor<Author> ev = OrmLiteConfig.DialectProvider.ExpressionVisitor<Author>();\n\t\tusing (IDbConnection db =\n\t\t\t\"User=SYSDBA;Password=masterkey;Database=employee.fdb;DataSource=localhost;Dialect=3;charset=ISO8859_1;\".OpenDbConnection())\n\t\tusing ( IDbCommand dbCmd = db.CreateCommand())\n\t\t{\n\t\t\tdbCmd.DropTable<Author>();\n\t\t\tdbCmd.CreateTable<Author>();\n\t\t\tdbCmd.DeleteAll<Author>();\n\t\t\tList<Author> authors = new List<Author>();\n\t\t\tauthors.Add(new Author(){Name=\"Demis Bellot\",Birthday= DateTime.Today.AddYears(-20),Active=true,Earnings= 99.9m,Comments=\"CSharp books\", Rate=10, City=\"London\"});\n\t\t\tauthors.Add(new Author(){Name=\"Angel Colmenares\",Birthday= DateTime.Today.AddYears(-25),Active=true,Earnings= 50.0m,Comments=\"CSharp books\", Rate=5, City=\"Bogota\"});\n\t\t\tauthors.Add(new Author(){Name=\"Adam Witco\",Birthday= DateTime.Today.AddYears(-20),Active=true,Earnings= 80.0m,Comments=\"Math Books\", Rate=9, City=\"London\"});\n\t\t\tauthors.Add(new Author(){Name=\"Claudia Espinel\",Birthday= DateTime.Today.AddYears(-23),Active=true,Earnings= 60.0m,Comments=\"Cooking books\", Rate=10, City=\"Bogota\"});\n\t\t\tauthors.Add(new Author(){Name=\"Libardo Pajaro\",Birthday= DateTime.Today.AddYears(-25),Active=true,Earnings= 80.0m,Comments=\"CSharp books\", Rate=9, City=\"Bogota\"});\n\t\t\tauthors.Add(new Author(){Name=\"Jorge Garzon\",Birthday= DateTime.Today.AddYears(-28),Active=true,Earnings= 70.0m,Comments=\"CSharp books\", Rate=9, City=\"Bogota\"});\n\t\t\tauthors.Add(new Author(){Name=\"Alejandro Isaza\",Birthday= DateTime.Today.AddYears(-20),Active=true,Earnings= 70.0m,Comments=\"Java books\", Rate=0, City=\"Bogota\"});\n\t\t\tauthors.Add(new Author(){Name=\"Wilmer Agamez\",Birthday= DateTime.Today.AddYears(-20),Active=true,Earnings= 30.0m,Comments=\"Java books\", Rate=0, City=\"Cartagena\"});\n\t\t\tauthors.Add(new Author(){Name=\"Rodger Contreras\",Birthday= DateTime.Today.AddYears(-25),Active=true,Earnings= 90.0m,Comments=\"CSharp books\", Rate=8, City=\"Cartagena\"});\n\t\t\tauthors.Add(new Author(){Name=\"Chuck Benedict\",Birthday= DateTime.Today.AddYears(-22),Active=true,Earnings= 85.5m,Comments=\"CSharp books\", Rate=8, City=\"London\"});\n\t\t\tauthors.Add(new Author(){Name=\"James Benedict II\",Birthday= DateTime.Today.AddYears(-22),Active=true,Earnings= 85.5m,Comments=\"Java books\", Rate=5, City=\"Berlin\"});\n\t\t\tauthors.Add(new Author(){Name=\"Ethan Brown\",Birthday= DateTime.Today.AddYears(-20),Active=true,Earnings= 45.0m,Comments=\"CSharp books\", Rate=5, City=\"Madrid\"});\n\t\t\tauthors.Add(new Author(){Name=\"Xavi Garzon\",Birthday= DateTime.Today.AddYears(-22),Active=true,Earnings= 75.0m,Comments=\"CSharp books\", Rate=9, City=\"Madrid\"});\n\t\t\tauthors.Add(new Author(){Name=\"Luis garzon\",Birthday= DateTime.Today.AddYears(-22),Active=true,Earnings= 85.0m,Comments=\"CSharp books\", Rate=10, City=\"Mexico\"});\n\t\t\tdbCmd.InsertAll(authors);\n\t\t\t// lets start !\n\t\t\t// select authors born 20 year ago\n\t\t\tint year = DateTime.Today.AddYears(-20).Year;\n\t\t\tint expected=5;\n\t\t\tev.Where(rn=> rn.Birthday>=new DateTime(year, 1,1) && rn.Birthday<=new DateTime(year, 12,31));\n\t\t\tList<Author> result=dbCmd.Select(ev);\n\t\t\tConsole.WriteLine(ev.WhereExpression);\n\t\t\tConsole.WriteLine(\"Expected:{0} ; Selected:{1}, OK? {2}\", expected, result.Count, expected==result.Count);\n\t\t\t// Additional selects and operations... \n\t\t\t// ... more code ...\n\t\t\tConsole.ReadLine();\n\t\t\tConsole.WriteLine(\"Press Enter to continue\");\n\t\t}\n\t\tConsole.WriteLine (\"This is The End my friend!\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Refresh Tokens in ApplicationUser Model\nDESCRIPTION: Extending the IdentityUser class to implement the IRequireRefreshToken interface, which adds properties to store refresh tokens and their expiry dates.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-11_jwt-identity-auth.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ApplicationUser : IdentityUser, IRequireRefreshToken\n{\n    public string? RefreshToken { get; set; }\n    public DateTime? RefreshTokenExpiry { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PrerenderMarkdown Task in C#\nDESCRIPTION: A test method that scans markdown files in a content directory, converts them to HTML using MarkdownUtils, and generates prerendered pages with a template system. Includes a PageTemplate class for parsing and rendering HTML layouts with page markers.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Wasm/Gallery.Wasm.Client/wwwroot/content/prerender.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task PrerenderMarkdown()\n{\n    var srcDir = WwrootDir.CombineWith(\"content\").Replace('\\\\', '/');\n    var dstDir = WwrootDir.CombineWith(\"docs\").Replace('\\\\', '/');\n            \n    var indexPage = PageTemplate.Create(WwrootDir.CombineWith(\"index.html\"));\n    if (!Directory.Exists(srcDir)) throw new Exception($\"{Path.GetFullPath(srcDir)} does not exist\");\n    FileSystemVirtualFiles.RecreateDirectory(dstDir);\n\n    foreach (var file in new DirectoryInfo(srcDir).GetFiles(\"*.md\", SearchOption.AllDirectories))\n    {\n        WriteLine($\"Converting {file.FullName} ...\");\n\n        var name = file.Name.WithoutExtension();\n        var docRender = await Client.MarkdownUtils.LoadDocumentAsync(name, doc =>\n            Task.FromResult(File.ReadAllText(file.FullName)));\n\n        if (docRender.Failed)\n        {\n            WriteLine($\"Failed: {docRender.ErrorMessage}\");\n            continue;\n        }\n\n        var dirName = dstDir.IndexOf(\"wwwroot\") >= 0\n            ? dstDir.LastRightPart(\"wwwroot\").Replace('\\\\', '/')\n            : new DirectoryInfo(dstDir).Name;\n        var path = dirName.CombineWith(name == \"index\" ? \"\" : name);\n\n        var mdBody = @$\"\n<div class=\\\"prose lg:prose-xl min-vh-100 m-3\\\" data-prerender=\\\"{path}\\\">\n    <div class=\\\"markdown-body\\\">\n        {docRender.Response!.Preview!}\n    </div>\n</div>\";\n        var prerenderedPage = indexPage.Render(mdBody);\n        string htmlPath = Path.GetFullPath(Path.Combine(dstDir, $\"{name}.html\"));\n        File.WriteAllText(htmlPath, prerenderedPage);\n        WriteLine($\"Written to {htmlPath}\");\n    }\n}\n\npublic class PageTemplate\n{\n    string? Header { get; set; }\n    string? Footer { get; set; }\n\n    public PageTemplate(string? header, string? footer)\n    {\n        Header = header;\n        Footer = footer;\n    }\n\n    public static PageTemplate Create(string indexPath)\n    {\n        if (!File.Exists(indexPath))\n            throw new Exception($\"{Path.GetFullPath(indexPath)} does not exist\");\n\n        string? header = null;\n        string? footer = null;\n\n        var sb = new StringBuilder();\n        foreach (var line in File.ReadAllLines(indexPath))\n        {\n            if (header == null)\n            {\n                if (line.Contains(\"<!--PAGE-->\"))\n                {\n                    header = sb.ToString(); // capture up to start page marker\n                    sb.Clear();\n                }\n                else sb.AppendLine(line);\n            }\n            else\n            {\n                if (sb.Length == 0)\n                {\n                    if (line.Contains(\"<!--/PAGE-->\")) // discard up to end page marker\n                    {\n                        sb.AppendLine();\n                        continue;\n                    }\n                }\n                else sb.AppendLine(line);\n            }\n        }\n        footer = sb.ToString();\n\n        if (string.IsNullOrEmpty(header) || string.IsNullOrEmpty(footer))\n            throw new Exception($\"Parsing {indexPath} failed, missing <!--PAGE-->...<!--/PAGE--> markers\");\n\n        return new PageTemplate(header, footer);\n    }\n\n    public string Render(string body) => Header + body + Footer;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Typed DTOs in API Calls - JavaScript\nDESCRIPTION: This snippet shows how to import and use a typed DTO in an API call using the @servicestack/client library. It emphasizes the necessity of pre-generating typed DTOs for better IntelliSense support in IDEs during development. The snippet assumes the library dependencies are installed and properly configured.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Hello } from '/js/dtos.mjs'\nclient.api(new Hello({ name }))\n```\n\n----------------------------------------\n\nTITLE: Implementing IEmailSender for ASP.NET Identity\nDESCRIPTION: Implementation of the IEmailSender interface that uses a message queue to publish email requests in a background worker. This is used for sending ASP.NET Identity authentication emails.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\npublic class EmailSender(IMessageService messageService) : IEmailSender\n{\n    public Task SendEmailAsync(string email, string subject, string htmlMessage)\n    {\n        using var mqClient = messageService.CreateMessageProducer();\n        mqClient.Publish(new SendEmail\n        {\n            To = email,\n            Subject = subject,\n            BodyHtml = htmlMessage,\n        });\n\n        return Task.CompletedTask;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JsonServiceClient in JavaScript/TypeScript\nDESCRIPTION: This snippet illustrates how to create a JsonServiceClient with a base URL in JavaScript or TypeScript, which is used for consuming ServiceStack APIs.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new JsonServiceClient(baseUrl);\n```\n\n----------------------------------------\n\nTITLE: Importing typed DTOs for better IDE support\nDESCRIPTION: Example of importing typed DTOs generated by the 'npm run dtos' command, which provides better IDE intellisense and static analysis when calling ServiceStack APIs.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-21_start.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Hello } from '/mjs/dtos.mjs'\nclient.api(new Hello({ name }))\n```\n\n----------------------------------------\n\nTITLE: Defining Author Class in C#\nDESCRIPTION: The Author class defines the properties and attributes necessary for creating instances that can be persisted to the Firebird database. It includes fields such as Id, Name, Birthday, and Earnings, with various data annotations like AutoIncrement and Index, which are essential for ORM configuration.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite.Firebird/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Author{\n\tpublic Author(){}\n\t[AutoIncrement]\n\tpublic Int32 Id { get; set;}\n\t[Index(Unique = true)]\n\t[StringLength(40)]\n\tpublic string Name { get; set;}\n\tpublic DateTime Birthday { get; set;}\n\tpublic DateTime ? LastActivity  { get; set;}\n\tpublic Decimal? Earnings { get; set;}  \n\tpublic bool Active { get; set; } \n\t[StringLength(80)]\n\tpublic string City { get; set;}\n\t[StringLength(80)]\n\tpublic string Comments { get; set;}\n\tpublic Int16 Rate{ get; set;}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Refresh Token for Transparent Authentication\nDESCRIPTION: Example of authenticating with just a refresh token, which will transparently reissue a new JWT access token and then perform the authenticated request.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-11_jwt-identity-auth.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new JsonApiClient(BaseUrl);\nclient.SetRefreshTokenCookie(RefreshToken);\n\nvar response = await client.SendAsync(new Secured { ... });\n```\n\n----------------------------------------\n\nTITLE: Comparison Table of Blazor Implementations in Markdown\nDESCRIPTION: Markdown table comparing different Blazor implementations of the Diffusion project, including live demo URLs and source code links.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n|                     | Live Demo                                                        | Source Code                                                               |\n|---------------------|------------------------------------------------------------------|-------------------------------------------------------------------------|\n| Blazor Vue          | [blazordiffusion.com](https://blazordiffusion.com)               | [BlazorDiffusionVue](https://github.com/NetCoreApps/BlazorDiffusionVue)   |\n| Blazor Web Assembly | [api.blazordiffusion.com](https://api.blazordiffusion.com)       | [BlazorDiffusionWasm](https://github.com/NetCoreApps/BlazorDiffusionWasm) |\n| Blazor Server       | [server.blazordiffusion.com](https://server.blazordiffusion.com) | [BlazorDiffusion](https://github.com/NetCoreApps/BlazorDiffusion)         |\n```\n\n----------------------------------------\n\nTITLE: Hiding ServiceStack Endpoints in C#\nDESCRIPTION: This snippet demonstrates how to use attributes to hide ServiceStack endpoints from metadata and API Explorers by applying [ExcludeMetadata] and [Exclude(Feature.ApiExplorer)] to a request class.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[ExcludeMetadata]\n[Exclude(Feature.ApiExplorer)]\npublic class HiddenRequest {}\n```\n\n----------------------------------------\n\nTITLE: Form Validation with ServiceStack in Vue - JavaScript\nDESCRIPTION: This snippet showcases the integration of client-side validation with API error responses in a Vue component's form. It makes use of the reactive store to handle new todos and display appropriate error messages based on the API's feedback.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet store = {\n    /** @type {Todo[]} */\n    todos: [],\n    newTodo:'',\n    error:null,\n    async addTodo() {\n        this.todos.push(new Todo({ text:this.newTodo }))\n        let api = await client.api(new CreateTodo({ text:this.newTodo }))\n        if (api.succeeded)\n            this.newTodo = ''\n        else\n            this.error = api.error\n    },\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Prerendered Content with JavaScript\nDESCRIPTION: JavaScript code that checks if prerendered content exists for the current path and replaces the loading placeholder with it. This improves initial page load experience by showing static content while the Blazor app loads.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/prerender.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pagePath = path.endsWith('/') \n    ? path.substring(0, path.length - 2) + '/index.html' \n    : path\nfetch(`/prerender${pagePath}`)\n    .then(r => r.text())\n    .then(html => {\n        if (html.indexOf('<!DOCTYPE html>') >= 0) return // ignore CDN 404.html\n        const pageBody = $1('#app-loading .content')\n        if (pageBody) \n            pageBody.innerHTML = `<i hidden data-prerender=\"${path}\"></i>` + html\n    })\n    .catch(/* no prerendered content found for this path */)\n```\n\n----------------------------------------\n\nTITLE: Creating a Smart Loading Component for Prerendered Content\nDESCRIPTION: Blazor component that intelligently displays prerendered content for the current route. It checks if the prerendered HTML matches the current path to avoid unnecessary content flashes during app initialization.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/prerender.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n@inject IJSRuntime JsRuntime\n@inject NavigationManager NavigationManager\n\n@if (!string.IsNullOrEmpty(prerenderedHtml))\n{\n    @((MarkupString)prerenderedHtml)\n}\nelse\n{\n    <div class=@CssUtils.ClassNames(\"spinner-border float-start mt-2 mr-2\", @class)>\n        <span class=\"sr-only\"></span>\n    </div>\n    <h1 style=\"font-size:36px\">\n        Loading...\n    </h1>\n}\n\n@code {\n    [Parameter]\n    public string Message { get; set; } = \"Loading...\";\n\n    [Parameter]\n    public string @class { get; set; } = \"\";\n\n    public string prerenderedHtml { get; set; } = \"\";\n\n    protected override async Task OnInitializedAsync()\n    {\n        var html = await JsRuntime.InvokeAsync<string>(\"JS.prerenderedPage\") ?? \"\";\n        var currentPath = new Uri(NavigationManager.Uri).AbsolutePath;\n        if (html.IndexOf($\"data-prerender=\\\"{currentPath}\\\"\") >= 0)\n            prerenderedHtml = html;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Customer Personal Details\nDESCRIPTION: Displays basic customer information including contact name, company, address, and email using model binding\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/ServiceStack.ServiceHost.Tests/Views/Template/CustomerDetailsResponse.md#2025-04-16_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\n# @customer.ContactName Customer Details (@customer.City, @customer.Country)\n### @customer.ContactTitle \n\n  - **Company Name:** @customer.CompanyName\n  - **Address:** @customer.Address\n  - **Email:** @customer.Email\n```\n\n----------------------------------------\n\nTITLE: Loading Markdown Pages in C# for Razor SSG\nDESCRIPTION: Defines a MarkdownPages class that loads and manages markdown files for the Pages feature in Razor SSG. It includes methods for loading pages, filtering visible pages, and retrieving pages by slug.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MarkdownPages : MarkdownPagesBase<MarkdownFileInfo>\n{\n    public MarkdownPages(ILogger<MarkdownPages> log, IWebHostEnvironment env) \n        : base(log,env) {}\n    \n    List<MarkdownFileInfo> Pages { get; set; } = new();\n    public List<MarkdownFileInfo> VisiblePages => Pages.Where(IsVisible).ToList();\n\n    public MarkdownFileInfo? GetBySlug(string slug) => \n        Fresh(VisiblePages.FirstOrDefault(x => x.Slug == slug));\n\n    public void LoadFrom(string fromDirectory)\n    {\n        Pages.Clear();\n        var fs = AssertVirtualFiles();\n        var files = fs.GetDirectory(fromDirectory).GetAllFiles().ToList();\n        var log = LogManager.GetLogger(GetType());\n        log.InfoFormat(\"Found {0} pages\", files.Count);\n\n        var pipeline = CreatePipeline();\n\n        foreach (var file in files)\n        {\n            var doc = Load(file.VirtualPath, pipeline);\n            if (doc == null)\n                continue;\n\n            Pages.Add(doc);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Vue 3 Component with Props\nDESCRIPTION: Demonstrates creating a simple Vue 3 component with template and props definition for displaying a greeting message.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Hello = {\n    template: `<b>Hello, {{name}}!</b>`,\n    props: { name:String }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Create and Edit User Forms in Identity Auth Admin UI\nDESCRIPTION: This snippet demonstrates how to customize the create and edit user forms by setting a custom lockout date, defining form layout, and overriding user creation and validation.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-10_identity-auth-admin-ui.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nfeature.ResolveLockoutDate = user => DateTimeOffset.Now.AddDays(7);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nfeature.FormLayout =\n[\n    Input.For<ApplicationUser>(x => x.UserName, c => c.FieldsPerRow(2)),\n    Input.For<ApplicationUser>(x => x.Email, c => { \n        c.Type = Input.Types.Email;\n        c.FieldsPerRow(2); \n    }),\n    Input.For<ApplicationUser>(x => x.FirstName, c => c.FieldsPerRow(2)),\n    Input.For<ApplicationUser>(x => x.LastName, c => c.FieldsPerRow(2)),\n    Input.For<ApplicationUser>(x => x.DisplayName, c => c.FieldsPerRow(2)),\n    Input.For<ApplicationUser>(x => x.PhoneNumber, c =>\n    {\n        c.Type = Input.Types.Tel;\n        c.FieldsPerRow(2); \n    }),\n];\n```\n\nLANGUAGE: csharp\nCODE:\n```\nfeature.CreateUser = () => new ApplicationUser { EmailConfirmed = true };\nfeature.CreateUserValidation = async (req, createUser) =>\n{\n    await IdentityAdminUsers.ValidateCreateUserAsync(req, createUser);\n    var displayName = createUser.GetUserProperty(nameof(ApplicationUser.DisplayName));\n    if (string.IsNullOrEmpty(displayName))\n        throw new ArgumentNullException(nameof(AdminUserBase.DisplayName));\n    return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Refresh Token Expiry Extension\nDESCRIPTION: Configuration for extending the expiry of refresh tokens after usage, which allows users to treat refresh tokens like API keys that continue extending while in use.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-11_jwt-identity-auth.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\noptions.JwtAuth(x => {\n    // How long to extend the expiry of Refresh Tokens after usage (default None)\n    x.ExtendRefreshTokenExpiryAfterUsage = TimeSpan.FromDays(90);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI v3 and Swagger UI in ASP.NET Core\nDESCRIPTION: This code snippet shows how to configure OpenAPI v3 and Swagger UI in an ASP.NET Core application using ServiceStack. It includes service registration, Swagger generation, and middleware setup.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-08_openapi-v3.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[assembly: HostingStartup(typeof(MyApp.ConfigureOpenApi))]\n\nnamespace MyApp;\n\npublic class ConfigureOpenApi : IHostingStartup\n{\n    public void Configure(IWebHostBuilder builder) => builder\n        .ConfigureServices((context, services) =>\n        {\n            if (context.HostingEnvironment.IsDevelopment())\n            {\n                services.AddEndpointsApiExplorer();\n                services.AddSwaggerGen(); // Swashbuckle\n\n                services.AddServiceStackSwagger();\n                services.AddBasicAuth<ApplicationUser>(); // Enable HTTP Basic Auth\n                //services.AddJwtAuth(); // Enable & Use JWT Auth\n\n                services.AddTransient<IStartupFilter, StartupFilter>();\n            }\n        });\n\n    public class StartupFilter : IStartupFilter\n    {\n        public Action<IApplicationBuilder> Configure(Action<IApplicationBuilder> next)\n            => app => {\n                // Provided by Swashbuckle library\n                app.UseSwagger();\n                app.UseSwaggerUI();\n                next(app);\n            };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PageTemplate Class in C#\nDESCRIPTION: This code snippet defines a PageTemplate class used for parsing and rendering HTML templates. It includes methods for creating a template from an index.html file and rendering content within the template. The class handles the extraction of header and footer sections from the template file.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/prerender.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PageTemplate\n{\n    string? Header { get; set; }\n    string? Footer { get; set; }\n\n    public PageTemplate(string? header, string? footer)\n    {\n        Header = header;\n        Footer = footer;\n    }\n\n    public static PageTemplate Create(string indexPath)\n    {\n        if (!File.Exists(indexPath))\n            throw new Exception($\"{Path.GetFullPath(indexPath)} does not exist\");\n\n        string? header = null;\n        string? footer = null;\n\n        var sb = new StringBuilder();\n        foreach (var line in File.ReadAllLines(indexPath))\n        {\n            if (header == null)\n            {\n                if (line.Contains(\"<!--PAGE-->\"))\n                {\n                    header = sb.ToString(); // capture up to start page marker\n                    sb.Clear();\n                }\n                else sb.AppendLine(line);\n            }\n            else\n            {\n                if (sb.Length == 0)\n                {\n                    if (line.Contains(\"<!--/PAGE-->\")) // discard up to end page marker\n                    {\n                        sb.AppendLine();\n                        continue;\n                    }\n                }\n                else sb.AppendLine(line);\n            }\n        }\n        footer = sb.ToString();\n\n        if (string.IsNullOrEmpty(header) || string.IsNullOrEmpty(footer))\n            throw new Exception($\"Parsing {indexPath} failed, missing <!--PAGE-->...<!--/PAGE--> markers\");\n\n        return new PageTemplate(header, footer);\n    }\n\n    public string Render(string body) => Header + body + Footer;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Links Section in Markdown\nDESCRIPTION: Defines a navigation section with links to other pages in the ServiceStack application using Markdown syntax. Links point to different endpoints within the application.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir/MPage2.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Pages in Razor for Razor SSG\nDESCRIPTION: Implements a Razor Page that renders markdown content for the Pages feature in Razor SSG. It handles page routing, static prop generation, and applies custom layouts based on frontmatter.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n@page \"/{slug}\"\n@model MyApp.Page\n@inject MarkdownPages Markdown\n\n@implements IRenderStatic<MyApp.Page>\n@functions {\n    public List<Page> GetStaticProps(RenderContext ctx)\n    {\n        var markdown = ctx.Resolve<MarkdownPages>();\n        return markdown.VisiblePages.Map(page => new Page { Slug = page.Slug! });\n    }\n}\n\n@{\n    var doc = Markdown.GetBySlug(Model.Slug);\n    if (doc.Layout != null) \n        Layout = doc.Layout == \"none\"\n            ? null\n            : doc.Layout;\n    ViewData[\"Title\"] = doc.Title;\n}\n\n<link rel=\"stylesheet\" href=\"css/typography.css\">\n<section class=\"flex-col md:flex-row flex justify-center mt-16 mb-16 md:mb-12\">\n    <h1 class=\"text-4xl tracking-tight font-extrabold text-gray-900\">\n        @doc.Title\n    </h1>\n</section>    \n<div class=\"mx-auto\">\n    <div class=\"mx-auto prose lg:prose-xl mb-24\">\n        @Html.Raw(doc.Preview)\n    </div>\n</div>\n\n@await Html.PartialAsync(\"HighlightIncludes\")\n<script>hljs.highlightAll()</script>\n```\n\n----------------------------------------\n\nTITLE: Converting Session to Token in .NET Client\nDESCRIPTION: Example of calling the ConvertSessionToToken service from a .NET client to convert an authenticated session into a JWT token.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-11_jwt-identity-auth.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.SendAsync(new ConvertSessionToToken());\n```\n\n----------------------------------------\n\nTITLE: Defining a ServiceStack Request DTO for Updating a Todo Item\nDESCRIPTION: This snippet defines a ServiceStack Request DTO called UpdateTodo for updating a todo item. It includes route information, validation attributes, and specifies the return type.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-08_openapi-v3.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[Route(\"/todos/{Id}\", \"PUT\")]\npublic class UpdateTodo : IPut, IReturn<Todo>\n{\n    public long Id { get; set; }\n    [ValidateNotEmpty]\n    public string Text { get; set; }\n    public bool IsFinished { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Prerendered HTML Files in C#\nDESCRIPTION: Code that saves prerendered HTML content to disk for each blog post and the index page. This creates static HTML files that can be served without dynamic processing at runtime.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_prerendering.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (var file in files)\n{\n    // prerender /blog/{slug}.html\n    if (renderTo != null)\n    {\n        log.InfoFormat(\"Writing {0}/{1}...\", renderTo, doc.HtmlFileName);\n        fs.WriteFile($\"{renderTo}/{doc.HtmlFileName}\", doc.HtmlPage);\n    }\n}\n\n// prerender /blog/index.html\nif (renderTo != null)\n{\n    log.InfoFormat(\"Writing {0}/index.html...\", renderTo);\n    RenderToFile(razorPages.GetView(\"/Pages/Posts/Index.cshtml\").View, \n        new Pages.Posts.IndexModel { Static = true }, $\"{renderTo}/index.html\");\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving JWT Refresh Token from Client\nDESCRIPTION: Example of retrieving the refresh token from the ss-reftok cookie after successful authentication, which can be used to request new JWT access tokens.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-11_jwt-identity-auth.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar refreshToken = client.GetRefreshTokenCookie(); // ss-reftok Cookie\n```\n\n----------------------------------------\n\nTITLE: Defining AppUser Model in ASP.NET Core Using Entity Framework\nDESCRIPTION: This snippet defines the AppUser class which extends IdentityUser, incorporating additional user properties needed for the application. It specifies the database table mapping and includes properties such as FirstName, LastName, and Avatar.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Alias(\"AspNetUsers\")] // Tell OrmLite which table this EF Data Model maps to\npublic class AppUser : IdentityUser<int>\n{\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n    public string? DisplayName { get; set; }\n    public string? ProfileUrl { get; set; }\n    [Input(Type = \"file\"), UploadTo(\"avatars\")]\n    public string? Avatar { get; set; } //overrides ProfileUrl\n    public string? Handle { get; set; }\n    public int? RefId { get; set; }\n    public string RefIdStr { get; set; } = Guid.NewGuid().ToString();\n    public bool IsArchived { get; set; }\n    public DateTime? ArchivedDate { get; set; }\n    public string? LastLoginIp { get; set; }\n    public DateTime? LastLoginDate { get; set; }\n    public DateTime CreatedDate { get; set; } = DateTime.UtcNow;\n    public DateTime ModifiedDate { get; set; } = DateTime.UtcNow;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Prerendered Content in JavaScript\nDESCRIPTION: JavaScript code that checks if prerendered content exists for the current path and replaces the loading indicator with that content. This approach fetches HTML from a /prerender directory based on the current URL path.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/prerender.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pagePath = path.endsWith('/') \n    ? path.substring(0, path.length - 2) + '/index.html' \n    : path\nfetch(`/prerender${pagePath}`)\n    .then(r => r.text())\n    .then(html => {\n        if (html.indexOf('<!DOCTYPE html>') >= 0) return // ignore CDN 404.html\n        const pageBody = $1('#app-loading .content')\n        if (pageBody) \n            pageBody.innerHTML = `<i hidden data-prerender=\"${path}\"></i>` + html\n    })\n    .catch(/* no prerendered content found for this path */)\n```\n\n----------------------------------------\n\nTITLE: File Renaming Script for Jekyll to VitePress Migration in C#\nDESCRIPTION: A C# script that reads Jekyll markdown files, extracts the slug value from frontmatter, and creates copies with filenames matching the slug value to maintain URL paths in VitePress.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-01_jekyll-to-vitepress.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic void Main(string[] args)\n{\n    var filename = args[0];\n    var fileLines = File.ReadAllLines(filename).ToList();\n    if (!Directory.Exists(\"updated\"))\n    {\n        Directory.CreateDirectory(\"updated\");\n    }\n    foreach (var line in fileLines)\n    {\n        if (line.StartsWith(\"slug:\"))\n        {\n            var newName = line.Split(\":\")[1].Trim();\n            File.WriteAllLines(\"./updated/\" + newName + \".md\", fileLines);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Remounting JavaScript Modules for Blazor\nDESCRIPTION: The JavaScript function remount() ensures that specified modules are loaded on each navigation in Blazor applications. It reads a data-module attribute and imports the relevant module, executing its load() function if implemented. Dependencies include Blazor's enhanced load events and proper module paths.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport async function remount() {\n    document.querySelectorAll('[data-module]').forEach(async el => {\n        let modulePath = el.dataset.module\n        if (!modulePath) return\n        if (!modulePath.startsWith('/') && !modulePath.startsWith('.')) {\n            modulePath = `../${modulePath}`\n        }\n        try {\n            const module = await import(modulePath)\n            if (typeof module.default?.load == 'function') {\n                module.default.load()\n            }\n        } catch (e) {\n            console.error(`Couldn't load module ${el.dataset.module}`, e)\n        }\n    })\n}\n\ndocument.addEventListener('DOMContentLoaded', () =>\n    Blazor.addEventListener('enhancedload', remount))\n```\n\n----------------------------------------\n\nTITLE: Declarative Vue Component Mounting\nDESCRIPTION: Shows how to mount Vue components declaratively using data attributes in HTML.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-component=\"Hello\" data-props=\"{ name: 'Vue 3' }\"></div>\n```\n\n----------------------------------------\n\nTITLE: Authorization with Validation Attributes\nDESCRIPTION: Demonstrates declarative validation attributes for securing ServiceStack APIs\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[ValidateIsAuthenticated]\n[ValidateIsAdmin]\n[ValidateHasRole(role)]\n[ValidateHasClaim(type,value)]\n[ValidateHasScope(scope)]\npublic class Secured {}\n```\n\n----------------------------------------\n\nTITLE: Defining MarkdownFileInfo POCO Model in C#\nDESCRIPTION: A POCO class definition that stores metadata and content for Markdown blog posts. This class holds properties from frontmatter like title, summary, author, tags as well as the processed HTML content.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_prerendering.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MarkdownFileInfo\n{\n    public string Path { get; set; } = default!;\n    public string? Slug { get; set; }\n    public string? FileName { get; set; }\n    public string? HtmlFileName { get; set; }\n    public string? Title { get; set; }\n    public string? Summary { get; set; }\n    public string? Splash { get; set; }\n    public string? Author { get; set; }\n    public List<string> Tags { get; set; } = new();\n    public DateTime? Date { get; set; }\n    public string? Content { get; set; }\n    public string? Preview { get; set; }\n    public string? HtmlPage { get; set; }\n    public int? WordCount { get; set; }\n    public int? LineCount { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Enum Serialization Example in System.Text.Json\nDESCRIPTION: Demonstrates how different enum types are serialized in System.Text.Json, including regular enums, flag enums, and enums with custom EnumMember attributes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-09_system-text-json-apis.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum EnumType { Value1, Value2, Value3 }\n\n[Flags]\npublic enum EnumTypeFlags { Value1, Value2, Value3 }\n\npublic enum EnumStyleMembers\n{\n    [EnumMember(Value = \"lower\")]\n    Lower,\n    [EnumMember(Value = \"UPPER\")]\n    Upper,\n}\n\nreturn new EnumExamples {\n    EnumProp = EnumType.Value2, // String value by default\n    EnumFlags = EnumTypeFlags.Value2 | EnumTypeFlags.Value3, // [Flags] as int\n    EnumStyleMembers = EnumStyleMembers.Upper, // Serializes [EnumMember] value\n    NullableEnumProp = null, // Ignores nullable enums\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Generation with IRenderStatic\nDESCRIPTION: Implements static page generation for dynamic routes by returning page models using IRenderStatic interface\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n@page \"/{slug}\"\n@model MyApp.Page\n\n@implements IRenderStatic<MyApp.Page>\n@functions {\n    public List<Page> GetStaticProps(RenderContext ctx)\n    {\n        var markdown = ctx.Resolve<MarkdownPages>();\n        return markdown.VisiblePages.Map(page => new Page { Slug = page.Slug! });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AutoEditForm with Role-Based Delete\nDESCRIPTION: This JavaScript snippet illustrates how to use `useAuth` with `AutoEditForm` to conditionally enable delete functionality based on user roles. The `canDelete` computed property determines whether to use the `DeleteBooking` type, enabling delete functionality only for users with the 'Manager' role.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n    template/*html*/:`\n    <AutoEditForm type=\"UpdateBooking\" :deleteType=\"canDelete ? 'DeleteBooking' : null\" />\n    `,\n    setup(props) {\n        const { hasRole } = useAuth()\n        const canDelete = computed(() => hasRole('Manager'))\n        return { canDelete }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Vue Component Library in HTML\nDESCRIPTION: HTML code that embeds the vue-component-library component with a top margin class applied.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<vue-component-library class=\"mt-4\"></vue-component-library>\n```\n\n----------------------------------------\n\nTITLE: Toggling Dark Mode with Vanilla JS in Blazor\nDESCRIPTION: This code provides a dark mode toggle button using Vanilla JS for Blazor components. It utilizes localStorage to store the current theme state and updates the DOM accordingly. Dependencies include Blazor for event handling and the HTML structure for button configuration. No external libraries are required. Click events toggle between dark and light modes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\" onclick=\"toggleDarkMode()\" class=@ClassNames(DarkModeToggle.ButtonClasses, Class) role=\"switch\" aria-checked=\"false\" @attributes=\"AdditionalAttributes\">\n    <span class=\"@DarkModeToggle.InnerClasses\" data-class-light=\"translate-x-5\" data-class-dark=\"translate-x-0\">\n        <span class=\"@DarkModeToggle.IconClasses\" data-class-light=\"opacity-0 ease-out duration-100\" data-class-dark=\"opacity-100 ease-in duration-200\" aria-hidden=\"true\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 text-gray-400\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 32 32\"><path fill=\"currentColor\" d=\"M13.502 5.414a15.075 15.075 0 0 0 11.594 18.194a11.113 11.113 0 0 1-7.975 3.39c-.138 0-.278.005-.418 0a11.094 11.094 0 0 1-3.2-21.584M14.98 3a1.002 1.002 0 0 0-.175.016a13.096 13.096 0 0 0 1.825 25.981c.164.006.328 0 .49 0a13.072 13.072 0 0 0 10.703-5.555a1.01 1.01 0 0 0-.783-1.565A13.08 13.08 0 0 1 15.89 4.38A1.015 1.015 0 0 0 14.98 3Z\" /></svg>\n        </span>\n        <span class=\"@DarkModeToggle.IconClasses\" data-class-light=\"opacity-100 ease-in duration-200\" data-class-dark=\"opacity-0 ease-out duration-100\" aria-hidden=\"true\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 text-indigo-600\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 32 32\"><path fill=\"currentColor\" d=\"M16 12.005a4 4 0 1 1-4 4a4.005 4.005 0 0 1 4-4m0-2a6 6 0 1 0 6 6a6 6 0 0 0-6-6ZM5.394 6.813L6.81 5.399l3.505 3.506L8.9 10.319zM2 15.005h5v2H2zm3.394 10.193L8.9 21.692l1.414 1.414l-3.505 3.506zM15 25.005h2v5h-2zm6.687-1.9l1.414-1.414l3.506 3.506l-1.414 1.414zm3.313-8.1h5v2h-5zm-3.313-6.101l3.506-3.506l1.414 1.414l-3.506 3.506zM15 2.005h2v5h-2z\" /></svg>\n        </span>\n    </span>\n</button>\n\n<script>\nwindow.toggleDarkMode = (function() {\n    let isDark = localStorage.getItem('color-scheme') === 'dark'\n    const html = document.documentElement\n    function renderDarkMode() {\n        html.style.setProperty('color-scheme', isDark ? 'dark' : null)\n        html.classList.toggle('dark', isDark)\n        document.querySelectorAll('[data-class-light]').forEach(el => {\n            const removeClasses = isDark\n                    ? el.dataset.classLight\n                    : el.dataset.classDark\n            const addClasses = isDark\n                    ? el.dataset.classDark\n                    : el.dataset.classLight\n\n            removeClasses.split(' ').forEach(c => el.classList.remove(c))\n            addClasses.split(' ').forEach(c => el.classList.add(c))\n        })\n    }\n    renderDarkMode()\n\n    document.addEventListener('DOMContentLoaded', () =>\n            Blazor.addEventListener('enhancedload', () => {\n                isDark = localStorage.getItem('color-scheme') === 'dark'\n                html.classList.toggle('dark', isDark)\n                renderDarkMode()\n            }))\n\n    return function() {\n        isDark = !isDark\n        localStorage.setItem('color-scheme', isDark ? 'dark' : 'light')\n        renderDarkMode()\n    }\n})()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Setup for ServiceStack Client in Vue - JavaScript\nDESCRIPTION: This snippet initializes a client instance for making API calls within a Vue application. The useClient() function streamlines the creation of JsonServiceClient and exposes key functionalities such as error handling and loading states.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet client = JsonApiClient.create()\napp.provide('client', client)\n```\n\n----------------------------------------\n\nTITLE: Prerendering Razor Pages with RazorPagesEngine in C#\nDESCRIPTION: Code that uses ServiceStack's RazorPagesEngine to render Razor Pages with the MarkdownFileInfo model. The rendered HTML is stored for static serving. The PageModel is configured with a Static flag for proper link rendering.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_prerendering.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar page = razorPages.GetView(\"/Pages/Posts/Post.cshtml\");\nvar model = new Pages.Posts.PostModel(this) { Static = true }.Populate(doc);\ndoc.HtmlPage = RenderToHtml(page.View, model);\n\npublic string RenderToHtml(IView? page, PageModel model)\n{\n    using var ms = MemoryStreamFactory.GetStream();\n    razorPages.WriteHtmlAsync(ms, page, model).GetAwaiter().GetResult();\n    ms.Position = 0;\n    var html = Encoding.UTF8.GetString(ms.ReadFullyAsMemory().Span);\n    return html;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Date and Slug from Filename in C#\nDESCRIPTION: Code that extracts date and slug information from the Markdown file's name using a Jekyll-like naming convention. This allows blog posts to be maintained in chronological order.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_prerendering.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndoc.Slug = file.Name.RightPart('_').LastLeftPart('.');\ndoc.HtmlFileName = $\"{file.Name.RightPart('_').LastLeftPart('.')}.html\";\n\nvar datePart = file.Name.LeftPart('_');\nif (DateTime.TryParseExact(datePart, \"yyyy-MM-dd\", CultureInfo.InvariantCulture,\n        DateTimeStyles.AdjustToUniversal, out var date))\n{\n    doc.Date = date;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript DTOs for API clients\nDESCRIPTION: Command to save annotated Typed DTOs to disk which enables better IDE intellisense when working with ServiceStack APIs in JavaScript.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-21_start.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run dtos\n```\n\n----------------------------------------\n\nTITLE: Multiple HTTP Method Support\nDESCRIPTION: Example of registering an API endpoint for multiple HTTP methods\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n[Route(\"/users/{Id:int}\", \"GET,POST\")]\npublic class GetUser : IGet, IReturn<User>\n{\n    public required int Id { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Vue Components in Blazor\nDESCRIPTION: This HTML snippet demonstrates lazy loading of a Vue.js component in a Blazor application using the 'data-component' attribute to specify the path to the component.  This approach ensures that only the required components are loaded for a given page, improving initial load times and resource utilization. The Vue component will be mounted on the div element.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div data-component=\"pages/Counter.mjs\"></div> \n```\n\n----------------------------------------\n\nTITLE: Implementing Author Page Routes in Razor SSG\nDESCRIPTION: Razor page implementation for rendering author-specific post listings with static site generation support. Uses IRenderStatic interface to generate static pages for each author.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n@page \"/posts/author/{slug}\"\n@model AuthorModel\n@inject MarkdownBlog Blog\n\n@implements IRenderStatic<AuthorModel>\n@functions {\n    public List<AuthorModel> GetStaticProps(RenderContext ctx) => ctx.Resolve<MarkdownBlog>()\n        .AuthorSlugMap.Keys.Map(x => new AuthorModel { Slug = x });\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Prerender Tasks in C# with bUnit\nDESCRIPTION: C# test class that generates prerendered HTML content for Blazor pages. It uses bUnit to render components and saves the output to the prerender directory based on each component's route attribute.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/prerender.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture, Category(\"prerender\")]\npublic class PrerenderTasks\n{\n    Bunit.TestContext Context;\n    string ClientDir;\n    string WwrootDir => ClientDir.CombineWith(\"wwwroot\");\n    string PrerenderDir => WwrootDir.CombineWith(\"prerender\");\n\n    public PrerenderTasks()\n    {\n        Context = new();\n        var config = new ConfigurationBuilder().AddJsonFile(\"appsettings.json\").Build();\n        ClientDir = config[nameof(ClientDir)] \n            ?? throw new Exception($\"{nameof(ClientDir)} not defined in appsettings.json\");\n        FileSystemVirtualFiles.RecreateDirectory(PrerenderDir);\n    }\n\n    void Render<T>(params ComponentParameter[] parameters) where T : IComponent\n    {\n        WriteLine($\"Rendering: {typeof(T).FullName}...\");\n        var component = Context.RenderComponent<T>(parameters);\n        var route = typeof(T).GetCustomAttribute<RouteAttribute>()?.Template;\n        if (string.IsNullOrEmpty(route))\n            throw new Exception($\"Couldn't infer @page for component {typeof(T).Name}\");\n\n        var fileName = route.EndsWith(\"/\") ? route + \"index.html\" : $\"{route}.html\";\n\n        var writeTo = Path.GetFullPath(PrerenderDir.CombineWith(fileName));\n        WriteLine($\"Written to {writeTo}\");\n        File.WriteAllText(writeTo, component.Markup);\n    }\n\n    [Test]\n    public void PrerenderPages()\n    {\n        Render<Client.Pages.Index>();\n        // Add Pages to prerender...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with useClient in Vue Components - JavaScript\nDESCRIPTION: This snippet illustrates how to implement error handling within a Vue component using the setError method from the useClient hook. It prevents form submission if passwords do not match and provides appropriate feedback to the user.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { api, setError } = useClient()\nasync function onSubmit() {\n    if (password.value !== confirmPassword.value) {\n        setError({ fieldName:'confirmPassword', message:'Passwords do not match' })\n        return\n    }\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Route Constraints in ServiceStack APIs\nDESCRIPTION: Demonstrates using ASP.NET Core route constraints for defining flexible route matching\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[Route(\"/users/{Id:int}\")] \n[Route(\"/users/{UserName:string}\")]\npublic class GetUser : IGet, IReturn<User>\n{\n    public int? Id { get; set; }\n    public int? UserName { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript API for Accessing Prerendered Content\nDESCRIPTION: Script that exposes a JS global object with methods to access prerendered page content. The prerenderedPage function retrieves the HTML content that was loaded from the prerender directory.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/prerender.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\nJS = (function () {\n    return {\n        /* Loading */\n        prerenderedPage() {\n            const el = document.querySelector('#app-loading .content')\n            return el && el.innerHTML || ''\n        },\n    }\n})()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Declarative Vue Component Loading in Blazor\nDESCRIPTION: This snippet showcases how to load Vue.js components declaratively within a Blazor application using the 'data-component' and 'data-props' attributes.  It requires all components loaded this way to be registered globally. The specified component will be mounted on the div element with the provided props.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-component=\"GettingStarted\" data-props=\"{template:'blazor'}\"></div> \n```\n\n----------------------------------------\n\nTITLE: Prerendering Tasks in C# with bUnit\nDESCRIPTION: Implements a test class for generating prerendered HTML pages using bUnit and NUnit testing framework\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/prerender.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture, Category(\"prerender\")]\npublic class PrerenderTasks\n{\n    Bunit.TestContext Context;\n    string ClientDir;\n    string WwrootDir => ClientDir.CombineWith(\"wwwroot\");\n    string PrerenderDir => WwrootDir.CombineWith(\"prerender\");\n\n    public PrerenderTasks()\n    {\n        Context = new();\n        var config = new ConfigurationBuilder().AddJsonFile(\"appsettings.json\").Build();\n        ClientDir = config[nameof(ClientDir)] \n            ?? throw new Exception($\"{nameof(ClientDir)} not defined in appsettings.json\");\n        FileSystemVirtualFiles.RecreateDirectory(PrerenderDir);\n    }\n\n    void Render<T>(params ComponentParameter[] parameters) where T : IComponent\n    {\n        WriteLine($\"Rendering: {typeof(T).FullName}...\");\n        var component = Context.RenderComponent<T>(parameters);\n        var route = typeof(T).GetCustomAttribute<RouteAttribute>()?.Template;\n        if (string.IsNullOrEmpty(route))\n            throw new Exception($\"Couldn't infer @page for component {typeof(T).Name}\");\n\n        var fileName = route.EndsWith(\"/\") ? route + \"index.html\" : $\"{route}.html\";\n\n        var writeTo = Path.GetFullPath(PrerenderDir.CombineWith(fileName));\n        WriteLine($\"Written to {writeTo}\");\n        File.WriteAllText(writeTo, component.Markup);\n    }\n\n    [Test]\n    public void PrerenderPages()\n    {\n        Render<Client.Pages.Index>();\n        // Add Pages to prerender...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue.js Counter Component Implementation in HTML and JavaScript\nDESCRIPTION: This snippet demonstrates a basic Vue.js component implementing a counter, intended to be mounted within a Blazor application. It uses Vue's reactivity system (ref) to manage the counter state and updates the UI on button clicks. This approach, while functional on full page reloads, does not work with Blazor's Enhanced Navigation without modification.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"content\">\n    <p class=\"my-4\">Current count: {{currentCount}}</p>\n\n    <primary-button v-on:click=\"incrementCount\">Click me</primary-button>\n</div>\n<script type=\"module\">\nimport { ref } from 'vue'\nimport { mount } from 'app.mjs'\n\nconst App = {\n    setup() {\n        const currentCount = ref(0)\n        const incrementCount = () => currentCount.value++\n\n        return { currentCount, incrementCount }\n    }\n}\nmount('#content', App)\n</script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Document Schema\nDESCRIPTION: Defines the TypeScript interfaces for document metadata schemas used in the Vite Press Plugin, including base Doc type and specialized Post, Video, and WhatsNew types.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Doc = {\n    title: string     // title of Markdown page (frontmatter)\n    slug: string      // slug to page (populated)\n    path: string      // path to page (populated)\n    fileName: string  // filename of markdown file (populated)\n    content: string   // markdown content (populated)\n    date: string      // date of page (frontmatter)\n    tags: string[]    // related tags (frontmatter)\n    order?: number    // explicit page ordering (frontmatter)\n    group?: string    // which group page belongs to (populated)\n    draft?: boolean   // make visible in production (frontmatter)\n    wordCount: number      // (populated)\n    lineCount: number      // (populated)\n    minutesToRead: number  // (populated)\n}\n\ntype Post = Doc & {\n    summary: string // short summary of blog post (frontmatter)\n    author: string  // author of blog post (frontmatter)\n    image: string   // hero image of blog post (frontmatter)\n}\n\ntype Video = Doc & {\n    url: string // URL of YouTube Video\n}\n\ntype WhatsNew = Doc & {\n    url: string    // URL of YouTube Video\n    image: string  // Image to display for feature\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PrerenderMarkdown Task and PageTemplate for Blazor Applications in C#\nDESCRIPTION: This code demonstrates how to scan Markdown files, convert them to HTML, and embed them in prerendered pages. It includes a test method that processes all Markdown files in a content directory and a PageTemplate class for parsing and rendering HTML templates with page markers.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/prerender.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task PrerenderMarkdown()\n{\n    var srcDir = WwrootDir.CombineWith(\"content\").Replace('\\\\', '/');\n    var dstDir = WwrootDir.CombineWith(\"docs\").Replace('\\\\', '/');\n            \n    var indexPage = PageTemplate.Create(WwrootDir.CombineWith(\"index.html\"));\n    if (!Directory.Exists(srcDir)) throw new Exception($\"{Path.GetFullPath(srcDir)} does not exist\");\n    FileSystemVirtualFiles.RecreateDirectory(dstDir);\n\n    foreach (var file in new DirectoryInfo(srcDir).GetFiles(\"*.md\", SearchOption.AllDirectories))\n    {\n        WriteLine($\"Converting {file.FullName} ...\");\n\n        var name = file.Name.WithoutExtension();\n        var docRender = await Client.MarkdownUtils.LoadDocumentAsync(name, doc =>\n            Task.FromResult(File.ReadAllText(file.FullName)));\n\n        if (docRender.Failed)\n        {\n            WriteLine($\"Failed: {docRender.ErrorMessage}\");\n            continue;\n        }\n\n        var dirName = dstDir.IndexOf(\"wwwroot\") >= 0\n            ? dstDir.LastRightPart(\"wwwroot\").Replace('\\\\', '/')\n            : new DirectoryInfo(dstDir).Name;\n        var path = dirName.CombineWith(name == \"index\" ? \"\" : name);\n\n        var mdBody = @$\"\n<div class=\\\"prose lg:prose-xl min-vh-100 m-3\\\" data-prerender=\\\"{path}\\\">\n    <div class=\\\"markdown-body\\\">\n        {docRender.Response!.Preview!}\n    </div>\n</div>\";\n        var prerenderedPage = indexPage.Render(mdBody);\n        string htmlPath = Path.GetFullPath(Path.Combine(dstDir, $\"{name}.html\"));\n        File.WriteAllText(htmlPath, prerenderedPage);\n        WriteLine($\"Written to {htmlPath}\");\n    }\n}\n\npublic class PageTemplate\n{\n    string? Header { get; set; }\n    string? Footer { get; set; }\n\n    public PageTemplate(string? header, string? footer)\n    {\n        Header = header;\n        Footer = footer;\n    }\n\n    public static PageTemplate Create(string indexPath)\n    {\n        if (!File.Exists(indexPath))\n            throw new Exception($\"{Path.GetFullPath(indexPath)} does not exist\");\n\n        string? header = null;\n        string? footer = null;\n\n        var sb = new StringBuilder();\n        foreach (var line in File.ReadAllLines(indexPath))\n        {\n            if (header == null)\n            {\n                if (line.Contains(\"<!--PAGE-->\"))\n                {\n                    header = sb.ToString(); // capture up to start page marker\n                    sb.Clear();\n                }\n                else sb.AppendLine(line);\n            }\n            else\n            {\n                if (sb.Length == 0)\n                {\n                    if (line.Contains(\"<!--/PAGE-->\")) // discard up to end page marker\n                    {\n                        sb.AppendLine();\n                        continue;\n                    }\n                }\n                else sb.AppendLine(line);\n            }\n        }\n        footer = sb.ToString();\n\n        if (string.IsNullOrEmpty(header) || string.IsNullOrEmpty(footer))\n            throw new Exception($\"Parsing {indexPath} failed, missing <!--PAGE-->...<!--/PAGE--> markers\");\n\n        return new PageTemplate(header, footer);\n    }\n\n    public string Render(string body) => Header + body + Footer;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling System.Text.Json Usage with SystemJson Attribute\nDESCRIPTION: Shows how to use the SystemJson attribute to control when System.Text.Json is used for specific API requests and responses.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-09_system-text-json-apis.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[SystemJson(UseSystemJson.Response)]\npublic class CreateUser : IReturn<IdResponse>\n{\n    //...\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[SystemJson(UseSystemJson.Request)]\npublic class CreateUser : IReturn<IdResponse>\n{\n    //...\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\n[SystemJson(UseSystemJson.Never)]\npublic class CreateUser : IReturn<IdResponse>\n{\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: SMTP Configuration in appsettings.json\nDESCRIPTION: JSON configuration for SMTP settings used by the email service, including server details, credentials, and the from email address.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SmtpConfig\": {\n    \"Username\": \"username\",\n    \"Password\": \"password\",\n    \"Host\": \"smtp.mailtrap.io\",\n    \"Port\": 587,\n    \"FromEmail\": \"mail@example.org\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prerendering Tasks to MSBuild\nDESCRIPTION: XML configuration for MSBuild that adds a target to run prerendering tasks during the build process. This enables automatic prerendering during CI/CD workflows by executing the NUnit tests with the prerender category.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/prerender.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <TestsDir>$(MSBuildProjectDirectory)/../MyApp.Tests</TestsDir>\n</PropertyGroup>\n<Target Name=\"AppTasks\" AfterTargets=\"Build\" Condition=\"$(APP_TASKS) != ''\">\n    <CallTarget Targets=\"Prerender\" Condition=\"$(APP_TASKS.Contains('prerender'))\" />\n</Target>\n<Target Name=\"Prerender\">\n    <Exec Command=\"dotnet test --filter TestCategory=prerender --logger:&quot;console;verbosity=detailed&quot;\" \n            WorkingDirectory=\"$(TestsDir)\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Import Map Configuration (C#)\nDESCRIPTION: This C# snippet demonstrates how to configure an import map using `Html.ImportMap`, allowing different module paths for development and production environments. This provides a mechanism to use local unminified builds during development and CDN hosted production builds when running in production.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n@Html.ImportMap(new()\n{\n    [\"vue\"]                  = (\"/lib/mjs/vue.mjs\",                 \"https://unpkg.com/vue@3/dist/vue.esm-browser.prod.js\"),\n    [\"@servicestack/client\"] = (\"/lib/mjs/servicestack-client.mjs\", \"https://unpkg.com/@servicestack/client@2/dist/servicestack-client.min.mjs\"),\n    [\"@servicestack/vue\"]    = (\"/lib/mjs/servicestack-vue.mjs\",    \"https://unpkg.com/@servicestack/vue@3/dist/servicestack-vue.min.mjs\")\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Prerender Task for Static Site Generation\nDESCRIPTION: Implementation of the prerender AppTask that handles static site generation by copying static assets and processing Razor pages into the dist directory.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n.ConfigureAppHost(afterAppHostInit: appHost =>\n  {\n      // prerender with: `$ npm run prerender` \n      AppTasks.Register(\"prerender\", args =>\n      {\n          var distDir = appHost.ContentRootDirectory.RealPath.CombineWith(\"dist\");\n          if (Directory.Exists(distDir))\n              FileSystemVirtualFiles.DeleteDirectory(distDir);\n          FileSystemVirtualFiles.CopyAll(\n              new DirectoryInfo(appHost.ContentRootDirectory.RealPath.CombineWith(\"wwwroot\")),\n              new DirectoryInfo(distDir));\n          var razorFiles = appHost.VirtualFiles.GetAllMatchingFiles(\"*.cshtml\");\n          RazorSsg.PrerenderAsync(appHost, razorFiles, distDir).GetAwaiter().GetResult();\n      });\n  });\n  //...\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Frontmatter for ServiceStack Documentation\nDESCRIPTION: This code snippet defines the frontmatter for a ServiceStack documentation page. It includes metadata such as title, URL, tags, date, and display order.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_videos/vue/admin.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Build beautiful custom .NET Admin UIs in minutes\nurl: https://youtu.be/wlRA4_owEsc\ntags: [vue,autoquery]\ndate: 14-06-2023\norder: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript API for Accessing Prerendered Content\nDESCRIPTION: HTML script that defines a JavaScript function to access prerendered content that was loaded into the page. This allows Blazor components to reference the prerendered HTML later in the application lifecycle.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Wasm/Gallery.Wasm.Client/wwwroot/content/prerender.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\nJS = (function () {\n    return {\n        /* Loading */\n        prerenderedPage() {\n            const el = document.querySelector('#app-loading .content')\n            return el && el.innerHTML || ''\n        },\n    }\n})()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Customizing JSON Responses with ResultScope\nDESCRIPTION: Demonstrates how to use HttpResult with a custom ResultScope to apply specific JSON serialization options for individual API responses.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-09_system-text-json-apis.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nreturn new HttpResult(responseDto) {\n    ResultScope = () => \n        JsConfig.With(new() { IncludeNullValues = true, ExcludeDefaultValues = true })\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Blazor Tailwind Project via Template\nDESCRIPTION: Command-line instruction for creating a new Blazor Tailwind project using ServiceStack's project template\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-20_net8-blazor-template.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nblazor-template repo=\"NetCoreTemplates/blazor\" name=\"Blazor\"\n```\n\n----------------------------------------\n\nTITLE: Configuring .csproj for CDN Deployment\nDESCRIPTION: This XML snippet demonstrates how to configure the .csproj file for deploying client assets to a CDN. It includes tasks for updating production settings, creating a fallback 404.html page for SPA routing, and defining custom domain names.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Tailwind.Tests/Client/wwwroot/content/deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <ClientDir>$(MSBuildProjectDirectory)/../MyApp.Client</ClientDir>\n    <WwwRoot>$(ClientDir)/wwwroot</WwwRoot>\n</PropertyGroup>\n\n<!-- Populated in release.yml with GitHub Actions secrets -->\n<Target Name=\"DeployApi\" AfterTargets=\"Build\" Condition=\"$(DEPLOY_API) != ''\">\n    <Exec Command=\"echo DEPLOY_API=$(DEPLOY_API)\" />\n\n    <!-- Update Production settings with DEPLOY_API Blazor UI should use  -->\n    <WriteLinesToFile File=\"$(WwwRoot)/appsettings.Production.json\" \n        Lines=\"$([System.IO.File]::ReadAllText($(WwwRoot)/appsettings.Production.json).Replace('{DEPLOY_API}',$(DEPLOY_API)))\" \n        Overwrite=\"true\" Encoding=\"UTF-8\" />\n\n    <!-- 404.html SPA fallback (supported by GitHub Pages, Cloudflare & Netlify CDNs) -->\n    <Copy SourceFiles=\"$(WwwRoot)/index.html\" \n        DestinationFiles=\"$(WwwRoot)/wwwroot/404.html\" />\n\n    <!-- define /api proxy routes (supported by Cloudflare or Netlify CDNs)  -->\n    <WriteLinesToFile File=\"$(WwwRoot)/_redirects\" \n        Lines=\"$([System.IO.File]::ReadAllText($(WwwRoot)/_redirects).Replace('{DEPLOY_API}',$(DEPLOY_API)))\" \n        Overwrite=\"true\" Encoding=\"UTF-8\" />\n</Target>\n<Target Name=\"DeployCdn\" AfterTargets=\"Build\" Condition=\"$(DEPLOY_CDN) != ''\">\n    <Exec Command=\"echo DEPLOY_CDN=$(DEPLOY_CDN)\" />\n\n    <!-- Define custom domain name that CDN should use -->\n    <Exec Condition=\"$(DEPLOY_CDN) != ''\" Command=\"echo $(DEPLOY_CDN) &gt; $(WwwRoot)/CNAME\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Static Route Generation with RenderStatic Attribute\nDESCRIPTION: Demonstrates how to mark Razor Pages for static generation using the RenderStatic attribute\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n@page \"/about\"\n@attribute [RenderStatic]\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Actions Secrets via CLI\nDESCRIPTION: This bash script uses the GitHub CLI to set secret environment variables needed for the deployment process. Required variables include SSH host and user details, Let's Encrypt email, and optionally a CDN URL. The user's GitHub repository must be configured to use GitHub CLI for secret management.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh secret set DEPLOY_API -b\"<DEPLOY_API>\"\ngh secret set DEPLOY_USERNAME -b\"<DEPLOY_USERNAME>\"\ngh secret set DEPLOY_KEY < key.pem # DEPLOY_KEY\ngh secret set LETSENCRYPT_EMAIL -b\"<LETSENCRYPT_EMAIL>\"\ngh secret set DEPLOY_CDN -b\"<DEPLOY_CDN>\"\n```\n\n----------------------------------------\n\nTITLE: Enabling System.Text.Json with Endpoint Routing in ServiceStack\nDESCRIPTION: Code snippet that demonstrates how to enable Endpoint Routing in ServiceStack, which automatically enables System.Text.Json as the serializer for API responses.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-09_system-text-json-apis.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseServiceStack(new AppHost(), options => {\n    options.MapEndpoints();\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Prerendered Content with JavaScript\nDESCRIPTION: JavaScript code to check if prerendered content exists for the current path and replace the default loading page with it. This solution improves initial page load time by showing prerendered HTML while the Blazor application loads in the background.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Wasm/Gallery.Wasm.Client/wwwroot/content/prerender.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pagePath = path.endsWith('/') \n    ? path.substring(0, path.length - 2) + '/index.html' \n    : path\nfetch(`/prerender${pagePath}`)\n    .then(r => r.text())\n    .then(html => {\n        if (html.indexOf('<!DOCTYPE html>') >= 0) return // ignore CDN 404.html\n        const pageBody = $1('#app-loading .content')\n        if (pageBody) \n            pageBody.innerHTML = `<i hidden data-prerender=\"${path}\"></i>` + html\n    })\n    .catch(/* no prerendered content found for this path */)\n```\n\n----------------------------------------\n\nTITLE: Programmatic Vue Component Mounting\nDESCRIPTION: Demonstrates programmatic mounting of Vue components using custom mount method.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { mount } from \"/mjs/api.mjs\"\nmount('#counter', Counter)\n```\n\n----------------------------------------\n\nTITLE: Implementing PrerenderMarkdown Task for Static HTML Generation in Blazor WASM\nDESCRIPTION: This code snippet shows a test method that scans Markdown files, converts them to HTML using MarkdownUtils, and embeds them in prerendered HTML pages with the same paths as their Blazor routes. It includes a PageTemplate class for parsing and rendering HTML templates with content markers.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/prerender.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task PrerenderMarkdown()\n{\n    var srcDir = WwrootDir.CombineWith(\"content\").Replace('\\\\', '/');\n    var dstDir = WwrootDir.CombineWith(\"docs\").Replace('\\\\', '/');\n            \n    var indexPage = PageTemplate.Create(WwrootDir.CombineWith(\"index.html\"));\n    if (!Directory.Exists(srcDir)) throw new Exception($\"{Path.GetFullPath(srcDir)} does not exist\");\n    FileSystemVirtualFiles.RecreateDirectory(dstDir);\n\n    foreach (var file in new DirectoryInfo(srcDir).GetFiles(\"*.md\", SearchOption.AllDirectories))\n    {\n        WriteLine($\"Converting {file.FullName} ...\");\n\n        var name = file.Name.WithoutExtension();\n        var docRender = await Client.MarkdownUtils.LoadDocumentAsync(name, doc =>\n            Task.FromResult(File.ReadAllText(file.FullName)));\n\n        if (docRender.Failed)\n        {\n            WriteLine($\"Failed: {docRender.ErrorMessage}\");\n            continue;\n        }\n\n        var dirName = dstDir.IndexOf(\"wwwroot\") >= 0\n            ? dstDir.LastRightPart(\"wwwroot\").Replace('\\\\', '/')\n            : new DirectoryInfo(dstDir).Name;\n        var path = dirName.CombineWith(name == \"index\" ? \"\" : name);\n\n        var mdBody = @$\"\n<div class=\"\"prose lg:prose-xl min-vh-100 m-3\"\" data-prerender=\"\"{path}\"\">\n    <div class=\"\"markdown-body\"\">\n        {docRender.Response!.Preview!}\n    </div>\n</div>\";\n        var prerenderedPage = indexPage.Render(mdBody);\n        string htmlPath = Path.GetFullPath(Path.Combine(dstDir, $\"{name}.html\"));\n        File.WriteAllText(htmlPath, prerenderedPage);\n        WriteLine($\"Written to {htmlPath}\");\n    }\n}\n\npublic class PageTemplate\n{\n    string? Header { get; set; }\n    string? Footer { get; set; }\n\n    public PageTemplate(string? header, string? footer)\n    {\n        Header = header;\n        Footer = footer;\n    }\n\n    public static PageTemplate Create(string indexPath)\n    {\n        if (!File.Exists(indexPath))\n            throw new Exception($\"{Path.GetFullPath(indexPath)} does not exist\");\n\n        string? header = null;\n        string? footer = null;\n\n        var sb = new StringBuilder();\n        foreach (var line in File.ReadAllLines(indexPath))\n        {\n            if (header == null)\n            {\n                if (line.Contains(\"<!--PAGE-->\"))\n                {\n                    header = sb.ToString(); // capture up to start page marker\n                    sb.Clear();\n                }\n                else sb.AppendLine(line);\n            }\n            else\n            {\n                if (sb.Length == 0)\n                {\n                    if (line.Contains(\"<!--/PAGE-->\")) // discard up to end page marker\n                    {\n                        sb.AppendLine();\n                        continue;\n                    }\n                }\n                else sb.AppendLine(line);\n            }\n        }\n        footer = sb.ToString();\n\n        if (string.IsNullOrEmpty(header) || string.IsNullOrEmpty(footer))\n            throw new Exception($\"Parsing {indexPath} failed, missing <!--PAGE-->...<!--/PAGE--> markers\");\n\n        return new PageTemplate(header, footer);\n    }\n\n    public string Render(string body) => Header + body + Footer;\n}\n```\n\n----------------------------------------\n\nTITLE: useAuth() Utilities in Vue.js\nDESCRIPTION: This JavaScript snippet demonstrates the various utilities exposed by the `useAuth()` composable in Vue.js for handling authentication. It provides functions for signing in, signing out, accessing user information, and checking authentication status, roles, permissions, and admin status.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n    signIn,           // Sign In the currently Authenticated User\n    signOut,          // Sign Out currently Authenticated User\n    user,             // Access Authenticated User info in a reactive Ref<AuthenticateResponse>\n    isAuthenticated,  // Check if the current user is Authenticated in a reactive Ref<boolean>\n    hasRole,          // Check if the Authenticated User has a specific role\n    hasPermission,    // Check if the Authenticated User has a specific permission\n    isAdmin           // Check if the Authenticated User has the Admin role\n} = useAuth()\n```\n\n----------------------------------------\n\nTITLE: Configuring MSBuild Targets for Prerendering\nDESCRIPTION: MSBuild XML configuration in the project file that sets up a target to run the prerender task during the build process when specific conditions are met.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_prerendering.md#2025-04-16_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<Target Name=\"AppTasks\" AfterTargets=\"Build\" Condition=\"$(APP_TASKS) != ''\">\n    <CallTarget Targets=\"Prerender\" Condition=\"$(APP_TASKS.Contains('prerender'))\" />\n</Target>\n<Target Name=\"Prerender\">\n    <Message Text=\"Prerender...\" />\n    <Exec Command=\"dotnet run --AppTasks=prerender\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Registering RazorPagesEngine in ASP.NET Core DI Container\nDESCRIPTION: Configuration code that registers the RazorPagesEngine service in the ASP.NET Core dependency injection container for use in prerendering Razor Pages.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_prerendering.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n.ConfigureServices(services => {\n    services.AddSingleton<RazorPagesEngine>();\n})\n```\n\n----------------------------------------\n\nTITLE: CI/CD Post Build Tasks for Blazor Client\nDESCRIPTION: This snippet defines post-build tasks for a .csproj file that is used in a CI/CD pipeline. It configures deployment settings for Blazor UI by copying the index.html to 404.html, writes API proxy routes, and configures a custom CDN domain. Dependencies include MSBuild and GitHub Actions for secret management.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <ClientDir>$(MSBuildProjectDirectory)/../MyApp.Client</ClientDir>\n    <WwwRoot>$(ClientDir)/wwwroot</WwwRoot>\n</PropertyGroup>\n\n<Target Name=\"DeployApi\" AfterTargets=\"Build\" Condition=\"$(DEPLOY_API) != ''\">\n    <Exec Command=\"echo DEPLOY_API=$(DEPLOY_API)\" />\n\n    <!-- Update Production settings with DEPLOY_API Blazor UI should use  -->\n    <WriteLinesToFile File=\"$(WwwRoot)/appsettings.Production.json\" \n        Lines=\"$([System.IO.File]::ReadAllText($(WwwRoot)/appsettings.Production.json).Replace('{DEPLOY_API}',$(DEPLOY_API)))\" \n        Overwrite=\"true\" Encoding=\"UTF-8\" />\n\n    <!-- 404.html SPA fallback (supported by GitHub Pages, Cloudflare & Netlify CDNs) -->\n    <Copy SourceFiles=\"$(WwwRoot)/index.html\" \n        DestinationFiles=\"$(WwwRoot)/wwwroot/404.html\" />\n\n    <!-- define /api proxy routes (supported by Cloudflare or Netlify CDNs)  -->\n    <WriteLinesToFile File=\"$(WwwRoot)/_redirects\" \n        Lines=\"$([System.IO.File]::ReadAllText($(WwwRoot)/_redirects).Replace('{DEPLOY_API}',$(DEPLOY_API)))\" \n        Overwrite=\"true\" Encoding=\"UTF-8\" />\n</Target>\n<Target Name=\"DeployCdn\" AfterTargets=\"Build\" Condition=\"$(DEPLOY_CDN) != ''\">\n    <Exec Command=\"echo DEPLOY_CDN=$(DEPLOY_CDN)\" />\n\n    <!-- Define custom domain name that CDN should use -->\n    <Exec Condition=\"$(DEPLOY_CDN) != ''\" Command=\"echo $(DEPLOY_CDN) &gt; $(WwwRoot)/CNAME\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Publishing .NET App for Deployment\nDESCRIPTION: Command to create a production build of a .NET application for Docker deployment using the standard dotnet publish tool.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-01_deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndotnet publish -c Release\n```\n\n----------------------------------------\n\nTITLE: Implementing a Prerender Task with bUnit in C#\nDESCRIPTION: C# code that uses bUnit to render Blazor components and save them as static HTML files. This class provides a testing framework-based approach to generate prerendered content during the build process, which is identified by the \"prerender\" test category.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Wasm/Gallery.Wasm.Client/wwwroot/content/prerender.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[TestFixture, Category(\"prerender\")]\npublic class PrerenderTasks\n{\n    Bunit.TestContext Context;\n    string ClientDir;\n    string WwrootDir => ClientDir.CombineWith(\"wwwroot\");\n    string PrerenderDir => WwrootDir.CombineWith(\"prerender\");\n\n    public PrerenderTasks()\n    {\n        Context = new();\n        var config = new ConfigurationBuilder().AddJsonFile(\"appsettings.json\").Build();\n        ClientDir = config[nameof(ClientDir)] \n            ?? throw new Exception($\"{nameof(ClientDir)} not defined in appsettings.json\");\n        FileSystemVirtualFiles.RecreateDirectory(PrerenderDir);\n    }\n\n    void Render<T>(params ComponentParameter[] parameters) where T : IComponent\n    {\n        WriteLine($\"Rendering: {typeof(T).FullName}...\");\n        var component = Context.RenderComponent<T>(parameters);\n        var route = typeof(T).GetCustomAttribute<RouteAttribute>()?.Template;\n        if (string.IsNullOrEmpty(route))\n            throw new Exception($\"Couldn't infer @page for component {typeof(T).Name}\");\n\n        var fileName = route.EndsWith(\"/\") ? route + \"index.html\" : $\"{route}.html\";\n\n        var writeTo = Path.GetFullPath(PrerenderDir.CombineWith(fileName));\n        WriteLine($\"Written to {writeTo}\");\n        File.WriteAllText(writeTo, component.Markup);\n    }\n\n    [Test]\n    public void PrerenderPages()\n    {\n        Render<Client.Pages.Index>();\n        // Add Pages to prerender...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Migration Task from Command Line\nDESCRIPTION: This command shows how to execute the migrate.users task which has been implemented in the application, allowing for easy migration of users directly from the command line interface.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run --AppTasks=migrate.users\n```\n\n----------------------------------------\n\nTITLE: Creating JsonServiceClient in PHP\nDESCRIPTION: This snippet demonstrates how to create a JsonServiceClient instance in PHP with a defined base URL for accessing ServiceStack APIs.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$client = new JsonServiceClient(baseUrl);\n```\n\n----------------------------------------\n\nTITLE: AutoCreateForm HTML Component\nDESCRIPTION: This HTML snippet demonstrates how to use the AutoCreateForm component in a Vue.js application with ServiceStack. It specifies the DTO type (CreateBooking) for automatic form generation and sets the form style to 'card'. This component leverages App Metadata for UI customization based on C# attributes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<AutoCreateForm type=\"CreateBooking\" formStyle=\"card\" />\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Enum Serialization Example\nDESCRIPTION: Shows the JSON output produced by the custom enum serialization example, demonstrating how different enum types are represented in the serialized output.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-09_system-text-json-apis.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enumProp\": \"Value2\",\n  \"enumFlags\": 3,\n  \"enumStyleMembers\": \"UPPER\"\n}\n```\n\n----------------------------------------\n\nTITLE: Extending MarkdownFileInfo for Custom Frontmatter\nDESCRIPTION: Demonstrates how to extend the base MarkdownFileInfo class to include additional metadata properties using ServiceStack's auto-mapping\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MarkdownFileInfo : MarkdownFileBase\n{\n    // Add additional frontmatter info to include\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Actions with YAML\nDESCRIPTION: The `release.yml` file defines GitHub Actions workflow for deploying a ServiceStack app to a server using SSH. It builds a Docker image and pushes it to ghcr.io when a release is created. The workflow also copies files via scp and uses `docker-compose` to run the application remotely.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nrelease.yml\n```\n\n----------------------------------------\n\nTITLE: Custom Domain Configuration for GitHub Pages\nDESCRIPTION: Example CNAME file content for configuring a custom domain with GitHub Pages static site hosting.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nwww.mydomain.org\n```\n\n----------------------------------------\n\nTITLE: Blazor Loading Component with Prerendered Content\nDESCRIPTION: Razor component that checks for and displays prerendered content before showing a loading spinner\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/prerender.md#2025-04-16_snippet_7\n\nLANGUAGE: razor\nCODE:\n```\n@inject IJSRuntime JsRuntime\n@inject NavigationManager NavigationManager\n\n@if (!string.IsNullOrEmpty(prerenderedHtml))\n{\n    @((MarkupString)prerenderedHtml)\n}\nelse\n{\n    <div class=@CssUtils.ClassNames(\"spinner-border float-start mt-2 me-2\", @class)>\n        <span class=\"sr-only\"></span>\n    </div>\n    <h1 style=\"font-size:36px\">\n        Loading...\n    </h1>\n}\n\n@code {\n    [Parameter]\n    public string Message { get; set; } = \"Loading...\";\n\n    [Parameter]\n    public string @class { get; set; } = \"\";\n\n    public string prerenderedHtml { get; set; } = \"\";\n\n    protected override async Task OnInitializedAsync()\n    {\n        var html = await JsRuntime.InvokeAsync<string>(\"prerenderedPage\") ?? \"\";\n        var currentPath = new Uri(NavigationManager.Uri).AbsolutePath;\n        if (html.IndexOf($\"data-prerender=\\\"{currentPath}\\\"\") >= 0)\n            prerenderedHtml = html;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Dependencies and Plugins in ASP.NET Core IOC\nDESCRIPTION: Shows how to register dependencies and ServiceStack plugins using ASP.NET Core's IServiceCollection in a ConfigureDb class implementing IHostingStartup. This approach is necessary as dependencies must be registered before the WebApplication is built.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConfigureDb : IHostingStartup\n{\n    public void Configure(IWebHostBuilder builder) => builder\n        .ConfigureServices((context, services) => {\n            services.AddSingleton<IDbConnectionFactory>(new OrmLiteConnectionFactory(\n                context.Configuration.GetConnectionString(\"DefaultConnection\"),\n                SqliteDialect.Provider));\n            \n            // Enable Audit History\n            services.AddSingleton<ICrudEvents>(c =>\n                new OrmLiteCrudEvents(c.GetRequiredService<IDbConnectionFactory>()));\n            \n            // Enable AutoQuery RDBMS APIs\n            services.AddPlugin(new AutoQueryFeature {\n                 MaxLimit = 1000,\n            });\n\n            // Enable AutoQuery Data APIs\n            services.AddPlugin(new AutoQueryDataFeature());\n            \n            // Enable built-in Database Admin UI at /admin-ui/database\n            services.AddPlugin(new AdminDatabaseFeature());\n        })\n        .ConfigureAppHost(appHost => {\n            appHost.Resolve<ICrudEvents>().InitSchema();\n        });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JsonServiceClient in Java/Kotlin\nDESCRIPTION: This code snippet demonstrates how to instantiate a JsonServiceClient in Java or Kotlin with a specified base URL for accessing ServiceStack APIs.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nJsonServiceClient client = new JsonServiceClient(baseUrl);\n```\n\n----------------------------------------\n\nTITLE: Static Import Map Configuration (C#)\nDESCRIPTION: This C# snippet shows how to configure a static import map using `Html.StaticImportMap`.  This allows mapping module names (like 'vue' or '@servicestack/client') to their corresponding file paths within the application, simplifying imports in JavaScript code.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n@Html.StaticImportMap(new() {\n    [\"vue\"]                  = \"/lib/mjs/vue.mjs\",\n    [\"@servicestack/client\"] = \"/lib/mjs/servicestack-client.mjs\",\n    [\"@servicestack/vue\"]    = \"/lib/mjs/servicestack-vue.mjs\",\n})\n```\n\n----------------------------------------\n\nTITLE: Vue Modal Dialog Component Example\nDESCRIPTION: Complex Vue component example using ServiceStack Vue components for modal dialog functionality.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Plugin = {\n    template:`<div>\n        <PrimaryButton @click=\"show=true\">Open Modal</PrimaryButton>\n        <ModalDialog v-if=\"show\" @done=\"show=false\">\n            <div class=\"p-8\">Hello @servicestack/vue!</div>\n        </ModalDialog>\n    </div>`,\n    setup() {\n        const show = ref(false)\n        return { show }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Navigation Rendering for Blazor App - JavaScript\nDESCRIPTION: This JavaScript snippet dynamically generates the navigation menus for a Blazor application based on predefined CSV data structures. It ensures that users can navigate the app even before it fully loads, thus enhancing the perceived performance.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/prerender.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTOP = `\n    $0.40 /mo,        /docs/hosting\n    Prerendering,     /docs/prerender\n    Deployments,      /docs/deploy\n`\nSIDEBAR = `\n    Counter,          /counter,       /img/nav/counter.svg\n    Todos,            /todomvc,       /img/nav/todomvc.svg\n    Bookings CRUD,    /bookings-crud, /img/nav/bookings-crud.svg\n    Call Hello,       /hello$,        /img/nav/hello.svg\n    Call HelloSecure, /hello-secure,  /img/nav/hello-secure.svg\n    Fetch data,       /fetchdata,     /img/nav/fetchdata.svg\n`\n\nconst path = location.pathname\nconst renderNav = (csv, f) => csv.trim().split(/\\r?\\n/g).map(s => f.apply(null, s.split(',').map(x => x.trim()))).join('')\n$1 = s => document.querySelector(s)\n\n/* Header */\n$1('#app-loading header nav ul').insertAdjacentHTML('afterbegin', renderNav(TOP, (label, route) =>\n    `<li class=\"relative flex flex-wrap just-fu-start m-0\">\n        <a href=\"${route}\" class=\"flex items-center justify-start mw-full p-4 hover:text-green-600\">${label}</a></li>`\n))\n\n/* Sidebar */\nconst NAV = ({ label, route, exact, icon, cls, iconCls }) => `<a href=\"${route}\"\n    class=\"${cls}${(exact ? path == route : path.startsWith(route)) ? ' bg-gray-100 text-gray-900' : ''}\">\n    <img class=\"${iconCls}\" src=\"${icon}\">\n    ${label}\n</a>`\n\n$1('#app-loading .mobile nav').innerHTML = renderNav(SIDEBAR, (label, route, icon) => NAV({\n    label, cls: `text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-base font-medium`,\n    iconCls: `mr-4 flex-shrink-0 h-6 w-6`,\n    icon, route: route.replace(/\\$$/, ''), exact: route.endsWith('$')\n}))\n$1('#app-loading .desktop nav').innerHTML = renderNav(SIDEBAR, (label, route, icon) => NAV({\n    label, cls: `text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium`,\n    iconCls: `mr-3 flex-shrink-0 h-6 w-6`,\n    icon, route: route.replace(/\\$$/, ''), exact: route.endsWith('$')\n}))\n```\n\n----------------------------------------\n\nTITLE: Creating a New ServiceStack Application with .NET CLI\nDESCRIPTION: This code snippet demonstrates how to use the .NET CLI to install the ServiceStack command-line tool and create a new ServiceStack application. This is essential for generating a project template that includes the necessary GitHub Action workflows.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/_pages/deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet tool install --global x\nx new web YourApp\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown Frontmatter with Markdig in C#\nDESCRIPTION: Code snippet that parses Markdown content using Markdig library, extracting YAML frontmatter and converting it to a MarkdownFileInfo object using ServiceStack's automapping feature.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_prerendering.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar content = VirtualFiles.GetFile(path).ReadAllText();\nvar document = Markdown.Parse(content, pipeline);\nvar block = document\n    .Descendants<Markdig.Extensions.Yaml.YamlFrontMatterBlock>()\n    .FirstOrDefault();\nvar doc = block?\n    .Lines // StringLineGroup[]\n    .Lines // StringLine[]\n    .Select(x => $\"{x}\\n\")\n    .ToList()\n    .Select(x => x.Replace(\"---\", string.Empty))\n    .Where(x => !string.IsNullOrWhiteSpace(x))\n    .Select(x => KeyValuePairs.Create(x.LeftPart(':').Trim(), x.RightPart(':').Trim()))\n    .ToObjectDictionary()\n    .ConvertTo<MarkdownFileInfo>();\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function for Accessing Prerendered Page\nDESCRIPTION: Provides a window-level function to retrieve prerendered page content from the loading element\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/prerender.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script>\n/* Loading */\nwindow.prerenderedPage = function () {\n    const el = document.querySelector('#app-loading .content')\n    return el && el.innerHTML || ''\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring AutoQueryFeature with AutoRegister for Automatic Service Registration\nDESCRIPTION: Code snippet showing how to enable the AutoRegister flag in GenerateCrudServices to automatically register generated service DTOs without manual importing.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindAuto/README.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nPlugins.Add(new AutoQueryFeature {\n    GenerateCrudServices = new GenerateCrudServices {\n        AutoRegister = true,\n        //....\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Fast Component Loading with Embedded JSON\nDESCRIPTION: This HTML snippet demonstrates fast component loading by embedding JSON data directly into the page. It invokes the `QueryTodos` API in process using `ApiResultsAsJsonAsync` and passes the result to the `TodoMvc` component during mounting, avoiding initial Ajax requests.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<script>todos = @await ApiResultsAsJsonAsync(new QueryTodos())</script>\n<script type=\"module\">\nimport TodoMvc from \"/Pages/TodoMvc.mjs\"\nimport { mount } from \"/mjs/app.mjs\"\nmount('#todomvc', TodoMvc, { todos })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Typesense Scraper Configuration\nDESCRIPTION: JSON configuration for the Typesense document scraper defining the indexing rules and selectors for the ServiceStack documentation site.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"index_name\": \"typesense_docs\",\n  \"allowed_domains\": [\"docs.servicestack.net\"],\n  \"start_urls\": [\n    {\n      \"url\": \"https://docs.servicestack.net/\"\n    }\n  ],\n  \"selectors\": {\n    \"default\": {\n      \"lvl0\": \".page h1\",\n      \"lvl1\": \".content h2\",\n      \"lvl2\": \".content h3\",\n      \"lvl3\": \".content h4\",\n      \"lvl4\": \".content h5\",\n      \"text\": \".content p, .content ul li, .content table tbody tr\"\n    }\n  },\n  \"scrape_start_urls\": false,\n  \"strip_chars\": \" .,;:#\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling ServiceStack REST Service from Swift\nDESCRIPTION: This snippet demonstrates how to call the CustomerService GET endpoint using Swift with the JsonServiceClient.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet client = JsonServiceClient(baseUrl: BaseUri)\n\nclient.getAsync(GetCustomers())\n    .then {\n        let results = $0.results;\n    }\n```\n\n----------------------------------------\n\nTITLE: Rendering Temporary Loading Chrome for Blazor App - HTML\nDESCRIPTION: This HTML structure serves as a temporary loading screen for a Blazor application, providing users with a visual interface while the app is loading. It includes elements like headers, navigation bars, and placeholders that create the illusion of a fast-loading application.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/prerender.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n    <!-- loading: render temp static app chrome to improve perceived performance -->\n    <div id=\"app-loading\">\n        <!-- <Header/> -->\n        <header class=\"border-b border-gray-200 pr-3\">\n            ...\n            <nav class=\"relative flex flex-grow\">\n                <ul class=\"flex flex-wrap items-center justify-end w-full m-0\">\n                    <li class=\"relative flex flex-wrap just-fu-start m-0\">\n                        <a href=\"/signup\" class=\"m-2\">\n                            <button class=\"inline-flex items-center px-4 py-2 border\">\n                                Sign In\n                            </button>\n                        </a>\n                    </li>\n                </ul>\n            </nav>\n        </header>\n        <!-- <Sidebar> Off-canvas menu for mobile, show/hide based on off-canvas menu state. -->\n        <div class=\"mobile relative z-40 hidden\" role=\"dialog\" aria-modal=\"true\">\n            ...\n            <nav class=\"mt-5 px-2 space-y-1\">\n            </nav>\n        </div>\n        <!-- Static sidebar for desktop -->\n        <div class=\"desktop hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0\">\n            ...\n            <nav class=\"mt-5 flex-1 px-2 bg-white space-y-1\">\n            </nav>\n        </div>\n        <!-- <MainLayout/> -->\n        <div class=\"md:pl-64 flex flex-col flex-1\">\n            <main class=\"flex-1\">\n                <div class=\"py-6\">\n                    <div class=\"content px-4 sm:px-6 md:px-8\">\n                        <!--PAGE-->\n                        <div class=\"mb-4\">\n                            <h1 class=\"text-2xl font-semibold text-gray-900 flex\">\n                                <span>Loading...</span>\n                            </h1>\n                        </div>\n                        <!--/PAGE-->\n                    </div>\n                </div>\n            </main>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Navigation Links in ServiceStack Template\nDESCRIPTION: A navigation section that provides links to other pages in the application. Demonstrates relative URL routing in ServiceStack.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir2/MPage3.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n```\n\n----------------------------------------\n\nTITLE: Sending App Emails with Service Gateway and Background MQ\nDESCRIPTION: Example code demonstrating how to send custom application emails either asynchronously through a background message queue or synchronously using the Service Gateway.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyServices : Service\n{\n    public object Any(MyRequest request)\n    {\n        // Send Email in managed Background MQ Worker\n        PublishMessage(new SendEmail {\n            To = email,\n            Subject = subject,\n            BodyHtml = body,\n        });\n\n        // Block until Email is sent to SMTP Server\n        Gateway.Send(new SendEmail {\n            To = email,\n            Subject = subject,\n            BodyHtml = body,\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing .NET App with Custom Parameters\nDESCRIPTION: Example of how to pass custom parameters to the dotnet publish command to trigger specific tasks during the build process.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-01_deploy.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndotnet publish -c Release /p:APP_TASKS=prerender\n```\n\n----------------------------------------\n\nTITLE: useAuth() in Vue.js\nDESCRIPTION: This JavaScript snippet shows how to use the `useAuth()` composable in Vue.js to access authentication information and sign in a user. It imports `useAuth` from the `@servicestack/vue` package and uses the `signIn` function with data from the `Authenticate` API, embedded in the Razor view.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useAuth } from \"@@servicestack/vue\"\nconst { signIn } = useAuth()\nsignIn(@await Html.ApiAsJsonAsync(new Authenticate()))\n```\n\n----------------------------------------\n\nTITLE: Creating JsonApiClient in C#\nDESCRIPTION: This snippet shows how to instantiate a JsonApiClient using a base URI for accessing ServiceStack APIs following the updated `/api` base path convention.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new JsonApiClient(baseUri);\n```\n\n----------------------------------------\n\nTITLE: HTML markup for API integration example\nDESCRIPTION: Basic HTML structure with a text input and result container for demonstrating the ServiceStack API integration.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-21_start.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" id=\"txtName\">\n<div id=\"result\"></div>\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code with JavaScript in Blazor\nDESCRIPTION: This snippet uses the qrcode.min.js library to generate a QR code for Blazor applications. It sets up an inline script to initialize the QR code on the page. This requires the QRCode library as a prerequisite and additional modules to handle enhanced navigation within Blazor. It expects an HTML element with data attributes containing the QR data.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-permanent id=\"qrCode\"></div>\n<div id=\"qrCodeData\" data-url=\"@_authenticatorUri\"></div>\n\n<script src=\"lib/js/qrcode.min.js\"></script>\n<script>\nnew QRCode(document.getElementById('qrCode'), \n    document.getElementById('qrCodeData').dataset.url)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Safari Polyfill for Import Maps\nDESCRIPTION: This HTML snippet conditionally includes the ES Module Shims polyfill for Safari if the browser is Safari and not Chrome.  The polyfill ensures that Import Maps functionality is available in Safari browsers that do not natively support it.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n@if (Context.Request.Headers.UserAgent.Any(x => x.Contains(\"Safari\") && !x.Contains(\"Chrome\")))\n{\n    <script async src=\"https://ga.jspm.io/npm:es-module-shims@1.6.3/dist/es-module-shims.js\"></script>\n}\n```\n\n----------------------------------------\n\nTITLE: Including Chart.js in Vue Component for Blog Posts\nDESCRIPTION: This JavaScript snippet shows how to import Chart.js into a custom Vue component for rendering charts within a blog post. It uses Vue's setup composition API to create and render a chart based on data passed through props.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-08-23_razor-ssg-new-blog-features.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref, onMounted } from \"vue\"\nimport { addScript } from \"@servicestack/client\"\n\nlet loadJs = addScript('https://cdn.jsdelivr.net/npm/chart.js/dist/chart.umd.min.js')\n\nexport default {\n    template:`<div><canvas ref=\"chart\"></canvas></div>`,\n    props:['type','data','options'],\n    setup(props) {\n        const chart = ref()\n        onMounted(async () => {\n            await loadJs\n\n            const options = props.options || {\n                responsive: true,\n                legend: {\n                    position: \"top\"\n                }\n            }\n            new Chart(chart.value, {\n                type: props.type || \"bar\",\n                data: props.data,\n                options,\n            })\n\n        })\n        return { chart }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering EmailSender in Program.cs\nDESCRIPTION: Code snippet showing how to register the EmailSender implementation as a singleton for the IEmailSender interface in the application's dependency injection container.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddSingleton<IEmailSender, EmailSender>();\n```\n\n----------------------------------------\n\nTITLE: Custom MSBuild Tasks in .NET Project File\nDESCRIPTION: XML configuration for a .NET project file that detects and executes custom build tasks based on parameters passed during the publishing process.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-01_deploy.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<!-- Prerender tasks run in release.yml -->\n<Target Name=\"AppTasks\" AfterTargets=\"Build\" Condition=\"$(APP_TASKS) != ''\">\n    <CallTarget Targets=\"Prerender\" Condition=\"$(APP_TASKS.Contains('prerender'))\" />\n</Target>\n<Target Name=\"Prerender\">\n    <Message Text=\"Prerender...\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Keyup Event to Call API Using ServiceStack JS Client - HTML/JavaScript\nDESCRIPTION: This snippet demonstrates how to set up an event listener for a text input that triggers an API call to the Hello service upon keyup, utilizing the @servicestack/client library. It sets the resulting output directly into the DOM element with ID 'result'. Dependencies include the ServiceStack client library and the Hello DTO.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" id=\"txtName\">\n<div id=\"result\"></div>\n\n<script type=\"module\">\nimport { JsonApiClient, $1, on } from '@servicestack/client'\nimport { Hello } from '/types/mjs'\n\non('#txtName', {\n    async keyup(el) {\n        const client = JsonApiClient.create()\n        const api = await client.api(new Hello({ name:el.target.value }))\n        $1('#result').innerHTML = api.response.result\n    }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Advanced Authorization with ASP.NET Core Attributes\nDESCRIPTION: Example of using ASP.NET Core's [Authorize] attribute for fine-grained API authorization\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[Authorize(Roles = \"RequiredRole\")]\n[Authorize(Policy = \"RequiredPolicy\")]\n[Authorize(AuthenticationSchemes = \"Identity.Application,Bearer\")]\npublic class Secured {}\n```\n\n----------------------------------------\n\nTITLE: Typesense API Search Query\nDESCRIPTION: JavaScript code snippet performing a search query to a Typesense instance, fetching documents by searching various content fields, grouping by hierarchy levels. The search query utilizes an API key for authentication. It requires fetch API availability and Typesense setup.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://search.docs.servicestack.net/collections/typesense_docs/documents/search?q='\n  + encodeURIComponent(query.value)\n  + '&query_by=content,hierarchy.lvl0,hierarchy.lvl1,hierarchy.lvl2,hierarchy.lvl3&group_by=hierarchy.lvl0', {\n    headers: {\n      // Search only API key for Typesense.\n      'x-typesense-api-key': 'TYPESENSE_SEARCH_ONLY_API_KEY'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring .csproj for CDN Deployment\nDESCRIPTION: This XML snippet demonstrates how to configure a .csproj file to handle deployment tasks, specifically for CDN deployment. It includes defining properties for client directory and wwwroot, and targets for deploying API and CDN. The API deployment target updates the production settings with the DEPLOY_API and creates a 404.html fallback for SPA routing. The CDN deployment target defines the custom domain name the CDN should use.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Wasm/Gallery.Wasm.Client/wwwroot/content/deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <ClientDir>$(MSBuildProjectDirectory)/../MyApp.Client</ClientDir>\n    <WwwRoot>$(ClientDir)/wwwroot</WwwRoot>\n</PropertyGroup>\n\n<!-- Populated in release.yml with GitHub Actions secrets -->\n<Target Name=\"DeployApi\" AfterTargets=\"Build\" Condition=\"$(DEPLOY_API) != ''\">\n    <Exec Command=\"echo DEPLOY_API=$(DEPLOY_API)\" />\n\n    <!-- Update Production settings with DEPLOY_API Blazor UI should use  -->\n    <WriteLinesToFile File=\"$(WwwRoot)/appsettings.Production.json\" \n        Lines=\"$([System.IO.File]::ReadAllText($(WwwRoot)/appsettings.Production.json).Replace('{DEPLOY_API}',$(DEPLOY_API)))\" \n        Overwrite=\"true\" Encoding=\"UTF-8\" />\n\n    <!-- 404.html SPA fallback (supported by GitHub Pages, Cloudflare & Netlify CDNs) -->\n    <Copy SourceFiles=\"$(WwwRoot)/index.html\" \n        DestinationFiles=\"$(WwwRoot)/wwwroot/404.html\" />\n\n    <!-- define /api proxy routes (supported by Cloudflare or Netlify CDNs)  -->\n    <WriteLinesToFile File=\"$(WwwRoot)/_redirects\" \n        Lines=\"$([System.IO.File]::ReadAllText($(WwwRoot)/_redirects).Replace('{DEPLOY_API}',$(DEPLOY_API)))\" \n        Overwrite=\"true\" Encoding=\"UTF-8\" />\n</Target>\n<Target Name=\"DeployCdn\" AfterTargets=\"Build\" Condition=\"$(DEPLOY_CDN) != ''\">\n    <Exec Command=\"echo DEPLOY_CDN=$(DEPLOY_CDN)\" />\n\n    <!-- Define custom domain name that CDN should use -->\n    <Exec Condition=\"$(DEPLOY_CDN) != ''\" Command=\"echo $(DEPLOY_CDN) &gt; $(WwwRoot)/CNAME\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Calling ServiceStack REST Service from TypeScript\nDESCRIPTION: This snippet shows how to call the CustomerService GET endpoint using TypeScript with the JsonServiceClient.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new JsonServiceClient(baseUrl);\nconst { results } = await client.get(new GetCustomers());\n```\n\n----------------------------------------\n\nTITLE: Extending Identity Auth Cookies and User Sessions in ServiceStack\nDESCRIPTION: This code shows how to extend Identity Auth cookies and user sessions in ServiceStack by overriding PopulateFromClaims() in a custom user session and adding additional claims to the Identity Auth Cookie.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomUserSession : AuthUserSession\n{\n    public override void PopulateFromClaims(IRequest httpReq, ClaimsPrincipal principal)\n    {\n        // Populate Session with data from Identity Auth Claims\n        ProfileUrl = principal.FindFirstValue(JwtClaimTypes.Picture);\n    }\n}\n\n// Add additional claims to the Identity Auth Cookie\npublic class AdditionalUserClaimsPrincipalFactory(UserManager<ApplicationUser> userManager, RoleManager<IdentityRole> roleManager, IOptions<IdentityOptions> optionsAccessor)\n    : UserClaimsPrincipalFactory<ApplicationUser,IdentityRole>(userManager, roleManager, optionsAccessor)\n{\n    public override async Task<ClaimsPrincipal> CreateAsync(ApplicationUser user)\n    {\n        var principal = await base.CreateAsync(user);\n        var identity = (ClaimsIdentity)principal.Identity!;\n\n        var claims = new List<Claim>();\n        // Add additional claims here\n        if (user.ProfileUrl != null)\n        {\n            claims.Add(new Claim(JwtClaimTypes.Picture, user.ProfileUrl));\n        }\n\n        identity.AddClaims(claims);\n        return principal;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handle Keyboard Shortcuts with Vue\nDESCRIPTION: This TypeScript code handles keyboard shortcuts to toggle the search dialog visibility in a VitePress application. It listens for the Escape, Slash, and CTRL+K keys, managing focus and default actions accordingly. Requires TypeScript, Vue, and a custom VitePress layout.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst onKeyDown = (e:KeyboardEvent) => {\n    if (e.code === 'Escape') {\n        hideSearch();\n    }\n    else if ((e.target as HTMLElement).tagName != 'INPUT') {\n        if (e.code == 'Slash' || (e.ctrlKey && e.code == 'KeyK')) {\n            showSearch();\n            e.preventDefault();\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up nginx Reverse Proxy with Docker Compose\nDESCRIPTION: Command to start an nginx reverse proxy and its LetsEncrypt companion container using Docker Compose. This sets up the server to handle multiple .NET app deployments with automatic TLS certificate management.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-30_net8-docker-containers.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f ~/nginx-proxy-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Vue HTML Template Integration Example\nDESCRIPTION: Complete example of Vue component integration using HTML templates with reactive functionality.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n    <primary-button v-on:click=\"show=true\">Open Modal</primary-button>\n    <modal-dialog v-if=\"show\" v-on:done=\"show=false\">\n        <div class=\"p-8\">Hello @servicestack/vue!</div>\n    </modal-dialog>\n</div>\n<script>\nconst App = {\n    setup() {\n        const show = ref(false)\n        return { show }\n    }\n}\nmount('#app', App)\n</script>\n```\n\n----------------------------------------\n\nTITLE: Wildcard Routes with ASP.NET Core Syntax\nDESCRIPTION: Shows how to define wildcard routes using ASP.NET Core's routing syntax\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Route(\"/wildcard/{*Path}\")]\n[Route(\"/wildcard/{**Path}\")]\npublic class GetFile : IGet, IReturn<byte[]>\n{\n    public string Path { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model and Layout in Razor View for Rockstars Listing\nDESCRIPTION: Sets up the model type as RockstarsResponse and defines the layout as HtmlReport. Creates a dynamic title based on whether an age filter is applied.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Views/RockstarsMark.md#2025-04-16_snippet_0\n\nLANGUAGE: razor\nCODE:\n```\n@model RockstarsResponse\n@Layout HtmlReport\n\n@var Title = Model.Aged.HasValue ? Model.Aged + \"year old rockstars\" : \"All Rockstars\"\n```\n\n----------------------------------------\n\nTITLE: Setting CDN Proxy Routes\nDESCRIPTION: The `_redirects` file specifies proxy rules for API requests routed through the CDN. This setting helps prevent CORS issues by directing `/api` requests to the deployment server.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/deploy.md#2025-04-16_snippet_4\n\nLANGUAGE: Plaintext\nCODE:\n```\n/api/*  {DEPLOY_API}/api/:splat  200\n```\n\n----------------------------------------\n\nTITLE: Calling ServiceStack REST Service from Kotlin\nDESCRIPTION: This snippet demonstrates how to call the CustomerService GET endpoint using Kotlin with the JsonServiceClient.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/README.md#2025-04-16_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = JsonServiceClient(BaseUri)\n\nval response = client.get(GetCustomers())\nval results = response.results\n```\n\n----------------------------------------\n\nTITLE: Optimizing Password Hash Updates During Migration\nDESCRIPTION: This SQL snippet describes how to efficiently update password hashes in the database for all users in one single SQL command instead of multiple N+1 queries, suitable for databases that support the UPDATE FROM syntax.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE AspNetUsers\nSET PasswordHash = u.PasswordHash\nFROM (SELECT Email, PasswordHash FROM AppUser WHERE PasswordHash is NOT NULL) AS u\nWHERE u.Email = AspNetUsers.Email;\n```\n\n----------------------------------------\n\nTITLE: Starting Typesense Docker Container\nDESCRIPTION: Command to run a Typesense server locally using Docker with volume mounting for data persistence and CORS enabled.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir /tmp/typesense-data\ndocker run -p 8108:8108 -v/tmp/data:/data typesense/typesense:0.21.0 \\\n    --data-dir /data --api-key=<temp-admin-api-key> --enable-cors\n```\n\n----------------------------------------\n\nTITLE: Accessing Markdown Metadata in Vue\nDESCRIPTION: Shows how to access the Vite Press Plugin metadata in a Vue application using dependency injection with the VirtualPress type.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { VirtualPress } from \"vite-plugin-press\"\n\nconst press:VirtualPress = inject('press')!\n```\n\n----------------------------------------\n\nTITLE: Rendering a Video Group Component in TSX\nDESCRIPTION: This snippet demonstrates how to utilize the VideoGroup component in a TSX file to render a collection of related videos.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<VideoGroup\\n  title=\\\"Vue Components\\\"\\n  summary=\\\"Learn about productive features in Vue Component Library\\\"\\n  group=\\\"vue\\\"\\n  learnMore=\\\"https://docs.servicestack.net/vue/\\\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a New ServiceStack Blazor Project\nDESCRIPTION: Command to create a new ServiceStack Blazor project using the x dotnet tool. This generates a project pre-configured with necessary Docker compose files and GitHub Action workflows.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-30_net8-docker-containers.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nx new blazor ProjectName\n```\n\n----------------------------------------\n\nTITLE: Vue Client-only Wrapper for Search UI\nDESCRIPTION: This HTML snippet uses VitePress ClientOnly component to render custom Vue components only on the client side. It ensures the search UI and keyboard events are handled by the components TypeSenseDialog and KeyboardEvents, respectively. It requires Vue and VitePress setup.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<ClientOnly>\n    <KeyboardEvents @keydown=\"onKeyDown\" />\n    <TypeSenseDialog :open=\"openSearch\" @hide=\"hideSearch\" />\n</ClientOnly>\n```\n\n----------------------------------------\n\nTITLE: Creating New Razor Pages Project with x CLI\nDESCRIPTION: Command to create a new Razor Pages application with Tailwind CSS that includes Identity Auth UI Pages using the ServiceStack x CLI tool.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nx new razor ProjectName\n```\n\n----------------------------------------\n\nTITLE: Loading QR Code Module in Blazor\nDESCRIPTION: This JavaScript module is designed to dynamically load the QR Code library and initialize a QR Code using an exported load() function. It uses addScript to load the qrcode.min.js script and selects HTML elements to apply the data URL. It's executed for enhanced navigation and requires the @servicestack/client module.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addScript, $1 } from \"@servicestack/client\"\nconst loadJs = addScript('lib/js/qrcode.min.js')\n\nexport default {\n    async load() {\n        await loadJs\n        new QRCode($1(\"#qrCode\"), $1('#qrCodeData').dataset.url)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI and Swagger UI with JWT Auth Support\nDESCRIPTION: Setup for enabling OpenAPI, Swagger UI, and ServiceStack's support for JWT Bearer authentication in the Swagger UI interface during development.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-11_jwt-identity-auth.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ConfigureOpenApi : IHostingStartup\n{\n    public void Configure(IWebHostBuilder builder) => builder\n        .ConfigureServices((context, services) => {\n            if (context.HostingEnvironment.IsDevelopment())\n            {\n                services.AddEndpointsApiExplorer();\n                services.AddSwaggerGen();\n                services.AddServiceStackSwagger();\n                services.AddJwtAuth();\n                //services.AddBasicAuth<Data.ApplicationUser>();\n            \n                services.AddTransient<IStartupFilter,StartupFilter>();\n            }\n        });\n\n    public class StartupFilter : IStartupFilter\n    {\n        public Action<IApplicationBuilder> Configure(Action<IApplicationBuilder> next)\n            => app => {\n                // Provided by Swashbuckle library\n                app.UseSwagger();\n                app.UseSwaggerUI();\n                next(app);\n            };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Typesense Document Scraper\nDESCRIPTION: Docker command to run the Typesense document scraper with configuration files.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --env-file typesense-scraper.env \\\n    -e \"CONFIG=$(cat typesense-scraper-config.json | jq -r tostring)\" \\\n    typesense/docsearch-scraper\n```\n\n----------------------------------------\n\nTITLE: Accessing Markdown Metadata in React\nDESCRIPTION: Demonstrates how to access Vite Press Plugin metadata in a React application using the useContext hook with a PressContext.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PressContext } from \"@/contexts\"\n\nconst press = useContext(PressContext)\n```\n\n----------------------------------------\n\nTITLE: Defining React Context for VirtualPress\nDESCRIPTION: Shows how to create a React context for the VirtualPress metadata to make it available throughout a React application.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createContext } from 'react'\nimport type { VirtualPress } from 'vite-plugin-press'\n\nexport const PressContext = createContext<VirtualPress>({} as VirtualPress)\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Secrets for Deployment - Bash\nDESCRIPTION: This snippet demonstrates how to use the GitHub CLI to set up necessary deployment secrets in a GitHub repository. These secrets will be used in GitHub Actions workflows to ensure secure deployment of applications.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-30_net8-docker-containers.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngh secret set DEPLOY_HOST --body=\"linux-server-host\"\ngh secret set DEPLOY_USERNAME --body=\"linux-server-username\"\ngh secret set DEPLOY_KEY --bodyFile=\"path/to/ssh-private-key\"\ngh secret set LETSENCRYPT_EMAIL --body=\"your-email@example.org\"\n```\n\n----------------------------------------\n\nTITLE: Defining OldAppUser Model for Migration in ServiceStack\nDESCRIPTION: This code defines an OldAppUser model used to fetch user data from the old ServiceStack AppUser table for migration to Identity Auth. It includes only the necessary properties for migration.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Used by OrmLite to fetch User data to migrate from old ServiceStack `AppUser` table\n[Alias(\"AppUser\")]\npublic class OldAppUser\n{\n    [AutoIncrement]\n    public int Id { get; set; }\n    public string UserName { get; set; }\n    public string DisplayName { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string? Handle { get; set; }\n    public string Email { get; set; }\n    public string PasswordHash { get; set; }\n    public string? ProfileUrl { get; set; }\n    public string? Avatar { get; set; } //overrides ProfileUrl\n    public string? LastLoginIp { get; set; }\n    public DateTime? LastLoginDate { get; set; }\n    public string RefIdStr { get; set; }\n    public DateTime? LockedDate { get; set; }\n    public DateTime CreatedDate { get; set; }\n    public DateTime ModifiedDate { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Razor Pages Project with Bootstrap and x CLI\nDESCRIPTION: Command to create a new Razor Pages application with Bootstrap CSS that includes Identity Auth UI Pages using the ServiceStack x CLI tool.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nx new razor-bootstrap ProjectName\n```\n\n----------------------------------------\n\nTITLE: Configuring MSBuild Target for Prerendering in CI/CD\nDESCRIPTION: XML configuration for the .csproj file that sets up a custom build target to run prerendering tasks during the build process. This enables automatic prerendering when the application is built with the APP_TASKS environment variable set to include 'prerender'.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Wasm/Gallery.Wasm.Client/wwwroot/content/prerender.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <TestsDir>$(MSBuildProjectDirectory)/../MyApp.Tests</TestsDir>\n</PropertyGroup>\n<Target Name=\"AppTasks\" AfterTargets=\"Build\" Condition=\"$(APP_TASKS) != ''\">\n    <CallTarget Targets=\"Prerender\" Condition=\"$(APP_TASKS.Contains('prerender'))\" />\n</Target>\n<Target Name=\"Prerender\">\n    <Exec Command=\"dotnet test --filter TestCategory=prerender --logger:&quot;console;verbosity=detailed&quot;\" \n            WorkingDirectory=\"$(TestsDir)\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Div with Format Options and Navigation\nDESCRIPTION: Generates an HTML div containing links for viewing the page in different formats (JSON, XML, JSV, CSV) and navigation links to other pages.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir2/MPage4.md#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n^<div style=\"float:right\">\n\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n\n^</div>\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Secrets with GitHub CLI\nDESCRIPTION: GitHub CLI commands for setting up the required secrets for the GitHub Actions deployment workflow, including SSH credentials and Let's Encrypt email.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-01_deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh secret set DEPLOY_HOST -b\"<DEPLOY_HOST>\"\ngh secret set DEPLOY_USERNAME -b\"<DEPLOY_USERNAME>\"\ngh secret set DEPLOY_KEY < key.pem # DEPLOY_KEY\ngh secret set LETSENCRYPT_EMAIL -b\"<LETSENCRYPT_EMAIL>\"\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Operation Filter in Swagger Generation\nDESCRIPTION: This snippet shows how to register a custom OperationFilter when configuring Swagger generation in the ASP.NET Core service collection.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-08_openapi-v3.md#2025-04-16_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.AddSwaggerGen(o =>\n{\n    o.OperationFilter<OperationRenameFilter>();\n});\n```\n\n----------------------------------------\n\nTITLE: Blog Configuration Settings in JSON\nDESCRIPTION: Defines the configuration settings for the blog, including base URLs, title, description, email, and image URL.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"localBaseUrl\\\": \\\"http://localhost:5173\\\",\\n  \\\"publicBaseUrl\\\": \\\"https://press-vue.servicestack.net\\\",\\n  \\\"siteTwitter\\\": \\\"@Vue\\\",\\n  \\\"blogTitle\\\": \\\"From the blog\\\",\\n  \\\"blogDescription\\\": \\\"Writing on software design and aerospace industry.\\\",\\n  \\\"blogEmail\\\": \\\"email@example.org (Vue)\\\",\\n  \\\"blogImageUrl\\\": \\\"https://servicestack.net/img/logo.png\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Markdown Rendering in Razor Pages\nDESCRIPTION: This snippet demonstrates inline markdown rendering in Razor Pages with the <markdown> tag. It allows for dynamic markdown content generation directly within Razor views.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-08-23_razor-ssg-new-blog-features.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<markdown>\n## Using Formatters\n\nYour App and custom templates can also utilize @servicestack/vue's\n[built-in formatting functions](href=\"/vue/use-formatters).\n</markdown>\n```\n\n----------------------------------------\n\nTITLE: Example Markdown Frontmatter\nDESCRIPTION: Demonstrates the YAML frontmatter used to define metadata for markdown pages, including title, summary, author, tags, and image URL.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle:   Vite Press Plugin\nsummary: Introducing the Vite Press Plugin\nauthor:  Lucy Bates\ntags:    [docs,markdown]\nimage:   https://source.unsplash.com/random/2000x1000/?stationary\n---\n```\n\n----------------------------------------\n\nTITLE: Creating New MVC Project with Bootstrap and x CLI\nDESCRIPTION: Command to create a new MVC application with Bootstrap CSS that includes Identity Auth UI Pages using the ServiceStack x CLI tool.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nx new mvc-bootstrap ProjectName\n```\n\n----------------------------------------\n\nTITLE: ServiceStack Application Startup Sequence Log\nDESCRIPTION: Detailed startup sequence log showing the order of operations during application initialization, including service configuration, authentication setup, database context configuration, and plugin registration. Shows the complete lifecycle from initial configuration to final initialization.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/App_Data/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nProgram.cs\n\nAppHost.ConfigureServices()\nConfigureAuth.ConfigureServices()\nConfigureAutoQuery.ConfigureServices()\nConfigureDb.ConfigureServices()\nConfigureSsg.ConfigureServices()\nConfigureMq.ConfigureServices()   \n\nWebApplication.CreateBuilder(args)\nservices.AddAuthentication()\nservices.AddDbContext()   \nservices.AddIdentityCore()\nservices.AddBlazorServerIdentityApiClient()\n\nservices.AddServiceStack()\nAutoQueryFeature.Configure(IServiceCollection)\nAutoQueryFeature.AfterConfigure(IServiceCollection)\nValidationFeature.AfterConfigure(IServiceCollection)\nValidationFeature.EnableDeclarativeValidation\n\nvar app = builder.Build();\napp.UseServiceStack()\n\nConfigureDbMigrations.ConfigureAppHost(ServiceStackHost)\nValidationFeature.BeforePluginsLoaded(IAppHost)\nAutoQueryFeature.BeforePluginsLoaded(IAppHost)\nValidationFeature.Register(IAppHost)\nAutoQueryFeature.Register(IAppHost)\nValidationFeature: appHost.PostConfigurePlugin<MetadataFeature>(IAppHost)\n\nValidationFeature.AfterInit\nBlazorConfig.Set()\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for Prerendering at Deployment\nDESCRIPTION: GitHub Actions workflow YAML configuration that triggers the prerendering process during the CI/CD pipeline when publishing the .NET application.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_prerendering.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n # Publish .NET Project\n - name: Publish dotnet project\n   working-directory: ./MyApp\n   run: | \n     dotnet publish -c Release /p:APP_TASKS=prerender\n```\n\n----------------------------------------\n\nTITLE: Running nginx-proxy with Docker Compose on Remote Server\nDESCRIPTION: Command to run nginx reverse proxy and its companion container for TLS certificate management on the remote server using docker-compose.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-01_deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f ~/nginx-proxy-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Mounting Global Vue Components in JavaScript\nDESCRIPTION: This JavaScript snippet defines a 'mount' function that registers global Vue components and mounts a specified component with optional props to a selected element. It iterates through a predefined 'Components' object, registering each component globally before mounting the target component. This ensures that components are available for declarative instantiation via data-component attributes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport GettingStarted from \"./components/GettingStarted.mjs\"\n\n/** Shared Global Components */\nconst Components = {\n    GettingStarted,\n}\n\nexport function mount(sel, component, props) {\n    const app = createApp(component, props)\n    Object.keys(Components).forEach(name => {\n        app.component(name, Components[name])\n    })\n    app.mount(document.querySelector(sel))\n}\n```\n\n----------------------------------------\n\nTITLE: Author Metadata Structure in JSON\nDESCRIPTION: This snippet represents the structure of metadata for blog authors, including name, email, bio, and social URLs.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\\n  {\\n    \\\"name\\\": \\\"Lucy Bates\\\",\\n    \\\"email\\\": \\\"lucy@email.org\\\",\\n    \\\"bio\\\": \\\"Writing on software design and aerospace industry.\\\",\\n    \\\"profileUrl\\\": \\\"/img/profiles/user1.svg\\\",\\n    \\\"twitterUrl\\\": \\\"https://twitter.com/lucy\\\",\\n    \\\"threadsUrl\\\": \\\"https://threads.net/@lucy\\\",\\n    \\\"gitHubUrl\\\": \\\"https://github.com/lucy\\\"\\n  },\\n]\n```\n\n----------------------------------------\n\nTITLE: Markdown Tag Helper for Rendering Markdown Content\nDESCRIPTION: Shows how to use the Markdown Tag Helper in Razor Pages with Tailwind typography styles\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"css/typography.css\">\n<markdown class=\"prose\">\n  Markdown content...\n</markdown>\n```\n\n----------------------------------------\n\nTITLE: Running Tailwind Development Server\nDESCRIPTION: Command to start the Tailwind development server using npm for UI development.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-10_vs.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run ui:dev\n```\n\n----------------------------------------\n\nTITLE: GitHub CLI Secret Configuration for Deployment\nDESCRIPTION: Bash commands to set up GitHub repository secrets for deployment configuration using GitHub CLI\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh secret set DEPLOY_API -b\"<DEPLOY_API>\"\ngh secret set DEPLOY_USERNAME -b\"<DEPLOY_USERNAME>\"\ngh secret set DEPLOY_KEY < key.pem\ngh secret set LETSENCRYPT_EMAIL -b\"<LETSENCRYPT_EMAIL>\"\ngh secret set DEPLOY_CDN -b\"<DEPLOY_CDN>\"\n```\n\n----------------------------------------\n\nTITLE: Installing ServiceStack.Extensions NuGet Package for Identity Auth Integration\nDESCRIPTION: Installing the ServiceStack.Extensions NuGet package which contains the .NET 6+ Identity Auth integration components.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<PackageReference Include=\"ServiceStack.Extensions\" Version=\"8.*\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Floating Right Div in Razor Template\nDESCRIPTION: Creates a div element positioned on the right side of the page using CSS floating. The caret symbol indicates raw HTML output in a Razor template.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir/MPage2.md#2025-04-16_snippet_1\n\nLANGUAGE: razor\nCODE:\n```\n^<div style=\"float:right\">\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key for GitHub Actions\nDESCRIPTION: Commands to generate a dedicated SSH key pair for use with GitHub Actions deployments. This includes creating the key and adding it to the authorized_keys file on the server.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-30_net8-docker-containers.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh-keygen -t rsa -b 4096 -f ~/.ssh/github_actions\ncat ~/.ssh/github_actions.pub >> ~/.ssh/authorized_keys\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Submission in Static Blazor Components\nDESCRIPTION: HTML example demonstrating how to implement form submission behavior in a static Blazor component using JavaScript to submit a form and prevent default navigation, avoiding the need for Blazor's interactive rendering modes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<LogoutForm id=\"logout-form\" />\n<NavLink class=\"nav-link\" onclick=\"document.getElementById('logout-form').submit(); return false;\">\n    <span class=\"bi bi-arrow-bar-left\" aria-hidden=\"true\"></span> Logout\n</NavLink>\n```\n\n----------------------------------------\n\nTITLE: Embedding Vue Component in HTML for Razor SSG\nDESCRIPTION: Shows how to embed a Vue 3 component called 'GettingStarted' into an HTML page for enhanced interactivity in Razor SSG.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<getting-started template=\"razor-ssg\"></getting-started>\n```\n\n----------------------------------------\n\nTITLE: Dynamically Rendering Navigation with JavaScript\nDESCRIPTION: This JavaScript code snippet dynamically generates the navigation menus for the Blazor application while the app is loading. It utilizes CSV data for menu items and links to build the menu structure seamlessly. The script depends on the HTML structure provided in the previous snippet and uses DOM manipulation for rendering.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/prerender.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTOP = `\n    $0.40 /mo,        /docs/hosting\n    Prerendering,     /docs/prerender\n    Deployments,      /docs/deploy\n`\nSIDEBAR = `\n    Counter,          /counter,       /img/nav/counter.svg\n    Todos,            /todomvc,       /img/nav/todomvc.svg\n    Bookings CRUD,    /bookings-crud, /img/nav/bookings-crud.svg\n    Call Hello,       /hello$,        /img/nav/hello.svg\n    Call HelloSecure, /hello-secure,  /img/nav/hello-secure.svg\n    Fetch data,       /fetchdata,     /img/nav/fetchdata.svg\n`\nconst path = location.pathname\nconst renderNav = (csv, f) => csv.trim().split(/\\r?\\n/g).map(s => f.apply(null, s.split(',').map(x => x.trim()))).join('')\n$1 = s => document.querySelector(s)\n\n/* Header */\n$1('#app-loading header nav ul').insertAdjacentHTML('afterbegin', renderNav(TOP, (label, route) =>\n    `<li class=\"relative flex flex-wrap just-fu-start m-0\">\n        <a href=\"${route}\" class=\"flex items-center justify-start mw-full p-4 hover:text-green-600\">${label}</a></li>`\n))\n\n/* Sidebar */\nconst NAV = ({ label, route, exact, icon, cls, iconCls }) => `<a href=\"${route}\"\n    class=\"${cls}${(exact ? path == route : path.startsWith(route)) ? ' bg-gray-100 text-gray-900' : ''}\">\n    <img class=\"${iconCls}\" src=\"${icon}\">\n    ${label}\n</a>`\n\n$1('#app-loading .mobile nav').innerHTML = renderNav(SIDEBAR, (label, route, icon) => NAV({\n    label, cls: `text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-base font-medium`,\n    iconCls: `mr-4 flex-shrink-0 h-6 w-6`,\n    icon, route: route.replace(/\\$$/, ''), exact: route.endsWith('$')\n}))\n$1('#app-loading .desktop nav').innerHTML = renderNav(SIDEBAR, (label, route, icon) => NAV({\n    label, cls: `text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium`,\n    iconCls: `mr-3 flex-shrink-0 h-6 w-6`,\n    icon, route: route.replace(/\\$$/, ''), exact: route.endsWith('$')\n}))\n```\n\n----------------------------------------\n\nTITLE: SQLite3 DLL Path Configuration\nDESCRIPTION: File path instructions for copying SQLite3 DLL based on system architecture. For 32-bit systems, copy from x86 directory, and for 64-bit systems, copy from x64 directory. After copying, the Build Action in Visual Studio should be set to 'Copy if Newer'.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/README.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfor 32bit pc\n  - copy \\sqlite\\x86\\sqlite3.dll to \\\nor for 64bit\n  - copy \\sqlite\\x64\\sqlite3.dll to \\\n```\n\n----------------------------------------\n\nTITLE: Creating Static HTML Placeholder for Blazor WASM\nDESCRIPTION: This HTML snippet creates a static placeholder structure that mimics the layout of the Blazor application, providing an immediate visual feedback to users during the loading phase.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Wasm/Gallery.Wasm.Client/wwwroot/content/prerender.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n    <!-- loading: render temp static app chrome to improve perceived performance -->\n    <div id=\"app-loading\">\n        <!-- <Header/> -->\n        <header class=\"border-b border-gray-200 pr-3\">\n            ...\n            <nav class=\"relative flex flex-grow\">\n                <ul class=\"flex flex-wrap items-center justify-end w-full m-0\">\n                    <li class=\"relative flex flex-wrap just-fu-start m-0\">\n                        <a href=\"/signup\" class=\"m-2\">\n                            <button class=\"inline-flex items-center px-4 py-2 border\">\n                                Sign In\n                            </button>\n                        </a>\n                    </li>\n                </ul>\n            </nav>\n        </header>\n        <!-- <Sidebar> Off-canvas menu for mobile, show/hide based on off-canvas menu state. -->\n        <div class=\"mobile relative z-40 hidden\" role=\"dialog\" aria-modal=\"true\">\n            ...\n            <nav class=\"mt-5 px-2 space-y-1\">\n            </nav>\n        </div>\n        <!-- Static sidebar for desktop -->\n        <div class=\"desktop hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0\">\n            ...\n            <nav class=\"mt-5 flex-1 px-2 bg-white space-y-1\">\n            </nav>\n        </div>\n        <!-- <MainLayout/> -->\n        <div class=\"md:pl-64 flex flex-col flex-1\">\n            <main class=\"flex-1\">\n                <div class=\"py-6\">\n                    <div class=\"content px-4 sm:px-6 md:px-8\">\n                        <!--PAGE-->\n                        <div class=\"mb-4\">\n                            <h1 class=\"text-2xl font-semibold text-gray-900 flex\">\n                                <span>Loading...</span>\n                            </h1>\n                        </div>\n                        <!--/PAGE-->\n                    </div>\n                </div>\n            </main>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Fetch Search Implementation\nDESCRIPTION: JavaScript code showing how to implement search functionality using the Fetch API.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nfetch('http://localhost:8108/collections/typesense_docs/documents/search?q='\n    + encodeURIComponent(query) + '&query_by=content', {\n    headers: {\n        // Search only API key for Typesense.\n        'x-typesense-api-key': 'TYPESENSE_SEARCH_ONLY_API_KEY'\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Closing a Floating Div in Razor Template\nDESCRIPTION: Closes the floating div element that was opened earlier in the template. The caret symbol ensures the closing tag is output as raw HTML.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir/MPage2.md#2025-04-16_snippet_4\n\nLANGUAGE: razor\nCODE:\n```\n^</div>\n```\n\n----------------------------------------\n\nTITLE: Git Commands to Push Changes - Bash\nDESCRIPTION: This snippet covers the basic Git commands to push changes to the main branch, which triggers the GitHub Actions workflow for deployment. It illustrates the typical workflow from adding changes to pushing to the remote repository.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-30_net8-docker-containers.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"Initial commit\"\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Implementing Year-Based Post Filtering in Razor SSG\nDESCRIPTION: Razor page implementation for displaying posts from specific years with static site generation support. Uses IRenderStatic to generate static pages for each year with published posts.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-03-30_razor-ssg.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n@page \"/posts/year/{year}\"\n@model YearModel\n@inject MarkdownBlog Blog\n\n@implements IRenderStatic<YearModel>\n@functions {\n    public List<YearModel> GetStaticProps(RenderContext ctx) => ctx.Resolve<MarkdownBlog>()\n        .VisiblePosts.Select(x => x.Date.GetValueOrDefault().Year)\n            .Distinct().Map(x => new YearModel { Year = x });\n}\n\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Right-Aligned Navigation Panel with HTML and Markdown\nDESCRIPTION: Creates a floating right-aligned div containing format links and navigation to other pages using a combination of HTML and Markdown syntax.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/MRootPage.md#2025-04-16_snippet_1\n\nLANGUAGE: razor\nCODE:\n```\n^<div style=\"float:right\">\n\n**view this page in:**\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n\n^</div>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Sidebar and Top Menu Generation in Blazor WASM\nDESCRIPTION: This JavaScript snippet dynamically generates navigation menus for the sidebar and top navigation in a Blazor WASM application. It utilizes CSV data to render menu items, highlighting the active menu's status. The code enables navigating to desired pages before the full application load, improving user interaction during loading.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/prerender.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst SIDEBAR = `\n    Home,home,/$\n    Counter,plus,/counter\n    Todos,clipboard,/todomvc\n    Bookings CRUD,calendar,/bookings-crud\n    Call Hello,transfer,/hello$\n    Call HelloSecure,shield,/hello-secure\n    Fetch data,list-rich,/fetchdata\n    Admin,lock-locked,/admin\n    Login,account-login,/signin\n`\nconst TOP = `\n    0.40 /mo,dollar,/docs/hosting\n    Prerendering,loop-circular,/docs/prerender\n    Deployments,cloud-upload,/docs/deploy\n`\n\nconst path = location.pathname\nconst NAV = ({ label, cls, icon, route, exact }) => `<li class=\"nav-item${cls}\">\n    <a href=\"${route}\" class=\"nav-link${(exact ? path==route : path.startsWith(route)) ? ' active' : ''}\">\n        <span class=\"oi oi-${icon}\" aria-hidden=\"true\"></span> ${label}\n    </a></li>`\nconst renderNav = (csv,f) => csv.trim().split(/\\r?\\n/g).map(s => NAV(f.apply(null,s.split(',')))).join('')\nconst $1 = s => document.querySelector(s)\n\n$1('#app-loading .sidebar .nav').innerHTML = renderNav(SIDEBAR, (label, icon, route) => ({\n    label, cls: ` px-3${route == SIDEBAR[0].route ? ' pt-3' : ''}`,\n    icon, route: route.replace(/\\$$/, ''), exact: route.endsWith('$')\n}))\n\n$1('#app-loading .main-top-row .nav').innerHTML = renderNav(TOP, (label, icon, route) => ({\n    label, cls: '', icon, route: route.replace(/\\$$/, ''), exact: route.endsWith('$')\n}))\n```\n\n----------------------------------------\n\nTITLE: Generating Typesense API Keys via CURL\nDESCRIPTION: A bash command using curl to generate a search-only API key for a local Typesense server. The command includes headers for authentication and specifies the capabilities of the created API key. It requires the Typesense server to be running and accepts a predefined API key.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://172.17.0.2:8108/keys' -X POST \\\n  -H \"X-TYPESENSE-API-KEY: ${TYPESENSE_API_KEY}\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"value\":<search-api-key>,\"description\":\"Search only\",\"actions\":[\"documents:search\"],\"collections\":[\"*\"]}'\n```\n\n----------------------------------------\n\nTITLE: Adding Subtle Box Shadow for Perceived Performance Enhancement\nDESCRIPTION: This HTML style snippet adds a subtle box shadow to prerendered content, distinguishing it from the Blazor-rendered page. This visual cue helps users perceive content as partially loaded, thus enhancing the perception of a quicker load time.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/prerender.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n#app-loading .content { box-shadow: inset 0 4px 4px 0 rgb(0 0 0 / 0.05) }\n</style>\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Deployment Pattern for Docker Compose\nDESCRIPTION: Demonstrates a deployment workflow using GitHub Actions, SSH, and Docker Compose for managing multiple applications with NGINX proxy and LetsEncrypt\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2022-09-06_hetzner-cloud.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# GitHub Actions deployment workflow example (not fully provided in text)\n```\n\n----------------------------------------\n\nTITLE: Customizing JsonSerializerOptions in ServiceStack\nDESCRIPTION: Demonstrates how to customize the JsonSerializerOptions used by ServiceStack and apply the same configuration to ASP.NET Core's JSON APIs and MVC.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-09_system-text-json-apis.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder.Services.ConfigureJsonOptions(options => {\n    options.PropertyNamingPolicy = JsonNamingPolicy.SnakeCaseLower;\n})\n.ApplyToApiJsonOptions()  // Apply to ASP.NET Core's JSON APIs\n.ApplyToMvcJsonOptions(); // Apply to MVC\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Secrets Using GitHub CLI\nDESCRIPTION: These commands set up the required GitHub secrets using the GitHub CLI. These secrets are used to populate variables within GitHub Actions and configuration files, enabling secure deployment and CDN configuration.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Server.Tests/Server/wwwroot/content/deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"gh secret set DEPLOY_API -b\\\"<DEPLOY_API>\\\"\\ngh secret set DEPLOY_USERNAME -b\\\"<DEPLOY_USERNAME>\\\"\\ngh secret set DEPLOY_KEY < key.pem # DEPLOY_KEY\\ngh secret set LETSENCRYPT_EMAIL -b\\\"<LETSENCRYPT_EMAIL>\\\"\\ngh secret set DEPLOY_CDN -b\\\"<DEPLOY_CDN>\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown to HTML with Markdig in C#\nDESCRIPTION: Code that configures the Markdig pipeline with necessary extensions and renders the Markdown content into HTML using the HtmlRenderer. The result is stored in the MarkdownFileInfo object.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_prerendering.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar pipeline = new MarkdownPipelineBuilder()\n    .UseYamlFrontMatter()\n    .UseAdvancedExtensions()\n    .Build();\nvar writer = new StringWriter();\nvar renderer = new Markdig.Renderers.HtmlRenderer(writer);\npipeline.Setup(renderer);\n//...\n\nrenderer.Render(document);\nwriter.Flush();\ndoc.Preview = writer.ToString();\n```\n\n----------------------------------------\n\nTITLE: Generating Format Links for ServiceStack Content Negotiation\nDESCRIPTION: Provides links to view the current page in different data formats (JSON, XML, JSV, CSV) using ServiceStack's format query parameter for content negotiation.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir/MPage2.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Secrets for Deployment\nDESCRIPTION: Bash commands are used to set GitHub Secrets necessary for deployment. These commands configure secrets such as `DEPLOY_API`, `DEPLOY_USERNAME`, `DEPLOY_KEY`, etc., which are used by GitHub Actions to manage deployment settings.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngh secret set DEPLOY_API -b\"<DEPLOY_API>\"\ngh secret set DEPLOY_USERNAME -b\"<DEPLOY_USERNAME>\"\ngh secret set DEPLOY_KEY < key.pem # DEPLOY_KEY\ngh secret set LETSENCRYPT_EMAIL -b\"<LETSENCRYPT_EMAIL>\"\ngh secret set DEPLOY_CDN -b\"<DEPLOY_CDN>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Search-Only API Key\nDESCRIPTION: cURL command to generate a search-only API key with restricted permissions.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://localhost:8108/keys' -X POST \\\n  -H \"X-TYPESENSE-API-KEY: ${TYPESENSE_API_KEY}\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"description\": \"Search only\",\"actions\": [\"documents:search\"],\"collections\":[\"*\"]}'\n```\n\n----------------------------------------\n\nTITLE: Embedding Vue Components in Markdown with Razor SSG\nDESCRIPTION: This snippet demonstrates how to embed a Vue component within a Markdown blog post using Razor SSG. The example uses the custom `<getting-started>` component to showcase its integration.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-08-23_razor-ssg-new-blog-features.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<getting-started template=\"razor-ssg\"></getting-started>\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Placeholder for Blazor App\nDESCRIPTION: This HTML snippet depicts a loading placeholder structure designed to enhance the perceived performance of a Blazor application. It includes a loading message and the static template structure that appears while the Blazor app is initializing. No external dependencies are needed as it's pure HTML.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/prerender.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n    <!-- loading: render temp static app chrome to improve perceived performance -->\n    <div id=\"app-loading\">\n        <!-- <Header/> -->\n        <header class=\"border-b border-gray-200 pr-3\">\n            ...\n            <nav class=\"relative flex flex-grow\">\n                <ul class=\"flex flex-wrap items-center justify-end w-full m-0\">\n                    <li class=\"relative flex flex-wrap just-fu-start m-0\">\n                        <a href=\"/signup\" class=\"m-2\">\n                            <button class=\"inline-flex items-center px-4 py-2 border\">\n                                Sign In\n                            </button>\n                        </a>\n                    </li>\n                </ul>\n            </nav>\n        </header>\n        <!-- <Sidebar> Off-canvas menu for mobile, show/hide based on off-canvas menu state. -->\n        <div class=\"mobile relative z-40 hidden\" role=\"dialog\" aria-modal=\"true\">\n            ...\n            <nav class=\"mt-5 px-2 space-y-1\">\n            </nav>\n        </div>\n        <!-- Static sidebar for desktop -->\n        <div class=\"desktop hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0\">\n            ...\n            <nav class=\"mt-5 flex-1 px-2 bg-white space-y-1\">\n            </nav>\n        </div>\n        <!-- <MainLayout/> -->\n        <div class=\"md:pl-64 flex flex-col flex-1\">\n            <main class=\"flex-1\">\n                <div class=\"py-6\">\n                    <div class=\"content px-4 sm:px-6 md:px-8\">\n                        <!--PAGE-->\n                        <div class=\"mb-4\">\n                            <h1 class=\"text-2xl font-semibold text-gray-900 flex\">\n                                <span>Loading...</span>\n                            </h1>\n                        </div>\n                        <!--/PAGE-->\n                    </div>\n                </div>\n            </main>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title in Razor Template\nDESCRIPTION: Defines the page title variable in a Razor template that will be used to set the page's title when rendered.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/MPage1.md#2025-04-16_snippet_0\n\nLANGUAGE: Razor\nCODE:\n```\n@var Title = \"Page 1\"\n```\n\n----------------------------------------\n\nTITLE: Running docker-compose with nginx proxy\nDESCRIPTION: This command runs the nginx reverse proxy and companion container, enabling automated TLS certificate generation and management for multiple ServiceStack applications. It assumes that the `nginx-proxy-compose.yml` file has been copied to the remote server.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Server.Tests/Server/wwwroot/content/deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"docker-compose -f ~/nginx-proxy-compose.yml up -d\"\n```\n\n----------------------------------------\n\nTITLE: Installing npm dependencies for ServiceStack project\nDESCRIPTION: Command to install npm dependencies if the project wasn't created with 'x new'. This ensures all required packages are available for the project.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-21_start.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Iterating through Rockstars Collection with Delete Links\nDESCRIPTION: Uses a Razor foreach loop to iterate through the rockstars collection and display each rockstar's age, first name, last name, and a delete link with the rockstar's ID.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Views/RockstarsMark.md#2025-04-16_snippet_3\n\nLANGUAGE: cshtml\nCODE:\n```\n@foreach rockstar in Model.Results {\n  - (@rockstar.Age.Value) @rockstar.FirstName @rockstar.LastName [delete](/rockstars/delete/@rockstar.Id)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Secrets using GitHub CLI\nDESCRIPTION: This snippet demonstrates how to set GitHub secrets using the GitHub CLI. These secrets are used to populate variables within GitHub Actions and configuration files for deployment.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Tailwind.Tests/Client/wwwroot/content/deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh secret set DEPLOY_API -b\\\"<DEPLOY_API>\\\"\ngh secret set DEPLOY_USERNAME -b\\\"<DEPLOY_USERNAME>\\\"\ngh secret set DEPLOY_KEY < key.pem # DEPLOY_KEY\ngh secret set LETSENCRYPT_EMAIL -b\\\"<LETSENCRYPT_EMAIL>\\\"\ngh secret set DEPLOY_CDN -b\\\"<DEPLOY_CDN>\\\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Sidebar from Markdown to JSON using Node.js\nDESCRIPTION: This code snippet reads a Markdown file 'SideBar.md', parses it using 'markdown-it', and creates a JSON object representing the sidebar structure with specific heading levels.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-01_jekyll-to-vitepress.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet fs = require('fs')\nlet MarkdownIt = require('markdown-it');\nlet md = new MarkdownIt();\n\nlet content = fs.readFileSync('SideBar.md','utf8')\nlet res = md.parse(content).filter((element, index) => {\n    return (element.level == '3' || element.level == '5') && element.type == 'inline';\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Reactive Vue 3 Counter Component\nDESCRIPTION: Shows how to create a reactive counter component using Vue 3's Composition API with ref for state management.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from \"vue\"\n\nconst Counter = {\n    template: `<b @click=\"count++\">Counter {{count}}</b>`,\n    setup() {\n        let count = ref(1)\n        return { count }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running nginx Docker Container\nDESCRIPTION: This Docker command is used to start an nginx reverse proxy on the deployment server. The container will monitor the network for additional containers and manage TLS certificates automatically.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: Docker\nCODE:\n```\ndocker-compose -f ~/nginx-proxy-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Displaying Current UTC Time with Razor\nDESCRIPTION: Renders the current UTC time by embedding C# DateTime.UtcNow directly in the template using Razor syntax.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/MRootPage.md#2025-04-16_snippet_2\n\nLANGUAGE: razor\nCODE:\n```\nTime is: @DateTime.UtcNow\n```\n\n----------------------------------------\n\nTITLE: Publishing with Prerendering in CI/CD\nDESCRIPTION: Bash command for CI/CD pipelines that publishes the application with prerendering enabled. This is used in GitHub Actions to build the app and generate prerendered content.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/prerender.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet publish -c Release /p:APP_TASKS=prerender\n```\n\n----------------------------------------\n\nTITLE: Import Map Configuration (Local Minified)\nDESCRIPTION: This C# snippet shows how to configure an import map to reference local minified production builds of dependencies, ensuring the web app doesn't reference external dependencies.  The local path specified will be used for each corresponding dependency.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n@Html.ImportMap(new()\n{\n    [\"vue\"]                  = (\"/lib/mjs/vue.mjs\",                 \"/lib/mjs/vue.min.mjs\"),\n    [\"@servicestack/client\"] = (\"/lib/mjs/servicestack-client.mjs\", \"/lib/mjs/servicestack-client.min.mjs\"),\n    [\"@servicestack/vue\"]    = (\"/lib/mjs/servicestack-vue.mjs\",    \"/lib/mjs/servicestack-vue.min.mjs\")\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Page Title in Razor Syntax\nDESCRIPTION: Sets the page title variable using Razor syntax. This variable is likely used in a layout template to set the HTML title tag.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/Dir/MPage2.md#2025-04-16_snippet_0\n\nLANGUAGE: razor\nCODE:\n```\n@var Title = \"Page 2\"\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Secrets with GitHub CLI\nDESCRIPTION: These commands use the GitHub CLI to set secrets required for the release.yml workflow. The secrets include the deployment API hostname, SSH username, SSH private key, Let's Encrypt email, and CDN hostname. These secrets are used to populate variables within GitHub Actions and configuration files.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Wasm/Gallery.Wasm.Client/wwwroot/content/deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngh secret set DEPLOY_API -b\"<DEPLOY_API>\"\ngh secret set DEPLOY_USERNAME -b\"<DEPLOY_USERNAME>\"\ngh secret set DEPLOY_KEY < key.pem # DEPLOY_KEY\ngh secret set LETSENCRYPT_EMAIL -b\"<LETSENCRYPT_EMAIL>\"\ngh secret set DEPLOY_CDN -b\"<DEPLOY_CDN>\"\n```\n\n----------------------------------------\n\nTITLE: File Structure for Markdown Feature Folders\nDESCRIPTION: Shows the directory structure for organizing markdown content within feature folders. Each folder with a '_' prefix represents a different markdown feature type.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/_includes\n/_posts\n/_videos\n/_whatsnew\n```\n\n----------------------------------------\n\nTITLE: JSON Patch for appsettings.json - JSON\nDESCRIPTION: This JSON snippet shows a JSON Patch used to update sensitive information in the appsettings.json file for production applications. This allows for the safe management of API keys and other secrets outside of the source code.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-30_net8-docker-containers.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n    { \"op\":\"add\", \"path\":\"]/oauth.facebook.AppSecret\",  \"value\":\"xxxx\" },\n    { \"op\":\"add\", \"path\":\"]/oauth.microsoft.AppSecret\", \"value\":\"xxxx\" },\n    { \"op\":\"add\", \"path\":\"]/smtp\", \"value\":{\n        \"UserName\": \"xxxx\",\n        \"Password\": \"xxxx\",\n        \"Host\": \"smtp-server.example.org\",\n        \"Port\": 587,\n        \"From\": \"noreply@example.org\",\n        \"FromName\": \"No Reply\"\n      } \n    }\n]\n```\n\n----------------------------------------\n\nTITLE: After Build Tasks in .csproj for Deployment\nDESCRIPTION: The XML configuration within the .csproj file specifies post-build tasks for deploying Blazor client assets. It copies and modifies configuration files and defines settings for CDN deployment.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/deploy.md#2025-04-16_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<PropertyGroup>\n    <ClientDir>$(MSBuildProjectDirectory)/../MyApp.Client</ClientDir>\n    <WwwRoot>$(ClientDir)/wwwroot</WwwRoot>\n</PropertyGroup>\n\n<Target Name=\"DeployApi\" AfterTargets=\"Build\" Condition=\"$(DEPLOY_API) != ''\">\n    <Exec Command=\"echo DEPLOY_API=$(DEPLOY_API)\" />\n    <WriteLinesToFile File=\"$(WwwRoot)/appsettings.Production.json\" \n        Lines=\"$([System.IO.File]::ReadAllText($(WwwRoot)/appsettings.Production.json).Replace('{DEPLOY_API}',$(DEPLOY_API)))\" \n        Overwrite=\"true\" Encoding=\"UTF-8\" />\n    <Copy SourceFiles=\"$(WwwRoot)/index.html\" \n        DestinationFiles=\"$(WwwRoot)/wwwroot/404.html\" />\n    <WriteLinesToFile File=\"$(WwwRoot)/_redirects\" \n        Lines=\"$([System.IO.File]::ReadAllText($(WwwRoot)/_redirects).Replace('{DEPLOY_API}',$(DEPLOY_API)))\" \n        Overwrite=\"true\" Encoding=\"UTF-8\" />\n</Target>\n<Target Name=\"DeployCdn\" AfterTargets=\"Build\" Condition=\"$(DEPLOY_CDN) != ''\">\n    <Exec Command=\"echo DEPLOY_CDN=$(DEPLOY_CDN)\" />\n    <Exec Condition=\"$(DEPLOY_CDN) != ''\" Command=\"echo $(DEPLOY_CDN) &gt; $(WwwRoot)/CNAME\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Calling ServiceStack REST Service from Dart\nDESCRIPTION: This snippet shows how to call the CustomerService GET endpoint using Dart with the JsonServiceClient.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/README.md#2025-04-16_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar client = new JsonServiceClient(BaseUri);\n\nvar response = await client.get(GetCustomers());\nvar results = client.results;\n```\n\n----------------------------------------\n\nTITLE: Starting .NET Watch Server\nDESCRIPTION: Command to start the .NET application in watch mode for automatic recompilation on changes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-10_vs.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Authors with Social Links in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure author profiles within the `AppConfig` section of a ServiceStack application. It includes fields for name, email, profile URL, and social media URLs such as Twitter, Threads, GitHub, and Mastodon, allowing for comprehensive author profiles.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-08-23_razor-ssg-new-blog-features.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AppConfig\": {\n    \"BlogImageUrl\": \"https://servicestack.net/img/logo.png\",\n    \"Authors\": [\n      {\n        \"Name\": \"Lucy Bates\",\n        \"Email\": \"lucy@email.org\",\n        \"ProfileUrl\": \"img/authors/author1.svg\",\n        \"TwitterUrl\": \"https://twitter.com/lucy\",\n        \"ThreadsUrl\": \"https://threads.net/@lucy\",\n        \"GitHubUrl\": \"https://github.com/lucy\",\n        \"MastodonUrl\": \"https://mastodon.social/@lucy\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown View Using HTML Comment Directive\nDESCRIPTION: A special HTML comment directive that instructs ServiceStack to include content from the MPage2.md file. This demonstrates how ServiceStack can include markdown content within Razor templates.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/Dir/MPage2.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!--view:MPage2.md-->\n```\n\n----------------------------------------\n\nTITLE: Pushing Code to Trigger GitHub Actions Deployment\nDESCRIPTION: This bash command sequence outlines the process to push code changes to the main branch of a GitHub repository. Executing this will trigger the CI/CD workflow defined in GitHub Actions, commencing the deployment process.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/_pages/deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\ngit commit -m \"Initial commit\"\ngit push origin main\n```\n\n----------------------------------------\n\nTITLE: Creating JsonServiceClient and JsonHttpClient in C#\nDESCRIPTION: This snippet demonstrates how to create instances of JsonServiceClient and JsonHttpClient while configuring them to use the newer `/api` base path.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new JsonServiceClient(baseUri) {\n    UseBasePath = \"/api\"\n};\nvar client = new JsonHttpClient(baseUri) {\n    UseBasePath = \"/api\"\n};\n```\n\n----------------------------------------\n\nTITLE: CDN Proxy Redirects Configuration\nDESCRIPTION: Configuration file for defining API request proxy routes to enable seamless cross-domain API requests without CORS\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/api/*  {DEPLOY_API}/api/:splat  200\n```\n\n----------------------------------------\n\nTITLE: VitePress Component Import and Usage in Markdown\nDESCRIPTION: Shows how to import and use a Vue component within a VitePress markdown file, illustrating the component-based include pattern.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-01_jekyll-to-vitepress.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<script setup>\nimport catchphrase from './catchphrase.vue';\n</script>\n\n<catchphrase />\n```\n\n----------------------------------------\n\nTITLE: Static C# Keyword Definition\nDESCRIPTION: This snippet contains only the 'static' keyword in C#, which is typically used to declare a static class, method, property, or field that belongs to the type itself rather than to instances of the type.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/static-root.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic\n```\n\n----------------------------------------\n\nTITLE: Testing OrmLite with NUnit CSharp\nDESCRIPTION: Demonstrates running tests against different OrmLite providers using NUnit in C#. Uses the TestFixtureOrmLiteAttribute class to create repeatable tests for different dialects, with configuration options for defaults and environment variable overrides.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/tests/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: CSharp\nCODE:\n```\n[TestFixtureOrmLite]\npublic class DbFeatures1 : OrmLiteProvidersTestBase \n{\n    // Required Ctor, Dialects will be injected by attribute\n    public DbFeatures1(Dialect dialect) : base(dialect)\n    {\n    }\n    \n    // Tests can be repeated for one or more providers\n    [Test]\n    public void Test1() \n    {\n        // Current test dialect\n        var dialect = base.Dialect;\n    \n        // current test dialectprovider\n        var dialectProvider = base.DialectProvider;\n        \n        // current DbFactory\n        var dbFactory = base.DbFactory;\n\n        // open the correct db connection based on dialect \n        using(var db = OpenConnection())\n        {\n            // db agnostic tests\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Files in Other Components with TSX\nDESCRIPTION: Shows how to include markdown files in Vue and React components using the Include component.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Include src=\\\"privacy.md\\\" />\\n\\n<Include src=\\\"features/include.md\\\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title in Razor\nDESCRIPTION: Sets the title of the page using a Razor variable.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/Dir2/MPage3.md#2025-04-16_snippet_0\n\nLANGUAGE: razor\nCODE:\n```\n@var Title = \"Page 3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring .csproj for CDN Deployment\nDESCRIPTION: This XML snippet configures the `.csproj` file for deploying client assets to a CDN. It includes tasks for updating production settings, creating a fallback `404.html` page for SPA routing, and defining `/api` proxy routes for CDNs, using GitHub Actions secrets to populate variables.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Server.Tests/Server/wwwroot/content/deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"<PropertyGroup>\\n    <ClientDir>$(MSBuildProjectDirectory)/../MyApp.Client</ClientDir>\\n    <WwwRoot>$(ClientDir)/wwwroot</WwwRoot>\\n</PropertyGroup>\\n\\n<!-- Populated in release.yml with GitHub Actions secrets -->\\n<Target Name=\\\"DeployApi\\\" AfterTargets=\\\"Build\\\" Condition=\\\"$([MSBuild]::Equals($(DEPLOY_API), ''))\\\" >\\n    <Exec Command=\\\"echo DEPLOY_API=$(DEPLOY_API)\\\" />\\n\\n    <!-- Update Production settings with DEPLOY_API Blazor UI should use  -->\\n    <WriteLinesToFile File=\\\"$(WwwRoot)/appsettings.Production.json\\\" \\n        Lines=\\\"$([System.IO.File]::ReadAllText($(WwwRoot)/appsettings.Production.json).Replace('{DEPLOY_API}',$(DEPLOY_API)))\\\" \\n        Overwrite=\\\"true\\\" Encoding=\\\"UTF-8\\\" />\\n\\n    <!-- 404.html SPA fallback (supported by GitHub Pages, Cloudflare & Netlify CDNs) -->\\n    <Copy SourceFiles=\\\"$(WwwRoot)/index.html\\\" \\n        DestinationFiles=\\\"$(WwwRoot)/wwwroot/404.html\\\" />\\n\\n    <!-- define /api proxy routes (supported by Cloudflare or Netlify CDNs)  -->\\n    <WriteLinesToFile File=\\\"$(WwwRoot)/_redirects\\\" \\n        Lines=\\\"$([System.IO.File]::ReadAllText($(WwwRoot)/_redirects).Replace('{DEPLOY_API}',$(DEPLOY_API)))\\\" \\n        Overwrite=\\\"true\\\" Encoding=\\\"UTF-8\\\" />\\n</Target>\\n<Target Name=\\\"DeployCdn\\\" AfterTargets=\\\"Build\\\" Condition=\\\"$([MSBuild]::Equals($(DEPLOY_CDN), ''))\\\" >\\n    <Exec Command=\\\"echo DEPLOY_CDN=$(DEPLOY_CDN)\\\" />\\n\\n    <!-- Define custom domain name that CDN should use -->\\n    <Exec Condition=\\\"$([MSBuild]::Equals($(DEPLOY_CDN), ''))\\\" Command=\\\"echo $(DEPLOY_CDN) &gt; $(WwwRoot)/CNAME\\\" />\\n</Target>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Client in Dart\nDESCRIPTION: This snippet shows how to create a client that communicates with ServiceStack APIs using the base URL in Dart.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nvar client = ClientFactory.api(baseUrl);\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Links and Format Options in Razor View\nDESCRIPTION: Creates a right-aligned div containing links to view the current page in different formats (JSON, XML, JSV, CSV) and links to other pages in the application.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Views/RockstarsMark.md#2025-04-16_snippet_1\n\nLANGUAGE: razor\nCODE:\n```\n^<div style=\"float:right\">\n\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n\n^</div>\n```\n\n----------------------------------------\n\nTITLE: htmx Boosting for Fast Page Loading\nDESCRIPTION: This HTML snippet demonstrates the use of htmx's boosting feature to improve page loading performance. The `hx-boost=\"true\"` attribute on the `<nav>` element converts all anchor tags within the navigation to use Ajax for loading page content.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<nav hx-boost=\"true\">\n    <ul>\n        <li><a href=\"/Blog\">Blog</a></li>\n    </ul>\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Script Loading for Blog Posts\nDESCRIPTION: This snippet illustrates how individual blog posts can load specific JavaScript files (.mjs) dynamically from the '/wwwroot/posts' folder. This enables the use of libraries like Chart.js for custom functionalities.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-08-23_razor-ssg-new-blog-features.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<file-layout :files=\"{\n    wwwroot: { \n        posts: { _: ['<slug>.mjs','<slug>.css'] },\n    }\n}\"></file-layout>\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Layout with Razor and Markdown\nDESCRIPTION: Combines HTML, Razor syntax, and Markdown to create a page layout with a floating right div containing links and a main content area.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/Dir2/MPage3.md#2025-04-16_snippet_1\n\nLANGUAGE: razor\nCODE:\n```\n^<div style=\"float:right\">\n\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n\n^</div>\n\n### All Rockstars\n\nsource files for this demo\n\n<!--view:MPage3.md-->\n```\n\n----------------------------------------\n\nTITLE: BenchmarkDotNet Environment Configuration\nDESCRIPTION: This snippet shows the environment configuration under which the benchmarks were run. It includes the BenchmarkDotNet version, OS details, CPU information, and .NET Core SDK version. This information helps provide context to the benchmark results.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/tests/ServiceStack.Text.Benchmarks/BenchmarkDotNet.Artifacts/results/MemoryProviderBenchmarks-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n\"BenchmarkDotNet=v0.10.14, OS=Windows 10.0.17134\\nIntel Core i7-7700K CPU 4.20GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores\\n.NET Core SDK=2.1.301\\n  [Host]     : .NET Core 2.1.1 (CoreCLR 4.6.26606.02, CoreFX 4.6.26606.05), 64bit RyuJIT  [AttachedDebugger]\\n  DefaultJob : .NET Core 2.1.1 (CoreCLR 4.6.26606.02, CoreFX 4.6.26606.05), 64bit RyuJIT\"\n```\n\n----------------------------------------\n\nTITLE: htmx Class Tools for UI Enhancements\nDESCRIPTION: This HTML snippet uses the htmx `class-tools` extension to control element visibility during page loading. The `classes=\"remove hidden:load\"` attribute removes the `hidden` class after the page is loaded, preventing UI flicker from showing server-rendered content before JS components load.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"signin\"></div>\n<div class=\"hidden mt-5 flex justify-center\" classes=\"remove hidden:load\">\n    @Html.SrcPage(\"SignIn.mjs\")\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Customer Orders Table\nDESCRIPTION: Iterates through customer orders and generates a table with order details, using helper methods for formatting dates, money, and totals\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/ServiceStack.ServiceHost.Tests/Views/Template/CustomerDetailsResponse.md#2025-04-16_snippet_1\n\nLANGUAGE: cshtml\nCODE:\n```\n@foreach (var customerOrder in Model.CustomerOrders) {\n@var order = customerOrder.Order\n\n<tr>\n  <td>@order.Id</td>\n  <td>@Fmt.ShortDate(order.OrderDate)</td>\n  <td>@Fmt.Money(order.Freight)</td>\n  <td>@Nwnd.OrderTotal(customerOrder.OrderDetails)</td>\n</tr>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JsonServiceClient in Python\nDESCRIPTION: This snippet shows how to create an instance of JsonServiceClient in Python using a specified base URL for ServiceStack APIs.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclient = JsonServiceClient(baseUrl)\n```\n\n----------------------------------------\n\nTITLE: Generating Navigation Section with Format Options and Page Links\nDESCRIPTION: Creates a right-aligned navigation section that includes links to view the data in different formats (JSON, XML, JSV, CSV) and links to other related pages.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Views/RockstarsMark.md#2025-04-16_snippet_1\n\nLANGUAGE: cshtml\nCODE:\n```\n^<div style=\"float:right\">\n\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n\n^</div>\n```\n\n----------------------------------------\n\nTITLE: Javascript import syntax\nDESCRIPTION: This Javascript snippet demostrates importing modules from different libraries.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from \"vue\"\nimport { useClient } from \"@servicestack/vue\"\nimport { JsonApiClient, $1, on } from \"@servicestack/client\"\n```\n\n----------------------------------------\n\nTITLE: Typesense Environment Configuration\nDESCRIPTION: Environment configuration for connecting to a local Typesense server instance.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTYPESENSE_API_KEY=${TYPESENSE_API_KEY}\nTYPESENSE_HOST=localhost\nTYPESENSE_PORT=8108\nTYPESENSE_PROTOCOL=http\n```\n\n----------------------------------------\n\nTITLE: Defining Page Title with Razor Syntax in ServiceStack\nDESCRIPTION: Sets the page title variable using Razor syntax at the top of the template. This variable can be used elsewhere in the template or layout to display the page title.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir2/MPage3.md#2025-04-16_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\n@var Title = \"Page 3\"\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results for Parsing Methods\nDESCRIPTION: This section presents the benchmark results comparing default parsing methods with .NET Core parsing methods for different data types. The table shows the Mean execution time, Error, and Standard Deviation for each method with varying input sizes (N).  The goal is to compare the performance differences between the different parsing implementations.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/tests/ServiceStack.Text.Benchmarks/BenchmarkDotNet.Artifacts/results/MemoryProviderBenchmarks-report-github.md#2025-04-16_snippet_1\n\nLANGUAGE: INI\nCODE:\n```\n\"|              Method |      N |      Mean |     Error |    StdDev |\\n|-------------------- |------- |----------:|----------:|----------:|\\n| **DefaultParseBoolean** |   **1000** |  **30.00 ns** | **0.6018 ns** | **0.5911 ns** |\\n| NetCoreParseBoolean |   1000 |  20.09 ns | 0.1783 ns | 0.1489 ns |\\n|  DefaulParseDecimal |   1000 |  54.57 ns | 1.3897 ns | 1.7067 ns |\\n| NetCoreParseDecimal |   1000 | 189.92 ns | 3.3742 ns | 3.3139 ns |\\n|    DefaulParseFloat |   1000 | 117.37 ns | 0.9250 ns | 0.8652 ns |\\n|   NetCoreParseFloat |   1000 | 102.20 ns | 0.6069 ns | 0.5677 ns |\\n|   DefaulParseDouble |   1000 | 118.04 ns | 2.3821 ns | 2.3395 ns |\\n|  NetCoreParseDouble |   1000 | 101.87 ns | 1.1663 ns | 0.9739 ns |\\n|    DefaulParseInt32 |   1000 |  19.23 ns | 0.0790 ns | 0.0700 ns |\\n|   NetCoreParseInt32 |   1000 |  72.63 ns | 1.4722 ns | 1.8080 ns |\\n|    DefaulParseInt64 |   1000 |  18.35 ns | 0.1577 ns | 0.1231 ns |\\n|   NetCoreParseInt64 |   1000 |  69.79 ns | 0.5492 ns | 0.5138 ns |\\n|   DefaulParseUInt32 |   1000 |  18.66 ns | 0.1509 ns | 0.1260 ns |\\n|  NetCoreParseUInt32 |   1000 |  72.68 ns | 0.3446 ns | 0.3054 ns |\\n| **DefaultParseBoolean** |  **10000** |  **28.35 ns** | **0.1571 ns** | **0.1470 ns** |\\n| NetCoreParseBoolean |  10000 |  19.39 ns | 0.0590 ns | 0.0552 ns |\\n|  DefaulParseDecimal |  10000 |  57.40 ns | 1.1499 ns | 1.8239 ns |\\n| NetCoreParseDecimal |  10000 | 192.12 ns | 2.7811 ns | 2.6014 ns |\\n|    DefaulParseFloat |  10000 | 126.15 ns | 2.5386 ns | 4.2414 ns |\\n|   NetCoreParseFloat |  10000 | 106.11 ns | 1.6362 ns | 1.5305 ns |\\n|   DefaulParseDouble |  10000 | 122.10 ns | 1.9895 ns | 1.8610 ns |\\n|  NetCoreParseDouble |  10000 | 107.38 ns | 2.0829 ns | 1.9483 ns |\\n|    DefaulParseInt32 |  10000 |  19.97 ns | 0.3522 ns | 0.3122 ns |\\n|   NetCoreParseInt32 |  10000 |  72.41 ns | 0.8461 ns | 0.7500 ns |\\n|    DefaulParseInt64 |  10000 |  18.19 ns | 0.0536 ns | 0.0502 ns |\\n|   NetCoreParseInt64 |  10000 |  69.90 ns | 0.8358 ns | 0.6979 ns |\\n|   DefaulParseUInt32 |  10000 |  18.58 ns | 0.1056 ns | 0.0936 ns |\\n|  NetCoreParseUInt32 |  10000 |  72.05 ns | 0.3941 ns | 0.3291 ns |\\n| **DefaultParseBoolean** | **100000** |  **28.40 ns** | **0.1632 ns** | **0.1447 ns** |\\n| NetCoreParseBoolean | 100000 |  19.38 ns | 0.1022 ns | 0.0853 ns |\\n|  DefaulParseDecimal | 100000 |  51.66 ns | 0.2337 ns | 0.2071 ns |\\n| NetCoreParseDecimal | 100000 | 185.71 ns | 1.0153 ns | 0.9000 ns |\\n|    DefaulParseFloat | 100000 | 119.73 ns | 2.4091 ns | 3.0467 ns |\\n|   NetCoreParseFloat | 100000 | 103.48 ns | 0.9406 ns | 0.8798 ns |\\n|   DefaulParseDouble | 100000 | 117.82 ns | 1.0134 ns | 0.9480 ns |\\n|  NetCoreParseDouble | 100000 | 102.38 ns | 0.3972 ns | 0.3316 ns |\\n|    DefaulParseInt32 | 100000 |  19.41 ns | 0.2591 ns | 0.2424 ns |\\n|   NetCoreParseInt32 | 100000 |  72.14 ns | 0.7835 ns | 0.7329 ns |\\n|    DefaulParseInt64 | 100000 |  18.33 ns | 0.1323 ns | 0.1237 ns |\\n|   NetCoreParseInt64 | 100000 |  70.20 ns | 0.5148 ns | 0.4815 ns |\\n|   DefaulParseUInt32 | 100000 |  19.11 ns | 0.4070 ns | 0.4180 ns |\\n|  NetCoreParseUInt32 | 100000 |  74.99 ns | 1.3515 ns | 1.1980 ns |\"\n```\n\n----------------------------------------\n\nTITLE: Building Typesense Docker Image\nDESCRIPTION: A Dockerfile that builds a custom Typesense Docker image by copying pre-indexed data into the container. The image is based on the official Typesense Docker image. No additional dependencies are required beyond Docker.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_8\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM typesense/typesense:0.21.0\n\nCOPY ./data /data\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Compose with ServiceStack\nDESCRIPTION: This snippet demonstrates the use of Docker Compose to run an nginx reverse proxy on a server. It initializes additional containers with TLS certificates when running in the same Docker network. It assumes Docker and Docker Compose are installed on the target server, with ports 80 and 443 accessible.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndocker-compose -f ~/nginx-proxy-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Dynamic Markdown Template with Placeholders\nDESCRIPTION: This Markdown template uses @Model.FirstName and @Model.LastName as placeholders for dynamic content insertion. The template demonstrates basic Markdown syntax, including headings of different levels, unordered lists, and hyperlinks.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/ServiceStack.ServiceHost.Tests/Views/Template/DynamicTpl.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n\"# @Model.FirstName Dynamic Markdown Template\\n\\nHello @Model.FirstName,\\n\\n# heading 1\\n\\n  * @Model.LastName\\n  * @Model.FirstName\\n\\n## heading 2\\n\\nThis is a [servicestack.net link](http://www.servicestack.net)\\n\\n### heading 3\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Vue.js Support in Rider with package.json Configuration\nDESCRIPTION: Adding an empty Vue dependency to package.json to enable Rider's Vue.js support. This is just a heuristic for the IDE and doesn't require installing the actual dependency.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_rider.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"devDependencies\": {\n    \"vue\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Current UTC Time in Razor\nDESCRIPTION: Uses Razor syntax to display the current UTC time by embedding C# DateTime.UtcNow in the HTML output.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/CheckMvc/MRootPage.md#2025-04-16_snippet_1\n\nLANGUAGE: razor\nCODE:\n```\n@DateTime.UtcNow\n```\n\n----------------------------------------\n\nTITLE: Initializing Page Title in Razor\nDESCRIPTION: Sets the title of the page using a Razor variable declaration.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/MPage1.md#2025-04-16_snippet_0\n\nLANGUAGE: Razor\nCODE:\n```\n@var Title = \"Page 1\"\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Table\nDESCRIPTION: This table summarizes the performance of different serialization and deserialization methods, including `DeserializeFromStream`, `DeserializeFromStreamJsonNet`, `SerializeToString`, and `SerializeToStringJsonNet`.  The table displays key metrics such as Mean execution time, Error, Standard Deviation, Gen 0/1/2 Garbage Collection counts, and total memory allocated for each method with a sample size N=10000.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/tests/ServiceStack.Text.Benchmarks/BenchmarkDotNet.Artifacts/results/BookShelf10000BooksBenchmarks-report-github.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n|                       Method |     N |     Mean |     Error |    StdDev |    Gen 0 |    Gen 1 |    Gen 2 | Allocated |\n|----------------------------- |------ |---------:|----------:|----------:|---------:|---------:|---------:|----------:|\n|        DeserializeFromStream | 10000 | 7.069 ms | 0.0331 ms | 0.0277 ms | 226.5625 | 109.3750 |  39.0625 |   1.25 MB |\n| DeserializeFromStreamJsonNet | 10000 | 8.432 ms | 0.1628 ms | 0.2059 ms | 218.7500 | 109.3750 |  31.2500 |   1.25 MB |\n|            SerializeToString | 10000 | 2.649 ms | 0.0200 ms | 0.0167 ms | 304.6875 | 156.2500 | 156.2500 |   1.21 MB |\n|     SerializeToStringJsonNet | 10000 | 4.632 ms | 0.0664 ms | 0.0621 ms | 304.6875 | 257.8125 | 156.2500 |   1.45 MB |\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Posts Structure in JSON\nDESCRIPTION: This snippet defines the folder structure for markdown blog posts, including their respective filenames indicating publish dates and slugs.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_6\n\nLANGUAGE: files\nCODE:\n```\n\"/_posts\\n  2023-01-21_start.md\\n  2024-02-11_jwt-identity-auth.md\\n  2024-03-01_vite-press-plugin.md\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Temp Static App Chrome in Blazor WASM\nDESCRIPTION: This HTML snippet shows how to render a temporary static app layout before the Blazor WASM app fully loads. It includes a sample layout with a sidebar and main content area, styling for a loading screen, and login links. The design aims to improve the perceived performance during loading.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/prerender.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"app\">\n    <!-- loading: render temp static app chrome to improve perceived performance -->\n    <div id=\"app-loading\" class=\"main-layout page\">\n        <div class=\"sidebar\">\n            <div class=\"top-row navbar navbar-dark\">\n                <a class=\"navbar-brand ps-4\" href=\"/\">MyApp</a>\n                <button class=\"navbar-toggler\">\n                    <span class=\"navbar-toggler-icon\"></span>\n                </button>\n            </div>\n            <div class=\"collapse\">\n                <ul class=\"nav flex-column\"></ul>\n            </div>\n        </div>\n        <div class=\"main\">\n            <div class=\"main-top-row px-4\">\n                <ul class=\"nav nav-pills\"></ul>\n                <a href=\"signin?return=docs/deploy\" class=\"btn btn-outline-primary\">\n                    Login\n                </a>\n            </div>\n            <div class=\"content px-4\">\n                <!--PAGE-->\n                <div class=\"spinner-border float-start mt-2 me-2\" role=\"status\">\n                    <span class=\"sr-only\"></span>\n                </div>\n                <h1 style=\"font-size:36px\">\n                    Loading...\n                </h1>\n                <!--/PAGE-->\n            </div>\n        </div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Iterating Through User Links\nDESCRIPTION: Loops through a collection of links and renders each link's name and href\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/ServiceStack.ServiceHost.Tests/Views/Template/DynamicListTpl.md#2025-04-16_snippet_1\n\nLANGUAGE: razor\nCODE:\n```\n@foreach (var link in Model.Links) {\n  - @link.Name - @link.Href\n}\n```\n\n----------------------------------------\n\nTITLE: External JavaScript Module Import\nDESCRIPTION: Example of importing a JavaScript module in HTML for better development experience in Visual Studio.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-10_vs.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"./pages/SignIn.mjs\"></script>\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Nginx Proxy\nDESCRIPTION: This command runs a docker-compose file on a remote server to start an Nginx reverse proxy and a companion container for automatic TLS certificate generation and management. It is useful for handling multiple ServiceStack applications on the same server.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Wasm/Gallery.Wasm.Client/wwwroot/content/deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f ~/nginx-proxy-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Setting Base Path for JsonServiceClient in Java/Kotlin\nDESCRIPTION: This snippet illustrates how to set the base path for a JsonServiceClient in Java or Kotlin to revert to the legacy predefined route.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nclient.setBasePath();\n```\n\n----------------------------------------\n\nTITLE: Configuring BenchmarkDotNet Environment Settings\nDESCRIPTION: Detailed configuration specifying benchmark tool version, operating system, CPU, and .NET Core SDK and runtime details\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/tests/ServiceStack.Text.Benchmarks/BenchmarkDotNet.Artifacts/results/BenchmarkRun-001-2018-06-26-11-04-30-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.14, OS=Windows 10.0.17134\nIntel Core i7-7700K CPU 4.20GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores\n.NET Core SDK=2.1.301\n  [Host] : .NET Core 2.1.1 (CoreCLR 4.6.26606.02, CoreFX 4.6.26606.05), 64bit RyuJIT  [AttachedDebugger]\n```\n\n----------------------------------------\n\nTITLE: Reverting to Legacy Base Path in Dart\nDESCRIPTION: This snippet demonstrates how to revert to using the legacy base path for a ServiceStack client in Dart.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nvar client = ClientFactory.create(baseUrl);\n```\n\n----------------------------------------\n\nTITLE: Fetching Prerendered Page Content in JavaScript\nDESCRIPTION: Fetches prerendered HTML content from a specified directory and updates the app loading page with the prerendered content\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/prerender.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst pagePath = path.endsWith('/') \n    ? path.substring(0, path.length - 2) + '/index.html' \n    : path\nfetch(`/prerender${pagePath}`)\n    .then(r => r.text())\n    .then(html => {\n        if (html.indexOf('<!DOCTYPE html>') >= 0) return // ignore CDN 404.html\n        const pageBody = $1('#app-loading .content')\n        if (pageBody) \n            pageBody.innerHTML = `<i hidden data-prerender=\"${path}\"></i>` + html\n    })\n    .catch(/* no prerendered content found for this path */)\n```\n\n----------------------------------------\n\nTITLE: Running Tailwind CSS in development mode\nDESCRIPTION: Command to run Tailwind in development mode which watches for changes and automatically updates the app.css file. This provides immediate feedback during development.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-21_start.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run ui:dev\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title Variable in Razor\nDESCRIPTION: Defines a Title variable for the page that can be referenced elsewhere in the application layout.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/MRootPage.md#2025-04-16_snippet_0\n\nLANGUAGE: razor\nCODE:\n```\n@var Title = \"Root Page\"\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Bundling with Purge Support\nDESCRIPTION: Copy the component markup to the /wwwroot directory to enable Tailwind's purge functionality, which optimizes the CSS by removing unused classes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/src/ServiceStack.Blazor/dist/README.txt#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nhttps://raw.githubusercontent.com/ServiceStack/ServiceStack/master/src/ServiceStack.Blazor/dist/tailwind.html\n```\n\n----------------------------------------\n\nTITLE: Setting Base Path in Python\nDESCRIPTION: This snippet demonstrates how to set the base path for a JsonServiceClient in Python to revert to legacy routing.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nclient.set_base_path()\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT Credentials\nDESCRIPTION: Example of authenticating a client using credentials which returns a JWT Bearer Token in an HttpOnly, Secure cookie that will be used for subsequent authentication.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-11_jwt-identity-auth.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar client = new JsonApiClient(BaseUrl);\nawait client.SendAsync(new Authenticate {\n    provider = \"credentials\",\n    UserName = Username,\n    Password = Password,\n});\n\nvar bearerToken = client.GetTokenCookie(); // ss-tok Cookie\n```\n\n----------------------------------------\n\nTITLE: Adding Prerender Script to package.json\nDESCRIPTION: NPM script configuration in package.json that provides a convenient command to run the prerendering task using 'npm run prerender'.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_prerendering.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"scripts\": {\n        \"prerender\": \"dotnet run --AppTasks=prerender\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Rockstars Listing with Iteration in Razor View\nDESCRIPTION: Renders a heading showing the total number of rockstars and the current filter. Iterates through the rockstars collection to display each rockstar's age, first name, last name, and a delete link.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Views/RockstarsMark.md#2025-04-16_snippet_2\n\nLANGUAGE: razor\nCODE:\n```\n### We have @Model.Total Rockstars, showing @Title\n\n@foreach rockstar in Model.Results {\n  - (@rockstar.Age.Value) @rockstar.FirstName @rockstar.LastName [delete](/rockstars/delete/@rockstar.Id)\n}\n```\n\n----------------------------------------\n\nTITLE: Project Build Configuration for Prerendering\nDESCRIPTION: XML configuration to integrate prerendering tasks into the build process using MSBuild targets\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/content/prerender.md#2025-04-16_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <TestsDir>$(MSBuildProjectDirectory)/../MyApp.Tests</TestsDir>\n</PropertyGroup>\n<Target Name=\"AppTasks\" AfterTargets=\"Build\" Condition=\"$(APP_TASKS) != ''\">\n    <CallTarget Targets=\"Prerender\" Condition=\"$(APP_TASKS.Contains('prerender'))\" />\n</Target>\n<Target Name=\"Prerender\">\n    <Exec Command=\"dotnet test --filter TestCategory=prerender --logger:&quot;console;verbosity=detailed&quot;\" \n            WorkingDirectory=\"$(TestsDir)\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Creating New MVC Project with x CLI\nDESCRIPTION: Command to create a new MVC application with Tailwind CSS that includes Identity Auth UI Pages using the ServiceStack x CLI tool.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nx new mvc ProjectName\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for View Reference\nDESCRIPTION: An HTML comment that references the view file 'MPage1.md' that should be included or processed when rendering this template.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/MPage1.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!--view:MPage1.md-->\n```\n\n----------------------------------------\n\nTITLE: Benchmarking .NET Core Decimal Parsing Performance\nDESCRIPTION: Performance measurement of two decimal parsing methods using BenchmarkDotNet, comparing NetCore's standard decimal parsing against a custom implementation with 10,000 iterations\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/tests/ServiceStack.Text.Benchmarks/BenchmarkDotNet.Artifacts/results/MemoryDecimalBenchmarks-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.14, OS=Windows 10.0.17134\nIntel Core i7-7700K CPU 4.20GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores\n.NET Core SDK=2.1.301\n  [Host]     : .NET Core 2.1.1 (CoreCLR 4.6.26606.02, CoreFX 4.6.26606.05), 64bit RyuJIT  [AttachedDebugger]\n  DefaultJob : .NET Core 2.1.1 (CoreCLR 4.6.26606.02, CoreFX 4.6.26606.05), 64bit RyuJIT\n```\n\n----------------------------------------\n\nTITLE: Setting Base Path in PHP\nDESCRIPTION: This snippet shows how to use PHP to set the base path for the client to revert back to older predefined routes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$client->setBasePath();\n```\n\n----------------------------------------\n\nTITLE: Content Section Header in ServiceStack Template\nDESCRIPTION: A header for the main content section of the page. Provides a clear indication of what content follows.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir2/MPage3.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### All Rockstars\n```\n\n----------------------------------------\n\nTITLE: Enabling Pretty URLs for Static HTML Pages\nDESCRIPTION: Code snippet that adds the CleanUrlsFeature ServiceStack plugin to enable accessing prerendered pages with or without the .html extension for prettier URLs.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_prerendering.md#2025-04-16_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nPlugins.Add(new CleanUrlsFeature());\n```\n\n----------------------------------------\n\nTITLE: Displaying Rockstars List Header with Count Information\nDESCRIPTION: Creates a header showing the total count of rockstars and indicates what filtering is being applied (by age or showing all rockstars).\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Views/RockstarsMark.md#2025-04-16_snippet_2\n\nLANGUAGE: cshtml\nCODE:\n```\n### We have @Model.Total Rockstars, showing @Title\n```\n\n----------------------------------------\n\nTITLE: Configuring MSBuild for Prerendering in CI/CD Pipeline\nDESCRIPTION: XML configuration for MSBuild that sets up CI/CD integration for prerendering. It defines targets to run the prerender tests during the build process when specified in the APP_TASKS parameter.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/prerender.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <TestsDir>$(MSBuildProjectDirectory)/../MyApp.Tests</TestsDir>\n</PropertyGroup>\n<Target Name=\"AppTasks\" AfterTargets=\"Build\" Condition=\"$(APP_TASKS) != ''\">\n    <CallTarget Targets=\"Prerender\" Condition=\"$(APP_TASKS.Contains('prerender'))\" />\n</Target>\n<Target Name=\"Prerender\">\n    <Exec Command=\"dotnet test --filter TestCategory=prerender --logger:&quot;console;verbosity=detailed&quot;\" \n            WorkingDirectory=\"$(TestsDir)\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Transforming Parsed Markdown into JSON Structure\nDESCRIPTION: This snippet iterates over the parsed elements to construct a hierarchical JSON object representing menu items for the documentation sidebar, based on heading levels within the content.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-01_jekyll-to-vitepress.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet sidebarObjs = {\n    '/': []\n};\nvar lastHeading = null;\nvar lastHeadingIndex = -1;\nfor(let i = 0; i < res.length; i++) {\n    let item = res[i];\n    if(item.level == '3') {\n        lastHeading = item.content;\n        sidebarObjs['/'].push({\n            text: lastHeading,\n            children: []\n        })\n        lastHeadingIndex++;\n        continue;\n    }\n    let text = item.children[1].content;\n    let link = item.children[0].attrs[0][1];\n    sidebarObjs['/'][lastHeadingIndex].children.push({\n        text: text,\n        link: link\n    })\n}\n\nfs.writeFileSync('SideBar_format.json',JSON.stringify(sidebarObjs),'utf-8')\n```\n\n----------------------------------------\n\nTITLE: Declaring Page Title Variable in Razor\nDESCRIPTION: Sets the title of the page using a Razor variable declaration.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/CheckMvc/MRootPage.md#2025-04-16_snippet_0\n\nLANGUAGE: razor\nCODE:\n```\n@var Title = \"Root Page\"\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Number Parsing Performance in .NET Core\nDESCRIPTION: This snippet defines a BenchmarkDotNet configuration used to evaluate the performance of integer parsing methods on .NET Core. The benchmark compares the execution times of both standard library and custom parsing functions. Requires BenchmarkDotNet installed and properly configured with .NET Core SDK 2.1.x. The primary inputs are different parsing functions, and the output is their measured performance in nanoseconds.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/tests/ServiceStack.Text.Benchmarks/BenchmarkDotNet.Artifacts/results/MemoryIntegerBenchmarks-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.14, OS=Windows 10.0.17134\nIntel Core i7-7700K CPU 4.20GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores\n.NET Core SDK=2.1.301\n  [Host]     : .NET Core 2.1.1 (CoreCLR 4.6.26606.02, CoreFX 4.6.26606.05), 64bit RyuJIT  [AttachedDebugger]\n  DefaultJob : .NET Core 2.1.1 (CoreCLR 4.6.26606.02, CoreFX 4.6.26606.05), 64bit RyuJIT\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icon Font with Foundation\nDESCRIPTION: Integration example for using the Open Iconic icon font within a Foundation framework. The relevant stylesheet needs to be included in the HTML head. Icons are inserted using <span> tags with designated classes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Calling ServiceStack REST Service from jQuery with TypeScript\nDESCRIPTION: This snippet demonstrates how to call the CustomerService GET endpoint using jQuery with TypeScript definitions.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/README.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n$.getJSON($.ss.createUrl(\"/customers\", request), request, (r: GetCustomersResponse) => {\n    var results = r.results;\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing Prerendered Content via JavaScript API\nDESCRIPTION: HTML script element that defines a JavaScript function to access prerendered content. This creates a global JS object with a method to retrieve the current prerendered page content from the DOM.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/prerender.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>\nJS = (function () {\n    return {\n        /* Loading */\n        prerenderedPage() {\n            const el = document.querySelector('#app-loading .content')\n            return el && el.innerHTML || ''\n        },\n    }\n})()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Razor View Model and Layout for Rockstars List\nDESCRIPTION: Sets up the Razor view model using RockstarsResponse and applies the HtmlReport layout. Also defines a title variable based on whether an age filter is applied.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Views/RockstarsMark.md#2025-04-16_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\n@model RockstarsResponse\n@Layout HtmlReport\n\n@var Title = Model.Aged.HasValue ? Model.Aged + \"year old rockstars\" : \"All Rockstars\"\n```\n\n----------------------------------------\n\nTITLE: Implementing PrerenderMarkdown Task in C#\nDESCRIPTION: This code snippet defines a PrerenderMarkdown task that converts markdown files to pre-rendered HTML pages. It scans a content directory, processes each markdown file, and generates corresponding HTML files in a destination directory. The task uses a PageTemplate class to handle the HTML layout.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/prerender.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task PrerenderMarkdown()\n{\n    var srcDir = WwrootDir.CombineWith(\"content\").Replace('\\\\', '/');\n    var dstDir = WwrootDir.CombineWith(\"docs\").Replace('\\\\', '/');\n            \n    var indexPage = PageTemplate.Create(WwrootDir.CombineWith(\"index.html\"));\n    if (!Directory.Exists(srcDir)) throw new Exception($\"{Path.GetFullPath(srcDir)} does not exist\");\n    FileSystemVirtualFiles.RecreateDirectory(dstDir);\n\n    foreach (var file in new DirectoryInfo(srcDir).GetFiles(\"*.md\", SearchOption.AllDirectories))\n    {\n        WriteLine($\"Converting {file.FullName} ...\");\n\n        var name = file.Name.WithoutExtension();\n        var docRender = await Client.MarkdownUtils.LoadDocumentAsync(name, doc =>\n            Task.FromResult(File.ReadAllText(file.FullName)));\n\n        if (docRender.Failed)\n        {\n            WriteLine($\"Failed: {docRender.ErrorMessage}\");\n            continue;\n        }\n\n        var dirName = dstDir.IndexOf(\"wwwroot\") >= 0\n            ? dstDir.LastRightPart(\"wwwroot\").Replace('\\\\', '/')\n            : new DirectoryInfo(dstDir).Name;\n        var path = dirName.CombineWith(name == \"index\" ? \"\" : name);\n\n        var mdBody = @$\"\n<div class=\"\"prose lg:prose-xl min-vh-100 m-3\"\" data-prerender=\"\"{path}\"\">\n    <div class=\"\"markdown-body\"\">\n        {docRender.Response!.Preview!}\n    </div>\n</div>\";\n        var prerenderedPage = indexPage.Render(mdBody);\n        string htmlPath = Path.GetFullPath(Path.Combine(dstDir, $\"{name}.html\"));\n        File.WriteAllText(htmlPath, prerenderedPage);\n        WriteLine($\"Written to {htmlPath}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Markdownify Example\nDESCRIPTION: Shows Jekyll's approach to including and rendering markdown content using Liquid templating, which is replaced by VitePress's component system.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-01_jekyll-to-vitepress.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture projects %}\n{% include web-new-netfx.md %}\n{% endcapture %} \n{{ projects | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results Configuration\nDESCRIPTION: This section specifies the environment details under which the benchmark tests were executed.  It includes the BenchmarkDotNet version, operating system, CPU specifications, and .NET Core SDK and Runtime versions. These settings ensure that the results are interpreted within the context of the specific hardware and software configuration used.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/tests/ServiceStack.Text.Benchmarks/BenchmarkDotNet.Artifacts/results/BookShelf10000BooksBenchmarks-report-github.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.10.14, OS=Windows 10.0.17134\nIntel Core i7-7700K CPU 4.20GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores\n.NET Core SDK=2.1.301\n  [Host]     : .NET Core 2.1.1 (CoreCLR 4.6.26606.02, CoreFX 4.6.26606.05), 64bit RyuJIT\n  DefaultJob : .NET Core 2.1.1 (CoreCLR 4.6.26606.02, CoreFX 4.6.26606.05), 64bit RyuJIT\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Tests with NUnit CSharp\nDESCRIPTION: Shows how to exclude tests for certain database dialects using the IgnoreDialectAttribute in NUnit. It covers excluding tests at both the fixture and individual test level, with examples of setting messages for ignored tests.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/tests/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: CSharp\nCODE:\n```\n[TestFixtureOrmLite()]\n[IgnoreDialect(Dialects.AnyMySql | Dialects.PostgreSql9, \"Not supported by database\")]\npublic class SqlDbFeatures1 : OrmLiteProvidersTestBase \n{\n}\n\n```\n\nLANGUAGE: CSharp\nCODE:\n```\n[Test]\n[IgnoreDialect(Dialect.PostgreSql9 | Dialect.PostgreSql10, \"ignore message to output\")]\n[IgnoreDialect(Dialect.AnySqlServer, \"diff ignore message to output\")]\npublic void Test1()\n{\n    // Test will not run for any dialects ignored above but any others \n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Right-Aligned Navigation with Format Options in HTML/Markdown\nDESCRIPTION: Creates a floating right div containing links to view the current page in different formats (JSON, XML, JSV, CSV) and links to other pages in the application.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/MPage1.md#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n^<div style=\"float:right\">\n\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n\n^</div>\n```\n\n----------------------------------------\n\nTITLE: Preventing Content Yanking During Authorization\nDESCRIPTION: XML markup that modifies Blazor's AuthorizeRouteView to show the current route view while displaying an 'Authenticating...' message during authorization. This prevents content disappearing during the authorization process.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/prerender.md#2025-04-16_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<AuthorizeRouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\">\n  <Authorizing>\n    <p class=\"text-gray-400\" style=\"float:right;margin:1rem 1rem 0 0\">Authenticating...</p>\n    <RouteView RouteData=\"@routeData\" />\n  </Authorizing>\n</AuthorizeRouteView>\n```\n\n----------------------------------------\n\nTITLE: Inserting Dynamic Content in Markdown with ServiceStack\nDESCRIPTION: This snippet shows how to use ServiceStack's templating syntax to insert dynamic content into a Markdown document. It demonstrates accessing properties of the @Model object to personalize the content.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/ServiceStack.ServiceHost.Tests/Views/NoTemplate/Dynamic.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @Model.FirstName Dynamic Markdown Template\n\nHello @Model.FirstName,\n\n# heading 1\n\n  * @Model.LastName\n  * @Model.FirstName\n\n## heading 2\n\nThis is a [servicestack.net link](http://www.servicestack.net)\n\n### heading 3\n```\n\n----------------------------------------\n\nTITLE: Implementing PrerenderMarkdown Task for Static HTML Generation in C#\nDESCRIPTION: This C# code implements a test method that pre-renders markdown files into static HTML pages. It loads markdown content from the wwwroot/content directory, converts it to HTML using MarkdownUtils, and embeds it within the index.html template. The resulting HTML files are written to the wwwroot/docs directory, allowing them to be served as static content before the Blazor app loads.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Tailwind.Tests/Client/wwwroot/content/prerender.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[Test]\npublic async Task PrerenderMarkdown()\n{\n    var srcDir = WwrootDir.CombineWith(\"content\").Replace('\\\\', '/');\n    var dstDir = WwrootDir.CombineWith(\"docs\").Replace('\\\\', '/');\n            \n    var indexPage = PageTemplate.Create(WwrootDir.CombineWith(\"index.html\"));\n    if (!Directory.Exists(srcDir)) throw new Exception($\"{Path.GetFullPath(srcDir)} does not exist\");\n    FileSystemVirtualFiles.RecreateDirectory(dstDir);\n\n    foreach (var file in new DirectoryInfo(srcDir).GetFiles(\"*.md\", SearchOption.AllDirectories))\n    {\n        WriteLine($\"Converting {file.FullName} ...\");\n\n        var name = file.Name.WithoutExtension();\n        var docRender = await Client.MarkdownUtils.LoadDocumentAsync(name, doc =>\n            Task.FromResult(File.ReadAllText(file.FullName)));\n\n        if (docRender.Failed)\n        {\n            WriteLine($\"Failed: {docRender.ErrorMessage}\");\n            continue;\n        }\n\n        var dirName = dstDir.IndexOf(\"wwwroot\") >= 0\n            ? dstDir.LastRightPart(\"wwwroot\").Replace('\\\\', '/')\n            : new DirectoryInfo(dstDir).Name;\n        var path = dirName.CombineWith(name == \"index\" ? \"\" : name);\n\n        var mdBody = @$\"\n<div class=\"\"prose lg:prose-xl min-vh-100 m-3\"\" data-prerender=\"\"{path}\"\">\n    <div class=\"\"markdown-body\"\">\n        {docRender.Response!.Preview!}\n    </div>\n</div>\";\n        var prerenderedPage = indexPage.Render(mdBody);\n        string htmlPath = Path.GetFullPath(Path.Combine(dstDir, $\"{name}.html\"));\n        File.WriteAllText(htmlPath, prerenderedPage);\n        WriteLine($\"Written to {htmlPath}\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CDN _redirects example\nDESCRIPTION: This is example shows the convention supported by many [popular Jamstack CDNs](https://jamstack.wtf/#deployment) that sets up a new rule that proxies `/api*` requests to where the production .NET App is deployed to in order for API requests to not need CORS:\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Server.Tests/Server/wwwroot/content/deploy.md#2025-04-16_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n\"/api/*  {DEPLOY_API}/api/:splat  200\"\n```\n\n----------------------------------------\n\nTITLE: HTML Example with Special Character Issue in VitePress\nDESCRIPTION: An HTML example showing improper use of special characters that works in Jekyll but causes errors in VitePress, requiring proper HTML entity encoding.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-01_jekyll-to-vitepress.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>This solution is <50 lines of code</p>\n```\n\n----------------------------------------\n\nTITLE: Defining a Vue.js Counter Component with Template\nDESCRIPTION: This JavaScript code defines a Vue.js counter component with a template and reactivity. It utilizes Vue's 'ref' function to create a reactive variable 'currentCount' and a method 'incrementCount' to update its value. The template uses the '{{currentCount}}' syntax for data binding and the '@click' directive to bind the 'incrementCount' method to a button click event.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ref } from 'vue'\n\nexport default {\n    template: `\n        <p class=\"my-4\">Current count: {{currentCount}}</p>\n\n        <PrimaryButton @click=\"incrementCount\">Click me</PrimaryButton>\n    `,\n    setup() {\n        const currentCount = ref(0)\n        const incrementCount = () => currentCount.value++\n\n        return { currentCount, incrementCount }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebird Database Alias for Unit Tests\nDESCRIPTION: Add an alias for the Firebird database used in unit tests to the aliases.conf file.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite.Firebird/README.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\normlite-tests.fdb = /path/to/your/ormlite-tests.fdb\n```\n\n----------------------------------------\n\nTITLE: Defining Razor Layout and Page Title\nDESCRIPTION: Sets the layout for the page to 'HtmlReport' and defines the page title as 'Page 4'.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir2/MPage4.md#2025-04-16_snippet_0\n\nLANGUAGE: Razor\nCODE:\n```\n@Layout HtmlReport\n\n@var Title = \"Page 4\"\n```\n\n----------------------------------------\n\nTITLE: Disk Speed Test with `fio`\nDESCRIPTION: This `fio` command is used to perform a disk speed test. It uses random read and write operations with a mix of 75% read and 25% write to measure the disk's IOPS and throughput. The command is configured to use the `libaio` engine for asynchronous I/O and sets various parameters to simulate a realistic workload.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2022-09-06_hetzner-cloud.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nfio --randrepeat=1 --ioengine=libaio --direct=1 --gtod_reduce=1 --name=test \\\n--filename=test --bs=4k --iodepth=64 --size=4G --readwrite=randrw --rwmixread=75\n```\n\n----------------------------------------\n\nTITLE: Setting up SQLite DLL in Visual Studio Projects\nDESCRIPTION: Instructions for copying the appropriate architecture-specific SQLite DLL to the project and configuring it to be copied to the output directory during build. This ensures SQLite functionality will be available at runtime.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/README.txt#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfor 32bit pc\n  - copy `\\sqlite\\x86\\sqlite3.dll` to `\\`\nor for 64bit\n  - copy `\\sqlite\\x64\\sqlite3.dll` to `\\`\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for a Blazor Tailwind documentation page, specifying metadata like title, video URL, tags, date, and display order.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_videos/blazor/blazor.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Blazor Tailwind App for .NET 8\nurl: https://youtu.be/hqyozHSL0Nk\ntags: [blazor, tailwind]\ndate: 21-11-2023\norder: 2\n---\n```\n\n----------------------------------------\n\nTITLE: Reverting to Legacy Predefined Routes in JavaScript/TypeScript\nDESCRIPTION: This snippet shows how to revert the base path to the older `/json/reply/{Request}` structure in JavaScript or TypeScript, effectively unsetting the new base path.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-07_servicestack-endpoint-routing.md#2025-04-16_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nclient.basePath = null;\n```\n\n----------------------------------------\n\nTITLE: Running docker-compose for Nginx Reverse Proxy\nDESCRIPTION: This snippet shows how to run a docker-compose file for setting up an Nginx reverse proxy on a remote server. This is commonly used for handling TLS certificates and serving multiple ServiceStack applications.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Tailwind.Tests/Client/wwwroot/content/deploy.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f ~/nginx-proxy-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Adding a Section Header in Markdown\nDESCRIPTION: Creates a level-3 header in Markdown syntax to indicate the start of a main content section about rockstars.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir/MPage2.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### All Rockstars\n```\n\n----------------------------------------\n\nTITLE: Customer Orders Total Calculation\nDESCRIPTION: Displays the total value of all customer orders using a helper method\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/ServiceStack.ServiceHost.Tests/Views/Template/CustomerDetailsResponse.md#2025-04-16_snippet_2\n\nLANGUAGE: cshtml\nCODE:\n```\n### Customer Orders Total: @Nwnd.CustomerOrderTotal(Model.CustomerOrders)\n```\n\n----------------------------------------\n\nTITLE: Creating Floating Div with Format Links in HTML and Markdown\nDESCRIPTION: Generates a floating div containing links to view the page in different formats (json, xml, jsv, csv) and navigation links to other pages. Uses a combination of HTML and Markdown syntax.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/MPage1.md#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n^<div style=\"float:right\">\n\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n\n^</div>\n```\n\n----------------------------------------\n\nTITLE: Starting Tailwind CSS in Development Mode\nDESCRIPTION: Command to start Tailwind CSS in development mode, which will watch for changes and rebuild the CSS file automatically. This runs in the background while developing.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_rider.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run ui:dev\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Configuration\nDESCRIPTION: This section describes the YAML configuration required for defining a GitHub Actions workflow. The configuration specifies two jobs: push_to_registry for building and pushing Docker images, and deploy_via_ssh for deploying via SSH. This facilitates automated deployments based on certain triggers.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/_pages/deploy.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: CI/CD Workflow\n\non:\n  push:\n    branches:\n      - main\n  release:\n    types: [published]\n\njobs:\n  push_to_registry:\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and push Docker image\n        uses: docker/build-push-action@v2\n        with:\n          context: .\n          push: true\n          tags: ghcr.io/${{ github.repository }}/yourapp:latest\n  deploy_via_ssh:\n    runs-on: ubuntu-22.04\n    needs: push_to_registry\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Create .env file\n        run: echo \"...\" > .env\n\n      - name: Copy files to target server via scp\n        run: scp -i ${{ secrets.DEPLOY_KEY }} -r ./target user@server:/path\n\n      - name: Run remote db migrations\n        run: ssh -i ${{ secrets.DEPLOY_KEY }} user@server 'cd /path && docker-compose run migrate'\n\n      - name: Remote docker-compose up via ssh\n        run: ssh -i ${{ secrets.DEPLOY_KEY }} user@server 'cd /path && docker-compose up -d'\n```\n\n----------------------------------------\n\nTITLE: Importing Markdown Content in VitePress\nDESCRIPTION: Demonstrates how to import and use markdown content as a component in VitePress, providing similar functionality to Jekyll's markdownify filter.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-01_jekyll-to-vitepress.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<script setup>\nimport netfxtable from './.vitepress/includes/web-new-netfx.md';\n</script>\n\n<netfxtable />\n```\n\n----------------------------------------\n\nTITLE: Initializing Page Title in Razor\nDESCRIPTION: Sets the title of the page using a Razor variable.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/Dir2/default.md#2025-04-16_snippet_0\n\nLANGUAGE: Razor\nCODE:\n```\n@var Title = \"Root Page\"\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific Providers with NUnit CSharp\nDESCRIPTION: Provides an example for targeting specific SQL Server versions in NUnit tests for OrmLite by using the TestFixtureOrmLiteDialectsAttribute. Tests will only execute for specified dialects, demonstrating fine-grained control over test execution.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/tests/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: CSharp\nCODE:\n```\n[TestFixtureOrmLiteDialects(Dialect.SqlServer2008 | Dialect.SqlServer2012)]\npublic class SqlDbFeatures1 : OrmLiteProvidersTestBase \n{\n    ...\n    \n    [Test]\n    public void Test1() \n    {\n        // Will execute for SqlServer provider and dialect versions\n\n        // Current test dialect\n        var dialect = base.Dialect;\n\n        // current test dialectprovider\n        var dialectProvider = base.DialectProvider\n\n        // open the correct db connection based on dialect \n        using(var db = OpenConnection())\n        {\n            // db agnostic tests\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Typesense Search Query\nDESCRIPTION: cURL command demonstrating a basic search query to the Typesense API.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -H 'x-typesense-api-key: <apikey>' \\\n    'http://localhost:8108/collections/typesense_docs/documents/search?q=test&query_by=content'\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceStack Razor Page Header with Title Variable\nDESCRIPTION: Sets the page title variable for a ServiceStack Razor page. This establishes the title that will appear in the browser tab for this page.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir/MPage2.md#2025-04-16_snippet_0\n\nLANGUAGE: razor\nCODE:\n```\n@var Title = \"Page 2\"\n```\n\n----------------------------------------\n\nTITLE: Rendering User First and Last Name\nDESCRIPTION: Dynamic interpolation of user model properties into markdown text\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/ServiceStack.ServiceHost.Tests/Views/Template/DynamicListTpl.md#2025-04-16_snippet_0\n\nLANGUAGE: razor\nCODE:\n```\n@Model.FirstName\n```\n\nLANGUAGE: razor\nCODE:\n```\n@Model.LastName\n```\n\n----------------------------------------\n\nTITLE: ServiceStack URL Routes Reference in Markdown\nDESCRIPTION: A list of different URL routing patterns in ServiceStack, including typed models without controllers, no model and no controller routes, and external links. Also includes a view reference comment.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Views/Shared/MarkdownPartial.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Markdown Content\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n  - [google.com](http://www.google.com)\n\n<!--view:MarkdownPartial.md-->\n```\n\n----------------------------------------\n\nTITLE: Setting up Typesense with GitHub Actions\nDESCRIPTION: This shell script is part of a GitHub Actions workflow that sets up a local Typesense server on the CI, scrapes hosted docs to populate the server, and copies the data folder to be included in a custom Docker image. It requires Typesense to be already available via Docker and uses jq for JSON manipulation.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-08_typesense.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ${GITHUB_WORKSPACE}/typesense-data\ncp ./search-server/typesense-server/Dockerfile ${GITHUB_WORKSPACE}/typesense-data/Dockerfile\ncp ./search-server/typesense-scraper/typesense-scraper-config.json typesense-scraper-config.json\nenvsubst < \"./search-server/typesense-scraper/typesense-scraper.env\" > \"typesense-scraper-updated.env\"\ndocker run -d -p 8108:8108 -v ${GITHUB_WORKSPACE}/typesense-data/data:/data \\\n    typesense/typesense:0.21.0 --data-dir /data --api-key=${TYPESENSE_API_KEY} --enable-cors &\n# wait for typesense initialization\nsleep 5\ndocker run -i --env-file typesense-scraper-updated.env \\\n    -e \"CONFIG=$(cat typesense-scraper-config.json | jq -r tostring)\" typesense/docsearch-scraper\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown Content\nDESCRIPTION: Uses an HTML comment to include content from an external Markdown file.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/Dir2/default.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!--view:Pages/Dir2/default.md-->\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebird Database Alias\nDESCRIPTION: Add an alias for the Firebird database in the aliases.conf file. This is required for running samples and unit tests.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite.Firebird/README.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nemployee.fdb = /path/to/your/employee.fdb\n```\n\n----------------------------------------\n\nTITLE: Using Custom Markdown Containers in Razor SSG\nDESCRIPTION: This markdown snippet shows how to implement custom containers for Markdown content in Razor SSG, providing rich markup capabilities for consistent presentation in blog posts.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-08-23_razor-ssg-new-blog-features.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n::: info\nThis is an info box.\n:::\n\n::: tip\nThis is a tip.\n:::\n\n::: warning\nThis is a warning.\n:::\n\n::: danger\nThis is a dangerous warning.\n:::\n\n:::copy\nCopy Me!\n:::\n```\n\n----------------------------------------\n\nTITLE: View Source Reference Comment in ServiceStack\nDESCRIPTION: HTML comment that references the source Markdown file that provides content for this view. Useful for understanding the content source structure.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir2/MPage3.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!--view:MPage3.md-->\n```\n\n----------------------------------------\n\nTITLE: Registering Database Connection Factory with OrmLite and SQLite\nDESCRIPTION: Code snippet demonstrating how to register a SQLite database connection factory in the ServiceStack dependency injection container, pointing to a local northwind.sqlite file.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindAuto/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ncontainer.AddSingleton<IDbConnectionFactory>(c =>\n    new OrmLiteConnectionFactory(MapProjectPath(\"~/northwind.sqlite\"), SqliteDialect.Provider));\n\nPlugins.Add(new AutoQueryFeature {\n    MaxLimit = 1000,\n    GenerateCrudServices = new GenerateCrudServices {}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Tailwind Typography with HTML\nDESCRIPTION: Example of using the 'prose' class from @tailwindcss/typography plugin to style article content. The code shows how to apply the class to an HTML article element containing headings and paragraphs to create a well-formatted document.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2022-12-31_typography.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<article class=\"prose\">\n  <h1>Garlic bread with cheese: What the science tells us</h1>\n  <p>\n    For years parents have espoused the health benefits of eating garlic bread with cheese to their\n    children, with the food earning such an iconic status in our culture that kids will often dress\n    up as warm, cheesy loaf for Halloween.\n  </p>\n  <p>\n    But a recent study shows that the celebrated appetizer may be linked to a series of rabies cases\n    springing up around the country.\n  </p>\n  <!-- ... -->\n</article>\n```\n\n----------------------------------------\n\nTITLE: Converting Session to Token with Session Preservation\nDESCRIPTION: Example of calling the ConvertSessionToToken service with the PreserveSession flag to keep the current authenticated session active after token conversion.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-11_jwt-identity-auth.md#2025-04-16_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nawait client.SendAsync(new ConvertSessionToToken { \n    PreserveSession = true \n});\n```\n\n----------------------------------------\n\nTITLE: Vue Component Conversion for HTML Content in VitePress\nDESCRIPTION: A Vue component template showing how to wrap HTML content for inclusion in VitePress markdown files, replacing Jekyll's include functionality.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-01_jekyll-to-vitepress.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<template>\n    <div>\n        <h4>Catchphrase</h4>\n        <p>It's.. what I do..</p>\n    </div>\n</template>\n<script>\n    export default {\n        name: \"catchphrase\"\n    }\n</script>\n\n<style scoped>\n\n</style>\n```\n\n----------------------------------------\n\nTITLE: Referencing Source Files in HTML Comment\nDESCRIPTION: HTML comment that indicates the source Markdown file for this page's content. This helps developers understand where the content is sourced from.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir/MPage2.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!--view:MPage2.md-->\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services\nDESCRIPTION: This command starts all the database server instances defined in the docker-compose.yml file in detached mode (-d), allowing them to run in the background.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/Docker/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$> docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Including Minified Tailwind CSS\nDESCRIPTION: Directly include the pre-compiled Tailwind CSS file from the ServiceStack repository. This method provides a quick way to add all necessary Tailwind classes without additional configuration.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/src/ServiceStack.Blazor/dist/README.txt#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nhttps://raw.githubusercontent.com/ServiceStack/ServiceStack/master/src/ServiceStack.Blazor/dist/tailwind.css\n```\n\n----------------------------------------\n\nTITLE: Declaring Static Class in C#\nDESCRIPTION: This code snippet declares a static class in C#. Static classes cannot be instantiated and are typically used to group related utility methods or constants.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Content/static-sub.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Fragments in Razor Pages\nDESCRIPTION: This HTML code snippet illustrates how to include markdown fragments within Razor Pages using the custom <markdown/> tag. This allows for reusability of markdown content across different pages.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-08-23_razor-ssg-new-blog-features.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<markdown include=\"vue/formatters.md\"></markdown>\n```\n\n----------------------------------------\n\nTITLE: Defining Razor Layout and Page Title\nDESCRIPTION: Sets the page to use the HtmlReport layout and defines the page title variable.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/Dir2/MPage4.md#2025-04-16_snippet_0\n\nLANGUAGE: razor\nCODE:\n```\n@Layout HtmlReport\n\n@var Title = \"Page 4\"\n```\n\n----------------------------------------\n\nTITLE: Registering Prerender App Task in ServiceStack\nDESCRIPTION: Code that registers a ServiceStack App Task named 'prerender' which can be executed to generate prerendered content on demand or during build/deployment processes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-01-11_prerendering.md#2025-04-16_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nAppTasks.Register(\"prerender\", args => blogPosts.LoadPosts(\"_blog/posts\", renderTo: \"blog\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a PageTemplate Class for HTML Template Processing in C#\nDESCRIPTION: This C# class parses an index.html file and extracts content between <!--PAGE--> and <!--/PAGE--> markers to create a template. It provides functionality to render new HTML pages by combining the header, custom body content, and footer extracted from the original template.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Tailwind.Tests/Client/wwwroot/content/prerender.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class PageTemplate\n{\n    string? Header { get; set; }\n    string? Footer { get; set; }\n\n    public PageTemplate(string? header, string? footer)\n    {\n        Header = header;\n        Footer = footer;\n    }\n\n    public static PageTemplate Create(string indexPath)\n    {\n        if (!File.Exists(indexPath))\n            throw new Exception($\"{Path.GetFullPath(indexPath)} does not exist\");\n\n        string? header = null;\n        string? footer = null;\n\n        var sb = new StringBuilder();\n        foreach (var line in File.ReadAllLines(indexPath))\n        {\n            if (header == null)\n            {\n                if (line.Contains(\"<!--PAGE-->\"))\n                {\n                    header = sb.ToString(); // capture up to start page marker\n                    sb.Clear();\n                }\n                else sb.AppendLine(line);\n            }\n            else\n            {\n                if (sb.Length == 0)\n                {\n                    if (line.Contains(\"<!--/PAGE-->\")) // discard up to end page marker\n                    {\n                        sb.AppendLine();\n                        continue;\n                    }\n                }\n                else sb.AppendLine(line);\n            }\n        }\n        footer = sb.ToString();\n\n        if (string.IsNullOrEmpty(header) || string.IsNullOrEmpty(footer))\n            throw new Exception($\"Parsing {indexPath} failed, missing <!--PAGE-->...<!--/PAGE--> markers\");\n\n        return new PageTemplate(header, footer);\n    }\n\n    public string Render(string body) => Header + body + Footer;\n}\n```\n\n----------------------------------------\n\nTITLE: Fenced Code Block for Blog Folder Structure\nDESCRIPTION: This snippet utilizes a fenced code block to represent the file structure of the '_whatsnew' and '_videos' folders.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_12\n\nLANGUAGE: files\nCODE:\n```\n\"/_whatsnew\\n  /2023-03-08_Animaginary\\n    feature1.md\\n  /2023-03-18_OpenShuttle\\n    feature1.md\\n  /2023-03-28_Planetaria\\n    feature1.md\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Compose Services\nDESCRIPTION: This command stops and removes all the database server instances defined in the docker-compose.yml file, cleaning up the environment.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/Docker/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$> docker-compose down\n```\n\n----------------------------------------\n\nTITLE: HTML Include Example for VitePress Component\nDESCRIPTION: Sample HTML content that would need to be converted to a Vue component when migrating from Jekyll's include system to VitePress's component-based approach.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-01_jekyll-to-vitepress.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <h4>Catchphrase</h4>\n    <p>It's.. what I do..</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enabling Convert Session to Token Service\nDESCRIPTION: Configuration to enable the ConvertSessionToToken service, which allows converting an authenticated session (e.g., from OAuth) into a stateless JWT token.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-11_jwt-identity-auth.md#2025-04-16_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\noptions.JwtAuth(x => {\n    x.IncludeConvertSessionToTokenService = true;\n});\n```\n\n----------------------------------------\n\nTITLE: CDN Proxy Setup for CORS-Free Hosting\nDESCRIPTION: This configuration defines a redirect rule for proxying API requests through a CDN to avoid CORS issues. It specifies how to handle /api requests by directing them to the correct production server endpoint. Assumes CDN support for redirect rule files like _redirects used in services such as Cloudflare or Netlify.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/deploy.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n/api/*  {DEPLOY_API}/api/:splat  200\n```\n\n----------------------------------------\n\nTITLE: Displaying Blazor Diffusion URL in HTML\nDESCRIPTION: HTML code snippet for displaying the Blazor Diffusion URL as a large, centered, blue, clickable link.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-22_net8-best-blazor.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<h3 class=\"not-prose text-center pb-8\">\n    <a class=\"text-4xl text-blue-600 hover:underline\" href=\"https://blazordiffusion.com\">https://blazordiffusion.com</a>\n</h3>\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebird Database Alias\nDESCRIPTION: Instructions for configuring Firebird database aliases in the aliases.conf file. These configurations are necessary for running the sample projects and unit tests with the provided database files.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.OrmLite/src/ServiceStack.OrmLite.Oracle/README.md#2025-04-16_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nemployee.fdb = /path/to/your/employee.fdb\n```\n\nLANGUAGE: conf\nCODE:\n```\normlite-tests.fdb = /path/to/your/ormlite-tests.fdb\n```\n\n----------------------------------------\n\nTITLE: Vue Component Usage in Markdown\nDESCRIPTION: Example of using Vue components within Markdown files using HTML template syntax.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<hello name=\"Vue 3\"></hello>\n<counter></counter>\n```\n\n----------------------------------------\n\nTITLE: Static Directive in C#\nDESCRIPTION: A C# static directive that indicates all members of the class will be static. This is typically used to create utility classes where all methods and properties can be accessed without instantiation.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/static-root-embedded.txt#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic\n```\n\n----------------------------------------\n\nTITLE: Decimal Parsing Performance Results Table\nDESCRIPTION: Benchmark results showing performance metrics for two decimal parsing methods, with NetCoreParseDecimal taking 192.23 ns and CustomParseDecimal taking 45.22 ns per operation\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Text/tests/ServiceStack.Text.Benchmarks/BenchmarkDotNet.Artifacts/results/MemoryDecimalBenchmarks-report-github.md#2025-04-16_snippet_1\n\nLANGUAGE: benchmark\nCODE:\n```\n|              Method |     N |      Mean |     Error |    StdDev |\n|-------------------- |------ |----------:|----------:|----------:|\n| NetCoreParseDecimal | 10000 | 192.23 ns | 3.8236 ns | 4.8357 ns |\n|  CustomParseDecimal | 10000 |  45.22 ns | 0.4465 ns | 0.3728 ns |\n```\n\n----------------------------------------\n\nTITLE: MSBuild Project Configuration for Client UI Deployment\nDESCRIPTION: XML configuration for post-build tasks in .csproj file to manage client-side deployment, including path settings, production configuration updates, and CDN preparation\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Server/wwwroot/content/deploy.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<PropertyGroup>\n    <ClientDir>$(MSBuildProjectDirectory)/../MyApp.Client</ClientDir>\n    <WwwRoot>$(ClientDir)/wwwroot</WwwRoot>\n</PropertyGroup>\n\n<Target Name=\"DeployApi\" AfterTargets=\"Build\" Condition=\"$(DEPLOY_API) != ''\">\n    <Exec Command=\"echo DEPLOY_API=$(DEPLOY_API)\" />\n\n    <WriteLinesToFile File=\"$(WwwRoot)/appsettings.Production.json\" \n        Lines=\"$([System.IO.File]::ReadAllText($(WwwRoot)/appsettings.Production.json).Replace('{DEPLOY_API}',$(DEPLOY_API)))\" \n        Overwrite=\"true\" Encoding=\"UTF-8\" />\n\n    <Copy SourceFiles=\"$(WwwRoot)/index.html\" \n        DestinationFiles=\"$(WwwRoot)/wwwroot/404.html\" />\n\n    <WriteLinesToFile File=\"$(WwwRoot)/_redirects\" \n        Lines=\"$([System.IO.File]::ReadAllText($(WwwRoot)/_redirects).Replace('{DEPLOY_API}',$(DEPLOY_API)))\" \n        Overwrite=\"true\" Encoding=\"UTF-8\" />\n</Target>\n```\n\n----------------------------------------\n\nTITLE: Exporting Metadata Configuration in TypeScript\nDESCRIPTION: Defines the configuration for exporting metadata to static JSON files, which can be consumed by external clients.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-03-01_vite-press-plugin.md#2025-04-16_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\\n    plugins: [\\n        Press({\\n            metadataPath: 'public/api',\\n        }),\\n    ]\\n})\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icon Font Independently\nDESCRIPTION: How to utilize Open Iconic's default icon font independently of specific frameworks like Bootstrap or Foundation. Requires including the correct CSS file and using a <span> element with designated attributes and classes for icon representation.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown Template\nDESCRIPTION: References an external Markdown template file to be included in the rendered output using a special comment syntax.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/MRootPage.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!--view:MRootPage.md-->\n```\n\n----------------------------------------\n\nTITLE: Creating New Blazor Project with x CLI\nDESCRIPTION: Command to create a new Blazor application project with Identity Auth UI Pages included using the ServiceStack x CLI tool.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-11-28_net8-identity-auth.md#2025-04-16_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nx new blazor ProjectName\n```\n\n----------------------------------------\n\nTITLE: Static Keyword Declaration\nDESCRIPTION: A lone static keyword appears in the file, likely indicating the start of a static class or module declaration that is incomplete or part of a partial class.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Content/static-sub-embedded.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nstatic\n```\n\n----------------------------------------\n\nTITLE: Shell Command for Batch Processing Markdown Files\nDESCRIPTION: A Unix shell command that uses the find utility to locate all markdown files in the current directory and execute the RenameMd program on each one, facilitating bulk file renaming.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-01_jekyll-to-vitepress.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfind *.md -maxdepth 1 -type f -exec ./RenameMd {} \\;\n```\n\n----------------------------------------\n\nTITLE: Coloring Open Iconic Icons with CSS\nDESCRIPTION: This CSS snippet demonstrates how to apply a color to an Open Iconic icon by setting the 'fill' property on a specific class. This approach allows individual icons to be styled independently.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Litestream Configuration for SQLite Backup\nDESCRIPTION: Configuration for using Litestream to provide real-time backup and disaster recovery for SQLite databases across multiple storage options\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2022-09-06_hetzner-cloud.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Litestream configuration template (not fully provided in text)\n```\n\n----------------------------------------\n\nTITLE: Specifying Associated View Template\nDESCRIPTION: An HTML comment that indicates this template is associated with a separate file called RockstarsMark.md, which likely contains the markdown template for rendering rockstars.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Views/RockstarsMark.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!--view:RockstarsMark.md-->\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic SVG Sprite\nDESCRIPTION: This snippet shows how to use an SVG sprite from Open Iconic to include an icon in an HTML page. Requires Open Iconic's SVG sprite file. Icons can be styled using CSS applied to classes on the `<svg>` and `<use>` tags.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Using Open Iconic Icon Font with Bootstrap\nDESCRIPTION: HTML snippets to integrate Open Iconic's icon font with Bootstrap. The CSS file must be linked in the HTML head. Icons are added using `<span>` elements with specific class names and a title for accessibility purposes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: View Reference Comment in Razor Template\nDESCRIPTION: HTML comment indicating that this template is associated with a file named 'RockstarsMark.md', likely used for view resolution or documentation purposes.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Views/RockstarsMark.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!--view:RockstarsMark.md-->\n```\n\n----------------------------------------\n\nTITLE: Setting Icon Size with CSS\nDESCRIPTION: CSS snippet to set the size of icons embedded in `<svg>` elements to a uniform square of 16x16 pixels. This approach applies universally to all icons denoted by the class 'icon'.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic JavaScript Navigation Rendering for Blazor App\nDESCRIPTION: This JavaScript snippet dynamically generates navigation menus for the Blazor app by utilizing predefined CSV data, enhancing the user experience by allowing immediate navigation during loading.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery.Wasm/Gallery.Wasm.Client/wwwroot/content/prerender.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nTOP = `\n    $0.40 /mo,        /docs/hosting\n    Prerendering,     /docs/prerender\n    Deployments,      /docs/deploy\n`\nSIDEBAR = `\n    Counter,          /counter,       /img/nav/counter.svg\n    Todos,            /todomvc,       /img/nav/todomvc.svg\n    Bookings CRUD,    /bookings-crud, /img/nav/bookings-crud.svg\n    Call Hello,       /hello$,        /img/nav/hello.svg\n    Call HelloSecure, /hello-secure,  /img/nav/hello-secure.svg\n    Fetch data,       /fetchdata,     /img/nav/fetchdata.svg\n`\n\nconst path = location.pathname\nconst renderNav = (csv, f) => csv.trim().split(/\\r?\\n/g).map(s => f.apply(null, s.split(',').map(x => x.trim()))).join('')\n$1 = s => document.querySelector(s)\n\n/* Header */\n$1('#app-loading header nav ul').insertAdjacentHTML('afterbegin', renderNav(TOP, (label, route) =>\n    `<li class=\"relative flex flex-wrap just-fu-start m-0\">\n        <a href=\"${route}\" class=\"flex items-center justify-start mw-full p-4 hover:text-green-600\">${label}</a></li>`\n))\n\n/* Sidebar */\nconst NAV = ({ label, route, exact, icon, cls, iconCls }) => `<a href=\"${route}\"\n    class=\"${cls}${(exact ? path == route : path.startsWith(route)) ? ' bg-gray-100 text-gray-900' : ''}\">\n    <img class=\"${iconCls}\" src=\"${icon}\">\n    ${label}\n</a>`\n\n$1('#app-loading .mobile nav').innerHTML = renderNav(SIDEBAR, (label, route, icon) => NAV({\n    label, cls: `text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-base font-medium`,\n    iconCls: `mr-4 flex-shrink-0 h-6 w-6`,\n    icon, route: route.replace(/\\$$/, ''), exact: route.endsWith('$')\n}))\n$1('#app-loading .desktop nav').innerHTML = renderNav(SIDEBAR, (label, route, icon) => NAV({\n    label, cls: `text-gray-600 hover:bg-gray-50 hover:text-gray-900 group flex items-center px-2 py-2 text-sm font-medium`,\n    iconCls: `mr-3 flex-shrink-0 h-6 w-6`,\n    icon, route: route.replace(/\\$$/, ''), exact: route.endsWith('$')\n}))\n```\n\n----------------------------------------\n\nTITLE: Adding Markdown Content for All Rockstars\nDESCRIPTION: Includes a Markdown header for 'All Rockstars' and a comment referencing the source file for the demo.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir2/MPage4.md#2025-04-16_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n### All Rockstars\n\nsource files for this demo\n\n<!--view:MPage3.md-->\n```\n\n----------------------------------------\n\nTITLE: Displaying Open Iconic SVG in HTML\nDESCRIPTION: This code snippet demonstrates how to include an Open Iconic SVG image in an HTML document. No dependencies are required other than the SVG files being served from a specified path. The 'alt' attribute is important for accessibility reasons.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/ServiceStack.Blazor.Bootstrap.Tests/Client/wwwroot/css/open-iconic/README.md#2025-04-16_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Including Source File Reference in HTML Comment\nDESCRIPTION: Adds a comment indicating the source file for the demo content.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/MPage1.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!--view:MPage1.md-->\n```\n\n----------------------------------------\n\nTITLE: Customizing User Search Results in Identity Auth Admin UI\nDESCRIPTION: This code customizes the user search results by specifying which ApplicationUser properties to display. It also sets the default order and defines a custom search filter.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2024-02-10_identity-auth-admin-ui.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\noptions.AdminUsersFeature(feature =>\n{\n    feature.QueryIdentityUserProperties =\n    [\n        nameof(ApplicationUser.Id),\n        nameof(ApplicationUser.DisplayName),\n        nameof(ApplicationUser.Email),\n        nameof(ApplicationUser.UserName),\n        nameof(ApplicationUser.LockoutEnd),\n    ];\n});\n```\n\nLANGUAGE: csharp\nCODE:\n```\nfeature.DefaultOrderBy = nameof(ApplicationUser.DisplayName);\n```\n\nLANGUAGE: csharp\nCODE:\n```\nfeature.SearchUsersFilter = (q, query) =>\n{\n    var queryUpper = query.ToUpper();\n    return q.Where(x =>\n        x.DisplayName!.Contains(query) ||\n        x.Id.Contains(queryUpper) ||\n        x.NormalizedUserName!.Contains(queryUpper) ||\n        x.NormalizedEmail!.Contains(queryUpper));\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Content for VitePress Component\nDESCRIPTION: Example of simpler markdown content that could be used as an alternative to HTML in a VitePress component.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-01_jekyll-to-vitepress.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## Catchphrase\nit's.. what I do..\n```\n\n----------------------------------------\n\nTITLE: Modifying VitePress Source for Clean URLs\nDESCRIPTION: This snippet temporarily modifies the VitePress router to avoid appending '.html' to URLs and adjusts a related clean URL handling file. It is a workaround for issues encountered during deployment and is marked as not recommended.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2021-11-01_jekyll-to-vitepress.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst glob = require('glob');\nlet js = 'node_modules/vitepress/dist/client/app/router.js';\nfs.writeFileSync(js, fs.readFileSync(js, 'utf8').replace(\"url.pathname += '.html';\", ''))\n\nglob('node_modules/vitepress/dist/node/serve-*.js',{},(err,files) =>{\n    let file = files[0];\n    fs.writeFileSync(file,fs.readFileSync(file,'utf8').replace(\"cleanUrl += \\\".html\\\";\\\",''))\n})\n\nconsole.log('Completed post install process...')\n```\n\n----------------------------------------\n\nTITLE: Creating Sidebar with Format Options in HTML/Razor\nDESCRIPTION: Creates a floating right sidebar containing format options and navigation links. The format options allow viewing the page in different serialization formats (JSON, XML, JSV, CSV) using query parameters.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/Dir/MPage2.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n^<div style=\"float:right\">\n\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n\n^</div>\n```\n\n----------------------------------------\n\nTITLE: Preventing Content Flicker During Authorization\nDESCRIPTION: Blazor authorization component that preserves the current route view during authentication to prevent content flickering. This improves user experience by maintaining visual consistency during authentication.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/prerender.md#2025-04-16_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<AuthorizeRouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\">\n  <Authorizing>\n    <p class=\"text-gray-400\" style=\"float:right;margin:1rem 1rem 0 0\">Authenticating...</p>\n    <RouteView RouteData=\"@routeData\" />\n  </Authorizing>\n</AuthorizeRouteView>\n```\n\n----------------------------------------\n\nTITLE: Creating Right-Aligned Navigation with Format Options\nDESCRIPTION: Creates a right-aligned div containing format toggle links and navigation to other pages. The caret syntax (^) is used for Markdown container elements.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/Dir2/MPage4.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n^<div style=\"float:right\">\n\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n\n^</div>\n```\n\n----------------------------------------\n\nTITLE: JSDoc Type Annotation\nDESCRIPTION: This JavaScript snippet demonstrates the use of JSDoc type annotations to provide type information and static analysis benefits without using TypeScript. The `@param` tag specifies the type of the `e` parameter as `KeyboardEvent`.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/NorthwindBlazor/_posts/2023-02-01_javascript.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n/** @param {KeyboardEvent} e */\nfunction validateSafeName(e) {\n    if (e.key.match(/[\\W]+/g)) {\n        e.preventDefault()\n        return false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Navigation Menu in HTML and Markdown\nDESCRIPTION: Generates a floating right-aligned div containing links to view the page in different formats and navigation to other pages.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/Dir2/default.md#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n^<div style=\"float:right\">\n\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n\n### Other Pages\n\n  - [/rockstars](/rockstars)\n  - [/TypedModelNoController](/TypedModelNoController)\n  - [/NoModelNoController](/NoModelNoController)\n\n^</div>\n```\n\n----------------------------------------\n\nTITLE: Format Selection Links in ServiceStack View\nDESCRIPTION: A section that provides links to view the current page in different formats (JSON, XML, JSV, CSV). This demonstrates ServiceStack's content negotiation capability.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Web/Pages/Dir2/MPage3.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n**view this page in: **\n[json](?format=json),\n[xml](?format=xml),\n[jsv](?format=jsv),\n[csv](?format=csv)\n```\n\n----------------------------------------\n\nTITLE: Running Prerender Tasks from Command Line\nDESCRIPTION: Bash command to run the prerender tasks during application publishing. This is used in CI/CD workflows to generate prerendered content during the build process.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack.Blazor/tests/UI.Gallery/Gallery/MyApp/wwwroot/content/prerender.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dotnet test --filter TestCategory=prerender \n\n```\n\n----------------------------------------\n\nTITLE: Main Content Section with View Include\nDESCRIPTION: Defines the main content section with a heading and includes a reference to view another Markdown file (MPage3.md).\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/ServiceStack/tests/RazorRockstars.Console.Files/Pages/Dir2/MPage4.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n### All Rockstars\n\nsource files for this demo\n\n<!--view:MPage3.md-->\n```\n\n----------------------------------------\n\nTITLE: Calling ServiceStack REST Service from Java\nDESCRIPTION: This snippet shows how to call the CustomerService GET endpoint using Java with the JsonServiceClient.\nSOURCE: https://github.com/ServiceStack/ServiceStack/blob/main/README.md#2025-04-16_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nJsonServiceClient client = new JsonServiceClient(BaseUri);\n\nGetCustomersResponse response = client.get(new GetCustomers());\nList<Customer> results = response.results; \n```"
  }
]