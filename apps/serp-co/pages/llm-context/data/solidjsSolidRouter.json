[
  {
    "owner": "solidjs",
    "repo": "solid-router",
    "content": "TITLE: Setting Up Basic Router in SolidJS Application\nDESCRIPTION: Basic setup for initializing a router in a SolidJS application by rendering the Router component.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router } from \"@solidjs/router\";\n\nrender(\n  () => <Router />,\n  document.getElementById(\"app\")\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Routes with Components\nDESCRIPTION: Example showing how to set up routes with specific paths and components in a SolidJS application.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nimport Home from \"./pages/Home\";\nimport Users from \"./pages/Users\";\n\nrender(() => (\n  <Router>\n    <Route path=\"/users\" component={Users} />\n    <Route path=\"/\" component={Home} />\n  </Router>\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Setting Up Router with Root Layout Component\nDESCRIPTION: Configuration of the router with a root layout component that remains present across all route changes, ideal for navigation and context providers.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nimport Home from \"./pages/Home\";\nimport Users from \"./pages/Users\";\n\nconst App = props => (\n  <>\n    <h1>My Site with lots of pages</h1>\n    {props.children}\n  </>\n)\n\nrender(() => (\n  <Router root={App}>\n    <Route path=\"/users\" component={Users} />\n    <Route path=\"/\" component={Home} />\n  </Router>\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Routes in SolidJS Router\nDESCRIPTION: Demonstrates how to define nested routes in SolidJS Router using the Route component. Shows equivalent route definitions and explains how to properly structure nested routes.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"/users/:id\" component={User} />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"/users\">\n  <Route path=\"/:id\" component={User} />\n</Route>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n//This won't work the way you'd expect\n<Route path=\"/users\" component={Users}>\n  <Route path=\"/:id\" component={User} />\n</Route>\n\n// This works\n<Route path=\"/users\" component={Users} />\n<Route path=\"/users/:id\" component={User} />\n\n// This also works\n<Route path=\"/users\">\n  <Route path=\"/\" component={Users} />\n  <Route path=\"/:id\" component={User} />\n</Route>\n```\n\n----------------------------------------\n\nTITLE: Using Query API for Data Fetching\nDESCRIPTION: Introduces the query API for efficient data fetching, including deduplication, caching, and revalidation. Shows how to use it with preload functions and inside components.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst getUser = query(async (id) => {\n  return (await fetch(`/api/users${id}`)).json()\n}, \"users\") // used as the query key + serialized arguments\n```\n\nLANGUAGE: js\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { Route } from \"@solidjs/router\";\nimport { getUser } from ... // the query function\n\nconst User = lazy(() => import(\"./pages/users/[id].js\"));\n\n// preload function\nfunction preloadUser({params, location}) {\n  void getUser(params.id)\n}\n\n// Pass it in the route definition\n<Route path=\"/users/:id\" component={User} preload={preloadUser} />;\n```\n\nLANGUAGE: jsx\nCODE:\n```\n// pages/users/[id].js\nimport { getUser } from ... // the query function\n\nexport default function User(props) {\n  const user = createAsync(() => getUser(props.params.id));\n  return <h1>{user().name}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dynamic Routes with Path Parameters\nDESCRIPTION: Configuring routes with dynamic segments that capture parts of the URL as parameters which can then be accessed in components.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nconst Users = lazy(() => import(\"./pages/Users\"));\nconst User = lazy(() => import(\"./pages/User\"));\nconst Home = lazy(() => import(\"./pages/Home\"));\n\nrender(() => (\n  <Router>\n    <Route path=\"/users\" component={Users} />\n    <Route path=\"/users/:id\" component={User} />\n    <Route path=\"/\" component={Home} />\n  </Router>\n ), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Actions for Data Mutations\nDESCRIPTION: Shows how to use the action API for data mutations that can trigger invalidations and further routing. Includes examples of form submissions and typed data handling.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nimport { action, revalidate, redirect } from \"@solidjs/router\"\n\n// anywhere\nconst myAction = action(async (data) => {\n  await doMutation(data);\n  throw redirect(\"/\", { revalidate: getUser.keyFor(data.id) }); // throw a response to do a redirect\n});\n\n// in component\n<form action={myAction} method=\"post\" />\n\n//or\n<button type=\"submit\" formaction={myAction}></button>\n```\n\nLANGUAGE: js\nCODE:\n```\nconst deleteTodo = action(async (formData: FormData) => {\n  const id = Number(formData.get(\"id\"))\n  await api.deleteTodo(id)\n})\n\n<form action={deleteTodo} method=\"post\">\n  <input type=\"hidden\" name=\"id\" value={todo.id} />\n  <button type=\"submit\">Delete</button>\n</form>\n```\n\nLANGUAGE: js\nCODE:\n```\nconst deleteUser = action(api.deleteTodo)\n\n<form action={deleteTodo.with(todo.id)} method=\"post\">\n  <button type=\"submit\">Delete</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Preload Functions in SolidJS Router\nDESCRIPTION: Demonstrates how to use preload functions for data fetching in SolidJS Router. Preload functions are called when a route is loaded or when links are hovered, allowing for parallel data fetching.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { Route } from \"@solidjs/router\";\n\nconst User = lazy(() => import(\"./pages/users/[id].js\"));\n\n// preload function\nfunction preloadUser({params, location}) {\n  // do preloading\n}\n\n// Pass it in the route definition\n<Route path=\"/users/:id\" component={User} preload={preloadUser} />;\n```\n\n----------------------------------------\n\nTITLE: Using useNavigate Hook in SolidJS\nDESCRIPTION: Demonstrates how to use the useNavigate hook for programmatic navigation.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_31\n\nLANGUAGE: js\nCODE:\n```\nconst navigate = useNavigate();\n\nif (unauthorized) {\n  navigate(\"/login\", { replace: true });\n}\n```\n\n----------------------------------------\n\nTITLE: Using useParams Hook in SolidJS\nDESCRIPTION: Shows how to use the useParams hook to access route parameters in a component.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nconst params = useParams();\n\n// fetch user based on the id path parameter\nconst [user] = createResource(() => params.id, fetchUser);\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy-Loaded Route Components\nDESCRIPTION: Using Solid's lazy loading to only load route components when needed, improving initial load performance.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nconst Users = lazy(() => import(\"./pages/Users\"));\nconst Home = lazy(() => import(\"./pages/Home\"));\n\nconst App = props => (\n  <>\n    <h1>My Site with lots of pages</h1>\n    {props.children}\n  </>\n)\n\nrender(() => (\n  <Router root={App}>\n    <Route path=\"/users\" component={Users} />\n    <Route path=\"/\" component={Home} />\n  </Router>\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using props.children in Nested Routes\nDESCRIPTION: Shows how to use props.children to create a wrapper component for nested routes. This allows for shared layout elements across multiple routes.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nfunction PageWrapper(props) {\n  return (\n    <div>\n      <h1> We love our users! </h1>\n      {props.children}\n      <A href=\"/\">Back Home</A>\n    </div>\n  );\n}\n\n<Route path=\"/users\" component={PageWrapper}>\n  <Route path=\"/\" component={Users} />\n  <Route path=\"/:id\" component={User} />\n</Route>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Catch-All Route for 404 Pages\nDESCRIPTION: Setting up a catch-all route to handle any paths that don't match defined routes, commonly used for 404 pages.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nimport Home from \"./pages/Home\";\nimport Users from \"./pages/Users\";\nimport NotFound from \"./pages/404\";\n\nconst App = props => (\n  <>\n    <h1>My Site with lots of pages</h1>\n    {props.children}\n  </>\n)\n\nrender(() => (\n  <Router root={App}>\n    <Route path=\"/users\" component={Users} />\n    <Route path=\"/\" component={Home} />\n    <Route path=\"*404\" component={NotFound} />\n  </Router>\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Using useLocation Hook in SolidJS\nDESCRIPTION: Shows how to use the useLocation hook to access the current location information.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nconst location = useLocation();\n\nconst pathname = createMemo(() => parsePath(location.pathname));\n```\n\n----------------------------------------\n\nTITLE: Using useSearchParams Hook in SolidJS Router\nDESCRIPTION: Demonstrates how to use the useSearchParams hook to retrieve and update query parameters in the current location. The example shows accessing the 'page' parameter and incrementing its value.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst [searchParams, setSearchParams] = useSearchParams();\n\nreturn (\n  <div>\n    <span>Page: {searchParams.page}</span>\n    <button\n      onClick={() =>\n        setSearchParams({ page: (parseInt(searchParams.page) || 0) + 1 })\n      }\n    >\n      Next Page\n    </button>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Wildcard Routes\nDESCRIPTION: Creating routes that match any path after a specific prefix using the wildcard (*) syntax.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n// Matches any path that begins with foo, including foo/, foo/a/, foo/a/b/c\n<Route path=\"foo/*\" component={Foo} />\n```\n\n----------------------------------------\n\nTITLE: Named Wildcard Parameters in Routes\nDESCRIPTION: Using named wildcards to capture the remaining part of a URL path as a parameter.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<Route path=\"foo/*any\" component={Foo} />\n```\n\n----------------------------------------\n\nTITLE: Deeply Nested Routes Example\nDESCRIPTION: Illustrates how to create deeply nested routes with multiple layers. Only the innermost route becomes an actual route, while outer layers provide nested wrapper components.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<Route\n  path=\"/\"\n  component={(props) =>\n    <div>\n      Onion starts here {props.children}\n    </div>\n  }\n>\n  <Route\n    path=\"layer1\"\n    component={(props) =>\n      <div>\n        Another layer {props.children}\n      </div>\n    }\n  >\n    <Route\n      path=\"layer2\"\n      component={() => <div>Innermost layer</div>}\n    />\n  </Route>\n</Route>\n```\n\n----------------------------------------\n\nTITLE: Manual Route Preloading with usePreloadRoute in SolidJS Router\nDESCRIPTION: Shows how to use usePreloadRoute hook to manually preload a route. This can be useful for optimizing performance by preloading routes before they are needed.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst preload = usePreloadRoute();\n\npreload(`/users/settings`, { preloadData: true });\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Guards with useBeforeLeave in SolidJS Router\nDESCRIPTION: Demonstrates how to use useBeforeLeave hook to implement navigation guards. The example shows how to prevent navigation when a form is dirty and prompt the user for confirmation.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nuseBeforeLeave((e: BeforeLeaveEventArgs) => {\n  if (form.isDirty && !e.defaultPrevented) {\n    // preventDefault to block immediately and prompt user async\n    e.preventDefault();\n    setTimeout(() => {\n      if (window.confirm(\"Discard unsaved changes - are you sure?\")) {\n        // user wants to proceed anyway so retry with force=true\n        e.retry(true);\n      }\n    }, 100);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using useAction Hook in SolidJS Component\nDESCRIPTION: Shows how to use the useAction hook to wrap an action and use it within a component.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n// in component\nconst submit = useAction(myAction)\nsubmit(...args)\n```\n\n----------------------------------------\n\nTITLE: Utilizing useMatch Hook in SolidJS Router\nDESCRIPTION: Demonstrates the usage of useMatch hook to determine if a given path matches the current route. The example shows how to apply an 'active' class based on the match result.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst match = useMatch(() => props.href);\n\nreturn <div classList={{ active: Boolean(match()) }} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with Optional Parameters\nDESCRIPTION: Setting up routes with optional parameters by adding a question mark to the parameter name.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n// Matches stories and stories/123 but not stories/123/comments\n<Route path=\"/stories/:id?\" component={Stories} />\n```\n\n----------------------------------------\n\nTITLE: Using Match Filters to Validate Dynamic Route Parameters\nDESCRIPTION: Adding validation to dynamic route parameters using match filters to ensure they match specific patterns or values.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\nimport type { SegmentValidators } from \"./types\";\n\nconst User = lazy(() => import(\"./pages/User\"));\n\nconst filters: MatchFilters = {\n  parent: [\"mom\", \"dad\"], // allow enum values\n  id: /^\\d+$/, // only allow numbers\n  withHtmlExtension: (v: string) => v.length > 5 && v.endsWith(\".html\"), // we want an `*.html` extension\n};\n\nrender(() => (\n  <Router>\n    <Route\n      path=\"/users/:parent/:id/:withHtmlExtension\"\n      component={User}\n      matchFilters={filters}\n    />\n  </Router>\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route Information with useCurrentMatches in SolidJS Router\nDESCRIPTION: Illustrates how to use useCurrentMatches hook to get all matches for the current route. The example shows how to extract breadcrumb information from route definitions.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst matches = useCurrentMatches();\n\nconst breadcrumbs = createMemo(() => matches().map(m => m.route.info.breadcrumb));\n```\n\n----------------------------------------\n\nTITLE: Using createAsync for Asynchronous Data Handling\nDESCRIPTION: Demonstrates the usage of createAsync, a wrapper over createResource for simpler async data handling. It triggers Suspense/Transitions when data is not ready.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nconst user = createAsync((currentValue) => getUser(params.id))\nreturn <h1>{user.latest.name}</h1>;\n```\n\n----------------------------------------\n\nTITLE: Using redirect Helper in SolidJS Query\nDESCRIPTION: Demonstrates the usage of the redirect helper function within a query to handle user authentication.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst getUser = query(() => {\n  const user = await api.getCurrentUser()\n  if (!user) throw redirect(\"/login\");\n  return user;\n})\n```\n\n----------------------------------------\n\nTITLE: Using reload Helper in SolidJS Action\nDESCRIPTION: Shows how to use the reload helper function in an action to refresh data after an update operation.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst getTodo = query(async (id: number) => {\n  const todo = await fetchTodo(id);\n  return todo;\n}, \"todo\")\n\nconst updateTodo = action(async (todo: Todo) => {\n  await updateTodo(todo.id, todo);\n  reload({ revalidate: getTodo.keyFor(id) })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with Multiple Paths\nDESCRIPTION: Setting up a route that matches multiple paths to prevent unnecessary re-rendering when navigating between them.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n// Navigating from login to register does not cause the Login component to re-render\n<Route path=[\"login\", \"register\"] component={Login} />\n```\n\n----------------------------------------\n\nTITLE: Creating Links to Routes with Standard Anchor Tags\nDESCRIPTION: Using standard HTML anchor tags to navigate between routes in a SolidJS application with the router.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router, Route } from \"@solidjs/router\";\n\nconst Users = lazy(() => import(\"./pages/Users\"));\nconst Home = lazy(() => import(\"./pages/Home\"));\n\nconst App = props => (\n  <>\n    <nav>\n      <a href=\"/about\">About</a>\n      <a href=\"/\">Home</a>\n    </nav>\n    <h1>My Site with lots of pages</h1>\n    {props.children}\n  </>\n);\n\nrender(() => (\n  <Router root={App}>\n    <Route path=\"/users\" component={Users} />\n    <Route path=\"/\" component={Home} />\n  </Router>\n), document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing useIsRouting Hook in SolidJS Router\nDESCRIPTION: Shows how to use the useIsRouting hook to indicate whether the route is currently in a Transition. This is useful for showing stale/pending state during route resolution.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst isRouting = useIsRouting();\n\nreturn (\n  <div classList={{ \"grey-out\": isRouting() }}>\n    <MyAwesomeContent />\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Action with Unique Name in SolidJS\nDESCRIPTION: Demonstrates how to create an action with a unique name for stable references across SSR.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\nconst myAction = action(async (args) => {}, \"my-action\");\n```\n\n----------------------------------------\n\nTITLE: Defining Submission Type and Using useSubmission/useSubmissions in SolidJS\nDESCRIPTION: Illustrates the Submission type definition and usage of useSubmission and useSubmissions hooks for handling action submissions.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\ntype Submission<T, U> = {\n  readonly input: T;\n  readonly result?: U;\n  readonly pending: boolean;\n  readonly url: string;\n  clear: () => void;\n  retry: () => void;\n};\n\nconst submissions = useSubmissions(action, (input) => filter(input));\nconst submission = useSubmission(action, (input) => filter(input));\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes with Array in SolidJS Router\nDESCRIPTION: Demonstrates how to set up routes using an array of route definitions instead of JSX.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router } from \"@solidjs/router\";\n\nconst routes = [\n  {\n    path: \"/users\",\n    component: lazy(() => import(\"/pages/users.js\")),\n  },\n  {\n    path: \"/users/:id\",\n    component: lazy(() => import(\"/pages/users/[id].js\")),\n    children: [\n      {\n        path: \"/\",\n        component: lazy(() => import(\"/pages/users/[id]/index.js\")),\n      },\n      {\n        path: \"/settings\",\n        component: lazy(() => import(\"/pages/users/[id]/settings.js\")),\n      },\n      {\n        path: \"/*all\",\n        component: lazy(() => import(\"/pages/users/[id]/[...all].js\")),\n      },\n    ],\n  },\n  {\n    path: \"/\",\n    component: lazy(() => import(\"/pages/index.js\")),\n  },\n  {\n    path: \"/*all\",\n    component: lazy(() => import(\"/pages/[...all].js\")),\n  },\n];\n\nrender(() =>\n  <Router>{routes}</Router>,\n  document.getElementById(\"app\")\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Route in SolidJS Router\nDESCRIPTION: Shows how to set up a single route using a route definition object.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { render } from \"solid-js/web\";\nimport { Router } from \"@solidjs/router\";\n\nconst route = {\n  path: \"/\",\n  component: lazy(() => import(\"/pages/index.js\"))\n};\n\nrender(() => <Router>{route}</Router>, document.getElementById(\"app\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR Routing in SolidJS\nDESCRIPTION: Demonstrates how to set up server-side rendering (SSR) routing in SolidJS.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nimport { isServer } from \"solid-js/web\";\nimport { Router } from \"@solidjs/router\";\n\n<Router url={isServer ? req.url : \"\"} />;\n```\n\n----------------------------------------\n\nTITLE: Using Context for Route Data in SolidJS Router\nDESCRIPTION: Shows how to use Context to pass route data to components after migrating from the old data functions. This pattern can be used to replicate the behavior of the removed useRouteData hook.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nfunction User(props) {\n  <UserContext.Provider value={props.data}>\n    {/* my component content  */}\n  </UserContext.Provider>\n}\n\n// Somewhere else\nfunction UserDetails() {\n  const user = useContext(UserContext)\n  // render stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Route Preloading in SolidJS Router\nDESCRIPTION: Demonstrates how to migrate from the old data functions and useRouteData to the new preload mechanism in SolidJS Router v0.10.0. This example shows how to define a preload function and use it in a route definition.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nimport { lazy } from \"solid-js\";\nimport { Route } from \"@solidjs/router\";\n\nconst User = lazy(() => import(\"./pages/users/[id].js\"));\n\n// preload function\nfunction preloadUser({params, location}) {\n  const [user] = createResource(() => params.id, fetchUser);\n  return user;\n}\n\n// Pass it in the route definition\n<Router preload={false}>\n  <Route path=\"/users/:id\" component={User} preload={preloadUser} />\n</Router>\n```\n\n----------------------------------------\n\nTITLE: Using HashRouter in SolidJS\nDESCRIPTION: Demonstrates how to use the HashRouter for hash-based routing.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\nimport { HashRouter } from \"@solidjs/router\";\n\n<HashRouter />;\n```\n\n----------------------------------------\n\nTITLE: Using MemoryRouter in SolidJS\nDESCRIPTION: Shows how to use the MemoryRouter for testing purposes.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MemoryRouter } from \"@solidjs/router\";\n\n<MemoryRouter />;\n```\n\n----------------------------------------\n\nTITLE: Installing Solid Router via npm\nDESCRIPTION: Command to install the @solidjs/router package using npm.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @solidjs/router\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.15.3\nDESCRIPTION: Changelog entry documenting patch changes for version 0.15.3, including more lenient cache resuming functionality.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.15.3\n\n### Patch Changes\n\n- 97184e4: more lenient on cache resuming (allow nested promises during hydration)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.15.2\nDESCRIPTION: Changelog entry documenting patch changes for version 0.15.2, including JSDoc additions, Vite 6 compatibility, and action clearing improvements.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.15.2\n\n### Patch Changes\n\n- fe5c83e: Add JSdoc\n- 9a5e350: Vite 6 compatibility\n- 20ad18f: only clear completed actions on navigation\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.15.1\nDESCRIPTION: Changelog entry documenting patch changes for version 0.15.1, including Submission export and onComplete return type fix.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.15.1\n\n### Patch Changes\n\n- f3763aa: Export Submission at the top level\n- 813e6bd: fix `onComplete` return type\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.15.0\nDESCRIPTION: Changelog entry documenting minor changes for version 0.15.0, including renaming of cache to query and action onComplete.\nSOURCE: https://github.com/solidjs/solid-router/blob/main/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.15.0\n\n### Minor Changes\n\n- 6799556: rename `cache` to `query`, action `onComplete`\n```"
  }
]