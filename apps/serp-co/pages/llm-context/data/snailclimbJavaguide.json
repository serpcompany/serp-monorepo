[
  {
    "owner": "snailclimb",
    "repo": "javaguide",
    "content": "TITLE: Implementing a Dynamic Proxy Using Reflection in Java\nDESCRIPTION: This code snippet demonstrates how to implement a dynamic proxy in Java using the InvocationHandler interface and reflection to invoke methods on the target object.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-03.md#2025-04-20_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\npublic class DebugInvocationHandler implements InvocationHandler {\n    /**\n     * 代理类中的真实对象\n     */\n    private final Object target;\n\n    public DebugInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n    public Object invoke(Object proxy, Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {\n        System.out.println(\"before method \" + method.getName());\n        Object result = method.invoke(target, args);\n        System.out.println(\"after method \" + method.getName());\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HashMap put Method - Java\nDESCRIPTION: Method to insert key-value pairs into HashMap. Handles null checks, hash calculations, and collision resolution through either linked lists or red-black trees. Includes resizing logic when threshold is exceeded.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/hashmap-source-code.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\n\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n        else if (p instanceof TreeNode)\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    if (binCount >= TREEIFY_THRESHOLD - 1)\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) {\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Thread Pool Status in Java\nDESCRIPTION: This code snippet demonstrates how to create a method that periodically prints the status of a thread pool, including pool size, active threads, completed tasks, and queue size.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-best-practices.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/**\n * 打印线程池的状态\n *\n * @param threadPool 线程池对象\n */\npublic static void printThreadPoolStatus(ThreadPoolExecutor threadPool) {\n    ScheduledExecutorService scheduledExecutorService = new ScheduledThreadPoolExecutor(1, createThreadFactory(\"print-images/thread-pool-status\", false));\n    scheduledExecutorService.scheduleAtFixedRate(() -> {\n        log.info(\"=========================\");\n        log.info(\"ThreadPool Size: [{}]\", threadPool.getPoolSize());\n        log.info(\"Active Threads: {}\", threadPool.getActiveCount());\n        log.info(\"Number of Tasks : {}\", threadPool.getCompletedTaskCount());\n        log.info(\"Number of Tasks in Queue: {}\", threadPool.getQueue().size());\n        log.info(\"=========================\");\n    }, 0, 1, TimeUnit.SECONDS);\n}\n```\n\n----------------------------------------\n\nTITLE: Task Composition with CompletableFuture\nDESCRIPTION: Demonstrates how to compose multiple CompletableFuture tasks using thenCompose() and thenCombine() methods.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/completablefuture-intro.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nCompletableFuture<String> future\n        = CompletableFuture.supplyAsync(() -> \"hello!\")\n        .thenCompose(s -> CompletableFuture.supplyAsync(() -> s + \"world!\"));\nassertEquals(\"hello!world!\", future.get());\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Concurrency in Java\nDESCRIPTION: This code snippet demonstrates the basic usage of StructuredTaskScope, which is the fundamental API for structured concurrency in Java. It shows how to fork tasks, join them, and process results or exceptions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java20.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\ntry (var scope = new StructuredTaskScope<Object>()) {\n    // Fork threads to execute subtasks\n    Future<Integer> future1 = scope.fork(task1);\n    Future<String> future2 = scope.fork(task2);\n    // Wait for threads to complete\n    scope.join();\n    // Process results/exceptions\n    ... process results/exceptions ...\n} // close\n```\n\n----------------------------------------\n\nTITLE: Adding Two Numbers as Linked Lists in Java\nDESCRIPTION: Implementation to add two numbers represented as linked lists in reverse order. Creates a dummy head node to handle edge cases and uses a carry variable to manage additions. Returns the sum as a new linked list.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/linkedlist-algorithm-problems.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass Solution {\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode dummyHead = new ListNode(0);\n    ListNode p = l1, q = l2, curr = dummyHead;\n    //carry 表示进位数\n    int carry = 0;\n    while (p != null || q != null) {\n        int x = (p != null) ? p.val : 0;\n        int y = (q != null) ? q.val : 0;\n        int sum = carry + x + y;\n        //进位数\n        carry = sum / 10;\n        //新节点的数值为sum % 10\n        curr.next = new ListNode(sum % 10);\n        curr = curr.next;\n        if (p != null) p = p.next;\n        if (q != null) q = q.next;\n    }\n    if (carry > 0) {\n        curr.next = new ListNode(carry);\n    }\n    return dummyHead.next;\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ArrayList with Different Constructors in Java\nDESCRIPTION: This snippet shows three constructors for ArrayList: default (no arguments), with initial capacity, and from an existing collection. It demonstrates how ArrayList initializes its internal array based on different inputs.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * 默认初始容量大小\n */\nprivate static final int DEFAULT_CAPACITY = 10;\n\nprivate static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n/**\n * 默认构造函数，使用初始容量10构造一个空列表(无参数构造)\n */\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n\n/**\n * 带初始容量参数的构造函数。（用户自己指定容量）\n */\npublic ArrayList(int initialCapacity) {\n    if (initialCapacity > 0) {//初始容量大于0\n        //创建initialCapacity大小的数组\n        this.elementData = new Object[initialCapacity];\n    } else if (initialCapacity == 0) {//初始容量等于0\n        //创建空数组\n        this.elementData = EMPTY_ELEMENTDATA;\n    } else {//初始容量小于0，抛出异常\n        throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n    }\n}\n\n\n/**\n *构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回\n *如果指定的集合为null，throws NullPointerException。\n */\npublic ArrayList(Collection<? extends E> c) {\n    elementData = c.toArray();\n    if ((size = elementData.length) != 0) {\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n        if (elementData.getClass() != Object[].class)\n            elementData = Arrays.copyOf(elementData, size, Object[].class);\n    } else {\n        // replace with empty array.\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Bloom Filter Implementation in Java\nDESCRIPTION: A custom implementation of a Bloom Filter in Java using BitSet and multiple hash functions. Includes methods for adding elements and checking existence.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/data-structure/bloom-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.BitSet;\n\npublic class MyBloomFilter {\n    private static final int DEFAULT_SIZE = 2 << 24;\n    private static final int[] SEEDS = new int[]{3, 13, 46, 71, 91, 134};\n    private BitSet bits = new BitSet(DEFAULT_SIZE);\n    private SimpleHash[] func = new SimpleHash[SEEDS.length];\n\n    public MyBloomFilter() {\n        for (int i = 0; i < SEEDS.length; i++) {\n            func[i] = new SimpleHash(DEFAULT_SIZE, SEEDS[i]);\n        }\n    }\n\n    public void add(Object value) {\n        for (SimpleHash f : func) {\n            bits.set(f.hash(value), true);\n        }\n    }\n\n    public boolean contains(Object value) {\n        boolean ret = true;\n        for (SimpleHash f : func) {\n            ret = ret && bits.get(f.hash(value));\n        }\n        return ret;\n    }\n\n    public static class SimpleHash {\n        private int cap;\n        private int seed;\n\n        public SimpleHash(int cap, int seed) {\n            this.cap = cap;\n            this.seed = seed;\n        }\n\n        public int hash(Object value) {\n            int h;\n            return (value == null) ? 0 : Math.abs((cap - 1) & seed * ((h = value.hashCode()) ^ (h >>> 16)));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Example with CompletableFuture\nDESCRIPTION: Shows practical example of handling exceptions using handle() method in CompletableFuture with error fallback.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/completablefuture-intro.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nCompletableFuture<String> future\n        = CompletableFuture.supplyAsync(() -> {\n    if (true) {\n        throw new RuntimeException(\"Computation error!\");\n    }\n    return \"hello!\";\n}).handle((res, ex) -> {\n    // res 代表返回的结果\n    // ex 的类型为 Throwable ，代表抛出的异常\n    return res != null ? res : \"world!\";\n});\nassertEquals(\"world!\", future.get());\n```\n\n----------------------------------------\n\nTITLE: Iterating and Modifying Collections in Java\nDESCRIPTION: Explains why removing or adding elements during a foreach loop can cause ConcurrentModificationException. Suggests using Iterator for removal operations and demonstrates the use of removeIf() method introduced in Java 8.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-precautions-for-use.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nList<Integer> list = new ArrayList<>();\nfor (int i = 1; i <= 10; ++i) {\n    list.add(i);\n}\nlist.removeIf(filter -> filter % 2 == 0); /* 删除list中的所有偶数 */\nSystem.out.println(list); /* [1, 3, 5, 7, 9] */\n```\n\n----------------------------------------\n\nTITLE: Managing Dependencies with dependencyManagement in Parent POM\nDESCRIPTION: Shows how to use the dependencyManagement section in a parent POM file to centrally define dependency versions. This ensures consistent dependency versions across all child modules.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-best-practices.md#2025-04-20_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter</artifactId>\n      <version>5.7.2</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Custom Thread Pool Executor for MDC Context Propagation\nDESCRIPTION: Custom implementation of ThreadPoolTaskExecutor that preserves MDC context values when tasks are executed asynchronously, ensuring requestId propagation across thread boundaries in asynchronous operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic class MyThreadPoolTaskExecutor extends ThreadPoolTaskExecutor {\n\n    @Override\n    public void execute(Runnable runnable) {\n        Map<String, String> context = MDC.getCopyOfContextMap();\n        super.execute(() -> run(runnable, context));\n    }\n\n    @Override\n    private void run(Runnable runnable, Map<String, String> context) {\n        if (context != null) {\n            MDC.setContextMap(context);\n        }\n        try {\n            runnable.run();\n        } finally {\n            MDC.remove();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CompletableFuture Objects\nDESCRIPTION: Example showing how to create CompletableFuture objects and handle RPC responses asynchronously.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/completablefuture-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nCompletableFuture<RpcResponse<Object>> resultFuture = new CompletableFuture<>();\nresultFuture.complete(rpcResponse);\nrpcResponse = completableFuture.get();\n\nCompletableFuture<String> future = CompletableFuture.completedFuture(\"hello!\");\nassertEquals(\"hello!\", future.get());\n```\n\n----------------------------------------\n\nTITLE: Processing Selected Keys with Java NIO Selector\nDESCRIPTION: Demonstrates how to iterate through selected keys in a Selector and handle different types of events like accept, connect, read and write operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/nio-basis.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nSet<SelectionKey> selectedKeys = selector.selectedKeys();\nIterator<SelectionKey> keyIterator = selectedKeys.iterator();\nwhile (keyIterator.hasNext()) {\n    SelectionKey key = keyIterator.next();\n    if (key != null) {\n        if (key.isAcceptable()) {\n            // ServerSocketChannel 接收了一个新连接\n        } else if (key.isConnectable()) {\n            // 表示一个新连接建立\n        } else if (key.isReadable()) {\n            // Channel 有准备好的数据，可以读取\n        } else if (key.isWritable()) {\n            // Channel 有空闲的 Buffer，可以写入数据\n        }\n    }\n    keyIterator.remove();\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HashMap Operations in Java\nDESCRIPTION: A complete Java class that demonstrates common HashMap operations including initialization, adding elements, iterating through keys and values, handling Entry sets, and using utility methods like size, isEmpty, remove, get, containsKey, containsValue, and replace.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/hashmap-source-code.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npackage map;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Set;\n\npublic class HashMapDemo {\n\n    public static void main(String[] args) {\n        HashMap<String, String> map = new HashMap<String, String>();\n        // 键不能重复，值可以重复\n        map.put(\"san\", \"张三\");\n        map.put(\"si\", \"李四\");\n        map.put(\"wu\", \"王五\");\n        map.put(\"wang\", \"老王\");\n        map.put(\"wang\", \"老王2\");// 老王被覆盖\n        map.put(\"lao\", \"老王\");\n        System.out.println(\"-------直接输出hashmap:-------\");\n        System.out.println(map);\n        /**\n         * 遍历HashMap\n         */\n        // 1.获取Map中的所有键\n        System.out.println(\"-------foreach获取Map中所有的键:------\");\n        Set<String> keys = map.keySet();\n        for (String key : keys) {\n            System.out.print(key+\"  \");\n        }\n        System.out.println();//换行\n        // 2.获取Map中所有值\n        System.out.println(\"-------foreach获取Map中所有的值:------\");\n        Collection<String> values = map.values();\n        for (String value : values) {\n            System.out.print(value+\"  \");\n        }\n        System.out.println();//换行\n        // 3.得到key的值的同时得到key所对应的值\n        System.out.println(\"-------得到key的值的同时得到key所对应的值:-------\");\n        Set<String> keys2 = map.keySet();\n        for (String key : keys2) {\n            System.out.print(key + \"：\" + map.get(key)+\"   \");\n\n        }\n        /**\n         * 如果既要遍历key又要value，那么建议这种方式，因为如果先获取keySet然后再执行map.get(key)，map内部会执行两次遍历。\n         * 一次是在获取keySet的时候，一次是在遍历所有key的时候。\n         */\n        // 当我调用put(key,value)方法的时候，首先会把key和value封装到\n        // Entry这个静态内部类对象中，把Entry对象再添加到数组中，所以我们想获取\n        // map中的所有键值对，我们只要获取数组中的所有Entry对象，接下来\n        // 调用Entry对象中的getKey()和getValue()方法就能获取键值对了\n        Set<java.util.Map.Entry<String, String>> entrys = map.entrySet();\n        for (java.util.Map.Entry<String, String> entry : entrys) {\n            System.out.println(entry.getKey() + \"--\" + entry.getValue());\n        }\n\n        /**\n         * HashMap其他常用方法\n         */\n        System.out.println(\"after map.size()：\"+map.size());\n        System.out.println(\"after map.isEmpty()：\"+map.isEmpty());\n        System.out.println(map.remove(\"san\"));\n        System.out.println(\"after map.remove()：\"+map);\n        System.out.println(\"after map.get(si)：\"+map.get(\"si\"));\n        System.out.println(\"after map.containsKey(si)：\"+map.containsKey(\"si\"));\n        System.out.println(\"after containsValue(李四)：\"+map.containsValue(\"李四\"));\n        System.out.println(map.replace(\"si\", \"李四2\"));\n        System.out.println(\"after map.replace(si, 李四2):\"+map);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Finding the Kth Node from End of a Linked List in Java\nDESCRIPTION: This algorithm finds the kth node from the end of a linked list using two pointers. The first pointer advances k nodes, then both pointers move until the first reaches the end. The second pointer will then point to the kth node from the end. Time complexity is O(n) with a single pass through the list.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n/*\n//链表类\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\n\n//时间复杂度O(n),一次遍历即可\npublic class Solution {\n    public ListNode FindKthToTail(ListNode head,int k) {\n        ListNode pre=null,p=null;\n        //两个指针都指向头结点\n        p=head;\n        pre=head;\n        //记录k值\n        int a=k;\n        //记录节点的个数\n        int count=0;\n        //p指针先跑，并且记录节点数，当p指针跑了k-1个节点后，pre指针开始跑，\n        //当p指针跑到最后时，pre所指指针就是倒数第k个节点\n        while(p!=null){\n            p=p.next;\n            count++;\n            if(k<1){\n                pre=pre.next;\n            }\n            k--;\n        }\n        //如果节点个数小于所求的倒数第k个节点，则返回空\n        if(count<a) return null;\n        return pre;\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Thread Using Thread.ofVirtual()\nDESCRIPTION: Shows two ways to create virtual threads using Thread.ofVirtual(): creating an unstarted thread and creating/starting a thread immediately.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/virtual-thread.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class VirtualThreadTest {\n  public static void main(String[] args) {\n    CustomThread customThread = new CustomThread();\n    // 创建不启动\n    Thread unStarted = Thread.ofVirtual().unstarted(customThread);\n    unStarted.start();\n    // 创建直接启动\n    Thread.ofVirtual().start(customThread);\n  }\n}\nstatic class CustomThread implements Runnable {\n  @Override\n  public void run() {\n    System.out.println(\"CustomThread run\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Proxy with Java Reflection\nDESCRIPTION: Example implementation of a debug invocation handler using Java's reflection API. The handler intercepts method calls and adds logging before and after method execution.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/reflection.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class DebugInvocationHandler implements InvocationHandler {\n    /**\n     * 代理类中的真实对象\n     */\n    private final Object target;\n\n    public DebugInvocationHandler(Object target) {\n        this.target = target;\n    }\n\n\n    public Object invoke(Object proxy, Method method, Object[] args) throws InvocationTargetException, IllegalAccessException {\n        System.out.println(\"before method \" + method.getName());\n        Object result = method.invoke(target, args);\n        System.out.println(\"after method \" + method.getName());\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Spring ThreadPoolExecutor\nDESCRIPTION: Configuration class that creates a custom thread pool executor for Spring async operations. It calculates optimal thread pool parameters based on available processors and sets various configurations like core pool size, max pool size, queue capacity, and thread naming.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-best-practices.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableAsync\npublic class ThreadPoolExecutorConfig {\n\n    @Bean(name=\"threadPoolExecutor\")\n    public Executor threadPoolExecutor(){\n        ThreadPoolTaskExecutor threadPoolExecutor = new ThreadPoolTaskExecutor();\n        int processNum = Runtime.getRuntime().availableProcessors(); // 返回可用处理器的Java虚拟机的数量\n        int corePoolSize = (int) (processNum / (1 - 0.2));\n        int maxPoolSize = (int) (processNum / (1 - 0.5));\n        threadPoolExecutor.setCorePoolSize(corePoolSize); // 核心池大小\n        threadPoolExecutor.setMaxPoolSize(maxPoolSize); // 最大线程数\n        threadPoolExecutor.setQueueCapacity(maxPoolSize * 1000); // 队列程度\n        threadPoolExecutor.setThreadPriority(Thread.MAX_PRIORITY);\n        threadPoolExecutor.setDaemon(false);\n        threadPoolExecutor.setKeepAliveSeconds(300);// 线程空闲时间\n        threadPoolExecutor.setThreadNamePrefix(\"test-Executor-\"); // 线程名字前缀\n        return threadPoolExecutor;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Handling Methods in CompletableFuture\nDESCRIPTION: Demonstrates different methods for handling exceptions in CompletableFuture including handle(), handleAsync(), and exceptionally().\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/completablefuture-intro.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic <U> CompletableFuture<U> handle(\n    BiFunction<? super T, Throwable, ? extends U> fn) {\n    return uniHandleStage(null, fn);\n}\n\npublic <U> CompletableFuture<U> handleAsync(\n    BiFunction<? super T, Throwable, ? extends U> fn) {\n    return uniHandleStage(defaultExecutor(), fn);\n}\n\npublic <U> CompletableFuture<U> handleAsync(\n    BiFunction<? super T, Throwable, ? extends U> fn, Executor executor) {\n    return uniHandleStage(screenExecutor(executor), fn);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Threads in Java\nDESCRIPTION: This code demonstrates four different methods to create virtual threads in Java, showcasing the flexibility and ease of use of this new feature.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java20.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// 1. Using Thread.ofVirtual()\nThread thread = Thread.ofVirtual(() -> {\n  // your code here\n}).start();\n\n// 2. Using Thread.startVirtualThread()\nThread thread = Thread.startVirtualThread(() -> {\n  // your code here\n});\n\n// 3. Using Executors.newVirtualThreadPerTaskExecutor()\nvar executorService = Executors.newVirtualThreadPerTaskExecutor();\nexecutorService.submit(() -> {\n  // your code here\n});\n\n// 4. Using ThreadFactory\nCustomThread customThread = new CustomThread();\nThreadFactory factory = Thread.ofVirtual().factory();\nThread thread = factory.newThread(customThread);\nthread.start();\n```\n\n----------------------------------------\n\nTITLE: Merging Two Sorted Linked Lists - Iterative Solution\nDESCRIPTION: Java implementation for merging two sorted linked lists into a single sorted list using iterative approach. Handles edge cases like empty lists and maintains sorted order in the merged result.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class Solution {\n    public ListNode Merge(ListNode list1,ListNode list2) {\n       if(list1 == null){\n            return list2;\n        }\n        if(list2 == null){\n            return list1;\n        }\n        ListNode mergeHead = null;\n        ListNode current = null;\n        while(list1!=null && list2!=null){\n            if(list1.val <= list2.val){\n                if(mergeHead == null){\n                   mergeHead = current = list1;\n                }else{\n                   current.next = list1;\n                   current = list1;\n                }\n                list1 = list1.next;\n            }else{\n                if(mergeHead == null){\n                   mergeHead = current = list2;\n                }else{\n                   current.next = list2;\n                   current = list2;\n                }\n                list2 = list2.next;\n            }\n        }\n        if(list1 == null){\n            current.next = list2;\n        }else{\n            current.next = list1;\n        }\n        return mergeHead;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 使用Curator实现ZooKeeper分布式锁\nDESCRIPTION: 展示了如何使用Curator框架实现ZooKeeper分布式锁，包括可重入锁、不可重入锁和多重锁的创建、获取与释放过程。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-lock-implementations.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nCuratorFramework client = ZKUtils.getClient();\nclient.start();\n// 分布式可重入排它锁\nInterProcessLock lock1 = new InterProcessMutex(client, lockPath1);\n// 分布式不可重入排它锁\nInterProcessLock lock2 = new InterProcessSemaphoreMutex(client, lockPath2);\n// 将多个锁作为一个整体\nInterProcessMultiLock lock = new InterProcessMultiLock(Arrays.asList(lock1, lock2));\n\nif (!lock.acquire(10, TimeUnit.SECONDS)) {\n   throw new IllegalStateException(\"不能获取多锁\");\n}\nSystem.out.println(\"已获取多锁\");\nSystem.out.println(\"是否有第一个锁: \" + lock1.isAcquiredInThisProcess());\nSystem.out.println(\"是否有第二个锁: \" + lock2.isAcquiredInThisProcess());\ntry {\n    // 资源操作\n    resource.use();\n} finally {\n    System.out.println(\"释放多个锁\");\n    lock.release();\n}\nSystem.out.println(\"是否有第一个锁: \" + lock1.isAcquiredInThisProcess());\nSystem.out.println(\"是否有第二个锁: \" + lock2.isAcquiredInThisProcess());\nclient.close();\n```\n\n----------------------------------------\n\nTITLE: Processing Async Results with CompletableFuture\nDESCRIPTION: Examples of processing async computation results using thenApply(), thenAccept(), and related methods.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/completablefuture-intro.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nCompletableFuture<String> future = CompletableFuture.completedFuture(\"hello!\")\n        .thenApply(s -> s + \"world!\");\nassertEquals(\"hello!world!\", future.get());\n\nCompletableFuture<String> future = CompletableFuture.supplyAsync(() -> \"hello!\")\n        .whenComplete((res, ex) -> {\n            System.out.println(res);\n            assertNull(ex);\n        });\nassertEquals(\"hello!\", future.get());\n```\n\n----------------------------------------\n\nTITLE: BigDecimal Utility Class Implementation\nDESCRIPTION: A comprehensive utility class providing simplified methods for BigDecimal operations including arithmetic, conversion, and comparison.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/bigdecimal.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\n\npublic class BigDecimalUtil {\n    private static final int DEF_DIV_SCALE = 10;\n    private BigDecimalUtil() {}\n\n    public static double add(double v1, double v2) {\n        BigDecimal b1 = BigDecimal.valueOf(v1);\n        BigDecimal b2 = BigDecimal.valueOf(v2);\n        return b1.add(b2).doubleValue();\n    }\n\n    public static double subtract(double v1, double v2) {\n        BigDecimal b1 = BigDecimal.valueOf(v1);\n        BigDecimal b2 = BigDecimal.valueOf(v2);\n        return b1.subtract(b2).doubleValue();\n    }\n\n    public static double multiply(double v1, double v2) {\n        BigDecimal b1 = BigDecimal.valueOf(v1);\n        BigDecimal b2 = BigDecimal.valueOf(v2);\n        return b1.multiply(b2).doubleValue();\n    }\n\n    public static double divide(double v1, double v2) {\n        return divide(v1, v2, DEF_DIV_SCALE);\n    }\n\n    public static double divide(double v1, double v2, int scale) {\n        if (scale < 0) {\n            throw new IllegalArgumentException(\n                    \"The scale must be a positive integer or zero\");\n        }\n        BigDecimal b1 = BigDecimal.valueOf(v1);\n        BigDecimal b2 = BigDecimal.valueOf(v2);\n        return b1.divide(b2, scale, RoundingMode.HALF_EVEN).doubleValue();\n    }\n\n    public static double round(double v, int scale) {\n        if (scale < 0) {\n            throw new IllegalArgumentException(\n                    \"The scale must be a positive integer or zero\");\n        }\n        BigDecimal b = BigDecimal.valueOf(v);\n        BigDecimal one = new BigDecimal(\"1\");\n        return b.divide(one, scale, RoundingMode.HALF_UP).doubleValue();\n    }\n\n    public static float convertToFloat(double v) {\n        BigDecimal b = new BigDecimal(v);\n        return b.floatValue();\n    }\n\n    public static int convertsToInt(double v) {\n        BigDecimal b = new BigDecimal(v);\n        return b.intValue();\n    }\n\n    public static long convertsToLong(double v) {\n        BigDecimal b = new BigDecimal(v);\n        return b.longValue();\n    }\n\n    public static double returnMax(double v1, double v2) {\n        BigDecimal b1 = new BigDecimal(v1);\n        BigDecimal b2 = new BigDecimal(v2);\n        return b1.max(b2).doubleValue();\n    }\n\n    public static double returnMin(double v1, double v2) {\n        BigDecimal b1 = new BigDecimal(v1);\n        BigDecimal b2 = new BigDecimal(v2);\n        return b1.min(b2).doubleValue();\n    }\n\n    public static int compareTo(double v1, double v2) {\n        BigDecimal b1 = BigDecimal.valueOf(v1);\n        BigDecimal b2 = BigDecimal.valueOf(v2);\n        return b1.compareTo(b2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: String Concatenation with '+' Operator in Java\nDESCRIPTION: This code demonstrates how Java concatenates strings using the '+' operator. Under the hood, the compiler uses StringBuilder to perform the concatenation, as shown in the bytecode analysis.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nString str1 = \"he\";\nString str2 = \"llo\";\nString str3 = \"world\";\nString str4 = str1 + str2 + str3;\n```\n\n----------------------------------------\n\nTITLE: Growing ArrayList Capacity in Java\nDESCRIPTION: This method is the core of ArrayList's expansion mechanism. It calculates the new capacity (typically 1.5 times the old capacity) and handles cases where the new capacity exceeds the maximum array size.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * 要分配的最大数组大小\n */\nprivate static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n\n/**\n * ArrayList扩容的核心方法。\n */\nprivate void grow(int minCapacity) {\n    // oldCapacity为旧容量，newCapacity为新容量\n    int oldCapacity = elementData.length;\n    // 将oldCapacity 右移一位，其效果相当于oldCapacity /2，\n    // 我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n\n    // 然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n\n    // 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，\n    // 如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n\n    // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File Content Using Scanner with Try-with-Resources in Java\nDESCRIPTION: This code snippet shows how to use the try-with-resources statement in Java 7+ to automatically close resources like Scanner when reading a file.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-03.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\ntry (Scanner scanner = new Scanner(new File(\"test.txt\"))) {\n    while (scanner.hasNext()) {\n        System.out.println(scanner.nextLine());\n    }\n} catch (FileNotFoundException fnfe) {\n    fnfe.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Non-blocking Offer Operation in ArrayBlockingQueue\nDESCRIPTION: Implementation of non-blocking offer operation that immediately returns false if the queue is full instead of waiting.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic boolean offer(E e) {\n        checkNotNull(e);\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n             if (count == items.length)\n                return false;\n            else {\n                enqueue(e);\n                return true;\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Zero-Copy File Transfer in Java\nDESCRIPTION: Example showing how to use Java's FileChannel.transferTo() method to implement zero-copy file transfer functionality. This approach improves performance by reducing CPU copies and context switches.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/rocketmq-questions.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nFileChannel channel = FileChannel.open(Paths.get(\"./test.txt\"), StandardOpenOption.WRITE, StandardOpenOption.CREATE);\n//调用transferTo方法向目标数据传输\nchannel.transferTo(position, len, target);\n```\n\n----------------------------------------\n\nTITLE: Implementing HashMap get Method - Java\nDESCRIPTION: Method to retrieve values from HashMap using key. Handles both direct array access and traversal of collision chains (linked list or tree).\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/hashmap-source-code.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic V get(Object key) {\n    Node<K,V> e;\n    return (e = getNode(hash(key), key)) == null ? null : e.value;\n}\n\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        if (first.hash == hash && \n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        if ((e = first.next) != null) {\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Thread-safe Singleton Implementation using Double-Checked Locking\nDESCRIPTION: Implementation of singleton pattern using volatile and synchronized keywords to ensure thread safety\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Singleton {\n\n    private volatile static Singleton uniqueInstance;\n\n    private Singleton() {\n    }\n\n    public  static Singleton getUniqueInstance() {\n       //先判断对象是否已经实例过，没有实例化过才进入加锁代码\n        if (uniqueInstance == null) {\n            //类对象加锁\n            synchronized (Singleton.class) {\n                if (uniqueInstance == null) {\n                    uniqueInstance = new Singleton();\n                }\n            }\n        }\n        return uniqueInstance;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AtomicInteger Implementation\nDESCRIPTION: Core implementation of AtomicInteger class showing how it uses Unsafe class for atomic operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate static final Unsafe unsafe = Unsafe.getUnsafe();\nprivate static final long valueOffset;\n\nstatic {\n    try {\n        valueOffset = unsafe.objectFieldOffset\n            (AtomicInteger.class.getDeclaredField(\"value\"));\n    } catch (Exception ex) { throw new Error(ex); }\n}\nprivate volatile int value;\n\npublic final boolean compareAndSet(int expect, int update) {\n    return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n}\n\npublic final int getAndAdd(int delta) {\n    return unsafe.getAndAddInt(this, valueOffset, delta);\n}\n\npublic final int getAndIncrement() {\n    return unsafe.getAndAddInt(this, valueOffset, 1);\n}\n\npublic final int getAndDecrement() {\n    return unsafe.getAndAddInt(this, valueOffset, -1);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Try-Catch-Finally Exception Handling in Java\nDESCRIPTION: This code snippet shows how to use try-catch-finally blocks in Java for exception handling. It throws a RuntimeException in the try block, catches it in the catch block, and executes the finally block regardless of the exception.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-03.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ntry {\n    System.out.println(\"Try to do something\");\n    throw new RuntimeException(\"RuntimeException\");\n} catch (Exception e) {\n    System.out.println(\"Catch Exception -> \" + e.getMessage());\n} finally {\n    System.out.println(\"Finally\");\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Client Implementation in JavaScript\nDESCRIPTION: Frontend JavaScript code to establish WebSocket connection, handle events and send/receive messages.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/web-real-time-message-push.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n    var ws = new WebSocket('ws://localhost:7777/webSocket/10086');\n    console.log('ws连接状态：' + ws.readyState);\n    ws.onopen = function () {\n        console.log('ws连接状态：' + ws.readyState);\n        ws.send('test1');\n    }\n    ws.onmessage = function (data) {\n        console.log('接收到来自服务器的消息：');\n        console.log(data);\n        ws.close();\n    }\n    ws.onclose = function () {\n        console.log('ws连接状态：' + ws.readyState);\n    }\n    ws.onerror = function (error) {\n        console.log(error);\n    }\n    function sendMessage() {\n        var content = $(\"#message\").val();\n        $.ajax({\n            url: '/socket/publish?userId=10086&message=' + content,\n            type: 'GET',\n            data: { \"id\": \"7777\", \"content\": content },\n            success: function (data) {\n                console.log(data)\n            }\n        })\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using System.arraycopy() in ArrayList add() Method\nDESCRIPTION: This snippet shows how ArrayList's add(int index, E element) method uses System.arraycopy() to shift elements and make room for a new element at a specific index position.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n    /**\n     * 在此列表中的指定位置插入指定的元素。\n     *先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；\n     *再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。\n     */\n    public void add(int index, E element) {\n        rangeCheckForAdd(index);\n\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n        //arraycopy()方法实现数组自己复制自己\n        //elementData:源数组;index:源数组中的起始位置;elementData：目标数组；index + 1：目标数组中的起始位置； size - index：要复制的数组元素的数量；\n        System.arraycopy(elementData, index, elementData, index + 1, size - index);\n        elementData[index] = element;\n        size++;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue using Two Stacks\nDESCRIPTION: Implementation of a queue data structure using two stacks. Uses stack1 for push operations and stack2 for pop operations to maintain FIFO order.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.Stack;\n\npublic class Solution {\n    Stack<Integer> stack1 = new Stack<Integer>();\n    Stack<Integer> stack2 = new Stack<Integer>();\n\n    public void push(int node) {\n        stack1.push(node);\n    }\n\n    public int pop() {\n        if(stack1.empty()&&stack2.empty()){\n            throw new RuntimeException(\"Queue is empty!\");\n        }\n        if(stack2.empty()){\n            while(!stack1.empty()){\n                stack2.push(stack1.pop());\n            }\n        }\n          return stack2.pop();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ArrayList Capacity Management in Java\nDESCRIPTION: Implementation of ArrayList's capacity management including growth mechanisms, size calculations, and array resizing logic. Shows how ArrayList handles dynamic resizing operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate void grow(int minCapacity) {\n    int oldCapacity = elementData.length;\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n\nprivate static int hugeCapacity(int minCapacity) {\n    if (minCapacity < 0)\n        throw new OutOfMemoryError();\n    return (minCapacity > MAX_ARRAY_SIZE) ?\n            Integer.MAX_VALUE :\n            MAX_ARRAY_SIZE;\n}\n```\n\n----------------------------------------\n\nTITLE: HashMap Put Operation (Java)\nDESCRIPTION: This snippet shows part of the put operation in HashMap, demonstrating the logic for handling hash collisions and potential resizing.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic V put(K key, V value) {\n    return putVal(hash(key), key, value, false, true);\n}\n\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n    // ...\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n    // ...\n}\n\n    // ...\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Longest Common Prefix in String Array (Java)\nDESCRIPTION: Implements a method to find the longest common prefix among an array of strings. It first sorts the array, then compares characters of the first and last strings to find the common prefix. Includes input validation and handling of edge cases.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/string-algorithm-problems.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class Main {\n public static String replaceSpace(String[] strs) {\n  if (!checkStrs(strs)) {\n   return \"\";\n  }\n  int len = strs.length;\n  StringBuilder res = new StringBuilder();\n  Arrays.sort(strs);\n  int m = strs[0].length();\n  int n = strs[len - 1].length();\n  int num = Math.min(m, n);\n  for (int i = 0; i < num; i++) {\n   if (strs[0].charAt(i) == strs[len - 1].charAt(i)) {\n    res.append(strs[0].charAt(i));\n   } else\n    break;\n  }\n  return res.toString();\n }\n\n private static boolean checkStrs(String[] strs) {\n  boolean flag = false;\n  if (strs != null) {\n   for (int i = 0; i < strs.length; i++) {\n    if (strs[i] != null && strs[i].length() != 0) {\n     flag = true;\n    } else {\n     flag = false;\n     break;\n    }\n   }\n  }\n  return flag;\n }\n\n public static void main(String[] args) {\n  String[] strs = { \"customer\", \"car\", \"cat\" };\n  System.out.println(Main.replaceSpace(strs));\n }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Interceptor for TraceId Management\nDESCRIPTION: Implementation of a Spring HandlerInterceptorAdapter that manages requestId in the MDC context, either retrieving it from incoming HTTP headers or generating a new one when not present.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n@Slf4j\n@Component\npublic class LogInterceptor extends HandlerInterceptorAdapter {\n\n    @Override\n    public void afterCompletion(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3) {\n        MDC.remove(\"requestId\");\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3) {\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n\n        String requestId = request.getHeader(BaseConstant.REQUEST_ID_KEY);\n        if (StringUtils.isBlank(requestId)) {\n            requestId = UUID.randomUUID().toString().replace(\"-\", \"\");\n        }\n        MDC.put(\"requestId\", requestId);\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BigDecimal Operations in Java\nDESCRIPTION: Example of using BigDecimal for precise decimal calculations and comparisons.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/bigdecimal.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nBigDecimal a = new BigDecimal(\"1.0\");\nBigDecimal b = new BigDecimal(\"0.9\");\nBigDecimal c = new BigDecimal(\"0.8\");\n\nBigDecimal x = a.subtract(b);\nBigDecimal y = b.subtract(c);\n\nSystem.out.println(x.compareTo(y));// 0\n```\n\n----------------------------------------\n\nTITLE: Kryo Serialization Implementation in Java\nDESCRIPTION: A Java class implementing serialization and deserialization using the Kryo library. It includes methods for serializing objects to byte arrays and deserializing byte arrays back to objects, with thread-safe handling of Kryo instances.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@Slf4j\npublic class KryoSerializer implements Serializer {\n\n    private final ThreadLocal<Kryo> kryoThreadLocal = ThreadLocal.withInitial(() -> {\n        Kryo kryo = new Kryo();\n        kryo.register(RpcResponse.class);\n        kryo.register(RpcRequest.class);\n        return kryo;\n    });\n\n    @Override\n    public byte[] serialize(Object obj) {\n        try (ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n             Output output = new Output(byteArrayOutputStream)) {\n            Kryo kryo = kryoThreadLocal.get();\n            kryo.writeObject(output, obj);\n            kryoThreadLocal.remove();\n            return output.toBytes();\n        } catch (Exception e) {\n            throw new SerializeException(\"Serialization failed\");\n        }\n    }\n\n    @Override\n    public <T> T deserialize(byte[] bytes, Class<T> clazz) {\n        try (ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);\n             Input input = new Input(byteArrayInputStream)) {\n            Kryo kryo = kryoThreadLocal.get();\n            Object o = kryo.readObject(input, clazz);\n            kryoThreadLocal.remove();\n            return clazz.cast(o);\n        } catch (Exception e) {\n            throw new SerializeException(\"Deserialization failed\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collection copyOf() Method Usage in Java 10\nDESCRIPTION: Shows the implementation and usage of the copyOf() static method for creating immutable copies of collections.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java10.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nstatic <E> List<E> copyOf(Collection<? extends E> coll) {\n    return ImmutableCollections.listCopy(coll);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ArrayList Class Definition in Java\nDESCRIPTION: Shows the basic class definition of ArrayList including its inheritance from AbstractList and implementation of List, RandomAccess, Cloneable, and Serializable interfaces.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable{\n\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Fair ArrayBlockingQueue in Java\nDESCRIPTION: Demonstrates how to create an ArrayBlockingQueue with fairness enabled, which ensures that threads access the queue in the order they requested access.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-collections.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nprivate static ArrayBlockingQueue<Integer> blockingQueue = new ArrayBlockingQueue<Integer>(10,true);\n```\n\n----------------------------------------\n\nTITLE: SQL Primary Key Query Example\nDESCRIPTION: Shows a primary key lookup that can leverage an index for direct data retrieval. This query demonstrates how even in MyISAM engine, lookups by primary key can be efficient when only the primary key is needed in the result.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-index.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT id FROM table WHERE id=1;\n```\n\n----------------------------------------\n\nTITLE: Converting Collections to Arrays in Java\nDESCRIPTION: Explains the correct way to convert collections to arrays using the toArray(T[] array) method. Emphasizes the importance of passing an empty array of the correct type to ensure type safety and JVM optimization.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-precautions-for-use.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nString [] s= new String[]{\n    \"dog\", \"lazy\", \"a\", \"over\", \"jumps\", \"fox\", \"brown\", \"quick\", \"A\"\n};\nList<String> list = Arrays.asList(s);\nCollections.reverse(list);\n//没有指定类型的话会报错\ns=list.toArray(new String[0]);\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing a Thread Pool with ThreadPoolExecutor in Java\nDESCRIPTION: This class demonstrates how to create a custom thread pool using ThreadPoolExecutor, submit tasks to it, and manage its lifecycle. It sets core and max pool sizes, keep-alive time, and uses an ArrayBlockingQueue for the work queue.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-summary.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class ThreadPoolExecutorDemo {\n\n    private static final int CORE_POOL_SIZE = 5;\n    private static final int MAX_POOL_SIZE = 10;\n    private static final int QUEUE_CAPACITY = 100;\n    private static final Long KEEP_ALIVE_TIME = 1L;\n    public static void main(String[] args) {\n\n        //使用阿里巴巴推荐的创建线程池的方式\n        //通过ThreadPoolExecutor构造函数自定义参数创建\n        ThreadPoolExecutor executor = new ThreadPoolExecutor(\n                CORE_POOL_SIZE,\n                MAX_POOL_SIZE,\n                KEEP_ALIVE_TIME,\n                TimeUnit.SECONDS,\n                new ArrayBlockingQueue<>(QUEUE_CAPACITY),\n                new ThreadPoolExecutor.CallerRunsPolicy());\n\n        for (int i = 0; i < 10; i++) {\n            //创建WorkerThread对象（WorkerThread类实现了Runnable 接口）\n            Runnable worker = new MyRunnable(\"\" + i);\n            //执行Runnable\n            executor.execute(worker);\n        }\n        //终止线程池\n        executor.shutdown();\n        while (!executor.isTerminated()) {\n        }\n        System.out.println(\"Finished all threads\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ReentrantLock Interruption Example\nDESCRIPTION: Demonstrates ReentrantLock's interruptible locking functionality with a complete example\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class MyRentrantlock {\n    Thread t = new Thread() {\n        @Override\n        public void run() {\n            ReentrantLock r = new ReentrantLock();\n            r.lock();\n            System.out.println(\"lock() : lock count :\" + r.getHoldCount());\n            interrupt();\n            System.out.println(\"Current thread is intrupted\");\n            r.tryLock();\n            System.out.println(\"tryLock() on intrupted thread lock count :\" + r.getHoldCount());\n            try {\n                System.out.println(\"Current Thread isInterrupted:\" + Thread.currentThread().isInterrupted());\n                r.lockInterruptibly();\n                System.out.println(\"lockInterruptibly() --NOt executable statement\" + r.getHoldCount());\n            } catch (InterruptedException e) {\n                r.lock();\n                System.out.println(\"Error\");\n            } finally {\n                r.unlock();\n            }\n            System.out.println(\"lockInterruptibly() not able to Acqurie lock: lock count :\" + r.getHoldCount());\n            r.unlock();\n            System.out.println(\"lock count :\" + r.getHoldCount());\n            r.unlock();\n            System.out.println(\"lock count :\" + r.getHoldCount());\n        }\n    };\n    public static void main(String str[]) {\n        MyRentrantlock m = new MyRentrantlock();\n        m.t.start();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: LinkedList Element Insertion Operations\nDESCRIPTION: Implementation of add methods for inserting elements at the end or at a specific position in the list.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedlist-source-code.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic boolean add(E e) {\n    linkLast(e);\n    return true;\n}\n\npublic void add(int index, E element) {\n    checkPositionIndex(index);\n    if (index == size)\n        linkLast(element);\n    else\n        linkBefore(element, node(index));\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Kth Node from End of Linked List in Java\nDESCRIPTION: Implementation to find the kth node from the end of a linked list. Uses two pointers with one pointer starting k nodes ahead to find the target node in a single pass.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/linkedlist-algorithm-problems.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class Solution {\n  public ListNode FindKthToTail(ListNode head, int k) {\n    // 如果链表为空或者k小于等于0\n    if (head == null || k <= 0) {\n      return null;\n    }\n    // 声明两个指向头结点的节点\n    ListNode node1 = head, node2 = head;\n    // 记录节点的个数\n    int count = 0;\n    // 记录k值，后面要使用\n    int index = k;\n    // p指针先跑，并且记录节点数，当node1节点跑了k-1个节点后，node2节点开始跑，\n    // 当node1节点跑到最后时，node2节点所指的节点就是倒数第k个节点\n    while (node1 != null) {\n      node1 = node1.next;\n      count++;\n      if (k < 1) {\n        node2 = node2.next;\n      }\n      k--;\n    }\n    // 如果节点个数小于所求的倒数第k个节点，则返回空\n    if (count < index)\n      return null;\n    return node2;\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CAS Operations with Unsafe Class\nDESCRIPTION: Core CAS operation methods provided by sun.misc.Unsafe class for atomic operations on Object, int, and long types\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/cas.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nboolean compareAndSwapObject(Object o, long offset, Object expected, Object x);\n\nboolean compareAndSwapInt(Object o, long offset, int expected, int x);\n\nboolean compareAndSwapLong(Object o, long offset, long expected, long x);\n```\n\n----------------------------------------\n\nTITLE: Implementing Serializable Interface in Java\nDESCRIPTION: An example of a Java class implementing the Serializable interface for JDK's built-in serialization. The class represents an RPC request with various fields and includes a serialVersionUID for version control.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Builder\n@ToString\npublic class RpcRequest implements Serializable {\n    private static final long serialVersionUID = 1905122041950251207L;\n    private String requestId;\n    private String interfaceName;\n    private String methodName;\n    private Object[] parameters;\n    private Class<?>[] paramTypes;\n    private RpcMessageTypeEnum rpcMessageTypeEnum;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pessimistic Locking with synchronized and ReentrantLock in Java\nDESCRIPTION: Demonstrates how to use synchronized keyword and ReentrantLock class to implement pessimistic locking in Java. These methods ensure exclusive access to shared resources.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/optimistic-lock-and-pessimistic-lock.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic void performSynchronisedTask() {\n    synchronized (this) {\n        // 需要同步的操作\n    }\n}\n\nprivate Lock lock = new ReentrantLock();\nlock.lock();\ntry {\n   // 需要同步的操作\n} finally {\n    lock.unlock();\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File Content with FileInputStream in Java\nDESCRIPTION: Demonstrates how to read file content using FileInputStream, including skipping bytes and reading individual characters.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/io-basis.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ntry (InputStream fis = new FileInputStream(\"input.txt\")) {\n    System.out.println(\"Number of remaining bytes:\"\n            + fis.available());\n    int content;\n    long skip = fis.skip(2);\n    System.out.println(\"The actual number of bytes skipped:\" + skip);\n    System.out.print(\"The content read from file:\");\n    while ((content = fis.read()) != -1) {\n        System.out.print((char) content);\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: HashMap putMapEntries Method Implementation\nDESCRIPTION: Method for bulk insertion of entries from another Map into HashMap with proper capacity handling.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/hashmap-source-code.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal void putMapEntries(Map<? extends K, ? extends V> m, boolean evict) {\n    int s = m.size();\n    if (s > 0) {\n        if (table == null) {\n            float ft = ((float)s / loadFactor) + 1.0F;\n            int t = ((ft < (float)MAXIMUM_CAPACITY) ?\n                    (int)ft : MAXIMUM_CAPACITY);\n            if (t > threshold)\n                threshold = tableSizeFor(t);\n        }\n        else if (s > threshold)\n            resize();\n        for (Map.Entry<? extends K, ? extends V> e : m.entrySet()) {\n            K key = e.getKey();\n            V value = e.getValue();\n            putVal(hash(key), key, value, false, evict);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Zero Copy Implementation with MappedByteBuffer\nDESCRIPTION: Demonstrates how to use MappedByteBuffer to implement zero-copy file loading into memory using memory mapping technique.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/nio-basis.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate void loadFileIntoMemory(File xmlFile) throws IOException {\n  FileInputStream fis = new FileInputStream(xmlFile);\n  // 创建 FileChannel 对象\n  FileChannel fc = fis.getChannel();\n  // FileChannel.map() 将文件映射到直接内存并返回 MappedByteBuffer 对象\n  MappedByteBuffer mmb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());\n  xmlFileBuffer = new byte[(int)fc.size()];\n  mmb.get(xmlFileBuffer);\n  fis.close();\n}\n```\n\n----------------------------------------\n\nTITLE: 使用Redisson实现分布式锁的基本操作\nDESCRIPTION: 展示了如何使用Redisson库获取和释放分布式锁。Redisson的锁具有自动续期机制，防止锁在操作未完成时过期。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-lock-implementations.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// 1.获取指定的分布式锁对象\nRLock lock = redisson.getLock(\"lock\");\n// 2.拿锁且不设置锁超时时间，具备 Watch Dog 自动续期机制\nlock.lock();\n// 3.执行业务\n...\n// 4.释放锁\nlock.unlock();\n```\n\n----------------------------------------\n\nTITLE: Implementing HashMap resize Method - Java\nDESCRIPTION: Method to handle HashMap resizing operations. Manages both initial table creation and capacity expansion, including rehashing of existing entries.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/hashmap-source-code.md#2025-04-20_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nfinal Node<K,V>[] resize() {\n    Node<K,V>[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    if (oldCap > 0) {\n        if (oldCap >= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY && oldCap >= DEFAULT_INITIAL_CAPACITY)\n            newThr = oldThr << 1;\n    }\n    else if (oldThr > 0)\n        newCap = oldThr;\n    else {\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n    if (newThr == 0) {\n        float ft = (float)newCap * loadFactor;\n        newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n    @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n    table = newTab;\n    if (oldTab != null) {\n        for (int j = 0; j < oldCap; ++j) {\n            Node<K,V> e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                if (e.next == null)\n                    newTab[e.hash & (newCap - 1)] = e;\n                else if (e instanceof TreeNode)\n                    ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                else {\n                    Node<K,V> loHead = null, loTail = null;\n                    Node<K,V> hiHead = null, hiTail = null;\n                    Node<K,V> next;\n                    do {\n                        next = e.next;\n                        if ((e.hash & oldCap) == 0) {\n                            if (loTail == null)\n                                loHead = e;\n                            else\n                                loTail.next = e;\n                            loTail = e;\n                        }\n                        else {\n                            if (hiTail == null)\n                                hiHead = e;\n                            else\n                                hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n```\n\n----------------------------------------\n\nTITLE: Java Stream-based Array Conversion\nDESCRIPTION: Demonstrates using Java 8 Stream API to convert arrays to ArrayList, including support for primitive types.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-precautions-for-use.md#2025-04-20_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nInteger [] myArray = { 1, 2, 3 };\nList myList = Arrays.stream(myArray).collect(Collectors.toList());\n//基本类型也可以实现转换（依赖boxed的装箱操作）\nint [] myArray2 = { 1, 2, 3 };\nList myList = Arrays.stream(myArray2).boxed().collect(Collectors.toList());\n```\n\n----------------------------------------\n\nTITLE: Put Operation in Java 8 ConcurrentHashMap\nDESCRIPTION: This method handles the put operation in Java 8 ConcurrentHashMap. It uses a combination of CAS and synchronized blocks to ensure thread-safety during insertion or update of key-value pairs.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/concurrent-hash-map-source-code.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n    if (key == null || value == null) throw new NullPointerException();\n    int hash = spread(key.hashCode());\n    int binCount = 0;\n    for (Node<K,V>[] tab = table;;) {\n        Node<K,V> f; int n, i, fh;\n        if (tab == null || (n = tab.length) == 0)\n            tab = initTable();\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n            if (casTabAt(tab, i, null,new Node<K,V>(hash, key, value, null)))\n                break;\n        }\n        else if ((fh = f.hash) == MOVED)\n            tab = helpTransfer(tab, f);\n        else {\n            V oldVal = null;\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n                    if (fh >= 0) {\n                        binCount = 1;\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n                            if ((e = e.next) == null) {\n                                pred.next = new Node<K,V>(hash, key,\n                                                          value, null);\n                                break;\n                            }\n                        }\n                    }\n                    else if (f instanceof TreeBin) {\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            if (binCount != 0) {\n                if (binCount >= TREEIFY_THRESHOLD)\n                    treeifyBin(tab, i);\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    addCount(1L, binCount);\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: ConcurrentHashMap Segment Put Implementation\nDESCRIPTION: Internal put implementation within a segment that handles locking, entry creation/update, and rehashing.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/concurrent-hash-map-source-code.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal V put(K key, int hash, V value, boolean onlyIfAbsent) {\n    HashEntry<K,V> node = tryLock() ? null : scanAndLockForPut(key, hash, value);\n    V oldValue;\n    try {\n        HashEntry<K,V>[] tab = table;\n        int index = (tab.length - 1) & hash;\n        HashEntry<K,V> first = entryAt(tab, index);\n        for (HashEntry<K,V> e = first;;) {\n            if (e != null) {\n                K k;\n                if ((k = e.key) == key ||\n                    (e.hash == hash && key.equals(k))) {\n                    oldValue = e.value;\n                    if (!onlyIfAbsent) {\n                        e.value = value;\n                        ++modCount;\n                    }\n                    break;\n                }\n                e = e.next;\n            }\n            else {\n                if (node != null)\n                    node.setNext(first);\n                else\n                    node = new HashEntry<K,V>(hash, key, value, first);\n                int c = count + 1;\n                if (c > threshold && tab.length < MAXIMUM_CAPACITY)\n                    rehash(node);\n                else\n                    setEntryAt(tab, index, node);\n                ++modCount;\n                count = c;\n                oldValue = null;\n                break;\n            }\n        }\n    } finally {\n        unlock();\n    }\n    return oldValue;\n}\n```\n\n----------------------------------------\n\nTITLE: ThreadLocalMap.set() Method Implementation in Java\nDESCRIPTION: The method handles setting values in ThreadLocal's internal map, dealing with key collisions and stale entries. It calculates the hash index, searches for available slots, and handles replacement, stale entry clearing, and potential rehashing operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate void set(ThreadLocal<?> key, Object value) {\n    Entry[] tab = table;\n    int len = tab.length;\n    int i = key.threadLocalHashCode & (len-1);\n\n    for (Entry e = tab[i];\n         e != null;\n         e = tab[i = nextIndex(i, len)]) {\n        ThreadLocal<?> k = e.get();\n\n        if (k == key) {\n            e.value = value;\n            return;\n        }\n\n        if (k == null) {\n            replaceStaleEntry(key, value, i);\n            return;\n        }\n    }\n\n    tab[i] = new Entry(key, value);\n    int sz = ++size;\n    if (!cleanSomeSlots(i, sz) && sz >= threshold)\n        rehash();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThreadLocal's set() Method in Java\nDESCRIPTION: Source code of ThreadLocal's set() method, showing how it interacts with ThreadLocalMap.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic void set(T value) {\n    Thread t = Thread.currentThread();\n    ThreadLocalMap map = getMap(t);\n    if (map != null)\n        map.set(this, value);\n    else\n        createMap(t, value);\n}\n\nvoid createMap(Thread t, T firstValue) {\n    t.threadLocals = new ThreadLocalMap(this, firstValue);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Thread Using Executors.newVirtualThreadPerTaskExecutor()\nDESCRIPTION: Shows how to create virtual threads using the ExecutorService with newVirtualThreadPerTaskExecutor() method.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/virtual-thread.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class VirtualThreadTest {\n  public static void main(String[] args) {\n    CustomThread customThread = new CustomThread();\n    ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();\n    executor.submit(customThread);\n  }\n}\nstatic class CustomThread implements Runnable {\n  @Override\n  public void run() {\n    System.out.println(\"CustomThread run\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ArrayList Class Structure in Java\nDESCRIPTION: Core implementation of ArrayList class showing fundamental data structures, constants, and constructors. Includes default capacity, empty array instances, and various initialization options.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable {\n    private static final long serialVersionUID = 8683452581122892189L;\n    private static final int DEFAULT_CAPACITY = 10;\n    private static final Object[] EMPTY_ELEMENTDATA = {};\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n    transient Object[] elementData;\n    private int size;\n\n    public ArrayList(int initialCapacity) {\n        if (initialCapacity > 0) {\n            this.elementData = new Object[initialCapacity];\n        } else if (initialCapacity == 0) {\n            this.elementData = EMPTY_ELEMENTDATA;\n        } else {\n            throw new IllegalArgumentException(\"Illegal Capacity: \" +\n                    initialCapacity);\n        }\n    }\n\n    public ArrayList() {\n        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    public ArrayList(Collection<? extends E> c) {\n        elementData = c.toArray();\n        if ((size = elementData.length) != 0) {\n            if (elementData.getClass() != Object[].class)\n                elementData = Arrays.copyOf(elementData, size, Object[].class);\n        } else {\n            this.elementData = EMPTY_ELEMENTDATA;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Validating Palindrome String (Java)\nDESCRIPTION: Implements a method to check if a given string is a valid palindrome. It ignores non-alphanumeric characters and is case-insensitive. The method uses two pointers moving from both ends towards the center to compare characters.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/string-algorithm-problems.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nclass Solution {\n  public  boolean isPalindrome(String s) {\n    if (s.length() == 0)\n      return true;\n    int l = 0, r = s.length() - 1;\n    while (l < r) {\n      if (!Character.isLetterOrDigit(s.charAt(l))) {\n        l++;\n      } else if (!Character.isLetterOrDigit(s.charAt(r))) {\n        r--;\n      } else {\n        if (Character.toLowerCase(s.charAt(l)) != Character.toLowerCase(s.charAt(r)))\n          return false;\n        l++;\n        r--;\n      }\n    }\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LRU Cache Implementation Using LinkedHashMap\nDESCRIPTION: Shows how to implement a simple LRU (Least Recently Used) cache by extending LinkedHashMap and overriding removeEldestEntry method.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedhashmap-source-code.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class LRUCache<K, V> extends LinkedHashMap<K, V> {\n    private final int capacity;\n\n    public LRUCache(int capacity) {\n        super(capacity, 0.75f, true);\n        this.capacity = capacity;\n    }\n\n    /**\n     * 判断size超过容量时返回true，告知LinkedHashMap移除最老的缓存项(即链表的第一个元素)\n     */\n    @Override\n    protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n        return size() > capacity;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Radix Sort in Java\nDESCRIPTION: Java implementation of the Radix Sort algorithm, including the main sorting function that uses counting sort as a subroutine.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/10-classical-sorting-algorithms.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic static int[] radixSort(int[] arr) {\n    if (arr.length < 2) {\n        return arr;\n    }\n    int N = 1;\n    int maxValue = arr[0];\n    for (int element : arr) {\n        if (element > maxValue) {\n            maxValue = element;\n        }\n    }\n    while (maxValue / 10 != 0) {\n        maxValue = maxValue / 10;\n        N += 1;\n    }\n    for (int i = 0; i < N; i++) {\n        List<List<Integer>> radix = new ArrayList<>();\n        for (int k = 0; k < 10; k++) {\n            radix.add(new ArrayList<Integer>());\n        }\n        for (int element : arr) {\n            int idx = (element / (int) Math.pow(10, i)) % 10;\n            radix.get(idx).add(element);\n        }\n        int idx = 0;\n        for (List<Integer> l : radix) {\n            for (int n : l) {\n                arr[idx++] = n;\n            }\n        }\n    }\n    return arr;\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Execution of Multiple CompletableFuture Tasks\nDESCRIPTION: Shows how to run multiple CompletableFuture tasks in parallel using allOf() and anyOf() methods.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/completablefuture-intro.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nCompletableFuture<Void> task1 =\n  CompletableFuture.supplyAsync(()->{\n    //自定义业务操作\n  });\n......\nCompletableFuture<Void> task6 =\n  CompletableFuture.supplyAsync(()->{\n    //自定义业务操作\n  });\n......\n CompletableFuture<Void> headerFuture=CompletableFuture.allOf(task1,.....,task6);\n\n  try {\n    headerFuture.join();\n  } catch (Exception ex) {\n    ......\n  }\nSystem.out.println(\"all done. \");\n```\n\n----------------------------------------\n\nTITLE: ConcurrentHashMap Put Method Implementation\nDESCRIPTION: Thread-safe put operation that handles null checks, segment selection, and initializes segments if needed.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/concurrent-hash-map-source-code.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic V put(K key, V value) {\n    Segment<K,V> s;\n    if (value == null)\n        throw new NullPointerException();\n    int hash = hash(key);\n    int j = (hash >>> segmentShift) & segmentMask;\n    if ((s = (Segment<K,V>)UNSAFE.getObject\n         (segments, (j << SSHIFT) + SBASE)) == null)\n        s = ensureSegment(j);\n    return s.put(key, hash, value, false);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Compiler Plugin for Java Version\nDESCRIPTION: Example of configuring the Maven Compiler Plugin to use a specific Java version (Java 8 in this case) for compiling a project. This overrides Maven's default Java 5 compiler setting.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-best-practices.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-compiler-plugin</artifactId>\n      <version>3.8.1</version>\n      <configuration>\n        <source>1.8</source>\n        <target>1.8</target>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Using CompletableFuture Factory Methods\nDESCRIPTION: Demonstration of using runAsync() and supplyAsync() static factory methods to create CompletableFuture instances.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/completablefuture-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nCompletableFuture<Void> future = CompletableFuture.runAsync(() -> System.out.println(\"hello!\"));\nfuture.get();\nCompletableFuture<String> future2 = CompletableFuture.supplyAsync(() -> \"hello!\");\nassertEquals(\"hello!\", future2.get());\n```\n\n----------------------------------------\n\nTITLE: Converting Collections to Maps in Java\nDESCRIPTION: Shows how to convert collections to maps using the Collectors.toMap() method. Warns about potential NullPointerException when values are null and explains the underlying mechanism using the merge() method.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-precautions-for-use.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nclass Person {\n    private String name;\n    private String phoneNumber;\n     // getters and setters\n}\n\nList<Person> bookList = new ArrayList<>();\nbookList.add(new Person(\"jack\",\"18163138123\"));\nbookList.add(new Person(\"martin\",null));\n// 空指针异常\nbookList.stream().collect(Collectors.toMap(Person::getName, Person::getPhoneNumber));\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction Message Method in Java\nDESCRIPTION: This method builds and sends a transaction message using RocketMQ. It constructs the message body, sets the destination, and sends the message in a transaction, returning the result.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/rocketmq-questions.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic TransactionSendResult sendTransactionMessage(String msgBody, String tag, Function<String, Boolean> function) {\n    // 构建消息体\n    Message<String> message = buildMessage(msgBody);\n\n    // 构建消息投递信息\n    String destination = buildDestination(tag);\n\n    TransactionSendResult result = rocketMQTemplate.sendMessageInTransaction(destination, message, function);\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Red-Black Tree Conversion in HashMap (Java)\nDESCRIPTION: This snippet shows the logic in HashMap's putVal method for converting a linked list to a red-black tree when the list length exceeds the threshold (8).\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nfor (int binCount = 0; ; ++binCount) {\n    if ((e = p.next) == null) {\n        p.next = newNode(hash, key, value, null);\n        if (binCount >= TREEIFY_THRESHOLD - 1)\n            treeifyBin(tab, hash);\n        break;\n    }\n    if (e.hash == hash &&\n        ((k = e.key) == key || (key != null && key.equals(k))))\n        break;\n    p = e;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JaCoCo Maven Plugin for Code Coverage\nDESCRIPTION: Example configuration of the JaCoCo Maven plugin for measuring code coverage during tests. This setup prepares the JaCoCo agent and generates a code coverage report after tests are run.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-best-practices.md#2025-04-20_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.jacoco</groupId>\n      <artifactId>jacoco-maven-plugin</artifactId>\n      <version>0.8.8</version>\n      <executions>\n        <execution>\n          <goals>\n            <goal>prepare-agent</goal>\n          </goals>\n        </execution>\n        <execution>\n          <id>generate-code-coverage-report</id>\n          <phase>test</phase>\n          <goals>\n            <goal>report</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Implementing Singleton Pattern in Spring\nDESCRIPTION: Core implementation of Spring's singleton pattern using ConcurrentHashMap as a thread-safe singleton registry. This code shows how Spring manages singleton beans and ensures only one instance is created per bean name.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/spring-design-patterns-summary.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// 通过 ConcurrentHashMap（线程安全） 实现单例注册表\nprivate final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(64);\n\npublic Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {\n        Assert.notNull(beanName, \"'beanName' must not be null\");\n        synchronized (this.singletonObjects) {\n            // 检查缓存中是否存在实例\n            Object singletonObject = this.singletonObjects.get(beanName);\n            if (singletonObject == null) {\n                //...省略了很多代码\n                try {\n                    singletonObject = singletonFactory.getObject();\n                }\n                //...省略了很多代码\n                // 如果实例对象在不存在，我们注册到单例注册表中。\n                addSingleton(beanName, singletonObject);\n            }\n            return (singletonObject != NULL_OBJECT ? singletonObject : null);\n        }\n    }\n    //将对象添加到单例注册表\n    protected void addSingleton(String beanName, Object singletonObject) {\n            synchronized (this.singletonObjects) {\n                this.singletonObjects.put(beanName, (singletonObject != null ? singletonObject : NULL_OBJECT));\n\n            }\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Active Users with Redis BITOP and BITCOUNT\nDESCRIPTION: This code shows how to use the BITOP command to perform logical AND/OR operations on bitmaps representing user activity data from different days, followed by BITCOUNT to calculate the number of active users.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> BITOP and desk1 20210308 20210309\n(integer) 1\n> BITCOUNT desk1\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Vector API Computation Example\nDESCRIPTION: Demonstrates the use of Vector API for optimized array computations, comparing scalar and vector-based implementations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java22-23.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nstatic final VectorSpecies<Float> SPECIES = FloatVector.SPECIES_PREFERRED;\n\nvoid vectorComputation(float[] a, float[] b, float[] c) {\n    int i = 0;\n    int upperBound = SPECIES.loopBound(a.length);\n    for (; i < upperBound; i += SPECIES.length()) {\n        var va = FloatVector.fromArray(SPECIES, a, i);\n        var vb = FloatVector.fromArray(SPECIES, b, i);\n        var vc = va.mul(va)\n                   .add(vb.mul(vb))\n                   .neg();\n        vc.intoArray(c, i);\n    }\n    for (; i < a.length; i++) {\n        c[i] = (a[i] * a[i] + b[i] * b[i]) * -1.0f;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Thread Using Thread.startVirtualThread()\nDESCRIPTION: Demonstrates how to create and start a virtual thread using Thread.startVirtualThread() method with a custom Runnable implementation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/virtual-thread.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class VirtualThreadTest {\n  public static void main(String[] args) {\n    CustomThread customThread = new CustomThread();\n    Thread.startVirtualThread(customThread);\n  }\n}\n\nstatic class CustomThread implements Runnable {\n  @Override\n  public void run() {\n    System.out.println(\"CustomThread run\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Redis SETBIT and BITOP Commands for User Activity Tracking\nDESCRIPTION: This code demonstrates how to use Redis Bitmap operations to track and analyze user activity across multiple days. The example shows initializing user activity data with SETBIT and performing logical operations with BITOP to count active users.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> SETBIT 20210308 1 1\n(integer) 0\n> SETBIT 20210308 2 1\n(integer) 0\n> SETBIT 20210309 1 1\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: SQL SELECT查询语句\nDESCRIPTION: 展示了不同形式的SELECT查询语句\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT prod_name\nFROM products;\n\nSELECT prod_id, prod_name, prod_price\nFROM products;\n\nSELECT *\nFROM products;\n\nSELECT DISTINCT\nvend_id FROM products;\n\n-- 返回前 5 行\nSELECT * FROM mytable LIMIT 5;\nSELECT * FROM mytable LIMIT 0, 5;\n-- 返回第 3 ~ 5 行\nSELECT * FROM mytable LIMIT 2, 3;\n```\n\n----------------------------------------\n\nTITLE: Solving Frog Jump Problem with Dynamic Programming in Java\nDESCRIPTION: This code solves the problem of counting ways a frog can jump to the nth step when it can jump either 1 or 2 steps at a time. The solution uses an iterative approach similar to the Fibonacci sequence calculation, with O(n) time complexity.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nint jumpFloor(int number) {\n    if (number <= 0) {\n        return 0;\n    }\n    if (number == 1) {\n        return 1;\n    }\n    if (number == 2) {\n        return 2;\n    }\n    int first = 1, second = 2, third = 0;\n    for (int i = 3; i <= number; i++) {\n        third = first + second;\n        first = second;\n        second = third;\n    }\n    return third;\n}\n```\n\n----------------------------------------\n\nTITLE: BigDecimal Arithmetic Operations in Java\nDESCRIPTION: Demonstrates addition, subtraction, multiplication, and division operations using BigDecimal with rounding modes.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/bigdecimal.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nBigDecimal a = new BigDecimal(\"1.0\");\nBigDecimal b = new BigDecimal(\"0.9\");\nSystem.out.println(a.add(b));// 1.9\nSystem.out.println(a.subtract(b));// 0.1\nSystem.out.println(a.multiply(b));// 0.90\nSystem.out.println(a.divide(b, 2, RoundingMode.HALF_UP));// 1.11\n```\n\n----------------------------------------\n\nTITLE: Implementing hugeCapacity Method for ArrayList Memory Management in Java\nDESCRIPTION: This method handles large capacity increases in ArrayList when the required capacity exceeds standard limits. It determines whether to use Integer.MAX_VALUE or MAX_ARRAY_SIZE based on the requested minimum capacity.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate static int hugeCapacity(int minCapacity) {\n    if (minCapacity < 0) // overflow\n        throw new OutOfMemoryError();\n    // 对minCapacity和MAX_ARRAY_SIZE进行比较\n    // 若minCapacity大，将Integer.MAX_VALUE作为新数组的大小\n    // 若MAX_ARRAY_SIZE大，将MAX_ARRAY_SIZE作为新数组的大小\n    // MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n    return (minCapacity > MAX_ARRAY_SIZE) ?\n        Integer.MAX_VALUE :\n        MAX_ARRAY_SIZE;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Class in Java\nDESCRIPTION: This code snippet shows how to define a generic class in Java, which can work with any type specified at instantiation time.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-03.md#2025-04-20_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\npublic class Generic<T>{\n\n    private T key;\n\n    public Generic(T key) {\n        this.key = key;\n    }\n\n    public T getKey(){\n        return key;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CAS Operations in Unsafe Class\nDESCRIPTION: Core CAS (Compare-And-Swap) operations implemented in Unsafe class for atomic updates of object fields, int and long values.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nboolean compareAndSwapObject(Object o, long offset, Object expected, Object x);\n\nboolean compareAndSwapInt(Object o, long offset, int expected, int x);\n\nboolean compareAndSwapLong(Object o, long offset, long expected, long x);\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching in Switch Expressions\nDESCRIPTION: Example of using pattern matching in switch expressions with different types.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java21.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nstatic String formatterPatternSwitch(Object obj) {\n    return switch (obj) {\n        case Integer i -> String.format(\"int %d\", i);\n        case Long l    -> String.format(\"long %d\", l);\n        case Double d  -> String.format(\"double %f\", d);\n        case String s  -> String.format(\"String %s\", s);\n        default        -> obj.toString();\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File Content Using Scanner in Java with Try-Catch-Finally\nDESCRIPTION: This code snippet demonstrates how to read a text file using Scanner in Java, with proper resource management using try-catch-finally blocks.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-03.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nScanner scanner = null;\ntry {\n    scanner = new Scanner(new File(\"D://read.txt\"));\n    while (scanner.hasNext()) {\n        System.out.println(scanner.nextLine());\n    }\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} finally {\n    if (scanner != null) {\n        scanner.close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialization in Java 8 ConcurrentHashMap\nDESCRIPTION: This method initializes the table in Java 8 ConcurrentHashMap using a spin-lock and CAS operations. It handles concurrent initialization attempts by multiple threads.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/concurrent-hash-map-source-code.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate final Node<K,V>[] initTable() {\n    Node<K,V>[] tab; int sc;\n    while ((tab = table) == null || tab.length == 0) {\n        //　如果 sizeCtl < 0 ,说明另外的线程执行CAS 成功，正在进行初始化。\n        if ((sc = sizeCtl) < 0)\n            // 让出 CPU 使用权\n            Thread.yield(); // lost initialization race; just spin\n        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n            try {\n                if ((tab = table) == null || tab.length == 0) {\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                    table = tab = nt;\n                    sc = n - (n >>> 2);\n                }\n            } finally {\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Thread Using ThreadFactory\nDESCRIPTION: Demonstrates virtual thread creation using a ThreadFactory obtained from Thread.ofVirtual().factory().\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/virtual-thread.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class VirtualThreadTest {\n  public static void main(String[] args) {\n    CustomThread customThread = new CustomThread();\n    ThreadFactory factory = Thread.ofVirtual().factory();\n    Thread thread = factory.newThread(customThread);\n    thread.start();\n  }\n}\n\nstatic class CustomThread implements Runnable {\n  @Override\n  public void run() {\n    System.out.println(\"CustomThread run\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Java Reference Types Examples\nDESCRIPTION: Code examples showing different types of references in Java including strong, soft, weak and phantom references.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-garbage-collection.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nString strongReference = new String(\"abc\");\n```\n\nLANGUAGE: java\nCODE:\n```\nString str = new String(\"abc\");\nSoftReference<String> softReference = new SoftReference<String>(str);\n```\n\nLANGUAGE: java\nCODE:\n```\nString str = new String(\"abc\");\nWeakReference<String> weakReference = new WeakReference<>(str);\nstr = null;\n```\n\nLANGUAGE: java\nCODE:\n```\nString str = new String(\"abc\");\nReferenceQueue queue = new ReferenceQueue();\nPhantomReference pr = new PhantomReference(str, queue);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Class Objects in Java\nDESCRIPTION: Different methods to obtain Class objects in Java including using class literal, Class.forName(), instance.getClass(), and ClassLoader.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/reflection.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nClass alunbarClass = TargetObject.class;\n```\n\nLANGUAGE: java\nCODE:\n```\nClass alunbarClass1 = Class.forName(\"cn.javaguide.TargetObject\");\n```\n\nLANGUAGE: java\nCODE:\n```\nTargetObject o = new TargetObject();\nClass alunbarClass2 = o.getClass();\n```\n\nLANGUAGE: java\nCODE:\n```\nClassLoader.getSystemClassLoader().loadClass(\"cn.javaguide.TargetObject\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Quick Sort in Java\nDESCRIPTION: Java implementation of the Quick Sort algorithm, including the partition function and the recursive sorting method.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/10-classical-sorting-algorithms.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic static int partition(int[] array, int low, int high) {\n    int pivot = array[high];\n    int pointer = low;\n    for (int i = low; i < high; i++) {\n        if (array[i] <= pivot) {\n            int temp = array[i];\n            array[i] = array[pointer];\n            array[pointer] = temp;\n            pointer++;\n        }\n        System.out.println(Arrays.toString(array));\n    }\n    int temp = array[pointer];\n    array[pointer] = array[high];\n    array[high] = temp;\n    return pointer;\n}\npublic static void quickSort(int[] array, int low, int high) {\n    if (low < high) {\n        int position = partition(array, low, high);\n        quickSort(array, low, position - 1);\n        quickSort(array, position + 1, high);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Timed Offer Operation in ArrayBlockingQueue\nDESCRIPTION: Implementation of offer operation that waits up to a specified timeout for space to become available.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic boolean offer(E e, long timeout, TimeUnit unit)\n        throws InterruptedException {\n\n        checkNotNull(e);\n        long nanos = unit.toNanos(timeout);\n        final ReentrantLock lock = this.lock;\n        lock.lockInterruptibly();\n        try {\n            while (count == items.length) {\n                if (nanos <= 0)\n                    return false;\n                nanos = notFull.awaitNanos(nanos);\n            }\n            enqueue(e);\n            return true;\n        } finally {\n            lock.unlock();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing AES Encryption and Decryption in Java\nDESCRIPTION: A comprehensive Java implementation of AES encryption and decryption using GCM mode and NoPadding. This example includes initialization, encryption, and decryption methods that handle string data and uses Base64 encoding for the encrypted output.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/security/encryption-algorithms.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate static final String AES_ALGORITHM = \"AES\";\n// AES密钥\nprivate static final String AES_SECRET_KEY = \"4128D9CDAC7E2F82951CBAF7FDFE675B\";\n// AES加密模式为GCM，填充方式为NoPadding\n// AES-GCM 是流加密（Stream cipher）算法，所以对应的填充模式为 NoPadding，即无需填充。\nprivate static final String AES_TRANSFORMATION = \"AES/GCM/NoPadding\";\n// 加密器\nprivate static Cipher encryptionCipher;\n// 解密器\nprivate static Cipher decryptionCipher;\n\n/**\n * 完成一些初始化工作\n */\npublic static void init() throws Exception {\n    // 将AES密钥转换为SecretKeySpec对象\n    SecretKeySpec secretKeySpec = new SecretKeySpec(AES_SECRET_KEY.getBytes(), AES_ALGORITHM);\n    // 使用指定的AES加密模式和填充方式获取对应的加密器并初始化\n    encryptionCipher = Cipher.getInstance(AES_TRANSFORMATION);\n    encryptionCipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);\n    // 使用指定的AES加密模式和填充方式获取对应的解密器并初始化\n    decryptionCipher = Cipher.getInstance(AES_TRANSFORMATION);\n    decryptionCipher.init(Cipher.DECRYPT_MODE, secretKeySpec, new GCMParameterSpec(128, encryptionCipher.getIV()));\n}\n\n/**\n * 加密\n */\npublic static String encrypt(String data) throws Exception {\n    byte[] dataInBytes = data.getBytes();\n    // 加密数据\n    byte[] encryptedBytes = encryptionCipher.doFinal(dataInBytes);\n    return Base64.getEncoder().encodeToString(encryptedBytes);\n}\n\n/**\n * 解密\n */\npublic static String decrypt(String encryptedData) throws Exception {\n    byte[] dataInBytes = Base64.getDecoder().decode(encryptedData);\n    // 解密数据\n    byte[] decryptedBytes = decryptionCipher.doFinal(dataInBytes);\n    return new String(decryptedBytes, StandardCharsets.UTF_8);\n}\n\npublic static void main(String[] args) throws Exception {\n    String originalString = \"Java学习 + 面试指南：javaguide.cn\";\n    init();\n    String encryptedData = encrypt(originalString);\n    String decryptedData = decrypt(encryptedData);\n    System.out.println(\"Original String: \" + originalString);\n    System.out.println(\"AES Encrypted Data : \" + encryptedData);\n    System.out.println(\"AES Decrypted Data : \" + decryptedData);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicates from Collections in Java\nDESCRIPTION: Demonstrates two methods for removing duplicates from collections: using Set and using List. Explains the time complexity differences between HashSet's contains() method and ArrayList's contains() method.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-precautions-for-use.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// Set 去重代码示例\npublic static <T> Set<T> removeDuplicateBySet(List<T> data) {\n\n    if (CollectionUtils.isEmpty(data)) {\n        return new HashSet<>();\n    }\n    return new HashSet<>(data);\n}\n\n// List 去重代码示例\npublic static <T> List<T> removeDuplicateByList(List<T> data) {\n\n    if (CollectionUtils.isEmpty(data)) {\n        return new ArrayList<>();\n\n    }\n    List<T> result = new ArrayList<>(data.size());\n    for (T current : data) {\n        if (!result.contains(current)) {\n            result.add(current);\n        }\n    }\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Google Guava's Bloom Filter\nDESCRIPTION: Example showing how to use the Bloom Filter implementation from Google's Guava library.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/data-structure/bloom-filter.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nBloomFilter<Integer> filter = BloomFilter.create(\n    Funnels.integerFunnel(),\n    1500,\n    0.01);\nSystem.out.println(filter.mightContain(1));\nSystem.out.println(filter.mightContain(2));\nfilter.put(1);\nfilter.put(2);\nSystem.out.println(filter.mightContain(1));\nSystem.out.println(filter.mightContain(2));\n```\n\n----------------------------------------\n\nTITLE: Structured Concurrency Example\nDESCRIPTION: Demonstrates the structured concurrency API for managing multiple concurrent tasks as a single unit of work.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java22-23.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ntry (var scope = new StructuredTaskScope<Object>()) {\n    // 使用fork方法派生线程来执行子任务\n    Future<Integer> future1 = scope.fork(task1);\n    Future<String> future2 = scope.fork(task2);\n    // 等待线程完成\n    scope.join();\n    // 结果的处理可能包括处理或重新抛出异常\n    ... process results/exceptions ...\n} // close\n```\n\n----------------------------------------\n\nTITLE: Implementing ThreadPoolExecutor execute() Method in Java\nDESCRIPTION: Implementation of the execute() method in ThreadPoolExecutor, which handles task submission and thread creation logic for the thread pool.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-summary.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n\nprivate static int workerCountOf(int c) {\n    return c & CAPACITY;\n}\n//任务队列\nprivate final BlockingQueue<Runnable> workQueue;\n\npublic void execute(Runnable command) {\n    // 如果任务为null，则抛出异常。\n    if (command == null)\n        throw new NullPointerException();\n    // ctl 中保存的线程池当前的一些状态信息\n    int c = ctl.get();\n\n    //  下面会涉及到 3 步 操作\n    // 1.首先判断当前线程池中执行的任务数量是否小于 corePoolSize\n    // 如果小于的话，通过addWorker(command, true)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。\n    if (workerCountOf(c) < corePoolSize) {\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    // 2.如果当前执行的任务数量大于等于 corePoolSize 的时候就会走到这里，表明创建新的线程失败。\n    // 通过 isRunning 方法判断线程池状态，线程池处于 RUNNING 状态并且队列可以加入任务，该任务才会被加入进去\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        // 再次获取线程池状态，如果线程池状态不是 RUNNING 状态就需要从任务队列中移除任务，并尝试判断线程是否全部执行完毕。同时执行拒绝策略。\n        if (!isRunning(recheck) && remove(command))\n            reject(command);\n            // 如果当前工作线程数量为0，新创建一个线程并执行。\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    //3. 通过addWorker(command, false)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。\n    // 传入 false 代表增加线程时判断当前线程数是否少于 maxPoolSize\n    //如果addWorker(command, false)执行失败，则通过reject()执行相应的拒绝策略的内容。\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n\n----------------------------------------\n\nTITLE: Static variable and method demonstration in Java\nDESCRIPTION: This code snippet demonstrates the usage of static variables and methods in Java. It shows how to define static members and access them using the class name.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-keyword-summary.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class StaticBean {\n    String name;\n    //静态变量\n    static int age;\n    public StaticBean(String name) {\n        this.name = name;\n    }\n    //静态方法\n    static void sayHello() {\n        System.out.println(\"Hello i am java\");\n    }\n    @Override\n    public String toString() {\n        return \"StaticBean{\" +\n                \"name=\" + name + \",age=\" + age +\n                \"}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Heuristic Cleaning Algorithm for ThreadLocalMap\nDESCRIPTION: Implementation of the cleanSomeSlots method which performs a heuristic scan of the ThreadLocalMap to find and remove stale entries. This is an optimization to periodically clean unreferenced ThreadLocal objects.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nprivate boolean cleanSomeSlots(int i, int n) {\n    boolean removed = false;\n    Entry[] tab = table;\n    int len = tab.length;\n    do {\n        i = nextIndex(i, len);\n        Entry e = tab[i];\n        if (e != null && e.get() == null) {\n            n = len;\n            removed = true;\n            i = expungeStaleEntry(i);\n        }\n    } while ( (n >>>= 1) != 0);\n    return removed;\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Longest Palindromic Subsequence (Java)\nDESCRIPTION: Implements a dynamic programming solution to find the length of the longest palindromic subsequence in a given string. It uses a 2D DP table to store lengths of palindromic subsequences for different substrings.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/string-algorithm-problems.md#2025-04-20_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nclass Solution {\n    public int longestPalindromeSubseq(String s) {\n        int len = s.length();\n        int [][] dp = new int[len][len];\n        for(int i = len - 1; i>=0; i--){\n            dp[i][i] = 1;\n            for(int j = i+1; j < len; j++){\n                if(s.charAt(i) == s.charAt(j))\n                    dp[i][j] = dp[i+1][j-1] + 2;\n                else\n                    dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]);\n            }\n        }\n        return dp[0][len-1];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Producer in RocketMQ\nDESCRIPTION: Demonstrates the correct way to create and use a producer in RocketMQ, emphasizing the importance of reusing the producer instance for multiple messages.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/rocketmq-questions.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nProducer p = ProducerBuilder.build();\nfor (int i =0;i<n;i++){\n    Message m= MessageBuilder.build();\n    p.send(m);\n }\np.shutdown();\n```\n\n----------------------------------------\n\nTITLE: Validating Parentheses Using Stack in Java\nDESCRIPTION: Implements a function to check if a string of parentheses is valid using a stack data structure in Java.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/data-structure/linear-data-structure.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic boolean isValid(String s){\n    // 括号之间的对应规则\n    HashMap<Character, Character> mappings = new HashMap<Character, Character>();\n    mappings.put(')', '(');\n    mappings.put('}', '{');\n    mappings.put(']', '[');\n    Stack<Character> stack = new Stack<Character>();\n    char[] chars = s.toCharArray();\n    for (int i = 0; i < chars.length; i++) {\n        if (mappings.containsKey(chars[i])) {\n            char topElement = stack.empty() ? '#' : stack.pop();\n            if (topElement != mappings.get(chars[i])) {\n                return false;\n            }\n        } else {\n            stack.push(chars[i]);\n        }\n    }\n    return stack.isEmpty();\n}\n```\n\n----------------------------------------\n\nTITLE: 使用AtomicInteger进行原子操作\nDESCRIPTION: 展示了如何使用AtomicInteger类进行各种原子操作，包括获取和设置值、自增、自减、条件更新等。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/atomic-classes.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nAtomicInteger atomicInt = new AtomicInteger(0);\n\nint tempValue = atomicInt.getAndSet(3);\nSystem.out.println(\"tempValue: \" + tempValue + \"; atomicInt: \" + atomicInt);\n\ntempValue = atomicInt.getAndIncrement();\nSystem.out.println(\"tempValue: \" + tempValue + \"; atomicInt: \" + atomicInt);\n\ntempValue = atomicInt.getAndAdd(5);\nSystem.out.println(\"tempValue: \" + tempValue + \"; atomicInt: \" + atomicInt);\n\nboolean updateSuccess = atomicInt.compareAndSet(9, 10);\nSystem.out.println(\"Update Success: \" + updateSuccess + \"; atomicInt: \" + atomicInt);\n\nint currentValue = atomicInt.get();\nSystem.out.println(\"Current value: \" + currentValue);\n\natomicInt.lazySet(15);\nSystem.out.println(\"After lazySet, atomicInt: \" + atomicInt);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Scoped Values in Java\nDESCRIPTION: This code snippet shows how to use scoped values to share immutable data within and between threads. It's more efficient than thread-local variables, especially when using many virtual threads.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java20.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nfinal static ScopedValue<...> V = new ScopedValue<>();\n\n// In some method\nScopedValue.where(V, <value>)\n           .run(() -> { ... V.get() ... call methods ... });\n\n// In a method called directly or indirectly from the lambda expression\n... V.get() ...\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Client API in Java 11\nDESCRIPTION: Demonstrates how to use the standardized HTTP Client API for both synchronous and asynchronous HTTP requests using java.net.http package.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java11.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nvar request = HttpRequest.newBuilder()\n    .uri(URI.create(\"https://javastack.cn\"))\n    .GET()\n    .build();\nvar client = HttpClient.newHttpClient();\n\n// 同步\nHttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\nSystem.out.println(response.body());\n\n// 异步\nclient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n    .thenApply(HttpResponse::body)\n    .thenAccept(System.out::println);\n```\n\n----------------------------------------\n\nTITLE: Static inner class implementation of Singleton pattern in Java\nDESCRIPTION: This code snippet shows how to implement the Singleton pattern using a static inner class in Java. It demonstrates lazy initialization and thread-safe instance creation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-keyword-summary.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class Singleton {\n    //声明为 private 避免调用默认构造方法创建对象\n    private Singleton() {\n    }\n   // 声明为 private 表明静态内部该类只能在该 Singleton 类中被访问\n    private static class SingletonHolder {\n        private static final Singleton INSTANCE = new Singleton();\n    }\n    public static Singleton getUniqueInstance() {\n        return SingletonHolder.INSTANCE;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Common LinkedList Operations in Java\nDESCRIPTION: Demonstrates various common operations on a LinkedList including adding elements, inserting at specific positions, getting and setting elements, removing elements, and clearing the list. It also shows how to get the size of the list.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedlist-source-code.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// 创建 LinkedList 对象\nLinkedList<String> list = new LinkedList<>();\n\n// 添加元素到链表末尾\nlist.add(\"apple\");\nlist.add(\"banana\");\nlist.add(\"pear\");\nSystem.out.println(\"链表内容：\" + list);\n\n// 在指定位置插入元素\nlist.add(1, \"orange\");\nSystem.out.println(\"链表内容：\" + list);\n\n// 获取指定位置的元素\nString fruit = list.get(2);\nSystem.out.println(\"索引为 2 的元素：\" + fruit);\n\n// 修改指定位置的元素\nlist.set(3, \"grape\");\nSystem.out.println(\"链表内容：\" + list);\n\n// 删除指定位置的元素\nlist.remove(0);\nSystem.out.println(\"链表内容：\" + list);\n\n// 删除第一个出现的指定元素\nlist.remove(\"banana\");\nSystem.out.println(\"链表内容：\" + list);\n\n// 获取链表的长度\nint size = list.size();\nSystem.out.println(\"链表长度：\" + size);\n\n// 清空链表\nlist.clear();\nSystem.out.println(\"清空后的链表：\" + list);\n```\n\n----------------------------------------\n\nTITLE: Get Operation in Java 7 ConcurrentHashMap\nDESCRIPTION: This method retrieves a value from the ConcurrentHashMap based on the provided key. It calculates the key's position and traverses the linked list if necessary.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/concurrent-hash-map-source-code.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic V get(Object key) {\n    Segment<K,V> s; // manually integrate access methods to reduce overhead\n    HashEntry<K,V>[] tab;\n    int h = hash(key);\n    long u = (((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;\n    // 计算得到 key 的存放位置\n    if ((s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &&\n        (tab = s.table) != null) {\n        for (HashEntry<K,V> e = (HashEntry<K,V>) UNSAFE.getObjectVolatile\n                 (tab, ((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);\n             e != null; e = e.next) {\n            // 如果是链表，遍历查找到相同 key 的 value。\n            K k;\n            if ((k = e.key) == key || (e.hash == h && key.equals(k)))\n                return e.value;\n        }\n    }\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Hash类型模拟对象数据存储\nDESCRIPTION: 展示了如何使用Hash类型存储和操作对象数据,包括HMSET、HEXISTS、HGET、HGETALL、HSET、HINCRBY等命令的使用。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-data-structures-01.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n> HMSET userInfoKey name \"guide\" description \"dev\" age 24\nOK\n> HEXISTS userInfoKey name # 查看 key 对应的 value中指定的字段是否存在。\n(integer) 1\n> HGET userInfoKey name # 获取存储在哈希表中指定字段的值。\n\"guide\"\n> HGET userInfoKey age\n\"24\"\n> HGETALL userInfoKey # 获取在哈希表中指定 key 的所有字段和值\n1) \"name\"\n2) \"guide\"\n3) \"description\"\n4) \"dev\"\n5) \"age\"\n6) \"24\"\n> HSET userInfoKey name \"GuideGeGe\"\n> HGET userInfoKey name\n\"GuideGeGe\"\n> HINCRBY userInfoKey age 2\n(integer) 26\n```\n\n----------------------------------------\n\nTITLE: 使用Redis SETNX命令实现简易分布式锁\nDESCRIPTION: 展示了如何使用Redis的SETNX和DEL命令来实现最基本的分布式锁获取和释放操作。SETNX命令只在key不存在时设置值，返回1表示获取锁成功，0表示失败。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-lock-implementations.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> SETNX lockKey uniqueValue\n(integer) 1\n> SETNX lockKey uniqueValue\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: Implementing Postorder Traversal for Binary Trees in Java\nDESCRIPTION: A recursive implementation of postorder traversal for binary trees. The algorithm first recursively traverses the left subtree, then the right subtree, and finally processes the root node.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/data-structure/tree.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic void postOrder(TreeNode root){\n\tif(root == null){\n\t\treturn;\n\t}\n postOrder(root.left);\n\tpostOrder(root.right);\n\tsystem.out.println(root.data);\n}\n```\n\n----------------------------------------\n\nTITLE: Data Types in SQL\nDESCRIPTION: Provides an overview of MySQL data types including numeric types, string types, date and time types, and enumeration and set types.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/a-thousand-lines-of-mysql-study-notes.md#2025-04-20_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n/* 数据类型（列类型） */ ------------------\n1. 数值类型\n-- a. 整型 ----------\n    类型         字节     范围（有符号位）\n    tinyint     1字节    -128 ~ 127      无符号位：0 ~ 255\n    smallint    2字节    -32768 ~ 32767\n    mediumint   3字节    -8388608 ~ 8388607\n    int         4字节\n    bigint      8字节\n    int(M)  M表示总位数\n    - 默认存在符号位，unsigned 属性修改\n    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改\n        例：int(5)   插入一个数'123'，补填后为'00123'\n    - 在满足要求的情况下，越小越好。\n    - 1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。\n-- b. 浮点型 ----------\n    类型             字节     范围\n    float(单精度)     4字节\n    double(双精度)    8字节\n    浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。\n        不同于整型，前后均会补填0.\n    定义浮点型时，需指定总位数和小数位数。\n        float(M, D)     double(M, D)\n        M表示总位数，D表示小数位数。\n        M和D的大小会决定浮点数的范围。不同于整型的固定范围。\n        M既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。\n        支持科学计数法表示。\n        浮点数表示近似值。\n-- c. 定点数 ----------\n    decimal -- 可变长度\n    decimal(M, D)   M也表示总位数，D表示小数位数。\n    保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。\n    将浮点数转换为字符串来保存，每9位数字保存为4个字节。\n2. 字符串类型\n-- a. char, varchar ----------\n    char    定长字符串，速度快，但浪费空间\n    varchar 变长字符串，速度慢，但节省空间\n    M表示能存储的最大长度，此长度是字符数，非字节数。\n    不同的编码，所占用的空间不同。\n    char,最多255个字符，与编码无关。\n    varchar,最多65535字符，与编码有关。\n    一条有效记录最大不能超过65535个字节。\n        utf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符\n    varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。\n    varchar 的最大有效长度由最大行大小和使用的字符集确定。\n    最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是65535-1-2=65532字节。\n    例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3\n-- b. blob, text ----------\n    blob 二进制字符串（字节字符串）\n        tinyblob, blob, mediumblob, longblob\n    text 非二进制字符串（字符字符串）\n        tinytext, text, mediumtext, longtext\n    text 在定义时，不需要定义长度，也不会计算总长度。\n    text 类型在定义时，不可给default值\n-- c. binary, varbinary ----------\n    类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。\n    char, varchar, text 对应 binary, varbinary, blob.\n3. 日期时间类型\n    一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。\n    datetime    8字节    日期及时间     1000-01-01 00:00:00 到 9999-12-31 23:59:59\n    date        3字节    日期         1000-01-01 到 9999-12-31\n    timestamp   4字节    时间戳        19700101000000 到 2038-01-19 03:14:07\n    time        3字节    时间         -838:59:59 到 838:59:59\n    year        1字节    年份         1901 - 2155\ndatetime    YYYY-MM-DD hh:mm:ss\ntimestamp   YY-MM-DD hh:mm:ss\n            YYYYMMDDhhmmss\n            YYMMDDhhmmss\n            YYYYMMDDhhmmss\n            YYMMDDhhmmss\ndate        YYYY-MM-DD\n            YY-MM-DD\n            YYYYMMDD\n            YYMMDD\n            YYYYMMDD\n            YYMMDD\ntime        hh:mm:ss\n            hhmmss\n            hhmmss\nyear        YYYY\n            YY\n            YYYY\n            YY\n4. 枚举和集合\n-- 枚举(enum) ----------\nenum(val1, val2, val3...)\n    在已知的值中进行单选。最大数量为65535.\n    枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。\n    表现为字符串类型，存储却是整型。\n    NULL值的索引是NULL。\n    空字符串错误值的索引值是0。\n-- 集合（set） ----------\nset(val1, val2, val3...)\n    create table tab ( gender set('男', '女', '无') );\n    insert into tab values ('男, 女');\n    最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。\n    当创建表时，SET成员值的尾部空格将自动被删除。\n```\n\n----------------------------------------\n\nTITLE: Java String Templates Basic Usage\nDESCRIPTION: Example showing basic usage of String Templates in Java 21 with different template processors (STR, FMT, RAW).\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java21.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nString name = \"Lokesh\";\n\n//STR\nString message = STR.\"Greetings \\{name}.\";\n\n//FMT\nString message = FMT.\"Greetings %-12s\\{name}.\";\n\n//RAW\nStringTemplate st = RAW.\"Greetings \\{name}.\";\nString message = STR.process(st);\n```\n\n----------------------------------------\n\nTITLE: Implementing Common Object Class Methods in Java\nDESCRIPTION: This code snippet demonstrates the implementation of common methods in the Object class, including getClass(), hashCode(), equals(), clone(), toString(), wait(), notify(), notifyAll(), and finalize().\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n/**\n * native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。\n */\npublic final native Class<?> getClass()\n/**\n * native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。\n */\npublic native int hashCode()\n/**\n * 用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。\n */\npublic boolean equals(Object obj)\n/**\n * native 方法，用于创建并返回当前对象的一份拷贝。\n */\nprotected native Object clone() throws CloneNotSupportedException\n/**\n * 返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。\n */\npublic String toString()\n/**\n * native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\n */\npublic final native void notify()\n/**\n * native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\n */\npublic final native void notifyAll()\n/**\n * native方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 ，timeout 是等待时间。\n */\npublic final native void wait(long timeout) throws InterruptedException\n/**\n * 多了 nanos 参数，这个参数表示额外时间（以纳秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 纳秒。。\n */\npublic final void wait(long timeout, int nanos) throws InterruptedException\n/**\n * 跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念\n */\npublic final void wait() throws InterruptedException\n/**\n * 实例被垃圾回收器回收的时候触发的操作\n */\nprotected void finalize() throws Throwable { }\n```\n\n----------------------------------------\n\nTITLE: WebSocket Configuration in Spring Boot\nDESCRIPTION: Configuration class to register WebSocket endpoints in Spring Boot application.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/web-real-time-message-push.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\npublic class WebSocketConfiguration {\n    @Bean\n    public ServerEndpointExporter serverEndpointExporter() {\n        return new ServerEndpointExporter();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-Atomic Compound Operations Example\nDESCRIPTION: Example demonstrating how compound operations on ConcurrentHashMap are not atomic by default, showing potential race conditions\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// 线程 A\nif (!map.containsKey(key)) {\nmap.put(key, value);\n}\n// 线程 B\nif (!map.containsKey(key)) {\nmap.put(key, anotherValue);\n}\n```\n\n----------------------------------------\n\nTITLE: replaceStaleEntry Method for Handling Stale Entries in ThreadLocalMap\nDESCRIPTION: This method replaces stale entries in the ThreadLocalMap. It performs backward and forward scanning to find and clean stale entries, handles key replacement, and optimizes entry positions to improve lookup performance.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate void replaceStaleEntry(ThreadLocal<?> key, Object value,\n                                       int staleSlot) {\n    Entry[] tab = table;\n    int len = tab.length;\n    Entry e;\n\n    int slotToExpunge = staleSlot;\n    for (int i = prevIndex(staleSlot, len);\n         (e = tab[i]) != null;\n         i = prevIndex(i, len))\n\n        if (e.get() == null)\n            slotToExpunge = i;\n\n    for (int i = nextIndex(staleSlot, len);\n         (e = tab[i]) != null;\n         i = nextIndex(i, len)) {\n\n        ThreadLocal<?> k = e.get();\n\n        if (k == key) {\n            e.value = value;\n\n            tab[i] = tab[staleSlot];\n            tab[staleSlot] = e;\n\n            if (slotToExpunge == staleSlot)\n                slotToExpunge = i;\n            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);\n            return;\n        }\n\n        if (k == null && slotToExpunge == staleSlot)\n            slotToExpunge = i;\n    }\n\n    tab[staleSlot].value = null;\n    tab[staleSlot] = new Entry(key, value);\n\n    if (slotToExpunge != staleSlot)\n        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);\n}\n```\n\n----------------------------------------\n\nTITLE: String.intern() Method Usage and Examples\nDESCRIPTION: This code demonstrates how the intern() method works with string objects. The method returns a reference to the canonical representation of the string from the string constant pool, either by returning an existing reference or adding one if it doesn't exist.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n// s1 指向字符串常量池中的 \"Java\" 对象\nString s1 = \"Java\";\n// s2 也指向字符串常量池中的 \"Java\" 对象，和 s1 是同一个对象\nString s2 = s1.intern();\n// 在堆中创建一个新的 \"Java\" 对象，s3 指向它\nString s3 = new String(\"Java\");\n// s4 指向字符串常量池中的 \"Java\" 对象，和 s1 是同一个对象\nString s4 = s3.intern();\n// s1 和 s2 指向的是同一个常量池中的对象\nSystem.out.println(s1 == s2); // true\n// s3 指向堆中的对象，s4 指向常量池中的对象，所以不同\nSystem.out.println(s3 == s4); // false\n// s1 和 s4 都指向常量池中的同一个对象\nSystem.out.println(s1 == s4); // true\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending Cookies in Java Servlets\nDESCRIPTION: This code demonstrates how to create a new Cookie object, set its expiration time, and add it to the HTTP response to be sent to the client. The example sets a cookie named \"name\" with a value, and configures it to expire after 24 hours.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/J2EE基础知识.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nCookie c =new Cookie(\"name\",\"value\"); //创建Cookie\nc.setMaxAge(60*60*24); //设置最大时效，此处设置的最大时效为一天\nresponse.addCookie(c); //把Cookie放入到HTTP响应中\n```\n\n----------------------------------------\n\nTITLE: Calculating Power Function with Binary Exponentiation in Java\nDESCRIPTION: This code implements a power function using binary exponentiation (divide and conquer) to efficiently calculate base^exponent. It handles edge cases like negative exponents and zero base cases. The algorithm achieves O(log n) time complexity through recursive halving of the exponent.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class Solution {\n      boolean invalidInput=false;\n      public double Power(double base, int exponent) {\n          //如果底数等于0并且指数小于0\n          //由于base为double型，不能直接用==判断\n        if(equal(base,0.0)&&exponent<0){\n            invalidInput=true;\n            return 0.0;\n        }\n        int absexponent=exponent;\n         //如果指数小于0，将指数转正\n        if(exponent<0)\n            absexponent=-exponent;\n         //getPower方法求出base的exponent次方。\n        double res=getPower(base,absexponent);\n         //如果指数小于0，所得结果为上面求的结果的倒数\n        if(exponent<0)\n            res=1.0/res;\n        return res;\n  }\n    //比较两个double型变量是否相等的方法\n    boolean equal(double num1,double num2){\n        if(num1-num2>-0.000001&&num1-num2<0.000001)\n            return true;\n        else\n            return false;\n    }\n    //求出b的e次方的方法\n    double getPower(double b,int e){\n        //如果指数为0，返回1\n        if(e==0)\n            return 1.0;\n        //如果指数为1，返回b\n        if(e==1)\n            return b;\n        //e>>1相等于e/2，这里就是求a^n =（a^n/2）*（a^n/2）\n        double result=getPower(b,e>>1);\n        result*=result;\n        //如果指数n为奇数，则要再乘一次底数base\n        if((e&1)==1)\n            result*=b;\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: AtomicInteger Implementation using CAS\nDESCRIPTION: Core implementation of AtomicInteger class showing how Unsafe methods are used for atomic operations and field management\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/cas.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate static final Unsafe unsafe = Unsafe.getUnsafe();\nprivate static final long valueOffset;\n\nstatic {\n    try {\n        valueOffset = unsafe.objectFieldOffset\n            (AtomicInteger.class.getDeclaredField(\"value\"));\n    } catch (Exception ex) { throw new Error(ex); }\n}\nprivate volatile int value;\n\npublic final boolean compareAndSet(int expect, int update) {\n    return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n}\n\npublic final int getAndAdd(int delta) {\n    return unsafe.getAndAddInt(this, valueOffset, delta);\n}\n\npublic final int getAndIncrement() {\n    return unsafe.getAndAddInt(this, valueOffset, 1);\n}\n\npublic final int getAndDecrement() {\n    return unsafe.getAndAddInt(this, valueOffset, -1);\n}\n```\n\n----------------------------------------\n\nTITLE: LinkedList Initialization Methods\nDESCRIPTION: Constructor implementations for LinkedList, including empty constructor and collection-based initialization.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedlist-source-code.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic LinkedList() {\n}\n\npublic LinkedList(Collection<? extends E> c) {\n    this();\n    addAll(c);\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExecutorService submit() Method with Future in Java\nDESCRIPTION: Example of using the submit() method of ExecutorService to submit a task and obtain a Future object for handling the result.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-summary.md#2025-04-20_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n// 这里只是为了演示使用，推荐使用 `ThreadPoolExecutor` 构造方法来创建线程池。\nExecutorService executorService = Executors.newFixedThreadPool(3);\n\nFuture<String> submit = executorService.submit(() -> {\n    try {\n        Thread.sleep(5000L);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    return \"abc\";\n});\n\nString s = submit.get();\nSystem.out.println(s);\nexecutorService.shutdown();\n```\n\n----------------------------------------\n\nTITLE: HashMap Node Class Implementation\nDESCRIPTION: Basic node structure used in HashMap for storing key-value pairs and linking nodes in the bucket.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/hashmap-source-code.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nstatic class Node<K,V> implements Map.Entry<K,V> {\n    final int hash;\n    final K key;\n    V value;\n    Node<K,V> next;\n    Node(int hash, K key, V value, Node<K,V> next) {\n        this.hash = hash;\n        this.key = key;\n        this.value = value;\n        this.next = next;\n    }\n    public final K getKey()        { return key; }\n    public final V getValue()      { return value; }\n    public final String toString() { return key + \"=\" + value; }\n    public final int hashCode() {\n        return Objects.hashCode(key) ^ Objects.hashCode(value);\n    }\n    public final V setValue(V newValue) {\n        V oldValue = value;\n        value = newValue;\n        return oldValue;\n    }\n    public final boolean equals(Object o) {\n        if (o == this)\n            return true;\n        if (o instanceof Map.Entry) {\n            Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n            if (Objects.equals(key, e.getKey()) &&\n                Objects.equals(value, e.getValue()))\n                return true;\n        }\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 使用Redisson实现手动设置过期时间的分布式锁\nDESCRIPTION: 展示了如何使用Redisson为分布式锁手动设置过期时间。此方式不会使用Watch Dog自动续期机制，锁到期会自动释放。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-lock-implementations.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// 手动给锁设置过期时间，不具备 Watch Dog 自动续期机制\nlock.lock(10, TimeUnit.SECONDS);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Stack Using Array in Java\nDESCRIPTION: Implements a basic stack data structure using an array in Java, including methods for push, pop, peek, isEmpty, and size.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/data-structure/linear-data-structure.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class MyStack {\n    private int[] storage;//存放栈中元素的数组\n    private int capacity;//栈的容量\n    private int count;//栈中元素数量\n    private static final int GROW_FACTOR = 2;\n\n    //不带初始容量的构造方法。默认容量为8\n    public MyStack() {\n        this.capacity = 8;\n        this.storage=new int[8];\n        this.count = 0;\n    }\n\n    //带初始容量的构造方法\n    public MyStack(int initialCapacity) {\n        if (initialCapacity < 1)\n            throw new IllegalArgumentException(\"Capacity too small.\");\n\n        this.capacity = initialCapacity;\n        this.storage = new int[initialCapacity];\n        this.count = 0;\n    }\n\n    //入栈\n    public void push(int value) {\n        if (count == capacity) {\n            ensureCapacity();\n        }\n        storage[count++] = value;\n    }\n\n    //确保容量大小\n    private void ensureCapacity() {\n        int newCapacity = capacity * GROW_FACTOR;\n        storage = Arrays.copyOf(storage, newCapacity);\n        capacity = newCapacity;\n    }\n\n    //返回栈顶元素并出栈\n    private int pop() {\n        if (count == 0)\n            throw new IllegalArgumentException(\"Stack is empty.\");\n        count--;\n        return storage[count];\n    }\n\n    //返回栈顶元素不出栈\n    private int peek() {\n        if (count == 0){\n            throw new IllegalArgumentException(\"Stack is empty.\");\n        }else {\n            return storage[count-1];\n        }\n    }\n\n    //判断栈是否为空\n    private boolean isEmpty() {\n        return count == 0;\n    }\n\n    //返回栈中元素的个数\n    private int size() {\n        return count;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Messages with SimpleConsumer in RocketMQ\nDESCRIPTION: Shows how to use SimpleConsumer to consume messages in RocketMQ, including setting up the consumer, receiving messages, and acknowledging consumption.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/rocketmq-questions.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nClientServiceProvider provider = ClientServiceProvider.loadService();\nString topic = \"YourTopic\";\nFilterExpression filterExpression = new FilterExpression(\"YourFilterTag\", FilterExpressionType.TAG);\nSimpleConsumer simpleConsumer = provider.newSimpleConsumerBuilder()\n        .setConsumerGroup(\"YourConsumerGroup\")\n        .setClientConfiguration(ClientConfiguration.newBuilder().setEndpoints(\"YourEndpoint\").build())\n        .setSubscriptionExpressions(Collections.singletonMap(topic, filterExpression))\n        .setAwaitDuration(Duration.ofSeconds(1))\n        .build();\ntry {\n    List<MessageView> messageViewList = simpleConsumer.receive(10, Duration.ofSeconds(30));\n    messageViewList.forEach(messageView -> {\n        System.out.println(messageView);\n        try {\n            simpleConsumer.ack(messageView);\n        } catch (ClientException e) {\n            logger.error(\"Failed to ack message, messageId={}\", messageView.getMessageId(), e);\n        }\n    });\n} catch (ClientException e) {\n    logger.error(\"Failed to receive message\", e);\n}\n```\n\n----------------------------------------\n\nTITLE: AtomicStampedReference compareAndSet Implementation\nDESCRIPTION: Implementation of compareAndSet in AtomicStampedReference class to solve the ABA problem using version stamps\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/cas.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic boolean compareAndSet(V   expectedReference,\n                             V   newReference,\n                             int expectedStamp,\n                             int newStamp) {\n    Pair<V> current = pair;\n    return\n        expectedReference == current.reference &&\n        expectedStamp == current.stamp &&\n        ((newReference == current.reference &&\n          newStamp == current.stamp) ||\n         casPair(current, Pair.of(newReference, newStamp)));\n}\n```\n\n----------------------------------------\n\nTITLE: Testing CopyOnWriteArrayList Methods in Java\nDESCRIPTION: A comprehensive test of various CopyOnWriteArrayList methods including add, get, remove, set, size, removeAll, and clear.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/copyonwritearraylist-source-code.md#2025-04-20_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nCopyOnWriteArrayList<String> list = new CopyOnWriteArrayList<>();\n\nlist.add(\"Java\");\nlist.add(\"Python\");\nlist.add(\"C++\");\nSystem.out.println(\"初始列表：\" + list);\n\nSystem.out.println(\"列表第二个元素为：\" + list.get(1));\n\nboolean result = list.remove(\"C++\");\nSystem.out.println(\"删除结果：\" + result);\nSystem.out.println(\"列表删除元素后为：\" + list);\n\nlist.set(1, \"Golang\");\nSystem.out.println(\"列表更新后为：\" + list);\n\nlist.add(0, \"PHP\");\nSystem.out.println(\"列表插入元素后为：\" + list);\n\nSystem.out.println(\"列表大小为：\" + list.size());\n\nresult = list.removeAll(List.of(\"Java\", \"Golang\"));\nSystem.out.println(\"批量删除结果：\" + result);\nSystem.out.println(\"列表批量删除元素后为：\" + list);\n\nlist.clear();\nSystem.out.println(\"列表清空后为：\" + list);\n```\n\n----------------------------------------\n\nTITLE: Calculating Bracket Matching Depth (Java)\nDESCRIPTION: Implements a method to calculate the depth of a valid bracket sequence. It keeps track of the current depth while iterating through the string and updates the maximum depth encountered.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/string-algorithm-problems.md#2025-04-20_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nimport java.util.Scanner;\n\npublic class Main {\n  public static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    String s = sc.nextLine();\n    int cnt = 0, max = 0, i;\n    for (i = 0; i < s.length(); ++i) {\n      if (s.charAt(i) == '(')\n        cnt++;\n      else\n        cnt--;\n      max = Math.max(max, cnt);\n    }\n    sc.close();\n    System.out.println(max);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced Switch Expressions in Java 14\nDESCRIPTION: Demonstrates the use of switch expressions with lambda-like syntax and the yield keyword for returning values from switch blocks.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java14-15.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nString result = switch (day) {\n            case \"M\", \"W\", \"F\" -> \"MWF\";\n            case \"T\", \"TH\", \"S\" -> \"TTS\";\n            default -> {\n                if(day.isEmpty())\n                    yield \"Please insert a valid day.\";\n                else\n                    yield \"Looks like a Sunday.\";\n            }\n\n        };\nSystem.out.println(result);\n```\n\n----------------------------------------\n\nTITLE: ConcurrentHashMap Parameter Constructor Implementation\nDESCRIPTION: Parameterized constructor that initializes ConcurrentHashMap with specified initial capacity, load factor and concurrency level. Handles parameter validation and segment initialization.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/concurrent-hash-map-source-code.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@SuppressWarnings(\"unchecked\")\npublic ConcurrentHashMap(int initialCapacity,float loadFactor, int concurrencyLevel) {\n    if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)\n        throw new IllegalArgumentException();\n    if (concurrencyLevel > MAX_SEGMENTS)\n        concurrencyLevel = MAX_SEGMENTS;\n    int sshift = 0;\n    int ssize = 1;\n    while (ssize < concurrencyLevel) {\n        ++sshift;\n        ssize <<= 1;\n    }\n    this.segmentShift = 32 - sshift;\n    this.segmentMask = ssize - 1;\n    if (initialCapacity > MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    int c = initialCapacity / ssize;\n    if (c * ssize < initialCapacity)\n        ++c;\n    int cap = MIN_SEGMENT_TABLE_CAPACITY;\n    while (cap < c)\n        cap <<= 1;\n    Segment<K,V> s0 = new Segment<K,V>(loadFactor, (int)(cap * loadFactor),\n                         (HashEntry<K,V>[])new HashEntry[cap]);\n    Segment<K,V>[] ss = (Segment<K,V>[])new Segment[ssize];\n    UNSAFE.putOrderedObject(ss, SBASE, s0);\n    this.segments = ss;\n}\n```\n\n----------------------------------------\n\nTITLE: Reflection Operations Example\nDESCRIPTION: Comprehensive example showing various reflection operations including accessing methods, fields, and invoking private members.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/reflection.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage cn.javaguide;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\npublic class Main {\n    public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchFieldException {\n        /**\n         * 获取 TargetObject 类的 Class 对象并且创建 TargetObject 类实例\n         */\n        Class<?> targetClass = Class.forName(\"cn.javaguide.TargetObject\");\n        TargetObject targetObject = (TargetObject) targetClass.newInstance();\n        /**\n         * 获取 TargetObject 类中定义的所有方法\n         */\n        Method[] methods = targetClass.getDeclaredMethods();\n        for (Method method : methods) {\n            System.out.println(method.getName());\n        }\n\n        /**\n         * 获取指定方法并调用\n         */\n        Method publicMethod = targetClass.getDeclaredMethod(\"publicMethod\",\n                String.class);\n\n        publicMethod.invoke(targetObject, \"JavaGuide\");\n\n        /**\n         * 获取指定参数并对参数进行修改\n         */\n        Field field = targetClass.getDeclaredField(\"value\");\n        //为了对类中的参数进行修改我们取消安全检查\n        field.setAccessible(true);\n        field.set(targetObject, \"JavaGuide\");\n\n        /**\n         * 调用 private 方法\n         */\n        Method privateMethod = targetClass.getDeclaredMethod(\"privateMethod\");\n        //为了调用private方法我们取消安全检查\n        privateMethod.setAccessible(true);\n        privateMethod.invoke(targetObject);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Two Sorted Linked Lists in Java\nDESCRIPTION: Recursive implementation to merge two sorted linked lists while maintaining the sorted order. Compares values of nodes and recursively builds the merged list.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/linkedlist-algorithm-problems.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class Solution {\n  public ListNode Merge(ListNode list1, ListNode list2) {\n    if (list1 == null) {\n      return list2;\n    }\n    if (list2 == null) {\n      return list1;\n    }\n    if (list1.val <= list2.val) {\n      list1.next = Merge(list1.next, list2);\n      return list1;\n    } else {\n      list2.next = Merge(list1, list2.next);\n      return list2;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: 内部类访问外部类私有属性 (Java)\nDESCRIPTION: 展示了内部类如何访问外部类的私有属性。通过反编译可以看到编译器生成了桥接方法来实现这一功能。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class OutterClass {\n    private String userName;\n    ......\n    class InnerClass{\n    ......\n        public void printOut(){\n            System.out.println(\"Username from OutterClass:\"+userName);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing to a File using FileOutputStream in Java\nDESCRIPTION: Shows how to write byte data to a file using FileOutputStream.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/io-basis.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\ntry (FileOutputStream output = new FileOutputStream(\"output.txt\")) {\n    byte[] array = \"JavaGuide\".getBytes();\n    output.write(array);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking Take Operation in ArrayBlockingQueue\nDESCRIPTION: Implementation of blocking take operation that waits until elements are available in the queue before removing and returning an element.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic E take() throws InterruptedException {\n     final ReentrantLock lock = this.lock;\n     lock.lockInterruptibly();\n     try {\n         while (count == 0)\n             notEmpty.await();\n         return dequeue();\n     } finally {\n         lock.unlock();\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inorder Traversal for Binary Trees in Java\nDESCRIPTION: A recursive implementation of inorder traversal for binary trees. The algorithm first recursively traverses the left subtree, then processes the root node, followed by recursively traversing the right subtree.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/data-structure/tree.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic void inOrder(TreeNode root){\n\tif(root == null){\n\t\treturn;\n\t}\n\tinOrder(root.left);\n\tsystem.out.println(root.data);\n\tinOrder(root.right);\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Thread Pool Creation in Java\nDESCRIPTION: This code snippet demonstrates an incorrect way of creating a thread pool for each user request, which should be avoided to prevent resource wastage.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-best-practices.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@GetMapping(\"wrong\")\npublic String wrong() throws InterruptedException {\n    // 自定义线程池\n    ThreadPoolExecutor executor = new ThreadPoolExecutor(5,10,1L,TimeUnit.SECONDS,new ArrayBlockingQueue<>(100),new ThreadPoolExecutor.CallerRunsPolicy());\n\n    //  处理任务\n    executor.execute(() -> {\n      // ......\n    }\n    return \"OK\";\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking Put Operation in ArrayBlockingQueue\nDESCRIPTION: Implementation of blocking put operation that waits until space is available in the queue before inserting an element.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic void put(E e) throws InterruptedException {\n    checkNotNull(e);\n    final ReentrantLock lock = this.lock;\n    lock.lockInterruptibly();\n    try {\n        while (count == items.length)\n            notFull.await();\n        enqueue(e);\n    } finally {\n        lock.unlock();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Volatile Non-Atomicity\nDESCRIPTION: Example showing that volatile keyword cannot guarantee atomicity of compound operations\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class VolatileAtomicityDemo {\n    public volatile static int inc = 0;\n\n    public void increase() {\n        inc++;\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        ExecutorService threadPool = Executors.newFixedThreadPool(5);\n        VolatileAtomicityDemo volatileAtomicityDemo = new VolatileAtomicityDemo();\n        for (int i = 0; i < 5; i++) {\n            threadPool.execute(() -> {\n                for (int j = 0; j < 500; j++) {\n                    volatileAtomicityDemo.increase();\n                }\n            });\n        }\n        Thread.sleep(1500);\n        System.out.println(inc);\n        threadPool.shutdown();\n    }\n```\n\n----------------------------------------\n\nTITLE: Character Set and Encoding in SQL\nDESCRIPTION: Explains how to view and set character sets and encodings for MySQL, databases, tables, and fields.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/a-thousand-lines-of-mysql-study-notes.md#2025-04-20_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n/* 字符集编码 */ ------------------\n-- MySQL、数据库、表、字段均可设置编码\n-- 数据编码与客户端编码不需一致\nSHOW VARIABLES LIKE 'character_set_%'   -- 查看所有字符集编码项\n    character_set_client        客户端向服务器发送数据时使用的编码\n    character_set_results       服务器端将结果返回给客户端所使用的编码\n    character_set_connection    连接层编码\nSET 变量名 = 变量值\n    SET character_set_client = gbk;\n    SET character_set_results = gbk;\n    SET character_set_connection = gbk;\nSET NAMES GBK;  -- 相当于完成以上三个设置\n-- 校对集\n    校对集用以排序\n    SHOW CHARACTER SET [LIKE 'pattern']/SHOW CHARSET [LIKE 'pattern']   查看所有字符集\n    SHOW COLLATION [LIKE 'pattern']     查看所有校对集\n    CHARSET 字符集编码     设置字符集编码\n    COLLATE 校对集编码     设置校对集编码\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to CopyOnWriteArrayList in Java\nDESCRIPTION: Implementation of the add() method in CopyOnWriteArrayList, demonstrating the Copy-On-Write strategy for thread-safe element insertion.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/copyonwritearraylist-source-code.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic boolean add(E e) {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        Object[] elements = getArray();\n        int len = elements.length;\n        Object[] newElements = Arrays.copyOf(elements, len + 1);\n        newElements[len] = e;\n        setArray(newElements);\n        return true;\n    } finally {\n        lock.unlock();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Thread Factory Implementation in Java\nDESCRIPTION: This code snippet shows how to implement a custom ThreadFactory that sets meaningful thread names, which is useful for problem identification in thread pools.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-best-practices.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.concurrent.ThreadFactory;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n/**\n * 线程工厂，它设置线程名称，有利于我们定位问题。\n */\npublic final class NamingThreadFactory implements ThreadFactory {\n\n    private final AtomicInteger threadNum = new AtomicInteger();\n    private final String name;\n\n    /**\n     * 创建一个带名字的线程池生产工厂\n     */\n    public NamingThreadFactory(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public Thread newThread(Runnable r) {\n        Thread t = new Thread(r);\n        t.setName(name + \" [#\" + threadNum.incrementAndGet() + \"]\");\n        return t;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Objects with ObjectOutputStream in Java\nDESCRIPTION: Illustrates how to use ObjectOutputStream to write Java objects to an output stream (serialization).\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/io-basis.md#2025-04-20_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(\"file.txt\")\nPerson person = new Person(\"Guide哥\", \"JavaGuide作者\");\noutput.writeObject(person);\n```\n\n----------------------------------------\n\nTITLE: Efficient String Concatenation Using StringBuilder\nDESCRIPTION: This code demonstrates the recommended way to concatenate strings in a loop by explicitly using a StringBuilder. This approach is more efficient as it reuses the same StringBuilder object for all iterations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nString[] arr = {\"he\", \"llo\", \"world\"};\nStringBuilder s = new StringBuilder();\nfor (String value : arr) {\n    s.append(value);\n}\nSystem.out.println(s);\n```\n\n----------------------------------------\n\nTITLE: Basic Database Transaction Syntax in MySQL\nDESCRIPTION: SQL commands demonstrating the basic structure of a MySQL transaction. This shows how to start a transaction, execute multiple SQL statements, and commit the changes atomically.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-questions-01.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n# 开启一个事务\nSTART TRANSACTION;\n# 多条 SQL 语句\nSQL1,SQL2...\n## 提交事务\nCOMMIT;\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic Locking with LongAdder in Java\nDESCRIPTION: Shows how to use the LongAdder class from java.util.concurrent.atomic package to implement optimistic locking. LongAdder provides better performance than AtomicInteger and AtomicLong in high-concurrency scenarios.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/optimistic-lock-and-pessimistic-lock.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// LongAdder 在高并发场景下会比 AtomicInteger 和 AtomicLong 的性能更好\n// 代价就是会消耗更多的内存空间（空间换时间）\nLongAdder sum = new LongAdder();\nsum.increment();\n```\n\n----------------------------------------\n\nTITLE: Setting Key Expiration in Redis\nDESCRIPTION: This code demonstrates various ways to set expiration times for Redis keys using the EXPIRE command, SETEX command, and shows how to check remaining time with TTL.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:6379> expire key 60 # 数据在 60s 后过期\n(integer) 1\n127.0.0.1:6379> setex key 60 value # 数据在 60s 后过期 (setex:[set] + [ex]pire)\nOK\n127.0.0.1:6379> ttl key # 查看数据还有多久过期\n(integer) 56\n```\n\n----------------------------------------\n\nTITLE: Synchronized Method Example\nDESCRIPTION: Demonstrates synchronized method reentrance using a simple class with two synchronized methods\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class SynchronizedDemo {\n    public synchronized void method1() {\n        System.out.println(\"方法1\");\n        method2();\n    }\n\n    public synchronized void method2() {\n        System.out.println(\"方法2\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Non-blocking Poll Operation in ArrayBlockingQueue\nDESCRIPTION: Implementation of non-blocking poll operation that immediately returns null if the queue is empty instead of waiting.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic E poll() {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            return (count == 0) ? null : dequeue();\n        } finally {\n            lock.unlock();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating ByteBuffer Instances in Java NIO\nDESCRIPTION: Demonstrates two static methods to create ByteBuffer instances: allocate() for heap memory allocation and allocateDirect() for direct memory allocation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/nio-basis.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n// Allocate heap memory\npublic static ByteBuffer allocate(int capacity);\n// Allocate direct memory\npublic static ByteBuffer allocateDirect(int capacity);\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction Isolation Level in MySQL\nDESCRIPTION: This SQL snippet demonstrates how to check the current transaction isolation level in MySQL. It uses the @@tx_isolation system variable for MySQL versions prior to 8.0, and @@transaction_isolation for MySQL 8.0 and later.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-questions-01.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT @@tx_isolation;\n```\n\n----------------------------------------\n\nTITLE: Finding Longest Palindromic Substring (Java)\nDESCRIPTION: Implements a method to find the longest palindromic substring in a given string. It uses the expand around center approach, checking both odd and even length palindromes for each character as the center.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/string-algorithm-problems.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nclass Solution {\n  private int index, len;\n\n  public String longestPalindrome(String s) {\n    if (s.length() < 2)\n      return s;\n    for (int i = 0; i < s.length() - 1; i++) {\n      PalindromeHelper(s, i, i);\n      PalindromeHelper(s, i, i + 1);\n    }\n    return s.substring(index, index + len);\n  }\n\n  public void PalindromeHelper(String s, int l, int r) {\n    while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) {\n      l--;\n      r++;\n    }\n    if (len < r - l - 1) {\n      index = l + 1;\n      len = r - l - 1;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: expungeStaleEntry Method for Probe-based Cleaning in ThreadLocalMap\nDESCRIPTION: Implements probe-based cleaning of stale entries in ThreadLocalMap. It removes entries with null keys, rehashes and repositions valid entries to optimize their location, and returns the index where the scan stopped.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprivate int expungeStaleEntry(int staleSlot) {\n    Entry[] tab = table;\n    int len = tab.length;\n\n    tab[staleSlot].value = null;\n    tab[staleSlot] = null;\n    size--;\n\n    Entry e;\n    int i;\n    for (i = nextIndex(staleSlot, len);\n         (e = tab[i]) != null;\n         i = nextIndex(i, len)) {\n        ThreadLocal<?> k = e.get();\n        if (k == null) {\n            e.value = null;\n            tab[i] = null;\n            size--;\n        } else {\n            int h = k.threadLocalHashCode & (len - 1);\n            if (h != i) {\n                tab[i] = null;\n\n                while (tab[h] != null)\n                    h = nextIndex(h, len);\n                tab[h] = e;\n            }\n        }\n    }\n    return i;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Non-Blocking offer() and poll() Methods with ArrayBlockingQueue in Java\nDESCRIPTION: Shows usage of non-blocking offer() and poll() methods with ArrayBlockingQueue. Demonstrates behavior when queue is full or empty.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class OfferPollExample {\n\n    public static void main(String[] args) {\n        // 创建一个大小为 3 的 ArrayBlockingQueue\n        ArrayBlockingQueue<String> queue = new ArrayBlockingQueue<>(3);\n\n        // 向队列中添加元素\n        System.out.println(queue.offer(\"A\"));\n        System.out.println(queue.offer(\"B\"));\n        System.out.println(queue.offer(\"C\"));\n\n        // 尝试向队列中添加元素，但队列已满，返回 false\n        System.out.println(queue.offer(\"D\"));\n\n        // 从队列中取出元素\n        System.out.println(queue.poll());\n        System.out.println(queue.poll());\n        System.out.println(queue.poll());\n\n        // 尝试从队列中取出元素，但队列已空，返回 null\n        System.out.println(queue.poll());\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Element in Skip List in Java\nDESCRIPTION: Implements the get method to search for an element in the skip list, traversing levels efficiently.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-skiplist.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic Node get(int value) {\n    Node p = h;\n    for (int i = levelCount - 1; i >= 0; i--) {\n        while (p.forwards[i] != null && p.forwards[i].data < value) {\n            p = p.forwards[i];\n        }\n    }\n    if (p.forwards[0] != null && p.forwards[0].data == value) {\n        return p.forwards[0];\n    }\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Collection Emptiness in Java\nDESCRIPTION: Demonstrates the proper way to check if a collection is empty using the isEmpty() method instead of size() == 0. Explains why isEmpty() is preferred, especially for certain concurrent collections like ConcurrentLinkedQueue.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-precautions-for-use.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic boolean isEmpty() { return first() == null; }\n\nNode<E> first() {\n    restartFromHead:\n    for (;;) {\n        for (Node<E> h = head, p = h, q;;) {\n            boolean hasItem = (p.item != null);\n            if (hasItem || (q = p.next) == null) {  // 当前节点值不为空 或 到达队尾\n                updateHead(h, p);  // 将head设置为p\n                return hasItem ? p : null;\n            }\n            else if (p == q) continue restartFromHead;\n            else p = q;  // p = p.next\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NTILE() Window Function for Data Bucketing in MySQL\nDESCRIPTION: Demonstrates the use of NTILE() function to divide the result set into a specified number of approximately equal buckets, assigning a bucket number to each row.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col1, col2, NTILE(4) OVER (ORDER BY col1) AS bucket\nFROM table;\n```\n\n----------------------------------------\n\nTITLE: Applying RANK() Window Function for Ranking in MySQL\nDESCRIPTION: Shows the usage of the RANK() function to calculate the rank of each row within a result set, based on the ordering of a specified column.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col1, col2, RANK() OVER (ORDER BY col1 DESC) AS ranking\nFROM table;\n```\n\n----------------------------------------\n\nTITLE: Implementing Runnable Interface for Thread Pool Tasks in Java\nDESCRIPTION: This class implements the Runnable interface to define tasks that can be executed by the thread pool. It simulates a task that takes about 5 seconds to complete and logs the start and end times.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-summary.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.Date;\n\n/**\n * 这是一个简单的Runnable类，需要大约5秒钟来执行其任务。\n * @author shuang.kou\n */\npublic class MyRunnable implements Runnable {\n\n    private String command;\n\n    public MyRunnable(String s) {\n        this.command = s;\n    }\n\n    @Override\n    public void run() {\n        System.out.println(Thread.currentThread().getName() + \" Start. Time = \" + new Date());\n        processCommand();\n        System.out.println(Thread.currentThread().getName() + \" End. Time = \" + new Date());\n    }\n\n    private void processCommand() {\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public String toString() {\n        return this.command;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AbstractStringBuilder in Java\nDESCRIPTION: This code snippet shows the implementation of the AbstractStringBuilder class, which is the parent class of StringBuilder and StringBuffer, demonstrating the mutable nature of these classes.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nabstract class AbstractStringBuilder implements Appendable, CharSequence {\n    char[] value;\n    public AbstractStringBuilder append(String str) {\n        if (str == null)\n            return appendNull();\n        int len = str.length();\n        ensureCapacityInternal(count + len);\n        str.getChars(0, len, value, count);\n        count += len;\n        return this;\n    }\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: AOP Logging Aspect Implementation\nDESCRIPTION: Implementation of logging aspect using Spring AOP with pointcut and around advice\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/ioc-and-aop.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@Aspect\npublic class LogAspect {\n  @Pointcut(\"@annotation(cn.javaguide.annotation.Log)\")\n  public void webLog() {\n  }\n\n  @Around(\"webLog()\")\n  public Object doAround(ProceedingJoinPoint joinPoint) throws Throwable {\n    // 省略具体的处理逻辑\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fibonacci Sequence with Iteration in Java\nDESCRIPTION: This code implements the Fibonacci sequence calculation using an iterative approach to avoid stack overflow issues that would occur with recursion. The solution has O(n) time complexity and O(1) space complexity as it only stores the previous two values in the sequence.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nint Fibonacci(int number) {\n    if (number <= 0) {\n        return 0;\n    }\n    if (number == 1 || number == 2) {\n        return 1;\n    }\n    int first = 1, second = 1, third = 0;\n    for (int i = 3; i <= number; i++) {\n        third = first + second;\n        first = second;\n        second = third;\n    }\n    return third;\n}\n```\n\n----------------------------------------\n\nTITLE: 使用Lua脚本安全释放Redis分布式锁\nDESCRIPTION: 通过Lua脚本实现安全释放Redis分布式锁，通过比较锁的value值来确保只释放自己的锁，避免锁被错误释放的问题。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-lock-implementations.md#2025-04-20_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n// 释放锁时，先比较锁对应的 value 值是否相等，避免锁的误释放\nif redis.call(\"get\",KEYS[1]) == ARGV[1] then\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Local and Instance Variables in Java\nDESCRIPTION: A simple Java class showing the difference between instance variables and local variables in terms of memory allocation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-intro.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class Person {\n    int a = 1;\n\n    public void doSomething() {\n        int b = 2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsafe getAndAddInt Implementation\nDESCRIPTION: Implementation of getAndAddInt method in Unsafe class showing the spin-lock mechanism used for atomic operations\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/cas.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic final int getAndAddInt(Object o, long offset, int delta) {\n    int v;\n    do {\n        v = getIntVolatile(o, offset);\n    } while (!compareAndSwapInt(o, offset, v, v + delta));\n    return v;\n}\n```\n\n----------------------------------------\n\nTITLE: CAS Operations in Unsafe Class\nDESCRIPTION: Native CompareAndSwap methods provided by Unsafe class for atomic operations on different data types\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic final native boolean compareAndSwapObject(Object o, long offset,  Object expected, Object update);\n\npublic final native boolean compareAndSwapInt(Object o, long offset, int expected,int update);\n\npublic final native boolean compareAndSwapLong(Object o, long offset, long expected, long update);\n```\n\n----------------------------------------\n\nTITLE: LinkedList Element Removal Operations\nDESCRIPTION: Implementation of various remove methods to delete elements from different positions in the LinkedList.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedlist-source-code.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic E removeFirst() {\n    final Node<E> f = first;\n    if (f == null)\n        throw new NoSuchElementException();\n    return unlinkFirst(f);\n}\n\npublic E removeLast() {\n    final Node<E> l = last;\n    if (l == null)\n        throw new NoSuchElementException();\n    return unlinkLast(l);\n}\n\npublic boolean remove(Object o) {\n    if (o == null) {\n        for (Node<E> x = first; x != null; x = x.next) {\n            if (x.item == null) {\n                unlink(x);\n                return true;\n            }\n        }\n    } else {\n        for (Node<E> x = first; x != null; x = x.next) {\n            if (o.equals(x.item)) {\n                unlink(x);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DelayedTask Class\nDESCRIPTION: Custom implementation of Delayed interface for creating delayed tasks with execution time and task logic.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/delayqueue-source-code.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class DelayedTask implements Delayed {\n    private long executeTime;\n    private Runnable task;\n\n    public DelayedTask(long delay, Runnable task) {\n        this.executeTime = System.currentTimeMillis() + delay;\n        this.task = task;\n    }\n\n    @Override\n    public long getDelay(TimeUnit unit) {\n        return unit.convert(executeTime - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n    }\n\n    @Override\n    public int compareTo(Delayed o) {\n        return Long.compare(this.executeTime, ((DelayedTask) o).executeTime);\n    }\n\n    public void execute() {\n        task.run();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Migration Using INSERT SELECT in SQL\nDESCRIPTION: Shows how to copy historical exam records from one table to another based on a year condition using INSERT SELECT statement.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO exam_record_before_2021 (uid, exam_id, start_time, submit_time, score)\nSELECT uid,exam_id,start_time,submit_time,score\nFROM exam_record\nWHERE YEAR(submit_time) < 2021;\n```\n\n----------------------------------------\n\nTITLE: Hash Function Implementation in JDK 1.8\nDESCRIPTION: Implementation of the hash function in HashMap for JDK 1.8. Uses XOR operation between hashCode and its 16-bit right shift to generate final hash value.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/hashmap-source-code.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nstatic final int hash(Object key) {\n  int h;\n  return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Float Precision Loss in Java\nDESCRIPTION: Example showing how float calculations can lead to precision loss when working with decimal numbers.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/bigdecimal.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfloat a = 2.0f - 1.9f;\nfloat b = 1.8f - 1.7f;\nSystem.out.println(a);// 0.100000024\nSystem.out.println(b);// 0.099999905\nSystem.out.println(a == b);// false\n```\n\n----------------------------------------\n\nTITLE: Observer Pattern in Spring's Event-Driven Model\nDESCRIPTION: Implementation of the Observer pattern in Spring's event-driven model with three key components: the event (DemoEvent), the listener (DemoListener), and the publisher (DemoPublisher). This pattern is used for decoupling code in Spring applications.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/spring-design-patterns-summary.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// 定义一个事件,继承自ApplicationEvent并且写相应的构造函数\npublic class DemoEvent extends ApplicationEvent{\n    private static final long serialVersionUID = 1L;\n\n    private String message;\n\n    public DemoEvent(Object source,String message){\n        super(source);\n        this.message = message;\n    }\n\n    public String getMessage() {\n         return message;\n          }\n\n\n// 定义一个事件监听者,实现ApplicationListener接口，重写 onApplicationEvent() 方法；\n@Component\npublic class DemoListener implements ApplicationListener<DemoEvent>{\n\n    //使用onApplicationEvent接收消息\n    @Override\n    public void onApplicationEvent(DemoEvent event) {\n        String msg = event.getMessage();\n        System.out.println(\"接收到的信息是：\"+msg);\n    }\n\n}\n// 发布事件，可以通过ApplicationEventPublisher  的 publishEvent() 方法发布消息。\n@Component\npublic class DemoPublisher {\n\n    @Autowired\n    ApplicationContext applicationContext;\n\n    public void publish(String message){\n        //发布事件\n        applicationContext.publishEvent(new DemoEvent(this, message));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Nth Node from End of List in Java\nDESCRIPTION: Two implementations for removing the nth node from end: 1) Two-pass solution using dummy node 2) One-pass solution using two pointers n nodes apart.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/linkedlist-algorithm-problems.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class Solution {\n  public ListNode removeNthFromEnd(ListNode head, int n) {\n    // 哑结点，哑结点用来简化某些极端情况，例如列表中只含有一个结点，或需要删除列表的头部\n    ListNode dummy = new ListNode(0);\n    // 哑结点指向头结点\n    dummy.next = head;\n    // 保存链表长度\n    int length = 0;\n    ListNode len = head;\n    while (len != null) {\n      length++;\n      len = len.next;\n    }\n    length = length - n;\n    ListNode target = dummy;\n    // 找到 L-n 位置的节点\n    while (length > 0) {\n      target = target.next;\n      length--;\n    }\n    // 把第 (L - n)个结点的 next 指针重新链接至第 (L - n + 2)个结点\n    target.next = target.next.next;\n    return dummy.next;\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class Solution {\n  public ListNode removeNthFromEnd(ListNode head, int n) {\n\n    ListNode dummy = new ListNode(0);\n    dummy.next = head;\n    // 声明两个指向头结点的节点\n    ListNode node1 = dummy, node2 = dummy;\n\n    // node1 节点先跑，node1节点 跑到第 n 个节点的时候,node2 节点开始跑\n    // 当node1 节点跑到最后一个节点时，node2 节点所在的位置就是第 （L-n ） 个节点，也就是倒数第 n+1（L代表总链表长度）\n    while (node1 != null) {\n      node1 = node1.next;\n      if (n < 1 && node1 != null) {\n        node2 = node2.next;\n      }\n      n--;\n    }\n\n    node2.next = node2.next.next;\n\n    return dummy.next;\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: resize Method for Growing ThreadLocalMap in Java\nDESCRIPTION: Implements the table resizing operation for ThreadLocalMap. It doubles the table size, rehashes all valid entries into the new table, skips stale entries, and updates the threshold for future resizing.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprivate void resize() {\n    Entry[] oldTab = table;\n    int oldLen = oldTab.length;\n    int newLen = oldLen * 2;\n    Entry[] newTab = new Entry[newLen];\n    int count = 0;\n\n    for (int j = 0; j < oldLen; ++j) {\n        Entry e = oldTab[j];\n        if (e != null) {\n            ThreadLocal<?> k = e.get();\n            if (k == null) {\n                e.value = null;\n            } else {\n                int h = k.threadLocalHashCode & (newLen - 1);\n                while (newTab[h] != null)\n                    h = nextIndex(h, newLen);\n                newTab[h] = e;\n                count++;\n            }\n        }\n    }\n\n    setThreshold(newLen);\n    size = count;\n    table = newTab;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExecutorService submit() Method with Timeout in Java\nDESCRIPTION: Example of using the submit() method of ExecutorService with a timeout to handle long-running tasks.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-summary.md#2025-04-20_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nExecutorService executorService = Executors.newFixedThreadPool(3);\n\nFuture<String> submit = executorService.submit(() -> {\n    try {\n        Thread.sleep(5000L);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n    return \"abc\";\n});\n\nString s = submit.get(3, TimeUnit.SECONDS);\nSystem.out.println(s);\nexecutorService.shutdown();\n```\n\n----------------------------------------\n\nTITLE: Implementing WebSocket Server in Spring Boot\nDESCRIPTION: WebSocket server implementation using @ServerEndpoint annotation to handle WebSocket connections, messages and sessions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/web-real-time-message-push.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@Slf4j\n@ServerEndpoint(\"/websocket/{userId}\")\npublic class WebSocketServer {\n    private Session session;\n    private static final CopyOnWriteArraySet<WebSocketServer> webSockets = new CopyOnWriteArraySet<>();\n    private static final Map<String, Session> sessionPool = new HashMap<String, Session>();\n    \n    @OnOpen\n    public void onOpen(Session session, @PathParam(value = \"userId\") String userId) {\n        try {\n            this.session = session;\n            webSockets.add(this);\n            sessionPool.put(userId, session);\n            log.info(\"websocket消息: 有新的连接，总数为:\" + webSockets.size());\n        } catch (Exception e) {\n        }\n    }\n    \n    @OnMessage\n    public void onMessage(String message) {\n        log.info(\"websocket消息: 收到客户端消息:\" + message);\n    }\n    \n    public void sendOneMessage(String userId, String message) {\n        Session session = sessionPool.get(userId);\n        if (session != null && session.isOpen()) {\n            try {\n                log.info(\"websocket消: 单点消息:\" + message);\n                session.getAsyncRemote().sendText(message);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Switch Pattern Matching in Java\nDESCRIPTION: This code shows how switch pattern matching can be used to simplify type checking and casting in switch statements, making the code more concise and readable.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java20.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nstatic String formatterPatternSwitch(Object o) {\n    return switch (o) {\n        case Integer i -> String.format(\"int %d\", i);\n        case Long l    -> String.format(\"long %d\", l);\n        case Double d  -> String.format(\"double %f\", d);\n        case String s  -> String.format(\"String %s\", s);\n        default        -> o.toString();\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to ArrayList in Java\nDESCRIPTION: This snippet shows the add method of ArrayList, which appends an element to the end of the list. It demonstrates how ArrayList ensures capacity before adding an element and performs the actual addition.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n/**\n* 将指定的元素追加到此列表的末尾。\n*/\npublic boolean add(E e) {\n    // 加元素之前，先调用ensureCapacityInternal方法\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    // 这里看到ArrayList添加元素的实质就相当于为数组赋值\n    elementData[size++] = e;\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: StampedLock Core Locking Methods\nDESCRIPTION: Implementation of the three main locking mechanisms in StampedLock: writeLock, readLock, and optimistic read.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n// 写锁\npublic long writeLock() {\n    long s, next;  // bypass acquireWrite in fully unlocked case only\n    return ((((s = state) & ABITS) == 0L &&\n             U.compareAndSwapLong(this, STATE, s, next = s + WBIT)) ?\n            next : acquireWrite(false, 0L));\n}\n// 读锁\npublic long readLock() {\n    long s = state, next;  // bypass acquireRead on common uncontended case\n    return ((whead == wtail && (s & ABITS) < RFULL &&\n             U.compareAndSwapLong(this, STATE, s, next = s + RUNIT)) ?\n            next : acquireRead(false, 0L));\n}\n// 乐观读\npublic long tryOptimisticRead() {\n    long s;\n    return (((s = state) & WBIT) == 0L) ? (s & SBITS) : 0L;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThreadPoolExecutor addWorker() Method in Java\nDESCRIPTION: Implementation of the addWorker() method in ThreadPoolExecutor, which handles creating and starting new worker threads in the thread pool.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-summary.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// 全局锁，并发操作必备\nprivate final ReentrantLock mainLock = new ReentrantLock();\n// 跟踪线程池的最大大小，只有在持有全局锁mainLock的前提下才能访问此集合\nprivate int largestPoolSize;\n// 工作线程集合，存放线程池中所有的（活跃的）工作线程，只有在持有全局锁mainLock的前提下才能访问此集合\nprivate final HashSet<Worker> workers = new HashSet<>();\n//获取线程池状态\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; }\n//判断线程池的状态是否为 Running\nprivate static boolean isRunning(int c) {\n    return c < SHUTDOWN;\n}\n\n\n/**\n * 添加新的工作线程到线程池\n * @param firstTask 要执行\n * @param core参数为true的话表示使用线程池的基本大小，为false使用线程池最大大小\n * @return 添加成功就返回true否则返回false\n */\nprivate boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    for (;;) {\n        //这两句用来获取线程池的状态\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN &&\n            ! (rs == SHUTDOWN &&\n               firstTask == null &&\n               ! workQueue.isEmpty()))\n            return false;\n\n        for (;;) {\n           //获取线程池中工作的线程的数量\n            int wc = workerCountOf(c);\n            // core参数为false的话表明队列也满了，线程池大小变为 maximumPoolSize\n            if (wc >= CAPACITY ||\n                wc >= (core ? corePoolSize : maximumPoolSize))\n                return false;\n           //原子操作将workcount的数量加1\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            // 如果线程的状态改变了就再次执行上述操作\n            c = ctl.get();\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n    }\n    // 标记工作线程是否启动成功\n    boolean workerStarted = false;\n    // 标记工作线程是否创建成功\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n\n        w = new Worker(firstTask);\n        final Thread t = w.thread;\n        if (t != null) {\n          // 加锁\n            final ReentrantLock mainLock = this.mainLock;\n            mainLock.lock();\n            try {\n               //获取线程池状态\n                int rs = runStateOf(ctl.get());\n               //rs < SHUTDOWN 如果线程池状态依然为RUNNING,并且线程的状态是存活的话，就会将工作线程添加到工作线程集合中\n              //(rs=SHUTDOWN && firstTask == null)如果线程池状态小于STOP，也就是RUNNING或者SHUTDOWN状态下，同时传入的任务实例firstTask为null，则需要添加到工作线程集合和启动新的Worker\n               // firstTask == null证明只新建线程而不执行任务\n                if (rs < SHUTDOWN ||\n                    (rs == SHUTDOWN && firstTask == null)) {\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    workers.add(w);\n                   //更新当前工作线程的最大容量\n                    int s = workers.size();\n                    if (s > largestPoolSize)\n                        largestPoolSize = s;\n                  // 工作线程是否启动成功\n                    workerAdded = true;\n                }\n            } finally {\n                // 释放锁\n                mainLock.unlock();\n            }\n            //// 如果成功添加工作线程，则调用Worker内部的线程实例t的Thread#start()方法启动真实的线程实例\n            if (workerAdded) {\n                t.start();\n              /// 标记线程启动成功\n                workerStarted = true;\n            }\n        }\n    } finally {\n       // 线程启动失败，需要从工作线程中移除对应的Worker\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    return workerStarted;\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with instanceof and switch in Java 23\nDESCRIPTION: Demonstrates the extended pattern matching capabilities for primitive types in instanceof and switch statements, which now support byte, short, char, int, long, float, double, and boolean.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java22-23.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// 传统写法\nif (i >= -128 && i <= 127) {\n    byte b = (byte)i;\n}\n\n// 使用 instanceof\nif (i instanceof byte b) {\n    // Use b\n}\n```\n\n----------------------------------------\n\nTITLE: Using ApplicationContext Factory Pattern in Spring\nDESCRIPTION: Example of using Spring's ApplicationContext implementation of the Factory pattern to create a bean object. This demonstrates the FileSystemXmlApplicationContext implementation to load context definition from an XML file in the file system.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/spring-design-patterns-summary.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.FileSystemXmlApplicationContext;\n\npublic class App {\n  public static void main(String[] args) {\n    ApplicationContext context = new FileSystemXmlApplicationContext(\n        \"C:/work/IOC Containers/springframework.applicationcontext/src/main/resources/bean-factory-config.xml\");\n\n    HelloApplicationContext obj = (HelloApplicationContext) context.getBean(\"helloApplicationContext\");\n    obj.getMsg();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SHA-256 Hashing Algorithm in Java\nDESCRIPTION: A Java implementation of the SHA-256 hashing algorithm without salt. This code creates a SHA-256 hash of a string and converts the result to a lowercase hexadecimal string. SHA-256 provides better security than MD5 with longer hash values and stronger collision resistance.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/security/encryption-algorithms.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nString originalString = \"Java学习 + 面试指南：javaguide.cn\";\n// 创建SHA-256摘要对象\nMessageDigest messageDigest = MessageDigest.getInstance(\"SHA-256\");\nmessageDigest.update(originalString.getBytes());\n// 计算哈希值\nbyte[] result = messageDigest.digest();\n// 将哈希值转换为十六进制字符串\nString hexString = new HexBinaryAdapter().marshal(result);\nSystem.out.println(\"Original String: \" + originalString);\nSystem.out.println(\"SHA-256 Hash: \" + hexString.toLowerCase());\n```\n\n----------------------------------------\n\nTITLE: HashMap Class Attributes Definition\nDESCRIPTION: Core attributes and constants defined in HashMap class including capacity, load factor and tree conversion thresholds.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/hashmap-source-code.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Cloneable, Serializable {\n    private static final long serialVersionUID = 362498820763181265L;\n    static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;\n    static final int MAXIMUM_CAPACITY = 1 << 30;\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n    static final int TREEIFY_THRESHOLD = 8;\n    static final int UNTREEIFY_THRESHOLD = 6;\n    static final int MIN_TREEIFY_CAPACITY = 64;\n    transient Node<k,v>[] table;\n    transient Set<map.entry<k,v>> entrySet;\n    transient int size;\n    transient int modCount;\n    int threshold;\n    final float loadFactor;\n}\n```\n\n----------------------------------------\n\nTITLE: 使用Curator获取和更新节点数据\nDESCRIPTION: 展示如何获取节点数据内容以及如何更新节点的数据内容。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nzkClient.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(\"/node1/00001\",\"java\".getBytes());\nzkClient.getData().forPath(\"/node1/00001\");//获取节点的数据内容\nzkClient.setData().forPath(\"/node1/00001\",\"c++\".getBytes());//更新节点数据内容\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Integer Caching in Java\nDESCRIPTION: This code snippet shows how Integer objects are cached for values between -128 and 127, resulting in the same object being returned for these values.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    return new Integer(i);\n}\nprivate static class IntegerCache {\n    static final int low = -128;\n    static final int high;\n    static {\n        // high value may be configured by property\n        int h = 127;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Eden Space Memory Allocation in Java\nDESCRIPTION: Code example demonstrating memory allocation in Eden space of JVM heap with specific allocation size to test garbage collection behavior.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-garbage-collection.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class GCTest {\n  public static void main(String[] args) {\n    byte[] allocation1, allocation2;\n    allocation1 = new byte[30900*1024];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL EXPLAIN Example with Subquery\nDESCRIPTION: Demonstrates a practical example of using EXPLAIN to analyze a SELECT query with a subquery, showing how MySQL processes nested queries and uses indexes.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-query-execution-plan.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nexplain SELECT * FROM dept_emp WHERE emp_no IN (SELECT emp_no FROM dept_emp GROUP BY emp_no HAVING COUNT(emp_no)>1);\n```\n\n----------------------------------------\n\nTITLE: Table Operations in SQL\nDESCRIPTION: Explains SQL commands for table operations including creating, modifying, and deleting tables, as well as table options and structure modifications.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/a-thousand-lines-of-mysql-study-notes.md#2025-04-20_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\n/* 表的操作  */\n-- 创建表\n    CREATE [TEMPORARY] TABLE[ IF NOT EXISTS] [库名.]表名 ( 表的结构定义 )[ 表选项]\n        每个字段必须有数据类型\n        最后一个字段后不能有逗号\n        TEMPORARY 临时表，会话结束时表自动消失\n        对于字段的定义：\n            字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT 'string']\n-- 表选项\n    -- 字符集\n        CHARSET = charset_name\n        如果表没有设定，则使用数据库字符集\n    -- 存储引擎\n        ENGINE = engine_name\n        表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同\n        常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive\n        不同的引擎在保存表的结构和数据时采用不同的方式\n        MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引\n        InnoDB表文件含义：.frm表定义，表空间数据和日志文件\n        SHOW ENGINES -- 显示存储引擎的状态信息\n        SHOW ENGINE 引擎名 {LOGS|STATUS} -- 显示存储引擎的日志或状态信息\n    -- 自增起始数\n    \tAUTO_INCREMENT = 行数\n    -- 数据文件目录\n        DATA DIRECTORY = '目录'\n    -- 索引文件目录\n        INDEX DIRECTORY = '目录'\n    -- 表注释\n        COMMENT = 'string'\n    -- 分区选项\n        PARTITION BY ... (详细见手册)\n-- 查看所有表\n    SHOW TABLES[ LIKE 'pattern']\n    SHOW TABLES FROM  库名\n-- 查看表结构\n    SHOW CREATE TABLE 表名 （信息更详细）\n    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE 'PATTERN']\n    SHOW TABLE STATUS [FROM db_name] [LIKE 'pattern']\n-- 修改表\n    -- 修改表本身的选项\n        ALTER TABLE 表名 表的选项\n        eg: ALTER TABLE 表名 ENGINE=MYISAM;\n    -- 对表进行重命名\n        RENAME TABLE 原表名 TO 新表名\n        RENAME TABLE 原表名 TO 库名.表名 （可将表移动到另一个数据库）\n        -- RENAME可以交换两个表名\n    -- 修改表的字段机构（13.1.2. ALTER TABLE语法）\n        ALTER TABLE 表名 操作名\n        -- 操作名\n            ADD[ COLUMN] 字段定义       -- 增加字段\n                AFTER 字段名          -- 表示增加在该字段名后面\n                FIRST               -- 表示增加在第一个\n            ADD PRIMARY KEY(字段名)   -- 创建主键\n            ADD UNIQUE [索引名] (字段名)-- 创建唯一索引\n            ADD INDEX [索引名] (字段名) -- 创建普通索引\n            DROP[ COLUMN] 字段名      -- 删除字段\n            MODIFY[ COLUMN] 字段名 字段属性     -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)\n            CHANGE[ COLUMN] 原字段名 新字段名 字段属性      -- 支持对字段名修改\n            DROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)\n            DROP INDEX 索引名 -- 删除索引\n            DROP FOREIGN KEY 外键    -- 删除外键\n-- 删除表\n    DROP TABLE[ IF EXISTS] 表名 ...\n-- 清空表数据\n    TRUNCATE [TABLE] 表名\n-- 复制表结构\n    CREATE TABLE 表名 LIKE 要复制的表名\n-- 复制表结构和数据\n    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名\n-- 检查表是否有错误\n    CHECK TABLE tbl_name [, tbl_name] ... [option] ...\n-- 优化表\n    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n-- 修复表\n    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]\n-- 分析表\n    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Index in MongoDB\nDESCRIPTION: Example of creating a compound index on the gender and user_name fields in a MongoDB collection.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mongodb/mongodb-questions-02.md#2025-04-20_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\ndb.users.ensureIndex({gender:1,user_name:1})\n```\n\n----------------------------------------\n\nTITLE: Referencing Managed Dependencies in Child Modules\nDESCRIPTION: Demonstrates how to reference dependencies in child modules that are defined in the parent's dependencyManagement section. This allows omitting version numbers in child modules.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-best-practices.md#2025-04-20_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter</artifactId>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Java Thread Information using JMX\nDESCRIPTION: This code snippet demonstrates how to use Java Management Extensions (JMX) to obtain information about threads in a Java program. It retrieves thread details such as thread ID and name for all running threads.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-01.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MultiThread {\n\tpublic static void main(String[] args) {\n\t\t// 获取 Java 线程管理 MXBean\n\tThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();\n\t\t// 不需要获取同步的 monitor 和 synchronizer 信息，仅获取线程和线程堆栈信息\n\t\tThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(false, false);\n\t\t// 遍历线程信息，仅打印线程 ID 和线程名称信息\n\t\tfor (ThreadInfo threadInfo : threadInfos) {\n\t\t\tSystem.out.println(\"[\" + threadInfo.getThreadId() + \"] \" + threadInfo.getThreadName());\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Reversing a Linked List in Java\nDESCRIPTION: This algorithm reverses a linked list by iteratively changing pointer directions. It uses three pointers to track the current node, previous node, and next node during traversal. The solution has O(n) time complexity and O(1) space complexity as it performs the reversal in-place.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n/*\npublic class ListNode {\n    int val;\n    ListNode next = null;\n\n    ListNode(int val) {\n        this.val = val;\n    }\n}*/\npublic class Solution {\n    public ListNode ReverseList(ListNode head) {\n       ListNode next = null;\n       ListNode pre = null;\n        while (head != null) {\n              //保存要反转到头来的那个节点\n               next = head.next;\n               //要反转的那个节点指向已经反转的上一个节点\n               head.next = pre;\n               //上一个已经反转到头部的节点\n               pre = head;\n               //一直向链表尾走\n               head = next;\n        }\n        return pre;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 使用AtomicIntegerArray进行数组元素的原子操作\nDESCRIPTION: 演示了如何使用AtomicIntegerArray类对整数数组进行原子操作，包括获取和设置元素值、自增、添加等。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/atomic-classes.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nint[] nums = {1, 2, 3, 4, 5, 6};\nAtomicIntegerArray atomicArray = new AtomicIntegerArray(nums);\n\nSystem.out.println(\"Initial values in AtomicIntegerArray:\");\nfor (int j = 0; j < nums.length; j++) {\n    System.out.print(\"Index \" + j + \": \" + atomicArray.get(j) + \" \");\n}\n\nint tempValue = atomicArray.getAndSet(0, 2);\nSystem.out.println(\"\\nAfter getAndSet(0, 2):\");\nSystem.out.println(\"Returned value: \" + tempValue);\nfor (int j = 0; j < atomicArray.length(); j++) {\n    System.out.print(\"Index \" + j + \": \" + atomicArray.get(j) + \" \");\n}\n\ntempValue = atomicArray.getAndIncrement(0);\nSystem.out.println(\"\\nAfter getAndIncrement(0):\");\nSystem.out.println(\"Returned value: \" + tempValue);\nfor (int j = 0; j < atomicArray.length(); j++) {\n    System.out.print(\"Index \" + j + \": \" + atomicArray.get(j) + \" \");\n}\n\ntempValue = atomicArray.getAndAdd(0, 5);\nSystem.out.println(\"\\nAfter getAndAdd(0, 5):\");\nSystem.out.println(\"Returned value: \" + tempValue);\nfor (int j = 0; j < atomicArray.length(); j++) {\n    System.out.print(\"Index \" + j + \": \" + atomicArray.get(j) + \" \");\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Characters to a File with FileWriter in Java\nDESCRIPTION: Shows how to write character data to a file using FileWriter.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/io-basis.md#2025-04-20_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\ntry (Writer output = new FileWriter(\"output.txt\")) {\n    output.write(\"你好，我是Guide。\");\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MD5 Hashing Algorithm in Java\nDESCRIPTION: A Java implementation of the MD5 hashing algorithm without salt. This code creates an MD5 hash of a string and converts the result to a lowercase hexadecimal string. Note that MD5 is not recommended for security-sensitive applications due to its vulnerabilities.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/security/encryption-algorithms.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nString originalString = \"Java学习 + 面试指南：javaguide.cn\";\n// 创建MD5摘要对象\nMessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\nmessageDigest.update(originalString.getBytes(StandardCharsets.UTF_8));\n// 计算哈希值\nbyte[] result = messageDigest.digest();\n// 将哈希值转换为十六进制字符串\nString hexString = new HexBinaryAdapter().marshal(result);\nSystem.out.println(\"Original String: \" + originalString);\nSystem.out.println(\"MD5 Hash: \" + hexString.toLowerCase());\n```\n\n----------------------------------------\n\nTITLE: Applying Shared and Exclusive Locks in MySQL Queries\nDESCRIPTION: These SQL snippets show how to explicitly apply shared (S) and exclusive (X) locks in MySQL queries. It includes examples for both MySQL 5.7 and 8.0 versions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-questions-01.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n# Shared lock (MySQL 5.7 and 8.0)\nSELECT ... LOCK IN SHARE MODE;\n# Shared lock (MySQL 8.0)\nSELECT ... FOR SHARE;\n# Exclusive lock\nSELECT ... FOR UPDATE;\n```\n\n----------------------------------------\n\nTITLE: LinkedList Element Retrieval Methods\nDESCRIPTION: Methods for accessing elements from the LinkedList, including first, last, and indexed element retrieval.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedlist-source-code.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic E getFirst() {\n    final Node<E> f = first;\n    if (f == null)\n        throw new NoSuchElementException();\n    return f.item;\n}\n\npublic E getLast() {\n    final Node<E> l = last;\n    if (l == null)\n        throw new NoSuchElementException();\n    return l.item;\n}\n\npublic E get(int index) {\n    checkElementIndex(index);\n    return node(index).item;\n}\n```\n\n----------------------------------------\n\nTITLE: 使用AtomicReference进行引用类型的原子操作\nDESCRIPTION: 展示了如何使用AtomicReference类对引用类型进行原子操作，包括获取和设置引用、条件更新等。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/atomic-classes.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nAtomicReference<Person> ar = new AtomicReference<>(new Person(\"SnailClimb\", 22));\n\nSystem.out.println(\"Initial Person: \" + ar.get().toString());\n\nPerson updatePerson = new Person(\"Daisy\", 20);\nar.compareAndSet(ar.get(), updatePerson);\n\nSystem.out.println(\"Updated Person: \" + ar.get().toString());\n\nPerson anotherUpdatePerson = new Person(\"John\", 30);\nboolean isUpdated = ar.compareAndSet(updatePerson, anotherUpdatePerson);\n\nSystem.out.println(\"Second Update Success: \" + isUpdated);\nSystem.out.println(\"Final Person: \" + ar.get().toString());\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from LinkedList using Iterator in Java\nDESCRIPTION: Shows how to use an iterator to remove elements from a LinkedList. It demonstrates the use of the removeIf method and provides an example of removing null elements.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedlist-source-code.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nLinkedList<String> list = new LinkedList<>();\nlist.add(\"apple\");\nlist.add(null);\nlist.add(\"banana\");\n\n//  Collection 接口的 removeIf 方法底层依然是基于迭代器\nlist.removeIf(Objects::isNull);\n\nfor (String fruit : list) {\n    System.out.println(fruit);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Service Implementations in Java\nDESCRIPTION: Demonstrates the load methods of ServiceLoader, including overloaded versions and the use of thread context classloader.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/spi.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static <S> ServiceLoader<S> load(Class<S> service) {\n    ClassLoader cl = Thread.currentThread().getContextClassLoader();\n    return ServiceLoader.load(service, cl);\n}\n\npublic static <S> ServiceLoader<S> load(Class<S> service,\n                                        ClassLoader loader) {\n    return new ServiceLoader<>(service, loader);\n}\n\nprivate ServiceLoader(Class<S> svc, ClassLoader cl) {\n    service = Objects.requireNonNull(svc, \"Service interface cannot be null\");\n    loader = (cl == null) ? ClassLoader.getSystemClassLoader() : cl;\n    acc = (System.getSecurityManager() != null) ? AccessController.getContext() : null;\n    reload();\n}\n\npublic void reload() {\n    providers.clear();\n    lookupIterator = new LazyIterator(service, loader);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Implementation of ServiceLoader in Java\nDESCRIPTION: Provides a simplified custom implementation of ServiceLoader to demonstrate the core concepts and flow of the SPI mechanism.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/spi.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage edu.jiangxuan.up.service;\n\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.lang.reflect.Constructor;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.List;\n\npublic class MyServiceLoader<S> {\n\n    // 对应的接口 Class 模板\n    private final Class<S> service;\n\n    // 对应实现类的 可以有多个，用 List 进行封装\n    private final List<S> providers = new ArrayList<>();\n\n    // 类加载器\n    private final ClassLoader classLoader;\n\n    // 暴露给外部使用的方法，通过调用这个方法可以开始加载自己定制的实现流程。\n    public static <S> MyServiceLoader<S> load(Class<S> service) {\n        return new MyServiceLoader<>(service);\n    }\n\n    // 构造方法私有化\n    private MyServiceLoader(Class<S> service) {\n        this.service = service;\n        this.classLoader = Thread.currentThread().getContextClassLoader();\n        doLoad();\n    }\n\n    // 关键方法，加载具体实现类的逻辑\n    private void doLoad() {\n        try {\n            // 读取所有 jar 包里面 META-INF/services 包下面的文件，这个文件名就是接口名，然后文件里面的内容就是具体的实现类的路径加全类名\n            Enumeration<URL> urls = classLoader.getResources(\"META-INF/services/\" + service.getName());\n            // 挨个遍历取到的文件\n            while (urls.hasMoreElements()) {\n                // 取出当前的文件\n                URL url = urls.nextElement();\n                System.out.println(\"File = \" + url.getPath());\n                // 建立链接\n                URLConnection urlConnection = url.openConnection();\n                urlConnection.setUseCaches(false);\n                // 获取文件输入流\n                InputStream inputStream = urlConnection.getInputStream();\n                // 从文件输入流获取缓存\n                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n                // 从文件内容里面得到实现类的全类名\n                String className = bufferedReader.readLine();\n\n                while (className != null) {\n                    // 通过反射拿到实现类的实例\n                    Class<?> clazz = Class.forName(className, false, classLoader);\n                    // 如果声明的接口跟这个具体的实现类是属于同一类型，（可以理解为Java的一种多态，接口跟实现类、父类和子类等等这种关系。）则构造实例\n                    if (service.isAssignableFrom(clazz)) {\n                        Constructor<? extends S> constructor = (Constructor<? extends S>) clazz.getConstructor();\n                        S instance = constructor.newInstance();\n                        // 把当前构造的实例对象添加到 Provider的列表里面\n                        providers.add(instance);\n                    }\n                    // 继续读取下一行的实现类，可以有多个实现类，只需要换行就可以了。\n                    className = bufferedReader.readLine();\n                }\n            }\n        } catch (Exception e) {\n            System.out.println(\"读取文件异常。。。\");\n        }\n    }\n\n    // 返回spi接口对应的具体实现类列表\n    public List<S> getProviders() {\n        return providers;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LoggerService for SPI Management in Java\nDESCRIPTION: Creates the LoggerService class to manage SPI implementations and provide functionality to service consumers.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/spi.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npackage edu.jiangxuan.up.spi;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ServiceLoader;\n\npublic class LoggerService {\n    private static final LoggerService SERVICE = new LoggerService();\n\n    private final Logger logger;\n\n    private final List<Logger> loggerList;\n\n    private LoggerService() {\n        ServiceLoader<Logger> loader = ServiceLoader.load(Logger.class);\n        List<Logger> list = new ArrayList<>();\n        for (Logger log : loader) {\n            list.add(log);\n        }\n        // LoggerList is all ServiceProviders\n        loggerList = list;\n        if (!list.isEmpty()) {\n            // Logger only takes one\n            logger = list.get(0);\n        } else {\n            logger = null;\n        }\n    }\n\n    public static LoggerService getService() {\n        return SERVICE;\n    }\n\n    public void info(String msg) {\n        if (logger == null) {\n            System.out.println(\"info: No Logger service provider found\");\n        } else {\n            logger.info(msg);\n        }\n    }\n\n    public void debug(String msg) {\n        if (loggerList.isEmpty()) {\n            System.out.println(\"debug: No Logger service provider found\");\n        }\n        loggerList.forEach(log -> log.debug(msg));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to HashSet in Java\nDESCRIPTION: Shows the implementation of the add method in HashSet, which internally uses HashMap to store elements and check for duplicates.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\n// Returns: true if this set did not already contain the specified element\n// 返回值：当 set 中没有包含 add 的元素时返回真\npublic boolean add(E e) {\n        return map.put(e, PRESENT)==null;\n}\n```\n\n----------------------------------------\n\nTITLE: Value Passing with Primitive Types in Java\nDESCRIPTION: Demonstrates how Java handles primitive type parameters through value passing, showing that changes to parameters inside methods don't affect the original variables.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/why-there-only-value-passing-in-java.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic static void main(String[] args) {\n    int num1 = 10;\n    int num2 = 20;\n    swap(num1, num2);\n    System.out.println(\"num1 = \" + num1);\n    System.out.println(\"num2 = \" + num2);\n}\n\npublic static void swap(int a, int b) {\n    int temp = a;\n    a = b;\n    b = temp;\n    System.out.println(\"a = \" + a);\n    System.out.println(\"b = \" + b);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Profiles for Different Environments\nDESCRIPTION: Shows how to configure Maven profiles for different environments (development and production). This allows building the project with environment-specific settings.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-best-practices.md#2025-04-20_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<profiles>\n  <profile>\n    <id>development</id>\n    <activation>\n      <activeByDefault>true</activeByDefault>\n    </activation>\n    <properties>\n      <environment>dev</environment>\n    </properties>\n  </profile>\n  <profile>\n    <id>production</id>\n    <properties>\n      <environment>prod</environment>\n    </properties>\n  </profile>\n</profiles>\n```\n\n----------------------------------------\n\nTITLE: Performance Comparison Between Virtual and Platform Threads\nDESCRIPTION: Performance test comparing virtual threads with platform threads, measuring thread count and processing time for identical tasks.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/virtual-thread.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class VirtualThreadTest {\n    static List<Integer> list = new ArrayList<>();\n    public static void main(String[] args) {\n        // 开启线程 统计平台线程数\n        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);\n        scheduledExecutorService.scheduleAtFixedRate(() -> {\n            ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();\n            ThreadInfo[] threadInfo = threadBean.dumpAllThreads(false, false);\n            updateMaxThreadNum(threadInfo.length);\n        }, 10, 10, TimeUnit.MILLISECONDS);\n\n        long start = System.currentTimeMillis();\n        // 虚拟线程\n        ExecutorService executor =  Executors.newVirtualThreadPerTaskExecutor();\n        // 使用平台线程\n        // ExecutorService executor =  Executors.newFixedThreadPool(200);\n        for (int i = 0; i < 10000; i++) {\n            executor.submit(() -> {\n                try {\n                    // 线程睡眠 0.5 s，模拟业务处理\n                    TimeUnit.MILLISECONDS.sleep(500);\n                } catch (InterruptedException ignored) {\n                }\n            });\n        }\n        executor.close();\n        System.out.println(\"max：\" + list.get(0) + \" platform thread/os thread\");\n        System.out.printf(\"totalMillis：%dms\\n\", System.currentTimeMillis() - start);\n\n\n    }\n    // 更新创建的平台最大线程数\n    private static void updateMaxThreadNum(int num) {\n        if (list.isEmpty()) {\n            list.add(num);\n        } else {\n            Integer integer = list.get(0);\n            if (num > integer) {\n                list.add(0, num);\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DelayQueue Example\nDESCRIPTION: Example showing how to use DelayQueue to schedule and execute delayed tasks in order of their execution time.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/delayqueue-source-code.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nDelayQueue<DelayedTask> delayQueue = new DelayQueue<>();\n\ndelayQueue.add(new DelayedTask(2000, () -> System.out.println(\"Task 2\")));\ndelayQueue.add(new DelayedTask(1000, () -> System.out.println(\"Task 1\")));\ndelayQueue.add(new DelayedTask(3000, () -> System.out.println(\"Task 3\")));\n\nwhile (!delayQueue.isEmpty()) {\n  DelayedTask task = delayQueue.take();\n  if (task != null) {\n    task.execute();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sealed Classes in Java 15\nDESCRIPTION: Shows how to use sealed classes to restrict which classes can inherit from them, providing more control over class hierarchies.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java14-15.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic abstract sealed class Person\n    permits Employee, Manager {\n\n    //...\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic final class Employee extends Person {\n}\n\npublic non-sealed class Manager extends Person {\n}\n```\n\n----------------------------------------\n\nTITLE: Method Implementation with AOP\nDESCRIPTION: Example showing simplified method implementation using AOP logging annotation\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/ioc-and-aop.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Log(description = \"method1\",methodType = MethodType.INSERT)\npublic CommonResponse<Object> method1() {\n      // 业务逻辑\n      xxService.method1();\n      // 省略具体的业务处理逻辑\n      return CommonResponse.success();\n}\n```\n\n----------------------------------------\n\nTITLE: Timed Poll Operation in ArrayBlockingQueue\nDESCRIPTION: Implementation of poll operation that waits up to a specified timeout for elements to become available.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npublic E poll(long timeout, TimeUnit unit) throws InterruptedException {\n        long nanos = unit.toNanos(timeout);\n        final ReentrantLock lock = this.lock;\n        lock.lockInterruptibly();\n        try {\n            while (count == 0) {\n                if (nanos <= 0)\n                    return null;\n                nanos = notEmpty.awaitNanos(nanos);\n            }\n            return dequeue();\n        } finally {\n            lock.unlock();\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Reading File Data with FileChannel in Java NIO\nDESCRIPTION: Demonstrates how to use FileChannel to read data from a file into a ByteBuffer. This example shows the basic steps of creating a channel, allocating a buffer, and reading data.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/nio-basis.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nRandomAccessFile reader = new RandomAccessFile(\"/Users/guide/Documents/test_read.in\", \"r\"))\nFileChannel channel = reader.getChannel();\nByteBuffer buffer = ByteBuffer.allocate(1024);\nchannel.read(buffer);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'this' keyword usage in Java\nDESCRIPTION: This code snippet shows how to use the 'this' keyword to reference the current instance of a class in Java. It demonstrates accessing instance variables and calling methods using 'this'.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-keyword-summary.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nclass Manager {\n    Employees[] employees;\n    void manageEmployees() {\n        int totalEmp = this.employees.length;\n        System.out.println(\"Total employees: \" + totalEmp);\n        this.report();\n    }\n    void report() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Using DataInputStream for Reading Primitive Data Types in Java\nDESCRIPTION: Illustrates how to use DataInputStream to read specific primitive data types from a file.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/io-basis.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nFileInputStream fileInputStream = new FileInputStream(\"input.txt\");\nDataInputStream dataInputStream = new DataInputStream(fileInputStream);\ndataInputStream.readBoolean();\ndataInputStream.readInt();\ndataInputStream.readUTF();\n```\n\n----------------------------------------\n\nTITLE: Using drainTo() Method with ArrayBlockingQueue in Java\nDESCRIPTION: Demonstrates the use of drainTo() method to transfer all elements from an ArrayBlockingQueue to a List in a single operation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class DrainToExample {\n\n    public static void main(String[] args) {\n        // 创建一个大小为 5 的 ArrayBlockingQueue\n        ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(5);\n\n        // 向队列中添加元素\n        queue.add(1);\n        queue.add(2);\n        queue.add(3);\n        queue.add(4);\n        queue.add(5);\n\n        // 创建一个 List，用于存储从队列中取出的元素\n        List<Integer> list = new ArrayList<>();\n\n        // 从队列中取出所有元素，并添加到 List 中\n        queue.drainTo(list);\n\n        // 输出 List 中的元素\n        System.out.println(list);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Primitive Data Types with DataOutputStream in Java\nDESCRIPTION: Demonstrates how to use DataOutputStream to write specific primitive data types to a file.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/io-basis.md#2025-04-20_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nFileOutputStream fileOutputStream = new FileOutputStream(\"out.txt\");\nDataOutputStream dataOutputStream = new DataOutputStream(fileOutputStream);\ndataOutputStream.writeBoolean(true);\ndataOutputStream.writeByte(1);\n```\n\n----------------------------------------\n\nTITLE: Implementing Element Existence Check in ArrayBlockingQueue in Java\nDESCRIPTION: This code shows the implementation of the contains(Object o) method in ArrayBlockingQueue which checks if a specified element exists in the queue. It uses a ReentrantLock for thread safety and traverses the internal array from takeIndex to putIndex to find the element.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_20\n\nLANGUAGE: java\nCODE:\n```\npublic boolean contains(Object o) {\n    //若目标元素为空，则直接返回 false\n    if (o == null) return false;\n    //获取当前队列的元素数组\n    final Object[] items = this.items;\n    //加锁\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        // 如果队列非空\n        if (count > 0) {\n            final int putIndex = this.putIndex;\n            //从队列头部开始遍历\n            int i = takeIndex;\n            do {\n                if (o.equals(items[i]))\n                    return true;\n                if (++i == items.length)\n                    i = 0;\n            } while (i != putIndex);\n        }\n        return false;\n    } finally {\n        //释放锁\n        lock.unlock();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using EXPLAIN to Analyze SQL Query Performance in MySQL\nDESCRIPTION: This SQL snippet shows how to use the EXPLAIN command to analyze the execution plan of a SELECT query in MySQL. It demonstrates the output format and various columns returned by EXPLAIN.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-questions-01.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN SELECT `score`,`name` FROM `cus_order` ORDER BY `score` DESC;\n```\n\n----------------------------------------\n\nTITLE: Implementing Iterator for ServiceLoader in Java\nDESCRIPTION: Shows the implementation of the iterator method in ServiceLoader, which allows iteration over service providers.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/spi.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic Iterator<S> iterator() {\n    return new Iterator<S>() {\n\n        Iterator<Map.Entry<String, S>> knownProviders\n                = providers.entrySet().iterator();\n\n        public boolean hasNext() {\n            if (knownProviders.hasNext())\n                return true;\n            return lookupIterator.hasNext(); // 调用 LazyIterator\n        }\n\n        public S next() {\n            if (knownProviders.hasNext())\n                return knownProviders.next().getValue();\n            return lookupIterator.next(); // 调用 LazyIterator\n        }\n\n        public void remove() {\n            throw new UnsupportedOperationException();\n        }\n\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MySQL Operations in SQL\nDESCRIPTION: Demonstrates basic MySQL operations including starting the service, connecting to the server, and showing system information.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/a-thousand-lines-of-mysql-study-notes.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n/* Windows服务 */\n-- 启动 MySQL\n\t\t\tnet start mysql\n-- 创建Windows服务\n\t\t\t\tsc create mysql binPath= mysqld_bin_path(注意：等号与值之间有空格)\n/* 连接与断开服务器 */\n-- 连接 MySQL\n\t\t\t\tmysql -h 地址 -P 端口 -u 用户名 -p 密码\n-- 显示哪些线程正在运行\n\t\t\t\tSHOW PROCESSLIST\n-- 显示系统变量信息\n\t\t\t\tSHOW VARIABLES\n```\n\n----------------------------------------\n\nTITLE: Java ClassFile Structure Definition\nDESCRIPTION: Definition of the ClassFile structure that specifies the format of .class files according to the Java Virtual Machine specification. It includes all major components like magic number, version numbers, constant pool, access flags, fields, methods and attributes.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/class-file-structure.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nClassFile {\n    u4             magic; //Class 文件的标志\n    u2             minor_version;//Class 的小版本号\n    u2             major_version;//Class 的大版本号\n    u2             constant_pool_count;//常量池的数量\n    cp_info        constant_pool[constant_pool_count-1];//常量池\n    u2             access_flags;//Class 的访问标记\n    u2             this_class;//当前类\n    u2             super_class;//父类\n    u2             interfaces_count;//接口数量\n    u2             interfaces[interfaces_count];//一个类可以实现多个接口\n    u2             fields_count;//字段数量\n    field_info     fields[fields_count];//一个类可以有多个字段\n    u2             methods_count;//方法数量\n    method_info    methods[methods_count];//一个类可以有个多个方法\n    u2             attributes_count;//此类的属性表中的属性数\n    attribute_info attributes[attributes_count];//属性表集合\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Out of Memory Errors in Java\nDESCRIPTION: Configures JVM behavior when encountering OutOfMemoryErrors, including heap dump generation and custom actions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-parameters-intro.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n-XX:+HeapDumpOnOutOfMemoryError\n-XX:HeapDumpPath=./java_pid<pid>.hprof\n-XX:OnOutOfMemoryError=\"< cmd args >;< cmd args >\"\n-XX:+UseGCOverheadLimit\n```\n\n----------------------------------------\n\nTITLE: Using BigDecimal for Precise Floating-Point Calculations in Java\nDESCRIPTION: This example shows how to use BigDecimal to perform precise floating-point calculations without losing precision.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nBigDecimal a = new BigDecimal(\"1.0\");\nBigDecimal b = new BigDecimal(\"1.00\");\nBigDecimal c = new BigDecimal(\"0.8\");\n\nBigDecimal x = a.subtract(c);\nBigDecimal y = b.subtract(c);\n\nSystem.out.println(x); /* 0.2 */\nSystem.out.println(y); /* 0.20 */\n// 比较内容，不是比较值\nSystem.out.println(Objects.equals(x, y)); /* false */\n// 比较值相等用相等compareTo，相等返回0\nSystem.out.println(0 == x.compareTo(y)); /* true */\n```\n\n----------------------------------------\n\nTITLE: AtomicStampedReference compareAndSet Implementation\nDESCRIPTION: Implementation of compareAndSet in AtomicStampedReference to solve ABA problem using version stamps.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic boolean compareAndSet(V   expectedReference,\n                             V   newReference,\n                             int expectedStamp,\n                             int newStamp) {\n    Pair<V> current = pair;\n    return\n        expectedReference == current.reference &&\n        expectedStamp == current.stamp &&\n        ((newReference == current.reference &&\n          newStamp == current.stamp) ||\n         casPair(current, Pair.of(newReference, newStamp)));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FIRST_VALUE() and LAST_VALUE() Window Functions in MySQL\nDESCRIPTION: Shows how to use FIRST_VALUE() and LAST_VALUE() functions to retrieve the first and last values within a window of rows, respectively.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col1, col2, FIRST_VALUE(col2) OVER (PARTITION BY col1 ORDER BY col2) AS first_val,\n                 LAST_VALUE(col2) OVER (PARTITION BY col1 ORDER BY col2) AS last_val\nFROM table;\n```\n\n----------------------------------------\n\nTITLE: Accessing ClassLoader in Java\nDESCRIPTION: Demonstrates how to access and print the class loader hierarchy for a given class.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/classloader.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class PrintClassLoaderTree {\n\n    public static void main(String[] args) {\n\n        ClassLoader classLoader = PrintClassLoaderTree.class.getClassLoader();\n\n        StringBuilder split = new StringBuilder(\"|--\");\n        boolean needContinue = true;\n        while (needContinue){\n            System.out.println(split.toString() + classLoader);\n            if(classLoader == null){\n                needContinue = false;\n            }else{\n                classLoader = classLoader.getParent();\n                split.insert(0, \"\\t\");\n            }\n        }\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Element from Skip List in Java\nDESCRIPTION: Implements the delete method to remove an element from the skip list, updating pointers and adjusting levels as needed.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-skiplist.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic void delete(int value) {\n    Node p = h;\n    Node[] updateArr = new Node[levelCount];\n    for (int i = levelCount - 1; i >= 0; i--) {\n        while (p.forwards[i] != null && p.forwards[i].data < value) {\n            p = p.forwards[i];\n        }\n        updateArr[i] = p;\n    }\n    if (p.forwards[0] != null && p.forwards[0].data == value) {\n        for (int i = levelCount - 1; i >= 0; i--) {\n            if (updateArr[i].forwards[i] != null && updateArr[i].forwards[i].data == value) {\n                updateArr[i].forwards[i] = updateArr[i].forwards[i].forwards[i];\n            }\n        }\n    }\n    while (levelCount > 1 && h.forwards[levelCount - 1] == null) {\n        levelCount--;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retryable Topic Configuration with Dead Letter Queue\nDESCRIPTION: Configuration for retryable topic with retry attempts, backoff delays, and DLQ support\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/kafka-questions-01.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@RetryableTopic(\n        attempts = \"5\",\n        backoff = @Backoff(delay = 100, maxDelay = 1000)\n)\n@KafkaListener(topics = {KafkaConst.TEST_TOPIC}, groupId = \"apple\")\nprivate void customer(String message) {\n    log.info(\"kafka customer:{}\", message);\n    Integer n = Integer.parseInt(message);\n    if (n % 5 == 0) {\n        throw new RuntimeException();\n    }\n    System.out.println(n);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Thread Context ClassLoader in Spring\nDESCRIPTION: Example showing how Spring framework retrieves the thread context class loader to handle class loading across different classloader hierarchies.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/classloader.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\ncl = Thread.currentThread().getContextClassLoader();\n```\n\n----------------------------------------\n\nTITLE: Implementing Preorder Traversal for Binary Trees in Java\nDESCRIPTION: A recursive implementation of preorder traversal for binary trees. The algorithm first processes the root node, then recursively traverses the left subtree, followed by the right subtree.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/data-structure/tree.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic void preOrder(TreeNode root){\n\tif(root == null){\n\t\treturn;\n\t}\n\tsystem.out.println(root.data);\n\tpreOrder(root.left);\n\tpreOrder(root.right);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Heap Sort in Java\nDESCRIPTION: Java implementation of the Heap Sort algorithm, including methods for building a max heap, heapifying, and the main sorting function.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/10-classical-sorting-algorithms.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nstatic int heapLen;\n\nprivate static void swap(int[] arr, int i, int j) {\n    int tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nprivate static void buildMaxHeap(int[] arr) {\n    for (int i = arr.length / 2 - 1; i >= 0; i--) {\n        heapify(arr, i);\n    }\n}\n\nprivate static void heapify(int[] arr, int i) {\n    int left = 2 * i + 1;\n    int right = 2 * i + 2;\n    int largest = i;\n    if (right < heapLen && arr[right] > arr[largest]) {\n        largest = right;\n    }\n    if (left < heapLen && arr[left] > arr[largest]) {\n        largest = left;\n    }\n    if (largest != i) {\n        swap(arr, largest, i);\n        heapify(arr, largest);\n    }\n}\n\npublic static int[] heapSort(int[] arr) {\n    heapLen = arr.length;\n    buildMaxHeap(arr);\n    for (int i = arr.length - 1; i > 0; i--) {\n        swap(arr, 0, i);\n        heapLen -= 1;\n        heapify(arr, 0);\n    }\n    return arr;\n}\n```\n\n----------------------------------------\n\nTITLE: Method Override Example with Inheritance\nDESCRIPTION: Example showing method overriding in inheritance hierarchy with return type covariance.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic class Hero {\n    public String name() {\n        return \"超级英雄\";\n    }\n}\npublic class SuperMan extends Hero{\n    @Override\n    public String name() {\n        return \"超人\";\n    }\n    public Hero hero() {\n        return new Hero();\n    }\n}\n\npublic class SuperSuperMan extends SuperMan {\n    @Override\n    public String name() {\n        return \"超级超级英雄\";\n    }\n\n    @Override\n    public SuperMan hero() {\n        return new SuperMan();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java 9 Immutable Collections Creation\nDESCRIPTION: Shows how to create immutable collections using new factory methods List.of(), Set.of(), and Map.of().\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java9.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nList.of(\"Java\", \"C++\");\nSet.of(\"Java\", \"C++\");\nMap.of(\"Java\", 1, \"C++\", 2);\n```\n\n----------------------------------------\n\nTITLE: Solving Variable Frog Jump Problem with Bit Manipulation in Java\nDESCRIPTION: This code solves the enhanced frog jump problem where the frog can jump any number of steps from 1 to n. The mathematical pattern results in 2^(n-1), which is efficiently implemented using bit shift operation for O(1) time complexity.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nint JumpFloorII(int number) {\n    return 1 << --number;//2^(number-1)用位移操作进行，更快\n}\n```\n\n----------------------------------------\n\nTITLE: Insertion Order Traversal with LinkedHashMap\nDESCRIPTION: Demonstrates how LinkedHashMap maintains insertion order when iterating through elements, unlike regular HashMap.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedhashmap-source-code.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nHashMap < String, String > map = new LinkedHashMap < > ();\nmap.put(\"a\", \"2\");\nmap.put(\"g\", \"3\");\nmap.put(\"r\", \"1\");\nmap.put(\"e\", \"23\");\n\nfor (Map.Entry < String, String > entry: map.entrySet()) {\n    System.out.println(entry.getKey() + \":\" + entry.getValue());\n}\n```\n\n----------------------------------------\n\nTITLE: Ranking Top 3 Scores for Each Exam Category in MySQL\nDESCRIPTION: Complex query to find the top 3 scores for each exam category, considering tiebreakers like minimum score and user ID. Uses window functions and subqueries.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT tag,\n       UID,\n       ranking\nFROM\n  (SELECT b.tag AS tag,\n          a.uid AS UID,\n          ROW_NUMBER() OVER (PARTITION BY b.tag\n                             ORDER BY b.tag,\n                                      max(a.score) DESC,\n                                      min(a.score) DESC,\n                                      a.uid DESC) AS ranking\n   FROM exam_record a\n   LEFT JOIN examination_info b ON a.exam_id = b.exam_id\n   GROUP BY b.tag,\n            a.uid) t\nWHERE ranking <= 3\n```\n\n----------------------------------------\n\nTITLE: Initializing HashMap with Custom Initial Capacity in Java\nDESCRIPTION: Shows the constructors of HashMap that allow specifying an initial capacity. The tableSizeFor method ensures the capacity is always a power of 2.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n    public HashMap(int initialCapacity, float loadFactor) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                               initialCapacity);\n        if (initialCapacity > MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor <= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    }\n     public HashMap(int initialCapacity) {\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing File System Monitoring with Observer Pattern in Java NIO\nDESCRIPTION: This snippet illustrates how to use WatchService to monitor file system events, showcasing the Observer pattern in Java NIO.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/io-design-patterns.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nWatchService watchService = FileSystems.getDefault().newWatchService();\n\nPath path = Paths.get(\"workingDirectory\");\nWatchKey watchKey = path.register(\nwatchService, StandardWatchEventKinds...);\n```\n\n----------------------------------------\n\nTITLE: Defining Buffer Class in Java NIO\nDESCRIPTION: Shows the structure of the Buffer class with its four key member variables: mark, position, limit, and capacity. These variables define the state and boundaries of the buffer.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/nio-basis.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic abstract class Buffer {\n    // Invariants: mark <= position <= limit <= capacity\n    private int mark = -1;\n    private int position = 0;\n    private int limit;\n    private int capacity;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting String to Integer (Java)\nDESCRIPTION: Implements a method to convert a string representation of an integer to its numeric value without using built-in parsing functions. It handles positive and negative numbers and returns 0 for invalid inputs.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/string-algorithm-problems.md#2025-04-20_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic class Main {\n\n  public static int StrToInt(String str) {\n    if (str.length() == 0)\n      return 0;\n    char[] chars = str.toCharArray();\n    int flag = 0;\n    if (chars[0] == '+')\n      flag = 1;\n    else if (chars[0] == '-')\n      flag = 2;\n    int start = flag > 0 ? 1 : 0;\n    int res = 0;\n    for (int i = start; i < chars.length; i++) {\n      if (Character.isDigit(chars[i])) {\n        int temp = chars[i] - '0';\n        res = res * 10 + temp;\n      } else {\n        return 0;\n      }\n    }\n   return flag != 2 ? res : -res;\n  }\n\n  public static void main(String[] args) {\n    String s = \"-12312312\";\n    System.out.println(\"使用库函数转换：\" + Integer.valueOf(s));\n    int res = Main.StrToInt(s);\n    System.out.println(\"使用自己写的方法转换：\" + res);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Transaction Messages with Idempotency Check in Java\nDESCRIPTION: This class implements a RocketMQ message listener to consume transaction messages. It performs idempotency checks using Redis and updates the transaction status after processing.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/rocketmq-questions.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Service\n@RocketMQMessageListener(topic = MQDestination.TOPIC, selectorExpression = MQDestination.TAG_ADD_VIEW_HISTORY, consumerGroup = MQDestination.TAG_ADD_VIEW_HISTORY)\npublic class ConsumerAddViewHistory implements RocketMQListener<Message> {\n    @Override\n    public void onMessage(Message message) {\n        // Implementation details omitted for brevity\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File Content with BufferedInputStream in Java\nDESCRIPTION: Shows how to read all bytes from a file using BufferedInputStream and convert them to a String.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/io-basis.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nBufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream(\"input.txt\"));\nString result = new String(bufferedInputStream.readAllBytes());\nSystem.out.println(result);\n```\n\n----------------------------------------\n\nTITLE: Foreign Function & Memory API Usage Example\nDESCRIPTION: Demonstrates using the Foreign Function & Memory API to call the C library's radixsort function to sort an array of strings. Shows memory allocation, data copying between heap and off-heap, and external function invocation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java19.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// 1. 在C库路径上查找外部函数\nLinker linker = Linker.nativeLinker();\nSymbolLookup stdlib = linker.defaultLookup();\nMethodHandle radixSort = linker.downcallHandle(\n                             stdlib.lookup(\"radixsort\"), ...);\n// 2. 分配堆上内存以存储四个字符串\nString[] javaStrings   = { \"mouse\", \"cat\", \"dog\", \"car\" };\n// 3. 分配堆外内存以存储四个指针\nSegmentAllocator allocator = implicitAllocator();\nMemorySegment offHeap  = allocator.allocateArray(ValueLayout.ADDRESS, javaStrings.length);\n// 4. 将字符串从堆上复制到堆外\nfor (int i = 0; i < javaStrings.length; i++) {\n    // 在堆外分配一个字符串，然后存储指向它的指针\n    MemorySegment cString = allocator.allocateUtf8String(javaStrings[i]);\n    offHeap.setAtIndex(ValueLayout.ADDRESS, i, cString);\n}\n// 5. 通过调用外部函数对堆外数据进行排序\nradixSort.invoke(offHeap, javaStrings.length, MemoryAddress.NULL, '\\0');\n// 6. 将(重新排序的)字符串从堆外复制到堆上\nfor (int i = 0; i < javaStrings.length; i++) {\n    MemoryAddress cStringPtr = offHeap.getAtIndex(ValueLayout.ADDRESS, i);\n    javaStrings[i] = cStringPtr.getUtf8String(0);\n}\nassert Arrays.equals(javaStrings, new String[] {\"car\", \"cat\", \"dog\", \"mouse\"});  // true\n```\n\n----------------------------------------\n\nTITLE: Sorting TreeMap with Custom Comparator in Java\nDESCRIPTION: Demonstrates how to use a custom Comparator to sort a TreeMap based on a specific field of the key objects. In this case, Person objects are sorted by age.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic class Person {\n    private Integer age;\n\n    public Person(Integer age) {\n        this.age = age;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n\n    public static void main(String[] args) {\n        TreeMap<Person, String> treeMap = new TreeMap<>(new Comparator<Person>() {\n            @Override\n            public int compare(Person person1, Person person2) {\n                int num = person1.getAge() - person2.getAge();\n                return Integer.compare(num, 0);\n            }\n        });\n        treeMap.put(new Person(3), \"person1\");\n        treeMap.put(new Person(18), \"person2\");\n        treeMap.put(new Person(35), \"person3\");\n        treeMap.put(new Person(16), \"person4\");\n        treeMap.entrySet().stream().forEach(personStringEntry -> {\n            System.out.println(personStringEntry.getValue());\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Expiration Cycle Constants Definition\nDESCRIPTION: This code shows Redis internal constants that control the expiration cycle behavior, including cycle duration, CPU usage percentage, and acceptable stale key percentage that determines when Redis makes extra efforts to clean up.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#define ACTIVE_EXPIRE_CYCLE_FAST_DURATION 1000 /* Microseconds. */\n#define ACTIVE_EXPIRE_CYCLE_SLOW_TIME_PERC 25 /* Max % of CPU to use. */\n#define ACTIVE_EXPIRE_CYCLE_ACCEPTABLE_STALE 10 /* % of stale keys after which\n                                                   we do extra efforts. */\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Overloading in MyBatis Mapper Interface\nDESCRIPTION: Demonstrates how to implement method overloading in a MyBatis Mapper interface. The example shows two methods with the same name but different parameter signatures.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/mybatis/mybatis-interview.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Mapper接口里面方法重载\n */\npublic interface StuMapper {\n\n List<Student> getAllStu();\n\n List<Student> getAllStu(@Param(\"id\") Integer id);\n}\n```\n\n----------------------------------------\n\nTITLE: Query Complete Exam Submissions for Last Three Months\nDESCRIPTION: SQL query to find users who have completed all their exams in their last three months of activity. Returns the count of completed exams ordered by completion count and user ID in descending order.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT UID,\n       count(score) exam_complete_cnt\nFROM\n  (SELECT *, DENSE_RANK() OVER (PARTITION BY UID\n                             ORDER BY date_format(start_time, '%Y%m') DESC) dr\n   FROM exam_record) t1\nWHERE dr <= 3\nGROUP BY UID\nHAVING count(dr)= count(score)\nORDER BY exam_complete_cnt DESC,\n         UID DESC\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching for instanceof in Java 17\nDESCRIPTION: Shows the improved pattern matching syntax for instanceof operations, eliminating the need for explicit casting.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java17.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Old code\nif (o instanceof String) {\n    String s = (String)o;\n    ... use s ...\n}\n\n// New code\nif (o instanceof String s) {\n    ... use s ...\n}\n```\n\n----------------------------------------\n\nTITLE: Searching in a 2D Sorted Matrix in Java\nDESCRIPTION: This algorithm efficiently searches for a target value in a 2D matrix where each row and column is sorted. By starting from the bottom-left corner and moving up or right based on comparisons, it achieves O(m+n) time complexity where m and n are the dimensions of the matrix.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic boolean Find(int target, int [][] array) {\n    //基本思路从左下角开始找，这样速度最快\n    int row = array.length-1;//行\n    int column = 0;//列\n    //当行数大于0，当前列数小于总列数时循环条件成立\n    while((row >= 0)&& (column< array[0].length)){\n        if(array[row][column] > target){\n            row--;\n        }else if(array[row][column] < target){\n            column++;\n        }else{\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Buffered Input Stream with Decorator Pattern in Java\nDESCRIPTION: This snippet demonstrates how to use BufferedInputStream to enhance FileInputStream functionality, showcasing the Decorator pattern in Java IO.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/io-design-patterns.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ntry (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(\"input.txt\"))) {\n    int content;\n    long skip = bis.skip(2);\n    while ((content = bis.read()) != -1) {\n        System.out.print((char) content);\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced String Templates Usage\nDESCRIPTION: Examples demonstrating advanced usage of String Templates including expressions, calculations, and multi-line templates.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java21.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nint x = 10, y = 20;\nString s = STR.\"\\{x} + \\{y} = \\{x + y}\";  //\"10 + 20 = 30\"\n\nString time = STR.\"The current time is \\{\n    //sample comment - current time in HH:mm:ss\n    DateTimeFormatter\n      .ofPattern(\"HH:mm:ss\")\n      .format(LocalTime.now())\n  }.\";\n```\n\n----------------------------------------\n\nTITLE: Testing Java SPI Implementation\nDESCRIPTION: Creates a test class to demonstrate the usage of the Java SPI mechanism with the logger implementation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/spi.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npackage edu.jiangxuan.up.service;\n\nimport edu.jiangxuan.up.spi.LoggerService;\n\npublic class TestJavaSPI {\n    public static void main(String[] args) {\n        LoggerService loggerService = LoggerService.getService();\n        loggerService.info(\"Hello\");\n        loggerService.debug(\"Testing Java SPI mechanism\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java 9 Stream API Enhancements\nDESCRIPTION: Shows new Stream methods including ofNullable(), takeWhile(), dropWhile(), and iterate().\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java9.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nStream<String> stringStream = Stream.ofNullable(\"Java\");\nSystem.out.println(stringStream.count());// 1\nStream<String> nullStream = Stream.ofNullable(null);\nSystem.out.println(nullStream.count());//0\n\nList<Integer> integerList = List.of(11, 33, 66, 8, 9, 13);\nintegerList.stream().takeWhile(x -> x < 50).forEach(System.out::println);// 11 33\n\nList<Integer> integerList2 = List.of(11, 33, 66, 8, 9, 13);\nintegerList2.stream().dropWhile(x -> x < 50).forEach(System.out::println);// 66 8 9 13\n```\n\n----------------------------------------\n\nTITLE: Synchronized Method Implementation Example\nDESCRIPTION: Example showing synchronized method implementation for bytecode analysis.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class SynchronizedDemo2 {\n    public synchronized void method() {\n        System.out.println(\"synchronized 方法\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Message Sending in Kafka using Spring Boot\nDESCRIPTION: Shows how to send a message to a Kafka topic asynchronously with a callback function using Spring Boot's KafkaTemplate.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/kafka-questions-01.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nListenableFuture<SendResult<String, Object>> future = kafkaTemplate.send(topic, o);\nfuture.addCallback(result -> logger.info(\"生产者成功发送消息到topic:{} partition:{}的消息\", result.getRecordMetadata().topic(), result.getRecordMetadata().partition()),\n        ex -> logger.error(\"生产者发送消失败，原因：{}\", ex.getMessage()));\n```\n\n----------------------------------------\n\nTITLE: Remove Operation in ArrayBlockingQueue\nDESCRIPTION: Implementation of remove operation that throws an exception if the queue is empty instead of returning null.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic E remove() {\n        E x = poll();\n        if (x != null)\n            return x;\n        else\n            throw new NoSuchElementException();\n    }\n```\n\n----------------------------------------\n\nTITLE: Converting Between MySQL Date Formats and Unix Timestamps\nDESCRIPTION: SQL queries demonstrating how to convert between MySQL date strings and Unix timestamps (seconds since epoch).\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/some-thoughts-on-database-storage-time.md#2025-04-20_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\n-- Convert date string to Unix timestamp (seconds)\nSELECT UNIX_TIMESTAMP('2020-01-11 09:53:32');\n\n-- Convert Unix timestamp (seconds) to date string\nSELECT FROM_UNIXTIME(1578707612);\n```\n\n----------------------------------------\n\nTITLE: Null Handling in Switch Statements in Java 17\nDESCRIPTION: Shows the improved null handling capabilities in switch statements with direct null case support.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java17.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Old code\nstatic void testFooBar(String s) {\n    if (s == null) {\n        System.out.println(\"oops!\");\n        return;\n    }\n    switch (s) {\n        case \"Foo\", \"Bar\" -> System.out.println(\"Great\");\n        default           -> System.out.println(\"Ok\");\n    }\n}\n\n// New code\nstatic void testFooBar(String s) {\n    switch (s) {\n        case null         -> System.out.println(\"Oops\");\n        case \"Foo\", \"Bar\" -> System.out.println(\"Great\");\n        default           -> System.out.println(\"Ok\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Element to Skip List in Java\nDESCRIPTION: Implements the add method to insert a new element into the skip list, updating necessary pointers and levels.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-skiplist.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic void add(int value) {\n    int level = randomLevel();\n    Node newNode = new Node();\n    newNode.data = value;\n    newNode.maxLevel = level;\n    Node[] maxOfMinArr = new Node[level];\n    for (int i = 0; i < level; i++) {\n        maxOfMinArr[i] = h;\n    }\n    Node p = h;\n    for (int i = level - 1; i >= 0; i--) {\n        while (p.forwards[i] != null && p.forwards[i].data < value) {\n            p = p.forwards[i];\n        }\n        maxOfMinArr[i] = p;\n    }\n    for (int i = 0; i < level; i++) {\n        newNode.forwards[i] = maxOfMinArr[i].forwards[i];\n        maxOfMinArr[i].forwards[i] = newNode;\n    }\n    if (levelCount < level) {\n        levelCount = level;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mentioning ArrayBlockingQueue and LinkedBlockingQueue classes in Java\nDESCRIPTION: This snippet introduces the ArrayBlockingQueue and LinkedBlockingQueue classes from the Java concurrent package. These classes are mentioned as part of a comparison of their features and implementation details.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-01.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nArrayBlockingQueue\n```\n\nLANGUAGE: Java\nCODE:\n```\nLinkedBlockingQueue\n```\n\n----------------------------------------\n\nTITLE: Implementing LeastActiveLoadBalance in Dubbo (Java)\nDESCRIPTION: This code snippet shows the implementation of the LeastActiveLoadBalance algorithm in Dubbo. It selects the invoker with the least active requests, falling back to RandomLoadBalance if multiple invokers have the same least active count.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/rpc/dubbo.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class LeastActiveLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"leastactive\";\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        int length = invokers.size();\n        int leastActive = -1;\n        int leastCount = 0;\n        int[] leastIndexes = new int[length];\n        int[] weights = new int[length];\n        int totalWeight = 0;\n        int firstWeight = 0;\n        boolean sameWeight = true;\n        // This for loop finds the invoker with the least active requests\n        for (int i = 0; i < length; i++) {\n            Invoker<T> invoker = invokers.get(i);\n            int active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive();\n            int afterWarmup = getWeight(invoker, invocation);\n            weights[i] = afterWarmup;\n            if (leastActive == -1 || active < leastActive) {\n                leastActive = active;\n                leastCount = 1;\n                leastIndexes[0] = i;\n                totalWeight = afterWarmup;\n                firstWeight = afterWarmup;\n                sameWeight = true;\n            } else if (active == leastActive) {\n                leastIndexes[leastCount++] = i;\n                totalWeight += afterWarmup;\n                if (sameWeight && afterWarmup != firstWeight) {\n                    sameWeight = false;\n                }\n            }\n        }\n       // If only one invoker has the least active count, return it\n        if (leastCount == 1) {\n            return invokers.get(leastIndexes[0]);\n        }\n        // If multiple invokers have the same least active count but different weights,\n        // use RandomLoadBalance logic\n        if (!sameWeight && totalWeight > 0) {\n            int offsetWeight = ThreadLocalRandom.current().nextInt(totalWeight);\n            for (int i = 0; i < leastCount; i++) {\n                int leastIndex = leastIndexes[i];\n                offsetWeight -= weights[leastIndex];\n                if (offsetWeight < 0) {\n                    return invokers.get(leastIndex);\n                }\n            }\n        }\n        return invokers.get(leastIndexes[ThreadLocalRandom.current().nextInt(leastCount)]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ThreadLocal Usage in Java\nDESCRIPTION: Example code showing how to use ThreadLocal to create thread-local variables and access them.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class ThreadLocalTest {\n    private List<String> messages = Lists.newArrayList();\n\n    public static final ThreadLocal<ThreadLocalTest> holder = ThreadLocal.withInitial(ThreadLocalTest::new);\n\n    public static void add(String message) {\n        holder.get().messages.add(message);\n    }\n\n    public static List<String> clear() {\n        List<String> messages = holder.get().messages;\n        holder.remove();\n\n        System.out.println(\"size: \" + holder.get().messages.size());\n        return messages;\n    }\n\n    public static void main(String[] args) {\n        ThreadLocalTest.add(\"一枝花算不算浪漫\");\n        System.out.println(holder.get().messages);\n        ThreadLocalTest.clear();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logback as SPI Service Provider in Java\nDESCRIPTION: Creates the Logback class as a concrete implementation of the Logger interface for the SPI mechanism.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/spi.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npackage edu.jiangxuan.up.spi.service;\n\nimport edu.jiangxuan.up.spi.Logger;\n\npublic class Logback implements Logger {\n    @Override\n    public void info(String s) {\n        System.out.println(\"Logback info log: \" + s);\n    }\n\n    @Override\n    public void debug(String s) {\n        System.out.println(\"Logback debug log: \" + s);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Method in Java\nDESCRIPTION: This code snippet shows how to define and use a generic method in Java, which can work with arrays of any type.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-03.md#2025-04-20_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\npublic static < E > void printArray( E[] inputArray )\n{\n     for ( E element : inputArray ){\n        System.out.printf( \"%s \", element );\n     }\n     System.out.println();\n}\n\n// Usage\nInteger[] intArray = { 1, 2, 3 };\nString[] stringArray = { \"Hello\", \"World\" };\nprintArray( intArray  );\nprintArray( stringArray  );\n```\n\n----------------------------------------\n\nTITLE: Executing an UPDATE Statement in MySQL\nDESCRIPTION: Example of an UPDATE statement that changes the age of a student named 'Zhang San' to 19. This statement demonstrates how data modification operations work in MySQL, involving both redo log and binlog for transaction safety.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/how-sql-executed-in-mysql.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nupdate tb_student A set A.age='19' where A.name=' 张三 ';\n```\n\n----------------------------------------\n\nTITLE: Executing a SELECT Query in MySQL\nDESCRIPTION: Example of a basic SELECT query that retrieves records of students who are 18 years old and named 'Zhang San'. This query demonstrates a typical read operation that would pass through MySQL's execution process.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/how-sql-executed-in-mysql.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from tb_student  A where A.age='18' and A.name=' 张三 ';\n```\n\n----------------------------------------\n\nTITLE: Removing Elements from CopyOnWriteArrayList in Java\nDESCRIPTION: Implementation of the remove() method in CopyOnWriteArrayList, showing the thread-safe element removal process.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/copyonwritearraylist-source-code.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic E remove(int index) {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        Object[] elements = getArray();\n        int len = elements.length;\n        E oldValue = get(elements, index);\n        int numMoved = len - index - 1;\n        if (numMoved == 0)\n            setArray(Arrays.copyOf(elements, len - 1));\n        else {\n            Object[] newElements = new Object[len - 1];\n            System.arraycopy(elements, 0, newElements, 0, index);\n            System.arraycopy(elements, index + 1, newElements, index,\n                             numMoved);\n            setArray(newElements);\n        }\n        return oldValue;\n    } finally {\n        lock.unlock();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing Objects with ObjectInputStream in Java\nDESCRIPTION: Demonstrates how to use ObjectInputStream to read Java objects from an input stream (deserialization).\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/io-basis.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nObjectInputStream input = new ObjectInputStream(new FileInputStream(\"object.data\"));\nMyClass object = (MyClass) input.readObject();\ninput.close();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entries from ThreadLocalMap in Java\nDESCRIPTION: Implementation of the getEntry method in ThreadLocalMap, showing how ThreadLocal retrieves values from its internal map, handling both direct hits and cases requiring additional searching after hash collisions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate Entry getEntry(ThreadLocal<?> key) {\n    int i = key.threadLocalHashCode & (table.length - 1);\n    Entry e = table[i];\n    if (e != null && e.get() == key)\n        return e;\n    else\n        return getEntryAfterMiss(key, i, e);\n}\n\nprivate Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e) {\n    Entry[] tab = table;\n    int len = tab.length;\n\n    while (e != null) {\n        ThreadLocal<?> k = e.get();\n        if (k == key)\n            return e;\n        if (k == null)\n            expungeStaleEntry(i);\n        else\n            i = nextIndex(i, len);\n        e = tab[i];\n    }\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Counting Sort in Java\nDESCRIPTION: Java implementation of the Counting Sort algorithm, including methods for finding min/max values and the main sorting function.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/10-classical-sorting-algorithms.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nprivate static int[] getMinAndMax(int[] arr) {\n    int maxValue = arr[0];\n    int minValue = arr[0];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > maxValue) {\n            maxValue = arr[i];\n        } else if (arr[i] < minValue) {\n            minValue = arr[i];\n        }\n    }\n    return new int[] { minValue, maxValue };\n}\n\npublic static int[] countingSort(int[] arr) {\n    if (arr.length < 2) {\n        return arr;\n    }\n    int[] extremum = getMinAndMax(arr);\n    int minValue = extremum[0];\n    int maxValue = extremum[1];\n    int[] countArr = new int[maxValue - minValue + 1];\n    int[] result = new int[arr.length];\n\n    for (int i = 0; i < arr.length; i++) {\n        countArr[arr[i] - minValue] += 1;\n    }\n    for (int i = 1; i < countArr.length; i++) {\n        countArr[i] += countArr[i - 1];\n    }\n    for (int i = arr.length - 1; i >= 0; i--) {\n        int idx = countArr[arr[i] - minValue] - 1;\n        result[idx] = arr[i];\n        countArr[arr[i] - minValue] -= 1;\n    }\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing String Class in Java\nDESCRIPTION: This code snippet shows the implementation of the String class, demonstrating its immutable nature due to the use of final keyword for the char array.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic final class String implements java.io.Serializable, Comparable<String>, CharSequence {\n    private final char value[];\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: After Node Removal Implementation in LinkedHashMap\nDESCRIPTION: Demonstrates how LinkedHashMap handles node removal by updating the double-linked list pointers and maintaining list integrity.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedhashmap-source-code.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nvoid afterNodeRemoval(Node<K,V> e) { // unlink\n    LinkedHashMap.Entry<K,V> p =\n        (LinkedHashMap.Entry<K,V>)e, b = p.before, a = p.after;\n    p.before = p.after = null;\n    if (b == null)\n        head = a;\n    else\n        b.after = a;\n    if (a == null)\n        tail = b;\n    else\n        a.before = b;\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Capacity in ArrayList in Java\nDESCRIPTION: These methods are responsible for ensuring that the ArrayList has sufficient capacity to accommodate new elements. They calculate the required capacity and trigger growth if necessary.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n// 根据给定的最小容量和当前数组元素来计算所需容量。\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    // 如果当前数组元素为空数组（初始情况），返回默认容量和最小容量中的较大值作为所需容量\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    // 否则直接返回最小容量\n    return minCapacity;\n}\n\n// 确保内部容量达到指定的最小容量。\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n\n//判断是否需要扩容\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n    //判断当前数组容量是否足以存储minCapacity个元素\n    if (minCapacity - elementData.length > 0)\n        //调用grow方法进行扩容\n        grow(minCapacity);\n}\n```\n\n----------------------------------------\n\nTITLE: Node Removal Operation in LinkedHashMap\nDESCRIPTION: Shows the implementation of removeNode method and afterNodeRemoval operation in LinkedHashMap for maintaining the double-linked list structure during element removal.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedhashmap-source-code.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal Node<K,V> removeNode(int hash, Object key, Object value,\n                               boolean matchValue, boolean movable) {\n        //略\n            if (node != null && (!matchValue || (v = node.value) == value ||\n                                 (value != null && value.equals(v)))) {\n                if (node instanceof TreeNode)\n                    ((TreeNode<K,V>)node).removeTreeNode(this, tab, movable);\n                else if (node == p)\n                    tab[index] = node.next;\n                else\n                    p.next = node.next;\n                ++modCount;\n                --size;\n                afterNodeRemoval(node);\n                return node;\n            }\n        }\n        return null;\n    }\n//空实现\nvoid afterNodeRemoval(Node<K,V> p) { }\n```\n\n----------------------------------------\n\nTITLE: Forcing Read Operations to Master Database using Sharding-JDBC\nDESCRIPTION: Example showing how to force read operations to be routed to the master database using Sharding-JDBC's HintManager to avoid master-slave replication lag issues.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/read-and-write-separation-and-library-subtable.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nHintManager hintManager = HintManager.getInstance();\nhintManager.setMasterRouteOnly();\n// Continue with JDBC operations\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Behavior with Variables vs Constants\nDESCRIPTION: This code demonstrates how string concatenation behaves differently with variables versus string literals. String literals are combined at compile time (constant folding), while variables are combined at runtime using StringBuilder.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nString str1 = \"str\";\nString str2 = \"ing\";\nString str3 = \"str\" + \"ing\";\nString str4 = str1 + str2;\nString str5 = \"string\";\nSystem.out.println(str3 == str4);//false\nSystem.out.println(str3 == str5);//true\nSystem.out.println(str4 == str5);//false\n```\n\n----------------------------------------\n\nTITLE: Using Text Blocks in Java 14\nDESCRIPTION: Demonstrates the use of text blocks with new escape characters (\\ and \\s) for line continuation and single space insertion.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java14-15.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nString str = \"凡心所向，素履所往，生如逆旅，一苇以航。\";\n\nString str2 = \"\"\"\n        凡心所向，素履所往， \\\n        生如逆旅，一苇以航。\"\"\";\nSystem.out.println(str2);// 凡心所向，素履所往， 生如逆旅，一苇以航。\nString text = \"\"\"\n        java\n        c++\\sphp\n        \"\"\";\nSystem.out.println(text);\n//输出：\njava\nc++ php\n```\n\n----------------------------------------\n\nTITLE: Reading Characters from a File with FileReader in Java\nDESCRIPTION: Demonstrates how to read character data from a file using FileReader, including skipping characters.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/io-basis.md#2025-04-20_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\ntry (FileReader fileReader = new FileReader(\"input.txt\");) {\n    int content;\n    long skip = fileReader.skip(3);\n    System.out.println(\"The actual number of bytes skipped:\" + skip);\n    System.out.print(\"The content read from file:\");\n    while ((content = fileReader.read()) != -1) {\n        System.out.print((char) content);\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Thread Thread.init Method for InheritableThreadLocal\nDESCRIPTION: Implementation of the Thread initialization method that copies InheritableThreadLocal values from parent thread to child thread, showing how thread inheritance is technically implemented in Java.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nprivate void init(ThreadGroup g, Runnable target, String name,\n                      long stackSize, AccessControlContext acc,\n                      boolean inheritThreadLocals) {\n    if (name == null) {\n        throw new NullPointerException(\"name cannot be null\");\n    }\n\n    if (inheritThreadLocals && parent.inheritableThreadLocals != null)\n        this.inheritableThreadLocals =\n            ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);\n    this.stackSize = stackSize;\n    tid = nextThreadID();\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Memory Allocations Test in Java\nDESCRIPTION: Example showing multiple byte array allocations to demonstrate memory allocation patterns and garbage collection triggers.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-garbage-collection.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class GCTest {\n\n  public static void main(String[] args) {\n    byte[] allocation1, allocation2,allocation3,allocation4,allocation5;\n    allocation1 = new byte[32000*1024];\n    allocation2 = new byte[1000*1024];\n    allocation3 = new byte[1000*1024];\n    allocation4 = new byte[1000*1024];\n    allocation5 = new byte[1000*1024];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Test Without ensureCapacity in Java\nDESCRIPTION: A performance test measuring the time required to add a large number of elements to an ArrayList without using the ensureCapacity method, resulting in multiple capacity increases.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic class EnsureCapacityTest {\n  public static void main(String[] args) {\n    ArrayList<Object> list = new ArrayList<Object>();\n    final int N = 10000000;\n    long startTime = System.currentTimeMillis();\n    for (int i = 0; i < N; i++) {\n      list.add(i);\n    }\n    long endTime = System.currentTimeMillis();\n    System.out.println(\"使用ensureCapacity方法前：\"+(endTime - startTime));\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Adapter Pattern with InputStreamReader in Java\nDESCRIPTION: This code example shows how InputStreamReader acts as an adapter between byte streams and character streams, demonstrating the Adapter pattern in Java IO.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/io-design-patterns.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nInputStreamReader isr = new InputStreamReader(new FileInputStream(fileName), \"UTF-8\");\nBufferedReader bufferedReader = new BufferedReader(isr);\n```\n\n----------------------------------------\n\nTITLE: Java 9 Process API Example\nDESCRIPTION: Shows how to use the new Process API to get information about the current process.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java9.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// 获取当前正在运行的 JVM 的进程\nProcessHandle currentProcess = ProcessHandle.current();\n// 输出进程的 id\nSystem.out.println(currentProcess.pid());\n// 输出进程的信息\nSystem.out.println(currentProcess.info());\n```\n\n----------------------------------------\n\nTITLE: Java 9 Try-With-Resources Enhancement\nDESCRIPTION: Demonstrates the enhanced try-with-resources feature that supports effectively final variables.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java9.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal Scanner scanner = new Scanner(new File(\"testRead.txt\"));\nPrintWriter writer = new PrintWriter(new File(\"testWrite.txt\"))\ntry (scanner;writer) {\n    // omitted\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parents Delegation Model in Java\nDESCRIPTION: Shows the implementation of the parents delegation model in the loadClass method of ClassLoader.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/classloader.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprotected Class<?> loadClass(String name, boolean resolve)\n    throws ClassNotFoundException\n{\n    synchronized (getClassLoadingLock(name)) {\n        //首先，检查该类是否已经加载过\n        Class c = findLoadedClass(name);\n        if (c == null) {\n            //如果 c 为 null，则说明该类没有被加载过\n            long t0 = System.nanoTime();\n            try {\n                if (parent != null) {\n                    //当父类的加载器不为空，则通过父类的loadClass来加载该类\n                    c = parent.loadClass(name, false);\n                } else {\n                    //当父类的加载器为空，则调用启动类加载器来加载该类\n                    c = findBootstrapClassOrNull(name);\n                }\n            } catch (ClassNotFoundException e) {\n                //非空父类的类加载器无法找到相应的类，则抛出异常\n            }\n\n            if (c == null) {\n                //当父类加载器无法加载时，则调用findClass方法来加载该类\n                //用户可通过覆写该方法，来自定义类加载器\n                long t1 = System.nanoTime();\n                c = findClass(name);\n\n                //用于统计类加载器相关的信息\n                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                sun.misc.PerfCounter.getFindClasses().increment();\n            }\n        }\n        if (resolve) {\n            //对类进行link操作\n            resolveClass(c);\n        }\n        return c;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Number Formatting in Java 12\nDESCRIPTION: Demonstrates the new compact number formatting capability using NumberFormat class.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java12-13.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nNumberFormat fmt = NumberFormat.getCompactNumberInstance(Locale.US, NumberFormat.Style.SHORT);\nString result = fmt.format(1000);\nSystem.out.println(result);\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Active Days and Monthly Active Users\nDESCRIPTION: This query calculates the average active days and monthly active users (MAU) for each month in 2021. It uses date formatting, distinct counts, and grouping to derive these metrics from the exam_record table.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DATE_FORMAT(submit_time, '%Y%m') MONTH,\n                                        round(count(DISTINCT UID, DATE_FORMAT(submit_time, '%Y%m%d')) / count(DISTINCT UID), 2) avg_active_days,\n                                        COUNT(DISTINCT UID) mau\nFROM exam_record\nWHERE YEAR (submit_time) = 2021\nGROUP BY MONTH\n```\n\n----------------------------------------\n\nTITLE: Calculating Power of Two Size for HashMap Capacity in Java\nDESCRIPTION: The tableSizeFor method ensures that the HashMap capacity is always a power of 2. It uses bitwise operations to find the nearest power of 2 greater than or equal to the given capacity.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n/**\n * Returns a power of two size for the given target capacity.\n */\nstatic final int tableSizeFor(int cap) {\n    int n = cap - 1;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Redis List类型实现栈操作\nDESCRIPTION: 展示了如何使用RPUSH和RPOP命令实现栈的压栈和出栈操作。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-data-structures-01.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n> RPUSH myList2 value1 value2 value3\n(integer) 3\n> RPOP myList2 # 将 list的最右边的元素取出\n\"value3\"\n```\n\n----------------------------------------\n\nTITLE: Simplified Main Method Declaration\nDESCRIPTION: Shows the new simplified main method declaration syntax introduced in Java 23, making it more approachable for beginners.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java22-23.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Traditional way\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}\n\n// New simplified way\nvoid main() {\n   System.out.println(\"Hello, World!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Using var Keyword for Local Variable Type Inference in Java 10\nDESCRIPTION: Demonstrates the usage of var keyword for local variable type inference introduced in Java 10. Shows valid use cases including object creation, collections, and for loops.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java10.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nvar id = 0;\nvar codefx = new URL(\"https://mp.weixin.qq.com/\");\nvar list = new ArrayList<>();\nvar list = List.of(1, 2, 3);\nvar map = new HashMap<String, String>();\nvar p = Paths.of(\"src/test/java/Java9FeaturesTest.java\");\nvar numbers = List.of(\"a\", \"b\", \"c\");\nfor (var n : list)\n    System.out.print(n+ \" \");\n```\n\n----------------------------------------\n\nTITLE: Template Method Pattern Implementation\nDESCRIPTION: Example of the Template Method pattern where a base abstract class defines the skeleton of an algorithm, deferring some steps to subclasses. This demonstrates how Spring's JdbcTemplate and HibernateTemplate are designed.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/spring-design-patterns-summary.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic abstract class Template {\n    //这是我们的模板方法\n    public final void TemplateMethod(){\n        PrimitiveOperation1();\n        PrimitiveOperation2();\n        PrimitiveOperation3();\n    }\n\n    protected void  PrimitiveOperation1(){\n        //当前类实现\n    }\n\n    //被子类实现的方法\n    protected abstract void PrimitiveOperation2();\n    protected abstract void PrimitiveOperation3();\n\n}\npublic class TemplateImpl extends Template {\n\n    @Override\n    public void PrimitiveOperation2() {\n        //当前类实现\n    }\n\n    @Override\n    public void PrimitiveOperation3() {\n        //当前类实现\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Spaces in a String (Java)\nDESCRIPTION: Two methods to replace spaces in a string with '%20': one using character iteration and StringBuilder, and another using String.replaceAll() method. The first method manually checks and replaces spaces, while the second uses a regex to replace all whitespace.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/string-algorithm-problems.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class Solution {\n\n  public static String replaceSpace(StringBuffer str) {\n    int length = str.length();\n    StringBuffer result = new StringBuffer();\n    for (int i = 0; i < length; i++) {\n      char b = str.charAt(i);\n      if (String.valueOf(b).equals(\" \")) {\n        result.append(\"%20\");\n      } else {\n        result.append(b);\n      }\n    }\n    return result.toString();\n  }\n\n  public static String replaceSpace2(StringBuffer str) {\n    return str.toString().replaceAll(\"\\\\s\", \"%20\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Class Initialization in Java\nDESCRIPTION: Example of using reflection to trigger class initialization. This is one of the six scenarios that force a class to be initialized.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/class-loading-process.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nClass.forName(\"...\");\n```\n\nLANGUAGE: Java\nCODE:\n```\nnewInstance();\n```\n\n----------------------------------------\n\nTITLE: InheritableThreadLocal Usage Example\nDESCRIPTION: A demonstration of how InheritableThreadLocal differs from ThreadLocal by allowing child threads to inherit values from their parent thread, showing both the inherited and non-inherited behavior.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class InheritableThreadLocalDemo {\n    public static void main(String[] args) {\n        ThreadLocal<String> ThreadLocal = new ThreadLocal<>();\n        ThreadLocal<String> inheritableThreadLocal = new InheritableThreadLocal<>();\n        ThreadLocal.set(\"父类数据:threadLocal\");\n        inheritableThreadLocal.set(\"父类数据:inheritableThreadLocal\");\n\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(\"子线程获取父类ThreadLocal数据：\" + ThreadLocal.get());\n                System.out.println(\"子线程获取父类inheritableThreadLocal数据：\" + inheritableThreadLocal.get());\n            }\n        }).start();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Java String Concatenation Methods\nDESCRIPTION: Different ways to concatenate strings in Java before String Templates feature, including concatenation operator, String.format(), MessageFormat, and StringBuilder.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java21.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n//concatenation\nmessage = \"Greetings \" + name + \"!\";\n\n//String.format()\nmessage = String.format(\"Greetings %s!\", name);  //concatenation\n\n//MessageFormat\nmessage = new MessageFormat(\"Greetings {0}!\").format(name);\n\n//StringBuilder\nmessage = new StringBuilder().append(\"Greetings \").append(name).append(\"!\").toString();\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory-Mapped File I/O in Java\nDESCRIPTION: This code snippet demonstrates how to use memory-mapped file I/O in Java using FileChannel and MappedByteBuffer for improved performance.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/rocketmq-questions.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nFileChannel fileChannel = new RandomAccessFile(\"test.txt\", \"rw\").getChannel();\nMappedByteBuffer mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_WRITE, 0, fileChannel.size());\n```\n\n----------------------------------------\n\nTITLE: Generating Random Level for Skip List Node in Java\nDESCRIPTION: Implements a method to randomly generate the level for a new node in the skip list, ensuring proper level distribution.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-skiplist.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nprivate int randomLevel() {\n    int level = 1;\n    while (Math.random() > PROB && level < MAX_LEVEL) {\n        ++level;\n    }\n    return level;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Producer-Consumer Pattern with ArrayBlockingQueue in Java\nDESCRIPTION: Demonstrates using ArrayBlockingQueue for a producer-consumer scenario. Uses put() and take() methods for blocking operations, and a CountDownLatch for synchronization.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class ProducerConsumerExample {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        // 创建一个大小为 5 的 ArrayBlockingQueue\n        ArrayBlockingQueue<Integer> queue = new ArrayBlockingQueue<>(5);\n\n        // 创建生产者线程\n        Thread producer = new Thread(() -> {\n            try {\n                for (int i = 1; i <= 10; i++) {\n                    // 向队列中添加元素，如果队列已满则阻塞等待\n                    queue.put(i);\n                    System.out.println(\"生产者添加元素：\" + i);\n                }\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n\n        });\n\n        CountDownLatch countDownLatch = new CountDownLatch(1);\n\n        // 创建消费者线程\n        Thread consumer = new Thread(() -> {\n            try {\n                int count = 0;\n                while (true) {\n\n                    // 从队列中取出元素，如果队列为空则阻塞等待\n                    int element = queue.take();\n                    System.out.println(\"消费者取出元素：\" + element);\n                    ++count;\n                    if (count == 10) {\n                        break;\n                    }\n                }\n\n                countDownLatch.countDown();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n\n        });\n\n        // 启动线程\n        producer.start();\n        consumer.start();\n\n        // 等待线程结束\n        producer.join();\n        consumer.join();\n\n        countDownLatch.await();\n\n        producer.interrupt();\n        consumer.interrupt();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Character Caching Implementation in Java\nDESCRIPTION: This code demonstrates how Character objects are cached for values between 0 and 127, improving performance for frequently used characters.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic static Character valueOf(char c) {\n    if (c <= 127) { // must cache\n      return CharacterCache.cache[(int)c];\n    }\n    return new Character(c);\n}\n\nprivate static class CharacterCache {\n    private CharacterCache(){}\n    static final Character cache[] = new Character[127 + 1];\n    static {\n        for (int i = 0; i < cache.length; i++)\n            cache[i] = new Character((char)i);\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Put Operation in HashMap with LinkedHashMap Hooks\nDESCRIPTION: Shows the putVal implementation in HashMap that includes hooks for LinkedHashMap's custom behavior through afterNodeAccess and afterNodeInsertion.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedhashmap-source-code.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n          //略\n            if (e != null) { \n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        ++modCount;\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Kafka Producer Message Sending\nDESCRIPTION: Example of sending multiple messages to a Kafka topic using KafkaTemplate\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/kafka-questions-01.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfor (int i = 0; i < 10; i++) {\n   kafkaTemplate.send(KafkaConst.TEST_TOPIC, String.valueOf(i))\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with TRUNCATE in SQL\nDESCRIPTION: Demonstrates how to delete all records from exam_record table while resetting the auto-increment primary key using TRUNCATE command.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nTRUNCATE exam_record;\n```\n\n----------------------------------------\n\nTITLE: Querying Redis Maxmemory Configuration\nDESCRIPTION: Command to check the configured maximum memory limit in Redis using the config get command.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n> config get maxmemory\nmaxmemory\n0\n```\n\n----------------------------------------\n\nTITLE: Rehashing in Java 7 ConcurrentHashMap\nDESCRIPTION: This method handles the rehashing process when the ConcurrentHashMap needs to expand. It creates a new table with double the capacity and redistributes the existing entries.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/concurrent-hash-map-source-code.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nprivate void rehash(HashEntry<K,V> node) {\n    HashEntry<K,V>[] oldTable = table;\n    // 老容量\n    int oldCapacity = oldTable.length;\n    // 新容量，扩大两倍\n    int newCapacity = oldCapacity << 1;\n    // 新的扩容阀值\n    threshold = (int)(newCapacity * loadFactor);\n    // 创建新的数组\n    HashEntry<K,V>[] newTable = (HashEntry<K,V>[]) new HashEntry[newCapacity];\n    // 新的掩码，默认2扩容后是4，-1是3，二进制就是11。\n    int sizeMask = newCapacity - 1;\n    for (int i = 0; i < oldCapacity ; i++) {\n        // 遍历老数组\n        HashEntry<K,V> e = oldTable[i];\n        if (e != null) {\n            HashEntry<K,V> next = e.next;\n            // 计算新的位置，新的位置只可能是不变或者是老的位置+老的容量。\n            int idx = e.hash & sizeMask;\n            if (next == null)   //  Single node on list\n                // 如果当前位置还不是链表，只是一个元素，直接赋值\n                newTable[idx] = e;\n            else { // Reuse consecutive sequence at same slot\n                // 如果是链表了\n                HashEntry<K,V> lastRun = e;\n                int lastIdx = idx;\n                // 新的位置只可能是不变或者是老的位置+老的容量。\n                // 遍历结束后，lastRun 后面的元素位置都是相同的\n                for (HashEntry<K,V> last = next; last != null; last = last.next) {\n                    int k = last.hash & sizeMask;\n                    if (k != lastIdx) {\n                        lastIdx = k;\n                        lastRun = last;\n                    }\n                }\n                // ，lastRun 后面的元素位置都是相同的，直接作为链表赋值到新位置。\n                newTable[lastIdx] = lastRun;\n                // Clone remaining nodes\n                for (HashEntry<K,V> p = e; p != lastRun; p = p.next) {\n                    // 遍历剩余元素，头插法到指定 k 位置。\n                    V v = p.value;\n                    int h = p.hash;\n                    int k = h & sizeMask;\n                    HashEntry<K,V> n = newTable[k];\n                    newTable[k] = new HashEntry<K,V>(h, p.key, v, n);\n                }\n            }\n        }\n    }\n    // 头插法插入新的节点\n    int nodeIndex = node.hash & sizeMask; // add the new node\n    node.setNext(newTable[nodeIndex]);\n    newTable[nodeIndex] = node;\n    table = newTable;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Stack Implementation in Java\nDESCRIPTION: Demonstrates usage and testing of the custom MyStack implementation in Java.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/data-structure/linear-data-structure.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nMyStack myStack = new MyStack(3);\nmyStack.push(1);\nmyStack.push(2);\nmyStack.push(3);\nmyStack.push(4);\nmyStack.push(5);\nmyStack.push(6);\nmyStack.push(7);\nmyStack.push(8);\nSystem.out.println(myStack.peek());//8\nSystem.out.println(myStack.size());//8\nfor (int i = 0; i < 8; i++) {\n    System.out.println(myStack.pop());\n}\nSystem.out.println(myStack.isEmpty());//true\nmyStack.pop();//报错：java.lang.IllegalArgumentException: Stack is empty.\n```\n\n----------------------------------------\n\nTITLE: Null Object Pattern for ConcurrentHashMap\nDESCRIPTION: Implementation of a static null object to use as a replacement for null values in ConcurrentHashMap since it doesn't support null keys or values\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic static final Object NULL = new Object();\n```\n\n----------------------------------------\n\nTITLE: Synchronized Method Examples\nDESCRIPTION: Examples of using synchronized keyword on instance methods, static methods and code blocks.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nsynchronized void method() {\n    //业务代码\n}\n\nsynchronized static void method() {\n    //业务代码\n}\n\nsynchronized(this) {\n    //业务代码\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Runnable Interface in Java\nDESCRIPTION: Definition of the Runnable interface in Java, which represents a task that can be executed by a thread.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-summary.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n@FunctionalInterface\npublic interface Runnable {\n   /**\n    * 被线程执行，没有返回值也无法抛出异常\n    */\n    public abstract void run();\n}\n```\n\n----------------------------------------\n\nTITLE: String Enhancement Methods in Java 12\nDESCRIPTION: Demonstrates the new indent() and transform() methods added to String class for text manipulation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java12-13.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nString text = \"Java\";\n// 缩进 4 格\ntext = text.indent(4);\nSystem.out.println(text);\ntext = text.indent(-10);\nSystem.out.println(text);\n```\n\n----------------------------------------\n\nTITLE: Element Enqueuing in ArrayBlockingQueue\nDESCRIPTION: Internal method to add an element to the queue and signal waiting consumers that the queue is not empty.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nprivate void enqueue(E x) {\n    final Object[] items = this.items;\n    items[putIndex] = x;\n    if (++putIndex == items.length)\n        putIndex = 0;\n    count++;\n    notEmpty.signal();\n}\n```\n\n----------------------------------------\n\nTITLE: Student Grade Classification Example with CASE WHEN\nDESCRIPTION: A practical example showing how to use CASE WHEN THEN to classify student scores into different grade categories based on score ranges.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT score,\n    CASE\n        WHEN score >= 90 THEN '优秀'\n        WHEN score >= 80 THEN '良好'\n        WHEN score >= 60 THEN '及格'\n        ELSE '不及格'\n    END AS grade\nFROM student_scores;\n```\n\n----------------------------------------\n\nTITLE: 为Redis分布式锁设置过期时间\nDESCRIPTION: 使用SET命令的扩展选项为Redis分布式锁设置过期时间，防止锁长时间未释放导致的资源阻塞问题。EX表示过期时间（秒），NX表示仅在key不存在时才设置。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-lock-implementations.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1:6379> SET lockKey uniqueValue EX 3 NX\nOK\n```\n\n----------------------------------------\n\nTITLE: Structured Concurrency Basic Usage Example\nDESCRIPTION: Shows how to use StructuredTaskScope for handling concurrent tasks in a structured way. The example demonstrates forking tasks, joining threads, and processing results.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java19.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\ntry (var scope = new StructuredTaskScope<Object>()) {\n    // 使用fork方法派生线程来执行子任务\n    Future<Integer> future1 = scope.fork(task1);\n    Future<String> future2 = scope.fork(task2);\n    // 等待线程完成\n    scope.join();\n    // 结果的处理可能包括处理或重新抛出异常\n    ... process results/exceptions ...\n} // close\n```\n\n----------------------------------------\n\nTITLE: RpcStatus Class for Tracking Active Requests in Dubbo (Java)\nDESCRIPTION: This snippet shows the RpcStatus class used by Dubbo to track active requests for each method of a service provider. It uses a ConcurrentMap to store the active request count for each URL and method combination.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/rpc/dubbo.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class RpcStatus {\n\n    private static final ConcurrentMap<String, ConcurrentMap<String, RpcStatus>> METHOD_STATISTICS =\n            new ConcurrentHashMap<String, ConcurrentMap<String, RpcStatus>>();\n\n   public static RpcStatus getStatus(URL url, String methodName) {\n        String uri = url.toIdentityString();\n        ConcurrentMap<String, RpcStatus> map = METHOD_STATISTICS.computeIfAbsent(uri, k -> new ConcurrentHashMap<>());\n        return map.computeIfAbsent(methodName, k -> new RpcStatus());\n    }\n    public int getActive() {\n        return active.get();\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction Message for Adding User View History in Java\nDESCRIPTION: This code snippet demonstrates how to send a transaction message using RocketMQ for adding user view history. It uses a Function interface to encapsulate the business logic and passes it as a parameter to the message sending method.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/rocketmq-questions.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@PostMapping(\"/add\")\n@ApiOperation(\"添加用户浏览记录\")\npublic Result<TransactionSendResult> add(Long userId, Long forecastLogId) {\n\n        // 函数式编程:浏览记录入库\n        Function<String, Boolean> function = transactionId -> viewHistoryHandler.addViewHistory(transactionId, userId, forecastLogId);\n\n        Map<String, Long> hashMap = new HashMap<>();\n        hashMap.put(\"userId\", userId);\n        hashMap.put(\"forecastLogId\", forecastLogId);\n        String jsonString = JSON.toJSONString(hashMap);\n\n        // 发送事务消息;将本地的事务操作,用函数Function接口接收,作为一个参数传入到方法中\n        TransactionSendResult transactionSendResult = mqProducerService.sendTransactionMessage(jsonString, MQDestination.TAG_ADD_VIEW_HISTORY, function);\n        return Result.success(transactionSendResult);\n}\n```\n\n----------------------------------------\n\nTITLE: Thread Safety Improvements using Synchronization\nDESCRIPTION: Different approaches to make the increment operation thread-safe using synchronized, AtomicInteger and ReentrantLock\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic synchronized void increase() {\n    inc++;\n}\n\npublic AtomicInteger inc = new AtomicInteger();\n\npublic void increase() {\n    inc.getAndIncrement();\n}\n\nLock lock = new ReentrantLock();\npublic void increase() {\n    lock.lock();\n    try {\n        inc++;\n    } finally {\n        lock.unlock();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Static and non-static code block execution in Java\nDESCRIPTION: This code snippet demonstrates the execution order of static and non-static code blocks in Java. It shows how static blocks are executed before non-static blocks and constructors.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-keyword-summary.md#2025-04-20_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\npublic class Test {\n    public Test() {\n        System.out.print(\"默认构造方法！--\");\n    }\n    //非静态代码块\n    {\n        System.out.print(\"非静态代码块！--\");\n    }\n    //静态代码块\n    static {\n        System.out.print(\"静态代码块！--\");\n    }\n    private static void test() {\n        System.out.print(\"静态方法中的内容! --\");\n        {\n            System.out.print(\"静态方法中的代码块！--\");\n        }\n    }\n    public static void main(String[] args) {\n        Test test = new Test();\n        Test.test();//静态代码块！--静态方法中的内容! --静态方法中的代码块！--\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Time Complexity of Linked List Operations in Java\nDESCRIPTION: Shows the time complexity of basic operations (access, insert, delete) on linked lists in Java.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/data-structure/linear-data-structure.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n假如链表中有n个元素。\n访问：O（n）//访问特定位置的元素\n插入删除：O（1）//必须要要知道插入元素的位置\n```\n\n----------------------------------------\n\nTITLE: Element Dequeuing in ArrayBlockingQueue\nDESCRIPTION: Internal method to remove and return an element from the queue and signal waiting producers that the queue is not full.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nprivate E dequeue() {\n  final Object[] items = this.items;\n  @SuppressWarnings(\"unchecked\")\n  E x = (E) items[takeIndex];\n  items[takeIndex] = null;\n  if (++takeIndex == items.length)\n      takeIndex = 0;\n  count--;\n  if (itrs != null)\n      itrs.elementDequeued();\n  notFull.signal();\n  return x;\n}\n```\n\n----------------------------------------\n\nTITLE: 事务外部修改WATCH监视的键\nDESCRIPTION: 展示了在WATCH命令监视键后，如果在同一会话的事务外部修改了该键，随后的事务将无法执行成功。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-02.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> SET PROJECT \"JavaGuide\"\nOK\n> WATCH PROJECT\nOK\n> SET PROJECT \"JavaGuide2\"\nOK\n> MULTI\nOK\n> GET USER\nQUEUED\n> EXEC\n(nil)\n```\n\n----------------------------------------\n\nTITLE: Defining Static Members in Non-Static Inner Classes in Java 16\nDESCRIPTION: This code snippet demonstrates the new ability to define non-constant static members in non-static inner classes, which was introduced in Java 16.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java16.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class Outer {\n  class Inner {\n    static int age;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: 接口方法类型示例\nDESCRIPTION: 展示Java 8及以上版本中接口支持的不同方法类型:default方法、static方法和private方法\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic interface MyInterface {\n    // default 方法\n    default void defaultMethod() {\n        commonMethod();\n    }\n\n    // static 方法\n    static void staticMethod() {\n        commonMethod();\n    }\n\n    // 私有静态方法，可以被 static 和 default 方法调用\n    private static void commonMethod() {\n        System.out.println(\"This is a private method used internally.\");\n    }\n\n      // 实例私有方法，只能被 default 方法调用。\n    private void instanceCommonMethod() {\n        System.out.println(\"This is a private instance method used internally.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java DeadLock Implementation\nDESCRIPTION: Example code demonstrating a deadlock situation between two threads using synchronized resources\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jdk-monitoring-and-troubleshooting-tools.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class DeadLockDemo {\n    private static Object resource1 = new Object();//资源 1\n    private static Object resource2 = new Object();//资源 2\n\n    public static void main(String[] args) {\n        new Thread(() -> {\n            synchronized (resource1) {\n                System.out.println(Thread.currentThread() + \"get resource1\");\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread() + \"waiting get resource2\");\n                synchronized (resource2) {\n                    System.out.println(Thread.currentThread() + \"get resource2\");\n                }\n            }\n        }, \"线程 1\").start();\n\n        new Thread(() -> {\n            synchronized (resource2) {\n                System.out.println(Thread.currentThread() + \"get resource2\");\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(Thread.currentThread() + \"waiting get resource1\");\n                synchronized (resource1) {\n                    System.out.println(Thread.currentThread() + \"get resource1\");\n                }\n            }\n        }, \"线程 2\").start();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Truncated Average Score for SQL Hard Exams (Proper Approach)\nDESCRIPTION: A more comprehensive SQL query that calculates the truncated average for hard SQL exams. This implementation uses subqueries to properly identify the SQL hard exam by its tag and difficulty rather than hardcoding the exam ID.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT tag,\n       difficulty,\n       ROUND(AVG(score), 1) clip_avg_score\nFROM examination_info info\nINNER JOIN exam_record record\nWHERE info.exam_id = record.exam_id\n  AND record.exam_id =\n    (SELECT examination_info.exam_id\n     FROM examination_info\n     WHERE tag = 'SQL'\n       AND difficulty = 'hard' )\n  AND record.score NOT IN\n    (SELECT MAX(score)\n     FROM exam_record\n     WHERE exam_id =\n         (SELECT examination_info.exam_id\n          FROM examination_info\n          WHERE tag = 'SQL'\n            AND difficulty = 'hard' )\n     UNION ALL SELECT MIN(score)\n     FROM exam_record\n     WHERE exam_id =\n         (SELECT examination_info.exam_id\n          FROM examination_info\n          WHERE tag = 'SQL'\n            AND difficulty = 'hard' ) )\n```\n\n----------------------------------------\n\nTITLE: Hashing Function for HashMap in Java\nDESCRIPTION: The hash method used in HashMap to compute the hash code of keys. It applies a bitwise XOR operation to spread the influence of higher bits.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n    static final int hash(Object key) {\n      int h;\n      // key.hashCode()：返回散列值也就是hashcode\n      // ^：按位异或\n      // >>>:无符号右移，忽略符号位，空位都以0补齐\n      return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n  }\n```\n\n----------------------------------------\n\nTITLE: Depicting Leader Election Process in ZooKeeper\nDESCRIPTION: Diagram illustrating the leader election process in ZooKeeper using temporary nodes and watchers.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![选主](https://oss.javaguide.cn/p3-juejin/00468757fb8f4f51875f645fbb7b25a2~tplv-k3u1fbpfcp-zoom-1.jpeg)\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Auto-Increment Primary Key in MySQL\nDESCRIPTION: This SQL snippet demonstrates how to create a table with an auto-increment primary key in MySQL. It includes the table definition with ID as the auto-increment field and a unique key on the 'stub' column.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-questions-01.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `sequence_id` (\n  `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,\n  `stub` CHAR(10) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `stub` (`stub`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n----------------------------------------\n\nTITLE: 使用AtomicStampedReference进行带版本号的引用类型原子操作\nDESCRIPTION: 演示了如何使用AtomicStampedReference类对带有版本号的引用类型进行原子操作，可用于解决ABA问题。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/atomic-classes.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nAtomicStampedReference<String> asr = new AtomicStampedReference<>(\"SnailClimb\", 1);\n\nint[] initialStamp = new int[1];\nString initialRef = asr.get(initialStamp);\nSystem.out.println(\"Initial Reference: \" + initialRef + \", Initial Stamp: \" + initialStamp[0]);\n\nint oldStamp = initialStamp[0];\nString oldRef = initialRef;\nString newRef = \"Daisy\";\nint newStamp = oldStamp + 1;\n\nboolean isUpdated = asr.compareAndSet(oldRef, newRef, oldStamp, newStamp);\nSystem.out.println(\"Update Success: \" + isUpdated);\n\nint[] updatedStamp = new int[1];\nString updatedRef = asr.get(updatedStamp);\nSystem.out.println(\"Updated Reference: \" + updatedRef + \", Updated Stamp: \" + updatedStamp[0]);\n\nboolean isUpdatedWithWrongStamp = asr.compareAndSet(newRef, \"John\", oldStamp, newStamp + 1);\nSystem.out.println(\"Update with Wrong Stamp Success: \" + isUpdatedWithWrongStamp);\n\nint[] finalStamp = new int[1];\nString finalRef = asr.get(finalStamp);\nSystem.out.println(\"Final Reference: \" + finalRef + \", Final Stamp: \" + finalStamp[0]);\n```\n\n----------------------------------------\n\nTITLE: Atomic Compound Operations Solutions\nDESCRIPTION: Examples of using atomic compound operations putIfAbsent and computeIfAbsent to ensure thread safety\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// 线程 A\nmap.putIfAbsent(key, value);\n// 线程 B\nmap.putIfAbsent(key, anotherValue);\n```\n\nLANGUAGE: java\nCODE:\n```\n// 线程 A\nmap.computeIfAbsent(key, k -> value);\n// 线程 B\nmap.computeIfAbsent(key, k -> anotherValue);\n```\n\n----------------------------------------\n\nTITLE: Implementing String Class with byte[] in Java 9+\nDESCRIPTION: This code snippet shows the implementation of the String class in Java 9 and later versions, where the internal representation has changed from char[] to byte[] for memory efficiency.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic final class String implements java.io.Serializable,Comparable<String>, CharSequence {\n    // @Stable 注解表示变量最多被修改一次，称为\"稳定的\"。\n    @Stable\n    private final byte[] value;\n}\n```\n\n----------------------------------------\n\nTITLE: Using EXPLAIN Command for SQL Analysis\nDESCRIPTION: Example showing EXPLAIN command usage for analyzing query execution plans and index usage. This is a key tool for SQL performance optimization.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-questions-01.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN\n```\n\n----------------------------------------\n\nTITLE: 查询Redis进程内存交换信息\nDESCRIPTION: 使用cat命令查看特定进程的内存映射信息，并通过grep过滤出与内存交换相关的行。这个命令用于检查Redis进程是否发生了内存交换。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-common-blocking-problems-summary.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat /proc/4476/smaps | grep Swap\n```\n\n----------------------------------------\n\nTITLE: Using Record Patterns with instanceof in Java\nDESCRIPTION: This code demonstrates the use of record patterns with instanceof to destructure and extract data from record classes more conveniently.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java20.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nrecord Shape(String type, long unit){}\n\nShape circle = new Shape(\"Circle\", 10);\nif (circle instanceof Shape(String type, long unit)) {\n  System.out.println(\"Area of \" + type + \" is : \" + Math.PI * Math.pow(unit, 2));\n}\n```\n\n----------------------------------------\n\nTITLE: Copying File Content Using BufferedInputStream and BufferedOutputStream with Try-with-Resources\nDESCRIPTION: This code snippet demonstrates how to use multiple resources in a try-with-resources statement to copy content from one file to another using BufferedInputStream and BufferedOutputStream.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-03.md#2025-04-20_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\ntry (BufferedInputStream bin = new BufferedInputStream(new FileInputStream(new File(\"test.txt\")));\n     BufferedOutputStream bout = new BufferedOutputStream(new FileOutputStream(new File(\"out.txt\")))) {\n    int b;\n    while ((b = bin.read()) != -1) {\n        bout.write(b);\n    }\n}\ncatch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n----------------------------------------\n\nTITLE: Performance Test With ensureCapacity in Java\nDESCRIPTION: A performance test measuring the time required to add a large number of elements to an ArrayList after pre-allocating capacity using the ensureCapacity method to avoid incremental resizing.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npublic class EnsureCapacityTest {\n    public static void main(String[] args) {\n        ArrayList<Object> list = new ArrayList<Object>();\n        final int N = 10000000;\n        long startTime1 = System.currentTimeMillis();\n        list.ensureCapacity(N);\n        for (int i = 0; i < N; i++) {\n            list.add(i);\n        }\n        long endTime1 = System.currentTimeMillis();\n        System.out.println(\"使用ensureCapacity方法后：\"+(endTime1 - startTime1));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Vector API Computation Examples\nDESCRIPTION: Demonstrates scalar and vector computation implementations using the Vector API in Java 18, showing performance improvements for array operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java18.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nvoid scalarComputation(float[] a, float[] b, float[] c) {\n   for (int i = 0; i < a.length; i++) {\n        c[i] = (a[i] * a[i] + b[i] * b[i]) * -1.0f;\n   }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nstatic final VectorSpecies<Float> SPECIES = FloatVector.SPECIES_PREFERRED;\n\nvoid vectorComputation(float[] a, float[] b, float[] c) {\n    int i = 0;\n    int upperBound = SPECIES.loopBound(a.length);\n    for (; i < upperBound; i += SPECIES.length()) {\n        // FloatVector va, vb, vc;\n        var va = FloatVector.fromArray(SPECIES, a, i);\n        var vb = FloatVector.fromArray(SPECIES, b, i);\n        var vc = va.mul(va)\n                   .add(vb.mul(vb))\n                   .neg();\n        vc.intoArray(c, i);\n    }\n    for (; i < a.length; i++) {\n        c[i] = (a[i] * a[i] + b[i] * b[i]) * -1.0f;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CopyOnWriteArrayList in Java\nDESCRIPTION: Different constructors for initializing a CopyOnWriteArrayList, including empty list, from existing collection, and from array.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/copyonwritearraylist-source-code.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic CopyOnWriteArrayList() {\n    setArray(new Object[0]);\n}\n\npublic CopyOnWriteArrayList(Collection<? extends E> c) {\n    Object[] elements;\n    if (c.getClass() == CopyOnWriteArrayList.class)\n        elements = ((CopyOnWriteArrayList<?>)c).getArray();\n    else {\n        elements = c.toArray();\n        if (elements.getClass() != Object[].class)\n            elements = Arrays.copyOf(elements, elements.length, Object[].class);\n    }\n    setArray(elements);\n}\n\npublic CopyOnWriteArrayList(E[] toCopyIn) {\n    setArray(Arrays.copyOf(toCopyIn, toCopyIn.length, Object[].class));\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Monthly and Daily Question Practice Counts\nDESCRIPTION: This query analyzes the monthly total and daily average question practice counts for 2021. It uses date functions to format months, calculate days in each month, and provides a summary for the entire year using UNION ALL.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT DATE_FORMAT(submit_time, '%Y%m') submit_month,\n       count(question_id) month_q_cnt,\n       ROUND(COUNT(question_id) / DAY (LAST_DAY(submit_time)), 3) avg_day_q_cnt\nFROM practice_record\nWHERE DATE_FORMAT(submit_time, '%Y') = '2021'\nGROUP BY submit_month\nUNION ALL\nSELECT '2021汇总' AS submit_month,\n       count(question_id) month_q_cnt,\n       ROUND(COUNT(question_id) / 31, 3) avg_day_q_cnt\nFROM practice_record\nWHERE DATE_FORMAT(submit_time, '%Y') = '2021'\nORDER BY submit_month\n```\n\n----------------------------------------\n\nTITLE: Finding Algorithm Users Who Completed Tests on Registration Day\nDESCRIPTION: Complex SQL query to find algorithm job candidates who completed algorithm tests on their registration day, with pagination showing the third page of results ordered by max score.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-05.md#2025-04-20_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT t1.uid,\n       LEVEL,\n       register_time,\n       max(score) AS max_score\nFROM exam_record t\nJOIN examination_info USING (exam_id)\nJOIN user_info t1 ON t.uid = t1.uid\nAND date(t.submit_time) = date(t1.register_time)\nWHERE job = '算法'\n  AND tag = '算法'\nGROUP BY t1.uid,\n         LEVEL,\n         register_time\nORDER BY max_score DESC\nLIMIT 6,3\n```\n\n----------------------------------------\n\nTITLE: Comparing Local and Remote Function Calls in RPC\nDESCRIPTION: These code snippets illustrate the difference between calling a local function and a remote function using RPC. The syntax is similar, demonstrating how RPC aims to make remote calls feel like local ones.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/rpc/http&rpc.md#2025-04-20_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nres = localFunc(req)\n```\n\nLANGUAGE: ini\nCODE:\n```\nres = remoteFunc(req)\n```\n\n----------------------------------------\n\nTITLE: Add Operation in ArrayBlockingQueue\nDESCRIPTION: Implementation of add operation that throws an exception if the queue is full instead of returning false.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic boolean add(E e) {\n        return super.add(e);\n    }\n\npublic boolean add(E e) {\n        if (offer(e))\n            return true;\n        else\n            throw new IllegalStateException(\"Queue full\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Down Command Options\nDESCRIPTION: Commands for stopping and removing containers, networks, and volumes created by 'docker-compose up' with various options for targeting specific services or just stopping without removal.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-intro.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# 在当前目录下寻找 docker-compose.yml 文件\n# 根据其中定义移除启动的所有容器，网络和卷。\ndocker-compose down\n# 停止容器但不移除\ndocker-compose down --stop\n# 指定要停止和移除的特定服务，而不是停止和移除所有服务\n# 可以同时指定多个服务，用空格分隔。\ndocker-compose down service_name\n```\n\n----------------------------------------\n\nTITLE: Inefficient String Concatenation in Loops with '+' Operator\nDESCRIPTION: This code shows the inefficient way of concatenating strings in a loop using the '+' operator. This approach creates a new StringBuilder object on each iteration, which is inefficient for memory usage and performance.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nString[] arr = {\"he\", \"llo\", \"world\"};\nString s = \"\";\nfor (int i = 0; i < arr.length; i++) {\n    s += arr[i];\n}\nSystem.out.println(s);\n```\n\n----------------------------------------\n\nTITLE: Implementing Bucket Sort in Java\nDESCRIPTION: Java implementation of the Bucket Sort algorithm, including methods for finding min/max values and the main sorting function.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/10-classical-sorting-algorithms.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nprivate static int[] getMinAndMax(List<Integer> arr) {\n    int maxValue = arr.get(0);\n    int minValue = arr.get(0);\n    for (int i : arr) {\n        if (i > maxValue) {\n            maxValue = i;\n        } else if (i < minValue) {\n            minValue = i;\n        }\n    }\n    return new int[] { minValue, maxValue };\n}\n\npublic static List<Integer> bucketSort(List<Integer> arr, int bucket_size) {\n    if (arr.size() < 2 || bucket_size == 0) {\n        return arr;\n    }\n    int[] extremum = getMinAndMax(arr);\n    int minValue = extremum[0];\n    int maxValue = extremum[1];\n    int bucket_cnt = (maxValue - minValue) / bucket_size + 1;\n    List<List<Integer>> buckets = new ArrayList<>();\n    for (int i = 0; i < bucket_cnt; i++) {\n        buckets.add(new ArrayList<Integer>());\n    }\n    for (int element : arr) {\n        int idx = (element - minValue) / bucket_size;\n        buckets.get(idx).add(element);\n    }\n    for (int i = 0; i < buckets.size(); i++) {\n        if (buckets.get(i).size() > 1) {\n            buckets.set(i, sort(buckets.get(i), bucket_size / 2));\n        }\n    }\n    ArrayList<Integer> result = new ArrayList<>();\n    for (List<Integer> bucket : buckets) {\n        for (int element : bucket) {\n            result.add(element);\n        }\n    }\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: SelectImports Method Implementation for Auto-Configuration\nDESCRIPTION: Implementation of the selectImports method that determines which auto-configuration classes should be loaded into the IoC container.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/spring-boot-auto-assembly-principles.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate static final String[] NO_IMPORTS = new String[0];\n\npublic String[] selectImports(AnnotationMetadata annotationMetadata) {\n        // <1>.判断自动装配开关是否打开\n        if (!this.isEnabled(annotationMetadata)) {\n            return NO_IMPORTS;\n        } else {\n          //<2>.获取所有需要装配的bean\n            AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader);\n            AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = this.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);\n            return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Fibonacci Sequence with Recursion in Java\nDESCRIPTION: This code implements the Fibonacci sequence calculation using recursion. While simple to understand, this approach has exponential time complexity O(2^n) due to repeated calculations, making it inefficient for larger inputs.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic int Fibonacci(int n) {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n == 1||n==2) {\n        return 1;\n    }\n\n    return Fibonacci(n - 2) + Fibonacci(n - 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Enhanced Null Pointer Exception in Java 14\nDESCRIPTION: Shows how Java 14 provides more detailed information in null pointer exceptions when using the -XX:+ShowCodeDetailsInExceptionMessages JVM parameter.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java14-15.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\na.b.c.i = 99; // 假设这段代码会发生空指针\n```\n\nLANGUAGE: java\nCODE:\n```\nException in thread \"main\" java.lang.NullPointerException\n    at NullPointerExample.main(NullPointerExample.java:5)\n```\n\nLANGUAGE: java\nCODE:\n```\nException in thread \"main\" java.lang.NullPointerException:\n        Cannot read field 'c' because 'a.b' is null.\n    at Prog.main(Prog.java:5)\n```\n\n----------------------------------------\n\nTITLE: LinkedList Iterator Implementation in Java\nDESCRIPTION: Shows the core implementation of LinkedList's bidirectional iterator (ListItr). It includes key fields used for tracking the current position and detecting concurrent modifications.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedlist-source-code.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// 双向迭代器\nprivate class ListItr implements ListIterator<E> {\n    // 表示上一次调用 next() 或 previous() 方法时经过的节点；\n    private Node<E> lastReturned;\n    // 表示下一个要遍历的节点；\n    private Node<E> next;\n    // 表示下一个要遍历的节点的下标，也就是当前节点的后继节点的下标；\n    private int nextIndex;\n    // 表示当前遍历期望的修改计数值，用于和 LinkedList 的 modCount 比较，判断链表是否被其他线程修改过。\n    private int expectedModCount = modCount;\n    …………\n}\n```\n\n----------------------------------------\n\nTITLE: Forward Iteration Methods in LinkedList Iterator in Java\nDESCRIPTION: Explains the implementation of hasNext() and next() methods in LinkedList's iterator for forward traversal. These methods check for the next element and return it while updating internal pointers.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedlist-source-code.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// 判断还有没有下一个节点\npublic boolean hasNext() {\n    // 判断下一个节点的下标是否小于链表的大小，如果是则表示还有下一个元素可以遍历\n    return nextIndex < size;\n}\n// 获取下一个节点\npublic E next() {\n    // 检查在迭代过程中链表是否被修改过\n    checkForComodification();\n    // 判断是否还有下一个节点可以遍历，如果没有则抛出 NoSuchElementException 异常\n    if (!hasNext())\n        throw new NoSuchElementException();\n    // 将 lastReturned 指向当前节点\n    lastReturned = next;\n    // 将 next 指向下一个节点\n    next = next.next;\n    nextIndex++;\n    return lastReturned.item;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThreadLocal's Hash Algorithm in Java\nDESCRIPTION: Code snippet showing the hash calculation used in ThreadLocalMap to determine the index for storing values.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class ThreadLocal<T> {\n    private final int threadLocalHashCode = nextHashCode();\n\n    private static AtomicInteger nextHashCode = new AtomicInteger();\n\n    private static final int HASH_INCREMENT = 0x61c88647;\n\n    private static int nextHashCode() {\n        return nextHashCode.getAndAdd(HASH_INCREMENT);\n    }\n\n    static class ThreadLocalMap {\n        ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) {\n            table = new Entry[INITIAL_CAPACITY];\n            int i = firstKey.threadLocalHashCode & (INITIAL_CAPACITY - 1);\n\n            table[i] = new Entry(firstKey, firstValue);\n            size = 1;\n            setThreshold(INITIAL_CAPACITY);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Future Interface in Java\nDESCRIPTION: Core Future interface definition showing the main methods for handling asynchronous tasks including cancellation, status checks and result retrieval.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/completablefuture-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface Future<V> {\n    boolean cancel(boolean mayInterruptIfRunning);\n    boolean isCancelled();\n    boolean isDone();\n    V get() throws InterruptedException, ExecutionException;\n    V get(long timeout, TimeUnit unit)\n        throws InterruptedException, ExecutionException, TimeoutException\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced String Methods in Java 11\nDESCRIPTION: Shows new String handling methods introduced in Java 11 including isBlank(), strip(), stripLeading(), stripTrailing(), repeat(), and lines().\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java11.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n//判断字符串是否为空\n\" \".isBlank();//true\n//去除字符串首尾空格\n\" Java \".strip();// \"Java\"\n//去除字符串首部空格\n\" Java \".stripLeading();   // \"Java \"\n//去除字符串尾部空格\n\" Java \".stripTrailing();  // \" Java\"\n//重复字符串多少次\n\"Java\".repeat(3);             // \"JavaJavaJava\"\n//返回由行终止符分隔的字符串集合。\n\"A\\nB\\nC\".lines().count();    // 3\n\"A\\nB\\nC\".lines().collect(Collectors.toList());\n```\n\n----------------------------------------\n\nTITLE: Traversing LinkedList using for-each loop in Java\nDESCRIPTION: Demonstrates how to use a for-each loop to iterate over elements in a LinkedList. This method is recommended as it's eventually converted to an iterator form.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedlist-source-code.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nLinkedList<String> list = new LinkedList<>();\nlist.add(\"apple\");\nlist.add(\"banana\");\nlist.add(\"pear\");\n\nfor (String fruit : list) {\n    System.out.println(fruit);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AbstractStringBuilder with byte[] in Java 9+\nDESCRIPTION: This code snippet shows the implementation of the AbstractStringBuilder class in Java 9 and later versions, where the internal representation has changed from char[] to byte[] for memory efficiency.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nabstract class AbstractStringBuilder implements Appendable, CharSequence {\n    byte[] value;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Circular Reference Example in Java\nDESCRIPTION: Code demonstrating circular reference between objects to explain limitations of reference counting garbage collection.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-garbage-collection.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ReferenceCountingGc {\n    Object instance = null;\n    public static void main(String[] args) {\n        ReferenceCountingGc objA = new ReferenceCountingGc();\n        ReferenceCountingGc objB = new ReferenceCountingGc();\n        objA.instance = objB;\n        objB.instance = objA;\n        objA = null;\n        objB = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Maven Standard Directory Structure\nDESCRIPTION: Shows the standard Maven project directory structure that maintains consistency across projects. This structure includes source code, resources, and test directories that Maven recognizes by default.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-best-practices.md#2025-04-20_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nsrc/\n  main/\n    java/\n    resources/\n  test/\n    java/\n    resources/\npom.xml\n```\n\n----------------------------------------\n\nTITLE: Creating String Objects with 'new String()' and Bytecode Analysis\nDESCRIPTION: This code and its bytecode analysis shows how new String() creates objects in memory. When using 'new String(\"abc\")', either 1 or 2 objects may be created depending on whether \"abc\" already exists in the string constant pool.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nString s1 = new String(\"abc\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Hidden Form Fields for Session Tracking in HTML\nDESCRIPTION: This snippet demonstrates how to use hidden form fields to maintain session state across page requests. This method is especially useful when cookies are disabled in the client browser.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/J2EE基础知识.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" name=\"session\" value=\"...\" />\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation of Big Data Projects\nDESCRIPTION: Overview of major open source big data processing frameworks and their core functionalities including Spark for unified analytics, Flink for stream processing, HBase for distributed storage, Flume for log aggregation, and Storm for real-time computation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/open-source-project/big-data.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Java 优质开源大数据项目\ncategory: 开源项目\nicon: big-data\n---\n\n- **[Spark](https://github.com/apache/spark)** :Spark 是用于大规模数据处理的统一分析引擎。\n- **[Flink](https://github.com/apache/flink \"flink\")**：Apache Flink 是一个框架和分布式处理引擎，用于在*无边界和有边界*数据流上进行有状态的计算。Flink 能在所有常见集群环境中运行，并能以内存速度和任意规模进行计算。\n- **[HBase](https://hbase.apache.org/)**：HBase – Hadoop Database，是一个高可靠性、高性能、面向列、可伸缩的分布式存储系统，利用 HBase 技术可在廉价 PC Server 上搭建起大规模结构化存储集群。\n- **[Flume](https://flume.apache.org/)** :Apache Flume 是一个分布式的、可靠的、可用的，从多种不同的源收集、聚集、移动大量日志数据到集中数据存储的系统。\n- **[Storm](https://storm.apache.org/)** : 一个分布式，高容错的实时计算系统。\n```\n\n----------------------------------------\n\nTITLE: Using Custom Docker Compose File Names\nDESCRIPTION: Command showing how to specify a custom filename for Docker Compose configuration using the -f parameter, allowing for environment-specific configurations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-intro.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.prod.yml up\n```\n\n----------------------------------------\n\nTITLE: 封装示例 - Student类\nDESCRIPTION: 展示封装原则的实现,通过private属性和public访问方法来控制对象状态的访问\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class Student {\n    private int id;//id属性私有化\n    private String name;//name属性私有化\n\n    //获取id的方法\n    public int getId() {\n        return id;\n    }\n\n    //设置id的方法\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    //获取name的方法\n    public String getName() {\n        return name;\n    }\n\n    //设置name的方法\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Logger SPI Interface in Java\nDESCRIPTION: Defines the Logger interface as the Service Provider Interface (SPI) that service providers will implement.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/spi.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage edu.jiangxuan.up.spi;\n\npublic interface Logger {\n    void info(String msg);\n    void debug(String msg);\n}\n```\n\n----------------------------------------\n\nTITLE: Backward Iteration Methods in LinkedList Iterator in Java\nDESCRIPTION: Demonstrates the implementation of hasPrevious() and previous() methods in LinkedList's iterator for backward traversal. These methods check for the previous element and return it while updating internal pointers.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedlist-source-code.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// 判断是否还有前一个节点\npublic boolean hasPrevious() {\n    return nextIndex > 0;\n}\n\n// 获取前一个节点\npublic E previous() {\n    // 检查是否在迭代过程中链表被修改\n    checkForComodification();\n    // 如果没有前一个节点，则抛出异常\n    if (!hasPrevious())\n        throw new NoSuchElementException();\n    // 将 lastReturned 和 next 指针指向上一个节点\n    lastReturned = next = (next == null) ? last : next.prev;\n    nextIndex--;\n    return lastReturned.item;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom java.lang.String Class (Invalid Example)\nDESCRIPTION: An example showing an attempt to define a custom String class in the java.lang package, which will fail due to the class loader's delegation model.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npackage java.lang;\npublic class String {\n    public static void main(String[] args) {\n        System.out.println();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling MySQL Query Cache via SQL Commands\nDESCRIPTION: SQL commands to dynamically enable MySQL query cache. These global settings activate the query cache and set its size without requiring a server restart.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-questions-01.md#2025-04-20_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nset global  query_cache_type=1;\nset global  query_cache_size=600000;\n```\n\n----------------------------------------\n\nTITLE: RocketMQ Transaction Message Listener Implementation in Java\nDESCRIPTION: This class implements the RocketMQLocalTransactionListener interface to handle local transaction execution and transaction status checks for RocketMQ transaction messages.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/rocketmq-questions.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Slf4j\n@RocketMQTransactionListener\npublic class TransactionMsgListener implements RocketMQLocalTransactionListener {\n\n    @Autowired\n    private RedisService redisService;\n\n    @Override\n    public RocketMQLocalTransactionState executeLocalTransaction(Message message, Object o) {\n        // Implementation details omitted for brevity\n    }\n\n    @Override\n    public RocketMQLocalTransactionState checkLocalTransaction(Message message) {\n        // Implementation details omitted for brevity\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Incomplete Exams and User Performance in SQL\nDESCRIPTION: This SQL query analyzes exam records to find users with more than one incomplete exam in 2021. It calculates incomplete and complete exam counts, and concatenates exam details including date and tag.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT a.uid,\n       SUM(CASE\n               WHEN a.submit_time IS NULL THEN 1\n           END) AS incomplete_cnt,\n       SUM(CASE\n               WHEN a.submit_time IS NOT NULL THEN 1\n           END) AS complete_cnt,\n       GROUP_CONCAT(DISTINCT CONCAT(DATE_FORMAT(a.start_time, '%Y-%m-%d'), ':', b.tag)\n                    ORDER BY start_time SEPARATOR \";\") AS detail\nFROM exam_record a\nLEFT JOIN examination_info b ON a.exam_id = b.exam_id\nWHERE YEAR (a.start_time)= 2021\nGROUP BY a.uid\nHAVING incomplete_cnt > 1\nAND complete_cnt >= 1\nAND incomplete_cnt < 5\nORDER BY incomplete_cnt DESC\n```\n\n----------------------------------------\n\nTITLE: Using DENSE_RANK() Window Function in MySQL\nDESCRIPTION: Illustrates how to use the DENSE_RANK() function to calculate rankings while preserving the same rank for tied values, unlike RANK() which leaves gaps.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col1, col2, DENSE_RANK() OVER (ORDER BY col1 DESC) AS ranking\nFROM table;\n```\n\n----------------------------------------\n\nTITLE: Testing Bloom Filter with Strings\nDESCRIPTION: Example code demonstrating how to test the custom Bloom Filter implementation with string values.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/data-structure/bloom-filter.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nString value1 = \"https://javaguide.cn/\";\nString value2 = \"https://github.com/Snailclimb\";\nMyBloomFilter filter = new MyBloomFilter();\nSystem.out.println(filter.contains(value1));\nSystem.out.println(filter.contains(value2));\nfilter.add(value1);\nfilter.add(value2);\nSystem.out.println(filter.contains(value1));\nSystem.out.println(filter.contains(value2));\n```\n\n----------------------------------------\n\nTITLE: Static Constants and Methods Example\nDESCRIPTION: Demonstration of static constants and methods usage in a Java class.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npublic class Example {\n    // 定义一个字符型常量\n    public static final char LETTER_A = 'A';\n\n    // 定义一个字符串常量\n    public static final String GREETING_MESSAGE = \"Hello, world!\";\n\n    public static void main(String[] args) {\n        // 输出字符型常量的值\n        System.out.println(\"字符型常量的值为：\" + LETTER_A);\n\n        // 输出字符串常量的值\n        System.out.println(\"字符串常量的值为：\" + GREETING_MESSAGE);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HashMap Constructors Implementation\nDESCRIPTION: Various constructor implementations of HashMap including default, copy, and parameterized constructors.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/hashmap-source-code.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic HashMap() {\n    this.loadFactor = DEFAULT_LOAD_FACTOR;\n}\n\npublic HashMap(Map<? extends K, ? extends V> m) {\n    this.loadFactor = DEFAULT_LOAD_FACTOR;\n    putMapEntries(m, false);\n}\n\npublic HashMap(int initialCapacity) {\n    this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\npublic HashMap(int initialCapacity, float loadFactor) {\n    if (initialCapacity < 0)\n        throw new IllegalArgumentException(\"Illegal initial capacity: \" + initialCapacity);\n    if (initialCapacity > MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    if (loadFactor <= 0 || Float.isNaN(loadFactor))\n        throw new IllegalArgumentException(\"Illegal load factor: \" + loadFactor);\n    this.loadFactor = loadFactor;\n    this.threshold = tableSizeFor(initialCapacity);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring jacoco-maven-plugin for Code Coverage in Maven\nDESCRIPTION: This snippet demonstrates how to configure the jacoco-maven-plugin in a Maven project to generate code coverage reports. The plugin is executed during the test phase with two main goals: prepare-agent for instrumentation and report for generating the coverage report.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-core-concepts.md#2025-04-20_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.jacoco</groupId>\n      <artifactId>jacoco-maven-plugin</artifactId>\n      <version>0.8.8</version>\n      <executions>\n        <execution>\n          <goals>\n            <goal>prepare-agent</goal>\n          </goals>\n        </execution>\n        <execution>\n          <id>generate-code-coverage-report</id>\n          <phase>test</phase>\n          <goals>\n            <goal>report</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Testing SQL Queries with Implicit Conversion in MySQL\nDESCRIPTION: Four SQL queries demonstrating different scenarios of implicit type conversion and their impact on index usage and query performance.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/index-invalidation-caused-by-implicit-conversion.md#2025-04-20_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n1: SELECT * FROM `test1` WHERE num1 = 10000;\n2: SELECT * FROM `test1` WHERE num1 = '10000';\n3: SELECT * FROM `test1` WHERE num2 = 10000;\n4: SELECT * FROM `test1` WHERE num2 = '10000';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lambda Expression in Java\nDESCRIPTION: Shows a simple lambda expression for iterating over a list. The code is then decompiled to illustrate how lambda expressions are implemented using JVM's lambda-related APIs.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String... args) {\n    List<String> strList = ImmutableList.of(\"Hollis\", \"公众号：Hollis\", \"博客：www.hollischuang.com\");\n\n    strList.forEach( s -> { System.out.println(s); } );\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic static /* varargs */ void main(String ... args) {\n    ImmutableList strList = ImmutableList.of((Object)\"Hollis\", (Object)\"\\u516c\\u4f17\\u53f7\\uff1aHollis\", (Object)\"\\u535a\\u5ba2\\uff1awww.hollischuang.com\");\n    strList.forEach((Consumer<String>)LambdaMetafactory.metafactory(null, null, null, (Ljava/lang/Object;)V, lambda$main$0(java.lang.String ), (Ljava/lang/String;)V)());\n}\n\nprivate static /* synthetic */ void lambda$main$0(String s) {\n    System.out.println(s);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Character and String Constants in Java\nDESCRIPTION: Example showing the difference between character and string constants, including their memory usage via a practical code example.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class StringExample {\n    // 字符型常量\n    public static final char LETTER_A = 'A';\n\n    // 字符串常量\n    public static final String GREETING_MESSAGE = \"Hello, world!\";\n    public static void main(String[] args) {\n        System.out.println(\"字符型常量占用的字节数为：\"+Character.BYTES);\n        System.out.println(\"字符串常量占用的字节数为：\"+GREETING_MESSAGE.getBytes().length);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 事务内部修改WATCH监视的键\nDESCRIPTION: 演示了在同一会话中，如果被WATCH监视的键在事务内部被修改，事务仍然可以成功执行的情况。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-02.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> SET PROJECT \"JavaGuide\"\nOK\n> WATCH PROJECT\nOK\n> MULTI\nOK\n> SET PROJECT \"JavaGuide1\"\nQUEUED\n> SET PROJECT \"JavaGuide2\"\nQUEUED\n> SET PROJECT \"JavaGuide3\"\nQUEUED\n> EXEC\n1) OK\n2) OK\n3) OK\n127.0.0.1:6379> GET PROJECT\n\"JavaGuide3\"\n```\n\n----------------------------------------\n\nTITLE: ApplicationListener Interface Definition\nDESCRIPTION: Interface definition for ApplicationListener in Spring's event mechanism. This functional interface defines the onApplicationEvent method that needs to be implemented by event listeners to handle ApplicationEvent objects.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/spring-design-patterns-summary.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage org.springframework.context;\nimport java.util.EventListener;\n@FunctionalInterface\npublic interface ApplicationListener<E extends ApplicationEvent> extends EventListener {\n    void onApplicationEvent(E var1);\n}\n```\n\n----------------------------------------\n\nTITLE: Map get Method Implementation with Error Handling\nDESCRIPTION: Shows the implementation of the get method that is used to retrieve parameter values from the parameter map in MyBatis. It throws a BindingException when a parameter is not found.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/mybatis/mybatis-interview.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic V get(Object key) {\n  if (!super.containsKey(key)) {\n    throw new BindingException(\"Parameter '\" + key + \"' not found. Available parameters are \" + keySet());\n  }\n  return super.get(key);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Autoboxing and Unboxing in Java\nDESCRIPTION: This code example illustrates autoboxing (converting primitive to wrapper) and unboxing (converting wrapper to primitive) operations in Java.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nInteger i = 10;  //装箱\nint n = i;   //拆箱\n```\n\n----------------------------------------\n\nTITLE: CASE WHEN Syntax Example in SQL\nDESCRIPTION: Demonstrates the basic syntax structure of CASE WHEN THEN statements in SQL, showing how to create conditional logic for returning different results based on specified conditions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nCASE\n    WHEN condition1 THEN result1\n    WHEN condition2 THEN result2\n    ...\n    ELSE result\nEND\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced Pseudo-Random Number Generator in Java 17\nDESCRIPTION: Demonstrates how to use the new RandomGeneratorFactory to create and use enhanced pseudo-random number generators with custom algorithms and seeds.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java17.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nRandomGeneratorFactory<RandomGenerator> l128X256MixRandom = RandomGeneratorFactory.of(\"L128X256MixRandom\");\n// 使用时间戳作为随机数种子\nRandomGenerator randomGenerator = l128X256MixRandom.create(System.currentTimeMillis());\n// 生成随机数\nrandomGenerator.nextInt(10);\n```\n\n----------------------------------------\n\nTITLE: Using EdDSA Digital Signature Algorithm in Java 15\nDESCRIPTION: Demonstrates the use of the new Edwards-Curve Digital Signature Algorithm (EdDSA) for digital signatures, which offers improved security and performance.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java14-15.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nKeyPairGenerator kpg = KeyPairGenerator.getInstance(\"Ed25519\");\nKeyPair kp = kpg.generateKeyPair();\n\nbyte[] msg = \"test_string\".getBytes(StandardCharsets.UTF_8);\n\nSignature sig = Signature.getInstance(\"Ed25519\");\nsig.initSign(kp.getPrivate());\nsig.update(msg);\nbyte[] s = sig.sign();\n\nString encodedString = Base64.getEncoder().encodeToString(s);\nSystem.out.println(encodedString);\n```\n\n----------------------------------------\n\nTITLE: Redis String类型的批量设置命令\nDESCRIPTION: 展示了如何使用MSET和MGET命令批量设置和获取多个key-value对。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-data-structures-01.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> MSET key1 value1 key2 value2\nOK\n> MGET key1 key2 # 批量获取多个 key 对应的 value\n1) \"value1\"\n2) \"value2\"\n```\n\n----------------------------------------\n\nTITLE: Complex Lambda Expression with Filtering in Java\nDESCRIPTION: Demonstrates a more complex use of lambda expressions involving stream filtering and collection. The decompiled version shows how multiple lambda expressions are implemented.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String... args) {\n    List<String> strList = ImmutableList.of(\"Hollis\", \"公众号：Hollis\", \"博客：www.hollischuang.com\");\n\n    List HollisList = strList.stream().filter(string -> string.contains(\"Hollis\")).collect(Collectors.toList());\n\n    HollisList.forEach( s -> { System.out.println(s); } );\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic static /* varargs */ void main(String ... args) {\n    ImmutableList strList = ImmutableList.of((Object)\"Hollis\", (Object)\"\\u516c\\u4f17\\u53f7\\uff1aHollis\", (Object)\"\\u535a\\u5ba2\\uff1awww.hollischuang.com\");\n    List<Object> HollisList = strList.stream().filter((Predicate<String>)LambdaMetafactory.metafactory(null, null, null, (Ljava/lang/Object;)Z, lambda$main$0(java.lang.String ), (Ljava/lang/String;)Z)()).collect(Collectors.toList());\n    HollisList.forEach((Consumer<Object>)LambdaMetafactory.metafactory(null, null, null, (Ljava/lang/Object;)V, lambda$main$1(java.lang.Object ), (Ljava/lang/Object;)V)());\n}\n\nprivate static /* synthetic */ void lambda$main$1(Object s) {\n    System.out.println(s);\n}\n\nprivate static /* synthetic */ boolean lambda$main$0(String string) {\n    return string.contains(\"Hollis\");\n}\n```\n\n----------------------------------------\n\nTITLE: Target Class for Reflection Operations\nDESCRIPTION: Sample class demonstrating various members that will be accessed using reflection, including private fields and methods.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/reflection.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage cn.javaguide;\n\npublic class TargetObject {\n    private String value;\n\n    public TargetObject() {\n        value = \"JavaGuide\";\n    }\n\n    public void publicMethod(String s) {\n        System.out.println(\"I love \" + s);\n    }\n\n    private void privateMethod() {\n        System.out.println(\"value is \" + value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Object Reference Parameter Passing in Java\nDESCRIPTION: Demonstrates how object references are passed by value in Java using a Person class example.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/why-there-only-value-passing-in-java.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic class Person {\n    private String name;\n   // 省略构造函数、Getter&Setter方法\n}\n\npublic static void main(String[] args) {\n    Person xiaoZhang = new Person(\"小张\");\n    Person xiaoLi = new Person(\"小李\");\n    swap(xiaoZhang, xiaoLi);\n    System.out.println(\"xiaoZhang:\" + xiaoZhang.getName());\n    System.out.println(\"xiaoLi:\" + xiaoLi.getName());\n}\n\npublic static void swap(Person person1, Person person2) {\n    Person temp = person1;\n    person1 = person2;\n    person2 = temp;\n    System.out.println(\"person1:\" + person1.getName());\n    System.out.println(\"person2:\" + person2.getName());\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MongoDB Aggregation Query\nDESCRIPTION: Example showing MongoDB aggregation pipeline with $match and $group stages. The query first filters orders with status 'A' and then groups by customer ID to calculate total amount per customer.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mongodb/mongodb-questions-01.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ndb.orders.aggregate([\n   # 第一阶段：$match阶段按status字段过滤文档，并将status等于\"A\"的文档传递到下一阶段。\n    { $match: { status: \"A\" } },\n  # 第二阶段：$group阶段按cust_id字段将文档分组，以计算每个cust_id唯一值的金额总和。\n    { $group: { _id: \"$cust_id\", total: { $sum: \"$amount\" } } }\n])\n```\n\n----------------------------------------\n\nTITLE: Primitive Array Conversion Issue Example\nDESCRIPTION: Demonstrates the issue when converting primitive type arrays using Arrays.asList(), where the array itself becomes the single element.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-precautions-for-use.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nint[] myArray = {1, 2, 3};\nList myList = Arrays.asList(myArray);\nSystem.out.println(myList.size());//1\nSystem.out.println(myList.get(0));//数组地址值\nSystem.out.println(myList.get(1));//报错：ArrayIndexOutOfBoundsException\nint[] array = (int[]) myList.get(0);\nSystem.out.println(array[0]);//1\n```\n\n----------------------------------------\n\nTITLE: GetAutoConfigurationEntry Method Implementation\nDESCRIPTION: Detailed implementation of the getAutoConfigurationEntry method that handles the loading of auto-configuration classes with filtering and exclusions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/spring-boot-auto-assembly-principles.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate static final AutoConfigurationEntry EMPTY_ENTRY = new AutoConfigurationEntry();\n\nAutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) {\n        //<1>.\n        if (!this.isEnabled(annotationMetadata)) {\n            return EMPTY_ENTRY;\n        } else {\n            //<2>.\n            AnnotationAttributes attributes = this.getAttributes(annotationMetadata);\n            //<3>.\n            List<String> configurations = this.getCandidateConfigurations(annotationMetadata, attributes);\n            //<4>.\n            configurations = this.removeDuplicates(configurations);\n            Set<String> exclusions = this.getExclusions(annotationMetadata, attributes);\n            this.checkExcludedClasses(configurations, exclusions);\n            configurations.removeAll(exclusions);\n            configurations = this.filter(configurations, autoConfigurationMetadata);\n            this.fireAutoConfigurationImportEvents(configurations, exclusions);\n            return new AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Switch Expression with yield in Java 13\nDESCRIPTION: Demonstrates the new yield keyword usage in switch expressions for returning values.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java12-13.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nprivate static String descLanguage(String name) {\n        return switch (name) {\n            case \"Java\": yield \"object-oriented, platform independent and secured\";\n            case \"Ruby\": yield \"a programmer's best friend\";\n            default: yield name +\" is a good language\";\n        };\n}\n```\n\n----------------------------------------\n\nTITLE: Java 9 Interface Private Methods\nDESCRIPTION: Example of private method declaration in interfaces, a new feature in Java 9.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java9.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic interface MyInterface {\n    private void methodPrivate(){\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching for switch in Java 17\nDESCRIPTION: Demonstrates the new pattern matching capabilities in switch expressions, allowing type checks and automatic casting.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java17.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Old code\nstatic String formatter(Object o) {\n    String formatted = \"unknown\";\n    if (o instanceof Integer i) {\n        formatted = String.format(\"int %d\", i);\n    } else if (o instanceof Long l) {\n        formatted = String.format(\"long %d\", l);\n    } else if (o instanceof Double d) {\n        formatted = String.format(\"double %f\", d);\n    } else if (o instanceof String s) {\n        formatted = String.format(\"String %s\", s);\n    }\n    return formatted;\n}\n\n// New code\nstatic String formatterPatternSwitch(Object o) {\n    return switch (o) {\n        case Integer i -> String.format(\"int %d\", i);\n        case Long l    -> String.format(\"long %d\", l);\n        case Double d  -> String.format(\"double %f\", d);\n        case String s  -> String.format(\"String %s\", s);\n        default        -> o.toString();\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: ApplicationEventPublisher Interface Definition\nDESCRIPTION: Interface definition for ApplicationEventPublisher in Spring's event mechanism. This interface provides methods to publish application events to listeners, which is a key component of Spring's observer pattern implementation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/spring-design-patterns-summary.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@FunctionalInterface\npublic interface ApplicationEventPublisher {\n    default void publishEvent(ApplicationEvent event) {\n        this.publishEvent((Object)event);\n    }\n\n    void publishEvent(Object var1);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Default Storage Engine\nDESCRIPTION: Demonstrates how to check the default storage engine in MySQL using a system variable query.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-questions-01.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSHOW VARIABLES LIKE '%storage_engine%';\n```\n\n----------------------------------------\n\nTITLE: ArrayList Null Value Demonstration in Java\nDESCRIPTION: Shows how ArrayList can store null values along with regular objects, though it's not recommended practice.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-01.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nArrayList<String> listOfStrings = new ArrayList<>();\nlistOfStrings.add(null);\nlistOfStrings.add(\"java\");\nSystem.out.println(listOfStrings);\n```\n\n----------------------------------------\n\nTITLE: Failed Field Name with Dollar Prefix in MongoDB vs DocumentDB\nDESCRIPTION: Example demonstrating how MongoDB and Amazon DocumentDB handle differently when inserting a document with a dollar sign prefix in field names. MongoDB allows it while DocumentDB returns an error.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mongodb/mongodb-questions-01.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrs0:PRIMARY< db.foo.insert({\"a\":{\"$a\":1}})\n```\n\nLANGUAGE: shell\nCODE:\n```\nWriteResult({ \"nInserted\" : 1 })\n```\n\nLANGUAGE: shell\nCODE:\n```\nWriteResult({\n  \"nInserted\" : 0,\n  \"writeError\" : {\n    \"code\" : 2,\n    \"errmsg\" : \"Document can't have $ prefix field names: $a\"\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Showing Cluster Management with ZooKeeper\nDESCRIPTION: Diagram demonstrating how ZooKeeper can be used for cluster management, using temporary nodes to represent machines and watchers for monitoring.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![集群管理](https://oss.javaguide.cn/p3-juejin/f3d70709f10f4fa6b09125a56a976fda~tplv-k3u1fbpfcp-zoom-1.jpeg)\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in CopyOnWriteArrayList in Java\nDESCRIPTION: Implementation of contains() and containsAll() methods in CopyOnWriteArrayList for checking element existence.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/copyonwritearraylist-source-code.md#2025-04-20_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npublic boolean contains(Object o) {\n    Object[] elements = getArray();\n    return indexOf(o, elements, 0, elements.length) >= 0;\n}\n\npublic boolean containsAll(Collection<?> c) {\n    Object[] elements = getArray();\n    int len = elements.length;\n    for (Object e : c) {\n        if (indexOf(e, elements, 0, len) < 0)\n            return false;\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: 查询Redis进程号\nDESCRIPTION: 使用redis-cli命令查询Redis服务器的进程ID。这个命令连接到端口6383的Redis实例，获取服务器信息，并通过grep过滤出进程ID。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-common-blocking-problems-summary.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli -p 6383 info server | grep process_id\n```\n\n----------------------------------------\n\nTITLE: Initializing ArrayBlockingQueue Constructor\nDESCRIPTION: Core constructor for ArrayBlockingQueue that initializes the queue with specified capacity and fairness policy. Creates the underlying array and lock conditions for controlling producer-consumer flow.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic ArrayBlockingQueue(int capacity, boolean fair) {\n  if (capacity <= 0)\n      throw new IllegalArgumentException();\n  this.items = new Object[capacity];\n  lock = new ReentrantLock(fair);\n  notEmpty = lock.newCondition();\n  notFull =  lock.newCondition();\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Truncated Average Using Common Table Expression (CTE)\nDESCRIPTION: SQL query using a WITH clause (Common Table Expression) to calculate the truncated average score for hard SQL exams. This approach improves code readability by creating a temporary result set that eliminates redundant subqueries.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nWITH t1 AS\n  (SELECT record.*,\n          info.tag,\n          info.difficulty\n   FROM exam_record record\n   INNER JOIN examination_info info ON record.exam_id = info.exam_id\n   WHERE info.tag = \"SQL\"\n     AND info.difficulty = \"hard\" )\nSELECT tag,\n       difficulty,\n       ROUND(AVG(score), 1)\nFROM t1\nWHERE score NOT IN\n    (SELECT max(score)\n     FROM t1\n     UNION SELECT min(score)\n     FROM t1)\n```\n\n----------------------------------------\n\nTITLE: Text Block Usage in Java 13\nDESCRIPTION: Demonstrates the new text block feature for better multiline string handling using triple quotes.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java12-13.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nString json = \"\"\"\n                {\n                    \"name\":\"mkyong\",\n                    \"age\":38\n                }\n                \"\"\";\n```\n\n----------------------------------------\n\nTITLE: 添加Curator依赖\nDESCRIPTION: 在Maven项目中添加Curator框架的依赖，包括curator-framework和curator-recipes两个主要模块。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-framework</artifactId>\n    <version>4.2.0</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.curator</groupId>\n    <artifactId>curator-recipes</artifactId>\n    <version>4.2.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Java try-with-resources实现 (Java)\nDESCRIPTION: 展示了Java 7引入的try-with-resources语法,用于自动关闭资源。反编译代码显示编译器自动添加了资源关闭的操作。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String... args) {\n    try (BufferedReader br = new BufferedReader(new FileReader(\"d:\\\\ hollischuang.xml\"))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        // handle exception\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequenced Collections Examples\nDESCRIPTION: Examples showing usage of new Sequenced Collections API with ArrayList and LinkedHashSet.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java21.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nArrayList<Integer> arrayList = new ArrayList<>();\n\narrayList.add(1);   // List contains: [1]\n\narrayList.addFirst(0);  // List contains: [0, 1]\narrayList.addLast(2);   // List contains: [0, 1, 2]\n\nInteger firstElement = arrayList.getFirst();  // 0\nInteger lastElement = arrayList.getLast();  // 2\n\nList<Integer> reversed = arrayList.reversed();\nSystem.out.println(reversed); // Prints [2, 1, 0]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Autoboxing Behavior in Java\nDESCRIPTION: Illustrates the behavior of autoboxing for Integer objects, showing how the == operator behaves differently for values within and outside the cached range (-128 to 127).\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String[] args) {\n    Integer a = 1000;\n    Integer b = 1000;\n    Integer c = 100;\n    Integer d = 100;\n    System.out.println(\"a == b is \" + (a == b));\n    System.out.println((\"c == d is \" + (c == d)));\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Unique Page Views with HyperLogLog\nDESCRIPTION: This code demonstrates using the PFCOUNT command to get an approximate count of unique users who have viewed a specific page, leveraging HyperLogLog's space efficiency for cardinality estimation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPFCOUNT PAGE_1:UV\n```\n\n----------------------------------------\n\nTITLE: AutoConfigurationImportSelector Class Hierarchy Implementation in Java\nDESCRIPTION: Shows the inheritance hierarchy of AutoConfigurationImportSelector class including its implemented interfaces for handling auto-configuration imports.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/spring-boot-auto-assembly-principles.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class AutoConfigurationImportSelector implements DeferredImportSelector, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered {\n\n}\n\npublic interface DeferredImportSelector extends ImportSelector {\n\n}\n\npublic interface ImportSelector {\n    String[] selectImports(AnnotationMetadata var1);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Callable Interface in Java\nDESCRIPTION: Definition of the Callable interface in Java, which represents a task that returns a result and may throw an exception.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-summary.md#2025-04-20_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n@FunctionalInterface\npublic interface Callable<V> {\n    /**\n     * 计算结果，或在无法这样做时抛出异常。\n     * @return 计算得出的结果\n     * @throws 如果无法计算结果，则抛出异常\n     */\n    V call() throws Exception;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Container Operations\nDESCRIPTION: Core Docker commands for running and managing containers, including port mapping and container status checks.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker run tomcat:8.0-jre8\ndocker pull tomcat:8.0-jre8\ndocker run -p 8080:8080 tomcat:8.0-jre8\ndocker run -d -p 8080:8080 --name tomcat01 tomcat:8.0-jre8\n```\n\n----------------------------------------\n\nTITLE: Optional Enhancement in Java 11\nDESCRIPTION: Demonstrates the new isEmpty() method added to Optional class for checking if an Optional object is empty.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java11.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nvar op = Optional.empty();\nSystem.out.println(op.isEmpty());//判断指定的 Optional 对象是否为空\n```\n\n----------------------------------------\n\nTITLE: Basic Method Implementation without AOP\nDESCRIPTION: Example showing repetitive logging code without using AOP, demonstrating the need for cross-cutting concerns separation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/ioc-and-aop.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic CommonResponse<Object> method1() {\n      // 业务逻辑\n      xxService.method1();\n      // 省略具体的业务处理逻辑\n      // 日志记录\n      ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n      HttpServletRequest request = attributes.getRequest();\n      // 省略记录日志的具体逻辑 如：获取各种信息，写入数据库等操作...\n      return CommonResponse.success();\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Exams with Large Time Difference Between 2nd Fastest and 2nd Slowest in MySQL\nDESCRIPTION: Complex query to identify exams where the time difference between the 2nd fastest and 2nd slowest completion times is greater than half the exam duration. Uses window functions and subqueries.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT a.exam_id,\n       b.duration,\n       b.release_time\nFROM\n  (SELECT exam_id,\n          row_number() OVER (PARTITION BY exam_id\n                             ORDER BY timestampdiff(SECOND, start_time, submit_time) DESC) rn1,\n          row_number() OVER (PARTITION BY exam_id\n                            ORDER BY timestampdiff(SECOND, start_time, submit_time) ASC) rn2,\n                                              timestampdiff(SECOND, start_time, submit_time) timex\n   FROM exam_record\n   WHERE score IS NOT NULL ) a\nINNER JOIN examination_info b ON a.exam_id = b.exam_id\nGROUP BY a.exam_id\nHAVING (max(IF (rn1 = 2, a.timex, 0))- max(IF (rn2 = 2, a.timex, 0)))/ 60 > b.duration / 2\nORDER BY a.exam_id DESC\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Data with INSERT...SELECT in MySQL\nDESCRIPTION: Demonstration of how batch inserts with INSERT...SELECT affect auto-increment value allocation using MySQL's doubling strategy.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-auto-increment-primary-key-continuous.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\ninsert into test_pk2(a,b) select a,b from test_pk\n```\n\n----------------------------------------\n\nTITLE: 使用Curator创建临时节点\nDESCRIPTION: 创建一个临时节点，临时节点在会话结束后会被自动删除。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nzkClient.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(\"/node1/00001\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with DATETIME and TIMESTAMP Columns in MySQL\nDESCRIPTION: SQL code to create a table named 'time_zone_test' with an auto-incrementing ID, a DATETIME column, and a TIMESTAMP column that automatically updates on insert or update.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/some-thoughts-on-database-storage-time.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE `time_zone_test` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `date_time` datetime DEFAULT NULL,\n  `time_stamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n----------------------------------------\n\nTITLE: Arrays.asList() Source Implementation\nDESCRIPTION: Shows the JDK source code implementation of the asList method, which returns a fixed-size list backed by the specified array.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-precautions-for-use.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n/**\n  *返回由指定数组支持的固定大小的列表。此方法作为基于数组和基于集合的API之间的桥梁，\n  * 与 Collection.toArray()结合使用。返回的List是可序列化并实现RandomAccess接口。\n  */\npublic static <T> List<T> asList(T... a) {\n    return new ArrayList<>(a);\n}\n```\n\n----------------------------------------\n\nTITLE: DelayQueue Core Member Variables\nDESCRIPTION: Definition of key member variables in DelayQueue including lock, priority queue, leader thread, and condition.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/delayqueue-source-code.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate final transient ReentrantLock lock = new ReentrantLock();\nprivate final PriorityQueue<E> q = new PriorityQueue<E>();\nprivate Thread leader = null;\nprivate final Condition available = lock.newCondition();\n```\n\n----------------------------------------\n\nTITLE: Revoking Specific MySQL Permissions\nDESCRIPTION: Example of removing SELECT and INSERT permissions from a MySQL user.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE SELECT, INSERT ON *.* FROM myuser;\n```\n\n----------------------------------------\n\nTITLE: Enabling GC Logging in Java\nDESCRIPTION: Configures various GC logging options to help analyze garbage collection behavior and performance.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-parameters-intro.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n-XX:+PrintGCDetails\n-XX:+PrintGCDateStamps\n-XX:+PrintTenuringDistribution\n-XX:+PrintHeapAtGC\n-XX:+PrintReferenceGC\n-XX:+PrintGCApplicationStoppedTime\n-XX:+PrintSafepointStatistics\n-XX:PrintSafepointStatisticsCount=1\n-Xloggc:/path/to/gc-%t.log\n-XX:+UseGCLogFileRotation\n-XX:NumberOfGCLogFiles=14\n-XX:GCLogFileSize=50M\n```\n\n----------------------------------------\n\nTITLE: AbstractQueue add() Method Implementation in Java\nDESCRIPTION: Shows the implementation of the add() method in AbstractQueue, which relies on the offer() method to be implemented by subclasses.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\npublic boolean add(E e) {\n  if (offer(e))\n      return true;\n  else\n      throw new IllegalStateException(\"Queue full\");\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unique Key Conflict with Auto-Increment Values in MySQL\nDESCRIPTION: Example showing how a unique key constraint violation affects auto-increment values, even when the insert fails.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-auto-increment-primary-key-continuous.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninsert into test_pk values(null, 1, 1)\n```\n\n----------------------------------------\n\nTITLE: Java for-each循环实现 (Java)\nDESCRIPTION: 展示了Java中for-each循环的使用。反编译代码揭示其实际是使用普通for循环和迭代器来实现的。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic static void main(String... args) {\n    String[] strs = {\"Hollis\", \"公众号：Hollis\", \"博客：www.hollischuang.com\"};\n    for (String s : strs) {\n        System.out.println(s);\n    }\n    List<String> strList = ImmutableList.of(\"Hollis\", \"公众号：Hollis\", \"博客：www.hollischuang.com\");\n    for (String s : strList) {\n        System.out.println(s);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HashMap TreeNode Class Implementation\nDESCRIPTION: Tree node structure used in HashMap when a bucket is converted to a Red-Black tree.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/hashmap-source-code.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nstatic final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {\n    TreeNode<K,V> parent;\n    TreeNode<K,V> left;\n    TreeNode<K,V> right;\n    TreeNode<K,V> prev;\n    boolean red;\n    TreeNode(int hash, K key, V val, Node<K,V> next) {\n        super(hash, key, val, next);\n    }\n    final TreeNode<K,V> root() {\n        for (TreeNode<K,V> r = this, p;;) {\n            if ((p = r.parent) == null)\n                return r;\n            r = p;\n       }\n}\n```\n\n----------------------------------------\n\nTITLE: Peek Operation in ArrayBlockingQueue\nDESCRIPTION: Implementation of peek operation that returns the head element without removing it, or null if the queue is empty.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npublic E peek() {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            return itemAt(takeIndex);\n        } finally {\n            lock.unlock();\n        }\n    }\n\n@SuppressWarnings(\"unchecked\")\nfinal E itemAt(int i) {\n    return (E) items[i];\n}\n```\n\n----------------------------------------\n\nTITLE: Entry Node Implementation in LinkedHashMap\nDESCRIPTION: Shows the implementation of Entry node class that extends HashMap.Node and adds before/after pointers for double-linked list functionality.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedhashmap-source-code.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nstatic class Entry<K,V> extends HashMap.Node<K,V> {\n        Entry<K,V> before, after;\n        Entry(int hash, K key, V value, Node<K,V> next) {\n            super(hash, key, value, next);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Listing and Modifying Linux Environment Variables\nDESCRIPTION: Commands for listing all environment variables, displaying specific environment variable values, and modifying environment variables using the export command.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/operating-system/linux-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 列出当前的环境变量值\nexport -p\n```\n\nLANGUAGE: bash\nCODE:\n```\n# 输出当前的PATH环境变量的值\necho $PATH\n# 输出当前的HOME环境变量的值\necho $HOME\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib\n```\n\n----------------------------------------\n\nTITLE: Using Simple Web Server in Java 18\nDESCRIPTION: Demonstrates how to start a simple static web server using the jwebserver command introduced in Java 18.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java18.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ jwebserver\nBinding to loopback by default. For all interfaces use \"-b 0.0.0.0\" or \"-b ::\".\nServing /cwd and subdirectories on 127.0.0.1 port 8000\nURL: http://127.0.0.1:8000/\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Maven Projects\nDESCRIPTION: Example GitHub Actions workflow configuration for continuous integration of Maven projects. This workflow automates building and testing the project on every push to the repository.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-best-practices.md#2025-04-20_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\nname: Java CI with Maven\n\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v2\n\n    - name: Set up JDK 11\n      uses: actions/setup-java@v2\n      with:\n        java-version: '11'\n        distribution: 'adopt'\n\n    - name: Build with Maven\n      run: ./mvnw clean install\n```\n\n----------------------------------------\n\nTITLE: Finding Longest Palindrome in String (Java)\nDESCRIPTION: Implements a method to find the length of the longest palindrome that can be built with characters from a given string. It uses a HashSet to count character occurrences and determine the maximum length of a palindrome.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/string-algorithm-problems.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nclass Solution {\n  public  int longestPalindrome(String s) {\n    if (s.length() == 0)\n      return 0;\n    HashSet<Character> hashset = new HashSet<Character>();\n    char[] chars = s.toCharArray();\n    int count = 0;\n    for (int i = 0; i < chars.length; i++) {\n      if (!hashset.contains(chars[i])) {\n        hashset.add(chars[i]);\n      } else {\n        hashset.remove(chars[i]);\n        count++;\n      }\n    }\n    return hashset.isEmpty() ? count * 2 : count * 2 + 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unsafe Memory Barriers in Java\nDESCRIPTION: Example showing the native memory barrier methods provided by Unsafe class to prevent instruction reordering\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic native void loadFence();\npublic native void storeFence();\npublic native void fullFence();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Generics Overloading Issue in Java\nDESCRIPTION: Illustrates a compilation error that occurs when trying to overload methods with different generic type parameters. This is due to type erasure causing the method signatures to become identical.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class GenericTypes {\n\n    public static void method(List<String> list) {\n        System.out.println(\"invoke method(List<String> list)\");\n    }\n\n    public static void method(List<Integer> list) {\n        System.out.println(\"invoke method(List<Integer> list)\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DELETE with Ordering and Limit\nDESCRIPTION: Shows how to delete specific number of records based on multiple conditions with ordering.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM exam_record WHERE submit_time IS null OR TIMESTAMPDIFF(MINUTE, start_time, submit_time) < 5\nORDER BY start_time\nLIMIT 3\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Value for Static Variables in Java\nDESCRIPTION: Example showing how static variables are initialized during the preparation phase of class loading. The initial value is typically set to the default value of the data type, unless the variable is marked as final.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/class-loading-process.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic static int value = 111;\n```\n\nLANGUAGE: Java\nCODE:\n```\npublic static final int value = 111;\n```\n\n----------------------------------------\n\nTITLE: Complete Solution using Common Table Expressions (CTEs)\nDESCRIPTION: Full SQL solution using CTEs to determine which condition applies and then display the appropriate results based on whether any level 0 user has more than 2 incomplete exams.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-05.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nWITH host_user AS\n  (SELECT ui.uid UID\n   FROM user_info ui\n   LEFT JOIN exam_record er ON ui.uid = er.uid\n   WHERE ui.uid IN\n       (SELECT ui.uid\n        FROM user_info ui\n        LEFT JOIN exam_record er ON ui.uid = er.uid\n        WHERE er.submit_time IS NULL\n          AND ui.LEVEL = 0 )\n   GROUP BY ui.uid\n   HAVING sum(IF (er.submit_time IS NULL, 1, 0))> 2),\n     tt1 AS\n  (SELECT tmp1.uid UID,\n                   sum(IF (er.submit_time IS NULL\n                           AND er.start_time IS NOT NULL, 1, 0)) incomplete_cnt,\n                   round(sum(IF (er.submit_time IS NULL\n                                 AND er.start_time IS NOT NULL, 1, 0))/ count(tmp1.uid), 3) incomplete_rate\n   FROM\n     (SELECT DISTINCT ui.uid\n      FROM user_info ui\n      LEFT JOIN exam_record er ON ui.uid = er.uid\n      WHERE er.submit_time IS NULL\n        AND ui.LEVEL = 0 ) tmp1\n   LEFT JOIN exam_record er ON tmp1.uid = er.uid\n   GROUP BY tmp1.uid\n   ORDER BY incomplete_rate),\n     tt2 AS\n  (SELECT ui.uid UID,\n                 sum(CASE\n                         WHEN er.submit_time IS NULL\n                              AND er.start_time IS NOT NULL THEN 1\n                         ELSE 0\n                     END) incomplete_cnt,\n                 round(sum(IF (er.submit_time IS NULL\n                               AND er.start_time IS NOT NULL, 1, 0))/ count(ui.uid), 3) incomplete_rate\n   FROM user_info ui\n   JOIN exam_record er ON ui.uid = er.uid\n   GROUP BY ui.uid\n   ORDER BY incomplete_rate)\n  (SELECT tt1.*\n   FROM tt1\n   LEFT JOIN\n     (SELECT UID\n      FROM host_user) t1 ON 1 = 1\n   WHERE t1.uid IS NOT NULL )\nUNION ALL\n  (SELECT tt2.*\n   FROM tt2\n   LEFT JOIN\n     (SELECT UID\n      FROM host_user) t2 ON 1 = 1\n   WHERE t2.uid IS NULL)\n```\n\n----------------------------------------\n\nTITLE: Multiple Range Request Example\nDESCRIPTION: Demonstrates how to request multiple byte ranges in a single HTTP request.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/network/http1.0-vs-http1.1.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGET /path/to/resource HTTP/1.1\nHost: example.com\nRange: bytes=0-499,1000-1499\n```\n\n----------------------------------------\n\nTITLE: Validating Stack Sequences\nDESCRIPTION: Algorithm to verify if a given sequence could be a valid stack pop sequence based on the push sequence. Uses auxiliary stack to simulate push/pop operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.ArrayList;\nimport java.util.Stack;\n\npublic class Solution {\n    public boolean IsPopOrder(int [] pushA,int [] popA) {\n        if(pushA.length == 0 || popA.length == 0)\n            return false;\n        Stack<Integer> s = new Stack<Integer>();\n        int popIndex = 0;\n        for(int i = 0; i< pushA.length;i++){\n            s.push(pushA[i]);\n            while(!s.empty() &&s.peek() == popA[popIndex]){\n                s.pop();\n                popIndex++;\n            }\n        }\n        return s.empty();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Load Balancer in Spring Cloud\nDESCRIPTION: Example of configuring a custom RandomLoadBalancer in Spring Cloud Load Balancer.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/load-balancing.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomLoadBalancerConfiguration {\n\n    @Bean\n    ReactorLoadBalancer<ServiceInstance> randomLoadBalancer(Environment environment,\n            LoadBalancerClientFactory loadBalancerClientFactory) {\n        String name = environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);\n        return new RandomLoadBalancer(loadBalancerClientFactory\n                .getLazyProvider(name, ServiceInstanceListSupplier.class),\n                name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Range Request Example in HTTP 1.1\nDESCRIPTION: Shows how to request specific byte ranges of a file using HTTP 1.1's range request feature.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/network/http1.0-vs-http1.1.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 获取一个文件的前 1024 个字节\nGET /z4d4kWk.jpg HTTP/1.1\nHost: i.imgur.com\nRange: bytes=0-1023\n```\n\n----------------------------------------\n\nTITLE: Querying Minimum Score Above Average for SQL Exams\nDESCRIPTION: This SQL query finds the minimum score that is not less than the average score for SQL exams. It joins the exam_record and examination_info tables, filters for SQL exams, calculates the average score, and then finds the minimum score above this average.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT MIN(score) AS min_score_over_avg\nFROM examination_info info\nINNER JOIN exam_record record\nWHERE info.exam_id = record.exam_id\n  AND tag= 'SQL'\n  AND score >=\n    (SELECT ROUND(AVG(score), 1)\n     FROM examination_info info\n     INNER JOIN exam_record record\n     WHERE info.exam_id = record.exam_id\n       AND tag= 'SQL' )\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Job Handler with XXL-JOB\nDESCRIPTION: An example of implementing a custom job handler by extending IJobHandler class in XXL-JOB. This implementation requires annotating the class with @JobHandler and implementing the execute method to define custom task execution logic.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/schedule-task.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@JobHandler(value=\"myApiJobHandler\")\n@Component\npublic class MyApiJobHandler extends IJobHandler {\n\n    @Override\n    public ReturnT<String> execute(String param) throws Exception {\n        //......\n        return ReturnT.SUCCESS;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Member Variables and Local Variables in Java\nDESCRIPTION: This class demonstrates the differences between member variables and local variables in Java, including their scope, lifetime, and initialization.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\npublic class VariableExample {\n\n    // 成员变量\n    private String name;\n    private int age;\n\n    // 方法中的局部变量\n    public void method() {\n        int num1 = 10; // 栈中分配的局部变量\n        String str = \"Hello, world!\"; // 栈中分配的局部变量\n        System.out.println(num1);\n        System.out.println(str);\n    }\n\n    // 带参数的方法中的局部变量\n    public void method2(int num2) {\n        int sum = num2 + 10; // 栈中分配的局部变量\n        System.out.println(sum);\n    }\n\n    // 构造方法中的局部变量\n    public VariableExample(String name, int age) {\n        this.name = name; // 对成员变量进行赋值\n        this.age = age; // 对成员变量进行赋值\n        int num3 = 20; // 栈中分配的局部变量\n        String str2 = \"Hello, \" + this.name + \"!\"; // 栈中分配的局部变量\n        System.out.println(num3);\n        System.out.println(str2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Access Order Traversal with LinkedHashMap\nDESCRIPTION: Shows how to configure LinkedHashMap to maintain access order by setting accessOrder to true in constructor.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedhashmap-source-code.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nLinkedHashMap<Integer, String> map = new LinkedHashMap<>(16, 0.75f, true);\nmap.put(1, \"one\");\nmap.put(2, \"two\");\nmap.put(3, \"three\");\nmap.put(4, \"four\");\nmap.put(5, \"five\");\n//访问元素2,该元素会被移动至链表末端\nmap.get(2);\n//访问元素3,该元素会被移动至链表末端\nmap.get(3);\nfor (Map.Entry<Integer, String> entry : map.entrySet()) {\n    System.out.println(entry.getKey() + \" : \" + entry.getValue());\n}\n```\n\n----------------------------------------\n\nTITLE: LinkedList Node Class Definition\nDESCRIPTION: Definition of the private Node class used to represent elements in the LinkedList. Each node contains the element value and references to previous and next nodes in the list.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedlist-source-code.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n\n    Node(Node<E> prev, E element, Node<E> next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex UPDATE with Date Conditions\nDESCRIPTION: Updates incomplete exam records before a specific date by setting default completion time and score.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE exam_record SET submit_time = '2099-01-01 00:00:00', score = 0 WHERE DATE(start_time) < \"2021-09-01\" AND submit_time IS null\n```\n\n----------------------------------------\n\nTITLE: JConsole Remote Connection Properties\nDESCRIPTION: Configuration properties needed to enable remote JMX monitoring with JConsole\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jdk-monitoring-and-troubleshooting-tools.md#2025-04-20_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n-Djava.rmi.server.hostname=外网访问 ip 地址\n-Dcom.sun.management.jmxremote.port=60001   //监控的端口号\n-Dcom.sun.management.jmxremote.authenticate=false   //关闭认证\n-Dcom.sun.management.jmxremote.ssl=false\n```\n\n----------------------------------------\n\nTITLE: Creating Annotation-Based Job Handlers in XXL-JOB\nDESCRIPTION: A simple example showing how to define a job handler using the @XxlJob annotation in XXL-JOB. This approach is more concise than extending IJobHandler and provides the same functionality for task execution.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/schedule-task.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@XxlJob(\"myAnnotationJobHandler\")\npublic ReturnT<String> myAnnotationJobHandler(String param) throws Exception {\n  //......\n  return ReturnT.SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding WebSocket Dependencies in Spring Boot\nDESCRIPTION: Maven dependency configuration to add WebSocket support in a Spring Boot application.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/web-real-time-message-push.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- 引入websocket -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-websocket</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Column Constraints in SQL\nDESCRIPTION: Explains various column constraints in MySQL including PRIMARY KEY, UNIQUE, NULL, DEFAULT, AUTO_INCREMENT, COMMENT, and FOREIGN KEY.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/a-thousand-lines-of-mysql-study-notes.md#2025-04-20_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\n/* 列属性（列约束） */ ------------------\n1. PRIMARY 主键\n    - 能唯一标识记录的字段，可以作为主键。\n    - 一个表只能有一个主键。\n    - 主键具有唯一性。\n    - 声明字段时，用 primary key 标识。\n        也可以在字段列表之后声明\n            例：create table tab ( id int, stu varchar(10), primary key (id));\n    - 主键字段的值不能为null。\n    - 主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。\n        例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));\n2. UNIQUE 唯一索引（唯一约束）\n    使得某字段的值也不能重复。\n3. NULL 约束\n    null不是数据类型，是列的一个属性。\n    表示当前列是否可以为null，表示什么都没有。\n    null, 允许为空。默认。\n    not null, 不允许为空。\n    insert into tab values (null, 'val');\n        -- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null\n4. DEFAULT 默认值属性\n    当前字段的默认值。\n    insert into tab values (default, 'val');    -- 此时表示强制使用默认值。\n    create table tab ( add_time timestamp default current_timestamp );\n        -- 表示将当前时间的时间戳设为默认值。\n        current_date, current_time\n5. AUTO_INCREMENT 自动增长约束\n    自动增长必须为索引（主键或unique）\n    只能存在一个字段为自动增长。\n    默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;\n6. COMMENT 注释\n    例：create table tab ( id int ) comment '注释内容';\n7. FOREIGN KEY 外键约束\n    用于限制主表与从表数据完整性。\n    alter table t1 add constraint `t1_t2_fk` foreign key (t1_id) references t2(id);\n        -- 将表t1的t1_id外键关联到表t2的id字段。\n        -- 每个外键都有一个名字，可以通过 constraint 指定\n    存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。\n    作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。\n    MySQL中，可以对InnoDB引擎使用外键约束：\n    语法：\n    foreign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]\n    此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。\n    可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。\n    如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：\n    1. cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。\n    2. set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。\n    3. restrict，拒绝父表删除和更新。\n    注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。\n```\n\n----------------------------------------\n\nTITLE: Array Parameter Passing in Java\nDESCRIPTION: Shows how Java passes array references by value, allowing modification of array elements within methods.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/why-there-only-value-passing-in-java.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic static void main(String[] args) {\n    int[] arr = { 1, 2, 3, 4, 5 };\n    System.out.println(arr[0]);\n    change(arr);\n    System.out.println(arr[0]);\n}\n\npublic static void change(int[] array) {\n    // 将数组的第一个元素变为0\n    array[0] = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Route Predicates in Spring Cloud Gateway\nDESCRIPTION: This YAML snippet demonstrates how to configure route predicates in Spring Cloud Gateway. It shows two route rules with predicates that match specific URL patterns.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/spring-cloud-gateway-questions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: route_thirdparty\n          uri: lb://passjava-thirdparty\n          predicates:\n            - Path=/api/thirdparty/**\n        - id: route_member\n          uri: lb://passjava-member\n          predicates:\n            - Path=/api/member/**\n```\n\n----------------------------------------\n\nTITLE: 使用Redis DEL命令释放分布式锁\nDESCRIPTION: 展示了如何使用Redis的DEL命令删除锁对应的key来释放分布式锁。返回1表示释放成功。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-lock-implementations.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> DEL lockKey\n(integer) 1\n```\n\n----------------------------------------\n\nTITLE: Monthly Exam Submission Count Query\nDESCRIPTION: SQL query to calculate monthly exam submission counts and cumulative totals per exam. Uses window functions to compute running totals grouped by exam_id and formatted by month.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nSELECT exam_id,\n       date_format(start_time, '%Y%m') AS start_month,\n       count(*) AS month_cnt,\n       sum(count(*)) OVER (PARTITION BY exam_id\n                           ORDER BY date_format(start_time, '%Y%m')) AS cum_exam_cnt\nFROM exam_record\nGROUP BY exam_id,\n         start_month\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Volumes with Basic Commands\nDESCRIPTION: Basic commands for creating, listing, inspecting, and removing Docker volumes. These commands allow users to manage persistent data storage areas for Docker containers.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-intro.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# 创建一个数据卷\ndocker volume create my-vol\n# 查看所有的数据卷\ndocker volume ls\n# 查看数据卷的具体信息\ndocker inspect web\n# 删除指定的数据卷\ndocker volume rm my-vol\n```\n\n----------------------------------------\n\nTITLE: Optional orElseThrow Usage in Java 10\nDESCRIPTION: Shows how to use the new orElseThrow() method in Optional class to throw custom exceptions when value is not present.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java10.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nOptional.ofNullable(cache.getIfPresent(key))\n        .orElseThrow(() -> new PrestoException(NOT_FOUND, \"Missing entry found for key: \" + key));\n```\n\n----------------------------------------\n\nTITLE: Runtime-Determined Final String Values and Concatenation\nDESCRIPTION: This code demonstrates that even with 'final' variables, if the value is determined at runtime rather than compile time, the compiler cannot perform constant folding optimization for string concatenation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nfinal String str1 = \"str\";\nfinal String str2 = getStr();\nString c = \"str\" + \"ing\";// 常量池中的对象\nString d = str1 + str2; // 在堆上创建的新的对象\nSystem.out.println(c == d);// false\npublic static String getStr() {\n      return \"ing\";\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Query Cache for Specific SQL Queries\nDESCRIPTION: SQL example showing how to disable caching for a specific query using the sql_no_cache directive, ensuring the query result is always executed and not retrieved from cache.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-questions-01.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT sql_no_cache COUNT(*) FROM usr;\n```\n\n----------------------------------------\n\nTITLE: Redis String类型实现计数器\nDESCRIPTION: 展示了如何使用INCR和DECR命令实现计数器功能。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-data-structures-01.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> SET number 1\nOK\n> INCR number # 将 key 中储存的数字值增一\n(integer) 2\n> GET number\n\"2\"\n> DECR number # 将 key 中储存的数字值减一\n(integer) 1\n> GET number\n\"1\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hash Function Calculation for Index\nDESCRIPTION: Shows how hash functions are used to calculate index positions in a hash table. This illustrates the core mechanism behind hash-based indexing, where a hash function processes a key to determine the storage index.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-index.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nhash = hashfunc(key)\nindex = hash % array_size\n```\n\n----------------------------------------\n\nTITLE: Implementation of System.arraycopy() Native Method in Java\nDESCRIPTION: The native System.arraycopy() method provides efficient array copying with flexible source and destination positions. This is a core method used by ArrayList for array manipulation operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n    // 我们发现 arraycopy 是一个 native 方法,接下来我们解释一下各个参数的具体意义\n    /**\n    *   复制数组\n    * @param src 源数组\n    * @param srcPos 源数组中的起始位置\n    * @param dest 目标数组\n    * @param destPos 目标数组中的起始位置\n    * @param length 要复制的数组元素的数量\n    */\n    public static native void arraycopy(Object src,  int  srcPos,\n                                        Object dest, int destPos,\n                                        int length);\n```\n\n----------------------------------------\n\nTITLE: Collections Utility Class Sort Operations\nDESCRIPTION: Common sorting operations provided by the Collections utility class for manipulating Lists\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nvoid reverse(List list)//反转\nvoid shuffle(List list)//随机排序\nvoid sort(List list)//按自然排序的升序排序\nvoid sort(List list, Comparator c)//定制排序，由Comparator控制排序逻辑\nvoid swap(List list, int i , int j)//交换两个索引位置的元素\nvoid rotate(List list, int distance)//旋转。当distance为正数时，将list后distance个元素整体移到前面。当distance为负数时，将 list的前distance个元素整体移到后面\n```\n\n----------------------------------------\n\nTITLE: Counting Exam Statistics Using Subqueries\nDESCRIPTION: SQL query that calculates various exam statistics including total attempts, completed attempts, and unique completed exams. This solution uses subqueries with COUNT functions to separate different counting requirements.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\tcount(*) total_pv,\n\t( SELECT count(*) FROM exam_record WHERE submit_time IS NOT NULL ) complete_pv,\n\t( SELECT COUNT( DISTINCT exam_id, score IS NOT NULL OR NULL ) FROM exam_record ) complete_exam_cnt\nFROM\n\texam_record\n```\n\n----------------------------------------\n\nTITLE: 使用MULTI、EXEC和DISCARD执行Redis事务\nDESCRIPTION: 展示了Redis事务的基本操作流程，包括事务开始(MULTI)、命令入队和执行事务(EXEC)，以及取消事务(DISCARD)的示例。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-02.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> MULTI\nOK\n> SET PROJECT \"JavaGuide\"\nQUEUED\n> GET PROJECT\nQUEUED\n> EXEC\n1) OK\n2) \"JavaGuide\"\n```\n\n----------------------------------------\n\nTITLE: Basic MySQL EXPLAIN Command Usage\nDESCRIPTION: Shows the basic syntax for using the EXPLAIN command to analyze SELECT queries in MySQL.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-query-execution-plan.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nEXPLAIN + SELECT 查询语句；\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies from Client Request in Java Servlets\nDESCRIPTION: This code shows how to retrieve cookies from an HTTP request, search for a specific cookie by name, and access its value. It iterates through all cookies in the request to find the one with the specified name.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/J2EE基础知识.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nString name =\"name\";\nCookie[]cookies =request.getCookies();\nif(cookies !=null){\n   for(int i= 0;i<cookies.length;i++){\n    Cookie cookie =cookies[i];\n    if(name.equals(cookis.getName()))\n    //something is here.\n    //you can get the value\n    cookie.getValue();\n\n   }\n }\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Incomplete Rates for All Users - Second Condition Query\nDESCRIPTION: Query to calculate incomplete exam counts and rates for all users with exam records when there is no level 0 user with more than 2 incomplete exams.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-05.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\tui.uid uid,\n\tsum( CASE WHEN er.submit_time IS NULL AND er.start_time IS NOT NULL THEN 1 ELSE 0 END ) incomplete_cnt,\n\tround(\n\t\tsum(\n\t\tIF\n\t\t( er.submit_time IS NULL AND er.start_time IS NOT NULL, 1, 0 ))/ count( ui.uid ),\n\t\t3\n\t) incomplete_rate\nFROM\n\tuser_info ui\n\tJOIN exam_record er ON ui.uid = er.uid\nGROUP BY\n\tui.uid\nORDER BY\n\tincomplete_rate\n```\n\n----------------------------------------\n\nTITLE: String Concatenation Optimization with Final Variables\nDESCRIPTION: This code demonstrates how using 'final' with string variables enables compile-time optimization. Final string variables are treated as constants, allowing the compiler to perform constant folding for string concatenation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nfinal String str1 = \"str\";\nfinal String str2 = \"ing\";\n// 下面两个表达式其实是等价的\nString c = \"str\" + \"ing\";// 常量池中的对象\nString d = str1 + str2; // 常量池中的对象\nSystem.out.println(c == d);// true\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependency in XML\nDESCRIPTION: Example showing how to configure a dependency for EasyExcel library in Maven pom.xml file using coordinates like groupId, artifactId and version.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-core-concepts.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>easyexcel</artifactId>\n    <version>3.1.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: MongoDB Document Structure Example\nDESCRIPTION: Example of a MongoDB document structure from a users collection showing various field types.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mongodb/mongodb-questions-02.md#2025-04-20_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"_id\": ObjectId(\"53402597d852426020000002\"),\n   \"contact\": \"987654321\",\n   \"dob\": \"01-01-1991\",\n   \"gender\": \"M\",\n   \"name\": \"Tom Benzamin\",\n   \"user_name\": \"tombenzamin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Commands\nDESCRIPTION: Essential Docker commands for checking Docker version, listing images and containers, and cleaning up unused images.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker version # 查看docker版本\ndocker images # 查看所有已下载镜像，等价于：docker image ls 命令\ndocker container ls # 查看所有容器\ndocker ps #查看正在运行的容器\ndocker image prune # 清理临时的、没有被使用的镜像文件。-a, --all: 删除所有没有用的镜像，而不仅仅是临时文件；\n```\n\n----------------------------------------\n\nTITLE: Editing Environment Variable Configuration Files\nDESCRIPTION: Commands for editing environment variable configuration files and applying changes to make them take effect immediately.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/operating-system/linux-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvim ~/.bash_profile\n```\n\nLANGUAGE: bash\nCODE:\n```\nsource /etc/profile\n```\n\n----------------------------------------\n\nTITLE: Activating Maven Profiles via Command Line\nDESCRIPTION: Shows the command to activate a specific Maven profile (production in this example) during the build process using the -P flag.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-best-practices.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -P production\n```\n\n----------------------------------------\n\nTITLE: Performance Comparison Test between HashMap and LinkedHashMap\nDESCRIPTION: A benchmark test comparing insertion and iteration performance between HashMap and LinkedHashMap with 10 million entries.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedhashmap-source-code.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nint count = 1000_0000;\nMap<Integer, Integer> hashMap = new HashMap<>();\nMap<Integer, Integer> linkedHashMap = new LinkedHashMap<>();\n\nlong start, end;\n\nstart = System.currentTimeMillis();\nfor (int i = 0; i < count; i++) {\n    hashMap.put(ThreadLocalRandom.current().nextInt(1, count), ThreadLocalRandom.current().nextInt(0, count));\n}\nend = System.currentTimeMillis();\nSystem.out.println(\"map time putVal: \" + (end - start));\n\nstart = System.currentTimeMillis();\nfor (int i = 0; i < count; i++) {\n    linkedHashMap.put(ThreadLocalRandom.current().nextInt(1, count), ThreadLocalRandom.current().nextInt(0, count));\n}\nend = System.currentTimeMillis();\nSystem.out.println(\"linkedHashMap putVal time: \" + (end - start));\n\nstart = System.currentTimeMillis();\nlong num = 0;\nfor (Integer v : hashMap.values()) {\n    num = num + v;\n}\nend = System.currentTimeMillis();\nSystem.out.println(\"map get time: \" + (end - start));\n\nstart = System.currentTimeMillis();\nfor (Integer v : linkedHashMap.values()) {\n    num = num + v;\n}\nend = System.currentTimeMillis();\nSystem.out.println(\"linkedHashMap get time: \" + (end - start));\nSystem.out.println(num);\n```\n\n----------------------------------------\n\nTITLE: Array vs ArrayList Usage Example in Java\nDESCRIPTION: Demonstrates the key differences between using a traditional Array versus ArrayList in Java, showing initialization, modification and deletion operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-01.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n // 初始化一个 String 类型的数组\n String[] stringArr = new String[]{\"hello\", \"world\", \"!\"};\n // 修改数组元素的值\n stringArr[0] = \"goodbye\";\n System.out.println(Arrays.toString(stringArr));// [goodbye, world, !]\n // 删除数组中的元素，需要手动移动后面的元素\n for (int i = 0; i < stringArr.length - 1; i++) {\n     stringArr[i] = stringArr[i + 1];\n }\n stringArr[stringArr.length - 1] = null;\n System.out.println(Arrays.toString(stringArr));// [world, !, null]\n```\n\nLANGUAGE: java\nCODE:\n```\n// 初始化一个 String 类型的 ArrayList\n ArrayList<String> stringList = new ArrayList<>(Arrays.asList(\"hello\", \"world\", \"!\"));\n// 添加元素到 ArrayList 中\n stringList.add(\"goodbye\");\n System.out.println(stringList);// [hello, world, !, goodbye]\n // 修改 ArrayList 中的元素\n stringList.set(0, \"hi\");\n System.out.println(stringList);// [hi, world, !, goodbye]\n // 删除 ArrayList 中的元素\n stringList.remove(0);\n System.out.println(stringList); // [world, !, goodbye]\n```\n\n----------------------------------------\n\nTITLE: Variable Length Arguments Example\nDESCRIPTION: Demonstration of variable length arguments and method overloading resolution in Java.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npublic class VariableLengthArgument {\n\n    public static void printVariable(String... args) {\n        for (String s : args) {\n            System.out.println(s);\n        }\n    }\n\n    public static void printVariable(String arg1, String arg2) {\n        System.out.println(arg1 + arg2);\n    }\n\n    public static void main(String[] args) {\n        printVariable(\"a\", \"b\");\n        printVariable(\"a\", \"b\", \"c\", \"d\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arrays.copyOf() in ArrayList toArray() Method\nDESCRIPTION: This code snippet shows how ArrayList uses Arrays.copyOf() in its toArray() method to return a properly sized array containing all elements from the list.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n   /**\n     以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）; 返回的数组的运行时类型是指定数组的运行时类型。\n     */\n    public Object[] toArray() {\n    //elementData：要复制的数组；size：要复制的长度\n        return Arrays.copyOf(elementData, size);\n    }\n```\n\n----------------------------------------\n\nTITLE: Java条件编译实现 (Java)\nDESCRIPTION: 展示了Java中如何通过final变量和if语句实现条件编译。编译器会根据条件的真假直接消除不执行的代码块。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ConditionalCompilation {\n    public static void main(String[] args) {\n        final boolean DEBUG = true;\n        if(DEBUG) {\n            System.out.println(\"Hello, DEBUG!\");\n        }\n\n        final boolean ONLINE = false;\n\n        if(ONLINE){\n            System.out.println(\"Hello, ONLINE!\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Table and Generating Data in MySQL\nDESCRIPTION: SQL code to create a test table with various data types and indexes, along with a stored procedure to generate 10 million rows of test data.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/index-invalidation-caused-by-implicit-conversion.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n-- 创建测试数据表\nDROP TABLE IF EXISTS test1;\nCREATE TABLE `test1` (\n    `id` int(11) NOT NULL,\n    `num1` int(11) NOT NULL DEFAULT '0',\n    `num2` varchar(11) NOT NULL DEFAULT '',\n    `type1` int(4) NOT NULL DEFAULT '0',\n    `type2` int(4) NOT NULL DEFAULT '0',\n    `str1` varchar(100) NOT NULL DEFAULT '',\n    `str2` varchar(100) DEFAULT NULL,\n    PRIMARY KEY (`id`),\n    KEY `num1` (`num1`),\n    KEY `num2` (`num2`),\n    KEY `type1` (`type1`),\n    KEY `str1` (`str1`),\n    KEY `str2` (`str2`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n-- 创建存储过程\nDROP PROCEDURE IF EXISTS pre_test1;\nDELIMITER //\nCREATE PROCEDURE `pre_test1`()\nBEGIN\n    DECLARE i INT DEFAULT 0;\n    SET autocommit = 0;\n    WHILE i < 10000000 DO\n        SET i = i + 1;\n        SET @str1 = SUBSTRING(MD5(RAND()),1,20);\n        -- 每100条数据str2产生一个null值\n        IF i % 100 = 0 THEN\n            SET @str2 = NULL;\n        ELSE\n            SET @str2 = @str1;\n        END IF;\n        INSERT INTO test1 (`id`, `num1`, `num2`,\n        `type1`, `type2`, `str1`, `str2`)\n        VALUES (CONCAT('', i), CONCAT('', i),\n        CONCAT('', i), i%5, i%5, @str1, @str2);\n        -- 事务优化，每一万条数据提交一次事务\n        IF i % 10000 = 0 THEN\n            COMMIT;\n        END IF;\n    END WHILE;\nEND;\n// DELIMITER ;\n\n-- 执行存储过程\nCALL pre_test1();\n```\n\n----------------------------------------\n\nTITLE: MySQL Update Statement Example\nDESCRIPTION: Example SQL update statement used to demonstrate transaction logging behavior when updating a record's value from 0 to 1.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-logs.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nupdate T set c=1 where id=2\n```\n\n----------------------------------------\n\nTITLE: Synchronized Implementation Example\nDESCRIPTION: Example showing synchronized block implementation for analysis through bytecode.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class SynchronizedDemo {\n    public void method() {\n        synchronized (this) {\n            System.out.println(\"synchronized 代码块\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 使用Curator连接ZooKeeper\nDESCRIPTION: 使用CuratorFrameworkFactory创建ZooKeeper客户端并连接服务器，设置重试策略和连接参数。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nprivate static final int BASE_SLEEP_TIME = 1000;\nprivate static final int MAX_RETRIES = 3;\n\n// Retry strategy. Retry 3 times, and will increase the sleep time between retries.\nRetryPolicy retryPolicy = new ExponentialBackoffRetry(BASE_SLEEP_TIME, MAX_RETRIES);\nCuratorFramework zkClient = CuratorFrameworkFactory.builder()\n    // the server to connect to (can be a server list)\n    .connectString(\"127.0.0.1:2181\")\n    .retryPolicy(retryPolicy)\n    .build();\nzkClient.start();\n```\n\n----------------------------------------\n\nTITLE: 对象和引用相等性比较示例\nDESCRIPTION: 演示如何比较字符串对象的引用相等(==)和内容相等(equals)\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nString str1 = \"hello\";\nString str2 = new String(\"hello\");\nString str3 = \"hello\";\n// 使用 == 比较字符串的引用相等\nSystem.out.println(str1 == str2);\nSystem.out.println(str1 == str3);\n// 使用 equals 方法比较字符串的相等\nSystem.out.println(str1.equals(str2));\nSystem.out.println(str1.equals(str3));\n```\n\n----------------------------------------\n\nTITLE: Complete SQL Solution for User Activity Analysis\nDESCRIPTION: The complete SQL solution that combines exam and practice activity data, filters for level 6/7 users, and calculates various activity metrics including total active months, 2021 active days, and activity breakdown by type.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_14\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT user_info.uid,\n       count(DISTINCT act_month) AS act_month_total,\n       count(DISTINCT CASE\n                          WHEN YEAR (act_time)= '2021' THEN act_day\n                      END) AS act_days_2021,\n       count(DISTINCT CASE\n                          WHEN YEAR (act_time)= '2021'\n                               AND tag = 'exam' THEN act_day\n                      END) AS act_days_2021_exam,\n       count(DISTINCT CASE\n                          WHEN YEAR (act_time)= '2021'\n                               AND tag = 'question' THEN act_day\n                      END) AS act_days_2021_question\nFROM\n  (SELECT UID,\n          exam_id AS ans_id,\n          start_time AS act_time,\n          date_format(start_time, '%Y%m') AS act_month,\n          date_format(start_time, '%Y%m%d') AS act_day,\n          'exam' AS tag\n   FROM exam_record\n   UNION ALL SELECT UID,\n                    question_id AS ans_id,\n                    submit_time AS act_time,\n                    date_format(submit_time, '%Y%m') AS act_month,\n                    date_format(submit_time, '%Y%m%d') AS act_day,\n                    'question' AS tag\n   FROM practice_record) total\nRIGHT JOIN user_info ON total.uid = user_info.uid\nWHERE user_info.LEVEL IN (6,\n                          7)\nGROUP BY user_info.uid\nORDER BY act_month_total DESC,\n         act_days_2021 DESC\n```\n\n----------------------------------------\n\nTITLE: Forward Request Implementation in Java Servlet\nDESCRIPTION: Demonstrates how to forward a request to another resource (login_success.jsp) using RequestDispatcher in a Servlet.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/J2EE基础知识.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nrequest.getRequestDispatcher(\"login_success.jsp\").forward(request, response);\n```\n\n----------------------------------------\n\nTITLE: Monthly User Activity Analysis Query\nDESCRIPTION: Complex SQL query to analyze monthly user activity including new users, active users, and cumulative statistics. Uses subqueries and window functions to track first-time users and calculate running totals.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\tstart_month,\n\tmau,\n\tmonth_add_uv,\n\tmax( month_add_uv ) over ( ORDER BY start_month ),\n\tsum( month_add_uv ) over ( ORDER BY start_month )\nFROM\n\t(\n\tSELECT\n\t\tdate_format( a.start_time, '%Y%m' ) AS start_month,\n\t\tcount( DISTINCT a.uid ) AS mau,\n\t\tcount( DISTINCT b.uid ) AS month_add_uv\n\tFROM\n\t\texam_record a\n\t\tLEFT JOIN (\n         SELECT uid, min( date_format( start_time, '%Y%m' )) AS first_month FROM exam_record GROUP BY uid ) b ON date_format( a.start_time, '%Y%m' ) = b.first_month\n\tGROUP BY\n\t\tstart_month\n\t) main\nORDER BY\n\tstart_month\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements from CopyOnWriteArrayList in Java\nDESCRIPTION: Implementation of the get() method in CopyOnWriteArrayList, showing the lock-free read operation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/copyonwritearraylist-source-code.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nprivate transient volatile Object[] array;\n\npublic E get(int index) {\n    return get(getArray(), index);\n}\n\nfinal Object[] getArray() {\n    return array;\n}\n\nprivate E get(Object[] a, int index) {\n    return (E) a[index];\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameters in Java Methods\nDESCRIPTION: Shows the difference between formal and actual parameters in Java method calls using a simple string example.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/why-there-only-value-passing-in-java.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nString hello = \"Hello!\";\n// hello 为实参\nsayHello(hello);\n// str 为形参\nvoid sayHello(String str) {\n    System.out.println(str);\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Exclusion Example\nDESCRIPTION: Example showing how to exclude a transitive dependency using the exclusions tag to resolve version conflicts.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-core-concepts.md#2025-04-20_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    ......\n    <exclusions>\n      <exclusion>\n        <artifactId>x</artifactId>\n        <groupId>org.apache.x</groupId>\n      </exclusion>\n    </exclusions>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Link to JavaGuide Knowledge Planet\nDESCRIPTION: A Markdown formatted image link that displays the JavaGuide knowledge planet logo and links to more information about the platform. Uses an image hosted on oss.javaguide.cn.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/snippets/article-header.snippet.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![JavaGuide官方知识星球](https://oss.javaguide.cn/xingqiu/xingqiu.png)](../about-the-author/zhishixingqiu-two-years.md)\n```\n\n----------------------------------------\n\nTITLE: Floating-Point Precision Loss Example in Java\nDESCRIPTION: This code snippet demonstrates the precision loss that can occur when performing floating-point arithmetic in Java.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nfloat a = 2.0f - 1.9f;\nfloat b = 1.8f - 1.7f;\nSystem.out.printf(\"%.9f\",a);// 0.100000024\nSystem.out.println(b);// 0.099999905\nSystem.out.println(a == b);// false\n```\n\n----------------------------------------\n\nTITLE: 定义内部类 (Java)\nDESCRIPTION: 展示了如何在Java中定义外部类和内部类。内部类可以访问外部类的私有属性。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class OutterClass {\n    private String userName;\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public static void main(String[] args) {\n\n    }\n\n    class InnerClass{\n        private String name;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multipart Byte Ranges Response\nDESCRIPTION: Shows server response format when returning multiple byte ranges with appropriate content type and boundaries.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/network/http1.0-vs-http1.1.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nHTTP/1.1 206 Partial Content\nContent-Type: multipart/byteranges; boundary=3d6b6a416f9b5\nContent-Length: 376\n\n--3d6b6a416f9b5\nContent-Type: application/octet-stream\nContent-Range: bytes 0-99/2000\n\n(第 0 到 99 字节的数据块)\n\n--3d6b6a416f9b5\nContent-Type: application/octet-stream\nContent-Range: bytes 500-599/2000\n\n(第 500 到 599 字节的数据块)\n\n--3d6b6a416f9b5\nContent-Type: application/octet-stream\nContent-Range: bytes 1000-1099/2000\n\n(第 1000 到 1099 字节的数据块)\n\n--3d6b6a416f9b5--\n```\n\n----------------------------------------\n\nTITLE: SQL Range Query Example for Index Comparison\nDESCRIPTION: Demonstrates a simple SQL range query that highlights the limitations of hash indexes. This example shows why B+ trees are preferred for range-based queries in MySQL, as hash indexes cannot efficiently handle range operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-index.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSELECT * FROM tb1 WHERE id < 500;\n```\n\n----------------------------------------\n\nTITLE: Using instanceof Pattern Matching in Java 16\nDESCRIPTION: This code snippet shows the new instanceof pattern matching feature in Java 16. It demonstrates how to use the pattern variable directly without explicit casting.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java16.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Old code\nif (o instanceof String) {\n    String s = (String)o;\n    ... use s ...\n}\n\n// New code\nif (o instanceof String s) {\n    ... use s ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking JVM Memory Statistics in Java\nDESCRIPTION: Code to print maximum memory, free memory, and total memory available to the JVM runtime.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-intro.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nSystem.out.println(\"Xmx=\" + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + \"M\");    //系统的最大空间\nSystem.out.println(\"free mem=\" + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + \"M\");  //系统的空闲空间\nSystem.out.println(\"total mem=\" + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + \"M\");  //当前可用的总空间\n```\n\n----------------------------------------\n\nTITLE: SQL 基本语法示例\nDESCRIPTION: 展示了SQL语句的一行写法和多行写法\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE user SET username='robot', password='robot' WHERE username = 'root';\n\nUPDATE user\nSET username='robot', password='robot'\nWHERE username = 'root';\n```\n\n----------------------------------------\n\nTITLE: Bytecode Instructions for String Object Creation\nDESCRIPTION: This bytecode shows the detailed instructions executed when creating a new String object with a string literal. It demonstrates how JVM handles string creation, including checking and potentially adding the literal to the constant pool.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_17\n\nLANGUAGE: java\nCODE:\n```\n// 在堆内存中分配一个尚未初始化的 String 对象。\n// #2 是常量池中的一个符号引用，指向 java/lang/String 类。\n// 在类加载的解析阶段，这个符号引用会被解析成直接引用，即指向实际的 java/lang/String 类。\n0 new #2 <java/lang/String>\n// 复制栈顶的 String 对象引用，为后续的构造函数调用做准备。\n// 此时操作数栈中有两个相同的对象引用：一个用于传递给构造函数，另一个用于保持对新对象的引用，后续将其存储到局部变量表。\n3 dup\n// JVM 先检查字符串常量池中是否存在 \"abc\"。\n// 如果常量池中已存在 \"abc\"，则直接返回该字符串的引用；\n// 如果常量池中不存在 \"abc\"，则 JVM 会在常量池中创建该字符串字面量并返回它的引用。\n// 这个引用被压入操作数栈，用作构造函数的参数。\n4 ldc #3 <abc>\n// 调用构造方法，使用从常量池中加载的 \"abc\" 初始化堆中的 String 对象\n// 新的 String 对象将包含与常量池中的 \"abc\" 相同的内容，但它是一个独立的对象，存储于堆中。\n6 invokespecial #4 <java/lang/String.<init> : (Ljava/lang/String;)V>\n// 将堆中的 String 对象引用存储到局部变量表\n9 astore_1\n// 返回，结束方法\n10 return\n```\n\n----------------------------------------\n\nTITLE: Remove Method Implementation in LinkedList Iterator in Java\nDESCRIPTION: Explains the implementation of the remove() method in LinkedList's iterator. This method removes the last returned element from the list and updates the iterator's state accordingly.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/linkedlist-source-code.md#2025-04-20_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// 从列表中删除上次被返回的元素\npublic void remove() {\n    // 检查是否在迭代过程中链表被修改\n    checkForComodification();\n    // 如果上次返回的节点为空，则抛出异常\n    if (lastReturned == null)\n        throw new IllegalStateException();\n\n    // 获取当前节点的下一个节点\n    Node<E> lastNext = lastReturned.next;\n    // 从链表中删除上次返回的节点\n    unlink(lastReturned);\n    // 修改指针\n    if (next == lastReturned)\n        next = lastNext;\n    else\n        nextIndex--;\n    // 将上次返回的节点引用置为 null，方便 GC 回收\n    lastReturned = null;\n    expectedModCount++;\n}\n```\n\n----------------------------------------\n\nTITLE: ArrayList ensureCapacity Method Implementation in Java\nDESCRIPTION: The ensureCapacity method allows users to increase an ArrayList's capacity explicitly to minimize the number of incremental reallocations. This method is provided for optimization purposes.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n    /**\n    如有必要，增加此 ArrayList 实例的容量，以确保它至少可以容纳由minimum capacity参数指定的元素数。\n     *\n     * @param   minCapacity   所需的最小容量\n     */\n    public void ensureCapacity(int minCapacity) {\n        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n            // any size if not default element table\n            ? 0\n            // larger than default for default empty table. It's already\n            // supposed to be at default size.\n            : DEFAULT_CAPACITY;\n\n        if (minCapacity > minExpand) {\n            ensureExplicitCapacity(minCapacity);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'super' keyword usage in Java\nDESCRIPTION: This code snippet illustrates how to use the 'super' keyword to access parent class members from a child class in Java. It shows accessing a parent class variable and calling a parent class method.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-keyword-summary.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class Super {\n    protected int number;\n    protected showNumber() {\n        System.out.println(\"number = \" + number);\n    }\n}\npublic class Sub extends Super {\n    void bar() {\n        super.number = 10;\n        super.showNumber();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 查看ZooKeeper节点状态\nDESCRIPTION: 使用stat命令查看节点node1的详细状态信息。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n[zk: 127.0.0.1:2181(CONNECTED) 10] stat /node1\ncZxid = 0x47\nctime = Sun Jan 20 10:22:59 CST 2019\nmZxid = 0x47\nmtime = Sun Jan 20 10:22:59 CST 2019\npZxid = 0x4a\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 11\nnumChildren = 1\n```\n\n----------------------------------------\n\nTITLE: Guava Library Array Conversion\nDESCRIPTION: Shows array to list conversion using Google Guava library's ImmutableList and Lists utility classes.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-precautions-for-use.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nList<String> il = ImmutableList.of(\"string\", \"elements\");  // from varargs\nList<String> il = ImmutableList.copyOf(aStringArray);      // from array\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic XML Query for Method Overloading Support\nDESCRIPTION: Illustrates how to use dynamic SQL in XML mapping files to support method overloading in MyBatis. The <where> and <if> tags conditionally include filtering based on parameter presence.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/mybatis/mybatis-interview.md#2025-04-20_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<select id=\"getAllStu\" resultType=\"com.pojo.Student\">\n  select * from student\n  <where>\n    <if test=\"id != null\">\n      id = #{id}\n    </if>\n  </where>\n</select>\n```\n\n----------------------------------------\n\nTITLE: MongoDB Aggregation Pipeline Format\nDESCRIPTION: Shows the basic structure for using aggregation pipeline operators in MongoDB's aggregate method\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mongodb/mongodb-questions-01.md#2025-04-20_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ndb.collection.aggregate( [ { 阶段操作符：表述 }, { 阶段操作符：表述 }, ... ] )\n```\n\n----------------------------------------\n\nTITLE: Constructing LinkedBlockingQueue in Java\nDESCRIPTION: Shows two constructors for LinkedBlockingQueue: one creating an unbounded queue and another creating a bounded queue with a specified capacity.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-collections.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic LinkedBlockingQueue() {\n    this(Integer.MAX_VALUE);\n}\n\npublic LinkedBlockingQueue(int capacity) {\n    if (capacity <= 0) throw new IllegalArgumentException();\n    this.capacity = capacity;\n    last = head = new Node<E>(null);\n}\n```\n\n----------------------------------------\n\nTITLE: Kafka Consumer with Error Simulation\nDESCRIPTION: Consumer implementation that deliberately throws an exception for every 5th message to demonstrate retry behavior\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/kafka-questions-01.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@KafkaListener(topics = {KafkaConst.TEST_TOPIC},groupId = \"apple\")\nprivate void customer(String message) throws InterruptedException {\n    log.info(\"kafka customer:{}\",message);\n    Integer n = Integer.parseInt(message);\n    if (n%5==0){\n        throw new  RuntimeException();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL SQL Programming Fundamentals\nDESCRIPTION: Covers core SQL programming concepts including local/global variables, control structures, built-in functions and stored functions. Includes extensive function reference for numeric, date/time and string operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/a-thousand-lines-of-mysql-study-notes.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n/* SQL编程 */ ------------------\n--// 局部变量 ----------\n-- 变量声明\n    declare var_name[,...] type [default value]\n    这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Large Memory Allocation Test\nDESCRIPTION: Code showing the allocation of a larger byte array (10MB) and its effect on memory statistics.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-intro.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nbyte[] b = new byte[10 * 1024 * 1024];\nSystem.out.println(\"分配了10M空间给数组\");\nSystem.out.println(\"Xmx=\" + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + \"M\");\nSystem.out.println(\"free mem=\" + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + \"M\");\nSystem.out.println(\"total mem=\" + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + \"M\");\n```\n\n----------------------------------------\n\nTITLE: Adding User View History Business Logic in Java\nDESCRIPTION: This method handles the business logic for adding user view history. It saves the view history, creates a transaction record, and stores it in Redis or a database.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/rocketmq-questions.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Component\npublic class ViewHistoryHandler {\n\n    @Autowired\n    private IViewHistoryService viewHistoryService;\n\n    @Autowired\n    private IMqTransactionService mqTransactionService;\n\n    @Autowired\n    private RedisService redisService;\n\n    @Transactional\n    public Boolean addViewHistory(String transactionId, Long userId, Long forecastLogId) {\n        // Implementation details omitted for brevity\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Query Cache in my.cnf\nDESCRIPTION: Configuration settings for enabling MySQL query cache in my.cnf file. These properties activate the query cache and set its size to approximately 600KB.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-questions-01.md#2025-04-20_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nquery_cache_type=1\nquery_cache_size=600000\n```\n\n----------------------------------------\n\nTITLE: 使用WATCH监视键值变化控制事务执行\nDESCRIPTION: 展示了如何使用WATCH命令监视键值的变化，当被监视的键在事务执行前被其他客户端修改时，事务会失败。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-02.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 客户端 1\n> SET PROJECT \"RustGuide\"\nOK\n> WATCH PROJECT\nOK\n> MULTI\nOK\n> SET PROJECT \"JavaGuide\"\nQUEUED\n\n# 客户端 2\n# 在客户端 1 执行 EXEC 命令提交事务之前修改 PROJECT 的值\n> SET PROJECT \"GoGuide\"\n\n# 客户端 1\n# 修改失败，因为 PROJECT 的值被客户端2修改了\n> EXEC\n(nil)\n> GET PROJECT\n\"GoGuide\"\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Query Cache Configuration Variables\nDESCRIPTION: This SQL command displays all system variables related to query cache in MySQL. The command shows whether query cache is supported and its current configuration settings.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-query-cache.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysql> show variables like '%query_cache%';\n+------------------------------+---------+\n| Variable_name                | Value   |\n+------------------------------+---------+\n| have_query_cache             | YES     |\n| query_cache_limit            | 1048576 |\n| query_cache_min_res_unit     | 4096    |\n| query_cache_size             | 599040  |\n| query_cache_type             | ON      |\n| query_cache_wlock_invalidate | OFF     |\n+------------------------------+---------+\n6 rows in set (0.02 sec)\n```\n\n----------------------------------------\n\nTITLE: Implementing equals() Method in String Class\nDESCRIPTION: This code snippet shows the implementation of the equals() method in the String class, which compares the content of two String objects.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Set类型的基本操作\nDESCRIPTION: 展示了Set类型的基本操作,包括SADD、SMEMBERS、SCARD、SISMEMBER等命令的使用。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-data-structures-01.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n> SADD mySet value1 value2\n(integer) 2\n> SADD mySet value1 # 不允许有重复元素，因此添加失败\n(integer) 0\n> SMEMBERS mySet\n1) \"value1\"\n2) \"value2\"\n> SCARD mySet\n(integer) 2\n> SISMEMBER mySet value1\n(integer) 1\n> SADD mySet2 value2 value3\n(integer) 2\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Shared Static Variables in Generic Classes in Java\nDESCRIPTION: Shows how static variables in generic classes are shared across all instances, regardless of the type parameter. This is due to type erasure causing all instances to share the same bytecode.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class StaticTest{\n    public static void main(String[] args){\n        GT<Integer> gti = new GT<Integer>();\n        gti.var=1;\n        GT<String> gts = new GT<String>();\n        gts.var=2;\n        System.out.println(gti.var);\n    }\n}\nclass GT<T>{\n    public static int var=0;\n    public void nothing(T x){}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceLoader Class Structure in Java\nDESCRIPTION: Shows the basic structure of the ServiceLoader class, highlighting that it's final and implements Iterable interface.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/spi.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic final class ServiceLoader<S> implements Iterable<S>{ xxx...}\n```\n\n----------------------------------------\n\nTITLE: Implementing ClassLoader Security Check in JDK 8\nDESCRIPTION: Source code of ClassLoader's preDefineClass method that performs security checks before defining classes. It prevents loading malicious core Java classes by validating package names and throwing SecurityException for unauthorized 'java.' package definitions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/classloader.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate ProtectionDomain preDefineClass(String name,\n                                            ProtectionDomain pd)\n    {\n        // 检查类名是否合法\n        if (!checkName(name)) {\n            throw new NoClassDefFoundError(\"IllegalName: \" + name);\n        }\n\n        // 防止在 \"java.*\" 包中定义类。\n        // 此检查对于安全性至关重要，因为它可以防止恶意代码替换核心 Java 类。\n        // JDK 9 利用平台类加载器增强了 preDefineClass 方法的安全性\n        if ((name != null) && name.startsWith(\"java.\")) {\n            throw new SecurityException\n                (\"禁止的包名: \" +\n                 name.substring(0, name.lastIndexOf('.')));\n        }\n\n         // 如果未指定 ProtectionDomain，则使用默认域（defaultDomain）。\n        if (pd == null) {\n            pd = defaultDomain;\n        }\n\n        if (name != null) {\n            checkCerts(name, pd.getCodeSource());\n        }\n\n        return pd;\n    }\n```\n\n----------------------------------------\n\nTITLE: Unsupported Operation Example\nDESCRIPTION: Shows how modification operations on Arrays.asList() result throw UnsupportedOperationException.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-precautions-for-use.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nList myList = Arrays.asList(1, 2, 3);\nmyList.add(4);//运行时报错：UnsupportedOperationException\nmyList.remove(1);//运行时报错：UnsupportedOperationException\nmyList.clear();//运行时报错：UnsupportedOperationException\n```\n\n----------------------------------------\n\nTITLE: Demonstrating System.exit() in Try-Catch-Finally Blocks in Java\nDESCRIPTION: This code snippet shows that the finally block is not executed when System.exit() is called in the catch block, terminating the Java Virtual Machine.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-03.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\ntry {\n    System.out.println(\"Try to do something\");\n    throw new RuntimeException(\"RuntimeException\");\n} catch (Exception e) {\n    System.out.println(\"Catch Exception -> \" + e.getMessage());\n    // 终止当前正在运行的Java虚拟机\n    System.exit(1);\n} finally {\n    System.out.println(\"Finally\");\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handler Implementation\nDESCRIPTION: Extended DefaultErrorHandler implementation for custom error handling and alerting\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/kafka-questions-01.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Slf4j\npublic class DelErrorHandler extends DefaultErrorHandler {\n\n    public DelErrorHandler(FixedBackOff backOff) {\n        super(null,backOff);\n    }\n\n    @Override\n    public void handleRemaining(Exception thrownException, List<ConsumerRecord<?, ?>> records, Consumer<?, ?> consumer, MessageListenerContainer container) {\n        super.handleRemaining(thrownException, records, consumer, container);\n        log.info(\"重试多次失败\");\n        // 自定义操作\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose File Basic Structure Example\nDESCRIPTION: Example of a Docker Compose YAML file structure showing version declaration, service definitions with various configuration options, and optional volume and network configurations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-intro.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.8\" # 定义版本， 表示当前使用的 docker-compose 语法的版本\nservices: # 服务，可以存在多个\n    servicename1: # 服务名字，它也是内部 bridge 网络可以使用的 DNS name，如果不是集群模式相当于 docker run 的时候指定的一个名称，\n   #集群（Swarm）模式是多个容器的逻辑抽象\n        image: # 镜像的名字\n        command: # 可选，如果设置，则会覆盖默认镜像里的 CMD 命令\n        environment: # 可选，等价于 docker container run 里的 --env 选项设置环境变量\n        volumes: # 可选，等价于 docker container run 里的 -v 选项 绑定数据卷\n        networks: # 可选，等价于 docker container run 里的 --network 选项指定网络\n        ports: # 可选，等价于 docker container run 里的 -p 选项指定端口映射\n        restart: # 可选，控制容器的重启策略\n        build: #构建目录\n        depends_on: #服务依赖配置\n    servicename2:\n        image:\n        command:\n        networks:\n    \tports:\n    servicename3:\n    #...\nvolumes: # 可选，需要创建的数据卷，类似 docker volume create\n  db_data:\nnetworks: # 可选，等价于 docker network create\n```\n\n----------------------------------------\n\nTITLE: Custom Kafka Listener Container Factory Configuration\nDESCRIPTION: Configuration for custom retry attempts and intervals using FixedBackOff\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/kafka-questions-01.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic KafkaListenerContainerFactory kafkaListenerContainerFactory(ConsumerFactory<String, String> consumerFactory) {\n    ConcurrentKafkaListenerContainerFactory factory = new ConcurrentKafkaListenerContainerFactory();\n    // 自定义重试时间间隔以及次数\n    FixedBackOff fixedBackOff = new FixedBackOff(1000, 5);\n    factory.setCommonErrorHandler(new DefaultErrorHandler(fixedBackOff));\n    factory.setConsumerFactory(consumerFactory);\n    return factory;\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Method Overloading in PersonDao Interface\nDESCRIPTION: Shows more complex overloading with multiple parameters in a MyBatis Mapper interface. Three method variations are provided: no parameters, one parameter, and two parameters.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/mybatis/mybatis-interview.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nPerson queryById();\n\nPerson queryById(@Param(\"id\") Long id);\n\nPerson queryById(@Param(\"id\") Long id, @Param(\"name\") String name);\n```\n\n----------------------------------------\n\nTITLE: 更新ZooKeeper节点数据\nDESCRIPTION: 使用set命令更新节点node1的数据内容为\"set node1\"。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n[zk: 127.0.0.1:2181(CONNECTED) 11] set /node1 \"set node1\"\n```\n\n----------------------------------------\n\nTITLE: Zuul Rate Limiting Dependencies\nDESCRIPTION: Maven dependencies required to implement rate limiting in Zuul using spring-cloud-zuul-ratelimit library\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/api-gateway.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\n</dependency>\n<dependency>\n    <groupId>com.marcosbarbero.cloud</groupId>\n    <artifactId>spring-cloud-zuul-ratelimit</artifactId>\n    <version>2.2.0.RELEASE</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Calculating Power Function Using Simple Multiplication in Java\nDESCRIPTION: An alternative implementation of the power function using iterative multiplication. This method has O(n) time complexity where n is the absolute value of the exponent, making it less efficient than binary exponentiation for large exponents.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// 使用累乘\npublic double powerAnother(double base, int exponent) {\n    double result = 1.0;\n    for (int i = 0; i < Math.abs(exponent); i++) {\n        result *= base;\n    }\n    if (exponent >= 0)\n        return result;\n    else\n        return 1 / result;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating String Interpolation with ${} in SQL Queries\nDESCRIPTION: Shows how to use ${} for dynamic column sorting in MyBatis. The orderCols parameter is directly interpolated into the SQL statement, allowing flexible sorting by any column combination.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/mybatis/mybatis-interview.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect * from users order by ${orderCols}\n```\n\n----------------------------------------\n\nTITLE: Exploring ThreadLocal GC Behavior in Java\nDESCRIPTION: Code demonstrating how to inspect ThreadLocal's internal state after garbage collection using reflection.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class ThreadLocalDemo {\n\n    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, InterruptedException {\n        Thread t = new Thread(()->test(\"abc\",false));\n        t.start();\n        t.join();\n        System.out.println(\"--gc后--\");\n        Thread t2 = new Thread(() -> test(\"def\", true));\n        t2.start();\n        t2.join();\n    }\n\n    private static void test(String s,boolean isGC)  {\n        try {\n            new ThreadLocal<>().set(s);\n            if (isGC) {\n                System.gc();\n            }\n            Thread t = Thread.currentThread();\n            Class<? extends Thread> clz = t.getClass();\n            Field field = clz.getDeclaredField(\"threadLocals\");\n            field.setAccessible(true);\n            Object ThreadLocalMap = field.get(t);\n            Class<?> tlmClass = ThreadLocalMap.getClass();\n            Field tableField = tlmClass.getDeclaredField(\"table\");\n            tableField.setAccessible(true);\n            Object[] arr = (Object[]) tableField.get(ThreadLocalMap);\n            for (Object o : arr) {\n                if (o != null) {\n                    Class<?> entryClass = o.getClass();\n                    Field valueField = entryClass.getDeclaredField(\"value\");\n                    Field referenceField = entryClass.getSuperclass().getSuperclass().getDeclaredField(\"referent\");\n                    valueField.setAccessible(true);\n                    referenceField.setAccessible(true);\n                    System.out.println(String.format(\"弱引用key:%s,值:%s\", referenceField.get(o), valueField.get(o)));\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Collections Synchronization Methods\nDESCRIPTION: Thread-safe collection wrapper methods provided by Collections utility class (not recommended for use)\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nsynchronizedCollection(Collection<T>  c) //返回指定 collection 支持的同步（线程安全的）collection。\nsynchronizedList(List<T> list)//返回指定列表支持的同步（线程安全的）List。\nsynchronizedMap(Map<K,V> m) //返回由指定映射支持的同步（线程安全的）Map。\nsynchronizedSet(Set<T> s) //返回指定 set 支持的同步（线程安全的）set。\n```\n\n----------------------------------------\n\nTITLE: Adding Null Values to ArrayList Example in Java\nDESCRIPTION: Demonstrates how ArrayList can store null values along with regular objects, though it's not recommended for maintainability reasons.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nArrayList<String> listOfStrings = new ArrayList<>();\nlistOfStrings.add(null);\nlistOfStrings.add(\"java\");\nSystem.out.println(listOfStrings);\n```\n\n----------------------------------------\n\nTITLE: Implementing LazyIterator in ServiceLoader for Java\nDESCRIPTION: Demonstrates the implementation of LazyIterator, which handles the lazy loading of service providers.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/spi.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic boolean hasNext() {\n    if (acc == null) {\n        return hasNextService();\n    } else {\n        PrivilegedAction<Boolean> action = new PrivilegedAction<Boolean>() {\n            public Boolean run() {\n                return hasNextService();\n            }\n        };\n        return AccessController.doPrivileged(action, acc);\n    }\n}\n\nprivate boolean hasNextService() {\n    if (nextName != null) {\n        return true;\n    }\n    if (configs == null) {\n        try {\n            //通过PREFIX（META-INF/services/）和类名 获取对应的配置文件，得到具体的实现类\n            String fullName = PREFIX + service.getName();\n            if (loader == null)\n                configs = ClassLoader.getSystemResources(fullName);\n            else\n                configs = loader.getResources(fullName);\n        } catch (IOException x) {\n            fail(service, \"Error locating configuration files\", x);\n        }\n    }\n    while ((pending == null) || !pending.hasNext()) {\n        if (!configs.hasMoreElements()) {\n            return false;\n        }\n        pending = parse(service, configs.nextElement());\n    }\n    nextName = pending.next();\n    return true;\n}\n\n\npublic S next() {\n    if (acc == null) {\n        return nextService();\n    } else {\n        PrivilegedAction<S> action = new PrivilegedAction<S>() {\n            public S run() {\n                return nextService();\n            }\n        };\n        return AccessController.doPrivileged(action, acc);\n    }\n}\n\nprivate S nextService() {\n    if (!hasNextService())\n        throw new NoSuchElementException();\n    String cn = nextName;\n    nextName = null;\n    Class<?> c = null;\n    try {\n        c = Class.forName(cn, false, loader);\n    } catch (ClassNotFoundException x) {\n        fail(service,\n                \"Provider \" + cn + \" not found\");\n    }\n    if (!service.isAssignableFrom(c)) {\n        fail(service,\n                \"Provider \" + cn + \" not a subtype\");\n    }\n    try {\n        S p = service.cast(c.newInstance());\n        providers.put(cn, p);\n        return p;\n    } catch (Throwable x) {\n        fail(service,\n                \"Provider \" + cn + \" could not be instantiated\",\n                x);\n    }\n    throw new Error();          // This cannot happen\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query Cache Control with SELECT Options\nDESCRIPTION: Example SQL queries showing how to explicitly control query caching behavior using SQL_CACHE and SQL_NO_CACHE hints. These hints override the global query cache settings for specific queries.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-query-cache.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SQL_CACHE id, name FROM customer;# 会缓存\nSELECT SQL_NO_CACHE id, name FROM customer;# 不会缓存\n```\n\n----------------------------------------\n\nTITLE: SQL Name Query Using Covering Index\nDESCRIPTION: Example query that demonstrates a covering index scenario where no table lookup is needed. The index itself contains all the data required for the query, eliminating the need for additional lookups.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-index.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT name FROM table WHERE name='guang19';\n```\n\n----------------------------------------\n\nTITLE: ContextAccessor getProperty Method Implementation\nDESCRIPTION: Shows the implementation of the getProperty method in DynamicContext.ContextAccessor class, which is responsible for retrieving property values for dynamic SQL conditions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/mybatis/mybatis-interview.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic Object getProperty(Map context, Object target, Object name) {\n  Map map = (Map) target;\n\n  Object result = map.get(name);\n  if (map.containsKey(name) || result != null) {\n    return result;\n  }\n\n  Object parameterObject = map.get(PARAMETER_OBJECT_KEY);\n  if (parameterObject instanceof Map) {\n    return ((Map)parameterObject).get(name);\n  }\n\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Switch Expression in Java 12\nDESCRIPTION: Shows the new lambda-style switch expression syntax that eliminates the need for break statements.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java12-13.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nswitch (day) {\n    case MONDAY, FRIDAY, SUNDAY -> System.out.println(6);\n    case TUESDAY                -> System.out.println(7);\n    case THURSDAY, SATURDAY     -> System.out.println(8);\n    case WEDNESDAY              -> System.out.println(9);\n}\n```\n\n----------------------------------------\n\nTITLE: rehash Method for Resizing ThreadLocalMap\nDESCRIPTION: Handles the resizing operations in ThreadLocalMap. It first performs a full cleanup of stale entries and then decides whether to resize the table based on the occupancy threshold.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate void rehash() {\n    expungeStaleEntries();\n\n    if (size >= threshold - threshold / 4)\n        resize();\n}\n\nprivate void expungeStaleEntries() {\n    Entry[] tab = table;\n    int len = tab.length;\n    for (int j = 0; j < len; j++) {\n        Entry e = tab[j];\n        if (e != null && e.get() == null)\n            expungeStaleEntry(j);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Update和Delete语句\nDESCRIPTION: 展示了更新和删除数据的基本语法\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE user\nSET username='robot', password='robot'\nWHERE username = 'root';\n\nDELETE FROM user\nWHERE username = 'robot';\n\nTRUNCATE TABLE user;\n```\n\n----------------------------------------\n\nTITLE: Acquiring Reentrant Lock in Curator\nDESCRIPTION: Shows the acquire method of InterProcessMutex that gets a reentrant mutex lock until successful. Throws IOException if connection is lost during lock acquisition.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-lock-implementations.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void acquire() throws Exception {\n  if (!internalLock(-1, null)) {\n    throw new IOException(\"Lost connection while trying to acquire lock: \" + basePath);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Service Registry with ZooKeeper\nDESCRIPTION: Diagram showing how ZooKeeper can be used as a service registry, with service providers registering themselves and consumers discovering services.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![注册中心](https://oss.javaguide.cn/p3-juejin/469cebf9670740d1a6711fe54db70e05~tplv-k3u1fbpfcp-zoom-1.jpeg)\n```\n\n----------------------------------------\n\nTITLE: Default ArrayBlockingQueue Constructor\nDESCRIPTION: Simple constructor that defaults to using non-fair locks by calling the main constructor with false for fairness.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic ArrayBlockingQueue(int capacity) {\n        this(capacity, false);\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Delayed Interface in Java\nDESCRIPTION: Interface definition for Delayed that must be implemented by elements stored in DelayQueue. Requires implementation of getDelay() method.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/delayqueue-source-code.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic interface Delayed extends Comparable<Delayed> {\n    long getDelay(TimeUnit unit);\n}\n```\n\n----------------------------------------\n\nTITLE: Redis List类型的范围查询和长度获取\nDESCRIPTION: 展示了如何使用LRANGE命令查询List的元素范围,以及使用LLEN命令获取List的长度。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-data-structures-01.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n> RPUSH myList value1 value2 value3\n(integer) 3\n> LRANGE myList 0 1\n1) \"value1\"\n2) \"value2\"\n> LRANGE myList 0 -1\n1) \"value1\"\n2) \"value2\"\n3) \"value3\"\n> LLEN myList\n(integer) 3\n```\n\n----------------------------------------\n\nTITLE: Redis Set类型的集合运算\nDESCRIPTION: 展示了Set类型的集合运算,包括求交集、并集和差集的操作。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-data-structures-01.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n> SINTERSTORE mySet3 mySet mySet2\n(integer) 1\n> SMEMBERS mySet3\n1) \"value2\"\n> SUNION mySet mySet2\n1) \"value3\"\n2) \"value2\"\n3) \"value1\"\n> SDIFF mySet mySet2 # 差集是由所有属于 mySet 但不属于 A 的元素组成的集合\n1) \"value1\"\n```\n\n----------------------------------------\n\nTITLE: Enabling AOF Persistence in Redis\nDESCRIPTION: Configuration command to enable AOF (Append Only File) persistence mode in Redis.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-persistence.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nappendonly yes\n```\n\n----------------------------------------\n\nTITLE: Container Monitoring and Interaction\nDESCRIPTION: Commands for viewing container logs, processes and executing commands inside containers.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker logs 289cc00dc5ed\ndocker logs -f 289cc00dc5ed\ndocker logs -ft 289cc00dc5ed\ndocker top 289cc00dc5ed\ndocker exec -it 289cc00dc5ed bash\n```\n\n----------------------------------------\n\nTITLE: Static vs Instance Method Example\nDESCRIPTION: Example demonstrating the difference between static and instance methods in Java.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npublic class Person {\n    public void method() {\n      //......\n    }\n\n    public static void staicMethod(){\n      //......\n    }\n    public static void main(String[] args) {\n        Person person = new Person();\n        // 调用实例方法\n        person.method();\n        // 调用静态方法\n        Person.staicMethod()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic XML Mapping for Method Overloading Support\nDESCRIPTION: Demonstrates an XML mapping that supports multiple overloaded methods using dynamic SQL conditions. The query includes multiple conditional filters that activate based on parameter availability.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/mybatis/mybatis-interview.md#2025-04-20_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<select id=\"queryById\" resultMap=\"PersonMap\">\n    select\n      id, name, age, address\n    from person\n    <where>\n        <if test=\"id != null\">\n            id = #{id}\n        </if>\n        <if test=\"name != null and name != ''\">\n            name = #{name}\n        </if>\n    </where>\n    limit 1\n</select>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Return Statement Behavior in Try-Finally Blocks in Java\nDESCRIPTION: This code snippet illustrates how return statements in try and finally blocks interact. It shows that a return statement in the finally block will override a return statement in the try block.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-03.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic static void main(String[] args) {\n    System.out.println(f(2));\n}\n\npublic static int f(int value) {\n    try {\n        return value * value;\n    } finally {\n        if (value == 2) {\n            return 0;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Bloom Filter Commands\nDESCRIPTION: Example commands showing how to use Bloom Filter functionality in Redis.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/data-structure/bloom-filter.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n127.0.0.1:6379> BF.ADD myFilter java\n(integer) 1\n127.0.0.1:6379> BF.ADD myFilter javaguide\n(integer) 1\n127.0.0.1:6379> BF.EXISTS myFilter java\n(integer) 1\n127.0.0.1:6379> BF.EXISTS myFilter javaguide\n(integer) 1\n127.0.0.1:6379> BF.EXISTS myFilter github\n(integer) 0\n```\n\n----------------------------------------\n\nTITLE: 使用Docker下载ZooKeeper镜像\nDESCRIPTION: 通过Docker命令拉取ZooKeeper 3.5.8版本的镜像。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull zookeeper:3.5.8\n```\n\n----------------------------------------\n\nTITLE: Main类的面向过程实现示例\nDESCRIPTION: 展示使用面向过程方式计算圆的面积和周长,直接在主方法中进行计算\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class Main {\n    public static void main(String[] args) {\n        // 定义圆的半径\n        double radius = 3.0;\n\n        // 计算圆的面积和周长\n        double area = Math.PI * radius * radius;\n        double perimeter = 2 * Math.PI * radius;\n\n        // 输出圆的面积和周长\n        System.out.println(\"圆的面积为：\" + area);\n        System.out.println(\"圆的周长为：\" + perimeter);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Class File API Usage Example\nDESCRIPTION: Shows how to use the new Class File API for parsing and modifying Java class files, demonstrating the removal of debug methods from a class.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java22-23.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nClassFile cf = ClassFile.of();\n// 解析字节数组为 ClassModel\nClassModel classModel = cf.parse(bytes);\n\n// 构建新的类文件，移除以 \"debug\" 开头的所有方法\nbyte[] newBytes = cf.build(classModel.thisClass().asSymbol(),\n        classBuilder -> {\n            for (ClassElement ce : classModel) {\n                if (!(ce instanceof MethodModel mm\n                        && mm.methodName().stringValue().startsWith(\"debug\"))) {\n                    classBuilder.with(ce);\n                }\n            }\n        });\n```\n\n----------------------------------------\n\nTITLE: Replacing Spaces in a String with Special Characters in Java (Regular Method)\nDESCRIPTION: This method replaces spaces in a string with \"%20\" by iterating through each character and appending the appropriate replacement. It has O(n) time complexity and uses a StringBuffer for efficient string manipulation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic String replaceSpace(StringBuffer str) {\n    StringBuffer out = new StringBuffer();\n    for (int i = 0; i < str.toString().length(); i++) {\n        char b = str.charAt(i);\n        if(String.valueOf(b).equals(\" \")){\n            out.append(\"%20\");\n        }else{\n            out.append(b);\n        }\n    }\n    return out.toString();\n}\n```\n\n----------------------------------------\n\nTITLE: SQL子查询示例\nDESCRIPTION: 展示了嵌套子查询的用法\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT cust_name, cust_contact\nFROM customers\nWHERE cust_id IN (SELECT cust_id\n                  FROM orders\n                  WHERE order_num IN (SELECT order_num\n                                      FROM orderitems\n                                      WHERE prod_id = 'RGAN01'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Old-to-Young Generation Ratio in Java\nDESCRIPTION: Sets the ratio of old generation to young generation memory using -XX:NewRatio. The example sets a 2:1 ratio of old to young generation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-parameters-intro.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n-XX:NewRatio=2\n```\n\n----------------------------------------\n\nTITLE: MySQL Miscellaneous Operations\nDESCRIPTION: Various MySQL operations including identifier naming conventions, comments, wildcards and command line specifics.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/a-thousand-lines-of-mysql-study-notes.md#2025-04-20_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n/* 杂项 */ ------------------\n1. 可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Generating Maven Wrapper Files\nDESCRIPTION: Command to generate Maven Wrapper files in a project. Maven Wrapper allows running Maven builds without requiring Maven to be pre-installed on the system.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-best-practices.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmvn wrapper:wrapper\n```\n\n----------------------------------------\n\nTITLE: Constant Variable Declaration in Java\nDESCRIPTION: This example demonstrates how to declare a constant variable in Java using the static and final keywords.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\npublic class ConstantVariableExample {\n    // 常量\n    public static final int constantVar = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Collection-based ArrayBlockingQueue Constructor\nDESCRIPTION: Constructor that initializes queue with elements from a collection while maintaining capacity and fairness settings.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic ArrayBlockingQueue(int capacity, boolean fair,\n                              Collection<? extends E> c) {\n  this(capacity, fair);\n\n  final ReentrantLock lock = this.lock;\n  lock.lock();\n  try {\n      int i = 0;\n      try {\n          for (E e : c) {\n              checkNotNull(e);\n              items[i++] = e;\n          }\n      } catch (ArrayIndexOutOfBoundsException ex) {\n          throw new IllegalArgumentException();\n      }\n      count = i;\n      putIndex = (i == capacity) ? 0 : i;\n  } finally {\n      lock.unlock();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Field Selection Best Practice\nDESCRIPTION: Example demonstrating the recommended practice of selecting specific fields instead of using SELECT *. This improves query performance by reducing unnecessary data retrieval.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-questions-01.md#2025-04-20_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\n```\n\n----------------------------------------\n\nTITLE: 运行ZooKeeper Docker容器\nDESCRIPTION: 使用Docker运行ZooKeeper容器，并将2181端口映射到主机。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name zookeeper -p 2181:2181 zookeeper:3.5.8\n```\n\n----------------------------------------\n\nTITLE: nextIndex and prevIndex Methods for Circular Table Traversal in Java\nDESCRIPTION: Helper methods used for traversing the ThreadLocalMap table in a circular fashion. nextIndex increments the index and wraps around to 0 when reaching the end, while prevIndex decrements and wraps to the end when reaching 0.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate static int nextIndex(int i, int len) {\n    return ((i + 1 < len) ? i + 1 : 0);\n}\n\nprivate static int prevIndex(int i, int len) {\n    return ((i - 1 >= 0) ? i - 1 : len - 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User IDs to HyperLogLog for Page View Tracking\nDESCRIPTION: This code shows how to use the PFADD command to add user IDs to a HyperLogLog data structure for tracking unique page views (UV) efficiently with minimal memory usage.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPFADD PAGE_1:UV USER1 USER2 ...... USERn\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with Auto-Increment Primary Key in MySQL\nDESCRIPTION: Example of creating a table with an auto-increment primary key and inserting data to demonstrate how auto-increment values work in MySQL.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-auto-increment-primary-key-continuous.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ninsert into test_pk values(null, 1, 1)\n```\n\n----------------------------------------\n\nTITLE: Specifying Heap Memory Sizes in Java\nDESCRIPTION: Sets the initial (-Xms) and maximum (-Xmx) heap sizes for the JVM. The example allocates a minimum of 2GB and maximum of 5GB heap memory.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-parameters-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-Xms2G -Xmx5G\n```\n\n----------------------------------------\n\nTITLE: Unsafe getAndAddInt Implementation\nDESCRIPTION: Implementation of getAndAddInt method in Unsafe class showing CAS operation with retry loop.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic final int getAndAddInt(Object o, long offset, int delta) {\n    int v;\n    do {\n        v = getIntVolatile(o, offset);\n    } while (!compareAndSwapInt(o, offset, v, v + delta));\n    return v;\n}\n```\n\n----------------------------------------\n\nTITLE: Using LEAD() and LAG() Window Functions in MySQL\nDESCRIPTION: Demonstrates the use of LEAD() and LAG() functions to access data from subsequent and previous rows respectively within a result set.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col1, col2, LEAD(col1, 1) OVER (ORDER BY col1) AS next_col1,\n                 LAG(col1, 1) OVER (ORDER BY col1) AS prev_col1\nFROM table;\n```\n\n----------------------------------------\n\nTITLE: Synchronous Message Sending in Kafka using Spring Boot\nDESCRIPTION: Demonstrates how to send a message to a Kafka topic synchronously and check the result using Spring Boot's KafkaTemplate.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/message-queue/kafka-questions-01.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nSendResult<String, Object> sendResult = kafkaTemplate.send(topic, o).get();\nif (sendResult.getRecordMetadata() != null) {\n  logger.info(\"生产者成功发送消息到\" + sendResult.getProducerRecord().topic() + \"-> \" + sendRe\n              sult.getProducerRecord().value().toString());\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Time Window Between Consecutive Exam Attempts in MySQL\nDESCRIPTION: Complex query to find the maximum time window between consecutive exam attempts for users who attempted exams on at least two days in 2021. Uses window functions, subqueries, and date calculations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT UID,\n       max(datediff(next_time, start_time)) + 1 AS days_window,\n       round(count(start_time)/(datediff(max(start_time), min(start_time))+ 1) * (max(datediff(next_time, start_time))+ 1), 2) AS avg_exam_cnt\nFROM\n  (SELECT UID,\n          start_time,\n          lead(start_time, 1) OVER (PARTITION BY UID\n                                    ORDER BY start_time) AS next_time\n   FROM exam_record\n   WHERE YEAR (start_time) = '2021' ) a\nGROUP BY UID\nHAVING count(DISTINCT date(start_time)) > 1\nORDER BY days_window DESC,\n         avg_exam_cnt DESC\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Young Generation Size in Java\nDESCRIPTION: Uses -Xmn to set a fixed size for the young generation memory. The example allocates 256MB to the young generation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-parameters-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-Xmn256m\n```\n\n----------------------------------------\n\nTITLE: Dynamic CDS Archive Commands\nDESCRIPTION: Shows the command line syntax for using dynamic class data sharing archives in Java 13.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java12-13.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\njava -XX:ArchiveClassesAtExit=my_app_cds.jsa -cp my_app.jar\njava -XX:SharedArchiveFile=my_app_cds.jsa -cp my_app.jar\n```\n\n----------------------------------------\n\nTITLE: Circle类的面向对象实现示例\nDESCRIPTION: 展示使用面向对象方式计算圆的面积和周长,通过Circle类封装数据和行为\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class Circle {\n    // 定义圆的半径\n    private double radius;\n\n    // 构造函数\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    // 计算圆的面积\n    public double getArea() {\n        return Math.PI * radius * radius;\n    }\n\n    // 计算圆的周长\n    public double getPerimeter() {\n        return 2 * Math.PI * radius;\n    }\n\n    public static void main(String[] args) {\n        // 创建一个半径为3的圆\n        Circle circle = new Circle(3.0);\n\n        // 输出圆的面积和周长\n        System.out.println(\"圆的面积为：\" + circle.getArea());\n        System.out.println(\"圆的周长为：\" + circle.getPerimeter());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Time Complexity of Array Operations in Java\nDESCRIPTION: Demonstrates the time complexity of basic operations (access, insert, delete) on arrays in Java.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/data-structure/linear-data-structure.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n假如数组的长度为 n。\n访问：O（1）//访问特定位置的元素\n插入：O（n ）//最坏的情况发生在插入发生在数组的首部并需要移动所有元素时\n删除：O（n）//最坏的情况发生在删除数组的开头发生并需要移动第一元素后面所有的元素时\n```\n\n----------------------------------------\n\nTITLE: SQL GROUP BY分组查询\nDESCRIPTION: 展示了分组查询和Having过滤的用法\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT cust_name, COUNT(cust_address) AS addr_num\nFROM Customers GROUP BY cust_name;\n\nSELECT cust_name, COUNT(cust_address) AS addr_num\nFROM Customers GROUP BY cust_name\nORDER BY cust_name DESC;\n\nSELECT cust_name, COUNT(*) AS NumberOfOrders\nFROM Customers\nWHERE cust_email IS NOT NULL\nGROUP BY cust_name\nHAVING COUNT(*) > 1;\n```\n\n----------------------------------------\n\nTITLE: Files Comparison in Java 12\nDESCRIPTION: Shows usage of the new mismatch() method for comparing two files and finding the first mismatching position.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java12-13.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nPath filePath1 = Files.createTempFile(\"file1\", \".txt\");\nPath filePath2 = Files.createTempFile(\"file2\", \".txt\");\nFiles.writeString(filePath1, \"Java 12 Article\");\nFiles.writeString(filePath2, \"Java 12 Article\");\n\nlong mismatch = Files.mismatch(filePath1, filePath2);\nassertEquals(-1, mismatch);\n```\n\n----------------------------------------\n\nTITLE: Checking Current Redis Eviction Policy\nDESCRIPTION: Command to check the current memory eviction policy configuration in Redis.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n> config get maxmemory-policy\nmaxmemory-policy\nnoeviction\n```\n\n----------------------------------------\n\nTITLE: Illustrating Cache Penetration Concept in Markdown\nDESCRIPTION: This markdown snippet includes an image link to illustrate the concept of cache penetration in Redis.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-02.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n![缓存穿透](https://oss.javaguide.cn/github/javaguide/database/redis/redis-cache-penetration.png)\n```\n\n----------------------------------------\n\nTITLE: Multi-file Java Program Structure\nDESCRIPTION: Example showing how Java 22 supports multi-file program execution without explicit compilation, with separate files for the main class and helper class.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java22-23.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Prog.java\nclass Prog {\n    public static void main(String[] args) { Helper.run(); }\n}\n\n// Helper.java\nclass Helper {\n    static void run() { System.out.println(\"Hello!\"); }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Maven Dependency Configuration Example\nDESCRIPTION: Complete example of Maven dependency configuration including optional elements like type, scope, optional flag and exclusions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-core-concepts.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n    <dependencies>\n        <dependency>\n            <groupId></groupId>\n            <artifactId></artifactId>\n            <version></version>\n            <type>...</type>\n            <scope>...</scope>\n            <optional>...</optional>\n            <exclusions>\n                <exclusion>\n                  <groupId>...</groupId>\n                  <artifactId>...</artifactId>\n                </exclusion>\n          </exclusions>\n        </dependency>\n      </dependencies>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Java断言实现 (Java)\nDESCRIPTION: 展示了Java中断言的使用方法。反编译代码揭示断言的底层实现是通过if语句和AssertionError实现的。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class AssertTest {\n    public static void main(String args[]) {\n        int a = 1;\n        int b = 1;\n        assert a == b;\n        System.out.println(\"公众号：Hollis\");\n        assert a != b : \"Hollis\";\n        System.out.println(\"博客：www.hollischuang.com\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Value Caching in Java\nDESCRIPTION: This snippet shows how Boolean values are cached, always returning the same TRUE or FALSE instance for performance optimization.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\npublic static Boolean valueOf(boolean b) {\n    return (b ? TRUE : FALSE);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Skip List Node Structure in Java\nDESCRIPTION: Defines the Node class for a skip list, with data, forward pointers, and maximum level. Sets constants for maximum level and default values.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-skiplist.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nprivate static final int MAX_LEVEL = 16;\n\nclass Node {\n    private int data = -1;\n    private Node[] forwards = new Node[MAX_LEVEL];\n    private int maxLevel = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: REPLACE INTO Statement for Handling Duplicate Keys\nDESCRIPTION: Demonstrates using REPLACE INTO to insert or update exam information, handling potential duplicate key conflicts automatically.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nREPLACE INTO examination_info VALUES\n (NULL, 9003, \"SQL\", \"hard\", 90, \"2021-01-01 00:00:00\");\n```\n\n----------------------------------------\n\nTITLE: Basic Array to List Conversion using Arrays.asList()\nDESCRIPTION: Demonstrates the basic usage of Arrays.asList() to convert an array to a List. Shows both direct array conversion and inline element creation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-precautions-for-use.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nString[] myArray = {\"Apple\", \"Banana\", \"Orange\"};\nList<String> myList = Arrays.asList(myArray);\n//上面两个语句等价于下面一条语句\nList<String> myList = Arrays.asList(\"Apple\",\"Banana\", \"Orange\");\n```\n\n----------------------------------------\n\nTITLE: Reordering Array Elements with Odd Numbers Before Even Numbers in Java\nDESCRIPTION: This algorithm reorders an array so that all odd numbers appear before even numbers while maintaining their relative order. It uses an auxiliary array and counts odd numbers first, which results in O(n) time complexity and O(n) space complexity.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class Solution {\n    public void reOrderArray(int [] array) {\n        //如果数组长度等于0或者等于1，什么都不做直接返回\n        if(array.length==0||array.length==1)\n            return;\n        //oddCount：保存奇数个数\n        //oddBegin：奇数从数组头部开始添加\n        int oddCount=0,oddBegin=0;\n        //新建一个数组\n        int[] newArray=new int[array.length];\n        //计算出（数组中的奇数个数）开始添加元素\n        for(int i=0;i<array.length;i++){\n            if((array[i]&1)==1) oddCount++;\n        }\n        for(int i=0;i<array.length;i++){\n            //如果数为基数新数组从头开始添加元素\n            //如果为偶数就从oddCount（数组中的奇数个数）开始添加元素\n            if((array[i]&1)==1)\n                newArray[oddBegin++]=array[i];\n            else newArray[oddCount++]=array[i];\n        }\n        for(int i=0;i<array.length;i++){\n            array[i]=newArray[i];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hash Function Implementation in JDK 1.7\nDESCRIPTION: Legacy hash function implementation from JDK 1.7 that uses multiple bit shifts and XOR operations for hash computation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/hashmap-source-code.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nstatic int hash(int h) {\n    h ^= (h >>> 20) ^ (h >>> 12);\n    return h ^ (h >>> 7) ^ (h >>> 4);\n}\n```\n\n----------------------------------------\n\nTITLE: 降低系统使用swap优先级\nDESCRIPTION: 通过修改/proc/sys/vm/swappiness文件来降低系统使用swap的优先级。这个命令将swappiness值设置为10，有助于减少Redis进程发生内存交换的可能性。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-common-blocking-problems-summary.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho 10 > /proc/sys/vm/swappiness\n```\n\n----------------------------------------\n\nTITLE: Referencing Integer.MAX_VALUE constant in Java\nDESCRIPTION: This snippet mentions the Integer.MAX_VALUE constant in the context of describing the default capacity of LinkedBlockingQueue. It's used to explain that LinkedBlockingQueue can be unbounded by default.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-01.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nInteger.MAX_VALUE\n```\n\n----------------------------------------\n\nTITLE: Defining a Record Class in Java 14\nDESCRIPTION: Shows how to use the record keyword to define a data class with automatically generated constructor, accessors, toString(), hashCode(), and equals() methods.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java14-15.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal class Rectangle implements Shape {\n    final double length;\n    final double width;\n\n    public Rectangle(double length, double width) {\n        this.length = length;\n        this.width = width;\n    }\n\n    double length() { return length; }\n    double width() { return width; }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nrecord Rectangle(float length, float width) { }\n```\n\n----------------------------------------\n\nTITLE: Configuring Metaspace Size in Java\nDESCRIPTION: Sets the initial and maximum sizes for Metaspace using -XX:MetaspaceSize and -XX:MaxMetaspaceSize.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-parameters-intro.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-XX:MetaspaceSize=N\n-XX:MaxMetaspaceSize=N\n```\n\n----------------------------------------\n\nTITLE: Calculating Truncated Average Using Mathematical Formula\nDESCRIPTION: SQL query that calculates the truncated average score for hard SQL exams using a mathematical approach. This solution uses the formula (sum - max - min)/(count - 2) to directly compute the average without filtering out specific scores.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT info.tag,\n       info.difficulty,\n       ROUND((SUM(record.score)- MIN(record.score)- MAX(record.score)) / (COUNT(record.score)- 2), 1) AS clip_avg_score\nFROM examination_info info,\n     exam_record record\nWHERE info.exam_id = record.exam_id\n  AND info.tag = \"SQL\"\n  AND info.difficulty = \"hard\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Integer Synchronization Issue in Java\nDESCRIPTION: This code snippet demonstrates a common mistake when using Integer objects in synchronized blocks. The synchronization is ineffective because each increment operation creates a new Integer object with a different hashcode.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java16.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void inc(Integer count) {\n    for (int i = 0; i < 10; i++) {\n        new Thread(() -> {\n            synchronized (count) {\n                count++;\n            }\n        }).start();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Arrays.copyOf() Method Implementation in Java\nDESCRIPTION: The Arrays.copyOf() method creates a new array of the specified length and copies elements from the original array. It internally uses System.arraycopy() for the actual copying operation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n    public static int[] copyOf(int[] original, int newLength) {\n      // 申请一个新的数组\n        int[] copy = new int[newLength];\n  // 调用System.arraycopy,将源数组中的数据进行拷贝,并返回新的数组\n        System.arraycopy(original, 0, copy, 0,\n                         Math.min(original.length, newLength));\n        return copy;\n    }\n```\n\n----------------------------------------\n\nTITLE: Method Types in Java - With Return and Parameters\nDESCRIPTION: Example of a method that both accepts parameters and returns a value.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic int f4(int a, int b) {\n    return a * b;\n}\n```\n\n----------------------------------------\n\nTITLE: Partial Content Response in HTTP 1.1\nDESCRIPTION: Example of server response to a range request showing the Content-Range and Content-Length headers.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/network/http1.0-vs-http1.1.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHTTP/1.1 206 Partial Content\nContent-Range: bytes 0-1023/146515\nContent-Length: 1024\n…\n（二进制内容）\n```\n\n----------------------------------------\n\nTITLE: Creating a Similar Table Structure for Batch Insert Testing in MySQL\nDESCRIPTION: Creating a table with the same structure as an existing one to demonstrate batch insert auto-increment behavior.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-auto-increment-primary-key-continuous.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate table test_pk2 like test_pk\n```\n\n----------------------------------------\n\nTITLE: Calculating Truncated Average Score for SQL Hard Exams (Direct Approach)\nDESCRIPTION: SQL query that calculates the truncated average (removing one highest and one lowest score) for hard SQL exams. This approach directly identifies the high difficulty SQL exam with ID 9001 and explicitly excludes the maximum and minimum scores using NOT IN with UNION ALL.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT tag, difficulty, ROUND(AVG(score), 1) clip_avg_score\n\tFROM examination_info info  INNER JOIN exam_record record\n\t\tWHERE info.exam_id = record.exam_id\n\t\t\tAND  record.exam_id = 9001\n\t\t\t\tAND record.score NOT IN(\n\t\t\t\t\tSELECT MAX(score)\n\t\t\t\t\t\tFROM exam_record\n\t\t\t\t\t\t\tWHERE exam_id = 9001\n\t\t\t\t\t\t\t\tUNION ALL\n\t\t\t\t\tSELECT MIN(score)\n\t\t\t\t\t\tFROM exam_record\n\t\t\t\t\t\t\tWHERE exam_id = 9001\n\t\t\t\t)\n```\n\n----------------------------------------\n\nTITLE: Referencing lock objects in LinkedBlockingQueue implementation\nDESCRIPTION: This snippet mentions the putLock and takeLock objects used in the LinkedBlockingQueue implementation. These locks are used to separate the locking mechanisms for producers and consumers, reducing lock contention.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-01.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nputLock\n```\n\nLANGUAGE: Java\nCODE:\n```\ntakeLock\n```\n\n----------------------------------------\n\nTITLE: Fixing Malformed Examination Records\nDESCRIPTION: SQL query to extract and separate incorrectly combined tag, difficulty, and duration values into their proper columns.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-05.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\texam_id,\n\tsubstring_index( tag, ',', 1 ) tag,\n\tsubstring_index( substring_index( tag, ',', 2 ), ',',- 1 ) difficulty,\n\tsubstring_index( tag, ',',- 1 ) duration\nFROM\n\texamination_info\nWHERE\n\tdifficulty = ''\n```\n\n----------------------------------------\n\nTITLE: MySQL Cursor Example\nDESCRIPTION: Shows how to use a cursor to process result sets row by row within a stored procedure.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER $\nCREATE  PROCEDURE getTotal()\nBEGIN\n    DECLARE total INT;\n    -- 创建接收游标数据的变量\n    DECLARE sid INT;\n    DECLARE sname VARCHAR(10);\n    -- 创建总数变量\n    DECLARE sage INT;\n    -- 创建结束标志变量\n    DECLARE done INT DEFAULT false;\n    -- 创建游标\n    DECLARE cur CURSOR FOR SELECT id,name,age from cursor_table where age>30;\n    -- 指定游标循环结束时的返回值\n    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = true;\n    SET total = 0;\n    OPEN cur;\n    FETCH cur INTO sid, sname, sage;\n    WHILE(NOT done)\n    DO\n        SET total = total + 1;\n        FETCH cur INTO sid, sname, sage;\n    END WHILE;\n\n    CLOSE cur;\n    SELECT total;\nEND $\nDELIMITER ;\n\n-- 调用存储过程\ncall getTotal();\n```\n\n----------------------------------------\n\nTITLE: Using explain() for MongoDB Query Analysis\nDESCRIPTION: Example of using the explain() method to analyze MongoDB query execution paths and determine if indexes are being used effectively.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mongodb/mongodb-questions-02.md#2025-04-20_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\ndb.s2.find().sort({\"score\": -1, \"userid\": 1}).explain()\n```\n\n----------------------------------------\n\nTITLE: Lock Conversion Methods in StampedLock\nDESCRIPTION: Method signatures showing how different lock types can be converted in StampedLock.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nlong tryConvertToWriteLock(long stamp){}\nlong tryConvertToReadLock(long stamp){}\nlong tryConvertToOptimisticRead(long stamp){}\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying with MongoDB Indexes\nDESCRIPTION: Examples of MongoDB index creation and query operations that leverage indexes, including compound index creation and understanding how sort operations work with indexes.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mongodb/mongodb-questions-02.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\ndb.s2.find().sort({\"userid\": 1, \"score\": -1})\ndb.s2.find().sort({\"userid\": -1, \"score\": 1})\n```\n\n----------------------------------------\n\nTITLE: MySQL User and Permissions Management\nDESCRIPTION: Comprehensive guide for managing MySQL users and permissions, including user creation, password management, privilege assignment and revocation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/a-thousand-lines-of-mysql-study-notes.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n/* 用户和权限管理 */ ------------------\n-- root密码重置\n1. 停止MySQL服务\n2.  [Linux] /usr/local/mysql/bin/safe_mysqld --skip-grant-tables &\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: JPS Command Examples in PowerShell\nDESCRIPTION: Examples of using jps command to list Java processes and their properties\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jdk-monitoring-and-troubleshooting-tools.md#2025-04-20_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nC:\\Users\\SnailClimb>jps\n7360 NettyClient2\n17396\n7972 Launcher\n16504 Jps\n17340 NettyServer\n```\n\n----------------------------------------\n\nTITLE: Computing Concurrent Users Example\nDESCRIPTION: Formula example showing how to calculate concurrent users and QPS from DAU metrics\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-availability/performance-test.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAverage concurrent users = DAU(12M) * Average daily usage time(1 hour, 3600s) / Seconds in a day(86400) = 12M/24 = 500K\n\nActual concurrent users (accounting for low traffic periods) = DAU(12M) * Average daily usage time(1 hour, 3600s) / (Seconds in day - Low traffic period of 8 hours) = 12M/16 = 750K\n\nPeak concurrent users = Average concurrent users * 6 = 3M\n\nQPS = Actual concurrent users/RT = 750K/0.5 = 1.5M/s\n```\n\n----------------------------------------\n\nTITLE: Defining Property Variables for Dependency Versions\nDESCRIPTION: Demonstrates using the properties section in POM files to define dependency version variables, making it easier to update versions in a single location.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-best-practices.md#2025-04-20_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<properties>\n  <junit.version>5.7.0</junit.version>\n  <mockito.version>3.9.0</mockito.version>\n</properties>\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL User Account\nDESCRIPTION: Demonstrates how to create a new MySQL user account with password.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER myuser IDENTIFIED BY 'mypassword';\n```\n\n----------------------------------------\n\nTITLE: Docker Data Volume Configuration\nDESCRIPTION: Commands for setting up and managing Docker data volumes for persistent storage.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -p 8080:8080 --name tomcat01 -v /opt/apps:/usr/local/tomcat/webapps tomcat:8.0-jre8\ndocker run -d -p 8080:8080 --name tomcat01 -v aa:/usr/local/tomcat/webapps tomcat:8.0-jre8\n```\n\n----------------------------------------\n\nTITLE: Calculating Incomplete Rates for Level 0 Users - First Condition Query\nDESCRIPTION: Query to calculate incomplete exam counts and rates for level 0 users when there exists at least one level 0 user with more than 2 incomplete exams.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-05.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\ttmp1.uid uid,\n\tsum(\n\tIF\n\t( er.submit_time IS NULL AND er.start_time IS NOT NULL, 1, 0 )) incomplete_cnt,\n\tround(\n\t\tsum(\n\t\tIF\n\t\t( er.submit_time IS NULL AND er.start_time IS NOT NULL, 1, 0 ))/ count( tmp1.uid ),\n\t\t3\n\t) incomplete_rate\nFROM\n\t(\n\tSELECT DISTINCT\n\t\tui.uid\n\tFROM\n\t\tuser_info ui\n\t\tLEFT JOIN exam_record er ON ui.uid = er.uid\n\tWHERE\n\t\ter.submit_time IS NULL\n\t\tAND ui.LEVEL = 0\n\t) tmp1\n\tLEFT JOIN exam_record er ON tmp1.uid = er.uid\nGROUP BY\n\ttmp1.uid\nORDER BY\n\tincomplete_rate\n```\n\n----------------------------------------\n\nTITLE: Finding Earliest Registered Users\nDESCRIPTION: Simple SQL query to find the top 3 earliest registered users based on registration timestamp.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-05.md#2025-04-20_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT uid, nick_name, register_time\n    FROM user_info\n    ORDER BY register_time\n    LIMIT 3\n```\n\n----------------------------------------\n\nTITLE: MySQL Stored Procedures Implementation\nDESCRIPTION: Details the creation and usage of stored procedures in MySQL, including parameter types (IN/OUT/INOUT) and procedure body syntax.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/a-thousand-lines-of-mysql-study-notes.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n/* 存储过程 */ ------------------\n存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。\n调用：CALL 过程名\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: IP Address Storage Comparison Example\nDESCRIPTION: Example showing the difference between signed and unsigned integers for storing IP addresses.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-high-performance-optimization-specification-recommendations.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSIGNED INT -2147483648~2147483647\nUNSIGNED INT 0~4294967295\n```\n\n----------------------------------------\n\nTITLE: Analyzing Score Grade Distribution by User Level\nDESCRIPTION: SQL query to calculate the distribution of exam score grades (Excellent/Good/Average/Poor) across different user levels. Uses case statements for grade classification and joins user_info with exam_record tables.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-05.md#2025-04-20_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT a.LEVEL,\n       a.score_grade,\n       ROUND(a.cur_count / b.total_num, 3) AS ratio\nFROM\n  (SELECT b.LEVEL AS LEVEL,\n          (CASE\n               WHEN a.score >= 90 THEN '优'\n               WHEN a.score < 90\n                    AND a.score >= 75 THEN '良'\n               WHEN a.score < 75\n                    AND a.score >= 60 THEN '中'\n               ELSE '差'\n           END) AS score_grade,\n          count(1) AS cur_count\n   FROM exam_record a\n   LEFT JOIN user_info b ON a.uid = b.uid\n   WHERE a.submit_time IS NOT NULL\n   GROUP BY b.LEVEL,\n            score_grade) a\nLEFT JOIN\n  (SELECT b.LEVEL AS LEVEL,\n          count(b.LEVEL) AS total_num\n   FROM exam_record a\n   LEFT JOIN user_info b ON a.uid = b.uid\n   WHERE a.submit_time IS NOT NULL\n   GROUP BY b.LEVEL) b ON a.LEVEL = b.LEVEL\nORDER BY a.LEVEL DESC,\n         ratio DESC\n```\n\n----------------------------------------\n\nTITLE: Inserting Test Data for Implicit Conversion Analysis in MySQL\nDESCRIPTION: SQL insert statements to add specific test cases for demonstrating string to number conversion rules.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/index-invalidation-caused-by-implicit-conversion.md#2025-04-20_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO `test1` (`id`, `num1`, `num2`, `type1`, `type2`, `str1`, `str2`) VALUES ('10000001', '10000', '10000a', '0', '0', '2df3d9465ty2e4hd523', '2df3d9465ty2e4hd523');\nINSERT INTO `test1` (`id`, `num1`, `num2`, `type1`, `type2`, `str1`, `str2`) VALUES ('10000002', '10000', '010000', '0', '0', '2df3d9465ty2e4hd523', '2df3d9465ty2e4hd523');\nINSERT INTO `test1` (`id`, `num1`, `num2`, `type1`, `type2`, `str1`, `str2`) VALUES ('10000003', '10000', ' 10000', '0', '0', '2df3d9465ty2e4hd523', '2df3d9465ty2e4hd523');\n```\n\n----------------------------------------\n\nTITLE: Date Comparison Recommended Example\nDESCRIPTION: Shows the recommended way of comparing dates without using functions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-high-performance-optimization-specification-recommendations.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nwhere create_time >= '20190101' and create_time < '20190102'\n```\n\n----------------------------------------\n\nTITLE: Creating New User Info Table in SQL\nDESCRIPTION: Creates a new table user_info_vip with specified columns including auto-increment ID, unique user ID, and various user information fields with appropriate constraints and character encoding.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_8\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TABLE IF NOT EXISTS user_info_vip(\n    id INT(11) PRIMARY KEY AUTO_INCREMENT COMMENT'自增ID',\n    uid INT(11) UNIQUE NOT NULL COMMENT '用户ID',\n    nick_name VARCHAR(64) COMMENT'昵称',\n    achievement INT(11) DEFAULT 0 COMMENT '成就值',\n    `level` INT(11) COMMENT '用户等级',\n    job VARCHAR(32) COMMENT '职业方向',\n    register_time DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT '注册时间'\n)CHARACTER SET UTF8\n```\n\n----------------------------------------\n\nTITLE: UPDATE Records with Tag Replacement\nDESCRIPTION: Shows two approaches to update tag values in the examination_info table: direct UPDATE and using REPLACE function.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE examination_info SET tag = 'Python' WHERE tag='PYTHON'\n```\n\nLANGUAGE: SQL\nCODE:\n```\nUPDATE examination_info\nSET tag = REPLACE(tag,'PYTHON','Python')\n```\n\n----------------------------------------\n\nTITLE: Docker Image Management\nDESCRIPTION: Commands for creating, saving and loading Docker images.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker commit -m \"描述信息\" -a \"镜像作者\" tomcat01 my_tomcat:1.0\ndocker save my_tomcat:1.0 -o my-tomcat-1.0.tar\ndocker load -i my-tomcat-1.0.tar\n```\n\n----------------------------------------\n\nTITLE: Segment Class Declaration in JDK 1.7 ConcurrentHashMap\nDESCRIPTION: Definition of Segment class that extends ReentrantLock to provide segment-level locking in JDK 1.7's ConcurrentHashMap implementation\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nstatic class Segment<K,V> extends ReentrantLock implements Serializable {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Young Generation Memory in Java\nDESCRIPTION: Sets the minimum and maximum sizes for the young generation memory using -XX:NewSize and -XX:MaxNewSize. The example sets a minimum of 256MB and maximum of 1024MB.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-parameters-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-XX:NewSize=256m\n-XX:MaxNewSize=1024m\n```\n\n----------------------------------------\n\nTITLE: Configuring Aliyun Docker mirror acceleration\nDESCRIPTION: 配置阿里云Docker镜像加速器的命令，通过修改Docker的daemon配置文件并重启服务来实现加速下载镜像。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo mkdir -p /etc/docker\nsudo tee /etc/docker/daemon.json <<-'EOF'\n{\n  \"registry-mirrors\": [\"https://679xpnpz.mirror.aliyuncs.com\"]\n}\nEOF\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Host Header Example in HTTP 1.1\nDESCRIPTION: Demonstrates the format of an HTTP 1.1 request with Host header field, showing how the protocol handles multiple hosts on a single IP address.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/network/http1.0-vs-http1.1.md#2025-04-20_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nGET /home.html HTTP/1.1\nHost: example1.org\n```\n\n----------------------------------------\n\nTITLE: Using SUBSTRING_INDEX Function Examples in SQL\nDESCRIPTION: Examples showing how to use SUBSTRING_INDEX function to extract parts of strings based on delimiters, with different count parameters for left and right extraction.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-05.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT SUBSTRING_INDEX('apple,banana,cherry', ',', 1);\nSELECT SUBSTRING_INDEX('apple,banana,cherry', ',', -1);\nSELECT SUBSTRING_INDEX('apple,banana,cherry', ',', 2);\nSELECT SUBSTRING_INDEX('apple,banana,cherry', ',', -2);\n```\n\n----------------------------------------\n\nTITLE: Method Types in Java - No Parameters No Return\nDESCRIPTION: Examples of methods with no parameters and no return value, including a method with early return statement.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic void f1() {\n    //......\n}\n// 下面这个方法也没有返回值，虽然用到了 return\npublic void f(int a) {\n    if (...) {\n        // 表示结束方法的执行,下方的输出语句不会执行\n        return;\n    }\n    System.out.println(a);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Size of CopyOnWriteArrayList in Java\nDESCRIPTION: Implementation of the size() method in CopyOnWriteArrayList, demonstrating how the list size is determined.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/copyonwritearraylist-source-code.md#2025-04-20_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\npublic int size() {\n    return getArray().length;\n}\n```\n\n----------------------------------------\n\nTITLE: Arrays.copyOf() Test Example for Array Expansion in Java\nDESCRIPTION: A test example showing how Arrays.copyOf() can be used to expand an array to a larger size while preserving the original elements. This is commonly used for array resizing operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic class ArrayscopyOfTest {\n\n  public static void main(String[] args) {\n    int[] a = new int[3];\n    a[0] = 0;\n    a[1] = 1;\n    a[2] = 2;\n    int[] b = Arrays.copyOf(a, 10);\n    System.out.println(\"b.length\"+b.length);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Aggregate Functions with Window Functions in MySQL\nDESCRIPTION: Shows how to use aggregate functions like SUM() in combination with window functions to perform calculations over a specified range of rows.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col1, col2, SUM(col1) OVER () AS sum_col\nFROM table;\n```\n\n----------------------------------------\n\nTITLE: Bytecode for String Creation with Pre-existing Constant Pool Entry\nDESCRIPTION: This bytecode shows the instruction sequence when creating a string literal followed by a new String() object with the same value. This demonstrates how the JVM reuses the constant pool entry from the first string when creating the second.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n0 ldc #2 <abc>\n2 astore_1\n3 new #3 <java/lang/String>\n6 dup\n7 ldc #2 <abc>\n9 invokespecial #4 <java/lang/String.<init> : (Ljava/lang/String;)V>\n12 astore_2\n13 return\n```\n\n----------------------------------------\n\nTITLE: Recommended Table Insert Example\nDESCRIPTION: Shows the recommended way of inserting data by explicitly specifying column names.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-high-performance-optimization-specification-recommendations.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ninsert into t(c1,c2,c3) values ('a','b','c');\n```\n\n----------------------------------------\n\nTITLE: Redis List类型实现队列操作\nDESCRIPTION: 展示了如何使用RPUSH和LPOP命令实现队列的入队和出队操作。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-data-structures-01.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> RPUSH myList value1\n(integer) 1\n> RPUSH myList value2 value3\n(integer) 3\n> LPOP myList\n\"value1\"\n> LRANGE myList 0 1\n1) \"value2\"\n2) \"value3\"\n> LRANGE myList 0 -1\n1) \"value2\"\n2) \"value3\"\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation Testing\nDESCRIPTION: Code demonstrating memory allocation behavior with byte array creation and memory statistics monitoring.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-intro.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nbyte[] b = new byte[1 * 1024 * 1024];\nSystem.out.println(\"分配了1M空间给数组\");\nSystem.out.println(\"Xmx=\" + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + \"M\");\nSystem.out.println(\"free mem=\" + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + \"M\");\nSystem.out.println(\"total mem=\" + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + \"M\");\n```\n\n----------------------------------------\n\nTITLE: MySQL Time Zone Management Commands\nDESCRIPTION: A set of SQL commands for viewing and setting time zones in MySQL, both for the current session and globally.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/some-thoughts-on-database-storage-time.md#2025-04-20_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\n# View current session time zone\nSELECT @@session.time_zone;\n# Set current session time zone\nSET time_zone = 'Europe/Helsinki';\nSET time_zone = \"+00:00\";\n# View global database time zone\nSELECT @@global.time_zone;\n# Set global time zone\nSET GLOBAL time_zone = '+8:00';\nSET GLOBAL time_zone = 'Europe/Helsinki';\n```\n\n----------------------------------------\n\nTITLE: Method Types in Java - With Parameters No Return\nDESCRIPTION: Example of a method that accepts parameters but has no return value.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic void f2(Parameter 1, ..., Parameter n) {\n    //......\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy HashMap put Implementation (JDK 1.7) - Java\nDESCRIPTION: JDK 1.7 version of HashMap put method showing older implementation using head insertion for collision resolution and simpler structure without tree conversion.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/hashmap-source-code.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic V put(K key, V value)\n    if (table == EMPTY_TABLE) {\n    inflateTable(threshold);\n}\n    if (key == null)\n        return putForNullKey(value);\n    int hash = hash(key);\n    int i = indexFor(hash, table.length);\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n        Object k;\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n\n    modCount++;\n    addEntry(hash, key, value, i);\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Current Date and Time into MySQL Table\nDESCRIPTION: SQL command to insert the current date and time into both DATETIME and TIMESTAMP columns of the 'time_zone_test' table.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/some-thoughts-on-database-storage-time.md#2025-04-20_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO time_zone_test(date_time,time_stamp) VALUES(NOW(),NOW());\n```\n\n----------------------------------------\n\nTITLE: 查看ZooKeeper指定目录下的子节点\nDESCRIPTION: 使用ls命令查看node1目录下的所有子节点。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n[zk: 127.0.0.1:2181(CONNECTED) 5] ls /node1\n[node1.1]\n```\n\n----------------------------------------\n\nTITLE: Merging Two Sorted Linked Lists - Recursive Solution\nDESCRIPTION: Recursive implementation for merging two sorted linked lists. Provides a more concise solution using recursion to combine the lists while maintaining sorted order.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic ListNode Merge(ListNode list1,ListNode list2) {\n    if(list1 == null){\n        return list2;\n    }\n    if(list2 == null){\n        return list1;\n    }\n    if(list1.val <= list2.val){\n        list1.next = Merge(list1.next, list2);\n        return list1;\n    }else{\n        list2.next = Merge(list1, list2.next);\n        return list2;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Student Object in Java Main Method\nDESCRIPTION: Demonstrates how to create a Student object and call its method in the main function of a Java application.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\npublic class App {\n    public static void main(String[] args) {\n        Student student = new Student(\"tellUrDream\");\n        student.sayName();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Solution using CASE expressions\nDESCRIPTION: A more concise and optimized SQL solution that uses CASE expressions to handle the conditional logic in a single query, improving readability and performance.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-05.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\tui.uid,\n\tSUM(\n\tIF\n\t( start_time IS NOT NULL AND score IS NULL, 1, 0 )) AS incomplete_cnt,#3.试卷未完成数\n\tROUND( AVG( IF ( start_time IS NOT NULL AND score IS NULL, 1, 0 )), 3 ) AS incomplete_rate #4.未完成率\n\nFROM\n\tuser_info ui\n\tLEFT JOIN exam_record USING ( uid )\nWHERE\nCASE\n\n\t\tWHEN (#1.当有任意一个0级用户未完成试卷数大于2时\n\t\tSELECT\n\t\t\tMAX( lv0_incom_cnt )\n\t\tFROM\n\t\t\t(\n\t\t\tSELECT\n\t\t\t\tSUM(\n\t\t\t\tIF\n\t\t\t\t( score IS NULL, 1, 0 )) AS lv0_incom_cnt\n\t\t\tFROM\n\t\t\t\tuser_info\n\t\t\t\tJOIN exam_record USING ( uid )\n\t\t\tWHERE\n\t\t\t\tLEVEL = 0\n\t\t\tGROUP BY\n\t\t\t\tuid\n\t\t\t) table1\n\t\t\t)> 2 THEN\n\t\t\tuid IN ( #1.1找出每个0级用户\n\t\t\tSELECT uid FROM user_info WHERE LEVEL = 0 ) ELSE uid IN ( #2.若不存在这样的用户，找出有作答记录的用户\n\t\t\tSELECT DISTINCT uid FROM exam_record )\n\t\tEND\n\t\tGROUP BY\n\t\t\tui.uid\n\tORDER BY\n\tincomplete_rate #5.结果按未完成率升序排序\n```\n\n----------------------------------------\n\nTITLE: System.arraycopy() Test Example in Java\nDESCRIPTION: A simple test demonstrating how System.arraycopy() can be used to shift elements within the same array, showing its ability to handle overlapping regions correctly.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arraylist-source-code.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class ArraycopyTest {\n\n  public static void main(String[] args) {\n    // TODO Auto-generated method stub\n    int[] a = new int[10];\n    a[0] = 0;\n    a[1] = 1;\n    a[2] = 2;\n    a[3] = 3;\n    System.arraycopy(a, 2, a, 3, 3);\n    a[2]=99;\n    for (int i = 0; i < a.length; i++) {\n      System.out.print(a[i] + \" \");\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Popular Exam Categories for Frequent Test-Takers in SQL\nDESCRIPTION: This SQL query identifies users who complete at least 3 exams per month and then analyzes their preferred exam categories. It joins exam records with exam information and aggregates results by tag.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT tag,\n       count(start_time) AS tag_cnt\nFROM exam_record record\nINNER JOIN examination_info info ON record.exam_id = info.exam_id\nWHERE UID IN\n    (SELECT UID\n     FROM exam_record record\n     GROUP BY UID,\n              MONTH (start_time)\n     HAVING count(submit_time) >= 3)\nGROUP BY tag\nORDER BY tag_cnt DESC\n```\n\n----------------------------------------\n\nTITLE: String Templates Examples in Different Languages\nDESCRIPTION: Examples showing string template syntax across different programming languages including Angular, TypeScript, Visual Basic, and Python.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java21.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"Greetings {{ name }}!\"  //Angular\n`Greetings ${ name }!`;    //Typescript\n$\"Greetings { name }!\"    //Visual basic\nf\"Greetings { name }!\"    //Python\n```\n\n----------------------------------------\n\nTITLE: Redis DB Structure Definition with Expiry Dictionary\nDESCRIPTION: This code shows the structure of Redis database (redisDb) containing the main dictionary for data and the expires dictionary for tracking key expiration times, illustrating how Redis manages key lifetimes.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_7\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct redisDb {\n    ...\n\n    dict *dict;     //数据库键空间,保存着数据库中所有键值对\n    dict *expires   // 过期字典,保存着键的过期时间\n    ...\n} redisDb;\n```\n\n----------------------------------------\n\nTITLE: MongoDB Covered Query Example\nDESCRIPTION: Example of a covered query that can be satisfied entirely using an index without examining the actual documents.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mongodb/mongodb-questions-02.md#2025-04-20_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\ndb.users.find({gender:\"M\"},{user_name:1,_id:0})\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Maintenance Operations\nDESCRIPTION: Instructions for table maintenance tasks including analyzing key distribution, checking table errors and optimizing data file fragmentation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/a-thousand-lines-of-mysql-study-notes.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n/* 表维护 */\n-- 分析和存储表的关键字分布\nANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...\n[...truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Method Types in Java - With Return No Parameters\nDESCRIPTION: Example of a method that returns a value but takes no parameters.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic int f3() {\n    //......\n    return x;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone-based Load Balancing in Spring Cloud\nDESCRIPTION: Example of configuring zone-based load balancing using ZonePreferenceServiceInstanceListSupplier in Spring Cloud Load Balancer.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/load-balancing.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomLoadBalancerConfiguration {\n    // 使用基于区域的负载平衡方法\n    @Bean\n    public ServiceInstanceListSupplier discoveryClientServiceInstanceListSupplier(\n            ConfigurableApplicationContext context) {\n        return ServiceInstanceListSupplier.builder()\n                    .withDiscoveryClient()\n                    .withZonePreference()\n                    .withCaching()\n                    .build(context);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Java数值字面量 (Java)\nDESCRIPTION: 展示了Java 7引入的数值字面量语法,允许在数字间插入下划线以提高可读性。编译器会在编译阶段移除这些下划线。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic class Test {\n    public static void main(String... args) {\n        int i = 10_000;\n        System.out.println(i);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 获取ZooKeeper节点数据和状态\nDESCRIPTION: 使用get命令获取节点node1的数据内容和状态信息，包括版本、时间等元数据。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n[zk: zookeeper(CONNECTED) 12] get -s /node1\nset node1\ncZxid = 0x47\nctime = Sun Jan 20 10:22:59 CST 2019\nmZxid = 0x4b\nmtime = Sun Jan 20 10:41:10 CST 2019\npZxid = 0x4a\ncversion = 1\ndataVersion = 1\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 9\nnumChildren = 1\n```\n\n----------------------------------------\n\nTITLE: Modifying Table Structure in SQL\nDESCRIPTION: Alters user_info table by adding a new school column, renaming job column to profession, and modifying the achievement column's default value.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_9\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE user_info\n    ADD school VARCHAR(15) AFTER level,\n    CHANGE job profession VARCHAR(10),\n    MODIFY achievement INT(11) DEFAULT 0;\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing a Generic Interface in Java\nDESCRIPTION: This code snippet demonstrates how to define a generic interface and implement it in Java, both with and without specifying the type parameter.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-03.md#2025-04-20_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\npublic interface Generator<T> {\n    public T method();\n}\n\nclass GeneratorImpl<T> implements Generator<T>{\n    @Override\n    public T method() {\n        return null;\n    }\n}\n\nclass GeneratorImpl implements Generator<String> {\n    @Override\n    public String method() {\n        return \"hello\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delayed Interface for DelayQueue\nDESCRIPTION: The Delayed interface requires implementing getDelay() and compareTo() methods to enable elements to be stored in DelayQueue. This interface defines the remaining delay time of elements and comparison rules between elements by extending the Comparable interface.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/delayqueue-source-code.md#2025-04-20_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ninterface Delayed extends Comparable<Delayed> {\n    long getDelay(TimeUnit unit);\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking MySQL Permissions Syntax\nDESCRIPTION: Shows the REVOKE command syntax for removing permissions from MySQL users, including privilege types and levels.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nREVOKE   privilege_type [(column_list)]\n        [, priv_type [(column_list)]]...\nON [object_type] privilege_level\nFROM user [, user]...\n```\n\n----------------------------------------\n\nTITLE: Enabling MySQL Query Cache via SQL Commands\nDESCRIPTION: SQL commands to dynamically enable and configure the query cache in MySQL without restarting the server. These global settings activate the cache and allocate memory for it.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-query-cache.md#2025-04-20_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nset global  query_cache_type=1;\nset global  query_cache_size=600000;\n```\n\n----------------------------------------\n\nTITLE: Data Manipulation in SQL\nDESCRIPTION: Covers SQL commands for data manipulation including inserting, querying, updating, and deleting data from tables.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/a-thousand-lines-of-mysql-study-notes.md#2025-04-20_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\n/* 数据操作 */ ------------------\n-- 增\n    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]\n        -- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。\n        -- 可同时插入多条数据记录！\n        REPLACE与INSERT类似，唯一的区别是对于匹配的行，现有行（与主键/唯一键比较）的数据会被替换，如果没有现有行，则插入新行。\n    INSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]\n-- 查\n    SELECT 字段列表 FROM 表名[ 其他子句]\n        -- 可来自多个表的多个字段\n        -- 其他子句可以不使用\n        -- 字段列表可以用*代替，表示所有字段\n-- 删\n    DELETE FROM 表名[ 删除条件子句]\n        没有条件子句，则会删除全部\n-- 改\n    UPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]\n```\n\n----------------------------------------\n\nTITLE: Generational ZGC Configuration\nDESCRIPTION: Command to enable Generational ZGC in Java 21.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java21.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n// 启用分代ZGC\njava -XX:+UseZGC -XX:+ZGenerational ...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Happens-Before Relationship in Java\nDESCRIPTION: This code snippet demonstrates the happens-before relationship between operations in Java. It shows that while operations 1 and 2 can be reordered, they must both happen before operation 3.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/jmm.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nint userNum = getUserNum();   // 1\nint teacherNum = getTeacherNum();   // 2\nint totalNum = userNum + teacherNum;  // 3\n```\n\n----------------------------------------\n\nTITLE: Manual GC Testing\nDESCRIPTION: Code demonstrating the effect of manual garbage collection on memory statistics.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-intro.md#2025-04-20_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nSystem.gc();\nSystem.out.println(\"Xmx=\" + Runtime.getRuntime().maxMemory() / 1024.0 / 1024 + \"M\");\nSystem.out.println(\"free mem=\" + Runtime.getRuntime().freeMemory() / 1024.0 / 1024 + \"M\");\nSystem.out.println(\"total mem=\" + Runtime.getRuntime().totalMemory() / 1024.0 / 1024 + \"M\");\n```\n\n----------------------------------------\n\nTITLE: Internal Lock Implementation in Curator\nDESCRIPTION: Implementation of the internal locking mechanism that handles lock reentrance by tracking thread-specific lock data and incrementing lock count for reentrant acquisitions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-lock-implementations.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprivate boolean internalLock(long time, TimeUnit unit) throws Exception {\n  Thread currentThread = Thread.currentThread();\n  LockData lockData = threadData.get(currentThread);\n  if (lockData != null) {\n    lockData.lockCount.incrementAndGet();\n    return true;\n  }\n  String lockPath = internals.attemptLock(time, unit, getLockNodeBytes());\n  if (lockPath != null) {\n    LockData newLockData = new LockData(currentThread, lockPath);\n    threadData.put(currentThread, newLockData);\n    return true;\n  }\n\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: String Object Creation with Pre-existing Constant Pool Entry\nDESCRIPTION: This code demonstrates string object creation when the string literal already exists in the constant pool. The first line places \"abc\" in the constant pool, and the second creates a new string object in the heap but reuses the constant pool entry.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n// 字符串常量池中已存在字符串对象\"abc\"\nString s1 = \"abc\";\n// 下面这段代码只会在堆中创建 1 个字符串对象\"abc\"\nString s2 = new String(\"abc\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ConcurrentModificationException in Enhanced For Loop in Java\nDESCRIPTION: Shows how modifying a collection while iterating over it using an enhanced for loop can lead to a ConcurrentModificationException. This is due to the underlying use of an Iterator that maintains its own view of the collection.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/syntactic-sugar.md#2025-04-20_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nfor (Student stu : students) {\n    if (stu.getId() == 2)\n        students.remove(stu);\n}\n```\n\n----------------------------------------\n\nTITLE: Database Operations in SQL\nDESCRIPTION: Covers SQL commands for database operations including creating, viewing, modifying, and deleting databases.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/a-thousand-lines-of-mysql-study-notes.md#2025-04-20_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n/* 数据库操作 */\n-- 查看当前数据库\n    SELECT DATABASE();\n-- 显示当前时间、用户名、数据库版本\n    SELECT now(), user(), version();\n-- 创建库\n    CREATE DATABASE[ IF NOT EXISTS] 数据库名 数据库选项\n    数据库选项：\n        CHARACTER SET charset_name\n        COLLATE collation_name\n-- 查看已有库\n    SHOW DATABASES[ LIKE 'PATTERN']\n-- 查看当前库信息\n    SHOW CREATE DATABASE 数据库名\n-- 修改库的选项信息\n    ALTER DATABASE 库名 选项信息\n-- 删除库\n    DROP DATABASE[ IF EXISTS] 数据库名\n        同时删除该数据库相关的目录及其目录内容\n```\n\n----------------------------------------\n\nTITLE: Dropping Multiple Tables in SQL\nDESCRIPTION: Demonstrates how to drop multiple exam record backup tables from years 2011-2014 if they exist.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_10\n\nLANGUAGE: SQL\nCODE:\n```\nDROP TABLE IF EXISTS exam_record_2011;\nDROP TABLE IF EXISTS exam_record_2012;\nDROP TABLE IF EXISTS exam_record_2013;\nDROP TABLE IF EXISTS exam_record_2014;\n```\n\n----------------------------------------\n\nTITLE: Java 9 Module System Example\nDESCRIPTION: Demonstrates how to use exports keyword in module-info.java to control package access.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java9.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nmodule my.module {\n    //exports 公开指定包的所有公共成员\n    exports com.my.package.name;\n}\n\nmodule my.module {\n     //exports…to 限制访问的成员范围\n    export com.my.package.name to com.specific.package;\n}\n```\n\n----------------------------------------\n\nTITLE: Using ROW_NUMBER() Window Function in MySQL\nDESCRIPTION: Demonstrates how to use the ROW_NUMBER() function to assign unique integer values to each row in a result set, ordered by a specified column.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT col1, col2, ROW_NUMBER() OVER (ORDER BY col1) AS row_num\nFROM table;\n```\n\n----------------------------------------\n\nTITLE: Configuring RDB Persistence Settings in Redis\nDESCRIPTION: Default RDB persistence configuration in redis.conf showing automatic snapshot trigger conditions based on number of key changes and time intervals.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-persistence.md#2025-04-20_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\nsave 900 1           #在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发bgsave命令创建快照。\n\nsave 300 10          #在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发bgsave命令创建快照。\n\nsave 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发bgsave命令创建快照。\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Order Table with Basic Indexes\nDESCRIPTION: Creates a table named cus_order with id, score and name fields, using InnoDB engine and utf8mb4 charset.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-index.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `cus_order` (\n  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `score` int(11) NOT NULL,\n  `name` varchar(11) NOT NULL DEFAULT '',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=100000 DEFAULT CHARSET=utf8mb4;\n```\n\n----------------------------------------\n\nTITLE: Using MySQL Stored Procedure\nDESCRIPTION: Demonstrates how to call a stored procedure and retrieve its output.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nset @b=5;\ncall proc_adder(2,@b,@s);\nselect @s as sum;\n```\n\n----------------------------------------\n\nTITLE: BlockingQueue Interface Definition in Java\nDESCRIPTION: Defines the methods of the BlockingQueue interface, including blocking and non-blocking operations for adding and removing elements.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\npublic interface BlockingQueue<E> extends Queue<E> {\n\n     //元素入队成功返回true，反之则会抛出异常IllegalStateException\n    boolean add(E e);\n\n     //元素入队成功返回true，反之返回false\n    boolean offer(E e);\n\n     //元素入队成功则直接返回，如果队列已满元素不可入队则将线程阻塞，因为阻塞期间可能会被打断，所以这里方法签名抛出了InterruptedException\n    void put(E e) throws InterruptedException;\n\n   //和上一个方法一样,只不过队列满时只会阻塞单位为unit，时间为timeout的时长，如果在等待时长内没有入队成功则直接返回false。\n    boolean offer(E e, long timeout, TimeUnit unit)\n        throws InterruptedException;\n\n    //从队头取出一个元素，如果队列为空则阻塞等待，因为会阻塞线程的缘故，所以该方法可能会被打断，所以签名定义了InterruptedException\n    E take() throws InterruptedException;\n\n      //取出队头的元素并返回，如果当前队列为空则阻塞等待timeout且单位为unit的时长，如果这个时间段没有元素则直接返回null。\n    E poll(long timeout, TimeUnit unit)\n        throws InterruptedException;\n\n      //获取队列剩余元素个数\n    int remainingCapacity();\n\n     //删除我们指定的对象，如果成功返回true，反之返回false。\n    boolean remove(Object o);\n\n    //判断队列中是否包含指定元素\n    public boolean contains(Object o);\n\n     //将队列中的元素全部存到指定的集合中\n    int drainTo(Collection<? super E> c);\n\n    //转移maxElements个元素到集合中\n    int drainTo(Collection<? super E> c, int maxElements);\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Type Conversion Example\nDESCRIPTION: Example showing how implicit type conversion can cause index invalidation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-high-performance-optimization-specification-recommendations.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect name,phone from customer where id = '111';\n```\n\n----------------------------------------\n\nTITLE: Redis Memory Policy Enum Definition\nDESCRIPTION: C code defining the enumeration of available memory eviction policies in Redis's config.c file. Shows all supported eviction strategies including LRU, LFU, random, and TTL-based policies.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nconfigEnum maxmemory_policy_enum[] = {\n    {\"volatile-lru\", MAXMEMORY_VOLATILE_LRU},\n    {\"volatile-lfu\", MAXMEMORY_VOLATILE_LFU},\n    {\"volatile-random\",MAXMEMORY_VOLATILE_RANDOM},\n    {\"volatile-ttl\",MAXMEMORY_VOLATILE_TTL},\n    {\"allkeys-lru\",MAXMEMORY_ALLKEYS_LRU},\n    {\"allkeys-lfu\",MAXMEMORY_ALLKEYS_LFU},\n    {\"allkeys-random\",MAXMEMORY_ALLKEYS_RANDOM},\n    {\"noeviction\",MAXMEMORY_NO_EVICTION},\n    {NULL, 0}\n};\n```\n\n----------------------------------------\n\nTITLE: Redis Bio Thread Operation Definitions\nDESCRIPTION: This code from Redis's bio.h header file defines background thread operations in Redis, including file closing, AOF fsync, and lazy freeing operations, showing Redis's internal background job handling mechanism.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n#ifndef __BIO_H\n#define __BIO_H\n\n/* Exported API */\nvoid bioInit(void);\nvoid bioCreateBackgroundJob(int type, void *arg1, void *arg2, void *arg3);\nunsigned long long bioPendingJobsOfType(int type);\nunsigned long long bioWaitStepOfType(int type);\ntime_t bioOlderJobOfType(int type);\nvoid bioKillThreads(void);\n\n/* Background job opcodes */\n#define BIO_CLOSE_FILE    0 /* Deferred close(2) syscall. */\n#define BIO_AOF_FSYNC     1 /* Deferred AOF fsync. */\n#define BIO_LAZY_FREE     2 /* Deferred objects freeing. */\n#define BIO_NUM_OPS       3\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Creating Student Table with Composite Index\nDESCRIPTION: Creates a table named student with composite index on name and class fields.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-index.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `student` (\n  `id` int NOT NULL,\n  `name` varchar(100) DEFAULT NULL,\n  `class` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `name_class_idx` (`name`,`class`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n----------------------------------------\n\nTITLE: Changing MySQL User Password\nDESCRIPTION: Shows how to set a new password for a MySQL user.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSET PASSWORD FOR myuser = 'mypass';\n```\n\n----------------------------------------\n\nTITLE: Container Lifecycle Management\nDESCRIPTION: Commands for starting, stopping, restarting and removing Docker containers.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker start c2f5d78c5d1a\ndocker restart c2f5d78c5d1a\ndocker stop c2f5d78c5d1a\ndocker kill c2f5d78c5d1a\ndocker rm d5b6c177c151\ndocker rm -f d5b6c177c151\ndocker rm -f $(docker ps -qa)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Indexes in SQL\nDESCRIPTION: Creates multiple types of indexes on examination_info table including regular, unique, and fulltext indexes.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_11\n\nLANGUAGE: SQL\nCODE:\n```\nALTER TABLE examination_info\n    ADD INDEX idx_duration(duration),\n    ADD UNIQUE INDEX uniq_idx_exam_id(exam_id),\n    ADD FULLTEXT INDEX full_idx_tag(tag);\n```\n\n----------------------------------------\n\nTITLE: LockData Class Definition in Curator\nDESCRIPTION: Static inner class that stores lock metadata including owning thread, lock path and lock count for implementing reentrant locks.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-lock-implementations.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprivate final ConcurrentMap<Thread, LockData> threadData = Maps.newConcurrentMap();\n\nprivate static class LockData\n{\n    final Thread owningThread;\n    final String lockPath;\n    final AtomicInteger lockCount = new AtomicInteger(1);\n\n    private LockData(Thread owningThread, String lockPath)\n    {\n      this.owningThread = owningThread;\n      this.lockPath = lockPath;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Long Sum Calculation Using Wrapper Class\nDESCRIPTION: This code demonstrates an inefficient way to calculate a sum using Long wrapper class, which should be avoided due to unnecessary boxing and unboxing operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nprivate static long sum() {\n    // 应该使用 long 而不是 Long\n    Long sum = 0L;\n    for (long i = 0; i <= Integer.MAX_VALUE; i++)\n        sum += i;\n    return sum;\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Data Insertion Stored Procedure\nDESCRIPTION: Defines a stored procedure to insert test data into cus_order table with randomized scores and sequential names.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-index.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER ;;\nCREATE DEFINER=`root`@`%` PROCEDURE `BatchinsertDataToCusOder`(IN start_num INT,IN max_num INT)\nBEGIN\n      DECLARE i INT default start_num;\n      WHILE i < max_num DO\n          insert into `cus_order`(`id`, `score`, `name`)\n          values (i,RAND() * 1000000,CONCAT('user', i));\n          SET i = i + 1;\n      END WHILE;\n  END;;\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Row After Batch Insert in MySQL\nDESCRIPTION: Inserting a single row to show how the auto-increment value has been affected by the previous batch insert operation.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-auto-increment-primary-key-continuous.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ninsert into test_pk2 values(null,6,6)\n```\n\n----------------------------------------\n\nTITLE: Deleting MySQL User Account\nDESCRIPTION: Demonstrates how to remove a MySQL user account.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nDROP USER myuser;\n```\n\n----------------------------------------\n\nTITLE: Filtering Level 0 Users with Incomplete Exams - Initial Query\nDESCRIPTION: SQL query to identify level 0 users who have more than 2 incomplete exams. This is the first step in determining which condition applies for the final solution.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-05.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT ui.uid UID\nFROM user_info ui\nLEFT JOIN exam_record er ON ui.uid = er.uid\nWHERE ui.uid IN\n    (SELECT ui.uid\n     FROM user_info ui\n     LEFT JOIN exam_record er ON ui.uid = er.uid\n     WHERE er.submit_time IS NULL\n       AND ui.LEVEL = 0 )\nGROUP BY ui.uid\nHAVING sum(IF(er.submit_time IS NULL, 1, 0)) > 2\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Transaction Rollback with Auto-Increment Values in MySQL\nDESCRIPTION: SQL transaction example showing how auto-increment values are not rolled back even when the transaction is aborted.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-auto-increment-primary-key-continuous.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nbegin;\ninsert into test_pk values(null, 3, 3);\nrollback;\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration for HZ and Dynamic HZ Settings\nDESCRIPTION: This code shows the Redis configuration properties for hz (frequency of background tasks) and dynamic-hz (allows Redis to adjust hz value automatically), which control how often Redis performs background tasks like expiring keys.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_10\n\nLANGUAGE: properties\nCODE:\n```\n# 默认为 10\nhz 10\n# 默认开启\ndynamic-hz yes\n```\n\n----------------------------------------\n\nTITLE: Counting Total Online Users Using Redis Bitmap OR Operation\nDESCRIPTION: This code demonstrates using BITOP with OR operation to combine user activity data from multiple days, and then using BITCOUNT to get the total count of unique active users during that period.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> BITOP or desk2 20210308 20210309\n(integer) 1\n> BITCOUNT desk2\n(integer) 2\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Images\nDESCRIPTION: Commands to search for and pull Docker images from Docker Hub, using MySQL as an example.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-intro.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker search mysql # 查看mysql相关镜像\ndocker pull mysql:5.7 # 拉取mysql镜像\ndocker image ls # 查看所有已下载镜像\n```\n\n----------------------------------------\n\nTITLE: 使用AtomicMarkableReference进行带标记的引用类型原子操作\nDESCRIPTION: 展示了如何使用AtomicMarkableReference类对带有布尔标记的引用类型进行原子操作。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/atomic-classes.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nAtomicMarkableReference<String> amr = new AtomicMarkableReference<>(\"SnailClimb\", false);\n\nboolean[] initialMark = new boolean[1];\nString initialRef = amr.get(initialMark);\nSystem.out.println(\"Initial Reference: \" + initialRef + \", Initial Mark: \" + initialMark[0]);\n\nString oldRef = initialRef;\nString newRef = \"Daisy\";\nboolean oldMark = initialMark[0];\nboolean newMark = true;\n\nboolean isUpdated = amr.compareAndSet(oldRef, newRef, oldMark, newMark);\nSystem.out.println(\"Update Success: \" + isUpdated);\n\nboolean[] updatedMark = new boolean[1];\nString updatedRef = amr.get(updatedMark);\nSystem.out.println(\"Updated Reference: \" + updatedRef + \", Updated Mark: \" + updatedMark[0]);\n\nboolean isUpdatedWithWrongMark = amr.compareAndSet(newRef, \"John\", oldMark, !newMark);\nSystem.out.println(\"Update with Wrong Mark Success: \" + isUpdatedWithWrongMark);\n\nboolean[] finalMark = new boolean[1];\nString finalRef = amr.get(finalMark);\nSystem.out.println(\"Final Reference: \" + finalRef + \", Final Mark: \" + finalMark[0]);\n```\n\n----------------------------------------\n\nTITLE: Docker image listing commands\nDESCRIPTION: 用于列出Docker中当前所有镜像的命令，可以查看镜像的详细信息，包括名称、标签、ID、创建时间和大小。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker images\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker image MySQL\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker images -q\n```\n\n----------------------------------------\n\nTITLE: Creating BCrypt Password Encoder Bean in Spring Security\nDESCRIPTION: Implementation of a Bean that returns a BCryptPasswordEncoder for Spring Security. BCrypt is a password hashing function recommended for password storage due to its adaptive nature and built-in salt mechanism.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/security/encryption-algorithms.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Bean\npublic PasswordEncoder passwordEncoder(){\n    return new BCryptPasswordEncoder();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ReentrantLock Class Definition\nDESCRIPTION: Basic class definition showing ReentrantLock implementing Lock interface\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class ReentrantLock implements Lock, java.io.Serializable {}\n```\n\n----------------------------------------\n\nTITLE: Case-Sensitive Tag Filtering and Counting\nDESCRIPTION: Complex SQL query using CTE to filter and count examination tags while handling case sensitivity, joining the same table to compare uppercase conversions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-05.md#2025-04-20_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nWITH a AS\n  (SELECT tag,\n          COUNT(start_time) AS answer_cnt\n   FROM exam_record er\n   JOIN examination_info ei ON er.exam_id = ei.exam_id\n   GROUP BY tag)\nSELECT a.tag,\n       b.answer_cnt\nFROM a\nINNER JOIN a AS b ON UPPER(a.tag)= b.tag\nAND a.tag != b.tag\nWHERE a.answer_cnt < 3;\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images\nDESCRIPTION: Command to build a Docker image from a Dockerfile with a specified name and version tag.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-intro.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#\n# imageName 是镜像名称，1.0.0 是镜像的版本号或标签\ndocker build -t imageName:1.0.0 .\n```\n\n----------------------------------------\n\nTITLE: Non-Index Compatible MongoDB Sort Operations\nDESCRIPTION: Examples of MongoDB sort operations that cannot use a compound index because they don't match the index's sort direction or field order.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mongodb/mongodb-questions-02.md#2025-04-20_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\ndb.s2.find().sort({\"userid\": 1, \"score\": 1})\ndb.s2.find().sort({\"userid\": -1, \"score\": -1})\ndb.s2.find().sort({\"score\": 1, \"userid\": -1})\ndb.s2.find().sort({\"score\": 1, \"userid\": 1})\ndb.s2.find().sort({\"score\": -1, \"userid\": -1})\ndb.s2.find().sort({\"score\": -1, \"userid\": 1})\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL User Information\nDESCRIPTION: Shows how to view MySQL user accounts stored in the mysql database.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nUSE mysql;\nSELECT user FROM user;\n```\n\n----------------------------------------\n\nTITLE: Lambda Local Variable Syntax in Java 11\nDESCRIPTION: Shows how to use the var keyword in Lambda expression parameters, which was added as an enhancement to type inference capabilities.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java11.md#2025-04-20_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// 下面两者是等价的\nConsumer<String> consumer = (var i) -> System.out.println(i);\nConsumer<String> consumer = (String i) -> System.out.println(i);\n```\n\n----------------------------------------\n\nTITLE: Granting MySQL Permissions Syntax\nDESCRIPTION: Demonstrates the GRANT command syntax for assigning permissions to MySQL users. Includes options for privilege levels, SSL requirements, and resource limitations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nGRANT privilege,[privilege],.. ON privilege_level\nTO user [IDENTIFIED BY password]\n[REQUIRE tsl_option]\n[WITH [GRANT_OPTION | resource_option]];\n```\n\n----------------------------------------\n\nTITLE: 使用DISCARD取消Redis事务\nDESCRIPTION: 演示了如何使用DISCARD命令取消一个已经开始的事务，清空事务队列中的所有命令。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-02.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> MULTI\nOK\n> SET PROJECT \"JavaGuide\"\nQUEUED\n> GET PROJECT\nQUEUED\n> DISCARD\nOK\n```\n\n----------------------------------------\n\nTITLE: Collections Utility Class Search Operations\nDESCRIPTION: Search and replace operations provided by the Collections utility class\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nint binarySearch(List list, Object key)//对List进行二分查找，返回索引，注意List必须是有序的\nint max(Collection coll)//根据元素的自然顺序，返回最大的元素。 类比int min(Collection coll)\nint max(Collection coll, Comparator c)//根据定制排序，返回最大元素，排序规则由Comparatator类控制。类比int min(Collection coll, Comparator c)\nvoid fill(List list, Object obj)//用指定的元素代替指定list中的所有元素\nint frequency(Collection c, Object o)//统计元素出现次数\nint indexOfSubList(List list, List target)//统计target在list中第一次出现的索引，找不到则返回-1，类比int lastIndexOfSubList(List source, list target)\nboolean replaceAll(List list, Object oldVal, Object newVal)//用新元素替换旧元素\n```\n\n----------------------------------------\n\nTITLE: 使用Curator自动创建所需的父节点\nDESCRIPTION: 使用creatingParentsIfNeeded()方法在创建节点时自动创建所需的父节点，更加简便。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nzkClient.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(\"/node1/00001\");\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Images\nDESCRIPTION: Process for removing Docker images, including checking for container references, stopping containers, and then removing the image.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-intro.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n➜  ~ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES\nc4cd691d9f80        mysql:5.7           \"docker-entrypoint.s…\"   7 weeks ago         Up 12 days          0.0.0.0:3306->3306/tcp, 33060/tcp   mysql\n```\n\nLANGUAGE: bash\nCODE:\n```\n➜  ~ docker images\nREPOSITORY              TAG                 IMAGE ID            CREATED             SIZE\nmysql                   5.7                 f6509bac4980        3 months ago        373MB\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker rmi f6509bac4980 #  或者 docker rmi mysql\n```\n\n----------------------------------------\n\nTITLE: Viewing MySQL Triggers\nDESCRIPTION: SQL command to display all triggers in the current database.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSHOW TRIGGERS;\n```\n\n----------------------------------------\n\nTITLE: Get Operation in Java 8 ConcurrentHashMap\nDESCRIPTION: This method retrieves a value from the Java 8 ConcurrentHashMap based on the provided key. It handles different node types including regular nodes, trees, and forwarding nodes during table expansion.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/concurrent-hash-map-source-code.md#2025-04-20_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic V get(Object key) {\n    Node<K,V>[] tab; Node<K,V> e, p; int n, eh; K ek;\n    int h = spread(key.hashCode());\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (e = tabAt(tab, (n - 1) & h)) != null) {\n        if ((eh = e.hash) == h) {\n            if ((ek = e.key) == key || (ek != null && key.equals(ek)))\n                return e.val;\n        }\n        else if (eh < 0)\n            return (p = e.find(h, key)) != null ? p.val : null;\n        while ((e = e.next) != null) {\n            if (e.hash == h &&\n                ((ek = e.key) == key || (ek != null && key.equals(ek))))\n                return e.val;\n        }\n    }\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Static Variable Declaration in Java\nDESCRIPTION: This code snippet shows how to declare a static variable in Java, which is shared among all instances of a class.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\npublic class StaticVariableExample {\n    // 静态变量\n    public static int staticVar = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Exam Activity Data Extraction\nDESCRIPTION: A SQL query that extracts and formats exam activity data, creating date-based fields for month and day analysis, and adding a 'exam' tag to identify the activity type.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t\tuid,\n\t\texam_id AS ans_id,\n\t\tstart_time AS act_time,\n\t\tdate_format( start_time, '%Y%m' ) AS act_month,\n\t\tdate_format( start_time, '%Y%m%d' ) AS act_day,\n\t\t'exam' AS tag\n\tFROM\n\t\texam_record\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Trigger Syntax\nDESCRIPTION: Basic syntax for creating a trigger in MySQL. Shows the structure including trigger name, timing, event, target table and trigger statements.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TRIGGER trigger_name\ntrigger_time\ntrigger_event\nON table_name\nFOR EACH ROW\nBEGIN\n  trigger_statements\nEND;\n```\n\n----------------------------------------\n\nTITLE: SQL INSERT语句示例\nDESCRIPTION: 展示了插入完整行和部分列数据的不同写法\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n# 插入一行\nINSERT INTO user\nVALUES (10, 'root', 'root', 'xxxx@163.com');\n# 插入多行\nINSERT INTO user\nVALUES (10, 'root', 'root', 'xxxx@163.com'), (12, 'user1', 'user1', 'xxxx@163.com'), (18, 'user2', 'user2', 'xxxx@163.com');\n\nINSERT INTO user(username, password, email)\nVALUES ('admin', 'admin', 'xxxx@163.com');\n```\n\n----------------------------------------\n\nTITLE: Collectors toUnmodifiable Methods in Java 10\nDESCRIPTION: Demonstrates the usage of new Collectors methods for creating unmodifiable collections from streams.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java10.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nvar list = new ArrayList<>();\nlist.stream().collect(Collectors.toUnmodifiableList());\nlist.stream().collect(Collectors.toUnmodifiableSet());\n```\n\n----------------------------------------\n\nTITLE: String Object Creation and Constant Pool in Java\nDESCRIPTION: This example demonstrates how string literals are stored in the string constant pool. Two variables referencing the same string literal point to the same object in memory.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n// 在字符串常量池中创建字符串对象 \"ab\"\n// 将字符串对象 \"ab\" 的引用赋值给 aa\nString aa = \"ab\";\n// 直接返回字符串常量池中字符串对象 \"ab\"，赋值给引用 bb\nString bb = \"ab\";\nSystem.out.println(aa==bb); // true\n```\n\n----------------------------------------\n\nTITLE: SQL JOIN连接查询\nDESCRIPTION: 展示了基本的表连接查询语法\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect c.cust_name, o.order_num\nfrom Customers c\ninner join Orders o\non c.cust_id = o.cust_id\norder by c.cust_name;\n```\n\n----------------------------------------\n\nTITLE: Java Employee Class Example\nDESCRIPTION: Simple example of a Java class definition used to demonstrate class file analysis.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/class-file-structure.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage top.snailclimb.bean;\npublic class Employee {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Table with Index Condition Pushdown Example\nDESCRIPTION: Creates a user table to demonstrate index condition pushdown functionality with composite index on zipcode and birthdate.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-index.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `user` (\n  `id` int NOT NULL AUTO_INCREMENT,\n  `username` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,\n  `zipcode` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,\n  `birthdate` date NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_username_birthdate` (`zipcode`,`birthdate`) ) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8mb4;\n```\n\n----------------------------------------\n\nTITLE: Maven Lifecycle Command Example\nDESCRIPTION: Command format for executing Maven lifecycle phases.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/maven/maven-core-concepts.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmvn 阶段 [阶段2] ...[阶段n]\n```\n\n----------------------------------------\n\nTITLE: Complete NIO Selector Server Implementation\nDESCRIPTION: A complete example showing how to implement a server using NIO Selector to handle multiple client connections, including connection acceptance, reading, and writing operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/nio-basis.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NioSelectorExample {\n\n  public static void main(String[] args) {\n    try {\n      ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n      serverSocketChannel.configureBlocking(false);\n      serverSocketChannel.socket().bind(new InetSocketAddress(8080));\n\n      Selector selector = Selector.open();\n      // 将 ServerSocketChannel 注册到 Selector 并监听 OP_ACCEPT 事件\n      serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n      while (true) {\n        int readyChannels = selector.select();\n\n        if (readyChannels == 0) {\n          continue;\n        }\n\n        Set<SelectionKey> selectedKeys = selector.selectedKeys();\n        Iterator<SelectionKey> keyIterator = selectedKeys.iterator();\n\n        while (keyIterator.hasNext()) {\n          SelectionKey key = keyIterator.next();\n\n          if (key.isAcceptable()) {\n            // 处理连接事件\n            ServerSocketChannel server = (ServerSocketChannel) key.channel();\n            SocketChannel client = server.accept();\n            client.configureBlocking(false);\n\n            // 将客户端通道注册到 Selector 并监听 OP_READ 事件\n            client.register(selector, SelectionKey.OP_READ);\n          } else if (key.isReadable()) {\n            // 处理读事件\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer buffer = ByteBuffer.allocate(1024);\n            int bytesRead = client.read(buffer);\n\n            if (bytesRead > 0) {\n              buffer.flip();\n              System.out.println(\"收到数据：\" +new String(buffer.array(), 0, bytesRead));\n              // 将客户端通道注册到 Selector 并监听 OP_WRITE 事件\n              client.register(selector, SelectionKey.OP_WRITE);\n            } else if (bytesRead < 0) {\n              // 客户端断开连接\n              client.close();\n            }\n          } else if (key.isWritable()) {\n            // 处理写事件\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer buffer = ByteBuffer.wrap(\"Hello, Client!\".getBytes());\n            client.write(buffer);\n\n            // 将客户端通道注册到 Selector 并监听 OP_READ 事件\n            client.register(selector, SelectionKey.OP_READ);\n          }\n\n          keyIterator.remove();\n        }\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping MySQL Trigger\nDESCRIPTION: SQL command to safely remove a trigger if it exists.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nDROP TRIGGER IF EXISTS trigger_insert_user;\n```\n\n----------------------------------------\n\nTITLE: 操作Redis String类型的基本命令\nDESCRIPTION: 展示了Redis String类型的基本操作命令,包括SET、GET、EXISTS、STRLEN、DEL等。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-data-structures-01.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> SET key value\nOK\n> GET key\n\"value\"\n> EXISTS key\n(integer) 1\n> STRLEN key\n(integer) 5\n> DEL key\n(integer) 1\n> GET key\n(nil)\n```\n\n----------------------------------------\n\nTITLE: 使用Curator创建持久化节点\nDESCRIPTION: 展示了使用Curator创建持久化节点的几种方式，包括创建单个节点和自动创建父节点的方法。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n//注意:下面的代码会报错，下文说了具体原因\nzkClient.create().forPath(\"/node1/00001\");\nzkClient.create().withMode(CreateMode.PERSISTENT).forPath(\"/node1/00002\");\n```\n\n----------------------------------------\n\nTITLE: SQL 注释语法\nDESCRIPTION: 展示了SQL支持的三种注释方式\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n## 注释1\n-- 注释2\n/* 注释3 */\n```\n\n----------------------------------------\n\nTITLE: TCP sniffing with Scapy\nDESCRIPTION: Code snippet showing the core part of a Python script that uses Scapy to sniff TCP packets on the localhost interface, focusing specifically on the TCP connection between local endpoints on port 8000.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/network/network-attack-means.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# This is a partial code snippet showing the key part of the TCP sniffing functionality\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Long Integer Overflow in Java\nDESCRIPTION: This code shows how long integers can overflow when they exceed their maximum value, resulting in unexpected behavior.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-01.md#2025-04-20_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nlong l = Long.MAX_VALUE;\nSystem.out.println(l + 1); // -9223372036854775808\nSystem.out.println(l + 1 == Long.MIN_VALUE); // true\n```\n\n----------------------------------------\n\nTITLE: Comparing String Objects in Java\nDESCRIPTION: This code snippet demonstrates the comparison of String objects using == and equals() methods, showing the difference between reference comparison and value comparison.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-basic-questions-02.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nString a = new String(\"ab\"); // a 为一个引用\nString b = new String(\"ab\"); // b为另一个引用,对象的内容一样\nString aa = \"ab\"; // 放在常量池中\nString bb = \"ab\"; // 从常量池中查找\nSystem.out.println(aa == bb);// true\nSystem.out.println(a == b);// false\nSystem.out.println(a.equals(b));// true\nSystem.out.println(42 == 42.0);// true\n```\n\n----------------------------------------\n\nTITLE: Modifying MySQL Username\nDESCRIPTION: Shows how to change an existing MySQL username and refresh privileges.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE user SET user='newuser' WHERE user='myuser';\nFLUSH PRIVILEGES;\n```\n\n----------------------------------------\n\nTITLE: Docker image download command\nDESCRIPTION: 从Docker Hub下载指定镜像的命令，可以指定具体的版本标签。如果不指定版本，默认会下载最新版本的镜像。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull MySQL:5.7\n```\n\n----------------------------------------\n\nTITLE: Configuring Load Balancing in Spring Cloud Gateway\nDESCRIPTION: This YAML snippet demonstrates how to configure load balancing in Spring Cloud Gateway using the 'lb' keyword in the URI. It also includes predicates and filters for the route.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/spring-cloud-gateway-questions.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: route_member # 第三方微服务路由规则\n          uri: lb://passjava-member # 负载均衡，将请求转发到注册中心注册的 passjava-member 服务\n          predicates: # 断言\n            - Path=/api/member/** # 如果前端请求路径包含 api/member，则应用这条路由规则\n          filters: #过滤器\n            - RewritePath=/api/(?<segment>.*),/$\\{segment} # 将跳转路径中包含的api替换成空\n```\n\n----------------------------------------\n\nTITLE: Dropping Multiple Indexes in SQL\nDESCRIPTION: Removes unique and fulltext indexes from the examination_info table.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_12\n\nLANGUAGE: SQL\nCODE:\n```\nDROP INDEX uniq_idx_exam_id ON examination_info;\nDROP INDEX full_idx_tag ON examination_info;\n```\n\n----------------------------------------\n\nTITLE: Creating User Insert History Trigger Example\nDESCRIPTION: Example of creating an AFTER INSERT trigger that logs user additions to a history table. Uses DELIMITER to handle multiple statements.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_23\n\nLANGUAGE: sql\nCODE:\n```\nDELIMITER $\nCREATE TRIGGER `trigger_insert_user`\nAFTER INSERT ON `user`\nFOR EACH ROW\nBEGIN\n    INSERT INTO `user_history`(user_id, operate_type, operate_time)\n    VALUES (NEW.id, 'add a user',  now());\nEND $\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Mac using Homebrew\nDESCRIPTION: 简单的Homebrew命令用于在Mac系统上安装Docker。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install --cask docker\n```\n\n----------------------------------------\n\nTITLE: 使用Curator创建节点并指定数据内容\nDESCRIPTION: 创建节点时同时设置节点的数据内容，并展示如何获取节点内容。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nzkClient.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(\"/node1/00001\",\"java\".getBytes());\nzkClient.getData().forPath(\"/node1/00001\");//获取节点的数据内容，获取到的是 byte数组\n```\n\n----------------------------------------\n\nTITLE: 使用Curator检测节点是否存在\nDESCRIPTION: 检查节点是否存在，返回非null表示节点已创建成功。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nzkClient.checkExists().forPath(\"/node1/00001\");//不为null的话，说明节点创建成功\n```\n\n----------------------------------------\n\nTITLE: Comparing SQL and NoSQL Databases in Markdown Table\nDESCRIPTION: 这个Markdown表格比较了SQL和NoSQL数据库在各个方面的区别,包括数据存储模型、发展历程、例子、ACID属性、性能、扩展、用途和查询语法。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/nosql.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|              | SQL 数据库                                                                 | NoSQL 数据库                                                                                                                            |\n| :----------- | -------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------- |\n| 数据存储模型 | 结构化存储，具有固定行和列的表格                                           | 非结构化存储。文档：JSON 文档，键值：键值对，宽列：包含行和动态列的表，图：节点和边                                                     |\n| 发展历程     | 开发于 1970 年代，重点是减少数据重复                                       | 开发于 2000 年代后期，重点是提升可扩展性，减少大规模数据的存储成本                                                                      |\n| 例子         | Oracle、MySQL、Microsoft SQL Server、PostgreSQL                            | 文档：MongoDB、CouchDB，键值：Redis、DynamoDB，宽列：Cassandra、 HBase，图表：Neo4j、 Amazon Neptune、Giraph                            |\n| ACID 属性    | 提供原子性、一致性、隔离性和持久性 (ACID) 属性                             | 通常不支持 ACID 事务，为了可扩展、高性能进行了权衡，少部分支持比如 MongoDB 。不过，MongoDB 对 ACID 事务 的支持和 MySQL 还是有所区别的。 |\n| 性能         | 性能通常取决于磁盘子系统。要获得最佳性能，通常需要优化查询、索引和表结构。 | 性能通常由底层硬件集群大小、网络延迟以及调用应用程序来决定。                                                                            |\n| 扩展         | 垂直（使用性能更强大的服务器进行扩展）、读写分离、分库分表                 | 横向（增加服务器的方式横向扩展，通常是基于分片机制）                                                                                    |\n| 用途         | 普通企业级的项目的数据存储                                                 | 用途广泛比如图数据库支持分析和遍历连接数据之间的关系、键值数据库可以处理大量数据扩展和极高的状态变化                                    |\n| 查询语法     | 结构化查询语言 (SQL)                                                       | 数据访问语法可能因数据库而异                                                                                                            |\n```\n\n----------------------------------------\n\nTITLE: Network Command Example - PING\nDESCRIPTION: Example of using the PING command showing its basic syntax\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/network/other-network-questions.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nping baidu.com\n```\n\n----------------------------------------\n\nTITLE: Java Class Declaration with Helper Class\nDESCRIPTION: Example of a Java file containing two class declarations in a single file - a main class with entry point and a helper class with a utility method.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java22-23.md#2025-04-20_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nclass Prog {\n    public static void main(String[] args) { Helper.run(); }\n}\n\nclass Helper {\n    static void run() { System.out.println(\"Hello!\"); }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring InnoDB Log File Group in MySQL\nDESCRIPTION: Example configuration for setting InnoDB log file group parameters in MySQL. Note that these parameters are deprecated in MySQL 8.0.30 and later versions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-logs.md#2025-04-20_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n[mysqld]\ninnodb_log_file_size = 10485760\ninnodb_log_files_in_group = 64\n```\n\n----------------------------------------\n\nTITLE: Viewing MySQL User Permissions\nDESCRIPTION: Shows how to check permissions granted to a specific MySQL user.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSHOW GRANTS FOR myuser;\n```\n\n----------------------------------------\n\nTITLE: Processing Long Nicknames\nDESCRIPTION: SQL query to handle long nicknames by truncating those over 13 characters and appending '...' while preserving shorter ones.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-05.md#2025-04-20_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n\tuid,\nCASE\n\t\tWHEN CHAR_LENGTH( nick_name ) > 13 THEN\n\t\tCONCAT( SUBSTR( nick_name, 1, 10 ), '...' ) ELSE nick_name\n\tEND AS nick_name\nFROM\n\tuser_info\nWHERE\n\tCHAR_LENGTH( nick_name ) > 10\nGROUP BY\n\tuid;\n```\n\n----------------------------------------\n\nTITLE: 使用Curator递归删除节点及其子节点\nDESCRIPTION: 删除指定节点及其所有子节点，适用于清理整个节点树的情况。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nzkClient.delete().deletingChildrenIfNeeded().forPath(\"/node1\");\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Linux using convenience script\nDESCRIPTION: 在Linux系统上使用Docker官方提供的便捷安装脚本安装Docker，这里指定使用阿里云镜像加速安装过程。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL get.docker.com -o get-docker.sh\n```\n\nLANGUAGE: shell\nCODE:\n```\nsh get-docker.sh --mirror Aliyun\n```\n\n----------------------------------------\n\nTITLE: Docker image removal commands\nDESCRIPTION: 删除Docker镜像的各种命令，包括通过名称、版本标签或ID删除，以及强制删除和批量删除的方法。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker image rm MySQL:5.5\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker image rm bf756fb1ae65\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker image rm -f bf756fb1ae65\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker rmi -f $(docker images MySQL -q)\n```\n\n----------------------------------------\n\nTITLE: Pushing Docker Images\nDESCRIPTION: Command to push a Docker image to a private registry, with Harbor used as an example registry.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-intro.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# 将镜像推送到私有镜像仓库 Harbor\n# harbor.example.com是私有镜像仓库的地址，ubuntu是镜像的名称，18.04是镜像的版本标签\ndocker push harbor.example.com/ubuntu:18.04\n```\n\n----------------------------------------\n\nTITLE: 配置AOF持久化的fsync策略\nDESCRIPTION: 展示了Redis配置文件中三种不同的AOF持久化方式(fsync策略)，分别是always(每次写入)、everysec(每秒同步)和no(由操作系统决定)。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-02.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nappendfsync always    #每次有数据修改发生时，都会调用fsync函数同步AOF文件，fsync完成后线程返回，这样会严重降低Redis的速度\nappendfsync everysec  #每秒钟调用fsync函数同步一次AOF文件\nappendfsync no        #让操作系统决定何时进行同步，一般为30秒一次\n```\n\n----------------------------------------\n\nTITLE: MySQL 8.0 Query Cache Variables Output\nDESCRIPTION: Shows the output of checking query cache variables in MySQL 8.0 or later, where query cache functionality has been removed. Only the have_query_cache variable remains, set to NO.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-query-cache.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql> show variables like '%query_cache%';\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| have_query_cache | NO    |\n+------------------+-------+\n1 row in set (0.01 sec)\n```\n\n----------------------------------------\n\nTITLE: Kong Zipkin Plugin Configuration\nDESCRIPTION: cURL command to enable and configure the Zipkin plugin for a Kong service\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/api-gateway.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -X POST http://kong:8001/services/{service}/plugins \\\n    --data \"name=zipkin\"  \\\n    --data \"config.http_endpoint=http://your.zipkin.collector:9411/api/v2/spans\" \\\n    --data \"config.sample_ratio=0.001\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Spaces in a String Using Regular Expressions in Java\nDESCRIPTION: This one-line solution uses Java's replaceAll method with a regular expression to replace all spaces with \"%20\". It's more concise but might be less efficient for very large strings due to the internal string processing overhead.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/the-sword-refers-to-offer.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic String replaceSpace(StringBuffer str) {\n    //return str.toString().replaceAll(\" \", \"%20\");\n    //public String replaceAll(String regex,String replacement)\n    //用给定的替换替换与给定的regular expression匹配的此字符串的每个子字符串。\n    //\\ 转义字符. 如果你要使用 \"\\\" 本身, 则应该使用 \"\\\\\". String类型中的空格用\"\\s\"表示，所以我这里猜测\"\\\\s\"就是代表空格的意思\n    return str.toString().replaceAll(\"\\\\s\", \"%20\");\n}\n```\n\n----------------------------------------\n\nTITLE: 查看ZooKeeper根目录下的子节点\nDESCRIPTION: 使用ls命令查看ZooKeeper根目录下的所有子节点。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n[zk: 127.0.0.1:2181(CONNECTED) 37] ls /\n[dubbo, ZooKeeper, node1]\n```\n\n----------------------------------------\n\nTITLE: SQL条件查询示例\nDESCRIPTION: 展示了WHERE、IN、BETWEEN等条件查询的用法\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM products\nWHERE vend_id IN ('DLL01', 'BRS01');\n\nSELECT *\nFROM products\nWHERE prod_price BETWEEN 3 AND 5;\n\nSELECT prod_id, prod_name, prod_price\nFROM products\nWHERE vend_id = 'DLL01' AND prod_price <= 4;\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Practice Question Activity Data Extraction\nDESCRIPTION: A SQL query that extracts and formats practice question activity data, similar to the exam query but for question practice records, adding a 'question' tag to differentiate the activity type.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-03.md#2025-04-20_snippet_13\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT\n\t\tuid,\n\t\tquestion_id AS ans_id,\n\t\tsubmit_time AS act_time,\n\t\tdate_format( submit_time, '%Y%m' ) AS act_month,\n\t\tdate_format( submit_time, '%Y%m%d' ) AS act_day,\n\t\t'question' AS tag\n\tFROM\n\t\tpractice_record\n```\n\n----------------------------------------\n\nTITLE: Docker Compose PS Command Options\nDESCRIPTION: Commands for viewing the status of containers started with Docker Compose, including options to display only service names or filter by specific service.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-intro.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# 查看所有容器的状态信息\ndocker-compose ps\n# 只显示服务名称\ndocker-compose ps --services\n# 查看指定服务的容器\ndocker-compose ps service_name\n```\n\n----------------------------------------\n\nTITLE: Static import demonstration in Java\nDESCRIPTION: This code snippet illustrates the usage of static import in Java. It shows how to import static members from a class and use them without class name qualification.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-keyword-summary.md#2025-04-20_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\n //将Math中的所有静态资源导入，这时候可以直接使用里面的静态方法，而不用通过类名进行调用\n //如果只想导入单一某个静态方法，只需要将*换成对应的方法名即可\nimport static java.lang.Math.*;//换成import static java.lang.Math.max;具有一样的效果\npublic class Demo {\n  public static void main(String[] args) {\n    int max = max(1,2);\n    System.out.println(max);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to TCP server using netcat\nDESCRIPTION: Command to connect to the previously created TCP server on localhost port 8000 using netcat. This establishes the TCP connection that will be targeted by the reset attack.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/network/network-attack-means.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnc 127.0.0.1 8000\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Up Command Options\nDESCRIPTION: Various options for the 'docker-compose up' command that allow starting containers with different configurations such as running in background, force recreation, rebuilding images, or specifying individual services.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-intro.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# 在当前目录下寻找 docker-compose.yml 文件，并根据其中定义的服务启动应用程序\ndocker-compose up\n# 后台启动\ndocker-compose up -d\n# 强制重新创建所有容器，即使它们已经存在\ndocker-compose up --force-recreate\n# 重新构建镜像\ndocker-compose up --build\n# 指定要启动的服务名称，而不是启动所有服务\n# 可以同时指定多个服务，用空格分隔。\ndocker-compose up service_name\n```\n\n----------------------------------------\n\nTITLE: Running MySQL 8.0.32 Docker Container with Custom Configuration\nDESCRIPTION: Docker command to run a MySQL 8.0.32 container with a custom configuration file mounted.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-logs.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 3312:3309 -e MYSQL_ROOT_PASSWORD=your-password -v /path/to/your/conf:/etc/mysql/conf.d --name\nMySQL830 mysql:8.0.32\n```\n\n----------------------------------------\n\nTITLE: HashMap Bin Treeification Logic (Java)\nDESCRIPTION: This method in HashMap determines whether to convert a bin to a red-black tree or resize the array based on the current array size.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-questions-02.md#2025-04-20_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nfinal void treeifyBin(Node<K,V>[] tab, int hash) {\n    int n, index; Node<K,V> e;\n    if (tab == null || (n = tab.length) < MIN_TREEIFY_CAPACITY)\n        resize();\n    else if ((e = tab[index = (n - 1) & hash]) != null) {\n        TreeNode<K,V> hd = null, tl = null;\n        do {\n            TreeNode<K,V> p = replacementTreeNode(e, null);\n            if (tl == null)\n                hd = p;\n            else {\n                p.prev = tl;\n                tl.next = p;\n            }\n            tl = p;\n        } while ((e = e.next) != null);\n        if ((tab[index] = hd) != null)\n            hd.treeify(tab);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 查看ZooKeeper节点子节点列表和状态\nDESCRIPTION: 使用ls2命令同时查看节点node1的子节点列表和状态信息。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n[zk: 127.0.0.1:2181(CONNECTED) 7] ls2 /node1\n[node1.1]\ncZxid = 0x47\nctime = Sun Jan 20 10:22:59 CST 2019\nmZxid = 0x47\nmtime = Sun Jan 20 10:22:59 CST 2019\npZxid = 0x4a\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 11\nnumChildren = 1\n```\n\n----------------------------------------\n\nTITLE: Setting up TCP server using netcat\nDESCRIPTION: Command to start a TCP server listening on port 8000 using netcat. This is used as part of the TCP reset attack demonstration.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/network/network-attack-means.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnc -nvl 8000\n```\n\n----------------------------------------\n\nTITLE: Defining ReadView Class Structure in InnoDB\nDESCRIPTION: The ReadView class structure from InnoDB's implementation. It contains critical fields used for transaction visibility determination, including transaction ID limits and active transaction lists that define which data versions should be visible to the current transaction.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/innodb-implementation-of-mvcc.md#2025-04-20_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nclass ReadView {\n  /* ... */\nprivate:\n  trx_id_t m_low_limit_id;      /* 大于等于这个 ID 的事务均不可见 */\n\n  trx_id_t m_up_limit_id;       /* 小于这个 ID 的事务均可见 */\n\n  trx_id_t m_creator_trx_id;    /* 创建该 Read View 的事务ID */\n\n  trx_id_t m_low_limit_no;      /* 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge */\n\n  ids_t m_ids;                  /* 创建 Read View 时的活跃事务列表 */\n\n  m_closed;                     /* 标记 Read View 是否 close */\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ZooKeeper Node Data and Metadata (Shell)\nDESCRIPTION: Demonstrates how to use the ZooKeeper shell to retrieve data and metadata for a ZooKeeper node. This example shows the output of the 'get' command for the '/dubbo' node, including its data (null in this case) and various metadata fields.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[zk: 127.0.0.1:2181(CONNECTED) 6] get /dubbo\n# 该数据节点关联的数据内容为空\nnull\n# 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出\ncZxid = 0x2\nctime = Tue Nov 27 11:05:34 CST 2018\nmZxid = 0x2\nmtime = Tue Nov 27 11:05:34 CST 2018\npZxid = 0x3\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 0\nnumChildren = 1\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Version\nDESCRIPTION: Shows how to query the version of MySQL using SQL.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-questions-01.md#2025-04-20_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT VERSION();\n```\n\n----------------------------------------\n\nTITLE: Query High Incompletion Rate Users Monthly Stats\nDESCRIPTION: Complex SQL query to analyze exam statistics for users with high incompletion rates (top 50%) who are level 6 or 7, showing their total and completed exam counts for the last three months of activity.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-04.md#2025-04-20_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nSELECT t1.uid,\n       t1.month_d,\n       count(*) AS total_cnt,\n       count(t1.submit_time) AS complete_cnt\nFROM\n  (SELECT UID,\n          count(submit_time IS NULL OR NULL)/ count(start_time) AS num,\n          PERCENT_RANK() OVER (\n                               ORDER BY count(submit_time IS NULL OR NULL)/ count(start_time)) AS ranking\n   FROM exam_record\n   LEFT JOIN examination_info USING (exam_id)\n   WHERE tag = 'SQL'\n   GROUP BY UID) t\nINNER JOIN\n  (SELECT UID,\n        date_format(start_time, '%Y%m') AS month_d,\n        submit_time,\n        exam_id,\n        dense_rank() OVER (PARTITION BY UID\n                           ORDER BY date_format(start_time, '%Y%m') DESC) AS ranking\n   FROM exam_record\n   LEFT JOIN user_info USING (UID)\n   WHERE LEVEL IN (6,7) ) t1 USING (UID)\nWHERE t1.ranking <= 3 AND t.ranking >= 0.5\nGROUP BY t1.uid,\n         t1.month_d\nORDER BY t1.uid,\n         t1.month_d\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata in Markdown Frontmatter\nDESCRIPTION: This snippet defines the page title, category, and meta tags for keywords and description using YAML frontmatter in a Markdown file. It sets up SEO-relevant information for the page about SQL optimization techniques.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/sql-optimization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 常见SQL优化手段总结（付费）\ncategory: 高性能\nhead:\n  - - meta\n    - name: keywords\n      content: 分页优化,索引,Show Profile,慢 SQL\n  - - meta\n    - name: description\n      content: SQL 优化是一个大家都比较关注的热门话题，无论你在面试，还是工作中，都很有可能会遇到。如果某天你负责的某个线上接口，出现了性能问题，需要做优化。那么你首先想到的很有可能是优化 SQL 优化，因为它的改造成本相对于代码来说也要小得多。\n---\n```\n\n----------------------------------------\n\nTITLE: Redis设置key过期时间\nDESCRIPTION: 展示了如何使用EXPIRE和SETEX命令为key设置过期时间。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-data-structures-01.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n> EXPIRE key 60\n(integer) 1\n> SETEX key 60 value # 设置值并设置过期时间\nOK\n> TTL key\n(integer) 56\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Controller Type Checking Without Adapter Pattern in Spring MVC\nDESCRIPTION: This snippet shows the problematic approach of handling different Controller types without using the adapter pattern. It uses multiple if-else conditions to check the instance type, which violates the open-closed principle and makes the code difficult to maintain.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/spring-design-patterns-summary.md#2025-04-20_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nif(mappedHandler.getHandler() instanceof MultiActionController){\n   ((MultiActionController)mappedHandler.getHandler()).xxx\n}else if(mappedHandler.getHandler() instanceof XXX){\n    ...\n}else if(...){\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: 使用Curator获取节点的所有子节点路径\nDESCRIPTION: 获取指定节点下的所有子节点路径列表，方便遍历或操作子节点。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nList<String> childrenPaths = zkClient.getChildren().forPath(\"/node1\");\n```\n\n----------------------------------------\n\nTITLE: Incorrect Table Insert Example\nDESCRIPTION: Shows the non-recommended way of inserting data without specifying column names.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-high-performance-optimization-specification-recommendations.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert into t values ('a','b','c');\n```\n\n----------------------------------------\n\nTITLE: Java API Documentation Code Snippet Examples\nDESCRIPTION: Shows the old and new ways of including code snippets in Javadoc documentation, comparing pre-Java 18 approach with the new @snippet tag.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/new-features/java18.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/**\n * The following code shows how to use {@code Optional.isPresent}:\n * {@snippet :\n * if (v.isPresent()) {\n *     System.out.println(\"v: \" + v.get());\n * }\n * }\n */\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration File Policy Setting\nDESCRIPTION: Example of how to set the memory eviction policy in the redis.conf configuration file.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_14\n\nLANGUAGE: properties\nCODE:\n```\nmaxmemory-policy noeviction\n```\n\n----------------------------------------\n\nTITLE: Github Profile Customization Markdown\nDESCRIPTION: Example markdown showing how to customize Github profile page with statistics and dynamic content\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/git/github-tips.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![个性化首页展示效果](https://oss.javaguide.cn/java-guide-blog/image-20210616221212259.png)\n![通过github-readme-stats动态生成GitHub统计信息](https://oss.javaguide.cn/java-guide-blog/image-20210616221312426.png)\n```\n\n----------------------------------------\n\nTITLE: ConcurrentHashMap Default Constructor Implementation\nDESCRIPTION: Default constructor for ConcurrentHashMap that initializes with default capacity (16), load factor (0.75) and concurrency level (16).\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/concurrent-hash-map-source-code.md#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic ConcurrentHashMap() {\n    this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL);\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying ZooKeeper Data Model Structure\nDESCRIPTION: Illustrates the tree-like hierarchical data model structure used by ZooKeeper, showing znodes organized in a file system-like layout.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![zk数据模型](https://oss.javaguide.cn/p3-juejin/663240470d524dd4ac6e68bde0b666eb~tplv-k3u1fbpfcp-zoom-1.jpeg)\n```\n\n----------------------------------------\n\nTITLE: 在ZooKeeper创建子节点\nDESCRIPTION: 使用create命令在node1节点下创建子节点node1.1，并设置其值为123。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n[zk: 127.0.0.1:2181(CONNECTED) 1] create /node1/node1.1 123\nCreated /node1/node1.1\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Query Cache in my.cnf\nDESCRIPTION: Configuration settings to enable and configure the query cache in MySQL versions prior to 8.0. These settings define the cache type and allocated memory size.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-query-cache.md#2025-04-20_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nquery_cache_type=1\nquery_cache_size=600000\n```\n\n----------------------------------------\n\nTITLE: 删除ZooKeeper节点\nDESCRIPTION: 使用delete命令删除指定的节点，需要注意的是被删除节点不能有子节点。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n[zk: 127.0.0.1:2181(CONNECTED) 3] delete /node1/node1.1\n```\n\n----------------------------------------\n\nTITLE: Illustrating ZooKeeper Watcher Mechanism\nDESCRIPTION: Diagram showing how the Watcher mechanism works in ZooKeeper, with clients registering watchers and servers sending notifications on events.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![watcher机制](https://oss.javaguide.cn/p3-juejin/ac87b7cff7b44c63997ff0f6a7b6d2eb~tplv-k3u1fbpfcp-zoom-1.jpeg)\n```\n\n----------------------------------------\n\nTITLE: 使用Curator删除子节点\nDESCRIPTION: 删除指定的子节点，不会影响其他节点。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nzkClient.delete().forPath(\"/node1/00001\");\n```\n\n----------------------------------------\n\nTITLE: 使用Curator创建父节点\nDESCRIPTION: 先创建父节点，然后再创建子节点，避免因为父节点不存在而导致的异常。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nzkClient.create().forPath(\"/node1\");\n```\n\n----------------------------------------\n\nTITLE: Viewing Table Structure with AUTO_INCREMENT Information in MySQL\nDESCRIPTION: Command to view the table structure including the AUTO_INCREMENT value after inserting data.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-auto-increment-primary-key-continuous.md#2025-04-20_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nshow create table\n```\n\n----------------------------------------\n\nTITLE: Granting Specific MySQL Permissions\nDESCRIPTION: Example of granting SELECT and INSERT permissions to a MySQL user.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nGRANT SELECT, INSERT ON *.* TO myuser;\n```\n\n----------------------------------------\n\nTITLE: Creating Project Badge URLs in Markdown\nDESCRIPTION: Example of using shields.io to generate project status badges in markdown format\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/git/github-tips.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![项目徽章](https://oss.javaguide.cn/2020-11/image-20201107143136559.png)\n![自定义项目徽章](https://oss.javaguide.cn/2020-11/image-20201107143502356.png)\n![描述项目状态的徽章](https://oss.javaguide.cn/2020-11/image-20201107143752642.png)\n```\n\n----------------------------------------\n\nTITLE: Initializing ThreadPoolExecutor with ArrayBlockingQueue in Java\nDESCRIPTION: Example of creating a ThreadPoolExecutor with an ArrayBlockingQueue as the work queue. Shows the constructor signature including the BlockingQueue parameter.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/arrayblockingqueue-source-code.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic ThreadPoolExecutor(int corePoolSize,\n                            int maximumPoolSize,\n                            long keepAliveTime,\n                            TimeUnit unit,\n                            BlockingQueue<Runnable> workQueue,\n                            ThreadFactory threadFactory,\n                            RejectedExecutionHandler handler) {// ...}\n```\n\n----------------------------------------\n\nTITLE: Querying Date and Time Data from MySQL Table\nDESCRIPTION: SQL query to select and display the values from DATETIME and TIMESTAMP columns of the 'time_zone_test' table.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/some-thoughts-on-database-storage-time.md#2025-04-20_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT date_time, time_stamp FROM time_zone_test;\n```\n\n----------------------------------------\n\nTITLE: AOP Log Annotation Definition\nDESCRIPTION: Custom annotation definition for logging aspect implementation in Spring AOP\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/framework/spring/ioc-and-aop.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Target({ElementType.PARAMETER,ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Log {\n    String description() default \"\";\n    MethodType methodType() default MethodType.OTHER;\n}\n```\n\n----------------------------------------\n\nTITLE: 在ZooKeeper根目录创建节点\nDESCRIPTION: 使用create命令在ZooKeeper根目录创建节点node1，并设置其值为\"node1\"。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n[zk: 127.0.0.1:2181(CONNECTED) 34] create /node1 \"node1\"\n```\n\n----------------------------------------\n\nTITLE: Byte Size Conversion Table\nDESCRIPTION: A simple conversion table showing the relationships between different byte-based units of digital information.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-logs.md#2025-04-20_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n1 Byte = 8bit\n1 KB = 1024 Byte\n1 MB = 1024 KB\n1 GB = 1024 MB\n1 TB = 1024 GB\n```\n\n----------------------------------------\n\nTITLE: 使用Redis-CLI的--bigkeys参数查找大键\nDESCRIPTION: 使用Redis自带的命令行工具通过--bigkeys参数扫描整个键空间，查找最大的键及每种键类型的平均大小。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-02.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# redis-cli -p 6379 --bigkeys\n\n# Scanning the entire keyspace to find biggest keys as well as\n# average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec\n```\n\n----------------------------------------\n\nTITLE: Setting MySQL Session Time Zone\nDESCRIPTION: SQL command to change the time zone of the current MySQL session to UTC+8.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/some-thoughts-on-database-storage-time.md#2025-04-20_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSET time_zone = '+8:00';\n```\n\n----------------------------------------\n\nTITLE: Hello World Servlet Implementation\nDESCRIPTION: Sample Java servlet code demonstrating a basic web application that can be deployed to a Docker container.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class HelloServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        resp.getWriter().println(\"Hello World!\");\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doGet(req,resp);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Stored Procedure\nDESCRIPTION: Example of creating a stored procedure that adds two numbers with input and output parameters.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-syntax-summary.md#2025-04-20_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nDROP PROCEDURE IF EXISTS `proc_adder`;\nDELIMITER ;;\nCREATE DEFINER=`root`@`localhost` PROCEDURE `proc_adder`(IN a int, IN b int, OUT sum int)\nBEGIN\n    DECLARE c int;\n    if a is null then set a = 0;\n    end if;\n\n    if b is null then set b = 0;\n    end if;\n\n    set sum  = a + b;\nEND\n;;\nDELIMITER ;\n```\n\n----------------------------------------\n\nTITLE: StampedLock Class Declaration\nDESCRIPTION: Basic class declaration of StampedLock showing it implements Serializable interface.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-concurrent-questions-02.md#2025-04-20_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npublic class StampedLock implements java.io.Serializable {\n}\n```\n\n----------------------------------------\n\nTITLE: Date Comparison Non-Recommended Example\nDESCRIPTION: Shows the inefficient way of comparing dates using functions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/mysql/mysql-high-performance-optimization-specification-recommendations.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nwhere date(create_time)='20190101'\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Student Class in Java\nDESCRIPTION: A basic Java class definition for a Student object with a name property and a method to print the name.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-intro.md#2025-04-20_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npublic class Student {\n    private String name;\n    \n    public Student(String name) {\n        this.name = name;\n    }\n    \n    public void sayName() {\n        System.out.println(name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding WeChat QR Code Image in Markdown\nDESCRIPTION: Markdown image syntax used to display the JavaGuide official WeChat public account QR code from a remote image URL.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/snippets/article-footer.snippet.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![JavaGuide 官方公众号](https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png)\n```\n\n----------------------------------------\n\nTITLE: Multiple Row Insertion in SQL with Specified Fields\nDESCRIPTION: Demonstrates how to insert multiple exam records with specified fields into an exam_record table. The example shows proper datetime handling and NULL value usage.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nINSERT INTO exam_record (uid, exam_id, start_time, submit_time, score) VALUES\n(1001, 9001, '2021-09-01 22:11:12', '2021-09-01 23:01:12', 90),\n(1002, 9002, '2021-09-04 07:01:02', NULL, NULL);\n```\n\n----------------------------------------\n\nTITLE: Example CDN Timestamp Anti-theft URL Format\nDESCRIPTION: Demonstrates the structure of a CDN URL with timestamp-based anti-theft protection, including the secret signature and expiration time parameters.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-performance/cdn.md#2025-04-20_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nhttp://cdn.wangsu.com/4/123.mp3? wsSecret=79aead3bd7b5db4adeffb93a010298b5&wsTime=1601026312\n```\n\n----------------------------------------\n\nTITLE: Redis Expiration Keys Per Loop Constant\nDESCRIPTION: This code defines the constant that specifies how many keys Redis checks for expiration in each iteration during the active expiry cycle, set to 20 in Redis 7.2 version.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/redis/redis-questions-01.md#2025-04-20_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n#define ACTIVE_EXPIRE_CYCLE_KEYS_PER_LOOP 20 /* Keys for each DB loop. */\n```\n\n----------------------------------------\n\nTITLE: 进入ZooKeeper容器的bin目录\nDESCRIPTION: 进入ZooKeeper容器内的bin目录，准备连接ZooKeeper服务。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nroot@eaf70fc620cb:/apache-zookeeper-3.5.8-bin# cd bin\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter configuration for the FAQ page defining title, category and icon.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/javaguide/faq.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 常见问题\ncategory: 走近项目\nicon: help\n---\n```\n\n----------------------------------------\n\nTITLE: Auto Refresh Header Setting in Servlet\nDESCRIPTION: Shows how to set an auto-refresh header in HttpServletResponse to redirect to a different page after 5 seconds.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/system-design/J2EE基础知识.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nResponse.setHeader(\"Refresh\",\"5;URL=http://localhost:8080/servlet/example.htm\");\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Docker Compose File for Down Command\nDESCRIPTION: Command demonstrating how to use a custom Docker Compose file name when stopping and removing containers with the down command.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-intro.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose.prod.yml down\n```\n\n----------------------------------------\n\nTITLE: Starting Docker service on Linux\nDESCRIPTION: 在Linux系统上启动Docker服务并设置开机自启。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl start docker\n```\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl enable docker\n```\n\n----------------------------------------\n\nTITLE: Docker image search command\nDESCRIPTION: 用于在Docker Hub中搜索镜像的命令，可以搜索特定名称的镜像以及特定版本的镜像。\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/tools/docker/docker-in-action.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker search MySQL\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker search MySQL:5.5\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation of System Resilience Patterns\nDESCRIPTION: A detailed markdown document explaining timeout and retry mechanisms concepts, configuration recommendations, and implementation strategies for distributed systems and microservices.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/high-availability/timeout-and-retry.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 超时&重试详解\ncategory: 高可用\nicon: retry\n---\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Buffer Operations in Java NIO\nDESCRIPTION: A complete example showing the lifecycle of a CharBuffer, including creation, writing, flipping, reading, and clearing. It also includes a helper method to print the buffer's state.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/io/nio-basis.md#2025-04-20_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport java.nio.*;\n\npublic class CharBufferDemo {\n    public static void main(String[] args) {\n        // Allocate a CharBuffer with capacity 8\n        CharBuffer buffer = CharBuffer.allocate(8);\n        System.out.println(\"Initial state:\");\n        printState(buffer);\n\n        // Write 3 characters to the buffer\n        buffer.put('a').put('b').put('c');\n        System.out.println(\"State after writing 3 characters:\");\n        printState(buffer);\n\n        // Call flip() to prepare for reading\n        buffer.flip();\n        System.out.println(\"State after calling flip():\");\n        printState(buffer);\n\n        // Read characters\n        while (buffer.hasRemaining()) {\n            System.out.print(buffer.get());\n        }\n\n        // Call clear() to reset the buffer\n        buffer.clear();\n        System.out.println(\"\\nState after calling clear():\");\n        printState(buffer);\n    }\n\n    // Print buffer's capacity, limit, position, and mark\n    private static void printState(CharBuffer buffer) {\n        System.out.print(\"capacity: \" + buffer.capacity());\n        System.out.print(\", limit: \" + buffer.limit());\n        System.out.print(\", position: \" + buffer.position());\n        System.out.print(\", mark: \" + buffer.mark());\n        System.out.println(\"\\n\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Static and non-static method comparison in Java\nDESCRIPTION: This code snippet demonstrates the difference between static and non-static methods in Java. It shows how static methods can be called without creating an instance of the class.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/java-keyword-summary.md#2025-04-20_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nclass Foo {\n    int i;\n    public Foo(int i) {\n       this.i = i;\n    }\n    public static String method1() {\n       return \"An example string that doesn't depend on i (an instance variable)\";\n    }\n    public int method2() {\n       return this.i + 1;  //Depends on i\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Feign Request Interceptor for Propagating TraceId\nDESCRIPTION: Implementation of a Feign RequestInterceptor that adds the requestId from the current thread's MDC to outgoing HTTP requests, enabling traceId propagation in microservices architecture.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/threadlocal.md#2025-04-20_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n@Component\n@Slf4j\npublic class FeignInvokeInterceptor implements RequestInterceptor {\n\n    @Override\n    public void apply(RequestTemplate template) {\n        String requestId = MDC.get(\"requestId\");\n        if (StringUtils.isNotBlank(requestId)) {\n            template.header(\"requestId\", requestId);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filters in Spring Cloud Gateway\nDESCRIPTION: This YAML snippet shows how to configure filters in Spring Cloud Gateway. It includes a RewritePath filter to modify the request URL by removing the 'api' prefix.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/spring-cloud-gateway-questions.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfilters: #过滤器\n  - RewritePath=/api/(?<segment>.*),/$\\{segment} # 将跳转路径中包含的 \"api\" 替换成空\n```\n\n----------------------------------------\n\nTITLE: Defining a Protocol Buffer Message in Protobuf\nDESCRIPTION: A simple Protocol Buffer (protobuf) definition file example. It defines a 'Person' message with 'name' and 'age' fields, demonstrating the basic syntax of protobuf schema definition.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: Protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\nmessage Person {\n  string name = 1;\n  int32 age = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Reversing a Linked List in Java\nDESCRIPTION: Implementation for reversing a singly linked list. Uses three pointers to track previous, current and next nodes while iterating through the list to reverse the links.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/cs-basics/algorithms/linkedlist-algorithm-problems.md#2025-04-20_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ListNode {\n  int val;\n  ListNode next = null;\n\n  ListNode(int val) {\n    this.val = val;\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\npublic class Solution {\n\n  public ListNode ReverseList(ListNode head) {\n\n    ListNode next = null;\n    ListNode pre = null;\n\n    while (head != null) {\n      // 保存要反转到头的那个节点\n      next = head.next;\n      // 要反转的那个节点指向已经反转的上一个节点(备注:第一次反转的时候会指向null)\n      head.next = pre;\n      // 上一个已经反转到头部的节点\n      pre = head;\n      // 一直向链表尾走\n      head = next;\n    }\n    return pre;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tomcat Single Thread Mode\nDESCRIPTION: Property configuration to set Tomcat web server to single thread mode. This is generally not recommended for production use as it severely limits concurrent request handling capability.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/concurrent/java-thread-pool-best-practices.md#2025-04-20_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nserver.tomcat.max-threads=1\n```\n\n----------------------------------------\n\nTITLE: Creating a TCP Socket in C\nDESCRIPTION: This code snippet demonstrates how to create a TCP socket using the socket() function in C. It specifies the use of IPv4 (AF_INET) and TCP protocol (SOCK_STREAM).\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/distributed-system/rpc/http&rpc.md#2025-04-20_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nfd = socket(AF_INET,SOCK_STREAM,0);\n```\n\n----------------------------------------\n\nTITLE: Displaying Star History Graph for JavaGuide Repository in Markdown\nDESCRIPTION: This snippet displays a graph showing the star history of the JavaGuide repository using an external API. It includes the image description and the URL to generate the graph.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n![Stars](https://api.star-history.com/svg?repos=Snailclimb/JavaGuide&type=Date)\n```\n\n----------------------------------------\n\nTITLE: DELETE with Time Difference Calculation\nDESCRIPTION: Demonstrates two approaches to delete records based on time difference calculations using TIMEDIFF and TIMESTAMPDIFF functions.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/database/sql/sql-questions-02.md#2025-04-20_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM exam_record WHERE MINUTE (TIMEDIFF(submit_time , start_time)) < 5 AND score < 60\n```\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE FROM exam_record WHERE TIMESTAMPDIFF(MINUTE, start_time, submit_time) < 5 AND score < 60\n```\n\n----------------------------------------\n\nTITLE: Displaying JavaGuide Official WeChat Account Image in Markdown\nDESCRIPTION: This snippet displays an image of the JavaGuide official WeChat account using Markdown syntax. It includes the image description and the URL to the image file.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n![JavaGuide 官方公众号](https://oss.javaguide.cn/github/javaguide/gongzhonghaoxuanchuan.png)\n```\n\n----------------------------------------\n\nTITLE: Custom Array to ArrayList Conversion Utility\nDESCRIPTION: Shows a manual implementation of array to ArrayList conversion that supports modification operations.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/collection/java-collection-precautions-for-use.md#2025-04-20_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nstatic <T> List<T> arrayToList(final T[] array) {\n  final List<T> l = new ArrayList<T>(array.length);\n\n  for (final T s : array) {\n    l.add(s);\n  }\n  return l;\n}\n\nInteger [] myArray = { 1, 2, 3 };\nSystem.out.println(arrayToList(myArray).getClass());//class java.util.ArrayList\n```\n\n----------------------------------------\n\nTITLE: Reference Passing Example in C++\nDESCRIPTION: Illustrates true reference passing in C++ to contrast with Java's value passing mechanism.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/basis/why-there-only-value-passing-in-java.md#2025-04-20_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#include <iostream>\n\nvoid incr(int& num)\n{\n    std::cout << \"incr before: \" << num << \"\\n\";\n    num++;\n    std::cout << \"incr after: \" << num << \"\\n\";\n}\n\nint main()\n{\n    int age = 10;\n    std::cout << \"invoke before: \" << age << \"\\n\";\n    incr(age);\n    std::cout << \"invoke after: \" << age << \"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Garbage Collectors in Java\nDESCRIPTION: Specifies which garbage collector to use. Options include Serial, Parallel, CMS, and G1 collectors.\nSOURCE: https://github.com/snailclimb/javaguide/blob/main/docs/java/jvm/jvm-parameters-intro.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n-XX:+UseSerialGC\n-XX:+UseParallelGC\n-XX:+UseConcMarkSweepGC\n-XX:+UseG1GC\n```"
  }
]