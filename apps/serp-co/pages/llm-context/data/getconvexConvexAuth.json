[
  {
    "owner": "get-convex",
    "repo": "convex-auth",
    "content": "TITLE: Creating a New Convex Project with Auth\nDESCRIPTION: Command to create a new Convex project from scratch with built-in authentication support.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnpm create convex@latest\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Tables to Convex Schema\nDESCRIPTION: Code snippet showing how to import and include the required authentication tables in your Convex schema definition.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema } from \"convex/server\";\nimport { authTables } from \"@convex-dev/auth/server\";\n\nconst schema = defineSchema({\n  ...authTables,\n  // Your other tables...\n});\n\nexport default schema;\n```\n\n----------------------------------------\n\nTITLE: Setting Up ConvexAuthProvider in Next.js Pages Router\nDESCRIPTION: Integration of Convex Auth provider in a Next.js application using the Pages Router, replacing the standard ConvexProvider.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConvexAuthProvider } from \"@convex-dev/auth/react\";\nimport { ConvexReactClient } from \"convex/react\";\n\nconst convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL);\n\nexport default function App({ Component, pageProps }) {\n  return (\n    <ConvexAuthProvider client={convex}>\n      <Component {...pageProps} />\n    </ConvexAuthProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Sign-In in React Native\nDESCRIPTION: React Native component code for handling OAuth sign-in flow, including opening an in-app browser and processing the redirect.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthActions } from \"@convex-dev/auth/react\";\nimport { makeRedirectUri } from \"expo-auth-session\";\nimport { openAuthSessionAsync } from \"expo-web-browser\";\nimport { Button, Platform } from \"react-native\";\n\nconst redirectTo = makeRedirectUri();\n\nfunction SignIn() {\n  const { signIn } = useAuthActions();\n  const handleSignIn = async () => {\n    const { redirect } = await signIn(\"github\", { redirectTo });\n    if (Platform.OS === \"web\") {\n      return;\n    }\n    const result = await openAuthSessionAsync(redirect!.toString(), redirectTo);\n    if (result.type === \"success\") {\n      const { url } = result;\n      const code = new URL(url).searchParams.get(\"code\")!;\n      await signIn(\"github\", { code });\n    }\n  };\n  return <Button onPress={handleSignIn} title=\"Sign in with GitHub\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Auth Tables in Convex Schema\nDESCRIPTION: Example of integrating the required auth tables into a Convex schema definition. These tables provide the database structure needed for authentication features.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema } from \"convex/server\";\nimport { authTables } from \"@convex-dev/auth/server\";\n\nconst schema = defineSchema({\n  ...authTables,\n});\n\nexport default schema;\n```\n\n----------------------------------------\n\nTITLE: Calling Authenticated Mutations in Next.js Server Actions with Convex\nDESCRIPTION: This snippet illustrates how to call authenticated Convex mutations from Next.js Server Actions. It includes a form submission handler that creates a new task using an authenticated mutation call.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz/nextjs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convexAuthNextjsToken } from \"@convex-dev/auth/nextjs/server\";\nimport { api } from \"@/convex/_generated/api\";\nimport { fetchMutation, fetchQuery } from \"convex/nextjs\";\nimport { revalidatePath } from \"next/cache\";\n\nexport default async function PureServerPage() {\n  const tasks = await fetchQuery(api.tasks.list, { list: \"default\" });\n  async function createTask(formData: FormData) {\n    \"use server\";\n\n    await fetchMutation(\n      api.tasks.create,\n      {\n        text: formData.get(\"text\") as string,\n      },\n      { token: await convexAuthNextjsToken() },\n    );\n    revalidatePath(\"/example\");\n  }\n  // render tasks and task creation form\n  return <form action={createTask}>...</form>;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing auth.ts for Convex Auth\nDESCRIPTION: TypeScript file to initialize Convex Auth, exporting authentication-related functions and configurations.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing ConvexAuthProvider for Authentication\nDESCRIPTION: Example showing how to set up authentication by replacing ConvexProvider with ConvexAuthProvider in a React application.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/react.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConvexAuthProvider } from \"@convex-dev/auth/react\";\nimport { ConvexReactClient } from \"convex/react\";\nimport { ReactNode } from \"react\";\n\nconst convex = new ConvexReactClient(/* ... */);\n\nfunction RootComponent({ children }: { children: ReactNode }) {\n  return <ConvexAuthProvider client={convex}>{children}</ConvexAuthProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex Auth in a TypeScript File\nDESCRIPTION: Example of how to set up Convex Auth by exporting the necessary functions from convex/auth.ts using the convexAuth configuration function.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom User Creation and Account Linking in Convex Auth\nDESCRIPTION: This snippet shows how to override the default account linking behavior by implementing a custom 'createOrUpdateUser' callback. This allows for custom user creation logic and complete control over account linking across authentication providers.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/advanced.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport GitHub from \"@auth/core/providers/github\";\nimport Password from \"@convex-dev/auth/providers/Password\";\nimport { MutationCtx } from \"./_generated/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = {\n  providers: [GitHub, Password],\n  callbacks: {\n    // `args.type` is one of \"oauth\" | \"email\" | \"phone\" | \"credentials\" | \"verification\"\n    // `args.provider` is the currently used provider config\n    async createOrUpdateUser(ctx: MutationCtx, args) {\n      if (args.existingUserId) {\n        // Optionally merge updated fields into the existing user object here\n        return args.existingUserId;\n      }\n\n      // Implement your own account linking logic:\n      const existingUser = await findUserByEmail(ctx, args.profile.email);\n      if (existingUser) return existingUser._id;\n\n      // Implement your own user creation:\n      return ctx.db.insert(\"users\", {\n        /* ... */\n      });\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Combining Server and Client Providers in Next.js App Router\nDESCRIPTION: Example showing how to integrate both server and client Convex Auth providers in a Next.js application using the App Router.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConvexAuthNextjsServerProvider } from \"@convex-dev/auth/nextjs/server\";\nimport { ConvexClientProvider } from \"./ConvexClientProvider\";\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <ConvexAuthNextjsServerProvider>\n      <html lang=\"en\">\n        <body>\n          <ConvexClientProvider>{children}</ConvexClientProvider>\n        </body>\n      </html>\n    </ConvexAuthNextjsServerProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth Provider in Convex Auth\nDESCRIPTION: TypeScript code snippet for configuring the Google OAuth provider in the Convex auth.ts file. This setup uses the @auth/core/providers/google package and the convexAuth function to integrate Google authentication into the Convex application.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/google.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Google from \"@auth/core/providers/google\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [Google],\n});\n```\n\n----------------------------------------\n\nTITLE: Using useAuthToken Hook for Authentication in React\nDESCRIPTION: This snippet demonstrates how to use the useAuthToken hook from the Convex Auth library to obtain a JWT token and use it for authenticating HTTP requests to Convex endpoints. The token is added to the Authorization header of the fetch request.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/react.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthToken } from \"@convex-dev/auth/react\";\n\nfunction SomeComponent() {\n  const token = useAuthToken();\n  const onClick = async () => {\n    await fetch(`${CONVEX_SITE_URL}/someEndpoint`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  };\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Convex Auth Dependencies\nDESCRIPTION: Command to install the Convex Auth package and the Auth.js core library, which are required for setting up authentication in your Convex app.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @convex-dev/auth @auth/core@0.37.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Convex Auth with Password Provider and OTP Verification\nDESCRIPTION: This snippet shows how to set up Convex Auth with a Password provider that includes OTP verification using the custom ResendOTP provider.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Password } from \"@convex-dev/auth/providers/Password\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\nimport { ResendOTP } from \"./ResendOTP\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [Password({ verify: ResendOTP })],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring http.ts for Convex Auth\nDESCRIPTION: TypeScript file to set up HTTP routes for Convex Auth, integrating authentication routes into the HTTP router.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { httpRouter } from \"convex/server\";\nimport { auth } from \"./auth\";\n\nconst http = httpRouter();\n\nauth.addHttpRoutes(http);\n\nexport default http;\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Form with OTP Verification in React\nDESCRIPTION: This React component creates a sign-in form that handles both initial sign-in/sign-up and OTP verification steps. It uses the Convex Auth actions for authentication.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthActions } from \"@convex-dev/auth/react\";\nimport { useState } from \"react\";\n\nexport function SignIn() {\n  const { signIn } = useAuthActions();\n  const [step, setStep] = useState<\"signIn\" | \"signUp\" | { email: string }>(\n    \"signIn\"\n  );\n  return step === \"signIn\" || step === \"signUp\" ? (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        void signIn(\"password\", formData).then(() =>\n          setStep({ email: formData.get(\"email\") as string })\n        );\n      }}\n    >\n      <input name=\"email\" placeholder=\"Email\" type=\"text\" />\n      <input name=\"password\" placeholder=\"Password\" type=\"password\" />\n      <input name=\"flow\" value={step} type=\"hidden\" />\n      <button type=\"submit\">{step === \"signIn\" ? \"Sign in\" : \"Sign up\"}</button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setStep(step === \"signIn\" ? \"signUp\" : \"signIn\");\n        }}\n      >\n        {step === \"signIn\" ? \"Sign up instead\" : \"Sign in instead\"}\n      </button>\n    </form>\n  ) : (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        void signIn(\"password\", formData);\n      }}\n    >\n      <input name=\"code\" placeholder=\"Code\" type=\"text\" />\n      <input name=\"flow\" type=\"hidden\" value=\"email-verification\" />\n      <input name=\"email\" value={step.email} type=\"hidden\" />\n      <button type=\"submit\">Continue</button>\n      <button type=\"button\" onClick={() => setStep(\"signIn\")}>\n        Cancel\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConvexAuthNextjsProvider in Next.js\nDESCRIPTION: This code snippet demonstrates how to set up the ConvexAuthNextjsProvider in a Next.js application. It creates a client-side component that wraps children with the ConvexAuthNextjsProvider, enabling authentication features.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/nextjs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { ConvexAuthNextjsProvider } from \"@convex-dev/auth/nextjs\";\nimport { ConvexReactClient } from \"convex/react\";\nimport { ReactNode } from \"react\";\n\nconst convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);\n\nexport default function ConvexClientProvider({\n  children,\n}: {\n  children: ReactNode;\n}) {\n  return (\n    <ConvexAuthNextjsProvider client={convex}>\n      {children}\n    </ConvexAuthNextjsProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Next.js Middleware for Convex Auth\nDESCRIPTION: Middleware configuration required for Convex Auth to work with Next.js server-side authentication, which handles routing and authentication flow.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { convexAuthNextjsMiddleware } from \"@convex-dev/auth/nextjs/server\";\n\nexport default convexAuthNextjsMiddleware();\n\nexport const config = {\n  // The following matcher runs middleware on all routes\n  // except static assets.\n  matcher: [\"/((?!.*\\\\..*)|\\_next).*\", \"/\", \"/(api|trpc)(.*)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing OTP Sign-In Form with Email in React\nDESCRIPTION: React component that implements a two-step sign-in process using OTP. First, it collects the user's email to send the code, then it displays a form for entering the verification code.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/otps.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthActions } from \"@convex-dev/auth/react\";\nimport { useState } from \"react\";\n\nexport function SignIn() {\n  const { signIn } = useAuthActions();\n  const [step, setStep] = useState<\"signIn\" | { email: string }>(\"signIn\");\n  return step === \"signIn\" ? (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        void signIn(\"resend-otp\", formData).then(() =>\n          setStep({ email: formData.get(\"email\") as string })\n        );\n      }}\n    >\n      <input name=\"email\" placeholder=\"Email\" type=\"text\" />\n      <button type=\"submit\">Send code</button>\n    </form>\n  ) : (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        void signIn(\"resend-otp\", formData);\n      }}\n    >\n      <input name=\"code\" placeholder=\"Code\" type=\"text\" />\n      <input name=\"email\" value={step.email} type=\"hidden\" />\n      <button type=\"submit\">Continue</button>\n      <button type=\"button\" onClick={() => setStep(\"signIn\")}>\n        Cancel\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Middleware in Next.js with Convex\nDESCRIPTION: This code snippet demonstrates how to set up middleware in Next.js to handle authentication using Convex Auth. It includes route matching for protected routes and sign-in pages, with redirection logic based on authentication status.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz/nextjs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  convexAuthNextjsMiddleware,\n  createRouteMatcher,\n  nextjsMiddlewareRedirect,\n} from \"@convex-dev/auth/nextjs/server\";\n\nconst isSignInPage = createRouteMatcher([\"/signin\"]);\nconst isProtectedRoute = createRouteMatcher([\"/product(.*)\"]);\n\nexport default convexAuthNextjsMiddleware(async (request, { convexAuth }) => {\n  if (isSignInPage(request) && (await convexAuth.isAuthenticated())) {\n    return nextjsMiddlewareRedirect(request, \"/product\");\n  }\n  if (isProtectedRoute(request) && !(await convexAuth.isAuthenticated())) {\n    return nextjsMiddlewareRedirect(request, \"/signin\");\n  }\n});\n\nexport const config = {\n  // The following matcher runs middleware on all routes\n  // except static assets.\n  matcher: [\"/((?!.*\\..*|_next).*)\", \"/\", \"/(api|trpc)(.*)\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CAPTCHA Validation for Anonymous Auth\nDESCRIPTION: Example of implementing CAPTCHA validation using Cloudflare Turnstile to prevent abuse of anonymous authentication.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/anonymous.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Anonymous } from \"@convex-dev/auth/providers/Anonymous\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [\n    Anonymous({\n      profile({ token }) {\n        let formData = new FormData();\n        formData.append(\"secret\", process.env.CLOUDFLARE_TURNSTILE_SECRET);\n        formData.append(\"response\", token);\n        const url = \"https://challenges.cloudflare.com/turnstile/v0/siteverify\";\n        const response = await fetch(url, {\n          body: formData,\n          method: \"POST\",\n        });\n        const { success } = await response.json();\n        if (!success) {\n          throw new Error(\"Didn't pass CAPTCHA\");\n        }\n        return { isAnonymous: true };\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub OAuth Environment Variables in Convex\nDESCRIPTION: Shell commands to set the GitHub OAuth client ID and secret as environment variables in a Convex project.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex env set AUTH_GITHUB_ID yourgithubclientid\nnpx convex env set AUTH_GITHUB_SECRET yourgithubsecret\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User ID in Convex Backend Functions\nDESCRIPTION: A Convex query function that demonstrates how to get the currently authenticated user's ID using getAuthUserId. This function returns the user document if authenticated, or null if not authenticated.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { getAuthUserId } from \"@convex-dev/auth/server\";\nimport { query } from \"./_generated/server\";\n\nexport const currentUser = query({\n  args: {},\n  handler: async (ctx) => {\n    const userId = await getAuthUserId(ctx);\n    if (userId === null) {\n      return null;\n    }\n    return await ctx.db.get(userId);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Database Operations During Authentication in Convex Auth\nDESCRIPTION: This code demonstrates how to perform additional database operations during authentication by implementing the 'afterUserCreatedOrUpdated' callback, which runs after a user is created or updated and can be used to insert related data.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/advanced.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport GitHub from \"@auth/core/providers/github\";\nimport Password from \"@convex-dev/auth/providers/Password\";\nimport { MutationCtx } from \"./_generated/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [GitHub, Password],\n  callbacks: {\n    // `args` are the same the as for `createOrUpdateUser` but include `userId`\n    async afterUserCreatedOrUpdated(ctx: MutationCtx, { userId }) {\n      await ctx.db.insert(\"someTable\", { userId, data: \"some data\" });\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Authentication Provider in Convex\nDESCRIPTION: TypeScript implementation of the Apple authentication provider in the Convex auth.ts file. This code handles the authentication flow and user profile creation when users sign in with Apple.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/apple.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Apple from \"@auth/core/providers/apple\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [\n    Apple({\n      profile: (appleInfo) => {\n        const name = appleInfo.user\n          ? `${appleInfo.user.name.firstName} ${appleInfo.user.name.lastName}`\n          : undefined;\n        return {\n          id: appleInfo.sub,\n          name: name,\n          email: appleInfo.email,\n        };\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up ConvexAuthNextjsServerProvider in Next.js (App Router with SSA)\nDESCRIPTION: Code to implement the server provider component for Convex Auth in a Next.js application using the App Router with server-side authentication.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConvexAuthNextjsServerProvider } from \"@convex-dev/auth/nextjs/server\";\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <ConvexAuthNextjsServerProvider>\n      <html lang=\"en\">\n        <body>{children}</body>\n      </html>\n    </ConvexAuthNextjsServerProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ConvexCredentials Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up the ConvexCredentials provider with a custom authorization function. It shows the basic structure for configuring Convex Auth with this provider.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/providers/ConvexCredentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ConvexCredentials from \"@convex-dev/auth/providers/ConvexCredentials\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [\n    ConvexCredentials({\n      authorize: async (credentials, ctx) => {\n        // Your custom logic here...\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up ConvexAuthProvider in React (Vite)\nDESCRIPTION: Code to replace the standard ConvexProvider with ConvexAuthProvider in a React (Vite) application's entry point.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConvexAuthProvider } from \"@convex-dev/auth/react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { ConvexReactClient } from \"convex/react\";\nimport App from \"./App.tsx\";\nimport \"./index.css\";\n\nconst convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL as string);\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <ConvexAuthProvider client={convex}>\n      <App />\n    </ConvexAuthProvider>\n  </React.StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing OAuth Profile Information in Convex\nDESCRIPTION: TypeScript code demonstrating how to customize the user profile information retrieved from the OAuth provider and stored in the Convex users table.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport GitHub from \"@auth/core/providers/github\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [\n    GitHub({\n      profile(githubProfile, tokens) {\n        return {\n          id: githubProfile.id,\n          name: githubProfile.name,\n          email: githubProfile.email,\n          image: githubProfile.picture,\n          githubId: githubProfile.id,\n        };\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Authentication with Convex Auth in TypeScript\nDESCRIPTION: Example code showing how to initialize and configure the Password provider for authentication in a Convex application. This snippet demonstrates importing and setting up the basic password authentication system.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/providers/Password.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Password from \"@convex-dev/auth/providers/Password\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [Password],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Redirect Callback in Convex Auth\nDESCRIPTION: Example of implementing a custom redirect callback to control which URLs are allowed as destinations after OAuth sign-in or for magic links. This allows for customizing the post-authentication redirect behavior.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport GitHub from \"@auth/core/providers/github\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [GitHub],\n  callbacks: {\n    async redirect({ redirectTo }) {\n      // Check that `redirectTo` is valid\n      // and return the relative or absolute URL\n      // to redirect to.\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Provider with Reset Option\nDESCRIPTION: This snippet shows how to configure the Password provider with a custom reset option in the Convex auth configuration file.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Password } from \"@convex-dev/auth/providers/Password\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\nimport { ResendOTPPasswordReset } from \"./ResendOTPPasswordReset\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [Password({ reset: ResendOTPPasswordReset })],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Form in React Native\nDESCRIPTION: This React Native component creates a sign-in form for password authentication, handling both sign-up and sign-in flows. It uses the useAuthActions hook and React Native components.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthActions } from \"@convex-dev/auth/react\";\nimport { useState } from \"react\";\nimport { Button, TextInput, View } from \"react-native\";\n\nexport function SignIn() {\n  const { signIn } = useAuthActions();\n  const [step, setStep] = useState<\"signUp\" | \"signIn\">(\"signIn\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  return (\n    <View>\n      <TextInput\n        placeholder=\"Email\"\n        onChangeText={setEmail}\n        value={email}\n        inputMode=\"email\"\n        autoCapitalize=\"none\"\n      />\n      <TextInput\n        placeholder=\"Password\"\n        onChangeText={setPassword}\n        value={password}\n        secureTextEntry\n      />\n      <Button\n        title={step === \"signIn\" ? \"Sign in\" : \"Sign up\"}\n        onPress={() => {\n          void signIn(\"password\", { email, password, flow: step });\n        }}\n      />\n      <Button\n        title={step === \"signIn\" ? \"Sign up instead\" : \"Sign in instead\"}\n        onPress={() => setStep(step === \"signIn\" ? \"signUp\" : \"signIn\")}\n      />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Anonymous Sign-in in React Component\nDESCRIPTION: React component implementation showing how to trigger anonymous sign-in before performing an authenticated action like sending a message.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/anonymous.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthActions } from \"@convex-dev/auth/react\";\nimport { useMutation } from \"convex/react\";\nimport { api } from \"../convex/_generated/api\";\n\nexport function SendMessage() {\n  const { signIn } = useAuthActions();\n  const sendMessage = useMutation(api.messages.send);\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        const message = formData.get(\"message\") as string;\n        void signIn(\"anonymous\").then(() => sendMessage({ message }));\n      }}\n    >\n      <input name=\"message\" placeholder=\"Some text...\" type=\"text\" />\n      <button type=\"submit\">Send</button>\n    </form>\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuring Anonymous Provider in Convex Auth\nDESCRIPTION: Sets up the anonymous authentication provider in the Convex auth configuration file. This enables anonymous user sessions in the application.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/anonymous.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Anonymous } from \"@convex-dev/auth/providers/Anonymous\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [Anonymous],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Resend OTP Provider in Convex\nDESCRIPTION: Custom provider configuration for sending OTP codes via Resend. This implementation generates a random 8-digit code and sends it via email. It requires the Resend SDK and oslo library for token generation.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/otps.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Email } from \"@convex-dev/auth/providers/Email\";\nimport { Resend as ResendAPI } from \"resend\";\nimport { alphabet, generateRandomString } from \"oslo/crypto\";\n\nexport const ResendOTP = Email({\n  id: \"resend-otp\",\n  apiKey: process.env.AUTH_RESEND_KEY,\n  maxAge: 60 * 15, // 15 minutes\n  // This function can be asynchronous\n  generateVerificationToken() {\n    return generateRandomString(8, alphabet(\"0-9\"));\n  },\n  async sendVerificationRequest({ identifier: email, provider, token }) {\n    const resend = new ResendAPI(provider.apiKey);\n    const { error } = await resend.emails.send({\n      from: \"My App <onboarding@resend.dev>\",\n      to: [email],\n      subject: `Sign in to My App`,\n      text: \"Your code is \" + token,\n    });\n\n    if (error) {\n      throw new Error(JSON.stringify(error));\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Anonymous Provider for Convex Auth in TypeScript\nDESCRIPTION: This code demonstrates how to import and configure the Anonymous authentication provider for Convex Auth. It sets up authentication functions including signIn, signOut, and isAuthenticated that can be used throughout the application.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/providers/Anonymous.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Anonymous } from \"@convex-dev/auth/providers/Anonymous\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [Anonymous],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Provider with Custom Authorization in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure an email authentication provider with custom authorization behavior. It overrides the default email check during token verification, allowing for a 'magic link' style authentication where only the token is required.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/providers/Email.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Email from \"@convex-dev/auth/providers/Email\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [\n    Email({ authorize: undefined }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up ConvexAuthProvider in React Native\nDESCRIPTION: Code to implement Convex Auth in a React Native application using Expo, including secure storage integration for persisting authentication state.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConvexAuthProvider } from \"@convex-dev/auth/react\";\nimport { ConvexReactClient } from \"convex/react\";\nimport { Stack } from \"expo-router\";\nimport * as SecureStore from \"expo-secure-store\";\n\nconst convex = new ConvexReactClient(process.env.EXPO_PUBLIC_CONVEX_URL!, {\n  unsavedChangesWarning: false,\n});\n\nconst secureStorage = {\n  getItem: SecureStore.getItemAsync,\n  setItem: SecureStore.setItemAsync,\n  removeItem: SecureStore.deleteItemAsync,\n};\n\nexport default function RootLayout() {\n  return (\n    <ConvexAuthProvider\n      client={convex}\n      storage={\n        Platform.OS === \"android\" || Platform.OS === \"ios\"\n          ? secureStorage\n          : undefined\n      }\n    >\n      <Stack>\n        <Stack.Screen name=\"index\" />\n      </Stack>\n    </ConvexAuthProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the users Table Schema in Convex Auth\nDESCRIPTION: This code shows how to define a custom schema for the users table in Convex Auth. It demonstrates adding optional fields like name, image, email, and phone, along with their verification timestamps. The example also includes an index on the email field and shows how to incorporate this custom table into your overall schema.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/schema.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\nimport { authTables } from \"@convex-dev/auth/server\";\n\nconst schema = defineSchema({\n  ...authTables,\n  users: defineTable({\n    name: v.optional(v.string()),\n    image: v.optional(v.string()),\n    email: v.optional(v.string()),\n    emailVerificationTime: v.optional(v.number()),\n    phone: v.optional(v.string()),\n    phoneVerificationTime: v.optional(v.number()),\n    isAnonymous: v.optional(v.boolean()),\n    // other \"users\" fields...\n  }).index(\"email\", [\"email\"]),\n  // Your other tables...\n});\n\nexport default schema;\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Routes for Authentication in Convex\nDESCRIPTION: Example showing how to set up HTTP routes for JWT verification and OAuth sign-in using the auth helper.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { httpRouter } from \"convex/server\";\nimport { auth } from \"./auth.js\";\n\nconst http = httpRouter();\n\nauth.addHttpRoutes(http);\n\nexport default http;\n```\n\n----------------------------------------\n\nTITLE: Customizing User Profile Information in TypeScript\nDESCRIPTION: This snippet demonstrates how to customize the user profile information during sign-up. It includes additional fields like name and role in the user document.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Password } from \"@convex-dev/auth/providers/Password\";\nimport { DataModel } from \"./_generated/dataModel\";\n\nexport default Password<DataModel>({\n  profile(params) {\n    return {\n      email: params.email as string,\n      name: params.name as string,\n      role: params.role as string,\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Password Validation in TypeScript\nDESCRIPTION: This example shows how to implement custom password validation logic. It checks for minimum length, and presence of digits, lowercase, and uppercase letters.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConvexError } from \"convex/values\";\nimport { Password } from \"@convex-dev/auth/providers/Password\";\n\nexport default Password({\n  validatePasswordRequirements: (password: string) => {\n    if (\n      password.length < 8 ||\n      !/\\d/.test(password) ||\n      !/[a-z]/.test(password) ||\n      !/[A-Z]/.test(password)\n    ) {\n      throw new ConvexError(\"Invalid password.\");\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Untrusted OAuth Provider in Convex Auth\nDESCRIPTION: This snippet demonstrates how to configure an OAuth provider like GitHub as untrusted by setting the 'allowDangerousEmailAccountLinking' option to false, which prevents automatic account linking based on email addresses.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/advanced.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Resend from \"@auth/core/providers/resend\";\nimport GitHub from \"@auth/core/providers/github\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } =\n  convexAuth({\n    providers: [\n      Resend,\n      GitHub({ allowDangerousEmailAccountLinking: false }),\n    ],\n  });\n```\n\n----------------------------------------\n\nTITLE: Preloading Authenticated Data in Next.js with Convex\nDESCRIPTION: This code demonstrates how to preload authenticated data from a Convex backend in a Next.js server component. It uses the preloadQuery function and the convexAuthNextjsToken to fetch tasks for an authenticated user.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz/nextjs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convexAuthNextjsToken } from \"@convex-dev/auth/nextjs/server\";\nimport { preloadQuery } from \"convex/nextjs\";\nimport { api } from \"@/convex/_generated/api\";\nimport { Tasks } from \"./Tasks\";\n\nexport async function TasksWrapper() {\n  const preloadedTasks = await preloadQuery(\n    api.tasks.list,\n    { list: \"default\" },\n    { token: await convexAuthNextjsToken() },\n  );\n  return <Tasks preloadedTasks={preloadedTasks} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Provider in Convex Auth\nDESCRIPTION: Implementation of the GitHub OAuth provider configuration in the Convex auth.ts file. This code imports the GitHub provider and adds it to the convexAuth configuration.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/github.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport GitHub from \"@auth/core/providers/github\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [GitHub],\n});\n```\n\n----------------------------------------\n\nTITLE: Using ConvexAuthNextjsMiddlewareContext in Next.js Middleware\nDESCRIPTION: Example of how to use the ConvexAuthNextjsMiddlewareContext in a Next.js middleware function to check authentication and redirect if necessary.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/nextjs/server.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function convexAuthNextjsMiddleware(handler, options) {\n  return async (request, event, convexAuth) => {\n    if (!(await convexAuth.isAuthenticated())) {\n      return nextjsMiddlewareRedirect(request, \"/login\");\n    }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function in TypeScript\nDESCRIPTION: Example of a Convex mutation function that handles data modification. Shows argument validation, database insertion, and return value handling. Demonstrates proper structure for writing data to Convex database.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test/convex/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up ConvexAuthNextjsProvider in Next.js Client Component\nDESCRIPTION: Client-side provider component for Convex Auth in a Next.js application, which replaces the standard ConvexProvider.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { ConvexAuthNextjsProvider } from \"@convex-dev/auth/nextjs\";\nimport { ConvexReactClient } from \"convex/react\";\nimport { ReactNode } from \"react\";\n\nconst convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);\n\nexport function ConvexClientProvider({ children }: { children: ReactNode }) {\n  return (\n    <ConvexAuthNextjsProvider client={convex}>\n      {children}\n    </ConvexAuthNextjsProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating HTTP Actions with JWT Token in React\nDESCRIPTION: Example of how to authenticate HTTP requests to the Convex backend using JWT tokens. This snippet demonstrates using the useAuthToken hook to retrieve the authentication token and include it in fetch requests as a Bearer token.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthToken } from \"@convex-dev/auth/react\";\n\nfunction SomeComponent() {\n  const token = useAuthToken();\n  const onClick = async () => {\n    // You might need to set up `VITE_CONVEX_SITE_URL`\n    const response = await fetch(\n      `${process.env.VITE_CONVEX_SITE_URL!}/someEndpoint`,\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n    // ...\n  };\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign Out with Convex Auth in React\nDESCRIPTION: A React component that uses the useAuthActions hook from @convex-dev/auth/react to provide sign-out functionality. This component renders a button that triggers the signOut function when clicked.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthActions } from \"@convex-dev/auth/react\";\n\nexport function SignOut() {\n  const { signOut } = useAuthActions();\n  return <button onClick={() => void signOut()}>Sign out</button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using getAuthUserId in a Convex Mutation\nDESCRIPTION: Example of retrieving the current user's ID in a Convex mutation function using getAuthUserId.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { getAuthUserId } from \"@convex-dev/auth/server\";\n\nexport const doSomething = mutation({\n  args: {/* ... */},\n  handler: async (ctx, args) => {\n    const userId = await getAuthUserId(ctx);\n    if (userId === null) {\n      throw new Error(\"Client is not authenticated!\")\n    }\n    const user = await ctx.db.get(userId);\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Mutation Function\nDESCRIPTION: Example of creating a mutation function that writes data to the database, showing argument validation and database operations using Convex's mutation helper\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-router/convex/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Provider in Convex Auth\nDESCRIPTION: This snippet shows how to set up the Password provider in the Convex auth configuration file. It imports the necessary modules and configures the auth object with the Password provider.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Password } from \"@convex-dev/auth/providers/Password\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [Password],\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Session ID in Convex Backend Functions\nDESCRIPTION: A Convex query function that demonstrates how to get the current session ID using getAuthSessionId. This function returns the session document if authenticated, or null if not authenticated.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { getAuthSessionId } from \"@convex-dev/auth/server\";\nimport { query } from \"./_generated/server\";\n\nexport const currentSession = query({\n  args: {},\n  handler: async (ctx) => {\n    const sessionId = await getAuthSessionId(ctx);\n    if (sessionId === null) {\n      return null;\n    }\n    return await ctx.db.get(sessionId);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Sign-In Button in React\nDESCRIPTION: React component code for creating a sign-in button that triggers the OAuth flow for GitHub authentication.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthActions } from \"@convex-dev/auth/react\";\n\nexport function SignIn() {\n  const { signIn } = useAuthActions();\n  return (\n    <button onClick={() => void signIn(\"github\")}>Sign in with GitHub</button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Form in React\nDESCRIPTION: This React component creates a sign-in form that handles both sign-up and sign-in flows for password authentication. It uses the useAuthActions hook to access the signIn function.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthActions } from \"@convex-dev/auth/react\";\nimport { useState } from \"react\";\n\nexport function SignIn() {\n  const { signIn } = useAuthActions();\n  const [step, setStep] = useState<\"signUp\" | \"signIn\">(\"signIn\");\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        void signIn(\"password\", formData);\n      }}\n    >\n      <input name=\"email\" placeholder=\"Email\" type=\"text\" />\n      <input name=\"password\" placeholder=\"Password\" type=\"password\" />\n      <input name=\"flow\" type=\"hidden\" value={step} />\n      <button type=\"submit\">{step === \"signIn\" ? \"Sign in\" : \"Sign up\"}</button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setStep(step === \"signIn\" ? \"signUp\" : \"signIn\");\n        }}\n      >\n        {step === \"signIn\" ? \"Sign up instead\" : \"Sign in instead\"}\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Redirect Callback in Convex Auth Configuration\nDESCRIPTION: TypeScript code showing how to override the redirect callback in the Convex auth configuration to support multiple redirect URIs.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport GitHub from \"@auth/core/providers/github\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [GitHub],\n  callbacks: {\n    async redirect({ redirectTo }) {\n      if (\n        redirectTo !== \"exp://10.0.1.30:8081\" &&\n        redirectTo !== \"http://localhost:3000\"\n      ) {\n        throw new Error(`Invalid redirectTo URI ${redirectTo}`);\n      }\n      return redirectTo;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Provider in Convex\nDESCRIPTION: TypeScript code snippet showing how to configure the GitHub OAuth provider in the Convex auth configuration file.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport GitHub from \"@auth/core/providers/github\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [GitHub],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Link Sign-in Form\nDESCRIPTION: React component implementation for the Magic Link sign-in form using Convex Auth actions.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/email.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthActions } from \"@convex-dev/auth/react\";\n\nexport function SignIn() {\n  const { signIn } = useAuthActions();\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        void signIn(\"resend\", formData);\n      }}\n    >\n      <input name=\"email\" placeholder=\"Email\" type=\"text\" />\n      <button type=\"submit\">Send sign-in link</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth.js Provider in Convex\nDESCRIPTION: Configuration of the Resend email provider in the Convex authentication setup file.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/email.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport Resend from \"@auth/core/providers/resend\";\nimport { convexAuth } from \"@convex-dev/auth/server\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [Resend],\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional UI Rendering Based on Authentication State in React\nDESCRIPTION: Example of how to control content visibility based on the user's authentication state using Convex components. It demonstrates the use of AuthLoading, Unauthenticated, and Authenticated components to conditionally render different UI elements.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Authenticated, Unauthenticated, AuthLoading } from \"convex/react\";\nimport { SignIn } from \"./SignIn\";\nimport { SignOut } from \"./SignOut\";\n\nexport function App() {\n  return (\n    <>\n      <AuthLoading>{/* consider showing a loading indicator */}</AuthLoading>\n      <Unauthenticated>\n        <SignIn />\n      </Unauthenticated>\n      <Authenticated>\n        <SignOut />\n        <Content />\n      </Authenticated>\n    </>\n  );\n}\n\nfunction Content() {\n  /* render signed-in content */\n}\n```\n\n----------------------------------------\n\nTITLE: Running Convex Auth Initialization Command\nDESCRIPTION: Command to run the Convex Auth initialization script which automatically sets up your project for authentication.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx @convex-dev/auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Convex with OTP Provider\nDESCRIPTION: Configuration of the Convex authentication system by importing and using the custom ResendOTP provider in the auth.ts file.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/otps.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { convexAuth } from \"@convex-dev/auth/server\";\nimport { ResendOTP } from \"./ResendOTP\";\n\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n  providers: [ResendOTP],\n});\n```\n\n----------------------------------------\n\nTITLE: Using useAuthActions Hook in TypeScript\nDESCRIPTION: Example of using the useAuthActions hook to access signIn and signOut methods in a React component.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/react.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useAuthActions } from \"@convex-dev/auth/react\";\n\nfunction SomeComponent() {\n  const { signIn, signOut } = useAuthActions();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging for ConvexReactClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to enable verbose logging when instantiating the ConvexReactClient. Verbose logging helps in spotting potential issues and understanding the auth flow.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/debugging.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new ConvexReactClient(process.env.CONVEX_URL, {\n  verbose: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Form in React\nDESCRIPTION: This React component creates a password reset form with two steps: requesting a reset code and verifying the code with a new password. It uses the useAuthActions hook for authentication actions.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAuthActions } from \"@convex-dev/auth/react\";\nimport { useState } from \"react\";\n\nexport function PasswordReset() {\n  const { signIn } = useAuthActions();\n  const [step, setStep] = useState<\"forgot\" | { email: string }>(\"forgot\");\n  return step === \"forgot\" ? (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        void signIn(\"password\", formData).then(() =>\n          setStep({ email: formData.get(\"email\") as string })\n        );\n      }}\n    >\n      <input name=\"email\" placeholder=\"Email\" type=\"text\" />\n      <input name=\"flow\" type=\"hidden\" value=\"reset\" />\n      <button type=\"submit\">Send code</button>\n    </form>\n  ) : (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        const formData = new FormData(event.currentTarget);\n        void signIn(\"password\", formData);\n      }}\n    >\n      <input name=\"code\" placeholder=\"Code\" type=\"text\" />\n      <input name=\"newPassword\" placeholder=\"New password\" type=\"password\" />\n      <input name=\"email\" value={step.email} type=\"hidden\" />\n      <input name=\"flow\" value=\"reset-verification\" type=\"hidden\" />\n      <button type=\"submit\">Continue</button>\n      <button type=\"button\" onClick={() => setStep(\"signIn\")}>\n        Cancel\n      </button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Project with Next.js\nDESCRIPTION: Commands to install dependencies and start the development server for a Convex project with Next.js. This is used when cloning an existing codebase.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring auth.config.ts for Convex Auth\nDESCRIPTION: TypeScript configuration file for Convex Auth, setting up the authentication provider with the application domain.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  providers: [\n    {\n      domain: process.env.CONVEX_SITE_URL,\n      applicationID: \"convex\",\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up ConvexAuthProvider in Next.js Client-Only App\nDESCRIPTION: Client-side provider setup for Convex Auth in a Next.js application without server-side authentication.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { ConvexAuthProvider } from \"@convex-dev/auth/react\";\nimport { ConvexReactClient } from \"convex/react\";\nimport { ReactNode } from \"react\";\n\nconst convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL!);\n\nexport function ConvexClientProvider({ children }: { children: ReactNode }) {\n  return <ConvexAuthProvider client={convex}>{children}</ConvexAuthProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a query function in Convex that accepts two arguments (a number and a string) and reads data from the database. The function includes argument validation and returns the retrieved documents.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/convex/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OTP Email Provider with Resend in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom email provider for OTP verification using Resend and Oslo libraries. It generates a random OTP and sends it via email.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Resend from \"@auth/core/providers/resend\";\nimport { Resend as ResendAPI } from \"resend\";\nimport { alphabet, generateRandomString } from \"oslo/crypto\";\n\nexport const ResendOTP = Resend({\n  id: \"resend-otp\",\n  apiKey: process.env.AUTH_RESEND_KEY,\n  async generateVerificationToken() {\n    return generateRandomString(8, alphabet(\"0-9\"));\n  },\n  async sendVerificationRequest({ identifier: email, provider, token }) {\n    const resend = new ResendAPI(provider.apiKey);\n    const { error } = await resend.emails.send({\n      from: \"My App <onboarding@resend.dev>\",\n      to: [email],\n      subject: `Sign in to My App`,\n      text: \"Your code is \" + token,\n    });\n\n    if (error) {\n      throw new Error(\"Could not send\");\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Return URL for Apple Authentication with Convex\nDESCRIPTION: Example URL format for the Apple authentication callback endpoint. This URL must be registered with Apple for the Sign in with Apple service.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/apple.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://fast-horse-123.convex.site/api/auth/callback/apple\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutation Function in Convex\nDESCRIPTION: This snippet demonstrates how to create a mutation function in Convex that modifies data in the database. The function accepts two string arguments, inserts a document into the 'messages' table, and returns the inserted document.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/convex/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Email Provider for Password Reset\nDESCRIPTION: This snippet defines a custom email provider for password reset using Resend. It generates a random OTP and sends it via email using the Resend API.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Resend from \"@auth/core/providers/resend\";\nimport { Resend as ResendAPI } from \"resend\";\nimport { alphabet, generateRandomString } from \"oslo/crypto\";\n\nexport const ResendOTPPasswordReset = Resend({\n  id: \"resend-otp\",\n  apiKey: process.env.AUTH_RESEND_KEY,\n  async generateVerificationToken() {\n    return generateRandomString(8, alphabet(\"0-9\"));\n  },\n  async sendVerificationRequest({ identifier: email, provider, token }) {\n    const resend = new ResendAPI(provider.apiKey);\n    const { error } = await resend.emails.send({\n      from: \"My App <onboarding@resend.dev>\",\n      to: [email],\n      subject: `Reset your password in My App`,\n      text: \"Your password reset code is \" + token,\n    });\n\n    if (error) {\n      throw new Error(\"Could not send\");\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React Component\nDESCRIPTION: Example of how to use a Convex mutation function within a React component using the useMutation hook. Shows both fire-and-forget and promise-based usage patterns.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test/convex/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Auth Session ID in Convex Mutation\nDESCRIPTION: Example of using the getAuthSessionId function in a Convex mutation to verify user authentication and access the current session information.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mutation } from \"./_generated/server\";\nimport { getAuthSessionId } from \"@convex-dev/auth/server\";\n\nexport const doSomething = mutation({\n  args: {/* ... */},\n  handler: async (ctx, args) => {\n    const sessionId = await getAuthSessionId(ctx);\n    if (sessionId === null) {\n      throw new Error(\"Client is not authenticated!\")\n    }\n    const session = await ctx.db.get(sessionId);\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting AUTH_LOG_LEVEL for Convex Functions using Shell Command\nDESCRIPTION: This command sets the AUTH_LOG_LEVEL environment variable to DEBUG for Convex functions. This enables verbose logging in the Convex dashboard, which is useful for debugging but should be used cautiously as it may log sensitive information.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/debugging.mdx#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx convex env set AUTH_LOG_LEVEL DEBUG\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React\nDESCRIPTION: Example showing how to use a Convex query function within a React component using the useQuery hook\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-router/convex/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Sign-In Redirect with redirectTo Parameter\nDESCRIPTION: Example of using the redirectTo parameter with the signIn function to specify a custom destination after authentication. This can be used to redirect users to specific pages or even different sites after they sign in.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference/server.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsignIn(\"google\", { redirectTo: \"/dashboard\" })\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Query Function in React\nDESCRIPTION: This snippet shows how to use a Convex query function in a React component using the useQuery hook. It demonstrates passing arguments to the query function.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/convex/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting SITE_URL Environment Variable for Convex Auth\nDESCRIPTION: Commands to set the SITE_URL environment variable for different development environments using Convex CLI.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex env set SITE_URL http://localhost:5173\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex env set SITE_URL http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests for Convex Auth\nDESCRIPTION: This command executes the Playwright end-to-end tests for Convex authentication. It should be run after setting up the test user and environment secret.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/e2e-tests/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nplaywright test\n```\n\n----------------------------------------\n\nTITLE: Setting Google OAuth Client ID in Convex Environment\nDESCRIPTION: Command to set the Google OAuth Client ID as an environment variable in Convex. This ID is obtained from the Google Cloud Console and is used to identify the application to Google's OAuth service.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/google.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex env set AUTH_GOOGLE_ID <yourgoogleclientid>\n```\n\n----------------------------------------\n\nTITLE: Customizing Email Validation for Sign-Up in TypeScript\nDESCRIPTION: This snippet demonstrates how to use Zod for email validation in the sign-up process. It throws a ConvexError if the email format is invalid.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/passwords.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConvexError } from \"convex/values\";\nimport { Password } from \"@convex-dev/auth/providers/Password\";\nimport { z } from \"zod\";\n\nconst ParamsSchema = z.object({\n  email: z.string().email(),\n});\n\nexport default Password({\n  profile(params) {\n    const { error, data } = ParamsSchema.safeParse(params);\n    if (error) {\n      throw new ConvexError(error.format());\n    }\n    return { email: data.email };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub OAuth Callback URL Format\nDESCRIPTION: A template showing the format for the GitHub OAuth callback URL to be used with Convex applications. The URL combines the Convex actions URL with the specific GitHub callback path.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/github.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://fast-horse-123.convex.site/api/auth/callback/github\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Keys for Convex Auth\nDESCRIPTION: A JavaScript script to generate private and public keys for JWT authentication in Convex Auth.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { exportJWK, exportPKCS8, generateKeyPair } from \"jose\";\n\nconst keys = await generateKeyPair(\"RS256\");\nconst privateKey = await exportPKCS8(keys.privateKey);\nconst publicKey = await exportJWK(keys.publicKey);\nconst jwks = JSON.stringify({ keys: [{ use: \"sig\", ...publicKey }] });\n\nprocess.stdout.write(\n  `JWT_PRIVATE_KEY=\"${privateKey.trimEnd().replace(/\\n/g, \" \")}\"`\n);\nprocess.stdout.write(\"\\n\");\nprocess.stdout.write(`JWKS=${jwks}`);\nprocess.stdout.write(\"\\n\");\n```\n\n----------------------------------------\n\nTITLE: Setting Convex Environment Secret for E2E Tests\nDESCRIPTION: This command sets the AUTH_E2E_TEST_SECRET environment variable in the Convex backend. The secret value should match the one specified in the .env.test file.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/e2e-tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex env set AUTH_E2E_TEST_SECRET <something>\n```\n\n----------------------------------------\n\nTITLE: Setting Convex GitHub OAuth Client ID Environment Variable\nDESCRIPTION: Command to set the GitHub OAuth client ID as a Convex environment variable using the Convex CLI.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/github.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex env set AUTH_GITHUB_ID <yourgithubclientid>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth Callback URL\nDESCRIPTION: Example of the callback URL format for GitHub OAuth integration with Convex. This URL is based on the project's HTTP Actions URL.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://fast-horse-123.convex.site/api/auth/callback/github\n```\n\n----------------------------------------\n\nTITLE: Setting Google OAuth Client Secret in Convex Environment\nDESCRIPTION: Command to set the Google OAuth Client Secret as an environment variable in Convex. This secret is obtained from the Google Cloud Console and is used to authenticate the application with Google's OAuth service.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/google.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex env set AUTH_GOOGLE_SECRET <yourgooglesecret>\n```\n\n----------------------------------------\n\nTITLE: Setting Apple Client ID Environment Variable in Convex\nDESCRIPTION: Command to set the Apple Service Identifier as an environment variable in Convex. This identifier is used to authenticate with Apple's services.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/apple.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex env set AUTH_APPLE_ID <yourappleserviceidentifier>\n```\n\n----------------------------------------\n\nTITLE: Setting Apple Secret Environment Variable in Convex\nDESCRIPTION: Command to set the Apple JWT secret as an environment variable in Convex. This secret is required for server-side authentication with Apple's services.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/apple.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex env set AUTH_APPLE_SECRET <yourapplesecret>\n```\n\n----------------------------------------\n\nTITLE: Setting Convex GitHub OAuth Client Secret Environment Variable\nDESCRIPTION: Command to set the GitHub OAuth client secret as a Convex environment variable using the Convex CLI.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/oauth/github.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex env set AUTH_GITHUB_SECRET <yourgithubsecret>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Resend Email Provider in Convex\nDESCRIPTION: Command to set the Resend API key as an environment variable in your Convex backend, which is required for the email provider configuration.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/otps.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex env set AUTH_RESEND_KEY yourresendkey\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging in Next.js Middleware for Convex Auth\nDESCRIPTION: This code snippet shows how to enable verbose logging in the Next.js middleware for Convex Auth. It passes the verbose option to the convexAuthNextjsMiddleware function, which will output logs to the Next.js runtime environment.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/debugging.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default convexAuthNextjsMiddleware(optionalHandler, {\n  verbose: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Expiration for Convex Auth in Next.js\nDESCRIPTION: This snippet shows how to configure the expiration time for the authentication cookie used by Convex Auth in a Next.js application. It sets the cookie to expire after 30 days.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/authz/nextjs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default convexAuthNextjsMiddleware(\n  (request, { convexAuth }) => {\n    // ...\n  },\n  { cookieConfig: { maxAge: 60 * 60 * 24 * 30 } },\n); // 30 days\n```\n\n----------------------------------------\n\nTITLE: Setting Resend API Key Environment Variable\nDESCRIPTION: Command to set the Resend API key as an environment variable in the Convex backend.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config/email.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx convex env set AUTH_RESEND_KEY yourresendkey\n```\n\n----------------------------------------\n\nTITLE: Modifying tsconfig.json for Convex Auth\nDESCRIPTION: Changes required in the tsconfig.json file to support Convex Auth, including updating moduleResolution and adding skipLibCheck.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/setup/manual.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n+    \"skipLibCheck\": true,\n+    \"moduleResolution\": \"Bundler\",\n-    \"moduleResolution\": \"Node\",\n```\n\n----------------------------------------\n\nTITLE: Initializing Convex Auth Production Environment\nDESCRIPTION: Command to initialize and configure the minimal set of required environment variables for Convex authentication in production.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/production.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @convex-dev/auth --prod\n```\n\n----------------------------------------\n\nTITLE: Creating New Convex Project with Next.js and shadcn/ui Template\nDESCRIPTION: Command to create a new Convex project using the Next.js and shadcn/ui template. This is used when starting a new project from scratch.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm create convex@latest -- -t nextjs-shadcn\n```\n\n----------------------------------------\n\nTITLE: Adding isAuthenticated Endpoint to Convex Auth Exports\nDESCRIPTION: Code snippet showing how to update auth.ts file by adding a new isAuthenticated endpoint to the list of exported Convex functions. This is required for the breaking change in version 0.0.76.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const { auth, signIn, signOut, store, isAuthenticated } = convexAuth(...)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Convex Auth Example Project\nDESCRIPTION: These commands install the necessary dependencies and start the development server for the Convex Auth example project. It uses npm for package management and running scripts.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Convex Auth Example Project\nDESCRIPTION: Commands to install dependencies and start the development server for the Convex Auth example project.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-router/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Local Backend in Bash\nDESCRIPTION: This command runs the end-to-end tests using a local Convex backend. It requires setting the CONVEX_LOCAL_BACKEND_PATH environment variable to the path of your local convex-backend repository.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/e2e-tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCONVEX_LOCAL_BACKEND_PATH=/path/to/your/convex-backend npm run test\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function\nDESCRIPTION: Example of creating a query function that accepts numeric and string arguments, demonstrating database querying and argument validation using Convex's query helper\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-router/convex/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  handler: async (ctx, args) => {\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    console.log(args.first, args.second);\n\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Test User in Convex\nDESCRIPTION: This command runs a Convex function to initialize a test user for the end-to-end tests. It should be executed after setting up the Convex deployment for authentication.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/e2e-tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx convex run tests:init\n```\n\n----------------------------------------\n\nTITLE: Using Convex Query in React Component\nDESCRIPTION: Example of how to use a Convex query function within a React component using the useQuery hook. Shows proper parameter passing.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test/convex/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = useQuery(api.functions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Convex Auth Docs\nDESCRIPTION: This command starts the local development server for Convex Auth documentation. It uses npm to run the 'dev' script defined in the project's package.json file.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using Convex Mutation in React\nDESCRIPTION: Example demonstrating how to use a Convex mutation function in a React component using the useMutation hook, including both fire-and-forget and promise-based approaches\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-router/convex/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating Authentication Keys in Convex Deployment\nDESCRIPTION: This command rotates the private and public keys on a production Convex deployment. It's an important step for invalidating existing access tokens after discovering a security vulnerability.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/security.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @convex-dev/auth --prod\n```\n\n----------------------------------------\n\nTITLE: Listing Convex Auth Modules in Markdown\nDESCRIPTION: This snippet lists the available modules in the @convex-dev/auth package, including Next.js integrations, authentication providers, and React and server utilities.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/api_reference.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @convex-dev/auth\n\n## Modules\n\n- [nextjs](api_reference/nextjs.mdx)\n- [nextjs/server](api_reference/nextjs/server.mdx)\n- [providers/Anonymous](api_reference/providers/Anonymous.mdx)\n- [providers/ConvexCredentials](api_reference/providers/ConvexCredentials.mdx)\n- [providers/Email](api_reference/providers/Email.mdx)\n- [providers/Password](api_reference/providers/Password.mdx)\n- [providers/Phone](api_reference/providers/Phone.mdx)\n- [react](api_reference/react.mdx)\n- [server](api_reference/server.mdx)\n```\n\n----------------------------------------\n\nTITLE: Implementing Next.js App Component with Global CSS\nDESCRIPTION: This code defines the main App component for a Next.js application. It imports global CSS styles and renders the current page component with its props. This is a standard pattern in Next.js applications for providing a consistent layout or global state.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/_app.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport \"./global.css\";\n\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Convex Query Function in TypeScript\nDESCRIPTION: Example of a Convex query function that takes numeric and string arguments. Shows validator setup, database querying, and document processing. Demonstrates proper structure for reading data from Convex database.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test/convex/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// functions.js\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using a Convex Mutation Function in React\nDESCRIPTION: This snippet demonstrates how to use a Convex mutation function in a React component using the useMutation hook. It shows both fire-and-forget usage and handling the result with a Promise.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/test-nextjs/convex/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mutation = useMutation(api.functions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Image Components in Next.js\nDESCRIPTION: This code snippet imports an example image and the Next.js Image component. It's used to display authentication form examples in the documentation.\nSOURCE: https://github.com/get-convex/convex-auth/blob/main/docs/pages/config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport exampleForms from \"../public/exampleForms.png\";\nimport Image from \"next/image\";\n```"
  }
]