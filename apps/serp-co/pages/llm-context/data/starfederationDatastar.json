[
  {
    "owner": "starfederation",
    "repo": "datastar",
    "content": "TITLE: Core Datastar Attribute Usage in HTML\nDESCRIPTION: Demonstrates core data-* attributes used for reactive behavior in HTML elements, including signals, computed values, and ignore functionality.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\ndata-signals=\"signal-name\"\ndata-computed=\"expression\"\ndata-star-ignore\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Server-Sent Events in Datastar Backend\nDESCRIPTION: Shows how to send multiple events (HTML fragments and signal updates) in a single server response using Datastar's EventStream.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst datastar = require('datastar');\n\napp.post('/actions/quiz', (req, res) => {\n  const stream = new datastar.EventStream(res);\n  stream.mergeFragments({\n    result: '<div>Your answer was correct!</div>'\n  });\n  stream.mergeSignals({\n    score: 10\n  });\n  stream.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar via CDN\nDESCRIPTION: Including Datastar framework via CDN script tag for quickest implementation\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"https://cdn.jsdelivr.net/gh/starfederation/datastar@v1.0.0-beta.11/bundles/datastar.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar via CDN Script Tag in HTML\nDESCRIPTION: This snippet shows how to include Datastar in an HTML file using a CDN script tag. It loads the framework as a module, making it available for use in the web application.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/library/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"https://cdn.jsdelivr.net/gh/starfederation/datastar@v1.0.0-beta.11/bundles/datastar.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Running Concurrent Streaming Blocks with Datastar\nDESCRIPTION: Demonstrates how to launch multiple concurrent streaming updates that run in separate threads/fibers. Updates from all streams are linearized and sent to the browser as they are produced.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# Stream to the browser from two concurrent threads\ndatastar.stream do |sse|\n  100.times do |i|\n    sleep 1\n    sse.merge_fragments(%(<h1 id=\"slow\">#{i}!</h1>))\n  end\nend\n\ndatastar.stream do |sse|\n  1000.times do |i|\n    sleep 0.1\n    sse.merge_fragments(%(<h1 id=\"fast\">#{i}!</h1>))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Signal Definition Examples in HTML\nDESCRIPTION: Shows different ways to define signals using data-signals attribute, including namespaced signals and object notation for multiple signals.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo=\"1\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo.bar=\"1\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{foo: {bar: 1, baz: 2}}\"></div>\n```\n\n----------------------------------------\n\nTITLE: Basic Data Binding\nDESCRIPTION: Example of two-way data binding using data-bind attribute on input element\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-input />\n```\n\n----------------------------------------\n\nTITLE: Configuring C# Backend with Datastar Services\nDESCRIPTION: C# backend implementation showing how to set up and use Datastar services. It demonstrates adding Datastar to the service collection, handling GET and POST requests, and working with server-sent events for real-time updates to the frontend.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/dotnet/README.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing StarFederation.Datastar;\nusing StarFederation.Datastar.DependencyInjection;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\n\n// add as an ASP Service\n//  allows injection of IServerSentEventService, to respond to a request with a Datastar friendly ServerSentEvent\n//  and ISignals, to read the signals sent by the client\nbuilder.Services.AddDatastar();\n\n// displayDate - merging a fragment\napp.MapGet(\"/displayDate\", async (IDatastarServerSentEventService sse) =>\n{\n    string today = DateTime.Now.ToString(\"%y-%M-%d %h:%m:%s\");\n    await sse.MergeFragmentsAsync($\"\"\"<div id='target'><span id='date'><b>{today}</b><button data-on-click=\"@get('/removeDate')\">Remove</button></span></div>\"\"\");\n});\n\n// removeDate - removing a fragment\napp.MapGet(\"/removeDate\", async (IDatastarServerSentEventService sse) => { await sse.RemoveFragmentsAsync(\"#date\"); });\n\npublic record Signals {\n    [JsonPropertyName(\"input\")]\n    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]\n    public string? Input { get; init; } = null;\n\n    [JsonPropertyName(\"output\")]\n    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]\n    public string? Output { get; init; } = null;\n\n    public string Serialize() => ...\n}\n\n// changeOutput - reads the signals, update the Output, and merge back\napp.MapPost(\"/changeOutput\", async (IDatastarServerSentEventService sse, IDatastarSignalsReaderService dsSignals) => ...\n{\n    Signals signals = await dsSignals.ReadSignalsAsync<Signals>();\n    Signals newSignals = new() { Output = $\"Your Input: {signals.Input}\" };\n    await sse.MergeSignalsAsync(newSignals.Serialize());\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Events with data-on Attribute in Datastar\nDESCRIPTION: Shows how to use the data-on attribute to attach event listeners to elements and execute expressions when events are triggered. This example resets an input field on button click.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-input />\n<button data-on-click=\"$input = ''\">Reset</button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Quiz Interface with Datastar Attributes\nDESCRIPTION: Demonstrates a more complex example using Datastar attributes to create a quiz interface. It uses data-signals, data-computed, data-on, data-show, and data-text to manage the quiz state and user interactions.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-signals=\"{response: '', answer: 'bread'}\"\n  data-computed-correct=\"$response.toLowerCase() == $answer\"\n>\n  <div id=\"question\">What do you put in a toaster?</div>\n  <button data-on-click=\"$response = prompt('Answer:') ?? ''\">BUZZ</button>\n  <div data-show=\"$response != ''\">\n    You answered \"<span data-text=\"$response\"></span>\".\n    <span data-show=\"$correct\">That is correct âœ…</span>\n    <span data-show=\"!$correct\">\n      The correct answer is \"\n      <span data-text=\"$answer\"></span>\n      \" ðŸ¤·\n    </span>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Integrating Backend with Frontend in Datastar\nDESCRIPTION: Shows how to use the @get() action to fetch data from the backend and update the frontend state. This example creates a quiz interface that fetches questions from the server.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-signals=\"{response: '', answer: ''}\"\n  data-computed-correct=\"$response.toLowerCase() == $answer\"\n>\n  <div id=\"question\"></div>\n  <button data-on-click=\"@get('/actions/quiz')\">Fetch a question</button>\n  <button\n    data-show=\"$answer != ''\"\n    data-on-click=\"$response = prompt('Answer:') ?? ''\"\n  >\n    BUZZ\n  </button>\n  <div data-show=\"$response != ''\">\n    You answered \"<span data-text=\"$response\"></span>\".\n    <span data-show=\"$correct\">That is correct âœ…</span>\n    <span data-show=\"!$correct\">\n      The correct answer is \"<span data-text=\"$answer\"></span>\" ðŸ¤·\n    </span>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Streaming SSE with DOM and Signal Updates in Rust\nDESCRIPTION: Demonstrates how to create a Server-Sent Events (SSE) stream that merges HTML fragments into the DOM and updates signal values. Uses the async_stream library for stream generation.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/rust/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse datastar::prelude::*;\nuse async_stream::stream;\n\nSse(stream! {\n    // Merges HTML fragments into the DOM.\n    yield MergeFragments::new(\"<div id='question'>What do you put in a toaster?</div>\").into();\n\n    // Merges signals into the signals.\n    yield MergeSignals::new(\"{response: '', answer: 'bread'}\").into();\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Debounced Input Search Field in HTML\nDESCRIPTION: This code snippet shows an input field that triggers a GET request to fetch search results with a 1-second debounce. It uses data-bind-search to bind the input value and data-on-input__debounce modifier to delay requests until typing pauses.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/active_search.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-search data-on-input__debounce.1000ms=\"@get('/examples/active_search/data')\" placeholder=\"Search...\"\n  type=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Two-Way Data Binding with DataStar in HTML\nDESCRIPTION: This HTML snippet demonstrates how to use DataStar's data binding attributes with various input types including text, number, textarea, checkbox, select, and radio buttons. It also shows how to display the bound data in JSON format.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/model_binding.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\" data-signals=\"{text:'foo',number:42,bool:true,selection:1}\">\n  <input type=\"text\" data-bind-text />\n  <input type=\"number\" data-bind-number />\n  <textarea data-bind-text></textarea>\n  <label>\n    <span>Checkbox</span>\n    <input type=\"checkbox\" data-bind-bool />\n  </label>\n  <select data-bind-selection>\n    <option value=\"1\">Option 1</option>\n    <option value=\"2\">Option 2</option>\n    <option value=\"3\">Option 3</option>\n  </select>\n  <div class=\"flex flex-col\">\n    <label>\n      <input type=\"radio\" data-bind-selection value=\"1\" />\n      <span>Option 1</span>\n    </label>\n    <label>\n      <input type=\"radio\" data-bind-selection value=\"2\" />\n      <span>Option 2</span>\n    </label>\n    <label>\n      <input type=\"radio\" data-bind-selection value=\"3\" />\n      <span>Option 3</span>\n    </label>\n    ...\n  </div>\n  <code>\n    <pre data-text=\"ctx.signals.JSON()\"></pre>\n  </code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing SSE Time Updates with Datastar-py in Quart\nDESCRIPTION: Example implementation of a Quart route handler that uses datastar-py to generate SSE responses. Demonstrates both fragment merging and signal merging while sending periodic time updates.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/python/README.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datastar_py import ServerSentEventGenerator as SSE\n\n# ... various app setup. The example below is for the Quart framework\n\n@app.route(\"/updates\")\nasync def updates():\n    async def time_updates():\n        while True:\n            yield SSE.merge_fragments(\n                [f\"\"\"<span id=\"currentTime\">{datetime.now().isoformat()}\"\"\"]\n            )\n            await asyncio.sleep(1)\n            yield SSE.merge_signals({\"currentTime\": f\"{datetime.now().isoformat()}\"})\n            await asyncio.sleep(1)\n\n    response = await make_response(time_updates(), SSE_HEADERS)\n    response.timeout = None\n    return response\n```\n\n----------------------------------------\n\nTITLE: Detailed Fetch Indicator Implementation in HTML\nDESCRIPTION: This snippet provides a more detailed implementation of a fetch indicator, including CSS for the indicator's appearance and transition. It demonstrates the use of DataStar attributes for handling fetch states, disabling the button during fetch, and showing/hiding the loading indicator.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/indicator.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .indicator {\n        opacity:0;\n        transition: opacity 300ms ease-out;\n    }\n    .indicator.loading {\n        opacity:1;\n        transition: opacity 300ms ease-in;\n    }\n</style>\n<button\n  id=\"greetingBtn\"\n  data-indicator-fetching\n  data-on-click=\"@get('/examples/fetch_indicator/greet')\"\n  data-attr-disabled=\"$fetching\"\n>\n  Click me for a greeting\n</button>\n<div\n  class=\"indicator\"\n  data-class=\"{loading: $fetching}\"\n>\n    Loading Indicator\n</div>\n<div id=\"greeting\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Data Signals with HTML Attributes in Datastar\nDESCRIPTION: Demonstrates how to create and merge data signals using the data-signals attribute. Signals can be defined individually or as key-value pairs, and can use dot notation for namespacing.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-input=\"1\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-form.input=\"2\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{input: 1, form: {input: 2}}\"></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar locally\nDESCRIPTION: Including Datastar framework from a local path after downloading the bundle\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"/path/to/datastar.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Data Binding with data-bind Attribute in HTML\nDESCRIPTION: Demonstrates how to use the data-bind attribute for two-way data binding between HTML elements and signals. It covers different ways to specify the signal name and initial values.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-foo />\n```\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind=\"foo\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-foo value=\"bar\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo=\"baz\">\n  <input data-bind-foo value=\"bar\" />\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo=\"[]\">\n  <input data-bind-foo type=\"checkbox\" value=\"bar\" />\n  <input data-bind-foo type=\"checkbox\" value=\"baz\" />\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-my-signal__case.kebab />\n```\n\n----------------------------------------\n\nTITLE: Datastar Data Binding Example\nDESCRIPTION: Demonstrates basic Datastar syntax using data-* attributes for reactive UI elements. Shows data binding on an input, displaying transformed text, and handling a click event with a server request.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-title />\n<div data-text=\"$title.toUpperCase()\"></div>\n<button data-on-click=\"@post('/endpoint')\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: Using data-indicator for Loading States in Datastar\nDESCRIPTION: Demonstrates how to use the data-indicator attribute to show loading states during asynchronous operations. This example adds a loading indicator while fetching a quiz question.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"question\"></div>\n<button\n  data-on-click=\"@get('/actions/quiz')\"\n  data-indicator-fetching\n>\n  Fetch a question\n</button>\n<div data-class-loading=\"$fetching\" class=\"indicator\"></div>\n```\n\n----------------------------------------\n\nTITLE: DOM Manipulation Attributes in HTML\nDESCRIPTION: Shows DOM-related data attributes for two-way binding, class manipulation, event handling, and element visibility control.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\ndata-attr=\"attribute-expression\"\ndata-bind=\"signal-name\"\ndata-class=\"class-expression\"\ndata-on=\"event:expression\"\ndata-persist\ndata-ref=\"reference-name\"\ndata-replace-url\ndata-show=\"show-expression\"\ndata-text=\"text-expression\"\n```\n\n----------------------------------------\n\nTITLE: Complete Fragment Merge Event with Options\nDESCRIPTION: Shows all available options for the datastar-merge-fragments event including selector targeting, merge mode, and view transition settings.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/sse_events.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-merge-fragments\ndata: selector #foo\ndata: mergeMode append\ndata: useViewTransition true\ndata: fragments <div>\ndata: fragments Hello, world!\ndata: fragments </div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Scroll Into View with HTML Data Attributes\nDESCRIPTION: Demonstrates how to configure scroll behavior using data attributes. The example shows an instant scroll with vertical start alignment and horizontal center alignment. The data attribute controls scroll positioning and behavior without requiring JavaScript.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/scroll_into_view.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p data-scroll-into-view__instant__vstart__hcenter id=\"p10\"></p>\n```\n\n----------------------------------------\n\nTITLE: Polling with data-on-interval Attribute\nDESCRIPTION: Demonstrates how to implement polling using the data-on-interval attribute which executes a GET request every second. The .leading modifier ensures immediate first execution.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/polling.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-count=\"0\" data-on-interval__duration.1s.leading=\"@get('/endpoint')\">\n  Count: <span data-text=\"$count\"></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Triggering Browser Dialogs with DataStar in HTML\nDESCRIPTION: This snippet demonstrates how to use DataStar attributes to trigger browser prompt and confirm dialogs before making an HTTP request. It shows how to capture user input and use it to determine whether to proceed with the request.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/dialogs_browser.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"dialogs\" data-signals=\"{prompt:'foo',confirm:false}\"\n  data-on-click=\"$prompt=prompt('Enter a string',$prompt);$confirm=confirm('Are you sure?');$confirm && @get('/examples/dialogs__browser/sure')\">\n  Click Me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar via CDN Script Tag\nDESCRIPTION: A simple HTML script tag to include the Datastar framework from a CDN. The script is loaded as a module and is only 14.5 KiB in size.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"https://cdn.jsdelivr.net/gh/starfederation/datastar@v1.0.0-beta.11/bundles/datastar.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using Datastar Actions for Signal Manipulation\nDESCRIPTION: An example of using a Datastar action to manipulate multiple signals at once based on another signal's value.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/going_deeper.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@setAll('foo.*', $mysignal.toUpperCase())\">\n  Convert all to uppercase\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload with DataStar Signals\nDESCRIPTION: A file upload interface implementation using DataStar's signal-based approach. It uses data binding for automatic file encoding and handles multiple file uploads with automatic mime type and filename tracking. The implementation avoids form submission limitations by using signals to maintain file data.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/file_upload.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Removed styling for brevity -->\n<div id=\"file_upload\" data-on-load=\"@get('/examples/file_upload/data')\"\n  data-signals=\"{files: [], filesMimes: [], filesNames: []}\">\n  <div>\n    <label>\n      <span class=\"label-text\">Pick anything reasonably sized</span>\n    </label>\n    <input type=\"file\" data-bind=\"files\" multiple />\n    <button data-on-click=\"@post('/upload')\">\n      Submit\n    </button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sending HTML Fragments via Extended SSE Protocol for Datastar\nDESCRIPTION: This snippet demonstrates how HTML fragments are sent using the extended Server-Sent Events protocol in Datastar. It includes event metadata and a complete HTML structure for a tabbed interface, showcasing how server-driven updates can be pushed to the client.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/essays/event_streams_all_the_way_down.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nevent: datastar-merge-fragments\nid: 92680296792588350\ndata: mergeMode morph\ndata: fragment\n<div id=\"lazy_tabs\">\n  <div class=\"tabs tabs-bordered\">\n    <button\n      id=\"tab_0\"\n      class=\"tab tab-active\"\n      data-on-click=\"@get('/examples/lazy_tabs/data?tabId=0')\"\n    >\n      Tab 0</button\n    ><button\n      id=\"tab_1\"\n      class=\"tab\"\n      data-on-click=\"@get('/examples/lazy_tabs/data?tabId=1')\"\n    >\n      Tab 1</button\n    ><button\n      id=\"tab_2\"\n      class=\"tab\"\n      data-on-click=\"@get('/examples/lazy_tabs/data?tabId=2')\"\n    >\n      Tab 2</button\n    ><button\n      id=\"tab_3\"\n      class=\"tab\"\n      data-on-click=\"@get('/examples/lazy_tabs/data?tabId=3')\"\n    >\n      Tab 3</button\n    ><button\n      id=\"tab_4\"\n      class=\"tab\"\n      data-on-click=\"@get('/examples/lazy_tabs/data?tabId=4')\"\n    >\n      Tab 4</button\n    ><button\n      id=\"tab_5\"\n      class=\"tab\"\n      data-on-click=\"@get('/examples/lazy_tabs/data?tabId=5')\"\n    >\n      Tab 5</button\n    ><button\n      id=\"tab_6\"\n      class=\"tab\"\n      data-on-click=\"@get('/examples/lazy_tabs/data?tabId=6')\"\n    >\n      Tab 6</button\n    ><button\n      id=\"tab_7\"\n      class=\"tab\"\n      data-on-click=\"@get('/examples/lazy_tabs/data?tabId=7')\"\n    >\n      Tab 7\n    </button>\n  </div>\n  <div id=\"tab_content\" class=\"p-4 shadow-lg bg-base-200\">\n    <p>\n      Voluptas minima totam qui est ut. Fuga accusantium sint voluptatem nihil\n      asperiores. Saepe illo eveniet consequatur voluptatibus maxime. Voluptates\n      aut illo est recusandae omnis. Sit iure sunt et provident ut. Velit\n      quibusdam repellendus sed fugiat et.\n    </p>\n    <p>Possimus molestiae quaerat incidunt sapiente ipsam.</p>\n    <p>\n      Autem quis quia libero expedita accusantium. Tempora quia qui voluptatem\n      inventore repellendus. Sit officia aliquam laudantium similique delectus.\n      Non eos rerum quisquam voluptas ullam. Placeat dolores facere laborum non\n      fugit. Est neque earum eum aut non. Quia voluptas rerum quia perspiciatis\n      harum. Voluptatem et mollitia repellendus sed dicta.\n    </p>\n    <p>\n      Eos rerum harum hic sunt omnis. Est veniam est aut ex consequuntur. Est\n      qui inventore assumenda enim perferendis. Libero tenetur nisi quasi\n      recusandae rerum. Consectetur iste distinctio id accusamus quo. Enim\n      voluptatum rerum voluptas rem harum.\n    </p>\n    <p>\n      Consectetur eveniet ex quaerat velit et. Sint nesciunt temporibus minus\n      deserunt perferendis. Molestiae modi nulla ratione ea sapiente. Laboriosam\n      sed voluptatibus quo tenetur repudiandae. Accusamus culpa ipsa ab nihil\n      suscipit. Mollitia veritatis id consequatur dolorem rerum. Ratione atque\n      quia illum sunt repudiandae. Voluptate qui temporibus laborum nobis\n      officia. Voluptate unde sed culpa dolorem minus.\n    </p>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Row Structure in HTML for DataStar\nDESCRIPTION: HTML structure for an editable table row with input fields and action buttons. It includes data binding for form fields and buttons that trigger either a GET request to cancel editing or a PATCH request to save changes.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/edit_row.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tr id=\"contact_0\">\n  <td>\n    <input data-bind-name type=\"text\" />\n  </td>\n  <td>\n    <input data-bind-email type=\"text\" />\n  </td>\n  <td>\n    <button data-on-click=\"@get('/examples/edit_row/data')\">Cancel</button>\n    <button data-on-click=\"@patch('/examples/edit_row/edit')\">Save</button>\n  </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request with Datastar\nDESCRIPTION: Demonstrates how to use the @get() action to send a GET request to a backend endpoint. This action merges the response with the current DOM and signals.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/action_plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@get('/endpoint')\"></button>\n```\n\n----------------------------------------\n\nTITLE: Custom Form Validation with data-custom-validity Attribute in HTML\nDESCRIPTION: Shows how to use the data-custom-validity attribute to add custom form validation logic using expressions. It demonstrates comparing two input values for equality.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <input data-bind-foo name=\"foo\" />\n  <input data-bind-bar name=\"bar\" data-custom-validity=\"$foo === $bar ? '' : 'Field values must be the same.'\" />\n  <button>Submit form</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using Datastar's Declarative Attributes in HTML\nDESCRIPTION: This example demonstrates how to use Datastar's declarative data-* attributes to add frontend reactivity. It includes data binding, text interpolation, and event handling.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/library/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-title />\n<div data-text=\"$title.toUpperCase()\"></div>\n<button data-on-click=\"@post('/endpoint')\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: Element Referencing with data-ref Attribute in HTML\nDESCRIPTION: Demonstrates how to use the data-ref attribute to create signals referencing HTML elements. It shows different ways to specify the signal name and how to use the reference.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div data-ref-foo></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-ref=\"foo\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n`$foo` holds a <span data-text=\"$foo.tagName\"></span> element.\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-ref-my-signal__case.kebab></div>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Example with @setAll()\nDESCRIPTION: Shows practical implementation of @setAll() with checkboxes, allowing all checkboxes to be checked at once using a single button click.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" data-bind-checkboxes.checkbox1 /> Checkbox 1\n<input type=\"checkbox\" data-bind-checkboxes.checkbox2 /> Checkbox 2\n<input type=\"checkbox\" data-bind-checkboxes.checkbox3 /> Checkbox 3\n<button data-on-click=\"@setAll('checkboxes.*', true)\">Check All</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Action Options in Datastar\nDESCRIPTION: Demonstrates how to set various options for backend actions, including custom headers, local signal inclusion, and connection behavior when the page is hidden.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/action_plugins.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-click=\"@get('/endpoint', {\n  includeLocal: true,\n  headers: {\n    'X-Csrf-Token': 'JImikTbsoCYQ9oGOcvugov0Awc5LbqFsZW6ObRCxuqFHDdPbuFyc4ksPVVa9+EB4Ag+VU6rpc680edNFswIRwg==',\n  },\n  openWhenHidden: true,\n})\"></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-select Dropdown with DataStar Signal Binding\nDESCRIPTION: This code demonstrates how to create a multi-select dropdown that binds to a 'cars' signal in DataStar. The select element uses the 'multiple' attribute to allow selection of multiple options, and the data-bind-cars directive connects it to the cars array in signals.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/multi_select.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{cars:[]}\">\n  <select data-bind-cars multiple>\n    <option value=\"volvo\">Volvo</option>\n    <option value=\"saab\">Saab</option>\n    <option value=\"opel\">Opel</option>\n    <option value=\"audi\">Audi</option>\n  </select>\n  <pre data-text=\"ctx.signals.JSON()\">Signals</pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Class Manipulation with data-class Attribute in HTML\nDESCRIPTION: Shows how to use the data-class attribute to conditionally add or remove CSS classes based on expressions. It includes examples of single and multiple class manipulations.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-class-hidden=\"$foo\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-class=\"{hidden: $foo, 'font-bold': $bar}\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-class-my-class__case.camel=\"$foo\"></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy-Loaded Tabs with Datastar\nDESCRIPTION: This HTML snippet shows how to set up a div container that will load tab content via an AJAX request on page load. It uses Datastar's data-on-load attribute to fetch tab data from a specified endpoint.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/lazy_tabs.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"lazy_tabs\" data-on-load=\"@get('/examples/lazy_tabs/data')\"></div>\n```\n\n----------------------------------------\n\nTITLE: Global Configuration of Datastar\nDESCRIPTION: Shows how to set global configuration options for Datastar, including error handling and heartbeat intervals.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nDatastar.configure do |config|\n  # Global on_error callback\n  # Can be overriden on specific instances\n  config.on_error do |exception|\n    Sentry.notify(exception)\n  end\n  \n  # Global heartbeat interval (or false, to disable)\n  # Can be overriden on specific instances\n  config.heartbeat = 0.3\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Visibility with data-show Attribute in HTML\nDESCRIPTION: Shows how to use the data-show attribute to conditionally show or hide elements based on expressions. It includes a tip for preventing initial flickering.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div data-show=\"$foo\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-show=\"$foo\" style=\"display: none\"></div>\n```\n\n----------------------------------------\n\nTITLE: Form Submission Using data-on-submit in DataStar\nDESCRIPTION: This HTML snippet shows how to submit form data by attaching the data-on-submit attribute directly to the form element. When the form is submitted, it will trigger a GET request with the form data to the specified endpoint.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/form_data.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form data-on-submit=\"@get('/endpoint', {contentType: 'form'})\">\n  <input name=\"bar\" placeholder=\"Type bar contents\" required />\n  <button>\n    Submit form\n  </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Server Response Format for Infinite Scroll in DataStar\nDESCRIPTION: Example of the server response format for infinite scroll functionality. It uses server-sent events (SSE) with custom datastar-merge-fragments events to update the DOM by morphing the trigger element and appending new content rows.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/infinite_scroll.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nevent: datastar-merge-fragments\ndata: selector #more_btn\ndata: mergeMode morph\ndata: fragments <div data-on-intersect=\"$offset=10;$limit=10;@get('/examples/infinite_scroll/data')\" id=\"more_btn\">\n  <div>Loading...</div>\n</div>\n\nevent: datastar-merge-fragments\ndata: selector #click_to_load_rows\ndata: mergeMode append\ndata: fragments <tr id=\\\"agent_60\\\">\n  <td>Agent Smith 3c</td>\n  <td>void61@null.org</td>\n  <td class=\\\"uppercase\\\">39b02fcf39c047c5</td>\n</tr>\"\n\n....More rows to be appended\n```\n\n----------------------------------------\n\nTITLE: Implementing Throttling with RequestAnimationFrame in HTML\nDESCRIPTION: Example shows how to throttle updates to a timestamp value using the data-on-raf__throttle directive with a 500ms delay. The code updates a tick value based on the current timestamp but limits the frequency of updates.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/debounce_and_throttle.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{tick:0}\" data-on-raf__throttle.500ms=\"$tick = (new Date()).getTime()\">\n    <div data-text=\"$tick\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Element with DataStar\nDESCRIPTION: A basic HTML implementation showing how to lazy load content using DataStar's data-on-load attribute. The element initially displays a loading indicator and then fetches content from the specified endpoint.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/lazy_load.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-load=\"@get('/examples/lazy_load/graph')\">\n  Loading...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Signal Values with @setAll in Datastar\nDESCRIPTION: Illustrates various ways to use the @setAll() action to set values of signals, including using wildcards for path matching.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/action_plugins.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!-- Sets the value of `$foo` -->\n<div data-signals-foo=\"false\">\n  <button data-on-click=\"@setAll('foo', $bar)\"></button>\n</div>\n\n<!-- Sets the value of `$foo.bar.baz` -->\n<div data-signals-foo.bar.baz=\"false\">\n  <button data-on-click=\"@setAll('foo.*.baz', true)\"></button>\n</div>\n\n<!-- Sets the value of `$foo.bar.baz` -->\n<div data-signals-foo.bar.baz=\"false\">\n  <button data-on-click=\"@setAll('foo.**', true)\"></button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Conditional Show/Hide\nDESCRIPTION: Using data-show attribute for conditional element visibility\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-input />\n<button data-show=\"$input != ''\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: Binding Ctrl+K and Enter Key Events in HTML\nDESCRIPTION: This HTML snippet demonstrates how to bind key events directly to HTML elements using data attributes. It shows examples for binding Ctrl+K and Enter key presses to trigger alert messages.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/bind_keys.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<h1 data-on-keydown__window=\"evt.ctrlKey && evt.key =='k' && alert('you hit the cheat code!')\">Press Ctrl+K</h1>\n<h1 data-on-keydown__window=\"evt.key == 'Enter' && alert('you hit the other code!')\">Press Enter</h1>\n```\n\n----------------------------------------\n\nTITLE: Loading Inline Validation Component with DataStar\nDESCRIPTION: A div element that loads inline validation functionality using DataStar's data-on-load attribute to fetch initial data from the server endpoint. The component will accept only 'test@test.com' as a valid email address.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/inline_validation.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"inline_validation\" data-on-load=\"@get('/examples/inline_validation/data')\"></div>\n```\n\n----------------------------------------\n\nTITLE: Computed Data Example\nDESCRIPTION: Using data-computed attribute to create computed signals based on reactive expressions\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-input />\n<div data-computed-repeated=\"$input.repeat(2)\">\n    <div data-text=\"$repeated\">\n        Will be replaced with the contents of the repeated signal\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sending PUT Request with Datastar\nDESCRIPTION: Illustrates how to use the @put() action to send a PUT request to a backend endpoint. It functions like @get() but uses the PUT method.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/action_plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@put('/endpoint')\"></button>\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with Datastar\nDESCRIPTION: Shows the usage of the @post() action to send a POST request to a backend endpoint. It works similarly to @get() but uses the POST method.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/action_plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@post('/endpoint')\"></button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Row Table Structure in HTML\nDESCRIPTION: HTML structure for a table with delete functionality. Each row contains a delete button that triggers a confirmation dialog before performing the delete action via a DataStar delete request.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/delete_row.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Email</th>\n      <th>Status</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr id=\"contact_0\">\n      <td>Joe Smith</td>\n      <td>joe@smith.org</td>\n      <td>Active</td>\n      <td>\n        <button data-on-click=\"confirm('Are you sure?') && @delete('/examples/delete_row/data/0')\">\n          Delete\n        </button>\n      </td>\n    </tr>\n    ...\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Button Disabling with DataStar Signals\nDESCRIPTION: HTML markup that uses DataStar signals to control a button's disabled state. When clicked, the button sets a signal to disable itself and triggers a server request. The data-attr-disabled attribute binds to the signal value to toggle the disabled attribute.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/disable_button.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\" data-signals=\"{shouldDisable:false}\">\n  <button\n    id=\"target\"\n    data-on-click=\"$shouldDisable=true; @get('/examples/disable_button/data')\"\n    data-attr-disabled=\"$shouldDisable\"\n  >Click Me</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Signal ID Inheritance Example\nDESCRIPTION: Demonstrates nested HTML elements with signal IDs using data-signals-id__ifmissing attributes. The inner span element will display the parent ID '1234' even though its immediate parent has ID '5678', showing the inheritance behavior.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/signals_ifmissing_onload.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-id__ifmissing=\"1234\">\n  <div data-signals-id__ifmissing=\"5678\">\n    Should always be 1234:\n    <span data-text=\"$id\"></span>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fetch Indicator Demo in HTML\nDESCRIPTION: This snippet demonstrates a button that triggers a greeting fetch request, with a loading indicator that appears during the request. It uses DataStar attributes for handling the fetch state and updating the UI.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/indicator.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"flex flex-col gap-4\">\n  <div class=\"flex gap-2\">\n    <button class=\"flex-1 btn btn-primary\" data-indicator-fetching data-on-click=\"@get('/examples/fetch_indicator/greet')\" data-attr-disabled=\"$fetching\" >\n      Click me for a greeting\n    </button>\n    <div class=\"loading-dots text-primary\" data-class=\"{'loading ml-4': $fetching}\"></div>\n  </div>\n  <div id=\"greeting\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Cloak Technique for Seamless Element Transitions in Datastar\nDESCRIPTION: This snippet demonstrates how to prevent element flickering during page load by applying a CSS cloak class initially and removing it through Datastar's data-class directive. The technique uses CSS opacity and transition properties to create a smooth appearance effect.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/cloak.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .cloak {\n      opacity: 0;\n      transition: opacity 2s ease-in;\n  }\n</style>\n\n<div\n  class=\"cloak\"\n  data-class=\"{cloak:false}\"\n>\n  Cloaked text\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing View Transition Animation with HTML and DOM Signals\nDESCRIPTION: HTML structure that implements a view transition animation using DOM signals. The code includes a browser compatibility check for View Transition API and a button that triggers a fade out animation when clicked. Uses data-signals for state management and data-show for conditional rendering.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/view_transition_on_click.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{show: true}\">\n  <div data-text=\"`View Transition API supported in browser? ` + !!document.startViewTransition\"></div>\n  <div data-show=\"$show\">\n    <button class=\"btn btn-accent\" data-on-click__viewtransition=\"$show = false\">\n      Fade out\n    </button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Image Source Binding with Template Literals in HTML\nDESCRIPTION: Demonstrates binding a dynamic image source using template literals and data signals, with a random number generator implementation. The example uses Picsum Photos API for image display and includes min/max constraints for the random number generation.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/img_src_bind.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"file_upload\" data-signals=\"{id: 237, min: 1, max: 1024}\">\n  <img data-attr-src=\"`https://picsum.photos/id/${$id}/640/320`\" />\n  <input\n    type=\"number\"\n    step=\"1\"\n    data-attr=\"{min: $min, max: $max}\"\n    data-bind-id\n  />\n  <button data-on-click=\"$id = @fit(Math.random(), 0, 1, $min, $max, true, true)\">\n    Random\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Namespaced Signals for State Management\nDESCRIPTION: An example of using namespaced signals to manage menu state and toggle multiple signals at once.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/going_deeper.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{menu: {isopen: {desktop: false, mobile: false}}}\">\n  <button data-on-click=\"@toggleAll('menu.isopen.*')\">\n    Open/close menu\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing DataStar with HTML for Data Binding and Persistence\nDESCRIPTION: This HTML snippet demonstrates the use of DataStar for data binding and persistence. It includes a div element with data-signals and data-persist attributes, input elements with data-bind attributes, and a pre element for JSON output. The example shows how to bind inputs to a namespace and persist specific values in Local Storage.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/persist.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  data-signals=\"{namespace: {test1: 'foo', test2: 'bar', test3: 'baz'}}\"\n  data-persist=\"namespace.test1 namespace.test3\"\n>\n  <input data-bind=\"namespace.test1\" />\n  <input data-bind=\"namespace.test2\" />\n  <input data-bind=\"namespace.test3\" />\n  <pre data-text=\"ctx.signals.JSON()\">Replace me</pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Updating UI with RequestAnimationFrame in DataStar\nDESCRIPTION: This HTML snippet demonstrates how to use the data-on-raf attribute to update a timestamp on every animation frame. It creates a real-time clock by updating the currentTime signal and displaying it in a formatted string. The example also includes a pre element showing the JSON representation of all signals.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/raf_update.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{currentTime:Date.now()}\" data-on-raf=\"$currentTime = Date.now()\">\n  <div id=\"time\">\n    Current Time:\n    <span data-text=\"new Date($currentTime).toLocaleString()\">will be replaced by current time</span>\n  </div>\n  <pre data-text=\"ctx.signals.JSON()\"></pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Complete Reactive Button Example with Results Container\nDESCRIPTION: A more complete HTML example showing a button that disables itself on click and includes a container for displaying server results. The example demonstrates how DataStar signals provide reactivity that would require additional code in other frameworks.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/disable_button.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\" data-signals=\"{shouldDisable:false}\">\n  <button\n    id=\"target\"\n    data-on-click=\"$shouldDisable = true;@get('/examples/disable_button/data')\"\n    data-attr-disabled=\"$shouldDisable\"\n  >\n    Click Me\n  </button>\n  <div id=\"results\">\n    <h1>Results from server</h1>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Namespaced Signals in Datastar\nDESCRIPTION: Examples of different ways to create and use namespaced signals in Datastar.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/going_deeper.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo.bar=\"1\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{foo: {bar: 1}}\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-foo.bar />\n```\n\n----------------------------------------\n\nTITLE: Polling with data-on-load Attribute\nDESCRIPTION: Shows an alternative polling implementation using data-on-load with delay modifier, allowing backend control of polling frequency for better back-pressure management.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/polling.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-count=\"0\" data-on-load__delay.1s=\"@get('/endpoint')\">\n  Count: 0\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Load More Button with DataStar\nDESCRIPTION: HTML button implementation that triggers loading of additional data with pagination parameters. The button uses data-on-click attribute to set offset and limit values before making a GET request.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/click_to_load.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"more_btn\" data-on-click=\"$offset=30; $limit=10; @get('/examples/click_to_load/data')\">\\n  Load More\\n</button>\n```\n\n----------------------------------------\n\nTITLE: Checking for Enter Key Press in HTML\nDESCRIPTION: This code demonstrates how to use the evt.key property to check if the Enter key was pressed before showing an alert.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_bind_keydown_events_to_specific_keys.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-keydown__window=\"evt.key === 'Enter' && alert('Key pressed')\"></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Offline Sync with DataStar Attributes in HTML\nDESCRIPTION: This HTML snippet demonstrates how to create a component with offline synchronization capabilities using DataStar. It uses data-persist to store signals in localStorage, and event listeners to handle online/offline states. When online, it syncs data using a PUT request.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/offline_sync.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-signals='{\"existingSignals\":\"this will persist in the signals even without network\"}'\n  data-persist\n  data-on-online__window=\"console.log('online, syncing'); @put('/examples/offline_sync/sync')\"\n  data-on-offline__window=\"console.log('offline')\"\n>\n  <div id=\"results\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Event Context Usage\nDESCRIPTION: Demonstrates accessing event properties within Datastar expressions using the evt object.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/datastar_expressions.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<input data-on-input=\"$value = evt.target.value\">\n```\n\n----------------------------------------\n\nTITLE: Triggering Backend Requests with Datastar Actions\nDESCRIPTION: An example of using the @get action to send a GET request to the backend and handle the response as an event stream.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/going_deeper.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@get('/endpoint')\"></button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom View Transitions with CSS Animations\nDESCRIPTION: Defines a set of CSS animations and view transition rules for creating smooth fade and slide effects. Includes keyframe animations for opacity and transform transitions, with specific timing functions and durations for both old and new content states.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/view_transition_api.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@keyframes fade-in {\n  from { opacity: 0; }\n}\n\n@keyframes fade-out {\nto { opacity: 0; }\n}\n\n@keyframes slide-from-right {\nfrom { transform: translateX(90px); }\n}\n\n@keyframes slide-to-left {\nto { transform: translateX(-90px); }\n}\n\n::view-transition-old(slide-it) {\nanimation: 180ms cubic-bezier(0.4, 0, 1, 1) both fade-out,\n600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;\n}\n\n::view-transition-new(slide-it) {\nanimation: 420ms cubic-bezier(0, 0, 0.2, 1) 90ms both fade-in,\n600ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-right;\n}\n\n::view-transition-old(root),\n::view-transition-new(root) {\nanimation-duration: 0.5s;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Prefetching for Pokemon Carousel in Go\nDESCRIPTION: This Go function handles the initial load of the carousel and prefetches additional Pokemon images. It uses DataStar's SSE functionality to merge the initial carousel fragment and then prefetch the remaining image URLs.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/prefetch.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nexamplesRouter.Get(\"/prefetch/load\", func(w http.ResponseWriter, r *http.Request) {\n  sse := datastar.NewSSE(w, r)\n\n  // render the carousel with the first image\n  sse.MergeFragmentTempl(prefetchCarousel(1))\n\n  // create a list of URLs to prefetch\n  prefetchURLs := make([]string, 0, pokemonCount)\n  for i := 2; i <= pokemonCount; i++ {\n    prefetchURLs = append(prefetchURLs, fmt.Sprintf(pokemonURLFormat, i))\n  }\n  // prefetch the images\n  sse.Prefetch(prefetchURLs...)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous External Script with Datastar\nDESCRIPTION: Shows implementation of asynchronous function integration with Datastar using custom events for result handling. Demonstrates proper event dispatching pattern.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/stop_overcomplicating_it.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-result=\"''\"\n     data-on-mycustomevent__window=\"$result = evt.detail.value\"\n>\n  <input data-bind-foo \n         data-on-input=\"myfunction($foo)\"\n  >\n  <span data-text=\"$result\"></span>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nasync function myfunction(data) {\n  const value = await new Promise((resolve) => {\n    setTimeout(() => resolve(`You entered ${data}`), 1000);\n  });\n  window.dispatchEvent(\n    new CustomEvent('mycustomevent', {detail: {value}})\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling SSE Events in Datastar\nDESCRIPTION: Shows how to handle Server-Sent Events (SSE) in Datastar, specifically logging errors when they occur during an SSE request.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/action_plugins.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-datastar-sse=\"evt.detail.type == 'error' && console.log('SSE error encountered')\"></div>\n```\n\n----------------------------------------\n\nTITLE: Initial Select Implementation with DataStar\nDESCRIPTION: Initial HTML structure for the cascading select implementation showing the make dropdown with default values. Uses data-signals for state management and data-on-change for triggering updates.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/value_select.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"value_select\" data-signals='{\"make\":\"\",\"model\":\"\"}'>\n  <div>Pick a Make / Model</div>\n  <select data-bind=\"make\" data-on-change=\"@get('/examples/value_select/data')\">\n    <option disabled>Select a Make</option>\n    <option value=\"HYAABHANLTMQC\">Audi</option>\n    <option value=\"HZAABHANLTMQC\">Toyota</option>\n    <option value=\"H2AABHANLTMQC\">Ford</option>\n  </select>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Only Row Structure in HTML for DataStar\nDESCRIPTION: HTML structure for a read-only table row that includes user information and an edit button. The edit button uses the data-on-click attribute to set an editRowIndex variable and trigger a GET request to load the editable view.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/edit_row.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tr id=\"contact_0\">\n  <td>Joe Smith</ /td>\n  <td>joe@smith.org</td>\n  <td>\n    <button data-on-click=\"$editRowIndex=0;@get('/examples/edit_row/edit')\">Edit</button>\n  </td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Component with Custom Events in Datastar\nDESCRIPTION: Demonstrates creation and integration of a web component with Datastar using custom events for data communication. Shows attribute observation and event dispatching.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/stop_overcomplicating_it.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-result=\"''\">\n  <input data-bind-foo />\n  <my-component\n      data-attr-src=\"$foo\"\n      data-on-mycustomevent=\"$result = evt.detail.value\"\n  ></my-component>\n  <span data-text=\"$result\"></span>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyComponent extends HTMLElement {\n  static get observedAttributes() {\n    return ['src'];\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    const value = `You entered ${newValue}`;\n    this.dispatchEvent(\n      new CustomEvent('mycustomevent', {detail: {value}})\n    );\n  }\n}\n\ncustomElements.define('my-component', MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Attribute Order Examples in HTML\nDESCRIPTION: Demonstrates the correct and incorrect ordering of data-* attributes in DOM evaluation. Shows how signals must be defined before they are used due to depth-first DOM traversal.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- This works: -->\n<div data-signals-foo=\"1\" data-text=\"$foo\"></div>\n\n<!-- This works: -->\n<div data-signals-foo=\"1\"></div>\n<div data-text=\"$foo\"></div>\n\n<!-- This works: -->\n<div data-signals-foo=\"1\">\n  <div data-text=\"$foo\"></div>\n</div>\n\n<!-- This does NOT work: -->\n<div data-text=\"$foo\" data-signals-foo=\"1\"></div>\n\n<!-- This does NOT work: -->\n<div data-text=\"$foo\"></div>\n<div data-signals-foo=\"1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic List Loading Structure in HTML\nDESCRIPTION: Sets up the initial HTML structure with a list container and load more button. Uses data-signals-offset for tracking position and data-on-click for triggering GET requests.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_load_more_list_items.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"list\">\n    <div>Item 1</div>\n</div>\n<button id=\"load-more\" \n        data-signals-offset=\"1\" \n        data-on-click=\"@get('/how_tos/load_more/data')\">\n    Click to load another item\n</button>\n```\n\n----------------------------------------\n\nTITLE: Displaying Contact Information with Edit Button in DataStar\nDESCRIPTION: HTML structure showing the read-only view of contact information with buttons to edit or reset the contact. The div contains labels for displaying contact details and buttons that trigger GET requests to edit or reset endpoints.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/click_to_edit.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Removed styling -->\n<div id=\"contact_1\">\n  <label>First Name: John</label>\n  <label>Last Name: Doe</label>\n  <label>Email: joe@blow.com</label>\n  <div>\n    <button data-on-click=\"@get('/examples/click_to_edit/contact/1/edit')\">\n      Edit\n    </button>\n    <button data-on-click=\"@get('/examples/click_to_edit/contact/1/reset')\">\n      Reset\n    </button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Intersection Observer with data-on-intersect Attribute in HTML\nDESCRIPTION: Demonstrates the usage of the data-on-intersect attribute to run expressions when an element intersects with the viewport. It includes various modifiers for controlling intersection behavior.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-intersect=\"$intersected = true\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-intersect__once__full=\"$fullyIntersected = true\"></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar via NPM\nDESCRIPTION: Command to install Datastar using NPM package manager\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @starfederation/datastar\n```\n\n----------------------------------------\n\nTITLE: Sending Server-Sent Events with Custom Options\nDESCRIPTION: Examples of sending events with custom event IDs and retry durations. These options allow for more control over event handling on the client side.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/java/README.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// custom event id\ngenerator.send(event, \"custom-id\");\n\n// custom retry duration\ngenerator.send(event, 2000);\n\n// both custom\ngenerator.send(event, \"custom-id\", 2000);\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Casing with DataStar HTML Attributes\nDESCRIPTION: This HTML code demonstrates how to use the __case suffix with data-signals attributes to control key casing in DataStar. The example shows default casing alongside kebab-case, snake_case, and PascalCase transformations using the appropriate suffixes.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/key_casing.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-signals-foo-foo=\"1\"\n  data-signals-foo-bar__case.kebab=\"1\"\n  data-signals-foo-baz__case.snake=\"1\"\n  data-signals-foo-boo__case.pascal=\"1\"\n>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Form Validation with DataStar Signals\nDESCRIPTION: This code snippet demonstrates how to implement custom form validation using DataStar's signal binding and custom validity attributes. It creates a form with two input fields where the first field is validated against the second field to ensure they contain the same value. The validation expression uses a ternary operator to check if the values match.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/custom_validity.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form data-signals-bar=\"\" data-on-submit=\"@get('/endpoint', {contentType: 'form'})\">\n  <input data-bind-foo data-custom-validity=\"$foo === $bar ? '' : 'Field values must be the same.'\" name=\"foo\" required />\n  <input data-bind-bar name=\"bar\" />\n  <button>\n    Submit form\n  </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Interval Execution with data-on-interval Attribute in HTML\nDESCRIPTION: Shows how to use the data-on-interval attribute to run expressions at regular intervals. It includes modifiers for setting the interval duration and execution behavior.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-interval=\"$count++\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-interval__duration.500ms=\"$count++\"></div>\n```\n\n----------------------------------------\n\nTITLE: Data Text Binding Example\nDESCRIPTION: Demonstration of data-text attribute to display bound input value\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-input />\n<div data-text=\"$input\">\n  I will be replaced with the contents of the input signal\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Scroll Trigger Element with DataStar\nDESCRIPTION: HTML code for the trigger element that loads more content when scrolled into view. It uses a custom data-on-intersect attribute to make a GET request with pagination parameters when the element becomes visible.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/infinite_scroll.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-intersect=\"$offset=0;$limit=10;@get('/examples/infinite_scroll/data')\" id=\"more_btn\">\n  <div>Loading...</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bad Apple ASCII Animation with Datastar Signal Binding\nDESCRIPTION: HTML code for displaying the Bad Apple ASCII animation using Datastar. The implementation uses data-signals for state management, data-on-load to trigger the initial data fetch, and data-bind/data-text for updating the DOM elements. The animation content is streamed to a pre tag while a progress bar shows completion percentage.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/bad_apple.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"contents\" data-signals=\"{_contents: 'bad apple frames go here', percentage: 0}\"\n  data-on-load=\"@get('/examples/bad_apple/updates')\">\n  <div>\n    <input type=\"range\" min=\"1\" max=\"100\" data-bind=\"percentage\" disabled />\n    <div><span data-text=\"$percentage.toFixed(2)\"></span>%</div>\n  </div>\n  <div>\n    <pre data-text=\"$_contents\"></pre>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Storage with Datastar Signals\nDESCRIPTION: HTML component that demonstrates session storage persistence using data-persist__session attribute. The example shows how to initialize session data and implement a counter that increments on each animation frame.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/session_storage.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{sessionId:1234, count:0}\" data-persist__session data-on-raf=\"$count++\"></div>\n```\n\n----------------------------------------\n\nTITLE: Basic On-Load Request Implementation in HTML\nDESCRIPTION: Demonstrates how to use the data-on-load attribute to make a POST request when an element loads. The element contains fallback content that displays before the request completes.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/on_load.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"replaceMe\" data-on-load=\"@post('/examples/on_load/data')\">\n  No session data\n</div>\n```\n\n----------------------------------------\n\nTITLE: Signal Property Access\nDESCRIPTION: Shows how to access properties of signal values using JavaScript dot notation.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/datastar_expressions.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-text=\"$foo.length\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using ServerSentEventGenerator in PHP for DOM manipulation and script execution\nDESCRIPTION: This snippet demonstrates how to use the ServerSentEventGenerator class to merge HTML fragments, remove fragments, merge and remove signals, execute JavaScript, and redirect the browser. It includes various methods like mergeFragments, removeFragments, mergeSignals, removeSignals, executeScript, and location.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/php/README.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse starfederation\\datastar\\enums\\EventType;\nuse starfederation\\datastar\\enums\\FragmentMergeMode;\nuse starfederation\\datastar\\ServerSentEventGenerator;\n\n// If your framework has its own way of sending response headers, you must manually send the headers returned by `ServerSentEventGenerator::headers()` before creating a new instance of `ServerSentEventGenerator`.\n\n// Creates a new `ServerSentEventGenerator` instance.\n$sse = new ServerSentEventGenerator();\n\n// Merges HTML fragments into the DOM.\n$sse->mergeFragments('<div></div>', [\n    'selector' => '#my-div',\n    'mergeMode' => FragmentMergeMode::Append,\n    'useViewTransition' => true,\n]);\n\n// Removes HTML fragments from the DOM.\n$sse->removeFragments('#my-div');\n\n// Merges signals.\n$sse->mergeSignals('{foo: 123}', [\n    'onlyIfMissing' => true,\n]);\n\n// Removes signals.\n$sse->removeSignals(['foo', 'bar']);\n\n// Executes JavaScript in the browser.\n$sse->executeScript('console.log(\"Hello, world!\")');\n\n// Redirects the browser by setting the location to the provided URI.\n$sse->location('/guide');\n```\n\n----------------------------------------\n\nTITLE: Updated Select Implementation with Model Options\nDESCRIPTION: Updated HTML structure showing both make and model dropdowns after a make selection. Demonstrates how the model select is populated with options specific to the selected make (Toyota in this example).\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/value_select.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"value_select\" data-signals='{\"make\":\"HZAABHANLTMQC\",\"model\":\"\"}'>\n  <div>Pick a Make / Model</div>\n  <select data-bind=\"make\" data-on-change=\"@get('/examples/value_select/data')\">\n    <option disabled>Select a Make</option>\n    <option value=\"HYAABHANLTMQC\">Audi</option>\n    <option value=\"HZAABHANLTMQC\">Toyota</option>\n    <option value=\"H2AABHANLTMQC\">Ford</option>\n  </select>\n  <select data-bind=\"model\" data-on-change=\"@get('/examples/value_select/data')\">\n    <option disabled=\"\" selected=\"\" value=\"\">Select a Model</option>\n    <option value=\"HZIABHANLTMQC\">Land Cruiser</option>\n    <option value=\"HZQABHANLTMQC\">Corolla</option>\n    <option value=\"HZYABHANLTMQC\">Camry</option>\n  </select>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Outside Behavior with DataStar Attributes\nDESCRIPTION: This snippet demonstrates how to use the __outside modifier with DataStar attributes to detect clicks outside an element. The example shows a toggle functionality where clicking outside a visible element closes it. It uses data-signals-open to track state, data-on-click__outside to handle outside clicks, and data-show for conditional visibility.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/click_outside.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-open=\"false\" data-on-click__outside=\"$open ? $open = false : null\" >\n  <div data-show=\"$open\" class=\"p-10 bg-green-700\">\n    <div class=\"p-10 bg-red-700\">\n      Click anywhere outside the green box to close\n    </div>\n  </div>\n  <button data-on-click=\"$open = true\" data-show=\"!$open\">\n    Open a box\n  </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Debouncing for Click Events in HTML\nDESCRIPTION: Demonstrates debouncing of button click events using the data-on-click__debounce directive with a 500ms delay. The code increments a counter but only processes clicks that occur after the specified delay with no intervening clicks.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/debounce_and_throttle.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button data-signals=\"{clicks:0}\" data-on-click__debounce.500ms=\"$clicks++\">\n    Debounced button clicked\n    <span data-text=\"$clicks\"></span>\n    times\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Component with Value Binding in Datastar\nDESCRIPTION: Shows how to implement a web component with direct value binding in Datastar using the change event pattern. Demonstrates attribute observation and value updates.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/stop_overcomplicating_it.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-foo />\n<my-component\n    data-attr-src=\"$foo\"\n    data-bind-result\n></my-component>\n<span data-text=\"$result\"></span>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyComponent extends HTMLElement {\n  static get observedAttributes() {\n    return ['src'];\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    this.value = `You entered ${newValue}`;\n    this.dispatchEvent(new Event('change'));\n  }\n}\n\ncustomElements.define('my-component', MyComponent);\n```\n\n----------------------------------------\n\nTITLE: HTML Element Referencing Using Data Attributes\nDESCRIPTION: Shows how to use data-ref-foo attribute to create a reference to an element and data-text attribute for dynamic content interpolation. The referenced element's content can be accessed through a $foo signal.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/refs.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <div data-ref-foo>I'm a div that is getting referenced</div>\n  <div data-text=\"`I'm using content of '${$foo.innerHTML}'`\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Interval Polling with DataStar HTML Attributes\nDESCRIPTION: Demonstrates how to set up a 5-second polling interval to fetch data from an endpoint while also allowing manual refresh. Uses data-signals-count for state management and data-on-interval for timed polling.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/timing.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-count=\"0\" data-on-interval__duration.5s.leading=\"@get('/examples/polling/interval')\" class=\"text-primary\">\n  <div>Count increments every 5s: <span data-text=\"$count\"></span></div>\n  <button data-on-click=\"@get('/examples/polling/interval')\" class=\"btn btn-primary\">Manual override (should not disrupt the interval)</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Listening for Custom Events from Server in HTML\nDESCRIPTION: This snippet demonstrates how to set up a div element to listen for a custom event dispatched from the server. It uses the data-on-load attribute to trigger a server request and displays the event details in a pre element.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/dispatch_custom_event.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-on-load=\"@get('/examples/dispatch_custom_event/events')\">\n    <div>Custom event \"example-event-from-server\" detail from server:</div>\n    <pre class=\"mockup-code\" id=\"container\"></pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Selective Data Persistence\nDESCRIPTION: Demonstrates persisting specific signals by providing space-separated values.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_25\n\nLANGUAGE: html\nCODE:\n```\n<div data-persist=\"foo bar\"></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Data Submission with Buttons in DataStar\nDESCRIPTION: This HTML snippet demonstrates how to submit form data using buttons with the contentType:'form' option. It shows how to trigger GET and POST requests from buttons inside the form, and how to target a specific form from outside using the selector option.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/form_data.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form>\n  <input name=\"foo\" required placeholder=\"Type foo contents\" />\n  <button data-on-click=\"@get('/endpoint', {contentType: 'form'})\">\n    Submit GET request\n  </button>\n  <button data-on-click=\"@post('/endpoint', {contentType: 'form'})\">\n    Submit POST request\n  </button>\n</form>\n\n<button data-on-click=\"@get('/endpoint', {contentType: 'form', selector: '#myform'})\">\n  Submit GET request from outside the form\n</button>\n```\n\n----------------------------------------\n\nTITLE: Copying to Clipboard with Datastar\nDESCRIPTION: Demonstrates the use of the @clipboard() action to copy a string to the clipboard when an element is clicked.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/action_plugins.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-click=\"@clipboard('Hello, world!')\"></div>\n```\n\n----------------------------------------\n\nTITLE: Basic Signal Usage in HTML\nDESCRIPTION: Demonstrates basic signal definition and usage in Datastar using data-signals-foo attribute to define a signal and data-text to display it.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/datastar_expressions.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo=\"1\">\n  <div data-text=\"$foo\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Interactive Signal Update Interface in HTML\nDESCRIPTION: HTML structure for demonstrating signal updates with buttons for applying and removing signals, including a pre-formatted display area for showing current signal state.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/update_signals.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals='{\"existingSignals\": \"this already exists\"}'>\n     <button class=\"btn btn-success\" data-on-click=\"@post('/examples/update_signals/data')\">\n          Apply random signals\n     </button>\n     <button class=\"btn btn-error\" data-on-click=\"@delete('/examples/update_signals/data')\">\n          Remove 2 random signals\n     </button>\n\n     <pre class=\"border-2 border-accent bg-base-200 text-accent text-sm rounded-lg focus:ring-primary focus:border-primary block w-full p-2.5\"\n          data-text=\"ctx.signals.JSON()\" data-on-signal-change=\"ctx.el.textContent = ctx.signals.JSON()\">\n          Stuff in signals\n     </pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Blinking Effect with DataStar Signals and Computed Properties\nDESCRIPTION: Demonstrates how to create a blinking effect using DataStar's signal system. Uses a counter that increments every 500ms through RAF (RequestAnimationFrame) throttling, and a computed property that toggles based on the counter's even/odd status to control CSS classes.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/classes.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{count:0}\" data-on-raf__throttle.500ms=\"$count++\" data-computed-blinker=\"$count % 2 === 0\">\n    <div data-text=\"$count\">Count</div>\n    <div data-class=\"{'text-primary': $blinker,'font-bold': $blinker}\">\n        Remake blink tag\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Replacing URL with Signals in HTML using DataStar\nDESCRIPTION: This HTML snippet demonstrates how to use DataStar's data-replace-url attribute to update the browser's URL based on a signal value. It increments a 'page' signal every second and updates the URL accordingly.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/replace_url_from_signals.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{page: 0}\" data-on-raf__throttle.1s=\"$page++\"\n    data-replace-url=\"`/examples/replace_url_from_signals?page=${$page}`\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure with Data Binding\nDESCRIPTION: Defines the HTML structure for the string reversal demo using data-signals for state management and data binding. Includes an input field, display area for reversed text, and the custom reverse-component.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/web_component.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{name:'',reversed:''}\">\n  <input data-bind-name />\n  <span data-text=\"$reversed\"></span>\n  <reverse-component\n    data-attr-name=\"$name\"\n    data-on-reverse=\"$reversed = evt.detail.value\"\n  ></reverse-component>\n</div>\n<script type=\"module\" src=\"/static/js/web_component.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataStar Execute Script Event\nDESCRIPTION: This snippet defines the configuration for a DataStar event that executes a JavaScript script. It specifies the event name, ID, retry interval, script attributes, and the script content to be executed.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/executeScriptWithAllOptions/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nevent: datastar-execute-script\nid: event1\nretry: 2000\ndata: attributes type text/javascript\ndata: attributes blocking false\ndata: autoRemove false\ndata: script console.log('hello');\n```\n\n----------------------------------------\n\nTITLE: Creating a MergeFragments Event\nDESCRIPTION: Example of creating a MergeFragments event using the builder pattern. This event is used to merge HTML fragments into the DOM on the client side.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/java/README.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMergeFragments event = MergeFragments.builder()\n        .selector(\"#test\")\n        .data(\"<div>test</div>\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing DataStar Component with Signals\nDESCRIPTION: Example HTML structure showing how to initialize a component with data-signals and data-on-load attributes. The component displays an ID value that should remain constant at 1234 despite update attempts.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/signals_ifmissing.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"demo\" data-signals=\"{id: 1234}\" data-on-load=\"@get('/examples/signals_ifmissing/updates')\">\\n  <div>\\n    Should always be 1234:\\n    <span data-text=\"$id\">should be replaced</span>\\n  </div>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-line Signals with DataStar in HTML\nDESCRIPTION: This HTML code demonstrates the implementation of multi-line signals using DataStar attributes. It shows how to define initial signal values with data-signals, create computed values with data-computed-baz, and bind input elements to signal values using data-bind attributes.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/multiline_signals.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-signals=\"{\n    foo: 1234,\n    bar: 'bar'\n}\"\n>\n  <div data-computed-baz=\"$foo * 2\"></div>\n  <input type=\"number\" step=\"1\" min=\"0\" data-bind-foo />\n  <input type=\"text\" data-bind-baz />\n  <input type=\"text\" data-bind-bar />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Polling Implementation\nDESCRIPTION: Examples of HTML elements configured with data-on-interval attributes for polling, showing different configurations including immediate execution and initial rendering.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_poll_the_backend_at_regular_intervals.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"time\" data-on-interval__duration.5s=\"@get('/endpoint')\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"time\" data-on-interval__duration.5s.leading=\"@get('/endpoint')\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"time\" data-on-interval__duration.5s=\"@get('/endpoint')\">\n     {{ now }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Event Handling with data-on Attribute in HTML\nDESCRIPTION: Illustrates the usage of the data-on attribute for attaching event listeners to elements. It covers built-in and custom events, as well as various modifiers for event behavior.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"$foo = ''\">Reset</button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-myevent=\"$foo = evt.detail\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-click__window__debounce.500ms.leading=\"$foo = ''\" data-on-my-event__case.camel=\"$foo = ''\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Map and Loading Custom Plugins in JavaScript\nDESCRIPTION: This snippet shows how to set up an import map for Datastar and load custom plugins. It demonstrates importing the 'load' function from Datastar and using it to add custom functionality.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/library/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n{\n    \"imports\": {\n      \"datastar\": \"https://cdn.jsdelivr.net/gh/starfederation/datastar@v1.0.0-beta.11/bundles/datastar.js\"\n    }\n}\n</script>\n<script type=\"module\">\n    import { load } from 'datastar'\n\n    load(\n        // Look ma', I made a plugin!\n    )\n</script>\n```\n\n----------------------------------------\n\nTITLE: Datastar Action Plugin Usage\nDESCRIPTION: Demonstrates HTTP action plugins for backend communication and utility actions for signal manipulation.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n@get()\n@post()\n@put()\n@patch()\n@delete()\n@clipboard()\n@setAll()\n@toggleAll()\n@fit()\n```\n\n----------------------------------------\n\nTITLE: Initializing Dynamic Content Area for DataStar Merge Options Demo\nDESCRIPTION: This HTML snippet creates a div element with an id of 'contents' and uses DataStar's data-on-load attribute to fetch and display content from a specific endpoint when the page loads.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/merge_options.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"contents\" data-on-load=\"@get('/examples/merge_options/reset')\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating a RemoveSignals Event\nDESCRIPTION: Example of creating a RemoveSignals event to remove specific signals from the client-side signals object. This example removes two signals identified by their dot-notation paths.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/java/README.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nRemoveSignals event = RemoveSignals.builder()\n        .addPath(\"user.name\")\n        .addPath(\"user.email\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Event Handling with Datastar\nDESCRIPTION: Example showing how to use Datastar's data-on-* plugin to listen for custom events. The code demonstrates tracking event counts and displaying event details by listening for a 'myevent' custom event that's dispatched every second.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/custom_events.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{eventCount:0,eventDetails:''}\">\n  <div id=\"foo\" data-on-myevent=\"$eventCount++; $eventDetails=evt.detail\">\n    <div>Event count: <span data-text=\"$eventCount\">EventCount</span></div>\n    <div>\n      Last Event Details: <span data-text=\"$eventDetails\">EventTime</span>\n    </div>\n  </div>\n  <script>\n    const foo = document.getElementById(\"foo\");\n    setInterval(() => {\n      foo.dispatchEvent(\n        new CustomEvent(\"myevent\", {\n          bubbles: true,\n          cancelable: true,\n          detail: JSON.stringify({\n            eventTime: new Date().toLocaleTimeString(),\n          }),\n        })\n      );\n    }, 1000);\n  </script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Detecting Ctrl+L Key Combination in HTML\nDESCRIPTION: This snippet shows how to check for the Ctrl+L key combination using evt.ctrlKey and evt.key properties.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_bind_keydown_events_to_specific_keys.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-keydown__window=\"evt.ctrlKey && evt.key === 'l' && alert('Key pressed')\"></div>\n```\n\n----------------------------------------\n\nTITLE: Computed Signals Examples in HTML\nDESCRIPTION: Shows how to create and use computed signals that automatically update based on other signals' values.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-computed-foo=\"$bar + $baz\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-computed-foo=\"$bar + $baz\"></div>\n<div data-text=\"$foo\"></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Wildcard Path Signal Changes in HTML with DataStar\nDESCRIPTION: HTML component that demonstrates monitoring nested object changes using wildcards in the signal path. The code sets up initial state with nested objects, watches for changes using a wildcard path, and updates a result value based on the nested property state.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/on_signal_change_path_wildcard.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-signals=\"{foo: {bar: {baz: false}}, result: 0}\" data-on-signal-change-foo.*.baz=\"$result = $foo.bar.baz ? 1 : 0\" data-on-load=\"$foo.bar.baz = true\">\n  Result:\n  <code id=\"result\" data-text=\"$result\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring SortableJS with Custom Event Handling\nDESCRIPTION: JavaScript implementation using SortableJS library to enable drag-and-drop functionality. Includes event handling to dispatch custom reordering events with position information.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/sortable.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Sortable from 'https://cdn.jsdelivr.net/npm/sortablejs@1.15.3/+esm'\n\nconst sortContainer = document.getElementById('sortContainer')\n\nnew Sortable(sortContainer, {\n    animation: 150,\n    ghostClass: 'opacity-25',\n    onEnd: (evt) => {\n        sortContainer.dispatchEvent(new CustomEvent('reordered', {detail: {orderInfo: `Moved from ${evt.oldIndex} to ${evt.newIndex}`}}));\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for Keydown Events on Window in HTML\nDESCRIPTION: This snippet shows how to use the data-on-keydown attribute with the window modifier to listen for keydown events globally.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_bind_keydown_events_to_specific_keys.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-keydown__window=\"alert('Key pressed')\"></div>\n```\n\n----------------------------------------\n\nTITLE: Data Attribute Usage Examples in HTML\nDESCRIPTION: Demonstrates how to use data-attr to set HTML attribute values using expressions.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-attr-title=\"$foo\"></div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-attr=\"{title: $foo, disabled: $bar}\"></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar Java SDK with Maven\nDESCRIPTION: Maven configuration required to add the Datastar Java SDK dependency to your project. Includes the dependency declaration and repository configuration for accessing the package from GitHub.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/java/README.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.starfederation</groupId>\n    <artifactId>datastar</artifactId>\n    <version>1.0.0</version>\n</dependency>\n\n<repositories>\n    <repository>\n        <id>github</id>\n        <url>https://maven.pkg.github.com/starfederation/datastar</url>\n    </repository>\n</repositories>\n```\n\n----------------------------------------\n\nTITLE: Checkbox State Binding Implementation with HTML and JavaScript\nDESCRIPTION: Implements a test case for checkbox state binding using data-bind-result attribute and conditional display logic. The code shows both the checkbox input and displays its bound state value through two different representations.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/checkbox_boolean_checked.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <input id=\"clickable\" type=\"checkbox\" data-bind-result checked /> \n  <span data-text=\"$result\"></span>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result === false ? 1 : ($result === true ? 0 : -1)\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering DataStar-powered Templ Counter in HTML\nDESCRIPTION: This HTML snippet creates a container div that loads data from a DataStar endpoint on page load. It's used to render a Templ counter application integrated with DataStar.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/templ_counter.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"container\" data-on-load=\"@get('/examples/templ_counter/data')\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Signals in Datastar\nDESCRIPTION: Examples of creating signals, displaying their values, and modifying them using Datastar attributes.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/going_deeper.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo=\"\"></div>\n<div data-text=\"$foo\"></div>\n<button data-on-click=\"$foo = 'hello'\"></button>\n```\n\n----------------------------------------\n\nTITLE: Initializing Progress Bar with Datastar in HTML\nDESCRIPTION: This HTML snippet sets up a div element for a progress bar that loads data from a server endpoint using Datastar's @get directive. The 'openWhenHidden' option is used to keep the connection open even when the progress bar is not visible.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/progress_bar.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"progress_bar\" data-on-load=\"@get('/examples/progress_bar/data',{openWhenHidden:true})\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Loading Indicator with data-indicator Attribute in HTML\nDESCRIPTION: Illustrates the usage of the data-indicator attribute for creating loading indicators during SSE requests. It shows how to use the indicator signal for various UI effects.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@get('/endpoint')\" data-indicator-fetching></button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@get('/endpoint')\" data-indicator-fetching data-attr-disabled=\"$fetching\"></button>\n<div data-show=\"$fetching\">Loading...</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button data-indicator=\"fetching\"></button>\n```\n\n----------------------------------------\n\nTITLE: DataStar Server Response Stream Format\nDESCRIPTION: Example of the server's text/event-stream response showing the merge fragments format. Includes both the updated button and new table rows with proper merge modes and selectors.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/click_to_load.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Removed styling for brevity -->\\nevent: datastar-merge-fragments id: 129804115990544446 data: mergeMode morph data: fragment\\n<button id=\"more_btn\" data-on-click=\"$offset=20; $limit=10; @get('/examples/click_to_load/data')\">\\n  Load More\\n</button>\\nbackend.ts:201 Received event block: event: datastar-merge-fragments id:\\n129804153571508286 data: selector #click_to_load_rows data: mergeMode append\\ndata: fragment\\n<tr id=\"agent_10\">\\n  <td>Agent Smith</td>\\n  <td>void11@null.org</td>\\n  <td class=\"uppercase\">50698444ed39c832</td>\\n</tr>\\nbackend.ts:201 Received event block: event: datastar-merge-fragments id:\\n129804153571512382 data: selector #click_to_load_rows data: mergeMode append\\ndata: fragment\\n<tr id=\"agent_11\">\\n  <td>Agent Smith</td>\\n  <td>void12@null.org</td>\\n  <td class=\"uppercase\">205381dc855b977a</td>\\n</tr>\\nbackend.ts:201 Received event block: id: 129804153571516478 data: selector\\n#click_to_load_rows data: mergeMode append data: fragment\\n<tr id=\"agent_12\">\\n  <td>Agent Smith</td>\\n  <td>void13@null.org</td>\\n  <td class=\"uppercase\">7ecd2e572c949f74</td>\\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Including CSRF Token in POST Request Headers with DataStar\nDESCRIPTION: This HTML snippet demonstrates how to include a CSRF token in the headers of a POST request using DataStar's data attributes. The example shows a button that sends a POST request to '/examples/csrf/data' with a CSRF token in the 'x-csrf-token' header, and a container to display the response.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/csrf.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@post('/examples/csrf/data', {\nheaders: {\n    'x-csrf-token':'/Svi7DzhybrN+mDfI0zpReDj31ZZpp7GFp5KC6yMvGKer5OmslH1fpYDtAfsTwmfH+yLy7ghTAVHiRcjDz8XAQ=='\n}})\">Send update</button>\n<div>\n    <label>Response</label>\n    <div id=\"responses\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar Ruby Gem\nDESCRIPTION: Instructions for adding the Datastar gem to your project's Gemfile. You can either install it from RubyGems or directly from the GitHub repository.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem 'datastar'\n```\n\nLANGUAGE: bash\nCODE:\n```\ngem 'datastar', git: 'https://github.com/starfederation/datastar', glob: 'sdk/ruby/*.gemspec'\n```\n\n----------------------------------------\n\nTITLE: Testing Text Input Value Binding in HTML\nDESCRIPTION: This HTML snippet sets up a test for checking if a text input's bound signal is correctly set to its initial value. It includes an input field with a predefined value, and a result display area that shows whether the binding is successful.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/input_value.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <input type=\"text\" data-bind-result value=\"foo\" class=\"input input-bordered\" />\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result === 'foo' ? 1 : 0\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Toggling Element Visibility with DataStar in HTML\nDESCRIPTION: This code snippet demonstrates how to use DataStar's data-show attribute to toggle the visibility of an element. It uses a button to toggle a boolean signal, which controls the visibility of a div element.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/toggle_visibility.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"container\" class=\"flex flex-col gap-4\" data-signals=\"{bindBool: false}\">\n  <button class=\"btn btn-primary\" data-on-click=\"$bindBool=!$bindBool\">\n    Toggle\n  </button>\n  <div data-show=\"$bindBool\">\n    Hello!\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Multiple Class Toggle\nDESCRIPTION: Using data-class with multiple class conditions\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<button data-class=\"{hidden: $input == '', 'font-bold': $input == 1}\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: Toggling Signal Values with @toggleAll in Datastar\nDESCRIPTION: Shows how to use the @toggleAll() action to toggle the values of signals, including examples with wildcard path matching.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/action_plugins.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<!-- Toggles the value of `$foo` -->\n<div data-signals-foo=\"false\">\n  <button data-on-change=\"@toggleAll('foo')\"></button>\n</div>\n\n<!-- Toggles the value of `$foo.bar.baz` -->\n<div data-signals-foo.bar.baz=\"false\">\n  <button data-on-click=\"@toggleAll('foo.*.baz')\"></button>\n</div>\n\n<!-- Toggles the value of `$foo.bar.baz` -->\n<div data-signals-foo.bar.baz=\"false\">\n  <button data-on-click=\"@toggleAll('foo.**')\"></button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Demo Container for Infinite Scroll Implementation\nDESCRIPTION: HTML structure for the infinite scroll demonstration. It contains a container that loads initial data on page load and a placeholder for the loading button that will be dynamically replaced and updated.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/infinite_scroll.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <div id=\"infinite_scroll\" data-on-load=\"@get('/examples/infinite_scroll/data')\">\n  </div>\n  <div id=\"more_btn\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using merge_fragments Method in Datastar\nDESCRIPTION: Shows different ways to use the merge_fragments method to send HTML content to the browser. Supports raw HTML strings, Phlex views, and additional options like merge_mode.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nsse.merge_fragments(%(<div id=\"foo\">\\n<span>hello</span>\\n</div>))\n\n# or a Phlex view object\nsse.merge_fragments(UserComponet.new)\n\n# Or pass options\nsse.merge_fragments(\n  %(<div id=\"foo\">\\n<span>hello</span>\\n</div>),\n  merge_mode: 'append'\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Data Persistence\nDESCRIPTION: Shows how to persist all signals in local storage.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<div data-persist></div>\n```\n\n----------------------------------------\n\nTITLE: Signal Evaluation Context\nDESCRIPTION: Illustrates how Datastar internally evaluates signal expressions in a sandboxed context.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/datastar_expressions.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn (()=> {\n  return (ctx.signals.signal('foo').value.length);\n})()\n```\n\n----------------------------------------\n\nTITLE: Delayed On-Load Request Implementation in HTML\nDESCRIPTION: Shows how to implement a delayed POST request using the data-on-load attribute with a 3-second delay modifier. This is useful when you need to postpone the loading of data.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/on_load.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"replaceMe\" data-on-load__delay.3s=\"@post('/examples/on_load/data')\">\n  No session data\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing Text Input Signal Binding in HTML\nDESCRIPTION: HTML markup for testing signal binding behavior where an input element with a default value 'bar' is bound to a signal with value 'foo'. The test verifies that the signal maintains its original value 'foo' rather than being overwritten by the input's value.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/input_signal.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-result=\"'foo'\">\n  <input type=\"text\" data-bind-result value=\"bar\" class=\"input input-bordered\" />\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result === 'foo' ? 1 : 0\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Session Storage Persistence\nDESCRIPTION: Example of persisting data in session storage instead of local storage.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<div data-persist__session=\"foo bar\"></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Throb Animation in Datastar with HTML\nDESCRIPTION: HTML structure for a color throb animation that uses CSS transitions. The element maintains a stable ID across content swaps, allowing for smooth transitions between different states. It includes styling for background color, text color, and transition duration.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/animations.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"color_throb\" class=\"p-4 text-2xl font-bold text-center uppercase transition-all duration-1000 rounded-box\"\n  style=\"background-color:#b57614;color:#83a598\">\n  blue on yellow\n</div>\n```\n\n----------------------------------------\n\nTITLE: String Reversal Web Component Implementation\nDESCRIPTION: JavaScript class definition for the ReverseComponent web component that observes the 'name' attribute, reverses the string value, and dispatches a custom event with the result.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/web_component.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass ReverseComponent extends HTMLElement {\n  static get observedAttributes() {\n    return [\"name\"];\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    const value = newValue.split(\"\").reverse().join(\"\");\n    this.dispatchEvent(new CustomEvent(\"reverse\", { detail: { value } }));\n  }\n}\n\ncustomElements.define(\"reverse-component\", ReverseComponent);\n```\n\n----------------------------------------\n\nTITLE: Using merge_signals Method in Datastar\nDESCRIPTION: Shows how to send data signals to the browser that can be used by JavaScript without modifying the DOM directly.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nsse.merge_signals(count: 4, user: { name: 'John' })\n```\n\n----------------------------------------\n\nTITLE: Streaming Multiple Updates with Datastar\nDESCRIPTION: Shows how to send multiple updates to the browser in a streaming fashion. The response remains open until the stream block has finished executing.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndatastar.stream do |sse|\n  sse.merge_fragments(%(<h1 id=\"title\">Hello, World!</h1>))\n  # Streaming multiple updates\n  100.times do |i|\n    sleep 1\n    sse.merge_fragments(%(<h1 id=\"title\">Hello, World #{i}!</h1>))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Sending DELETE Request with Datastar\nDESCRIPTION: Shows how to use the @delete() action to send a DELETE request to a backend endpoint. It works like @get() but uses the DELETE method.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/action_plugins.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@delete('/endpoint')\"></button>\n```\n\n----------------------------------------\n\nTITLE: Using data-star-ignore Attribute in HTML\nDESCRIPTION: Demonstrates how to prevent DataStar from processing both an element and its descendants using the data-star-ignore attribute without the __self modifier.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/ignore_attributes.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-star-ignore data-text=\"$notASignal\">\n    <div data-text=\"$alsoNotASignal\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Signal Change Handling in HTML with DataStar\nDESCRIPTION: This HTML snippet demonstrates the structure for handling signal changes in DataStar. It includes buttons for incrementing clicks, clearing data, and reloading the page, along with elements for displaying local clicks and server data.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/signals_change.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-signals=\"{clicks:0, _localState: {bar: 1234}, _anotherLocalVar: 'hello'}\" data-on-signal-change=\"@post('/examples/signals_changed/updates')\">\n  <div>\n    <button id=\"increment\" data-on-click=\"$clicks++\">Click Me</button>\n    <button id=\"clear\" data-on-click=\"$clicks=0; @delete('/examples/signals_changed/updates')\">\n      Clear Local & Server\n    </button>\n    <button id=\"reload\" data-on-click=\"window.location.reload()\">\n      Reload Page\n    </button>\n  </div>\n  <div>Local Clicks: <span data-text=\"$clicks\"></span></div>\n  <div id=\"from_server\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Fragment Merge Event in Datastar\nDESCRIPTION: Demonstrates the basic usage of datastar-merge-fragments event for merging HTML content into the DOM using Idiomorph.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/sse_events.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-merge-fragments\ndata: fragments <div id=\"foo\">Hello, world!</div>\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML Frontend with Datastar Data Attributes\nDESCRIPTION: HTML example showing how to create a frontend interface with Datastar-specific data attributes for interaction. It demonstrates data signals, event binding (click events), and data binding for real-time updates.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/dotnet/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<main class=\"container\" id=\"main\" data-signals=\"{'input':'','output':'what'}\">\n    <button data-on-click=\"@get('/displayDate')\">Display Date</button>\n    <div id=\"target\"></div>\n    <input type=\"text\" placeholder=\"input:\" data-bind-input/><br/>\n    <span data-text-output></span>\n    <button data-on-click=\"@post('/changeOutput')\">Change Output</button>\n</main>\n```\n\n----------------------------------------\n\nTITLE: Text Content Binding with data-text Attribute in HTML\nDESCRIPTION: Demonstrates how to use the data-text attribute to bind the text content of an element to an expression.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div data-text=\"$foo\"></div>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Datastar Signal Order Dependencies in HTML\nDESCRIPTION: Shows two examples of signal usage in HTML elements - one that works correctly due to proper attribute ordering (signals defined before use) and one that fails due to incorrect ordering. The working example defines the signal before using it in data-text, while the failing example attempts to use the signal before it's defined.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/plugin_order.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nWorks:\n<div data-signals-foo=\"1\" data-text=\"$foo\"></div>\n\nDoes not work (throws an error, see the console):\n<div data-text=\"$bar\" data-signals-bar=\"2\"></div>\n```\n\n----------------------------------------\n\nTITLE: Script Execution Event in Datastar\nDESCRIPTION: Shows how to execute JavaScript in the browser with configurable script attributes and auto-removal options.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/sse_events.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-execute-script\ndata: autoRemove true\ndata: attributes type module\ndata: attributes defer true\ndata: script console.log('Hello, world!')\ndata: script console.log('A second greeting')\n```\n\n----------------------------------------\n\nTITLE: Loading Data with HTMX for Bulk Update Interface\nDESCRIPTION: A div element with an HTMX-compatible data-on-load attribute that fetches data from the '/examples/bulk_update/data' endpoint when the page loads. This initializes the bulk update interface with user data.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/bulk_update.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"bulk_update\" data-on-load=\"@get('/examples/bulk_update/data')\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Boolean Binding with DataStar\nDESCRIPTION: HTML implementation showing a checkbox input with data binding that toggles between true and false states. Includes a display of the current value and expected result. Uses data-bind-result for binding and data-text for displaying the boolean state.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/checkbox_boolean.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <input id=\"clickable\" type=\"checkbox\" data-bind-result /> \n  <span data-text=\"$result\"></span>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result === true ? 1 : ($result === false ? 0 : -1)\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using data-star-ignore__self Attribute in HTML\nDESCRIPTION: Shows how to prevent DataStar from processing a specific element while allowing processing of its children using the data-star-ignore__self attribute. The outer div contains a valid signal while inner elements use ignore attributes.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/ignore_attributes.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo=\"'A valid signal'\">\n  <div data-star-ignore__self data-text=\"$notASignal\">\n    <div data-text=\"$foo\"></div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fragment Removal Event in Datastar\nDESCRIPTION: Shows how to remove HTML fragments from the DOM using a selector.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/sse_events.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-remove-fragments\ndata: selector #foo\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Datastar SSE Events in Backend SDKs\nDESCRIPTION: Examples of how to send multiple Datastar SSE events from the backend using different SDKs.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/going_deeper.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// JavaScript\nDatastar.mergeFragments('<div id=\"hello\">Hello, world!</div>');\nDatastar.mergeSignals({foo: {bar: 1}});\nDatastar.executeScript('console.log(\\'Success!\\');');\n\n# Python\ndatastar.merge_fragments('<div id=\"hello\">Hello, world!</div>')\ndatastar.merge_signals({\"foo\": {\"bar\": 1}})\ndatastar.execute_script(\"console.log('Success!')\")\n\n// PHP\n$datastar->mergeFragments('<div id=\"hello\">Hello, world!</div>');\n$datastar->mergeSignals(['foo' => ['bar' => 1]]);\n$datastar->executeScript(\"console.log('Success!');\");\n\n// Ruby\ndatastar.merge_fragments('<div id=\"hello\">Hello, world!</div>')\ndatastar.merge_signals({foo: {bar: 1}})\ndatastar.execute_script(\"console.log('Success!')\")\n```\n\n----------------------------------------\n\nTITLE: Updating Browser URL via SSE Events\nDESCRIPTION: Example of using datastar-execute-script SSE events to update the browser URL by calling window.history.replaceState(). The code shows multiple events that change the URL query parameter 'page' to different values.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/replace_url_from_backend.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nevent: datastar-execute-script\nretry: 1000\ndata: script window.history.replaceState({}, \"\", \"/examples/replace_url_from_backend/updates?page=89\")\n\n\nevent: datastar-execute-script\nretry: 1000\ndata: script window.history.replaceState({}, \"\", \"/examples/replace_url_from_backend/updates?page=39\")\n\n\nevent: datastar-execute-script\nretry: 1000\ndata: script window.history.replaceState({}, \"\", \"/examples/replace_url_from_backend/updates?page=7\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Value Binding Test in HTML\nDESCRIPTION: This HTML snippet sets up a test case for checkbox value binding. It includes a checkbox input with data binding, a span to display the result, and a code element to show the evaluation of the result. The test checks if the bound signal is set correctly based on the checkbox state.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/checkbox_value.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <input id=\"clickable\" type=\"checkbox\" data-bind-result value=\"foo\" />\n  <span data-text=\"$result\"></span>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result === 'foo' ? 1 : ($result === '' ? 0 : -1)\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: View Transition API Demo Template\nDESCRIPTION: HTML template demonstrating the implementation of View Transition API with buttons for triggering fade and slide transitions. Includes data attributes for feature detection and event handling.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/view_transition_api.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"flex flex-col gap-4\" data-signals=\"{supportsViewTransitionAPI:!!document.startViewTransition}\">\n  <div data-text=\"`View Transition API supported in browser? ${$supportsViewTransitionAPI}`\"></div>\n  <div id=\"stuff\" class=\"flex gap-4\" data-show=\"$supportsViewTransitionAPI\">\n    <button class=\"btn btn-accent\" data-on-click=\"@get('/examples/view_transition_api/watch')\">\n      Fade transition\n    </button>\n    <button class=\"btn btn-accent\" data-on-click=\"@get('/examples/view_transition_api/watch?transition=slide')\">\n      Slide transition\n    </button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Signal Paths with setAll in HTML\nDESCRIPTION: HTML template showing how to use the @setAll action to set multiple signal paths ('foo' and 'bar') to true on page load. The result is calculated using a conditional expression that checks both signals.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/set_all_paths.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{foo: false, bar: false, result: 0}\" data-on-load=\"@setAll('foo bar', true)\">\n  Result:\n  <code id=\"result\" data-text=\"$result = $foo && $bar ? 1 : 0\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Loading Aliased Datastar Bundle via CDN\nDESCRIPTION: Demonstrates how to include the aliased version of Datastar (using data-star-* prefix) from the CDN using a script tag.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/custom_builds.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"https://cdn.jsdelivr.net/gh/starfederation/datastar@v1.0.0-beta.11/bundles/datastar-aliased.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Request-in-Flight Animation with Datastar\nDESCRIPTION: HTML structure for showing a loading spinner during API requests. The data-indicator-fetching attribute triggers a spinner element to display when a request is in progress, providing visual feedback to the user.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/animations.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button id=\"submit_request_in_flight\" data-on-click=\"@post('/examples/animations/data/request_in_flight')\"\n  data-indicator-fetching>\n  Submit\n</button>\n<div data-show=\"$fetching\">Spinner</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing ServerSentEventGenerator.MergeSignals Method\nDESCRIPTION: Defines the MergeSignals method signature for merging signal data with the client. This method allows sending signals to the browser with options to control how they're integrated.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nServerSentEventGenerator.MergeSignals(\n    signals: string,\n    options ?: {\n        onlyIfMissing?: boolean,\n        eventId?: string,\n        retryDuration?: durationInMilliseconds\n     }\n )\n```\n\n----------------------------------------\n\nTITLE: Debounced RAF Event Listener\nDESCRIPTION: Example of using debounce modifier with requestAnimationFrame to control execution timing.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-raf__debounce.10ms=\"$count++\"></div>\n```\n\n----------------------------------------\n\nTITLE: SSE Fragment for Title Update\nDESCRIPTION: Server-sent event fragment that updates the browser's title element. The event uses datastar-merge-fragments to replace the title element content with a server-generated timestamp.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/title_update_backend.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-merge-fragments\ndata: selector title\ndata: fragments <title>08:30:36 from server</title>\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Signal Values with @setAll()\nDESCRIPTION: Demonstrates using @setAll() to set values for multiple signals matching a wildcard pattern. Takes a path pattern and value as arguments.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@setAll('foo.*', $bar)\"></button>\n```\n\n----------------------------------------\n\nTITLE: URL Replacement\nDESCRIPTION: Shows how to replace the browser URL without page reload using an evaluated expression.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<div data-replace-url=\"`/page${page}`\"></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Toggle All Action on Single Path in HTML with DataStar\nDESCRIPTION: This HTML snippet sets up a test case for the 'toggleAll' action in DataStar. It initializes 'foo' as false and 'result' as 0, then uses the data-on-load attribute to trigger @toggleAll('foo'). The result is displayed and compared to the expected output of 1.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/toggle_all_path.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-signals=\"{foo: false, result: 0}\" data-on-load=\"@toggleAll('foo')\">\n  Result:\n  <code id=\"result\" data-text=\"$result = $foo ? 1 : 0\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using on_client_disconnect Callback in Datastar\nDESCRIPTION: Registers code to run when a connection is closed by the browser client. This callback's behavior depends on the configured heartbeat.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ndatastar.on_client_connect do\n  puts 'A user has disconnected connected'\nend\n```\n\n----------------------------------------\n\nTITLE: Using Datastar Event Modifiers\nDESCRIPTION: Examples of using the new __debounce, __throttle, and __viewtransition modifiers with various data attributes.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\ndata-on-intersect=\"action__debounce__throttle__viewtransition\"\ndata-on-signal-change=\"action__debounce__throttle__viewtransition\"\ndata-on-interval=\"action__viewtransition\"\ndata-on-load=\"action__viewtransition\"\ndata-on-raf=\"action__viewtransition\"\n```\n\n----------------------------------------\n\nTITLE: Persisting Nested Signals with Wildcard Path in HTML\nDESCRIPTION: This HTML snippet demonstrates how to persist nested signals using a wildcard path. It initializes a nested object structure, sets a persistence path with a wildcard, and updates a value on load. The expected result in local storage is also shown.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/persist_signals_path_wildcard.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-signals=\"{foo: {bar: {baz: 0}}}\" data-persist=\"foo.*.*\" data-on-load=\"$foo.bar.baz = 1\">\n  Expected value in local storage (in alphabetical order): \n  <pre><code>datastar: {\"foo\":{\"bar\":{\"baz\":1}}}</code></pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating an ExecuteScript Event\nDESCRIPTION: Example of creating an ExecuteScript event to run JavaScript code on the client. This event can include options to control script retention after execution and additional script tag attributes.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/java/README.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nExecuteScript event = ExecuteScript.builder()\n        .script(\"console.log('Hello World');\")\n        .autoRemove(false)\n        .attributes(\"type='module'\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: DataStar Key Casing Demo Implementation\nDESCRIPTION: This HTML implements a demo container that showcases different key casing options in DataStar. It uses data attributes to define signals with various case formats and includes a pre element that will display the JSON output of these signals.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/key_casing.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"key-casing\"\n  data-signals-foo-foo=\"1\"\n  data-signals-foo-bar__case.kebab=\"1\"\n  data-signals-foo-baz__case.snake=\"1\"\n  data-signals-foo-boo__case.pascal=\"1\"\n>\n  <pre data-text=\"ctx.signals.JSON()\"></pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Ternary Operator Usage\nDESCRIPTION: Shows how to use the ternary operator for conditional class assignment based on a theme signal.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/datastar_expressions.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div data-attr-class=\"$theme == 'dark' ? 'bg-black text-white' : 'bg-white text-black'\"\n```\n\n----------------------------------------\n\nTITLE: Testing Signal Array Input Binding in HTML\nDESCRIPTION: HTML markup that tests binding input values to a signal array. Uses data-signals-result to initialize array with ['foo'], and data-bind-result for input binding. Includes validation that checks if array matches ['foo','bar'] when second input is populated.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/input_array.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-result=\"['foo']\">\\n  <input data-bind-result class=\"input input-bordered\" />\\n  <br>\\n  <input id=\"populatable\" data-bind-result class=\"input input-bordered\" />\\n  <pre data-text=\"JSON.stringify($result)\"></pre>\\n  <hr />\\n  Result:\\n  <code id=\"result\" data-text=\"JSON.stringify($result) === JSON.stringify(['foo','bar']) ? 1 : 0\"></code>\\n  <hr />\\n  Expected result on entering `bar` in second input: <code>1</code>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sending One-off Updates with Datastar\nDESCRIPTION: Demonstrates sending a single HTML fragment update to the browser. In this mode, the response is closed after the fragment is sent.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndatastar.merge_fragments(%(<h1 id=\"title\">Hello, World!</h1>))\n```\n\n----------------------------------------\n\nTITLE: Backend Setup for Datastar Server-Sent Events\nDESCRIPTION: Illustrates how to set up a backend endpoint to send Server-Sent Events (SSE) to the Datastar frontend. This example uses a backend SDK to merge HTML fragments and update signals.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst datastar = require('datastar');\n\napp.get('/actions/quiz', (req, res) => {\n  const stream = new datastar.EventStream(res);\n  stream.mergeFragments({\n    question: '<div>What is the capital of France?</div>'\n  });\n  stream.mergeSignals({\n    response: '',\n    answer: 'Paris'\n  });\n  stream.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-line Expression Formatting\nDESCRIPTION: Demonstrates proper formatting for multi-line expressions with semicolon separators.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/datastar_expressions.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo=\"1\">\n  <button data-on-click=\"\n        $foo++; \n        @post('/endpoint')\n  \"></button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Template with Variable Interpolation in Data Attributes\nDESCRIPTION: This HTML snippet demonstrates different ways to use template literals and variable interpolation in data-text attributes. It shows simple variable addition, single variable interpolation, multiple variable interpolation, and nested template literal expressions.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/regex.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo=\"1\" data-signals-bar=\"1\">\n  <div data-text=\"$foo + $bar\"></div>\n  <div data-text=\"`${$foo}`\"></div>\n  <div data-text=\"`${$foo} and ${$bar}`\"></div>\n  <div data-text=\"`${`${$foo} baz`} and ${$bar}`\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Specifying Datastar SDK Test Case Output in Text/EventStream Format\nDESCRIPTION: This snippet shows the expected output format for a test case, using the text/eventstream format. It corresponds to the input JSON and includes event details and data fields.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/README.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-execute-script\nid: 1\nretry: 2000\ndata: attributes type text/javascript\ndata: attributes blocking false\ndata: autoRemove false\ndata: script console.log('hello');\n```\n\n----------------------------------------\n\nTITLE: Checkbox Example with @toggleAll()\nDESCRIPTION: Shows practical implementation of @toggleAll() with checkboxes, allowing all checkboxes to be toggled between checked and unchecked states using a single button click.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" data-bind-checkboxes.checkbox1 /> Checkbox 1\n<input type=\"checkbox\" data-bind-checkboxes.checkbox2 /> Checkbox 2\n<input type=\"checkbox\" data-bind-checkboxes.checkbox3 /> Checkbox 3\n<button data-on-click=\"@toggleAll('checkboxes.*')\">Toggle All</button>\n```\n\n----------------------------------------\n\nTITLE: HTML Fragment with Data Signals\nDESCRIPTION: HTML structure demonstrating data-signals integration with a clickable button that fetches data and displays results. Uses data-signals-result for storing state and data-on-click for event handling.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/merge_fragment_signals.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <div id=\"content\" data-signals-result=\"0\"></div>\n  <button id=\"clickable\" data-on-click=\"@get('/tests/merge_fragment_signals/data')\" class=\"btn\">Merge</button>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Persisting Selected Signals using HTML Data Attributes\nDESCRIPTION: Sets up signal persistence by initializing signals foo, bar, and baz, but only persisting foo and bar to local storage. Shows the expected storage format with alphabetically ordered keys.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/persist_signals_path.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{foo: 0, bar: 0, baz: 0}\" data-persist=\"foo bar\" data-on-load=\"$foo = 1; $bar = 1; $baz = 1\">\n  Expected value in local storage (in alphabetical order): \n  <pre><code>datastar: {\"bar\":1,\"foo\":1}</code></pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using redirect Method in Datastar\nDESCRIPTION: A helper method to redirect the browser to a new location.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nsse.redirect('/new_location')\n```\n\n----------------------------------------\n\nTITLE: Basic Datastar Remove Signals Event Example\nDESCRIPTION: Shows the minimal format for removing signals from the browser with the datastar-remove-signals event type.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/README.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-remove-signals\ndata: paths user.name\ndata: paths user.email\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Data Persistence\nDESCRIPTION: Shows how to use pattern matching for data persistence using * and ** wildcards.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo.bar.baz=\"1\"\n     data-persist=\"foo.*.baz\"\n></div>\n\n<!-- Persists `$foo.bar.baz` -->\n<div data-signals-foo.bar.baz=\"1\"\n     data-persist=\"foo.**\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Merge Fragment Test in HTML\nDESCRIPTION: This HTML snippet creates a button that, when clicked, triggers a GET request to '/tests/merge_fragment/data'. The result is displayed in a code block, with an expected result of '1' after clicking.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/merge_fragment.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <button id=\"clickable\" data-on-click=\"@get('/tests/merge_fragment/data')\" class=\"btn\">Merge</button>\n  <hr />\n  Result:\n  <code id=\"result\">0</code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Editable Contact Form with DataStar Signals\nDESCRIPTION: HTML structure for the editable form that appears after clicking Edit. It uses DataStar signals to store contact data and data-bind attributes to connect inputs to signal values. The form includes input fields and buttons for saving (PUT request) or canceling (GET request).\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/click_to_edit.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Removed styling and escaping for brevity -->\n<div id=\"contact_1\" data-signals=\"{\n        id: 1,\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'joe@blow.com'\n    }\">\n  <div class=\"form-control\">\n    <label>First Name</label>\n    <input type=\"text\" data-bind=\"firstName\" />\n  </div>\n  <div>\n    <label>Last Name</label>\n    <input type=\"text\" data-bind=\"lastName\" />\n  </div>\n  <div>\n    <label>Email</label>\n    <input type=\"text\" data-bind=\"email\" />\n  </div>\n  <div>\n    <button data-on-click=\"@put('/examples/click_to_edit/contact/1')\">\n      Save\n    </button>\n    <button data-on-click=\"@get('/examples/click_to_edit/contact/1')\">\n      Cancel\n    </button>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing On Load Event Trigger in DataStar\nDESCRIPTION: This HTML snippet demonstrates a test for the on-load event in DataStar. It uses data attributes to fetch data and display the result, expecting the on-load event to trigger after all other data attributes are processed.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/on_load.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-on-load=\"@get('/tests/on_load/data')\" data-signals-fetching=\"true\">\n  Result:\n  <code id=\"result\">0</code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Select Element with Signal Binding\nDESCRIPTION: A select element with data binding that updates a result signal based on selection. Includes a default value of 'foo' and tests for the selection of 'bar' value.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/select_single.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-result=\"'foo'\">\n  <select id=\"selectable\" data-bind-result class=\"select select-bordered\"><option value=\"foo\">foo</option><option value=\"bar\">bar</option></select>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result === 'bar' ? 1 : 0\"></code>\n  <hr />\n  Expected result on selecting `bar`: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Datastar Merge Signals Event Example\nDESCRIPTION: Shows the minimal format for sending merged signals to the browser with the datastar-merge-signals event type.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/README.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-merge-signals\ndata: signals {\"output\":\"Patched Output Test\",\"show\":true,\"input\":\"Test\",\"user\":{\"name\":\"\",\"email\":\"\"}}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Plugins to Datastar\nDESCRIPTION: Shows how to import the Datastar framework using an import map and add custom plugins. The example demonstrates importing the load function and using it to extend Datastar with custom functionality.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n{\n    \"imports\": {\n      \"datastar\": \"https://cdn.jsdelivr.net/gh/starfederation/datastar@v1.0.0-beta.11/bundles/datastar.js\"\n    }\n}\n</script>\n<script type=\"module\">\n    import { load } from 'datastar'\n\n    load(\n        // Look ma', I made a plugin!\n    )\n</script>\n```\n\n----------------------------------------\n\nTITLE: Server-Sent Events for Signal Updates\nDESCRIPTION: SSE event for updating the offset signal after adding new content.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_load_more_list_items.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-merge-signals\ndata: signals {offset: 2}\n```\n\n----------------------------------------\n\nTITLE: Testing Delayed Load Event with Data Attributes in HTML\nDESCRIPTION: HTML code that tests a delayed onload event using data attributes. Sets a result variable after 100ms delay and displays the result using a code element. The expected result should change from 0 to 1 after the delay.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/on_load_delay.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-result=\"false\" data-on-load__delay.100ms=\"$result = true\">\n  Result:\n  <code id=\"result\" data-text=\"$result ? 1 : 0\"></code>\n  <hr />\n  Expected result on wait: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting up HTML for backend-triggered redirection in DataStar\nDESCRIPTION: This HTML snippet sets up a button with a click event that triggers a GET request to the backend, and an indicator div to show the redirection status.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_redirect_the_page_from_the_backend.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@get('/endpoint')\">\n    Click to be redirected from the backend\n</button>\n<div id=\"indicator\"></div>\n```\n\n----------------------------------------\n\nTITLE: Debounced Signal Change Listener\nDESCRIPTION: Example of using debounce modifier with signal change events.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-signal-change__debounce.100ms=\"$count++\"></div>\n```\n\n----------------------------------------\n\nTITLE: Testing setAll Action with Data Signals in HTML\nDESCRIPTION: HTML markup that tests the setAll action by initializing signals 'foo' and 'result', then updating 'foo' on load. The code element displays the result of a conditional expression based on the foo signal's value.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/set_all_path.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{foo: false, result: 0}\" data-on-load=\"@setAll('foo', true)\">\n  Result:\n  <code id=\"result\" data-text=\"$result = $foo ? 1 : 0\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Declarative Class Binding with Datastar\nDESCRIPTION: A Datastar example showing how to declaratively bind a CSS class to an element based on a signal's value.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/going_deeper.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-class-bold=\"$foo == 1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Nested Object Values with Wildcard Path in HTML\nDESCRIPTION: Uses data-signals attribute to define initial state and data-on-load to execute setAll action with wildcard path. Updates nested baz property to true and displays result based on conditional check.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/set_all_path_wildcard.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{foo: {bar: {baz: false}}, result: 0}\" data-on-load=\"@setAll('foo.*.baz', true)\">\n  Result:\n  <code id=\"result\" data-text=\"$result = $foo.bar.baz ? 1 : 0\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript for page redirection in DataStar\nDESCRIPTION: This snippet shows the SSE event format for executing JavaScript on the client-side to perform a page redirection.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_redirect_the_page_from_the_backend.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nevent: datastar-execute-script\ndata: script window.location.href = \"/guide\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy for Datastar\nDESCRIPTION: HTML meta tag configuration to enable CSP with unsafe-eval for Datastar's IIFE expression evaluation. Required to allow Datastar to function properly with Content Security Policy enabled.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/security.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<meta http-equiv=\"Content-Security-Policy\" \n      content=\"script-src 'self' 'unsafe-eval';\"\n>\n```\n\n----------------------------------------\n\nTITLE: HTML Fragment with Data-On-Load Implementation\nDESCRIPTION: HTML structure demonstrating the use of data-on-load attribute for initializing a result value, along with a button to trigger fragment merging and display areas for showing the result and expected outcome.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/merge_fragment_on_load.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <div id=\"content\" data-signals-result=\"0\" data-on-load=\"$result = 0\"></div>\n  <button id=\"clickable\" data-on-click=\"@get('/tests/merge_fragment_on_load/data')\" class=\"btn\">Merge</button>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Delayed Event Listener Example\nDESCRIPTION: Demonstrates using the delay modifier to add a 500ms delay to a load event listener.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-load__delay.500ms=\"$count = 1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using ServerSentEventGenerator in NodeJS\nDESCRIPTION: This snippet demonstrates how to read signals from a request and stream server-sent events in a NodeJS environment. It shows error handling for missing signals and how to merge signals and HTML fragments.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/typescript/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// this example is for node\nconst reader = await ServerSentEventGenerator.readSignals(req);\n\nif (!reader.success) {\n    console.error('Error while reading signals', reader.error);\n    res.end('Error while reading signals`);\n    return;\n}\n\nif (!('foo' in reader.signals)) {\n    console.error('The foo signal is not present');\n    res.end('The foo signal is not present');\n    return;\n}\n\nServerSentEventGenerator.stream(req, res, (stream) => {\n     stream.mergeSignals({ foo: reader.signals.foo });\n     stream.mergeFragments(`<div id=\"toMerge\">Hello <span data-text=\"$foo\">${reader.signals.foo}</span></div>`);\n});\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript in Datastar Expressions\nDESCRIPTION: An example of using JavaScript methods within Datastar expressions to manipulate signal values.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/going_deeper.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"$foo = $foo.toUpperCase()\">\n  Convert to uppercase\n</button>\n```\n\n----------------------------------------\n\nTITLE: HTML Fragment Removal Test Interface\nDESCRIPTION: Implements a test interface with a button that triggers fragment deletion via a data-on-click attribute. Includes result display and expected outcome indicators.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/remove_initiating_fragment.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <button id=\"clickable\" data-on-click=\"@delete('/tests/remove_initiating_fragment/data')\" class=\"btn\">Remove</button>\n  <hr />\n  Result:\n  <code id=\"result\">0</code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: HTML Timer Implementation with Multiline Data Attributes\nDESCRIPTION: Demonstrates a timer implementation using data attributes with multiline JavaScript expressions. Uses requestAnimationFrame (RAF) and Signals for optimized DOM updates, showing elapsed time since demo start.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/multiline_expressions.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{duration:0, lastRenderTime:Date.now()}\" data-on-raf=\"\n    const now = Date.now();\n    const delta = now - $lastRenderTime;\n    $duration += delta / 1000;\n    $lastRenderTime = now\n  \">\n  <div data-text=\"`Demo started ${Math.round($duration)} seconds ago`\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Smooth Scroll Into View\nDESCRIPTION: Shows how to use smooth scrolling modifier with scroll into view.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<div data-scroll-into-view__smooth></div>\n```\n\n----------------------------------------\n\nTITLE: Signal Change Event Listener\nDESCRIPTION: Shows basic signal change event handling without specific key.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-signal-change=\"$count++\"></div>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Signal Update Payload in JSON\nDESCRIPTION: This JSON snippet shows the payload sent to the server when signals change. It only includes the 'clicks' signal, demonstrating that signals prefixed with an underscore are not sent to the server, maintaining local-only state.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/signals_change.md#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"clicks\": 0 }\n```\n\n----------------------------------------\n\nTITLE: Combining Enter and Ctrl+L Key Detection in HTML\nDESCRIPTION: This code combines the detection of both Enter key press and Ctrl+L key combination, showing an alert for either event.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_bind_keydown_events_to_specific_keys.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-keydown__window=\"(evt.key === 'Enter' || (evt.ctrlKey && evt.key === 'l')) && alert('Key pressed')\"></div>\n```\n\n----------------------------------------\n\nTITLE: HTML Fragment with Input Value Binding\nDESCRIPTION: HTML structure for testing fragment merging with a bound input value, including an input field, action button, and result display area. Uses data-bind-result for binding and data-on-click for event handling.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/merge_fragment_input_value.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <div id=\"content\"><input id=\"populatable\" type=\"text\" data-bind-result class=\"input input-bordered\" /></div>\n  <button id=\"clickable\" data-on-click=\"@get('/tests/merge_fragment_input_value/data')\" class=\"btn\">Merge</button>\n  <hr />\n  Result:\n  <code id=\"result\">0</code>\n  <hr />\n  Expected result on entering `foo` in input and then click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing ServerSentEventGenerator.MergeFragments Method\nDESCRIPTION: Defines the MergeFragments method signature for sending HTML fragments to be merged into the DOM. This method allows specifying the merge behavior, selector targeting, and optional view transitions.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nServerSentEventGenerator.MergeFragments(\n    fragments: string,\n    options?: {\n        selector?: string,\n        mergeMode?: FragmentMergeMode,\n        useViewTransition?: boolean,\n        eventId?: string,\n        retryDuration?: durationInMilliseconds\n     }\n )\n```\n\n----------------------------------------\n\nTITLE: Testing data-attr-readonly Removal with HTML\nDESCRIPTION: A test case that demonstrates how data-attr-* removes an element's attribute when the value is false. Uses an input element with data-attr-readonly=\"false\" and displays the result of checking if the readonly attribute exists.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/attr_false.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <input type=\"text\" data-ref-input data-attr-readonly=\"false\" class=\"input input-bordered\" />\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$input.hasAttribute('readonly') ? 0 : 1\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Specific Signal Change Listener\nDESCRIPTION: Demonstrates listening for changes to a specific signal using a key.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-signal-change-foo=\"$fooCount++\"></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Radio Input Value Binding in HTML\nDESCRIPTION: This HTML snippet demonstrates a test case for radio input value binding. It includes two radio buttons with 'foo' and 'bar' values, and displays the result of the binding. The expected result is 1 when 'bar' is selected.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/radio_value.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-signals-result=\"'foo'\">\n  <input type=\"radio\" data-bind-result value=\"foo\" /> foo\n  <br>\n  <input id=\"clickable\" type=\"radio\" data-bind-result value=\"bar\" /> bar\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result === 'bar' ? 1 : 0\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Valid Namespaced Signal Usage\nDESCRIPTION: Shows correct usage of namespaced signals and multiple signal definitions.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/datastar_expressions.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo.bar=\"1\" data-signals-baz=\"1\">\n  <div data-text=\"$foo.bar\"></div> <!-- Valid -->\n  <div data-text=\"$baz\"></div> <!-- Valid -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Pokemon Carousel with DataStar Attribute in HTML\nDESCRIPTION: This HTML snippet sets up a div element for the Pokemon carousel. It uses a data-on-load attribute to trigger a GET request to '/examples/prefetch/load' when the element is loaded.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/prefetch.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"carousel\" data-on-load=\"@get('/examples/prefetch/load')\">\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar Ring Adapter with deps.edn in Clojure\nDESCRIPTION: Code snippet showing how to install the Datastar SDK and Ring adapter using deps.edn with git dependencies. Users need to replace 'LATEST SHA' with the actual commit SHA and add a dependency to a Ring-compliant adapter.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/adapter-ring/README.md#2025-04-23_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n{datastar/sdk {:git/url \"https://github.com/starfederation/datastar/\"\n               :git/sha \"LATEST SHA\"\n               :deps/root \"sdk/clojure/sdk\"}\n\n datastar/ring {:git/url \"https://github.com/starfederation/datastar/\"\n                :git/sha \"LATEST SHA\"\n                :deps/root \"sdk/clojure/adapter-ring\"}}\n```\n\n----------------------------------------\n\nTITLE: Merging HTML Fragments in DataStar\nDESCRIPTION: This snippet represents an HTML fragment that is part of a DataStar merge operation. It contains a simple div element with the text 'Merge'.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/post-cases/readSignalsFromBody/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>Merge</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable List UI with Datastar HTML\nDESCRIPTION: HTML structure for a sortable list using Datastar's data-signals and event handling. Creates a container with draggable items and displays order information through signal binding.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/sortable.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{orderInfo:''}\">\n  <div>OrderInfo: <span data-text=\"$orderInfo\">Order Info</span></div>\n  <div id=\"sortContainer\"\n    data-on-reordered=\"$orderInfo = event.detail.orderInfo; console.log(`You could send this to the server! ${$orderInfo}`)\"\n  >\n    <div>Item 1</div>\n    <div>Item 2</div>\n    <div>Item 3</div>\n    <div>Item 4</div>\n    <div>Item 5</div>\n  </div>\n  <script type=\"module\" src=\"/static/js/sortable.js\"></script>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting up Merge Fragment Test with Multiple Targets in HTML\nDESCRIPTION: This HTML snippet creates a test environment for merging fragments with multiple targets. It includes a button to trigger the merge action, target divs, and result display elements.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/merge_fragment_outer_multiple_targets.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <div id=\"content\" data-signals-result=\"0\"></div>\n  <button id=\"clickable\" data-on-click=\"@get('/tests/merge_fragment_outer_multiple_targets/data')\" class=\"btn\">Merge</button>\n  <div class=\"target\"></div>\n  <div class=\"target\"></div>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result == 2 ? 1 : 0\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Indicator Test Scenario in HTML\nDESCRIPTION: This HTML snippet sets up a test scenario for checking the indicator signal. It includes a button that triggers a GET request and elements to display the result. The test aims to verify that the indicator signal is set to false upon request completion.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/indicator.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <div id=\"content\" data-signals-result=\"0\"></div>\n  <button id=\"clickable\" data-on-click=\"@get('/tests/indicator_element_removed/data')\" data-indicator-fetching class=\"btn\">Fetch</button>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result && !$fetching ? 1 : 0\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing Local Signal Assignment in HTML Component\nDESCRIPTION: HTML component that tests local signal assignment by setting a '_result' signal to 1 on load and displaying its value. The component includes both the actual result and expected result for comparison.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/local_signals.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-_result=\"0\">\n  Result:\n  <code id=\"result\" data-on-load=\"$_result = 1\" data-text=\"$_result\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Conditional Action Triggers\nDESCRIPTION: Examples of using logical operators to conditionally trigger actions based on signal values.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/datastar_expressions.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"$landingGearRetracted && @post('/launch')\"></div\n\n<button data-on-click=\"$landingGearState == 'retracted' && @post('/launch')\"></div\n```\n\n----------------------------------------\n\nTITLE: Expression Return Values\nDESCRIPTION: Shows how expressions handle multiple statements and implicit returns.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/datastar_expressions.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"\n    $count++;\n    $message = 'Clicked ' + $count + ' times'\n\"></button>\n```\n\n----------------------------------------\n\nTITLE: Installing Ring Adapter Dependencies\nDESCRIPTION: Configuration for adding the Ring adapter implementation as a git dependency in deps.edn\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/README.md#2025-04-23_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n{datastar/ring {:git/url \"https://github.com/starfederation/datastar/\"\n                :git/sha \"LATEST_SHA\"\n                :deps/root \"sdk/clojure/adapter-ring\"}\n\n ring-compliant/adapter \"Coordinate for the ring compliant adater you want to use.\"}\n```\n\n----------------------------------------\n\nTITLE: Emitting DataStar Merge Signals Event\nDESCRIPTION: This snippet shows the structure of a 'datastar-merge-signals' event in the DataStar project. It includes the event name and associated data in JSON format.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/mergeSignalsWithDefaults/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\nevent: datastar-merge-signals\ndata: signals {\"one\":1,\"two\":2}\n```\n\n----------------------------------------\n\nTITLE: Merging HTML Fragments in DataStar Event Stream\nDESCRIPTION: This snippet defines an event for merging HTML fragments in the DataStar system. It uses the custom event type 'datastar-merge-fragments' and includes a data payload with a simple HTML div element containing the text 'Merge'.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/mergeFragmentsWithDefaults/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\nevent: datastar-merge-fragments\ndata: fragments <div>Merge</div>\n```\n\n----------------------------------------\n\nTITLE: Local Signal State Representation in JSON\nDESCRIPTION: This JSON snippet represents the local state of signals in DataStar. It includes both public and private (prefixed with underscore) signals, demonstrating how DataStar distinguishes between data that should be sent to the server and data that should remain local.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/signals_change.md#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"_sidebarOpen\": false,\n\"clicks\": 0,\n\"_localState\": {\n\"bar\": 1234\n},\n\"_anotherLocalVar\": \"hello\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing DataStar Plugin Name Prefix Handling in HTML\nDESCRIPTION: This HTML snippet tests if DataStar correctly ignores data attributes with plugin names in their prefix. It includes a div with 'data-classes' attribute, which should be ignored, and a code element with 'data-text' attribute, which should be processed.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/plugin_name_prefix.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-classes=\"whatever\">\n  Result:\n  <code id=\"result\" data-text=\"1\">0</code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sending PATCH Request with Datastar\nDESCRIPTION: Demonstrates the use of the @patch() action to send a PATCH request to a backend endpoint. It operates similarly to @get() but uses the PATCH method.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/action_plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@patch('/endpoint')\"></button>\n```\n\n----------------------------------------\n\nTITLE: Server-Sent Events Message for DataStar Signal Merging\nDESCRIPTION: An example of an SSE message format for the datastar-merge-signals event. The message includes an event identifier, retry interval of 2000ms, and data containing a merge configuration with 'onlyIfMissing' flag and a signals object with two key-value pairs.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/mergeSignalsWithAllOptions/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: sse\nCODE:\n```\nevent: datastar-merge-signals\nid: event1\nretry: 2000\ndata: onlyIfMissing true\ndata: signals {\"one\":1,\"two\":2}\n```\n\n----------------------------------------\n\nTITLE: Installing Http-kit Adapter Dependencies\nDESCRIPTION: Configuration for adding the Http-kit adapter implementation as a git dependency in deps.edn\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/README.md#2025-04-23_snippet_2\n\nLANGUAGE: clojure\nCODE:\n```\n{datastar/http-kit {:git/url \"https://github.com/starfederation/datastar/\"\n                    :git/sha \"LATEST_SHA\"\n                    :deps/root \"sdk/clojure/adapter-http-kit\"}}\n```\n\n----------------------------------------\n\nTITLE: Building HTML Fragments for DataStar Merge Operation\nDESCRIPTION: HTML fragments sent in a datastar-merge-fragments event. The fragments are delivered in the data portion of the event in chunks that together form a complete HTML element structure.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/mergeFragmentsWithMultilineFragments/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <span>Merge</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Signal Change Listener\nDESCRIPTION: Shows how to use pattern matching with signal change listeners using * and ** wildcards.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo.bar.baz=\"1\"\n     data-on-signal-change-foo.*.baz=\"$fooCount++\"\n     data-on-signal-change-foo.**=\"$fooCount++\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests with Task in Datastar\nDESCRIPTION: Command to run the rod-based end-to-end tests for the Datastar project after the documentation website is running. This uses the task runner to execute the test suite.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/BUILDING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ task test\n```\n\n----------------------------------------\n\nTITLE: Multiple Attribute Binding\nDESCRIPTION: Using data-attr to bind multiple attribute values\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<button data-attr=\"{disabled: $input == '', title: $input}\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: Loading Dynamic Content with HTML Data Attribute in DataStar\nDESCRIPTION: HTML element that loads dynamic content from a specified endpoint using a data-on-load attribute. This div will be replaced with content from the '/examples/quick_primer_go/data/replace' endpoint when the page loads.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/quick_primer_go.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"replaceMe\" data-on-load=\"@get('/examples/quick_primer_go/data/replace')\"></div>\n```\n\n----------------------------------------\n\nTITLE: Path Pattern Matching in Datastar\nDESCRIPTION: Examples of using wildcard patterns (* and **) in various Datastar attributes and actions for path matching.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\ndata-on-signals-change-foo.*.baz=\"action\"\ndata-on-signals-change-foo.**=\"action\"\ndata-persist=\"foo.*.baz foo.**\"\n@setAll('foo.*.baz', true)\n@setAll('foo.**', true)\n@toggleAll('foo.*.baz')\n@toggleAll('foo.**')\n```\n\n----------------------------------------\n\nTITLE: Server-Sent Event Format for DataStar Merge Signals\nDESCRIPTION: Demonstrates the format of a server-sent event (SSE) message for merging signals in the DataStar system. The event name is 'datastar-merge-signals' and the data payload contains a JSON object with signal key-value pairs.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/mergeSignalsWithoutDefaults/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-merge-signals\ndata: signals {\"one\":1,\"two\":2}\n```\n\n----------------------------------------\n\nTITLE: Requiring Datastar Namespaces\nDESCRIPTION: Example of requiring the main Datastar API and Http-kit adapter namespaces\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/README.md#2025-04-23_snippet_4\n\nLANGUAGE: clojure\nCODE:\n```\n(require '[starfederation.datastar.clojure.api :as d*])\n         '[starfederation.datastar.clojure.adapter.http-kit :as hk-gen])\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript Console Log via DataStar Event\nDESCRIPTION: A simple script execution event that logs 'hello' to the console through DataStar's event system. The script is triggered by the 'datastar-execute-script' event.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/executeScriptWithoutDefaults/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('hello');\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript via DataStar Event\nDESCRIPTION: A simple DataStar event structure for executing a JavaScript snippet. The event is identified as 'datastar-execute-script' and includes a data payload with a JavaScript console.log statement.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/executeScriptWithDefaults/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('hello');\n```\n\n----------------------------------------\n\nTITLE: Data Text with Expression\nDESCRIPTION: Using JavaScript expressions within data-text attribute for text transformation\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-input />\n<div data-text=\"$input.toUpperCase()\">\n  Will be replaced with the uppercase contents of the input signal\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Datastar Execute Script Event Example\nDESCRIPTION: Shows the minimal format for executing client-side JavaScript through datastar-execute-script event.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/README.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-execute-script\ndata: script window.location = \"https://data-star.dev\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Signal Reference Example in HTML\nDESCRIPTION: Demonstrates an incorrect way of accessing nested signal data where $foo is incorrectly referenced. Only leaf nodes in namespaced signals are valid signal references, not parent objects containing nested properties.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/invalid_signals.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{foo: {bar: 1, baz: 2}, woof: 1}\">\n    <div data-text=\"$foo.woof\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Multiple Select Element Binding Test HTML\nDESCRIPTION: HTML markup that tests multiple select element data binding. The implementation includes a select element with two options ('foo' and 'bar') and displays the binding results through signals.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/select_multiple.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-result=\"['foo']\">\\n  <select id=\"selectable\" data-bind-result multiple class=\"select select-bordered\"><option value=\"foo\">foo</option><option value=\"bar\">bar</option></select>\\n  <pre data-text=\"JSON.stringify($result)\"></pre>\\n  <hr />\\n  Result:\\n  <code id=\"result\" data-text=\"$result.includes('foo') && $result.includes('bar') ? 1 : 0\"></code>\\n  <hr />\\n  Expected result on selecting `foo` and `bar`: <code>1</code>\\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar Module Dependencies in Zig\nDESCRIPTION: Configuration code for adding Datastar as a dependency in a Zig project build file. Demonstrates how to specify the target, optimization, and framework options.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/zig/README.md#2025-04-23_snippet_0\n\nLANGUAGE: zig\nCODE:\n```\nconst datastar = b.dependency(\"datastar\", .{\n    .target = target,\n    .optimize = optimize,\n    .framework = .httpz, // or .tokamak\n}).module(\"datastar\");\n\nexe.root_module.addImport(\"datastar\", datastar);\n```\n\n----------------------------------------\n\nTITLE: Applying Easy Coding Standard to DataStar (Shell)\nDESCRIPTION: This command runs the Easy Coding Standard (ECS) tool on the DataStar project. It checks and fixes coding style issues to maintain consistent code quality across the project.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/php/tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer ecs\n```\n\n----------------------------------------\n\nTITLE: Signal Merge Event in Datastar\nDESCRIPTION: Demonstrates merging signals with new values and optional conditional updating based on existing keys.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/sse_events.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-merge-signals\ndata: onlyIfMissing false\ndata: signals {foo: 1}\n```\n\n----------------------------------------\n\nTITLE: Testing Fragment Merge with Whitespace Preservation in HTML\nDESCRIPTION: This HTML snippet sets up a test environment for merging a fragment while maintaining whitespace. It includes a button to trigger the merge action, a pre-formatted text area for the fragment, and elements to display the result and expected outcome.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/merge_fragment_whitespace.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-signals-result=\"0\">\n  <button id=\"clickable\" data-on-click=\"@get('/tests/merge_fragment_whitespace/data')\" class=\"btn\">Merge</button>\n  <pre id=\"fragment\"></pre>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Single Class Toggle\nDESCRIPTION: Using data-class attribute to toggle a single class based on condition\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-input />\n<button data-class-hidden=\"$input == ''\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: ServerSentEventGenerator RemoveSignals Method Signature\nDESCRIPTION: Function signature for RemoveSignals method showing required paths parameter and optional configuration options.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/README.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\nServerSentEventGenerator.RemoveSignals(\n    paths: string[],\n    options?: {\n        eventId?: string,\n        retryDuration?: durationInMilliseconds\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Extended Datastar Merge Signals Event Example\nDESCRIPTION: Demonstrates a complete merge signals event including optional parameters like id, retry duration, and onlyIfMissing flag.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/README.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-merge-signals\nid: 123\nretry: 2000\ndata: onlyIfMissing true\ndata: signals {\"output\":\"Patched Output Test\",\"show\":true,\"input\":\"Test\",\"user\":{\"name\":\"\",\"email\":\"\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Settings for WSGI with Datastar\nDESCRIPTION: Steps to modify Django settings for using Datastar in a WSGI context. This involves uncommenting the WSGI_APP setting, commenting out the ASGI_APP setting, and removing 'daphne' from INSTALLED_APPS.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/examples/python/django/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Uncomment the `WSGI_APP` setting, and comment out the `ASGI_APP` setting.\n\n2. In `INSTALLED_APPS` comment out `\"daphne\"`,\n\n3. Start runserver and go to http://127.0.0.1/wsgi/ and watch the demo.\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Plugin in DataStar\nDESCRIPTION: This snippet imports the DataStar library and defines a custom plugin named 'test'. The plugin, when triggered, sets the text content of an element with id 'result' to 1.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/custom_plugin.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { load } from '/static/js/datastar.js'\n\nload({\n  type: 3,\n  name: 'test',\n  fn: () => {\n    result.innerText = 1\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Reading signals using ServerSentEventGenerator in PHP\nDESCRIPTION: This snippet shows how to read signals using the ServerSentEventGenerator class. It uses the static method readSignals() to retrieve the signals.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/php/README.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse starfederation\\datastar\\ServerSentEventGenerator;\n\n$signals = ServerSentEventGenerator::readSignals();\n```\n\n----------------------------------------\n\nTITLE: DataStar Aliased Bundle Import\nDESCRIPTION: Shows how to import the aliased version of DataStar bundle using CDN.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\"\n  src=\"https://cdn.jsdelivr.net/gh/starfederation/datastar@v1.0.0-beta.11/bundles/datastar-aliased.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Alternative Data Binding Syntax\nDESCRIPTION: Alternative syntax for data binding using the value as signal name\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind=\"input\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Datastar Dispatcher in Ruby\nDESCRIPTION: Shows how to initialize the Datastar dispatcher in both Rails controllers and Rack handlers. The dispatcher requires request and response objects, with an optional view_context for rendering templates.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Rails controllers, as well as Sinatra and others, \n# already have request and response objects.\n# `view_context` is optional and is used to render Rails templates.\n# Or view components that need access to helpers, routes, or any other context.\n\ndatastar = Datastar.new(request:, response:, view_context:)\n\n# In a Rack handler, you can instantiate from the Rack env\ndatastar = Datastar.from_rack_env(env)\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced MergeFragments Event\nDESCRIPTION: Creating a MergeFragments event with additional options like mergeMode and useViewTransition. This example shows how to append content to an existing element with view transitions enabled.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/java/README.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nMergeFragments event = MergeFragments.builder()\n        .selector(\"#feed\")\n        .mergeMode(FragmentMergeMode.Append)\n        .useViewTransition(true)\n        .data(\"<div id=\\\"feed\\\">\\n<span>1</span>\\n</div>\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Using execute_script Method in Datastar\nDESCRIPTION: Shows how to send JavaScript code to be executed in the browser directly.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nsse.execute_scriprt(%(alert('Hello World!'))\n```\n\n----------------------------------------\n\nTITLE: Testing Key Casing Modifiers in HTML Template\nDESCRIPTION: An HTML template that tests various key casing styles using the __case modifier. The template includes data attributes for different casing styles and demonstrates the assignment and addition of values using different case formats.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/key_casing.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo-bar=\"0\" data-signals-foo-bar__case.kebab=\"0\" data-signals-foo-bar__case.snake=\"0\" data-signals-foo-bar__case.pascal=\"0\">\n  Result:\n  <code id=\"result\" data-on-load=\"$fooBar=0.25; $foo-bar=0.25; $foo_bar=0.25; $FooBar=0.25\" data-text=\"$fooBar + $foo-bar + $foo_bar + $FooBar\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sending a Default Server-Sent Event\nDESCRIPTION: Basic example of sending an event with default HTTP/SSE options. This uses a monotonically increasing integer counter for event IDs and a retry duration of 1000ms.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/java/README.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\ngenerator.send(event);\n```\n\n----------------------------------------\n\nTITLE: Signal Removal Event in Datastar\nDESCRIPTION: Demonstrates removing signals using specific paths.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/sse_events.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-remove-signals\ndata: paths foo.bar\ndata: paths baz\n```\n\n----------------------------------------\n\nTITLE: Using on_error Callback in Datastar\nDESCRIPTION: Registers code to handle any exceptions raised during streaming.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\ndatastar.on_error do |exception|\n  Sentry.notify(exception)\nend\n```\n\n----------------------------------------\n\nTITLE: Sending Merge Fragments Event with HTML Div\nDESCRIPTION: This code demonstrates a server-sent event (SSE) of type 'datastar-merge-fragments' with a data payload containing an HTML div element to be merged into the client-side DOM. The data property is prefixed with 'fragments' to indicate the content type.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/sendTwoEvents/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: sse\nCODE:\n```\nevent: datastar-merge-fragments\ndata: fragments <div>Merge</div>\n```\n\n----------------------------------------\n\nTITLE: Using remove_fragments Method in Datastar\nDESCRIPTION: Demonstrates how to remove HTML elements from the DOM using CSS selectors.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nsse.remove_fragments('#users')\n```\n\n----------------------------------------\n\nTITLE: Creating a MergeSignals Event\nDESCRIPTION: Example of creating a MergeSignals event to update client-side signal data. This event merges a JSON object into the client's signals object, with an option to only merge if the signal doesn't already exist.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/java/README.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nMergeSignals event = MergeSignals.builder()\n        .data(\"{\\\"key\\\": \\\"value\\\"}\")\n        .onlyIfMissing(true)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Datastar Build with NPM\nDESCRIPTION: Shows how to create a custom build by importing specific plugins from the NPM package and loading them individually using the core loader.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/custom_builds.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { load } from '@starfederation/datastar/bundles/datastar-core'\nimport { Class, Show, Text } from '@starfederation/datastar/plugins'\n\nload(Class, Show, Text)\n```\n\n----------------------------------------\n\nTITLE: Testing data-star-* Alias in HTML\nDESCRIPTION: This HTML snippet demonstrates the usage of data-star-* attributes for dynamic content updating and event handling. It initializes a result value, updates it on page load, and displays the result.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/aliased.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-star-signals-result=\"0\" data-star-on-load=\"$result = 1\">\n  Result:\n  <code id=\"result\" data-star-text=\"$result\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar Go SDK\nDESCRIPTION: This command installs the latest version of the Datastar Go SDK from the GitHub repository. It uses the 'go get' command to fetch and install the package.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/go/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/starfederation/datastar/sdk/go\n```\n\n----------------------------------------\n\nTITLE: SSE Generator Protocol Interface\nDESCRIPTION: Protocol definition that allows custom SSE adapter implementations with full control over the connection behavior and event handling.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/doc/SSE-design-notes.md#2025-04-23_snippet_2\n\nLANGUAGE: clojure\nCODE:\n```\nstarfederation.datastar.clojure.protocols/SSEGenerator\n```\n\n----------------------------------------\n\nTITLE: Configuring DataStar Merge Fragments SSE Event\nDESCRIPTION: A Server-Sent Event (SSE) configuration for DataStar that merges HTML fragments into the DOM. The event targets a div element, appends content, enables view transitions, and defines the HTML fragment to be inserted.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/mergeFragmentsWithAllOptions/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-merge-fragments\nid: event1\nretry: 2000\ndata: selector div\ndata: mergeMode append\ndata: useViewTransition true\ndata: fragments <div>Merge</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Component with render_in Interface\nDESCRIPTION: Shows how to create a custom component that implements the render_in interface for use with Datastar.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyComponent\n  def initialize(name)\n    @name = name\n  end\n\n  def render_in(view_context)\n    \"<div>Hello #{@name}</div>\"\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Reading Signals from a Request\nDESCRIPTION: Example of creating a DataStore and reading signals from a client request. This allows server-side code to access and process client-side signal data that was sent in the request.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/java/README.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nDataStore store = new DataStore();\nSignalReader.readSignals(request, store);\n```\n\n----------------------------------------\n\nTITLE: Executing Generic Bash SDK Tests in Clojure\nDESCRIPTION: Step-by-step instructions for running generic bash SDK tests, including commands to execute the test suite and specify the target server.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/doc/maintainers-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. go to `sdk/clojure/sdk-tests/`\n2. run `clojure -M -m starfederation.datastar.clojure.sdk-test.main`\n3. go to `sdk/test/`\n4. run `./test-all.sh localhost:8080`\n```\n\n----------------------------------------\n\nTITLE: Load Event Handling with data-on-load Attribute in HTML\nDESCRIPTION: Illustrates the usage of the data-on-load attribute to run expressions when an element is loaded into the DOM.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-load=\"$count = 1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar SDK via deps.edn\nDESCRIPTION: Configuration snippet showing how to add the Datastar SDK as a git dependency in a deps.edn file. The SDK needs to be referenced using the latest git SHA from the develop branch.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/sdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n{datastar/sdk {:git/url \"https://github.com/starfederation/datastar/tree/develop\"\n               :git/sha \"LATEST SHA\"\n               :deps/root \"sdk/clojure/sdk\"}}\n```\n\n----------------------------------------\n\nTITLE: Setting up Server-Sent Events Generator\nDESCRIPTION: Code to initialize the ServerSentEventGenerator with a response adapter. This setup is required before sending any events to the client.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/java/README.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nAbstractResponseAdapter responseAdapter = new HttpServletResponseAdapter(response);\n\nServerSentEventGenerator generator = new ServerSentEventGenerator(responseAdapter);\n```\n\n----------------------------------------\n\nTITLE: Using Datastar ServerSentEventGenerator in Zig\nDESCRIPTION: Example of using Datastar's ServerSentEventGenerator to handle server-sent events, including merging HTML fragments and signals into the DOM. Shows initialization and basic operations with the SSE generator.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/zig/README.md#2025-04-23_snippet_1\n\nLANGUAGE: zig\nCODE:\n```\nconst datastar = @import(\"datastar\").httpz;\n\n// Creates a new `ServerSentEventGenerator`.\nvar sse = try datastar.ServerSentEventGenerator.init(res);\n\n// Merges HTML fragments into the DOM.\ntry sse.mergeFragments(\"<div id='question'>What do you put in a toaster?</div>\", .{});\n\n// Merges signals into the signals.\ntry sse.mergeSignals(.{ .response = \"\", .answer = \"bread\" }, .{});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Component with Datastar\nDESCRIPTION: Shows how to use a custom component that implements the render_in interface with Datastar.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nsse.merge_fragments MyComponent.new('Joe')\n```\n\n----------------------------------------\n\nTITLE: Advanced SSE Handler with Connection Management\nDESCRIPTION: Example of implementing an SSE handler that maintains connections and allows broadcasting fragments to all connected clients\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/README.md#2025-04-23_snippet_6\n\nLANGUAGE: clojure\nCODE:\n```\n(def !connections (atom #{}))\n\n\n(defn sse-handler [request]\n  (hk-gen/->sse-response request\n    {hk-gen/on-open\n     (fn [sse-gen]\n       (swap! !connections conj sse-gen))\n\n     hk-gen/on-close\n     (fn [sse-gen status]\n       (swap! !connections disj sse-gen))}))\n\n\n(defn broadcast-fragment! [fragment]\n  (doseq [c @!connections]\n    (d*/merge-fragment! c fragment)))\n```\n\n----------------------------------------\n\nTITLE: Running the NodeJS Server for Testing\nDESCRIPTION: Shell commands for building the SDK and running the NodeJS server for testing purposes.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/typescript/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ deno run -A build.ts xxx\n$ node ./npm/esm/node/node.js\n```\n\n----------------------------------------\n\nTITLE: Implementing cross-browser compatible redirection in Python with DataStar SDK\nDESCRIPTION: This Python code snippet shows a cross-browser compatible way to implement backend redirection using the DataStar SDK. It uses setTimeout to ensure compatibility with Firefox.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_redirect_the_page_from_the_backend.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom datastar import SSE\n\n@app.get(\"/how_tos/redirect/data\")\ndef redirect():\n    yield SSE.merge_fragments(indicator=\"You will be redirected in 3 seconds...\")\n    yield SSE.sleep(3)\n    yield SSE.execute_script(\"setTimeout(() => { window.location.href = '/guide' }, 0)\")\n```\n\n----------------------------------------\n\nTITLE: Installing DataStar Malli Schemas as Git Dependency in Clojure\nDESCRIPTION: Shows how to include the DataStar Malli schemas as a git dependency in a deps.edn file. The dependency requires specifying the git URL, latest SHA, and the specific root directory for the schemas.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/malli-schemas/README.md#2025-04-23_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n{datastar/malli-schemas {:git/url \"https://github.com/starfederation/datastar/\"\n                         :git/sha \"LATEST SHA\"\n                         :deps/root \"sdk/clojure/malli-schemas\"}}\n```\n\n----------------------------------------\n\nTITLE: Rendering ViewComponent Instances with Datastar\nDESCRIPTION: Shows how to render ViewComponent instances when streaming updates to the browser.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nsse.merge_fragments(UserViewComponent.new(user: User.first))\n```\n\n----------------------------------------\n\nTITLE: Simplified Default Function Interface in Haskell\nDESCRIPTION: Streamlined wrapper functions that use default parameters for the most common Datastar operations, making the SDK easier to use for typical scenarios.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/haskell/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Haskell\nCODE:\n```\nwithDefaults :: EventType -> Text -> Text\nwithDefaults MergeFragments  txt\nwithDefaults RemoveFragments txt\nwithDefaults MergeSignals    txt\nwithDefaults RemoveSignals   txt\nwithDefaults ExecuteScript   txt\n```\n\n----------------------------------------\n\nTITLE: Core Datastar SDK Functions Definition in Haskell\nDESCRIPTION: The main interface functions for the Datastar SDK, providing capabilities for merging and removing fragments and signals, executing scripts, and server communication in Snap.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/haskell/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Haskell\nCODE:\n```\nmergeFragments  :: Text -> Selector -> MergeMode -> FragmentOptions -> Options -> Text\nremoveFragments :: Selector  -> FragmentOptions -> Options -> Text\nmergeSignals    :: Text -> Bool -> Options -> Text\nremoveSignals   :: [Text] -> Options -> Text\nexecuteScript   :: Text -> Text -> Bool -> Options -> Text\nsend            :: Text -> Snap ()       -- !!Only for Snap web server!!\nreadSignals     :: Snap (Request, Value) -- !!Only for Snap web server!!\n```\n\n----------------------------------------\n\nTITLE: Testing data-ref Attribute in HTML\nDESCRIPTION: This HTML snippet tests the correct application of the 'data-ref' attribute. It includes a div element with 'data-ref-result' and 'data-val' attributes, displaying the current and expected results.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/ref.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-ref-result data-val=\"1\">\n  Result:\n  <code id=\"result\" data-text=\"$result.getAttribute('data-val')\">0</code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Response Format\nDESCRIPTION: Example of server response format using datastar-merge-fragments event to update DOM elements.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_poll_the_backend_at_regular_intervals.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nevent: datastar-merge-fragments\ndata: fragments <div id=\"time\" data-on-interval__duration.5s=\"@get('/endpoint')\">\n     data: fragments {{ now }}\n     data: fragments </div>\n```\n\n----------------------------------------\n\nTITLE: Implementing SSE Generator with Return Message in Clojure\nDESCRIPTION: Example implementation of an SSE generator that returns the event text instead of sending it. It demonstrates how to implement the SSEGenerator protocol and use the write-event! helper function.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/doc/implementing-adapters.md#2025-04-23_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(deftype ReturnMsgGen []\n  p/SSEGenerator\n  (send-event! [_ event-type data-lines opts]\n    (-> (StringBuilder.)\n        (sse/write-event! event-type data-lines opts) ; just pass the parameters down\n        str)) ; we return the event string instead of sending it\n\n  (close-sse! [_]))\n\n\n(defn ->sse-gen [& _]\n  (->ReturnMsgGen))\n```\n\n----------------------------------------\n\nTITLE: Rendering Rails Templates with Datastar\nDESCRIPTION: Shows how to render Rails templates when streaming updates. Requires initializing Datastar with view_context for helpers and routes access.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\ndatastar = Datastar.new(request:, response:, view_context:)\n\ndatastar.stream do |sse|\n  10.times do |i|\n    sleep 1\n    tpl = render_to_string('events/user', layout: false, locals: { name: \"David #{i}\" })\n    sse.merge_fragments tpl\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Heartbeat in Datastar Streaming\nDESCRIPTION: Shows how to disable the connection heartbeat for scenarios where it's not needed, to save system resources.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\ndatastar = Datastar.new(request:, response:, view_context:, heartbeat: false)\n\ndatastar.stream do |sse|\n  100.times do |i|\n    sleep 1\n    sse.merge_signals count: i\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running the Deno Server for Testing\nDESCRIPTION: Command for starting the Deno server implementation with network permissions.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/typescript/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ deno --allow-net  ./src/web/deno.ts\n```\n\n----------------------------------------\n\nTITLE: Using on_server_disconnect Callback in Datastar\nDESCRIPTION: Registers code to run when a connection is closed by the server after streaming is complete without errors.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\ndatastar.on_server_connect do\n  puts 'Server is done streaming'\nend\n```\n\n----------------------------------------\n\nTITLE: SSE Protocol Implementation in Clojure\nDESCRIPTION: Core namespace that provides essential SSE functionality including header generation and event writing using java.util.appendable. This implementation forms the foundation for SSE support in the Datastar SDK.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/doc/SSE-design-notes.md#2025-04-23_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\nstarfederation.datastar.clojure.api.sse\n\n- headers: generate HTTP headers with the SSE specific ones given a ring request.\n- write-event!: provides a way to assemble an SSE event's string using a java.util.appendable.\n```\n\n----------------------------------------\n\nTITLE: Server-Sent Events for Fragment Merging\nDESCRIPTION: Example of SSE event for appending new content to the list. Specifies the target selector and merge mode for DOM manipulation.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_load_more_list_items.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-merge-fragments\ndata: selector #list\ndata: mergeMode append\ndata: fragments <div>Item 2</div>\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Write Profile in SSE Response Handler in Clojure\nDESCRIPTION: Shows how to use a custom write profile in an SSE response handler. The example demonstrates setting up the SSE response with the custom profile and merging a fragment into the SSE stream.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/doc/Write-profiles.md#2025-04-23_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\n(require\n  '[starfederation.datastar.clojure.api :as d*]\n  '[starfederation.datastar.clojure.adapter.ring :refer [->sse-response on-open]])\n\n(defn handler [req]\n  (->sse-response req\n    {ac/write-profile my-write-profile ;; note the use of the write profile here\n     on-open\n     (fn [sse]\n       (d*/with-open-sse sse\n         (d*/merge-fragment! sse \"some big fragment\")))}))\n```\n\n----------------------------------------\n\nTITLE: Using on_connect Callback in Datastar\nDESCRIPTION: Registers code to run when a browser connection is first established.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ndatastar.on_connect do\n  puts 'A user has connected'\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar PHP SDK using Composer\nDESCRIPTION: This snippet shows how to install the Datastar PHP SDK using Composer. It requires PHP 8.1 or later.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/php/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require starfederation/datastar-php\n```\n\n----------------------------------------\n\nTITLE: Manual Connection Checking in Datastar\nDESCRIPTION: Demonstrates how to manually check connection status instead of using automatic heartbeat, useful for integration with event buses.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\ndatastar = Datastar.new(request:, response:, view_context:, heartbeat: false)\n\ndatastar.stream do |sse|\n  # The event bus implementaton will check connection status when idle\n  # by calling #check_connection! on it\n  EventBus.subscribe('channel', sse) do |event|\n    sse.merge_signals eventName: event.name\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Heartbeat Interval in Datastar\nDESCRIPTION: Shows how to configure a custom heartbeat interval in seconds.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nheartbeat: 0.5\n```\n\n----------------------------------------\n\nTITLE: Toggling Multiple Signal Values with @toggleAll()\nDESCRIPTION: Demonstrates using @toggleAll() to toggle boolean values for multiple signals matching a wildcard pattern. Takes a path pattern as argument.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<button data-on-click=\"@toggleAll('foo.*')\"></button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Write Profile for SSE with Gzip Compression in Clojure\nDESCRIPTION: Demonstrates how to create a custom write profile for SSE connections using gzip compression and a temporary write buffer strategy. It specifies the output stream wrapper, writing function, and content encoding.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/doc/Write-profiles.md#2025-04-23_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n(require\n  '[starfederation.datastar.clojure.adapter.common :as ac])\n\n(def my-write-profile\n   ;; We specify a function that will wrap the output stream\n   ;; used for the SSE connection\n  {ac/wrap-output-stream (fn [os] (-> os ac/->gzip-os ac/->os-writer))\n\n   ;; We specify which writing function to use on the output stream\n   ;; Since we just use an OutputStreamWriter in the wrap function above\n   ;; we go for the temp buffer writing function helper\n   ac/write! (ac/->write-with-temp-buffer!)\n\n   ;; We also provide a content encoding header for the HTTP response\n   ;; this way it is automatically added\n   ac/content-encoding ac/gzip-content-encoding})\n```\n\n----------------------------------------\n\nTITLE: Basic SSE Handler Implementation\nDESCRIPTION: Example of implementing a basic SSE handler using Http-kit adapter that sends a single fragment and closes\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/README.md#2025-04-23_snippet_5\n\nLANGUAGE: clojure\nCODE:\n```\n(defn sse-handler [request]\n  (hk-gen/->sse-response request\n    {hk-gen/on-open\n     (fn [sse-gen]\n       (d*/merge-fragment! sse-gen \"<div>test</div>\")\n       (d*/close-sse! sse-gen))}))\n```\n\n----------------------------------------\n\nTITLE: Using remove_signals Method in Datastar\nDESCRIPTION: Demonstrates how to remove specific data signals from the browser by specifying their paths.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nsse.remove_signals(['user.name', 'user.email'])\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar SDK Dependencies\nDESCRIPTION: Configuration for adding the core Datastar SDK as a git dependency in deps.edn\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n{datastar/sdk {:git/url \"https://github.com/starfederation/datastar/\"\n               :git/sha \"LATEST_SHA\"\n               :deps/root \"sdk/clojure/sdk\"}}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Plugin to HTML Element\nDESCRIPTION: This HTML snippet demonstrates the usage of the custom 'test' plugin. The div element has a data-on-load attribute that triggers the plugin on page load, changing the content of the 'result' code element from 0 to 1.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/custom_plugin.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-on-load=\"@test()\">\n  Result:\n  <code id=\"result\">0</code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining ServerSentEventGenerator.send Method Signature\nDESCRIPTION: Defines the signature for the core send method used by the ServerSentEventGenerator to transmit events to the client. This method handles the construction and sending of SSE events with appropriate headers and formatting.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nServerSentEventGenerator.send(\n    eventType: EventType,\n    dataLines: string[],\n    options?: {\n        eventId?: string,\n        retryDuration?: durationInMilliseconds\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Invalid Namespaced Signal Example\nDESCRIPTION: Demonstrates an invalid usage of namespaced signals where the namespace itself is incorrectly referenced.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/datastar_expressions.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo.bar=\"1\">\n  <div data-text=\"$foo\"></div> <!-- Invalid -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: SSE Adapter Implementation in Clojure\nDESCRIPTION: Common adapter namespace that provides helper functions for building SSE machinery for Ring adapters, implementing write profiles for configuring SSE connection behavior regarding buffering and compression.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/doc/SSE-design-notes.md#2025-04-23_snippet_1\n\nLANGUAGE: clojure\nCODE:\n```\nstarfederation.datastar.clojure.adapter.common\n\n// Provides write profiles mechanism for configuring SSE connection behavior\n```\n\n----------------------------------------\n\nTITLE: Testing Indicator Element Removal in HTML\nDESCRIPTION: This HTML snippet sets up a test scenario for handling indicator signals. It includes a button that triggers a fetch request with an indicator, and displays the result. The test aims to verify that the indicator signal is set to false when the request completes and the element is removed from the DOM.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/indicator_element_removed.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <div id=\"content\" data-signals-result=\"0\"><button id=\"clickable\" data-on-click=\"@get('/tests/indicator_element_removed/data')\" data-indicator-fetching class=\"btn\">Fetch</button></div>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result && !$fetching ? 1 : 0\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Malli Schema Dependencies\nDESCRIPTION: Configuration for adding the Malli schemas as a git dependency in deps.edn\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/README.md#2025-04-23_snippet_3\n\nLANGUAGE: clojure\nCODE:\n```\n{datastar/malli-schemas {:git/url \"https://github.com/starfederation/datastar/\"\n                         :git/sha \"LATEST_SHA\"\n                         :deps/root \"sdk/clojure/malli-schemas\"}}\n```\n\n----------------------------------------\n\nTITLE: DataStar Fragment Removal Event Configuration\nDESCRIPTION: Event configuration specifying removal of fragments targeting an element with id 'target'. Uses the datastar-remove-fragments event type with a CSS selector.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/removeFragmentsWithDefaults/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-remove-fragments\ndata: selector #target\n```\n\n----------------------------------------\n\nTITLE: Running the Test Suite for Deno Server\nDESCRIPTION: Commands for executing the test suite against a running Deno server implementation of the SDK.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/typescript/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ../test\n$ ./test-all.sh http://localhost:8000/\nRunning tests with argument: http://localhost:8000/\nProcessing GET cases...\nProcessing POST cases...\n```\n\n----------------------------------------\n\nTITLE: Single Attribute Binding\nDESCRIPTION: Using data-attr to bind a single attribute value\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/getting_started.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<input data-bind-input />\n<button data-attr-disabled=\"$input == ''\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: Executing Client-Side Redirects with SSE in DataStar\nDESCRIPTION: Demonstrates how to use the datastar-execute-script SSE event to perform client-side navigation. The event contains JavaScript code that updates the window.location to redirect users to a new page.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/redirects.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nevent: datastar-execute-script\ndata: script window.location = \"/essays/grugs_around_fire\"\n```\n\n----------------------------------------\n\nTITLE: Star Ignore Implementation in HTML\nDESCRIPTION: Shows how to use data-star-ignore to prevent Datastar from processing certain DOM elements.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div data-star-ignore data-show-thirdpartylib>\n  <div data-show-thirdpartylib>\n    These element will not be processed by Datastar.\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: RequestAnimationFrame Event Listener\nDESCRIPTION: Shows how to run an expression on every requestAnimationFrame event.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-raf=\"$count++\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining DataStar Remove Fragments Event\nDESCRIPTION: Specifies a DataStar event that instructs the system to remove fragments from elements matching the '#target' selector. This event follows the Server-Sent Events (SSE) format with an event type and associated data payload.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/removeFragmentsWithoutDefaults/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-remove-fragments\ndata: selector #target\n```\n\n----------------------------------------\n\nTITLE: Signal Remove Event Stream Format\nDESCRIPTION: Example of the SSE event format used for removing signals, showing the event type and path-based removal syntax. Supports dot-notation for nested signal paths.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/update_signals.md#2025-04-23_snippet_2\n\nLANGUAGE: text/event-stream\nCODE:\n```\nevent: datastar-remove-signals,\ndata: paths 12768 existingSignals\n```\n\n----------------------------------------\n\nTITLE: Styling a Disabled Button with CSS\nDESCRIPTION: CSS styles that define the appearance of a button in both its normal and disabled states. The disabled state has reduced opacity and a 'not-allowed' cursor to indicate it's inactive.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/disable_button.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#target {\n      padding: 10px;\n      background-color: #4CAF50;\n      color: white;\n      border: none;\n      cursor: pointer;\n      border-radius: 5px;\n    }\n    #target[disabled] {\n      opacity: 0.25;\n      cursor: not-allowed;\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Scroll Into View\nDESCRIPTION: Demonstrates basic scroll into view functionality.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_29\n\nLANGUAGE: html\nCODE:\n```\n<div data-scroll-into-view></div>\n```\n\n----------------------------------------\n\nTITLE: Preventing Default Behavior on Enter Key Press in HTML\nDESCRIPTION: This snippet demonstrates how to prevent the default behavior of the Enter key (e.g., form submission) while still showing an alert.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_bind_keydown_events_to_specific_keys.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div data-on-keydown__window=\"evt.key === 'Enter' && (evt.preventDefault(), alert('Key pressed'))\"></div>\n```\n\n----------------------------------------\n\nTITLE: View Transition Name Setting\nDESCRIPTION: Demonstrates setting view transition name explicitly.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<div data-view-transition=\"$foo\"></div>\n```\n\n----------------------------------------\n\nTITLE: Starting Clojure REPL with CIDER middleware\nDESCRIPTION: Command to start a Clojure REPL with CIDER middleware enabled for development and debugging.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/examples/clojure/hello-world/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nclojure -M:repl -m nrepl.cmdline --middleware \"[cider.nrepl/cider-middleware]\"\n```\n\n----------------------------------------\n\nTITLE: Loading DBmon Contents via Datastar\nDESCRIPTION: HTML element that loads DBmon content using Datastar's data-on-load attribute to make a GET request to the '/examples/dbmon/contents' endpoint when the page loads.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/dbmon.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"contents\" data-on-load=\"@get('/examples/dbmon/contents')\"></div>\n```\n\n----------------------------------------\n\nTITLE: SSE Event Handler Implementation in HTML\nDESCRIPTION: HTML markup that sets up event listeners for SSE events and displays results. Uses data attributes to track event counts and handle SSE responses, with a counter that increments on each event received.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/sse_events.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-signals-result=\"0\" data-on-datastar-sse=\"$result++; events.innerHTML += evt.detail.type + '\\n'\" data-on-load=\"@get('/tests/sse_events/data')\">\n  <pre id=\"events\"></pre>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result == 2 ? 1 : 0\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Signal Modifiers Usage in HTML\nDESCRIPTION: Demonstrates the use of modifiers with data-signals for controlling casing and conditional signal merging.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/reference/attribute_plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-my-signal__case.kebab=\"1\" data-signals-foo__ifmissing=\"1\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using helper method for redirection in Python with DataStar SDK\nDESCRIPTION: This Python code snippet demonstrates the use of a helper method provided by some DataStar SDKs to simplify the redirection process and ensure cross-browser compatibility.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_redirect_the_page_from_the_backend.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom datastar import SSE\n\n@app.get(\"/how_tos/redirect/data\")\ndef redirect():\n    yield SSE.merge_fragments(indicator=\"You will be redirected in 3 seconds...\")\n    yield SSE.sleep(3)\n    yield SSE.redirect(\"/guide\")\n```\n\n----------------------------------------\n\nTITLE: Imperative DOM Manipulation in JavaScript\nDESCRIPTION: An example of imperative JavaScript code for conditionally adding or removing a CSS class from an element based on a condition.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/going_deeper.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (foo == 1) {\n  document.getElementById('myelement').classList.add('bold');\n} else {\n  document.getElementById('myelement').classList.remove('bold');\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry Links\nDESCRIPTION: Version comparison links for the Datastar plugin repository, linking different release versions for comparison in GitHub.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/tools/intellij-plugin/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Unreleased]: https://github.com/starfederation/datastar/tools/intellij-plugin/compare/v1.0.2...HEAD\n[1.0.2]: https://github.com/starfederation/datastar/tools/intellij-plugin/compare/v1.0.1...v1.0.2\n[1.0.1]: https://github.com/starfederation/datastar/tools/intellij-plugin/compare/v1.0.0...v1.0.1\n[1.0.0]: https://github.com/starfederation/datastar/tools/intellij-plugin/compare/v0.21.0...v1.0.0\n[0.21.0]: https://github.com/starfederation/datastar/tools/intellij-plugin/commits/v0.21.0\n```\n\n----------------------------------------\n\nTITLE: Building the NPM Package with Deno\nDESCRIPTION: Command for using Deno to build the NPM package for the SDK, requiring the VERSION parameter to be specified.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/typescript/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ deno run -A build.ts xxx\n```\n\n----------------------------------------\n\nTITLE: Implementing backend redirection in Python with DataStar SDK\nDESCRIPTION: This Python code snippet demonstrates how to implement backend redirection using the DataStar SDK. It updates an indicator, waits for 3 seconds, then redirects the user to the guide page.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_redirect_the_page_from_the_backend.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom datastar import SSE\n\n@app.get(\"/how_tos/redirect/data\")\ndef redirect():\n    yield SSE.merge_fragments(indicator=\"You will be redirected in 3 seconds...\")\n    yield SSE.sleep(3)\n    yield SSE.execute_script(\"window.location.href = '/guide'\")\n```\n\n----------------------------------------\n\nTITLE: Event Stream Format for DataStar Remove Signals\nDESCRIPTION: Server-sent event format specification for datastar-remove-signals event. Includes event type, ID, retry timeout, and multiple data paths. The retry value is set to 2000ms with sequential data paths.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/removeSignalsWithAllOptions/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: event-stream\nCODE:\n```\nevent: datastar-remove-signals\nid: event1\nretry: 2000\ndata: paths one\ndata: paths two.alpha\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Datastar Ruby SDK\nDESCRIPTION: Shows how to run the test suite for the Datastar Ruby SDK.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec rspec\n```\n\n----------------------------------------\n\nTITLE: Executing Development Tasks with Babashka in Clojure\nDESCRIPTION: Commands for starting a REPL with various configurations using Babashka (bb) for development purposes. It includes options for different server implementations and additional dependencies.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/doc/maintainers-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `bb run dev`: start a repl with the dev nss, the test nss the malli schemas,\n  ring-jetty and Http-kit on the classpath\n- `bb run dev:rj9a`: same as basic dev task expect for ring-jetty being replaced\n  with rj9a.\n\n> [!note]\n> You can add additional deps aliases when calling these tasks:\n> `bb run dev :debug` will add a Flowstorm setup\n```\n\n----------------------------------------\n\nTITLE: Running the Datastar Test Rack App\nDESCRIPTION: Instructions for running the test Rack application included with Datastar.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nbundle install\n```\n\nLANGUAGE: bash\nCODE:\n```\nbundle puma examples/test.ru\n```\n\nLANGUAGE: bash\nCODE:\n```\n./test-all.sh http://localhost:9292\n```\n\n----------------------------------------\n\nTITLE: SSE Error Event Handler HTML Implementation\nDESCRIPTION: HTML markup that implements event listeners for SSE error events. Uses data attributes to bind event handlers and display results. Includes a pre-formatted text area for event logging and result display.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/sse_error_event.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-signals-result=\"0\"\n  data-on-datastar-sse=\"evt.detail.type == 'error' && $result++; events.innerHTML += evt.detail.type + '\\n'\" data-on-load=\"@get('/tests/sse_error_event/data')\">\n  <pre id=\"events\"></pre>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Synchronous External Script with Datastar\nDESCRIPTION: Demonstrates how to integrate a synchronous external function with Datastar using data attributes for reactivity. Shows data binding and result display pattern.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/stop_overcomplicating_it.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-result=\"''\">\n  <input data-bind-foo \n         data-on-input=\"$result = myfunction($foo)\"\n  >\n  <span data-text=\"$result\"></span>\n</div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myfunction(data) {\n  return `You entered ${data}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting REPL with CIDER Middleware for Clojure SDK Tests\nDESCRIPTION: Command to start a Clojure REPL with CIDER middleware for interactive development and testing of the SDK.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/sdk-tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nclojure -M:repl -m nrepl.cmdline --middleware \"[cider.nrepl/cider-middleware]\"\n```\n\n----------------------------------------\n\nTITLE: Running Main SDK Test Application in Clojure\nDESCRIPTION: Command to execute the main SDK test application using Clojure. This runs the tests defined in the starfederation.datastar.clojure.sdk-test.main namespace.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/sdk-tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nclojure -M -m starfederation.datastar.clojure.sdk-test.main\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 200 OK Response for 404 Error in HTML\nDESCRIPTION: This snippet demonstrates how to return a 200 OK status code while displaying a 404 error message in the HTML content. This approach is suggested for user-facing interfaces using HTTP.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/essays/i_am_a_teapot.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/html\n<H1>Error 404</H1>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webdriver Tests in EDN for Clojure\nDESCRIPTION: EDN configuration structure for webdriver tests, specifying driver types and options using the etaoin library. This configuration is typically found in the test.config.edn file.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/doc/maintainers-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: edn\nCODE:\n```\n- `:drivers`: [etaoin](https://github.com/clj-commons/etaoin) webdriver types to run\n- `:webdriver-opts`: a map of webdriver type to webriver specific options\n```\n\n----------------------------------------\n\nTITLE: Implementing Signal Change Detection with DataStar Attributes\nDESCRIPTION: HTML markup that sets up signal change detection using data attributes. Initializes two signals 'foo' and 'result', updates result when foo changes, and displays the result value. The component automatically sets foo to 1 on load.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/on_signal_change_path.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{foo: 0, result: 0}\" data-on-signal-change-foo=\"$result = $foo\" data-on-load=\"$foo = 1\">\n  Result:\n  <code id=\"result\" data-text=\"$result\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Test Tasks with Babashka in Clojure\nDESCRIPTION: Commands for executing various test suites using Babashka (bb). It includes options for running all tests and specific adapter tests.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/doc/maintainers-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `bb run test:all`: run all test for the SDK, the Http-kit adapter and the\n  ring adapter using ring-jetty.\n- `bb run test:rj9a`: run all test for the SDK and the ring adapter using rj9a.\n```\n\n----------------------------------------\n\nTITLE: Running Clojure Main Program\nDESCRIPTION: Command to execute the main program entry point in the example.main namespace.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/examples/clojure/hello-world/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nclojure -M -m example.main\n```\n\n----------------------------------------\n\nTITLE: Installing Datastar SDK and HTTP-Kit Adapter as Git Dependencies in deps.edn\nDESCRIPTION: This snippet shows how to add the Datastar SDK and HTTP-Kit adapter as git dependencies in a deps.edn file. The dependencies specify the GitHub repository URL, commit SHA (which needs to be replaced with the latest commit SHA), and the subdirectory path within the repository.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/adapter-http-kit/README.md#2025-04-23_snippet_0\n\nLANGUAGE: clojure\nCODE:\n```\n{datastar/sdk {:git/url \"https://github.com/starfederation/datastar/\"\n               :git/sha \"LATEST SHA\"\n               :deps/root \"sdk/clojure/sdk\"}\n\n datastar/http-kit {:git/url \"https://github.com/starfederation/datastar/\"\n                    :git/sha \"LATEST SHA\"\n                    :deps/root \"sdk/clojure/adapter-http-kit\"}}\n```\n\n----------------------------------------\n\nTITLE: HTML Signal Change Detection\nDESCRIPTION: HTML markup demonstrating signal change detection with data attributes. Sets up reactive binding between a foo.bar signal and result, updating result when foo.bar changes on load.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/on_signal_change.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{foo: {bar: 0}, result: 0}\" data-on-signal-change=\"$result = $foo.bar\" data-on-load=\"$foo.bar = 1\">\n  Result:\n  <code id=\"result\" data-text=\"$result\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing ServerSentEventGenerator.RemoveFragments Method\nDESCRIPTION: Defines the RemoveFragments method signature for removing HTML fragments from the DOM. This method takes a CSS selector to target elements for removal and supports view transitions.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nServerSentEventGenerator.RemoveFragments(\n    selector: string,\n    options?: {\n        useViewTransition?: boolean,\n        eventId?: string,\n        retryDuration?: durationInMilliseconds\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Plugin Description Block in Markdown\nDESCRIPTION: Core description section of the plugin that appears in the JetBrains marketplace, explaining the main features and functionality of the Datastar support plugin.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/tools/intellij-plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Plugin description -->\nThis plugin offers IntelliJ IDE support for the [Datastar](https://data-star.dev/) framework.\n\nIt offers autocomplete for all of the Datastar custom `data-*` attributes, with additional autocomplete of DOM\nattributes and events.\n\nYou can show the documentation alongside the autocomplete suggestions via the File &rarr; Settings &rarr; Editor &rarr;\nGeneral &rarr;\nCode Completion: **Show the documentation popup in .... ms checkbox**\n<!-- Plugin description end -->\n```\n\n----------------------------------------\n\nTITLE: HTML Fragment with DataStar Event Bindings\nDESCRIPTION: HTML markup demonstrating DataStar's data binding and event handling capabilities, including show/hide functionality, click events, and data fetching via GET requests.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/merge_fragment_containing_on_event.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <div id=\"content\" data-signals-hidden=\"false\" data-show=\"!$hidden\"><button data-on-click=\"$hidden = true\" data-show=\"!$hidden\" class=\"btn\">Hide</button><input data-bind-name class=\"input input-bordered\" /><button data-on-click=\"@get('/tests/merge_fragment_containing_on_event/data')\" class=\"btn\">Merge</button></div>\n  <hr />\n  <button id=\"clickable\" data-on-click=\"@get('/tests/merge_fragment_containing_on_event/data')\" class=\"btn\">Merge</button>\n  <pre data-text=\"ctx.signals.JSON()\"></pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing Checkbox Initial Value in HTML\nDESCRIPTION: This HTML snippet sets up a checkbox input with a bound signal and displays its state. It tests whether the checkbox's bound signal is initially set to its value when checked.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/checkbox_value_checked.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>\n  <input id=\"clickable\" type=\"checkbox\" data-bind-result value=\"foo\" checked />\n  <span data-text=\"$result\"></span>\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$result === '' ? 1 : ($result === 'foo' ? 0 : -1)\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Model Binding with Datastar Signals\nDESCRIPTION: C# examples demonstrating how to implement model binding with Datastar signals. It shows various techniques for binding signals to controller action parameters, including nested objects and custom paths for targeted property binding.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/dotnet/README.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MySignals {\n    public string myString { get; set; } = \"\";\n    public int myInt { get; set; } = 0;\n    public InnerSignals myInner { get; set; } = new();\n\n    public class InnerSignals {\n        public string myInnerString { get; set; } = \"\";\n        public int myInnerInt { get; set; } = 0;\n    }\n}\n\npublic IActionResult Test_GetSignals([FromSignals] MySignals signals) => ...\n\npublic IActionResult Test_GetValues([FromSignals] string myString, [FromSignals] int myInt) => ...\n\npublic IActionResult Test_GetInner([FromSignals] MySignals.InnerSignals myInner) => ...\n\npublic IActionResult Test_GetInnerPathed([FromSignals(Path = \"myInner\")] MySignals.InnerSignals myInnerOther) => ...\n\npublic IActionResult Test_GetInnerValues([FromSignals(Path = \"myInner.myInnerString\")] string myInnerStringOther, [FromSignals(Path = \"myInner.myInnerInt\")] int myInnerIntOther) => ...\n```\n\n----------------------------------------\n\nTITLE: Testing Attribute Removal with data-attr Directive\nDESCRIPTION: HTML test case that demonstrates how the data-attr directive removes the readonly attribute when set to false. The code includes an input element with a data binding that controls its readonly state and displays the test result.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/attr_object_false.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <input type=\"text\" data-ref-input data-attr=\"{readonly: false}\" readonly class=\"input input-bordered\" />\n  <hr />\n  Result:\n  <code id=\"result\" data-text=\"$input.hasAttribute('readonly') ? 0 : 1\"></code>\n  <hr />\n  Expected result on load: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: DataStar Server-Sent Events Stream Format\nDESCRIPTION: Example of the server-sent events stream showing alternating patterns of signal merges and fragment updates. Demonstrates how DataStar handles conditional signal updates with onlyIfMissing flag.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/signals_ifmissing.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n...\\n\\nevent: datastar-merge-signals\\ndata: onlyIfMissing true\\ndata: signals {id:73}\\n\\nevent: datastar-merge-fragments\\ndata: mergeMode upsertAttributes\\ndata: fragments <div id=\"demo\" data-signals__ifmissing=\"{id:74}\"></div>\\n\\nevent: datastar-merge-signals\\ndata: onlyIfMissing true\\ndata: signals {id:75}\\n\\nevent: datastar-merge-fragments\\ndata: mergeMode upsertAttributes\\ndata: fragments <div id=\"demo\" data-signals__ifmissing=\"{id:76}\"></div>\\n\\nevent: datastar-merge-signals\\ndata: onlyIfMissing true\\ndata: signals {id:77}\\n\\n...\n```\n\n----------------------------------------\n\nTITLE: Signal Merge Event Stream Format\nDESCRIPTION: Example of the SSE event format used for merging new signals into the existing signal set. Shows the event type and data structure.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/update_signals.md#2025-04-23_snippet_1\n\nLANGUAGE: text/event-stream\nCODE:\n```\nevent: datastar-merge-signals,\ndata: signals { HYAAA4BK7IFQE: \"2024-05-23T10:33:14.167189214-07:00\", existingSignals: \"this already exists\"}\n```\n\n----------------------------------------\n\nTITLE: Interactive Script Execution Demo with Button Controls\nDESCRIPTION: HTML code demonstrating button controls for executing scripts with different behaviors. One button triggers a console log with auto-removal, while another triggers an error and leaves scripts in the head element.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/examples/execute_script.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals=\"{shouldRemove:true}\">\n    <div>Open the console to see the output</div>\n    <button class=\"btn btn-success\" data-on-click=\"@get('/examples/execute_script/log')\">Console log, auto remove</button>\n    <button class=\"btn btn-error\" data-on-click=\"@get('/examples/execute_script/error')\">Console Error, leave scripts in head</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Multiple Statement Expression\nDESCRIPTION: Example of using multiple statements in a single expression with semicolon separation.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/guide/datastar_expressions.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-signals-foo=\"1\">\n  <button data-on-click=\"$foo++; @post('/endpoint')\"></button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sending Second Merge Fragments Event with HTML Div\nDESCRIPTION: This is another example of a server-sent event (SSE) of type 'datastar-merge-fragments' with a slightly different HTML div element in the data payload. Like the previous example, it follows the same format with 'fragments' prefix in the data field.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/sendTwoEvents/output.txt#2025-04-23_snippet_1\n\nLANGUAGE: sse\nCODE:\n```\nevent: datastar-merge-fragments\ndata: fragments <div>Merge 2</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring DataStar Fragment Removal Event Stream\nDESCRIPTION: Defines an event stream configuration for removing fragments with view transitions enabled. Specifies the event name, ID, retry interval, and target selector for the operation.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/removeFragmentsWithAllOptions/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: event-stream\nCODE:\n```\nevent: datastar-remove-fragments\nid: event1\nretry: 2000\ndata: useViewTransition true\ndata: selector #target\n```\n\n----------------------------------------\n\nTITLE: Initializing and Persisting Signals in HTML for Datastar\nDESCRIPTION: This HTML snippet initializes signals with default values, sets them to persist, and updates their values on load. It also shows the expected representation of these signals in local storage.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/persist_signals.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-signals=\"{foo: 0, bar: 0, baz: 1}\" data-persist data-on-load=\"$foo = 1; $bar = 1; $baz = 1\">\n  Expected value in local storage (in alphabetical order): \n  <pre><code>datastar: {\"bar\":1,\"baz:1\",\"foo\":1}</code></pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Merging Datastar Fragments with HTML Content\nDESCRIPTION: This snippet represents an event for merging Datastar fragments. It includes HTML content '<div>Merge</div>' as part of the fragment data.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/mergeFragmentsWithoutDefaults/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div>Merge</div>\n```\n\n----------------------------------------\n\nTITLE: Executing JavaScript in DataStar Event Stream\nDESCRIPTION: A simple JavaScript code block sent as part of a DataStar event stream. The code uses a conditional statement to log 'hello' to the console when the condition is true.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/executeScriptWithMultilineScript/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (true) {\n  console.log('hello');\n}\n```\n\n----------------------------------------\n\nTITLE: Running Datastar SDK Test Suite in Bash\nDESCRIPTION: This snippet demonstrates how to execute the test suite against a server. It shows the command to run the test script and the expected output format.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./test-all.sh $server_address\nRunning tests with argument: $server_address\nProcessing GET cases...\nProcessing POST cases...\n```\n\n----------------------------------------\n\nTITLE: Defining Datastar SDK Test Case Input in JSON\nDESCRIPTION: This snippet illustrates the required JSON structure for defining a test case input. It includes an example of an 'executeScript' event with various attributes.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"events\": [\n    {\n      \"type\": \"executeScript\",\n      \"script\": \"console.log('hello');\",\n      \"eventId\": 1,\n      \"retryDuration\": 2000,\n      \"attributes\": {\n        \"type\": \"text/javascript\",\n        \"blocking\": false\n      },\n      \"autoRemove\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataStar Merge Signals Event\nDESCRIPTION: This snippet defines an event in the DataStar system for merged signals. It uses a key-value structure to represent multiple signals within a single event.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/test/get-cases/mergeSignalsWithMultilineSignals/output.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-merge-signals\ndata: signals {\"one\":\"first\\\\n signal\",\"two\":\"second signal\"}\n```\n\n----------------------------------------\n\nTITLE: Extended Datastar Execute Script Event Example\nDESCRIPTION: Demonstrates a complete execute script event including optional parameters like autoRemove, attributes, id and retry duration.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/README.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-execute-script\nid: 123\nretry: 2000\ndata: autoRemove false\ndata: attributes type text/javascript\ndata: script window.location = \"https://data-star.dev\"\n```\n\n----------------------------------------\n\nTITLE: Running Static Analysis with PHPStan for DataStar (Shell)\nDESCRIPTION: This command executes PHPStan for static code analysis on the DataStar project. It helps identify potential errors and improve code quality.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/php/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer phpstan\n```\n\n----------------------------------------\n\nTITLE: Extended Datastar Remove Signals Event Example\nDESCRIPTION: Demonstrates a complete remove signals event including optional parameters like id and retry duration.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/README.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-remove-signals\nid: 123\nretry: 2000\ndata: paths user.name\ndata: paths user.email\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for DataStar (Shell)\nDESCRIPTION: This command executes the unit tests for the DataStar project. It ensures that individual components of the codebase are functioning as expected.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/php/tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncomposer test\n```\n\n----------------------------------------\n\nTITLE: Creating a RemoveFragments Event\nDESCRIPTION: Example of creating a RemoveFragments event to remove elements from the DOM. This event targets elements matching the specified selector and can use view transitions for smooth removal.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/java/README.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nRemoveFragments event = RemoveFragments.builder()\n        .selector(\"#feed\")\n        .useViewTransition(true)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Importing Datastar SDK Classes\nDESCRIPTION: Import statement for accessing the ServerSentEventGenerator class from the Datastar SDK, which is essential for creating and sending server-sent events.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/java/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport starfederation.datastar.utils.ServerSentEventGenerator;\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific Write Profile with Custom Buffer Sizes in Clojure\nDESCRIPTION: Demonstrates how to create a more specific write profile with custom buffer sizes for both the gzip output stream and the temporary buffer used for writing. This allows for fine-tuning performance based on specific use cases.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/clojure/doc/Write-profiles.md#2025-04-23_snippet_2\n\nLANGUAGE: clojure\nCODE:\n```\n(def my-specific-write-profile\n  {ac/wrap-output-stream\n   (fn [os] (-> os\n                (ac/->gzip-os 1024) ;; setting the gzip os buffer size\n                ac/->os-writer))\n\n   ac/write! (ac/->write-with-temp-buffer! 16384);; initial size of the StringBuilder\n   ac/content-encoding ac/gzip-content-encoding})\n```\n\n----------------------------------------\n\nTITLE: Rendering Phlex Components with Datastar\nDESCRIPTION: Shows how to render Phlex components when streaming updates to the browser.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nsse.merge_fragments(UserComponent.new(user: User.first))\n```\n\n----------------------------------------\n\nTITLE: Accessing Signals from Browser in Datastar\nDESCRIPTION: Shows how to access data signals sent by the browser to the server.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/ruby/README.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nsse.signals # => { user: { name: 'John' } }\n```\n\n----------------------------------------\n\nTITLE: HTML Fragment Removal Test Interface\nDESCRIPTION: HTML markup that defines a test interface for fragment removal. Contains a button with a data-on-click attribute that triggers a delete operation at '/tests/remove_fragment/data' endpoint. The interface displays both current and expected results.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/remove_fragment.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <button id=\"clickable\" data-on-click=\"@delete('/tests/remove_fragment/data')\" class=\"btn\">Remove</button>\n  <hr />\n  Result:\n  <code id=\"result\"><span id=\"remove\">0--</span>1</code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Signal Change Detection with Path in HTML\nDESCRIPTION: This HTML snippet sets up a test case for detecting a signal change with a path. It initializes signals, defines an expression to increment a result on signal change, and displays the result.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/tests/on_signal_change_path_once.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div data-signals=\"{foo: {bar: 0}, result: 0}\" data-on-signal-change-foo.bar=\"$result++\" data-on-load=\"$foo.bar = 1\">\n  Result:\n  <code id=\"result\" data-text=\"$result\"></code>\n  <hr />\n  Expected result on click: <code>1</code>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Server-Sent Events for Button Removal\nDESCRIPTION: SSE event for removing the load more button when all items are loaded.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/site/static/md/how_tos/how_to_load_more_list_items.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nevent: datastar-remove-fragments\ndata: selector #load-more\n```\n\n----------------------------------------\n\nTITLE: Running the Test Suite for NodeJS Server\nDESCRIPTION: Commands for executing the test suite against a running NodeJS server implementation of the SDK.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/sdk/typescript/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ../test\n$ ./test-all.sh http://127.0.0.1:3000\nRunning tests with argument: http://127.0.0.1:3000\nProcessing GET cases...\nProcessing POST cases...\n```\n\n----------------------------------------\n\nTITLE: Starting Datastar Development Server with Docker\nDESCRIPTION: This command initiates the Datastar development environment using make, which builds and runs a Docker container with all necessary dependencies. After execution, the Datastar site will be accessible at localhost:8080.\nSOURCE: https://github.com/starfederation/datastar/blob/develop/DOCKER.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake dev\n```"
  }
]