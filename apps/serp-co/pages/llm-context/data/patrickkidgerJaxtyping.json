[
  {
    "owner": "patrick-kidger",
    "repo": "jaxtyping",
    "content": "TITLE: Demonstrating jaxtyping annotations for arrays and PyTrees in Python\nDESCRIPTION: Example showing how to use jaxtyping annotations for floating-point 2D arrays with matching axes and PyTrees of integers or arrays. Demonstrates type hinting for function parameters and return values.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/index.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom jaxtyping import Array, Float, PyTree\n\n# Accepts floating-point 2D arrays with matching axes\n# You can replace `Array` with `torch.Tensor` etc.\ndef matrix_multiply(x: Float[Array, \"dim1 dim2\"],\n                    y: Float[Array, \"dim2 dim3\"]\n                  ) -> Float[Array, \"dim1 dim3\"]:\n    ...\n\ndef accepts_pytree_of_ints(x: PyTree[int]):\n    ...\n\ndef accepts_pytree_of_arrays(x: PyTree[Float[Array, \"batch c1 c2\"]]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Annotations for Arrays and PyTrees in Python\nDESCRIPTION: This snippet shows how to use jaxtyping to annotate functions with shape and dtype information for arrays and PyTrees. It demonstrates annotations for matrix multiplication and functions accepting PyTrees of integers and arrays.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom jaxtyping import Array, Float, PyTree\n\n# Accepts floating-point 2D arrays with matching axes\n# You can replace `Array` with `torch.Tensor` etc.\ndef matrix_multiply(x: Float[Array, \"dim1 dim2\"],\n                    y: Float[Array, \"dim2 dim3\"]\n                  ) -> Float[Array, \"dim1 dim3\"]:\n    ...\n\ndef accepts_pytree_of_ints(x: PyTree[int]):\n    ...\n\ndef accepts_pytree_of_arrays(x: PyTree[Float[Array, \"batch c1 c2\"]]):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Functions with Path-dependent Shapes in PyTrees\nDESCRIPTION: This snippet demonstrates how to annotate function parameters as PyTrees with path-dependent shapes. The annotation enforces that x and y have matching PyTree structures and that corresponding leaves have matching dimensions.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/pytree.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef f(\n    x: PyTree[Shaped[Array, \"?foo\"], \"T\"],\n    y: PyTree[Shaped[Array, \"?foo\"], \"T\"],\n):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Valid Usage of Path-dependent Shapes in PyTrees\nDESCRIPTION: This example shows a valid use case of the path-dependent shape function. It creates two pairs of arrays where corresponding leaves have matching sizes (x0 matches y0, x1 matches y1), satisfying the type constraints.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/pytree.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx0 = jnp.arange(3)\nx1 = jnp.arange(5)\n\ny0 = jnp.arange(3) + 1\ny1 = jnp.arange(5) + 1\n\nf((x0, x1), (y0, y1))  # x0 matches y0, and x1 matches y1. All good!\n```\n\n----------------------------------------\n\nTITLE: Symbolic Expression Function Example\nDESCRIPTION: Demonstrates using symbolic expressions in type annotations with variable interpolation for shape specifications.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/array.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef full(size: int, fill: float) -> Float[Array, \"{size}\"]: \n    return jax.numpy.full((size,), fill)\n\nclass SomeClass:\n    some_value = 5\n\n    def full(self, fill: float) -> Float[Array, \"{self.some_value}+3\"]:\n        return jax.numpy.full((self.some_value + 3,), fill)\n```\n\n----------------------------------------\n\nTITLE: Basic Float Array Type Annotation\nDESCRIPTION: Shows the recommended way to annotate floating-point arrays using general Float type rather than specific precision.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/array.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom jaxtyping import Array, Float\nFloat[Array, \"some_shape\"]\n```\n\n----------------------------------------\n\nTITLE: Nested Image Array Type Definitions\nDESCRIPTION: Shows how to create nested array type definitions for image data with batch dimensions.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/array.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nImage = Float[Array, \"channels height width\"]\nBatchImage = Float[Image, \"batch\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Up JAXTyping in IPython/Jupyter\nDESCRIPTION: Code to load the jaxtyping extension in IPython environments such as Jupyter or Colab notebooks. This enables runtime type checking for code defined in the notebook after this magic is run.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/runtime-type-checking.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport jaxtyping\n%load_ext jaxtyping\n%jaxtyping.typechecker beartype.beartype  # or any other runtime type checker\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of Path-dependent Shapes in PyTrees\nDESCRIPTION: This example demonstrates an invalid use case where the path-dependent shape constraint is violated. The sizes of corresponding leaves don't match (x1 has size 5 while y0 has size 3), causing a type violation.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/pytree.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf((x1, x1), (y0, y1))  # x1 does not have a size matching y0!\n```\n\n----------------------------------------\n\nTITLE: Custom Duck Array Implementation\nDESCRIPTION: Example of implementing a custom duck-typed array class with shape and dtype properties for use with JAXTyping annotations.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/array.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyDuckArray:\n    @property\n    def shape(self) -> tuple[int, ...]:\n        return (3, 4, 5)\n\n    @property\n    def dtype(self) -> str:\n        return \"my_dtype\"\n\nclass MyDtype(jaxtyping.AbstractDtype):\n    dtypes = [\"my_dtype\"]\n\nx = MyDuckArray()\nassert isinstance(x, MyDtype[MyDuckArray, \"3 4 5\"])\n```\n\n----------------------------------------\n\nTITLE: Specific Precision Float Array Type Annotation\nDESCRIPTION: Demonstrates how to annotate arrays with specific floating-point precision, though this is generally not recommended.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/array.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom jaxtyping import Array, Float32\nFloat32[Array, \"some_shape\"]\n```\n\n----------------------------------------\n\nTITLE: Detecting Jaxtyping Arrays in Python\nDESCRIPTION: This code shows how to check if a Python object is a Jaxtyping-provided array type. It uses issubclass to compare the object with AbstractArray, which is the base class for shape-and-dtype specified arrays.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/advanced-features.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nissubclass(x, AbstractArray)\n```\n\n----------------------------------------\n\nTITLE: Identifying Jaxtyping Pytrees in Python\nDESCRIPTION: This snippet illustrates how to determine if a Python object is a Jaxtyping-provided pytree. It uses issubclass to compare the object with PyTree, which is the base class for all pytree types in Jaxtyping.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/advanced-features.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nissubclass(PyTree[int], PyTree)\n```\n\n----------------------------------------\n\nTITLE: Checking for Jaxtyping Dtypes in Python\nDESCRIPTION: This snippet demonstrates how to check if a Python object is a Jaxtyping-provided dtype. It uses the issubclass function to compare the object with AbstractDtype.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/advanced-features.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nissubclass(Float32, AbstractDtype)\n```\n\n----------------------------------------\n\nTITLE: Using Pytest Hook for JAXTyping Runtime Type Checking\nDESCRIPTION: Command-line syntax for installing the jaxtyping import hook as a pytest hook. This example applies type checking to modules starting with 'foo' or 'bar.baz' using beartype as the typechecker.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/runtime-type-checking.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest --jaxtyping-packages=foo,bar.baz,beartype.beartype\n```\n\n----------------------------------------\n\nTITLE: Configuring JAXTyping in pytest.ini\nDESCRIPTION: Configuration for the jaxtyping pytest hook in pytest.ini. This adds options to enable runtime type checking for specified packages using the beartype typechecker.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/runtime-type-checking.md#2025-04-18_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[pytest]\naddopts = --jaxtyping-packages=foo,bar.baz,beartype.beartype\n```\n\n----------------------------------------\n\nTITLE: Configuring JAXTyping in pyproject.toml\nDESCRIPTION: Configuration for the jaxtyping pytest hook in pyproject.toml. This sets up runtime type checking for specified packages using the beartype typechecker.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/api/runtime-type-checking.md#2025-04-18_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tool.pytest.ini_options]\naddopts = \"--jaxtyping-packages=foo,bar.baz,beartype.beartype\"\n```\n\n----------------------------------------\n\nTITLE: Dataclass String Annotation Example - Python\nDESCRIPTION: Example showing a dataclass with stringified type annotation that will be silently skipped during runtime checking.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/faq.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass()\nclass Foo:\n   x: \"int\"\n```\n\n----------------------------------------\n\nTITLE: Dataclass Partial String Annotation Example - Python\nDESCRIPTION: Example showing a problematic partially stringified dataclass annotation that will raise an error and should not be used.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/faq.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@dataclass()\nclass Foo:\n   x: tuple[\"int\"]\n```\n\n----------------------------------------\n\nTITLE: Installing jaxtyping via pip\nDESCRIPTION: Command to install jaxtyping using pip package manager. Requires Python 3.10+.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install jaxtyping\n```\n\n----------------------------------------\n\nTITLE: Installing jaxtyping via pip in Bash\nDESCRIPTION: This command installs the jaxtyping library using pip. It requires Python 3.10+ and optionally depends on JAX for some JAX-specific types.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install jaxtyping\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing jaxtyping in Development Mode\nDESCRIPTION: Commands to fork the repository, clone it locally, and install the library in development mode. This setup allows changes to the code to be immediately reflected without reinstallation.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username-here/jaxtyping.git\ncd jaxtyping\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Running Tests for jaxtyping\nDESCRIPTION: Commands to install test dependencies including PyTorch with CPU support and run the test suite to ensure changes don't break existing functionality.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r test/requirements.txt\npip install torch --extra-index-url https://download.pytorch.org/whl/cpu\npytest\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up Pre-commit Hooks\nDESCRIPTION: Commands to install pre-commit and set up git hooks that automatically run ruff for linting and formatting code before each commit.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies Configuration\nDESCRIPTION: List of Python package dependencies required for the jaxtyping project. Includes machine learning frameworks like JAX and TensorFlow, testing frameworks like pytest, and typing-related packages like beartype and typeguard.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/test/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbeartype\ncloudpickle\nequinox\nIPython\njax\nnumpy<2\npytest\npytest-asyncio\ntensorflow\ntypeguard<3\nmlx\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub Fork\nDESCRIPTION: Command to push local code changes to the user's forked repository on GitHub, preparing for a pull request submission.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Citing Equinox Library in BibTeX Format\nDESCRIPTION: This BibTeX entry provides the citation information for the Equinox library, which is related to neural networks in JAX using callable PyTrees and filtered transformations.\nSOURCE: https://github.com/patrick-kidger/jaxtyping/blob/main/docs/.citation.md#2025-04-18_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@article{kidger2021equinox,\n    author={Patrick Kidger and Cristian Garcia},\n    title={{E}quinox: neural networks in {JAX} via callable {P}y{T}rees and filtered transformations},\n    year={2021},\n    journal={Differentiable Programming workshop at Neural Information Processing Systems 2021}\n}\n```"
  }
]