[
  {
    "owner": "microsoft",
    "repo": "typespec",
    "content": "TITLE: Defining a Data Model and Enum in TypeSpec\nDESCRIPTION: Shows how to define a data structure using the 'model' keyword for a 'Pet' entity with properties like 'id', 'name', 'age', and 'kind'. It also defines a 'petType' enum to specify the allowed string values ('dog', 'cat', etc.) for the 'kind' property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/01-setup-basic-syntax.mdx#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp title=main.tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/openapi3\\\"]}\"\nimport \"@typespec/http\";\n\nusing Http;\n\n@service(#{ title: \"Pet Store\" })\n@server(\"https://example.com\", \"Single server endpoint\")\nnamespace PetStore;\n\n// highlight-start\nmodel Pet {\n  id: int32;\n  name: string;\n  age: int32;\n  kind: petType;\n}\n\nenum petType {\n  dog: \"dog\",\n  cat: \"cat\",\n  fish: \"fish\",\n  bird: \"bird\",\n  reptile: \"reptile\",\n}\n// highlight-end\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Codes and Error Responses in TypeSpec - typespec\nDESCRIPTION: This snippet demonstrates defining explicit status codes for operation responses using the @statusCode decorator. It also shows error modeling with the @error decorator and uses discriminated union types for multiple possible outcomes. This form is useful for clear mapping between API responses and HTTP status codes. Dependencies: Pet model. Inputs: query/path/header/body parameters. Outputs: composite objects with @statusCode, @header, and @body fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/pets\")\nnamespace Pets {\n  @error\n  model Error {\n    code: string;\n  }\n\n  op list(@query skip: int32, @query top: int32): {\n    @body pets: Pet[]; // statusCode: 200 Implicit\n  };\n  op read(@path petId: int32, @header ifMatch?: string): {\n    @statusCode statusCode: 200;\n    @header eTag: string;\n    @body pet: Pet;\n  } | {\n    @statusCode statusCode: 404;\n  };\n  op create(@body pet: Pet): {\n    @statusCode statusCode: 204;\n  } | Error; //statusCode: 4xx,5xx as Error use `@error` decorator\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Multipart Upload Example with Models and File Attachments - TypeSpec Language\nDESCRIPTION: Provides an advanced multipart upload definition that mixes form-urlencoded model data and multiple file attachments in a single multipart body. The 'Widget' model represents structured metadata, uploaded with form encoding in one part, while 'attachments' is an array of HttpPart<File> allowing multiple file uploads. Dependencies include TypeSpec.Http and correct application of serialization decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Widget {\n  id: string;\n  name: string;\n  weight: float64;\n}\n\nop multipartUpload(\n  @multipartBody fields: {\n    // The widget is uploaded in a part named `widget` and uses form-urlencoded serialization.\n    widget: HttpPart<{\n      @header contentType: \"application/x-www-form-urlencoded\";\n      @body widget: Widget;\n    }>;\n\n    // The part named `attachments` can be sent multiple times, and each `attachments` part has a file body.\n    attachments: HttpPart<File>[];\n  },\n): void;\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Enums in TypeSpec\nDESCRIPTION: Demonstrates the fundamental syntax for declaring an enum in TypeSpec using the `enum` keyword. Members are defined using identifiers separated by commas. In this basic form, the specific underlying values of the members are not explicitly defined and might depend on the context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/enums.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nenum Direction {\n  North,\n  East,\n  South,\n  West,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining CRUD Operations for Pets using TypeSpec\nDESCRIPTION: This TypeSpec code defines CRUD (Create, Read, Update, Delete) operations for a `Pet` model within a nested `Pets` namespace. It utilizes decorators like `@route`, `@get`, `@post`, `@put`, `@delete`, `@path`, `@body`, and `@statusCode` to specify the API structure, HTTP methods, paths, parameters, request/response bodies, and expected status codes. It depends on the `@typespec/http` library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/02-operations-responses.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp title=main.tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/openapi3\\\"]}\"\nimport \"@typespec/http\";\n\nusing Http;\n\n@service(#{ title: \"Pet Store\" })\n@server(\"https://example.com\", \"Single server endpoint\")\nnamespace PetStore;\n\nmodel Pet {\n  id: int32;\n\n  @minLength(1)\n  name: string;\n\n  @minValue(0)\n  @maxValue(100)\n  age: int32;\n\n  kind: petType;\n}\n\nenum petType {\n  dog: \"dog\",\n  cat: \"cat\",\n  fish: \"fish\",\n  bird: \"bird\",\n  reptile: \"reptile\",\n}\n\n// highlight-start\n@route(\"/pets\")\nnamespace Pets {\n  @get\n  op listPets(): {\n    @statusCode statusCode: 200;\n    @body pets: Pet[];\n  };\n\n  @get\n  op getPet(@path petId: int32): {\n    @statusCode statusCode: 200;\n    @body pet: Pet;\n  };\n\n  @post\n  op createPet(@body pet: Pet): {\n    @statusCode statusCode: 201;\n    @body newPet: Pet;\n  };\n\n  @put\n  op updatePet(@path petId: int32, @body pet: Pet): {\n    @statusCode statusCode: 200;\n    @body updatedPet: Pet;\n  };\n\n  @delete\n  op deletePet(@path petId: int32): {\n    @statusCode statusCode: 204;\n  };\n}\n// highlight-end\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a REST Service with Title and Server Endpoint in TypeSpec\nDESCRIPTION: Demonstrates defining a REST service using the '@service' decorator to set the service title ('Pet Store') and the '@server' decorator to specify the base URL ('https://example.com') and description for the API endpoint. This snippet requires a namespace definition to compile correctly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/01-setup-basic-syntax.mdx#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp title=main.tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/openapi3\\\"]}\"\nimport \"@typespec/http\";\n\nusing Http;\n// highlight-start\n@service(#{ \n  title: \"Pet Store\",\n})\n@server(\"https://example.com\", \"Single server endpoint\")\n// highlight-end\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Path and Query Parameters for Operations in TypeSpec - typespec\nDESCRIPTION: This snippet extends API operations with query and path parameters using @query and @path decorators. The example shows pagination support (skip, top) and resource lookup by petId. All parameters are strongly typed (int32) with explicit location annotations. The pattern is essential for clear parameter passing in REST API endpoints. Dependencies: Pet model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/pets\")\nnamespace Pets {\n  op list(@query skip: int32, @query top: int32): Pet[];\n  op read(@path petId: int32): Pet;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Pet Store API in TypeSpec\nDESCRIPTION: Provides an example TypeSpec definition (`main.tsp`) for a simple Pet Store service. It showcases importing necessary libraries (`@typespec/http`, `@typespec/rest`, `@typespec/openapi3`), defining a service namespace (`PetStore`) with metadata, an interface (`Pets`) with a route (`/pets`) returning a list of `Pet` models, and defining the `Pet` model with properties and constraints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/README.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"@typespec/http\";\nimport \"@typespec/rest\";\nimport \"@typespec/openapi3\";\n\nusing Http;\nusing Rest;\n\n/** This is a pet store service. */\n@service(#{ title: \"Pet Store Service\" })\n@server(\"https://example.com\", \"The service endpoint\")\nnamespace PetStore;\n\n@route(\"/pets\")\ninterface Pets {\n  list(): Pet[];\n}\n\nmodel Pet {\n  @minLength(100)\n  name: string;\n\n  @minValue(0)\n  @maxValue(100)\n  age: int32;\n\n  kind: \"dog\" | \"cat\" | \"fish\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Operation in TypeSpec\nDESCRIPTION: This snippet demonstrates the fundamental syntax for declaring a service operation in TypeSpec using the `op` keyword. The example defines an operation named `ping` which takes no parameters and has no return value (`void`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/operations.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nop ping(): void;\n```\n\n----------------------------------------\n\nTITLE: Declaring @withVisibility Decorator in TypeSpec - Typespec\nDESCRIPTION: This code snippet shows the signature for the @withVisibility decorator used in TypeSpec. It allows specifying a list of visibility enums to filter properties of a model, removing those that do not match any of the supplied visibilities. Requires TypeSpec and the visibilities should be defined as EnumMember[]. It is used to filter model properties based on decorator-applied visibility. Inputs are visibilities, output is a modified model where only matching properties remain. No effect if no visibilities are provided.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_76\n\nLANGUAGE: typespec\nCODE:\n```\n@withVisibility(...visibilities: valueof EnumMember[])\n```\n\n----------------------------------------\n\nTITLE: Valid Usage of 'is Record<T>' with Compatible Property Types in TypeSpec\nDESCRIPTION: Demonstrates a valid use case for `is Record<string>`. Since the explicitly defined `name` property is of type `string`, it is compatible with the `Record<string>` constraint, making the `Person` model valid. All properties must be assignable to the type specified in `Record<T>`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_6\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Person is Record<string> {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Service Model and POST Operation with TypeSpec - tsp\nDESCRIPTION: This snippet defines a service namespace 'Test' with a 'Widget' model and a POST operation 'foo' using TypeSpec. The 'Widget' model includes an identifier, total weight, color (restricted to 'red' or 'blue'), and an optional required flag. The 'foo' operation accepts a variadic list of 'Widget' models and returns no value. Dependencies include a TypeSpec-compatible toolchain. Inputs are model attributes as defined; outputs are void. Type constraints enforce correct parameter formatting.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/on_response.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\nmodel Widget {\n  id: string;\n  total_weight: int32;\n  color: \"red\" | \"blue\";\n  is_required?: boolean;\n}\n\n@post op foo(...Widget): void;\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Annotations to a Model in TypeSpec\nDESCRIPTION: Demonstrates applying validation decorators to model properties. '@minLength(1)' ensures the 'name' property is not empty, while '@minValue(0)' and '@maxValue(100)' constrain the 'age' property to be within the range of 0 to 100.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/01-setup-basic-syntax.mdx#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp title=main.tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/openapi3\\\"]}\"\nimport \"@typespec/http\";\n\nusing Http;\n\n@service(#{ title: \"Pet Store\" })\n@server(\"https://example.com\", \"Single server endpoint\")\nnamespace PetStore;\n\nmodel Pet {\n  id: int32;\n\n  // highlight-next-line\n  @minLength(1)\n  name: string;\n\n  // highlight-next-line\n  @minValue(0)\n  // highlight-next-line\n  @maxValue(100)\n  age: int32;\n\n  kind: petType;\n}\n\nenum petType {\n  dog: \"dog\",\n  cat: \"cat\",\n  fish: \"fish\",\n  bird: \"bird\",\n  reptile: \"reptile\",\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Annotating Operations with Doc Comments in TypeSpec\nDESCRIPTION: This snippet shows the use of block doc comments (/** ... */) to document a TypeSpec operation, including parameter descriptions. The @param tag allows associating documentation with parameters. The comment is interpreted as equivalent to the @doc decorator. No dependencies beyond core TypeSpec specification file. Inputs are parameter names and descriptions; outputs are rich, extractable API documentation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/documentation.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n/**\n * Get a widget.\n * @param widgetId The ID of the widget to retrieve.\n */\nop read(@path widgetId: string): Widget | Error;\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Parameter in TypeSpec\nDESCRIPTION: Defines an operation `list` that accepts an HTTP query parameter named `filter`. The `@query` decorator marks the `filter` parameter (of type string) as originating from the URL query string. The operation returns an array of `Pet` objects.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_11\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop list(@query filter: string): Pet[]\n```\n\n----------------------------------------\n\nTITLE: Specifying Path Parameters and Explicit Routing in TypeSpec - typespec\nDESCRIPTION: This snippet illustrates how to define operations with path parameters, both implicitly (matching the variable name) and explicitly using the @path decorator. It shows the route with a dynamic segment (petId) and the ability to annotate parameters to clarify their location in the path. Requires Pet model, and these patterns enable flexible routing and parameter binding in REST API definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/pets/{petId}\") op get(petId: string): Pet;\n// or explicit @path\n@route(\"/pets/{petId}\") op get(@path petId: string): Pet;\n```\n\n----------------------------------------\n\nTITLE: Defining a GET Operation with Required Parameters in TypeSpec (tsp)\nDESCRIPTION: This TypeSpec snippet defines a service in the 'Test' namespace with a GET operation named 'getWithParams', which requires two query parameters: 'name' (string) and 'age' (int32). The operation returns an int32. This specification is used as the source API contract for code generators and client implementations. Both parameters are mandatory and will be exposed in generated client code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/only_required.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\\nnamespace Test;\\n\\n@get op getWithParams(@query name: string, @query age: int32): int32;\n```\n\n----------------------------------------\n\nTITLE: Defining GET Operation with get Decorator - TypeSpec (typespec)\nDESCRIPTION: Marks an operation to use the HTTP GET verb with @TypeSpec.Http.get. Applied to operations that fetch resources, it does not take any parameters. Provides intent for RESTful resource retrieval.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.get\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@get op read(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining a Sample Widget Service API in TypeSpec\nDESCRIPTION: This TypeSpec code defines a simple REST API called 'Widget Service'. It includes data models (`Widget`, `WidgetList`, `Error`, `AnalyzeResult`) and an interface `Widgets` specifying CRUD operations (`list`, `read`, `create`, `update`, `delete`) and a custom `analyze` operation using HTTP decorators (`@get`, `@post`, `@patch`, `@delete`, `@route`, `@path`, `@body`, `@tag`). The `@service` decorator sets the service title.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-javascript.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"@typespec/http\";\n\nusing TypeSpec.Http;\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\n\nmodel Widget {\n  id: string;\n  weight: int32;\n  color: \"red\" | \"blue\";\n}\n\nmodel WidgetList {\n  items: Widget[];\n}\n\n@error\nmodel Error {\n  code: int32;\n  message: string;\n}\n\nmodel AnalyzeResult {\n  id: string;\n  analysis: string;\n}\n\n@route(\"/widgets\")\n@tag(\"Widgets\")\ninterface Widgets {\n  /** List widgets */\n  @get list(): WidgetList | Error;\n  /** Read widgets */\n  @get read(@path id: string): Widget | Error;\n  /** Create a widget */\n  @post create(@body body: Widget): Widget | Error;\n  /** Update a widget */\n  @patch update(@path id: string, @body body: Widget): Widget | Error;\n  /** Delete a widget */\n  @delete delete(@path id: string): void | Error;\n\n  /** Analyze a widget */\n  @route(\"{id}/analyze\") @post analyze(@path id: string): AnalyzeResult | Error;\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading and Downloading Files with TypeSpec HTTP File Model - typespec\nDESCRIPTION: This snippet demonstrates defining file upload and download endpoints using the @typespec/http File model. The upload operation uses the @body decorator to receive a file and returns a 201 status code. The download operation returns an Http.File based on fileId. Proper handling of Http.File models is mandated for compliance. Dependencies: Http.File type. Supports both uploading and downloading binary data using HTTP.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n// Uploading and downloading\n@route(\"/files\")\ninterface Files {\n  @post\n  upload(@body file: Http.File): {\n    @statusCode statusCode: 201;\n  };\n\n  download(@path fileId: string): Http.File;\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Body Parameter Spread in Create Operation - typespec\nDESCRIPTION: This brief code demonstrates a terse style for create operations by spreading the Pet model directly into the operation parameters using the spread operator (...Pet). It removes the need for an explicit @body decorator, relying on TypeSpec's default behavior. This approach is dependent upon the structure of the Pet model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/pets\")\nnamespace Pets {\n  @post\n  op create(...Pet): {};\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Route Operation in TypeSpec - typespec\nDESCRIPTION: This snippet demonstrates defining a RESTful operation with a fixed URL route using the @route decorator in TypeSpec. It declares a GET operation named list returning an array of Pet. Required dependencies include the Pet model. The operation has no input parameters and outputs an array of Pet instances. This approach is central to the REST route definition pattern in TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/pets\") op list(): Pet[];\n```\n\n----------------------------------------\n\nTITLE: Applying Lifecycle Visibility to Model Properties in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a model `Example` with properties `id`, `name`, and `description`. It demonstrates applying the `@visibility` decorator with members of the built-in `Lifecycle` enum (`Lifecycle.Read`, `Lifecycle.Create`) to control when each property should be included based on the resource lifecycle phase (read, create). Properties without explicit visibility (like `description`) are visible in all phases by default.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/visibility.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Example {\n  /**\n   * The unique identifier of this resource.\n   *\n   * The ID is automatically generated by the service, so it cannot be set when the resource is created or updated,\n   * but the server will return it when the resource is read.\n   */\n  @visibility(Lifecycle.Read)\n  id: string;\n\n  /**\n   * The name of this resource.\n   *\n   * The name can be set when the resource is created, but may not be changed.\n   */\n  @visibility(Lifecycle.Create, Lifecycle.Read)\n  name: string;\n\n  /**\n   * The description of this resource.\n   *\n   * By default, properties are visible in all lifecycle phases, so this property\n   * is present in all lifecycle phases.\n   */\n  description: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring an HTTP Server Endpoint with TypeSpec - Typespec\nDESCRIPTION: Demonstrates the signature for the @TypeSpec.Http.server decorator, which attaches server metadata to a namespace. The decorator accepts a required URL, with optional description and parameter objects for endpoint configuration. Inputs include the endpoint URL and optionally a description and parameters; this can be used multiple times to configure several endpoints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.server(url: valueof string, description?: valueof string, parameters?: Record<unknown>)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom File Types by Extending Http.File Model - typespec\nDESCRIPTION: This code demonstrates creating a custom file type (ImageFile) that extends the standard Http.File model to restrict contentType fields to common image MIME types. It defines endpoints for image upload/download with specific content type requirements while retaining binary handling. Dependencies: Http.File model, extended with custom contentType, and Images interface. Useful for APIs where file type validation is required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n// Custom file type for images\nmodel ImageFile extends Http.File {\n  contentType: \"image/jpeg\" | \"image/png\" | \"image/gif\";\n}\n\n@route(\"/images\")\ninterface Images {\n  @post\n  upload(@body image: ImageFile): {\n    @statusCode statusCode: 201;\n  };\n\n  download(@path imageId: string): ImageFile;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tuple Structures (prefixItems) in JSON Schema with TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.prefixItems` decorator specifies that an array instance must start with elements matching the sequence of types provided. This corresponds to the `prefixItems` keyword in JSON Schema (used for tuple validation). It targets array types (`unknown[]`) or model properties and takes an array `value` parameter containing the sequence of types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.prefixItems(value: unknown[])\n```\n\n----------------------------------------\n\nTITLE: Defining Reserved Identifiers Using Escape Syntax - TypeSpec - tsp\nDESCRIPTION: Demonstrates how to use a reserved keyword as an identifier in TypeSpec by wrapping it with backticks. No external dependencies are required; the context assumes usage within a TypeSpec definition file. The snippet declares a model named after the reserved keyword \"enum\" by escaping it, which is essential for naming entities that would otherwise clash with language keywords. Input is static, and the output is a TypeSpec model definition. Escaping is required for reserved keyword names only.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/identifiers.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nmodel `enum` {}\n```\n\n----------------------------------------\n\nTITLE: Defining REST API Operation with Path, Query, Header, and Body using TypeSpec\nDESCRIPTION: This TypeSpec snippet models a Widget entity with path, header, query, and standard properties, and defines an interface with a POST operation that spreads model properties as operation parameters. Dependencies include the TypeSpec compiler and decorators such as @service, @path, @header, and @query. The Widget model requires 'id' as a path parameter, 'etag' as a header, 'foo' as a query, and 'name' as a body property; the operation returns void and is mapped to the '/widgets' route.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/with-parameters.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service(#{ title: \\\"Widget Service\\\" })\nnamespace DemoService;\n\n@test\nmodel Widget {\n  @path id: string;\n  @header etag: string;\n  @query foo: string;\n  name: string;\n}\n\n@route(\\\"/widgets\\\")\ninterface Widgets {\n  @post read(...Widget): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Placement in OpenAPI Requests - TypeSpec\nDESCRIPTION: Exemplifies how TypeSpec decorators (@header, @query, @path) assign parameter location in the HTTP request. Parameters without these decorators are mapped to the request body. Inputs include parameters with location decorators; the OpenAPI emitter sorts them into parameters or requestBody accordingly. Demonstrates content-type header normalization.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nop createUser(\\n  // The parameter name is transformed to look like an HTTP header, so the parameter `contentType` maps\\n  // to the `content-type` header\\n  @header contentType: string,\\n\\n  @query include: string,\\n  @path id: string,\\n\\n  // The request body will be a JSON object `{ \"user\": <User> }`\\n  user: User, // This goes in the request body\\n): User;\n```\n\n----------------------------------------\n\nTITLE: Attaching Multiple Examples to a Model with @example in TypeSpec (TSP)\nDESCRIPTION: This code attaches multiple @example decorators to a single model, each with their own title and description. This enables documentation and consumers to see various valid configurations of the Pet model (with and without optional properties). Examples highlight minimal and extended use cases.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/examples.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\n@example(#{ name: \\\"Max\\\", age: 3 }, #{ title: \\\"Minimal examples\\\", description: \\\"Minimal examples\\\" })\\n@example(\\n  #{ name: \\\"Rex\\\", age: 8, bark: true },\\n  #{ title: \\\"With optional properties\\\", description: \\\"Example where the pet barks\\\" }\\n)\\nmodel Pet {\\n  name: string;\\n  age: int32;\\n  bark?: boolean;\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Body Property with Decorator - TypeSpec (typespec)\nDESCRIPTION: Demonstrates how to use the @TypeSpec.Http.body decorator to mark a property for placement in the HTTP request body. No dependencies beyond TypeSpec core decorators are required. The decorator is applied directly to model properties or operation parameters and prohibits mixing with header, query, or path decorators on the marked property; use @bodyRoot to mix parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.body\n```\n\nLANGUAGE: typespec\nCODE:\n```\nop upload(@body image: bytes): void;\nop download(): {\n  @body image: bytes;\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Generated JavaScript Client for the Todo API (TypeScript/JavaScript)\nDESCRIPTION: This snippet illustrates basic usage of a TypeScript/JavaScript client that was generated from the TypeSpec API definition. It instantiates the TodoServiceClient, creates a new Todo item with specific content and completion status, and logs the result. It relies on the generated client library (e.g., from @typespec/http-client-js), and takes as input a payload object for the createTodoItem method. The returned output is a Todo item matching the API definition. This demonstrates how TypeSpec enables consistent, type-safe client access across languages.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/blog/2025-03-31-typespec-1-0-release/typespec_1_0_release.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = new TodoServiceClient();\nconst todo = await client.createTodoItem({\n  content: \"Buy groceries\",\n  dueDate: new Date(\"2025-03-31\"),\n  isCompleted: false,\n});\nconsole.log(todo);\n```\n\n----------------------------------------\n\nTITLE: Defining a DELETE Operation in TypeSpec\nDESCRIPTION: Uses the `@delete` decorator to define an operation named `delete` that corresponds to an HTTP DELETE request. The operation currently takes no parameters and returns `void`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_4\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@delete op delete(): void\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Widget Service Example - TypeSpec\nDESCRIPTION: Provides the default service API definition in TypeSpec. It includes models for Widget, WidgetList, Error, and AnalyzeResult, and defines the Widgets interface with RESTful operations such as list, read, create, update, delete, and analyze. This serves as the starting point for C# code generation and is placed in main.tsp. Requires the @typespec/http library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-csharp.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"@typespec/http\";\n\nusing TypeSpec.Http;\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\n\nmodel Widget {\n  id: string;\n  weight: int32;\n  color: \"red\" | \"blue\";\n}\n\nmodel WidgetList {\n  items: Widget[];\n}\n\n@error\nmodel Error {\n  code: int32;\n  message: string;\n}\n\nmodel AnalyzeResult {\n  id: string;\n  analysis: string;\n}\n\n@route(\"/widgets\")\n@tag(\"Widgets\")\ninterface Widgets {\n  /** List widgets */\n  @get list(): WidgetList | Error;\n  /** Read widgets */\n  @get read(@path id: string): Widget | Error;\n  /** Create a widget */\n  @post create(@body body: Widget): Widget | Error;\n  /** Update a widget */\n  @patch update(@path id: string, @body body: Widget): Widget | Error;\n  /** Delete a widget */\n  @delete delete(@path id: string): void | Error;\n\n  /** Analyze a widget */\n  @route(\"{id}/analyze\") @post analyze(@path id: string): AnalyzeResult | Error;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a POST Operation in TypeSpec\nDESCRIPTION: Provides a TypeSpec example defining a `create` operation within a `Users` namespace, which is part of a larger `Todo` service. It uses decorators to specify the HTTP route (`@route(\"/users\")`) and method (`@post`), defines an input parameter (`user: User`), and indicates the possible success and error response types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-js/README.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\nnamespace Users {\n  @route(\"/users\")\n  @post\n  op create(\n    user: User,\n  ): WithStandardErrors<UserCreatedResponse | UserExistsResponse | InvalidUserResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Request and Response Bodies Explicitly in TypeSpec - typespec\nDESCRIPTION: This snippet showcases explicit use of the @body decorator to assign request and response bodies to operations. It includes endpoints for listing, reading, and creating resources, demonstrating both input and output body structures. Required dependencies: Pet model. The create operation uses the @post decorator. This technique is essential when explicit mapping of operation data to HTTP payloads is required. Inputs: query/path/body parameters. Outputs: objects with @body-tagged properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/pets\")\nnamespace Pets {\n  op list(@query skip: int32, @query top: int32): {\n    @body pets: Pet[];\n  };\n  op read(@path petId: int32): {\n    @body pet: Pet;\n  };\n  @post\n  op create(@body pet: Pet): {};\n}\n```\n\n----------------------------------------\n\nTITLE: Using Model Templates with Spread Operator in TypeSpec\nDESCRIPTION: Illustrates how to define and use a model template (`Page<Item>`). The example shows instantiating the template with a specific type (`Dog`) and spreading its properties (`...Page<Dog>`) into another model (`DogPage`). This allows reusing the structure defined by `Page` for different item types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Page<Item> {\n  size: int32;\n  item: Item[];\n}\n\nmodel DogPage {\n  ...Page<Dog>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Operations with Default Content-Type Inference (TypeSpec)\nDESCRIPTION: Demonstrates several TypeSpec operations utilizing different body types, causing HTTP Content-Type to be inferred automatically. No explicit content-type header or decorator is used; instead, built-in default logic (based on type/classification of the response) determines if application/octet-stream, text/plain, or application/json is sent. The models cover binary, text, nullable, and object responses. Requires the TypeSpec toolchain. No input parameters are required; each operation demonstrates a different return (bytes, string, string|null, or object with name property).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/content-types.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n// Returns an application/octet-stream binary body\nop download(): bytes;\n\n// Returns a text/plain string\nop getContent(): string;\n\n// Returns an application/json body that is either a string or the `null` value\nop getContentNullable(): string | null;\n\n// Returns an application/json body with a `name` property.\nop getPet(): {\n  name: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining SafeInt Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Provides a `safeint` scalar for integers serializable within the JSON-safe integer range (−9007199254740991 to 9007199254740991). Ensures compatibility with JavaScript and similar platforms.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_47\n\nLANGUAGE: typespec\nCODE:\n```\nscalar safeint\n```\n\n----------------------------------------\n\nTITLE: Declaring @withVisibilityFilter Decorator in TypeSpec - Typespec\nDESCRIPTION: This code snippet outlines the signature for the @withVisibilityFilter decorator in TypeSpec. It applies a visibility filter (generally a VisibilityFilter map or object) to recursively filter the properties of a model and its nested models. Input is a filter conforming to the VisibilityFilter value type, and the result is a model filtered accordingly. Intended for recursive application where property shapes are shared through references. Requires definition of VisibilityFilter in scope.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_78\n\nLANGUAGE: typespec\nCODE:\n```\n@withVisibilityFilter(filter: valueof VisibilityFilter)\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Discriminated Union in TypeSpec and its JSON Serialization\nDESCRIPTION: This snippet demonstrates defining a basic discriminated union named `Pet` using the `@discriminated` decorator in TypeSpec. It includes the corresponding JSON serialization examples, showing how the default discriminator property `kind` holds the variant name ('cat' or 'dog') and the actual data is nested under the `value` property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/discriminated-types.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@discriminated\nunion Pet {\n  cat: Cat,\n  dog: Dog,\n}\n```\n```\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"kind\": \"cat\",\n  \"value\": {\n    \"name\": \"Whiskers\",\n    \"meow\": true\n  }\n}\n// or\n{\n  \"kind\": \"dog\",\n  \"value\": {\n    \"name\": \"Rex\",\n    \"bark\": false\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Response Shapes and Type Aliases in TypeSpec - typespec\nDESCRIPTION: This code uses built-in types such as OkResponse, Body<T>, and NotFoundResponse for standard REST response shapes, and demonstrates the use of model composition and type aliases to simplify and reuse response structures across a service. This pattern ensures consistent API responses and reduces boilerplate. Requires OkResponse, Body, Pet, ETag, NotFoundResponse, NoContentResponse.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\nmodel ETag {\n  @header eTag: string;\n}\n@route(\"/pets\")\nnamespace Pets {\n  op list(@query skip: int32, @query top: int32): OkResponse & Body<Pet[]>;\n  op read(@path petId: int32, @header ifMatch?: string): (OkResponse &\n    Body<Pet> &\n    ETag) | NotFoundResponse;\n  @post\n  op create(...Pet): NoContentResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Query Parameters with query Decorator - TypeSpec (typespec)\nDESCRIPTION: Illustrates the use of @TypeSpec.Http.query to map properties or parameters to HTTP query strings. Supports optional parameter name or options, allowing for name overrides and configuration such as exploded arrays. Facilitates binding of query string inputs to handlers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.query(queryNameOrOptions?: valueof string | TypeSpec.Http.QueryOptions)\n```\n\nLANGUAGE: typespec\nCODE:\n```\nop read(@query select: string, @query(\"order-by\") orderBy: string): void;\nop list(@query(#{ name: \"id\", explode: true }) ids: string[]): void;\n```\n\n----------------------------------------\n\nTITLE: Documenting Models and Properties with the @doc Decorator in TypeSpec\nDESCRIPTION: This snippet shows how to use the @doc decorator to provide documentation for a model and its property in TypeSpec. The decorator accepts a string argument, which becomes the attached documentation, and can be added to nearly any declaration. Dependencies include TypeSpec's core decorator system. Inputs are the model definition and optional documented properties; outputs are cleaner, documented API specs consumable by TypeSpec tooling. Decorators offer flexibility and can be extended or used with additional tooling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/documentation.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@doc(\"This is a sample model\")\nmodel Dog {\n  @doc(\"This is a sample property\")\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining REST Action Decorator in TypeSpec (Typespec)\nDESCRIPTION: This decorator marks an operation as an action, scoped to a resource item (e.g., /pets/{petId}/my-action). The decorator can take an optional action name; otherwise, the operation's name is used. Used by applying @TypeSpec.Rest.action(name?: valueof string) to an operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.action(name?: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Using @withVisibility to Project Model Properties - Typespec\nDESCRIPTION: This series of snippets demonstrate usage of @withVisibility in TypeSpec to refine models for different lifecycle needs. It shows a Dog model with various @visibility annotations, and then uses @withVisibility when spreading properties into new models to retain only those matching specific visibility criteria. Dependencies include defined visibilities such as Lifecycle.Read, Lifecycle.Create, and Lifecycle.Update. Key parameters are the episodic visibilities provided as arguments. Output models (DogCreateOrUpdate, DogRead) only include properties with the specified visibility, omitting others. The spread operator and decorator interaction is a core pattern.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_77\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Dog {\n  @visibility(Lifecycle.Read)\n  id: int32;\n\n  @visibility(Lifecycle.Create, Lifecycle.Update)\n  secretName: string;\n\n  name: string;\n}\n\n// The spread operator will copy all the properties of Dog into DogRead,\n// and @withVisibility will then remove those that are not visible with\n// create or update visibility.\n//\n// In this case, the id property is removed, and the name and secretName\n// properties are kept.\n@withVisibility(Lifecycle.Create, Lifecycle.Update)\nmodel DogCreateOrUpdate {\n  ...Dog;\n}\n\n// In this case the id and name properties are kept and the secretName property\n// is removed.\n@withVisibility(Lifecycle.Read)\nmodel DogRead {\n  ...Dog;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GET Operation with a Path Parameter in TypeSpec\nDESCRIPTION: This TypeSpec code defines a `Widgets` interface within the `DemoService` namespace. The interface is associated with the `/widgets` route and tagged as \"Widgets\". It contains a `read` operation mapped to the HTTP GET method, which takes a positional path parameter `id` of type string. The operation returns `void`, indicating no specific response body is expected or modeled.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/path-parameter.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\n\n@route(\"/widgets\")\n@tag(\"Widgets\")\ninterface Widgets {\n  @test @get read(@path id: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Compiler Globally using npm\nDESCRIPTION: Installs the core TypeSpec compiler package globally using the Node Package Manager (npm). This command makes the `tsp` command-line interface tool available system-wide, allowing users to compile TypeSpec definitions and manage projects from any directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @typespec/compiler\n```\n\n----------------------------------------\n\nTITLE: Explicit Response Body Assignment via @body Decorator - TypeSpec\nDESCRIPTION: Demonstrates assigning specific properties as the HTTP response body using the @body decorator, or by defaulting unannotated properties. Shows mapping of model structures to OpenAPI response bodies for varying status codes. Inputs include status fields and @body or normal fields; outputs are the OpenAPI responses with correct body contents for each status.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\nmodel UserResponse {\\n  @statusCode code: 200;\\n\\n  // If the status code is 200, the body will be just a JSON User at the top level.\\n  @body user: User;\\n}\\n\\nmodel NotFound {\\n  @statusCode code: 404;\\n\\n  // If the status code is 404, the body will be a JSON object `{ \"message\": <string> }`\\n  message: string;\\n}\\n\\nop getUser(@path id: string): UserResponse | NotFound;\n```\n\n----------------------------------------\n\nTITLE: Correct Way to Report Diagnostics in TypeSpec Linters\nDESCRIPTION: Illustrates the correct and incorrect methods for reporting diagnostics within a TypeSpec linter rule. It advises against directly using `program.reportDiagnostic` or library-specific helpers, recommending instead the use of `context.reportDiagnostic` provided within the rule's `create` function context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/linters.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// ❌ Bad\nprogram.reportDiagnostic({\n  code: \"other-code\",\n  target,\n});\n// ❌ Bad\nreportDiagnostic(program, {\n  code: \"other-code\",\n  target,\n});\n\n// ✅ Good\ncontext.reportDiagnostic({\n  target,\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Instantiating an Operation Template using 'is' in TypeSpec\nDESCRIPTION: This example illustrates how to create a concrete operation by instantiating an operation template. The `readPet` operation is defined using `is ReadResource<Pet>`, which specializes the `ReadResource` template with the `Pet` model. The resulting `readPet` operation takes an `id` string and returns a `Pet`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/operations.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nop readPet is ReadResource<Pet>;\n```\n\n----------------------------------------\n\nTITLE: Defining a Create Transformation Model in TypeSpec (Typespec)\nDESCRIPTION: Implements a transformation model, Create, that generates a copy of the input model T containing only properties marked with Lifecycle.Create visibility. This is useful for operations related to resource creation and can optionally rename the resulting model using a templated name. It is recursive, supports an optional NameTemplate parameter, and requires the input model T.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Create<T, NameTemplate>\n\n```\n\n----------------------------------------\n\nTITLE: Supporting Multiple Request Content-Types via Union (TypeSpec)\nDESCRIPTION: Demonstrates accepting multiple possible Content-Types for an operation's request body by declaring a union of string literals ('image/png' | 'image/jpeg') in the header. The uploadImage operation can accept either PNG or JPEG images, with the actual request indicating which via the contentType header. Requires TypeSpec support for literal union types in header parameters. Consumes binary image data.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/content-types.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nop uploadImage(@header contentType: \"image/png\" | \"image/jpeg\", @body image: bytes): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Templates with Default Parameter Values in TypeSpec\nDESCRIPTION: Shows how to assign a default value to a template parameter using '= <value>' in TypeSpec. The 'Page' model defaults the generic 'Item' parameter to 'string', ensuring that omitted arguments default appropriately. Dependencies: none. Input: none. Output: a model accepting optional overriding of 'Item'. Constraints: Default must satisfy parameter constraints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/templates.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Page<Item = string> {\n  size: int32;\n  item: Item[];\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Discriminated Unions in TypeSpec\nDESCRIPTION: Shows how to apply the @discriminated decorator to a TypeSpec union, making it a discriminated union for serialization. Requires defining models for each variant and results in an output where each variant is serialized with a kind and value property. Inputs are union types; output is a discriminated JSON object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@discriminated\nunion Pet{ cat: Cat, dog: Dog }\n\nmodel Cat { name: string, meow: boolean }\nmodel Dog { name: string, bark: boolean }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"cat\",\n  \"value\": {\n    \"name\": \"Whiskers\",\n    \"meow\": true\n  }\n},\n{\n  \"kind\": \"dog\",\n  \"value\": {\n    \"name\": \"Rex\",\n    \"bark\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Client Context with OAuth2 Configuration\nDESCRIPTION: This TypeScript function `createTestClientContext` builds the necessary context for the `TestClient`. It resolves the service endpoint by replacing placeholders and uses a helper function (`getClient`) to configure the underlying HTTP client pipeline. Crucially, it passes the provided `OAuth2TokenCredential` and explicitly defines the OAuth2 authentication scheme details (kind, flow type, URLs, scopes) matching the TypeSpec definition to enable automatic token acquisition and authorization header management.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/oauth2.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport function createTestClientContext(\n  endpoint: string,\n  credential: OAuth2TokenCredential<ClientCredentialsFlow>,\n  options?: TestClientOptions,\n): TestClientContext {\n  const params: Record<string, any> = {\n    endpoint: endpoint,\n  };\n  const resolvedEndpoint = \"{endpoint}\".replace(/{([^}]+)}/g, (_, key) =>\n    key in params\n      ? String(params[key])\n      : (() => {\n          throw new Error(`Missing parameter: ${key}`);\n        })(),\n  );\n  return getClient(resolvedEndpoint, {\n    ...options,\n    credential,\n    authSchemes: [\n      {\n        kind: \"oauth2\",\n        flows: [\n          {\n            kind: \"clientCredentials\",\n            tokenUrl: \"https://api.example.com/oauth2/authorize\",\n            refreshUrl: \"https://api.example.com/oauth2/refresh\",\n            scopes: [\"read\"],\n          },\n        ],\n      },\n    ],\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom File Types with Constrained Content Types in TypeSpec\nDESCRIPTION: Illustrates three equivalent methods for defining custom file types in TypeSpec with specific content type constraints (`image/png` or `image/jpeg`). Shows how to use `alias`, extend `File` with template arguments, or extend `File` and override the `contentType` property. These custom types provide guarantees about the file's media type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nalias ImageFile = File<\"image/png\" | \"image/jpeg\">;\n\n// or\n\nmodel ImageFile extends File<\"image/png\" | \"image/jpeg\"> {}\n\n// or\n\nmodel ImageFile extends File {\n  contentType: \"image/png\" | \"image/jpeg\";\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitters for OpenAPI and C# - YAML\nDESCRIPTION: Specifies configuration for TypeSpec emitters in tspconfig.yaml. This setup instructs the TypeSpec compiler to emit OpenAPI 3.1.0 schema to a given directory and generate C# server code to another location. Required when using the `tsp compile` command to control code and schema output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-csharp.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/openapi3\"\n  - \"@typespec/http-server-csharp\"\noptions:\n  \"@typespec/openapi3\":\n    emitter-output-dir: \"{output-dir}/schema\"\n    openapi-versions:\n      - 3.1.0\n  \"@typespec/http-server-csharp\":\n    emitter-output-dir: \"{output-dir}/server/generated\"\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Discriminated Unions with Extends and @discriminator in TypeSpec\nDESCRIPTION: This snippet illustrates creating a discriminated union hierarchy using the @discriminator decorator alongside inheritance. Each subtype (Dog, Cat) extends a common base (Pet) and specifies a unique literal value for the discriminator property. The OpenAPI schema becomes a tagged union with mapping from discriminators to sub-schemas, supporting safe polymorphic deserialization.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_21\n\nLANGUAGE: typespec\nCODE:\n```\n@discriminator(\"kind\")\nmodel Pet {\n  name: string;\n  kind: string;\n}\n\nmodel Dog extends Pet {\n  kind: \"dog\"; // Must be a literal string value\n  breed: string;\n}\n\nmodel Cat extends Pet {\n  kind: \"cat\"; // Must be a literal string value\n  whiskerCount: int32;\n}\n```\n\n----------------------------------------\n\nTITLE: Model Property Type Assignability Examples in TypeSpec\nDESCRIPTION: This snippet demonstrates both valid and invalid assignability cases for models in TypeSpec, based on property presence and type compatibility. It covers scenarios where models match property types exactly, allow for assignable literal or narrower types (like int8 to int32), contain additional properties, or are missing required properties. Dependencies: TypeSpec core libraries. Key parameters: property type, presence, and extension. Inputs: model definitions with various combinations; Outputs: determined assignability for S to T. Constraints: missing or incompatible types result in non-assignability.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/type-relations.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nmodel T {\\n  foo: string;\\n  bar: int32;\\n}\\n\\n// Valid\\n\\nmodel S { // When properties types are the exact same\\n  foo: string;\\n  bar: int32;\\n}\\nmodel S { // When the properties types are literal assignable to the target type\\n  foo: \\\"abc\\\";\\n  bar: 123;\\n}\\nmodel S {\\n  foo: string;\\n  bar: int8; // int8 is assignable to int16\\n}\\nmodel S {\\n  foo: string;\\n  bar: int32;\\n  otherProp: boolean; // Additional properties are valid.\\n}\\n\\n// Invalid\\nmodel S { // Missing property bar\\n  foo: string;\\n}\\nmodel S {\\n  foo: string;\\n  bar: int64; // int64 is NOT assignable to int32\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Versions with Enums and Decorators - TypeSpec\nDESCRIPTION: This TypeSpec code defines API versions using an enum and applies the @versioned decorator to a namespace. It demonstrates the necessary imports (@typespec/http, @typespec/versioning), sets up the PetStore namespace, and declares version identifiers (v1, v2). Pre-requisite: @typespec/versioning must be installed. Inputs include version names and string identifiers; the output is a TypeSpec definition that supports emitting multiple OpenAPI specs, one for each version.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/06-versioning.mdx#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\nimport \"@typespec/http\";\\n// highlight-next-line\\nimport \"@typespec/versioning\";\\n\\nusing Http;\\n// highlight-next-line\\nusing Versioning;\\n\\n@service(#{ title: \"Pet Store\" })\\n@server(\"https://example.com\", \"Single server endpoint\")\\n// highlight-next-line\\n@versioned(Versions)\\nnamespace PetStore;\\n\\n// highlight-start\\nenum Versions {\\n  v1: \"1.0\",\\n  v2: \"2.0\",\\n}\\n// highlight-end\\n\n```\n\n----------------------------------------\n\nTITLE: Correctly Defining a Binary File Body using File Template Argument in TypeSpec\nDESCRIPTION: This TypeSpec snippet demonstrates the correct method for defining an operation `downloadImage` that returns a binary file body restricted to specific image content types (`image/png` or `image/jpeg`). Using the `File` template's content type argument (`File<\"image/png\" | \"image/jpeg\">`) correctly signals that the response body is the raw file data itself. This approach relies on the `@typespec/http` library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\n// Do this instead\nop downloadImage(): File<\"image/png\" | \"image/jpeg\">;\n```\n\n----------------------------------------\n\nTITLE: Defining 64-bit Unsigned Integer Scalar in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines `uint64`, a scalar for modeling very large unsigned integer values. Often used when representing identifiers or counters requiring more than 32 bits.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_51\n\nLANGUAGE: typespec\nCODE:\n```\nscalar uint64\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Response Shapes: Terse Form - typespec\nDESCRIPTION: This snippet presents a more concise form for operation return types using direct model returns and type intersections/unions. The read operation combines Pet and ETag, the list operation returns a Pet array, and error handling is encapsulated by union with NotFoundResponse. This leverages TypeSpec's implicit body and status code behaviors. Requires Pet, ETag, NotFoundResponse.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/pets\")\nnamespace Pets {\n  op list(@query skip: int32, @query top: int32): Pet[];\n  op read(@path petId: int32, @header ifMatch?: string): (Pet & ETag) | NotFoundResponse;\n  @post\n  op create(...Pet): {};\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Body Model in TypeSpec\nDESCRIPTION: Defines the generic `TypeSpec.Http.Body` model, which wraps a given `Type` in a single property named `body` marked with the `@body` decorator. This utility model is useful in situations where a bare type cannot be directly used as a request or response body and defining a dedicated model with a single property is cumbersome.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.Body<Type>\n```\n\n----------------------------------------\n\nTITLE: Updating a Resource Instance - TypeSpec - typespec\nDESCRIPTION: Specifies the update operation for single resource instances using a ResourceCreateOrUpdateModel as input. The result is the updated Resource or an Error if the operation fails. Parameters include the set of updated properties; the output is the latest representation of the resource.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_38\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceInstanceOperations.update(properties: TypeSpec.Rest.Resource.ResourceCreateOrUpdateModel<Resource>): Resource | Error\n```\n\n----------------------------------------\n\nTITLE: Injecting Discriminator Inline in TypeSpec Union and its JSON Serialization\nDESCRIPTION: This snippet demonstrates configuring a discriminated union to inject the discriminator property directly into the data payload, eliminating the envelope property, by using `envelope: \"none\"` in the `@discriminated` decorator. It defines the `Pet` union and associated `Cat` and `Dog` models. The JSON examples show the resulting flat structure where the `kind` property appears alongside other model properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/discriminated-types.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@discriminated(#{ envelope: \"none\" })\nunion Pet {\n  cat: Cat,\n  dog: Dog,\n}\n\nmodel Cat {\n  name: string;\n  meow: boolean;\n}\n\nmodel Dog {\n  name: string;\n  bark: boolean;\n}\n```\n```\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"kind\": \"cat\",\n  \"name\": \"Whiskers\",\n  \"meow\": true\n}\n// or\n{\n  \"kind\": \"dog\",\n  \"name\": \"Rex\",\n  \"bark\": false\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Encoded Name in TypeSpec Model\nDESCRIPTION: Defines a basic TypeSpec model `Foo` with a property `expireAt`. The `@encodedName` decorator specifies that this property should be serialized as `exp` when the target mime type is `json`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/encoded-names.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Foo {\n  // Specify that when serializing to JSON `expireAt` property should be named `exp`\n  @encodedName(\"json\", \"exp\")\n  expireAt: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Array Encoding Options via Enum in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Introduces an enum `ArrayEncoding` for selecting the serialization format of array values. Supported values include pipeDelimited and spaceDelimited, each corresponding to different delimiter patterns in serialized output. Used in array serialization configurations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_25\n\nLANGUAGE: typespec\nCODE:\n```\nenum ArrayEncoding\n```\n\n----------------------------------------\n\nTITLE: Example Usage: Query Transformation with Visibility Filtering (Typespec)\nDESCRIPTION: Demonstrates applying the Query transformation to a Dog model with various visibility annotations. The resulting QueryDog model includes only fields allowed by the Query lifecycle, illustrating conditional property inclusion in practice.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_16\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Dog {\n  @visibility(Lifecycle.Read)\n  id: int32;\n\n  // When getting information for a Dog, you can set this field to true to include\n  // some extra information about the Dog's pedigree that is normally not returned.\n  // Alternatively, you could just use a separate option parameter to get this\n  // information.\n  @visibility(Lifecycle.Query)\n  includePedigree?: boolean;\n\n  name: string;\n\n  // Only included if `includePedigree` is set to true in the request.\n  @visibility(Lifecycle.Read)\n  pedigree?: string;\n}\n\n// This model will have the `includePedigree` and `name` fields, but not `id` or `pedigree`.\nmodel QueryDog is Query<Dog>;\n\n```\n\n----------------------------------------\n\nTITLE: Annotating Operations with Headers in TypeSpec - typespec\nDESCRIPTION: This example shows the use of the @header decorator to bind parameters and response properties to HTTP headers. It demonstrates a read operation with an If-Match request header and an ETag response header. Dependencies: Pet model. This is key for supporting HTTP caching and concurrency features in REST APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/pets\")\nnamespace Pets {\n  op list(@query skip: int32, @query top: int32): {\n    @body pets: Pet[];\n  };\n  op read(@path petId: int32, @header ifMatch?: string): {\n    @header eTag: string;\n    @body pet: Pet;\n  };\n  @post\n  op create(@body pet: Pet): {};\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Interface for Base Model 'Pet'\nDESCRIPTION: Exports a TypeScript interface named `Pet` generated from the TypeSpec definition. It includes `id` (string) and `name` (string) properties, representing the base model structure. This interface is located in the `src/models/models.ts` file.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_extends.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/models.ts interface Pet\nexport interface Pet {\n  id: string;\n  name: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Property References in TypeSpec\nDESCRIPTION: Defines a `TodoItem` model and a `TodoItemPatch` model using TypeSpec. `TodoItemPatch` utilizes property references (`TodoItem.title`, `TodoItem.id`, `TodoItem.assignedTo`), including a nullable reference (`TodoItem.assignedTo | null`). An `update` operation using these models is also defined to demonstrate usage in an API context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/property_references_property.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\nmodel TodoItem {\n  id: safeint;\n  title: string;\n  assignedTo: string;\n}\n\nmodel TodoItemPatch {\n  title?: TodoItem.title;\n  assignedTo?: TodoItem.assignedTo | null;\n}\n@patch op update(\n  @header contentType: \"application/merge-patch+json\",\n  @path id: TodoItem.id,\n  @body patch: TodoItemPatch,\n): TodoItem;\n```\n\n----------------------------------------\n\nTITLE: Including Cookie in Operation with cookie Decorator - TypeSpec (typespec)\nDESCRIPTION: Utilizes @TypeSpec.Http.cookie to denote that a property will be transmitted via HTTP cookie. Accepts an optional cookie name or options for customization, defaulting to snake_case conversion of the property name. The decorator can be used on operation parameters or return types and requires TypeSpec.Http.CookieOptions for advanced usage.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.cookie(cookieNameOrOptions?: valueof string | TypeSpec.Http.CookieOptions)\n```\n\nLANGUAGE: typespec\nCODE:\n```\nop read(@cookie token: string): {\n  data: string[];\n};\nop create(\n  @cookie({\n    name: \"auth_token\",\n  })\n  data: string[],\n): void;\n```\n\nLANGUAGE: typespec\nCODE:\n```\nop read(): {\n  @cookie authToken: string;\n}; // headerName: auth_token\nop update(@cookie AuthToken: string): void; // headerName: auth_token\n```\n\n----------------------------------------\n\nTITLE: Declaring Pagination Page Size Parameter with @pageSize in TypeSpec\nDESCRIPTION: Presents @pageSize for specifying the parameter that controls maximum number of items per returned page in paginated APIs. Use in models and operations where clients can select response batch size.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_48\n\nLANGUAGE: typespec\nCODE:\n```\n@pageSize\n```\n\n----------------------------------------\n\nTITLE: Applying Extensions with @extension Decorator in TypeSpec\nDESCRIPTION: Provides two TypeSpec examples showing incorrect and correct usage of the @extension decorator. The first marks an error where the extension key does not start with 'x-' as required by OpenAPI v3, and the second corrects it. Ensure Custom extensions for OpenAPI always start with the 'x-' prefix per the specification.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/diagnostics.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@extension(\"invalid-name\", \"value\")\\nmodel User {\\n  id: string;\\n}\\n\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@extension(\"x-valid-name\", \"value\")\\nmodel User {\\n  id: string;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a POST Request Client with Parameters in TypeScript\nDESCRIPTION: Generated TypeScript client function `read` for a `POST` request to `/widgets/{id}`. It accepts parameters for the path (`id`), header (`etag`), query (`foo`), and body (`name`). The function constructs the path including path and query parameters, sets the `etag` header, includes `name` in the request body, sends the POST request using `client.pathUnchecked(path).post()`, and handles the response, checking for a 204 status.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-request.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/api/widgetsClient/widgetsClientOperations.ts function read\nexport async function read(\n  client: WidgetsClientContext,\n  id: string,\n  etag: string,\n  foo: string,\n  name: string,\n  options?: ReadOptions,\n): Promise<void> {\n  const path = parse(\"/widgets/{id}{?foo}\").expand({\n    id: id,\n    foo: foo,\n  });\n  const httpRequestOptions = {\n    headers: {\n      etag: etag,\n    },\n    body: {\n      name: name,\n    },\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring File Upload Models and Operation - TypeSpec\nDESCRIPTION: Defines a custom file model with an explicit content type and uses it in an HTTP multipart operation. The code introduces FileSpecificContentType with a fixed JPEG image MIME type, wraps it in an HTTP part for file upload, and declares an operation expecting multipart form data. Dependencies include the 'File' model and TypeSpec annotations like @header and @multipartBody. The operation accepts a file with content type validation and expects no content in the response.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/file.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\n\nmodel FileSpecificContentType extends File {\n  filename: string;\n  contentType: \"image/jpg\";\n}\n\nmodel FileWithHttpPartSpecificContentTypeRequest {\n  profileImage: HttpPart<FileSpecificContentType>;\n}\n\n@post\nop imageJpegContentType(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: FileWithHttpPartSpecificContentTypeRequest,\n): NoContentResponse;\n\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Interface for Foo Model\nDESCRIPTION: Shows the expected generated TypeScript interface `Foo` located in `src/models/models.ts`. This interface mirrors the TypeSpec `Foo` model, defining `name` as a string and `age` as a number, suitable for use in TypeScript applications.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/basic_model.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/models.ts interface Foo\nexport interface Foo {\n  name: string;\n  age: number;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a New API Interface in TypeSpec\nDESCRIPTION: Example illustrating how to define a new API interface named `Categories` using TypeSpec syntax. It utilizes decorators like `@route` to specify the base path, `@tag` for grouping in documentation, and `@get` to define an HTTP GET operation (`list`). This definition serves as the blueprint for code generation and scaffolding.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-javascript.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/categories\")\n@tag(\"Categories\")\ninterface Categories {\n  /** List categories */\n  @get list(): CategoryList | Error;\n  // More operations...\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Property in HTTP Body with Decorator - TypeSpec (typespec)\nDESCRIPTION: Shows how to exclude a property from the HTTP body in models or operations using @TypeSpec.Http.bodyIgnore. This decorator can help organize metadata or empty fields, preventing their serialization in the request payload. It is applied to model properties and does not take any parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.bodyIgnore\n```\n\nLANGUAGE: typespec\nCODE:\n```\nop upload(\n  name: string,\n  @bodyIgnore headers: {\n    @header id: string;\n  },\n): void;\n```\n\n----------------------------------------\n\nTITLE: Testing a TypeSpec Linter Rule\nDESCRIPTION: Demonstrates how to test a specific TypeSpec linter rule using `createLinterRuleTester` from `@typespec/compiler/testing`. It involves setting up a `RuleTester` instance for the target rule within a test suite (e.g., using `describe` and `beforeEach`). Tests then use `ruleTester.expect()` with TypeSpec code strings, checking for expected diagnostics using `.toEmitDiagnostics()` or verifying validity with `.toBeValid()`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/linters.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { RuleTester, createLinterRuleTester, createTestRunner } from \"@typespec/compiler/testing\";\nimport { requiredDocRule } from \"./rules/required-doc.rule.js\";\n\ndescribe(\"required-doc rule\", () => {\n  let ruleTester: RuleTester;\n\n  beforeEach(() => {\n    const runner = createTestRunner();\n    ruleTester = createLinterRuleTester(runner, requiredDocRule, \"@typespec/my-linter\");\n  });\n\n  it(\"emit diagnostics when using model named foo\", async () => {\n    await ruleTester.expect(`model Foo {}`).toEmitDiagnostics({\n      code: \"@typespec/my-linter/no-foo-model\",\n      message: \"Cannot name a model with 'Foo'\",\n    });\n  });\n\n  it(\"should be valid to use other names\", async () => {\n    await ruleTester.expect(`model Bar {}`).toBeValid();\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Type Encodings for OpenAPI with @encode Decorator in TypeSpec\nDESCRIPTION: This code pattern demonstrates applying the @encode decorator to specify how TypeSpec properties (such as date/time or duration) are serialized for OpenAPI. The first argument sets the encoding (e.g., \"base64\", \"rfc3339\"), followed by the target type for encoding, and the property semantic type. Useful for ensuring OpenAPI accurately represents custom serialization formats.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_25\n\nLANGUAGE: typespec\nCODE:\n```\n@encode(\"<encoding name>\", encodingTargetType) property: trueType;\n```\n\n----------------------------------------\n\nTITLE: Defining a Templated Interface in TypeSpec\nDESCRIPTION: Defines a generic (templated) interface, ReadWrite<T>, providing read and write operations parametrized by type T. This allows the interface to operate over various types through instantiation. No external dependencies are required except for TypeSpec and understanding of generics/templates. The read() operation returns T; write(t: T) performs an action without a return value. This approach enables type-safe reusable operation patterns.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/interfaces.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\ninterface ReadWrite<T> {\n  read(): T;\n  write(t: T): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Regex Pattern Constraint in TypeSpec\nDESCRIPTION: This snippet demonstrates the use of the `@pattern` decorator to enforce a regular expression constraint on a custom scalar type `LowerAlpha` derived from `string`. The decorator takes the regex pattern and an optional validation message as arguments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_49\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@pattern(\"[a-z]+\", \"Must be a string consisting of only lower case letters and of at least one character.\")\nscalar LowerAlpha extends string;\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Service Endpoints with @server Decorator - TypeSpec\nDESCRIPTION: Illustrates use of the @server decorator to configure service endpoint URLs, their descriptions, and URL parameters for service namespaces. Examples cover single and multiple endpoints, embedded documentation, and parameterized URLs for regional or project-based endpoints. This relies on TypeSpec's Http extension; inputs include endpoint URL strings, optional descriptions, and parameter records, producing namespace-level endpoint specifications for use by API clients.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/README.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.server(url: valueof string, description?: valueof string, parameters?: Record<unknown>)\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@service\n@server(\"https://example.com\")\nnamespace PetStore;\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@service\n@server(\"https://example.com\", \"Single server endpoint\")\nnamespace PetStore;\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@server(\"https://{region}.foo.com\", \"Regional endpoint\", {\n  @doc(\"Region name\")\n  region?: string = \"westus\",\n})\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@service\n@server(\"https://example.com\", \"Standard endpoint\")\n@server(\n  \"https://{project}.private.example.com\",\n  \"Private project endpoint\",\n  {\n    project: string,\n  }\n)\nnamespace PetStore;\n```\n\n----------------------------------------\n\nTITLE: Separating Body and Metadata with @bodyRoot - TypeSpec\nDESCRIPTION: Demonstrates correct usage of @bodyRoot to distinguish between body data and metadata properties in a response model. Ensures metadata such as headers remain correctly mapped and only the intended data is included in the body. Recommended where precise body resolution is necessary in TypeSpec API definitions. Requires @typespec/http context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-05-07.md#_snippet_5\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop a1(): {\n  @bodyRoot _: {\n    @header foo: string;\n    other: string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Object Value in TypeSpec\nDESCRIPTION: This snippet demonstrates the syntax for defining an object value using `#{}` in TypeSpec. It creates a constant `point` holding an object with `x` and `y` properties, both assigned scalar numeric values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nconst point = #{ x: 0, y: 0 };\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Resource Error Model - TypeSpec REST - typespec\nDESCRIPTION: Defines a TypeSpec model TypeSpec.Rest.Resource.ResourceError representing standard error responses for resource operations. Includes integer error code and error message properties to uniformly capture operation failures. No generics or dependencies outside TypeSpec core types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/data-types.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Rest.Resource.ResourceError\n```\n\n----------------------------------------\n\nTITLE: Using a Custom OAuth2 Credential with a Generated Client - Python\nDESCRIPTION: This example shows how to instantiate a custom OAuth2 credential class and utilize it with a generated client to perform authenticated operations. The 'MyOAuth2Credential' must implement a 'get_token_info' method following the credential interface (e.g., as in 'corehttp' package). Passing the credential instance allows the client to obtain access tokens transparently for API calls. Requires the generated client and a compatible credential implementation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/docs/samples/client/python/oauth/README.md#_snippet_1\n\nLANGUAGE: py\nCODE:\n```\ncredential = MyOAuth2Credential()\nclient = MyGeneratedClient(endpoint, credential)\n\nresult = client.my_operation()\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Resource - TypeSpec - typespec\nDESCRIPTION: Defines an operation for both creating and updating a resource using a ResourceCreateOrUpdateModel as input. Returns the updated or newly created Resource, a created response, or Error. Supports resources where either action may occur, depending on pre-existence; requires supporting model structures.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_33\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceCreateOrUpdate.createOrUpdate(resource: TypeSpec.Rest.Resource.ResourceCreateOrUpdateModel<Resource>): Resource | TypeSpec.Rest.Resource.ResourceCreatedResponse<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Status Codes with @statusCode - TypeSpec\nDESCRIPTION: Demonstrates use of the @statusCode decorator to explicitly specify one or more result HTTP status codes for operation responses or returned models. The examples illustrate both fixed and union (multiple) status codes, along with associating a response body. Only valid on model properties; used for strict API modeling where status code mapping is required. Assumes use of TypeSpec Http library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/README.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.statusCode\n```\n\nLANGUAGE: typespec\nCODE:\n```\nop read(): {\n  @statusCode _: 200;\n  @body pet: Pet;\n};\nop create(): {\n  @statusCode _: 201 | 202;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Response Status Codes in TypeSpec Operations\nDESCRIPTION: This TypeSpec example demonstrates defining multiple possible responses for API operations using the `|` operator. The `getPet`, `createPet`, and `updatePet` operations are updated to return different status codes (e.g., 200 OK or 404 Not Found for `getPet`, 201 Created or 202 Accepted for `createPet`) based on the outcome reported by the backend service. Depends on `@typespec/http`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/02-operations-responses.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp title=main.tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/openapi3\\\"]}\"\nimport \"@typespec/http\";\n\nusing Http;\n\n@service(#{ title: \"Pet Store\" })\n@server(\"https://example.com\", \"Single server endpoint\")\nnamespace PetStore;\n\nmodel Pet {\n  id: int32;\n\n  @minLength(1)\n  name: string;\n\n  @minValue(0)\n  @maxValue(100)\n  age: int32;\n\n  kind: petType;\n}\n\nenum petType {\n  dog: \"dog\",\n  cat: \"cat\",\n  fish: \"fish\",\n  bird: \"bird\",\n  reptile: \"reptile\",\n}\n\n@route(\"/pets\")\nnamespace Pets {\n  @get\n  op listPets(): {\n    @statusCode statusCode: 200;\n    @body pets: Pet[];\n  };\n\n  @get\n  op getPet(@path petId: int32): {\n    @statusCode statusCode: 200;\n    @body pet: Pet;\n    // highlight-start\n  } | {\n    @statusCode statusCode: 404;\n    // highlight-end\n  };\n\n  @post\n  op createPet(@body pet: Pet): {\n    @statusCode statusCode: 201;\n    @body newPet: Pet;\n    // highlight-start\n  } | {\n    @statusCode statusCode: 202;\n    @body acceptedPet: Pet;\n    // highlight-end\n  };\n\n  @put\n  op updatePet(@path petId: int32, @body pet: Pet): {\n    @statusCode statusCode: 200;\n    @body updatedPet: Pet;\n    // highlight-start\n  } | {\n    @statusCode statusCode: 404;\n    // highlight-end\n  };\n\n  @delete\n  op deletePet(@path petId: int32): {\n    @statusCode statusCode: 204;\n  };\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Client Credentials Flow with Auth0 in TypeSpec Client - TypeScript\nDESCRIPTION: This snippet demonstrates the use of the auth0 Node.js library to create an OAuth2TokenCredential for the client credentials grant type, suited for backend/server-to-server scenarios. It details constructing an AuthenticationClient, obtaining a token with clientCredentialsGrant, and supplying this credential to a SampleTypeSpecClient. Required dependencies are @typespec/ts-http-runtime, auth0, and the Example TypeSpec client. The primary parameter is flows, specifying OAuth2 flow details; output is the service access token. The code includes configuration of allowed authentication schemes and error-free credential management.\nSOURCE: https://github.com/microsoft/typespec/blob/main/docs/samples/client/js/oauth/readme.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { OAuth2TokenCredential, ClientCredentialsFlow } from \"@typespec/ts-http-runtime\";\nimport { AuthenticationClient } from \"auth0\";\nimport { SampleTypeSpecClient } from \"SampleTypeSpecSDK\";\n\n// Create an OAuth2 credential that implements authorization code flow\nconst credential: OAuth2TokenCredential<ClientCredentialsFlow> = {\n  async getOAuth2Token(flows: ClientCredentialsFlow[]) {\n    const { tokenUrl } = flows[0];\n    const option = {\n      domain: tokenUrl,\n      clientId: \"SampleClientID\",\n      clientSecret: \"SampleClientSecret\",\n    };\n    const client = new AuthenticationClient(option);\n    const response = await client.oauth.clientCredentialsGrant({ audience: \"SampleAudience\" });\n    return response.data.access_token;\n  },\n};\n\n// Authentication shemes that the services allow\nconst authorizationCodeScheme: AuthScheme = {\n  kind: \"oauth2\",\n  flows: [\n    {\n      kind: \"clientCredentials\",\n      tokenUrl: \"https://example.com/token\",\n      scopes: [\"sampleScope1\", \"sampleScope2\"],\n    },\n  ],\n};\n\n// Pass the credential to the client and use the client to make a request to the service\nconst client = new SampleTypeSpecClient(credential, {\n  authSchemes: [authorizationCodeScheme],\n});\n```\n\n----------------------------------------\n\nTITLE: Example TypeSpec Definitions for Common Multipart Scenarios\nDESCRIPTION: This collection of TypeSpec snippets illustrates various common `multipart/form-data` request structures defined using `@multipartBody` and `HttpPart`. It includes examples for uploading a single file (`avatar`), multiple distinct files (`avatar`, `banner`), an array representing multiple files of the same type (`images: HttpPart<File>[]`), simple string form fields (`firstName`, `lastName`), a single JSON object (`address: HttpPart<Address>`), and multiple JSON objects sent as separate parts (`addresses: HttpPart<Address>[]`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/multipart.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n// Upload a single file\nop create(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: {\n    avatar: HttpPart<File>;\n  },\n): void;\n\n// Upload multiple files\nop create(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: {\n    avatar: HttpPart<File>;\n    banner: HttpPart<File>;\n  },\n): void;\n\n// Upload many files\nop create(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: {\n    images: HttpPart<File>[];\n  },\n): void;\n\n// Upload 2 form fields\nop create(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: {\n    firstName: HttpPart<string>;\n    lastName: HttpPart<string>;\n  },\n): void;\n\n// Send a json field\nmodel Address {\n  street: string;\n  city: string;\n}\nop create(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: {\n    address: HttpPart<Address>;\n  },\n): void;\n\n// Send multiple fields - In this scenario each address is sent as an individual part\nmodel Address {\n  street: string;\n  city: string;\n}\nop create(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: {\n    addresses: HttpPart<Address>[];\n  },\n): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining POST Operation with post Decorator - TypeSpec (typespec)\nDESCRIPTION: Uses @TypeSpec.Http.post to indicate that an operation should be a HTTP POST. Applied directly to operation signatures, it produces endpoints intended for resource creation or submission. No parameters are required, and the decorator communicates intent to code generators and readers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.post\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@post op create(pet: Pet): void;\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Library in TypeSpec\nDESCRIPTION: Imports the '@typespec/http' library, which provides decorators and models for defining REST APIs, and uses the 'using' statement to make the 'Http' namespace contents directly accessible within the current scope.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/01-setup-basic-syntax.mdx#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp title=main.tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/openapi3\\\"]}\"\nimport \"@typespec/http\";\n\nusing Http;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Widget API Service with Nested Namespaces - TypeSpec - tsp\nDESCRIPTION: Specifies an API contract for a Widget service using TypeSpec, including a Widget model, an Error model, and a Widgets interface providing CRUD and analyze operations. The specification attaches visibility, routing, and tagging annotations, enabling code generation and documentation features. Inputs and outputs clearly define request and response types, leveraging TypeSpec features for modeling robust, typed APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/nested_client.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \\\"Widget Service\\\" })\nnamespace DemoService;\n\nmodel Widget {\n  @visibility(Lifecycle.Read, Lifecycle.Update)\n  @path\n  id: string;\n\n  weight: int32;\n  color: \\\"red\\\" | \\\"blue\\\";\n}\n\n@error\nmodel Error {\n  code: int32;\n  message: string;\n}\n\n@route(\\\"/widgets\\\")\n@tag(\\\"Widgets\\\")\ninterface Widgets {\n  @get list(): Widget[] | Error;\n  @get read(@path id: string): Widget | Error;\n  @post create(...Widget): Widget | Error;\n  @patch update(...Widget): Widget | Error;\n  @delete delete(@path id: string): void | Error;\n  @route(\\\"{id}/analyze\\\") @post analyze(@path id: string): string | Error;\n}\n```\n\n----------------------------------------\n\nTITLE: Correctly Defining a JSON File Body using File Template Argument in TypeSpec\nDESCRIPTION: This TypeSpec snippet illustrates the recommended way to define an operation `download` that returns a file body restricted to the `application/json` content type. By specifying the content type directly within the `File` template (`File<\"application/json\", string>`), it correctly indicates that the response body represents the raw file content, avoiding the serialization issue caused by explicit `Content-Type` headers. It relies on the `@typespec/http` library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_16\n\nLANGUAGE: typespec\nCODE:\n```\nop download(): File<\"application/json\", string>;\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP GET Endpoint Returning Widget Model - TypeSpec\nDESCRIPTION: This TypeSpec code declares the API contract for the read operation that returns a Widget model. It defines the Widget model with 'name' (string) and 'age' (int32), and specifies via @test and @get that the read function GETs at \"/widgets\" and returns a Widget. Key for generating correct client deserialization logic for supported return types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-response.md#_snippet_2\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\n\n@test\nmodel Widget {\n  name: string;\n  age: int32;\n}\n\n@route(\"/widgets\")\n@tag(\"Widgets\")\ninterface Widgets {\n  @test @get read(): Widget;\n}\n```\n\n----------------------------------------\n\nTITLE: Using `@sharedRoute` for Operations with Multiple Body Types (File/String) in TypeSpec\nDESCRIPTION: Presents the recommended approach in TypeSpec for defining an endpoint that accepts either a file body or a plain string body. Uses the `@sharedRoute` decorator to define two separate operations (`uploadFile`, `uploadString`) sharing the same route, one accepting `File` and the other accepting `string`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@sharedRoute\nop uploadFile(@path id: string, @body data: File): void;\n\n@sharedRoute\nop uploadString(@path id: string, @body data: string): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Headers with header Decorator - TypeSpec (typespec)\nDESCRIPTION: Decorates model properties or operation parameters to be included as HTTP headers in requests or responses, supporting an optional header name or options to control serialization. By default, camelCase property names are converted to kebab-case for header names. Can specify custom formatting or header options.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.header(headerNameOrOptions?: valueof string | TypeSpec.Http.HeaderOptions)\n```\n\nLANGUAGE: typespec\nCODE:\n```\nop read(@header accept: string): {\n  @header(\"ETag\") eTag: string;\n};\nop create(\n  @header({\n    name: \"X-Color\",\n    format: \"csv\",\n  })\n  colors: string[],\n): void;\n```\n\nLANGUAGE: typespec\nCODE:\n```\nop read(): {\n  @header contentType: string;\n}; // headerName: content-type\nop update(@header ifMatch: string): void; // headerName: if-match\n```\n\n----------------------------------------\n\nTITLE: Generated Service Interface for Users in TypeScript\nDESCRIPTION: Presents the TypeScript interface generated for a TypeSpec namespace, representing contract for service operations. Dependencies: Model and response type imports, TypeScript generics. Input: 'ctx' context and 'user' param; Output: Promise resolving to one of several response or error types. Interface consumers must implement the defined methods matching these signatures.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-js/project.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** An interface representing the operations defined in the 'Todo.Users' namespace. */\nexport interface Users<Context = unknown> {\n  create(\n    ctx: Context,\n    user: User,\n  ): Promise<\n    | UserCreatedResponse\n    | UserExistsResponse\n    | InvalidUserResponse\n    | Standard4XxResponse\n    | Standard5XxResponse\n  >;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional TypeSpec File Imports - YAML - yaml\nDESCRIPTION: Shows a tspconfig.yaml snippet that lists additional TypeSpec files for import using the 'imports' property, facilitating composition of modular specs. These imports supplement the standard project entrypoints. Handled directly by the TypeSpec compiler.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nimports:\n  - sidecar.tsp\n\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec with JSON Schema Emitter via CLI (Bash)\nDESCRIPTION: Shows how to compile a TypeSpec project located in the current directory (`.`) and emit JSON Schema using the `--emit` flag with the `@typespec/json-schema` emitter specified.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/json-schema\n```\n\n----------------------------------------\n\nTITLE: Defining CreateOrUpdate Interface for Resources - TypeSpec - typespec\nDESCRIPTION: Declares an interface for operations that either create a new instance or update an existing one. Uses TypeSpec generics for flexibility in specifying resource and error types. This snippet provides the template but not the operations themselves.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_32\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ResourceCreateOrUpdate<Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Defining a POST Endpoint with Parameters in TypeSpec\nDESCRIPTION: Defines a `POST` operation at `/widgets` using TypeSpec. The operation `read` accepts parameters defined within the `Widget` model: `id` as a path parameter, `etag` as a header, `foo` as a query parameter, and `name` as a property within the request body. The `Widget` model and the operation are marked with `@test`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-request.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\n\n@test\nmodel Widget {\n  @path id: string;\n  @header etag: string;\n  @query foo: string;\n  name: string;\n}\n\n@route(\"/widgets\")\n@tag(\"Widgets\")\ninterface Widgets {\n  @test @post read(...Widget): void;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using @nextLink and Pagination Model Pattern in TypeSpec\nDESCRIPTION: An elaborated example demonstrating how to use a Page model with pagination decorators including @nextLink, making it easier for API clients and code generators to consume paginated data. Models link structure and endpoint pattern for fetching paginated resources.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_37\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Page<T> {\n  @pageItems items: T[];\n  @nextLink next: url;\n  @prevLink prev: url;\n  @firstLink first: url;\n  @lastLink last: url;\n}\n@list op listPets(): Page<Pet>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Default Key Visibility Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@withDefaultKeyVisibility` decorator. Applied to a model, it sets a specified default visibility modifier on all key properties within that model, but only if their visibility hasn't already been explicitly set by other decorators like `@visibility`, `@removeVisibility`, or `@invisible`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_68\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@withDefaultKeyVisibility(visibility: valueof EnumMember)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Intersection with the '&' Operator\nDESCRIPTION: This snippet demonstrates how to declare an intersection type named 'Dog' in TypeSpec using the '&' operator. The resulting 'Dog' type must encompass all properties and characteristics of both the 'Animal' and 'Pet' types. This requires the prior definition of 'Animal' and 'Pet' types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/intersections.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nalias Dog = Animal & Pet;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing the Client GET Operation Function in TypeScript\nDESCRIPTION: This TypeScript function `get` implements the client-side logic for the defined operation. It accepts the client context and optional `GetOptions`. It constructs the request path, sets the `content-type` header (using the provided value or the default \"application/json\"), makes the GET request using the client context, handles the response callback, checks the response status and content type, and returns the body or throws an error. Located in `src/api/testClientOperations.ts`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/default_value_as_optional.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function get(client: TestClientContext, options?: GetOptions): Promise<number> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      \"content-type\": options?.contentType ?? \"application/json\",\n    },\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return response.body!;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Property in a TypeSpec Model\nDESCRIPTION: Illustrates how to mark a model property as optional in TypeSpec using the `?` symbol after the property name. In this example, the `address` property of the `Dog` model is optional and doesn't need to be provided.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Dog {\n  address?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Action Separator for REST Actions in TypeSpec (Typespec)\nDESCRIPTION: This decorator lets you specify the separator string (e.g., '/', ':', '/:') that precedes the action name in auto-generated REST routes. It should be applied to a model, model property, or operation, with the separator value provided as an argument.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.actionSeparator(seperator: valueof \"/\" | \":\" | \"/:\")\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Properties with Specific Type via Record<string> - TypeSpec\nDESCRIPTION: Defines property 'bar' as Record<string>, meaning keys can be any string and values must be strings. This results in an OpenAPI schema where additionalProperties is typed as string. Inputs: None. Output: dictionary with key/value type constraints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_22\n\nLANGUAGE: typespec\nCODE:\n```\n  bar: Record<string>;\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Encoded Numeric Values\nDESCRIPTION: Presents an example JSON payload demonstrating the difference between default numeric serialization (as JSON numbers, e.g., `id`) and string-encoded serialization (e.g., `idAsString`, `viaSalar`) for large numeric types like `int64` and `decimal128`, as configured using `@encode(string)` in the preceding TypeSpec definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/encoding.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"id\": 1234567890123456789012345678901234567890,\n  \"idAsString\": \"1234567890123456789012345678901234567890\",\n  \"viaSalar\": \"1.3\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Modeling Paginated Collections - TypeSpec REST - typespec\nDESCRIPTION: Defines a generic model TypeSpec.Rest.Resource.CollectionWithNextLink<Resource> that structures paginated API responses, including an array of items and an optional nextLink for fetching additional pages. Requires a resource type parameter and expects an array of elements and a URL for pagination. Ensures consistency in paginated result schemas.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/data-types.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Rest.Resource.CollectionWithNextLink<Resource>\n```\n\n----------------------------------------\n\nTITLE: Defining and Assigning Record<T> Types in TypeSpec\nDESCRIPTION: Showcases the definition and correct assignment patterns for Record<T> in TypeSpec, covering both valid cases (models or aliases where all properties are assignable to int32) and invalid cases (non-uniform property types or potential for property extension causing incompatibility). Dependencies: Record<T> generic provided by TypeSpec base. Inputs: alias or model types mapping to properties with values; Outputs: type checking result. Key parameters: property value types. Limitation: model can only be assignable if it cannot be extended with incompatible properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/type-relations.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n// Represent an object where all the values are int32.\\nalias T = Record<int32>;// Valid\\nalias S = {\\n  foo: 123;\\n  bar: 345;\\n};\\nalias S = {\\n  foo: int8;\\n  bar: int32;\\n};\\nmodel S is Record<int32>;\\nmodel S is Record<int32> {\\n  foo: 123;\\n}// Invalid\\nalias S = {\\n  foo: \\\"abc\\\";\\n  bar: 456;\\n};\\nalias S = {\\n  foo: int64;\\n  bar: int32;\\n};\\nmodel S {\\n  foo: 123;\\n  bar: 456;\\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Operations with Decorators Referencing Themselves - TypeSpec\nDESCRIPTION: This example shows a TypeSpec interface where an operation applies a decorator that references another operation within the same interface. Specifically, the @nextPageOperation decorator points to the getNextPage operation, which takes a pageLink argument and returns a paged result. Illustrates legal recursion/reference in operation decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-06-06.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\ninterface FooOperations {\n  @nextPageOperation(getNextPage) // allowed\n  getNextPage(pageLink: url): Page<Foo>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Operation with Spread Syntax for Multiple Parameters\nDESCRIPTION: This TypeSpec code defines an alias `MultipleRequestParameters` which aggregates various parameter types including path, header, required, and optional body properties. It then defines a PUT operation `spreadWithMultipleParameters` that utilizes the spread syntax (`...`) to include all parameters defined in the `MultipleRequestParameters` alias directly into the operation signature. The operation is expected to return `NoContentResponse`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/spread.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service(#{ title: \"Test Service\" })\nnamespace Test;\nalias MultipleRequestParameters = {\n  @path\n  id: string;\n\n  @header\n  `x-ms-test-header`: string;\n\n  /** required string */\n  requiredString: string;\n\n  /** optional int */\n  optionalInt?: int32;\n\n  /** required int */\n  requiredIntList: int32[];\n\n  /** optional string */\n  optionalStringList?: string[];\n};\n\n@put\nop spreadWithMultipleParameters(...MultipleRequestParameters): NoContentResponse;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Model Properties as XML Attributes - TypeSpec\nDESCRIPTION: Utilizes @Xml.attribute and @Xml.name to specify XML attributes and custom element names for model properties in TypeSpec. This enables precise mapping for attribute serialization. Inputs/outputs include integer, string, and attribute annotations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_33\n\nLANGUAGE: TypeSpec\nCODE:\n```\nmodel Book {\n  @Xml.attribute\n  id: integer;\n\n  @Xml.name(\"xml-title\")\n  title: string;\n\n  author: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auto Route with Standard Separator in TypeSpec\nDESCRIPTION: This TypeSpec example demonstrates defining an operation `get` that automatically routes to '/pets/{id}'. It uses the `@autoRoute` decorator for automatic route generation, `@segment(\\\"pets\\\")` to define a static segment 'pets', and `@path` to mark the `id` parameter as a path variable. The default segment separator '/' is implicitly used.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/cheat-sheet.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@autoRoute op get(@segment(\\\"pets\\\") @path id: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining the HeaderOptions Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.HeaderOptions` model. This model allows configuring options for HTTP headers, such as specifying the header `name` for transmission and controlling the serialization style (`explode`) based on RFC-6570.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.HeaderOptions\n```\n\n----------------------------------------\n\nTITLE: Identifying Event Payload with @data Decorator in TypeSpec - TypeSpec Language\nDESCRIPTION: This snippet illustrates marking a single field as the event payload using the @data decorator within an event union variant. It ensures only one field in a model can be designated as the payload. Dependencies are the @typespec/events library and the event union construct. Expected input is a union of event types, each possibly with a payload field; there must not be multiple @data fields per variant.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/events/README.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@events\nunion MixedEvents {\n  {\n    metadata: Record<string>,\n    @data payload: string,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Return Types with Unions in TypeSpec\nDESCRIPTION: This example shows how to specify multiple possible return types for an operation using a union (`|`). The `getDog` operation takes a `name` string and can return either a `Dog` model (presumably on success) or a `DogNotFound` model (on failure), indicating different outcomes. The `DogNotFound` model structure is also defined.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/operations.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nmodel DogNotFound {\n  error: \"Not Found\";\n}\n\nop getDog(name: string): Dog | DogNotFound;\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Driven Pagination with Custom Size/Offset in TypeSpec\nDESCRIPTION: Shows client-driven pagination allowing the client to specify both the number of items to skip (`@offset`) and the number of items per page (`@pageSize`). A default page size of 100 is provided if the client doesn't specify `perPage`. This offers more control to the client over the pagination.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/pagination.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@list op listPets(@offset skip?: int32, @pageSize perPage?: int32 = 100): {\n  @pageItems pets: Pet[];\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Resolving a TypeSpec Type Reference in the Type Graph - TypeSpec Compiler - TypeScript\nDESCRIPTION: Demonstrates how to resolve a type by string reference in a TypeSpec program using the 'resolveTypeReference' helper. Useful for obtaining type information by fully qualified name at runtime. Returns the corresponding Type or undefined with diagnostics on failure. Typical input: a TypeSpec-style reference string. Output: the resolved type or error diagnostics.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitters-basics.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nprogram.resolveTypeReference(reference: string): Type | undefined;\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Visibility Class Enum - TypeSpec Typespec\nDESCRIPTION: Defines a custom visibility class in TypeSpec using an enum, here called Lifecycle, which includes Create, Read, and Update. This enables these modifiers to be referenced by other decorators for controlling property visibility. Required by other code snippets which reference Lifecycle. Input: enum definition; Output: new visibility class available for visibility modifiers and filters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/visibility.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\nenum Lifecycle {\n  Create,\n  Read,\n  Update,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Operation Responses with Status Codes and Errors\nDESCRIPTION: Shows how to define operation return types in TypeSpec to generate OpenAPI responses. It covers default status codes (`read` returns 200, `delete` returns 204), explicit status codes using the `@statusCode` decorator (`create` returns 200 or 201), and mapping error types (like `Error`) to the `default` OpenAPI response (`update` returns 200 or default).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@get op read(@path id: string): Widget; // has \"200\" response\n@delete op delete(@path id: string): void; // has \"204\" response\n// has \"200\" and \"201\" response\n@put op create(@body widget: Widget): {\n  @statusCode _: \"200\" | \"201\";\n  @body body: Widget;\n};\n// has \"200\" and \"default\" response\n@post op update(@body widget: Widget): Widget | Error;\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting a Resource - TypeSpec - typespec\nDESCRIPTION: Defines an operation for deleting a resource, returning a ResourceDeletedResponse or Error. No input parameters are defined—resource context inferred from interface. Conforms to standard delete REST pattern.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_45\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceOperations.delete(): TypeSpec.Rest.Resource.ResourceDeletedResponse | Error\n```\n\n----------------------------------------\n\nTITLE: API Key Passed In Request Header (HTTP)\nDESCRIPTION: Provides an HTTP header example showing how to send an API key using a custom request header. This is referenced for ApiKeyAuth with the 'header' location.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nGET /something HTTP/1.1\\nX-API-Key: abcdef12345\n```\n\n----------------------------------------\n\nTITLE: Defining Generic and Derived Models with Templates in TypeSpec\nDESCRIPTION: Defines a generic model 'Page' parameterized with 'Item' and another model 'DogPage' instantiated using the generic model. Demonstrates how templates in TypeSpec enable reusable, type-specific data structures. No external dependencies are required; users must have a valid 'Dog' model definition elsewhere. Input: none, Output: compiled TypeSpec models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/templates.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Page<Item> {\n  size: int32;\n  item: Item[];\n}\n\nmodel DogPage {\n  ...Page<Dog>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation for Successful Returns in TypeSpec Operation\nDESCRIPTION: This snippet demonstrates applying the `@returnsDoc` decorator to an operation `get`. The documentation string \"Returns doc\" describes the successful return scenarios (e.g., returning a `Pet`), distinct from potential errors like `NotFound`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_55\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@returnsDoc(\"Returns doc\")\nop get(): Pet | NotFound;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Todo API with TypeSpec (TypeSpec, tsp)\nDESCRIPTION: This snippet demonstrates how to define a simple Todo API using the TypeSpec language. It imports HTTP support, defines routes and operations with HTTP verbs, models the Todo item data structure, and models the payload for creating a new item. Dependencies include TypeSpec itself, the @typespec/http library, and an emitter such as @typespec/openapi3. Key parameters include route definitions, interface operations, and model fields. The input is a TypeSpec definition file, and the output is a set of generated API artifacts (OpenAPI, server/client code, schemas) using emitters of choice. This serves as the canonical source of truth for API contract and is suitable for API-first workflows.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/blog/2025-03-31-typespec-1-0-release/typespec_1_0_release.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nimport \"@typespec/http\";\nusing Http;\n\n@route(\"/todoitems\")\ninterface TodoItems {\n  @get getTodoItems(): TodoItem[];\n  @post createTodoItem(@body body: CreateTodoItem): Http.CreatedResponse & TodoItem;\n}\n\nmodel TodoItem {\n  @visibility(Lifecycle.Read)\n  id: string;\n\n  content: string;\n  dueDate: utcDateTime;\n  isCompleted: boolean;\n  labels?: string[];\n}\n\nmodel CreateTodoItem {\n  content: string;\n  labels?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a String-Based Scalar (New Syntax) in TypeSpec\nDESCRIPTION: Illustrates the updated syntax for defining a type `MyStr` based on the intrinsic `string` type using `scalar MyStr extends string;`. This replaces the deprecated `model MyStr is string;` syntax following the introduction of the `scalar` keyword.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nscalar MyStr extends string;\n```\n\n----------------------------------------\n\nTITLE: Creating a Top-Level Namespace in TypeSpec\nDESCRIPTION: Illustrates the use of the 'namespace' keyword to define a top-level namespace named 'PetStore'. This serves as a container for organizing all related models and operations for the Pet Store API. The decorators defined previously apply to this namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/01-setup-basic-syntax.mdx#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp title=main.tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/openapi3\\\"]}\"\nimport \"@typespec/http\";\n\nusing Http;\n\n@service(#{ title: \"Pet Store\" })\n@server(\"https://example.com\", \"Single server endpoint\")\n\n// highlight-next-line\nnamespace PetStore;\n```\n```\n\n----------------------------------------\n\nTITLE: Using the @useDependency Decorator in TypeSpec (tsp)\nDESCRIPTION: Provides examples for the `@useDependency` decorator. The first example applies it to a non-versioned namespace `NonVersionedService` to indicate its dependency on `MyLib.Versions.v1_1`. The second example shows its use on individual enum members within a versioned namespace `MyService1` to map specific service versions (`v1`, `v2`, `v3`) to corresponding library versions (`MyLib.Versions.v1_1`, `MyLib.Versions.v2`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_13\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@useDependency(MyLib.Versions.v1_1)\nnamespace NonVersionedService;\n```\n```\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@versioned(Versions)\nnamespace MyService1;\nenum Version {\n  @useDependency(MyLib.Versions.v1_1) // V1 use lib v1_1\n  v1,\n  @useDependency(MyLib.Versions.v1_1) // V2 use lib v1_1\n  v2,\n  @useDependency(MyLib.Versions.v2) // V3 use lib v2\n  v3,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing a Namespaced Tracer for a TypeSpec Library (TypeScript)\nDESCRIPTION: Creates a sub-tracer prefixed with the library name via the sub() method on the program's tracer. This helps library authors avoid naming collisions in the tracing system. Assumes TypeSpec program context is already available and that tracing integration is desired in a custom library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/tracing.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst tracer = program.tracer.sub(\"my-library\");\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec Project with Mocks and SwaggerUI - Bash\nDESCRIPTION: This Bash script demonstrates how to invoke TypeSpec's compiler to generate a new ASP.Net Core project, complete with mock business logic implementations and SwaggerUI support. The command uses multiple emitters (http-server-csharp and openapi3) and options to control the output (such as enabling SwaggerUI and forcing overwrites of mocks/project files). Prerequisites: 'tsp' standalone compiler and a valid TypeSpec specification in the current directory. Input is the current directory (.), output is a new or updated project with mocks and configuration. Overwrites changes unless the '--overwrite' flag is omitted.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-csharp/project.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit @typespec/http-server-csharp --emit @typespec/openapi3 --option @typespec/http-server-csharp.emit-mocks=emit-mocks-and-project-files --option @typespec/http-server-csharp.use-swaggerui=true --option @typespec/http-server-csharp.overwrite=true\n```\n\n----------------------------------------\n\nTITLE: Getting a Resource Instance - TypeSpec - typespec\nDESCRIPTION: Defines an operation for retrieving a specific resource instance. Accepts no explicit parameters as selection is typically contextual; returns either the requested Resource or an Error if not found or inaccessible. Relies on prior definitions of the Resource type and error schema.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_37\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceInstanceOperations.get(): Resource | Error\n```\n\n----------------------------------------\n\nTITLE: Defining ApiKeyAuth Model in TypeSpec\nDESCRIPTION: Defines the generic `TypeSpec.Http.ApiKeyAuth` model for API key authentication. It takes template parameters `Location` (specifying where the key is sent: query, header, or cookie) and `Name` (the name of the key parameter/header/cookie). It includes properties `type` set to `TypeSpec.Http.AuthType.apiKey`, `in` set to the provided `Location`, and `name` set to the provided `Name`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.ApiKeyAuth<Location, Name>\n```\n\n----------------------------------------\n\nTITLE: Defining Operations Interface for Resources - TypeSpec - typespec\nDESCRIPTION: Defines a reusable TypeSpec interface pattern for organizing general resource operations, including get, update, delete, create, and list functionality. Templated for any Resource and Error type, offering a customizable contract for resource implementations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_42\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ResourceOperations<Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Declaring Resource Models with a Collection Name - TypeSpec\nDESCRIPTION: Uses the @resource decorator to mark a model as representing a REST resource collection. The required parameter assigns a collection name used in generated routes and documentation. Attach this only to resource models, and ensure a unique collection name for each resource type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.resource(collectionName: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Referencing Enum Members using Dot Operator in TypeSpec\nDESCRIPTION: Explains how to reference a specific member of an enum when the member is an identifier (like `North` in the `Direction` enum). The dot (`.`) operator is used for this purpose. This example uses an `alias` to give the referenced member (`Direction.North`) a new name (`North`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/enums.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nalias North = Direction.North;\n```\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters with path Decorator - TypeSpec (typespec)\nDESCRIPTION: Applies @TypeSpec.Http.path to specify a property or parameter should be interpolated into the request URI as a path segment. Can accept a specific parameter name or options to override defaults. Enables strongly-typed route parameter definitions within operations, assisting with route generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.path(paramNameOrOptions?: valueof string | TypeSpec.Http.PathOptions)\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/read/{explicit}/things/{implicit}\")\nop read(@path explicit: string, implicit: string): void;\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code with TypeSpec CLI (C# Context)\nDESCRIPTION: This Bash command (`tsp compile`) triggers the TypeSpec compiler to process the `main.tsp` file and invoke the configured C# client emitter, generating the C# client code in the specified output directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile {path to main.tsp}/main.tsp\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Record Model in TypeSpec\nDESCRIPTION: Demonstrates the basic syntax for defining a record model in TypeSpec. This example defines a `Dog` model with two properties: `name` of type `string` and `age` of type `uint8`. Properties are ordered as defined in the source.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Dog {\n  name: string;\n  age: uint8;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PasswordFlow Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.PasswordFlow` model representing the OAuth 2.0 Resource Owner Password Credentials Grant flow. It includes properties for `type` (fixed to `TypeSpec.Http.OAuth2FlowType.password`), `tokenUrl` (the URL to obtain the access token), an optional `refreshUrl` (URL to obtain refresh tokens), and an optional `scopes` array listing the required scopes for this flow.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_32\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.Http.PasswordFlow\n```\n```\n\n----------------------------------------\n\nTITLE: Enforcing Optional Template Parameter Ordering in TypeSpec\nDESCRIPTION: Demonstrates ordering constraint: required template arguments cannot follow optional ones. The snippet marks an invalid function signature where a required 'U' comes after optional 'T'. This example clarifies template syntax rules and common errors. Input: none; Output: compiler error indicating improper argument order.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/templates.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n// Invalid\nalias Foo<T extends string = \"Abc\", U> = ...;\n                                    ^ Required template arguments must not follow optional template arguments\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Pagination in TypeSpec\nDESCRIPTION: This snippet shows the fundamental structure for defining a paginated operation in TypeSpec. It uses the `@list` decorator on the operation and the `@pageItems` decorator on the property within the return type that holds the collection of items for the current page. This sets up the operation to be recognized as supporting pagination.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/pagination.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@list op listPets(): {\n  @pageItems pets: Pet[];\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Updating an Extension Resource - Update Interface - TypeSpec - typespec\nDESCRIPTION: Defines the update operation for ExtensionResourceUpdate, performing updates using ResourceCreateOrUpdateModel<Resource> to set new resource properties. Returns the modified Extension object or Error. Relies on proper model definitions to enforce update contract.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_24\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceUpdate.update(properties: TypeSpec.Rest.Resource.ResourceCreateOrUpdateModel<Resource>): Extension | Error\n```\n\n----------------------------------------\n\nTITLE: Example: Complete Operation Example Annotation for Create Operation in TypeSpec\nDESCRIPTION: Decorates an operation for creating a pet with an example showing the parameters and the return value. Useful for API documentation, testing, and illustration purposes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_41\n\nLANGUAGE: tsp\nCODE:\n```\n@opExample(#{parameters: #{name: \"Fluffy\", age: 2}, returnType: #{name: \"Fluffy\", age: 2, id: \"abc\"})\nop createPet(pet: Pet): Pet;\n```\n\n----------------------------------------\n\nTITLE: Serializing Property as XML Attribute with @attribute Decorator (TSP & XML)\nDESCRIPTION: These snippets demonstrate how applying the @attribute decorator to a property in a TypeSpec model causes that property to be serialized as an XML attribute instead of a node. The model applies @attribute to 'id'. The output shows the property as an attribute in the resulting XML. No required dependencies beyond TypeSpec XML decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Blob {\n  @attribute id: string;\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Blob id=\\\"abcdef\\\">\\n</Blob>\n```\n\n----------------------------------------\n\nTITLE: Listing All Extension Resources (Collection) - TypeSpec - typespec\nDESCRIPTION: Defines the list operation for ExtensionResourceList interfaces, fetching a paginated collection of resources or an Error. Supports discovery of all extension resource instances and relies on appropriate models for result paging.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceList.list(): TypeSpec.Rest.Resource.CollectionWithNextLink<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Adding a New Operation in a Later API Version (v2) in TypeSpec\nDESCRIPTION: This snippet demonstrates adding a new operation (`get`) to version `v2` of the API. The `@added(Versions.v2)` decorator marks the `get` operation as being introduced in `v2`. The `Versions` enum is updated to include `v2`, and the existing `Widget` model and `list` operation are implicitly carried over.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/guide.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nenum Versions {\n  v1,\n  v2,\n}\n\nmodel Widget {\n  @key\n  id: string;\n\n  name: string;\n}\n\n@route(\"/widget\")\nop list(): Widget[] | Error;\n\n@added(Versions.v2)\n@route(\"/widget/{id}\")\nop get(...Resource.KeysOf<Widget>): Widget | Error;\n```\n\n----------------------------------------\n\nTITLE: Defining UTC DateTime Scalar in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Declares `utcDateTime` as a scalar that stores datetimes in Coordinated Universal Time. Used for timestamping fields where universality is required and timezones are explicitly UTC.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_55\n\nLANGUAGE: typespec\nCODE:\n```\nscalar utcDateTime\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphism with a String Discriminator in TypeSpec\nDESCRIPTION: This snippet shows how to implement polymorphism (model inheritance) using a string discriminator in TypeSpec. The `@discriminator` decorator is applied to the base model `Pet`, specifying `\"kind\"` as the discriminator property. Derived models `Cat` and `Dog` extend `Pet` and define their specific `kind` value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/discriminated-types.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@discriminator(\"kind\")\nmodel Pet {\n  name: string;\n  weight?: float32;\n}\nmodel Cat extends Pet {\n  kind: \"cat\";\n  meow: int32;\n}\nmodel Dog extends Pet {\n  kind: \"dog\";\n  bark: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Create REST Resource Operations in TypeSpec (Typespec)\nDESCRIPTION: This decorator designates an operation as a create endpoint for a given resource type. It is applied to operations, requiring the model representing the resource. Signals that the operation is responsible for resource creation only.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.createsResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Patching Non-Null Nullable Duration Properties - JSON\nDESCRIPTION: Shows the structure for a PATCH request where a nullable duration property is given a concrete ISO8601 duration. The JSON includes both required and nullable properties, ensuring clients correctly serialize and send such values. Duration strings must be valid according to ISO8601 ('P123DT22H14M12.011S').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_255\n\nLANGUAGE: json\nCODE:\n```\n{ \"requiredProperty\": \"foo\", \"nullableProperty\": P123DT22H14M12.011S}\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Template with a Value and typeof in TypeSpec\nDESCRIPTION: Demonstrates how template argument typing is determined by the supplied value, showcasing use of 'typeof' and 'const' in TypeSpec. 'TakesValue' is instantiated with a constant, and the property type reflects the union of possible values. No external dependencies. Input: constant; Output: alias with a property type inferred from the constant's type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/templates.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\nalias TakesValue<StringValue extends valueof string> = {\n  @doc(StringValue)\n  property: typeof StringValue;\n};\n\nconst str: \"a\" | \"b\" = \"a\";\nalias M1 = TakesValue<str>;\n```\n\n----------------------------------------\n\nTITLE: Updating Extension Resource - Unified Operations - TypeSpec - typespec\nDESCRIPTION: Defines the update operation on ExtensionResourceOperations, allowing resource modification using the ResourceCreateOrUpdateModel<Resource> input. The operation yields the updated Extension object or Error. Depends on update model structures for property input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceOperations.update(properties: TypeSpec.Rest.Resource.ResourceCreateOrUpdateModel<Resource>): Extension | Error\n```\n\n----------------------------------------\n\nTITLE: Defining Tag Metadata Model with TypeSpec - Typespec\nDESCRIPTION: This snippet introduces the TagMetadata model within the TypeSpec.OpenAPI namespace, designed to encapsulate metadata for OpenAPI tags. It references the ExternalDocs model for incorporating external documentation and provides for an optional description. This model is dependency-linked to the ExternalDocs model and intended for expanding OpenAPI operation tagging semantics.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/reference/data-types.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.OpenAPI.TagMetadata\n```\n\n----------------------------------------\n\nTITLE: Overriding `filename` Location in Custom `Http.File` Models in TypeSpec\nDESCRIPTION: Demonstrates how to create a custom `Http.File` model (`OpenAPIFile`) where the `filename` property's location is overridden using the `@path` decorator. This allows sending the filename as part of the URL path for requests (e.g., uploads), while it defaults to `Content-Disposition` for responses. Includes an interface example using this custom model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel OpenAPIFile extends File<\"application/json\" | \"application/yaml\"> {\n  @path filename: string;\n}\n\n@route(\"/specs\")\ninterface Specs {\n  upload(@bodyRoot file: OpenAPIFile): void;\n\n  download(@path name: string): OpenAPIFile;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enforcing Numeric Multiples in JSON Schema with TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.multipleOf` decorator specifies that a numeric type (or model property of numeric type) must be a multiple of a given numeric value. This constraint (`multipleOf`) is added to the generated JSON Schema. It takes a `numeric` type `value` parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.multipleOf(value: valueof numeric)\n```\n\n----------------------------------------\n\nTITLE: Specifying Array Content Requirements with @contains in TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.contains` decorator specifies that an array must contain at least one instance of a given type when generating JSON Schema. It applies to array types (`unknown[]`) or model properties representing arrays. The `value` parameter defines the required type. Use `@minContains` and `@maxContains` for more specific counts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.contains(value: unknown)\n```\n\n----------------------------------------\n\nTITLE: Defining Create Operation and Model in Microsoft TypeSpec (tsp)\nDESCRIPTION: Defines a REST service named 'Test' with a 'Widget' model and an explicit POST operation 'create'. The operation uses the @body decorator to require a Widget instance as the request body and supports an optional 'foo' header parameter. Intended for code generation or integration into a typed API surface. Prerequisites include Microsoft TypeSpec tooling; inputs are Widget objects and, optionally, a string header. Outputs are void unless errors occur.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/with_body_property.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n\nmodel Widget {\n  id: string;\n  name: string;\n  age?: string;\n}\n\n@post op create(@body widget: Widget, @header foo?: string): void;\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Interface for Derived TRex Model\nDESCRIPTION: This TypeScript code presents the generated interface `TRex`, which extends the base `Dinosaur` interface. It refines the `kind` property to the specific literal type `\"t-rex\"`, representing the derived type in the discriminated union.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/inheritance_discriminator.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/models/models.ts interface TRex\nexport interface TRex extends Dinosaur {\n  kind: \"t-rex\";\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Aliasing Template Instantiations with the 'is' Keyword in TypeSpec\nDESCRIPTION: Shows how the `is` keyword creates a new model (`StringThing`) that is an exact copy of a template instantiation (`Thing<string>`). It copies both properties and decorators (`@decorator`) from the source but does not establish a nominal inheritance relationship. This is useful for giving meaningful names to specific template specializations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n@decorator\nmodel Thing<T> {\n  property: T;\n}\n\nmodel StringThing is Thing<string>;\n\n// The StringThing declaration is equivalent to the following declaration:\n@decorator\nmodel StringThing {\n  property: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the HttpPartOptions Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.HttpPartOptions` model. It provides options for configuring an `HttpPart`, specifically allowing the definition of the part's `name` when it's used within an array structure in multipart content.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_20\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.HttpPartOptions\n```\n\n----------------------------------------\n\nTITLE: Defining Dictionary Property on Widget Interface in TypeScript\nDESCRIPTION: Represents the Widget model as a TypeScript interface, where the 'prop' field is a dictionary using Record<string, number>. This mirrors the KeyType:ValueType mapping of the TypeSpec model, assuming string keys and number values. Intended for use with generated API clients. Requires TypeScript; expects generated fields to align with the TypeSpec schema.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/dictionary-properties.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Widget {\\n  prop: Record<string, number>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Route Syntax from @autoRoute - Text\nDESCRIPTION: Shows the concrete HTTP route pattern that results from applying @autoRoute to parameterized operations in TypeSpec. This textual snippet illustrates how decorated parameters translate to RESTful path segments for both 'getUser' and 'updateUser' operations. No code or dependencies; output only.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/resource-routing.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n/tenants/{tenantId}/users/{userName}\n```\n\n----------------------------------------\n\nTITLE: Generated OpenAPIv3 Schemas Reflecting TypeSpec Lifecycle Visibility\nDESCRIPTION: This YAML snippet shows the OpenAPIv3 specification generated from the previous TypeSpec `Example` model and `Examples` interface. It illustrates how TypeSpec's lifecycle visibility translates into OpenAPI: the `id` property is `readOnly: true` (only `Lifecycle.Read`), a separate `ExampleUpdate` schema is generated for the PATCH operation containing only the `description` property (implicitly `Lifecycle.Update`), and operation request/response bodies reference the appropriate schema (`Example` or `ExampleUpdate`) based on the operation's implicit lifecycle phase.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/visibility.md#_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\n```yml\npaths:\n  /example:\n    post:\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Example\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Example\"\n  /example/{id}:\n    get:\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Example\"\n    patch:\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Example\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExampleUpdate\"\ncomponents:\n  schemas:\n    Example:\n      type: object\n      required:\n        - id\n        - name\n        - description\n      properties:\n        id:\n          type: string\n          readOnly: true\n        name:\n          type: string\n        description:\n          type: string\n    ExampleUpdate:\n      type: object\n      properties:\n        description:\n          type: string\n```\n```\n\n----------------------------------------\n\nTITLE: Describing Resource Deletion Response - TypeSpec REST - typespec\nDESCRIPTION: Declares a fixed-response model TypeSpec.Rest.Resource.ResourceDeletedResponse used to indicate successful deletion of a resource (HTTP 200). Contains a single underscore ('_') property representing the HTTP status code. No generic parameters or payloads.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/data-types.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Rest.Resource.ResourceDeletedResponse\n```\n\n----------------------------------------\n\nTITLE: Scalar Constructors and Model Default Values - TypeSpec Language\nDESCRIPTION: Demonstrates defining a scalar type with a custom initialization method and using it as the default value for a model property in TypeSpec. The 'utcDateTime' scalar uses an 'init fromISO' constructor, and the 'DateRange' model assigns a default value via this constructor. This enables strict, type-safe date/time assignment. Requires no dependencies beyond the TypeSpec core.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_12\n\nLANGUAGE: tsp\nCODE:\n```\nscalar utcDateTime {\n  init fromISO(value: string);\n}\n\nmodel DateRange {\n  minDate: utcDateTime = utcDateTime.fromISO(\"2024-02-15T18:36:03Z\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Link Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.Link` model. This model is used to represent a hyperlink, typically found in response headers or bodies (e.g., HATEOAS). It includes the link `target` (URL), the relationship type (`rel`), and optional `attributes`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_22\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.Link\n```\n\n----------------------------------------\n\nTITLE: Defining Date Header Parameter with Explicit RFC3339 Encoding - TypeSpec\nDESCRIPTION: Specifies an operation that expects a Date header encoded as RFC3339 using @encode(DateTimeKnownEncoding.rfc3339). The header parameter value is required and is of type utcDateTime. This definition ensures serialization format adherence in generated API clients and services.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_date.md#_snippet_4\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service\\nnamespace Test;\\n\\n@route(\"/default\")\\nop get(\\n  @header\\n  @encode(DateTimeKnownEncoding.rfc3339)\\n  value: utcDateTime,\\n): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Contextual Interpretation of Scalar Literals in TypeSpec Decorators\nDESCRIPTION: This snippet demonstrates how a numeric literal (`123`) is interpreted differently based on the context provided by decorator parameters. When the parameter expects a value (`valueof numeric`), the literal becomes a scalar value. When it expects a type (`numeric`), it becomes a literal type. In ambiguous contexts (`numeric | valueof numeric`), it defaults to a scalar value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n// Sample decorator signatures. They have no backing implementation and shown here for demonstration purposes.\nextern dec setNumberValue(target: unknown, color: valueof numeric);\nextern dec setNumberType(target: unknown, color: numeric);\nextern dec setNumberTypeOrValue(target: unknown, color: numeric | (valueof numeric));\n\n@setNumberValue(123) // Passes the scalar value `numeric(123)`.\n@setNumberType(123) // Passes the numeric literal type 123.\n@setNumberTypeOrValue(123) // passes the scalar value `numeric(123)`.\nmodel A {}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Events as Peer Dependency - Bash\nDESCRIPTION: This bash command installs @typespec/events as a peer dependency using the --save-peer npm flag, suitable for library development scenarios. Peer dependencies ensure that the consuming project provides and manages the package version, preventing conflicts between package consumers and maintainers. This is recommended when publishing your own TypeSpec libraries.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/events/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/events\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Emitter Package Details in tspconfig.yaml\nDESCRIPTION: This YAML snippet demonstrates how to configure the `packageDetails` option for the JavaScript client emitter (`@typespec/http-client-js`) within the `tspconfig.yaml` file. These details, such as package name and version, are used to populate metadata in the generated `package.json` and `README.md` files.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npackageDetails:\n  name: \"${your_package_name}\"\n  version: 1.0.0\n```\n\n----------------------------------------\n\nTITLE: TypeScript RequestBody Interface for Multiple File Upload\nDESCRIPTION: This TypeScript interface represents a request body containing a files property, which is an array of File. It mirrors the structure described in the TypeSpec model for operations that require multiple file uploads. Each item in the files array is submitted as a separate multipart part in the HTTP request.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RequestBody {\\n  files: Array<File>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enums with Unions of Literal Values in TypeSpec\nDESCRIPTION: This example models a property as an enum via a union of literal string values in a TypeSpec model. This results in an OpenAPI enum schema for the property, constraining it to only the specified literal values. Useful for lightweight enumerations within models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Settings {\n  // `status` can be any of the following strings.\n  status: \"Running\" | \"Stopped\" | \"Failed\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Extending Scalars with Decorators - TypeSpec (tsp)\nDESCRIPTION: This snippet demonstrates how to define a scalar type in TypeSpec, extend it from another known scalar, and apply decorators such as minValue. It shows both direct extension from a built-in scalar (`int32`) and chaining of scalar extensions with decorator overrides. Requires TypeSpec language features, with no additional dependencies. The key parameters are scalar names and `minValue` arguments; outputs are new scalar definitions whose base mapping and decorator values are used by emitters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitters-basics.md#_snippet_10\n\nLANGUAGE: tsp\nCODE:\n```\n@minValue(10)\nscalar myInt32 extends int32;\n\n@minValue(20)\nscalar specializedInt32 extends myInt32;\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Operations with Multiple Response Content Types\nDESCRIPTION: Shows how to define a TypeSpec operation (`read`) that can return different response schemas based on the `Content-Type`. This is achieved using a union return type. The operation can return a `Widget` (defaults to application/json), a string body with `text/html` content type, or a bytes body with `image/jpeg` content type. Each distinct response type is defined with its specific `@header contentType` and `@body`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_16\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@tag(\"Response Content\")\n@route(\"/response-content\")\nnamespace ResponseContent {\n  @get op read(@path id: string): Widget | {\n    @header contentType: \"text/html\";\n    @body _: string;\n  } | {\n    @header contentType: \"image/jpeg\";\n    @body _: bytes;\n  };\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate Metadata Properties in Nested Models - TypeSpec - typespec\nDESCRIPTION: This snippet illustrates how TypeSpec prioritizes the least nested header metadata property when duplicates exist. By annotating example at different nesting levels within the headers property of the Thing model, the design demonstrates that only the shallowest instance is retained for HTTP header mapping. There are no external dependencies; this uses TypeSpec's schema resolution rules. Inputs are hierarchical models; outputs are HTTP envelopes or payloads with deduplicated metadata.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_19\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Thing {\n  headers: {\n    @header example: string; // preferred\n    more: {\n      @header example: string; // ignored\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Discriminated Types with Inheritance in TypeSpec\nDESCRIPTION: This TypeSpec code defines a base model `Dinosaur` using the `@discriminator` decorator with 'kind' as the discriminator property. A derived model `TRex` extends `Dinosaur` and specifies its 'kind' value. An operation `getLegacyModel` is defined to return the base `Dinosaur` type, demonstrating how discriminated types can be used in API operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/inheritance_discriminator.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\n@doc(\"Define a base class in the legacy way. Discriminator property is not explicitly defined in the model.\")\n@discriminator(\"kind\")\nmodel Dinosaur {\n  size: int32;\n}\n\n@doc(\"The second level legacy model in polymorphic single level inheritance.\")\nmodel TRex extends Dinosaur {\n  kind: \"t-rex\";\n}\n\n@get\nop getLegacyModel(): Dinosaur;\n```\n```\n\n----------------------------------------\n\nTITLE: Determining Property Optionality with MetadataInfo in TypeSpec Emitters (JavaScript)\nDESCRIPTION: Checks if a model property should be considered optional for a specific `Visibility` context. This behavior differs from the base `ModelProperty.isOptional` check, notably when the `Visibility` is `Update`, in which case all properties are treated as optional regardless of their schema definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-metadata-handling.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nMetadataInfo.isOptional(ModelProperty, Visibility): boolean\n```\n\n----------------------------------------\n\nTITLE: Updating @info Decorator Usage - TypeSpec TSP (Diff)\nDESCRIPTION: Illustrates the migration for the @info decorator, changing from object syntax to value syntax for both simple and nested argument forms. This ensures users of TypeSpec 0.66+ adopt the new signature and avoid deprecated behavior.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-04.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n-@info({ version: \"1.0.0\" })\n+@info(#{ version: \"1.0.0\" })\n```\n\nLANGUAGE: diff\nCODE:\n```\n-@info({\n+@info(#{\n  termsOfService: \"http://example.com/terms/\",\n-  contact: {\n+  contact: #{\n      name: \"API Support\",\n      url: \"http://www.example.com/support\",\n      email: \"support@example.com\"\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying oneOf Constraint with TypeSpec JSON Schema Decorator\nDESCRIPTION: This TypeSpec decorator, `@TypeSpec.JsonSchema.oneOf`, instructs the compiler to use the `oneOf` keyword instead of the default `anyOf` in the generated JSON Schema for the targeted `Union` or `ModelProperty`. This ensures that only one of the union's options is valid for a given instance. It targets `Union` or `ModelProperty` types and takes no parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.JsonSchema.oneOf\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple GET Operation in TypeSpec\nDESCRIPTION: This TypeSpec code defines a service named `Test` containing a single GET operation called `get`. The operation requires no input parameters and is expected to return a 32-bit integer (`int32`). It uses the `@service` and `@get` decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/no_parameters.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n\n@get op get(): int32;\n```\n\n----------------------------------------\n\nTITLE: Implementing a TypeScript Client 'get' Operation for TypeSpec API\nDESCRIPTION: Implements the 'get' operation in TypeScript, integrating an options bag to selectively override the 'content-type' header when making HTTP GET requests. Depends on the existence of the TestClientContext, parse, client.pathUnchecked, and createRestError utilities. Accepts an options parameter for additional operation customization (notably the content-type), returns a number if response confirms the expected content type, and throws an error otherwise.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/constant_as_optional.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function get(client: TestClientContext, options?: GetOptions): Promise<number> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      \"content-type\": options?.contentType ?? \"application/json\",\n    },\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return response.body!;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Decorators Directly in TypeSpec\nDESCRIPTION: Demonstrates applying the `@tag` decorator to a `Dog` model and the `@validate` decorator with an argument to its `name` property. Decorators are placed directly before the element they modify and can accept arguments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@tag(\"Sample\")\nmodel Dog {\n  @validate(false)\n  name: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart File Upload in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines an operation for handling file uploads using multipart/form-data. The RequestBody model includes a basicFile property of type HttpPart<File>, representing a single file part. The doThing operation uses a header for specifying the content type and binds the model as a multipart body. This model is the basis for generating client and server code for single file upload scenarios.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\\n\\nmodel RequestBody {\\n  basicFile: HttpPart<File>;\\n}\\n\\nop doThing(@header contentType: \\\"multipart/form-data\\\", @multipartBody bodyParam: RequestBody): void;\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameterized Service Endpoint - Typespec\nDESCRIPTION: Defines a server endpoint with path parameterization, allowing dynamic substitution in the endpoint URL. The parameters object provides a definition for 'region', including a docstring and default value. Inputs include the endpoint template and a parameters configuration object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\n@server(\"https://{region}.foo.com\", \"Regional endpoint\", {\n  @doc(\"Region name\")\n  region?: string = \"westus\",\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Service Operation with Enum Body Parameters - TypeSpec\nDESCRIPTION: Declares a TypeSpec API contract for a service with a model containing enum-type properties. The 'EnumsOnlyCases' model uses two enums (LR and UD) and is used as the input to the 'send' operation. Defines explicit constraints for expected enum variants in property comments, facilitating strong type validation and code generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/union_body.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n# Should emit an operation that has body property parameter\\n\\n@service\\nnamespace Test;\\n\\nenum LR {\\n  left,\\n  right,\\n}\\nenum UD {\\n  up,\\n  down,\\n}\\n\\nmodel EnumsOnlyCases {\\n  /** This should be receive/send the left variant */\\n  lr: LR | UD;\\n\\n  /** This should be receive/send the up variant */\\n  ud: UD | UD;\\n}\\n\\n@post op send(prop: EnumsOnlyCases): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Resource Create Operation Interface - TypeSpec - typespec\nDESCRIPTION: Defines the TypeSpec.Rest.Resource.ExtensionResourceCreate interface template, parameterized for Extension, Resource, and Error types. This organizes single-operation templates for creating extension resources, establishing a typing pattern for downstream use. Relies on appropriately structured Extension, Resource, and Error models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ExtensionResourceCreate<Extension, Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service Interface Using HttpContext in TypeScript\nDESCRIPTION: Shows how to implement a generated service interface, specifying HttpContext as the type for context argument. Imports helper types and the interface from output modules. The implementation provides an async function for the 'create' method, which processes incoming user operations. Expects TypeScript environment, correct model imports, and proper structure for context and model parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-js/project.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { HttpContext } from \"../tsp-output/@typespec/http-server-js/helpers/router.js\";\nimport { Users } from \"../tsp-output/@typespec/http-server-js/models/all/todo/index.js\";\n\nexport const users: Users<HttpContext> = {\n  async create(ctx, user) {\n    // Implementation\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: HTTP Example: Next Link Pagination with Additional Parameters\nDESCRIPTION: Illustrates the HTTP request/response flow for next link pagination with additional parameters (filter and header). The first request includes the filter and header. The response contains items and a `nextLink` that incorporates the filter, page, and perPage parameters. The second request uses this `nextLink` URL and resends the header parameter, demonstrating that query parameters are embedded in the link while headers need to be resent.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/pagination.md#_snippet_8\n\nLANGUAGE: http\nCODE:\n```\n```http\n// First request\nGET /pets?filter=dog\nSpecial-Header: x-special-value\n\n{\"pets\": [...], \"nextLink\": \"/pets?filter=dog&page=2&perPage=100\"}\n\n---\n// Second request\nGET /pets?filter=dog&page=2&perPage=100\nSpecial-Header: x-special-value\n\n{\"pets\": [...], \"nextLink\": \"/pets?filter=dog&page=3&perPage=100\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticated Operations and Errors in TypeSpec - TypeSpec (tsp)\nDESCRIPTION: This TypeSpec file defines a Pet Store REST API with several operations, including create, update, and delete, which are protected with Bearer token authentication via the @useAuth(BearerAuth) decorator. It introduces error models such as UnauthorizedError and incorporates common parameters through the CommonParameters model. Outputs include multiple HTTP status codes based on operation results, and the Bearer authentication requirements are enforced and modeled at the operation level. Dependencies: TypeSpec libraries (notably @typespec/http), correct project configuration for code generation. Inputs include pet objects and identifiers; outputs cover standard and error responses for the Pet operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/05-authentication.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nimport \"@typespec/http\";\n\nusing Http;\n\n@service(#{ title: \"Pet Store\" })\n@server(\"https://example.com\", \"Single server endpoint\")\nnamespace PetStore;\n\nmodel Pet {\n  id: int32;\n\n  @minLength(1)\n  name: string;\n\n  @minValue(0)\n  @maxValue(100)\n  age: int32;\n\n  kind: petType;\n}\n\nenum petType {\n  dog: \"dog\",\n  cat: \"cat\",\n  fish: \"fish\",\n  bird: \"bird\",\n  reptile: \"reptile\",\n}\n\nmodel CommonParameters {\n  @header\n  requestID: string;\n\n  @query\n  locale?: string;\n\n  @header\n  clientVersion?: string;\n}\n\n@route(\"/pets\")\nnamespace Pets {\n  @get\n  op listPets(...CommonParameters): {\n    @statusCode statusCode: 200;\n    @body pets: Pet[];\n  };\n\n  @get\n  op getPet(@path petId: int32, ...CommonParameters): {\n    @statusCode statusCode: 200;\n    @body pet: Pet;\n  } | {\n    @statusCode statusCode: 404;\n    @body error: NotFoundError;\n  };\n\n  @post\n  // highlight-next-line\n  @useAuth(BearerAuth)\n  op createPet(@body pet: Pet, ...CommonParameters):\n    | {\n        @statusCode statusCode: 201;\n        @body newPet: Pet;\n      }\n    | {\n        @statusCode statusCode: 202;\n        @body acceptedPet: Pet;\n      }\n    | {\n        @statusCode statusCode: 400;\n        @body error: ValidationError;\n        // highlight-start\n      }\n    | {\n        @statusCode statusCode: 401;\n        @body error: UnauthorizedError;\n        // highlight-end\n      };\n\n  @put\n  // highlight-next-line\n  @useAuth(BearerAuth)\n  op updatePet(@path petId: int32, @body pet: Pet, ...CommonParameters):\n    | {\n        @statusCode statusCode: 200;\n        @body updatedPet: Pet;\n      }\n    | {\n        @statusCode statusCode: 400;\n        @body error: ValidationError;\n      }\n    | {\n        // highlight-start\n        @statusCode statusCode: 401;\n\n        @body error: UnauthorizedError;\n        // highlight-end\n      }\n    | {\n        @statusCode statusCode: 404;\n        @body error: NotFoundError;\n      }\n    | {\n        @statusCode statusCode: 500;\n        @body error: InternalServerError;\n      };\n\n  @delete\n  // highlight-next-line\n  @useAuth(BearerAuth)\n  op deletePet(@path petId: int32, ...CommonParameters): {\n    @statusCode statusCode: 204;\n    // highlight-start\n  } | {\n    @statusCode statusCode: 401;\n    @body error: UnauthorizedError;\n    // highlight-end\n  };\n}\n\n@error\nmodel NotFoundError {\n  code: \"NOT_FOUND\";\n  message: string;\n}\n\n@error\nmodel ValidationError {\n  code: \"VALIDATION_ERROR\";\n  message: string;\n  details: string[];\n}\n\n// highlight-start\n@error\nmodel UnauthorizedError {\n  code: \"UNAUTHORIZED\";\n  message: string;\n}\n// highlight-end\n\n@error\nmodel InternalServerError {\n  code: \"INTERNAL_SERVER_ERROR\";\n  message: string;\n}\n\nmodel InternalServerErrorResponse {\n  @statusCode statusCode: 500;\n  @body error: InternalServerError;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec OpenAPI3 Package via npm (bash)\nDESCRIPTION: Installs the @typespec/openapi3 package using npm directly within a specification project. This command adds the package as a direct dependency, making the OpenAPI3 emitter functionality available in TypeSpec-based API spec projects. Run this command in a terminal in your project's root directory. The expected input is the npm install command, and the output will be an updated node_modules directory containing @typespec/openapi3. Requires Node.js and npm installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/openapi3\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Driven Pagination with Custom Size/Index in TypeSpec\nDESCRIPTION: Illustrates client-driven pagination using a page index (`@pageIndex`) and a custom page size (`@pageSize`). Default values are provided for both parameters (page 1, 100 items per page). This is an alternative client-driven approach compared to using offset.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/pagination.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@list op listPets(@pageIndex page?: int32 = 1, @pageSize perPage?: int32 = 100): {\n  @pageItems pets: Pet[];\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a GET Operation in TypeSpec\nDESCRIPTION: Uses the `@get` decorator to define an operation named `read` that corresponds to an HTTP GET request. The operation currently takes no parameters and returns `void`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@get op read(): void\n```\n\n----------------------------------------\n\nTITLE: Expressing Polymorphism Using Union Types (anyOf) - TypeSpec\nDESCRIPTION: Defines a union 'Pet' comprised of 'Cat' and 'Dog' members. This pattern represents a schema using OpenAPI's anyOf keyword, allowing input or output values matching any of the listed types. Inputs: TypeSpec unions. Outputs: schemas with anyOf type union (not requiring mutual exclusiveness).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_29\n\nLANGUAGE: typespec\nCODE:\n```\nunion Pet {\n  cat: Cat,\n  dog: Dog,\n}\n\nmodel Cat {\n  meow?: int32;\n}\n\nmodel Dog {\n  bark?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling Logical User Entity for REST Operations - TypeSpec - typespec\nDESCRIPTION: This snippet demonstrates defining a logical User model in TypeSpec, using visibility annotations to control which properties appear in HTTP requests versus responses. It highlights how to use decorators like @visibility to map lifecycle events (creation, read) to property exposure and defines a RESTful interface with route and operation decorators. Dependencies include the @typespec/rest package and knowledge of lifecycle-based visibility. Key parameters include property visibility annotations, operation verbs (@get, @post), and route mapping (@route). The expected input is an HTTP request conforming to the defined operations, with the output shaped automatically according to visibility rules.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\nmodel User {\n  name: string;\n  @visibility(Lifecycle.Read) id: string;\n  @visibility(Lifecycle.Create) password: string;\n}\n\n@route(\"/users\")\ninterface Users {\n  @post create(@path id: string, ...User): User;\n  @get get(@path id: string): User;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Property Visibility using Lifecycle Modifiers in TypeSpec\nDESCRIPTION: This snippet demonstrates applying the `@visibility` decorator with `Lifecycle` enum members to control property visibility in different contexts (Read, Create, Update) within the `Dog` model. `id` is read-only, `secretName` is create/update only, and `name` has default (all) visibilities.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_67\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Dog {\n  // The service will generate an ID, so you don't need to send it.\n  @visibility(Lifecycle.Read)\n  id: int32;\n\n  // The service will store this secret name, but won't ever return it.\n  @visibility(Lifecycle.Create, Lifecycle.Update)\n  secretName: string;\n\n  // The regular name has all vi\n  name: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Automatic Route Generation with @autoRoute, @path, and @segment - TypeSpec\nDESCRIPTION: This example illustrates how the @autoRoute decorator enables automatic HTTP route generation for operations and interfaces in TypeSpec. It employs a 'CommonParameters' model to encapsulate shared parameters for routing, each annotated with @path and @segment to designate path positions. Operations in 'UserOperations' (e.g., getUser and updateUser) utilize parameter spreading to map inputs to routes formatted as '/tenants/{tenantId}/users/{userName}'. The snippet depends on definitions for 'User' and 'Error' elsewhere. Required: @autoRoute, @get, @put, @path, @segment, and TypeSpec model/interface syntax.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/resource-routing.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nmodel CommonParameters {\\n  @path\\n  @segment(\"tenants\")\\n  tenantId: string;\\n\\n  @path\\n  @segment(\"users\")\\n  userName: string;\\n}\\n\\n@autoRoute\\ninterface UserOperations {\\n  @get\\n  getUser(...CommonParameters): User | Error;\\n\\n  @put\\n  updateUser(...CommonParameters, user: User): User | Error;\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Multipart Body with multipartBody Decorator - TypeSpec (tsp)\nDESCRIPTION: Demonstrates using @TypeSpec.Http.multipartBody to indicate that a property should be encoded as multipart/form-data. This is often required when uploading files or handling multi-part data in REST APIs. The decorator is applied to a parameter or property within an operation, requiring explicit content-type header and body structure definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_8\n\nLANGUAGE: tsp\nCODE:\n```\n@TypeSpec.Http.multipartBody\n```\n\nLANGUAGE: tsp\nCODE:\n```\nop upload(\n  @header `content-type`: \"multipart/form-data\",\n  @multipartBody body: {\n    fullName: HttpPart<string>;\n    headShots: HttpPart<Image>[];\n  },\n): void;\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Routing for REST Types - TypeSpec\nDESCRIPTION: Applies the @autoRoute decorator to indicate that interface or operation routes should be resolved automatically based on resource modeling. Typically used for resource types where model-based route segments are defined, this decorator takes no parameters. Annotate either an interface or operation as shown.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.autoRoute\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@autoRoute\ninterface Pets {\n  get(@segment(\"pets\") @path id: string): void; //-> route: /pets/{id}\n}\n```\n\n----------------------------------------\n\nTITLE: Additive Behavior of the @visibility Decorator in TypeSpec\nDESCRIPTION: This TypeSpec snippet illustrates that applying the `@visibility` decorator multiple times to the same property is additive. Each application adds the specified modifiers to the set of active modifiers for that property. In this example, applying `@visibility(Lifecycle.Create)` and then `@visibility(Lifecycle.Read)` results in the `name` property having both `Create` and `Read` visibilities enabled.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/visibility.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@visibility(Lifecycle.Create)\n@visibility(Lifecycle.Read)\nname: string;\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Discriminated Union Properties in TypeSpec and its JSON Serialization\nDESCRIPTION: This snippet shows how to customize the discriminator and envelope property names for a discriminated union in TypeSpec using parameters within the `@discriminated` decorator (`discriminatorPropertyName`, `envelopePropertyName`). It defines the `Pet` union with custom names (`dataKind`, `data`) and provides the corresponding `Cat` and `Dog` models. The associated JSON examples illustrate the serialized output using these custom property names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/discriminated-types.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@discriminated(#{ discriminatorPropertyName: \"dataKind\", envelopePropertyName: \"data\" })\nunion Pet {\n  cat: Cat,\n  dog: Dog,\n}\n\nmodel Cat {\n  name: string;\n  meow: int32;\n}\n\nmodel Dog {\n  name: string;\n  bark: string;\n}\n```\n```\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"dataKind\": \"cat\",\n  \"data\": {\n    \"name\": \"Whiskers\",\n    \"meow\": true\n  }\n}\n// or\n{\n  \"dataKind\": \"dog\",\n  \"data\": {\n    \"name\": \"Rex\",\n    \"bark\": false\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an Explicit Request Body Parameter in TypeSpec\nDESCRIPTION: Defines an operation `add` that accepts an explicit request body. The `@body` decorator marks the `pet` parameter (of type `Pet`) as representing the entire request body. The operation returns `void`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_12\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop add(@body pet: Pet): void\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Models and Union Type Operation in TypeSpec\nDESCRIPTION: Defines two TypeSpec models, `Bar` and `Foo`. The `Foo` model includes a property `bar` of type `Bar`, demonstrating a nested model structure. An operation `foo` is defined to return a union type `Foo | Bar`, testing the generation logic for nested structures and unions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/basic_model.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Bar {\n  address: string;\n}\n\nmodel Foo {\n  name: string;\n  age: int32;\n  bar: Bar;\n}\nop foo(): Foo | Bar;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Collections - TypeSpec - typespec\nDESCRIPTION: Declares an operation to create new resource instances within a resource collection. The input is a ResourceCreateModel, and the return type can be the newly created Resource, a ResourceCreatedResponse, or an Error, dependent on the result. Requires the TypeSpec.Rest.Resource module and the definition of Resource and Error types. Key parameters include the resource creation model; the output is either the created resource object or response/wrapper, with support for custom error handling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_26\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceCollectionOperations.create(resource: TypeSpec.Rest.Resource.ResourceCreateModel<Resource>): Resource | TypeSpec.Rest.Resource.ResourceCreatedResponse<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Interface for Extended Model 'Dog'\nDESCRIPTION: Exports a TypeScript interface named `Dog` generated from the corresponding TypeSpec definition. It extends the `Pet` interface, inheriting its properties, and adds the specific `color` property with a literal type union 'black' | 'brown'. This interface is located in the `src/models/models.ts` file.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_extends.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/models.ts interface Dog\nexport interface Dog extends Pet {\n  color: \"black\" | \"brown\";\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Interface for Bar\nDESCRIPTION: Generated TypeScript interface `Bar` corresponding to the TypeSpec model. The `bar_value` property (snake_case) is mapped to `barValue` (camelCase) with the type `string`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/record.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/models.ts interface Bar\nexport interface Bar {\n  barValue: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Binary File Type with Path-Based Filename in TypeSpec\nDESCRIPTION: Shows how to define a custom model `ImageFile` extending the base `File` type for binary data. It specifies allowed binary content types (`image/png`, `image/jpeg`) and uses the `@path` decorator to map the `filename` property to a URL path segment. Associated GET (`downloadImage`) and POST (`uploadImage`) operations demonstrate handling this custom image file type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_15\n\nLANGUAGE: tsp\nCODE:\n```\n// Declare a custom type of binary file\nmodel ImageFile extends File {\n  contentType: \"image/png\" | \"image/jpeg\";\n  @path filename: string;\n}\n\n@get op downloadImage(@path name: string): ImageFile;\n\n@post op uploadImage(@bodyRoot image: ImageFile): void;\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameterized Server URL in TypeSpec\nDESCRIPTION: Uses the `@server` decorator to define a parameterized base URL `https://{region}.example.com`. It includes a description and defines the `region` variable as a string parameter, allowing different base URLs based on the region.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_17\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@server(\"https://{region}.example.com\", \"Region scoped endpoint\", {region: string})\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec HTTP Server Code Generator using NPM - Bash\nDESCRIPTION: Installs the @typespec/http-server-js package using npm in the context of a specification project. This command is intended for users who want to add the TypeSpec code generator directly to their project dependencies. No additional parameters are required; simply run the command in the project root to install the generator locally.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-js/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-server-js\n\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Responses with Body, Headers, and Descriptions\nDESCRIPTION: Illustrates how to define a TypeSpec operation response structure including the response body using `@body`, response headers using `@header`, and the description using a doc comment (`@doc`). The `read` operation returns a response object containing the `widget` in the body, and `xRateLimitRemaining` and `xRateLimitReset` as headers. The doc comment `/** the widget */` becomes the description for the body.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@get op read(@path id: string): {\n  /** the widget */\n  @body\n  widget: Widget;\n\n  @header xRateLimitRemaining: int32;\n  @header xRateLimitReset: int32;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple AND Authentication Schemes With @useAuth Tuple (Typespec)\nDESCRIPTION: Shows how to require multiple authentication schemes simultaneously using a tuple in the @useAuth decorator. All listed schemes, Auth1 and Auth2, must be presented by clients to successfully authenticate. Dependencies: Both Auth1 and Auth2 scheme definitions must exist.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n// Use BOTH Auth1 AND Auth2\\n@useAuth([Auth1, Auth2])\n```\n\n----------------------------------------\n\nTITLE: Creating Model Inheritance with the 'extends' Keyword in TypeSpec\nDESCRIPTION: Illustrates the use of the `extends` keyword to establish an explicit inheritance relationship between models. In this example, the `Dog` model inherits properties and the nominal type from the `Animal` model, signifying a subtype relationship often relevant for code generation in object-oriented languages.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Animal {\n  species: string;\n}\n\nmodel Dog extends Animal {}\n```\n\n----------------------------------------\n\nTITLE: Sending Bytes Body Payload via HTTP Client in TypeScript\nDESCRIPTION: Implements a TypeScript function to call the foo operation, encoding a Uint8Array value as base64 in the request body before transmission, and invoking the API endpoint. It processes the HTTP response, deserializing on success or throwing formatted errors on failure. Dependencies: TestClientContext, encodeUint8Array, jsonBytesBodyToApplicationTransform, and error utilities. The value parameter accepts binary data; output is a BytesBody object. Assumes content-type handling for base64 in JSON.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/bytes_json_property.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function foo(\n  client: TestClientContext,\n  value: Uint8Array,\n  options?: FooOptions,\n): Promise<BytesBody> {\n  const path = parse(\"/default\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n    body: {\n      value: encodeUint8Array(value, \"base64\")!,\n    },\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return jsonBytesBodyToApplicationTransform(response.body)!;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Emitter Options in TypeSpec Projects - YAML - yaml\nDESCRIPTION: Demonstrates a tspconfig.yaml file that specifies advanced emitter-specific options under the 'options' property for two emitters. This allows each emitter to receive scoped settings, leveraging YAML's structured, nested mapping. No external dependencies are required; this config is recognized natively by the TypeSpec compiler when present in the project directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n  emitter1:\n    some-option: my-name\n  emitter2:\n    some-other-option: This is a title\n\n```\n\n----------------------------------------\n\nTITLE: Using String Template Literals (Interpolation) in TypeSpec\nDESCRIPTION: Shows how to use string interpolation with `${}` syntax within both single-line (`\"`) and multi-line (`\"\"\"`) string literals in TypeSpec. The example interpolates the value of the `hello` alias into other string aliases. Any valid expression can be interpolated, but only literal results yield a `valueof string`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/type-literals.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\nalias hello = \"bonjour\";\nalias Single = \"${hello} world!\";\n\nalias Multi = \"\"\"\n  ${hello} \n  world!\n  \"\"\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Update REST Resource Operations in TypeSpec (Typespec)\nDESCRIPTION: This decorator marks an operation as an update (PATCH or PUT) endpoint for a given resource type. Applied to operations with the resource's model type as a parameter, it supports definition of partial or full resource updates.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.updatesResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Implementing 'get' Operation in TestClient with TypeScript\nDESCRIPTION: This TypeScript function implements the 'get' client operation to retrieve a BytesProperty resource from the '/bytes' endpoint using an HTTP GET request. It uses a client context and optional parameters, parses the response, and applies a JSON-to-model transformation if the response is successful and in JSON format. Dependencies include TypeScript, the relevant client library, and response parsing utilities. Key parameters are the client context, options, and HTTP request headers, with the function returning a BytesProperty object or throwing on error.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/model_with_bytes_property.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n```ts src/api/testClientOperations.ts function get\nexport async function get(client: TestClientContext, options?: GetOptions): Promise<BytesProperty> {\n  const path = parse(\"/bytes\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return jsonBytesPropertyToApplicationTransform(response.body)!;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Service Models and Operations with Spread Parameters in TypeSpec\nDESCRIPTION: This TypeSpec (tsp) code defines two models, 'Address' and 'Widget', where 'Widget' includes a nested optional 'Address'. It then declares a 'create' operation using the spread syntax (...Widget), allowing all fields from the 'Widget' model to be supplied as operation parameters. No required parameters are enforced as all fields are optional, supporting flexible input structures. Prerequisites include the TypeSpec compiler and its tooling for code generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/spread_with_nested.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n\nmodel Address {\n  street: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  interiorNumber?: string;\n}\n\nmodel Widget {\n  id: string;\n  name: string;\n  age?: string;\n  address?: Address;\n}\n\n@post op create(...Widget): void;\n```\n\n----------------------------------------\n\nTITLE: Defining CreateOrReplace Interface for Resources - TypeSpec - typespec\nDESCRIPTION: Introduces the interface for resource creation or replacement operations, parameterized by Resource and Error. Supports compile-time enforcement of appropriate response and error handling models in consuming services. No operations are included in this snippet alone but intended for extension in resource management modules.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_30\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ResourceCreateOrReplace<Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Serialization of Nested Models with Custom XML Names - XML\nDESCRIPTION: Displays XML output where referenced nested elements use custom XML names as defined in TypeSpec with @encodedName. Ensures semantic correctness when custom naming conventions are required for child objects.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_28\n\nLANGUAGE: XML\nCODE:\n```\n<Book>\n  <author>\n    <name>string</name>\n  </author>\n</Book>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Options Interface for Optional Parameters\nDESCRIPTION: This TypeScript interface `GetWithParamsOptions` defines the structure for passing optional parameters (`name` and `age`) to the `getWithParams` operation function. It extends `OperationOptions` for potential base operation settings.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/only_optional.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts interface GetWithParamsOptions\nexport interface GetWithParamsOptions extends OperationOptions {\n  name?: string;\n  age?: number;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example Usage: Create Transformation with Visibility Filtering (Typespec)\nDESCRIPTION: Demonstrates the use of the Create transformation model by defining Dog with various lifecycle visibilities and then creating a new model, CreateDog, which includes only fields with Create visibility. This snippet illustrates how lifecycle visibility controls property inclusion.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Dog {\n  @visibility(Lifecycle.Read)\n  id: int32;\n\n  name: string;\n}\n\n// This model has only the `name` field.\nmodel CreateDog is Create<Dog>;\n\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Models with Property Reference\nDESCRIPTION: This TypeSpec code defines two models, `Foo` and `Bar`. The `Bar` model demonstrates referencing a property (`id`) from another model (`Foo`) as the type for its `parentId` property. An operation `get` using the `Bar` model is also defined. This tests the generator's ability to handle model property types that are references to other model properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/property_references_property.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\n\nmodel Foo {\n  name: string;\n  id: int32;\n}\n\nmodel Bar {\n  address: string;\n  parentId: Foo.id;\n}\n\nop get(...Bar): Bar;\n```\n\n----------------------------------------\n\nTITLE: Defining Models and Operations with TypeSpec - TypeSpec\nDESCRIPTION: Defines a Pet model with id and name, a Dog model that spreads Pet and adds a color property, and an operation foo that returns Dog. This demonstrates using model inheritance and extending base models in TypeSpec for service contract definition. TypeSpec dependencies are required; properties and operation signatures must match your service implementation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_spread.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service\\nnamespace Test;\\nmodel Pet {\\n  id: string;\\n  name: string;\\n}\\n\\nmodel Dog {\\n  ...Pet;\\n  color: \\\"black\\\" | \\\"brown\\\";\\n}\\n\\nop foo(): Dog;\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Encodings in a TypeSpec Model\nDESCRIPTION: Shows the default `ISO8601` encoding for the `duration` type in TypeSpec and how to use the `@encode` decorator to specify alternative encodings, such as representing the duration in seconds as an `int32` or `float32`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/encoding.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n```tsp\nmodel User {\n  runtime: duration; // ISO8601\n\n  @encode(DurationKnownEncoding.seconds, int32)\n  runtimeInSecondsInt: duration; // in seconds as an int32\n\n  @encode(DurationKnownEncoding.seconds, float32)\n  runtimeInSecondsFloat: duration; // in seconds as a float32\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Treating Warnings as Errors in TypeSpec Project Configuration - YAML - yaml\nDESCRIPTION: Configures the tspconfig.yaml to elevate all warnings to errors using the 'warn-as-error' property, enforcing stricter compilation and build safety. This option is particularly useful in CI/CD pipelines. Interpreted natively by the TypeSpec compiler.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nwarn-as-error: true\n\n```\n\n----------------------------------------\n\nTITLE: Model Extension Using 'is' Keyword in TypeSpec\nDESCRIPTION: This example demonstrates the 'is' keyword to copy all properties from a base model (Address) into a new model (ShippingDetails) as a shape, while allowing additional properties. The resulting schema is flat and contains all properties from both models, without an inheritance relationship in OpenAPI.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_22\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Address {\n  street: string;\n  city: string;\n}\n\nmodel ShippingDetails is Address {\n  zipCode: string; // Additional property\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Resource Key Parameters in TypeSpec (Typespec)\nDESCRIPTION: This decorator copies key parameters from the specified model, with an optional filter string to exclude certain properties. Useful for reusing resource identifiers in service definitions. Intended for use on models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.copyResourceKeyParameters(filter?: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Creating and Using MetadataInfo in TypeSpec Emitters (JavaScript)\nDESCRIPTION: The `MetadataInfo` interface provides methods to analyze metadata and visibility implications within a TypeSpec program. An instance should be created once per program using the `createMetadataInfo` function, passing the Program and optional MetadataInfoOptions. This instance is then used with its associated methods.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-metadata-handling.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMetadataInfo // Interface\n```\n\nLANGUAGE: javascript\nCODE:\n```\ncreateMetadataInfo(Program, MetadataInfoOptions) // Function to create an instance\n```\n\n----------------------------------------\n\nTITLE: Reusing an Operation Signature with 'is' Keyword in TypeSpec\nDESCRIPTION: This snippet demonstrates how to reuse an existing operation's signature using the `is` keyword. The `deletePet` operation is declared using `is Delete`, inheriting the parameters (`id: string`), return type (`void`), and any decorators from the `Delete` operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/operations.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\nop deletePet is Delete;\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Properties with Spread and Record<T> in TypeSpec\nDESCRIPTION: Shows how to use the spread operator (`...`) with `Record<string>` to allow a model (`Person`) to have explicitly defined properties (like `age` as `int32`) alongside an arbitrary number of additional properties of type `string`. This approach permits incompatible types between explicit and additional properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n// In this example, the Person model has a property `age` that is an int32, but also has other properties that are all strings.\nmodel Person {\n  age: int32;\n  ...Record<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Model Property as Entity Key with key Decorator in TypeSpec\nDESCRIPTION: Uses @key decorator to indicate a model's primary property used for uniquely identifying instances of that model. Typically used with ID fields; affects output such as generated code or documentation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Pet {\n  @key id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Treating Warnings as Errors via CLI for TypeSpec - Bash - bash\nDESCRIPTION: Shows the '--warn-as-error' CLI flag to treat warnings as build errors, useful for enforcing code hygiene policies. Supersedes the equivalent configuration file flag for the invocation. Requires the TypeSpec toolchain.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --warn-as-error\n\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for GET /type/model/inheritance/single-discriminator/recursivemodel\nDESCRIPTION: This JSON represents the expected response body for a GET request to `/type/model/inheritance/single-discriminator/recursivemodel`. It showcases receiving polymorphic models ('eagle', 'goose', 'seagull', 'sparrow') with collection and dictionary properties that refer to other polymorphic models, all using a single discriminator ('kind').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_179\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"wingspan\": 5,\n  \"kind\": \"eagle\",\n  \"partner\": {\n    \"wingspan\": 2,\n    \"kind\": \"goose\"\n  },\n  \"friends\": [\n    {\n      \"wingspan\": 2,\n      \"kind\": \"seagull\"\n    }\n  ],\n  \"hate\": {\n    \"key3\": {\n      \"wingspan\": 1,\n      \"kind\": \"sparrow\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Directories in TypeSpec Configuration - YAML - yaml\nDESCRIPTION: Shows a tspconfig.yaml snippet defining a parameter 'base-dir' (with a default value referencing the working directory) and composing the output directory using parameter interpolation. This example demonstrates integration of parameters and the use of variable expressions in config paths. Requires only the TypeSpec compiler and valid parameter/variable expressions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n  base-dir:\n    default: \"{cwd}\"\n\noutput-dir: {base-dir}/output\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Continuation Token Paging Operation in TypeSpec\nDESCRIPTION: This TypeSpec code defines a service `Test` with a `Pet` model. It includes a list operation `link` decorated with `@route(\"/link\")` and `@list`. Paging is implemented using the continuation token pattern, indicated by `@continuationToken` on the optional `nextToken` query parameter and the `nextToken` header in the response.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\nmodel Pet {\n  id: string;\n  name: string;\n}\n\n@route(\"/link\")\n@list\nop link(@query filter: string, @continuationToken @query nextToken?: string): {\n  @pageItems\n  pets: Pet[];\n\n  @continuationToken @header nextToken?: string;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP GET Endpoint With Void Response - TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a RESTful GET endpoint for the \"/widgets\" path in the DemoService namespace, specifying that the read operation responds with no body (void). Annotations like @service, @route, and @tag organize the API, and @test indicates this operation is covered by tests. This establishes the contract for returning 204 No Content.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-response.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\n\n@route(\"/widgets\")\n@tag(\"Widgets\")\ninterface Widgets {\n  @test @get read(): void;\n}\n```\n\n----------------------------------------\n\nTITLE: ApiKey Authentication in Query Parameter With @useAuth (Typespec)\nDESCRIPTION: Demonstrates how to apply an API key security scheme located in the query parameter using @useAuth and ApiKeyAuth type with the proper location and parameter name. Requires ApiKeyAuth and ApiKeyLocation.query to be defined/imported.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n@useAuth(ApiKeyAuth<ApiKeyLocation.query, \\\"api_key\\\">)\n```\n\n----------------------------------------\n\nTITLE: Serializing Primitive int32[] Array (Potentially Redundant) in TypeScript\nDESCRIPTION: Function to serialize an array of primitive int32 values for transport. Loops through the array and pushes elements as-is, resulting in an identical array, indicating possible redundancy. Input is Array<number> (or null/undefined), and output is any (representing transport format). No special dependencies; could be replaced by identity mapping for primitives.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/arrays.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonArrayInt32ToTransportTransform(items_?: Array<number> | null): any {\n  if (!items_) {\n    return items_ as any;\n  }\n  const _transformedArray = [];\n\n  for (const item of items_ ?? []) {\n    const transformedItem = item as any;\n    _transformedArray.push(transformedItem);\n  }\n\n  return _transformedArray as any;\n}\n```\n\n----------------------------------------\n\nTITLE: ApiKey Authentication in Cookie With @useAuth (Typespec)\nDESCRIPTION: Demonstrates configuration for API key authentication using a cookie named 'X-API-KEY'. Requires ApiKeyAuth and ApiKeyLocation.cookie model definitions imported into the TypeSpec file.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n@useAuth(ApiKeyAuth<ApiKeyLocation.cookie, \\\"X-API-KEY\\\">)\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Creation Input Model - TypeSpec REST - typespec\nDESCRIPTION: Establishes a generic model TypeSpec.Rest.Resource.ResourceCreateModel<Resource> used to define the expected input for resource creation operations within an API. It is structured for use as a strong contract with code generation or documentation tools. No internal properties are detailed; resource model is supplied as a generic.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/data-types.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Rest.Resource.ResourceCreateModel<Resource>\n```\n\n----------------------------------------\n\nTITLE: Binding Generated Router Dispatch to Node.js HTTP Server in TypeScript\nDESCRIPTION: Illustrates how to attach a generated router's dispatch handler to the Node.js HTTP server's request event. Requires the 'http' module and an initialized router instance. Input: none directly; Output: starts a listening HTTP server on port 8080. Calls router.dispatch for each incoming request.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-js/project.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst server = http.createServer();\n\nserver.on(\"request\", router.dispatch);\n\nserver.listen(8080, () => {\n  console.log(\"Server listening on http://localhost:8080\");\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Operation Parameters - TypeSpec REST - typespec\nDESCRIPTION: Creates a parameterized model TypeSpec.Rest.Resource.ResourceParameters<Resource> intended to wrap parameters for individual resource operations, ensuring accurate type association per resource endpoint. No internal properties are included; relies on the Resource type parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/data-types.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Rest.Resource.ResourceParameters<Resource>\n```\n\n----------------------------------------\n\nTITLE: Using @oneOf Decorator for Union Types in TypeSpec\nDESCRIPTION: This TypeSpec code shows the `@TypeSpec.OpenAPI.oneOf` decorator. When applied to a `Union` type or a `ModelProperty` referencing a union in TypeSpec, it instructs the `@typespec/openapi3` emitter to use the `oneOf` keyword in the generated OpenAPI schema, instead of the default `anyOf`, to represent the union.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi3/README.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.oneOf\n```\n\n----------------------------------------\n\nTITLE: Using Spread Operator for Operation Parameters in TypeSpec\nDESCRIPTION: This snippet illustrates how to incorporate parameters from an existing model (`CommonParams`) into an operation's parameter list using the spread operator (`...`). The `feedDog` operation takes all parameters from `CommonParams` plus an additional `name` parameter of type `string`, and returns `void`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/operations.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nop feedDog(...CommonParams, name: string): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Lifecycle Visibility via Enum in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines the `Lifecycle` enum, which represents different visibility classes occurring during resource creation, reading, updating, deletion, and querying. Used with property decorators to control when specific fields appear in each lifecycle phase. Essential for modeling resource-oriented APIs with fine-grained property visibilities.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_29\n\nLANGUAGE: typespec\nCODE:\n```\nenum Lifecycle\n```\n\n----------------------------------------\n\nTITLE: Defining a Code Fix using TypeSpec Compiler (TypeScript)\nDESCRIPTION: This snippet defines a code fix to change an identifier in a TypeSpec model. It uses the defineCodeFix utility to encapsulate the fix's metadata and behavior. The implementation depends on @typespec/compiler and expects the node to be an IdentifierNode; it replaces the identifier at the detected source location with a new string.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/codefixes.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineCodeFix, getSourceLocation, type IdentifierNode } from \"@typespec/compiler\";\n\nexport function createChangeIdentifierCodeFix(node: IdentifierNode, newIdentifier: string) {\n  return defineCodeFix({\n    id: \"change-identifier\",\n    label: `Change ${node.sv} to ${newIdentifier}`,\n    fix: (context) => {\n      const location = getSourceLocation(node);\n      return context.replaceText(location, newIdentifier);\n    },\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Spread Model Operation with TypeSpec (TSP)\nDESCRIPTION: Defines a TypeSpec model 'Widget' with required and optional fields, and a service operation that takes a spread of all Widget parameters for the REST endpoint. This sets up the contract for code generation or manual client implementation. Requires the TypeSpec language tooling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/spread_body.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n\nmodel Widget {\n  id: string;\n  name: string;\n  age?: string;\n}\n\n@post op create(...Widget): void;\n```\n\n----------------------------------------\n\nTITLE: Combining Client/Server Pagination with Links (HTTP) in TypeSpec\nDESCRIPTION: Demonstrates combining client-driven parameters (`@pageIndex`, `@pageSize`, marked as `@query` parameters) with server-driven navigation links (`@nextLink`, etc.). The client can specify page and size, and the server responds with data and links that likely incorporate these client-provided parameters for subsequent navigation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/pagination.md#_snippet_6\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@list op listPets(@query @pageIndex page?: int32 = 1, @query @pageSize perPage?: int32 = 100): {\n  @pageItems pets: Pet[];\n\n  // Links would return the url resolve with page and perPage set\n  links: {\n    @nextLink next?: url;\n    @prevLink prev?: url;\n    @firstLink first?: url;\n    @lastLink last?: url;\n  };\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Next Link Paging Operation in TypeSpec\nDESCRIPTION: This TypeSpec code defines a service `Test` with a `Pet` model and a list operation `link`. Paging is implemented using the next link pattern. The operation takes an optional `@pageSize` query parameter `maxPageSize`. The response contains the list of `@pageItems` (`pets`) and an optional `@nextLink` property (`link`) which holds the URL for the next page.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_8\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\nmodel Pet {\n  id: string;\n  name: string;\n}\n\n@route(\"/link\")\n@list\nop link(@query filter: string, @pageSize @query maxPageSize?: int32): {\n  @pageItems\n  pets: Pet[];\n\n  @nextLink link?: string;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Basic API Routes and Operations in TypeSpec\nDESCRIPTION: Shows how to use the `@route` decorator on a namespace (`Pets`) to define a base path (`/pets`). It defines two operations: `create` (implicitly using the base path `/pets` and POST method due to `@body`) and `read` (appending a path parameter marked with `@path` to form `/pets/{petId}` and implicitly using GET method).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@route(\"/pets\")\nnamespace Pets {\n  op create(@body pet: Pet): Pet; // uses path \"/pets\"\n  op read(@path petId: int32): Pet; // uses path \"/pets/{petId}\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/openapi Library using npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@typespec/openapi` library. This package is required to utilize the OpenAPI-specific decorators and features within a TypeSpec project. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/openapi\n```\n\n----------------------------------------\n\nTITLE: Defining a POST Request with Scalar Body in TypeSpec\nDESCRIPTION: This TypeSpec code defines a `DemoService` with a `Widgets` interface. The `create` operation, mapped to `POST /widgets`, explicitly takes an `int32` scalar value named `count` as the request body using the `@body` decorator. This definition serves as the source for generating client-side code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/scalar-payload.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\n\n@route(\"/widgets\")\n@tag(\"Widgets\")\ninterface Widgets {\n  @test @post create(@body count: int32): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with route Decorator - TypeSpec (typespec)\nDESCRIPTION: Applies @TypeSpec.Http.route to operations, namespaces, or interfaces to specify the relative URI template, supporting RFC 6570 parameterization for paths and queries. Assists in documenting, modeling, and generating REST endpoints. Accepts a path string argument and is often used alongside other verb and parameter decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.route(path: valueof string)\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/widgets/{id}\") op getWidget(@path id: string): Widget;\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/files{+path}\") op getFile(@path path: string): bytes;\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/files\") op list(select?: string, filter?: string): Files[];\n@route(\"/files{?select,filter}\") op listFullUriTemplate(select?: string, filter?: string): Files[];\n```\n\n----------------------------------------\n\nTITLE: Defining 32-bit Unsigned Integer Scalar in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Provides a `uint32` scalar for storing unsigned 32-bit values (0–4,294,967,295). Useful for modeling large counting values and protocol fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_50\n\nLANGUAGE: typespec\nCODE:\n```\nscalar uint32\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameterized Server Endpoint with TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a service with a server that uses a URL path containing templated parameters ('endpoint' and 'apiVersion'). It demonstrates how to specify metadata for a server with a description and required parameters, and exposes one operation, 'noOperationParams'. The snippet relies on TypeSpec's decorator syntax and does not require external dependencies beyond the TypeSpec environment. Inputs are the 'endpoint' and 'apiVersion' parameters, which must be provided by the client. Output is a contract defining the server for client/server code generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/server/multiple-parameters.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service(#{ title: \\\"Parametrized Endpoint\\\" })\\n@server(\\n  \\\"{endpoint}/server/path/multiple/{apiVersion}\\\",\\n  \\\"Test server with path parameters.\\\",\\n  {\\n    endpoint: url,\\n    apiVersion: string,\\n  }\\n)\\nnamespace Test;\\n\\nop noOperationParams(): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Responses with Multiple Content Types - TypeScript\nDESCRIPTION: This function reads a GET response from '/widgets' and handles both JSON and XML content types. For both types, it uses jsonWidgetToApplicationTransform to parse the body. Currently, XML deserialization is a TODO (not yet implemented), so XML and JSON responses are treated identically. Throws if unexpected status/content-type encountered. Requires: WidgetsClientContext, Widget, parse, jsonWidgetToApplicationTransform, and createRestError.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-response.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function read(client: WidgetsClientContext, options?: ReadOptions): Promise<Widget> {\n  const path = parse(\"/widgets\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return jsonWidgetToApplicationTransform(response.body)!;\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/xml\")) {\n    return jsonWidgetToApplicationTransform(response.body)!;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Date Query Parameter with Explicit RFC7231 Encoding (TypeSpec)\nDESCRIPTION: Defines a TypeSpec operation `get` with a required `utcDateTime` query parameter `value`. The `@encode` decorator explicitly sets the encoding format to `DateTimeKnownEncoding.rfc7231`. The operation is routed to `/default`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/query_date.md#_snippet_6\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\n\n@route(\"/default\")\nop get(\n  @query\n  @encode(DateTimeKnownEncoding.rfc7231)\n  value: utcDateTime,\n): NoContentResponse;\n```\n```\n\n----------------------------------------\n\nTITLE: Inserting ModelWithBytes with Nullable Base64 Encoding - TypeScript\nDESCRIPTION: Implements a TypeScript REST client 'put' method that accepts required and nullable properties, encodes the byte property in base64 before sending, and processes server responses. Depends on utilities like 'encodeUint8Array', 'parse', and 'createRestError'. Inputs include requiredProperty (string), nullableProperty (Uint8Array|null), and optional client options; on success expects 204 status, otherwise throws for errors.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/bytes_nullable.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function put(\\n  client: TestClientContext,\\n  requiredProperty: string,\\n  nullableProperty: Uint8Array | null,\\n  options?: PutOptions,\\n): Promise<void> {\\n  const path = parse(\\\"/\\\").expand({});\\n  const httpRequestOptions = {\\n    headers: {},\\n    body: {\\n      requiredProperty: requiredProperty,\\n      nullableProperty: encodeUint8Array(nullableProperty, \\\"base64\\\")!,\\n    },\\n  };\\n  const response = await client.pathUnchecked(path).put(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \\\"function\\\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Methods for Operations - TypeSpec\nDESCRIPTION: Demonstrates the declaration of HTTP methods using @get and @post on TypeSpec operations. Also shows operation signatures without explicit methods, in which case the emitter infers the method from name or signature. The examples show mapping of TypeSpec input with parameter annotations to intuitive OpenAPI operation routes and methods. Outputs are OpenAPI paths and method verbs determined by the combination of decorator and operation structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n// Explicitly declared as GET /{id}\\n@get\\nop getUser(@path id: string): User;\\n\\n// Explicitly declared as POST /\\n@post\\nop createUser(user: User): User;\\n\\n// Automatically detected as GET /{id}\\nop getUser(@path id: string): User;\\n\\n// Automatically detected as POST /\\nop createUser(user: User): User;\n```\n\n----------------------------------------\n\nTITLE: Updating Extension Resource Instance - TypeSpec - typespec\nDESCRIPTION: Declares the update operation for ExtensionResourceInstanceOperations, applying property updates to an existing resource instance via ResourceCreateOrUpdateModel<Resource>. The response is an updated Extension or Error. Requires models for property typing and error handling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceInstanceOperations.update(properties: TypeSpec.Rest.Resource.ResourceCreateOrUpdateModel<Resource>): Extension | Error\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Compiler Globally using NPM\nDESCRIPTION: This command installs the latest version of the TypeSpec compiler (`@typespec/compiler`) globally using Node Package Manager (NPM). The `-g` flag ensures it's available system-wide, providing access to the `tsp` command-line tool.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-javascript.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @typespec/compiler@latest\n```\n\n----------------------------------------\n\nTITLE: Declaring a Corresponding Widget Interface in TypeScript\nDESCRIPTION: This interface represents a TypeScript translation of the 'Widget' TypeSpec model, with appropriate type mapping ('int32' to 'number'). Dependencies are limited to TypeScript types and require the code to be included in the relevant models.ts file. Expects each property to comply with the specified types, including the union of string literals for 'color'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/basic.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Widget {\n  id: string;\n  weight: number;\n  color: \"red\" | \"blue\";\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Applying @stream for Server Streaming in TypeSpec\nDESCRIPTION: Demonstrates applying the `@stream` decorator with `StreamMode.Out` to a TypeSpec operation (`logs`). This signifies server-side streaming, where the client sends a single `LogsRequest` and the server responds with a stream of `LogEvent` messages.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/decorators.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@stream(StreamMode.Out)\nop logs(...LogsRequest): LogEvent;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Numeric Type Encoding in TypeSpec\nDESCRIPTION: Illustrates how numeric types like `int64` and `decimal128` are serialized as JSON numbers by default. It shows how to use the `@encode(string)` decorator on a property (`idAsString: int64`) or on a custom scalar type (`decimalString extends decimal128`) to force serialization as a JSON string, recommended for compatibility with languages like JavaScript that may not support large number types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/encoding.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n```tsp\nmodel User {\n  id: int64; // JSON number\n\n  @encode(string)\n  idAsString: int64; // JSON string\n\n  viaSalar: decimalString;\n}\n\n@encode(string)\nscalar decimalString extends decimal128;\n```\n```\n\n----------------------------------------\n\nTITLE: Example: Assigning a Maximum Value to a Numeric Scalar in TypeSpec\nDESCRIPTION: Applies @maxValue(200) to the Age scalar of int32 type, ensuring values cannot exceed 200. Suitable for business rules or physical constraints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_23\n\nLANGUAGE: typespec\nCODE:\n```\n@maxValue(200)\nscalar Age is int32;\n```\n\n----------------------------------------\n\nTITLE: Indicating Error Responses with the @error Decorator - TypeSpec\nDESCRIPTION: Illustrates the usage of the @error decorator to mark models as error responses in TypeSpec. The OpenAPI emitter then converts these to default responses in the output schema. Demonstrates union modeling of success vs. error for an operation's return type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n@error\\nmodel ErrorResponse {\\n  @statusCode\\n  code: 404 | 500;\\n\\n  message: string;\\n}\\n\\nop getUser(@path id: string): User | ErrorResponse;\n```\n\n----------------------------------------\n\nTITLE: Implementing the Create Operation Function in TypeScript\nDESCRIPTION: Implements the 'create' function that sends an HTTP POST request to create a Widget via the TestClient. Relies on a context object, request transformation utilities (e.g., jsonWidgetToTransportTransform), and handles optional headers and operation callbacks. Input parameters are the client context, a Widget instance, and an optional options object including headers and operational hooks. Returns a promise resolving upon HTTP status 204 or throws on errors. Requires dependencies such as a TestClientContext, request parser, and error creation utilities.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/with_body_property.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function create(\n  client: TestClientContext,\n  widget: Widget,\n  options?: CreateOptions,\n): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      ...(options?.foo && { foo: options.foo }),\n    },\n    body: jsonWidgetToTransportTransform(widget),\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 64-bit Integer Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Declares an `int64` scalar for representing large integer values (-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807), useful when handling large numerical values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_40\n\nLANGUAGE: typespec\nCODE:\n```\nscalar int64\n```\n\n----------------------------------------\n\nTITLE: Enforcing Unique Array Items in JSON Schema with TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.uniqueItems` decorator specifies that all items within an array must be unique. This adds the `uniqueItems: true` constraint to the generated JSON Schema for the array type (`unknown[]`) or model property. It takes no parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.uniqueItems\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Deserialization from Snake Case\nDESCRIPTION: This TypeScript function, `jsonFooToApplicationTransform`, located in `src/models/internal/serializers.ts`, handles the deserialization of data received from the wire (expected to have snake_case properties) into the client-side `Foo` model (with camelCase properties). It takes an input object (potentially `any`) and returns a `Foo` object, mapping `element_name` to `elementName` and `age` to `age`. It handles null or undefined input by returning it as is.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/basic_model_wire_name.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonFooToApplicationTransform(input_?: any): Foo {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    elementName: input_.element_name,\n    age: input_.age,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending and Enabling Emitters in Nested TypeSpec Projects - YAML - yaml\nDESCRIPTION: Illustrates inheritance in TypeSpec configs, showing how a nested tspconfig.yaml can extend a parent's config using the 'extends' property and selectively enable emitters via the 'emit' property. Supports modular configuration across different folders. Only the TypeSpec compiler is required to interpret this structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextends: ../tspconfig.yaml\nemit:\n  - emitter1\n\n```\n\n----------------------------------------\n\nTITLE: Model Property Composition via Spread Operator in TypeSpec\nDESCRIPTION: This snippet utilizes the TypeSpec spread operator (...) to copy all properties from one model (Address) into another (UserProfile). The resulting model in OpenAPI has the flattened properties from both models, making this technique ideal for composition without inheritance relationships.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_19\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Address {\n  street: string;\n  city: string;\n  state: string;\n}\n\nmodel UserProfile {\n  name: string;\n\n  // Copy all the properties of Address into this model as if they were declared here.\n  ...Address;\n\n  email: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Resource Key Parameters on Models - TypeSpec\nDESCRIPTION: Illustrates use of the @copyResourceKeyParameters decorator to inherit resource key parameters from existing models. Optionally accepts a filter string to exclude specific properties. This functionality is attached to models to streamline propagation of key attributes across related resources.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.copyResourceKeyParameters(filter?: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Getting a Resource - TypeSpec - typespec\nDESCRIPTION: Defines an operation to fetch a specific resource. Takes no required arguments, returning either the Resource or an Error. Supports REST GET semantics for strongly typed resources.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_43\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceOperations.get(): Resource | Error\n```\n\n----------------------------------------\n\nTITLE: Creating an Extension Resource - Unified Operations - TypeSpec - typespec\nDESCRIPTION: Describes the create operation in ExtensionResourceOperations for creating new resource instances using ResourceCreateModel<Resource>. Returns the Extension, ResourceCreatedResponse<Resource>, or Error, encapsulating the standard REST create pattern in a unified model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_19\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceOperations.create(resource: TypeSpec.Rest.Resource.ResourceCreateModel<Resource>): Extension | TypeSpec.Rest.Resource.ResourceCreatedResponse<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Defining an Operation Description with Doc Comment in TypeSpec\nDESCRIPTION: This snippet illustrates an alternative method for specifying the OpenAPI `description` field using a multi-line doc comment (`/** */`) in TypeSpec. Doc comments, like the `@doc` decorator, can span multiple lines and contain markdown formatting. This example also includes `@tag`, `@route`, and `@get` decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n/**\n * Get health info for the service.\n * The health includes the current version of the service.\n * The health value may be one of:\n * - `ok`: the service is operating normally\n * - `degraded`: the service is operating in a degraded state\n * - `down`: the service is not operating\n */\n@tag(\"Health\")\n@route(\"/health\")\n@get\nop health(): string;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart Model and Operation in TypeSpec\nDESCRIPTION: This TypeSpec code defines a model `Foo` within the `Test` namespace. Each property (`name`, `age`, `description`) is decorated with `HttpPart`, indicating they represent parts of a multipart request body. An operation `doThing` is defined, which expects a `Foo` object as the `@multipartBody` and mandates the `Content-Type` header to be `multipart/form-data`. This sets up the structure for a multipart request.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/simple_part.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\n\nmodel Foo {\n  name: HttpPart<string>;\n  age: HttpPart<int32>;\n  description?: HttpPart<string>;\n}\n\nop doThing(@header contentType: \"multipart/form-data\", @multipartBody bodyParam: Foo): void;\n```\n\n----------------------------------------\n\nTITLE: Declaring the @extension Decorator for Custom OpenAPI Data in TypeSpec\nDESCRIPTION: This decorator allows embedding custom data (OpenAPI extensions, typically prefixed with `x-`) into the generated OpenAPI description for any TypeSpec element. It accepts a `key` (string) and a `value` (any type) as parameters. It targets any TypeSpec construct (`unknown`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/README.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.extension(key: valueof string, value: valueof unknown)\n```\n\n----------------------------------------\n\nTITLE: Equivalent Protobuf Message for a TypeSpec Model - Protobuf\nDESCRIPTION: This snippet presents the Protobuf message corresponding to a TypeSpec model where field decorators define the field index. This is the emitted output when the TypeSpec model meets all Protobuf conversion requirements. Requires proto3 syntax and follows conventions for explicitly numbered fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/guide.md#_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage TestMessage {\n  int32 n = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended TypeScript Compiler tsconfig.json Settings - JSONC\nDESCRIPTION: This JSONC snippet provides key TypeScript compiler options for ESM module resolution and output, tailored for TypeSpec library projects. Settings include module and moduleResolution as Node16, ES2019 target, output directory, and source map support, which are necessary for correct JS generation and debugging.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n\"module\": \"Node16\",           // This and next setting tells TypeScript to use the new ESM import system to resolve types.\n\"moduleResolution\": \"Node16\",\n\"target\": \"es2019\",\n\"rootDir\": \".\",\n\"outDir\": \"./dist\",\n\"sourceMap\": true,\n```\n\n----------------------------------------\n\nTITLE: Updating a Resource Entity - TypeSpec - typespec\nDESCRIPTION: Defines an operation for updating an existing resource, taking the updated properties as input and returning the new Resource state or an Error. Relies on the ResourceCreateOrUpdateModel for property typing.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_51\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceUpdate.update(properties: TypeSpec.Rest.Resource.ResourceCreateOrUpdateModel<Resource>): Resource | Error\n```\n\n----------------------------------------\n\nTITLE: Defining Error Types for Operations in TypeSpec\nDESCRIPTION: Applies the @error decorator to models to designate them as error types, which are returned by operations on failure. These models require standard properties such as code and message, and are used as error outputs by operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@error\nmodel PetStoreError {\n  code: string;\n  message: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying oneOf for Union in OpenAPI with TypeSpec\nDESCRIPTION: This TypeSpec decorator, `@TypeSpec.OpenAPI.oneOf`, instructs the emitter to use the `oneOf` keyword instead of the default `anyOf` when representing a TypeSpec `Union` or a `ModelProperty` of a union type in the generated OpenAPI document. It ensures that validation requires the data to match exactly one of the specified schemas. This decorator takes no parameters and targets `Union` or `ModelProperty`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/reference/decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.oneOf\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Resource Operations Interface - TypeSpec - typespec\nDESCRIPTION: Introduces the ExtensionResourceOperations interface template, covering instance and collection operations in one contract. Templated by Extension, Resource, and Error, it streamlines multiple CRUD and list operations into a unified API surface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ExtensionResourceOperations<Extension, Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Defining CookieOptions Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.CookieOptions` model used to specify options for an HTTP cookie. Currently, it includes a single optional property `name` (string) to define the name used in the cookie.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.CookieOptions\n```\n\n----------------------------------------\n\nTITLE: Defining and Exposing a Simple Model via TypeSpec in TypeSpec\nDESCRIPTION: This snippet defines a basic model 'Widget' with string, integer, and union string properties, and exposes it via an operation. The model can be used as an input or output in service operations. No external dependencies are required. Outputs a 'Widget' model with explicit fields and possible values for 'color'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/basic.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\nmodel Widget {\n  id: string;\n  weight: int32;\n  color: \"red\" | \"blue\";\n}\nop foo(): Widget;\n```\n\n----------------------------------------\n\nTITLE: Testing Implicit Query Parameter Definition\nDESCRIPTION: Defines a GET endpoint where the query parameter `param` is defined implicitly through the route template `{?param}`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_101\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/template-only{?param}\n```\n\n----------------------------------------\n\nTITLE: Defining DELETE Operation with delete Decorator - TypeSpec (typespec)\nDESCRIPTION: Applies the @TypeSpec.Http.delete decorator to specify that an operation is mapped to the HTTP DELETE verb. It is used directly on operation definitions without parameters. This decorator assists documentation and code generation tools in generating RESTful endpoints for resource deletion.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.delete\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@delete op set(petId: string): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Resource Instance Operation Interface - TypeSpec - typespec\nDESCRIPTION: Defines the ExtensionResourceInstanceOperations interface for encapsulating per-instance extension resource actions. Templated with Extension, Resource, and Error for flexible application. Serves as the basis for get, update, and delete operations at the instance level.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ExtensionResourceInstanceOperations<Extension, Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Migrating Multipart Body Handling in TypeSpec (TSP Language)\nDESCRIPTION: This TypeSpec (tsp) language snippet illustrates updating an operation definition to use the new explicit @multipartBody decorator and HttpPart<T> for multipart uploads. The migration replaces a single @body annotation with @multipartBody and switches property types to HttpPart<string> and HttpPart<bytes>. Dependencies include TypeSpec, the HTTP library, and the new multipart handling conventions. Developers must ensure each part is wrapped as HttpPart<T>.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-04-02.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\nop upload(\n  @header contentType: \"multipart/form-data\",\n-  @body body: {\n+  @multipartBody body: {\n-    name: string;\n+    name: HttpPart<string>;\n-    avatar: bytes;\n+    avatar: HttpPart<bytes>;\n  }\n): void;\n```\n\n----------------------------------------\n\nTITLE: Using String Templates with Decorator Parameters in TypeSpec\nDESCRIPTION: Illustrates how string templates passed to decorator parameters declared with `valueof string` are marshalled. The examples show that templates with string literals, numbers, or booleans are evaluated and passed as simple strings to the decorator. An error occurs if the template includes a non-serializable type like a model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_9\n\nLANGUAGE: tsp\nCODE:\n```\nextern dec doc(target: unknown, name: valueof string);\nalias world = \"world!\";\n@doc(\"Hello ${world} \") // receive: \"Hello world!\"\n@doc(\"Hello ${123} \") // receive: \"Hello 123\"\n@doc(\"Hello ${true} \") // receive: \"Hello true\"\nmodel Bar {}\n@doc(\"Hello ${Bar} \") // not called error\n     ^ String template cannot be serialized as a string.\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Request for Next Link Paging in TypeScript\nDESCRIPTION: This asynchronous TypeScript function `linkSend` constructs and sends the initial HTTP GET request for the `link` operation (next link pattern). It parses the path template `/link{?filter,maxPageSize}` and expands it with the `filter` and optional `maxPageSize` from the options. It uses the `client.pathUnchecked().get()` method.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts function linkSend\nasync function linkSend(client: TestClientContext, filter: string, options?: Record<string, any>) {\n  const path = parse(\"/link{?filter,maxPageSize}\").expand({\n    filter: filter,\n    ...(options?.maxPageSize && { maxPageSize: options.maxPageSize }),\n  });\n  const httpRequestOptions = {\n    headers: {},\n  };\n  return await client.pathUnchecked(path).get(httpRequestOptions);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for GET /type/model/inheritance/nested-discriminator/recursivemodel\nDESCRIPTION: This JSON represents the expected response body for a GET request to the `/type/model/inheritance/nested-discriminator/recursivemodel` endpoint. It demonstrates a polymorphic model with nested collection and dictionary properties referring to other polymorphic models, using nested discriminators ('kind' and 'sharktype').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_168\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"age\": 1,\n  \"kind\": \"salmon\",\n  \"partner\": {\n    \"age\": 2,\n    \"kind\": \"shark\",\n    \"sharktype\": \"saw\"\n  },\n  \"friends\": [\n    {\n      \"age\": 2,\n      \"kind\": \"salmon\",\n      \"partner\": {\n        \"age\": 3,\n        \"kind\": \"salmon\"\n      },\n      \"hate\": {\n        \"key1\": {\n          \"age\": 4,\n          \"kind\": \"salmon\"\n        },\n        \"key2\": {\n          \"age\": 2,\n          \"kind\": \"shark\",\n          \"sharktype\": \"goblin\"\n        }\n      }\n    },\n    {\n      \"age\": 3,\n      \"kind\": \"shark\",\n      \"sharktype\": \"goblin\"\n    }\n  ],\n  \"hate\": {\n    \"key3\": {\n      \"age\": 3,\n      \"kind\": \"shark\",\n      \"sharktype\": \"saw\"\n    },\n    \"key4\": {\n      \"age\": 2,\n      \"kind\": \"salmon\",\n      \"friends\": [\n        {\n          \"age\": 1,\n          \"kind\": \"salmon\"\n        },\n        {\n          \"age\": 4,\n          \"kind\": \"shark\",\n          \"sharktype\": \"goblin\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Create Interface for Resources - TypeSpec - typespec\nDESCRIPTION: Declares an interface template for resource creation operations using TypeSpec generics. Takes Resource and Error types as template parameters to enforce strong typing. No methods are explicitly defined in this interface within this snippet; it's intended for use alongside other operation templates for resource creation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_28\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ResourceCreate<Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Defining a Date Query Parameter with Explicit RFC3339 Encoding (TypeSpec)\nDESCRIPTION: Defines a TypeSpec operation `get` that takes a required `utcDateTime` query parameter `value`. It explicitly specifies the encoding format as `DateTimeKnownEncoding.rfc3339` using the `@encode` decorator. The operation is routed to `/default`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/query_date.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\n\n@route(\"/default\")\nop get(\n  @query\n  @encode(DateTimeKnownEncoding.rfc3339)\n  value: utcDateTime,\n): NoContentResponse;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Base and Extended Models in TypeSpec\nDESCRIPTION: Defines two TypeSpec models within the 'Test' service namespace: `Pet` with `id` and `name` properties, and `Dog` which extends `Pet` and adds a `color` property restricted to 'black' or 'brown'. An operation `foo` is also defined, which returns an instance of the `Dog` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_extends.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\nmodel Pet {\n  id: string;\n  name: string;\n}\n\nmodel Dog extends Pet {\n  color: \"black\" | \"brown\";\n}\n\nop foo(): Dog;\n```\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Defining a Binary File Body with Explicit Content-Type Header in TypeSpec\nDESCRIPTION: This TypeSpec snippet shows an incorrect attempt to define an operation `downloadImage` for returning binary image files. Defining the body as `File` alongside an explicit `@header contentType: \"image/png\" | \"image/jpeg\"` causes TypeSpec to treat the `File` as a structured model for serialization, not as the raw image data. This approach is discouraged. It requires the `@typespec/http` library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\n// Warning: HTTP File body is serialized as a structured model in 'image/png, image/jpeg' instead of being\n// treated as the contents of a file because an explicit Content-Type header is defined.\nop downloadImage(): {\n  @header contentType: \"image/png\" | \"image/jpeg\";\n  @body file: File;\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting Model Property Spacing (Correct) in TypeSpec\nDESCRIPTION: Demonstrates the correct practice ('good') of keeping simple model properties (those without preceding decorators or comments) adjacent to each other without extra blank lines for a compact layout.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_10\n\nLANGUAGE: tsp\nCODE:\n```\n// good\nmodel Foo {\n  one: string;\n  two: string;\n  three: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Discriminating and Transforming Transport Data to WidgetData in TypeScript\nDESCRIPTION: This TypeScript function implements the core logic for transforming transport data into a `WidgetData` object. It examines the `kind` discriminator property in the input data and invokes the corresponding specific transformation function (`jsonWidgetData0ToApplicationTransform` or `jsonWidgetData1ToApplicationTransform`) to create the correct variant of the `WidgetData` union. It handles null/undefined input and logs a warning for unrecognized `kind` values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/discriminated_union.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport function jsonWidgetDataToApplicationDiscriminator(input_?: any): WidgetData {\n  if (!input_) {\n    return input_ as any;\n  }\n  const discriminatorValue = input_.kind;\n  if (discriminatorValue === \"kind0\") {\n    return jsonWidgetData0ToApplicationTransform(input_ as any)!;\n  }\n\n  if (discriminatorValue === \"kind1\") {\n    return jsonWidgetData1ToApplicationTransform(input_ as any)!;\n  }\n  console.warn(`Received unknown kind: ` + discriminatorValue);\n  return input_ as any;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Usage of 'is Record<T>' with Incompatible Property Types in TypeSpec\nDESCRIPTION: Illustrates an invalid scenario where a model uses `is Record<string>`, requiring all properties to be assignable to `string`. The explicitly defined `age` property of type `int32` violates this constraint, resulting in a compile-time error as `int32` is not assignable to `string`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Person is Record<string> {\n  age: int32;\n  //   ^ int32 is not assignable to string\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Example Values on Data Types in TypeSpec\nDESCRIPTION: Shows assigning example values to models with the @example decorator. Useful for documentation and tooling that auto-generates sample inputs/outputs. The example argument is an object literal corresponding to instance values. No dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_9\n\nLANGUAGE: tsp\nCODE:\n```\n@example(#{name: \"Fluffy\", age: 2})\nmodel Pet {\n name: string;\n age: int32;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Unnamed Union Expression in TypeSpec\nDESCRIPTION: This snippet demonstrates how to create an unnamed union type alias named `Breed` in TypeSpec using the `|` operator. The `Breed` type can represent exactly one of the types `Beagle`, `GermanShepherd`, or `GoldenRetriever`. This is useful for creating simple unions where explicit variant names are not required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/unions.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nalias Breed = Beagle | GermanShepherd | GoldenRetriever;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a PUT Operation in TypeSpec\nDESCRIPTION: Uses the `@put` decorator to define an operation named `set` that corresponds to an HTTP PUT request. The operation currently takes no parameters and returns `void`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_1\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@put op set(): void\n```\n\n----------------------------------------\n\nTITLE: Marking a List Operation with @list in TypeSpec\nDESCRIPTION: Illustrates how to annotate an operation as a paginated list provider using the @list decorator in TypeSpec. This helps tooling and code generators recognize paginated list endpoints, ensuring consistent API design and pagination handling. Used with operations that return paginated resource lists.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\n@list\n```\n\n----------------------------------------\n\nTITLE: Defining External Documentation Model with TypeSpec - Typespec\nDESCRIPTION: This snippet defines a model called ExternalDocs in the TypeSpec.OpenAPI namespace, representing a reusable schema for referencing external documentation in OpenAPI-generated specs. It requires no dependencies other than TypeSpec itself. The model is intended to be expanded with string properties for documentation URL and an optional description, serving as a fundamental building block in OpenAPI metadata handling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/reference/data-types.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.OpenAPI.ExternalDocs\n```\n\n----------------------------------------\n\nTITLE: OpenAPI3 Representation of Model with Inline Namespace\nDESCRIPTION: This YAML snippet shows the OpenAPI3 schema definition for the `Book` model. The `xml` object specifies the `prefix` ('smp') and `namespace` ('http://example.com/schema') corresponding to the TypeSpec definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nBook:\n  type: object\n  properties:\n    id:\n      type: integer\n    title:\n      type: string\n    author:\n      type: string\n  xml:\n    prefix: \"smp\"\n    namespace: \"http://example.com/schema\"\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing HEAD Model Operation with Header Mapping - TypeScript\nDESCRIPTION: This TypeScript function executes the HTTP HEAD request defined in TypeSpec, accepting a model as input and mapping its optional 'foo' property to a header if present. Dependencies include client context, utilities for request construction, and error handling mechanisms. The function expects a VisibilityModel input, optionally an options object, and leverages transformation and expansion helpers to compose the request. On response, it triggers optional callbacks and throws a custom error for non-200 responses; the function is asynchronous and does not return a value for successful requests, emphasizing HTTP status and body checks. Constraints include reliance on client conventions and a specific error handling strategy.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/query-parameter.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function headModel(\\n  client: TestClientContext,\\n  input: VisibilityModel,\\n  options?: HeadModelOptions,\\n): Promise<void> {\\n  const path = parse(\"/\").expand({});\\n  const httpRequestOptions = {\\n    headers: {\\n      ...(input.foo && { foo: input.foo }),\\n    },\\n    body: jsonVisibilityModelToTransportTransform(input),\\n  };\\n  const response = await client.pathUnchecked(path).head(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 200 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ServiceOptions Model for Service Metadata (Typespec)\nDESCRIPTION: Introduces the ServiceOptions model to encapsulate optional service-level metadata, such as title and version. These properties assist in describing and versioning TypeSpec services, with both fields marked as optional strings.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_20\n\nLANGUAGE: typespec\nCODE:\n```\nmodel ServiceOptions\n\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Client Function for Record Return Type\nDESCRIPTION: This generated TypeScript function `foo` implements the client-side logic for the corresponding TypeSpec `foo` operation. It takes a `TestClientContext` and optional `FooOptions`, makes a GET request to the base path ('/'), and expects a JSON response. If the response is successful (status 200) and contains JSON, it transforms the body into a `Record<string, string>` using `jsonRecordStringToApplicationTransform`, directly reflecting the `Widget is Record<string>` definition in TypeSpec. It depends on helper functions like `parse` and `createRestError` for path handling and error creation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/additional-properties/is.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function foo(\n  client: TestClientContext,\n  options?: FooOptions,\n): Promise<Record<string, string>> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return jsonRecordStringToApplicationTransform(response.body)!;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Extensions to JSON Schemas in TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.extension` decorator allows adding custom properties (vendor extensions or keywords) to the emitted JSON Schema for any TypeSpec type (`unknown` target). It takes a `key` (string) for the property name and a `value`. Scalar values require `typeof` to be treated as schemas; otherwise, they, values wrapped in `Json<Data>`, or values using `#{} / #[]` syntax are emitted as raw JSON values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.extension(key: valueof string, value: unknown | valueof unknown)\n```\n\n----------------------------------------\n\nTITLE: Encoding Scalar Types and Model Properties in TypeSpec\nDESCRIPTION: These snippets show various uses of the @encode decorator to control serialization format for scalars and model properties. Options include specifying known encoding names (e.g., 'rfc7231', 'unixTimestamp') or encoding numeric types as string. Dependencies vary based on target scalar type; outputs will be serialized in the specified format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\n@encode(\"rfc7231\")\nscalar myDateTime extends offsetDateTime;\n```\n\nLANGUAGE: tsp\nCODE:\n```\n@encode(\"unixTimestamp\", int32)\nscalar myDateTime extends unixTimestamp;\n```\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Pet {\n  @encode(string) id: int64;\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Client Operation with Path Parameter Handling in TypeScript\nDESCRIPTION: This TypeScript function `read` serves as the client-side implementation for the `read` operation defined in TypeSpec. It accepts the client context, the `id` path parameter, and optional request options. It constructs the final URL by expanding the path template `/widgets/{id}` with the provided `id`, makes a GET request, handles potential response callbacks, and processes the response, returning void on success (status 204) or throwing an error otherwise.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/path-parameter-in-model.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function read(\n  client: WidgetsClientContext,\n  id: string,\n  options?: ReadOptions,\n): Promise<void> {\n  const path = parse(\"/widgets/{id}\").expand({\n    id: id,\n  });\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Operation Parameter Examples with @opExample in TypeSpec (TSP)\nDESCRIPTION: This snippet uses the @opExample decorator to define example values for operation parameters. The value under the parameters property must be assignable to the operation's parameter signature. No returnType is specified. Use when you want to illustrate example inputs for an operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/examples.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\n@opExample(#{ parameters: #{ name: \\\"Max\\\", age: 3 } })\\nop write(name: string, age: int32): void;\n```\n\n----------------------------------------\n\nTITLE: Defining a Resource Namespace with @route - TypeSpec\nDESCRIPTION: This snippet demonstrates how to declare a namespace as a REST resource using the @route decorator in TypeSpec. The namespace 'Pets' is assigned the base path '/pets', and operations defined within this namespace will be accessible under that route. Requires the 'Http' library via the 'using Http;' statement; no explicit operations are defined in this example.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/resource-routing.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nusing Http;\\n\\n@route(\"/pets\")\\nnamespace Pets {\\n\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying continuationToken Pagination Decorator in TypeSpec\nDESCRIPTION: This snippet demonstrates the usage of the @continuationToken decorator on a model property and an operation parameter in TypeSpec to control pagination flows. There are no dependencies, and it must be used both in the model and operation response/request to enable paged API responses. Expects input and output to include a continuation token as a string, facilitating stateless pagination.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Page<T> {\n  @pageItems items: T[];\n  @continuationToken continuationToken: string;\n}\n@list op listPets(@continuationToken continuationToken: string): Page<Pet>;\n```\n\n----------------------------------------\n\nTITLE: Integrating Generated Router as Express Middleware in TypeScript\nDESCRIPTION: Shows how to use the generated router with an Express.js application by attaching its expressMiddleware property. Requires 'express' package, an Express app instance, and a router exposing expressMiddleware. Input: none directly; Output: Express server listens on port 8080 with router middleware handling requests.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-js/project.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport express from \"express\";\n\nconst app = express();\n\napp.use(router.expressMiddleware);\n\napp.listen(8080, () => {\n  console.log(\"Server listening on http://localhost:8080\");\n});\n```\n\n----------------------------------------\n\nTITLE: Compiling with TypeSpec and HTTP Client JS Emitter - Bash\nDESCRIPTION: Shows how to use the tsp (TypeSpec compiler) command-line tool to compile the current TypeSpec project (\".\") and emit an HTTP client library using the @typespec/http-client-js emitter. This command assumes the TypeSpec compiler and the relevant emitter plugin are installed. The output will be generated in the configured output directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/http-client-js\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Discriminators for Polymorphism in TypeSpec\nDESCRIPTION: This snippet illustrates how to implement nested discrimination in a TypeSpec inheritance hierarchy. The base model `Pet` is discriminated by `kind`. The intermediate model `Cat`, which extends `Pet`, is further discriminated by `breed`. Specific cat breed models like `Siamese` and `Bengal` extend `Cat` and define their specific `breed` values. The `Dog` model simply extends `Pet`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/discriminated-types.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@discriminator(\"kind\")\nmodel Pet {\n  kind: string;\n  name: string;\n  weight?: float32;\n}\n\n@discriminator(\"breed\")\nmodel Cat extends Pet {\n  kind: \"cat\";\n  breed: string;\n  meow: int32;\n}\n\n@discriminator(\"breed\")\nmodel Siamese extends Cat {\n  breed: \"siamese\";\n}\n\n@discriminator(\"breed\")\nmodel Bengal extends Cat {\n  breed: \"bengal\";\n}\n\nmodel Dog extends Pet {\n  kind: \"dog\";\n  bark: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Integer Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines a generic `integer` scalar for representing arbitrary-length integer values, analogous to 'BigInteger' in some typing systems. Used for flexible integer fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_42\n\nLANGUAGE: typespec\nCODE:\n```\nscalar integer\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Path and Create Visibility - TypeSpec - typespec\nDESCRIPTION: This TypeSpec snippet details how to annotate a User model with @path to specify that the id is included in the HTTP path and @visibility to make the password property visible only on creation requests. This enables concise, protocol-agnostic model definitions for use across operations. The interface leverages @route and @post decorators to define a create operation. Prerequisites include TypeSpec tooling and understanding of metadata decorators. Important parameters include @path for request mapping and @visibility for request/response differentiation; expected behavior is context-aware HTTP mapping for client/server interactions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\nmodel User {\n  name: string;\n  @path id: string;\n  @visibility(Lifecycle.Create) password: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying BasicAuth To All Namespace Operations (Typespec)\nDESCRIPTION: Shows how to decorate a namespace so that all operations within require BasicAuth authentication. Operations 'one' and 'two' are both protected. Assumes BasicAuth is imported.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n@useAuth(BasicAuth)\\nnamespace MyService;\\n\\nop one(): void;\\nop two(): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Service Endpoint - Typespec\nDESCRIPTION: Shows how to apply the @server decorator to a namespace to specify a single service endpoint. No parameters are provided beyond the endpoint URL. Requires TypeSpec's HTTP decorators, and the decorated namespace designates a root endpoint for the API.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_16\n\nLANGUAGE: typespec\nCODE:\n```\n@service\n@server(\"https://example.com\")\nnamespace PetStore;\n```\n\n----------------------------------------\n\nTITLE: ApiKey Authentication in Request Header With @useAuth (Typespec)\nDESCRIPTION: Applies API key authorization via custom header (\\\"X-API-KEY\\\") using the ApiKeyAuth model and @useAuth decorator. Requires the security scheme to be already defined/imported.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n@useAuth(ApiKeyAuth<ApiKeyLocation.header, \\\"X-API-KEY\\\">)\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Route Patterns in TypeSpec - TypeSpec\nDESCRIPTION: Demonstrates how to use the @route decorator and its variants to set relative URI templates for operations compliant with RFC 6570. These snippets show applying @route to operations for single resources, reserved characters, and query parameters, allowing for fine-grained control over request mapping. Requires TypeSpec language and the Http library; inputs are string route templates, and outputs are properly-routed operations within a service namespace or interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/README.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.route(path: valueof string)\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/widgets/{id}\") op getWidget(@path id: string): Widget;\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/files{+path}\") op getFile(@path path: string): bytes;\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/files\") op list(select?: string, filter?: string): Files[];\n@route(\"/files{?select,filter}\") op listFullUriTemplate(select?: string, filter?: string): Files[];\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Model with Basic Array Properties\nDESCRIPTION: This TypeSpec code defines a model named `Widget` within the `Test` namespace. The model includes properties `id` (an array of strings), `weight` (an array of 32-bit integers), and `color` (an array of a union type allowing 'red' or 'blue' strings). An operation `foo` is declared which returns an instance of the `Widget` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/array-properties.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\nmodel Widget {\n  id: string[];\n  weight: int32[];\n  color: (\"red\" | \"blue\")[];\n}\nop foo(): Widget;\n```\n\n----------------------------------------\n\nTITLE: Composing Route Prefixes with Namespaces and Interfaces in TypeSpec - typespec\nDESCRIPTION: This code demonstrates advanced route organization by using @route decorators on namespaces and interfaces. All nested operations automatically inherit and are prefixed with the namespace/interface route, simplifying large API definitions. This pattern encourages modular and organized service design. Dependencies include Pet model and the Pets interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/store\")\nnamespace PetStore {\n  op hello(): void; // `/store`\n  @route(\"ping\") op ping(): void; // `/store/ping`\n\n  @route(\"/pets\")\n  interface Pets {\n    list(): Pet[]; // `/store/pets`\n    @route(\"{petId}\") read(petId: string): Pet; // `/store/pets/{petId}`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetKiosk Operation using Spread Syntax in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines the `GetKioskRequest` model with a path parameter `id` and the `GetKiosk` operation. The operation uses the spread syntax (`... GetKioskRequest`) to incorporate the parameters from the model. It's decorated with `@get` and `@route` to map it to an HTTP GET request. The return type is a union of `Kiosk` (success) and `RpcStatus` (error). This approach leads to a Swagger definition where parameters are referenced via `$ref`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/grpc-kiosk-example/README.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nmodel GetKioskRequest {\n    @path\n    id: int32;\n}\n\n@doc(\"Get a kiosk.\")\n@get\n@route(\"kiosks/{id}\")\nop GetKiosk(... GetKioskRequest): Kiosk | RpcStatus;\n```\n\n----------------------------------------\n\nTITLE: Specifying API Metadata using Decorators - TypeSpec\nDESCRIPTION: Uses built-in decorators (@service, @info, @doc) to express OpenAPI info object fields in TypeSpec. Adds metadata such as title, contact, and license. Inputs: TypeSpec namespace with decorators. Outputs: OpenAPI info section with equivalent values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_36\n\nLANGUAGE: typespec\nCODE:\n```\n/** The Contoso Widget Service provides access to the Contoso Widget API. */\n@service(#{ title: \"Widget Service\" })\n@info(#{\n  contact: #{ name: \"API Support\", email: \"contact@contoso.com\" },\n  license: #{ name: \"Apache 2.0\", url: \"https://www.apache.org/licenses/LICENSE-2.0.html\" },\n})\nnamespace DemoService;\n```\n\n----------------------------------------\n\nTITLE: Creating Scalar Values using Initializers in TypeSpec\nDESCRIPTION: This snippet shows how to create scalar values using the initializer syntax for built-in scalar types extended from `numeric`, `string`, and `boolean`. It demonstrates initializing an `int8` value with `100` and a `string` value with `\"hello\"`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nconst n = int8(100);\nconst s = string(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Generating a TypeScript Serializer for Scalar Number Payload\nDESCRIPTION: This TypeScript function `createPayloadToTransport` acts as the serializer for the `create` operation's request body. Because the payload is a primitive `number`, no complex serialization logic is necessary, and the function simply returns the input `payload` directly. The non-null assertion operator (`!`) indicates an assumption that the payload is non-null at this point.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/scalar-payload.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport function createPayloadToTransport(payload: number) {\n  return payload!;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Service Operation in TypeSpec Language\nDESCRIPTION: Defines a namespace and operation in TypeSpec for the Users service with route, HTTP method, and structured return types. This operation will be used to generate service interfaces and router bindings in the output. Inputs: 'user' parameter of type User; Output: a union of response types wrapped in WithStandardErrors. Requires TypeSpec compiler and correct namespace context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-js/project.md#_snippet_3\n\nLANGUAGE: TypeSpec\nCODE:\n```\nnamespace Users {\n  @route(\"/users\")\n  @post\n  op create(\n    user: User,\n  ): WithStandardErrors<UserCreatedResponse | UserExistsResponse | InvalidUserResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapped Complex Array Schema - OpenAPI3 YAML\nDESCRIPTION: Defines OpenAPI3 YAML schema for a model with a wrapped array of objects, including XML naming and wrapping configuration. Commonly used for APIs requiring strict XML schema outputs. Supports complex types as array elements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_17\n\nLANGUAGE: YAML\nCODE:\n```\nTag:\n  type: \"object\"\n  properties:\n    name:\n      type: \"string\"\n  xml:\n    name: \"XmlTag\"\nPet:\n  type: object\n  properties:\n    tags:\n      type: array\n      items:\n        allOf:\n          - $ref: \"#/components/schemas/Tag\"\n        xml:\n          name: XmlTag\n      xml:\n        wrapped: true\n  xml:\n    name: XmlPet\n```\n\n----------------------------------------\n\nTITLE: Nesting HTTP Body with bodyRoot Decorator - TypeSpec (typespec)\nDESCRIPTION: Illustrates the use of @TypeSpec.Http.bodyRoot to nest the HTTP request or response body inside a property, allowing header/query/path parameters outside the nested object. This is applied on model properties and works in conjunction with other parameter decorators. No parameters are needed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.bodyRoot\n```\n\nLANGUAGE: typespec\nCODE:\n```\nop upload(\n  @bodyRoot user: {\n    name: string;\n    @header id: string;\n  },\n): void;\nop download(): {\n  @bodyRoot user: {\n    name: string;\n    @header id: string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Options Interface for the Client Operation in TypeScript\nDESCRIPTION: This TypeScript interface `CreateOptions` defines the optional parameters that can be passed to the `create` client operation function. It extends a base `OperationOptions` interface and includes the optional `age` and `foo` properties derived from the TypeSpec definition. These options allow customization of the request, although `foo` corresponds to a header in the TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/body_root_anonymous.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport interface CreateOptions extends OperationOptions {\n  age?: string;\n  foo?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Overloaded Operations with @overload in TypeSpec\nDESCRIPTION: Applies @overload to specify that an operation is an overload of another base operation. The base operation should represent a union of all overload options. Used to model polymorphic API endpoints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_42\n\nLANGUAGE: typespec\nCODE:\n```\n@overload(overloadbase: Operation)\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for PUT /type/property/additionalProperties/extendsDifferentSpreadModel\nDESCRIPTION: This JSON represents the expected input body for a PUT request to `/type/property/additionalProperties/extendsDifferentSpreadModel`. It demonstrates sending a model containing a known property ('knownProp') along with additional properties ('prop', 'derivedProp') that are complex objects, testing the handling of model-typed additional properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_193\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"knownProp\": \"abc\",\n  \"prop\": { \"state\": \"ok\" },\n  \"derivedProp\": { \"state\": \"ok\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Directory with TypeSpec\nDESCRIPTION: Demonstrates importing all contents of a TypeSpec directory by specifying the directory path. If the directory contains a main.tsp file or is a TypeSpec package, its contents are loaded. This approach enables organization and composition of larger codebases. Inputs: directory path; Output: all relevant files in the directory are imported as defined by package rules or main.tsp presence.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/imports.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"./models\"; // equivalent to `import \"./models/main.tsp\";\n```\n\n----------------------------------------\n\nTITLE: Referencing Types within a Namespace in TypeSpec\nDESCRIPTION: Shows how to access a type (e.g., `SampleModel`) defined within a specific namespace (`SampleNamespace`) from another scope. This is done by using the fully qualified name, which consists of the namespace name followed by a dot (`.`) and the type name.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/namespaces.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Foo {\n  sample: SampleNamespace.SampleModel;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Model Inheritance with Extends Keyword in TypeSpec\nDESCRIPTION: This code snippet shows how to model inheritance in TypeSpec using the extends keyword, establishing a semantic parent-child relationship between models. In OpenAPI, this produces a schema that uses 'allOf' to combine base and derived properties, supporting API versioning and polymorphism.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_20\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Pet {\n  name: string;\n  age: int32;\n}\n\nmodel Dog extends Pet {\n  breed: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Generic File Model to Transport - TypeScript\nDESCRIPTION: Implements a serializer that maps a generic File object to a transport-friendly representation, ensuring the 'contents' field is not encoded (e.g., not base64 encoded). Relies on TypeScript types for File, and the function directly copies contentType, filename, and contents from the input. The input parameter can be null or undefined; output is a plain object matching the input structure, suitable for network transport. Limitation: assumes input properties are already in proper format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/file.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonFileToTransportTransform(input_?: File | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    contentType: input_.contentType,\n    filename: input_.filename,\n    contents: input_.contents,\n  }!;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Assigning Integer Values to Enum Members in TypeSpec\nDESCRIPTION: Illustrates assigning integer values to enum members using the `:` operator. This method is used when enum members need to represent specific numeric integer constants.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/enums.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nenum Foo {\n  One: 1,\n  Ten: 10,\n  Hundred: 100,\n  Thousand: 1000,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Deprecating Implicit Multipart Bodies in Favor of Explicit HttpPart Usage - TypeSpec Diff\nDESCRIPTION: This code diff demonstrates the deprecation of implicit multipart body parameters, guiding the developer to switch to explicit use of the @multipartBody decorator and HttpPart<T> type for each property. This offers more precise multipart handling and aligns the codebase with updated best practices in TypeSpec service modeling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=tsp\nop upload(\n  @header contentType: \"multipart/form-data\",\n-  @body body: {\n+  @multipartBody body: {\n-    name: string;\n+    name: HttpPart<string>;\n-    avatar: bytes;\n+    avatar: HttpPart<bytes>;\n  }\n): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Encoded Duration Values\nDESCRIPTION: Provides an example JSON payload demonstrating the serialized output for `duration` properties, including the default `ISO8601` format ('PT5M5S') and custom encodings specified in seconds as integer (`int32`, '305') and float (`float32`, '305.0') types, corresponding to the preceding TypeSpec `User` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/encoding.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"runtime\": \"PT5M5S\",\n  \"runtimeInSecondsInt\": \"305\",\n  \"runtimeInSecondsFloat\": \"305.0\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an Implicit Request Body Parameter in TypeSpec\nDESCRIPTION: Defines an operation `add` where the request body is implicitly defined by spreading the `Pet` model (`...Pet`). This indicates the operation expects a request body whose structure matches the `Pet` model. The operation returns `void`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_13\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop add(...Pet): void\n```\n\n----------------------------------------\n\nTITLE: API Key Passed In Query String (HTTP)\nDESCRIPTION: Shows a raw HTTP request with an API key included in the query parameter. Used for documentation of ApiKeyAuth usage when sending the key in the query string.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /something?api_key=abcdef12345\n```\n\n----------------------------------------\n\nTITLE: Defining File Model for HTTP Payloads in TypeSpec\nDESCRIPTION: Defines the generic `TypeSpec.Http.File` model for representing files in HTTP requests, responses, or multipart payloads. It takes template parameters `ContentType` (allowed MIME types) and `Contents` (type of file content, e.g., `string` or `bytes`). Properties `contentType`, `contents`, and `filename` are mapped to specific HTTP parts (`Content-Type` header, body, `Content-Disposition` header's `filename` parameter respectively) by default, though `filename`'s location might need overriding for requests. The model can also be serialized as a JSON object if an explicit `Content-Type` header is specified for the payload.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.File<ContentType, Contents>\n```\n\n----------------------------------------\n\nTITLE: Using Single-line and Multi-line Comments for Internal Documentation in TypeSpec\nDESCRIPTION: Illustrates TypeSpec's support for both single-line (//) and multi-line (/* ... */) comments inside a model. These comments are ignored by the compiler and intended for internal developer notes only. No external documentation is generated from these comments, and there are no dependencies beyond TypeSpec's basic syntax.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/documentation.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n// This is a single-line comment\nmodel Dog {\n  /* This is a multi-line comment\n  that spans multiple lines */\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Fields with @invisible Decorator - TypeSpec (tsp)\nDESCRIPTION: This snippet illustrates how to hide a field from all lifecycle phases using the @invisible decorator in TypeSpec, replacing the deprecated @visibility(\"none\"). The @invisible(Lifecycle) decorator marks the field as invisible for all supported lifecycles. Requires the @invisible decorator and Lifecycle enum to be available within the TypeSpec environment. The decorated field is excluded from generated API surfaces across all lifecycles.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-18.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n@invisible(Lifecycle)\nexample: string;\n```\n\n----------------------------------------\n\nTITLE: Assigning Default Values to Model Properties in TypeSpec\nDESCRIPTION: Shows how to provide default values for model properties using the `=` operator. The `address` property defaults to \"wild\" if not provided, and `age` defaults to 0. Default values can be applied to both optional and required properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Dog {\n  address?: string = \"wild\";\n  age: uint8 = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Interface for Foo (Complex Record)\nDESCRIPTION: Generated TypeScript interface `Foo` corresponding to the TypeSpec model containing a complex record. The `my_values` property is mapped to `myValues`, and its type is `Record<string, Bar>`, referencing the generated `Bar` interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/record.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/models.ts interface Foo\nexport interface Foo {\n  myValues: Record<string, Bar>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configurable TypeSpec Emitter with JSON Schema Options - TypeScript\nDESCRIPTION: Implements a configurable TypeSpec emitter allowing custom options through a JSON schema. Registers option types and schema using '@typespec/compiler' exports, and exposes a $onEmit handler that writes a greeting message to file, using an option as a parameter. Inputs include the EmitContext with EmitterOptions, and configuration options passed to the emitter. Outputs a text file using the custom option as a string. Key constraint: option schema and property names follow the kebab-case convention.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitters-basics.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  JSONSchemaType,\n  createTypeSpecLibrary,\n  EmitContext,\n  resolvePath,\n} from \"@typespec/compiler\";\nimport { internalLib } from \"./lib.js\";\n\nexport interface EmitterOptions {\n  \"target-name\": string;\n}\n\nconst EmitterOptionsSchema: JSONSchemaType<EmitterOptions> = {\n  type: \"object\",\n  additionalProperties: false,\n  properties: {\n    \"target-name\": { type: \"string\", nullable: true },\n  },\n  required: [],\n};\n\nexport const $lib = createTypeSpecLibrary({\n  internal: internalLib,\n  emitter: {\n    options: EmitterOptionsSchema,\n  },\n});\n\nexport async function $onEmit(context: EmitContext<EmitterOptions>) {\n  const outputDir = resolvePath(context.emitterOutputDir, \"hello.txt\");\n  const name = context.options.targetName;\n  await context.program.host.writeFile(outputDir, `hello ${name}!`);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Content-Type in File Upload (Multipart Form-Data) - HTTP\nDESCRIPTION: Gives two POST request variants: one with no content-type in the file part header and one with 'application/octet-stream'. Useful for endpoints where content-type on file uploads is optional, but filename must be provided. Ensures compatibility with clients that may omit content-type for binary file uploads.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_57\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /upload HTTP/1.1\\nContent-Length: 428\\nContent-Type: multipart/form-data; boundary=abcde12345\\n\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"profileImage\\\"; filename=\\\"<any-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .jpg file…}\\n--abcde12345\n```\n\n----------------------------------------\n\nTITLE: Specifying an Alternative Configuration File via --config Flag (Bash)\nDESCRIPTION: This Bash command demonstrates using the `--config` flag to point the TypeSpec compiler to a configuration file other than the default `tspconfig.yaml`. In this example, it uses `./tspconfig.alt.yaml`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --config ./tspconfig.alt.yaml\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec to OpenAPI 3.0\nDESCRIPTION: Demonstrates how to compile a specific TypeSpec file (`main.tsp`) using the TypeSpec compiler CLI (`tsp`). The `--emit @typespec/openapi3` flag specifies that the output should be generated using the OpenAPI 3 emitter, resulting in an OpenAPI 3.0 specification file (typically `openapi.json` located in the `./tsp-output/` directory).\nSOURCE: https://github.com/microsoft/typespec/blob/main/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile main.tsp --emit @typespec/openapi3\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for Type_Array_NullableBooleanValue_put Endpoint\nDESCRIPTION: This JSON snippet represents the expected request body for the PUT request to the `/type/array/nullable-boolean` endpoint. The request body should be a JSON array containing boolean values and null.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_139\n\nLANGUAGE: json\nCODE:\n```\n```json\n[true, null, false]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining @minProperties Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@minProperties` decorator from the `TypeSpec.JsonSchema` namespace. Applied to record types (`Record<unknown>`) or a `ModelProperty` representing an object, it sets the minimum number of properties the object must have. The `value` parameter takes an integer (`int32`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_16\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.minProperties(value: valueof int32)\n```\n\n----------------------------------------\n\nTITLE: XML Representation with Attribute and Text Content\nDESCRIPTION: This XML snippet shows the expected structure for the `BlobName` model. The `language` property appears as an attribute on the `<BlobName>` element, and the `content` property's value becomes the text node within the element. Note the typo in the closing tag in the original example.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_49\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<BlobName language=\"abc\">\n  ...content...\n</smp:Book>\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Shared Route Paths Using @sharedRoute Decorator - Typespec\nDESCRIPTION: Shows the application of the @sharedRoute decorator to an operation, allowing multiple operations to share the same route path. Key parameter here is the route string, and the code demonstrates this for an endpoint fetching a Widget by id. Requires route and operation constructs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_20\n\nLANGUAGE: typespec\nCODE:\n```\n@sharedRoute\n@route(\"/widgets\")\nop getWidget(@path id: string): Widget;\n```\n\n----------------------------------------\n\nTITLE: Specifying a Status Code in TypeSpec Response\nDESCRIPTION: Defines an operation `read` that explicitly sets the HTTP success status code to 200. The `{@statusCode _: 200, ...Pet}` syntax specifies the status code along with the `Pet` model spread into the response body.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_14\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop read(): {@statusCode _: 200, ...Pet}\n```\n\n----------------------------------------\n\nTITLE: Contextual Interpretation of Enum Member References in TypeSpec\nDESCRIPTION: This snippet demonstrates how references to enum members (`Color.red`) are interpreted based on context. When used as an argument to `@setColorValue` (expecting `valueof string`), it passes the member's underlying string value (`\"red\"`). When used with `@setColorMember` (expecting `Reflection.EnumMember`), it passes the actual enum member reference.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\nextern dec setColorValue(target: unknown, color: valueof string);\nextern dec setColorMember(target: unknown, color: Reflection.EnumMember);\n\nenum Color {\n  red,\n  green,\n  blue,\n}\n\n@setColorValue(Color.red) // same as passing the literal \"red\"\n@setColorMember(Color.red) // passes the enum member Color.red\nmodel A {}\n```\n\n----------------------------------------\n\nTITLE: Using Dedicated Headers Model for Nested Metadata - TypeSpec - typespec\nDESCRIPTION: This example separates header-related properties by referencing a distinct Headers model within the Thing model. The Headers model employs the @header decorator to indicate envelope transmission for the example property. The pattern shows how to organize metadata in reusable model fragments. Dependencies are intrinsic to TypeSpec, and modeling choices influence API surface shapes. Inputs are structured to match the models; output mapping is based on HTTP context (headers, payload).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Thing {\n  headers: Headers;\n  name: string;\n}\nmodel Headers {\n  @header example: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec with Python HTTP Client Emitter - Bash\nDESCRIPTION: Illustrates use of the tsp CLI to compile TypeSpec projects and emit a Python HTTP client SDK using the specified emitter. This step assumes @typespec/http-client-python is already installed and available in the project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-python/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/http-client-python\n```\n\n----------------------------------------\n\nTITLE: Declaring Operation Options Interface in TypeScript\nDESCRIPTION: Provides a TypeScript interface extending 'OperationOptions' to encapsulate optional widget parameters. This allows precise typing of optional request parameters for the client operation. Depends on the definition of OperationOptions, and expects 'age' as an optional string parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/spread_body.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CreateOptions extends OperationOptions {\n  age?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the @removed Decorator Syntax in TypeSpec\nDESCRIPTION: This snippet defines the syntax for the `@removed` decorator. It takes an `EnumMember` (`version`) specifying when the targeted element (Model, Property, Operation, etc.) was removed from the API.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Versioning.removed(version: EnumMember)\n```\n\n----------------------------------------\n\nTITLE: OpenAPI3 Representation of Model with Normalized Namespace\nDESCRIPTION: This YAML snippet shows the OpenAPI3 schema definition corresponding to the normalized namespace TypeSpec definition. It includes the schema for the `Book` model with its `xml` object specifying prefix and namespace, and a separate schema definition for the `Namespaces` enum.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nBook:\n  type: object\n  properties:\n    id:\n      type: integer\n    title:\n      type: string\n    author:\n      type: string\n  xml:\n    prefix: \"smp\"\n    namespace: \"http://example.com/schema\"\nNamespaces:\n  type: string\n  enum:\n    - http://example.com/schema\n```\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Models with Complex Record\nDESCRIPTION: Defines two TypeSpec models: `Bar` with a string property `bar_value`, and `Foo` with a property `my_values` which is a Record mapping strings to `Bar` objects. An operation `foo` is defined to return either a `Foo` or a `Bar` object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/record.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Bar {\n  bar_value: string;\n}\n\nmodel Foo {\n  my_values: Record<Bar>;\n}\n\nop foo(): Foo | Bar;\n```\n```\n\n----------------------------------------\n\nTITLE: Transport Serialization of Discriminated Union Variant in TypeScript\nDESCRIPTION: Defines a function to serialize a 'WidgetData' discriminated union instance for transport by forwarding the input to a discriminator-based dispatcher. If input is null or undefined, it returns as-is; otherwise, it uses 'jsonWidgetDataToTransportDiscriminator' to delegate based on the 'kind' field. This function is dependent on the availability of the discriminator dispatcher and assumes the union is correctly structured.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/discriminated_union_spread.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonWidgetDataToTransportTransform(input_?: WidgetData | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return jsonWidgetDataToTransportDiscriminator(input_);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Numeric Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Provides a generic `numeric` scalar representing any numeric value, used for abstract numeric fields in polymorphic models and APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_43\n\nLANGUAGE: typespec\nCODE:\n```\nscalar numeric\n```\n\n----------------------------------------\n\nTITLE: Defining the MovedResponse Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.MovedResponse` model. This represents an HTTP 301 Moved Permanently response, indicating a permanent redirection. It includes the `statusCode` fixed at `301` and the `location` header (string/URL) pointing to the new resource location.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_24\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.MovedResponse\n```\n\n----------------------------------------\n\nTITLE: Correct Decorator Invocation via context.call (TypeScript)\nDESCRIPTION: Demonstrates the recommended pattern for invoking one TypeSpec decorator from another using the context.call method. This ensures decorator calls are properly tracked for diagnostics and tooling. Dependencies include DecoratorContext and Type, with key parameters matching typical TypeSpec decorator signatures.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/eslint-plugin-typespec/docs/rules/call-decorator.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction $foo(context: DecoratorContext, target: Type) {}\\n\\nfunction $bar(context: DecoratorContext, target: Type) {\\n  context.call($foo, target);\\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction $foo(context: DecoratorContext, target: Type, name: string) {}\\n\\nfunction $bar(context: DecoratorContext, target: Type, name: string) {\\n  context.call($foo, target, `bar.${name}`);\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying @TypeSpec.OpenAPI.extension to Add Custom OpenAPI Data - TypeSpec\nDESCRIPTION: Illustrates how to use the @TypeSpec.OpenAPI.extension decorator to attach custom data to the OpenAPI element generated for a type. This decorator supports key-value parameterization, enabling the inclusion of custom OpenAPI extensions (such as x- fields). It can be applied to any target, accommodates any value type, and is particularly useful for extending OpenAPI output with vendor-specific or custom metadata.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/decorators.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.extension(key: valueof string, value: valueof unknown)\n```\n\n----------------------------------------\n\nTITLE: Defining and Returning Error Models in TypeSpec (TypeSpec)\nDESCRIPTION: This TypeSpec code snippet demonstrates how to define error models—such as NotFoundError, ValidationError, and InternalServerError—using the @error decorator, and how to integrate them as possible responses for CRUD operations in a Pet Store REST API. Dependencies include the @typespec/http library, which is imported to provide HTTP-specific types and decorators. Each operation in the Pets namespace specifies all valid responses, using TypeSpec union syntax to support multiple outcomes, and leverages status codes and @body annotations for both successful and error responses. Inputs include HTTP parameters and request bodies as appropriate for each endpoint, and outputs are structured objects representing either the main resource or a specific error. Constraints include enum validation, minimum/maximum values for fields, and use of TypeSpec's extensible modeling features.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/03-handling-errors.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nimport \"@typespec/http\";\n\nusing Http;\n\n@service(#{ title: \"Pet Store\" })\n@server(\"https://example.com\", \"Single server endpoint\")\nnamespace PetStore;\n\nmodel Pet {\n  id: int32;\n\n  @minLength(1)\n  name: string;\n\n  @minValue(0)\n  @maxValue(100)\n  age: int32;\n\n  kind: petType;\n}\n\nenum petType {\n  dog: \"dog\",\n  cat: \"cat\",\n  fish: \"fish\",\n  bird: \"bird\",\n  reptile: \"reptile\",\n}\n\n@route(\"/pets\")\nnamespace Pets {\n  @get\n  op listPets(): {\n    @statusCode statusCode: 200;\n    @body pets: Pet[];\n  };\n\n  @get\n  op getPet(@path petId: int32): {\n    @statusCode statusCode: 200;\n    @body pet: Pet;\n  } | {\n    @statusCode statusCode: 404;\n\n    // highlight-next-line\n    @body error: NotFoundError;\n  };\n\n  @post\n  op createPet(@body pet: Pet): {\n    @statusCode statusCode: 201;\n    @body newPet: Pet;\n  } | {\n    @statusCode statusCode: 202;\n    @body acceptedPet: Pet;\n    // highlight-start\n  } | {\n    @statusCode statusCode: 400;\n    @body error: ValidationError;\n  };\n  // highlight-end\n\n  @put\n  op updatePet(@path petId: int32, @body pet: Pet):\n    | {\n        @statusCode statusCode: 200;\n        @body updatedPet: Pet;\n        // highlight-start\n      }\n    | {\n        @statusCode statusCode: 400;\n        @body error: ValidationError;\n      }\n    | {\n        @statusCode statusCode: 404;\n        @body error: NotFoundError;\n      }\n    | {\n        @statusCode statusCode: 500;\n        @body error: InternalServerError;\n        // highlight-end\n      };\n\n  @delete\n  op deletePet(@path petId: int32): {\n    @statusCode statusCode: 204;\n  };\n}\n\n// highlight-start\n@error\nmodel NotFoundError {\n  code: \"NOT_FOUND\";\n  message: string;\n}\n\n@error\nmodel ValidationError {\n  code: \"VALIDATION_ERROR\";\n  message: string;\n  details: string[];\n}\n\n@error\nmodel InternalServerError {\n  code: \"INTERNAL_SERVER_ERROR\";\n  message: string;\n}\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Defining Model and Operation with utcDateTime Property - TypeSpec - TypeSpec\nDESCRIPTION: Defines a model Foo with a created_on property of type utcDateTime in TypeSpec, along with an operation foo that returns Foo. This demonstrates the schema definition for objects containing UTC timestamps, which are critical for subsequent type and function generation in TypeScript. No external dependencies are required, but the model's annotated structure drives TypeScript code generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/model_date_time.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\nmodel Foo {\n  created_on: utcDateTime;\n}\n\nop foo(): Foo;\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphism with an Enum Discriminator in TypeSpec\nDESCRIPTION: This example demonstrates using an enum (`PetKind`) as the discriminator type for polymorphism in TypeSpec. The `@discriminator` decorator on the base `Pet` model specifies the `kind` property, which is typed as `PetKind`. Derived models `Cat` and `Dog` extend `Pet` and set their `kind` property to the appropriate enum member (`PetKind.cat` or `PetKind.dog`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/discriminated-types.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nenum PetKind {\n  cat,\n  dog,\n}\n\n@discriminator(\"kind\")\nmodel Pet {\n  kind: PetKind;\n  name: string;\n  weight?: float32;\n}\nmodel Cat extends Pet {\n  kind: PetKind.cat;\n  meow: int32;\n}\nmodel Dog extends Pet {\n  kind: PetKind.dog;\n  bark: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using New `@actionSeparator` Decorator in TypeSpec REST\nDESCRIPTION: Example showing the recommended way to specify a route separator using the `@actionSeparator` decorator within the `@typespec/rest` library. This replaces the deprecated `@segmentSeparator` decorator.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_16\n\nLANGUAGE: typespec\nCODE:\n```\n@autoRoute\nnamespace Things {\n  @action\n  @actionSeparator(\":\")\n  @put\n  op customAction1(\n    @segment(\"things\")\n    @path\n    thingId: string,\n  ): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Indentation Example in TypeSpec Multi-line Strings\nDESCRIPTION: Provides an example of a multi-line string within a model property where the indentation of the content lines is less than the closing `\"\"\"`. This results in a `triple-quote-indent` error in TypeSpec, as all lines must share the same indentation level as the closing marker.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/type-literals.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n\n  // lines are less indented as the closing \"\"\"\"\n  prop4: \"\"\"\n    one\n    two\n      \"\"\";\n      ^-- error triple-quote-indent All lines in triple-quoted string lines must have the same indentation as closing triple quotes.\n```\n\n----------------------------------------\n\nTITLE: Optional Path Parameters Using @route Decorator - TypeSpec\nDESCRIPTION: This TypeSpec snippet illustrates the use of the @route decorator to define an operation with an optional path parameter. By adding a leading slash and marking the parameter as optional, the path segment will be included only when the parameter is supplied at runtime. This pattern is intended for routes where the parameter should not appear in the URI when not provided.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@route(\"optional{/param}/list\")\nop optional(@path param?: string): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Direct Decorator Application Equivalent to Augment Decorator\nDESCRIPTION: Shows the equivalent TypeSpec code using a direct decorator (`@tag`) that achieves the same result as the previous augment decorator example. This demonstrates that `@@tag(Dog, \"Sample\");` is functionally equivalent to `@tag(\"Sample\") model Dog {}`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/decorators.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@tag(\"Sample\")\nmodel Dog {}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Driven Pagination with Fixed Offset in TypeSpec\nDESCRIPTION: Demonstrates client-driven pagination where the number of items to skip (`@offset`) is defined as an operation parameter. This example uses a default offset of 0, meaning the first page is returned if `skip` is not provided. The `@list` decorator marks the operation for pagination, and `@pageItems` identifies the results array.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/pagination.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@list op listPets(@offset skip?: int32 = 0): {\n  @pageItems pets: Pet[];\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Service and Operation with Constant Header\nDESCRIPTION: This TypeSpec code defines a service namespace 'Test', a model 'Foo' with a 'name' property (string), and a GET operation named 'foo'. The operation explicitly requires the 'accept' header to have the constant value 'application/xml' and is expected to return an object conforming to the 'Foo' model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/constant-header.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\nmodel Foo {\n  name: string;\n}\n\n@get op foo(@header accept: \"application/xml\"): Foo;\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Operations with Request Body Content Types\nDESCRIPTION: Demonstrates how to define TypeSpec operations with specific request body content types using the `@header contentType` and `@body` decorators. The first operation `uploadImage` specifies a single content type ('image/png'). The second operation `analyze` uses a union type to allow multiple content types ('application/octet-stream', 'application/pdf', 'image/jpeg') for the request body.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@put op uploadImage(@header contentType: \"image/png\", @body image: bytes): void;\n@post op analyze(\n  @header contentType: \"application/octet-stream\" | \"application/pdf\" | \"image/jpeg\",\n  @body image: bytes,\n): string | Error;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple HTTP Servers with TypeSpec Decorators - TypeSpec\nDESCRIPTION: Illustrates how to declare multiple API servers using the @server decorator on a TypeSpec namespace. Each decorator instance describes a unique server URL and description, which are emitted as entries in the OpenAPI servers array. No dependencies are required beyond TypeSpec core and the OpenAPI emitter. Inputs include URL and description parameters for each server instance. Output is the resulting OpenAPI servers portion with provided metadata.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@server(\"https://api.example.com/v1\", \"Primary production endpoint\")\\n@server(\"https://api-dev.example.com/v1\", \"Development endpoint\")\\nnamespace MyService;\n```\n\n----------------------------------------\n\nTITLE: Combining Nested AND/OR Authentication Logic in @useAuth (Typespec)\nDESCRIPTION: Demonstrates a complex configuration where a client may satisfy authentication by using either a group (Auth1 AND Auth2) or a single scheme (Auth3). Useful for supporting multiple types of clients. Dependencies: Auth1, Auth2, and Auth3 schemes must be defined.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n// Use EITHER (Auth1 AND Auth2) OR Auth3\\n@useAuth([Auth1, Auth2] | Auth3)\n```\n\n----------------------------------------\n\nTITLE: Required Implicit Body Parameter - JSON\nDESCRIPTION: Illustrates handling for a required body parameter inferred from context, with the shape { \\\"name\\\": \\\"foo\\\" }. This enables concise API descriptions especially in language bindings with strong type inference.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"name\\\": \\\"foo\\\" }\n```\n\n----------------------------------------\n\nTITLE: Wrapped Custom Scalar Array Serialization - XML\nDESCRIPTION: Visualizes an XML structure with a wrapped array of custom scalar elements. The wrapper (ItemsTags) contains several ItemsName children. Matches the structure and names produced by related TypeSpec code. Inputs/outputs must align with scalar and wrapper names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_10\n\nLANGUAGE: XML\nCODE:\n```\n<XmlPet>\n  <ItemsTags>\n    <ItemsName>abc</ItemsName>\n    <ItemsName>def</ItemsName>\n  </ItemsTags>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Defining a GET Operation with Default Header in TypeSpec\nDESCRIPTION: This TypeSpec code defines a service namespace `Test` containing a GET operation named `get`. The operation accepts an optional header parameter `contentType` which defaults to \"application/json\" if not provided. The operation is expected to return a 32-bit integer.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/default_value_as_optional.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n\n@get op get(@header contentType: string = \"application/json\"): int32;\n```\n\n----------------------------------------\n\nTITLE: Basic $onEmit Function Structure using Emitter Framework Components\nDESCRIPTION: This TSX snippet shows a basic implementation of the `$onEmit` function required for a TypeSpec emitter using the emitter framework. It imports necessary components (`Output`, `SourceDirectory`, `SourceFile`) and functions (`writeOutput`), defines the output structure using JSX components, and then uses `writeOutput` to write the resulting files (a `src` directory and `README.md`) to the specified output directory provided by `EmitContext`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-framework.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Output, SourceDirectory, SourceFile } from \"@alloy-js/core\";\nimport type { EmitContext } from \"@typespec/compiler\";\nimport { writeOutput } from \"@typespec/emitter-framework\";\n\nexport async function $onEmit(context: EmitContext) {\n  await writeOutput(\n    <Output>\n      <SourceDirectory path=\"src\" />\n      <SourceFile path=\"README.md\" filetype=\"md\">\n        Hello world!\n      </SourceFile>\n    </Output>,\n    context.emitterOutputDir,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Paginated JSON Responses with Paging Links - JSON\nDESCRIPTION: These JSON response bodies illustrate server-driven pagination using a 'next' field containing a URL link for retrieving the subsequent page. The first response contains a pet array and a next-page URL; the next response only contains the next set of pets. The returned JSON objects include all result data in a 'pets' array, with the next field only appearing if further results are available. There are no special parameters required. Outputs correspond to GET responses for the documented endpoints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"pets\\\": [\\n    { \\\"id\\\": \\\"1\\\", \\\"name\\\": \\\"dog\\\" },\\n    { \\\"id\\\": \\\"2\\\", \\\"name\\\": \\\"cat\\\" }\\n  ],\\n  \\\"next\\\": \\\"http://[host]:[port]/payload/pageable/server-driven-pagination/link/nextPage\\\"\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"pets\\\": [\\n    { \\\"id\\\": \\\"3\\\", \\\"name\\\": \\\"bird\\\" },\\n    { \\\"id\\\": \\\"4\\\", \\\"name\\\": \\\"fish\\\" }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring XML Namespace with String Arguments using @ns Decorator (TSP)\nDESCRIPTION: Shows application of the @ns decorator in TypeSpec for defining XML namespaces and prefixes at both the model and property level using string arguments. The decorator requires the namespace URI string and the desired prefix. Inputs are model definitions with @ns on model and properties, outputs are XML elements bound to given namespaces with prefixes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\n@ns(\"https://example.com/ns1\", \"ns1\")\nmodel Foo {\n  @ns(\"https://example.com/ns1\", \"ns1\")\n  bar: string;\n\n  @ns(\"https://example.com/ns2\", \"ns2\")\n  bar: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PatchOptions Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.PatchOptions` model providing options specifically for HTTP PATCH operations. It includes an optional boolean property `implicitOptionality`. If set to `false`, it disables the default TypeSpec behavior that makes all properties in a PATCH request body deeply optional.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_33\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.Http.PatchOptions\n```\n```\n\n----------------------------------------\n\nTITLE: Applying BasicAuth Security Scheme With @useAuth (Typespec)\nDESCRIPTION: Demonstrates enforcing BasicAuth for all operations beneath the decorated namespace or type. Requires the BasicAuth model to be defined/imported from http library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@useAuth(BasicAuth)\n```\n\n----------------------------------------\n\nTITLE: Reporting Diagnostics with reportDiagnostic - TypeScript\nDESCRIPTION: This snippet shows how to use the `reportDiagnostic` helper to emit diagnostics in a TypeSpec project. Diagnostics can use fixed messages, parameterized values, or select different messages via `messageId`. Dependencies: the reporting helpers exported from the diagnostic declaration file, such as `reportDiagnostic`. Inputs include the diagnostic code, format object for parameters, and the diagnostic target. No value is returned, but diagnostics are registered with the program for reporting.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/diagnostics.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { reportDiagnostic } from \"./lib.js\";\n\n// Basic diagnostic with a fixed message\nreportDiagnostic(program, {\n  code: \"no-array\",\n  target: diagnosticTarget,\n});\n\n// Parameterized message\nreportDiagnostic(program, {\n  code: \"duplicate-route\",\n  format: {path: \"/foo\"}\n  target: diagnosticTarget,\n});\n\n// Multiple messages\nreportDiagnostic(program, {\n  code: \"duplicate-name\",\n  messageId: \"parameter\",\n  format: {value: \"$select\"},\n  target: diagnosticTarget,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Operations and Models Where `Http.File` is Serialized as JSON in TypeSpec\nDESCRIPTION: Provides examples of TypeSpec operations and models where `Http.File` is *not* treated as a raw file body. Explains that the presence of additional non-metadata body properties (like `userId` or inapplicable metadata like `@query` in a response or `@statusCode` in a request) forces the entire model, including the `File` structure, to be serialized as JSON.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n// The request does not have a file body because the `userId` parameter is a body property,\n// so this will cause the `File` to be serialized as JSON in the request.\nop uploadFileWithExtraParam(userId: string, ...File): void;\n\nmodel FileData {\n  @query created: utcDateTime;\n  ...File;\n}\n\n// The response does not have a file body because `@query` metadata is not applicable\n// in responses, so the `created` property is placed in the body and the whole `FileData`\n// model is serialized as JSON.\nop download(): FileData;\n\nmodel OpenAPIFile extends File<\"application/json\" | \"application/yaml\", string> {\n  @path filename: string;\n}\n\nmodel OpenAPIFileResponse {\n  @statusCode statusCode: 200;\n  ...SpecFile;\n}\n\n// The request does not have a file body because the `statusCode` property is not\n// applicable metadata for requests, so the request body would be serialized as a JSON\n// object. The same model _would_ create a file body in a response, though.\nop upload(@bodyRoot data: OpenAPIFileResponse): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Create or Replace REST Resource Operations in TypeSpec (Typespec)\nDESCRIPTION: This decorator identifies an operation as a create-or-replace endpoint for a model resource. Applied to an operation, with the target resource type as a required parameter. Indicates that the operation can both create a new or replace an existing resource instance.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.createsOrReplacesResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for PUT /type/model/visibility/readonlyroundtrip\nDESCRIPTION: This JSON represents the expected input body for a PUT request to `/type/model/visibility/readonlyroundtrip`. It is an empty object, indicating that the input model for this specific round-trip test involving read-only properties might not require any writable input fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_188\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Directories and npm Package - Bash\nDESCRIPTION: This snippet demonstrates how to create a new project directory, navigate into it, and initialize an npm package using the npm init wizard. It is essential for bootstrapping a TypeSpec library and generating the basic package.json file. No special dependencies are required beyond Node.js and npm.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a TypeSpec library (Decorators & Linters) with TypeScript enabled.\ntsp init --template library-ts\n\n# Create a TypeSpec emitter with TypeScript enabled.\ntsp init --template emitter-ts\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir myLibrary\ncd myLibrary\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Implementing the Main Service Client Class in TypeScript\nDESCRIPTION: This TypeScript class `TestClient` serves as the primary entry point for interacting with the service defined in TypeSpec. It initializes a client context (`TestClientContext`) using `createTestClientContext` upon construction, taking the service endpoint and optional client configurations. It exposes an async `get` method which internally calls the corresponding standalone operation function (`get`), passing the stored context and any provided `GetOptions`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/no_parameters.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  async get(options?: GetOptions) {\n    return get(this.#context, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Visibility Modifiers with @visibility in TypeSpec\nDESCRIPTION: This TypeSpec snippet shows how to apply multiple visibility modifiers from the same visibility class (e.g., `Lifecycle`) to a single property using the `@visibility` decorator. The `name` property is explicitly marked as visible during both the `Create` and `Read` lifecycle phases.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/visibility.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@visibility(Lifecycle.Create, Lifecycle.Read)\nname: string;\n```\n```\n\n----------------------------------------\n\nTITLE: Uploading Multiple Files via Multipart in TypeScript\nDESCRIPTION: This TypeScript async function implements the doThing operation for uploading multiple files as multipart/form-data. It maps each file in the files array to a multipart part using createFilePartDescriptor. The function expects a TestClientContext, a RequestBody with array of files, and optional DoThingOptions. Returns void on success or throws a RestError on failure. Dependencies: parse, createFilePartDescriptor, createRestError.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function doThing(\\n  client: TestClientContext,\\n  bodyParam: RequestBody,\\n  options?: DoThingOptions,\\n): Promise<void> {\\n  const path = parse(\\\"/\\\").expand({});\\n  const httpRequestOptions = {\\n    headers: {\\n      \\\"content-type\\\": options?.contentType ?? \\\"multipart/form-data\\\",\\n    },\\n    body: [...bodyParam.files.map((files: any) => createFilePartDescriptor(\\\"files\\\", files))],\\n  };\\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \\\"function\\\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Model with Spread Additional Properties\nDESCRIPTION: This TypeSpec code defines a model `Widget` within the `Test` namespace. It includes fixed properties (`name`, `age`, `optional`) and uses the spread syntax (`...Record<string>`) to allow for arbitrary additional string properties. An operation `foo` is also defined, which returns an instance of this `Widget` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/additional-properties/spread.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\n\nmodel Widget {\n  name: string;\n  age: int32;\n  optional?: string;\n  ...Record<string>;\n}\nop foo(): Widget;\n```\n\n----------------------------------------\n\nTITLE: Adding Operation Summaries with Decorators - TypeSpec\nDESCRIPTION: Illustrates attaching a summary to an OpenAPI operation using the @summary decorator atop a TypeSpec operation. The summary provides a short, human-friendly description that the OpenAPI emitter uses for the operation summary field. Requires only TypeSpec standard library support.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n/**\\n * Retrieves a user by their unique identifier.\\n */\\n@summary(\"Get a User by ID.\")\\nop getUser(@path id: string): User;\n```\n\n----------------------------------------\n\nTITLE: Defining Model With utcDateTime Property - TypeSpec\nDESCRIPTION: This snippet demonstrates the recommended way to define a TypeSpec model after migration, with the 'createdAt' property using the updated 'utcDateTime' intrinsic type. Dependencies: TypeSpec release with 'utcDateTime' support. Key parameter is the 'createdAt' property of type 'utcDateTime'; output is a model with a properly typed datetime field, ensuring compatibility with current best practices.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-04-11.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nmodel MyModel {\n  createdAt: utcDateTime;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Custom Named Unwrapped Array Schema - OpenAPI3 YAML\nDESCRIPTION: Presents OpenAPI3 YAML mapping for an unwrapped, custom-named array of objects. The xml.name under items corresponds to the property-level @encodedName in TypeSpec, and is intended for generating precisely named XML output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_20\n\nLANGUAGE: YAML\nCODE:\n```\nTag:\n  type: \"object\"\n  properties:\n    name:\n      type: \"string\"\n  xml:\n    name: \"XmlTag\"\nPet:\n  type: \"object\"\n  properties:\n    tags:\n      type: \"array\"\n      items:\n        allOf:\n          - $ref: \"#/definitions/Tag\"\n        xml:\n          name: ItemsTag\n  xml:\n    name: \"XmlPet\"\n```\n\n----------------------------------------\n\nTITLE: Specifying XML Attribute Decorator in TypeSpec (TypeSpec)\nDESCRIPTION: This code defines how to mark a model property so it is serialized as an XML attribute instead of an element node. The decorator can be applied directly to a model property and requires no parameters. No external dependencies are required other than TypeSpec's XML decorators. Input is a TypeSpec model with decorated properties, output is modified XML serialization.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Xml.attribute\n```\n\n----------------------------------------\n\nTITLE: Deleting Extension Resource - Unified Operations - TypeSpec - typespec\nDESCRIPTION: Specifies the delete operation in ExtensionResourceOperations, removing a resource and returning a ResourceDeletedResponse or Error. Follows RESTful delete semantics within the combined operations interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceOperations.delete(): TypeSpec.Rest.Resource.ResourceDeletedResponse | Error\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Emitter Options in tspconfig.yaml (YAML)\nDESCRIPTION: Demonstrates the recommended way to configure TypeSpec emitter options using the `tspconfig.yaml` file. Options are specified under the fully qualified emitter package name and must use kebab-case. This example shows setting the `output-file` option for the `@typespec/openapi3` emitter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-07-08.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nemitters:\n  <fully-qualified-emitter-package-name>:\n      <optionName>: <optionValue>\n\n# For example\nemitters:\n  @typespec/openapi3:\n    output-file: ./openapi.json\n```\n\n----------------------------------------\n\nTITLE: Using Path Parameters for Sub-Resource URLs in TypeSpec - typespec\nDESCRIPTION: This code shows how to define route path parameters for sub-resource endpoints. It attaches a route with a path substitution (petId) and uses @path to associate the parameter. This ensures proper URL formation for nested resources like toys belonging to specific pets. Dependencies include Toy model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/pets/{petId}/toys\")\nnamespace PetToys {\n  op list(@path petId: int32): Toy[];\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Compiler Version via --version Flag (Bash)\nDESCRIPTION: This Bash command uses the `--version` flag with `tsp compile`. It causes the compiler to output its version information and then exit, without performing a full compilation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --version\n```\n\n----------------------------------------\n\nTITLE: Migrating Package Dependencies for TypeSpec Asset Emitter in JSON\nDESCRIPTION: These code snippets show how to update the npm package dependencies and TypeScript imports when migrating away from the deprecated emitter-framework to the new @typespec/asset-emitter package. Dependencies must be added to package.json under 'dependencies', and all import statements in TypeScript must reference the new package. Inputs involve the previous package import and dependency; outputs are the updated entries.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-04-02.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"dependencies\": {\n+   \"@typespec/asset-emitter\": \"^1.0.0-rc.0\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Collection Operations Interface - TypeSpec - typespec\nDESCRIPTION: Specifies the ResourceCollectionOperations interface template for managing generic resource collections, parameterized by Resource and Error. Lays out the extensible contract for batch operations on RESTful resource sets.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_25\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ResourceCollectionOperations<Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Using @defaultResponse for Default OpenAPI Responses in TypeSpec\nDESCRIPTION: This example demonstrates how to apply the `@defaultResponse` decorator to the `PetStoreResponse` model. The `listPets` operation signature indicates it can return either an array of `Pet` objects or the `PetStoreResponse` as the default OpenAPI response.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/README.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@defaultResponse\nmodel PetStoreResponse is object;\n\nop listPets(): Pet[] | PetStoreResponse;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Custom Decorator in TypeSpec\nDESCRIPTION: Demonstrates how to use a custom decorator implemented in an external JavaScript file. It first imports the implementation file (`import \"./model.js\";`) and then applies the `@logType` decorator to a model (`Dog`) and one of its properties (`name`), passing different string arguments to each.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n// main.tsp\nimport \"./model.js\";\n\n@logType(\"Dog type\")\nmodel Dog {\n  @logType(\"Name type\")\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive Array Model with TypeSpec\nDESCRIPTION: Defines the Foo model with a property my_values as an array of int32, and an operation foo returning Foo. This example introduces the array structure in TypeSpec, which becomes the basis for code generation in TypeScript. No dependencies are required besides a TypeSpec-compatible environment; inputs are TypeSpec model definitions, outputs are type schemas.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/arrays.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\nmodel Foo {\n  my_values: int32[];\n}\nop foo(): Foo;\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Model with Default Array Property\nDESCRIPTION: This TypeSpec code defines a `Pet` model with an array property `tags` of type `Tag[]`. This demonstrates the default behavior for array serialization in XML without the `@unwrapped` decorator.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_14\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Pet {\n  tags: Tag[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Resource Update Operation Interface - TypeSpec - typespec\nDESCRIPTION: Introduces the ExtensionResourceUpdate interface template to specify update operations via Extension, Resource, and Error type parameters. Used as a contract for resource update APIs within RESTful service designs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_23\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ExtensionResourceUpdate<Extension, Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Type with Collection Name in TypeSpec (Typespec)\nDESCRIPTION: This decorator defines a model as a REST resource and assigns its collection name for use in route generation. It should be applied to models, requiring the collection name as a string argument. Enables supporting operations to reference the resource collection.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.resource(collectionName: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Applying BearerAuth Security Scheme With @useAuth (Typespec)\nDESCRIPTION: Enables Bearer token-based authentication for TypeSpec operations using @useAuth. The BearerAuth model should be included from the standard http library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@useAuth(BearerAuth)\n```\n\n----------------------------------------\n\nTITLE: Defining PathOptions Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.PathOptions` model for configuring path parameters in URI templates, based on RFC 6570. It includes optional properties: `name` (override parameter name), `explode` (expand array/object values, like `*` modifier), `style` (interpolation style: `simple`, `label`, `matrix`, `fragment`, `path`), and `allowReserved` (disable encoding of reserved characters, like `+` modifier).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_34\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.Http.PathOptions\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing BarClient in TypeScript\nDESCRIPTION: Defines the `BarClient` class in TypeScript, generated from the `Bar` TypeSpec namespace. It initializes a `BarClientContext` in the constructor and exposes asynchronous `get` and `create` methods. These methods delegate calls to the respective imported operation functions, passing the context and necessary parameters like `BarItem` for the `create` operation. Dependencies include types and functions from `./models/models.js`, `./api/barClientOperations.js`, and `./api/barClientContext.js`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/multiple_top_level_clients.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { BarItem } from \"./models/models.js\";\nimport { GetOptions, get, CreateOptions, create } from \"./api/barClientOperations.js\";\nimport {\n  BarClientContext,\n  BarClientOptions,\n  createBarClientContext,\n} from \"./api/barClientContext.js\";\n\nexport class BarClient {\n  #context: BarClientContext;\n\n  constructor(endpoint: string, options?: BarClientOptions) {\n    this.#context = createBarClientContext(endpoint, options);\n  }\n  async get(options?: GetOptions) {\n    return get(this.#context, options);\n  }\n  async create(foo: BarItem, options?: CreateOptions) {\n    return create(this.#context, foo, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bytes Query Parameter with Base64Url Encoding Using TypeSpec - TypeSpec\nDESCRIPTION: Defines a service namespace with an operation that accepts a bytes value as a query parameter. This TypeSpec snippet models a RESTful endpoint at '/default', specifying that the 'value' parameter should be sent as a query parameter of type bytes. No additional dependencies are required other than TypeSpec tools. Inputs: 'value' as bytes provided via query; Outputs: a no-content HTTP response. This contract is intended to be mapped directly to client implementations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/query_bytes.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\\nnamespace Test;\\n\\n@route(\"/default\")\\nop defaultEncoding(\\n  @query\\n  value: bytes,\\n): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Resource Read Operation Interface - TypeSpec - typespec\nDESCRIPTION: Creates the ExtensionResourceRead interface template, focusing on read/get operations for extension resources. Parameterized for Extension, Resource, and Error, it offers a minimal interface for retrieval APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_21\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ExtensionResourceRead<Extension, Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Using Augment Decorators (`@@`) in TypeSpec\nDESCRIPTION: Illustrates the use of an augment decorator (`@@tag`) to apply metadata to the `Dog` model from a separate statement. The first argument specifies the target type (`Dog`), followed by the decorator's arguments. Augment decorator statements must end with a semicolon.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/decorators.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Dog {}\n\n@@tag(Dog, \"Sample\");\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Default TypeSpec Model for XML Serialization\nDESCRIPTION: This TypeSpec code defines a simple model named `Blob` with a single string property `id`. Without specific XML decorators, properties are typically serialized as child elements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Blob {\n  id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @name Decorator in a TypeSpec Model\nDESCRIPTION: This TypeSpec example defines a `Book` model demonstrating the use of `@name` and `@encodedName` for XML serialization. The model itself is renamed to `XmlBook`, the `id` property is renamed to `XmlId` using `@name`, and the `name` property is renamed to `XmlName` using `@encodedName`. The `content` property retains its original name.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_7\n\nLANGUAGE: tsp\nCODE:\n```\n@name(\"XmlBook\")\nmodel Book {\n  @name(\"XmlId\") id: string;\n  @encodedName(\"application/xml\", \"XmlName\") name: string;\n  content: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @contentType Decorator in TypeSpec - TypeSpec Language\nDESCRIPTION: This snippet shows the @contentType decorator applied to a union variant within a TypeSpec event union. The decorator specifies that the 'message' event uses the 'application/json' content type. It requires the @typespec/events library and proper event model union setup. The input is a union representing events; outputs are strongly typed definitions for downstream processing, constrained by valid content type strings.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/events/README.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@events\nunion MixedEvents {\n  @contentType(\"application/json\")\n  message: {\n    id: string,\n    text: string,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Performing The foo API Operation with Deserialization in TypeScript\nDESCRIPTION: Implements the 'foo' API operation using client path helper, handles HTTP request, parses JSON response, and deserializes the result using jsonFooToApplicationTransform. Depends on ClientContext, parse, createRestError, and jsonFooToApplicationTransform. Accepts a client context and options, outputs a Promise<Foo>, throws on error or invalid response.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/arrays.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function foo(client: ClientContext, options?: FooOptions): Promise<Foo> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return jsonFooToApplicationTransform(response.body)!;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Path Parameters Using @autoRoute Decorator - TypeSpec\nDESCRIPTION: This snippet demonstrates the alternative use of @autoRoute to define an operation where a path parameter is optional. The @autoRoute decorator automatically infers the route template from the operation signature and provided decorators. This approach simplifies route maintenance for APIs with optional parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@autoRoute\nop optional(@path param?: string): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Linter Rule in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a basic linter rule named 'no-model-doc' using `createLinterRule` from `@typespec/compiler`. It sets severity, description, defines custom messages (including parameterized ones), and implements the `create` function to check for documentation on operations, models, and enums, reporting diagnostics via `context.reportDiagnostic` if documentation is missing.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/linters.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport {  createLinterRule } from \"@typespec/compiler\";\nimport { reportDiagnostic } from \"../lib.js\";\n\nexport const requiredDocRule = createLinterRule({\n  name: \"no-model-doc\",\n  severity: \"warning\",\n  // Short description of what this linter rule does. To be used for generated summary of a linter.\n  description: \"Enforce documentation on models.\",\n  messages: {\n    default: `Must be documented.`,\n    // Different messages can be provided\n    models: `Models must be documented.`,\n\n    // Message can be parameterized\n    enums: paramMessage`Enum ${\"enumName\"} must be documented.`,\n  },\n  create(context) {\n    return {\n      operation: (op) => {\n        if (!getDoc(context.program, op)) {\n          context.reportDiagnostic({\n            target: model,\n          });\n        }\n      },\n      model: (model) => {\n        if (!getDoc(context.program, model)) {\n          context.reportDiagnostic({\n            messageId: \"models\",\n            target: model,\n          });\n        }\n      },\n      enums: (type) => {\n        if (!getDoc(context.program, type)) {\n          context.reportDiagnostic({\n            messageId: \"enums\",\n            format: {enumName: type.name}\n            target: model,\n          });\n        }\n      },\n    };\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Required Date Query Parameter with Default Encoding (TypeSpec)\nDESCRIPTION: Defines a TypeSpec operation `defaultEncoding` within the `Test` namespace. This operation takes a required `utcDateTime` query parameter named `value`. Since no explicit encoding is specified, it will default to RFC3339 format. The operation is routed to `/default` and expects a `NoContentResponse`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/query_date.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\n\n@route(\"/default\")\nop defaultEncoding(\n  @query\n  value: utcDateTime,\n): NoContentResponse;\n```\n```\n\n----------------------------------------\n\nTITLE: Deserializing Foo Model with Complex Array from Transport Format in TypeScript\nDESCRIPTION: Deserializes a transport object where my_values is an array of Bar representations, reconstructing Foo with properly transformed Bar instances via jsonArrayBarToApplicationTransform. Relies on presence of Foo type, Bar type, and transformation functions for each. Input: any (transport object); output: Foo model with complex array.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/arrays.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonFooToApplicationTransform(input_?: any): Foo {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    myValues: jsonArrayBarToApplicationTransform(input_.my_values),\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec HTTP Client JS via NPM in Spec - Bash\nDESCRIPTION: This snippet demonstrates how to install the @typespec/http-client-js library using the npm command within a TypeSpec specification project. The command downloads and adds the latest version of the TypeSpec HTTP client support for use in JavaScript/TypeScript code emission. No special prerequisites are needed beyond npm being installed. The primary input is the package name, with no outputs beyond updated node_modules and package.json files.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-js/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-client-js\n```\n\n----------------------------------------\n\nTITLE: Compiling With HTTP Client Java Emitter via the TypeSpec CLI - Bash\nDESCRIPTION: Demonstrates how to invoke the TypeSpec compiler from the command line to generate HTTP client code using the @typespec/http-client-java emitter. Requires the TypeSpec CLI and the http-client-java emitter package to be installed. The command targets the current directory (\".\") as the input and specifies the emitter to use with the --emit flag. Input is a TypeSpec project; output is generated Java client code in the configured output directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-java/reference/emitter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/http-client-java\n```\n\n----------------------------------------\n\nTITLE: Specifying Namespace and Package Name for Python SDK Generation - YAML\nDESCRIPTION: This YAML code configures the TypeSpec HTTP client Python emitter to generate the SDK into a specific package name and subdirectory. The 'namespace' setting guides emitted code to be placed under 'azure.keyvault.certificates._generated' for clean separation, while 'package-name' ensures the resulting Python package's pip-installable name is 'azure-keyvault-certificates'. These settings must be included in tspconfig.yaml and are supported by the '@typespec/http-client-python' emitter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-python/reference/package-structure.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemitters:\n  \"@typespec/http-client-python\":\n    namespace: \"azure.keyvault.certificates._generated\"\n    package-name: \"azure-keyvault-certificates\"\n```\n\n----------------------------------------\n\nTITLE: Defining Date Header Parameter with Explicit Unix Timestamp Encoding - TypeSpec\nDESCRIPTION: Defines an operation where a required header parameter of type utcDateTime is explicitly encoded as a Unix Timestamp (int64), using @encode(\"unixTimestamp\", int64). This enforces that the header must be a numeric Unix timestamp in any client or server implementation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_date.md#_snippet_8\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service\\nnamespace Test;\\n\\n@route(\"/default\")\\nop get(\\n  @header\\n  @encode(\"unixTimestamp\", int64)\\n  value: utcDateTime,\\n): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Example Usage: Delete Transformation with Visibility Filtering (Typespec)\nDESCRIPTION: Provides a Dog model annotated with Delete visibility alongside other fields and demonstrates using the Delete transformation to form a model, DeleteDog, that includes only delete-phase-relevant properties. Shows how annotation controls which fields survive the transformation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Dog {\n  @visibility(Lifecycle.Read)\n  id: int32;\n\n  // Set when the Dog is removed from our data store. This happens when the\n  // Dog is re-homed to a new owner.\n  @visibility(Lifecycle.Delete)\n  nextOwner: string;\n\n  name: string;\n}\n\n// This model will have the `nextOwner` and `name` fields, but not the `id` field.\nmodel DeleteDog is Delete<Dog>;\n\n```\n\n----------------------------------------\n\nTITLE: Using @ns Decorator with Strings in TypeSpec\nDESCRIPTION: This TypeSpec example demonstrates using the `@ns` decorator with string arguments to define namespaces. The `Foo` model itself and its first `bar` property are assigned the namespace `https://example.com/ns1` with prefix `ns1`. The second `bar` property is assigned the namespace `https://example.com/ns2` with prefix `ns2`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_10\n\nLANGUAGE: tsp\nCODE:\n```\n@ns(\"https://example.com/ns1\", \"ns1\")\nmodel Foo {\n  @ns(\"https://example.com/ns1\", \"ns1\")\n  bar: string;\n\n  @ns(\"https://example.com/ns2\", \"ns2\")\n  bar: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Template URLs in VS Code Settings - JSON\nDESCRIPTION: Demonstrates how to add custom template URLs for TypeSpec project initialization in the VS Code settings.json. Users can define an array of objects within the 'typespec.initTemplatesUrls' setting, each specifying a 'name' and a 'url' pointing to a file containing templates. This configuration is required for integrating additional project templates into the TypeSpec workflow and supports extensibility when creating new projects in the VS Code extension. The key parameters are 'name' for display and 'url' for the actual template resource. The provided configuration must be included in a valid VS Code settings JSON file.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-01-15.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"typespec.initTemplatesUrls\\\": [\\n    {\\n      \\\"name\\\": \\\"displayName\\\",\\n      \\\"url\\\": \\\"https://urlToTheFileContainsTemplates\\\"\\n    }],\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Well-Known Protobuf Timestamp Model Reference - TypeSpec - typespec\nDESCRIPTION: Defines a model that maps to the well-known Protobuf Timestamp message (google.protobuf.Timestamp). Designed for expressing time points with precision. TypeSpec references the correct .proto import; dependency: google/protobuf/timestamp.proto.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Protobuf.WellKnown.Timestamp\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Playground with Vite in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a Vite project for the TypeSpec Playground by importing and calling the 'definePlaygroundViteConfig' function from the '@typespec/playground/vite' package. The configuration object specifies default emitters, libraries, code samples, and documentation links. Required dependencies include the specified TypeSpec libraries (e.g., '@typespec/compiler', '@typespec/http', '@typespec/openapi3') installed in the project, and the Vite build tool. Input parameters control available emitters, libraries, sample code, and links. The output is an exportable Vite config object for enabling the custom playground build. All libraries listed must be bundled and registered as dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/playground/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { definePlaygroundViteConfig } from \"@typespec/playground/vite\";\n\nconst config = definePlaygroundViteConfig({\n  defaultEmitter: \"@typespec/openapi3\",\n  libraries: [\n    \"@typespec/compiler\",\n    \"@typespec/http\",\n    \"@typespec/openapi3\",\n\n    // Add any other libraries here. Make sure those libraries are also dependencies of that package.\n  ],\n  samples: {\n    \"My sample\": {\n      filename: \"samples/my.tsp\",\n      preferredEmitter: \"@typespec/openapi3\",\n    },\n  },\n  links: {\n    documentationUrl: \"<link to your website>\",\n  },\n});\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Call for RFC7231 Encoded Date Query Parameter (TypeScript)\nDESCRIPTION: This TypeScript function `get` implements the client call for the TypeSpec operation with explicit RFC7231 encoding. It serializes the provided `Date` object `value` using `dateRfc7231Serializer` and includes it in the query string for the GET request to `/default`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/query_date.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/api/testClientOperations.ts function get\nexport async function get(\n  client: TestClientContext,\n  value: Date,\n  options?: GetOptions,\n): Promise<void> {\n  const path = parse(\"/default{?value}\").expand({\n    value: dateRfc7231Serializer(value),\n  });\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Client Emitter in tspconfig.yaml\nDESCRIPTION: This YAML configuration snippet specifies settings for the Python client emitter (`@typespec/http-client-python`) within the `tspconfig.yaml` file. It defines the emitter to be used (`emit`) and sets the output directory (`emitter-output-dir`) for the generated Python client code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-python\"\noptions:\n  \"@typespec/http-client-python\":\n    emitter-output-dir: \"{project-root}/clients/python\"\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Enum Values with Union Types in TypeSpec\nDESCRIPTION: Shows defining an optional model property `size` whose allowed values are restricted to a specific set of string literals (\"small\", \"medium\", \"large\", \"x-large\") using a TypeSpec union type (`|`). This provides an alternative to the `enum` keyword for defining enumerated values inline within a model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Example {\n  size?: \"small\" | \"medium\" | \"large\" | \"x-large\";\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Primitive Array Serialization - XML\nDESCRIPTION: Shows the XML serialization of a model containing an unwrapped primitive array. Each array element is represented as repeated tags. Corresponds directly to a TypeSpec model using @Xml.unwrapped. Inputs expected are primitive string values. Output is an XML element with child elements per array value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<XmlPet>\n  <tags>abc</tags>\n  <tags>def</tags>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Setting a Request Content-Type Header (TypeSpec)\nDESCRIPTION: Shows how to explicitly set a request Content-Type header for an operation using the @header decorator and a literal string value (e.g., 'image/png'). The operation 'uploadImage' takes a bytes body and informs the client/server to use image/png as the payload's content type. Requires TypeSpec; clients must supply matching contentType and binary data. Outputs void; designed for binary image upload endpoints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/content-types.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nop uploadImage(@header contentType: \"image/png\", @body image: bytes): void;\n```\n\n----------------------------------------\n\nTITLE: Defining a HEAD Operation in TypeSpec\nDESCRIPTION: Uses the `@head` decorator to define an operation named `read` that corresponds to an HTTP HEAD request. The operation currently takes no parameters and returns `void`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_5\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@head op read(): void\n```\n\n----------------------------------------\n\nTITLE: Deserializing Foo Model from Transport Format in TypeScript\nDESCRIPTION: Deserializes a wire format object into a Foo instance by mapping my_values using jsonArrayInt32ToApplicationTransform. Assumes input follows transport representation, output conforms to Foo interface. Dependencies include the Foo interface and deserializer for my_values; limitation: myValues must be an array of numbers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/arrays.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonFooToApplicationTransform(input_?: any): Foo {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    myValues: jsonArrayInt32ToApplicationTransform(input_.my_values),\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining @removeVisibility Decorators on a Property - TypeSpec Typespec\nDESCRIPTION: Shows how to chain multiple @removeVisibility decorators to remove several visibility modifiers from a TypeSpec property. Here, both Update and Create visibilities are removed from the 'id' property; any remaining modifiers (like Read) stay enabled. Requires Lifecycle visibility class to be defined. Input: property with two decorators; Output: property with both Update and Create removed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/visibility.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@removeVisibility(Lifecycle.Update)\n@removeVisibility(Lifecycle.Create)\nid: string;\n```\n\n----------------------------------------\n\nTITLE: Invoking the OpenAPI3 to TypeSpec Converter (Bash)\nDESCRIPTION: Demonstrates how to use the `tsp-openapi3` command-line tool to convert an OpenAPI 3 specification file (`openapi3spec.yml`) into TypeSpec files located in the specified output directory (`./tsp-output`). This command requires the input OpenAPI file path as a positional argument and the `--output-dir` argument.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp-openapi3 ./openapi3spec.yml --output-dir ./tsp-output\n```\n\n----------------------------------------\n\nTITLE: Implementing API Operation for Union Enum Input in TypeScript Client\nDESCRIPTION: This TypeScript function 'unionEnumName' implements a client-side method for the 'unionEnumName' POST operation, sending a 'ServerExtensibleEnum' in the request body. It uses a serializer to transform the input and handles responses compliant with a no-content (204) contract. Key parameters include the client context, the enum value, and optional request options. Dependencies include custom error handling, serialization helpers, and client path utilities.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/string_union.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function unionEnumName(\n  client: TestClientContext,\n  body: ServerExtensibleEnum,\n  options?: UnionEnumNameOptions,\n): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n    body: jsonServerExtensibleEnumToTransportTransform(body),\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Space Inside Curly Braces for TypeSpec Aliases\nDESCRIPTION: Illustrates the rule of adding spaces just inside the opening and closing curly braces `{}` when defining TypeSpec aliases with object literals. The 'bad' example lacks these spaces, while the 'good' example includes them for better readability.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n// bad\nalias foo = {type: \"cat\"};\n\n// good\nalias foo = { type: \"cat\" };\n```\n\n----------------------------------------\n\nTITLE: Using the @streamOf Decorator Example in TypeSpec\nDESCRIPTION: This example demonstrates how to use the `@streamOf` decorator. It defines a `Message` model and then a `Response` model. The `Response` model itself has a `body` property of type `string`, but the `@streamOf(Message)` decorator indicates that this response actually represents a stream of `Message` objects. This allows TypeSpec to understand the semantic meaning of the response beyond its immediate structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/streams/reference/decorators.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Message {\n  id: string;\n  text: string;\n}\n\n@streamOf(Message)\nmodel Response {\n  @body body: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Arrays of Complex Types with Wrapper Elements - TypeSpec\nDESCRIPTION: Models an array of complex TypeSpec objects, applying a wrapper (by omitting @Xml.unwrapped). The referenced Tag model must also be defined. Outputs XML where each array element is a named, wrapped element. Useful for elaborate XML nesting.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_15\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@encodedName(\"application/xml\", \"XmlPet\")\nmodel Pet {\n  tags: Tag[];\n}\n\n@encodedName(\"application/xml\", \"XmlTag\")\nmodel Tag {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Reusing Common Parameters in TypeSpec Operations\nDESCRIPTION: This TypeSpec code demonstrates applying the previously defined `CommonParameters` model to multiple Pet Store API operations (`listPets`, `getPet`, `createPet`, `updatePet`, `deletePet`). The spread operator (`...CommonParameters`) is used within each operation definition to inline the parameters from the model, ensuring consistency and reducing redundancy across the API specification.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/04-common-parameters.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp title=main.tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/openapi3\\\"]}\"\nimport \"@typespec/http\";\n\nusing Http;\n\n@service(#{ title: \"Pet Store\" })\n@server(\"https://example.com\", \"Single server endpoint\")\nnamespace PetStore;\n\nmodel Pet {\n  id: int32;\n\n  @minLength(1)\n  name: string;\n\n  @minValue(0)\n  @maxValue(100)\n  age: int32;\n\n  kind: petType;\n}\n\nenum petType {\n  dog: \"dog\",\n  cat: \"cat\",\n  fish: \"fish\",\n  bird: \"bird\",\n  reptile: \"reptile\",\n}\n\nmodel CommonParameters {\n  @header\n  requestID: string;\n\n  @query\n  locale?: string;\n\n  @header\n  clientVersion?: string;\n}\n\n@route(\"/pets\")\nnamespace Pets {\n  @get\n  // highlight-next-line\n  op listPets(...CommonParameters): {\n    @statusCode statusCode: 200;\n    @body pets: Pet[];\n  };\n\n  @get\n  // highlight-next-line\n  op getPet(@path petId: int32, ...CommonParameters): {\n    @statusCode statusCode: 200;\n    @body pet: Pet;\n  } | {\n    @statusCode statusCode: 404;\n    @body error: NotFoundError;\n  };\n\n  @post\n  // highlight-next-line\n  op createPet(@body pet: Pet, ...CommonParameters): {\n    @statusCode statusCode: 201;\n    @body newPet: Pet;\n  } | {\n    @statusCode statusCode: 202;\n    @body acceptedPet: Pet;\n  } | {\n    @statusCode statusCode: 400;\n    @body error: ValidationError;\n  };\n\n  @put\n  // highlight-next-line\n  op updatePet(@path petId: int32, @body pet: Pet, ...CommonParameters):\n    | {\n        @statusCode statusCode: 200;\n        @body updatedPet: Pet;\n      }\n    | {\n        @statusCode statusCode: 400;\n        @body error: ValidationError;\n      }\n    | {\n        @statusCode statusCode: 404;\n        @body error: NotFoundError;\n      }\n    | {\n        @statusCode statusCode: 500;\n        @body error: InternalServerError;\n      };\n\n  @delete\n  // highlight-next-line\n  op deletePet(@path petId: int32, ...CommonParameters): {\n    @statusCode statusCode: 204;\n  };\n}\n\n@error\nmodel NotFoundError {\n  code: \"NOT_FOUND\";\n  message: string;\n}\n\n@error\nmodel ValidationError {\n  code: \"VALIDATION_ERROR\";\n  message: string;\n  details: string[];\n}\n\n@error\nmodel InternalServerError {\n  code: \"INTERNAL_SERVER_ERROR\";\n  message: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Authorization Code Flow with Auth0 in TypeSpec Client - TypeScript\nDESCRIPTION: This snippet defines an OAuth2TokenCredential for the Authorization Code Flow using Auth0’s @auth0/auth0-spa-js SDK, allowing secure user authentication in a browser environment. It demonstrates initializing the Auth0 client, fetching tokens through getTokenSilently, and handling potential errors. Dependencies include @typespec/ts-http-runtime, @auth0/auth0-spa-js, and a TypeSpec client SDK. The key parameter is flows, an array with authorization details; output is an authentication token used for subsequent API requests. Proper handling of auth scheme configuration and client instantiation is illustrated.\nSOURCE: https://github.com/microsoft/typespec/blob/main/docs/samples/client/js/oauth/readme.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { OAuth2TokenCredential, AuthorizationCodeFlow } from \"@typespec/ts-http-runtime\";\nimport { Auth0Client } from \"@auth0/auth0-spa-js\";\nimport { SampleTypeSpecClient } from \"SampleTypeSpecSDK\";\n\n// Create an OAuth2 credential that implements authorization code flow\nconst credential: OAuth2TokenCredential<AuthorizationCodeFlow> = {\n  async getOAuth2Token(flows: AuthorizationCodeFlow[]) {\n    const { authorizationUrl, scopes } = flows[0];\n    try {\n      const auth0Client = new Auth0Client({\n        domain: authorizationUrl,\n        clientId: \"SampleClientID\",\n        authorizationParams: {\n          redirect_uri: \"https://example.com/redirect\",\n          audience: \"SampleAudience\",\n        },\n      });\n\n      const token = await auth0Client.getTokenSilently({\n        authorizationParams: {\n          scope: scopes?.join(\" \"),\n        },\n      });\n\n      return token;\n    } catch (error) {\n      console.error(\"Failed to retrieve token from Auth0\", error);\n      throw new Error(\"Token retrieval failed\");\n    }\n  },\n};\n\n// Authentication shemes that the services allow\nconst authorizationCodeScheme: AuthScheme = {\n  kind: \"oauth2\",\n  flows: [\n    {\n      kind: \"authorizationCode\",\n      authorizationUrl: \"https://example.com/authorize\",\n      tokenUrl: \"https://example.com/token\",\n      scopes: [\"sampleScope1\", \"sampleScope2\"],\n    },\n  ],\n};\n\n// Pass the credential to the client and use the client to make a request to the service\nconst client = new SampleTypeSpecClient(credential, {\n  authSchemes: [authorizationCodeScheme],\n});\n```\n\n----------------------------------------\n\nTITLE: Explicitly Defining Request Body with @body in TypeSpec\nDESCRIPTION: Demonstrates the updated way to define the request body type explicitly using the `@body` decorator on the parameter. This ensures `body: string` maps directly to the request body, replicating the previous implicit behavior.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nop create(@body body: string): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining String Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines the standard `string` scalar for storing text sequences. Used as a fundamental building block for names, labels, or textual properties in TypeSpec models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_48\n\nLANGUAGE: typespec\nCODE:\n```\nscalar string\n```\n\n----------------------------------------\n\nTITLE: Defining Header Parameters in API Models - TypeSpec\nDESCRIPTION: This snippet defines a TypeSpec namespace containing a model with both required and optional properties, where one optional property (foo) is designated as a header using the @header decorator. The model is used in an operation that specifies the model input in the request body with the @bodyRoot modifier. No external dependencies are required but knowledge of TypeSpec's decorators and HTTP mapping is assumed. Expected: mapping 'foo' field as a header parameter when the operation is invoked; constraints are the correct use of TypeSpec decorators and proper model definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/query-parameter.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\nnamespace Test;\\n\\nmodel VisibilityModel {\\n  id: string;\\n  name: string;\\n  age?: string;\\n  @header foo?: string;\\n}\\n\\n@head op headModel(@bodyRoot input: VisibilityModel): OkResponse;\n```\n\n----------------------------------------\n\nTITLE: Generating Dog Interface from TypeSpec Model - TypeScript\nDESCRIPTION: Declares a TypeScript interface Dog reflecting all properties from the Pet model plus the Dog-specific color property, based on model generation from TypeSpec. This interface is typically auto-generated but may also be hand-written to join model inheritance in TypeScript. No external dependencies are required beyond matching model definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_spread.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Dog {\\n  id: string;\\n  name: string;\\n  color: \\\"black\\\" | \\\"brown\\\";\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Service with Bearer Authentication - TypeSpec - tsp\nDESCRIPTION: This TypeSpec snippet defines a simple service named 'Test Service' that uses a Bearer authentication scheme with a single route '/valid' available via GET. The @service decorator names and configures the service, while @useAuth attaches bearer authentication. The operation 'valid' returns a NoContentResponse, and this establishes the contract for client implementations. Dependencies include the BearerAuth authentication scheme and a compatible compile environment for TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/bearer.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \\\"Test Service\\\" })\\n@useAuth(BearerAuth)\\nnamespace Test;\\n\\n@route(\\\"/valid\\\")\\n@get\\nop valid(): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Using the Spread Operator for TypeSpec Model Composition\nDESCRIPTION: Demonstrates the use of the spread operator (`...`) in TypeSpec to include properties from one model (`Legs`) into others (`Dog`, `Cat`) for code reuse during definition. The `legs` property from the `Legs` model is copied into both `Dog` and `Cat`. This composition happens before OpenAPI generation and does not create separate `$ref`s for the `Legs` model itself within `Dog` or `Cat` in the output OpenAPI schema.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Legs {\n  /** number of legs */\n  legs: int32;\n}\n\nmodel Dog {\n  name: string;\n  ...Legs;\n}\n\nmodel Cat {\n  name: string;\n  ...Legs;\n}\n\nmodel Snake {\n  name: string;\n  // snakes have no legs\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic GET Endpoint in TypeSpec\nDESCRIPTION: Defines a simple `GET` operation at the `/widgets` route within the `DemoService` namespace using TypeSpec. This operation, named `read`, takes no parameters and returns `void`. It's tagged under 'Widgets' and marked with `@test` for testing scenarios.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-request.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\n\n@route(\"/widgets\")\n@tag(\"Widgets\")\ninterface Widgets {\n  @test @get read(): void;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the @removed Decorator in TypeSpec\nDESCRIPTION: Defines the syntax for the `@TypeSpec.Versioning.removed` decorator. This decorator identifies when a target element (Model, Property, Operation, etc.) was removed from the API. It requires a `version` parameter of type `EnumMember` specifying the removal version.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Versioning.removed(version: EnumMember)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the @versioned Decorator in TypeSpec\nDESCRIPTION: Defines the syntax for the `@TypeSpec.Versioning.versioned` decorator. This decorator is applied to a `Namespace` to indicate that it is versioned. It takes a single parameter `versions` which must be an `Enum` defining the supported versions for that namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Versioning.versioned(versions: Enum)\n```\n```\n\n----------------------------------------\n\nTITLE: Model Inheritance and Completion Features - TypeSpec Language\nDESCRIPTION: This TypeSpec code demonstrates model inheritance and the new property completion experience. It shows a base model 'Device' and a derived model 'Phone', with inline completion suggestions appearing at the cursor position. This feature aids users in extending existing models and improves IDE-assisted editing. No dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_9\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Device {\n  name: string;\n  description: string;\n}\n\nmodel Phone extends Device {\n  ┆\n} | [name]\n  | [description]\n```\n\n----------------------------------------\n\nTITLE: Handling `Http.File` in Union Return Types vs. Explicit Body Properties in TypeSpec Responses\nDESCRIPTION: Contrasts two ways `Http.File` can appear in a union within a TypeSpec operation's response. When the union (`File | string`) is the direct return type, `File` represents a file body response distinct from the `string` response. However, if the union is assigned to an explicit body property (`@bodyRoot data: File | string`), the `File` is serialized as a structured JSON model within that single response type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n// This is allowed and creates a file body, as `File` and `string` are considered separate responses, so\n// this operation has two responses; the first has a file body, and the second has a `text/plain` string body.\nop downloadFileOrString(): File | string;\n\n// The following does not create a file body, as it is only one response where the body of that single response\n// may be either a file or a string.\n\n// Warning: An HTTP File in a union is serialized as a structured model\n// instead of being treated as the contents of a file...\nop downloadFileOrString(): {\n  @bodyRoot data: File | string;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Versioned API (v1) with Model and Operation in TypeSpec\nDESCRIPTION: This snippet shows a complete initial version (`v1`) of a versioned API. It includes necessary `using` statements, the versioned namespace definition, an `Error` model, a `Widget` model, and a single operation `list` that returns an array of widgets or an error.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/guide.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nusing Versioning;\nusing Rest;\nusing Http;\n\n@service(#{ title: \"Contoso Widget Manager\" })\n@versioned(Contoso.WidgetManager.Versions)\nnamespace Contoso.WidgetManager;\n\nenum Versions {\n  v1,\n}\n\n@error\nmodel Error {\n  code: string;\n  message?: string;\n}\n\nmodel Widget {\n  @key\n  id: string;\n\n  name: string;\n}\n\nop list(): Widget[] | Error;\n```\n\n----------------------------------------\n\nTITLE: Using Named and Optional Template Arguments in TypeSpec\nDESCRIPTION: Defines an alias 'Test' with three parameters (one required, two with constraints and defaults), then demonstrates named argument instantiation to override defaults and order. Highlights TypeSpec's support for expressive, maintainable templates. Dependencies: none. Input: explicitly named or omitted template parameters; Output: composed aliases with customizable structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/templates.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\nalias Test<T, U extends numeric = int32, V extends string = \"example\"> = {\n  t: T;\n  v: V;\n};\n\n// Specify the argument V by name to skip argument U, since U is optional and we\n// are okay with its default\nalias Example1 = Test<unknown, V = \"example1\">;\n\n// Even all three arguments can be specified out of order\nalias Example2 = Test<V = \"example2\", T = unknown, U = uint64>;\n```\n\n----------------------------------------\n\nTITLE: Reusable Helper Models for API Responses in TypeSpec - typespec\nDESCRIPTION: This example defines helper models and aliases (ListResponse, ReadSuccessResponse, ReadResponse, CreateResponse) for encapsulating common response structures. By composing OkResponse, NoContentResponse, NotFoundResponse, Body<T>, and ETag, it allows concise and type-safe operation return types. This improves maintainability and clarity across service definitions. Requires all referenced type models (Pet, OkResponse, NoContentResponse, NotFoundResponse, Body, ETag).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\nmodel ListResponse<T> {\n  ...OkResponse;\n  ...Body<T[]>;\n}\n\nmodel ReadSuccessResponse<T> {\n  ...OkResponse;\n  ...ETag;\n  ...Body<T>;\n}\n\nalias ReadResponse<T> = ReadSuccessResponse<T> | NotFoundResponse;\n\nmodel CreateResponse {\n  ...NoContentResponse;\n}\n\n@route(\"/pets\")\nnamespace Pets {\n  op list(@query skip: int32, @query top: int32): ListResponse<Pet>;\n  op read(@path petId: int32, @header ifMatch?: string): ReadResponse<Pet>;\n  @post\n  op create(...Pet): CreateResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pagination Decorators in a Page Model with TypeSpec\nDESCRIPTION: Shows a comprehensive paginated page model using @pageItems, @nextLink, @prevLink, @firstLink, and @lastLink decorators to define RESTful pagination navigation in a TypeSpec model. The snippet also includes an operation decorated with @list to indicate that it returns a collection in page format. Inputs include generics and URL properties; outputs are strongly-typed Page<T> models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_16\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Page<T> {\n  @pageItems items: T[];\n  @nextLink next: url;\n  @prevLink prev: url;\n  @firstLink first: url;\n  @lastLink last: url;\n}\n@list op listPets(): Page<Pet>;\n```\n\n----------------------------------------\n\nTITLE: Specifying Read REST Resource Operations in TypeSpec (Typespec)\nDESCRIPTION: This decorator marks an operation as a read (GET) endpoint for a resource type. Used on operations with a required model parameter for the resource being read. Facilitates REST specification for resource retrieval.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.readsResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Example: Setting a Maximum String Length Constraint in TypeSpec\nDESCRIPTION: Applies @maxLength(20) to a Username scalar that extends string, ensuring that any Username cannot exceed 20 characters. Useful for account or resource name validation in APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_21\n\nLANGUAGE: typespec\nCODE:\n```\n@maxLength(20)\nscalar Username extends string;\n```\n\n----------------------------------------\n\nTITLE: HTTP Example: Continuation Token Pagination with Additional Parameters\nDESCRIPTION: Illustrates the HTTP request/response flow for continuation token pagination with additional parameters (filter and header). The first request includes the filter and header. The response provides items and a `continuationToken`. The second request must include the original filter parameter, the received token (as the 'token' query parameter), and the header parameter, demonstrating that the client needs to resend all relevant non-paging parameters alongside the continuation token.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/pagination.md#_snippet_10\n\nLANGUAGE: http\nCODE:\n```\n```http\n// First request\nGET /pets?filter=dog\nSpecial-Header: x-special-value\n\n{\"pets\": [...], \"continuationToken\": \"token2\"}\n\n---\n// Second request\nGET /pets?filter=dog&token=token2\nSpecial-Header: x-special-value\n\n{\"pets\": [...], \"continuationToken\": \"token3\"}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Response Models in TypeSpec\nDESCRIPTION: This snippet defines various custom response models (`PetListResponse`, `PetResponse`, `PetCreatedResponse`, `PetErrorResponse`, etc.) in TypeSpec. These models extend base response types like `OkResponse`, `CreatedResponse`, `BadRequestResponse`, `NotFoundResponse`, `UnauthorizedResponse`, and `NoContentResponse` (imported from `@typespec/http`) and typically include a `Body` definition specifying the structure of the response payload (e.g., `Pet[]`, `Pet`, `ValidationError`). This approach standardizes response structures for different API outcomes, requiring the `@typespec/http` library and pre-defined models like `Pet`, `ValidationError`, `NotFoundError`, and `UnauthorizedError`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/07-custom-response-models.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nmodel PetListResponse {\n  ...OkResponse;\n  ...Body<Pet[]>;\n}\n\nmodel PetResponse {\n  ...OkResponse;\n  ...Body<Pet>;\n}\n\nmodel PetCreatedResponse {\n  ...CreatedResponse;\n  ...Body<Pet>;\n}\n\nmodel PetErrorResponse {\n  ...BadRequestResponse;\n  ...Body<ValidationError>;\n}\n\nmodel PetNotFoundResponse {\n  ...NotFoundResponse;\n  ...Body<NotFoundError>;\n}\n\nmodel PetUnauthorizedResponse {\n  ...UnauthorizedResponse;\n  ...Body<UnauthorizedError>;\n}\n\nmodel PetSuccessResponse {\n  ...OkResponse;\n  ...Body<string>;\n}\n\nmodel PetNoContentResponse {\n  ...NoContentResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Type References in Object Values (Error) in TypeSpec\nDESCRIPTION: This snippet shows valid and invalid property definitions within a TypeSpec object value. It highlights that object value properties must refer to other values (like nested object values `#{ nested: true }`), and referencing types (like model types `{ nested: true }` or scalar types `string`) directly within an object value definition is an error.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nconst example = #{\n  prop1: #{ nested: true }, // ok\n  prop2: {\n    nested: true,\n  }, // error: values can't reference a type\n  prop3: string, // error: values can't reference a type\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Text File Type with Path-Based Filename in TypeSpec\nDESCRIPTION: Illustrates creating a custom model `SpecFile` that extends `File` to restrict content types (`application/json`, `application/yaml`) and content representation (`string`). It maps the `filename` property to a path parameter using `@path` and also provides it in an HTTP header (`x-filename`) using `@header`. Corresponding GET (`downloadSpec`) and POST (`uploadSpec`) operations are defined for this custom type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_14\n\nLANGUAGE: tsp\nCODE:\n```\n// Declare a custom type of text file, where the filename goes in the path\n// in requests.\nmodel SpecFile extends File<\"application/json\" | \"application/yaml\", string> {\n  // Provide a header that contains the name of the file when created or updated\n  @header(\"x-filename\")\n  @path\n  filename: string;\n}\n\n@get op downloadSpec(@path name: string): SpecFile;\n\n@post op uploadSpec(@bodyRoot spec: SpecFile): void;\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Path Parameter in TypeSpec\nDESCRIPTION: Uses the `@route` decorator to map the `getPet` operation to the path `/pets/{petId}`. The `{petId}` segment is defined as a string parameter `petId` for the operation, which returns a single `Pet` object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_7\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@route(\"/pets/{petId}\") op getPet(petId: string): Pet\n```\n\n----------------------------------------\n\nTITLE: Discriminated Unions for Polymorphism with Custom Discriminator - TypeSpec\nDESCRIPTION: Uses the @discriminated decorator (with envelope: none) to define a union 'Pet' and constituent models with fixed kind fields. The emitted OpenAPI schema includes discriminator properties and mapping. Inputs: Discriminated TypeSpec union. Outputs: Discriminated union schema with explicit mapping from property values to subschema references.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_33\n\nLANGUAGE: typespec\nCODE:\n```\n@discriminated(#{ envelope: \"none\" })\nunion Pet {\n  cat: Cat,\n  dog: Dog,\n}\nmodel Cat {\n  kind: \"cat\";\n  meow?: int32;\n}\nmodel Dog {\n  kind: \"dog\";\n  bark?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/rest via npm - Bash\nDESCRIPTION: Demonstrates how to install the @typespec/rest npm package needed for applying REST decorators in TypeSpec. This step is required before using any of the decorators detailed in this documentation. The command installs the module and makes its features available for modeling RESTful services.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/rest\n```\n\n----------------------------------------\n\nTITLE: Filtering Model Properties by Visibility with @withVisibilityFilter - TypeSpec Typespec\nDESCRIPTION: Demonstrates filtering properties of a model using the @withVisibilityFilter decorator in TypeSpec. Defines a base Example model with varied visibilities, and then creates derived models that include only properties matching all, any, or none of specified visibility modifiers. Requires prior definition of Lifecycle enum and @visibility decorator usage. Used for generating tailored model 'views' for specific access patterns in code generation. Input: Example model; Output: CreateAndReadExample, CreateOrUpdateExample, NonUpdateExample models with filtered properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/visibility.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Example {\n  @visibility(Lifecycle.Create)\n  id: string;\n\n  @visibility(Lifecycle.Create, Lifecycle.Read)\n  name: string;\n\n  @visibility(Lifecycle.Update)\n  description: string;\n}\n\n@withVisibilityFilter(#{ all: [Lifecycle.Create, Lifecycle.Read] })\nmodel CreateAndReadExample {\n  ...Example;\n}\n\n@withVisibilityFilter(#{ any: [Lifecycle.Create, Lifecycle.Update] })\nmodel CreateOrUpdateExample {\n  ...Example;\n}\n\n@withVisibilityFilter(#{ none: [Lifecycle.Update] })\nmodel NonUpdateExample {\n  ...Example;\n}\n```\n\n----------------------------------------\n\nTITLE: Primitive Array to OpenAPI3 Schema - YAML\nDESCRIPTION: Provides the OpenAPI3 schema for a TypeSpec model with a primitive array. Includes xml name and unwrapping hints to reflect XML serialization requirements. No complex dependencies beyond OpenAPI3 spec compliance. Maps TypeSpec array properties to OpenAPI YAML definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nPet:\n  type: \"object\"\n  properties:\n    tags:\n      type: \"array\"\n      items:\n        type: string\n        xml:\n          name: tags\n  xml:\n    name: \"XmlPet\"\n```\n\n----------------------------------------\n\nTITLE: Transforming WidgetData to Transport Format in TypeScript\nDESCRIPTION: This TypeScript function serves as an entry point for transforming a `WidgetData` object from its application representation to a transport-suitable format (e.g., JSON). It handles null or undefined inputs and delegates the actual transformation logic based on the discriminator to the `jsonWidgetDataToTransportDiscriminator` function.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/discriminated_union.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport function jsonWidgetDataToTransportTransform(input_?: WidgetData | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return jsonWidgetDataToTransportDiscriminator(input_);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Well-Known Protobuf LatLng Model Reference - TypeSpec - typespec\nDESCRIPTION: Defines a model referencing Protobuf's LatLng message (google.type.LatLng). Used for representing geographic coordinates. TypeSpec will insert the required import and type mapping. Dependency: google/type/latlng.proto.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Protobuf.WellKnown.LatLng\n```\n\n----------------------------------------\n\nTITLE: Handling 204 No Content HTTP Response - TypeScript\nDESCRIPTION: This function implements a REST client 'read' operation, sending a GET request and returning void if the HTTP status is 204 and there is no response body. It checks the operationOptions.onResponse callback, verifies the response status and body, and throws an error for any other case. Prerequisites: WidgetsClientContext, options of type ReadOptions, and parse, createRestError utilities.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-response.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function read(client: WidgetsClientContext, options?: ReadOptions): Promise<void> {\n  const path = parse(\"/widgets\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Model Array Response - JSON\nDESCRIPTION: This code snippet, for the GET /type/property/additionalProperties/spreadRecordModelArray endpoint, provides a model where both 'knownProp' and 'prop' are arrays of objects. This shape ensures arrays of similar submodels can be handled as both included and additional properties in API responses.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_221\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"knownProp\\\": [{ \\\"state\\\": \\\"ok\\\" }, { \\\"state\\\": \\\"ok\\\" }],\\n  \\\"prop\\\": [{ \\\"state\\\": \\\"ok\\\" }, { \\\"state\\\": \\\"ok\\\" }]\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Scalar in TypeSpec - TypeSpec\nDESCRIPTION: Demonstrates how to declare a simple scalar type using the 'scalar' keyword in TypeSpec. The scalar 'ternary' is named using an identifier and does not have any special properties or extensions. No dependencies or parameters are required. This snippet can serve as a template for creating custom scalar types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/scalars.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nscalar ternary;\n```\n\n----------------------------------------\n\nTITLE: Union of Authentication Schemes at Operation Level (Typespec)\nDESCRIPTION: Configures the 'one' operation to accept either BasicAuth or ApiKey authentication, while 'two' only accepts BasicAuth. Demonstrates unions in @useAuth at the operation scope, requiring both BasicAuth and ApiKeyAuth definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\n@useAuth(BasicAuth)\\nnamespace MyService;\\n\\n@useAuth(BasicAuth | ApiKeyAuth<ApiKeyLocation.query, \\\"api_key\\\">)\\nop one(): void; // Use either BasicAuth OR ApiKey\\nop two(): void; // Use BasicAuth only\n```\n\n----------------------------------------\n\nTITLE: Declaring Operation Options Interface Extension - TypeScript\nDESCRIPTION: Defines a TypeScript interface 'SendOptions' extending a base 'OperationOptions' for augmenting the send operation. This follows a typical client SDK pattern to aggregate all optional parameters (such as custom hooks or cancellation tokens) in a single options bag, ensuring extensibility and adherence to client operation contracts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/union_body.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SendOptions extends OperationOptions {}\n```\n\n----------------------------------------\n\nTITLE: Validating Spread String Property Response - JSON\nDESCRIPTION: For the GET /type/property/additionalProperties/spreadRecordString endpoint, this JSON response includes a descriptive 'name' and a simple string property 'prop'. This tests the additional property logic where only string values are appended to the base record model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_231\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"name\\\": \\\"SpreadSpringRecord\\\", \\\"prop\\\": \\\"abc\\\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Response Headers in OpenAPI YAML\nDESCRIPTION: Demonstrates a YAML snippet with duplicate response header definitions under the same status code in OpenAPI. This error occurs when the same header name is defined multiple times for a single HTTP response, leading to ambiguity. To resolve, ensure every header key is unique for each status code in the OpenAPI response schema.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/diagnostics.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nresponses:\\n  \"200\":\\n    description: Successful response\\n    headers:\\n      X-Rate-Limit:\\n        description: The number of allowed requests in the current period\\n        schema:\\n          type: integer\\n      X-Rate-Limit:\\n        description: The number of allowed requests in the current period\\n        schema:\\n          type: integer\\n\n```\n\n----------------------------------------\n\nTITLE: Specifying List REST Resource Operations in TypeSpec (Typespec)\nDESCRIPTION: This decorator labels an operation as a list endpoint for a specified resource type. It is applied to operations and requires the resource's model type. Used when defining list (collection GET) endpoints in REST APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.listsResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Disabling Pretty Logging via --pretty Flag (Bash)\nDESCRIPTION: This Bash command demonstrates disabling the default pretty logging features (like colors and diagnostic previews) using `--pretty=false`. The default value for `--pretty` is `true`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --pretty=false\n```\n\n----------------------------------------\n\nTITLE: Restricting String Type Maximum Length with @maxLength in TypeSpec\nDESCRIPTION: Shows the usage of @maxLength to enforce an upper bound on the length of string types in models or scalars. This is useful for validation and ensuring compliance with external schemas or storage. Requires TypeSpec scalar or model type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_20\n\nLANGUAGE: typespec\nCODE:\n```\n@maxLength(value: valueof integer)\n```\n\n----------------------------------------\n\nTITLE: Negotiating Content-Type with Overloaded Operations (TSP)\nDESCRIPTION: Defines polymorphic content negotiation using operation overloads: getAvatar returns either a PNG or JPEG depending on the Accept header. Models annotate responses with the correct Content-Type header. Uses @overload to specify alternate implementations for each content-type. Designed for endpoints that return binary images in different formats through content-type negotiation. Requires TSP syntax support.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/content-types.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\nmodel PngImage {\n  @header contentType: \"image/png\";\n  @body image: bytes;\n}\n\nmodel JpegImage {\n  @header contentType: \"image/jpeg\";\n  @body image: bytes;\n}\n\n@route(\"/avatar\")\nop getAvatar(@header accept: \"image/png\" | \"image/jpeg\"): PngImage | JpegImage;\n\n@overload(getAvatar)\nop getAvatarAsPng(@header accept: \"image/png\"): PngImage;\n\n@overload(getAvatar)\nop getAvatarAsJpeg(@header accept: \"image/jpeg\"): JpegImage;\n```\n\n----------------------------------------\n\nTITLE: Serializing a Nullable Byte Property as Base64 - TypeScript\nDESCRIPTION: Implements a serializer for converting a ModelWithBytes object to a plain object suitable for JSON transport, encoding the nullable byte property as base64. Requires 'encodeUint8Array' and is used in POST and possibly PUT operations. Takes a strongly-typed model (or null), outputs a plain object with the bytes field base64-encoded for transmission.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/bytes_nullable.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonModelWithBytesToTransportTransform(input_?: ModelWithBytes | null): any {\\n  if (!input_) {\\n    return input_ as any;\\n  }\\n  return {\\n    requiredProperty: input_.requiredProperty,\\n    nullableProperty: encodeUint8Array(input_.nullableProperty, \\\"base64\\\")!,\\n  }!;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdditionalInfo Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.OpenAPI.AdditionalInfo` model. This model allows specifying additional metadata for the generated OpenAPI document, such as title, version, summary, terms of service, contact, and license information. These properties can override details specified using decorators like `@service` or `@summary` on the service namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/data-types.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.OpenAPI.AdditionalInfo\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Widget Interface with Additional Properties Envelope - TypeScript\nDESCRIPTION: Defines a TypeScript 'Widget' interface representing the TypeSpec model, placing known properties at the root and capturing arbitrary properties in an 'additionalProperties' Record envelope. Intended for type-safe data exchange, it requires TypeScript and expects an ES or CommonJS module system. Parameters: 'name' (string), 'age' (number), 'optional' (optional string), 'additionalProperties' (optional Record<string, unknown>). Output: Type-compliant 'Widget' objects.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/additional-properties/extends.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Widget {\n  name: string;\n  age: number;\n  optional?: string;\n  additionalProperties?: Record<string, unknown>;\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming JSON with Base64-Encoded Bytes in TypeScript\nDESCRIPTION: This TypeScript function handles transformation of a JSON object containing a base64-encoded 'property' field into a BytesProperty object by decoding the value. It is intended as a helper function for deserializing API responses into client-side models. Dependencies include a decodeBase64 utility and knowledge of the BytesProperty model. It expects a JSON input with a 'property' field and outputs a decoded BytesProperty, returning the input unchanged if it is undefined.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/model_with_bytes_property.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonBytesPropertyToApplicationTransform\nexport function jsonBytesPropertyToApplicationTransform(input_?: any): BytesProperty {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    property: decodeBase64(input_.property)!,\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Querying ModelWithBytes with JSON Transformation - TypeScript\nDESCRIPTION: Implements a TypeScript REST client 'get' method to retrieve a ModelWithBytes instance, decoding the nullableProperty from base64 if the content type is JSON. Requires utility functions like 'parse', 'jsonModelWithBytesToApplicationTransform', and 'createRestError', as well as a configured 'client'. Parameters include a client context and optional options; returns the deserialized model or throws errors on failure. Expects status 200 and handles possible response hooks.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/bytes_nullable.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function get(\\n  client: TestClientContext,\\n  options?: GetOptions,\\n): Promise<ModelWithBytes> {\\n  const path = parse(\\\"/\\\").expand({});\\n  const httpRequestOptions = {\\n    headers: {},\\n  };\\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \\\"function\\\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 200 && response.headers[\\\"content-type\\\"]?.includes(\\\"application/json\\\")) {\\n    return jsonModelWithBytesToApplicationTransform(response.body)!;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a POST Operation with @bodyRoot in TypeSpec\nDESCRIPTION: This TypeSpec code defines a service `Test` with a POST operation `create`. The `@bodyRoot` decorator indicates that the `widget` parameter represents the entire request body. The `widget` object contains required `id` and `name` fields, an optional `age` field (part of the body), and an optional `foo` field annotated with `@header` to be sent as an HTTP header. The operation returns `void`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/body_root_anonymous.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n\n@post op create(\n  @bodyRoot widget: {\n    id: string;\n    name: string;\n    age?: string;\n    @header foo?: string;\n  },\n): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Page Response Interface in TypeScript (Continuation Token)\nDESCRIPTION: This TypeScript interface `LinkPageResponse` defines the structure of a single page of results returned by the `byPage` iterator for the continuation token pattern. It contains the array of `pets` for the current page and the optional `nextToken` to fetch the subsequent page.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts interface LinkPageResponse\nexport interface LinkPageResponse {\n  pets: Array<Pet>;\n  nextToken?: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring @typespec/openapi3 Emitter in tspconfig.yaml\nDESCRIPTION: This YAML snippet shows the basic configuration required in a `tspconfig.yaml` file to enable the `@typespec/openapi3` emitter. Adding the emitter's name to the `emit` array ensures it runs during the `tsp compile` process without needing the `--emit` flag.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi3/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\\n  - \"@typespec/openapi3\"\n```\n\n----------------------------------------\n\nTITLE: Declaring the @added Decorator Syntax in TypeSpec\nDESCRIPTION: This snippet shows the syntax for the `@added` decorator from the `TypeSpec.Versioning` namespace. It takes a single `EnumMember` parameter (`version`) to specify the version in which the decorated element was introduced. This decorator can be applied to various TypeSpec elements like models, properties, operations, etc.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Versioning.added(version: EnumMember)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Custom TypeSpec Library\nDESCRIPTION: Demonstrates how a user would import and utilize a custom TypeSpec library (`MyLibrary`) within their own TypeSpec program (`.tsp` file). It shows the `import` statement to include the library and the `using` statement to bring the library's namespace into the current scope, allowing direct use of its defined types (like `Person`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_21\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nimport \"MyLibrary\";\nusing MyLibrary;\n\nmodel Employee extends Person {\n  job: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Single Inheritance and Schema AllOf - TypeSpec\nDESCRIPTION: Defines a base model 'Pet' and two child models 'Cat' and 'Dog' using the extends keyword. This demonstrates single inheritance in TypeSpec, which produces OpenAPI schemas using allOf to compose model structure. Dependencies: None; standard TypeSpec. Inputs: Model definitions. Outputs: Polymorphic relationships in schemas.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_26\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Pet {\n  name: string;\n}\n\nmodel Cat extends Pet {\n  meow: int32;\n}\n\nmodel Dog extends Pet {\n  bark: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Doc Comments as Model Documentation - TypeSpec\nDESCRIPTION: This example illustrates that regular doc comments (/** */) in TypeSpec can now be used as model documentation, superseding the need for the @doc decorator unless explicitly provided. The 'Foo' model is annotated using a doc comment, and the model has a single property named 'name' of type string.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-06-06.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n/** This will now be the documentation for model Foo */\nmodel Foo {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Template Parameter with Object Constraint and Usage - TypeSpec - tsp\nDESCRIPTION: Shows the use of a generic model in TypeSpec with a template parameter constrained to a specific object shape, and an alias that utilizes the model, demonstrating new completion support. Model 'User' has a template parameter 'T' which must implement properties 'name' and 'age', and 'user' is an alias demonstrating possible completions. This snippet introduces no dependencies and highlights strongly-typed generic patterns introduced in TypeSpec 0.59.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-08-06.md#_snippet_6\n\nLANGUAGE: tsp\nCODE:\n```\nmodel User<T extends {name: string;age: int16}> {}\nalias user = User<{\n  ┆: [age] | [name];\n}>;\n\n```\n\n----------------------------------------\n\nTITLE: Constructing Test Client Wrapper for Enum Operation - TypeScript\nDESCRIPTION: Implements a TestClient class encapsulating the created context and exposing a high-level method for the send operation. The constructor sets up the internal context, and the send method delegates to the previously defined send function, simplifying consumer usage while hiding transport details.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/union_body.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\\n  #context: TestClientContext;\\n\\n  constructor(endpoint: string, options?: TestClientOptions) {\\n    this.#context = createTestClientContext(endpoint, options);\\n  }\\n  async send(prop: EnumsOnlyCases, options?: SendOptions) {\\n    return send(this.#context, prop, options);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Multipart Body Parts with HttpPart - TypeSpec (diff, tsp)\nDESCRIPTION: This snippet demonstrates the migration from regular multipart body fields to wrapping fields with HttpPart in TypeSpec HTTP endpoints. The diff shows updating the @body field to @multipartBody and wrapping individual fields such as name and avatar with HttpPart. Used in operations that handle multipart/form-data uploads; HttpPart marks each field's content part. Requires use of the @multipartBody decorator and HttpPart types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-18.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\nop upload(\n  @header contentType: \"multipart/form-data\",\n-  @body body: {\n+  @multipartBody body: {\n-    name: string;\n+    name: HttpPart<string>;\n-    avatar: bytes;\n+    avatar: HttpPart<bytes>;\n  }\n): void;\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/http-server-js in a Library Project (Bash)\nDESCRIPTION: This command uses npm to install the `@typespec/http-server-js` package as a peer dependency using the `--save-peer` flag. This is the recommended approach when building a TypeSpec library that utilizes this package, allowing the consuming application to manage the dependency version. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http-server-js/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/http-server-js\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/http-server-js in a Spec Project (Bash)\nDESCRIPTION: This command uses npm to install the `@typespec/http-server-js` package as a standard dependency. It is intended for use directly within a TypeSpec specification project. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http-server-js/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-server-js\n```\n\n----------------------------------------\n\nTITLE: Defining the OAuth2 ImplicitFlow Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.ImplicitFlow` model. This model represents the OAuth2 implicit grant flow for authentication, specifying the flow `type`, the required `authorizationUrl`, an optional `refreshUrl`, and the list of `scopes` associated with the credential.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_21\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.ImplicitFlow\n```\n\n----------------------------------------\n\nTITLE: Defining @attribute Decorator in TypeSpec\nDESCRIPTION: This TypeSpec decorator, `@TypeSpec.Xml.attribute`, is used to specify that a target model property should be encoded as an XML attribute instead of an XML element node. It targets `ModelProperty` and takes no parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Xml.attribute\n```\n\n----------------------------------------\n\nTITLE: Applying API Key Authentication in TypeSpec\nDESCRIPTION: Uses the `@useAuth` decorator with `ApiKeyAuth` to specify API Key authentication. The type parameters `<\"header\", \"Api-Key\">` indicate the API key should be passed in a request header named `Api-Key`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_20\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@useAuth(ApiKeyAuth<\"header\", \"Api-Key\">)\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Resource Delete Operation Interface - TypeSpec - typespec\nDESCRIPTION: Declares the ExtensionResourceDelete interface template for handling deletion operations of extension resources, parameterized by Extension, Resource, and Error. Structures deletion API contracts for extension resources and relies on correct modeling of all template parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ExtensionResourceDelete<Extension, Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Library as ECMAScript Module - JSONC\nDESCRIPTION: This JSONC snippet shows how to set the \"type\" field in package.json to 'module', which is required for TypeSpec libraries to use ECMAScript Modules instead of CommonJS. This ensures correct module resolution and compatibility with modern JavaScript and TypeScript tooling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n  \"type\": \"module\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Visibility Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@visibility` decorator. This decorator sets the visibility modifiers (e.g., `Lifecycle.Read`, `Lifecycle.Create`) active on a model property, controlling its presence in different contexts. It adds to any existing visibility settings.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_66\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@visibility(...visibilities: valueof EnumMember[])\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing the Get Operation with Escaped Reserved Words - TypeScript - typescript\nDESCRIPTION: Implements the 'get' operation client-side in TypeScript, mapping reserved word parameters to safe identifiers ('await_' and 'break_'). Requires a 'TestClientContext', parameter values, and optionally an options bag. Sends an HTTP GET request with the specified parameters in the body, handles response hooks, and throws an error for non-204 responses. Dependencies include the 'TestClientContext', HTTP utility functions, and a 'createRestError' function.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/reserved_names.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function get(\n  client: TestClientContext,\n  await_: string,\n  options?: GetOptions,\n): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n    body: {\n      await: await_,\n      break: options?.break_,\n    },\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying String Content Media Type for JSON Schema in TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.contentMediaType` decorator specifies the media type (e.g., 'application/json', 'image/png') of the content stored within a string type or a model property of type string. This information is included in the generated JSON Schema. It requires a single string parameter `value` for the media type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.contentMediaType(value: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Defining Known Duration Encodings via Enum in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Introduces the `DurationKnownEncoding` enum for specifying duration's serialized representation, supporting ISO8601 and numeric (seconds) encodings. Facilitates serialization/deserialization of time durations in various formats as needed in APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_28\n\nLANGUAGE: typespec\nCODE:\n```\nenum DurationKnownEncoding\n```\n\n----------------------------------------\n\nTITLE: Updating a Singleton Resource - TypeSpec - typespec\nDESCRIPTION: Defines an update function for a singleton resource by providing property updates (ResourceCreateOrUpdateModel) and returning the Singleton or Error. Pattern supports modifying the one-and-only resource of its kind, often for global settings.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_54\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.SingletonResourceOperations.update(properties: TypeSpec.Rest.Resource.ResourceCreateOrUpdateModel<Resource>): Singleton | Error\n```\n\n----------------------------------------\n\nTITLE: Defining a Record-like Model and Operation in TypeSpec\nDESCRIPTION: This TypeSpec code defines a model named `Widget` within the `Test` namespace. By using `is Record<string>`, `Widget` is declared to behave structurally like a record or dictionary with string keys and string values, rather than generating a distinct model type. An operation `foo` is also defined, which returns an instance of this `Widget` (record) type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/additional-properties/is.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\n\nmodel Widget is Record<string>;\n\nop foo(): Widget;\n```\n\n----------------------------------------\n\nTITLE: Defining the @added Decorator in TypeSpec\nDESCRIPTION: Defines the syntax for the `@TypeSpec.Versioning.added` decorator. This decorator is used to mark when a specific element (like a Model, Property, Operation, Enum, etc.) was introduced in a particular API version. It takes a single parameter `version` of type `EnumMember` indicating the version of introduction.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Versioning.added(version: EnumMember)\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Protobuf Message using @message Decorator in TypeSpec\nDESCRIPTION: Defines the `@TypeSpec.Protobuf.message` decorator which explicitly marks a TypeSpec model as a Protobuf message, forcing the emitter to check and emit it. This is useful when automatic detection (based on `@field` presence on all properties or reference by a service operation) is not sufficient. It targets an empty block `{}` and takes no parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/decorators.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Protobuf.message\n```\n```\n\n----------------------------------------\n\nTITLE: Importing a Library using TypeSpec\nDESCRIPTION: Illustrates how to import a library by its package name (e.g., /rest) into a TypeSpec program. This allows for code reuse and integration of external modules managed via npm. Package resolution is handled via Node.js export logic, with preference given to TypeSpec-specific conditions in package.json. Inputs: package name string; Output: imported library contents become available. Requires the target package to be installed and structured for TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/imports.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"/rest\";\n```\n\n----------------------------------------\n\nTITLE: Default Model Serialization in TypeSpec (TSP & XML)\nDESCRIPTION: These code snippets show the default XML serialization of a model without the @attribute decorator. The TypeSpec model includes a property 'id', which by default is serialized as an XML node element. No special decorators are applied. Output is an XML element with a child element representing the property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Blob {\n  id: string;\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<Blob>\n  <id>abcdef</id>\n</Blob>\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart File Contracts with Content-Type in TypeSpec (tsp)\nDESCRIPTION: This TypeSpec snippet defines data models and an API operation for handling HTTP multipart requests with files constrained to a specific content type ('image/jpg'). It utilizes model extension, HTTP decorators, and the multipart body pattern, with a strong focus on type safety and protocol adherence. Required context includes familiarity with the TypeSpec language, and the models are meant to validate both structure and content type for uploaded files.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file_content_type.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\nmodel FileSpecificContentType extends File {\n  filename: string;\n  contentType: \"image/jpg\";\n}\n\nmodel FileWithHttpPartSpecificContentTypeRequest {\n  profileImage: HttpPart<FileSpecificContentType>;\n}\n\n@post\n@route(\"/check-filename-and-specific-content-type-with-httppart\")\nop imageJpegContentType(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: FileWithHttpPartSpecificContentTypeRequest,\n): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Testing Query Expansion with Record (Explode)\nDESCRIPTION: Defines a GET endpoint to test query expansion (`{?param*}`) with explode: true for a record parameter `param`. Given `{a: 1, b: 2}`, the expected query string is `?a=1&b=2`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_97\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/query-expansion/explode/record{?param*}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Response Interface in TypeScript (Next Link)\nDESCRIPTION: This TypeScript interface `LinkPageResponse` defines the structure of a single page of results returned by the `byPage` iterator for the next link pattern. It contains the array of `pets` for the current page and the optional `link` property containing the URL for the next page.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts interface LinkPageResponse\nexport interface LinkPageResponse {\n  pets: Array<Pet>;\n  link?: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec C# Service Generator - Bash\nDESCRIPTION: This command installs the @typespec/http-server-csharp package as a dependency using npm, typically within a TypeSpec specification project. No other dependencies are required besides a valid npm environment. Execution of this command adds the package to your project's dependencies, enabling code generation for C# with TypeSpec. Output is package installation; there are no code outputs or return values. Use this command inside the project root containing the TypeSpec spec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-csharp/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-server-csharp\n```\n\n----------------------------------------\n\nTITLE: Using a Template Parameter that Accepts Type or Value in TypeSpec\nDESCRIPTION: Shows a template parameter that can be either a type or a value, taking a union constraint. This supports flexibility in decorator usage or advanced metaprogramming. Demonstrates how direct literal values can be supplied and how such parameters are inferred as values. Dependencies: '@customDecorator'. Input: literal or type; Output: decorated alias.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/templates.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\nalias TakesTypeOrValue<StringTypeOrValue extends string | (valueof string)> = {\n  @customDecorator(StringOrValue)\n  property: string;\n};\n\nalias M1 = TakesValue<\"a\">;\n```\n\n----------------------------------------\n\nTITLE: Defining Page Settings Interface in TypeScript (Next Link)\nDESCRIPTION: This TypeScript interface `LinkPageSettings` defines settings for controlling pagination via the `byPage` method for the next link pattern. It includes the optional `maxPageSize` parameter, corresponding to the `@pageSize` decorator in the TypeSpec definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts interface LinkPageSettings\nexport interface LinkPageSettings {\n  maxPageSize?: number;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Nested Models with XML Encoded Names - TypeSpec\nDESCRIPTION: Introduces @encodedName for customizing XML element names in nested TypeSpec models. Helps control the outer XML tags for referenced models and their properties. Requires @encodedName to be interpreted by serialization tools.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_27\n\nLANGUAGE: TypeSpec\nCODE:\n```\nmodel Book {\n  author: Author;\n}\n\n@encodedName(\"application/xml\", \"XmlAuthor\")\nmodel Author {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding the Scope of `using` Statements in TypeSpec\nDESCRIPTION: Explains that bindings introduced by a `using` statement are local only to the namespace or scope where the `using` statement is declared. They do not become public members of that namespace. Therefore, types from the used namespace (`One`) are accessible within the using namespace (`Two`, e.g., `alias B = A;`), but cannot be accessed externally through the using namespace (`Two.A` is invalid). Aliases defined within the using namespace (`Two.B`) remain accessible.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/namespaces.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nnamespace One {\n  model A {}\n}\n\nnamespace Two {\n  using One;\n  alias B = A; // This is valid\n}\n\nalias C = Two.A; // This is not valid\nalias C = Two.B; // This is valid\n```\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Interface for Foo (Primitive Record)\nDESCRIPTION: Generated TypeScript interface `Foo` corresponding to the TypeSpec model. The `my_values` property (snake_case) is mapped to `myValues` (camelCase), and the TypeSpec `int32` type is mapped to the TypeScript `number` type within a `Record<string, number>`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/record.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/models.ts interface Foo\nexport interface Foo {\n  myValues: Record<string, number>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Constants with Explicit and Inferred Types in TypeSpec\nDESCRIPTION: This snippet shows different ways to declare constants using `const`. `stringValue` has an explicit type annotation (`string`). `oneValue` and `objectValue` have their types inferred from the assigned literal values, resulting in the specific literal types `1` and `{ x: 0, y: 0 }` respectively.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\nconst stringValue: string = \"hello\";\n//      ^-- type: string\n\nconst oneValue = 1;\n//      ^-- type: 1\n\nconst objectValue = #{ x: 0, y: 0 };\n//      ^-- type: { x: 0, y: 0 }\n```\n\n----------------------------------------\n\nTITLE: Formatting Space Before Opening Curly Brace in TypeSpec Models\nDESCRIPTION: Illustrates the requirement to place a space before the opening curly brace `{` in TypeSpec model definitions. The 'bad' example lacks the space, while the 'good' example includes it.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n// bad\nmodel Pet{\n  name: string;\n}\n\n// good\nmodel Pet {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for File with Specific Content Type\nDESCRIPTION: Defines the generated TypeScript interface `FileSpecificContentType`. It extends the standard `File` interface and mandates a `filename` property (string) and a specific `contentType` literal (\"image/jpg\"). This represents the typed file object expected in the request.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/multipart.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/models.ts interface FileSpecificContentType\nexport interface FileSpecificContentType extends File {\n  filename: string;\n  contentType: \"image/jpg\";\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Serializing Foo Model with Complex Array to Transport Format in TypeScript\nDESCRIPTION: Serializes a Foo object by mapping myValues using jsonArrayBarToTransportTransform, ensuring each Bar instance is correctly transformed to transport format. Requires Foo type, Bar type, and jsonArrayBarToTransportTransform. Input: Foo or null; output: transport object with transformed arrays.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/arrays.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonFooToTransportTransform(input_?: Foo | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    my_values: jsonArrayBarToTransportTransform(input_.myValues),\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Bytes Header Parameter in TypeSpec\nDESCRIPTION: This TypeSpec code defines an operation `defaultEncoding` that accepts an *optional* header parameter `value` of type `bytes`, indicated by the `?`. The default base64 encoding applies if the value is provided.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_bytes.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\n\n@route(\"/default\")\nop defaultEncoding(\n  @header\n  value?: bytes,\n): NoContentResponse;\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Status Code or Using Model Spread for HTTP Response - TypeSpec\nDESCRIPTION: Shows two approaches to explicitly control HTTP status codes in TypeSpec APIs: by using @statusCode or by spreading a common model (such as NoContent). Helps ensure responses do not default to 200 when 204 is intended, and demonstrates flexibility in response modeling. Requires @typespec/http and demonstrates advanced response specification patterns.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-05-07.md#_snippet_3\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop c1(): {\n  @header foo: string;\n  @statusCode _: 204;\n};\nop c1(): {\n  @header foo: string;\n  ...NoContent;\n}; // or spread common model\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec SSE Library in a Spec (Bash)\nDESCRIPTION: This command uses npm (Node Package Manager) to install the `@typespec/sse` package as a direct dependency for the current TypeSpec project. This is the standard way to add the library if you are writing TypeSpec specifications that utilize Server-Sent Events features.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/sse/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/sse\n```\n\n----------------------------------------\n\nTITLE: Specifying Emitters to Run in TypeSpec Projects - YAML - yaml\nDESCRIPTION: Configures the tspconfig.yaml file with one or more emitter entries in the 'emit' property, allowing selection of which output emitters (by name or path) are invoked in a build. Supports mixing package and local paths. This feature is native to the TypeSpec configuration system.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - emitter1 # Package name\n  - /path/to/emitter2 # Give a path to an emitter\n\n```\n\n----------------------------------------\n\nTITLE: Defining TagMetadata Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.OpenAPI.TagMetadata` model. This model provides additional metadata for a single tag used by operations in the OpenAPI document. It allows specifying an optional description and linking to external documentation via the `ExternalDocs` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/data-types.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.OpenAPI.TagMetadata\n```\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Library Linter via npm\nDESCRIPTION: This command installs the `@typespec/library-linter` package as a development dependency using the Node Package Manager (npm). This is a prerequisite for using the linter in a TypeSpec library project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/library-linter/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @typespec/library-linter\n```\n\n----------------------------------------\n\nTITLE: Implementing and Linking Namespaced Decorators in TypeScript\nDESCRIPTION: Provides JavaScript/TypeScript implementations for the `$customName` and `$tableName` decorators. Crucially, it uses `setTypeSpecNamespace(\"MyLib\", $tableName)` to explicitly link the `$tableName` function implementation to the `tableName` decorator declared within the `MyLib` namespace in the TypeSpec file, ensuring the compiler connects the declaration and implementation correctly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nexport function $customName(context: DecoratorContext, name: string) {}\n\nexport function $tableName(context: DecoratorContext, name: string) {}\nsetTypeSpecNamespace(\"MyLib\", $tableName);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic File Download and Upload Operations in TypeSpec\nDESCRIPTION: Shows how to define simple HTTP GET and POST operations using TypeSpec decorators (`@get`, `@post`) to handle file downloads (returning `File`) and uploads (accepting `File` in the body via `@bodyRoot`). These represent fundamental file transfer mechanisms.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_12\n\nLANGUAGE: tsp\nCODE:\n```\n// Download a file\n@get op download(): File;\n\n// Upload a file\n@post op upload(@bodyRoot file: File): void;\n```\n\n----------------------------------------\n\nTITLE: Assigning Data Format Hints to String Types in TypeSpec\nDESCRIPTION: Applies the @format decorator to a scalar extending string to provide a data format hint (like 'uuid'). This assists downstream tooling or code generators in type mapping, input validation, or documentation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n@format(\"uuid\")\nscalar uuid extends string;\n```\n\n----------------------------------------\n\nTITLE: Model Field Reserved Keyword Handling for 'const' - TypeSpec Language\nDESCRIPTION: Shows the handling of 'const' as a reserved keyword in model property definitions in TypeSpec. Direct use causes an error, and the correct approach is demonstrated using backticks to escape the keyword. This snippet emphasizes backward compatibility and the proper way to use reserved words as field names. There are no dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Test {\n  // error\n  const: string;\n\n  // correct\n  `const`: string;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Download Operations with File Bodies - TypeSpec Language\nDESCRIPTION: Multiple variations of HTTP operation signatures for file downloading, all resulting in a response body handled as a file by @typespec/http. These examples demonstrate use of 'File' as a direct return, bodyRoot property, model spreading, type intersection, and combination thereof. All require TypeSpec.Http and indicate response outputs as file bodies for use in HTTP APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n// The response is _exactly_ a File, so the response has a file body.\nop download(): File;\n\n// The response has an explicit body that is a File, so the response has a file body.\nop download(): {\n  @bodyRoot file: File;\n};\n\n// The response is _effectively_ a File (`File` is the only thing spread into it), so the response has a file body.\nop download(): {\n  ...File;\n};\n\n// File is intersected with other models containing only HTTP metadata, so the response has a file body.\nop download(): OkResponse & File;\n\n// The response has an explicit body that is _effectively_ a File, so the response has a file body.\nop download(): {\n  @bodyRoot file: {\n    ...File;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Example: Setting Minimum String Length Constraint in TypeSpec\nDESCRIPTION: Applies @minLength(2) to the Username scalar created from string, ensuring all usernames are at least two characters long. Aids in validation and prevents too-short values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_31\n\nLANGUAGE: typespec\nCODE:\n```\n@minLength(2)\nscalar Username extends string;\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Encoded Names in TypeSpec Model\nDESCRIPTION: Demonstrates a TypeSpec model `CertificateAttributes` where multiple `@encodedName` decorators are applied. The `notBefore` property is named `nbf` in JSON, while the `expires` property is named `exp` in JSON and `ExpireAt` in XML. Properties without a specific `@encodedName` for a given format use their default names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/encoded-names.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel CertificateAttributes {\n  @encodedName(\"application/json\", \"nbf\")\n  notBefore: int32;\n\n  @encodedName(\"application/json\", \"exp\")\n  @encodedName(\"application/xml\", \"ExpireAt\")\n  expires: int32;\n\n  created: int32;\n  updated: int32;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Combining Standard and Custom Response Types in TypeSpec\nDESCRIPTION: Demonstrates how to combine standard response types (like `ConflictResponse` from `TypeSpec.Http`, corresponding to HTTP 409) with custom response types (`Widget` for 200 OK, `Error` for default) using unions (`|`) and intersections (`&`) in an operation's return signature. The `update` operation can return a `Widget` (implicitly 200 OK), a `ConflictResponse` intersected with `Error` (409 response), or a generic `Error` (default response).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n// has \"200\", '409', and \"default\" responses\n@post op update(@body widget: Widget): Widget | (ConflictResponse & Error) | Error;\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Scalar UTC DateTime Types and Operation with Encodings - TypeSpec\nDESCRIPTION: Defines scalar types extending \"utcDateTime\" in TypeSpec, specifying custom encodings such as \"rfc3339\", \"rfc7231\", and \"unixTimestamp\" with an integer width. An operation named \"foo\" is declared to use all custom scalars as parameters. No external dependencies, but relies on the TypeSpec language and context that provides \"utcDateTime\" scalar and @encode decorator. Inputs are various customized datetime types, output is void. Applicable when modeling API surface that requires precise datetime format controls.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/scalars.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\nscalar MyDate extends utcDateTime;\n@encode(\"rfc3339\")\nscalar MyUtcDate extends utcDateTime;\n@encode(\"rfc7231\")\nscalar MyIsoDate extends utcDateTime;\n@encode(\"unixTimestamp\", int32)\nscalar MyUnixDate extends utcDateTime;\n\nop foo(a: MyDate, b: MyUtcDate, c: MyIsoDate, d: MyUnixDate): void;\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint with Multiple Content Types - TypeSpec\nDESCRIPTION: This TypeSpec API contract defines a GET method that can return either a JSON or XML response, both wrapping a Widget model. It uses two models (JsonResponse and XmlResponse), each annotated with @body and @header for type-safe content negotiation and code generation. This instructs codegen to generate multi-format response handlers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-response.md#_snippet_7\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\n\nmodel Widget {\n  name: string;\n  age: int32;\n}\n\nmodel JsonResponse {\n  @body body: Widget;\n  @header contentType: \"application/json\";\n}\n\nmodel XmlResponse {\n  @body body: Widget;\n  @header contentType: \"application/xml\";\n}\n\n@route(\"/widgets\")\ninterface Widgets {\n  @get read(): JsonResponse | XmlResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the 'create' Operation Function in TypeScript\nDESCRIPTION: This TypeScript function implements the service operation to create a 'Widget'. It requires a client context, the required properties 'id' and 'name', and an optional 'options' bag which may contain additional or nested properties. It constructs an HTTP request, transforming the address for transport, and handles the response with custom error logic. Dependencies include the HTTP client infrastructure, a 'jsonAddressToTransportTransform' function for serializing addresses, and the custom 'createRestError' error handler.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/spread_with_nested.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function create(\n  client: TestClientContext,\n  id: string,\n  name: string,\n  options?: CreateOptions,\n): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n    body: {\n      id: id,\n      name: name,\n      age: options?.age,\n      address: jsonAddressToTransportTransform(options?.address),\n    },\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying firstLink Pagination Decorator in TypeSpec\nDESCRIPTION: Demonstrates the @firstLink decorator for pagination, marking a property as the link to the first page in a paged resource model. Needs to be in a model representing a paged result set and used by operations supporting pagination.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_10\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Page<T> {\n  @pageItems items: T[];\n  @nextLink next: url;\n  @prevLink prev: url;\n  @firstLink first: url;\n  @lastLink last: url;\n}\n@list op listPets(): Page<Pet>;\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Methods for Operations in TypeSpec\nDESCRIPTION: Illustrates defining operations within a namespace (`Gadgets`) using `@route` and `@tag`. It shows how TypeSpec infers the HTTP method: `post` for `create` (because it has a `@body` parameter) and `get` for `read` (no body specified, so defaults to `get`). Explicit decorators like `@get`, `@put`, `@post`, etc., can also be used to override this behavior.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@tag(\"Gadgets\")\n@route(\"/gadgets\")\nnamespace Gadgets {\n  op create(@body gadget: Gadget): Gadget | Error; // uses \"post\" method\n  op read(@path id: string): Gadget | Error; // uses \"get\" method\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Converting OpenAPI3 Component Schemas to TypeSpec Models (YAML/TSP)\nDESCRIPTION: Illustrates the conversion of OpenAPI 3 component schemas (an object `Widget` and a scalar `uuid`) defined under `#/components/schemas` into corresponding TypeSpec models and scalars. The `Widget` object with properties becomes a `model`, and the `uuid` string with a specific format becomes a `scalar` extending `string` with a `@format` decorator.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/cli.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Widget:\n      type: object\n      required:\n        - id\n        - weight\n        - color\n      properties:\n        id:\n          type: string\n        weight:\n          type: integer\n          format: int32\n        color:\n          type: string\n          enum:\n            - red\n            - blue\n    uuid:\n      type: string\n      format: uuid\n```\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Widget {\n  id: string;\n  weight: int32;\n  color: \"red\" | \"blue\";\n}\n\n@format(\"uuid\")\nscalar uuid extends string;\n```\n\n----------------------------------------\n\nTITLE: Referencing External OpenAPI Schemas with @useRef Decorator in TypeSpec\nDESCRIPTION: This example demonstrates the @useRef decorator in TypeSpec, which configures a model to use an external OpenAPI schema reference instead of the generated TypeSpec schema. The decorator accepts a JSON reference URI string, enabling schema reuse across OpenAPI documents. Key parameters include the schema JSON pointer. Dependencies include the openapi-typespec extension.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_16\n\nLANGUAGE: typespec\nCODE:\n```\n// Whenever the OpenAPI emitter would try to reference the Sku model's schema, it will reference the below\n// external schema instead.\n@useRef(\"common.json#/components/schemas/Sku\")\nmodel Sku {\n  name: string;\n  tier: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Media Type Hint to Model or Scalar in TypeSpec\nDESCRIPTION: Demonstrates how to use @mediaTypeHint with a mediaType parameter to guide clients/emitters how to serialize the decorated TypeSpec type. This is instrumental in controlling Content-Type headers and default serialization in HTTP APIs. Media type strings should be valid per RFC 6838, and inheritance across extended models is supported.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_26\n\nLANGUAGE: typespec\nCODE:\n```\n@mediaTypeHint(mediaType: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Composing MyApi Client Structure in TypeScript\nDESCRIPTION: This TypeScript snippet defines the structure of the generated MyApiClient class, which encapsulates context and exposes two members, FooClient and BarClient, mapped to the Foo and Bar namespaces of the API. It demonstrates proper delegation of credential, endpoint, and options to subclients, ensuring that authentication setup (@useAuth) does not compromise client modularity. Dependencies include declared classes BasicCredential, FooClient, BarClient, and MyApiClientContext, as well as the function createMyApiClientContext. The constructor requires an endpoint URL, credential, and optional client options, and initializes subordinate clients accordingly. The snippet presumes correct import and declaration of dependencies and does not handle errors or advanced authentication schemes beyond the constructor arguments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/client_structure.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class MyApiClient {\\n  #context: MyApiClientContext;\\n  fooClient: FooClient;\\n  barClient: BarClient;\\n  constructor(endpoint: string, credential: BasicCredential, options?: MyApiClientOptions) {\\n    this.#context = createMyApiClientContext(endpoint, credential, options);\\n    this.fooClient = new FooClient(endpoint, credential, options);\\n    this.barClient = new BarClient(endpoint, credential, options);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Model with Primitive Record\nDESCRIPTION: Defines a TypeSpec model named `Foo` containing a property `my_values` which is a Record mapping strings to 32-bit integers. It also defines an operation `foo` that returns an instance of `Foo`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/record.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Foo {\n  my_values: Record<int32>;\n}\n\nop foo(): Foo;\n```\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Client for Global Namespace - TypeScript\nDESCRIPTION: Defines a 'Client' class that constructs an instance using the 'createClientContext' factory, stores it as a private field, and exposes an asynchronous 'foo' method that delegates to an operation-handler function. Designed for usage with no sub-clients as per the flat global namespace, this code depends on the presence of 'ClientContext', 'ClientOptions', 'FooOptions', and an external 'foo' operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/global_namespace.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Client {\n  #context: ClientContext;\n\n  constructor(endpoint: string, options?: ClientOptions) {\n    this.#context = createClientContext(endpoint, options);\n  }\n  async foo(options?: FooOptions) {\n    return foo(this.#context, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom OpenAPI Operation IDs with @operationId in TypeSpec\nDESCRIPTION: This example uses the `@operationId` decorator to assign the specific ID \"download\" to the `read` operation. This ID will be used in the generated OpenAPI definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/README.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n@operationId(\"download\")\nop read(): string;\n```\n\n----------------------------------------\n\nTITLE: Declaring Paginated List Operations using Decorators - TypeSpec\nDESCRIPTION: This TypeSpec snippet declares a paginated operation named 'listPets' using decorators such as @list, @pageItems, @nextLink, @prevLink, @firstLink, and @lastLink. It defines the operation's return structure, including primary results and navigation links. \nDependencies: TypeSpec standard pagination decorators. \nParameters: Operation inputs are implicit; output includes an array of pets and link URLs. \nInputs: Operation invocation (not shown). Outputs: Structured result for use by pagination-aware emitters. \nLimitation: Operation called 'listPets', expects Pet type declared elsewhere.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-11-05.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\n@list op listPets(): {\n  @pageItems pets: Pet[];\n  links: {\n    @nextLink next?: url;\n    @prevLink prev?: url;\n    @firstLink first?: url;\n    @lastLink last?: url;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Operation Streaming Mode using @stream Decorator in TypeSpec\nDESCRIPTION: This TypeSpec snippet shows the syntax for the `@TypeSpec.Protobuf.stream` decorator. Applied to an `Operation`, it specifies the streaming behavior (e.g., server streaming, client streaming, bidirectional). It requires a `mode` parameter of type `TypeSpec.Protobuf.StreamMode`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Protobuf.stream(mode: TypeSpec.Protobuf.StreamMode)\n```\n\n----------------------------------------\n\nTITLE: Providing Boolean Dictionary Payloads - JSON\nDESCRIPTION: Describes a JSON dictionary with string keys and boolean values. Used for API endpoints that exchange dictionaries mapping to true or false values, supporting both request and response scenarios.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_149\n\nLANGUAGE: json\nCODE:\n```\n{ \"k1\": true, \"k2\": false }\n```\n\n----------------------------------------\n\nTITLE: Using @extension Decorator with Custom OpenAPI Extensions - TypeSpec\nDESCRIPTION: Provides example usages of the @extension decorator for tagging elements with custom OpenAPI extension fields and complex objects. Each @extension call attaches a different extension: the first is a simple string value, the second is an object with nested fields. This showcases how multiple @extension decorators can be stacked to enrich elements with extra OpenAPI data.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/decorators.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@extension(\"x-custom\", \"My value\")\n@extension(\"x-pageable\", #{ nextLink: \"x-next-link\" })\nop read(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines a scalar `boolean` type, representing the standard boolean value (`true` or `false`) in TypeSpec models. Used wherever a logical true/false is required as a field or parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_30\n\nLANGUAGE: typespec\nCODE:\n```\nscalar boolean\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Entry Point in npm package.json (JSON)\nDESCRIPTION: Describes configuring a TypeSpec package's main entry point using the 'exports' field in package.json. The example sets up the library to use ./lib/main.tsp as its entry file for TypeSpec imports. This setup is essential for correct package resolution and interoperability with the TypeSpec compiler. Inputs: key-value structure under 'exports'; Output: proper mapping from import path to TypeSpec file.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/imports.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// ./node_modules/@typespec/rest/package.json\n{\n  \"exports\": {\n    \".\": { \"typespec\": \"./lib/main.tsp\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Events via NPM - Bash\nDESCRIPTION: This bash snippet demonstrates how to install the @typespec/events dependency for use within a TypeSpec spec. The install command uses npm to fetch and add the package to your project's dependencies. No extra parameters are required and this method ensures the package is available for TypeSpec specs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/events/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/events\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic Decorator Signature in TypeSpec\nDESCRIPTION: Demonstrates the basic syntax for declaring an external decorator signature in TypeSpec using `extern dec`. This signature defines a decorator named `logType` that takes a target of any type (`unknown`) and a single string argument named `name`. Declaring the signature enables type checking and IDE support, although the implementation is external (in JavaScript).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nextern dec logType(target: unknown, name: string);\n```\n\n----------------------------------------\n\nTITLE: Migrating @visibility(\"none\") to @invisible(Lifecycle) - TypeSpec TSP\nDESCRIPTION: Demonstrates the migration from the string-based @visibility(\"none\") decorator to the new @invisible(Lifecycle) pattern. No inputs are required; this applies to any field previously decorated with the deprecated pattern. Output is a refactored decorator providing the same functionality but following the new recommended syntax.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-04.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\n@visibility(\"none\")\nexample: string;\n```\n\nLANGUAGE: tsp\nCODE:\n```\n@invisible(Lifecycle)\nexample: string;\n```\n\n----------------------------------------\n\nTITLE: Specifying Payload Content Type in TypeSpec Event Union - TypeSpec Language\nDESCRIPTION: This snippet demonstrates applying both @data and @contentType decorators to specify the payload type and content type for an event variant within an event union. The @contentType('text/plain') decorates the 'value' field and @data marks it as the event payload. Dependencies include the @typespec/events library and prior event union declarations. Inputs are event variants; key constraint is only one field per variant can be marked as payload.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/events/README.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@events\nunion MixedEvents {\n  {\n    done: true,\n  },\n  {\n    done: false,\n    @data @contentType(\"text/plain\") value: string,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Applying @route to Interfaces and Inheritance Limitations - TypeSpec\nDESCRIPTION: This snippet demonstrates assigning a base path to an interface using the @route decorator, and shows that the route is not inherited when another interface extends the decorated interface. 'PetOps' has its operations under '/pets', but 'MyPetOps' does not inherit this route, due to TypeSpec's non-portability of @route on interfaces. 'list' operation returns a 'Pet' array, definition for 'Pet' is required elsewhere.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/resource-routing.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n// Operations prepended with /pets\\n@route(\"/pets\")\\ninterface PetOps {\\n  list(): Pet[]\\n}\\n\\n// Operations will *not* be prepended with /pets\\ninterface MyPetOps extends PetOps {\\n  ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Models Using the Spread Operator (...) in TypeSpec\nDESCRIPTION: Shows how the spread operator (`...`) can be used to copy properties from existing models (`Animal`, `Pet`) into a new model (`Dog`). This composition merges properties without establishing any nominal or inheritance relationship between the models. The resulting `Dog` model contains all properties from the spread sources (`species`, `name`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Animal {\n  species: string;\n}\n\nmodel Pet {\n  name: string;\n}\n\nmodel Dog {\n  ...Animal;\n  ...Pet;\n}\n\n// The Dog model is equivalent to the following declaration:\nmodel Dog {\n  species: string;\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Generic Response Model with OkResponse and Body<T> in TypeSpec\nDESCRIPTION: Shows the updated definition for the generic response model `MyResponse<T>`. It replaces `...OkResponse<T>` with separate spreads of `...OkResponse` (for status code defaults) and `...Body<T>` (for the generic body type), which is necessary when `T` might not be a model (e.g., an array or intrinsic type).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel MyResponse<T> {\n  ...OkResponse;\n  ...Body<T>;\n  @header example: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Providing String Dictionary Payloads - JSON\nDESCRIPTION: Displays a dictionary where keys map to string values, including empty strings. Used in endpoints demanding mappings from identifiers to strings, with allowance for blank values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_158\n\nLANGUAGE: json\nCODE:\n```\n{ \"k1\": \"hello\", \"k2\": \"\" }\n```\n\n----------------------------------------\n\nTITLE: Example XML Serialization with Encoded Names\nDESCRIPTION: Illustrates the XML output for the `CertificateAttributes` model. The `expires` element uses the name (`ExpireAt`) specified by the `@encodedName(\"application/xml\", ...)` decorator. Other properties (`notBefore`, `created`, `updated`) use their default names as no specific XML encoded name was provided.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/encoded-names.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<CertificateAttributes>\n  <notBefore>1430344421</notBefore>\n  <ExpireAt>2208988799</ExpireAt>\n  <created>1493938289</created>\n  <updated>1493938291</updated>\n</CertificateAttributes>\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating @parameterVisibility Decorator to Explicit Patch Optionality - TypeSpec TSP\nDESCRIPTION: Presents the deprecation of the no-argument @parameterVisibility decorator and shows how to achieve the same behavior using explicit options for the @patch decorator. Meant for operation definitions where PATCH optionality handling must be controlled. The sample illustrates the required transition for TypeSpec users migrating to newer versions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-04.md#_snippet_6\n\nLANGUAGE: tsp\nCODE:\n```\n@parameterVisibility\n@patch\nop example(@bodyRoot resource: Resource): Resource;\n```\n\nLANGUAGE: tsp\nCODE:\n```\n@patch(#{ implicitOptionality: false })\nop example(@bodyRoot resource: Resource): Resource;\n```\n\n----------------------------------------\n\nTITLE: Paginated JSON Responses with Continuation Tokens - JSON\nDESCRIPTION: These JSON snippets provide example paginated response bodies for endpoints that implement server-driven pagination using continuation tokens. The initial response includes an array of pet objects and a token ('nextToken') for fetching the next page. The next page response omits the token if there are no further pages. No external dependencies are required; each object includes 'id' and 'name' fields. The expected input is a GET request; outputs are paged results matching the documented structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"pets\\\": [\\n    { \\\"id\\\": \\\"1\\\", \\\"name\\\": \\\"dog\\\" },\\n    { \\\"id\\\": \\\"2\\\", \\\"name\\\": \\\"cat\\\" }\\n  ],\\n  \\\"nextToken\\\": \\\"page2\\\"\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"pets\\\": [\\n    { \\\"id\\\": \\\"3\\\", \\\"name\\\": \\\"bird\\\" },\\n    { \\\"id\\\": \\\"4\\\", \\\"name\\\": \\\"fish\\\" }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript SubClient without Credentials\nDESCRIPTION: This TypeScript class `SubClient` corresponds to the sub-namespace defined with `@useAuth(NoAuth)` in TypeSpec. Its constructor only requires an `endpoint` string and optional `SubClientOptions`, notably omitting any credential parameter. It initializes its private context (`#context`) using `createSubClientContext` and provides an asynchronous method `put` for the `put` operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/sub_client_override.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport class SubClient {\n  #context: SubClientContext;\n\n  constructor(endpoint: string, options?: SubClientOptions) {\n    this.#context = createSubClientContext(endpoint, options);\n  }\n  async put(options?: PutOptions) {\n    return put(this.#context, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Sparrow Model for Transport in TypeScript\nDESCRIPTION: The `jsonSparrowToTransportTransform` function serializes a `Sparrow` object for transport. It constructs an object containing the `kind` ('sparrow') and `wingspan` properties from the input `Sparrow` instance. Handles null or undefined input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/polymorphic_single_level_inheritance.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonSparrowToTransportTransform(input_?: Sparrow | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    kind: input_.kind,\n    wingspan: input_.wingspan,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Client Context with Required Endpoint\nDESCRIPTION: This TypeScript function `createTestClientContext` initializes and returns a `TestClientContext`. It requires an `endpoint` string as the first argument and accepts optional `TestClientOptions`. The function resolves the endpoint URL potentially containing parameters (though only 'endpoint' is used here) and utilizes an underlying `getClient` function (not shown) to instantiate the client context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/server/no-server.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientContext.ts function createTestClientContext\nexport function createTestClientContext(\n  endpoint: string,\n  options?: TestClientOptions,\n): TestClientContext {\n  const params: Record<string, any> = {\n    endpoint: endpoint,\n  };\n  const resolvedEndpoint = \"{endpoint}\".replace(/{([^}]+)}/g, (_, key) =>\n    key in params\n      ? String(params[key])\n      : (() => {\n          throw new Error(`Missing parameter: ${key}`);\n        })(),\n  );\n  return getClient(resolvedEndpoint, {\n    ...options,\n  });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Diagnostics in TypeSpec Library - TypeScript\nDESCRIPTION: This snippet demonstrates how to declare diagnostics within a TypeSpec library using the `createTypeSpecLibrary` function. Diagnostics are defined with unique codes, severities, and one or more messages, including support for parameterization and multiple message variants. It also shows how to re-export reporting helpers for convenient usage. Dependencies: `@typespec/compiler`. Parameters include code, severity, and messages. Outputs are diagnostic objects that can later be reported.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/diagnostics.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createTypeSpecLibrary } from \"@typespec/compiler\";\n\n// in lib.js\nexport const $lib = createTypeSpecLibrary({\n  name: \"@typespec/my-lib\",\n  diagnostics: {\n    // Basic diagnostic with a fixed message\n    \"no-array\": {\n      severity: \"error\",\n      messages: {\n        default: `Array is not allowed in my-lib models.`,\n      },\n    },\n\n    // Parameterized message\n    \"duplicate-route\": {\n      severity: \"error\",\n      messages: {\n        default: paramMessage`Route '${\"path\"}' is being referenced in 2 different operations.`,\n      },\n    },\n\n    // Multiple messages\n    \"duplicate-name\": {\n      severity: \"warning\",\n      messages: {\n        default: paramMessage`Duplicate type name: '${\"value\"}'.`,\n        parameter: paramMessage`Duplicate parameter key: '${\"value\"}'.`,\n      },\n    },\n  },\n} as const);\n\n// Re-export the helper functions to be able to just call them directly.\nexport const { reportDiagnostic, createDiagnostic };\n```\n\n----------------------------------------\n\nTITLE: Example of Migrated Enum-Based Visibility Decorator (TSP)\nDESCRIPTION: Shows the updated syntax for the `@visibility` decorator using enum members (`Lifecycle.Create`, `Lifecycle.Read`). This is the required replacement for the deprecated string-based visibility modifiers, using the standard `Lifecycle` enum.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_11\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@visibility(Lifecycle.Create, Lifecycle.Read)\n```\n```\n\n----------------------------------------\n\nTITLE: Identifying Payload Properties with MetadataInfo in TypeSpec Emitters (JavaScript)\nDESCRIPTION: Determines if a specific model property is part of the actual request/response body payload for a given `Visibility`. It returns `true` if the property is visible in the given context and is not considered metadata that is transmitted elsewhere (e.g., in headers).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-metadata-handling.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nMetadataInfo.isPayloadProperty(ModelProperty, Visibility): boolean\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Type_Array_Int32Value_get Endpoint\nDESCRIPTION: This JSON snippet represents the expected response body for the GET request to the `/type/array/int32` endpoint. It should return a JSON array containing 32-bit integer values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_132\n\nLANGUAGE: json\nCODE:\n```\n```json\n[1, 2]\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Bytes Patch (Null) Request - JSON\nDESCRIPTION: For PATCH /type/property/nullable/bytes/null, this code shows how to represent an explicitly null byte property while ensuring the presence of a required non-null field. It demonstrates support for patch requests where some values are optional.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_236\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": null }\n```\n\n----------------------------------------\n\nTITLE: Manually Collecting Diagnostics in Accessor - TypeScript\nDESCRIPTION: This alternative example shows manual collection of diagnostics within an accessor function, without using a collector utility. Diagnostics are created and pushed onto a regular array, and the results are returned as a tuple. This approach helps avoid duplicate reporting and provides flexibility to consumers. Dependencies: `@typespec/compiler`. Inputs are diagnostics created with `createDiagnostic`. Outputs a tuple of routes and diagnostics.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/diagnostics.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Diagnostic } from \"@typespec/compiler\";\n\nfunction getRoutes(): [Route, readonly Diagnostic] {\n  const diagnostics = [];\n  diagnostics.push(\n    createDiagnostic(program, {\n      code: \"no-array\",\n      target: diagnosticTarget,\n    }),\n  );\n  return [routes, diagnostics];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Compiled JavaScript in TypeSpec Main File - TypeSpec\nDESCRIPTION: This TypeSpec snippet imports the compiled JavaScript library entrypoint in the main TypeSpec file (lib/main.tsp) to ensure any code definitions (decorators, diagnostics, etc.) are available when the library is imported in a TypeSpec program. This guarantees side-effectful initialization.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"../dist/index.js\";\n```\n\n----------------------------------------\n\nTITLE: Testing Query Continuation Expansion with Array (Explode)\nDESCRIPTION: Defines a GET endpoint to test query continuation expansion (`{&param*}`) with explode: true for an array parameter `param`. Given `[\"a\",\"b\"]` and a fixed parameter `fixed=true`, the expected query string is `?fixed=true&param=a&param=b`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_89\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/query-continuation/explode/array?fixed=true{&param*}\n```\n\n----------------------------------------\n\nTITLE: Getting All Optional String Properties - JSON\nDESCRIPTION: Sample JSON response with an optional string property present. Useful for baseline value presence, encoding, and contract path validation for textual data.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_305\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": \"hello\" }\n```\n\n----------------------------------------\n\nTITLE: Declaring signed 32-bit Varint Scalar (sint32) - TypeSpec - typespec\nDESCRIPTION: Defines a scalar type which uses Protobuf sint32 encoding (signed, variable length). Efficiently encodes negative numbers using zigzag encoding. No dependencies. Input: signed 32-bit integer; Output: varint zigzag-encoded.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\nscalar TypeSpec.Protobuf.sint32\n```\n\n----------------------------------------\n\nTITLE: Declaring Service Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@service` decorator. This decorator marks a namespace as representing a service and allows configuring service-level properties like title and version via an optional `ServiceOptions` object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_59\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@service(options?: valueof ServiceOptions)\n```\n```\n\n----------------------------------------\n\nTITLE: Encoding bytes property with @encode decorator in TypeSpec (TypeSpec)\nDESCRIPTION: This snippet demonstrates the recommended method for specifying a bytes property as base64url-encoded in a TypeSpec model, using the @encode decorator. Requires the latest @typespec/compiler version. The bar property of Foo will be serialized as base64url, aligning with the new encoding conventions. Key parameter: the encoding string passed to @encode.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-05-10.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Foo {\n  @encode(\"base64url\")\n  bar: bytes;\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing TypeSpec Model with Property References in TypeScript\nDESCRIPTION: TypeScript function `jsonTodoItemPatchToTransportTransform` serializes an optional `TodoItemPatch` object (application model) into a transport representation (any), likely JSON. It handles null input and directly maps the `title` and `assignedTo` properties, demonstrating how referenced properties, including nullable ones, are handled during serialization. Located in `src/models/internal/serializers.ts`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/property_references_property.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport function jsonTodoItemPatchToTransportTransform(input_?: TodoItemPatch | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    title: input_.title,\n    assignedTo: input_.assignedTo,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrative Raw HTTP Multipart/Form-Data Request\nDESCRIPTION: This example shows the raw HTTP structure corresponding to a `multipart/form-data` request defined in the preceding TypeSpec example. It illustrates how parts like `username` (text/plain) and `avatar` (application/octet-stream) are separated by boundaries (`--abcde12345`) and include `Content-Disposition` and `Content-Type` headers for each part.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/multipart.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\n```http\nPOST / HTTP/1.1\nContent-Length: 428\nContent-Type: multipart/form-data; boundary=abcde12345\n--abcde12345\nContent-Disposition: form-data; name=\"username\"\nContent-Type: text/plain\ntypespector\n--abcde12345\nContent-Disposition: form-data; name=\"avatar\"; filename=\"image1.png\"\nContent-Type: application/octet-stream\n{…file content…}\n--abcde12345--\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Service with Multiple Authentication Schemes (Bearer and API Key)\nDESCRIPTION: This TypeSpec code defines a service named 'Test' that requires either Bearer Token authentication or API Key authentication (in the 'X-API-KEY' header) using the `@useAuth` decorator with a union type. It includes a single GET operation at the '/valid' route.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/client_parameters.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \"Test Service\" })\n@useAuth(BearerAuth | ApiKeyAuth<ApiKeyLocation.header, \"X-API-KEY\">)\nnamespace Test;\n\n@route(\"/valid\")\n@get\nop valid(): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Defining the @madeOptional Decorator in TypeSpec\nDESCRIPTION: Defines the syntax for the `@TypeSpec.Versioning.madeOptional` decorator. This decorator specifically targets `ModelProperty` elements and indicates the API version in which a previously required property became optional. It requires a `version` parameter of type `EnumMember`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Versioning.madeOptional(version: EnumMember)\n```\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Help and Customization Options - Bash\nDESCRIPTION: Shows how to view all available options for the TypeSpec C# scaffolding tool. Running this command provides extra customization for scaffolding, such as setting custom project names, port numbers, or destinations. Useful for advanced project setup or troubleshooting.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-csharp.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx hscs-scaffold main.tsp --help\n```\n\n----------------------------------------\n\nTITLE: Specifying Field Lifecycle Visibility with TypeSpec - TypeSpec (tsp)\nDESCRIPTION: This snippet shows how to specify visibility for a field during specific lifecycles (e.g., create, read) using the @visibility decorator in TypeSpec. It replaces the deprecated string-based values with named constants from the Lifecycle enum. The @visibility decorator helps control when a property is exposed in the API at different operation stages. Requires proper import of the Lifecycle enum and TypeSpec compiler. Accepts one or more lifecycle phases as enum values; the field will be visible only during those phases.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-18.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n@visibility(Lifecycle.Create, Lifecycle.Read)\nexample: string;\n```\n\n----------------------------------------\n\nTITLE: Running TypeSpec Emitter via Command Line (Bash)\nDESCRIPTION: This snippet shows how to execute the TypeSpec compiler (`tsp compile`) for the current directory (`.`) and explicitly trigger a specific emitter (`@typespec/http-server-js`) using the `--emit` command-line argument. This method is useful for ad-hoc emitter runs or overriding configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http-server-js/reference/emitter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ntsp compile . --emit=@typespec/http-server-js\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Output Directory in TypeSpec Projects - YAML - yaml\nDESCRIPTION: Defines the 'output-dir' property in tspconfig.yaml using an interpolated reference to the current working directory, setting a shared output location for all emitters. Ensures output paths are correctly resolved relative to project execution. Used natively by TypeSpec; no external dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\noutput-dir: {cwd}/typespec-build\n\n```\n\n----------------------------------------\n\nTITLE: Union Types and Named Unions in TypeSpec\nDESCRIPTION: This snippet demonstrates both union type aliases and named union declarations in TypeSpec. Unions allow a value to be one of several types, mapping to OpenAPI's anyOf by default. Named unions can provide labels or be decorated for further OpenAPI customization.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_23\n\nLANGUAGE: typespec\nCODE:\n```\nalias PetType = Dog | Cat | Hamster;\n```\n\nLANGUAGE: typespec\nCODE:\n```\nunion PetType {\n  dog: Dog,\n  cat: Cat,\n  hamster: Hamster,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Serializing Wrapped Arrays with Nested Types - TypeSpec\nDESCRIPTION: Combines wrapper array naming and custom item names via @encodedName in a TypeSpec model. This complex annotation configuration produces nested XML documents with custom wrapper and item element names. Used to exercise fine-grained XML structure control.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_21\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@encodedName(\"application/xml\", \"XmlPet\")\nmodel Pet {\n  @encodedName(\"application/xml\", \"ItemsTags\")\n  tags: Tag[];\n}\n\n@encodedName(\"application/xml\", \"XmlTag\")\nmodel Tag {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Re-exporting TypeSpec Library Entry Point - TypeScript\nDESCRIPTION: This TypeScript snippet re-exports the $lib variable from the compiled library module, providing a consistent entrypoint for the TypeSpec compiler. This ensures the library is registered when imported by the compiler or by TypeSpec programs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Re-export $lib so the compiler can access it and register your library correctly.\nexport { $lib } from \"./lib.js\";\n```\n\n----------------------------------------\n\nTITLE: Emitting a Custom Trace with the Library Tracer (TypeScript)\nDESCRIPTION: Utilizes a previously initialized tracer to emit a custom trace event named 'emitting-ts' with a descriptive message. This code is to be used in a TypeSpec library context, after establishing a sub-tracer. The emitted trace can be collected by users if the corresponding area is enabled in their tracing filters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/tracing.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntracer.trace(\"emitting-ts\", \"Emitting ts interface\");\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies for an Unversioned Service in TypeSpec\nDESCRIPTION: This snippet illustrates how an unversioned service can declare a dependency on a specific version of a versioned TypeSpec library (Azure.Core v1.0 Preview 1). The `@useDependency` decorator is applied directly to the service namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/guide.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@service(#{ title: \"Contoso Widget Manager Unversioned\" })\n@useDependency(Azure.Core.v1_0_Preview_1)\nnamespace Contoso.WidgetManager.Unversioned;\n```\n\n----------------------------------------\n\nTITLE: Deserializing JSON to Widget Model - TypeScript\nDESCRIPTION: This TypeScript function takes arbitrary input and converts it to a Widget instance. If the input is falsy, it returns the input as is; otherwise, it creates a new Widget object by mapping name and age properties. Input: any JSON object with 'name' and 'age' fields. Output: Widget. No deep validation is performed; non-standard fields are ignored.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-response.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonWidgetToApplicationTransform(input_?: any): Widget {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    name: input_.name,\n    age: input_.age,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining @contentEncoding Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@contentEncoding` decorator from the `TypeSpec.JsonSchema` namespace. Applied to a `string` type or a `ModelProperty` of type string, it indicates the encoding used for the string's content (e.g., 'base64'). The `value` parameter takes a string representing the encoding.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.contentEncoding(value: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Emitter in tspconfig.yaml\nDESCRIPTION: Configures the TypeSpec compiler via the `tspconfig.yaml` file to automatically use the `@typespec/http-server-js` emitter during compilation. This avoids needing to specify the emitter on the command line.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-js/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-server-js\"\n```\n\n----------------------------------------\n\nTITLE: Defining the Options Interface for the GET Operation in TypeScript\nDESCRIPTION: This TypeScript interface `GetOptions` extends the base `OperationOptions` and defines the specific options for the `get` operation. It includes an optional `contentType` string property, allowing callers to specify a custom content type header value, overriding the default. Located in `src/api/testClientOperations.ts`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/default_value_as_optional.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GetOptions extends OperationOptions {\n  contentType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Request Body for Versioning Made Optional Test (JSON)\nDESCRIPTION: Defines the expected JSON request body for the 'post /versioning/made-optional/api-version:{version}/test' endpoint using the latest signature. The body includes only the 'prop' field, testing scenarios where other fields might have become optional in later versions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_314\n\nLANGUAGE: json\nCODE:\n```\n{ \"prop\": \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Defining @nsDeclarations Decorator in TypeSpec\nDESCRIPTION: This TypeSpec decorator, `@TypeSpec.Xml.nsDeclarations`, is used to mark an `Enum` as a container for declaring XML namespace URIs. Enum members can then be referenced by the `@ns` decorator. It targets `Enum` and takes no parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Xml.nsDeclarations\n```\n\n----------------------------------------\n\nTITLE: Configuring File Generation in Scaffolding Template (JSON)\nDESCRIPTION: Explains how to configure the `files` array within a template's JSON definition to specify additional files to be copied into the generated project. Each file entry requires a `path` (source file location, relative or absolute) and a `destination` (target path relative to the project root). Values can be interpolated into these files.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/writing-scaffolding-template.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rest\": {\n    \"title\": \"REST API\",\n    \"description\": \"Create a new project representing a REST API\",\n    \"files\": [{ \"path\": \"./models.tsp\", \"destination\": \"./models.tsp\" }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Unversioned Service Namespace in TypeSpec\nDESCRIPTION: This snippet shows the initial definition of a TypeSpec service namespace without any versioning applied. It uses the `@service` decorator to define metadata like the service title.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/guide.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@service(#{ title: \"Contoso Widget Manager\" })\nnamespace Contoso.WidgetManager;\n```\n\n----------------------------------------\n\nTITLE: Configuring the OpenAPI 3 Emitter in TypeSpec YAML Config - YAML\nDESCRIPTION: Configures the OpenAPI 3 emitter for TypeSpec by specifying it under the 'emit' key in a YAML config file. No additional options are included in this basic usage; the emitter will use its default behaviors. This is suitable for straightforward emission needs where no customization of output format, directories, or other emitter options is required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/reference/emitter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/openapi3\"\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Return Example with @opExample in TypeSpec (TSP)\nDESCRIPTION: This example demonstrates using @opExample to define an expected return value for an operation. The returnType field provides a sample output matching the operation's return type. Useful for documenting API output expectations. The operation returns an object with string and int32 fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/examples.md#_snippet_6\n\nLANGUAGE: tsp\nCODE:\n```\n@opExample(#{ returnType: #{ name: \\\"Max\\\", age: 3 } })\\nop read(): {\\n  name: string;\\n  age: int32;\\n};\n```\n\n----------------------------------------\n\nTITLE: Refactoring Operation Return Types in TypeSpec - typespec\nDESCRIPTION: Shows how to update TypeSpec operation return types by replacing the old generic 'Page<T>' model with the more specific 'CollectionWithNextLink<T>' model, as per the updated @typespec/rest library. No additional dependencies are required except upgrading to the new library version. The main parameter is the generic type T representing the resource collection. Input is an operation definition; output is the operation returning the renamed model type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-09-07.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nop test(): Page<MyResource>;\n```\n\n----------------------------------------\n\nTITLE: Declaring a Download Operation Returning Http.File - TypeSpec Language\nDESCRIPTION: Defines an operation that returns a File type, instructing the HTTP library to treat the response as a binary file with custom content type and optional filename. Requires the TypeSpec.Http namespace. Parameters and result structure are determined by the operation's return type, which must extend or be Http.File. No additional input parameters are used; the output is a file body with content and metadata as defined by Http.File (contents, contentType, filename).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nusing TypeSpec.Http;\n\nop exampleDownload(): File;\n```\n\n----------------------------------------\n\nTITLE: Defining Authenticated Routes in MyApi with TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a service namespace annotated with the @useAuth decorator to specify Bearer token authentication. Under the main MyApi namespace, two sub-namespaces, Foo and Bar, each expose a HTTP GET route mapped to a simple string-returning operation. This demonstrates attaching authentication and routes at the namespace level using TypeSpec and illustrates clear API partitioning. Dependencies include TypeSpec decorators such as @service, @useAuth, and @route; BearerAuth is assumed to be defined elsewhere. Inputs are HTTP GET requests to /foo and /bar; outputs are string responses from the respective operations. The snippet assumes TypeSpec 0.48 or newer and requires BearerAuth to be valid.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/client_structure.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service(#{ title: \\\"My API\\\" })\\n@useAuth(BearerAuth)\\nnamespace MyApi;\\n\\n@route(\\\"/foo\\\")\\nnamespace Foo {\\n  @get op getfoo(): string;\\n}\\n\\n@route(\\\"/bar\\\")\\nnamespace Bar {\\n  @get op getBar(): string;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Service with Default Endpoint in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a service with a default server endpoint (https://example.org/api) using the @service and @server decorators. The Test namespace contains an operation foo that takes no parameters and returns nothing. This serves as the API specification, and any client generated from this spec will use the default endpoint unless overridden.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/server/default_url.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\\n@server(\\\"https://example.org/api\\\")\\nnamespace Test;\\n\\nop foo(): void;\n```\n\n----------------------------------------\n\nTITLE: Importing and Creating a Router Instance with TypeSpec HTTP Server JS in TypeScript\nDESCRIPTION: Demonstrates how to import a generated router factory from the TypeSpec HTTP server output, and instantiate a router by providing service interface implementations. Dependencies: Router module generated by the emitter, interface implementations for Users, TodoItems, and Attachments. Arguments are service objects conforming to expected interfaces, and result is a router object for HTTP event handling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-js/project.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createTodoRouter } from \"../tsp-output/@typespec/http-server-js/http/router.js\";\n\nconst router = createTodoRouter(users, todoItems, attachments);\n```\n\n----------------------------------------\n\nTITLE: Emitting oneOf in OpenAPI with @oneOf Decorator on Named Union in TypeSpec\nDESCRIPTION: This snippet demonstrates using the @oneOf decorator on a named union declaration to instruct the OpenAPI emitter to generate a oneOf schema instead of anyOf. This enables strict validation where a value must match exactly one branch. No additional dependencies required beyond standard TypeSpec OpenAPI support.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_24\n\nLANGUAGE: typespec\nCODE:\n```\n@oneOf\nunion PetType {\n  dog: Dog,\n  cat: Cat,\n  hamster: Hamster,\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Binary Files in Multipart Form-Data Upload - HTTP\nDESCRIPTION: Shows an HTTP multipart/form-data request where multiple binary files (profileImage and picture) can be submitted simultaneously. Each file part must specify content-type and filename. Meant for APIs supporting simultaneous upload of different file types in a single multipart request; duplicate field names are not parseable.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_62\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /upload HTTP/1.1\\nContent-Length: 428\\nContent-Type: multipart/form-data; boundary=abcde12345\\n\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"profileImage\\\"; filename=\\\"<any-or-no-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .jpg file…}\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"picture\\\"; filename=\\\"<any-or-no-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .png file…}\\n--abcde12345--\n```\n\n----------------------------------------\n\nTITLE: Sharing Route Definitions Using @sharedRoute - TypeSpec\nDESCRIPTION: Shows how to declare operations that share the same route path by applying @sharedRoute and @route decorators. The snippet makes it possible for multiple operations to respond to the same HTTP path, provided all are marked shared. No additional parameters; this is useful for designing REST endpoints where different actions may share a path but differ by HTTP verb or request shape. Requires TypeSpec Http library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/README.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@sharedRoute\n@route(\"/widgets\")\nop getWidget(@path id: string): Widget;\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.sharedRoute\n```\n\n----------------------------------------\n\nTITLE: TypeSpec Definitions for Pet CRUD Operations with Multiple Responses\nDESCRIPTION: This snippet presents the TypeSpec code defining the `Pets` namespace with CRUD operations, specifically illustrating the use of multiple response types via the `|` operator for `getPet`, `createPet`, `updatePet`, and `deletePet`. It demonstrates how to specify different status codes and potential response bodies for various outcomes of an operation. This code is intended for comparison with its generated OpenAPI equivalent and depends on `@typespec/http`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/02-operations-responses.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@route(\"/pets\")\nnamespace Pets {\n@get\nop listPets(): {\n@statusCode statusCode: 200;\n@body pets: Pet[];\n};\n\n@get\nop getPet(@path petId: int32): {\n@statusCode statusCode: 200;\n@body pet: Pet;\n} | {\n@statusCode statusCode: 404;\n};\n\n@post\nop createPet(@body pet: Pet): {\n@statusCode statusCode: 201;\n@body newPet: Pet;\n} | {\n@statusCode statusCode: 202;\n@body acceptedPet: Pet;\n};\n\n@put\nop updatePet(@path petId: int32, @body pet: Pet):{\n@statusCode statusCode: 200;\n@body updatedPet: Pet;\n} | {\n@statusCode statusCode: 404;\n} | {\n@statusCode statusCode: 500;\n};\n\n@delete\nop deletePet(@path petId: int32): {\n@statusCode statusCode: 204;\n@body NoContentResponse;\n} | {\n@statusCode statusCode: 404;\n};\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Additional Parameters with Continuation Token Pagination (HTTP) in TypeSpec\nDESCRIPTION: Defines a paginated HTTP operation (`@route(\"pets\")`) using `@continuationToken` for both input (`token`) and output (`next`). It includes additional non-paging parameters (`@query filter`, `@query expand`, `@header specialHeader`). This demonstrates how non-paging parameters, including query and header parameters, are expected to be carried over by the client when making the next request using the provided continuation token.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/pagination.md#_snippet_9\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@route(\"pets\")\n@list\nop listPets(\n  @query filter?: string,\n  @query expand?: string,\n  @query @continuationToken token?: string,\n  @header specialHeader?: \"x-special-value\",\n): {\n  @pageItems pets: Pet[];\n  @continuationToken next?: url; // Note: Type 'url' might be a typo in original, typically 'string'\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource - TypeSpec - typespec\nDESCRIPTION: Defines the operation for creating a new resource instance based on a supplied model. The method signature expects a ResourceCreateModel and returns either the created Resource, a ResourceCreatedResponse wrapping the resource, or an Error if the operation fails. Dependencies include TypeSpec types for the resource creation model and standard error/unwrapping response types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_29\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceCreate.create(resource: TypeSpec.Rest.Resource.ResourceCreateModel<Resource>): Resource | TypeSpec.Rest.Resource.ResourceCreatedResponse<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Compiling a TypeSpec Project to Generate OpenAPI Output (bash)\nDESCRIPTION: Runs the TypeSpec compiler in the current directory to generate target output files (e.g., openapi.yaml) using the 'tsp compile .' command. The CLI outputs the generated API specification and other artifacts to the configured output directory. Useful for both initial generation and iterative development.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/introduction/installation.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile .\n\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Operations, Interfaces, and Namespaces - TypeSpec\nDESCRIPTION: Shows how the @tag decorator applies tags to TypeSpec operations, interfaces, or namespaces, which are collected to annotate OpenAPI operations. Tags support documentation grouping in tools such as Swagger UI. Inputs include tag annotations at various levels; outputs are OpenAPI tags per operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n@tag(\"Users\")\\nop getUser(id: string): User;\\n\\n// Or at interface/namespace level\\n@tag(\"Users\")\\ninterface UserOperations {\\n  getUser(id: string): User;\\n  createUser(@body user: User): User;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Models and Service Endpoint in TypeSpec\nDESCRIPTION: This TypeSpec code defines a namespace 'Test' containing a base model 'Bird' with a discriminator 'kind'. Several models ('SeaGull', 'Sparrow', 'Goose', 'Eagle') extend 'Bird', each specifying a unique 'kind'. The 'Eagle' model includes complex properties: an array of 'Bird' (friends), a record of 'Bird' (hate), and a single 'Bird' instance (partner). An HTTP GET operation 'getModel' is defined to return a polymorphic 'Bird' instance.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/polymorphic_single_level_inheritance.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \"Test Service\" })\nnamespace Test;\n\n@doc(\"This is base model for polymorphic single level inheritance with a discriminator.\")\n@discriminator(\"kind\")\nmodel Bird {\n  kind: string;\n  wingspan: int32;\n}\n\n@doc(\"The second level model in polymorphic single level inheritance.\")\nmodel SeaGull extends Bird {\n  kind: \"seagull\";\n}\n\n@doc(\"The second level model in polymorphic single level inheritance.\")\nmodel Sparrow extends Bird {\n  kind: \"sparrow\";\n}\n\n@doc(\"The second level model in polymorphic single level inheritance.\")\nmodel Goose extends Bird {\n  kind: \"goose\";\n}\n\n@doc(\"The second level model in polymorphic single levels inheritance which contains references to other polymorphic instances.\")\nmodel Eagle extends Bird {\n  kind: \"eagle\";\n  friends?: Bird[];\n  hate?: Record<Bird>;\n  partner?: Bird;\n}\n\n@route(\"/model\")\n@get\nop getModel(): Bird;\n```\n\n----------------------------------------\n\nTITLE: Overriding Authentication At Operation Level (Typespec)\nDESCRIPTION: Demonstrates namespace-wide BasicAuth but overrides authentication for 'one' operation to use ApiKeyAuth instead. The 'two' operation retains BasicAuth. Shows decorator precedence and overrides in TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_16\n\nLANGUAGE: typespec\nCODE:\n```\n@useAuth(BasicAuth)\\nnamespace MyService;\\n\\n@useAuth(ApiKeyAuth<ApiKeyLocation.query, \\\"api_key\\\">)\\nop one(): void; // Use ApiKey only\\nop two(): void; // Use BasicAuth\n```\n\n----------------------------------------\n\nTITLE: Handling Additional Parameters with Next Link Pagination (HTTP) in TypeSpec\nDESCRIPTION: Defines a paginated HTTP operation (`@route(\"pets\")`) using `@pageIndex` and `@pageSize` for client input and `@nextLink` for server-provided next page navigation. It includes additional non-paging parameters like `@query filter`, `@query expand`, and `@header specialHeader`, illustrating how these might be handled alongside pagination. The `@nextLink` URL is expected to contain necessary query parameters (like filter) but not headers, which must be resent by the client.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/pagination.md#_snippet_7\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@route(\"pets\")\n@list\nop listPets(\n  @query filter?: string,\n  @query expand?: string,\n  @query @pageIndex page?: int32 = 1,\n  @query @pageSize perPage?: int32 = 100,\n  @header specialHeader?: \"x-special-value\",\n): {\n  @pageItems pets: Pet[];\n  @nextLink next?: url;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Uploading PNG Image Files via Multipart in TypeScript\nDESCRIPTION: This function implements the multipart upload of a PNG image via the doThing operation. It creates the payload using createFilePartDescriptor, including the 'image/png' content type, and submits the request through the TestClientContext. On success, it returns void; otherwise, throws a RestError. It depends on parse, createFilePartDescriptor, and createRestError. Image data must match the PngFile interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function doThing(\\n  client: TestClientContext,\\n  bodyParam: RequestBody,\\n  options?: DoThingOptions,\\n): Promise<void> {\\n  const path = parse(\\\"/\\\").expand({});\\n  const httpRequestOptions = {\\n    headers: {\\n      \\\"content-type\\\": options?.contentType ?? \\\"multipart/form-data\\\",\\n    },\\n    body: [createFilePartDescriptor(\\\"image\\\", bodyParam.image, \\\"image/png\\\")],\\n  };\\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \\\"function\\\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Common Parameters Model in TypeSpec\nDESCRIPTION: This TypeSpec code defines a `CommonParameters` model containing parameters (`requestID`, `locale`, `clientVersion`) intended for reuse across multiple API operations. It utilizes the `@header` and `@query` decorators from the `@typespec/http` library to specify the location of each parameter in the HTTP request. This model serves as a central definition for common request elements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/04-common-parameters.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp title=main.tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/openapi3\\\"]}\"\nimport \"@typespec/http\";\n\nusing Http;\n\n@service(#{ title: \"Pet Store\" })\n@server(\"https://example.com\", \"Single server endpoint\")\nnamespace PetStore;\n\nmodel Pet {\n  id: int32;\n\n  @minLength(1)\n  name: string;\n\n  @minValue(0)\n  @maxValue(100)\n  age: int32;\n\n  kind: petType;\n}\n\nenum petType {\n  dog: \"dog\",\n  cat: \"cat\",\n  fish: \"fish\",\n  bird: \"bird\",\n  reptile: \"reptile\",\n}\n\n// highlight-start\nmodel CommonParameters {\n  @header\n  requestID: string;\n\n  @query\n  locale?: string;\n\n  @header\n  clientVersion?: string;\n}\n// highlight-end\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an OAuth2 Authenticated Service in TypeSpec\nDESCRIPTION: This TypeSpec code defines a service named 'Test' that requires OAuth2 authentication using the client credentials flow. It specifies the token URL ('https://api.example.com/oauth2/authorize'), refresh URL ('https://api.example.com/oauth2/refresh'), and the required 'read' scope. A simple GET operation '/valid' is defined within this authenticated service namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/oauth2.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \"Test Service\" })\n@useAuth(\n  OAuth2Auth<\n    [\n      {\n        type: OAuth2FlowType.clientCredentials,\n        tokenUrl: \"https://api.example.com/oauth2/authorize\",\n        refreshUrl: \"https://api.example.com/oauth2/refresh\",\n      }\n    ],\n    [\"read\"]\n  >\n)\nnamespace Test;\n\n@route(\"/valid\")\n@get\nop valid(): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Example: Defining Multiple Overloads for an Operation in TypeSpec\nDESCRIPTION: Presents an operation 'upload' accepting multiple data types and content types, with overloaded operations for string and bytes specifically. Uses @overload to associate specific variants for content negotiation and input types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_43\n\nLANGUAGE: typespec\nCODE:\n```\nop upload(data: string | bytes, @header contentType: \"text/plain\" | \"application/octet-stream\"): void;\n@overload(upload)\nop uploadString(data: string, @header contentType: \"text/plain\" ): void;\n@overload(upload)\nop uploadBytes(data: bytes, @header contentType: \"application/octet-stream\"): void;\n```\n\n----------------------------------------\n\nTITLE: Defining API Key Authentication Scheme in Typespec (TSP)\nDESCRIPTION: This Typespec snippet defines a service that uses an API key authentication scheme, with the key expected in the request header under the name 'X-API-KEY'. It specifies a simple GET operation '/valid' that returns a NoContentResponse. Dependencies include Typespec with appropriate authentication decorators and assumed definitions for ApiKeyAuth and ApiKeyLocation. No dynamic parameters are required, and the API expects the client to supply the correct header.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/key_credential.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \\\"Test Service\\\" })\\n@useAuth(ApiKeyAuth<ApiKeyLocation.header, \\\"X-API-KEY\\\">)\\nnamespace Test;\\n\\n@route(\\\"/valid\\\")\\n@get\\nop valid(): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Defining an Operation Description with @doc Decorator in TypeSpec\nDESCRIPTION: This snippet demonstrates using the `@doc` decorator in TypeSpec to provide a detailed, multi-line description for an API operation. The description supports markdown formatting and maps to the `description` field in the OpenAPI Operation Object. The example also shows the usage of `@tag`, `@route`, and `@get` decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@doc(\"\"\"\n  Get status info for the service.\n  The status includes the current version of the service.\n  The status value may be one of:\n  - `ok`: the service is operating normally\n  - `degraded`: the service is operating in a degraded state\n  - `down`: the service is not operating\n  \"\"\")\n@tag(\"Status\")\n@route(\"/status\")\n@get\nop status(): string;\n```\n```\n\n----------------------------------------\n\nTITLE: Applying a Single Authentication Scheme With @useAuth Decorator (Typespec)\nDESCRIPTION: Demonstrates how to attach a single authentication scheme to a TypeSpec namespace or service using the @useAuth decorator. This usage requires only one security scheme for all enclosed operations. Dependency: The specified Auth1 security scheme model must be defined and imported appropriately.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@useAuth(Auth1)\n```\n\n----------------------------------------\n\nTITLE: Expected XML Request Body for ModelWithText PUT Endpoint\nDESCRIPTION: Defines the expected XML payload for a PUT request to the `/payload/xml/modelWithText` endpoint. The request body mirrors the `ModelWithText` structure, containing text content and a `language` attribute.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_76\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithText language=\"foo\">\n  This is some text.\n</ModelWithText>\n```\n\n----------------------------------------\n\nTITLE: Expected XML Request Body for ModelWithSimpleArrays PUT Endpoint\nDESCRIPTION: Defines the expected XML payload for a PUT request to the `/payload/xml/modelWithSimpleArrays` endpoint. The payload represents a `ModelWithSimpleArrays` structure containing two arrays: `colors` (array of strings) and `counts` (array of int32).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_74\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithSimpleArrays>\n  <colors>\n    <string>red</string>\n    <string>green</string>\n    <string>blue</string>\n  </colors>\n  <counts>\n    <int32>1</int32>\n    <int32>2</int32>\n  </counts>\n</ModelWithSimpleArrays>\n```\n\n----------------------------------------\n\nTITLE: Defining `@events` Decorator Syntax in TypeSpec\nDESCRIPTION: Displays the syntax for the `@TypeSpec.Events.events` decorator. It is applied to a `Union` type definition and does not accept any parameters. Its presence signifies that the union represents a collection of possible event structures.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/events/reference/decorators.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Events.events\n```\n\n----------------------------------------\n\nTITLE: Templating Interface Operations and Usage in TypeSpec\nDESCRIPTION: Illustrates an interface ReadWrite<T> where both the interface and its write() operation are templated. It demonstrates aliasing the interface for a specific type (string), and binding write as a concrete operation with a template parameter (int32). Required dependencies are TypeSpec language and an understanding of its templating system. The snippet shows how to instantiate and expose templated interface members as independent operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/interfaces.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\ninterface ReadWrite<T> {\n  read(): T;\n  write<R>(t: T): R;\n}\n\nalias MyReadWrite = ReadWrite<string>;\n\nop myWrite is MyReadWrite.write<int32>;\n```\n\n----------------------------------------\n\nTITLE: Augmenting a Model Property using `@@` in TypeSpec\nDESCRIPTION: Demonstrates applying an augment decorator (`@@visibility`) to a specific property (`Dog.name`) of a model. The first argument targets the property using dot notation, and the second argument provides the decorator value (`Lifecycle.Read`), marking the property as read-only.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/decorators.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Dog {\n  name: string;\n}\n\n@@visibility(Dog.name, Lifecycle.Read);\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Versioned Server Operation without API Version\nDESCRIPTION: Defines a HEAD endpoint for a non-versioned server configuration. This operation does not include an `api-version` parameter, and the expected URL should reflect this (e.g., '/without-api-version').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_108\n\nLANGUAGE: http\nCODE:\n```\nhead /server/versions/not-versioned/without-api-version\n```\n\n----------------------------------------\n\nTITLE: Defining Bytes Body Model and Operation in TypeSpec\nDESCRIPTION: Defines a TypeSpec service namespace with a model containing a bytes property and an operation that receives and returns the bytes model. This establishes the structural contract and endpoint for handling bytes payloads in an API. Dependencies: TypeSpec syntax and conventions. Inputs/outputs are strictly shaped as BytesBody with a value of type bytes. Limited to structural definition; implementation is expected elsewhere.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/bytes_json_property.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service\nnamespace Test;\n\nmodel BytesBody {\n  value: bytes;\n}\n\n@route(\"/default\")\nop foo(...BytesBody): BytesBody;\n```\n\n----------------------------------------\n\nTITLE: Defining Service Server Endpoint in TypeSpec\nDESCRIPTION: Shows the current recommended way to define a service endpoint in TypeSpec using the `@server` decorator. This decorator replaces `@serviceHost` and allows specifying the full, potentially parametrized, URI for the service endpoint.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-07-08.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@server(\"https://example.com\")\nnamespace MyService;\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Compiler with npm - Bash\nDESCRIPTION: Installs the latest TypeSpec compiler globally using npm. This provides the `tsp` command globally, which is required for all TypeSpec-related operations. You must have Node.js and npm installed beforehand.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-csharp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @typespec/compiler@latest\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec Definitions to Regenerate Code - Bash\nDESCRIPTION: Regenerates the OpenAPI schema and C# server-side code based on an updated TypeSpec definition. Place this in your project root to update the generated files in response to API evolution. Requires the TypeSpec compiler and tspconfig.yaml configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-csharp.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile .\n```\n\n----------------------------------------\n\nTITLE: Marking an Event Payload with `@data` in TypeSpec\nDESCRIPTION: Shows an example of applying the `@data` decorator to the `payload` property within an anonymous model structure, which is a variant of the `@events` decorated union `MixedEvents`. This designates the `payload` field as the event's main data content.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/events/reference/decorators.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@events\nunion MixedEvents {\n  {\n    metadata: Record<string>,\n    @data payload: string,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Unversioned Library Dependencies Using @useDependency - Typespec - Typespec\nDESCRIPTION: This Typespec snippet illustrates the new recommended way to associate an unversioned namespace with a versioned dependency by directly applying the @useDependency decorator. This simplifies the relationship to a single decorator without requiring deprecated dependency mapping constructs. Inputs are the dependency version symbol, and outputs are the updated namespace declaration. Requires @service, @useDependency, and @armProviderNamespace decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-02-07.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@service(#{ title: \"Microsoft.EnvelopeTest\", version: \"2021-09-21-preview\" })\n@useDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)\n@armProviderNamespace\nnamespace Microsoft.EnvelopeTest;\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/http for a TypeSpec Specification (Bash)\nDESCRIPTION: This command installs the `@typespec/http` npm package as a direct dependency for a TypeSpec project. This is the standard way to add the HTTP protocol bindings when defining a specific API specification.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http\n```\n\n----------------------------------------\n\nTITLE: Sending an Optional Base64 Encoded Bytes Header in TypeScript\nDESCRIPTION: This TypeScript function `defaultEncoding` handles an optional `bytes` header parameter. It checks if `options.value` (a `Uint8Array`) is provided; if so, it encodes it using `encodeUint8Array` with \"base64\" encoding and adds it to the request headers. If `options.value` is absent, the header is omitted from the request.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_bytes.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/api/testClientOperations.ts function defaultEncoding\nexport async function defaultEncoding(\n  client: TestClientContext,\n  options?: DefaultEncodingOptions,\n): Promise<void> {\n  const path = parse(\"/default\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      ...(options?.value && {\n        value: encodeUint8Array(options.value, \"base64\")!,\n      }),\n    },\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generated OpenAPI Definition for Widget Model (v3)\nDESCRIPTION: This YAML snippet shows the generated OpenAPI definition for the `Widget` model corresponding to API version `v3`. It reflects the changes made in the TypeSpec definition: the property is named `description` and is not listed in the `required` array, indicating it's optional.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/guide.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nWidget:\n  type: object\n  properties:\n    id:\n      type: string\n    description:\n      type: string\n  required:\n    - id\n```\n\n----------------------------------------\n\nTITLE: Defining Authentication Schemes with @useAuth - TypeSpec\nDESCRIPTION: Demonstrates the use of @useAuth decorator (from '@typespec/rest') to specify OAuth2 authentication for a service. Inputs: using Http; OAuth2 scopes. Outputs: OpenAPI security schemes. Prerequisite: import @typespec/rest.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_37\n\nLANGUAGE: typespec\nCODE:\n```\nusing Http;\n@useAuth(OAuth2Auth<[\"read\", \"write\"]>)\nnamespace MyService;\n```\n\n----------------------------------------\n\nTITLE: Customizing Multipart Part Names in TypeSpec\nDESCRIPTION: This TypeSpec snippet demonstrates overriding the default part name derived from the property name within a multipart request body. The `name1` property uses `HttpPart<string, #{ name: \"name2\" }>` to explicitly set the resulting part's name to `name2` in the `multipart/form-data` request, instead of the default `name1`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/multipart.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n// Part name here is name2\nop create(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: {\n    name1: HttpPart<string, #{ name: \"name2\" }>;\n  },\n): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Client Context Setup for Multiple Authentication Schemes\nDESCRIPTION: This TypeScript function `createTestClientContext` creates the client's runtime context. It takes the endpoint, the union credential type (`BearerTokenCredential | ApiKeyCredential`), and options. It configures the underlying HTTP client by passing the provided credential and an `authSchemes` array specifying both 'bearer' and 'apiKey' (with header 'X-API-KEY') authentication methods, derived from the TypeSpec definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/client_parameters.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createTestClientContext(\n  endpoint: string,\n  credential: BearerTokenCredential | ApiKeyCredential,\n  options?: TestClientOptions,\n): TestClientContext {\n  const params: Record<string, any> = {\n    endpoint: endpoint,\n  };\n  const resolvedEndpoint = \"{endpoint}\".replace(/{([^}]+)}/g, (_, key) =>\n    key in params\n      ? String(params[key])\n      : (() => {\n          throw new Error(`Missing parameter: ${key}`);\n        })(),\n  );\n  return getClient(resolvedEndpoint, {\n    ...options,\n    credential,\n    authSchemes: [\n      {\n        kind: \"http\",\n        scheme: \"bearer\",\n      },\n      {\n        kind: \"apiKey\",\n        apiKeyLocation: \"header\",\n        name: \"X-API-KEY\",\n      },\n    ],\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining @contentSchema Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@contentSchema` decorator from the `TypeSpec.JsonSchema` namespace. Applied to a `string` type or a `ModelProperty` of type string, it defines the schema for the string's content when interpreted according to its media type and encoding. The `value` parameter takes a TypeSpec type reference.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.contentSchema(value: unknown)\n```\n\n----------------------------------------\n\nTITLE: Using a Typekit Function to Check Type Relationships\nDESCRIPTION: This TypeScript code illustrates how to use the imported `$` typekit access object. It specifically calls the `extendsString` method on the `scalar` typekit (`$.scalar.extendsString`) to determine if a given TypeSpec type, represented by the `maybeString` variable, is a subtype of the built-in string scalar type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-framework.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nif ($.scalar.extendsString(maybeString)) {\n  console.log(\"Have a string scalar!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Validating File Name and Content-Type in Multipart Form-Data - HTTP\nDESCRIPTION: Provides an example HTTP multipart/form-data POST request where filename and content-type of the file part are strictly checked. The file part must specify both a filename (e.g., hello.jpg) and a content-type matching the file's media type (e.g., image/jpg). This enforces stricter validation on the server side for upload integrity and content verification.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_54\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /upload HTTP/1.1\\nContent-Length: 428\\nContent-Type: multipart/form-data; boundary=abcde12345\\n\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"id\\\"\\nContent-Type: text/plain\\n\\n123\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"profileImage\\\"; filename=\\\"hello.jpg\\\"\\nContent-Type: image/jpg\\n\\n{…file content of .jpg file…}\\n--abcde12345--\n```\n\n----------------------------------------\n\nTITLE: Defining Model-Level XML Namespace Using Normalized Form in TypeSpec\nDESCRIPTION: This TypeSpec snippet demonstrates the normalized approach for defining XML namespaces. An enum `Namespaces` is defined with `@Xml.nsDeclarations` to hold namespace URIs keyed by prefixes. The `Book` model then references the desired namespace using `@Xml.ns(Namespaces.smp)`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_42\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@Xml.nsDeclarations\nenum Namespaces {\n  smp: \"http://example.com/schema\",\n}\n\n@Xml.ns(Namespaces.smp)\nmodel Book {\n  id: integer;\n  title: string;\n  author: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Providing String Array Payloads - JSON\nDESCRIPTION: Shows a JSON array consisting solely of strings, including empty strings. Used in situations where API expects an array of strings and supports empty string entries. The payload demonstrates both non-empty and empty string values within the array.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_147\n\nLANGUAGE: json\nCODE:\n```\n[\"hello\", \"\"]\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Serializer for Foo Model\nDESCRIPTION: Presents the generated `jsonFooToTransportTransform` function in `src/models/internal/serializers.ts`. This function serializes a `Foo` object (or null/undefined) into a plain JavaScript object suitable for network transport by mapping its `name` and `age` properties. It handles potential null input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/basic_model.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonFooToTransportTransform\nexport function jsonFooToTransportTransform(input_?: Foo | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    name: input_.name,\n    age: input_.age,\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Update Resource Operations - TypeSpec\nDESCRIPTION: Attaches the @updatesResource decorator to an operation, indicating it supports resource updates for a specified model. The decorator requires a resourceType parameter and should be used on operations that update existing resource instances in REST APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_16\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.updatesResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Dependencies via CLI (C# Context)\nDESCRIPTION: This Bash command (`tsp install`) is used to install the TypeSpec emitters and other dependencies defined in the `package.json` file, specifically after adding the C# emitter dependency. This ensures the necessary packages are available.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ntsp install\n```\n\n----------------------------------------\n\nTITLE: Identify Rule Identifier Text\nDESCRIPTION: This snippet displays the unique identifier string for the TypeSpec linter rule that checks for referenced operations (`op is`) having a `@route` on one of their containers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/rules/op-reference-container-route.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n@typespec/http/op-reference-container-route\n```\n\n----------------------------------------\n\nTITLE: Defining Test Library Loader for TypeSpec Testing - TypeScript\nDESCRIPTION: This asynchronous TypeScript snippet defines a utility to register and load a TypeSpec test library using createTestLibrary and findTestPackageRoot from @typespec/compiler/testing. The configuration includes the npm package name and resolves the root directory relative to the current module. Placing this code in ./src/testing/index.ts allows other tests to reuse the test utility.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport { createTestLibrary, findTestPackageRoot } from \"@typespec/compiler/testing\";\n\nexport const MyTestLibrary = createTestLibrary({\n  name: \"<name-of-npm-pkg>\",\n  // Set this to the absolute path to the root of the package. (e.g. in this case this file would be compiled to ./dist/src/testing/index.js)\n  packageRoot: await findTestPackageRoot(import.meta.url),\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenAPI Extensions with @info Decorator - TSP\nDESCRIPTION: Uses the @info decorator with an object specifying version and custom properties prefixed by 'x-'. Adds vendor extensions to the OpenAPI info section via TypeSpec. Inputs: TypeSpec expression. Outputs: OpenAPI info with extensions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_40\n\nLANGUAGE: tsp\nCODE:\n```\n@info(#{\n  version: 1.1.0,\n  `x-custom`: \"custom value\",\n})\n```\n\n----------------------------------------\n\nTITLE: Defining HEAD Operation with head Decorator - TypeSpec (typespec)\nDESCRIPTION: Applies @TypeSpec.Http.head to operations to specify use of the HTTP HEAD verb, typically for operations that check resource existence or metadata without response bodies. No parameters required. Used directly in operation signatures.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.head\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@head op ping(petId: string): void;\n```\n\n----------------------------------------\n\nTITLE: Enforcing Constraint Compliance for Template Parameter Defaults in TypeSpec\nDESCRIPTION: Shows that default values for constrained template parameters must themselves satisfy the constraint. The valid 'Foo' alias specifies a default matching the 'string' constraint, while 'Bar' fails with a numeric default and triggers a compiler error. Useful for documenting parameter restrictions. Input: none; Output: error if default violates constraint.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/templates.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nalias Foo<Type extends string = \"Abc\">  = Type;\n// Invalid\nalias Bar<Type extends string = 123>  = Type;\n                             ^ Type '123' is not assignable to type 'TypeSpec.string'\n```\n\n----------------------------------------\n\nTITLE: Explicitly Defining Response Bodies with `@body` in TypeSpec (tsp)\nDESCRIPTION: Demonstrates the workaround for the breaking change in TypeSpec 0.56.0 where empty models resolve to `void`. By using `@body _: <Model>`, developers can explicitly force an empty object (`{}`) or retain the structure even if properties are filtered by visibility or versioning, ensuring a body is always returned.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_11\n\nLANGUAGE: tsp\nCODE:\n```\nop b1(): {@body _: {}};\nop b2(): {@body _: {@visibility(\"none\") prop: string}};\nop b3(): {@body _: {@added(Versions.v2) prop: string}};\n```\n\n----------------------------------------\n\nTITLE: Handling 200 or 204 HTTP Responses (Widget or Void) - TypeScript\nDESCRIPTION: This TypeScript async function processes GET responses that may return either a Widget (if status 200 and content-type is JSON) or void (if 204, no body). It uses the jsonWidgetToApplicationTransform for deserialization and throws for any other case. Relies on supporting types and utilities: WidgetsClientContext, Widget, ReadOptions, parse, and createRestError.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-response.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function read(\n  client: WidgetsClientContext,\n  options?: ReadOptions,\n): Promise<Widget | void> {\n  const path = parse(\"/widgets\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return jsonWidgetToApplicationTransform(response.body)!;\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Multipart Form-Data with JSON Array and File Array Parts - HTTP\nDESCRIPTION: Demonstrates a POST multipart/form-data request containing scalar, object, array (as JSON), and file array parts. Used for endpoints that require both arrayed JSON payloads and multiple file uploads simultaneously. File content-types are validated as application/octet-stream and JSON parts as application/json; filenames for binaries must be specified for parsing.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_59\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /upload HTTP/1.1\\nContent-Length: 428\\nContent-Type: multipart/form-data; boundary=abcde12345\\n\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"id\\\"\\nContent-Type: text/plain\\n\\n123\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"address\\\"\\nContent-Type: application/json\\n\\n{\\n  \\\"city\\\": \\\"X\\\"\\n}\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"profileImage\\\"; filename=\\\"<any-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .jpg file…}\\n--abcde12345--\\nContent-Disposition: form-data; name=\\\"previousAddresses\\\"\\nContent-Type: application/json\\n\\n[{\\n  \\\"city\\\": \\\"Y\\\"\\n},{\\n  \\\"city\\\": \\\"Z\\\"\\n}]\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"pictures\\\"; filename=\\\"<any-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .png file…}\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"pictures\\\"; filename=\\\"<any-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .png file…}\\n--abcde12345--\n```\n\n----------------------------------------\n\nTITLE: Defining @unwrapped Decorator in TypeSpec\nDESCRIPTION: This TypeSpec decorator, `@TypeSpec.Xml.unwrapped`, specifies that the target `ModelProperty` should not create a separate wrapper XML node. This is useful for flattening list elements directly into the parent node or embedding raw text content. It cannot be used simultaneously with `@attribute`. It targets `ModelProperty` and takes no parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Xml.unwrapped\n```\n\n----------------------------------------\n\nTITLE: Default String Property XML Serialization (TSP & XML)\nDESCRIPTION: This snippet illustrates the default serialization of a string property in a TypeSpec model, where the value appears inside its own child node of the parent element. Inputs are simple model properties; output is an XML subtree with one child per property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_11\n\nLANGUAGE: tsp\nCODE:\n```\nmodel BlobName {\n  content: string;\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<BlobName>\n  <content>\n    abcdef\n  </content>\n</BlobName>\n```\n\n----------------------------------------\n\nTITLE: Modeling Non-Omitted Properties in HTTP Body - TypeSpec\nDESCRIPTION: Shows that properties are no longer automatically omitted from output models even if all metadata or visibility properties are removed. The resulting body model will include empty objects as properties if applicable. Useful for TypeSpec API modelers to visualize default model emission.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-05-07.md#_snippet_6\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop d1(): {\n  headers: {\n    @header foo: string;\n  };\n}; // body will be {headers: {}}\n```\n\n----------------------------------------\n\nTITLE: Declaring the @madeOptional Decorator Syntax in TypeSpec\nDESCRIPTION: This snippet presents the syntax for the `@madeOptional` decorator. It's applied to a `ModelProperty` and takes an `EnumMember` (`version`) indicating when the property became optional.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Versioning.madeOptional(version: EnumMember)\n```\n\n----------------------------------------\n\nTITLE: Declaring ExampleOptions Model for Example Decorators in TypeSpec (Typespec)\nDESCRIPTION: Declares ExampleOptions to hold metadata for example generation via decorators. Optional properties include title and description, both as strings. Facilitates documentation and improved code readability for TypeSpec models using @example.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\nmodel ExampleOptions\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Strict `@body` Behavior Change in TypeSpec (tsp)\nDESCRIPTION: Demonstrates the behavior change in TypeSpec 0.56.0 where the `@body` decorator strictly defines the response body content. Including metadata decorators like `@header` within the `@body` model (e.g., `{@header foo: string, other: string}`) will now trigger a warning, and the property (`foo`) will be part of the body, not treated as a header.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_14\n\nLANGUAGE: tsp\nCODE:\n```\nop a1(): {@body _: {@header foo: string, other: string} };\n                ^ warning header in a body, it will not be included as a header.\n```\n\n----------------------------------------\n\nTITLE: API Parameter Order Change in compile - TypeScript\nDESCRIPTION: Highlights the explicit change in the 'compile' function argument order in TypeSpec's API. Previously, filename preceded host; now, host comes first. Ensures compatibility after updating to the new API. Requires TypeScript environment and the TypeSpec compiler library. Inputs: filename (string), host (object). Output: compilation result.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-10-12.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\ncompile(\"main.tsp\", host);\n\n// After\ncompile(host, \"main.tsp\");\n```\n\n----------------------------------------\n\nTITLE: Visualizing Type Hierarchy using Mermaid Diagram in Markdown\nDESCRIPTION: This Mermaid code block renders a right-to-left type hierarchy diagram, illustrating assignability relationships among primitive and complex types such as record, array, various numerics, string, boolean, and specialized date/time types. This provides a graphical overview for understanding which TypeSpec types can be assigned to one another, grouping numeric types into subcategories. Dependency: markdown with Mermaid support. Input: none (diagram is illustrative). Output: an interactive type graph. Limitation: content for documentation only, does not affect application logic.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/type-relations.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph RL\\n    record[\\\"Record<Element>\\\"] --> unknown\\n    customModel[\\\"Custom model with properties\\\"] --> record[\\\"Record<T>\\\"]\\n    array[\\\"Array<Element>\\\"] --> unknown\\n    tuple[\\\"Tuple\\\"] --> array\\n    numeric --> unknown\\n    subgraph numerics[For numeric types, a narrower type can be assigned to a wider one]\\n      integer --> numeric\\n        int8 --> integer\\n        int16 --> integer\\n        int32 --> integer\\n        safeint --> integer\\n        int64 --> integer\\n        uint8 --> integer\\n        uint16 --> integer\\n        uint32 --> integer\\n        uint64 --> integer\\n      float --> numeric\\n        float32 --> float\\n        float64 -->  float\\n      decimal --> numeric\\n        decimal128 --> decimal\\n    end\\n    string --> unknown\\n    boolean --> unknown\\n    null --> unknown\\n    bytes --> unknown\\n    plainDate --> unknown\\n    plainTime --> unknown\\n    zoneDateTime --> unknown\\n    duration --> unknown\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Field Index using @field Decorator in TypeSpec\nDESCRIPTION: This TypeSpec snippet shows the syntax for the `@TypeSpec.Protobuf.field` decorator. It's used on a `ModelProperty` to define its corresponding field index (a `uint32`) in the generated Protobuf message. The index must be between 1 and 2^29 - 1, and not in the reserved range 19000-19999.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Protobuf.field(index: valueof uint32)\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Schema Emitter in tspconfig.yaml (YAML)\nDESCRIPTION: Illustrates how to enable the JSON Schema emitter within the TypeSpec configuration file (`tspconfig.yaml` or similar) by adding `@typespec/json-schema` to the `emit` array.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/json-schema\"\n```\n\n----------------------------------------\n\nTITLE: Getting All Optional Boolean Literal Properties - JSON\nDESCRIPTION: This JSON shows an optional boolean property supplied with the literal value true. Used to test if the API is correctly handling present optional properties. The enclosing object structure must be respected for request and response cycles.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_261\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": true }\n```\n\n----------------------------------------\n\nTITLE: Reserving Protobuf Field Names/Indices using @reserve Decorator in TypeSpec\nDESCRIPTION: Defines the `@TypeSpec.Protobuf.reserve` decorator used to reserve specific field indices (single `uint32` or inclusive range `[uint32, uint32]`) or field names (`string`) within a Protobuf message definition derived from a TypeSpec model. Reserved fields cannot be used in the message, preventing accidental reuse and helping maintain API compatibility if fields are removed or deprecated. It targets an empty block `{}` and accepts a variable number of reservation arguments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/decorators.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Protobuf.reserve(...reservations: valueof string | [uint32, uint32] | uint32[])\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Protobuf Extern Reference - TypeSpec - typespec\nDESCRIPTION: Declares a model that represents an external Protobuf reference. This generic model, Extern, is parameterized with Path and Name, allowing TypeSpec to insert the corresponding import statements and references during code generation. Dependencies: None intrinsic, but needs a corresponding .proto file at the specified path. Path is the relative path to the .proto file; Name is the fully-qualified protobuf type name. Used to reference and interoperate with existing protos not authored in TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Protobuf.Extern<Path, Name>\n```\n\n----------------------------------------\n\nTITLE: Resolving Request Visibility in TypeSpec Emitters (JavaScript)\nDESCRIPTION: Determines the `Visibility` (e.g., Create, Update) implied for data in request parameters or the request body based on the TypeSpec program, operation definition, and the HTTP verb being used. Note that `Visibility.Read` is always applied implicitly for response data.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-metadata-handling.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nresolveRequestVisibility(Program, Operation, HttpVerb): Visibility\n```\n\n----------------------------------------\n\nTITLE: Adding Version-Specific Operations for Toys - TypeSpec\nDESCRIPTION: This TypeSpec snippet defines the Toys namespace within Pets, showing how to add route-based operations only for version 2 by using @added(Versions.v2). It introduces CRUD operations for Toy, including HTTP verbs, authentication, and expected responses. Dependencies include @typespec/versioning and plugins for HTTP modeling. The snippet demonstrates detailed, version-aware API surface evolution. Inputs are petId, toyId, and relevant models; outputs are routes and OpenAPI docs only in API v2.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/06-versioning.mdx#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\nimport \"@typespec/http\";\\nimport \"@typespec/versioning\";\\n\\nusing Http;\\nusing Versioning;\\n\\n@service(#{ title: \"Pet Store\" })\\n@server(\"https://example.com\", \"Single server endpoint\")\\n@versioned(Versions)\\nnamespace PetStore;\\n\\nenum Versions {\\n  v1: \"1.0\",\\n  v2: \"2.0\",\\n}\\n\\nmodel Pet {\\n  id: int32;\\n\\n  @minLength(1)\\n  name: string;\\n\\n  @minValue(0)\\n  @maxValue(100)\\n  age: int32;\\n\\n  kind: petType;\\n}\\n\\nenum petType {\\n  dog: \"dog\",\\n  cat: \"cat\",\\n  fish: \"fish\",\\n  bird: \"bird\",\\n  reptile: \"reptile\",\\n}\\n\\n@added(Versions.v2)\\nmodel Toy {\\n  id: int32;\\n  name: string;\\n}\\n\\nmodel CommonParameters {\\n  @header\\n  requestID: string;\\n\\n  @query\\n  locale?: string;\\n\\n  @header\\n  clientVersion?: string;\\n}\\n\\n@route(\"/pets\")\\nnamespace Pets {\\n  @get\\n  op listPets(...CommonParameters): {\\n    @statusCode statusCode: 200;\\n    @body pets: Pet[];\\n  };\\n\\n  @get\\n  op getPet(@path petId: int32, ...CommonParameters): {\\n    @statusCode statusCode: 200;\\n    @body pet: Pet;\\n  } | {\\n    @statusCode statusCode: 404;\\n    @body error: NotFoundError;\\n  };\\n\\n  @post\\n  @useAuth(BearerAuth)\\n  op createPet(@body pet: Pet, ...CommonParameters):\\n    | {\\n        @statusCode statusCode: 201;\\n        @body newPet: Pet;\\n      }\\n    | {\\n        @statusCode statusCode: 202;\\n        @body acceptedPet: Pet;\\n      }\\n    | {\\n        @statusCode statusCode: 400;\\n        @body error: ValidationError;\\n      }\\n    | {\\n        @statusCode statusCode: 401;\\n        @body error: UnauthorizedError;\\n      };\\n\\n  @put\\n  @useAuth(BearerAuth)\\n  op updatePet(@path petId: int32, @body pet: Pet, ...CommonParameters):\\n    | {\\n        @statusCode statusCode: 200;\\n        @body updatedPet: Pet;\\n      }\\n    | {\\n        @statusCode statusCode: 400;\\n        @body error: ValidationError;\\n      }\\n    | {\\n        @statusCode statusCode: 401;\\n        @body error: UnauthorizedError;\\n      }\\n    | {\\n        @statusCode statusCode: 404;\\n        @body error: NotFoundError;\\n      }\\n    | {\\n        @statusCode statusCode: 500;\\n        @body error: InternalServerError;\\n      };\\n\\n  @delete\\n  @useAuth(BearerAuth)\\n  op deletePet(@path petId: int32, ...CommonParameters): {\\n    @statusCode statusCode: 204;\\n  } | {\\n    @statusCode statusCode: 401;\\n    @body error: UnauthorizedError;\\n  };\\n\\n  // highlight-start\\n  @route(\"{petId}/toys\")\\n  namespace Toys {\\n    @added(Versions.v2)\\n    @get\\n    op listToys(@path petId: int32, ...CommonParameters): {\\n      @statusCode statusCode: 200;\\n      @body toys: Toy[];\\n    } | {\\n      @statusCode statusCode: 404;\\n      @body error: NotFoundError;\\n    };\\n\\n    @added(Versions.v2)\\n    @post\\n    @useAuth(BearerAuth)\\n    op createToy(@path petId: int32, @body toy: Toy, ...CommonParameters): {\\n      @statusCode statusCode: 201;\\n      @body newToy: Toy;\\n    } | {\\n      @statusCode statusCode: 400;\\n      @body error: ValidationError;\\n    } | {\\n      @statusCode statusCode: 401;\\n      @body error: UnauthorizedError;\\n    };\\n\\n    @added(Versions.v2)\\n    @put\\n    @useAuth(BearerAuth)\\n    op updateToy(@path petId: int32, @path toyId: int32, @body toy: Toy, ...CommonParameters):\\n      | {\\n          @body updatedToy: Toy;\\n        }\\n      | {\\n          @statusCode statusCode: 400;\\n          @body error: ValidationError;\\n        }\\n      | {\\n          @statusCode statusCode: 401;\\n          @body error: UnauthorizedError;\\n        }\\n      | {\\n          @statusCode statusCode: 404;\\n          @body error: NotFoundError;\\n        };\\n\\n    @added(Versions.v2)\\n    @delete\\n    @useAuth(BearerAuth)\\n    op deleteToy(@path petId: int32, @path toyId: int32, ...CommonParameters): {\\n      @statusCode statusCode: 204;\\n    } | {\\n      @statusCode statusCode: 401;\\n      @body error: UnauthorizedError;\\n    };\\n  }\\n  // highlight-end\\n}\\n\\n@error\\nmodel NotFoundError {\\n  code: \"NOT_FOUND\";\\n  message: string;\\n}\\n\\n@error\\nmodel ValidationError {\\n  code: \"VALIDATION_ERROR\";\\n  message: string;\\n  details: string[];\\n}\\n\\n@error\\nmodel UnauthorizedError {\\n  code: \"UNAUTHORIZED\";\\n  message: string;\\n}\\n\\n@error\\nmodel InternalServerError {\\n  code: \"INTERNAL_SERVER_ERROR\";\\n  message: string;\\n}\\n\\nmodel InternalServerErrorResponse {\\n  @statusCode statusCode: 500;\\n  @body error: InternalServerError;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Route Resolution with Multiple Namespaces (Old Behavior) in TypeSpec\nDESCRIPTION: Illustrates the previous route resolution behavior. Even with `Foo` defined as the service namespace via `@serviceTitle`, operations in other top-level namespaces like `MyLib` were also included if they had `@route` decorators, resulting in routes from both (`[\"/in-service\", \"my-lib\"]`). This behavior has changed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nimport \"@typespec/rest\";\n\nusing Http;\n\n@serviceTitle(\"My Service\")\nnamespace Foo {\n  @route(\"in-service\")\n  op test(): void;\n}\n\nnamespace MyLib {\n  @route(\"my-lib\")\n  op test(): void;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Unwrapped Primitive Arrays - TypeSpec\nDESCRIPTION: Defines a TypeSpec model with an annotated unwrapped array property. The @encodedName and @Xml.unwrapped decorators specify the XML serialization details. No external dependencies, but requires TypeSpec XML encoding features enabled. Input is a model with an array; output is used to generate corresponding XML and OpenAPI schemas.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@encodedName(\"application/xml\", \"XmlPet\")\nmodel Pet {\n  @Xml.unwrapped\n  tags: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Date Header with RFC3339 Encoding - TypeScript\nDESCRIPTION: Implements a function that serializes a Date value using dateRfc3339Serializer for the HTTP header, matching the required explicit RFC3339 format. Accepts TestClientContext, Date, and GetOptions arguments. It throws on unsuccessful responses and handles optional operation callbacks.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_date.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function get(\\n  client: TestClientContext,\\n  value: Date,\\n  options?: GetOptions,\\n): Promise<void> {\\n  const path = parse(\"/default\").expand({});\\n  const httpRequestOptions = {\\n    headers: {\\n      value: dateRfc3339Serializer(value),\\n    },\\n  };\\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Request for Continuation Token Paging in TypeScript\nDESCRIPTION: This asynchronous TypeScript function `linkSend` constructs and sends the HTTP GET request for the `link` operation (continuation token pattern). It parses the path template `/link{?filter,nextToken}` and expands it with the provided `filter` and optional `nextToken` from the options. It uses the `client.pathUnchecked().get()` method to send the request.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts function linkSend\nasync function linkSend(client: TestClientContext, filter: string, options?: Record<string, any>) {\n  const path = parse(\"/link{?filter,nextToken}\").expand({\n    filter: filter,\n    ...(options?.nextToken && { nextToken: options.nextToken }),\n  });\n  const httpRequestOptions = {\n    headers: {},\n  };\n  return await client.pathUnchecked(path).get(httpRequestOptions);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Explicitly Disabling PATCH Optionality (0.66.0 Context)\nDESCRIPTION: This snippet, from the 0.66.0 release notes, demonstrates the explicit and recommended way to disable effective PATCH optionality using `@patch(#{ implicitOptionality: false })` in `@typespec/http`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_24\n\nLANGUAGE: tsp\nCODE:\n```\n@patch(#{ implicitOptionality: false })\nop example(@bodyRoot resource: Resource): Resource;\n```\n\n----------------------------------------\n\nTITLE: Configuring Logical OR for Security Schemes (Union) With @useAuth (Typespec)\nDESCRIPTION: Illustrates how to declare alternative authentication mechanisms by passing a union of schemes to @useAuth. Either Auth1 or Auth2 can be used to access APIs. Dependencies: Auth1 and Auth2 must be available.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n// Use EITHER Auth1 OR Auth2\\n@useAuth(Auth1 | Auth2)\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Resource via Collection Operation - TypeSpec - typespec\nDESCRIPTION: Specifies the 'create' operation on ExtensionResourceCollectionOperations, enabling creation of a new extension resource instance. The operation accepts a ResourceCreateModel<Resource> as input and returns either the created Extension model, a ResourceCreatedResponse<Resource>, or an Error. Requires models for Extension, Resource, Error, and the relevant ResourceCreateModel and ResourceCreatedResponse types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceCollectionOperations.create(resource: TypeSpec.Rest.Resource.ResourceCreateModel<Resource>): Extension | TypeSpec.Rest.Resource.ResourceCreatedResponse<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Defining an Update Model Instance via Update<> Transformation (typespec, TypeSpec)\nDESCRIPTION: Illustrates how to use the `Update<>` model to define an updateable version of a given model (here, `Dog`), preserving only fields marked for update visibility. The original model specifies visibilities for fields using the `@visibility` decorator and Lifecycle phases. No dependencies outside of the standard TypeSpec decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_22\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Dog {\n  @visibility(Lifecycle.Read)\n  id: int32;\n\n  @visibility(Lifecycle.Create, Lifecycle.Update)\n  secretName: string;\n\n  name: string;\n}\n\n// This model will have the `secretName` and `name` fields, but not the `id` field.\nmodel UpdateDog is Update<Dog>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Status Code Properties in Operation Return Types - Typespec\nDESCRIPTION: Demonstrates real-world usage of @statusCode within the return type of operations, specifying response codes directly or as unions (e.g., 200, or 201 | 202). This ensures consistent API response documentation and aids code generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_23\n\nLANGUAGE: typespec\nCODE:\n```\nop read(): {\n  @statusCode _: 200;\n  @body pet: Pet;\n};\nop create(): {\n  @statusCode _: 201 | 202;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Read Transformation Model in TypeSpec (Typespec)\nDESCRIPTION: The Read model transformation extracts only the properties of input model T marked with Lifecycle.Read visibility, mirroring expected outputs from read operations (e.g., GET). Supports optional model renaming and is recursive in nature.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Read<T, NameTemplate>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Client Function for Multipart POST Request\nDESCRIPTION: This TypeScript function `doThing` implements the client-side logic for sending the multipart/form-data POST request defined in TypeSpec. It accepts a client context (`TestClientContext`) and the `Foo` body parameter. It constructs the multipart request body as an array of objects, each containing `name` and `body` properties corresponding to the parts defined in the `Foo` model. It sets the `Content-Type` header (defaulting to `multipart/form-data`), sends the POST request using the client's `pathUnchecked` method, handles potential `onResponse` callbacks, and throws a `RestError` if the response status is not 204 (No Content).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/simple_part.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function doThing(\n  client: TestClientContext,\n  bodyParam: Foo,\n  options?: DoThingOptions,\n): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      \"content-type\": options?.contentType ?? \"multipart/form-data\",\n    },\n    body: [\n      {\n        name: \"name\",\n        body: bodyParam.name,\n      },\n      {\n        name: \"age\",\n        body: bodyParam.age,\n      },\n      {\n        name: \"description\",\n        body: bodyParam.description,\n      },\n    ],\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PATCH Operation with patch Decorator - TypeSpec (typespec)\nDESCRIPTION: Uses the @TypeSpec.Http.patch decorator to indicate an operation uses the HTTP PATCH verb, supporting an optional options parameter to control patch semantics (e.g., implicitOptionality). Useful for partial updates of resources. Accepts advanced configuration via TypeSpec.Http.PatchOptions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.patch(options?: valueof TypeSpec.Http.PatchOptions)\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@patch op update(pet: Pet): void;\n```\n\nLANGUAGE: typespec\nCODE:\n```\n// Disable implicit optionality, making the body of the PATCH operation use the\n// optionality as defined in the `Pet` model.\n@patch(#{ implicitOptionality: false })\nop update(pet: Pet): void;\n```\n\n----------------------------------------\n\nTITLE: Defining a Required Bytes Header Parameter in TypeSpec\nDESCRIPTION: This TypeSpec code defines an operation `defaultEncoding` within the `Test` namespace. It accepts a required header parameter `value` of type `bytes`. Without explicit encoding specified, the default encoding (base64) is typically assumed for generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_bytes.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\n\n@route(\"/default\")\nop defaultEncoding(\n  @header\n  value: bytes,\n): NoContentResponse;\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Serializer for Derived TRex Model (Transport)\nDESCRIPTION: This TypeScript function `jsonTRexToTransportTransform` specifically serializes a `TRex` object (or null/undefined) into a transport-ready format. It maps the `kind` (set to 't-rex') and `size` properties from the input `TRex` object to the output object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/inheritance_discriminator.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonTRexToTransportTransform\nexport function jsonTRexToTransportTransform(input_?: TRex | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    kind: input_.kind,\n    size: input_.size,\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Serializer for Nested Foo Model\nDESCRIPTION: Shows the generated `jsonFooToTransportTransform` serializer function for the nested `Foo` model in `src/models/internal/serializers.ts`. It transforms a `Foo` instance into a transport object, mapping `name` and `age`, and crucially, calls `jsonBarToTransportTransform` to serialize the nested `bar` property. This demonstrates handling nested model serialization.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/basic_model.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonFooToTransportTransform\nexport function jsonFooToTransportTransform(input_?: Foo | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    name: input_.name,\n    age: input_.age,\n    bar: jsonBarToTransportTransform(input_.bar),\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Submitting Non-String Float Value in Multipart Form-Data - HTTP\nDESCRIPTION: Shows a multipart/form-data HTTP request where a float value (not a JSON or string) is sent as a plain text entry under 'temperature'. Demonstrates the handling of non-string numeric types in multipart payloads using text/plain. Useful for endpoints that require numeric non-string input directly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_60\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /upload HTTP/1.1\\nContent-Length: 428\\nContent-Type: multipart/form-data; boundary=abcde12345\\n\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"temperature\\\"\\nContent-Type: text/plain\\n\\n0.5\\n--abcde12345\n```\n\n----------------------------------------\n\nTITLE: Opting into New Decorator Argument Marshalling in TypeSpec (TypeScript)\nDESCRIPTION: Provides the TypeScript code to configure a TypeSpec library package to opt into the new decorator argument marshalling behavior by setting the `decoratorArgMarshalling` flag to `\"new\"` within `$flags`. This is recommended for future compatibility.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n  export const $flags = definePackageFlags({\n    decoratorArgMarshalling: \"new\",\n  });\n  ```\n```\n\n----------------------------------------\n\nTITLE: Providing Nullable Model Array Payloads - JSON\nDESCRIPTION: Illustrates the structure of a JSON array which includes model objects and nullable values. This payload is used when sending or receiving arrays of model instances where some elements may be 'null'. No additional dependencies are needed. The array contains objects matching the expected schema or null, matching endpoints for 'ModelValue' arrays with nullability.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_145\n\nLANGUAGE: json\nCODE:\n```\n[{ \"property\": \"hello\" }, null, { \"property\": \"world\" }]\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Models and Operation for Multipart File Upload with Specific Content Type\nDESCRIPTION: Defines TypeSpec models `FileSpecificContentType` (extending `File` with a specific `contentType`) and `FileWithHttpPartSpecificContentTypeRequest` (using `HttpPart` for the file). It also defines a POST operation `create` that accepts a `multipart/form-data` request using the defined request body model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/multipart.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nnamespace Test;\nmodel FileSpecificContentType extends File {\n  filename: string;\n  contentType: \"image/jpg\";\n}\n\nmodel FileWithHttpPartSpecificContentTypeRequest {\n  profileImage: HttpPart<FileSpecificContentType>;\n}\n\n@post op create(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: FileWithHttpPartSpecificContentTypeRequest,\n): NoContentResponse;\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitter Options in tspconfig.yaml\nDESCRIPTION: Demonstrates how to provide specific configuration options to the `@typespec/http-server-js` emitter within the `tspconfig.yaml` file. Options are nested under the emitter's name within the `options` key. Replace `option: value` with actual valid options like `express: true` or `emitter-output-dir: \"./my-output\"`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-js/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-server-js\"\noptions:\n  \"@typespec/http-server-js\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Using the @madeRequired Decorator in TypeSpec Example\nDESCRIPTION: This TypeSpec example shows the `@madeRequired` decorator applied to the `nickname` property of the `Foo` model. It specifies that the `nickname` property became mandatory in version `Versions.v2`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_8\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Foo {\n  name: string;\n\n  @madeRequired(Versions.v2)\n  nickname: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Serialization of Model Properties as XML Attributes - XML\nDESCRIPTION: XML output for a model where selected properties are serialized as attributes or have custom names. Illustrates use of XML attribute and element naming features provided by TypeSpec decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_34\n\nLANGUAGE: XML\nCODE:\n```\n<Book id=\"0\">\n  <xml-title>string</xml-title>\n  <author>string</author>\n</Book>\n```\n\n----------------------------------------\n\nTITLE: Generating Decorator Signatures with tspd (Bash)\nDESCRIPTION: This command-line snippet demonstrates how to use the `tspd` tool with the `--enable-experimental` flag to execute the `gen-extern-signature` command. This function is intended to generate decorator function signatures and associated type checks for a TypeSpec library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/tspd/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntspd --enable-experimental gen-extern-signature\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeSpec Project using Template (Bash)\nDESCRIPTION: Demonstrates the command-line usage of `tsp init` to scaffold a new TypeSpec project from a specified template URL. Requires the TypeSpec CLI to be installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/writing-scaffolding-template.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp init <templateUrl>\n```\n\n----------------------------------------\n\nTITLE: Modeling Protobuf Service Operations with Input and Output - TypeSpec\nDESCRIPTION: This TypeSpec snippet defines input and output models with @field decorators and a service interface operation. The operation accepts an Input model and returns an Output model, both of which are emitted as Protobuf messages. The interface is marked as a Protobuf service and is designed for RPC mappings. TypeSpec with the Protobuf emitter is required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/guide.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Input {\n  @field(1) exampleField: string;\n}\n\nmodel Output {\n  @field(1) parsed: uint32;\n}\n\n@Protobuf.service\ninterface Example {\n  testOperation(...Input): Output;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Indentation in TypeSpec Models\nDESCRIPTION: Demonstrates the recommended 2-space indentation within TypeSpec model definitions. The 'bad' example shows incorrect indentation, while the 'good' example shows the preferred style.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n// bad\nmodel Pet {\n    name: string;\n}\n\n// good\nmodel Pet {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Is Model Array Record - JSON\nDESCRIPTION: Demonstrates returning an object where both 'knownProp' and additional properties are arrays of models, facilitating APIs supporting array-valued record extensions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_205\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"knownProp\\\": [{ \\\"state\\\": \\\"ok\\\" }, { \\\"state\\\": \\\"ok\\\" }],\\n  \\\"prop\\\": [{ \\\"state\\\": \\\"ok\\\" }, { \\\"state\\\": \\\"ok\\\" }]\\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Spread Record Unknown - JSON\nDESCRIPTION: Details a response where the main model combines known and dynamically-typed properties—numbers, booleans, strings—showcasing union and open records in TypeSpec/OpenAPI endpoints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_200\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"ExtendsUnknownAdditionalProperties\\\",\\n  \\\"prop1\\\": 32,\\n  \\\"prop2\\\": true,\\n  \\\"prop3\\\": \\\"abc\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Nested Namespaces (Dot Notation) in TypeSpec\nDESCRIPTION: Presents an alternative, more concise syntax for declaring nested namespaces using dot (`.`) notation to separate the different levels of the namespace hierarchy (e.g., `Foo.Bar.Baz`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/namespaces.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nnamespace Foo.Bar.Baz {\n  model SampleModel {}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Custom JSON Schema IDs in TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.id` decorator explicitly sets the `$id` property for the JSON Schema generated from a TypeSpec declaration (`unknown` target). If a base URI is set via `@baseUri` on a parent namespace, this ID is treated as relative to that URI. It takes a string `id` parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.id(id: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Payload with Property Same as Model Name - JSON\nDESCRIPTION: This JSON snippet demonstrates a payload where a property has the same name as the model, specifically \"SameAsModel\". This is used to confirm that defining properties with names identical to their parent model does not cause issues in languages where constructor and class names may clash. No external dependencies are required; the payload consists of a single key/value pair intended for submission to an HTTP endpoint.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_120\n\nLANGUAGE: json\nCODE:\n```\n{ \"SameAsModel\": \"ok\" }\n```\n\n----------------------------------------\n\nTITLE: Creating or Replacing a Resource - TypeSpec - typespec\nDESCRIPTION: Specifies an operation for either creating or replacing a resource entity, with the same argument and return pattern as typical creation operations. The operation accepts a ResourceCreateModel and supports returning the resultant Resource, a wrapper response, or Error. Ensures both new creation and complete replacement scenarios are handled uniformly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_31\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceCreateOrReplace.createOrReplace(resource: TypeSpec.Rest.Resource.ResourceCreateModel<Resource>): Resource | TypeSpec.Rest.Resource.ResourceCreatedResponse<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Specifying Delete REST Resource Operations in TypeSpec (Typespec)\nDESCRIPTION: This decorator marks an operation as a delete endpoint for a resource. Applied to operations, requiring a model parameter for the targeted resource. Indicates that the operation deletes resource instances.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.deletesResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Defining prefixItems Constraint with TypeSpec JSON Schema Decorator\nDESCRIPTION: The `@TypeSpec.JsonSchema.prefixItems` decorator enforces that the target array (`unknown[]` or `ModelProperty`) must begin with a specific sequence of types defined in the `value` parameter. The `value` parameter must be a tuple (represented as `unknown[]` in the signature) containing the types required at the start of the array. This corresponds to the `prefixItems` validation keyword in JSON Schema.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_19\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.JsonSchema.prefixItems(value: unknown[])\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom HTTP Authorization Scheme Model (TSP)\nDESCRIPTION: Provides a TypeSpec model definition for a custom authentication scheme named 'SharedKey'. Shows how to build custom models using the TypeSpec HTTP AuthType convention. Dependencies: The Http.AuthType.http type and string values. The 'scheme' property defines the custom header value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_8\n\nLANGUAGE: tsp\nCODE:\n```\nmodel MyCustomAuth {\\n  type: Http.AuthType.http;\\n  scheme: \\\"SharedKey\\\";\\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Emitter Configuration with Options - YAML\nDESCRIPTION: This YAML snippet demonstrates how to extend the TypeSpec emitter configuration by specifying both the emitter and custom options for @typespec/http-client-csharp. Options are nested under the 'options' key with emitter-specific properties. This pattern is useful for customizing generated code and controlling emitter behavior. The options object may include any of the documented emitter settings and requires the YAML processor supporting nested objects.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-csharp/reference/emitter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-csharp\"\noptions:\n  \"@typespec/http-client-csharp\":\n    option: value\n\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenAPI Extensions with @extension Decorator - TypeSpec\nDESCRIPTION: Shows adding a custom 'x-' extension property to an operation using the @extension decorator. Such extensions are emitted to OpenAPI schemas to support non-standard metadata fields. Inputs: Decorators and operation models. Outputs: OpenAPI object extensions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_38\n\nLANGUAGE: typespec\nCODE:\n```\nnamespace Pets {\n  @extension(\"x-streaming-operation\", true) op read(...PetId): Pet | Error;\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing Base64 Bytes Body in TypeScript\nDESCRIPTION: Defines a TypeScript function to transform a JSON response body containing base64-encoded bytes to a BytesBody object with native binary data. It checks for the existence of input, decodes the value, and structures the output accordingly. Dependencies: decodeBase64 utility. Expects input with a base64-encoded value; returns decoded BytesBody or input as-is if undefined. Handles only conversion/deserialization logic and expects correct shape provided.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/bytes_json_property.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonBytesBodyToApplicationTransform(input_?: any): BytesBody {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    value: decodeBase64(input_.value)!,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing SeaGull Model for Transport in TypeScript\nDESCRIPTION: This TypeScript function `jsonSeaGullToTransportTransform` specifically serializes a `SeaGull` object. It creates a transport-ready object containing the `kind` ('seagull') and `wingspan` properties from the input `SeaGull` instance. It handles null or undefined input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/polymorphic_single_level_inheritance.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonSeaGullToTransportTransform(input_?: SeaGull | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    kind: input_.kind,\n    wingspan: input_.wingspan,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Reference Emission in @typespec/json-schema\nDESCRIPTION: Explains the `emitAllRefs` option for the `@typespec/json-schema` emitter. Setting this option to true reverts to the previous behavior of emitting all referenced types as separate JSON Schemas, overriding the new default behavior of bundling unannotated types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-07-11.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nemitAllRefs\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Versioned Server Operation with Query API Version\nDESCRIPTION: Defines a HEAD endpoint for a non-versioned server using a query-based `api-version` parameter without a default value. The expected URL includes the API version provided at runtime (e.g., '/with-query-api-version?api-version=v1.0').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_110\n\nLANGUAGE: http\nCODE:\n```\nhead /server/versions/not-versioned/with-query-api-version\n```\n\n----------------------------------------\n\nTITLE: Using @extension with TypeSpec Values in TSP\nDESCRIPTION: Demonstrates the updated usage of the `@extension` decorator in TypeSpec 0.59.0 and later, allowing direct embedding of TypeSpec values (like records) as extensions in the generated JSON schema. This specific example adds an `x-example` extension with a record value `#{ foo: \"bar\" }` to the `Foo` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/CHANGELOG.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\\n@extension(\"x-example\", #{ foo: \"bar\" })\\nmodel Foo {}\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an Untyped Property in TypeSpec\nDESCRIPTION: Demonstrates defining a model property `noType` using the `unknown` type in TypeSpec. This corresponds to a schema property without a `type` field in OpenAPI. The property is marked as optional using `?`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Example {\n  /** This property has no `type` defined. */\n  noType?: unknown;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Serializing Union Enum Input for Transport in TypeScript\nDESCRIPTION: This TypeScript function 'jsonServerExtensibleEnumToTransportTransform' serializes input data matching the 'ServerExtensibleEnum' type for transmission over the network. It returns the input as-is unless the input is null or undefined. Intended for internal use, it ensures the correct representation of extensible enums during serialization. It assumes input validation is performed elsewhere and has no external dependencies beyond the type definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/string_union.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonServerExtensibleEnumToTransportTransform(\n  input_?: ServerExtensibleEnum | null,\n): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return input_;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @typespec/openapi3 Emitter with Options\nDESCRIPTION: This YAML snippet illustrates how to provide specific configuration options to the `@typespec/openapi3` emitter within the `tspconfig.yaml` file. Options are nested under the emitter's name within the `options` block, allowing customization of the OpenAPI generation process (e.g., setting output file names, choosing JSON/YAML format).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi3/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\\n  - \"@typespec/openapi3\"\\noptions:\\n  \"@typespec/openapi3\":\\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Sending a Bytes Header with Explicit Base64 Encoding in TypeScript\nDESCRIPTION: This TypeScript function `get` implements the client logic for the TypeSpec operation with explicit base64 encoding. It takes a `Uint8Array` (`value`), encodes it using `encodeUint8Array` with \"base64\" encoding (matching the `@encode` directive), and includes it in the `value` header of the request.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_bytes.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/api/testClientOperations.ts function get\nexport async function get(\n  client: TestClientContext,\n  value: Uint8Array,\n  options?: GetOptions,\n): Promise<void> {\n  const path = parse(\"/default\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      value: encodeUint8Array(value, \"base64\")!,\n    },\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining CreateBookRequest Message in Protobuf\nDESCRIPTION: This Protobuf snippet defines the `CreateBookRequest` message structure used as input for the `CreateBook` RPC. It includes a required `name` field (referencing a Shelf resource) and a required `book` field (containing the `Book` data). It uses `google.api.field_behavior` and `google.api.resource_reference` annotations for additional semantics.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/grpc-kiosk-example/README.md#_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n// Request message for LibraryService.CreateBook.\nmessage CreateBookRequest {\n    // The name of the shelf in which the book is created.\n    string name = 1 [\n        (google.api.field_behavior) = REQUIRED,\n        (google.api.resource_reference).type = \"Shelf\"\n    ];\n\n    // The book to create.\n    Book book = 2 [(google.api.field_behavior) = REQUIRED];\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the @tagMetadata Decorator for OpenAPI Tag Information in TypeSpec\nDESCRIPTION: This decorator provides additional metadata (like description, external documentation, and extensions) for a specific OpenAPI tag, identified by its name. It targets a `Namespace` and requires the tag `name` (string) and the `tagMetadata` (object of type `TypeSpec.OpenAPI.TagMetadata`) as parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/README.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.tagMetadata(name: valueof string, tagMetadata: valueof TypeSpec.OpenAPI.TagMetadata)\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Via Operations Interface - TypeSpec - typespec\nDESCRIPTION: Specifies an operation for creating a resource within the ResourceOperations interface. Takes a ResourceCreateModel, returns the created resource or a ResourceCreatedResponse or Error if unsuccessful. Supports REST POST-like semantics.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_46\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceOperations.create(resource: TypeSpec.Rest.Resource.ResourceCreateModel<Resource>): Resource | TypeSpec.Rest.Resource.ResourceCreatedResponse<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Expected Request Body for Versioning Added Interface V2 (JSON)\nDESCRIPTION: Specifies the expected JSON request body for the V2 interface endpoint ('post /versioning/added/api-version:{version}/interface-v2/v2'). This tests how added properties ('prop', 'enumProp', 'unionProp') are handled in a newer API version (v2InInterface) and ensures this operation group is generated only with the latest version.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_311\n\nLANGUAGE: json\nCODE:\n```\n{ \"prop\": \"foo\", \"enumProp\": \"enumMember\", \"unionProp\": \"bar\" }\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Union Request - JSON\nDESCRIPTION: This request example, for PUT /type/property/additionalProperties/spreadRecordUnion, details the expected format for union properties, showing field types and format consistency with the response shape for symmetry in API usage.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_230\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"flag\\\": true, \\\"prop1\\\": \\\"abc\\\", \\\"prop2\\\": 43.125 }\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Spread Record Unknown Derived - JSON\nDESCRIPTION: Exemplifies an object extended with extra numeric and string fields for more complex discriminated records, typical of flexible API contracts with multiple property types and inheritance.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_201\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"ExtendsUnknownAdditionalProperties\\\",\\n  \\\"index\\\": 314,\\n  \\\"age\\\": 2.71875,\\n  \\\"prop1\\\": 32,\\n  \\\"prop2\\\": true,\\n  \\\"prop3\\\": \\\"abc\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Field Index using @field Decorator in TypeSpec\nDESCRIPTION: Defines the `@TypeSpec.Protobuf.field` decorator used on a `ModelProperty` to specify its corresponding field index in the generated Protobuf message. It requires a `uint32` index parameter, which must fall between 1 and 2^29 - 1 (inclusive), and must not be within the reserved range 19000-19999 or any range marked as reserved using the `@reserve` decorator.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Protobuf.field(index: valueof uint32)\n```\n```\n\n----------------------------------------\n\nTITLE: Updated Usage of @discriminator Decorator - Typespec\nDESCRIPTION: Shows the new and recommended usage for applying the '@discriminator' decorator to a TypeSpec model using core syntax. '@discriminator(\"kind\")' is now compiler-known, so no longer requires FQN referencing. Used to mark models for distinguishing variants by 'kind'. Requires recent TypeSpec compiler.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-10-12.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n@disriminator(\"kind\")\nmodel Pet {}\n```\n\n----------------------------------------\n\nTITLE: Expected Request Body for Versioning Added V2 Endpoint (JSON)\nDESCRIPTION: Specifies the expected JSON request body for the V2 endpoint ('post /versioning/added/api-version:{version}/v2') under the 'versioning/added' scenario. This operation should only exist in the latest API version, featuring properties 'prop', 'enumProp', and 'unionProp'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_313\n\nLANGUAGE: json\nCODE:\n```\n{ \"prop\": \"foo\", \"enumProp\": \"enumMember\", \"unionProp\": \"bar\" }\n```\n\n----------------------------------------\n\nTITLE: Defining @baseUri Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@baseUri` decorator from the `TypeSpec.JsonSchema` namespace. This decorator sets the base URI for schemas emitted from types within the target `Namespace`. The `baseUri` parameter takes a string value representing the URI.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.baseUri(baseUri: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Adding a Model in a Versioned TypeSpec API - TypeSpec\nDESCRIPTION: This TypeSpec snippet demonstrates the use of the @added decorator to introduce a new model (Toy) in version 2 of the API. It includes the versioning enum, imports, and context such as the main Pet model and enum petType. Dependencies include @typespec/versioning and other standard API modeling plugins. Inputs are enum values defining versions; outputs are the inclusion of the Toy model only in v2 OpenAPI emits, providing a clear upgrade path for clients.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/06-versioning.mdx#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\nimport \"@typespec/http\";\\nimport \"@typespec/versioning\";\\n\\nusing Http;\\nusing Versioning;\\n\\n@service(#{ title: \"Pet Store\" })\\n@server(\"https://example.com\", \"Single server endpoint\")\\n@versioned(Versions)\\nnamespace PetStore;\\n\\nenum Versions {\\n  v1: \"1.0\",\\n  v2: \"2.0\",\\n}\\n\\nmodel Pet {\\n  id: int32;\\n\\n  @minLength(1)\\n  name: string;\\n\\n  @minValue(0)\\n  @maxValue(100)\\n  age: int32;\\n\\n  kind: petType;\\n}\\n\\nenum petType {\\n  dog: \"dog\",\\n  cat: \"cat\",\\n  fish: \"fish\",\\n  bird: \"bird\",\\n  reptile: \"reptile\",\\n}\\n\\n// highlight-start\\n@added(Versions.v2)\\nmodel Toy {\\n  id: int32;\\n  name: string;\\n}\\n// highlight-end\\n\n```\n\n----------------------------------------\n\nTITLE: Posting Multipart Float Data with Custom Headers in TypeScript\nDESCRIPTION: This TypeScript function implements the client-side logic for invoking the TypeSpec-defined endpoint, constructing a multipart/form-data HTTP POST request with a 'temperature' part (floating-point value as plain text). It requires the TypeSpec-generated TestClientContext and optional configuration, manages content types, and processes the HTTP response according to the contract. The function expects a floating-point body parameter and raises an error on non-204 responses, mirroring the type enforcement from TypeSpec. Dependencies include client path helpers, error utilities, and TypeScript runtime support.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/non-string-float.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function float(\n  client: TestClientContext,\n  body: {\n    temperature: {\n      body: number;\n      contentType: \"text/plain\";\n    };\n  },\n  options?: FloatOptions,\n): Promise<void> {\n  const path = parse(\"/non-string-float\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      \"content-type\": options?.contentType ?? \"multipart/form-data\",\n    },\n    body: [\n      {\n        name: \"temperature\",\n        body: body.temperature.body,\n      },\n    ],\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Operation Signature for spreadParameterWithInnerAlias\nDESCRIPTION: Defines the expected generated operation signature for the spreadParameterWithInnerAlias test case. It shows spreading an alias that contains another alias property as the body, resulting in flattened parameters in the signature. No intermediate models (`InnerAlias`, `InnerAliasParameter`) should be generated.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\nspreadParameterWithInnerAlias(id: string, name: string, age: int32, x_ms_test_header: string)\n```\n\n----------------------------------------\n\nTITLE: Providing Datetime Dictionary Payloads - JSON\nDESCRIPTION: Defines a JSON object where each key maps to an ISO8601-formatted datetime string. Appropriate for dictionary endpoints dealing with temporal data. Validates correct format and parsing on API side.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_150\n\nLANGUAGE: json\nCODE:\n```\n{ \"k1\": \"2022-08-26T18:38:00Z\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Decorator Implementations with $decorators Export in TypeSpec (TypeScript)\nDESCRIPTION: Demonstrates the new mechanism in TypeSpec v0.60 for defining decorator implementations by exporting a `$decorators` object. This object maps decorator names within specific namespaces (e.g., 'TypeSpec.OpenAPI') to their corresponding implementation functions (e.g., `$useRef`, `$oneOf`). This feature simplifies how decorators are provided by TypeSpec libraries.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-09-10.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport const $decorators = {\n  \"TypeSpec.OpenAPI\": {\n    useRef: $useRef,\n    oneOf: $oneOf,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Payload for Reserved Keyword Models (Batch) - JSON\nDESCRIPTION: This JSON snippet pattern, repeated for several reserved words including 'assert', 'async', 'await', 'break', 'class', 'constructor', 'continue', 'def', 'del', 'elif', 'else', 'except', 'exec', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', and 'yield', verifies that using these keywords as model or property names does not create parsing or processing errors. Each property is named \"name\" with a value of \"ok\". Used for endpoints expecting these as model names in the API.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_123\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"ok\" }\n```\n\n----------------------------------------\n\nTITLE: Getting Default (Missing) Optional Int Literal Properties - JSON\nDESCRIPTION: An empty JSON response document for missing optional int literal property, checking for correct contract handling when integers are not provided.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_290\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining Singleton Operations Interface - TypeSpec - typespec\nDESCRIPTION: Creates an interface for operations on singleton resources, parameterized with Singleton, Resource, and Error types. Enables definition of contracts where only a single instance can exist, supporting get/update behaviors appropriate for such resources.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_52\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.SingletonResourceOperations<Singleton, Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record String Request - JSON\nDESCRIPTION: This JSON sample illustrates the required request body for PUT /type/property/additionalProperties/spreadDifferentRecordString. It validates spreading additional string properties with an 'id' field and a string property 'prop'. Inputs must comply with this shape to be accepted by the API endpoint.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_216\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"id\\\": 43.125, \\\"prop\\\": \\\"abc\\\" }\n```\n\n----------------------------------------\n\nTITLE: Adding TypeSpec HTTP Client Python Emitter as Peer Dependency (Library) - Bash\nDESCRIPTION: This snippet shows how to install @typespec/http-client-python as a peer dependency in a library context using npm. The --save-peer flag ensures that the dependency is specified as a peer dependency in package.json, which is suitable for reusable libraries that expect the consumer to provide the emitter. Node.js and npm are prerequisites. This allows library authors to avoid tightly coupling their own dependencies with the consumer\\'s environment.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-python/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/http-client-python\n\n```\n\n----------------------------------------\n\nTITLE: Defining Rest Decorator Parameters in TypeSpec\nDESCRIPTION: Shows how to use the spread syntax `...` on the last parameter of a decorator signature to collect multiple arguments into an array. The `names` parameter collects all remaining arguments provided to the `track` decorator as an array of string values (`valueof string[]`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nextern dec track(target: Model | Enum, ...names: valueof string[]);\n```\n\n----------------------------------------\n\nTITLE: Linking to External Documentation for Operations - TypeSpec\nDESCRIPTION: Demonstrates how to use the @externalDocs decorator to attach external documentation URLs to OpenAPI operations emitted by TypeSpec. These links appear in OpenAPI-compatible viewers and allow referencing out-of-band resources.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n@externalDocs(\"https://example.com/docs/users\", \"Additional user documentation\")\\nop getUser(id: string): User;\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Collection of Models (Null) Patch Request - JSON\nDESCRIPTION: This PATCH /type/property/nullable/collections/model/null request body shows a nullable list of models being set to null, but ensures 'requiredProperty' remains present. This supports patch semantics where collections are optional.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_244\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": null }\n```\n\n----------------------------------------\n\nTITLE: Adding TypeSpec Streams as a Peer Dependency - Bash\nDESCRIPTION: This Bash command installs the @typespec/streams package as a peer dependency using npm for projects developing libraries that extend TypeSpec. The --save-peer flag ensures the dependency is available as a peer for consumers of the library, rather than as a direct dependency. Executing this command in your library's root sets up the necessary peer linkage for downstream users.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/streams/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/streams\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SSEStream with Union Events in TypeSpec\nDESCRIPTION: This example demonstrates defining multiple event models (`UserConnect`, `UserMessage`, `UserDisconnect`) and grouping them into a union `ChannelEvents`. Named union variants ('userconnect', 'usermessage', 'userdisconnect') define specific event types, while an unnamed, terminal string event ('[unsubscribe]') is also included. The `subscribeToChannel` operation returns an `SSEStream` parameterized with this `ChannelEvents` union, indicating the possible events the stream can carry.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/sse/reference/data-types.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel UserConnect {\n  username: string;\n  time: string;\n}\n\nmodel UserMessage {\n  username: string;\n  time: string;\n  text: string;\n}\n\nmodel UserDisconnect {\n  username: string;\n  time: string;\n}\n\n@TypeSpec.Events.events\nunion ChannelEvents {\n  userconnect: UserConnect,\n  usermessage: UserMessage,\n  userdisconnect: UserDisconnect,\n\n  @Events.contentType(\"text/plain\")\n  @terminalEvent\n  \"[unsubscribe]\",\n}\n\nop subscribeToChannel(): SSEStream<ChannelEvents>;\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Cadl/TypeSpec Decorators and Types in Markdown Changelog (Markdown)\nDESCRIPTION: The snippets consist of inline code references using Markdown syntax to highlight the names of decorators (e.g., @resource, @collectionAction), types (e.g., ResourceCreateOrReplace), and function names (e.g., getAllRoutes). These are documentation artifacts rather than executable code, used to clearly communicate technical changes, new features, and usage conventions. No direct code execution is implied; rather, the context helps contributors and users quickly identify introduced or modified concepts within the changelog.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`@resource`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`ResourceCreateOrReplace`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`createsOrReplaces`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`cloneKeyProperties`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`@collectionAction`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`getAllRoutes`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`getContentTypes`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`mixes` -> `extends`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`KeyOf`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`@key`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`@parentResource`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`@copyResourceKeyParameters`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`@action`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`@route`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`Cadl.Rest`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`@head`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`statusCode`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`Cadl.Http.PlainData<T>`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`@CreateOrUpdate`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`$name`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`isHeader`\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n`NoContentResponse`\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Spread Model Arrays - JSON\nDESCRIPTION: Shows a typical API response or request body where a model includes known properties and additional properties derived from spreading an array of sub-models. Requires understanding of JSON schema extension with arrays and supports any system that serializes or deserializes JSON objects as per the shown structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_194\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"knownProp\\\": \\\"abc\\\",\\n  \\\"prop\\\": [{ \\\"state\\\": \\\"ok\\\" }, { \\\"state\\\": \\\"ok\\\" }],\\n  \\\"derivedProp\\\": [{ \\\"state\\\": \\\"ok\\\" }, { \\\"state\\\": \\\"ok\\\" }]\\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Generated JavaScript Server using NPM\nDESCRIPTION: These commands first navigate into the generated server code directory (`tsp-output/server/generated`) using `cd`, and then start the Node.js server using the `start` script defined in the project's `package.json` file, executed via `npm run start`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-javascript.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd tsp-output/server/generated\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Defining Client Context Interface - TypeScript\nDESCRIPTION: Declares the 'ClientContext' interface, extending from a base 'Client', to encapsulate contextual information for client operations. Typically used as a base for injecting configuration, authentication, or shared utilities across generated clients. Requires prior definition of the 'Client' type and should be placed in src/api/clientContext.ts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/global_namespace.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ClientContext extends Client {}\n```\n\n----------------------------------------\n\nTITLE: Specifying Parent Resource Relationship in TypeSpec (Typespec)\nDESCRIPTION: This decorator associates a model as a child of another parent resource. Apply to models with the parent model specified as the parameter. Used to express resource hierarchies within RESTful schema definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.parentResource(parent: Model)\n```\n\n----------------------------------------\n\nTITLE: Defining OpenIdConnectAuth Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.OpenIdConnectAuth` model for describing OpenID Connect (OIDC) authentication. It is parameterized by `ConnectUrl`, which specifies the OIDC discovery endpoint (e.g., `https://server.com/.well-known/openid-configuration`), potentially relative to the server URL. It includes properties for `type` (fixed to `TypeSpec.Http.AuthType.openIdConnect`) and `openIdConnectUrl`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_31\n\nLANGUAGE: http\nCODE:\n```\n```http\nhttps://server.com/.well-known/openid-configuration\n```\n```\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.Http.OpenIdConnectAuth<ConnectUrl>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Base URI for JSON Schemas in TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.baseUri` decorator sets a base URI for a TypeSpec namespace. Any JSON Schemas emitted for types within this namespace will have their IDs calculated relative to this specified URI. It targets `Namespace` declarations and requires a single string parameter `baseUri`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.baseUri(baseUri: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Sending a Required Base64 Encoded Bytes Header in TypeScript\nDESCRIPTION: This TypeScript function `defaultEncoding` implements the client-side logic for the corresponding TypeSpec operation. It takes a `Uint8Array` (`value`), encodes it using `encodeUint8Array` with \"base64\" encoding, and includes it as the `value` header in an HTTP GET request. It expects a 204 No Content response and throws an error otherwise.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_bytes.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/api/testClientOperations.ts function defaultEncoding\nexport async function defaultEncoding(\n  client: TestClientContext,\n  value: Uint8Array,\n  options?: DefaultEncodingOptions,\n): Promise<void> {\n  const path = parse(\"/default\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      value: encodeUint8Array(value, \"base64\")!,\n    },\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Remove Default Values Transformation Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@withoutDefaultValues` decorator. When applied to a model, it returns a transformed version of the model where any default values assigned to properties have been removed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_72\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@withoutDefaultValues\n```\n```\n\n----------------------------------------\n\nTITLE: Defining 16-bit Unsigned Integer Scalar in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Declares the `uint16` scalar for unsigned 16-bit integer fields (range: 0–65,535), often used for protocol buffer or binary format modeling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_49\n\nLANGUAGE: typespec\nCODE:\n```\nscalar uint16\n```\n\n----------------------------------------\n\nTITLE: Using the @opExample Decorator for Operation Examples in TypeSpec\nDESCRIPTION: Illustrates the usage of the `@opExample` decorator on a TypeSpec operation (`createPet`), introduced in PR #3572. It defines example interactions, including sample parameters (`pet`) and return values (`Pet`), along with optional title and description metadata.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_34\n\nLANGUAGE: tsp\nCODE:\n```\n@opExample(\n  #{ // Using the new object literal syntax\n    parameters: #{ // Using the new object literal syntax\n      pet: #{ // Using the new object literal syntax\n        id: \"some\",\n        name: \"Fluffy\",\n        dob: plainDate.fromISO(\"2020-01-01\"),\n      },\n    },\n    returnType: #{ // Using the new object literal syntax\n      id: \"some\",\n      name: \"Fluffy\",\n      dob: plainDate.fromISO(\"2020-01-01\"),\n    },\n  },\n  #{ title: \"First\", description: \"Show creating a pet\" } // Metadata object\n)\nop createPet(pet: Pet): Pet;\n```\n\n----------------------------------------\n\nTITLE: Defining an Azure Key Vault Certificate Client Namespace with Models and Operations - TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a service namespace, data models, and HTTP operations for an Azure Key Vault Certificates client. The namespace, annotated with a service title, contains 'Certificate' and 'CertificateProperties' models, and a 'CertificateOperations' interface exposing HTTP 'list' and 'get' routes for certificates. This serves as the input schema for code generation tools and maps directly to the eventual client SDK structure. TypeSpec runtime and HTTP decorator support are required for full functionality.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-python/reference/package-structure.mdx#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@service({\n  title: \"Azure Key Vault Certificate Client\",\n})\nnamespace Azure.KeyVault.Certificates {\n  model Certificate {\n    id: string;\n    name: string;\n    properties: CertificateProperties;\n  }\n\n  model CertificateProperties {\n    created: utcDateTime;\n    updated: utcDateTime;\n    enabled: boolean;\n  }\n\n  @route(\"/certificates\")\n  interface CertificateOperations {\n    @get list(): Certificate[];\n    @get get(@path id: string): Certificate;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying #deprecated Directive in TypeSpec\nDESCRIPTION: This TypeSpec snippet demonstrates how to mark a model (`LegacyUser`) as deprecated using the '#deprecated' directive. A string argument provides the deprecation message that will be shown to users of this model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/directives.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n#deprecated \"Use NewUser instead\"\nmodel LegacyUser {}\n```\n```\n\n----------------------------------------\n\nTITLE: Using TypeSpec Lifecycle Transform Templates\nDESCRIPTION: This TypeSpec snippet demonstrates the use of built-in lifecycle transform templates (`Read<T>`, `Create<T>`, `Update<T>`, `CreateOrUpdate<T>`). It defines an `Example` model with different lifecycle visibilities for its properties and then creates new models (`ReadExample`, `CreateExample`, `UpdateExample`, `CreateOrUpdateExample`) by applying these templates to `Example`. Each resulting model includes only the properties visible in the corresponding lifecycle phase(s), effectively creating specific views of the original model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/visibility.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Example {\n  @visibility(Lifecycle.Create)\n  id: string;\n\n  @visibility(Lifecycle.Create, Lifecycle.Read)\n  name: string;\n\n  @visibility(Lifecycle.Update)\n  description: string;\n}\n\nmodel ReadExample is Read<Example>;\n\nmodel CreateExample is Create<Example>;\n\nmodel UpdateExample is Update<Example>;\n\nmodel CreateOrUpdateExample is CreateOrUpdate<Example>;\n```\n```\n\n----------------------------------------\n\nTITLE: Using the @added Decorator in TypeSpec (tsp)\nDESCRIPTION: Provides examples of applying the `@added` decorator to an operation (`addedInV2`), a model (`AlsoAddedInV2`), and a model property (`addedInV3`) within a TypeSpec definition. It demonstrates how to specify the version (e.g., `Versions.v2`, `Versions.v3`) in which the element was added.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@added(Versions.v2)\nop addedInV2(): void;\n\n@added(Versions.v2)\nmodel AlsoAddedInV2 {}\n\nmodel Foo {\n  name: string;\n\n  @added(Versions.v3)\n  addedInV3: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example: Adding Exclusive Minimum Value to Numeric Scalar in TypeSpec\nDESCRIPTION: Applies @minValueExclusive(0) to a float64 scalar distance, requiring positive-only distances. Enforces strict positive numbers without including zero.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_35\n\nLANGUAGE: typespec\nCODE:\n```\n@minValueExclusive(0)\nscalar distance is float64;\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed REST Operation with Parameter Placement in TypeScript\nDESCRIPTION: This TypeScript function defines the 'read' operation for a Widgets client, mapping provided parameters to appropriate parts of an HTTP request—path and query parameters to the URL, headers to the request header, and the body property separately. It depends on a WidgetsClientContext, TypeScript runtime, and helper functions like parse and createRestError. It expects four required parameters (id, etag, foo, name) and optional options, and returns a promise which throws on non-204/no-body response. The operation illustrates RESTful parameter marshalling and error handling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/with-parameters.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function read(\n  client: WidgetsClientContext,\n  id: string,\n  etag: string,\n  foo: string,\n  name: string,\n  options?: ReadOptions,\n): Promise<void> {\n  const path = parse(\"/widgets/{id}{?foo}\").expand({\n    id: id,\n    foo: foo,\n  });\n  const httpRequestOptions = {\n    headers: {\n      etag: etag,\n    },\n    body: {\n      name: name,\n    },\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Discriminator on Model Hierarchy in TypeSpec\nDESCRIPTION: This snippet applies the @discriminator decorator to specify a property in the base model to discriminate between subtypes. Used for inheritance hierarchies where a common property (like 'kind') is set to distinguish the actual type. Inputs are the parent and child models; output is type-aware deserialization based on the discriminator value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@discriminator(\"kind\")\nmodel Pet{ kind: string }\n\nmodel Cat extends Pet {kind: \"cat\", meow: boolean}\nmodel Dog extends Pet  {kind: \"dog\", bark: boolean}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Action for REST Resources in TypeSpec (Typespec)\nDESCRIPTION: This decorator marks an operation as a collection action, scoped to a REST resource collection path (e.g., /pets/my-action). It takes the target resource model and an optional action name as parameters. Apply to operations to indicate collection-level actions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.collectionAction(resourceType: Model, name?: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Applying OAuth2 Schemes and Scopes With Custom Alias and @useAuth (TSP)\nDESCRIPTION: Presents an advanced authentication setup using OAuth2Auth with varying scopes on different service operations. Shows defining a custom OAuth2 template alias, applying scope-specific authentication, supporting unauthenticated or multi-scheme operations, and demonstrates the use of generics and unions. Dependencies: OAuth2Auth, OAuth2FlowType.implicit, and proper model imports required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_18\n\nLANGUAGE: tsp\nCODE:\n```\n@useAuth(MyOAuth2<[\\\"read\\\"]>)\\nnamespace DemoService;\\n\\nalias MyOAuth2<Scopes extends string[]> = OAuth2Auth<\\n  [\\n    {\\n      type: OAuth2FlowType.implicit;\\n      authorizationUrl: \\\"https://api.example.com/oauth2/authorize\\\";\\n      refreshUrl: \\\"https://api.example.com/oauth2/refresh\\\";\\n    }\\n  ],\\n  Scopes\\n>;\\n\\n// Use OAuth2 with the \\\"read\\\" scope\\nop list(): string[];\\n\\n// Use OAuth2 with the \\\"read\\\" scope or no authentication at all\\n@useAuth(MyOAuth2<[\\\"read\\\"]> | NoAuth)\\nop read(): string;\\n\\n// Use OAuth2 with the \\\"write\\\" scope\\n@useAuth(MyOAuth2<[\\\"write\\\"]>)\\nop write(value: string): void;\\n\\n// Use OAuth2 with the \\\"delete\\\" scope\\n@useAuth(MyOAuth2<[\\\"delete\\\"]>)\\nop delete(value: string): void;\n```\n\n----------------------------------------\n\nTITLE: Validating Array Value Size with @maxItems in TypeSpec\nDESCRIPTION: This snippet illustrates how TypeSpec validates array values against size constraints defined by decorators. The `Tags` model uses `@maxItems(2)`, causing an error when `exampleTags2` is assigned an array value with three items, while `exampleTags1` with two items is valid.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n/** Can have at most 2 tags */\n@maxItems(2)\nmodel Tags is Array<string>;\n\nconst exampleTags1: Tags = #[\"TypeSpec\", \"JSON\"]; // ok\nconst exampleTags2: Tags = #[\"TypeSpec\", \"JSON\", \"OpenAPI\"]; // error\n```\n\n----------------------------------------\n\nTITLE: Using Pagination Decorators in a TypeSpec Model\nDESCRIPTION: This snippet demonstrates defining a generic `Page` model in TypeSpec using various pagination decorators. `@pageItems` marks the array of items, `@nextLink` marks the link to the next page, `@prevLink` marks the link to the previous page, `@firstLink` marks the link to the first page, and `@lastLink` marks the link to the last page. It also shows an operation `listPets` returning this `Page` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_51\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Page<T> {\n  @pageItems items: T[];\n  @nextLink next: url;\n  @prevLink prev: url;\n  @firstLink first: url;\n  @lastLink last: url;\n}\n@list op listPets(): Page<Pet>;\n```\n```\n\n----------------------------------------\n\nTITLE: Importing a JavaScript File using TypeSpec\nDESCRIPTION: Demonstrates how to import an external JavaScript file into a TypeSpec program. The import statement references a JavaScript module (e.g., ./decorators.js), allowing interop or extension of TypeSpec with custom JS decorators or logic. Inputs: JavaScript file path; Output: makes JS module contents available to TypeSpec. The file must be accessible at the specified relative or absolute path.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/imports.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"./decorators.js\";\n```\n\n----------------------------------------\n\nTITLE: Referencing Model Properties in TypeSpec Aliases\nDESCRIPTION: This snippet shows how to define an alias that references a specific property of a model. The alias `PetName` is defined as a shorthand for the `name` property of the `Pet` model, accessed using the dot (`.`) operator. This allows creating concise references to parts of existing model structures.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/alias.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\nalias PetName = Pet.name;\n```\n\n----------------------------------------\n\nTITLE: Modeling Success and Error Responses with Status Codes - TypeSpec\nDESCRIPTION: Demonstrates how to provide status codes on response models using the @statusCode decorator in TypeSpec. Presents single and union types for handling multiple status codes. Inputs are models with integral status code fields; output in OpenAPI includes status-specific response objects.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\nmodel UserResponse {\\n  @statusCode\\n  code: 200;\\n\\n  body: User;\\n}\\n\\nop getUser(@path id: string): UserResponse;\\n\\nmodel UserResponse {\\n  @statusCode\\n  code: 200;\\n\\n  user: User;\\n}\\n\\nmodel UserNotFoundResponse {\\n  @statusCode\\n  code: 404;\\n\\n  message: string;\\n}\\n\\nop getUser(@path id: string): UserResponse | UserNotFoundResponse;\n```\n\n----------------------------------------\n\nTITLE: Example Usage: CreateOrUpdate Transformation with Visibility Filtering (Typespec)\nDESCRIPTION: Shows how to transform a Dog model by visibility modifiers for Create and Update, resulting in CreateOrUpdateDog containing only permitted properties. Highlights the impact of lifecycle phase annotations in generated models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Dog {\n  @visibility(Lifecycle.Read)\n  id: int32;\n\n  @visibility(Lifecycle.Create)\n  immutableSecret: string;\n\n  @visibility(Lifecycle.Create, Lifecycle.Update)\n  secretName: string;\n\n  name: string;\n}\n\n// This model will have the `immutableSecret`, `secretName`, and `name` fields, but not the `id` field.\nmodel CreateOrUpdateDog is CreateOrUpdate<Dog>;\n\n```\n\n----------------------------------------\n\nTITLE: Importing Namespace Contents with `using` in TypeSpec\nDESCRIPTION: Illustrates the use of the `using` keyword followed by a namespace name (e.g., `using SampleNamespace;`). This brings the members (like `SampleModel`) of the specified namespace into the current scope, allowing direct reference to its types without needing the fully qualified name.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/namespaces.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nusing SampleNamespace;\n\nmodel Foo {\n  sample: SampleModel;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Client Function for Multipart File Upload\nDESCRIPTION: Implements the generated asynchronous `create` client function in TypeScript. This function constructs and sends a POST request with `multipart/form-data` content. It uses `createFilePartDescriptor` to prepare the file part (`profileImage`) ensuring the correct, specified content type (`image/jpg`) is used, overriding any potential content type on the input file object. It expects a 204 No Content response and handles potential errors.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/multipart.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/api/testClientOperations.ts function create\nexport async function create(\n  client: TestClientContext,\n  body: FileWithHttpPartSpecificContentTypeRequest,\n  options?: CreateOptions,\n): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      \"content-type\": options?.contentType ?? \"multipart/form-data\",\n    },\n    body: [createFilePartDescriptor(\"profileImage\", body.profileImage, \"image/jpg\")],\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Deserializing Transport Data to Widget Model (TypeScript)\nDESCRIPTION: This TypeScript function `jsonWidgetToApplicationTransform`, located in `src/models/internal/serializers.ts`, deserializes an incoming transport object into a `Widget` instance. It assigns known properties (`name`, `age`, `optional`) directly and uses object destructuring with rest syntax (`...rest`) to gather all unknown properties from the input object. These gathered properties are then processed by the `jsonRecordStringToApplicationTransform` function and placed into the `additionalProperties` field of the resulting `Widget` object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/additional-properties/spread.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// src/models/internal/serializers.ts function jsonWidgetToApplicationTransform\nexport function jsonWidgetToApplicationTransform(input_?: any): Widget {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    additionalProperties: jsonRecordStringToApplicationTransform(\n      (({ name, age, optional, ...rest }) => rest)(input_),\n    ),\n    name: input_.name,\n    age: input_.age,\n    optional: input_.optional,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Maximum Items Constraint on an Array Model in TypeSpec\nDESCRIPTION: Demonstrates applying @maxItems(5) to a model of a string array, enforcing that the collection must not have more than five items. This facilitates static constraint checking in APIs and ensures downstream systems handle fixed-length collections.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_19\n\nLANGUAGE: typespec\nCODE:\n```\n@maxItems(5)\nmodel Endpoints is string[];\n```\n\n----------------------------------------\n\nTITLE: Defining a Date Query Parameter with Explicit Unix Timestamp Encoding (TypeSpec)\nDESCRIPTION: Defines a TypeSpec operation `get` with a required `utcDateTime` query parameter `value`. The `@encode` decorator specifies a custom encoding `\"unixTimestamp\"` and indicates the underlying wire format should be `int64`. The operation is routed to `/default`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/query_date.md#_snippet_8\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\n\n@route(\"/default\")\nop get(\n  @query\n  @encode(\"unixTimestamp\", int64)\n  value: utcDateTime,\n): NoContentResponse;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Nested Namespaced Model and Operation in TypeSpec\nDESCRIPTION: This code creates nested namespaces 'Test' and 'Foo', declaring a deeply scoped 'TestFooWidget' model and an operation returning it. It demonstrates how models are defined and referenced across namespaces. All activity is contained within TypeSpec. Ensures model uniqueness and allows referencing with full namespace qualification.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/basic.md#_snippet_4\n\nLANGUAGE: TypeSpec\nCODE:\n```\nnamespace Test {\n  namespace Foo {\n    model TestFooWidget {\n      id: string;\n      weight: int32;\n      color: \"red\" | \"blue\";\n    }\n  }\n  op foo(): Foo.TestFooWidget;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitter in TypeSpec YAML Configuration - YAML\nDESCRIPTION: Shows how to enable the @typespec/http-server-csharp emitter by declaring it in the 'emit' array within a TypeSpec configuration YAML file. No additional options are provided in this base configuration. The emitter will execute with default settings; make sure YAML formatting and indentation are preserved when pasting into your config file.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-csharp/reference/emitter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-server-csharp\"\n```\n\n----------------------------------------\n\nTITLE: Running TypeSpec HTTP Client Python Emitter via CLI - Bash\nDESCRIPTION: Runs the @typespec/http-client-python emitter using the TypeSpec CLI. Requires TypeSpec to be installed and a project with service definitions. Accepts service path (here \".\") and emits generated client code. Output directory and other emitter options are configured via config or defaults.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-python/reference/emitter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/http-client-python\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for PUT /type/model/visibility\nDESCRIPTION: This JSON is the expected input body for a PUT request to `/type/model/visibility`. It demonstrates sending a model containing properties used for both create ('createProp') and update ('updateProp') operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_187\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"createProp\": [\"foo\", \"bar\"],\n  \"updateProp\": [1, 2]\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Exclusive Maximum with @maxValueExclusive in TypeSpec\nDESCRIPTION: Shows use of @maxValueExclusive to enforce that a numeric property must be less than (not equal to) a given value. Ideal for constraints where the bound is exclusive. Requires numeric model or scalar type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_24\n\nLANGUAGE: typespec\nCODE:\n```\n@maxValueExclusive(value: valueof numeric)\n```\n\n----------------------------------------\n\nTITLE: Getting All Optional PlainDate Properties - JSON\nDESCRIPTION: A response object where the property is an ISO8601 date string, present as an optional field. Used to validate format and presence logic for date-only types, without time zone information.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_293\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": \"2022-12-12\" }\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec with the Protobuf Emitter via CLI\nDESCRIPTION: This command uses the TypeSpec compiler (`tsp`) to compile the TypeSpec definitions in the current directory (`.`) and instructs it to emit Protobuf files using the `@typespec/protobuf` emitter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/protobuf\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2Auth Model in TypeSpec\nDESCRIPTION: Defines the generic `TypeSpec.Http.OAuth2Auth` model for describing OAuth 2.0 authentication requirements. It is parameterized by `Flows` (a model representing the list of supported OAuth2 flows) and `Scopes` (a model representing the list of OAuth2 scopes common to all flows). It includes properties for `type` (fixed to `TypeSpec.Http.AuthType.oauth2`), `flows`, and `defaultScopes`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_29\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.Http.OAuth2Auth<Flows, Scopes>\n```\n```\n\n----------------------------------------\n\nTITLE: Defining GetKioskRequest Message in Protobuf\nDESCRIPTION: This Protobuf snippet defines the `GetKioskRequest` message structure. It contains a single, required field `id` of type `int32`, used to identify the kiosk to retrieve.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/grpc-kiosk-example/README.md#_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetKioskRequest {\n  // Required.\n  int32 id = 1;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Java Client Emitter Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the specific dependency for the TypeSpec Java HTTP client emitter (`@typespec/http-client-java`) to your project's `package.json` file. This is the first step in setting up the Java client generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@typespec/http-client-java\": \"^0.1.9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining @multipleOf Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@multipleOf` decorator from the `TypeSpec.JsonSchema` namespace. Applied to numeric types (`numeric`) or a `ModelProperty` representing a number, it requires the numeric value to be a multiple of the specified number. The `value` parameter takes a numeric value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.multipleOf(value: valueof numeric)\n```\n\n----------------------------------------\n\nTITLE: Initializing Widgets REST Client Class in TypeScript\nDESCRIPTION: This TypeScript class defines the WidgetsClient, initializing its internal context and exposing a 'read' method, which delegates to the generated 'read' function with appropriate parameters. Dependencies include WidgetsClientContext, WidgetsClientOptions, and the read operation's implementation. The constructor accepts an endpoint and optional client options; the client method mirrors the operation signature, providing abstraction for consumer code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/with-parameters.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class WidgetsClient {\n  #context: WidgetsClientContext;\n\n  constructor(endpoint: string, options?: WidgetsClientOptions) {\n    this.#context = createWidgetsClientContext(endpoint, options);\n  }\n  async read(id: string, etag: string, foo: string, name: string, options?: ReadOptions) {\n    return read(this.#context, id, etag, foo, name, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Representation with Multiple Inline Namespaces\nDESCRIPTION: This XML snippet shows the structure for the `Book` model with different namespaces applied. It includes declarations for both `xmlns:smp` and `xmlns:ns2`. The `<smp:title>` and `<ns2:author>` elements use their respective prefixes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_40\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<smp:Book xmlns:smp=\"http://example.com/schema\" xmlns:sn2=\"http://example.com/ns2\">\n  <id>0</id>\n  <smp:title>string</smp:title>\n  <ns2:author>string</ns2:author>\n</smp:Book>\n```\n```\n\n----------------------------------------\n\nTITLE: Running the Generated C# Service - Bash\nDESCRIPTION: Starts the generated ASP.NET Core service using the .NET CLI. This command builds and launches your server so you can interact with its endpoints. The path must match your generated output directory, and .NET 9 is required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-csharp.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndotnet run --project \"tsp-output/server/aspnet\"\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for GET /type/model/inheritance/single-discriminator/missingdiscriminator\nDESCRIPTION: This JSON is the expected response body for a GET request to `/type/model/inheritance/single-discriminator/missingdiscriminator`. It tests the scenario where the service returns a polymorphic model but omits the discriminator property ('kind').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_177\n\nLANGUAGE: json\nCODE:\n```\n{ \"wingspan\": 1 }\n```\n\n----------------------------------------\n\nTITLE: Creating a Typed Client for the Test Service in TypeScript (Class, TypeScript)\nDESCRIPTION: Defines the 'TestClient' class representing the service client, internally managing the TestClientContext. It constructs the context using endpoint and options, and provides a 'create' method that wraps the generated 'create' function. Dependencies include TestClientContext, createTestClientContext, the 'create' operation, and potentially the Typespec-generated client types. Inputs include an endpoint URL, optional client options, a Widget instance, and optional CreateOptions. This class offers a type-safe interface for invoking the service's operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/with_body_root.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  async create(widget: Widget, options?: CreateOptions) {\n    return create(this.#context, widget, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Applying Minimum Item Constraint on Array Model in TypeSpec\nDESCRIPTION: Applies @minItems(1) to an array model, enforcing non-empty collections. Ensures at least one endpoint is defined in usage scenarios.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_29\n\nLANGUAGE: typespec\nCODE:\n```\n@minItems(1)\nmodel Endpoints is string[];\n```\n\n----------------------------------------\n\nTITLE: Equivalent Decorator-Based Operation Documentation in TypeSpec\nDESCRIPTION: Demonstrates providing the same operation documentation as above but with explicit @doc decorators for both the operation and its parameter. This is functionally equivalent to using doc comments and results in the same external documentation. Inputs are documentation strings and operation declaration. Suitable for scenarios favoring more explicit decorator syntax.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/documentation.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@doc(\"Get a widget.\")\nop read(\n  @doc(\"The ID of the widget to retrieve.\")\n  @path\n  widgetId: string,\n): Widget | Error;\n```\n\n----------------------------------------\n\nTITLE: Instantiating C# Exception with Required Status Code (csharp)\nDESCRIPTION: Demonstrates throwing the generated C# exception class `Standard4XXResponse`. Because the corresponding TypeSpec model (`Standard4XXResponse`) defined `statusCode` as a union (`400 | 402`), the constructor requires the specific status code (400 in this example) to be passed when creating an instance of the exception.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/CHANGELOG.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n```csharp \nthrow new Standard4XXResponse(400);\n```\n```\n\n----------------------------------------\n\nTITLE: Composing a Parameterized Base URL in a TypeScript API Client\nDESCRIPTION: This TypeScript snippet implements a factory function to create a typed API client context. The function maps the 'endpoint' and 'apiVersion' arguments into their corresponding placeholders in the server URL template. It then returns a client instance using the resolved endpoint using facilities from '@typespec/ts-http-runtime'. Key parameters are 'endpoint', 'apiVersion', and an optional 'options' object for further customization. Expected input is the concrete values for endpoint and version; output is an initialized client. Errors are thrown if required parameters are missing. '@typespec/ts-http-runtime' is a required dependency.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/server/multiple-parameters.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Client, ClientOptions, getClient } from \\\"@typespec/ts-http-runtime\\\";\\n\\nexport interface TestClientContext extends Client {}\\nexport interface TestClientOptions extends ClientOptions {\\n  endpoint?: string;\\n}\\nexport function createTestClientContext(\\n  endpoint: string,\\n  apiVersion: string,\\n  options?: TestClientOptions,\\n): TestClientContext {\\n  const params: Record<string, any> = {\\n    endpoint: endpoint,\\n    apiVersion: apiVersion,\\n  };\\n  const resolvedEndpoint = \\\"{endpoint}/server/path/multiple/{apiVersion}\\\".replace(\\n    /{([^}]+)}/g,\\n    (_, key) =>\\n      key in params\\n        ? String(params[key])\\n        : (() => {\\n            throw new Error(`Missing parameter: ${key}`);\\n          })(),\\n  );\\n  return getClient(resolvedEndpoint, {\\n    ...options,\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Auto Route Resolution for REST Interfaces/Operations in TypeSpec (Typespec)\nDESCRIPTION: This decorator enables automatic route resolution for interfaces or operations, particularly for resource types with routes defined at the model level. No parameters are required. Used by decorating either an interface or operation, allowing routes like /pets/{id} to be generated from model segments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.autoRoute\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@autoRoute\ninterface Pets {\n  get(@segment(\"pets\") @path id: string): void; //-> route: /pets/{id}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining @name Decorator in TypeSpec\nDESCRIPTION: This TypeSpec decorator, `@TypeSpec.Xml.name`, allows specifying a custom name for an XML element or attribute during serialization. It takes a single string parameter `name`. This is equivalent to using `@encodedName(\"application/xml\", name)`. It targets `unknown`, meaning it can potentially be applied to various TypeSpec kinds.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Xml.name(name: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Creating Client Context Factory - TypeScript\nDESCRIPTION: Implements 'createClientContext', a factory function that builds a new ClientContext object using a given endpoint and optional client options. It validates the required endpoint parameter, interpolates its value, and invokes 'getClient' to initialize context. Depends on utility functions like 'getClient' and the types 'ClientOptions' and 'ClientContext'; throws if required parameters are missing.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/global_namespace.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createClientContext(endpoint: string, options?: ClientOptions): ClientContext {\n  const params: Record<string, any> = {\n    endpoint: endpoint,\n  };\n  const resolvedEndpoint = \"{endpoint}\".replace(/{([^}]+)}/g, (_, key) =>\n    key in params\n      ? String(params[key])\n      : (() => {\n          throw new Error(`Missing parameter: ${key}`);\n        })(),\n  );\n  return getClient(resolvedEndpoint, {\n    ...options,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Call for RFC3339 Encoded Date Query Parameter (TypeScript)\nDESCRIPTION: This TypeScript function `get` implements the client call for the TypeSpec operation with explicit RFC3339 encoding. It takes a `Date` object `value` and serializes it using `dateRfc3339Serializer` before appending it to the `/default` path for the GET request.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/query_date.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/api/testClientOperations.ts function get\nexport async function get(\n  client: TestClientContext,\n  value: Date,\n  options?: GetOptions,\n): Promise<void> {\n  const path = parse(\"/default{?value}\").expand({\n    value: dateRfc3339Serializer(value),\n  });\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Annotated Query Parameter (@query)\nDESCRIPTION: Defines a GET endpoint where a query parameter is annotated with `@query` but not explicitly included in the route template's query string definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_87\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/annotation-only\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple HTTP Response Examples using @opExample in TypeSpec\nDESCRIPTION: This TypeSpec code defines an HTTP operation `read` that can return different responses based on status codes (200, 404, 422). It utilizes the `@opExample` decorator to provide specific sample data for each potential response type, clarifying expected outputs for API consumers. The example requires the `@typespec/http` library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/examples.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp title=main.tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/openapi3\\\"]}\"\nimport \"@typespec/http\";\n\nusing Http;\n\n@opExample(#{ returnType: #{ statusCode: 200, name: \"Max\", age: 3 } })\n@opExample(#{ returnType: #{ statusCode: 404, error: \"Not found\" } })\n@opExample(#{ returnType: #{ statusCode: 422, error: \"Invalid payload\" } })\nop read(): {\n  @statusCode statusCode: 200;\n  name: string;\n  age: int32;\n} | {\n  @statusCode statusCode: 404;\n  error: string;\n} | {\n  @statusCode statusCode: 422;\n  error: string;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Applying OAuth2 Authentication in TypeSpec\nDESCRIPTION: Uses the `@useAuth` decorator with `OAuth2Flow` to specify OAuth2 authentication. The type parameter `<[MyScope]>` indicates the required OAuth2 flow(s) and specifies `MyScope` as a required scope.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_21\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@useAuth(OAuth2Flow<[MyScope]>)\n```\n\n----------------------------------------\n\nTITLE: Listing Resource Entities - TypeSpec - typespec\nDESCRIPTION: Declares an operation returning a paginated collection (CollectionWithNextLink) of resource instances or Error if retrieval fails. No explicit arguments; relies on contextual invocation. Useful for generating list endpoints in resource synthetics.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_41\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceList.list(): TypeSpec.Rest.Resource.CollectionWithNextLink<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Sending Date Header with Unix Timestamp Encoding - TypeScript\nDESCRIPTION: Defines a TypeScript client operation that sends a Date header after serializing it to Unix Timestamp format using dateUnixTimestampSerializer. Expects a TestClientContext, Date, and optional arguments. Returns void for 204-empty responses and throws on error, enabling onResponse callback support.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_date.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function get(\\n  client: TestClientContext,\\n  value: Date,\\n  options?: GetOptions,\\n): Promise<void> {\\n  const path = parse(\"/default\").expand({});\\n  const httpRequestOptions = {\\n    headers: {\\n      value: dateUnixTimestampSerializer(value),\\n    },\\n  };\\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Nullable String Array Payloads - JSON\nDESCRIPTION: Demonstrates a JSON array with string values and nullable entries. This pattern is used for API endpoints that accept or return arrays where some elements can be null. Inputs and outputs are simple arrays containing strings and the literal null value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_146\n\nLANGUAGE: json\nCODE:\n```\n[\"hello\", null, \"world\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Service Version using @service Decorator in TypeSpec\nDESCRIPTION: This snippet shows how to use the `@service` decorator with options to set the version of the service defined by the `PetStore` namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_62\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@service(#{version: \"1.0\"})\nnamespace PetStore;\n```\n```\n\n----------------------------------------\n\nTITLE: Running All Tests Using pnpm - Bash\nDESCRIPTION: Executes all project tests using pnpm. Relies on test scripts defined in the workspace configuration. Should be run after building the project and installing all dependencies. Outputs the results of the test suite to the console.\nSOURCE: https://github.com/microsoft/typespec/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Multiple Spread Record - JSON\nDESCRIPTION: Exemplifies a JSON object spanning multiple property types—boolean, string, and float—assembled from multiple sources/spreads, suitable for APIs with complex property composition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_210\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"flag\\\": true, \\\"prop1\\\": \\\"abc\\\", \\\"prop2\\\": 43.125 }\n```\n\n----------------------------------------\n\nTITLE: Putting All Optional String Properties - JSON\nDESCRIPTION: A request payload featuring an optional string property set to a value, ensuring both string format and correct optional property handling in update or insert operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_307\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": \"hello\" }\n```\n\n----------------------------------------\n\nTITLE: Defining CreateBook RPC Method in Protobuf\nDESCRIPTION: This Protobuf snippet defines the `CreateBook` RPC method. It takes a `CreateBookRequest` message as input and returns a `Book` message. The `google.api.http` option maps it to an HTTP POST request, specifying the path (`/v1/{name=shelves/*}/books`) and indicating that the `book` field from the request message should be used as the request body. The `google.api.method_signature` option provides a hint about the key request parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/grpc-kiosk-example/README.md#_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n// Creates a book, and returns the new Book.\nrpc CreateBook(CreateBookRequest) returns (Book) {\n    option (google.api.http) = {\n      post: \"/v1/{name=shelves/*}/books\"\n      body: \"book\"\n    };\n    option (google.api.method_signature) = \"name,book\";\n}\n```\n\n----------------------------------------\n\nTITLE: Encode Numeric Property as UInt8 String - JSON\nDESCRIPTION: Covers usage of an 8-bit unsigned integer property, encoded as a string (e.g., \\\"255\\\") for request and response. Systems should enforce correct numeric format for the string value, ensuring fit within uint8 limits.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": \\\"255\\\"\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": \\\"255\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Model with Array of Records\nDESCRIPTION: This TypeSpec code defines a model named `Widget` within the `Test` namespace. It contains a single property `id`, which is defined as an array of `Record<int32>`. This signifies an array where each element is an object mapping string keys to 32-bit integer values. An operation `foo` is also defined to return this `Widget` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/array-properties.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\nmodel Widget {\n  id: Record<int32>[];\n}\nop foo(): Widget;\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitter in TypeSpec Project - YAML\nDESCRIPTION: Shows how to configure the @typespec/json-schema emitter in a TypeSpec config file. This basic YAML snippet lists the emitter under the 'emit' property, instructing TypeSpec to run this emitter during compilation. Requires a standard TypeSpec project with a configuration file (e.g., tspconfig.yaml). The emitter will use its default options if not otherwise specified.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/emitter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/json-schema\"\n```\n\n----------------------------------------\n\nTITLE: Serializing Optional Body Model to Transport Format - TypeScript\nDESCRIPTION: Serializes a 'BodyModel' object to a plain JavaScript object suitable for HTTP transport, preserving null or undefined if empty. Expects an input of either a 'BodyModel' or null/undefined and returns an object containing the 'name' property, or passes through empty data as is. Used as part of request construction to ensure consistent network payload formatting. No external libraries are required, but the presence of a 'BodyModel' type is assumed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/optional-request-body.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonBodyModelToTransportTransform(input_?: BodyModel | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    name: input_.name,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Spread Model String - JSON\nDESCRIPTION: Represents a response example with a 'name' and an open 'prop' as string values, showcasing string extension with additional properties for TypeSpec REST interfaces.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_199\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"name\\\": \\\"ExtendsStringAdditionalProperties\\\", \\\"prop\\\": \\\"abc\\\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitter in TypeSpec Project YAML - YAML\nDESCRIPTION: This YAML configuration snippet shows how to specify the @typespec/http-client-csharp emitter in a TypeSpec project's configuration file. No additional options are provided in this example. The 'emit' property lists the emitters to use when generating output. This requires a compatible TypeSpec configuration environment.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-csharp/reference/emitter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-csharp\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Delete Interface for Resources - TypeSpec - typespec\nDESCRIPTION: Establishes an interface to represent the resource deletion pattern. Accepts template parameters for the resource to be deleted and the associated error response. The declaration is used to define standardized delete operations for resource models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_34\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ResourceDelete<Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for PUT /type/model/inheritance/recursive\nDESCRIPTION: This JSON represents the expected input body for a PUT request to `/type/model/inheritance/recursive`. It demonstrates sending a model with a recursive structure, where the 'extension' property contains an array of objects of the same model type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_175\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": 0,\n  \"extension\": [\n    {\n      \"level\": 1,\n      \"extension\": [\n        {\n          \"level\": 2\n        }\n      ]\n    },\n    {\n      \"level\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Serializer for Base Dinosaur Model (Transport)\nDESCRIPTION: This TypeScript function `jsonDinosaurToTransportTransform` serializes a `Dinosaur` object (or null/undefined) into a format suitable for transport (e.g., JSON). It handles the base properties and relies on an assumed `jsonDinosaurToTransportDiscriminator` helper function to potentially add discriminator-specific logic or handle different derived types before returning the transformed object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/inheritance_discriminator.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonDinosaurToTransportTransform\nexport function jsonDinosaurToTransportTransform(input_?: Dinosaur | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    ...jsonDinosaurToTransportDiscriminator(input_),\n    size: input_.size,\n    kind: input_.kind,\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining @nextLink Pagination Property in TypeSpec\nDESCRIPTION: Shows how to mark a model property as a link to the next page in paginated data using the @nextLink decorator. Allows navigation through pages in REST API models. Intended for use in paginated resource definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_36\n\nLANGUAGE: typespec\nCODE:\n```\n@nextLink\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Path Parameters with @route in TypeSpec (TSP Language)\nDESCRIPTION: This code snippet in TypeSpec's syntax demonstrates how to define a route with an optional path parameter by including it as '/{param}' in the route string and marking the parameter as optional in the operation. The snippet also shows support for @autoRoute, which automatically binds route parameters. Required dependencies are TypeSpec and the HTTP library. The inputs are operation definitions; the output is a valid API route that supports optional path segments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-04-02.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\n@route(\"optional{/param}/list\")\nop optional(@path param?: string): void;\n```\n\nLANGUAGE: tsp\nCODE:\n```\n@autoRoute\nop optional(@path param?: string): void;\n```\n\n----------------------------------------\n\nTITLE: Generating Service Operation Handler with onResponse Callback - TypeScript\nDESCRIPTION: This TypeScript snippet implements an asynchronous function 'foo' that sends a POST request representing the 'Widget' operation. It constructs the request body from supplied parameters and calls the provided 'onResponse' callback if defined. Dependencies include a TestClientContext instance, an optional FooOptions for configuration, and error handling with 'createRestError'. Expected inputs mirror the TypeSpec model fields; outputs are void or throw on error. The design ensures response handling extensibility via callbacks.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/on_response.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function foo(\n  client: TestClientContext,\n  id: string,\n  totalWeight: number,\n  color: \"red\" | \"blue\",\n  options?: FooOptions,\n): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n    body: {\n      id: id,\n      total_weight: totalWeight,\n      color: color,\n      is_required: options?.isRequired,\n    },\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies for a Versioned Service (v1) in TypeSpec\nDESCRIPTION: This snippet shows how a versioned service declares a dependency on a specific version of a versioned TypeSpec library (Azure.Core v1.0 Preview 1). The `@useDependency` decorator is applied to the specific version (`v1`) within the version enum.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/guide.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@service(#{ title: \"Contoso Widget Manager\" })\n@versioned(Contoso.WidgetManager.Versions)\nnamespace Contoso.WidgetManager;\n\nenum Versions {\n  @useDependency(Azure.Core.v1_0_Preview_1)\n  v1,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Request Header Parameter in TypeSpec\nDESCRIPTION: Defines an operation `read` that expects an HTTP request header named `traceparent`. The `@header` decorator marks the `traceparent` parameter (of type string) as originating from the request headers. The operation returns a `Pet` object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_9\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop read(@header traceparent: string): Pet\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Model Hierarchies with Discriminators in TypeSpec\nDESCRIPTION: Defines a service namespace and a polymorphic model structure representing Fish, Shark, Salmon, SawShark, and GoblinShark using TypeSpec. Discriminators @discriminator(\"kind\") and @discriminator(\"sharktype\") specify how type hierarchies are distinguished. Fish and its subtypes have properties like age, kind, and sharktype, and the structure supports friend, partner, and hate relationships. Also exposes an operation to fetch the root model. Intended as input for code generation and schema validation scenarios.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/inheritance_2_discriminators.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n\n@discriminator(\"kind\")\nmodel Fish {\n  age: int32;\n}\n\n@discriminator(\"sharktype\")\nmodel Shark extends Fish {\n  kind: \"shark\";\n  sharktype: string;\n}\n\nmodel Salmon extends Fish {\n  kind: \"salmon\";\n  friends?: Fish[];\n  hate?: Record<Fish>;\n  partner?: Fish;\n}\n\nmodel SawShark extends Shark {\n  sharktype: \"saw\";\n}\n\nmodel GoblinShark extends Shark {\n  sharktype: \"goblin\";\n}\n\n@get\nop getModel(): Fish;\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum Number of Array Items with @minItems in TypeSpec\nDESCRIPTION: Presents the @minItems decorator to indicate the minimum allowed items in an array property or model. Enforces lower bounds in API payloads and model validation. Works with 'unknown[]' and model properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_28\n\nLANGUAGE: typespec\nCODE:\n```\n@minItems(value: valueof integer)\n```\n\n----------------------------------------\n\nTITLE: Declaring OperationExample Model for Example Configuration (Typespec)\nDESCRIPTION: OperationExample serves as a configuration model that allows specifying example request (parameters) and response (returnType) payloads for operations. Both fields are optional and of unknown type, supporting flexible example provisioning in TypeSpec documentation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\nmodel OperationExample\n\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Collection of Bytes (Null) Response - JSON\nDESCRIPTION: For GET /type/property/nullable/collections/bytes/null, this snippet shows a required string and a nullable bytes collection set to null, conveying that the entire array property can be omitted or nullified in API output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_238\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": null }\n```\n\n----------------------------------------\n\nTITLE: Providing Unknown-Type Dictionary Payloads - JSON\nDESCRIPTION: Samples a dictionary allowing values of any type: integer, string, or null. This is suitable for endpoints permitting unknown or polymorphic value types, supporting high flexibility.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_159\n\nLANGUAGE: json\nCODE:\n```\n{ \"k1\": 1, \"k2\": \"hello\", \"k3\": null }\n```\n\n----------------------------------------\n\nTITLE: Defining Interpolatable Environment Variables in TypeSpec Config - YAML - yaml\nDESCRIPTION: Shows a tspconfig.yaml fragment specifying a named environment variable with a default value referencing the current working directory, and configuring output to use that environment variable. Demonstrates using the 'environment-variables' property and 'env.' variable expression for dynamic value resolution. Only the TypeSpec compiler and standard environment variable support are required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment-variables:\n  BASE_DIR:\n    default: \"{cwd}\"\n\noutput-dir: {env.BASE_DIR}/output\n\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Options Interface in TypeScript (Continuation Token)\nDESCRIPTION: This TypeScript interface `LinkOptions` defines the optional parameters for the `link` operation (continuation token pattern). In this specific generated example, it simply extends the base `OperationOptions` and doesn't add specific parameters beyond the standard ones.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts interface LinkOptions\nexport interface LinkOptions extends OperationOptions {}\n```\n```\n\n----------------------------------------\n\nTITLE: Introducing Versioning to a Service Namespace in TypeSpec\nDESCRIPTION: This snippet demonstrates how to enable versioning for a TypeSpec service namespace. It uses the `@versioned` decorator, referencing an enum (`Versions`) that defines the supported API versions (starting with `v1`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/guide.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@service(#{ title: \"Contoso Widget Manager\" })\n@versioned(Contoso.WidgetManager.Versions)\nnamespace Contoso.WidgetManager;\n\nenum Versions {\n  v1,\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Content-Types for Multipart Parts in TypeSpec\nDESCRIPTION: This TypeSpec snippet shows how to customize the `Content-Type` for individual parts within a `multipart/form-data` request body. It defines a `Png` model extending `File` and uses the `@header contentType` decorator to specify `image/png` for the `avatar` part. For the `data` part, it uses an anonymous model within `HttpPart` to define a `name` property and explicitly set `@header contentType: \"application/xml\"`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/multipart.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp title=main.tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/openapi3\\\"]}\"\nimport \"@typespec/http\";\n\nusing Http;\n\nmodel Png extends File {\n  @header contentType: \"image/png\";\n}\nop create(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: {\n    avatar: HttpPart<Png>;\n    data: HttpPart<{\n      name: string;\n      @header contentType: \"application/xml\";\n    }>;\n  },\n): void;\n```\n```\n\n----------------------------------------\n\nTITLE: XML Representation of Model with Normalized Namespace\nDESCRIPTION: This XML snippet shows the resulting structure for the `Book` model defined using the normalized namespace approach. The output is identical to the inline case, with the root element `<smp:Book>` including the namespace declaration `xmlns:smp=\"http://example.com/schema\"`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_43\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<smp:Book xmlns:smp=\"http://example.com/schema\">\n  <id>0</id>\n  <title>string</title>\n  <author>string</author>\n</smp:Book>\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Client Emitter in tspconfig.yaml\nDESCRIPTION: This YAML configuration snippet specifies settings for the JavaScript client emitter (`@typespec/http-client-js`) within the `tspconfig.yaml` file. It defines the emitter to be used (`emit`), the output directory for the generated client (`emitter-output-dir`), and package metadata (`packageDetails`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-js\"\noptions:\n  \"@typespec/http-client-js\":\n    emitter-output-dir: \"{project-root}/clients/javascript\"\n    packageDetails:\n      name: \"your_package_name\"\n      version: 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Emit Decorated Models with Recursive Traversal - TypeSpec Compiler - TypeScript\nDESCRIPTION: Shows a pattern to emit all models decorated with '@emitThis', including referenced models. Utilizes a decorator definition which stores a list of decorated models, and a custom $onEmit that emits each and their transitive dependencies by recursively traversing properties. Depends on '@typespec/compiler' types and assumes StateKeys helper provides access to relevant library state keys.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitters-basics.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DecoratorContext, Model } from \"@typespec/compiler\";\nimport { StateKeys } from \"./lib.js\";\n\n// Decorator Setup Code\n\n// @emitThis decorator\nexport function $emitThis(context: DecoratorContext, target: Model) {\n  context.program.stateSet(StateKeys.emitThis).add(target);\n}\n\nexport async function $onEmit(context: EmitContext) {\n  for (const model of program.stateSet(emitThisKey)) {\n    emitModel(model);\n  }\n}\n\nfunction emitModel(model: Model) {\n  // emit this model\n  for (const prop of model.properties.values()) {\n    // recursively emit models referenced by the parent model\n    emitModel(prop.type);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Testing Conditional Request Header: If-Modified-Since\nDESCRIPTION: Defines a HEAD endpoint to test the handling of the `If-Modified-Since` conditional request header. The test expects this specific header to be present with the value 'Fri, 26 Aug 2022 14:38:00 GMT'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_115\n\nLANGUAGE: http\nCODE:\n```\nhead /special-headers/conditional-request/if-modified-since\n```\n\n----------------------------------------\n\nTITLE: Integrating Generated Router with Express.js Middleware\nDESCRIPTION: Demonstrates using the generated router with the Express.js framework. If the `express: true` emitter option was enabled during code generation, the router object will have an `expressMiddleware` property which can be used directly with `app.use()`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-js/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\n\nconst app = express();\n\napp.use(router.expressMiddleware);\n\napp.listen(8080, () => {\n  console.log(\"Server listening on http://localhost:8080\");\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/http-client-java for a Project (Bash)\nDESCRIPTION: This command uses npm to install the `@typespec/http-client-java` package as a direct dependency in the current TypeSpec project (spec). This is the standard installation method when using the library directly within a specification project. Assumes npm and Node.js are installed and available in the environment.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-java/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-client-java\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for GET /type/model/inheritance/recursive\nDESCRIPTION: This JSON is the expected response body for a GET request to `/type/model/inheritance/recursive`. It illustrates a model with a recursive structure, where the 'extension' property contains an array of the same model type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_174\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": 0,\n  \"extension\": [\n    {\n      \"level\": 1,\n      \"extension\": [\n        {\n          \"level\": 2\n        }\n      ]\n    },\n    {\n      \"level\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a RESTful Operation with Body and Headers in Typespec (TSP)\nDESCRIPTION: Defines a service namespace with a Widget model, including fields for 'id', 'name', optional 'age', and a header 'foo'. Declares a POST operation 'create' that takes a Widget as root body and returns nothing. Dependencies include the Typespec compiler and appropriate generator plugins. The operation expects a Widget model as request body, mapping 'foo' as a header and other fields in the body. Outputs a TypeScript client after generation, subject to correct Typespec schema and decorator usage.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/with_body_root.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n\nmodel Widget {\n  id: string;\n  name: string;\n  age?: string;\n  @header foo?: string;\n}\n\n@post op create(@bodyRoot widget: Widget): void;\n```\n\n----------------------------------------\n\nTITLE: Using the @madeOptional Decorator in TypeSpec (tsp)\nDESCRIPTION: Shows an example of applying the `@madeOptional` decorator to the `nickname` property within the `Foo` model. It specifies that the `nickname` property became optional starting from `Versions.v2`. Note the use of `?` to syntactically mark the property as optional.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Foo {\n  name: string;\n\n  @madeOptional(Versions.v2)\n  nickname?: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Transport Discriminator Serialization for WidgetData in TypeScript\nDESCRIPTION: Defines a TypeScript function to serialize 'WidgetData' based on its discriminator, delegating to specific variant transformation functions for 'kind0' and 'kind1'. It falls back to a warning and returns the input as-is if the kind is unrecognized. Prerequisites include well-typed input and properly implemented transformation functions for each variant; this function ensures robust serialization paths for union types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/discriminated_union_spread.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonWidgetDataToTransportDiscriminator(input_?: WidgetData): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  const discriminatorValue = input_.kind;\n  if (discriminatorValue === \"kind0\") {\n    return jsonWidgetData0ToTransportTransform(input_ as any)!;\n  }\n\n  if (discriminatorValue === \"kind1\") {\n    return jsonWidgetData1ToTransportTransform(input_ as any)!;\n  }\n  console.warn(`Received unknown kind: ` + discriminatorValue);\n  return input_ as any;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Decorator in JavaScript\nDESCRIPTION: Shows the JavaScript equivalent of the `$logType` decorator implementation. The function signature includes `context`, `target`, and `name`. It performs the same action of logging the target's kind and the provided name, demonstrating implementation without explicit TypeScript types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// model.js\nexport function $logType(context, target, name) {\n  console.log(name + \": \" + target.kind);\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Union Response - JSON\nDESCRIPTION: This snippet presents the structure for GET /type/property/additionalProperties/spreadRecordUnion responses, where the model includes primitive and union-compatible properties. It demonstrates how seamlessly spread union types are mapped together in a flat object payload.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_229\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"flag\\\": true, \\\"prop1\\\": \\\"abc\\\", \\\"prop2\\\": 43.125 }\n```\n\n----------------------------------------\n\nTITLE: Extended TypeSpec Emitter Configuration with Options - YAML\nDESCRIPTION: Demonstrates how to extend the TypeSpec YAML configuration to include emitter-specific options for the @typespec/http-client-csharp emitter. Options such as output directory or code generation details can be set here. Requires knowledge of the emitter's available options and should be placed in the project config file.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-csharp/readme.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-csharp\"\noptions:\n  \"@typespec/http-client-csharp\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Updating a Resource - TypeSpec - typespec\nDESCRIPTION: Specifies an update operation accepting updated property values via a ResourceCreateOrUpdateModel and returning the modified Resource or Error. Enables REST-style PATCH or PUT functionality for a resource instance.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_44\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceOperations.update(properties: TypeSpec.Rest.Resource.ResourceCreateOrUpdateModel<Resource>): Resource | Error\n```\n\n----------------------------------------\n\nTITLE: Extracting Segment from Model using segmentOf in TypeSpec (Typespec)\nDESCRIPTION: This decorator returns the URL segment of a target model if it uses both @segment and @key decorators. Applied to operations, with the model specified as the argument. Useful for dynamic segment extraction in REST schemas.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.segmentOf(type: Model)\n```\n\n----------------------------------------\n\nTITLE: Declaring the @useDependency Decorator Syntax in TypeSpec\nDESCRIPTION: This snippet shows the syntax for the `@useDependency` decorator. It's used on a `Namespace` or `EnumMember` to declare dependencies on specific versions of other versioned TypeSpec libraries. It accepts one or more `EnumMember` arguments representing the dependent library versions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Versioning.useDependency(...versionRecords: EnumMember[])\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Error Response for In-Range Status Code Test\nDESCRIPTION: Specifies the expected JSON error response body for a GET request to `/response/status-code-range/error-response-status-code-in-range`. This test case expects a 494 status code and verifies that the response deserializes to a custom `ErrorInRange` model, distinct from the default error model, containing `code` and `message` fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_82\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"request-header-too-large\",\n  \"message\": \"Request header too large\"\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Null Nullable String Properties - JSON\nDESCRIPTION: A PATCH request payload explicitly setting a string property to null. Ensures that nullability and required/optional distinctions are maintained by both client and server, suitable for standard API conformance checks.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_260\n\nLANGUAGE: json\nCODE:\n```\n{ \"requiredProperty\": \"foo\", \"nullableProperty\": null }\n```\n\n----------------------------------------\n\nTITLE: Marking a Namespace as a Service in TypeSpec\nDESCRIPTION: This snippet demonstrates the basic usage of the `@service` decorator to designate the `PetStore` namespace as a service definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_60\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@service\nnamespace PetStore;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Templates Accepting Value Parameters in TypeSpec\nDESCRIPTION: Demonstrates templates with parameters constrained as values using 'valueof', and shows usage with decorators. 'TakesValue' expects types and concrete values for its two parameters, and applies '@doc' with the literal string value. Dependencies: appropriate decorator definitions. Input: type and value; Output: an alias including the type and decorated property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/templates.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\nalias TakesValue<StringType extends string, StringValue extends valueof string> = {\n  @doc(StringValue)\n  property: StringType;\n};\n\nalias M1 = TakesValue<\"a\", \"b\">;\n```\n\n----------------------------------------\n\nTITLE: Using @unwrapped Decorator on String Property in TypeSpec\nDESCRIPTION: This TypeSpec code defines a `BlobName` model where the `content` string property is decorated with `@unwrapped`. This aims to place the string value directly as the text content of the parent element, rather than wrapping it in its own element.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_20\n\nLANGUAGE: tsp\nCODE:\n```\nmodel BlobName {\n  @unwrapped content: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Compiler with npm - Shell\nDESCRIPTION: This snippet demonstrates the installation of the @typespec/compiler package as a development dependency using npm. It requires Node.js and npm to be installed on the system. The command adds the compiler to the project's node_modules directory as a devDependency in package.json. No special parameters are required beyond standard npm usage. This operation is essential for enabling the VS Code extension to use the locally installed TypeSpec language server.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/local-typespec/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @typespec/compiler\n```\n\n----------------------------------------\n\nTITLE: Configuring x-typespec-name Emission in @typespec/openapi3\nDESCRIPTION: Describes the `include-x-typespec-name` configuration option for the `@typespec/openapi3` emitter. This option controls whether the `x-typespec-name` extension is included in the output, allowing values like 'inline-only' or 'never' to customize the behavior from the new default (omitted).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-07-11.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ninclude-x-typespec-name: \"inline-only\" | \"never\"\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for GET /type/model/visibility\nDESCRIPTION: This JSON shows the expected response body for a GET request to `/type/model/visibility`. It demonstrates receiving a model containing only read-only properties, such as 'readProp'. The request might include query parameters (like `?queryProp=123`), but they don't affect the response body structure shown.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_184\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"readProp\": \"abc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum Compiler Version in Template Config (JSON)\nDESCRIPTION: Shows how to define the `compilerVersion` property within a template's JSON configuration. This sets the minimum required TypeSpec compiler version needed for the template, using semantic versioning.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/writing-scaffolding-template.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerVersion\": \"0.51.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Extension Resource - TypeSpec - typespec\nDESCRIPTION: Describes the 'create' operation within ExtensionResourceCreate, providing logic for instantiating a new extension resource by accepting a ResourceCreateModel<Resource>. Returns either an Extension instance, ResourceCreatedResponse<Resource>, or Error, following standard REST patterns. Requires access to corresponding TypeSpec models for Extension, Resource, Error, and resource creation/result types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceCreate.create(resource: TypeSpec.Rest.Resource.ResourceCreateModel<Resource>): Extension | TypeSpec.Rest.Resource.ResourceCreatedResponse<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Providing Model With Wrong Extensible Enum Discriminator - JSON\nDESCRIPTION: Samples a model containing an unexpected discriminator value. This verifies the handling of erroneous or unknown types within a polymorphic system, relevant to robust error handling scenarios.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_162\n\nLANGUAGE: json\nCODE:\n```\n{ \"weight\": 8, \"kind\": \"wrongKind\" }\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Union with Non-Discriminated Union Request - JSON\nDESCRIPTION: Intended for the PUT endpoint /type/property/additionalProperties/spreadRecordNonDiscriminatedUnion, this JSON demonstrates input structure for union properties. It requires objects for prop1 and prop2 matching defined union subtypes. This ensures union type spreading is respected during data intake.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_224\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"abc\\\",\\n  \\\"prop1\\\": { \\\"kind\\\": \\\"kind0\\\", \\\"fooProp\\\": \\\"abc\\\" },\\n  \\\"prop2\\\": {\\n    \\\"kind\\\": \\\"kind1\\\",\\n    \\\"start\\\": \\\"2021-01-01T00:00:00Z\\\",\\n    \\\"end\\\": \\\"2021-01-02T00:00:00Z\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring OAuth 2.0 Authentication Flow in TypeSpec - Python\nDESCRIPTION: This snippet demonstrates how to declare the use of OAuth 2.0 authentication within a TypeSpec file using the @useAuth decorator. It specifies the flow type, endpoints for authorization and token exchange, and required OAuth scopes. This declaration allows generated clients to recognize and expect OAuth 2.0 authentication, ensuring secure request handling. Requires TypeSpec tooling and proper endpoint configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/docs/samples/client/python/oauth/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@useAuth(OAuth2Auth<[\n    {\n      type: OAuth2FlowType.clientCredentials,\n      authorizationUrl: \"https://auth.example.com/authorize\",\n      tokenUrl: \"https://auth.example.com/token\",\n      scopes: [\"read\", \"write\"],\n    }\n  ]>\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Visibility Filters Using TypeSpec Model (typespec, TypeSpec)\nDESCRIPTION: Defines the `VisibilityFilter` model which specifies filters for including certain properties based on their visibility. Used in conjunction with `withVisibilityFilter` decorator, taking optional `any`, `all`, or `none` arrays of EnumMember to build property filters for models. Inputs are sets of EnumMembers indicating required, optional, or excluded visibilities.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_24\n\nLANGUAGE: typespec\nCODE:\n```\nmodel VisibilityFilter\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenAPI Extensions with @tagMetadata Decorator - TSP\nDESCRIPTION: Demonstrates the use of @tagMetadata decorator for supplying OpenAPI tag extensions, including custom attributes. Inputs: a TypeSpec decorator expression with object containing description and x-custom field. Outputs: OpenAPI tag with extension properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_39\n\nLANGUAGE: tsp\nCODE:\n```\n@tagMetadata(\"my-tag\", #{\n  description: \"My tag\",\n  `x-custom`: \"custom value\",\n})\n```\n\n----------------------------------------\n\nTITLE: Serializing Foo Model to Transport Format - TypeScript - TypeScript\nDESCRIPTION: Implements the serializer function jsonFooToTransportTransform, converting a Foo instance to a transportable representation by serializing the createdOn Date to a string. This version uses dateRfc3339Serializer for the conversion when no custom encoding is specified; dependencies include the Foo interface and dateRfc3339Serializer. Used to prepare data for transfer over APIs, outputting an object with an RFC 3339 timestamp.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/model_date_time.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonFooToTransportTransform(item: Foo): any {\n  return {\n    created_on: dateRfc3339Serializer(item.createdOn),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Python Client Emitter in YAML - Basic Emit Key\nDESCRIPTION: Enables the @typespec/http-client-python emitter in a TypeSpec project's YAML configuration by adding it to the \"emit\" list. This allows emitting output during compilation without specifying additional options. Requires the emitter package to be installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-python/reference/emitter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-python\"\n```\n\n----------------------------------------\n\nTITLE: Serializing Foo Model Using RFC7231 Date Encoding - TypeScript - TypeScript\nDESCRIPTION: Provides an implementation of jsonFooToTransportTransform for Foo where the createdOn Date is serialized with dateRfc7231Serializer, in accordance with the RFC 7231 format mandated by the TypeSpec annotation. Outputs an object with a created_on property as an RFC 7231 date string. Depends on the Foo interface and the dateRfc7231Serializer utility, and must be used when the TypeSpec field is annotated with @encode('rfc7231').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/model_date_time.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonFooToTransportTransform(item: Foo): any {\n  return {\n    created_on: dateRfc7231Serializer(item.createdOn),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Local TypeSpec Package Directory\nDESCRIPTION: Shows how to import a local directory recognized as a TypeSpec package, leveraging its package configuration (typically tspMain file as entry point). This mechanism supports modular code structuring and package-based development. Inputs: local package directory path; Output: the configured entry TypeSpec file in the directory is loaded and included in the program context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/imports.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"./path/to/local/module\"; // Assuming this path is a TypeSpec package, it will load it using the tspMain file.\n```\n\n----------------------------------------\n\nTITLE: Declaring a Fixed Content-Type Operation in TypeSpec (TSP)\nDESCRIPTION: Defines a service namespace and declares an operation with a single accepted content type via the @header decorator, ensuring that requests must use 'application/json'. Requires TypeSpec tooling for processing service definitions. The operation 'get' takes a header parameter and returns a 32-bit integer.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/constant_as_optional.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n\n@get op get(@header contentType: \"application/json\"): int32;\n```\n\n----------------------------------------\n\nTITLE: Integrating TypeSpec Formatter with Prettier (YAML)\nDESCRIPTION: This YAML configuration snippet, typically placed in `.prettier.yaml` or a similar Prettier config file, integrates the TypeSpec formatter as a Prettier plugin. It registers the `@typespec/prettier-plugin-typespec` plugin and specifies that files ending in `.tsp` should use the 'typespec' parser provided by the plugin.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/formatter.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  - \"./node_modules/@typespec/prettier-plugin-typespec\"\noverrides: [{ \"files\": \"*.tsp\", \"options\": { \"parser\": \"typespec\" } }]\n```\n\n----------------------------------------\n\nTITLE: Deserializing a Nullable Base64 Bytes Property - TypeScript\nDESCRIPTION: Defines a deserializer to convert a JSON object with a nullable base64-encoded property into a ModelWithBytes instance, converting that property to a Uint8Array. Requires 'decodeBase64' utility function and is used in processing responses for GET operations. Input is a raw object; output is a strongly-typed model with its bytes field decoded. Will return null for missing input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/bytes_nullable.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonModelWithBytesToApplicationTransform(input_?: any): ModelWithBytes {\\n  if (!input_) {\\n    return input_ as any;\\n  }\\n  return {\\n    requiredProperty: input_.requiredProperty,\\n    nullableProperty: decodeBase64(input_.nullableProperty)!,\\n  }!;\\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Request Body for Versioning Removed V2 Endpoint (JSON)\nDESCRIPTION: Defines the expected JSON request body for the V2 endpoint ('post /versioning/removed/api-version:{version}/v2') within the 'versioning/removed' scenario, using the latest signature. It includes 'prop', 'enumProp', and 'unionProp'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_318\n\nLANGUAGE: json\nCODE:\n```\n{ \"prop\": \"foo\", \"enumProp\": \"enumMemberV2\", \"unionProp\": \"bar\" }\n```\n\n----------------------------------------\n\nTITLE: Generating Inline Interfaces from Typespec Models - TypeScript\nDESCRIPTION: Implements the Typespec 'Widget' model as a TypeScript interface. The 'Widget' interface contains a 'name' property of type 'string' and a 'subWidget' property defined inline as an object with 'location' (string) and an optional 'age' (number). This snippet demonstrates how the emitter flattens anonymous Typespec types into inline TypeScript object types, maintaining optional and required fields. Assumes a TypeScript environment and is part of a source file, with no third-party dependencies required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/inline-models.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Widget {\n  name: string;\n  subWidget: {\n    location: string;\n    age?: number;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Call for Unix Timestamp Encoded Date Query Parameter (TypeScript)\nDESCRIPTION: This TypeScript function `get` implements the client call for the TypeSpec operation with Unix Timestamp encoding. It serializes the input `Date` object `value` into a Unix timestamp string using `dateUnixTimestampSerializer` before making the GET request to `/default`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/query_date.md#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/api/testClientOperations.ts function get\nexport async function get(\n  client: TestClientContext,\n  value: Date,\n  options?: GetOptions,\n): Promise<void> {\n  const path = parse(\"/default{?value}\").expand({\n    value: dateUnixTimestampSerializer(value),\n  });\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Service Version Declaration in TypeSpec (TSP)\nDESCRIPTION: Demonstrates migrating service versioning from the deprecated `versions` property within `@service` to using the `@OpenAPI.info` decorator alongside `@service`. This is relevant when defining service metadata in TypeSpec as part of API evolution.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=tsp\n- @service({version: \"1.0\"})\n+ @service\n+ @OpenAPI.info(#{version: \"1.0\"})\n```\n```\n\n----------------------------------------\n\nTITLE: Updating @info Decorator Syntax for Nested Objects in TypeSpec\nDESCRIPTION: Illustrates the syntax modification for the `@info` decorator in TypeSpec version 0.66.0 when dealing with nested objects. Both the outer object and any nested object literals (like the `contact` object here) must be prefixed with `#` (`#{...}`) to be correctly interpreted as literal values rather than types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/CHANGELOG.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=\"tsp\"\n-@info({\n+@info(#{ \n  termsOfService: \"http://example.com/terms/\",\n-  contact: {\n+  contact: #{ \n    name: \"API Support\",\n    url: \"http://www.example.com/support\",\n    email: \"support@example.com\"\n  },\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Serializing Model with Encoded Names to XML - XML\nDESCRIPTION: This XML snippet demonstrates encoding of model data when element names need to preserve case or special characters. The 'ModelWithEncodedNamesSrc' root element includes an array of simple models and a 'PossibleColors' list of strings. Input/outputs are XML payloads with these nested structures. There are no dependencies, but names and hierarchical structure are critical.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_69\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithEncodedNamesSrc>\\n  <SimpleModelData>\\n    <name>foo</name>\\n    <age>123</age>\\n  </SimpleModelData>\\n  <PossibleColors>\\n    <string>red</string>\\n    <string>green</string>\\n    <string>blue</string>\\n  </PossibleColors>\\n</ModelWithEncodedNamesSrc>\n```\n\n----------------------------------------\n\nTITLE: Testing Simple Path Expansion with Primitive (Standard)\nDESCRIPTION: Defines a GET endpoint to test simple path parameter expansion (explode: false) when the parameter `param` is a primitive string. Given `\"a\"`, the expected path segment becomes `a`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_84\n\nLANGUAGE: http\nCODE:\n```\nget /routes/path/simple/standard/primitive{param}\n```\n\n----------------------------------------\n\nTITLE: Testing Conditional Request Header: If-Match\nDESCRIPTION: Defines a POST endpoint to test the handling of the `If-Match` conditional request header. The test expects this specific header to be present with the value '\"valid\"'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_116\n\nLANGUAGE: http\nCODE:\n```\npost /special-headers/conditional-request/if-match\n```\n\n----------------------------------------\n\nTITLE: Testing Query Continuation Expansion with Record (Explode)\nDESCRIPTION: Defines a GET endpoint to test query continuation expansion (`{&param*}`) with explode: true for a record parameter `param`. Given `{a: 1, b: 2}` and a fixed parameter `fixed=true`, the expected query string is `?fixed=true&a=1&b=2`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_91\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/query-continuation/explode/record?fixed=true{&param*}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Client Emitter Dependencies in package.json\nDESCRIPTION: This JSON snippet shows an example of how to declare dependencies for various TypeSpec HTTP client emitters (C#, Java, Python, JavaScript) within the `dependencies` section of a `package.json` file. Specifying these dependencies allows `npm` or `tsp install` to fetch the required emitter packages.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n  \"dependencies\": {\n    \"@typespec/http-client-csharp\": \"^0.1.9-alpha.20250113.2\",\n    \"@typespec/http-client-java\": \"^0.1.9\",\n    \"@typespec/http-client-python\": \"^0.6.6\",\n    \"@typespec/http-client-js\": \"^0.38.1\",\n  }\n```\n\n----------------------------------------\n\nTITLE: Declaring the @returnTypeChangedFrom Decorator Syntax in TypeSpec\nDESCRIPTION: This snippet shows the syntax for the `@returnTypeChangedFrom` decorator, specifically used for `Operation` targets. It marks when the return type of an operation changed, requiring the `version` (`EnumMember`) and the `oldType`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Versioning.returnTypeChangedFrom(version: EnumMember, oldType: unknown)\n```\n\n----------------------------------------\n\nTITLE: Encode Duration Property with Default ISO8601 Format - JSON\nDESCRIPTION: Demonstrates encoding and decoding a duration property as a string in ISO8601 format within a JSON request/response body. This pattern requires that clients and servers support recognizing ISO8601 duration strings. The key parameter is \\\"value\\\", expected to be a string like \\\"P40D\\\". It is critical that the library correctly identifies and preserves this format when serializing/deserializing between wire and object representations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": \\\"P40D\\\"\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": \\\"P40D\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Service Title using @service Decorator in TypeSpec\nDESCRIPTION: This snippet shows how to use the `@service` decorator with options to set the title of the service defined by the `PetStore` namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_61\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@service(#{title: \"Pet store\"})\nnamespace PetStore;\n```\n```\n\n----------------------------------------\n\nTITLE: Converting OpenAPI3 Component Parameter with Existing Schema (YAML/TSP)\nDESCRIPTION: Illustrates converting an OpenAPI3 component parameter (`Widget.id`) when the corresponding schema (`Widget`) already exists under `#/components/schemas`. The `id` parameter, specified as `in: path`, is added as a field to the existing `Widget` model in TypeSpec, decorated with the `@path` decorator.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/cli.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  parameters:\n    Widget.id:\n      name: id\n      in: path\n      required: true\n      schema:\n        type: string\n  schemas:\n    Widget:\n      type: object\n      required:\n        - id\n        - weight\n        - color\n      properties:\n        id:\n          type: string\n        weight:\n          type: integer\n          format: int32\n        color:\n          type: string\n          enum:\n            - red\n            - blue\n```\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Widget {\n  @path id: string;\n  weight: int32;\n  color: \"red\" | \"blue\";\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec Projects with HTTP Client JS Emitter via CLI - Bash\nDESCRIPTION: Demonstrates the command-line usage for compiling a TypeSpec project with the @typespec/http-client-js emitter enabled. Requires that 'tsp' is installed and invoked from the project's root directory. The '--emit' flag specifies the emitter to use, and '.' designates the current directory as the source. Expected output is generated JavaScript client code in the configured output directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-js/reference/emitter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/http-client-js\n```\n\n----------------------------------------\n\nTITLE: Mapping PagedIterable Elements with a Function in Java\nDESCRIPTION: Provides a static generic method that creates a mapped version of an existing PagedIterable by applying a provided Function to transform each element. Requires the original PagedIterable and a mapper function as parameters. The output is a new PagedIterable where all elements reflect the transformation. Relies on the PagedIterableImpl defined below. Input is an existing PagedIterable and a mapping Function; output is a mapped PagedIterable.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-mgmt/src/main/resources/ResourceManagerUtils_PagedIterableImpl.txt#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nstatic <T, S> PagedIterable<S> mapPage(PagedIterable<T> pageIterable, Function<T, S> mapper) {\n    return new PagedIterableImpl<>(pageIterable, mapper);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec GET Operation with Optional Parameters\nDESCRIPTION: This TypeSpec code defines a service namespace `Test` containing a GET operation `getWithParams`. The operation accepts optional query parameters `name` (string) and `age` (int32) and is expected to return an integer (`int32`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/only_optional.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\n\n@get op getWithParams(name?: string, age?: int32): int32;\n```\n```\n\n----------------------------------------\n\nTITLE: Templated Documentation for Generic Models with @doc in TypeSpec\nDESCRIPTION: This snippet demonstrates the use of a templated @doc decorator, where documentation strings interpolate generic type details. The source object can be used to parameterize the doc string (e.g., referencing the name of a template argument). Output includes the dynamic generation of doc text based on type parameters. Dependencies involve TypeSpec decorators and generic model syntax. Useful for reusable and templated documentation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/documentation.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@doc(\"Templated {name}\", Type)\nmodel Template<Type extends {}>  {\n}\n\n// The documentation will read \"Templated A\"\nmodel A is Template<A>\n```\n\n----------------------------------------\n\nTITLE: Correct Indentation for Triple-Quoted String in TypeSpec\nDESCRIPTION: This snippet shows the correct way to indent a triple-quoted string in TypeSpec. All lines within the string ('  one', '    two') are indented at least to the same level as the closing `\"\"\"`. This results in the string value `\"one\\n  two\\n\"` after the common leading whitespace (relative to the closing `\"\"\"`) is removed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/diags/triple-quote-indent.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nconst a = \"\"\"\n  one\n    two\n  \"\"\"\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Class in TypeScript (Next Link)\nDESCRIPTION: This TypeScript code defines the `TestClient` class for the next link pattern example. It holds the client context (`#context`) and exposes the `link` method, which delegates the operation logic to the corresponding `link` function handling next link paging.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/testClient.ts class TestClient\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  link(filter: string, options?: LinkOptions) {\n    return link(this.#context, filter, options);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining DateTime Encodings in a TypeSpec Model\nDESCRIPTION: Illustrates the default encoding behavior for `utcDateTime` and `offsetDateTime` (rfc7231 for headers, rfc3339 otherwise) and how to explicitly set encodings like rfc3339, rfc7231, or unixTimestamp (with underlying type specification like int32) using the `@encode` decorator within a TypeSpec model. Emitters are responsible for applying these encoding rules.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/encoding.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```tsp\nmodel User {\n  // Headers\n  @header(\"Created-At\") createdAtHeader: utcDateTime;\n\n  @header(\"Created-At-Rfc3339\")\n  @encode(DateTimeKnownEncoding.rfc3339)\n  createdAtHeaderRfc3339Encoding: utcDateTime;\n\n  // In Json payload\n  createdAt: utcDateTime; // rfc3339\n\n  updatedAt: offsetDateTime; // rfc3339\n\n  @encode(DateTimeKnownEncoding.rfc7231)\n  createdAtPretty: utcDateTime; // rfc7231\n\n  @encode(DateTimeKnownEncoding.rfc7231)\n  updatedAtPretty: offsetDateTime; // rfc7231\n\n  @encode(DateTimeKnownEncoding.unixTimestamp, int32)\n  createdAtUnix: utcDateTime; // unixTime in seconds\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining URL Path Segments in TypeSpec (Typespec)\nDESCRIPTION: This decorator specifies the segment value to insert before a path parameter in operation routes. Used on models, model properties, or operations, with the segment string provided as an argument. Key for constructing clean and predictable REST URL structures.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.segment(name: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Extending a Scalar Type in TypeSpec - TypeSpec\nDESCRIPTION: Shows how to create a new scalar type that extends an existing one in TypeSpec using the 'extends' keyword. The example defines a scalar 'Password' that inherits from the 'string' scalar type. This allows for type-safe extensions and encapsulation of additional semantics for strongly-typed values. No runtime impact or extra dependencies are present.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/scalars.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nscalar Password extends string;\n```\n\n----------------------------------------\n\nTITLE: Defining Route with URI Template (RFC-6570) - TypeSpec HTTP - tsp\nDESCRIPTION: Demonstrates the usage of the @route decorator in TypeSpec to define an HTTP route using a URI template, leveraging support for RFC-6570. The operation 'download' takes a 'path' parameter and maps it into the route using the template syntax. Dependencies: @typespec/http package. Input is a string parameter and expected output is an HTTP endpoint definition suitable for code generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-08-06.md#_snippet_7\n\nLANGUAGE: tsp\nCODE:\n```\n@route(\"files{+path}\") download(path: string): void;\n\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart HTTP Operations with Typed Parts - TypeSpec Language\nDESCRIPTION: This TypeSpec code defines an HTTP operation that accepts a multipart body, using the 'HttpPart<Type, Options>' pattern for strongly typed multipart request fields. The 'upload' operation includes two body parts: a string part 'name' and an array of byte parts 'avatar', each using HttpPart typing. This enables robust multipart input validation in HTTP APIs. Dependencies: Types from '@typespec/http'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_13\n\nLANGUAGE: tsp\nCODE:\n```\nop upload(\n  @header contentType: \"multipart/mixed\",\n  @multipartBody body: {\n    name: HttpPart<string>;\n    avatar: HttpPart<bytes>[];\n  },\n): void;\n```\n\n----------------------------------------\n\nTITLE: Applying Bearer Authentication in TypeSpec\nDESCRIPTION: Uses the `@useAuth` decorator with the predefined `BearerAuth` security definition to specify that the decorated scope requires Bearer Token Authentication (typically used with OAuth2 or JWTs).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_19\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@useAuth(BearerAuth)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Composite Client with Namespaced Subclients in TypeScript\nDESCRIPTION: Implements a TypeScript class representing the root client ('FooClient') with two member clients ('barClient' and 'bazClient'), each corresponding to a sub-namespace. The constructor initializes context and subclients based on provided endpoint and options, and depends on associated context creation and client classes. Parameters include 'endpoint' (service URL) and optional configuration. Input is the endpoint and options; output is a ready client with accessible subclients. Constraints: assumes required context and subclient classes are available.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/wrapping_namespace.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class FooClient {\n  #context: FooClientContext;\n  barClient: BarClient;\n  bazClient: BazClient;\n  constructor(endpoint: string, options?: FooClientOptions) {\n    this.#context = createFooClientContext(endpoint, options);\n    this.barClient = new BarClient(endpoint, options);\n    this.bazClient = new BazClient(endpoint, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Operation Streaming Mode using @stream Decorator in TypeSpec\nDESCRIPTION: Defines the `@TypeSpec.Protobuf.stream` decorator used on an `Operation` to specify its streaming behavior (e.g., no streaming, client streaming, server streaming, bidirectional streaming). It requires a `mode` parameter of type `TypeSpec.Protobuf.StreamMode` (defined elsewhere) to indicate the desired streaming configuration for the corresponding RPC method.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/decorators.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Protobuf.stream(mode: TypeSpec.Protobuf.StreamMode)\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Different Dependencies for Multiple Service Versions in TypeSpec\nDESCRIPTION: This snippet demonstrates how different versions of a service can depend on different versions of a library. Version `v1` depends on `Azure.Core.v1_0_Preview_1`, while the newly added `v2` depends on `Azure.Core.v1_0_Preview_2`, specified using `@useDependency` on each version enum member.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/guide.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@service(#{ title: \"Contoso Widget Manager\" })\n@versioned(Contoso.WidgetManager.Versions)\nnamespace Contoso.WidgetManager;\n\nenum Versions {\n  @useDependency(Azure.Core.v1_0_Preview_1)\n  v1,\n\n  @useDependency(Azure.Core.v1_0_Preview_2)\n  v2,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Collection Operation Parameters - TypeSpec REST - typespec\nDESCRIPTION: Defines a parameterized model TypeSpec.Rest.Resource.ResourceCollectionParameters<Resource> to encapsulate the operation parameters required for resource collection endpoints. Used as input for collection APIs, it ensures type safety for parameterization. No defined properties within the type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/data-types.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Rest.Resource.ResourceCollectionParameters<Resource>\n```\n\n----------------------------------------\n\nTITLE: Example: Using Offset and Page Size Properties in Paginated Model in TypeSpec\nDESCRIPTION: Shows a model with @pageItems, where the consuming operation uses @offset and @pageSize decorators in its parameters, suitable for implementing skip/take pagination patterns. Designed for APIs needing explicit control over result set windowing.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_39\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Page<T> {\n  @pageItems items: T[];\n}\n@list op listPets(@offset skip: int32, @pageSize pageSize: int8): Page<Pet>;\n```\n\n----------------------------------------\n\nTITLE: Defining the NoAuth Authentication Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.NoAuth` model. This signifies that an API or specific operation does not require any authentication. It sets the `type` property to `TypeSpec.Http.AuthType.noAuth` and can be used to override inherited authentication settings.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_25\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.NoAuth\n```\n\n----------------------------------------\n\nTITLE: Using @sharedRoute decorator for route sharing in TypeSpec (TypeSpec)\nDESCRIPTION: This snippet illustrates the new best practice for marking operations as sharing the same route in TypeSpec, using the dedicated @sharedRoute decorator combined with @route. Requires the TypeSpec compiler with @sharedRoute decorator support. Both doIntStuff and doStringStuff operations are registered under the same path (\"/doStuff\"), and sharing is clearly signaled by the standalone decorator.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-05-10.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@sharedRoute\n@route(\"/doStuff\")\nop doIntStuff(input: int32): int32;\n\n@sharedRoute\n@route(\"/doStuff\")\nop doStringStuff(input: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining a PATCH Operation in TypeSpec\nDESCRIPTION: Uses the `@patch` decorator to define an operation named `patch` that corresponds to an HTTP PATCH request. The operation currently takes no parameters and returns `void`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_3\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@patch op patch(): void\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Transformation Model in TypeSpec (Typespec)\nDESCRIPTION: Implements the Query model transformation, recursively selecting only those properties from input model T that have Lifecycle.Query visibility. Appropriate for building models used in HTTP GET/HEAD requests. NameTemplate allows for optional renaming of the new model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Query<T, NameTemplate>\n\n```\n\n----------------------------------------\n\nTITLE: Defining File Parts in Multipart Operations - TypeSpec Language\nDESCRIPTION: Demonstrates multipart request and response definitions where individual parts are interpreted as file bodies using HttpPart<File> or HttpPart<{ @bodyRoot file: File }>. Suitable for scenarios such as uploading files with HTML forms or returning files in multipart responses. Examples include both form-data and mixed multipart handling. All models and decorators assume use of TypeSpec.Http.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n// The type of the form-data part is _exactly_ a File, so the part has a file body.\nop multipartUpload(\n  @multipartBody fields: {\n    file: HttpPart<File>;\n  },\n): void;\n\n// The type of the form-data part has an explicit body that is _exactly_ a File, so the part has a file body.\nop multipartUpload(\n  @multipartBody fields: {\n    file: HttpPart<{\n      @bodyRoot file: File;\n    }>;\n  },\n): void;\n\n// The type of the mixed part is _exactly_ a File, so the part has a file body.\nop multipartMixedDownload(): {\n  @multipartBody data: [HttpPart<File>];\n};\n\n// The type of the mixed part has an explicit body that is _exactly_ a File, so the part has a file body.\nop multipartMixedDownload(): {\n  @multipartBody data: [\n    HttpPart<{\n      @bodyRoot file: File;\n    }>\n  ];\n};\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Enum Members with `@visibility` in TypeSpec\nDESCRIPTION: Shows the recommended way to use the `@visibility` decorator in TypeSpec, replacing deprecated string literals with `Lifecycle` enum members (e.g., `Lifecycle.Create`, `Lifecycle.Read`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_20\n\nLANGUAGE: tsp\nCODE:\n```\n@visibility(Lifecycle.Create, Lifecycle.Read)\nexample: string;\n```\n\n----------------------------------------\n\nTITLE: Replacing OkResponse<T> with Model Type in TypeSpec\nDESCRIPTION: Shows the simplified replacement for the old `OkResponse<Pet>`. Since 200 is the default status code for non-empty model bodies, returning the model type `Pet` directly is now sufficient and preferred.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nop get(id: string): Pet;\n```\n```\n\n----------------------------------------\n\nTITLE: Converting Detailed OpenAPI3 Component Schema to TypeSpec Model (YAML/TSP)\nDESCRIPTION: Provides a detailed example of converting an OpenAPI3 schema named `Product` defined under `components/schemas` into a TypeSpec `model`. The properties `id`, `name`, and `price` with their respective types (`string`, `string`, `number` with `float` format) are translated directly into TypeSpec model properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/cli.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Product:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        price:\n          type: number\n          format: float\n```\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Product {\n  id: string;\n  name: string;\n  price: float;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Root Namespaces in TypeSpec\nDESCRIPTION: Defines two distinct TypeSpec namespaces, `Foo` and `Bar`. `Foo` contains a `FooItem` model and a `get` operation. `Bar` contains a `BarItem` model, a `get` operation, and a `create` operation (using `@post`). This structure is intended to result in the generation of separate clients for each namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/multiple_top_level_clients.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Foo {\n  model FooItem {\n    name: string;\n  }\n\n  op get(): FooItem;\n}\n\nnamespace Bar {\n  model BarItem {\n    title: string;\n  }\n\n  op get(): BarItem;\n  @post op create(foo: BarItem): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Authentication Scheme in Typespec (TSP)\nDESCRIPTION: This snippet defines a service using Typespec with Basic authentication applied via the @useAuth decorator. It creates a namespace for the service and exposes a single GET endpoint at '/valid' which returns a NoContentResponse. Dependencies include the Typespec framework, and the main input parameter is the authentication type rather than endpoint parameters. There are no functional constraints beyond requiring correct usage of authentication decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/basic_auth.md#_snippet_0\n\nLANGUAGE: Typespec\nCODE:\n```\n@service(#{ title: \\\"Test Service\\\" })\\n@useAuth(BasicAuth)\\nnamespace Test;\\n\\n@route(\\\"/valid\\\")\\n@get\\nop valid(): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Define API Operation with Path Parameter Model in TypeSpec\nDESCRIPTION: This TypeSpec code defines a `DemoService` with a `Widgets` interface. The `read` operation uses the GET method on the `/widgets/{id}` route. The required path parameter `id` is defined as a property within the `ReadParams` model, which is then spread (`...`) into the operation's parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/path-parameter-in-model.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\n\nmodel ReadParams {\n  @path\n  id: string;\n}\n\n@route(\"/widgets\")\n@tag(\"Widgets\")\ninterface Widgets {\n  @test @get read(...ReadParams): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Create or Update Resource Operations - TypeSpec\nDESCRIPTION: Shows how to label an operation as a CreateOrUpdate for a resource using the @createsOrUpdatesResource decorator. The operation must target a specific resource model. This ensures generated documentation and code properly reflect upsert behavior.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.createsOrUpdatesResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Property Ordering with 'is' and Spread in TypeSpec\nDESCRIPTION: Demonstrates how TypeSpec determines the order of properties in a model composed using `is` and the spread operator (`...`). Properties inherited via `is` (like `Pet`) come first, followed by properties defined directly in the model (`meow`), then properties from spread (`...HasHome`), and finally subsequent model properties (`furColor`). The resulting order for `Cat` is `name`, `age`, `meow`, `address`, `furColor`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Pet {\n  name: string;\n  age: uint8;\n}\n\nmodel HasHome {\n  address: string;\n}\n\nmodel Cat is Pet {\n  meow: boolean;\n  ...HasHome;\n  furColor: string;\n}\n\n// The resulting property order for Cat is:\n// name, age, meow, address, furColor\n```\n\n----------------------------------------\n\nTITLE: Defining UserService v2 API in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines version `v2` of the `UserService`, building upon v1. It retains the POST and GET operations for `/users/{id}`. The key difference is the updated `UserService.User` model, which now includes an `age` property (of type `int32`) in addition to `id` (read-only), `secret` (create-only), and `name`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/test/output/rest-metadata-emitter/rest-emitter-sample-output.txt#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nservice: UserService\n  title: User service\n  version: v2\n  ops:\n    op: POST /users/{id}\n      request:\n        path id: string\n        body: UserService.User (Create)\n      response: 200\n        body: UserService.User (Read)\n    op: GET /users/{id}\n      request:\n        path id: string\n      response: 200\n        body: UserService.User (Read)\n  models:\n    model: UserService.User\n      id: string (Read only)\n      secret: string (Create only)\n      name: string\n      age: int32\n```\n\n----------------------------------------\n\nTITLE: Deleting Extension Resource - TypeSpec - typespec\nDESCRIPTION: Specifies the delete operation for ExtensionResourceDelete, which deletes an extension resource without additional input. It returns either a ResourceDeletedResponse or Error, following common REST conventions for deletion. Assumes appropriate definition of ResourceDeletedResponse and Error types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceDelete.delete(): TypeSpec.Rest.Resource.ResourceDeletedResponse | Error\n```\n\n----------------------------------------\n\nTITLE: Testing Implicit Path Parameter Definition\nDESCRIPTION: Defines a GET endpoint where the path parameter `param` is defined implicitly within the route template. Given `\"a\"`, the expected path is `/routes/path/template-only/a`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_86\n\nLANGUAGE: http\nCODE:\n```\nget /routes/path/template-only/{param}\n```\n\n----------------------------------------\n\nTITLE: Getting All Optional Bytes Properties - JSON\nDESCRIPTION: Response showing an optional bytes property encoded in base64 and present in the output object. Such structures enable binary payload embedding within standard JSON contracts. Clients and servers must correctly encode/decode base64 values and handle absence/presence of these fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_265\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": \"aGVsbG8sIHdvcmxkIQ==\" }\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Is Unknown Derived Record - JSON\nDESCRIPTION: Illustrates use of record extension with numeric, boolean, and string fields, supporting open polymorphic API contracts without strict typing for all properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_208\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"IsUnknownAdditionalProperties\\\",\\n  \\\"index\\\": 314,\\n  \\\"age\\\": 2.71875,\\n  \\\"prop1\\\": 32,\\n  \\\"prop2\\\": true,\\n  \\\"prop3\\\": \\\"abc\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling HTTP Response Type in TypeSpec Language\nDESCRIPTION: Defines a generic model template for HTTP responses in TypeSpec, parameterized by the status code. The model includes a 'statusCode' property that must match the provided Status parameter. This is intended for use in HTTP API modeling where various response types are needed, supporting status-code-specific response definitions. No external dependencies are required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_37\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.Response<Status>\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Properties Transformation Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@withOptionalProperties` decorator. When applied to a model, it returns a transformed version of the model where all originally required properties have been removed, leaving only the optional ones.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_71\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@withOptionalProperties\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Driven Pagination with Navigation Links (HTTP) in TypeSpec\nDESCRIPTION: Shows server-driven pagination where the server provides explicit links for navigation (next, previous, first, last pages). The return type includes a `links` object containing optional properties decorated with `@nextLink`, `@prevLink`, `@firstLink`, and `@lastLink` to hold the URLs for the respective pages. The client uses these URLs directly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/pagination.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@list op listPets(): {\n  @pageItems pets: Pet[];\n  links: {\n    @nextLink next?: url;\n    @prevLink prev?: url;\n    @firstLink first?: url;\n    @lastLink last?: url;\n  };\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Registering TypeSpec Linter Rules via Entrypoint and Definition\nDESCRIPTION: Shows the two-part process for registering linter rules in a TypeSpec library. First, the `index.ts` file exports a `$linter` variable from a dedicated `linter.js` file. Second, the `linter.ts` file uses `defineLinter` from `@typespec/compiler` to define the linter, listing its rules (e.g., `requiredDocRule`) and optionally defining rule sets (`recommended`) with configurations for enabling, extending, and disabling specific rules using their full IDs (`<libraryName>/<ruleName>`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/linters.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"index.ts\"\nexport { $linter } from \"./linter.js\";\n```\n```\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"linter.ts\"\nimport { defineLinter } from \"@typespec/compiler\";\n// Import the rule defined previously\nimport { requiredDocRule } from \"./rules/required-doc.rule.js\";\n\nexport const $linter = defineLinter({\n  // Include all the rules your linter is defining here.\n  rules: [requiredDocRule],\n\n  // Optionally a linter can provide a set of rulesets\n  ruleSets: {\n    recommended: {\n      // (optional) A ruleset takes a map of rules to explicitly enable\n      enable: { [`@typespec/my-linter/${requiredDocRule.name}`]: true },\n\n      // (optional) A rule set can extend another rule set\n      extends: [\"@typespec/best-practices/recommended\"],\n\n      // (optional) A rule set can disable a rule enabled in a ruleset it extended.\n      disable: {\n        \"`@typespec/best-practices/no-a\": \"This doesn't apply in this ruleset.\",\n      },\n    },\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Using @extension with typeof for JSON Schema Emission - TypeSpec - tsp\nDESCRIPTION: Shows how to preserve previous behavior by explicitly telling @extension to interpret a scalar as a type using 'typeof', making @extension emit a JSON schema rather than a raw scalar value. This is necessary when passing in scalars and the developer wants the previous JSON schema emission, not raw value. Required dependencies: @typespec/json-schema. Key parameter: typeof directive.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-08-06.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n@extension(\"x-example\", typeof \"foo\")\nmodel Foo {}\n\n```\n\n----------------------------------------\n\nTITLE: Encode Numeric Property as Optional UInt32 String - JSON\nDESCRIPTION: Explains encoding an optional uint32 numeric property as a string (e.g., \\\"1\\\") in the payload. The \\\"value\\\" parameter must be handled as a string representing unsigned 32-bit integers, with optional presence in serialization.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": \\\"1\\\"\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": \\\"1\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec Library with Linter using tsp CLI\nDESCRIPTION: This command runs the TypeSpec compiler (`tsp`) on the current directory (`.`) which should be the root of the TypeSpec library. The `--import @typespec/library-linter` flag explicitly includes and enables the linter during compilation. Any linting errors or warnings found according to the linter's rules will be reported as TypeSpec diagnostics in the compiler output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/library-linter/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# At the root of your TypeSpec library.\ntsp compile . --import @typespec/library-linter\n```\n\n----------------------------------------\n\nTITLE: Serializing Model with XML Attributes - XML\nDESCRIPTION: This XML example demonstrates a 'ModelWithAttributes' root element with two attributes ('id1', 'id2') and a boolean child element 'enabled.' The input and output XML structure must preserve both the attribute and element relationships. No specific dependencies required, but the attributes are mandatory for schema compliance.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_66\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithAttributes id1=\\\"123\\\" id2=\\\"foo\\\">\\n  <enabled>true</enabled>\\n</ModelWithAttributes>\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Type_Array_BooleanValue_get Endpoint\nDESCRIPTION: This JSON snippet represents the expected response body for the GET request to the `/type/array/boolean` endpoint. It should return a JSON array containing boolean values `true` and `false`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_124\n\nLANGUAGE: json\nCODE:\n```\n```json\n[true, false]\n```\n```\n\n----------------------------------------\n\nTITLE: Submitting Basic Multipart Form-Data Request - HTTP\nDESCRIPTION: Demonstrates a basic multipart/form-data HTTP POST request including a text and file part for uploading a profile image. Highlights the importance of content-type for file parts (application/octet-stream for generic binaries) and optional content-type on others. Requires HTTP 1.1 compatible client, proper boundary usage, and correctly set Content-Disposition and Content-Type headers. The 'id' is sent as text and 'profileImage' as binary. Server expects RFC7578 compliance for correct parsing; duplicate filenames are not supported.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_52\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /upload HTTP/1.1\\nContent-Length: 428\\nContent-Type: multipart/form-data; boundary=abcde12345\\n\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"id\\\"\\nContent-Type: text/plain\\n\\n123\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"profileImage\\\"; filename=\\\"<any-or-no-name-is-ok>\\\"\\nContent-Type: application/octet-stream;\\n\\n{…file content of .jpg file…}\\n--abcde12345--\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering Mock APIs with TypeSpec in TypeScript\nDESCRIPTION: This snippet imports the necessary utilities from TypeSpec and exports a Scenarios object used as a registry mapping scenario names to their mock API handlers. The passOnSuccess function is used to ensure certain routes must return a 2xx response for success, and mockapi.get defines HTTP route handlers. Required dependencies include @typespec/spec-api and a Runtime supporting TypeScript modules. Parameters include the HTTP path and handler function. The function creates mock API routes returning a fixed response.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/writing-mock-apis.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { passOnSuccess, mockapi } from \"@typespec/spec-api\";\nimport { ScenarioMockApi } from \"@typespec/spec-api\";\n\nexport const Scenarios: Record<string, ScenarioMockApi> = {};\n\nScenarios.Hello_world = passOnSuccess(\n  mockapi.get(\"/hello/world\", () => {\n    return {\n      status: 200,\n      body: {\n        contentType: \"application/json\",\n        rawContent: `\"Hello World!\"`,\n      },\n    };\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Date/Time Type Aliases for Models - TypeScript\nDESCRIPTION: Provides TypeScript type aliases mapping to basic types: string and Date. Custom date/time types (such as MyDate, MyUtcDate, MyIsoDate, MyUnixDate) are all mapped to the Date type, aligning with TypeSpec model specifications. No dependencies except for native TypeScript types. Intended for model definition and ensures consistency with TypeSpec scalars. Does not include runtime serialization logic—just type declarations; use in conjunction with serialization or API layers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/scalars.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type String = string;\nexport type MyDate = Date;\nexport type UtcDateTime = Date;\nexport type MyUtcDate = Date;\nexport type MyIsoDate = Date;\nexport type MyUnixDate = Date;\n```\n\n----------------------------------------\n\nTITLE: Using @useDependency per Version in TypeSpec\nDESCRIPTION: This TypeSpec example demonstrates applying the `@useDependency` decorator to individual `EnumMember`s within a versioning enum (`Version`). This allows specifying different dependency versions (`MyLib.Versions.v1_1`, `MyLib.Versions.v2`) for different versions (`v1`, `v2`, `v3`) of the main service (`MyService1`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_17\n\nLANGUAGE: tsp\nCODE:\n```\n@versioned(Versions)\nnamespace MyService1;\nenum Version {\n  @useDependency(MyLib.Versions.v1_1) // V1 use lib v1_1\n  v1,\n  @useDependency(MyLib.Versions.v1_1) // V2 use lib v1_1\n  v2,\n  @useDependency(MyLib.Versions.v2) // V3 use lib v2\n  v3,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Dependencies via CLI\nDESCRIPTION: This Bash command (`tsp install`) is used to install the TypeSpec emitters and other dependencies defined in the `package.json` file. It should be run after adding or updating dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntsp install\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for GET /type/model/inheritance/not-discriminated/valid\nDESCRIPTION: This JSON shows the expected response body for a GET request to `/type/model/inheritance/not-discriminated/valid`. It represents a simple, non-polymorphic model instance being received from the service.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_172\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"abc\", \"age\": 32, \"smart\": true }\n```\n\n----------------------------------------\n\nTITLE: Generating Non-Stubbed Spector Library using PowerShell\nDESCRIPTION: Executes the `Generate.ps1` script to generate a complete, non-stubbed version of a specific Spector test library (`http/authentication/api-key`). This is a prerequisite step for debugging the corresponding `SpectorTest`, as tests cannot run against stubbed implementations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-csharp/generator/docs/spector.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n./eng/scripts/Generate.ps1 http/authentication/api-key -Stubbed $false\n```\n\n----------------------------------------\n\nTITLE: TypeScript RequestBody Interface for PNG File Upload\nDESCRIPTION: This TypeScript interface maps the RequestBody model from TypeSpec, specifying a single image property of type PngFile. It is used as the argument for functions that perform PNG image upload operations. Inputs should ensure that image objects conform to the PngFile interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RequestBody {\\n  image: PngFile;\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TestClient Context with Basic Auth Pipeline in TypeScript\nDESCRIPTION: This TypeScript function `createTestClientContext` is responsible for setting up the client context for `TestClient`. It accepts the `endpoint`, `BasicCredential`, and optional `TestClientOptions`. It resolves the final endpoint URL by replacing placeholders and then calls `getClient` (presumably a helper function) to create the actual client context, passing the `credential` and specifying the `authSchemes` array to include HTTP Basic Authentication.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/sub_client_override.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport function createTestClientContext(\n  endpoint: string,\n  credential: BasicCredential,\n  options?: TestClientOptions,\n): TestClientContext {\n  const params: Record<string, any> = {\n    endpoint: endpoint,\n  };\n  const resolvedEndpoint = \"{endpoint}\".replace(/{([^}]+)}/g, (_, key) =>\n    key in params\n      ? String(params[key])\n      : (() => {\n          throw new Error(`Missing parameter: ${key}`);\n        })(),\n  );\n  return getClient(resolvedEndpoint, {\n    ...options,\n    credential,\n    authSchemes: [\n      {\n        kind: \"http\",\n        scheme: \"basic\",\n      },\n    ],\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using the @renamedFrom Decorator in TypeSpec Example\nDESCRIPTION: This TypeSpec example demonstrates using the `@renamedFrom` decorator on an operation named `newName`. It specifies that this operation was previously named \"oldName\" and the renaming happened in version `Versions.v2`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_12\n\nLANGUAGE: tsp\nCODE:\n```\n@renamedFrom(Versions.v2, \"oldName\")\nop newName(): void;\n```\n\n----------------------------------------\n\nTITLE: Declaring a Model Referencing External Protobuf Widget - TypeSpec - typespec\nDESCRIPTION: Defines a model that serves as a TypeSpec proxy for an externally defined Protobuf message (e.g., test.Widget). This allows TypeSpec consumers to refer to third-party protobuf types as native TypeSpec constructs while ensuring proper import and reference handling in the emitted Protobuf. Path specifies the .proto file location, and Name is the qualified type. No additional dependencies outside the referenced .proto.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Widget is Extern<\"path/to/test.proto\", \"test.Widget\">;\n```\n\n----------------------------------------\n\nTITLE: Expected XML Request Body for ModelWithUnwrappedArray PUT Endpoint\nDESCRIPTION: Defines the expected XML payload for a PUT request to the `/payload/xml/modelWithUnwrappedArray` endpoint. The request body uses the `ModelWithUnwrappedArray` structure, featuring an unwrapped `colors` array and a wrapped `counts` array.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_78\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithUnwrappedArray>\n  <colors>red</colors>\n  <colors>green</colors>\n  <colors>blue</colors>\n  <counts>\n    <int32>1</int32>\n    <int32>2</int32>\n  </counts>\n</ModelWithUnwrappedArray>\n```\n\n----------------------------------------\n\nTITLE: Getting Default (Missing) Optional Float Literal Properties - JSON\nDESCRIPTION: A minimal JSON response for a missing optional float property. This case is used to verify models do not produce non-null values unless explicitly set.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_286\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Disallowing Additional Properties with Record<never> - TypeSpec\nDESCRIPTION: Defines property 'bar' as Record<never>, preventing any additional properties from being valid. Used as a method to tightly constrain schemas in OpenAPI. Inputs: None. Output: object with no additional properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_24\n\nLANGUAGE: typespec\nCODE:\n```\n  bar: Record<never>;\n```\n\n----------------------------------------\n\nTITLE: Generating Application Deserializer for Foo (Primitive Record)\nDESCRIPTION: Generated TypeScript function `jsonFooToApplicationTransform` that deserializes data from the transport format into a `Foo` object (application format). It handles null/undefined input and transforms the `my_values` property to `myValues` by calling the `jsonRecordInt32ToApplicationTransform` helper function.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/record.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonFooToApplicationTransform\nexport function jsonFooToApplicationTransform(input_?: any): Foo {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    myValues: jsonRecordInt32ToApplicationTransform(input_.my_values),\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Bytes Encoding in TypeSpec Models and Operations\nDESCRIPTION: Demonstrates how `bytes` properties are typically encoded as `base64` in models, how to override this to `base64url` using `@encode`, and how `bytes` are handled as raw binary data (`application/octet-stream`) when used directly as operation bodies or parameters. Note that emitters must respect these `@encode` directives.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/encoding.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```tsp\nmodel Pet {\n  icon: bytes; // Serialize as base64\n  @encode(BytesKnownEncoding.base64url) // Serialize as base64url\n  other: bytes;\n}\n\nop read(): Pet;\n\nop download(): bytes; // Return application/octet-stream\nop upload(@body data: bytes): void; // Accept application/octet-stream\n```\n```\n\n----------------------------------------\n\nTITLE: Reserving Protobuf Field Indices or Names using @reserve Decorator in TypeSpec\nDESCRIPTION: This TypeSpec snippet shows the syntax for the `@TypeSpec.Protobuf.reserve` decorator. It's used within a model (`{}`) to reserve field indices (single `uint32`), index ranges (`[uint32, uint32]`), or field names (`string`). The emitter will error if a field definition collides with a reservation. Multiple reservations can be provided.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Protobuf.reserve(...reservations: valueof string | [uint32, uint32] | uint32[])\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input Body for JsonMergePatch updateOptionalResource\nDESCRIPTION: Specifies the expected JSON input body for the `PATCH /json-merge-patch/update/resource/optional` endpoint. This tests updating an optional resource using `application/merge-patch+json`, demonstrating that `null` values should be serialized to explicitly clear optional fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": null,\n  \"map\": {\n    \"key\": {\n      \"description\": null\n    },\n    \"key2\": null\n  },\n  \"array\": null,\n  \"intValue\": null,\n  \"floatValue\": null,\n  \"innerModel\": null,\n  \"intArray\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Decorator Parameter Types with 'valueof' - TypeSpec Language\nDESCRIPTION: Shows a decorator definition where the argument is constrained by the 'valueof' keyword, demonstrating a shift in marshalling behavior for decorator parameters in TypeSpec. The decorator 'multipleOf' can target either a numeric type or model property and accepts a value of type 'valueof numeric'. This code signals migration steps needed for future marshalling logic in decorator arguments. No dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_7\n\nLANGUAGE: tsp\nCODE:\n```\nextern dec multipleOf(target: numeric | Reflection.ModelProperty, value: valueof numeric);\n```\n\n----------------------------------------\n\nTITLE: Expected XML Response Body for ModelWithText GET Endpoint\nDESCRIPTION: Defines the expected XML response body for a GET request to the `/payload/xml/modelWithText` endpoint. The response represents a `ModelWithText` structure which includes text content directly within the main element and an attribute named `language`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_75\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithText language=\"foo\">\n  This is some text.\n</ModelWithText>\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema Output for Record<never> Disallowing Additional Properties - YAML\nDESCRIPTION: Shows the OpenAPI YAML mapping for Record<never>: additionalProperties contains a 'not: {}' entry, making all extra properties invalid. Inputs: strictly defined TypeSpec object. Output: object with no additional properties accepted.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nbar:\n  type: object\n  additionalProperties:\n    not: {}\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec Project with C# HTTP Client Emitter - Bash\nDESCRIPTION: Invokes the TypeSpec CLI to compile the current project, specifying @typespec/http-client-csharp as the emitter. This command triggers code generation for C# HTTP client libraries based on your TypeSpec input. Requires installation of both the emitter package and TypeSpec CLI tools.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-csharp/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/http-client-csharp\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/http as a Peer Dependency for a Library (Bash)\nDESCRIPTION: This command installs the `@typespec/http` npm package as a peer dependency using the `--save-peer` flag. This approach is used when creating a reusable TypeSpec library that depends on the HTTP bindings, ensuring the consuming project provides the actual `@typespec/http` dependency.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/http\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Server Endpoint in TypeSpec\nDESCRIPTION: Uses the `@server` decorator to define a single base URL `https://example.com` for the API, along with a descriptive string \"Example 1 endpoint\".\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_15\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@server(\"https://example.com\", \"Example 1 endpoint\")\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Creates a scalar type `decimal` for arbitrary-precision decimal numbers, suitable for high-precision numerical computations. It is analogous to `BigDecimal` in certain languages; requires no parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_32\n\nLANGUAGE: typespec\nCODE:\n```\nscalar decimal\n```\n\n----------------------------------------\n\nTITLE: Using the Null Literal Value in TypeSpec\nDESCRIPTION: This snippet demonstrates assigning the `null` literal value to a constant `value` whose type is explicitly declared as a union of `string | null`. This shows how `null` can be used as a value in TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\nconst value: string | null = null;\n```\n\n----------------------------------------\n\nTITLE: Serializing Model with Renamed Arrays to XML - XML\nDESCRIPTION: This snippet shows the structure for models where array fields are renamed in the resulting XML. The root node has a 'Colors' array (multiple occurrences) and a 'Counts' array containing multiple 'int32' children. Input/output XML must include the repeated tag pattern as illustrated. The field names must match exactly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_71\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithRenamedArrays>\\n  <Colors>red</Colors>\\n  <Colors>green</Colors>\\n  <Colors>blue</Colors>\\n  <Counts>\\n    <int32>1</int32>\\n    <int32>2</int32>\\n  </Counts>\\n</ModelWithRenamedArrays>\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Operation with Uint8Array Body in TypeScript API Client\nDESCRIPTION: Implements the `foo` operation client-side in TypeScript, sending a POST request to `/foo` with a binary `profileImage` encoded as base64. Requires dependencies on a client context, HTTP utilities (like `parse` and `encodeUint8Array`), and error handling (`createRestError`). The function accepts `profileImage` as a Uint8Array, encodes it, constructs the HTTP request body properly, and handles the response—invoking an optional callback or throwing an error if the status is not 204. Inputs are the HTTP client, profile image bytes, and optional operation options; output is void on success or throws on error. The function is constrained to binary POSTs to a specific path and expects no content in the successful response.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/nested_property.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function foo(\\n  client: TestClientContext,\\n  profileImage: Uint8Array,\\n  options?: FooOptions,\\n): Promise<void> {\\n  const path = parse(\"/foo\").expand({});\\n  const httpRequestOptions = {\\n    headers: {},\\n    body: {\\n      profileImage: encodeUint8Array(profileImage, \"base64\")!,\\n    },\\n  };\\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Getting Required Only RequiredAndOptional Properties - JSON\nDESCRIPTION: Shows a response where only the required property is present; the optional property is omitted. Used for verifying that optional fields may be completely absent with no issues.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_302\n\nLANGUAGE: json\nCODE:\n```\n{ \"requiredProperty\": 42 }\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Operation Parameters in a TypeScript Interface (TypeScript)\nDESCRIPTION: Declares the 'CreateOptions' interface extending from 'OperationOptions', listing optional fields 'age' and 'foo' to match optional operation parameters and header from the service model. No dependencies beyond OperationOptions. This interface is meant to be passed as the options argument to the create operation, enabling extended request configuration. Inputs are optional strings for 'age' (query/body) and 'foo' (header), and outputs are used by the operation function for HTTP request preparation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/with_body_root.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CreateOptions extends OperationOptions {\n  age?: string;\n  foo?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Type_Array_Int64Value_get Endpoint\nDESCRIPTION: This JSON snippet represents the expected response body for the GET request to the `/type/array/int64` endpoint. It should return a JSON array containing 64-bit integer values, potentially represented in hexadecimal for large values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_134\n\nLANGUAGE: json\nCODE:\n```\n```json\n[0x7fffffffffffffff, -0x7fffffffffffffff]\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Decorator with valueof Constraint - TypeSpec\nDESCRIPTION: This code shows the updated and preferred way to declare an extern decorator in TypeSpec, with the parameter 'name' constrained to valueof string. This pattern is required for decorators handling literal values in marshalling, providing additional type safety. Requires TypeSpec 0.53 or newer.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-06-06.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\nextern dec myDecorator(target: Type, name: valueof string);\n```\n\n----------------------------------------\n\nTITLE: Getting All Optional RequiredAndOptional Properties - JSON\nDESCRIPTION: A JSON response with both optional ('optionalProperty') and required ('requiredProperty') properties set, demonstrating how complete objects are returned. Ensures systems are properly handling mixed required/optional fields in responses and in round-tripping.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_301\n\nLANGUAGE: json\nCODE:\n```\n{ \"optionalProperty\": \"hello\", \"requiredProperty\": 42 }\n```\n\n----------------------------------------\n\nTITLE: Serialization of Nested Model with Custom Property Name - XML\nDESCRIPTION: Displays XML for a model whose referenced property uses a custom element name. Shows how @encodedName impacts the XML tag for nested properties. The output ensures alignment between model and XML structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_31\n\nLANGUAGE: XML\nCODE:\n```\n<Book>\n  <xml-author>\n    <name>string</name>\n  </xml-author>\n</Book>\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/versioning Library using npm\nDESCRIPTION: This command installs the `@typespec/versioning` library using the Node Package Manager (npm). This is a prerequisite for using the versioning features within a TypeSpec project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/versioning\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating Extension Resource - TypeSpec - typespec\nDESCRIPTION: Defines the createOrUpdate operation for the ExtensionResourceCreateOrUpdate interface. It performs creation or update by accepting a ResourceCreateOrUpdateModel<Resource> argument, returning either an Extension, ResourceCreatedResponse<Resource>, or Error. Requires resource models and supports RESTful upsert semantics.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceCreateOrUpdate.createOrUpdate(resource: TypeSpec.Rest.Resource.ResourceCreateOrUpdateModel<Resource>): Extension | TypeSpec.Rest.Resource.ResourceCreatedResponse<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Client Constructor with OAuth2 Credential Support in C#\nDESCRIPTION: This snippet defines a partial C# class 'SampleTypeSpecClient' with a custom constructor that takes an endpoint URI and an AuthenticationTokenProvider credential, configuring an HTTP pipeline with OAuth2 bearer token authentication. It uses the ClientPipelineOptions and the OAuth2BearerTokenAuthenticationPolicy, which currently requires the Azure.Core.Experimental package and can later migrate to System.ClientModel. The constructor sets up all necessary per-call and per-try policies to support delegated OAuth authentication on API requests. Required dependencies are System.ClientModel and Azure.Core.Experimental. Inputs include a service endpoint URI and a credential provider; output is a configured client instance.\nSOURCE: https://github.com/microsoft/typespec/blob/main/docs/samples/client/csharp/oauth/readme.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.ClientModel;\nusing System.ClientModel.Primitives;\n\n/// <summary>\n/// Customize client to add custom constructor.\n/// </summary>\npublic partial class SampleTypeSpecClient\n{\n  public SampleTypeSpecClient(Uri uri, AuthenticationTokenProvider credential)\n  {\n      _endpoint = uri;\n      var options = new ClientPipelineOptions();\n      Pipeline = ClientPipeline.Create(\n          options,\n          perCallPolicies: ReadOnlySpan<PipelinePolicy>.Empty,\n          perTryPolicies: [new OAuth2BearerTokenAuthenticationPolicy(credential, flows)],\n          beforeTransportPolicies: ReadOnlySpan<PipelinePolicy>.Empty\n      );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning JSON and Raw Content in HTTP Responses with TypeSpec in TypeScript\nDESCRIPTION: This snippet demonstrates two approaches for including a response body: using the json() helper for formatted JSON, and directly specifying a raw body with custom content type. Dependencies include the json() helper and a TypeSpec mock runtime. Parameters include 'body' for response content, and outputs are HTTP response objects as expected by handlers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/writing-mock-apis.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Return json\nreturn {\n  status: 200,\n  body: json({ foo: 123 }),\n};\n\n// Return raw content\nreturn {\n  status: 200,\n  body: {\n    contentType: \"application/text\",\n    rawContent: \"foobar\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Example YAML Serialization without Specific Encoded Names\nDESCRIPTION: Illustrates the YAML output for the `CertificateAttributes` model. Since no `@encodedName` was defined for the YAML mime type, all properties (`notBefore`, `expires`, `created`, `updated`) are serialized using their default names as defined in the TypeSpec model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/encoded-names.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nnotBefore: 1430344421\nexpires: 2208988799\ncreated: 1493938289\nupdated: 1493938291\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Properties using Record - TypeSpec\nDESCRIPTION: Defines a property 'bar' using the Record<unknown> construct, mapping to a schema where the value may have arbitrary properties. There are no constraints for property names or value types. Requires TypeSpec standard library; output depends on emitter version (OpenAPI 3.1 uses unevaluatedProperties). Input: none. Output: a model with a property that acts as a dictionary.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\n  bar: Record<unknown>;\n```\n\n----------------------------------------\n\nTITLE: Examples of Upload Operations with File Bodies - TypeSpec Language\nDESCRIPTION: Showcases various forms for accepting files in a request body using TypeSpec. Uploads are performed using either direct File type, spread models with HTTP headers, or models that are effectively File. Requires TypeSpec.Http and demonstrates both use of request metadata (such as x-request-id header) and explicit bodyRoot or model intersection for flexible API design.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n// The request has an explicit body that is _exactly_ a File, so the request has a file body.\nop upload(@bodyRoot file: File): void;\n\nalias FileRequest = {\n  @header(\"x-request-id\") requestId: string;\n} & File;\n\n// File is intersected with other models containing only HTTP metadata, so the request has a file body.\nop upload(...FileRequest): void;\n\n// The request is _effectively_ a File (`File` is the only thing spread into it), so the request has a file body.\nop upload(...File): void;\n\n// The request has an explicit body that is _effectively_ a File, so the request has a file body.\nop upload(\n  @bodyRoot body: {\n    ...File;\n  },\n): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring Vitest for Node Environment - TypeScript\nDESCRIPTION: This snippet provides a Vitest configuration for testing in a Node.js environment, suggested for use in TypeSpec library projects. Key parameters include disabling test isolation for performance and optionally increasing test timeout. This file should be saved as vitest.config.ts in the project root.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig, mergeConfig } from \"vitest/config\";\n\nexport default defineConfig({\n  test: {\n    environment: \"node\",\n    // testTimeout: 10000, // Uncomment to increase the default timeout\n    isolate: false, // Your test shouldn't have side effects to this will improve performance.\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Expected V2 Request/Response Body for Versioning Removed Model V3 (JSON)\nDESCRIPTION: Specifies the expected JSON request and response bodies for the V3 endpoint ('post /versioning/removed/api-version:v2/v3') called with API version 'v2' in the 'versioning/removed' scenario. It includes 'id' and 'enumProp', indicating the property was either retained or re-added in the final V2 compared to v2preview.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_317\n\nLANGUAGE: json\nCODE:\n```\n// Expected request body for path: \"/versioning/removed/api-version:v2/v3\"\n{ \"id\": \"123\", \"enumProp\": \"enumMemberV1\" }\n```\n\nLANGUAGE: json\nCODE:\n```\n// Expected response body for path: \"/versioning/removed/api-version:v2/v3\"\n{ \"id\": \"123\", \"enumProp\": \"enumMemberV1\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Resource List Interface - TypeSpec - typespec\nDESCRIPTION: Creates the ExtensionResourceList interface template for batch listing extension resources. It supports parameterization for Extension, Resource, and Error types, establishing uniform list operation APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ExtensionResourceList<Extension, Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Expected Request Body for Versioning Added V1 Endpoint (JSON)\nDESCRIPTION: Defines the expected JSON request body for the V1 endpoint ('post /versioning/added/api-version:{version}/v1') under the 'versioning/added' scenario, using the latest version's signature. It includes properties 'prop', 'enumProp' (with a V2 value 'enumMemberV2'), and 'unionProp', alongside an expected header 'header-v2=bar'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_312\n\nLANGUAGE: json\nCODE:\n```\n{ \"prop\": \"foo\", \"enumProp\": \"enumMemberV2\", \"unionProp\": 10 }\n```\n\n----------------------------------------\n\nTITLE: Testing Query Expansion with Record (Standard)\nDESCRIPTION: Defines a GET endpoint to test query expansion (`{?param}`) with explode: false for a record parameter `param`. Given `{a: 1, b: 2}`, the expected query string is `?param=a,1,b,2`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_100\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/query-expansion/standard/record{?param}\n```\n\n----------------------------------------\n\nTITLE: Defining Service and Models with Spread Records in TypeSpec\nDESCRIPTION: This snippet defines a TypeSpec namespace with a service operation, introduces the ExtraFeature model with simple typed properties, and a Dog model that spreads Record<ExtraFeature> to allow for dynamically-named additional properties of ExtraFeature type. The snippet concludes with an operation that returns a Dog. Requires the TypeSpec language and knowledge of model spreading.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_additional_properties.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\\nnamespace Test;\\nmodel ExtraFeature {\\n  id: string;\\n  name: string;\\n  value: int32;\\n}\\n\\nmodel Dog {\\n  id: string;\\n  name: string;\\n  color: \\\"black\\\" | \\\"brown\\\";\\n  ...Record<ExtraFeature>;\\n}\\n\\nop foo(): Dog;\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Error Response for 404 Status Code Range Test\nDESCRIPTION: Specifies the expected JSON error response body for a GET request to `/response/status-code-range/error-response-status-code-404`. This test verifies that a 404 status code correctly deserializes to a specific `NotFoundError` model, indicated by the `code` and `resourceId` fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"not-found\",\n  \"resourceId\": \"resource1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating TypeSpec Versioning from Projections to Mutators (diff)\nDESCRIPTION: This diff illustrates the necessary code changes to adapt TypeSpec versioning logic following the deprecation of the projection-based API in version 0.65. It shows replacing `buildVersionProjections` and `projectProgram` with the new mutator-based functions `getVersioningMutators` and `unsafe_mutateSubgraphWithNamespace` to achieve version snapshotting.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-02-11.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=\"tsp\"\n// Step 1: Update to retrieve the mutation instead of projections\n-const versions = buildVersionProjections(program, service.type);\n+const versions = getVersioningMutators(program, service.type);\n\n// Step 2: call mutator instead of projection api\n-const projectedProgram = projectProgram(originalProgram, versionRecord.projections);\n+const subgraph = unsafe_mutateSubgraphWithNamespace(program, [mutator], service.type);\n+subgraph.type // this is the mutated service namespace\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Interface with Templated Operation in TypeSpec\nDESCRIPTION: Provides a TypeSpec example defining an interface `Factory` that contains both a templated operation `read<T>()` and a regular operation `ping()`. Emitters processing such interfaces might need to use helpers like `isTemplateDeclaration` to differentiate between operation declarations (like `read<T>`) and concrete operations (like `ping`) to ensure only instantiable operations are processed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-01-12.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\ninterface Factory {\n  read<T>(): T;\n  ping(): void;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Collection of Models (NonNull) Patch Request - JSON\nDESCRIPTION: This is the PATCH request body for /type/property/nullable/collections/model/non-null, demonstrating required properties alongside a non-null array of model objects, crucial when altering submodel lists in-place.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_243\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"requiredProperty\\\": \\\"foo\\\",\\n  \\\"nullableProperty\\\": [{ \\\"property\\\": \\\"hello\\\" }, { \\\"property\\\": \\\"world\\\" }]\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaces and Routed Operations in TypeSpec (tsp)\nDESCRIPTION: Defines a root namespace annotated as a service, with two sub-namespaces, each exposing an HTTP GET operation on distinct routes ('/bar' and '/baz'). The code expects the emitter to interpret 'Foo' as the root client and expose subclients for operational namespaces. Dependencies include the TypeSpec language and emitter tooling. Inputs are namespace specifications, and outputs are service interface definitions. Constraints: the root namespace should not define operations directly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/wrapping_namespace.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \"TestService\" })\nnamespace Foo;\n\n@route(\"/bar\")\nnamespace Bar {\n  @get op getBar(): string[];\n}\n\n@route(\"/baz\")\nnamespace Baz {\n  @get op getBaz(): string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Model with Optional Field to XML - XML\nDESCRIPTION: This XML code models objects with optional fields. Here, the 'item' field is present inside the root 'ModelWithOptionalField' element. The presence of the 'item' field is optional, and this structure validates the presence scenario. No dependencies and no special validation beyond XML compliance.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_70\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithOptionalField>\\n  <item>widget</item>\\n</ModelWithOptionalField>\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Model Response - JSON\nDESCRIPTION: This JSON structure serves as the sample response for GET /type/property/additionalProperties/spreadRecordModel, featuring two properties, each an object with 'state'. The model response highlights spreading of entire record model types where both main and additional properties have object values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_219\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"knownProp\\\": { \\\"state\\\": \\\"ok\\\" }, \\\"prop\\\": { \\\"state\\\": \\\"ok\\\" } }\n```\n\n----------------------------------------\n\nTITLE: Serialization of Nested Wrapped Complex Arrays - XML\nDESCRIPTION: Visualizes XML for a wrapped array where the wrapper contains multiple custom-named item elements, each representing a Tag complex type. Useful for mapping deeply nested or specifically named XML documents required by API contracts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_22\n\nLANGUAGE: XML\nCODE:\n```\n<XmlPet>\n  <ItemsTags>\n    <XmlTag>\n      <name>string</name>\n    </XmlTag>\n  </ItemsTags>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Migrating from Version Projections to Mutator-Based Versioning - TypeSpec TSP Diff\nDESCRIPTION: This diff snippet illustrates the recommended transition from a projection-based API to a mutator-based API for managing versioned data in TypeSpec. The changes involve replacing calls to buildVersionProjections and projectProgram with getVersioningMutators and unsafe_mutateSubgraphWithNamespace, respectively. This migration reflects an API refactor, providing a more direct and maintainable approach to handling versioning. It requires access to the TypeSpec versioning environment and the declared service type, and the main output is a subgraph that represents the versioned snapshot.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/CHANGELOG.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n// Step 1: Update to retrieve the mutation instead of projections\n-const versions = buildVersionProjections(program, service.type);\n+const versions = getVersioningMutators(program, service.type);\n\n// Step 2: call mutator instead of projection api\n-const projectedProgram = projectProgram(originalProgram, versionRecord.projections);\n+const subgraph = unsafe_mutateSubgraphWithNamespace(program, [mutator], service.type);\n+subgraph.type // this is the mutated service namespace\n```\n\n----------------------------------------\n\nTITLE: Displaying TypeSpec CLI Help Options in Bash\nDESCRIPTION: This snippet demonstrates how to display the TypeSpec CLI's help message by running `tsp --help` in a Bash terminal. The output lists available commands (such as 'compile', 'format', 'init', 'install'), options, and their intended functions for TypeSpec project management. No special dependencies are required other than the TypeSpec CLI being installed and accessible in the shell. The command provides an overview of operations and available configuration flags, but does not process files directly; expected output is human-readable help text.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n>tsp --help\nTypeSpec compiler v0.36.1\n\ntsp <command>\n\nCommands:\n  tsp compile <path>       Compile TypeSpec source.\n  tsp code                 Manage VS Code Extension.\n  tsp vs                   Manage Visual Studio Extension.\n  tsp format <include...>  Format given list of TypeSpec files.\n  tsp init [templatesUrl]  Create a new TypeSpec project.\n  tsp install              Install TypeSpec dependencies\n  tsp info                 Show information about the current TypeSpec compiler.\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --debug    Output debug log messages.               [boolean] [default: false]\n  --pretty   Enable color and formatting in TypeSpec's output to make compiler error\n             s easier to read.                         [boolean] [default: true]\n  --version  Show version number                                       [boolean]\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec OpenAPI3 Package as Peer Dependency (bash)\nDESCRIPTION: Installs @typespec/openapi3 as a peer dependency in the context of creating a reusable library for TypeSpec. The '--save-peer' flag ensures that the peer dependency is recorded in the project's package configuration. Designed for library authors who need to declare @typespec/openapi3 as a compatible dependency rather than installing it directly. This requires Node.js and npm, and should be run from the library project's root directory. The command expects no parameters but results in an updated package definition including the peer dependency.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/openapi3\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Float Request - JSON\nDESCRIPTION: This snippet is for the PUT /type/property/additionalProperties/spreadRecordFloat endpoint, used as input. When spreading float properties in a model with 'id' and 'prop', the value for 'prop' must be a float for correct request validation and processing.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_218\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"id\\\": 43.125, \\\"prop\\\": 43.125 }\n```\n\n----------------------------------------\n\nTITLE: Building Typed API Client Context Using Parametrized Endpoint - TypeScript\nDESCRIPTION: This TypeScript code defines a client context for the Typespec-defined endpoint, using the same server URL template with a parameter ('foo'). The 'createTestClientContext' function expects the 'foo' parameter and optional configuration, constructing the API base URL by replacing the template accordingly. If required parameters are missing, an error is thrown. Inputs are the 'foo' string and optional client options; outputs are strongly-typed client contexts ready for HTTP operations. Requires '@typespec/ts-http-runtime' and assumes the endpoint template matches the Typespec spec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/server/parametrized-endpoint.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client, ClientOptions, getClient } from \\\"@typespec/ts-http-runtime\\\";\\n\\nexport interface TestClientContext extends Client {}\\nexport interface TestClientOptions extends ClientOptions {\\n  endpoint?: string;\\n}\\nexport function createTestClientContext(\\n  foo: string,\\n  options?: TestClientOptions,\\n): TestClientContext {\\n  const params: Record<string, any> = {\\n    foo: foo,\\n  };\\n  const resolvedEndpoint = \\\"{foo}/server/path/multiple\\\".replace(/\\{([^}]+)\\}/g, (_, key) =>\\n    key in params\\n      ? String(params[key])\\n      : (() => {\\n          throw new Error(`Missing parameter: ${key}`);\\n        })(),\\n  );\\n  return getClient(resolvedEndpoint, {\\n    ...options,\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a TypeScript Client Function for an Operation with Spread Parameters\nDESCRIPTION: This TypeScript code shows the generated client function `spreadWithMultipleParameters` for the corresponding TypeSpec operation. It accepts individual parameters (`id`, `xMsTestHeader`, `requiredString`, `requiredIntList`, `options`) reflecting the spread alias. The function constructs the HTTP request by parsing the path, setting headers, and building the request body, including handling optional parameters (`options?.optionalInt`, `options?.optionalStringList`) and transforming array types using `jsonArrayInt32ToTransportTransform` and `jsonArrayStringToTransportTransform`. It uses a `TestClientContext` for making the PUT request and handles the response, expecting a 204 status code for success.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/spread.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts function spreadWithMultipleParameters\nexport async function spreadWithMultipleParameters(\n  client: TestClientContext,\n  id: string,\n  xMsTestHeader: string,\n  requiredString: string,\n  requiredIntList: Array<number>,\n  options?: SpreadWithMultipleParametersOptions,\n): Promise<void> {\n  const path = parse(\"/{id}\").expand({\n    id: id,\n  });\n  const httpRequestOptions = {\n    headers: {\n      \"x-ms-test-header\": xMsTestHeader,\n    },\n    body: {\n      requiredString: requiredString,\n      optionalInt: options?.optionalInt,\n      requiredIntList: jsonArrayInt32ToTransportTransform(requiredIntList),\n      optionalStringList: jsonArrayStringToTransportTransform(options?.optionalStringList),\n    },\n  };\n  const response = await client.pathUnchecked(path).put(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Type_Array_NullableBooleanValue_get Endpoint\nDESCRIPTION: This JSON snippet represents the expected response body for the GET request to the `/type/array/nullable-boolean` endpoint. It should return a JSON array containing boolean values and null.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_138\n\nLANGUAGE: json\nCODE:\n```\n```json\n[true, null, false]\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Parent-Child Resource Relationships - TypeSpec\nDESCRIPTION: Attaches the @parentResource decorator to mark a model as a child of a specified parent resource, modeling hierarchical relationships between resource types. The 'parent' parameter should refer to another model decorated as a resource. This enables generation of nested URL paths and conveys structural relationships.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.parentResource(parent: Model)\n```\n\n----------------------------------------\n\nTITLE: Testing Query Expansion with Primitive (Standard)\nDESCRIPTION: Defines a GET endpoint to test query expansion (`{?param}`) with explode: false for a primitive parameter `param`. Given `\"a\"`, the expected query string is `?param=a`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_99\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/query-expansion/standard/primitive{?param}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response Body for JsonMergePatch updateOptionalResource\nDESCRIPTION: Specifies the expected JSON response body after updating an optional resource via the `PATCH /json-merge-patch/update/resource/optional` endpoint using a merge patch. The response reflects the state after applying the patch.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Madge\",\n  \"map\": {\n    \"key\": {\n      \"name\": \"InnerMadge\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Spread Model Floats - JSON\nDESCRIPTION: Presents a JSON model where an object contains an 'id' and a 'prop', both as floats, representing extension from a record base. Useful for API endpoints that extend primitive properties with additional fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_196\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"id\\\": 43.125, \\\"prop\\\": 43.125 }\n```\n\n----------------------------------------\n\nTITLE: Converting Detailed OpenAPI3 Path Route to TypeSpec Operation (YAML/TSP)\nDESCRIPTION: Demonstrates converting an OpenAPI3 path route (`GET /products/{id}`) into a TypeSpec operation (`getProduct`). This includes mapping the path parameter (`id`), defining the operation using `@route` and `@get` decorators, and generating a response model (`getProduct200ApplicationJsonResponse`) for the 200 status code referencing the `Product` schema.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/cli.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /products/{id}:\n    get:\n      operationId: getProduct\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Product\"\n```\n\nLANGUAGE: tsp\nCODE:\n```\n/**\n * Successful response\n */\nmodel getProduct200ApplicationJsonResponse {\n  @statusCode statusCode: 200;\n  @bodyRoot body: Product;\n}\n\n@route(\"/products/{id}\") @get op getProduct(@path id: string): getProduct200ApplicationJsonResponse;\n```\n\n----------------------------------------\n\nTITLE: Migrating from @projectedName to @encodedName in TypeSpec (TSP)\nDESCRIPTION: Shows the migration from the deprecated `@projectedName` decorator to `@encodedName`. This change requires specifying the content type (e.g., \"application/json\") along with the desired encoded name for properties, improving clarity for serialization.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=tsp\n- @projectedName(\"json\", \"nbf\")\n+ @encodedName(\"application/json\", \"nbf\")\nnotBefore: int32;\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Spector Test Server in Background using npm\nDESCRIPTION: Executes the `spector-start` script defined in the project's `package.json` to start the test server as a background process. This allows running other commands or tests without blocking the terminal during manual end-to-end testing. Requires Node.js, npm, and the project test module configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run spector-start\n```\n\n----------------------------------------\n\nTITLE: Initializing a TypeSpec Project using TSP CLI\nDESCRIPTION: This command runs the TypeSpec command-line interface (`tsp`) with the `init` subcommand. It interactively guides the user through setting up a new TypeSpec project, prompting for choices like project template (e.g., 'Generic REST API'), project name, and emitters (e.g., 'JavaScript Server Stubs').\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-javascript.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntsp init\n```\n\n----------------------------------------\n\nTITLE: Validating Spread String Property Request - JSON\nDESCRIPTION: This sample for PUT /type/property/additionalProperties/spreadRecordString details how to submit a record that has both a defined string property and a named identifier, checking for compliance with string-typed properties in the additional set.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_232\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"name\\\": \\\"SpreadSpringRecord\\\", \\\"prop\\\": \\\"abc\\\" }\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Bytes Patch (NonNull) Request - JSON\nDESCRIPTION: This snippet details the request body for PATCH /type/property/nullable/bytes/non-null, with a required property and a non-null binary encoded string. It highlights required input for patching byte properties that cannot be null.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_235\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": aGVsbG8sIHdvcmxkIQ==}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for Type_Array_ModelValue_put Endpoint\nDESCRIPTION: This JSON snippet represents the expected request body for the PUT request to the `/type/array/model` endpoint. The request body should be a JSON array containing model objects, each with a 'property' field.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_137\n\nLANGUAGE: json\nCODE:\n```\n```json\n[{ \"property\": \"hello\" }, { \"property\": \"world\" }]\n```\n```\n\n----------------------------------------\n\nTITLE: Interface Inheritance with @autoRoute and Path Segments - TypeSpec\nDESCRIPTION: This snippet demonstrates that when @autoRoute is applied to an interface, its effect is not inherited by extended interfaces. The 'PetOps' interface uses @autoRoute to prepend a custom path segment for 'id' via @path and @segment, while 'MyPetOps' extends it without inheriting the route or automation. Requires TypeSpec decorators @autoRoute, @segment, @path, and standard interface extension syntax. No operation implementation is shown in the child interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/resource-routing.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n// Operations prepended with /pets\\n@autoRoute\\ninterface PetOps {\\n  action(@path @segment(\"pets\") id: string): void;\\n}\\n\\n// Operations will *not* be prepended with /pets\\ninterface MyPetOps extends PetOps {\\n  ...\\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Values Against Decorators in TypeSpec\nDESCRIPTION: This snippet illustrates how TypeSpec validates values against built-in validation decorators like `@maxLength`. Assigning `\"abcd\"` to `s2` (typed as `shortString` with `@maxLength(3)`) causes an error. Similarly, assigning an object value to `e1` where the `a` property violates the `@maxLength(3)` constraint also results in an error.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n@maxLength(3)\nscalar shortString extends string;\n\nconst s1: shortString = \"abc\"; // ok\nconst s2: shortString = \"abcd\"; // error:\n\nmodel Entity {\n  a: shortString;\n}\n\nconst e1: Entity = #{ a: \"abcd\" }; // error\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Interface with Camel Case Properties\nDESCRIPTION: This TypeScript snippet shows the generated client-side interface `Foo`, expected to be located in `src/models/models.ts`. It corresponds to the TypeSpec `Foo` model but uses camelCase property names (`elementName`, `age`) as is conventional in TypeScript. The types are mapped accordingly (`string` to `string`, `int32` to `number`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/basic_model_wire_name.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Foo {\n  elementName: string;\n  age: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @terminalEvent Decorator in TypeSpec Language\nDESCRIPTION: This code snippet demonstrates how to use the @TypeSpec.SSE.terminalEvent decorator. The purpose is to mark an event as terminal, signaling that after this event is received, the client should disconnect from the server. It has no parameters and targets UnionVariant types in TypeSpec. No external dependencies are required beyond the TypeSpec language and the TypeSpec.SSE namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/sse/reference/decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.SSE.terminalEvent\n```\n\n----------------------------------------\n\nTITLE: Adding Python Client Emitter Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the specific dependency for the TypeSpec Python HTTP client emitter (`@typespec/http-client-python`) to your project's `package.json` file. This is the first step in setting up the Python client generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@typespec/http-client-python\": \"^0.6.6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TestClientOptions Interface in TypeScript\nDESCRIPTION: This TypeScript interface describes the available options for constructing the API client context, extending a base ClientOptions type. It specifies that the endpoint property is optional, allowing consumers to override the default URL if desired. The interface supports custom configurations and ensures type safety for client instantiation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/server/default_url.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TestClientOptions extends ClientOptions {\\n  endpoint?: string;\\n}\n```\n\n----------------------------------------\n\nTITLE: Putting Default (Missing) Optional Bytes Properties - JSON\nDESCRIPTION: An empty JSON object request body representing a PUT operation where the optional bytes property is left unset. Validates contract conformance for missing (unset) optional fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_268\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Implementing POST Operation for Widget Creation - TypeScript\nDESCRIPTION: Implements a TypeScript async function 'foo' that constructs and sends a POST request for creating a Widget, mapping function parameters to the expected request payload. Relies on a TestClientContext, utility for parsing path, and a helper for throwing REST errors if the response status/code is unexpected. Accepts parameters for each Widget field plus options for response hooks, and throws if the backend does not return status 204 with no body; otherwise completes silently. Requires proper context instantiation and dependency imports.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/create-operation.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function foo(\\n  client: TestClientContext,\\n  id: string,\\n  totalWeight: number,\\n  color: \\\"red\\\" | \\\"blue\\\",\\n  options?: FooOptions,\\n): Promise<void> {\\n  const path = parse(\\\"/\\\").expand({});\\n  const httpRequestOptions = {\\n    headers: {},\\n    body: {\\n      id: id,\\n      total_weight: totalWeight,\\n      color: color,\\n      is_required: options?.isRequired,\\n    },\\n  };\\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \\\"function\\\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python HTTP Client Emitter in TypeSpec Project - YAML\nDESCRIPTION: Shows a basic YAML configuration to enable the @typespec/http-client-python emitter for a TypeSpec project. This must be added to the project configuration file (typically tspconfig.yaml) to ensure the emitter is used during code generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-python/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-python\"\n```\n\n----------------------------------------\n\nTITLE: Putting Default (Missing) Optional PlainTime Properties - JSON\nDESCRIPTION: A request object omitting the optional plain time property. Tests if PUT requests function without time fields, important for validating flexible contracts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_300\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Collection of Bytes (NonNull) Patch Request - JSON\nDESCRIPTION: This snippet illustrates a PATCH /type/property/nullable/collections/bytes/non-null request, showing a required property and a non-null array of base64-encoded strings. The input must comply for correct patch semantics when updating byte arrays in a model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_239\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": [aGVsbG8sIHdvcmxkIQ==, aGVsbG8sIHdvcmxkIQ==]}\n```\n\n----------------------------------------\n\nTITLE: Specifying Service Namespace without Title or Version - Typespec\nDESCRIPTION: Demonstrates minimal use of the '@service' decorator to define a service namespace in TypeSpec without providing a title or version. No parameters required for this form. This pattern is supported in recent TypeSpec versions allowing succinct namespace declaration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-10-12.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@service\nnamespace PetStore;\n```\n\n----------------------------------------\n\nTITLE: Specifying Create or Update REST Resource Operations in TypeSpec (Typespec)\nDESCRIPTION: This decorator marks an operation as a create-or-update (upsert) endpoint for a model resource. Used on operations, with a required parameter for the target resource model. Indicates the operation can either create or update resource instances as needed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/decorators.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.createsOrUpdatesResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Unwrapped String Property XML Serialization with @unwrapped (TSP & XML)\nDESCRIPTION: Shows that applying @unwrapped to a string property in a TypeSpec model places its content directly within the parent element, with no intermediate child node. Useful for embedding raw text or flattening structure in output XML. Cannot be used with @attribute. Inputs must include property decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_12\n\nLANGUAGE: tsp\nCODE:\n```\nmodel BlobName {\n  @unwrapped content: string;\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<BlobName>\n  abcdef\n</BlobName>\n```\n\n----------------------------------------\n\nTITLE: Implicit Body Parameter Model Example - TypeScript\nDESCRIPTION: Shows a parameterized operation where the body model is inferred from a property: \\\"simple(name: string)\\\". Payload is a JSON object ({ \\\"name\\\": \\\"foo\\\" }). This structure enhances ergonomic model binding in API surface generation tools. Snippet is documentation only.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nsimple(name: string)\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"name\\\": \\\"foo\\\" }\n```\n\n----------------------------------------\n\nTITLE: Deprecated `@visibility(\"none\")` Usage (0.66.0 Context)\nDESCRIPTION: This snippet, shown in the context of the 0.66.0 release notes, reiterates the deprecation of using `@visibility(\"none\")` to hide TypeSpec elements. It advises migrating to `@invisible(Lifecycle)`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_21\n\nLANGUAGE: tsp\nCODE:\n```\n@visibility(\"none\")\nexample: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Local TypeSpec Libraries via .env (dotenv)\nDESCRIPTION: Demonstrates how to configure the TypeSpec Playground build environment using a `.env.local` file. Setting the `VITE_USE_LOCAL_LIBRARIES` environment variable to `true` instructs the Vite build tool to use local versions of the TypeSpec libraries instead of potentially fetching published ones.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/playground-website/README.md#_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\n# Bundle and use local version of TypeSpec libraries\nVITE_USE_LOCAL_LIBRARIES=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Safe Integer Handling Strategy (plaintext)\nDESCRIPTION: Specifies the 'safeint-strategy' option for the @typespec/openapi3 emitter, setting it to 'double-int'. This configuration alters how the TypeSpec 'safeint' scalar type is translated into the OpenAPI specification format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-03-05.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsafeint-strategy: double-int\n```\n\n----------------------------------------\n\nTITLE: Putting Required Only RequiredAndOptional Properties - JSON\nDESCRIPTION: PUT request with only the required property set. Used in tests and documentation to illustrate contract-compliant minimal updates or inserts, with optional fields safely omitted.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_304\n\nLANGUAGE: json\nCODE:\n```\n{ \"requiredProperty\": 42 }\n```\n\n----------------------------------------\n\nTITLE: Defining Property-Level XML Namespaces Using Normalized Form in TypeSpec\nDESCRIPTION: This TypeSpec snippet uses the normalized approach with multiple namespaces defined in the `Namespaces` enum. The `Book` model uses `Namespaces.smp` as the default, while the `title` and `author` properties explicitly reference `Namespaces.smp` and `Namespaces.ns2` respectively using `@Xml.ns`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_45\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@Xml.nsDeclarations\nenum Namespaces {\n  smp: \"http://example.com/schema\",\n  ns2: \"http://example.com/ns2\",\n}\n\n@Xml.ns(Namespaces.smp)\nmodel Book {\n  id: integer;\n\n  @Xml.ns(Namespaces.smp)\n  title: string;\n\n  @Xml.ns(Namespaces.ns2)\n  author: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Friendly Names for Templates in TypeSpec\nDESCRIPTION: Uses @friendlyName to define how a generic (templated) type should name its specialized instances for documentation or code generation. It accepts a templated name pattern and format arguments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n@friendlyName(\"{name}List\", T)\nmodel List<Item> {\n  value: Item[];\n  nextLink: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing Response for Next Link Paging in TypeScript\nDESCRIPTION: This TypeScript function `linkDeserialize` handles the deserialization of the HTTP response for the `link` operation (next link pattern). It checks for a successful status code (200) and JSON content type, then extracts and transforms the `pets` array and extracts the `link` (next link URL) from the response body. It throws a `RestError` on failure and provides an `onResponse` callback hook.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts function linkDeserialize\nfunction linkDeserialize(response: PathUncheckedResponse, options?: LinkOptions) {\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return {\n      pets: jsonArrayPetToApplicationTransform(response.body.pets),\n      link: response.body.link,\n    }!;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Custom Property Names with Discriminated Unions in TypeSpec\nDESCRIPTION: Demonstrates customizing the property names used in discriminated unions via the @discriminated decorator. By supplying options, the keys in the serialized output change from default to user-specified such as 'dataKind' and 'data'. Requires union and models; output is a JSON object with custom property names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@discriminated(#{discriminatorPropertyName: \"dataKind\", envelopePropertyName: \"data\"})\nunion Pet{ cat: Cat, dog: Dog }\n\nmodel Cat { name: string, meow: boolean }\nmodel Dog { name: string, bark: boolean }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dataKind\": \"cat\",\n  \"data\": {\n    \"name\": \"Whiskers\",\n    \"meow\": true\n  }\n},\n{\n  \"dataKind\": \"dog\",\n  \"data\": {\n    \"name\": \"Rex\",\n    \"bark\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resource Collections - TypeSpec - typespec\nDESCRIPTION: Defines an operation for listing all instances within a resource collection. The return type is a paginated collection model (CollectionWithNextLink) or an Error in case of failure. Requires the CollectionWithNextLink type and standard error response infrastructure. No input parameters are required; output is a typed list of resources or an error response.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_27\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceCollectionOperations.list(): TypeSpec.Rest.Resource.CollectionWithNextLink<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Defining a Response Header in TypeSpec\nDESCRIPTION: Defines an operation `read` that includes an `eTag` header in its response. The `{@header eTag: string, ...Pet}` syntax specifies that the response includes both the `eTag` header (string) and the properties of the `Pet` model in the body.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_10\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop read(): {@header eTag: string, ...Pet}\n```\n\n----------------------------------------\n\nTITLE: Defining Discriminated Unions with @discriminated Decorator - TypeSpec TSP\nDESCRIPTION: Demonstrates the new @discriminated decorator for unions in TypeSpec, where each variant uses its name as the discriminator value. Dependencies include the TypeSpec compiler v0.66+ and TypeSpec language support. The union 'Pet' is defined with variants 'cat' and 'dog', and when serialized, the output structure uses 'kind' and 'value' properties. No input required; this is a language-level type declaration consumed by the TypeSpec compiler or downstream tools.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-04.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@discriminated\nunion Pet {\n  cat: Cat,\n  dog: Dog,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Fixed Route in TypeSpec\nDESCRIPTION: Uses the `@route` decorator to map the `list` operation to the fixed URL path `/pets`. The operation returns an array of `Pet` objects.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_6\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@route(\"/pets\") op list(): Pet[]\n```\n\n----------------------------------------\n\nTITLE: Explicitly Setting Status Codes in TypeSpec Responses (tsp)\nDESCRIPTION: Presents solutions introduced in TypeSpec 0.56.0 to override the default status code behavior. Developers can explicitly set the status code using `@statusCode _: 204` or by spreading a pre-defined model (e.g., `...NoContent`) that includes the desired status code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_13\n\nLANGUAGE: tsp\nCODE:\n```\nop c1(): {@header foo: string, @statusCode _: 204};\nop c1(): {@header foo: string, ...NoContent}; // or spread common model\n```\n\n----------------------------------------\n\nTITLE: Generating Server-Side Controller for Todo API (ASP.NET Core, C#)\nDESCRIPTION: This C# snippet represents a sample server-side controller method generated from a TypeSpec API definition. It uses ASP.NET Core attributes for HTTP method routing and response typing, and asynchronously invokes an implementation method to retrieve Todo items. Dependencies include ASP.NET Core, the generated TodoItem type, and the backend operations implementation. It expects no parameters for the GET operation, and returns a JSON array of TodoItem objects as the response. This snippet forms part of the server skeleton code generated by TypeSpec emitters for .NET.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/blog/2025-03-31-typespec-1-0-release/typespec_1_0_release.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpGet]\n[Route(\"/todoitems\")]\n[ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(TodoItem[]))]\npublic virtual async Task<IActionResult> GetTodoItems()\n{\n    var result = await TodoItemsOperationsImpl.GetTodoItemsAsync();\n    return Ok(result);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Operations and Models with Effective File Bodies in TypeSpec\nDESCRIPTION: Demonstrates TypeSpec definitions where operations and models effectively represent a file body for requests or responses. Explains that metadata parameters like `@header`, `@query` (within common parameters), and `@statusCode` are ignored when determining if the body is a file. Includes examples using direct `Http.File`, spread common parameters, and models extending `File`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n// The parameters of this operation are effectively a file because the @header parameter\n// is not considered when checking if the request is a file\nop uploadFileWithHeader(@header(\"x-request-id\") requestId: string, ...Http.File): void;\n\nmodel CommonParameters {\n  @query(\"api-version\") apiVersion: string;\n  @header(\"x-request-id\") requestId: string;\n}\n\n// The parameters of this operation are effectively a file because the common parameters\n// are all applicable metadata and not considered when checking if the request is a file\nop uploadFileWithCommonParams(...CommonParameters, ...File): void;\n\n// The response has a file body because the `@statusCode` property is not considered when\n// checking if the response is a file\nop downloadFileWithStatusCode(@path name: string): {\n  @statusCode _: 200;\n  ...File;\n};\n\n// The response has a file body because the `OkResponse` model only has response-applicable\n// metadata that is not considered when checking if the response is a file\nop downloadFileWithIntersection(@path name: string): OkResponse & File;\n\nmodel OpenAPIFile extends File<\"application/json\" | \"application/yaml\", string> {\n  @path filename: string;\n}\n\n// The response and request have file bodies because the common parameters are all\n// applicable metadata in the request, and the `OkResponse` model only contains\n// applicable metadata for the response.\nop uploadAndDownload(...CommonParameters, ...OpenAPIFile): OkResponse & OpenAPIFile;\n\nmodel FileData {\n  @header(\"x-created\") created: utcDateTime;\n  ...File;\n}\n\n// The request has a file body because the `created` header is applicable metadata for\n// responses, and the rest of `FileData` is the properties of `File`.\nop upload(@bodyRoot file: FileData): OkResponse;\n\n// The response has a file body because the `OkResponse` model only contains applicable\n// metadata for the response, and the `created` header is also applicable in the response.\n// The properties that are left over are the properties of `File`.\nop download(): OkResponse & FileData;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Model and Operation in TypeSpec\nDESCRIPTION: Defines a simple TypeSpec model named `Foo` with `name` (string) and `age` (int32) properties. It also defines an operation `foo` that returns an instance of `Foo`. This definition serves as the source for generating corresponding TypeScript types and transformation functions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/basic_model.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Foo {\n  name: string;\n  age: int32;\n}\nop foo(): Foo;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing the Client Operation Function in TypeScript\nDESCRIPTION: This TypeScript function `get`, located in `src/api/testClientOperations.ts`, implements the client-side logic for the `get` operation. It accepts the client context (`TestClientContext`), `id`, `name`, and optional `GetOptions`. It constructs the request body using `id` and `name`, sends a POST request to the base path (\"/\"), and expects a 204 No Content response for success. It includes error handling via `createRestError` and an optional `onResponse` callback mechanism.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/no_content_type.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport async function get(\n  client: TestClientContext,\n  id: string,\n  name: string,\n  options?: GetOptions,\n): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n    body: {\n      id: id,\n      name: name,\n    },\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Identifying the Page Items Array Property with @pageItems in TypeSpec\nDESCRIPTION: Utilizes @pageItems to annotate the property containing the items in a paginated page. A key part of the pagination pattern in resource API endpoints; works alongside decorators like @pageIndex and @pageSize.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_46\n\nLANGUAGE: typespec\nCODE:\n```\n@pageItems\n```\n\n----------------------------------------\n\nTITLE: Defining ClientCredentialsFlow Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.ClientCredentialsFlow` model for the OAuth2 Client Credentials flow. It includes properties `type` set to `TypeSpec.Http.OAuth2FlowType.clientCredentials`, `tokenUrl` (string), an optional `refreshUrl` (string), and an optional list of `scopes` (string array) for the credential.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.ClientCredentialsFlow\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Compiler Path in VSCode Settings (JSON)\nDESCRIPTION: This JSON configuration snippet sets the 'typespec.tsp-server.path' property in the Visual Studio Code settings file (settings.json) to point to a custom location of the TypeSpec compiler. This is necessary if the TypeSpec project resides in a subdirectory and the extension cannot auto-detect the compiler location. The path can use variables such as ${workspaceFolder} to dynamically reference the root of the workspace. The input is a JSON object containing the settings property and value (a string path); there is no output except for changed extension behavior. The path must be valid and point to the installed compiler module.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/typespec-vscode/README.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typespec.tsp-server.path\": \"${workspaceFolder}/my-nested-project/node_modules/@typespec/compiler\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Intersection Equivalent using Spread Operator\nDESCRIPTION: This snippet shows an alternative way to define the 'Dog' type that is functionally equivalent to using the intersection operator '&'. It uses the spread operator ('...') within a model definition to include all properties from both the 'Animal' and 'Pet' types. This assumes 'Animal' and 'Pet' are model types or compatible aliases.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/intersections.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nalias Dog = {\n  ...Animal;\n  ...Pet;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/versioning in a Library (Bash)\nDESCRIPTION: Installs the `@typespec/versioning` library as a peer dependency using npm with the `--save-peer` flag. This command is intended for use when developing a reusable TypeSpec library that itself depends on the versioning library, allowing the consuming project to manage the core dependency version.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install --save-peer @typespec/versioning\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Nested Namespaces (Block Style) in TypeSpec\nDESCRIPTION: Illustrates how to create nested namespaces by placing `namespace` declarations within the block of other namespaces. This allows for hierarchical organization of types within a project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/namespaces.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nnamespace Foo {\n  namespace Bar {\n    namespace Baz {\n      model SampleModel {}\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring an Operation in TypeSpec - tsp\nDESCRIPTION: Defines a void-returning operation named 'foo' in the global (no-namespace) context of a TypeSpec specification. This operation serves as the basis for code generation and does not specify parameters, inputs, or outputs, modeling the minimal case. No dependencies are needed, but TypeSpec tooling is required to process this file.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/global_namespace.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nop foo(): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Client Function for Octet-Stream POST Request\nDESCRIPTION: Implements the `foo` client function in TypeScript, generated from the TypeSpec definition. It accepts a `Uint8Array` (`value`) and sends it as the raw request body in a POST request to the `/default` endpoint. It correctly sets the `Content-Type` header to `application/octet-stream`. The function expects a 200 response with the same content type and returns the response body as a `Uint8Array`. Dependencies include `TestClientContext`, `parse`, `createRestError`, and potentially types defined in `FooOptions`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/bytes_body.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// src/api/testClientOperations.ts function foo\nexport async function foo(\n  client: TestClientContext,\n  value: Uint8Array,\n  options?: FooOptions,\n): Promise<Uint8Array> {\n  const path = parse(\"/default\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      \"content-type\": options?.contentType ?? \"application/octet-stream\",\n    },\n    body: value,\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (\n    +response.status === 200 &&\n    response.headers[\"content-type\"]?.includes(\"application/octet-stream\")\n  ) {\n    return response.body!;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning String Values to Enum Members in TypeSpec\nDESCRIPTION: Shows how to explicitly assign string literal values to enum members using the `:` operator. This allows defining a specific string representation for each constant within the enum.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/enums.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nenum Direction {\n  North: \"north\",\n  East: \"east\",\n  South: \"south\",\n  West: \"west\",\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining CreatedResponse Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.CreatedResponse` model, representing an HTTP 201 Created response. It includes a `statusCode` property fixed to `201`, indicating the request succeeded and resulted in the creation of a new resource.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.CreatedResponse\n```\n\n----------------------------------------\n\nTITLE: Declaring a Base Operation for Reuse in TypeSpec\nDESCRIPTION: This snippet defines a simple operation named `Delete` which accepts an `id` string parameter and returns `void`. This operation serves as a base signature that can be reused by other operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/operations.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nop Delete(id: string): void;\n```\n\n----------------------------------------\n\nTITLE: Defining BadRequestResponse Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.BadRequestResponse` model, representing an HTTP 400 Bad Request response. It includes a `statusCode` property fixed to `400`, indicating the server could not understand the request due to invalid syntax.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.BadRequestResponse\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Emitters in tspconfig.yaml\nDESCRIPTION: This YAML configuration file (`tspconfig.yaml`) specifies which TypeSpec emitters to run and their options. It configures the `@typespec/openapi3` emitter to output OpenAPI 3.1.0 schemas to `{output-dir}/schema` and the `@typespec/http-server-js` emitter to generate JavaScript server code into `{output-dir}/server/generated`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-javascript.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/openapi3\"\n  - \"@typespec/http-server-js\"\noptions:\n  \"@typespec/openapi3\":\n    emitter-output-dir: \"{output-dir}/schema\"\n    openapi-versions:\n      - 3.1.0\n  \"@typespec/http-server-js\":\n    emitter-output-dir: \"{output-dir}/server/generated\"\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Service Interface Example\nDESCRIPTION: Shows an example of a TypeScript interface (`Users`) that the emitter generates based on a TypeSpec namespace (e.g., `Todo.Users`). This interface defines the methods (like `create`) that need to be implemented by the application logic. The optional `Context` type parameter allows accessing underlying request details.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-js/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/** An interface representing the operations defined in the 'Todo.Users' namespace. */\nexport interface Users<Context = unknown> {\n  create(\n    ctx: Context,\n    user: User,\n  ): Promise<\n    |\n    UserCreatedResponse\n    |\n    UserExistsResponse\n    |\n    InvalidUserResponse\n    |\n    Standard4XxResponse\n    |\n    Standard5XxResponse\n  >;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Client Context with Basic Authentication in TypeScript\nDESCRIPTION: This TypeScript function sets up the client context by resolving endpoint parameters and including the credential in the HTTP pipeline using the basic authentication scheme. It prepares parameters, processes endpoint formatting, and returns a configured client object. Dependencies include the getClient function and credential type. Inputs are the endpoint string, credential, and optional client options; the output is a fully configured client context. The implementation expects that the credential will be correctly formatted and used in the Authorization header as per the 'basic' auth scheme.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/basic_auth.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function createTestClientContext(\\n  endpoint: string,\\n  credential: BasicCredential,\\n  options?: TestClientOptions,\\n): TestClientContext {\\n  const params: Record<string, any> = {\\n    endpoint: endpoint,\\n  };\\n  const resolvedEndpoint = \\\"{endpoint}\\\".replace(/{([^}]+)}/g, (_, key) =>\\n    key in params\\n      ? String(params[key])\\n      : (() => {\\n          throw new Error(`Missing parameter: ${key}`);\\n        })(),\\n  );\\n  return getClient(resolvedEndpoint, {\\n    ...options,\\n    credential,\\n    authSchemes: [\\n      {\\n        kind: \\\"http\\\",\\n        scheme: \\\"basic\\\",\\n      },\\n    ],\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC RPC Method with HTTP Path Mapping - Protobuf\nDESCRIPTION: This protobuf snippet defines a GetShelf RPC method for a gRPC API with custom HTTP path mapping using google.api.http option. This allows RESTful access (GET) at the specified endpoint by mapping the gRPC message field 'name' to a path variable. It also demonstrates use of method_signature for specifying relevant fields in API client libraries. Tools like grpc-gateway and protoc-gen-openapiv2 require the Google API annotations as dependencies. Expected inputs are GetShelfRequest messages; outputs are Shelf messages. Paths are dynamically constructed based on resource identifiers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/grpc-library-example/README.md#_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\n// Gets a shelf. Returns NOT_FOUND if the shelf does not exist.\\n  rpc GetShelf(GetShelfRequest) returns (Shelf) {\\n    option (google.api.http) = {\\n      get: \\\"/v1/{name=shelves/*}\\\"\\n    };\\n    option (google.api.method_signature) = \\\"name\\\";\\n  }\\n\n```\n\n----------------------------------------\n\nTITLE: Defining BearerAuth Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.BearerAuth` model for HTTP Bearer Authentication (token authentication). It includes properties `type` set to `TypeSpec.Http.AuthType.http` and `scheme` set to the literal string `\"Bearer\"`. This represents the scheme where a client sends a security token in the `Authorization: Bearer <token>` header.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.BearerAuth\n```\n\n----------------------------------------\n\nTITLE: Declaring Well-Known Protobuf Any Model Reference - TypeSpec - typespec\nDESCRIPTION: Defines a model that references the well-known Protobuf Any message (google.protobuf.Any). Used for fields that can carry arbitrary data types. Internally, TypeSpec will emit the correct import and type reference for the canonical Protobuf definition. No dependencies except for google/protobuf/any.proto.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Protobuf.WellKnown.Any\n```\n\n----------------------------------------\n\nTITLE: Declaring the @renamedFrom Decorator Syntax in TypeSpec\nDESCRIPTION: This snippet illustrates the syntax for the `@renamedFrom` decorator. It indicates that a target element was renamed in a specific version. It requires the `version` (`EnumMember`) when the rename occurred and the `oldName` (string) of the element.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Versioning.renamedFrom(version: EnumMember, oldName: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Defining an Operation Template in TypeSpec\nDESCRIPTION: This snippet shows the definition of an operation template named `ReadResource`. Templates allow for generic operations. This template takes a type parameter `<T>` and defines an operation that accepts an `id` string and returns an object of type `T`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/operations.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nop ReadResource<T>(id: string): T;\n```\n\n----------------------------------------\n\nTITLE: Testing Query Expansion with Array (Explode)\nDESCRIPTION: Defines a GET endpoint to test query expansion (`{?param*}`) with explode: true for an array parameter `param`. Given `[\"a\",\"b\"]`, the expected query string is `?param=a&param=b`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_95\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/query-expansion/explode/array{?param*}\n```\n\n----------------------------------------\n\nTITLE: Testing Simple Path Expansion with Array (Standard)\nDESCRIPTION: Defines a GET endpoint to test simple path parameter expansion (explode: false) when the parameter `param` is an array. Given `[\"a\",\"b\"]`, the expected path segment becomes `a,b`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_83\n\nLANGUAGE: http\nCODE:\n```\nget /routes/path/simple/standard/array{param}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Multipart Request Body\nDESCRIPTION: Defines the generated TypeScript interface `FileWithHttpPartSpecificContentTypeRequest`. This interface structures the request body, containing a `profileImage` property typed with the `FileSpecificContentType` interface defined previously.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/multipart.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/models.ts interface FileWithHttpPartSpecificContentTypeRequest\nexport interface FileWithHttpPartSpecificContentTypeRequest {\n  profileImage: FileSpecificContentType;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Default (Missing) Optional Boolean Literal Properties - JSON\nDESCRIPTION: A minimal JSON object with no properties, representing the case where optional boolean literal properties are omitted. Useful for contract and boundary tests to verify that omitting optional fields results in empty objects, not errors.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_262\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Emitters via YAML - YAML\nDESCRIPTION: Shows how to specify the @typespec/http-server-csharp emitter in a TypeSpec project's configuration file using YAML. This enables the emitter when running 'tsp compile' without passing CLI flags. The key 'emit' is an array, allowing for multiple emitters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-server-csharp\"\n```\n\n----------------------------------------\n\nTITLE: Posting ModelWithBytes Using a Transport Serializer - TypeScript\nDESCRIPTION: Defines a TypeScript REST client 'post' method that sends a ModelWithBytes object, using a serializer to encode the nullable bytes field as base64 within the JSON body. Relies on 'jsonModelWithBytesToTransportTransform', 'parse', and 'createRestError'. Accepts the full model as input and expects a 204 status for success. Supports optional operation hooks for response handling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/bytes_nullable.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function post(\\n  client: TestClientContext,\\n  body: ModelWithBytes,\\n  options?: PostOptions,\\n): Promise<void> {\\n  const path = parse(\\\"/\\\").expand({});\\n  const httpRequestOptions = {\\n    headers: {},\\n    body: {\\n      body: jsonModelWithBytesToTransportTransform(body),\\n    },\\n  };\\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \\\"function\\\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Collection of Strings (Null) Patch Request - JSON\nDESCRIPTION: This PATCH /type/property/nullable/collections/string/null code demonstrates clearing the nullable property entirely, using null for complete removal or reset within the model, leaving required fields intact.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_248\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": null }\n```\n\n----------------------------------------\n\nTITLE: Defining List Resource Operations - TypeSpec\nDESCRIPTION: Shows how to indicate an operation implements listing/fetching of multiple resource instances with the @listsResource decorator. The parameter must be a resource model, and the decorator should be attached to relevant operations. This informs tooling and documentation generation for RESTful list endpoints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.listsResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Using AuthenticationTokenProvider and Custom Client in C#\nDESCRIPTION: This code snippet shows how to use the implemented ClientCredentialTokenProvider and the custom SampleTypeSpecClient together. It demonstrates instantiating the provider with a client ID and secret, creating the client with a service URI and the provider for authentication, and making an authenticated call (client.Widget). This usage pattern assumes dependencies and client class definitions from previous snippets are available, along with valid credentials and endpoint. Inputs include credential values and endpoint URI; the output is an authenticated client call to the API.\nSOURCE: https://github.com/microsoft/typespec/blob/main/docs/samples/client/csharp/oauth/readme.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nAuthenticationTokenProvider provider = new ClientCredentialTokenProvider(\"myClientId\", \"myClientSecret\");\nvar client = new SampleTypeSpecClient(new Uri(\"http://localhost:5000\"), provider);\nclient.Widget(\"myId\");\n```\n\n----------------------------------------\n\nTITLE: Defining NotModifiedResponse Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.NotModifiedResponse` model, representing an HTTP 304 Not Modified response. This model signifies that the client has made a conditional request and the resource has not been modified. It includes a `statusCode` property fixed to `304`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_28\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.Http.NotModifiedResponse\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Protobuf Service Interface in TypeSpec - TypeSpec\nDESCRIPTION: This snippet demonstrates how to use the @Protobuf.service decorator in a TypeSpec interface within a Protobuf package. The interface and its operations will be converted into a Protobuf service in the generated proto file. All fields and operations should conform to the requirements of the Protobuf emitter, which is a dependency.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/guide.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@package\nnamespace Example {\n  @Protobuf.service\n  interface Test {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Putting All Optional PlainDate Properties - JSON\nDESCRIPTION: PUT request sample including an optional plain date property with value formatted as 'yyyy-MM-dd'. Ensures correct transmission and validation of date fields with no time.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_295\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": \"2022-12-12\" }\n```\n\n----------------------------------------\n\nTITLE: Resolving Invalid @path Usage by Making Property Required in TypeSpec\nDESCRIPTION: Demonstrates one way to fix the invalid usage of `@path` on an optional property. Making the property required (`name: string`) satisfies the constraint that path parameters must have a value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_21\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Foo {\n  @path\n  name: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Illustrating Invalid Directive Placement in TypeSpec\nDESCRIPTION: Provides an example of invalid TypeSpec code where a `#suppress` directive is incorrectly placed directly on a template parameter `T`. This placement is no longer allowed according to the updated rules.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\nmodel M<\n#suppress example\nT\n> {}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested API Routes with Path Concatenation in TypeSpec\nDESCRIPTION: Demonstrates how `@route` decorators on nested namespaces (`Widgets` and `Parts`) are combined to form the final operation path. The `list` operation within the `Parts` namespace gets the final path `/widgets/{id}/parts` by concatenating the parent namespace route `/widgets` and the inner namespace route `/{id}/parts`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@route(\"/widgets\")\nnamespace Widgets {\n  // widgets operations\n\n  @route(\"/{id}/parts\")\n  namespace Parts {\n    op list(@path id: string): Part[] | Error; // uses path \"/widgets/{id}/parts\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitters in TypeSpec YAML Config - YAML\nDESCRIPTION: Shows how to enable the @typespec/http-client-js emitter in a YAML configuration file for a TypeSpec project. The 'emit' key lists the emitters to activate. Placing the emitter package name under the 'emit' list enables its output on project compilation. No additional options are specified in this minimal configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-js/reference/emitter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-js\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Scalar Constructors - TypeSpec Language\nDESCRIPTION: Demonstrates defining a scalar type with a custom value constructor and instantiating a value with that constructor in TypeSpec. The scalar 'ipV4' defines an 'init fromInt' method for initialization, and an 'ip' constant is created by calling this constructor. This pattern provides flexible initialization for custom scalar types. No dependencies except the standard TypeSpec scalar constructor feature.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\nscalar ipV4 {\n  init fromInt(value: int32);\n}\nconst ip: ipV4 = ipV4.fromInt(3232235776);\n```\n\n----------------------------------------\n\nTITLE: Modeling Dog with Additional Property Records in TypeScript Interface\nDESCRIPTION: Defines the Dog interface with standard properties plus an optional additionalProperties field, which is a Record mapping string keys to ExtraFeature objects. Dependencies include the ExtraFeature interface. Input values are plain JavaScript objects matching the shape; additionalProperties is for key-value pairs beyond the core fields. Conforms to application-level model requirements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_additional_properties.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Dog {\\n  id: string;\\n  name: string;\\n  color: \\\"black\\\" | \\\"brown\\\";\\n  additionalProperties?: Record<string, ExtraFeature>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Optional Int Literal Properties - JSON\nDESCRIPTION: This JSON example includes an int literal as an optional property in the response body, testing correct integer property round-tripping. Accurate number types are preserved through requests and responses.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_289\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": 1 }\n```\n\n----------------------------------------\n\nTITLE: Defining a Discriminated Union in TypeSpec\nDESCRIPTION: This TypeSpec code defines a service namespace `Test` containing a discriminated union `WidgetData`. The `@discriminated` decorator specifies that the `kind` property serves as the discriminator. The union has two potential shapes: `WidgetData0` (with `kind: \"kind0\"`) and `WidgetData1` (with `kind: \"kind1\"`). Basic GET and PUT operations using this union type are also defined.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/discriminated_union.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n@discriminated(#{ envelope: \"none\", discriminatorPropertyName: \"kind\" })\nunion WidgetData {\n  kind0: WidgetData0,\n  kind1: WidgetData1,\n}\n\nmodel WidgetData0 {\n  kind: \"kind0\";\n  fooProp: string;\n}\n\nmodel WidgetData1 {\n  kind: \"kind1\";\n  start: utcDateTime;\n  end?: utcDateTime;\n}\n\n@get\nop get(): WidgetData;\n\n@put\nop put(@body body: WidgetData): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Emitter Options in tspconfig.yaml (YAML)\nDESCRIPTION: Illustrates how to provide configuration options to a TypeSpec emitter within the `tspconfig.yaml` file. It uses the `emit` key to specify the emitter (`@typespec/http-server-csharp`) and an `options` block to pass key-value pairs specific to that emitter (e.g., `option: value`). This allows customization of the emitter's behavior.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/docs/emitter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nemit:\n  - \"@typespec/http-server-csharp\"\noptions:\n  \"@typespec/http-server-csharp\":\n    option: value\n```\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Request Body for spreadAsRequestParameter\nDESCRIPTION: Specifies the expected JSON request body for the `PUT /parameters/spread/alias/request-parameter/{id}` endpoint test case. The body contains the 'name' property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Providing Operation Parameter and Result Example with @opExample in TypeSpec\nDESCRIPTION: Uses @opExample to give a concrete example of input parameters and result for an operation, facilitating documentation and tooling. Accepts an OperationExample object and optional ExampleOptions for configuring the presentation/context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_40\n\nLANGUAGE: typespec\nCODE:\n```\n@opExample(example: valueof OperationExample, options?: valueof ExampleOptions)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Visibility with @defaultVisibility - TypeSpec Typespec\nDESCRIPTION: Shows how to set a default visibility modifier for a custom visibility class enum in TypeSpec using the @defaultVisibility decorator. Here, properties without explicit Example visibility will default to Example.A. Requires the Example enum. Input: Example enum with decorator; Output: properties default to A visibility unless overridden.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/visibility.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n@defaultVisibility(Example.A)\nenum Example {\n  A,\n  B,\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Query Expansion with Primitive (Explode)\nDESCRIPTION: Defines a GET endpoint to test query expansion (`{?param*}`) with explode: true for a primitive parameter `param`. Given `\"a\"`, the expected query string is `?param=a`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_96\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/query-expansion/explode/primitive{?param*}\n```\n\n----------------------------------------\n\nTITLE: Defining Extensible String Union Type in TypeScript\nDESCRIPTION: This TypeScript type alias models the 'ServerExtensibleEnum' from Typespec, representing an extensible enum that can be either an arbitrary string or the literal string 'value1'. It ensures type-safe usage in TypeScript code that interacts with APIs defined in Typespec. There are no runtime dependencies, but TypeScript's type system is leveraged for compile-time safety.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/string_union.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ServerExtensibleEnum = string | \"value1\";\n```\n\n----------------------------------------\n\nTITLE: Providing Default Values for TypeSpec Properties in OpenAPI YAML\nDESCRIPTION: Shows a YAML schema where the default value for a property does not match its declared type, e.g., a string default for an integer-typed property. The 'default' keyword must specify a value that is compatible with the property's defined type. Ensure default values correctly reflect the schema's expected data types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/diagnostics.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\\n  schemas:\\n    User:\\n      type: object\\n      properties:\\n        age:\\n          type: integer\\n          default: \"twenty\"\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Versioning in package.json - JSON\nDESCRIPTION: This snippet shows the necessary additions to the package.json file to include the @typespec/versioning dependency in both peerDependencies and devDependencies. It ensures the project supports TypeSpec versioning decorators and compatible compiler plugins. The snippet preserves the package structure, so after saving, running installation commands will bring in versioning support.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/06-versioning.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"name\": \"typespec-petstore\",\\n  \"version\": \"0.1.0\",\\n  \"type\": \"module\",\\n  \"peerDependencies\": {\\n    \"@typespec/compiler\": \"latest\",\\n    \"@typespec/http\": \"latest\",\\n    \"@typespec/openapi3\": \"latest\",\\n    // highlight-next-line\\n    \"@typespec/versioning\": \"latest\"\\n  },\\n  \"devDependencies\": {\\n    \"@typespec/compiler\": \"latest\",\\n    \"@typespec/http\": \"latest\",\\n    \"@typespec/openapi3\": \"latest\",\\n    // highlight-next-line\\n    \"@typespec/versioning\": \"latest\"\\n  },\\n  \"private\": true\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Referencing and Augmenting Model and Alias Properties - TypeSpec\nDESCRIPTION: This multi-example TypeSpec snippet demonstrates new capabilities for decorating (augmenting) various properties. Usage includes augmenting an alias property, nested properties within a model, inherited properties via model 'is', statically linkable template constraints, and highlighting augmentation limitations for unconstrained template parameters. \nDependencies: TypeSpec with support for @@doc decorator and static symbol resolution. \nParameters: Various forms of model, alias, template, and inheritance structures. \nInputs/Outputs: Applies @@doc to multiple property references; error cases are annotated. \nLimitation: Cannot augment properties not statically determinable from templates.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-11-05.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n// Example 1: augment alias property\nalias Alias = {\n  prop: string;\n};\n\n@@doc(Alias.prop, \"My alias doc\");\n\n// Example 2: augment nested property\nmodel Author {\n  address: {\n    city: string;\n  };\n}\n\n@@doc(Author.address::type.city, \"Address city\");\n\n// Example 3: Property sourced from model is\nmodel Nameable {\n  name: string;\n}\nmodel Author is Nameable;\n\n@@doc(Author.name, \"Authors name\");\n\n// Example 4: Template constraint can be statically linked\nmodel Author<T extends {name: string}> {\n  ...T;\n}\n\n@@doc(Author.name, \"Authors name\");\n\n// Example 5: Limitation: Cannot augment properties from a template parameter without constraint\nmodel Base<T> {\n  ...T;\n}\n\nmodel Author\n  is Base<{\n    name: string;\n  }>;\n\n@@doc(Base.name, \"Authors name\");\n//    ^ error we cannot know Base will have a property called name\n@@doc(Author.name, \"Authors name\");\n//    ^ error we cannot know author has property name without instantiating Base\n```\n\n----------------------------------------\n\nTITLE: Testing Conditional Request Header: If-None-Match\nDESCRIPTION: Defines a POST endpoint to test the handling of the `If-None-Match` conditional request header. The test expects this specific header to be present with the value '\"invalid\"'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_117\n\nLANGUAGE: http\nCODE:\n```\npost /special-headers/conditional-request/if-none-match\n```\n\n----------------------------------------\n\nTITLE: Validating Scenarios with pnpm\nDESCRIPTION: This command executes the script defined as `validate-scenarios` in the package.json file, typically used to check the validity of scenario specifications located in the `./specs` folder. It requires the `pnpm` package manager and the project dependencies to be installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run validate-scenarios\n```\n\n----------------------------------------\n\nTITLE: Enhanced Template Instantiation Diagnostic with Call Trace - TypeSpec\nDESCRIPTION: This updated TypeSpec example demonstrates the same model template error as before but includes comments showing improved diagnostics: both the error and a trace back to the point of instantiation. It also annotates the usage site in 'Bar' with a warning about the template instantiation failure. \nDependencies: TypeSpec 0.62 or newer with enhanced diagnostic output. \nInputs: T is a type parameter ('string'). \nOutputs: Compiler emits errors/warnings both at the declaration and at the instantiation call site. \nLimitation: Diagnostic clarity depends on compiler version.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-11-05.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Spreading<T> {\n  ...T;\n  // ^ error spread-model Cannot spread properties of non-model type.\n  //     main.tsp:6:9 in instantiation of Spreading<string>\n}\n\nmodel Bar {\n  // Also show a warning at the point of usage\n  prop: Spreading<string>;\n  //    ^ warning spread-model In instantiation of this template\n  //      main.tsp:2:6 Cannot spread properties of non-model type.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a POST Operation in TypeSpec\nDESCRIPTION: Uses the `@post` decorator to define an operation named `add` that corresponds to an HTTP POST request. The operation currently takes no parameters and returns `void`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_2\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@post op add(): void\n```\n\n----------------------------------------\n\nTITLE: Running Scenarios Using Spector 'knock' Command - Bash\nDESCRIPTION: These Bash code snippets use the 'tsp knock' command to execute scenarios defined in TypeSpec specifications. The '--baseUrl' option allows targeting a specific server URL, while '--filter' applies a glob pattern to limit scenarios executed. Required dependencies: Spector CLI and TypeSpec specs. Inputs include the specs path, an optional base URL, and optional scenario filters. Outputs depend on scenario results from the mock server. Useful for automated scenario/testing workflows with parameterized endpoints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntsp knock ./path/to/specs/\ntsp knock ./path/to/specs/ --baseUrl http://localhost:3000\ntsp knock ./path/to/specs/ --filter \"payload/multipart/**/*\"\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Authentication with @useAuth Decorator in TypeSpec\nDESCRIPTION: This code snippet shows how to establish an OAuth2-based authentication scheme in a TypeSpec API using the @useAuth decorator. It demonstrates creating an EntraIDToken model to represent the OAuth2 flow by extending OAuth2Auth with authorization code flow settings, including required authorization and token URLs, and a list of OAuth scopes. Dependencies: TypeSpec HTTP decorators library. This setup expects consumers to provide an Entra ID token for protected endpoints; limitations include reliance on correct OAuth2 configuration and scope management.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_26\n\nLANGUAGE: typespec\nCODE:\n```\n@useAuth(EntraIDToken)\nnamespace Contoso.WidgetManager;\n\n/** Microsoft Entra ID OAuth2 Flow */\nmodel EntraIDToken\n  is OAuth2Auth<[\n    {\n      type: OAuth2FlowType.authorizationCode;\n      authorizationUrl: \"https://api.example.com/oauth2/authorize\";\n      tokenUrl: \"https://api.example.com/oauth2/token\";\n      scopes: [\"https://management.azure.com/read\", \"https://management.azure.com/write\"];\n    }\n  ]>;\n```\n\n----------------------------------------\n\nTITLE: Defining a Protobuf Package using @package Decorator in TypeSpec\nDESCRIPTION: Defines the `@TypeSpec.Protobuf.package` decorator used on a `Namespace` to declare it as a Protobuf package. The contents of the namespace, including messages and services, will be emitted to a single Protobuf file corresponding to this package. It accepts an optional `details` parameter of type `TypeSpec.Protobuf.PackageDetails` for further configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/decorators.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Protobuf.package(details?: TypeSpec.Protobuf.PackageDetails)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Python HTTP Client Emitter with Options - YAML\nDESCRIPTION: Demonstrates how to specify emitter options in the TypeSpec project configuration. This YAML snippet enables the @typespec/http-client-python emitter and sets emitter-specific options. Replace 'option: value' with actual option key-value pairs as needed for customizing output behavior.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-python/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-python\"\noptions:\n  \"@typespec/http-client-python\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Defining @contentMediaType Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@contentMediaType` decorator from the `TypeSpec.JsonSchema` namespace. Applied to a `string` type or a `ModelProperty` of type string, it indicates the media type (MIME type) of the content stored within the string (e.g., 'application/json'). The `value` parameter takes a string representing the media type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.contentMediaType(value: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Custom Named Model Serialization with @name and @encodedName (XML)\nDESCRIPTION: This XML sample shows the result of using @name decorators on a model and its properties, producing custom element and attribute names in the serialized XML. The root and properties are renamed as specified in the TypeSpec model. This demonstrates output only; input model must use decorators as above.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<XmlBook>\n  <XmlId>string</XmlId>\n  <XmlName>string</XmlName>\n  <content>string</content>\n</XmlBook>\n```\n\n----------------------------------------\n\nTITLE: Model Type Value Deprecation and Object Value Adoption - TypeSpec Language\nDESCRIPTION: Depicts the deprecation of model type value assignment via inline object literals and introduces object value literals using '#{}'. The first (deprecated) assignment uses a standard object; the second (correct) uses new object value syntax for the default value. This ensures better type system alignment and value marshalling in TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_6\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Test {\n  // Deprecated\n  user: {\n    name: string;\n  } = {\n    name: \"System\";\n  };\n\n  // Correct\n  user: {\n    name: string;\n  } = #{ name: \"System\" };\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Event Union with @events Decorator in TypeSpec - TypeSpec Language\nDESCRIPTION: This snippet applies the @events decorator to define a union as a set of discrete events using TypeSpec. The union contains two event variants: 'pingEvent' (a string) and 'doneEvent' (a literal 'done'). It depends on the @typespec/events library and assumes correct union type definition. The main constraint is that only unions (not models or enums) can be decorated with @events.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/events/README.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@events\nunion MixedEvents {\n  pingEvent: string,\n  doneEvent: \"done\",\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Multipart File Upload Operation in TypeScript\nDESCRIPTION: This async TypeScript function implements the doThing operation for uploading a file with multipart/form-data. It constructs the required HTTP request, sets the content-type header, and serializes the basicFile using createFilePartDescriptor. The function expects a TestClientContext, a RequestBody, and optional DoThingOptions. Successful requests return void; errors throw a RestError. Dependencies: parse, createFilePartDescriptor, createRestError utilities.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function doThing(\\n  client: TestClientContext,\\n  bodyParam: RequestBody,\\n  options?: DoThingOptions,\\n): Promise<void> {\\n  const path = parse(\\\"/\\\").expand({});\\n  const httpRequestOptions = {\\n    headers: {\\n      \\\"content-type\\\": options?.contentType ?? \\\"multipart/form-data\\\",\\n    },\\n    body: [createFilePartDescriptor(\\\"basicFile\\\", bodyParam.basicFile)],\\n  };\\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \\\"function\\\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec Project to Generate New Mocks Only - Bash\nDESCRIPTION: This Bash script shows how to use the TypeSpec compiler to generate updated mocks for APIs, without altering existing implementations or project files. By setting the 'emit-mocks' option to 'mocks-only', it selectively updates only the mock files. This is intended for workflows where the main project has been customized and only new APIs require mocked logic. Requires a valid TypeSpec definition in the current directory and the standalone 'tsp' compiler.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-csharp/project.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit @typespec/http-server-csharp --option @typespec/http-server-csharp.emit-mocks=mocks-only\n```\n\n----------------------------------------\n\nTITLE: Serving TypeSpec Specifications with Spector CLI - Bash\nDESCRIPTION: These Bash code snippets demonstrate how to start a Spector server for given TypeSpec specs. The 'tsp serve' command spins up a development server that provides mock API services based on the provided specification folder. Optionally, a custom port can be specified using '--port'. The folder path should contain valid TypeSpec definitions. The output is a running mock server accessible at the designated port. Required dependency: Spector (via 'tsp').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp serve ./path/to/specs/\ntsp serve ./path/to/specs/ --port 3000\n```\n\n----------------------------------------\n\nTITLE: Defining File Model with Specific Content Type in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a file model PngFile that extends the built-in File model and enforces its contentType to 'image/png'. The RequestBody model expects a property image of type HttpPart<PngFile>. The doThing operation is configured to accept a multipart/form-data body containing a PNG image file. Useful for scenarios where an API must restrict uploads to certain media types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\\n\\nmodel PngFile extends File {\\n  contentType: \\\"image/png\\\";\\n}\\n\\nmodel RequestBody {\\n  image: HttpPart<PngFile>;\\n}\\n\\nop doThing(@header contentType: \\\"multipart/form-data\\\", @multipartBody bodyParam: RequestBody): void;\n```\n\n----------------------------------------\n\nTITLE: Validating Request Bodies with req.expect.bodyEquals in TypeSpec in TypeScript\nDESCRIPTION: This code snippet validates the body of a POST request by performing a deep equality check using the req.bodyEquals method. It is designed for TypeSpec-based app.post handlers and ensures the incoming request body matches the expected JSON structure. Required dependencies include the mock API app and proper handler registration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/writing-mock-apis.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.post(\"/example\", \"Example\", (req) => {\n  req.bodyEquals({ foo: \"123\", bar: \"456\" });\n});\n```\n\n----------------------------------------\n\nTITLE: Applying the @terminalEvent Decorator in TypeSpec (TypeSpec)\nDESCRIPTION: This TypeSpec code snippet shows the application of the `@TypeSpec.SSE.terminalEvent` decorator. This decorator is applied to a `UnionVariant` within an SSE stream definition to signify that receiving this specific event variant indicates the end of the stream, and the client should subsequently disconnect.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/sse/README.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.SSE.terminalEvent\n```\n\n----------------------------------------\n\nTITLE: Resolving Invalid @path Usage by Adding Default Value in TypeSpec\nDESCRIPTION: Shows another way to fix the invalid usage of `@path` on an optional property. By providing a default value (`name?: string = \"singleton\"`), the property can remain optional while still ensuring a value is available for the path parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_22\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Foo {\n  @path\n  name?: string = \"singleton\";\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Enum Model POST Operation - TypeScript\nDESCRIPTION: Provides the TypeScript implementation of the send operation as defined in TypeSpec. This function constructs a POST request with the EnumsOnlyCases model serialized into the request body and manages client response handling. Depends on serialization logic and client context, with error handling and support for custom response hooks via options.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/union_body.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function send(\\n  client: TestClientContext,\\n  prop: EnumsOnlyCases,\\n  options?: SendOptions,\\n): Promise<void> {\\n  const path = parse(\\\"/\\\").expand({});\\n  const httpRequestOptions = {\\n    headers: {},\\n    body: {\\n      prop: jsonEnumsOnlyCasesToTransportTransform(prop),\\n    },\\n  };\\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \\\"function\\\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Resource Operations within a Namespace - TypeSpec\nDESCRIPTION: This example shows how to define operations inside a resource namespace that is assigned a route via @route. It illustrates the default operation 'list', and contrasts it with an explicit HTTP GET operation 'listPets' using the @get decorator. Both operations return an array of 'Pet' entities. The snippet assumes 'Pet' is defined elsewhere; no external dependencies beyond TypeSpec are required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/resource-routing.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/pets\")\\nnamespace Pets {\\n  op list(): Pet[];\\n\\n  // or you could also use\\n  @get op listPets(): Pet[];\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parametrized Server Endpoint with Typespec - tsp\nDESCRIPTION: This Typespec snippet defines a service named 'Parametrized Endpoint' with a server whose URL includes a template parameter ('foo'). The '@server' decorator provides a documentation hint for API consumers to supply a concrete URL such as 'http://localhost:3000'. The namespace contains a single operation ('noOperationParams') with a NoContentResponse. Dependencies include the Typespec service, server, and doc decorators. The input is the server template and doc string; the output is a structured Typespec definition. No business logic or request parameters are implemented in this example.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/server/parametrized-endpoint.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \\\"Parametrized Endpoint\\\" })\\n@server(\\n  \\\"{foo}/server/path/multiple\\\",\\n  \\\"Test server with path parameters.\\\",\\n  {\\n    @doc(\\\"Pass in http://localhost:3000 for endpoint.\\\")\\n    foo: url,\\n  }\\n)\\nnamespace Test;\\n\\nop noOperationParams(): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Client Function for GET Operation with Optional Parameters\nDESCRIPTION: This TypeScript function `getWithParams` handles the client-side logic for the corresponding TypeSpec operation. It accepts the client context and an optional `GetWithParamsOptions` object. It constructs the HTTP request, sends it using the client context, handles the response, and returns the result (a number) or throws an error. The optional parameters `name` and `age` are accessed from the `options` object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/only_optional.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts function getWithParams\nexport async function getWithParams(\n  client: TestClientContext,\n  options?: GetWithParamsOptions,\n): Promise<number> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n    body: {\n      name: options?.name,\n      age: options?.age,\n    },\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return response.body!;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Operation for Octet-Stream Byte Transfer\nDESCRIPTION: Defines a TypeSpec operation `foo` within the `Test` namespace. This operation is mapped to the `/default` route and specifies that both the request and response bodies are of type `bytes` and must have the `Content-Type` header set to `application/octet-stream`. This ensures the raw byte data is handled directly without unexpected encoding.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/bytes_body.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n\n@route(\"/default\")\nop foo(@header contentType: \"application/octet-stream\", @body value: bytes): {\n  @header contentType: \"application/octet-stream\";\n  @body value: bytes;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Business Logic in a TypeSpec-Generated Controller (JavaScript)\nDESCRIPTION: Example of updating a generated controller method (`list`) in JavaScript (TypeScript). This snippet demonstrates replacing the default mock implementation within a generated file (e.g., `widgets.ts`) with actual business logic, typically involving database calls or other processes to construct the correct response. The context (`HttpContext`) is provided, and the expected return type is a union of the success type (`WidgetList`) and `Error`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-javascript.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Replace the mock implementation with your actual business logic\nasync list(ctx: HttpContext): Promise<WidgetList | Error> {\n  // In a real application, you would call a database or execute some logic to construct the correct response.\n  return {\n    items: [\n      {\n        id: \"mock-string\",\n        weight: 42,\n        color: \"red\",\n      }\n    ],\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Extensible String Union for an API Operation in Typespec\nDESCRIPTION: This Typespec snippet defines a union type 'ServerExtensibleEnum' that accepts either an arbitrary string or the specific value 'value1', and exposes an endpoint 'unionEnumName' using an HTTP POST operation. It demonstrates designing service contracts that accept both fixed and open-ended string values. This definition reflects the need for client-server APIs to be forward-compatible with unknown enum values. No dependencies beyond the Typespec language and standard decorators are required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/string_union.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \"Test Service\" })\nnamespace Test;\nunion ServerExtensibleEnum {\n  string,\n  EnumValue1: \"value1\",\n}\n\n@post\nop unionEnumName(@body body: ServerExtensibleEnum): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for PNG File Model\nDESCRIPTION: This TypeScript interface represents a PNG file by extending the built-in File type and requiring a contentType property of 'image/png'. It is used to enforce type safety when uploading files of a specific media type in the API client. No extra dependencies are required, but only PNG files should be supplied as input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PngFile extends File {\\n  contentType: \\\"image/png\\\";\\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Background Spector Test Server using npm\nDESCRIPTION: Executes the `spector-stop` script defined in the project's `package.json` to stop the spector test server previously started as a background process (likely via `npm run spector-start`). This command is part of the manual end-to-end testing workflow. Requires Node.js, npm, and the project test module configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run spector-stop\n```\n\n----------------------------------------\n\nTITLE: Using External References in OpenAPI with TypeSpec\nDESCRIPTION: The `@TypeSpec.OpenAPI.useRef` decorator allows specifying an external reference (`$ref`) to be used when emitting a TypeSpec `Model` or `ModelProperty` in the OpenAPI output. This is useful for linking to common definitions or schemas defined in separate files. It requires a single parameter, `ref`, which must be a string value containing the URI of the external reference (e.g., \"../../common.json#/components/schemas/Foo\"). This decorator targets `Model` or `ModelProperty`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/reference/decorators.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.useRef(ref: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Custom Request Validation and Error Throwing in TypeSpec Mock APIs in TypeScript\nDESCRIPTION: This example shows how to implement fully custom request validation logic by directly inspecting the req: MockRequest object. If a request header begins with a certain string, a ValidationError is thrown, allowing granular control over response logic in tests. Dependencies include access to ValidationError and the handler registration for TypeSpec's mock API.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/writing-mock-apis.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.post(\"/example\", \"Example\", (req) => {\n  if (req.headers.MyCustomHeader.startsWith(\"x-foo\")) {\n    throw new ValidationError(\n      \"MyCustomHeader shouldn't start with x-foo\",\n      null,\n      req.headers.MyCustomHeader,\n    );\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Space Before Parameter Lists in TypeSpec\nDESCRIPTION: Illustrates the rule of placing no space between an operation, decorator, or function name and its opening parenthesis `(`. The 'bad' examples incorrectly include a space, while the 'good' examples demonstrate the correct, space-free convention.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n// bad\nop list (filter: string): Pet[];\n\n// bad\n@doc (\"This is a pet\")\n\n// good\nop list(filter: string): Pet[];\n\n// good\n@doc(\"This is a pet\")\n```\n\n----------------------------------------\n\nTITLE: Example JSON Serialization with Encoded Names\nDESCRIPTION: Illustrates the JSON output for the `CertificateAttributes` model. The `notBefore` and `expires` fields use the names (`nbf`, `exp`) specified by the `@encodedName(\"application/json\", ...)` decorator, while `created` and `updated` retain their original names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/encoded-names.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"nbf\": 1430344421,\n  \"exp\": 2208988799,\n  \"created\": 1493938289,\n  \"updated\": 1493938291\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Generated Router in TypeScript\nDESCRIPTION: Shows how to import and instantiate a generated router function (e.g., `createTodoRouter` for a `Todo` service) from the output directory (`../tsp-output/@typespec/http-server-js/http/router.js`). The function requires implementations of the corresponding service interfaces (`users`, `todoItems`, `attachments`) as arguments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-js/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTodoRouter } from \"../tsp-output/@typespec/http-server-js/http/router.js\";\n\nconst router = createTodoRouter(users, todoItems, attachments);\n```\n\n----------------------------------------\n\nTITLE: Importing Playground Styles in TypeScript/JavaScript\nDESCRIPTION: Demonstrates the required method for importing CSS styles for the @typespec/playground component, introduced as a breaking change in version 0.1.0-alpha.3. This ensures the playground UI is styled correctly. This import should be added separately in the application using the playground component.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/playground/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport \\\"@typespec/playground/styles.css\\\";\n```\n\n----------------------------------------\n\nTITLE: Marking Offset for Pagination with @offset in TypeSpec\nDESCRIPTION: Demonstrates use of the @offset decorator to declare a pagination property specifying the number of items to be skipped. Useful for offset-based pagination APIs, combined with @pageItems and @pageSize.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_38\n\nLANGUAGE: typespec\nCODE:\n```\n@offset\n```\n\n----------------------------------------\n\nTITLE: Illustrating Empty Model to Void Body Behavior Change in TypeSpec (tsp)\nDESCRIPTION: Shows examples of TypeSpec operations (`b1`, `b2`, `b3`) that, after version 0.56.0, resolve to a `void` response body instead of an empty object (`{}`) when the model becomes empty after applying visibility (`@visibility(\"none\")`) or versioning (`@added`) filters. This is a breaking change.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_10\n\nLANGUAGE: tsp\nCODE:\n```\nop b1(): {};\nop b2(): {@visibility(\"none\") prop: string};\nop b3(): {@added(Versions.v2) prop: string};\n```\n\n----------------------------------------\n\nTITLE: Getting a Singleton Resource - TypeSpec - typespec\nDESCRIPTION: Declares an operation to retrieve the singleton instance. Returns either the Singleton resource or an Error. No input; context is implicit by singleton semantics. Useful for system-wide configuration resources or similar singletons.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_53\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.SingletonResourceOperations.get(): Singleton | Error\n```\n\n----------------------------------------\n\nTITLE: Migration of @discriminator Decorator Usage - Typespec\nDESCRIPTION: Presents the migration of the '@discriminator' decorator from the Rest library to the TypeSpec compiler core. Shows preferred usage after the change as well as the previously valid FQN usage, now replaced. Depends on TypeSpec language with either Rest library or new compiler. Decorates a model with discriminator property 'kind'. Recommended syntax is '@discriminator(\"kind\")'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-10-12.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nusing Rest;\n\n@disriminator(\"kind\")\nmodel Pet {}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Library Exports using package.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the `exports` field in a `package.json` file to define specific TypeSpec library entry points (`.tsp` files) using the `typespec` condition. This allows consumers of the library to import specific parts, like `./` or `./named`, resolving to the designated TypeSpec files (`./lib/main.tsp` or `./lib/named.tsp`). This feature was added in version 0.61.0.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\"exports\": {\n  \".\": {\n    \"typespec\": \"./lib/main.tsp\",\n  },\n  \"./named\": {\n    \"typespec\": \"./lib/named.tsp\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a TypeSpec Library using npm in Bash\nDESCRIPTION: Shows the standard command-line instruction for installing a published TypeSpec library using the Node Package Manager (npm). Replace `$packageName` with the actual name of the library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install $packageName\n```\n```\n\n----------------------------------------\n\nTITLE: Writing TypeSpec Library Tests with Node.js Test Runner in TypeScript\nDESCRIPTION: Demonstrates writing tests for a TypeSpec library using Node.js's built-in test module (`describe`, `it`, `beforeEach`). It utilizes the custom test runner (`createMyTestRunner`) created earlier to compile and diagnose TypeSpec code snippets within test cases. Includes examples for checking successful compilation and type properties, as well as verifying diagnostic errors.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { createMyTestRunner } from \"./test-host.js\";\nimport { describe, beforeEach, it } from \"node:test\";\n\ndescribe(\"my library\", () => {\n  let runner: BasicTestRunner;\n\n  beforeEach(async () => {\n    runner = await createMyTestRunner();\n  });\n\n  // Check everything works fine\n  it(\"does this\", async () => {\n    const { Foo } = await runner.compile(`\n      @test model Foo {}\n    `);\n    strictEqual(Foo.kind, \"Model\");\n  });\n\n  // Check diagnostics are emitted\n  it(\"errors\", async () => {\n    const diagnostics = await runner.diagnose(`\n       model Bar {}\n    `);\n    expectDiagnostics(diagnostics, { code: \"...\", message: \"...\" });\n  });\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Scenario Service Namespace with Spector Decorators in TypeSpec\nDESCRIPTION: This snippet demonstrates how to apply the @scenarioSpec decorator to a namespace in TypeSpec. The decorator configures boilerplate settings, such as service information (with the namespace as the title and version 1.0.0), default server (localhost:3000), and routing settings based on the provided parameter. Required prerequisites include having the Spector decorators available in the TypeSpec project. Input parameters include the namespace path (e.g., '/my-spec'). The snippet illustrates setting up a new service namespace quickly, with minimal boilerplate.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/decorators.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@scenarioSpec(\"/my-spec\")\nnamespace MySpec;\n```\n\n----------------------------------------\n\nTITLE: Using @operationId Decorator to Assign an Operation ID - TypeSpec\nDESCRIPTION: Applies the @operationId decorator to an operation, setting its OpenAPI operationId to 'download'. This aids code generator and documentation tools in uniquely identifying the operation, particularly useful for clients and SDKs where consistent naming is important.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/decorators.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n@operationId(\"download\")\nop read(): string;\n```\n\n----------------------------------------\n\nTITLE: Using 'oneOf' for Unions in JSON Schema with TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.oneOf` decorator instructs the emitter to use the `oneOf` keyword instead of the default `anyOf` when generating the JSON Schema for a TypeSpec `Union` or a model property representing a union. This enforces that the data must be valid against exactly one of the union's options. It takes no parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.oneOf\n```\n\n----------------------------------------\n\nTITLE: Correcting Tuple Value Assignment in TypeSpec Models (TSP)\nDESCRIPTION: Demonstrates the deprecated syntax for assigning tuple types as values in TypeSpec models (using `[]`) and the corrected syntax using the `#[]` array value notation. A codefix is available for automatic conversion.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_44\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Test {\n  // Deprecated\n  values: string[] = [\"a\", \"b\", \"c\"];\n  \n  // Correct\n  values: string[] = #[\"a\", \"b\", \"c\"];\n```\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated @projectedName with @encodedName in TypeSpec (Diff)\nDESCRIPTION: Illustrates the replacement of the deprecated `@projectedName` decorator with the `@encodedName` decorator in TypeSpec. This change involves specifying the content type (e.g., `\"application/json\"`) along with the desired encoded name.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_49\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n-@projectedName(\"json\", \"exp\")\n+@encodedName(\"application/json\", \"exp\")\n```\n```\n\n----------------------------------------\n\nTITLE: Defining GET Endpoint With Multiple Return Types - TypeSpec\nDESCRIPTION: This TypeSpec block defines a GET operation that can return either a Widget model or void, showing the use of union return types to represent multiple possible HTTP response scenarios (200 and 204). Includes full Widget model definition and marks the operation for testing. This guides code generation for handling multiple HTTP statuses.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-response.md#_snippet_5\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\n\n@test\nmodel Widget {\n  name: string;\n  age: int32;\n}\n\n@route(\"/widgets\")\n@tag(\"Widgets\")\ninterface Widgets {\n  @test @get read(): Widget | void;\n}\n```\n\n----------------------------------------\n\nTITLE: Recompiling TypeSpec Definitions (Bash)\nDESCRIPTION: Command to recompile the TypeSpec definition located in the current directory (`.`). Executing this command updates generated files such as routes, interfaces, and models based on the latest changes in the TypeSpec definitions, while intentionally preserving existing implementation files containing custom business logic.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-javascript.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile .\n```\n\n----------------------------------------\n\nTITLE: Displaying Starlight Project File Structure (Markdown)\nDESCRIPTION: This Markdown snippet visually depicts the default folder and file organization for a new Starlight+Astro project, aiding in understanding project layout. No dependencies are required to view this diagram. It identifies main directories like 'public', 'src', and configuration files, serving as reference for contributors and maintainers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/README.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n.\\n├── public/\\n├── src/\\n│   ├── assets/\\n│   ├── content/\\n│   │   ├── docs/\\n│   │   └── config.ts\\n│   └── env.d.ts\\n├── astro.config.mjs\\n├── package.json\\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Declaring Tag Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@tag` decorator. This decorator attaches a tag string to a Namespace, Interface, or Operation. Multiple `@tag` decorators can be applied to add multiple tags.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_65\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@tag(tag: valueof string)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the NotFoundResponse Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.NotFoundResponse` model. This represents an HTTP 404 Not Found response, indicating that the server could not find the requested resource. While the snippet only shows the model definition, it implicitly corresponds to the 404 status code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_27\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.NotFoundResponse\n```\n\n----------------------------------------\n\nTITLE: Getting an Extension Resource Instance - TypeSpec - typespec\nDESCRIPTION: Specifies the get operation for ExtensionResourceInstanceOperations, enabling retrieval of a specific extension resource instance. The function returns either the Extension definition or Error, depending on whether the resource is found or accessible. Input parameters are not required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceInstanceOperations.get(): Extension | Error\n```\n\n----------------------------------------\n\nTITLE: Declaring a Protobuf Message using @message Decorator in TypeSpec\nDESCRIPTION: This TypeSpec snippet shows the syntax for the `@TypeSpec.Protobuf.message` decorator. It explicitly marks a model as a Protobuf message, forcing the emitter to check and emit it, even if it wouldn't be detected automatically (e.g., by having `@field` on all properties or being used in a service operation). It takes no parameters and targets an empty block (`{}`), implying it decorates the model itself.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Protobuf.message\n```\n\n----------------------------------------\n\nTITLE: Building Java Client Generator with Maven - Bash\nDESCRIPTION: This command compiles the Java client generator using Maven from within the packages/http-client-java/generator directory. It assumes that both Java 17 (or newer) and Maven are installed. The process will clean existing build artifacts and compile the current source files, preparing the project for later testing or use. No additional parameters are required, and the output will be compiled bytecode located in the target directory of the Maven project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean compile\n```\n\n----------------------------------------\n\nTITLE: Defining Parent and Subclient Auth Schemes in TypeSpec\nDESCRIPTION: This TypeSpec code defines a service namespace `Test` annotated with `@useAuth(BasicAuth)`, indicating Basic Authentication is required by default. It contains a root-level GET operation `valid`. A sub-namespace `Sub` is defined under the `/sub` route and explicitly annotated with `@useAuth(NoAuth)`, overriding the parent's authentication scheme. This sub-namespace contains a GET operation `put` that does not require authentication.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/sub_client_override.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \"Test Service\" })\n@useAuth(BasicAuth)\nnamespace Test;\n\n@route(\"/\")\n@get\nop valid(): NoContentResponse;\n\n@useAuth(NoAuth)\n@route(\"/sub\")\nnamespace Sub {\n  @get\n  op put(): NoContentResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-line String Literal in TypeSpec\nDESCRIPTION: Illustrates how to define a multi-line string literal using triple double quotes (`\"\"\"`) in TypeSpec. The opening `\"\"\"` must be followed by a newline, and the closing `\"\"\"` must be preceded by one.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/type-literals.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nalias Str = \"\"\"\n  This is a multi line string\n   - opt 1\n   - opt 2\n  \"\"\";\n```\n\n----------------------------------------\n\nTITLE: Testing a Code Fix with expectCodeFixOnAst (TypeSpec/TypeScript)\nDESCRIPTION: This test verifies that the change identifier code fix correctly transforms the model's identifier from 'number' to 'int32'. It uses expectCodeFixOnAst from @typespec/compiler/testing to apply the code fix at a specific cursor in the source code. The test asserts that the node is an Identifier and then applies the code fix, expecting the source to be updated according to the fix's logic.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/codefixes.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { strictEqual } from \"assert\";\nimport { createChangeIdentifierCodeFix } from \"./change-identifier.codefix.js\";\nimport { SyntaxKind } from \"@typespec/compiler\";\nimport { expectCodeFixOnAst } from \"@typespec/compiler/testing\";\n\ndescribe(\"CodeFix: change-identifier\", () => {\n  it(\"it change identifier\", async () => {\n    await expectCodeFixOnAst(\n      `\n      model Foo {\n        a: ┆number;\n      }\n    `,\n      (node) => {\n        strictEqual(node.kind, SyntaxKind.Identifier);\n        return createChangeIdentifierCodeFix(node, \"int32\");\n      },\n    ).toChangeTo(`\n      model Foo {\n        a: int32;\n      }\n    `);\n  });\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using the @madeOptional Decorator in TypeSpec Example\nDESCRIPTION: This TypeSpec example demonstrates applying the `@madeOptional` decorator to the `nickname` property within the `Foo` model. It indicates that `nickname` became optional starting from version `Versions.v2`. Note the use of `?` to mark the property as optional in the definition as well.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_6\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Foo {\n  name: string;\n\n  @madeOptional(Versions.v2)\n  nickname?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Body Operations - TypeSpec - tsp\nDESCRIPTION: Defines two POST operations, 'set' and 'omit', each accepting an optional 'BodyModel' instance as the request body. Dependencies include the TypeSpec syntax and the declaration of the 'BodyModel' containing a single string property. Both operations return a 'NoContentResponse'. The '@body' decorator marks the parameter as the request body, and the question mark indicates the parameter is optional. This specification is intended for code generation or interface design in API development workflows.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/optional-request-body.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\nmodel BodyModel {\n  name: string;\n}\n\n@route(\"/set\")\n@post\nop set(@body body?: BodyModel): NoContentResponse;\n\n@route(\"/omit\")\n@post\nop omit(@body body?: BodyModel): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Formatting Model Property Spacing with Decorators/Comments (Correct) in TypeSpec\nDESCRIPTION: Demonstrates the correct practice ('good') of wrapping model properties that have preceding decorators or comments (line or block) with blank newlines above them to enhance visual separation and readability.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_12\n\nLANGUAGE: tsp\nCODE:\n```\n// good\nmodel Foo {\n  one: string;\n\n  @doc(\"Foo\")\n  two: string;\n\n  // line comment\n  three: string;\n\n  /**\n   *  Block comment\n   */\n  four: string;\n  \n  five: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec REST Extension Using npm - Bash\nDESCRIPTION: Installs the @typespec/rest package directly into a TypeSpec specification project. The command downloads the package and makes its REST protocol decorators, interfaces, and models available for immediate use. No additional parameters are needed and the output is an updated node_modules directory with the module installed. Requires Node.js and npm to be pre-installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/rest\n\n```\n\n----------------------------------------\n\nTITLE: Defining XML Attribute and Text Content in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a `BlobName` model where the `language` property is marked as an XML attribute using `@Xml.attribute`, and the `content` property is marked to represent the element's text content using `@Xml.unwrapped`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_48\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel BlobName {\n  @Xml.attribute language: string;\n  @Xml.unwrapped content: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Deserializing Response for Continuation Token Paging in TypeScript\nDESCRIPTION: This TypeScript function `linkDeserialize` handles the deserialization of the HTTP response for the `link` operation (continuation token pattern). It checks for a successful status code (200) and JSON content type, then extracts and transforms the `pets` array from the response body. It throws a `RestError` if the response is not successful or doesn't match expectations. It also provides a hook for an `onResponse` callback.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts function linkDeserialize\nfunction linkDeserialize(response: PathUncheckedResponse, options?: LinkOptions) {\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return {\n      pets: jsonArrayPetToApplicationTransform(response.body.pets),\n    }!;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using the @removed Decorator in TypeSpec (tsp)\nDESCRIPTION: Provides examples of applying the `@removed` decorator to mark an operation (`removedInV2`), a model (`AlsoRemovedInV2`), and a model property (`removedInV3`) as removed in specific API versions (`Versions.v2`, `Versions.v3`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_7\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@removed(Versions.v2)\nop removedInV2(): void;\n\n@removed(Versions.v2)\nmodel AlsoRemovedInV2 {}\n\nmodel Foo {\n  name: string;\n\n  @removed(Versions.v3)\n  removedInV3: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: OpenAPI3 Schema for Nested Model with Custom Property Name - YAML\nDESCRIPTION: Given a property-level @encodedName, this OpenAPI3 YAML demonstrates how the xml.name property specifies the serialized XML tag for the nested reference, supporting consistent schema and serialization.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_32\n\nLANGUAGE: YAML\nCODE:\n```\nBook:\n  type: object\n  properties:\n    author:\n      allOf:\n        - $ref: \"#/components/schemas/Author\"\n      xml:\n        name: \"xml-author\"\nAuthor:\n  type: object\n  properties:\n    name:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Dictionary Property in TypeSpec\nDESCRIPTION: Defines a model named Widget with a property 'prop' as a dictionary (Record) mapping keys to int32 values. The accompanying operation 'foo' returns a Widget. Requires familiarity with TypeSpec modeling syntax; no external dependencies are noted. Input: none directly, but used in model-driven code generation. Output: Schema definitions for service modeling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/dictionary-properties.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\nnamespace Test;\\n\\nmodel Widget {\\n  prop: Record<int32>;\\n}\\nop foo(): Widget;\n```\n\n----------------------------------------\n\nTITLE: Defining the @renamedFrom Decorator in TypeSpec\nDESCRIPTION: Defines the syntax for the `@TypeSpec.Versioning.renamedFrom` decorator. This decorator indicates that a target element (Model, Property, Operation, etc.) has been renamed. It takes two parameters: `version` (EnumMember) specifying when the rename occurred, and `oldName` (string) indicating the previous name.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Versioning.renamedFrom(version: EnumMember, oldName: valueof string)\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Explicit Request Bodies with @body Decorator - TypeSpec\nDESCRIPTION: Demonstrates usage of the @body decorator to indicate which parameter is the HTTP request body in a TypeSpec operation. This controls whether the request body is wrapped (object style) or is the type directly. Shows both required and optional body usage and the impact on the resulting OpenAPI schema.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n// The request body will be a JSON object that _only_ contains the User at the top level.\\nop createUser(@body user: User): User;\\n\\nop updateUser(@path id: string, @body user?: User): User;\n```\n\n----------------------------------------\n\nTITLE: Specifying Authentication for a Service Namespace - Typespec\nDESCRIPTION: Illustrates the usage of @useAuth decorator for enforcing authentication (here, BasicAuth) at the namespace level. This attaches an authentication scheme to the API, modifying generated OpenAPI security sections. Requires an authentication provider (e.g., BasicAuth) as input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_24\n\nLANGUAGE: typespec\nCODE:\n```\n@service\n@useAuth(BasicAuth)\nnamespace PetStore;\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Service Endpoints - Typespec\nDESCRIPTION: Demonstrates multiple @server decorators applied to a namespace to designate several endpoints, including parameterized endpoints. This shows that different configurations (standard and private/project-based) can coexist on a single service namespace. Dependencies include @service and namespace constructs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_19\n\nLANGUAGE: typespec\nCODE:\n```\n@service\n@server(\"https://example.com\", \"Standard endpoint\")\n@server(\n  \"https://{project}.private.example.com\",\n  \"Private project endpoint\",\n  {\n    project: string,\n  }\n)\nnamespace PetStore;\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Flow Types for TypeSpec Authentication Models\nDESCRIPTION: Provides an enumeration in TypeSpec that describes potential OAuth2 flow types, such as 'authorizationCode', 'implicit', 'password', and 'clientCredentials'. It is used to annotate or model authentication requirements on HTTP APIs that support OAuth2 specification. This primitive type does not depend on external modules.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_41\n\nLANGUAGE: typespec\nCODE:\n```\nenum TypeSpec.Http.OAuth2FlowType\n```\n\n----------------------------------------\n\nTITLE: Applying Added Version Decorator with Enum Reference in TypeSpec\nDESCRIPTION: Shows the current required method for applying the `@added` versioning decorator in TypeSpec. It requires referencing a member of the previously defined versioning enum (e.g., `Versions.v2022_01_15_preview`) instead of using a string literal.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-07-08.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n// After\n@added(Versions.v2022_01_15_preview)\nmodel Foo {}\n```\n\n----------------------------------------\n\nTITLE: Using 'extends Record<T>' for Additional Properties in TypeSpec\nDESCRIPTION: Shows the use of `extends Record<string>` to define a model `Person` that inherits from `Record<string>`. Similar to `is Record<T>`, this implies all properties should conform to the `Record`'s value type (`string`). The explicitly defined `name` property is compatible. While valid, using `is Record<T>` is generally preferred as `extends` implies a stronger semantic relationship.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_7\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Person extends Record<string> {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Record Extension - TypeSpec\nDESCRIPTION: Defines a TypeSpec model named 'Widget' that extends 'Record<unknown>' to support arbitrary additional properties, while documenting required and optional canonical properties. An operation 'foo' is declared to return this model type. Requires a TypeSpec compilation environment. Parameters: 'name' (string), 'age' (int32), 'optional' (optional string). Output: 'Widget' model object, supporting both known and unknown fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/additional-properties/extends.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\nnamespace Test;\n\nmodel Widget extends Record<unknown> {\n  name: string;\n  age: int32;\n  optional?: string;\n}\nop foo(): Widget;\n```\n\n----------------------------------------\n\nTITLE: Configuring Linter Rules in tspconfig.yaml\nDESCRIPTION: This YAML snippet demonstrates how to configure linter rules in `tspconfig.yaml`. It uses `extends` to inherit rulesets (e.g., `@typespec/best-practices/recommended`), `enable` to explicitly turn on specific rules, and `disable` to turn off rules (potentially inherited) with an optional reason.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nlinter:\n  extends: # Extend `recommended` ruleset from @typespec/best-practices library\n    - \"@typespec/best-practices/recommended\"\n\n  enable: # Explicitly enable some rules\n    \"@typespec/best-practices/no-x\": true\n\n  disable: # Disable some rules defined in one of the ruleset extended.\n    \"@typespec/best-practices/no-y\": \"This rule cannot be applied in this project because X\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Event Payload Content Type with `@contentType` in TypeSpec\nDESCRIPTION: Illustrates using `@contentType` alongside the `@data` decorator on a model property (`value`) within an event structure (a variant of the `MixedEvents` union). This specifies that the `value` field is the event payload and its content type is \"text/plain\".\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/events/reference/decorators.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@events\nunion MixedEvents {\n  {\n    done: true,\n  },\n  {\n    done: false,\n    @data @contentType(\"text/plain\") value: string,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Array Models with TypeSpec\nDESCRIPTION: Declares the Bar model with bar_value (string), the Foo model with a my_values array of Bar, and an operation foo that returns Foo. Demonstrates support for complex nested structures in TypeSpec. Requires a TypeSpec system; inputs are schema definitions, outputs are type contract descriptions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/arrays.md#_snippet_7\n\nLANGUAGE: TypeSpec\nCODE:\n```\nmodel Bar {\n  bar_value: string;\n}\n\nmodel Foo {\n  my_values: Bar[];\n}\nop foo(): Foo;\n```\n\n----------------------------------------\n\nTITLE: Defining Float Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines a `float` scalar for general decimal value fields, providing native support for fractional values in models. No explicit bounds are set; used per modeling requirements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_35\n\nLANGUAGE: typespec\nCODE:\n```\nscalar float\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Model with Field Decorator - TypeSpec\nDESCRIPTION: This snippet defines a TypeSpec model with a field using the @field decorator to specify the Protobuf field index. The model is eligible for conversion to a Protobuf message if all fields use proper decorators. Dependencies include the TypeSpec environment and Protobuf emitter. Input is a model definition, and the output will be a Protobuf message if emission rules are satisfied.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/guide.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TestMessage {\n  @field(1) n: int32;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Dictionary of Arrays Property in TypeSpec\nDESCRIPTION: Defines a Widget model with a property 'prop' as a Record where values are arrays of int32. The model also includes an operation returning Widget. Requires TypeSpec model syntax; use cases include representing complex keyed collections where each item is a list.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/dictionary-properties.md#_snippet_2\n\nLANGUAGE: TypeSpec\nCODE:\n```\nnamespace Test;\\nmodel Widget {\\n  prop: Record<int32[]>;\\n}\\nop foo(): Widget;\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec C# Service Generator as Peer Dependency - Bash\nDESCRIPTION: This command installs the @typespec/http-server-csharp package as a peer dependency using the --save-peer argument in npm, typically within a shared library or plugin context for TypeSpec projects. The process requires npm version supporting --save-peer. Executing this command updates the package.json file's 'peerDependencies' field, indicating that the package should be provided by the consuming project. Expected output is an updated package.json and installed node_modules entry if this is a root workspace installation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-csharp/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/http-server-csharp\n```\n\n----------------------------------------\n\nTITLE: Using the @added Decorator in TypeSpec Examples\nDESCRIPTION: These TypeSpec examples illustrate how to apply the `@added` decorator to an operation (`addedInV2`), a model (`AlsoAddedInV2`), and a model property (`addedInV3`). It signifies that these elements were introduced in the specified versions (`Versions.v2` or `Versions.v3`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n@added(Versions.v2)\nop addedInV2(): void;\n\n@added(Versions.v2)\nmodel AlsoAddedInV2 {}\n\nmodel Foo {\n  name: string;\n\n  @added(Versions.v3)\n  addedInV3: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Response Content-Type Header (TypeSpec)\nDESCRIPTION: Illustrates how to specify the Content-Type header in the response by annotating the return model with @header. The response structure includes both the contentType header (set to 'image/png') and the image body as bytes, guiding the TypeSpec HTTP layer to produce the correct MIME type header. This pattern is intended for endpoints returning binary image data. Requires TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/content-types.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nop downloadImage(): {\n  @header contentType: \"image/png\";\n  @body image: bytes;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Auto Route with Custom Segment Separator in TypeSpec\nDESCRIPTION: This TypeSpec example showcases defining an operation `get` with a custom segment separator. It utilizes `@autoRoute`, `@segment(\\\"pets\\\")`, and `@path` similarly to the standard auto route, but adds `@segmentSeparator(\\\":\\\")` to specify ':' as the separator between segments, resulting in the route ':pets/{id}'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/cheat-sheet.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@autoRoute op get(@segment(\\\"pets\\\") @path @segmentSeparator(\\\":\\\") id: string): void\n```\n\n----------------------------------------\n\nTITLE: Constraining Template Parameters to Shape Requirements in TypeSpec\nDESCRIPTION: Applies a constraint requiring a model shape for the template parameter. Enforces that 'Type' must include a 'name' property of type string. Useful for ensuring structural compatibility in generic code. No external dependencies. Input: a model; Output: the alias if constraint is met.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/templates.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n// Expect Type to be a model with property name: string\nalias Foo<Type extends {name: string}> = Type;\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaced Models in TypeSpec Main File - TypeSpec\nDESCRIPTION: This TypeSpec code defines a Person model in a namespace matching the library name after importing the compiled JavaScript entrypoint. This pattern is recommended for exposing TypeSpec types to library consumers and provides clear logical grouping.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"../dist/index.js\";\n\nnamespace MyLibrary;\nmodel Person {\n  name: string;\n  age: uint8;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Node.js Dependencies using npm update\nDESCRIPTION: Updates project dependencies using npm to the latest versions permitted by the version ranges specified in `package.json`. This command modifies the `package-lock.json` file and can introduce newer dependency versions, potentially affecting reproducibility if not managed carefully.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/reproducibility.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm update\n```\n\n----------------------------------------\n\nTITLE: Configuring Unsupported Scenarios in Spector (YAML)\nDESCRIPTION: Shows the structure of a `spector-config.yaml` file used to specify scenarios that are not supported by a particular TypeSpec generator. This allows `spector` to exclude these scenarios during testing. The `unsupportedScenarios` key holds a list of scenario names (e.g., 'Foo_Bar') to ignore.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/using-spector.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# List of unsupported scenarios\nunsupportedScenarios:\n  - Foo_Bar\n```\n\n----------------------------------------\n\nTITLE: Defining Create Operation With Model - TypeSpec\nDESCRIPTION: Defines a 'Widget' model with fields 'id', 'total_weight', 'color', and optional 'is_required' within a 'Test' namespace. Declares a 'foo' operation accepting a variable number of Widget inputs via POST and returning void. Requires the TypeSpec compiler and @service decorator; designed to describe a RESTful API structure for automatic client/server generation. Expects object data as parameters and returns no value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/create-operation.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service\\nnamespace Test;\\nmodel Widget {\\n  id: string;\\n  total_weight: int32;\\n  color: \\\"red\\\" | \\\"blue\\\";\\n  is_required?: boolean;\\n}\\n\\n@post op foo(...Widget): void;\n```\n\n----------------------------------------\n\nTITLE: Declaring HTTP Service and Operation with TypeSpec - TypeSpec\nDESCRIPTION: Defines the service namespace, a simple Widget model, and a foo operation returning the Widget in TypeSpec. It establishes the contract for the HTTP API and is the source for code generation. No dependencies beyond TypeSpec itself are required. The model demonstrates basic scalar and enum types, while the operation specifies no parameters or body. Resulting code in other languages is generated from this definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service\nnamespace Test;\nmodel Widget {\n  id: string;\n  total_weight: int32;\n  color: \"red\" | \"blue\";\n}\n\nop foo(): Widget;\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency References in package.json - JSON\nDESCRIPTION: This snippet demonstrates how to update the dependencies section of a package.json file to include the new '@typespec/asset-emitter' package. This update is necessary due to a breaking change where the emitter framework dependency was moved to a dedicated package. The key parameters are the package name as the key and its version as the value. The input is a partial package.json file using unified diff syntax and outputs the expected state after the update. Requires npm or yarn to install dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```diff lang=json title=package.json\\n\"dependencies\": {\\n+   \"@typespec/asset-emitter\": \"^0.68.0\"\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Using the @versioned Decorator in TypeSpec Example\nDESCRIPTION: This TypeSpec example shows the `@versioned` decorator applied to the `MyService` namespace. It links this namespace to the `Versions` enum, indicating that `MyService` has versions `v1`, `v2`, and `v3`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_19\n\nLANGUAGE: tsp\nCODE:\n```\n@versioned(Versions)\nnamespace MyService;\nenum Versions {\n  v1,\n  v2,\n  v3,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Generated Create Operation in TypeScript (Function, TypeScript)\nDESCRIPTION: Implements the 'create' asynchronous function for the TestClient, mapping the Widget parameter to JSON, extracting headers, and handling HTTP response status. Requires dependencies such as TestClientContext, jsonWidgetToTransportTransform, OperationOptions, and error handling utilities. The function receives a client context, Widget object, and an optional options bag. It formats headers from Widget (including the optional 'foo'), serializes the widget model, and throws errors for non-204 responses. No direct output except error throwing and optional side-effect through 'onResponse'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/with_body_root.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function create(\n  client: TestClientContext,\n  widget: Widget,\n  options?: CreateOptions,\n): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      ...(widget.foo && { foo: widget.foo }),\n    },\n    body: jsonWidgetToTransportTransform(widget),\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the @versioned Decorator Syntax in TypeSpec\nDESCRIPTION: This snippet shows the syntax for the `@versioned` decorator. Applied to a `Namespace`, it indicates that the namespace is versioned and specifies the `Enum` (`versions`) that defines the available versions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Versioning.versioned(versions: Enum)\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript API Client Context with Optional Endpoint\nDESCRIPTION: This TypeScript function creates a TestClientContext, using a provided endpoint option or a default endpoint if not supplied. It constructs a params object, resolves the endpoint by token replacement, and initializes the client using getClient. The function expects options conforming to TestClientOptions (optionally containing an endpoint), and returns the created client context. Dependencies include getClient and the shape of TestClientOptions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/server/default_url.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createTestClientContext(options?: TestClientOptions): TestClientContext {\\n  const params: Record<string, any> = {\\n    endpoint: options?.endpoint ?? \\\"https://example.org/api\\\",\\n  };\\n  const resolvedEndpoint = \\\"{endpoint}\\\".replace(/\\{([^}]+)\\}/g, (_, key) =>\\n    key in params\\n      ? String(params[key])\\n      : (() => {\\n          throw new Error(`Missing parameter: ${key}`);\\n        })(),\\n  );\\n  return getClient(resolvedEndpoint, {\\n    ...options,\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Emitter Configuration with Options - YAML\nDESCRIPTION: Demonstrates how to specify both usage and customization of the @typespec/http-server-csharp emitter via a YAML configuration file. The emitter is enabled in the 'emit' array, and customized behaviors or parameters are set under the 'options' section. Replace 'option' and 'value' with actual supported configuration keys and values as documented above. Proper YAML formatting is critical for correct parsing.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-csharp/reference/emitter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-server-csharp\"\noptions:\n  \"@typespec/http-server-csharp\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Applying Basic Authentication in TypeSpec\nDESCRIPTION: Uses the `@useAuth` decorator with the predefined `BasicAuth` security definition to specify that the decorated scope (e.g., the entire API or a specific operation) requires HTTP Basic Authentication.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_18\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@useAuth(BasicAuth)\n```\n\n----------------------------------------\n\nTITLE: Defining a Scalar Type in TypeSpec\nDESCRIPTION: Demonstrates the declaration of a new scalar type named `uuid` using the `scalar` keyword. This type extends the built-in `string` scalar, inheriting its behavior while providing a distinct semantic type. This replaces the previous pattern of using `model` for scalar-like types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nscalar uuid extends string;\n```\n\n----------------------------------------\n\nTITLE: Defining 64-bit Float Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines a `float64` scalar for 64-bit floating point values, ensuring larger precision and value range for scientific or high-precision models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_37\n\nLANGUAGE: typespec\nCODE:\n```\nscalar float64\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Decorator in TypeScript\nDESCRIPTION: Provides a TypeScript implementation for a decorator function named `$logType`. It accepts the `DecoratorContext`, the `target` TypeSpec element, and the `name` string argument defined in its signature. The function logs the kind of the target type prefixed by the provided name. It requires importing `DecoratorContext` and `Type` from `@typespec/compiler`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// model.ts\nimport type { DecoratorContext, Type } from \"@typespec/compiler\";\n\nexport function $logType(context: DecoratorContext, target: Type, name: string) {\n  console.log(name + \": \" + target.kind);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Driven Pagination with Continuation Token (HTTP) in TypeSpec\nDESCRIPTION: Defines server-driven pagination using a continuation token for an HTTP service. The `@continuationToken` decorator is used on both the input parameter (`token`, marked as `@query`) to receive the token for the next page request and the output property (`nextToken`) to provide the token for the subsequent page. This pattern relies on opaque tokens provided by the server.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/pagination.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@list op listPets(@query @continuationToken token?: string): {\n  @pageItems pets: Pet[];\n  @continuationToken nextToken?: string;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Interface for Base Dinosaur Model\nDESCRIPTION: This TypeScript code shows the generated interface `Dinosaur` corresponding to the TypeSpec base model. It includes the `size` property typed as `number` and the discriminator property `kind` typed as `string`. This interface serves as the base type for polymorphic structures in TypeScript.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/inheritance_discriminator.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/models/models.ts interface Dinosaur\nexport interface Dinosaur {\n  size: number;\n  kind: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec Project - Shell Command\nDESCRIPTION: This snippet provides the shell command to compile a TypeSpec project located in the current directory. It depends on the TypeSpec CLI (tsp) installed in the environment and expects a valid TypeSpec project structure. Running the command triggers code generation via the specified emitter(s), and any plugins configured in the package.json, such as the logging-plugin, are also applied. The key parameter is the source directory, which is represented by the dot (.).\nSOURCE: https://github.com/microsoft/typespec/blob/main/docs/samples/client/csharp/SampleService/readme.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntsp compile .\n```\n\n----------------------------------------\n\nTITLE: Example Usage: Read Transformation with Visibility Filtering (Typespec)\nDESCRIPTION: Illustrates filtering a Dog model to produce a ReadDog model with only the id and name fields, excluding secretName. This example clarifies how property visibility affects data returned from read operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Dog {\n  @visibility(Lifecycle.Read)\n  id: int32;\n\n  @visibility(Lifecycle.Create, Lifecycle.Update)\n  secretName: string;\n\n  name: string;\n}\n\n// This model has the `id` and `name` fields, but not `secretName`.\nmodel ReadDog is Read<Dog>;\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Enhanced TypeSpec Error Output with Instantiation Trace - Bash\nDESCRIPTION: This bash snippet shows the TypeSpec compiler's error and warning output for a failed template instantiation, referencing both the source of the error and the call site. It demonstrates the improved diagnostic capability by including both the original error location and context about where the template was instantiated. \nPrerequisites: Compiling the enhanced TypeSpec example above. \nOutputs: Human-readable error/warning messages in the terminal. \nLimitation: Output format may vary between compiler versions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-11-05.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmain.tsp:2:6 - error spread-model: Cannot spread properties of non-model type.\n> 2 |   ...T;\n    |      ^\n  main.tsp:6:9 - occurred while instantiating template\n  > 6 |   prop: Spreading<string>;\n      |         ^^^^^^^^^^^^^^^^^\n```\n\n----------------------------------------\n\nTITLE: Generating Bar Interface for Complex Array in TypeScript\nDESCRIPTION: TypeScript interface definition for Bar, mapping bar_value to barValue camelCase for usage in application models. No runtime dependencies; input is generated from TypeSpec. Output strictly describes Bar objects in memory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/arrays.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Bar {\n  barValue: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting All TypeSpec Files via CLI (Bash)\nDESCRIPTION: This command uses the `tsp format` CLI tool to find and format all files matching the `**/*.tsp` glob pattern within the current project directory and its subdirectories.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/formatter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp format \"**/*.tsp\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Object Values with TypeSpec - TypeSpec Language\nDESCRIPTION: Declares a constant variable with an object value, using the new '#{}' syntax introduced in this release of TypeSpec. The example demonstrates nesting object values for complex data modeling, showcasing how composite literals can be directly assigned to constants. No external dependencies are needed; this is the new canonical approach for value declaration in TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nconst user = #{ name: \"Bob\", age: 48, address: #{ city: \"London\" } };\n```\n\n----------------------------------------\n\nTITLE: Capturing TypeSpec Template Error Output - Bash\nDESCRIPTION: This bash snippet displays the error message produced by the TypeSpec compiler when compiling the previous template that spreads a non-model type ('string'). It pinpoints the location and cause of the error in the TypeSpec file, including a pointer to the erroneous line and column. No specific prerequisites are required to interpret this output. \nInput: Running TypeSpec over the aforementioned .tsp file. \nOutput: Terminal error message. \nLimitation: Does not include instantiation trace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-11-05.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmain.tsp:2:6 - error spread-model: Cannot spread properties of non-model type.\n> 2 |   ...T;\n    |      ^\n```\n\n----------------------------------------\n\nTITLE: Illustrating Previous @extension Behavior with Scalars in TSP\nDESCRIPTION: Shows the behavior of the `@extension` decorator prior to TypeSpec 0.59.0 when used with a scalar value like a string. In older versions, this would emit a JSON schema corresponding to the scalar type. However, post-0.59.0, this syntax treats the scalar as a raw value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/CHANGELOG.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\\n@extension(\"x-example\", \"foo\")\\nmodel Foo {}\\n```\n```\n\n----------------------------------------\n\nTITLE: Nested Emitter Option Structures in TypeSpec Config - YAML - yaml\nDESCRIPTION: Illustrates a nested option object under 'options' for an emitter, enabling hierarchical emitter configuration. Demonstrates the use of dot notation for deep-setting values from the CLI. No additional tooling is required beyond the TypeSpec compiler.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n  emitter-sub-folder:\n    sub-folder: bar\n\n```\n\n----------------------------------------\n\nTITLE: Serializing `Http.File` as JSON within a Containing Model in TypeSpec\nDESCRIPTION: Defines a TypeSpec model `Example` containing an optional `Http.File` property (`attachment`). Shows an operation `getExample` that returns this model. Explains that when a `File` is a property within another model serialized as JSON, the `File` itself is represented as a JSON object with `contentType`, `filename`, and base64-encoded `contents`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Example {\n  id: string;\n  attachment?: File;\n}\n\nop getExample(@path id: string): Example;\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generated TypeScript Client for the Baz Namespace\nDESCRIPTION: Implements a TypeScript client class (BazClient) designed to match the last namespace segment. The constructor accepts an endpoint and configuration options, creating an internal context using createBazClientContext. The asynchronous 'get' method maps directly to the get operation defined in TypeSpec, wrapping the corresponding context call. Dependencies include BazClientContext, BazClientOptions, and a get function. Inputs are optional configuration objects, with the method returning results from the get API.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/dotted_namespace.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BazClient {\\n  #context: BazClientContext;\\n\\n  constructor(endpoint: string, options?: BazClientOptions) {\\n    this.#context = createBazClientContext(endpoint, options);\\n  }\\n  async get(options?: GetOptions) {\\n    return get(this.#context, options);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Installing a Specific npm Package using Shell\nDESCRIPTION: This shell command installs a specific package, represented by 'x', as a local dependency in the current project. It serves as an alternative solution for the TypeSpec 'Cannot find package' error if updating the global npm version is not feasible, allowing manual installation of the required peer dependency ('x'). Replace 'x' with the actual missing package name.\nSOURCE: https://github.com/microsoft/typespec/blob/main/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install x\n```\n\n----------------------------------------\n\nTITLE: Displaying Migration Tool Help - TypeSpec Migrate CLI Options - Bash\nDESCRIPTION: This snippet shows the bash command to print available options for the TypeSpec migration tool. It is useful when running migrations from a non-standard directory or without a package.json specifying compiler versions. Requires: Node.js and @typespec/migrate npm package. Output is a help text describing CLI arguments and usage constraints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-04-11.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @typespec/migrate --help\n\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Documentation for OpenAPI - TypeSpec\nDESCRIPTION: Shows how parameter documentation in TypeSpec (using JSDoc @param) is incorporated into the OpenAPI parameter descriptions. Relevant for generating user-friendly, self-documenting API contracts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n/**\\n * Retrieves the User by their unique identifier.\\n *\\n * @param id The user's unique identifier.\\n */\\nop getUser(@path id: string): User;\n```\n\n----------------------------------------\n\nTITLE: Linking External Documentation with @externalDocs in TypeSpec\nDESCRIPTION: This example applies the `@externalDocs` decorator to the `listPets` operation. It provides a URL to a markdown file and a description explaining that the link leads to more detailed information about using the operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/README.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@externalDocs(\n  \"https://example.com/detailed.md\",\n  \"Detailed information on how to use this operation\"\n)\nop listPets(): Pet[];\n```\n\n----------------------------------------\n\nTITLE: Listing New Multi-Service API Functions/Interfaces in TypeScript\nDESCRIPTION: Shows the new TypeScript interfaces (`ServiceDetails`, `Service`) and functions (`listServices`, `getService`, `isService`, `addService`) introduced in the TypeSpec compiler API to support multiple services within a single specification. These replace the deprecated single-service accessor functions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ServiceDetails {\n  title?: string;\n  version?: string;\n}\nexport interface Service extends ServiceDetails {\n  type: Namespace;\n}\n\nexport function listServices(program: Program): Service[];\nexport function getService(program: Program, namespace: Namespace): Service | undefined;\nexport function isService(program: Program, namespace: Namespace): boolean;\n\nexport function addService(program: Program, type: Namespace, details?: ServiceDetails);\n```\n\n----------------------------------------\n\nTITLE: Preserving Old @extension Scalar Behavior using typeof in TSP\nDESCRIPTION: Demonstrates how to maintain the pre-0.59.0 behavior of the `@extension` decorator for scalar values in newer TypeSpec versions. By using `typeof \"foo\"`, the decorator is instructed to emit the JSON schema for the string type, rather than embedding the raw string value \"foo\".\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/CHANGELOG.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\\n@extension(\"x-example\", typeof \"foo\")\\nmodel Foo {}\\n```\n```\n\n----------------------------------------\n\nTITLE: Model Extension and Record Assignability Edge Case in TypeSpec\nDESCRIPTION: Demonstrates why a model instance with all properties matching a Record<int32> type is not assignable if the model can be extended further, as extension could introduce non-int32 properties. Dependencies: TypeSpec Record<T> support. Inputs: alias and model definitions; Outputs: field-level and model-level assignability checks. Limitation: assignability is blocked if model can be extended with incompatible types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/type-relations.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nalias T = Record<int32>;\\nmodel S {\\n  foo: 123;\\n  bar: 456;\\n}\n```\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Foo is S {\\n  otherProp: string;\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a TypeSpec Library (createTypeSpecLibrary) - TypeScript\nDESCRIPTION: Defines and exports a base TypeSpec library using createTypeSpecLibrary. Intended for internal structure such as diagnostic and state keys registration. This code should be included within a TypeSpec emitter or library implementation. Does not handle emission directly. No external inputs; sets up a named emitter library for further extension or internal referencing.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitters-basics.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const $lib = createTypeSpecLibrary({\n  name: \"MyEmitter\",\n  diagnostics: {\n    // Add diagnostics here.\n  },\n  state: {\n    // Add state keys here for decorators.\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Context with API Key Authentication in TypeScript\nDESCRIPTION: This TypeScript function sets up the client context to include an API key in the header for authentication. It resolves the endpoint, attaches the user's credential, and configures the authentication schemes to use an API key named 'X-API-KEY'. Dependencies include 'getClient', proper typings for TestClientContext, and the structure of TestClientOptions. The function throws if required parameters are missing, enforces the API key header, and passes all additional options as specified.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/key_credential.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createTestClientContext(\\n  endpoint: string,\\n  credential: ApiKeyCredential,\\n  options?: TestClientOptions,\\n): TestClientContext {\\n  const params: Record<string, any> = {\\n    endpoint: endpoint,\\n  };\\n  const resolvedEndpoint = \\\"{endpoint}\\\".replace(/{([^}]+)}/g, (_, key) =>\\n    key in params\\n      ? String(params[key])\\n      : (() => {\\n          throw new Error(`Missing parameter: ${key}`);\\n        })(),\\n  );\\n  return getClient(resolvedEndpoint, {\\n    ...options,\\n    credential,\\n    authSchemes: [\\n      {\\n        kind: \\\"apiKey\\\",\\n        apiKeyLocation: \\\"header\\\",\\n        name: \\\"X-API-KEY\\\",\\n      },\\n    ],\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec to OpenAPI via Command Line\nDESCRIPTION: This command demonstrates how to invoke the TypeSpec compiler (`tsp`) to process TypeSpec files in the current directory (`.`) and specifically trigger the OpenAPI 3.0 emitter using the `--emit` flag followed by the emitter name `@typespec/openapi3`. This generates OpenAPI documentation based on the TypeSpec definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi3/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/openapi3\n```\n\n----------------------------------------\n\nTITLE: Specifying an Operation as a Collection Action - TypeSpec\nDESCRIPTION: Demonstrates marking a TypeSpec operation as a collection-scoped REST action, optionally assigning a name and targeting a specific resource model. Use this to define endpoints that represent actions on the collection as a whole (e.g., /pets/my-action). The first parameter identifies the resource type, and the second, optional name parameter overrides the default operation name.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.collectionAction(resourceType: Model, name?: valueof string)\n```\n\n----------------------------------------\n\nTITLE: TypeScript RequestBody Interface for Basic File Upload\nDESCRIPTION: This TypeScript interface represents the RequestBody defined in TypeSpec, mapping basicFile to the built-in File type. It is used as the request body type in the generated client code for single file uploads. The interface has a single property, basicFile, expected to receive a file object during a multipart request. No additional dependencies beyond TypeScript's standard File type are required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RequestBody {\\n  basicFile: File;\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Numeric Value with @maxValue in TypeSpec\nDESCRIPTION: Demonstrates how to use the @maxValue decorator to specify the highest value allowed for a numeric model property or scalar. Useful for quantity, age, or size restrictions. Depends on numeric types being available.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_22\n\nLANGUAGE: typespec\nCODE:\n```\n@maxValue(value: valueof numeric)\n```\n\n----------------------------------------\n\nTITLE: Creating New Starlight Project with Astro CLI (bash)\nDESCRIPTION: This snippet demonstrates the one-line command to scaffold a new Astro-based Starlight project using 'npm'. It requires Node.js and that npm is installed. The 'create astro@latest' command fetches the latest Astro project generator and applies the 'starlight' template, setting up all boilerplate files and folder structure for a documentation site. No arguments except as shown are required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest -- --template starlight\n```\n\n----------------------------------------\n\nTITLE: Applying @TypeSpec.OpenAPI.tagMetadata for Tag Information - TypeSpec\nDESCRIPTION: Demonstrates application of the @TypeSpec.OpenAPI.tagMetadata decorator to define additional information about tags within an OpenAPI namespace. The decorator accepts a tag name and a TagMetadata object with properties like description, externalDocs, and custom extensions. It's typically used at the namespace level to organize and document API groups.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/decorators.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.tagMetadata(name: valueof string, tagMetadata: valueof TypeSpec.OpenAPI.TagMetadata)\n```\n\n----------------------------------------\n\nTITLE: Defining UserService v1 API in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines version `v1` of the `UserService`. It includes a POST operation to create a user (`/users/{id}`) taking a `UserService.User` model (create view) and returning the user (read view), and a GET operation (`/users/{id}`) to retrieve a user (read view). The `UserService.User` model contains `id` (read-only), `secret` (create-only), and `name` fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/test/output/rest-metadata-emitter/rest-emitter-sample-output.txt#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nservice: UserService\n  title: User service\n  version: v1\n  ops:\n    op: POST /users/{id}\n      request:\n        path id: string\n        body: UserService.User (Create)\n      response: 200\n        body: UserService.User (Read)\n    op: GET /users/{id}\n      request:\n        path id: string\n      response: 200\n        body: UserService.User (Read)\n  models:\n    model: UserService.User\n      id: string (Read only)\n      secret: string (Create only)\n      name: string\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Protobuf Library via NPM - Bash\nDESCRIPTION: This bash code snippet shows how to install the @typespec/protobuf library for use within a TypeSpec specification project. No other dependencies are required beyond npm itself. Running this command will add @typespec/protobuf as a dependency in the current project, allowing all TypeSpec Protobuf decorators and models to be used in code. The input is simply executed in a shell, and no output is expected except for the confirmation of successful installation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/protobuf\n```\n\n----------------------------------------\n\nTITLE: Defining the Options Interface for the Client Operation in TypeScript\nDESCRIPTION: This TypeScript code, from `src/api/testClientOperations.ts`, defines the `GetOptions` interface for the `get` operation. It extends a base `OperationOptions` interface, providing a standard way to pass optional configuration parameters, such as callbacks (like `onResponse`) or cancellation tokens, to the `get` operation function.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/no_content_type.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport interface GetOptions extends OperationOptions {}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Project Dependencies via Docker in Bash\nDESCRIPTION: This Bash command uses the TypeSpec Docker container to install project dependencies. It mounts the current host directory to `/wd` within the container and executes the `tsp install` command (implicitly, as `install` is passed as an argument to the container's entrypoint). This typically reads a configuration file like `package.json` in the current directory. Requires Docker to be installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/docker/readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v \"${pwd}:/wd\" --workdir=\"/wd\" -t azsdkengsys.azurecr.io/typespec install\n```\n\n----------------------------------------\n\nTITLE: Declaring Model Interface for utcDateTime Mapping - TypeScript - TypeScript\nDESCRIPTION: Declares the TypeScript interface Foo with a createdOn property of type Date, reflecting the utcDateTime TypeSpec field. This type is typically generated into src/models/models.ts and provides a strongly-typed structure for data transfer. No external dependencies are required, and the property is mapped with camelCase naming, supporting conversion to and from raw payloads.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/model_date_time.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Foo {\n  createdOn: Date;\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Route Emission with @serviceTitle in TypeSpec\nDESCRIPTION: Shows how to resolve the issue where routes are not emitted from a namespace. By adding the `@serviceTitle` decorator to the `DemoService` namespace, it becomes the designated service namespace, and the `@route(\"/\")` operation within it is correctly resolved and emitted.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@serviceTitle(\"DemoService\")\nnamespace DemoService;\n\n@route(\"/\")\nop test(): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Wrapped Array Serialization - XML\nDESCRIPTION: Displays the XML structure for a wrapped array, where all values appear under a single named parent (ItemsTags) with individual <string> children. Reflects a model with @encodedName at the property level in TypeSpec. Output is a nested XML element containing repeated item tags.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<XmlPet>\n  <ItemsTags>\n    <string>abc</string>\n    <string>def</string>\n  </ItemsTags>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Building Microsoft TypeSpec Generator with .NET Core CLI - Shell\nDESCRIPTION: Executes the build process for the Microsoft TypeSpec Generator project using the .NET Core CLI. The command \"dotnet build\" compiles all projects in the current root directory. Requires that the .NET Core SDK 8.0.x or higher is installed. No additional arguments are passed, ensuring a default build; takes no parameters. Successful execution produces compiled assemblies in the standard build output directories.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-csharp/generator/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet build\n```\n\n----------------------------------------\n\nTITLE: Building Project Dependencies with pnpm - Bash\nDESCRIPTION: Compiles and builds all dependencies in the project using pnpm. Should be executed after installing dependencies. Relies on build scripts defined in package.json files throughout the project. Output artefacts are generated in their associated build folders.\nSOURCE: https://github.com/microsoft/typespec/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Using the `typeof` Operator in TypeSpec\nDESCRIPTION: This snippet demonstrates the `typeof` operator, which returns the declared or inferred type of a value reference. It shows that `typeof stringValue` returns the declared type `string`, `typeof oneValue` returns the inferred literal type `1`, and `typeof stringOrOneValue` returns the declared union type `string | 1`, even though the value currently holds `1`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\nconst stringValue: string = \"hello\";\n// typeof stringValue returns `string`.\n\nconst oneValue = 1;\n// typeof oneValue returns `1`\n\nconst stringOrOneValue: string | 1 = 1;\n// typeof stringOrOneValue returns `string | 1`\n```\n\n----------------------------------------\n\nTITLE: Checking Template Instances Using isTemplateInstance in TypeSpec API (TypeScript)\nDESCRIPTION: Illustrates the current recommended TypeScript method for determining if a TypeSpec type object (`type`) is an instance of a template using the `isTemplateInstance` helper function. This replaces the deprecated check on `templateArguments.length` and provides a clearer way to identify template instantiations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-01-12.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nisTemplateInstance(type);\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Default Status Code Behavioral Changes - TypeSpec\nDESCRIPTION: Depicts how implicit status codes are now always set to 200, unless the response is explicitly void. This snippet illustrates the new default behavior and informs users that previous implementations implicitly returning 204 may now return 200. Uses the @header decorator for demonstration and expects a TypeSpec API context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-05-07.md#_snippet_2\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop c1(): {\n  @header foo: string;\n}; // status code 200 (used to be 204)\n```\n\n----------------------------------------\n\nTITLE: Simplifying Non-Model Response Body Definition in TypeSpec\nDESCRIPTION: Shows a further simplification for defining a response with a non-model body like `Pet[]`. Since a 200 status code is inferred for non-empty bodies, returning the body type `Pet[]` directly is often sufficient.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nop list(): Pet[];\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Effective Payload Type with MetadataInfo in TypeSpec Emitters (JavaScript)\nDESCRIPTION: Calculates the effective type of a payload by considering metadata movement (e.g., to headers) and visibility rules (property inclusion/exclusion based on context like Read, Create, Update). When applied to an anonymous model derived solely from a named model after these transformations, it recovers the original named model type. This method should be used recursively on referenced types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-metadata-handling.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMetadataInfo.getEffectivePayloadType(Type, Visibility): Type\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitter in TypeSpec Project YAML (yaml)\nDESCRIPTION: This YAML snippet configures the TypeSpec project to use the @typespec/http-server-js emitter through the emit key. No emitter options are set, so all default behaviors apply. Place this content under your project's configuration file. No additional fields are required for basic usage.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-js/reference/emitter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-server-js\"\n```\n\n----------------------------------------\n\nTITLE: Constructing an Authenticated Test Client in TypeScript\nDESCRIPTION: This TypeScript class implements a client for the authenticated service. It requires an endpoint string and a BasicCredential object (comprising username and password) as constructor parameters. The client initializes a context with these values and exposes a 'valid' method to invoke the service operation. Dependencies include the context creator and credential types. Inputs are endpoint, credential, and optional client options; the key output is the result of the 'valid' operation call. It presumes the credential will be used for HTTP Basic Auth downstream.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/basic_auth.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class TestClient {\\n  #context: TestClientContext;\\n\\n  constructor(endpoint: string, credential: BasicCredential, options?: TestClientOptions) {\\n    this.#context = createTestClientContext(endpoint, credential, options);\\n  }\\n  async valid(options?: ValidOptions) {\\n    return valid(this.#context, options);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Serialization to Snake Case\nDESCRIPTION: This TypeScript function, `jsonFooToTransportTransform`, located in `src/models/internal/serializers.ts`, handles the serialization of the client-side `Foo` model (with camelCase properties) to the wire format. It takes an optional `Foo` object and returns an object with snake_case properties (`element_name`, `age`) matching the TypeSpec definition, suitable for sending in requests. It handles null or undefined input by returning it as is.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/basic_model_wire_name.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonFooToTransportTransform(input_?: Foo | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    element_name: input_.elementName,\n    age: input_.age,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Generic HttpPart Model in TypeSpec\nDESCRIPTION: Defines the generic `TypeSpec.Http.HttpPart<Type, Options>` model. This serves as a container for a part within a multipart HTTP request or response, parameterized by the `Type` of the content and any associated `Options`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_19\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.HttpPart<Type, Options>\n```\n\n----------------------------------------\n\nTITLE: Running Generic TypeSpec Commands via Docker in Bash\nDESCRIPTION: This Bash command executes the TypeSpec tool within a Docker container. It mounts the current host directory (`${pwd}`) to `/wd` inside the container and sets `/wd` as the working directory, allowing TypeSpec to operate on local files. Replace `... TypeSpec args ...` with the desired TypeSpec command-line arguments. Note: For usage in PowerShell, replace backslashes (`\\`) with backticks (`` ` ``) for line continuation. Requires Docker to be installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/docker/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -v \"${pwd}:/wd\" --workdir=\"/wd\" \\\n  -t azsdkengsys.azurecr.io/typespec\n# ... TypeSpec args ...\n```\n\n----------------------------------------\n\nTITLE: Listing Deprecated Service Accessor Functions in TypeScript API\nDESCRIPTION: Lists the TypeScript functions from the TypeSpec compiler API that have been deprecated due to the introduction of multi-service support. These functions assumed a single service per specification.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport function getServiceTitle(program: Program): string;\nexport function getServiceVersion(program: Program): string;\nexport function getServiceNamespace(program: Program): Namespace;\nexport function getServiceNamespaceString(program: Program): string | undefined;\nexport function setServiceNamespace(program: Program, namespace: Namespace);\n```\n\n----------------------------------------\n\nTITLE: Starting Mock API Server with pnpm (Bash)\nDESCRIPTION: Executes the `serve` script using `pnpm` to start the mock API server. This server uses the defined mock APIs to simulate backend responses, which is useful during mock API development and testing. Requires `pnpm`, Node.js, and correctly defined mock APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Migrating Deprecated `@query` Format Option in TypeSpec (diff)\nDESCRIPTION: Demonstrates the required code change for migrating from the deprecated `@query({format: \"form\"})` option to the new `@query(#{explode: true})` syntax in TypeSpec. This change was introduced in version 0.59.0 to handle query parameter explosion for array types, replacing the older `form` or `multi` formats.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- @query({format: \"form\"}) select: string[];\n+ @query(#{explode: true}) select: string[];\n```\n\n----------------------------------------\n\nTITLE: Constraining Template Arguments with valueof Modifier - TypeSpec\nDESCRIPTION: This snippet demonstrates use of the 'valueof' constraint for template arguments in a TypeSpec model. It ensures that the type parameter T is restricted to literal string values (or enum values). The model Foo applies a @doc(T) decorator to its 'name' property and is applicable to templates/decorators needing literal values. Requires TypeSpec 0.53 or later for valueof support.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-06-06.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Foo<T extends valueof string> {\n  @doc(T)\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Route Decorators for Nested API Paths - TypeSpec\nDESCRIPTION: Shows how @route decorators at different levels (namespace, interface, operation) combine to form nested OpenAPI API paths. The example uses nested @route and @get decorators to demonstrate construction of a full OpenAPI endpoint like GET /api/users/{id}. Inputs are segment strings at each decorator level; the output is a composite OpenAPI route with the respective operation method.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/api\")\\nnamespace MyService {\\n  @route(\"/users\")\\n  interface Users {\\n    // Results in GET /api/users/{id}\\n    @route(\"/{id}\")\\n    @get\\n    getUser(@path id: string): User;\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method for Checking Template Instances in TypeSpec API (TypeScript)\nDESCRIPTION: Shows the deprecated TypeScript approach for checking if a TypeSpec type object (`type`) is an instance of a template by examining the length of its `templateArguments` property. This method was used prior to the introduction of more specific helper functions and is now replaced.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-01-12.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\ntype.templateArguments.length > 0;\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Enums Using TypeSpec Enum Declaration\nDESCRIPTION: This snippet demonstrates TypeSpec's enum declaration syntax, which allows authors to define a set of named constant values. Each enum member can map to a literal value, which becomes an OpenAPI string enum. The result is a schema where valid values are constrained to the specified options.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\nenum Color {\n  Red: \"red\",\n  Blue: \"blue\",\n  Green: \"green\",\n}\n```\n\n----------------------------------------\n\nTITLE: Applying @withVisibilityFilter to Nested Models - Typespec\nDESCRIPTION: This snippet demonstrates using @withVisibilityFilter to recursively project only properties matching a visibility filter in a TypeSpec model. It defines a Dog model, marks a property for a visibility, then in a new model, applies @withVisibilityFilter with a filter mapping (e.g., #{ all: #[Lifecycle.Read] }) to project properties matching that visibility. Requires an understanding of TypeSpec visibility and filters. Main input is the filter, output model (DogRead) contains only properties allowed by filter. Useful for deep model composition with enforcement of access restrictions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_79\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Dog {\n  @visibility(Lifecycle.Read)\n  id: int32;\n\n  name: string;\n}\n\n@withVisibilityFilter(#{ all: #[Lifecycle.Read] })\nmodel DogRead {\n ...Dog\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Raw Request Bodies with req.expect.rawBodyEquals in TypeSpec in TypeScript\nDESCRIPTION: This code checks that the exact raw body string sent in a POST request matches the given value, using the req.rawBodyEquals method. It is particularly useful for scenarios where content formatting and whitespace are significant. The function is registered as a mock POST handler using TypeSpec's API.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/writing-mock-apis.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.post(\"/example\", \"Example\", (req) => {\n  req.rawBodyEquals('\"foo\"');\n});\n```\n\n----------------------------------------\n\nTITLE: Example: Applying @stream for Bidirectional Streaming in TypeSpec\nDESCRIPTION: Demonstrates applying the `@stream` decorator with `StreamMode.Duplex` to a TypeSpec operation (`connectToMessageService`). This signifies bidirectional streaming (duplex), where both the client and the server can send a stream of `Message` messages independently after the connection is established.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/decorators.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@stream(StreamMode.Duplex)\nop connectToMessageService(...Message): Message;\n```\n```\n\n----------------------------------------\n\nTITLE: Putting All Optional Float Literal Properties - JSON\nDESCRIPTION: Showcases how to PUT an optional float literal value for updating records. The property should be a number (not string) and present in the object, used for testing numeric serialization.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_287\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": 1.25 }\n```\n\n----------------------------------------\n\nTITLE: Declaring Page Index Parameter in Pagination with @pageIndex in TypeSpec\nDESCRIPTION: Marks a model property as representing the page index in a paginated sequence using @pageIndex. Supports page-based pagination approaches and can be combined with other pagination decorators for full API navigation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_44\n\nLANGUAGE: typespec\nCODE:\n```\n@pageIndex\n```\n\n----------------------------------------\n\nTITLE: Declaring Summary Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@summary` decorator. This decorator attaches a short, single-line description (summary) to any TypeSpec element.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_63\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@summary(summary: valueof string)\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing API Client with Credential Parameter in TypeScript\nDESCRIPTION: This TypeScript snippet defines a client class that accepts an endpoint and an ApiKeyCredential, integrating the credential into the underlying context for API calls. The constructor initializes the client context with the credential, and the 'valid' method proxies to the corresponding API operation. Dependencies include proper type definitions for ApiKeyCredential, TestClientOptions, and a function 'createTestClientContext'. The client expects the API key credential and supports optional operation options.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/key_credential.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\\n  #context: TestClientContext;\\n\\n  constructor(endpoint: string, credential: ApiKeyCredential, options?: TestClientOptions) {\\n    this.#context = createTestClientContext(endpoint, credential, options);\\n  }\\n  async valid(options?: ValidOptions) {\\n    return valid(this.#context, options);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Namespace Declaration in TypeSpec - TypeSpec - tsp\nDESCRIPTION: Shows the preferred method for creating subnamespaces and models to maintain separation, avoiding the merging issue documented in the breaking change. Separates models A and B into distinct subnamespaces for correct hierarchical mapping. No external dependencies are required, and it is intended for developers looking to maintain clarity between subnamespaces in their TypeSpec code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-08-06.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace MyOrg.MyProject;\n\nnamespace MyArea {\n  model A {}\n}\n\nnamespace MyArea2 {\n  model B {}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic GET Request Client in TypeScript\nDESCRIPTION: Generated TypeScript client function `read` for making a `GET` request to the `/widgets` endpoint defined in TypeSpec. It takes a client context and optional options, constructs the request path, sends the request with empty headers using `client.pathUnchecked(path).get()`, handles optional response callbacks, checks for a 204 No Content status, and throws an error for other statuses.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-request.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/api/widgetsClient/widgetsClientOperations.ts function read\nexport async function read(client: WidgetsClientContext, options?: ReadOptions): Promise<void> {\n  const path = parse(\"/widgets\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Route Definition for `op is` in TypeSpec\nDESCRIPTION: This TypeSpec code demonstrates the recommended pattern. The full route (`/pets/read`) is defined directly on the `Library.Pets.read` operation using the `@route` decorator. When `readPet is Library.Pets.read` is used in the `Service.PetStore` interface, the complete route information is correctly carried over, ensuring the `readPet` operation has the intended route.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/rules/op-reference-container-route.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Library {\n  interface Pets {\n    @route(\"/pets/read\") read(): string;\n  }\n}\n\n@service\nnamespace Service {\n  interface PetStore {\n    readPet is Library.Pets.read;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Client Emitter in tspconfig.yaml\nDESCRIPTION: This YAML configuration snippet specifies settings for the Java client emitter (`@typespec/http-client-java`) within the `tspconfig.yaml` file. It defines the emitter to be used (`emit`) and sets the output directory (`emitter-output-dir`) for the generated Java client code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-java\"\noptions:\n  \"@typespec/http-client-java\":\n    emitter-output-dir: \"{project-root}/clients/java\"\n```\n\n----------------------------------------\n\nTITLE: Defining a CreateOrUpdate Transformation Model in TypeSpec (Typespec)\nDESCRIPTION: Defines the CreateOrUpdate model, which filters an input model T to include only properties visible in the Create or Update resource lifecycle phases. Used primarily for operations like HTTP PUT, this model is recursive and may be named with an optional NameTemplate. Dependencies include the visibility decorators indicating Create or Update phases.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nmodel CreateOrUpdate<T, NameTemplate>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Singleton Read Interface - TypeSpec - typespec\nDESCRIPTION: Specifies an interface to standardize read (GET) operations on singleton resource instances, providing strong typing for Singleton, Resource context, and Error handling. No operations are defined within this interface itself in the snippet.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_55\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.SingletonResourceRead<Singleton, Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Generated OpenAPI Specification for Pet CRUD Operations\nDESCRIPTION: This YAML snippet displays the OpenAPI 3 specification generated from the corresponding TypeSpec definitions for the Pet Store CRUD operations. It shows how TypeSpec constructs like namespaces (influencing `operationId`), routes (`paths`), parameters, request bodies, and multiple response definitions are translated into the standard OpenAPI format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/02-operations-responses.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n```yml\npaths:\n  /pets:\n    get:\n      operationId: Pets_listPets\n      parameters: []\n      responses:\n        \"200\":\n          description: The request has succeeded.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n    post:\n      operationId: Pets_createPet\n      parameters: []\n      responses:\n        \"201\":\n          description: The request has succeeded and a new resource has been created as a result.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"202\":\n          description: The request has been accepted for processing, but processing has not yet completed.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n  /pets/{petId}:\n    get:\n      operationId: Pets_getPet\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: The request has succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"404\":\n          description: The server cannot find the requested resource.\n    put:\n      operationId: Pets_updatePet\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: The request has succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"404\":\n          description: The server cannot find the requested resource.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n    delete:\n      operationId: Pets_deletePet\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"204\":\n          description: \"There is no content to send for this request, but the headers may be useful. \"\n```\n```\n\n----------------------------------------\n\nTITLE: Annotating Maximum Number of Array Items with @maxItems in TypeSpec\nDESCRIPTION: Defines usage of the @maxItems decorator to restrict an array type to contain no more than a specified number of items. Suitable for modeling API constraints or database limitation. Dependencies: uses builtin 'integer' type; ensure TypeSpec supports valueof expressions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\n@maxItems(value: valueof integer)\n```\n\n----------------------------------------\n\nTITLE: Example: Adding a Minimum Value Constraint to a Numeric Scalar in TypeSpec\nDESCRIPTION: Applies @minValue(18) to an Age scalar, making sure that the age value must be at least 18. Suitable for models with eligibility requirements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_33\n\nLANGUAGE: typespec\nCODE:\n```\n@minValue(18)\nscalar Age is int32;\n```\n\n----------------------------------------\n\nTITLE: Implementing a TypeScript Client Function for a GET Request with Path Parameter\nDESCRIPTION: This exported asynchronous TypeScript function `read` implements the client-side logic for the 'read' operation defined in TypeSpec. It accepts a `WidgetsClientContext`, the `id` path parameter (string), and optional `ReadOptions`. It constructs the request URL `/widgets/{id}` by expanding the template with the provided `id`, sends a GET request using the client context, handles potential response callbacks, checks for a successful 204 No Content response, and throws a `RestError` for any other status codes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/path-parameter.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function read(\n  client: WidgetsClientContext,\n  id: string,\n  options?: ReadOptions,\n): Promise<void> {\n  const path = parse(\"/widgets/{id}\").expand({\n    id: id,\n  });\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PUT Operation with put Decorator - TypeSpec (typespec)\nDESCRIPTION: Marks an operation for the HTTP PUT verb via @TypeSpec.Http.put. Place directly before an operation signature that completely replaces or creates a resource. Takes no parameters, and works with other decorators to define full RESTful contracts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.put\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@put op set(pet: Pet): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Editor Settings for TypeSpec (JSON)\nDESCRIPTION: This JSON configuration snippet, intended for `.vscode/settings.json`, sets editor preferences specifically for TypeSpec files (`.tsp`). It disables indentation detection, enforces spaces over tabs, and sets the tab size to 2 spaces to align with TypeSpec standard style.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/formatter.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  [\"typespec\"]: {\n    \"editor.detectIndentation\": false,\n    \"editor.insertSpaces\": true,\n    \"editor.tabSize\": 2,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PlainDate Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines the `plainDate` scalar for storing date-only values with no time zone, often used for birthdays or calendar events.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_45\n\nLANGUAGE: typespec\nCODE:\n```\nscalar plainDate\n```\n\n----------------------------------------\n\nTITLE: Serializing Widget from Application to Transport Payload - TypeScript\nDESCRIPTION: Implements a TypeScript function that transforms a 'Widget' model instance into a transport-ready object. It flattens the 'additionalProperties' envelope into the root payload, combining known and arbitrary properties. Depends on a supporting function 'jsonRecordUnknownToTransportTransform'. Input: 'Widget' object or null/undefined. Output: Object suitable for transport. Requires TypeScript and the Widget type definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/additional-properties/extends.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonWidgetToTransportTransform(input_?: Widget | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    ...jsonRecordUnknownToTransportTransform(input_.additionalProperties),\n    name: input_.name,\n    age: input_.age,\n    optional: input_.optional,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Numeric Literals in TypeSpec\nDESCRIPTION: Demonstrates defining integer (`1000`) and floating-point (`3.14`) numeric literals in TypeSpec. This is done by assigning the raw number directly to an alias.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/type-literals.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nalias Kilo = 1000;\nalias PI = 3.14;\n```\n\n----------------------------------------\n\nTITLE: Example: Applying @field Decorator to a Model Property in TypeSpec\nDESCRIPTION: Demonstrates how to apply the `@field` decorator to a model property (`test`) within a TypeSpec model (`ExampleMessage`), assigning it the Protobuf field index 1.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/decorators.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel ExampleMessage {\n  @field(1)\n  test: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting TypeSpec Emitter Options via Command Line (Bash)\nDESCRIPTION: Shows how to specify TypeSpec emitter options using the `--option` command-line flag. Requires using the fully qualified option name, which includes the emitter package name followed by the kebab-cased option name. This example sets the `output-file` option for the `@typespec/openapi3` emitter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-07-08.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--option @<emitter-package>.<optionName>=<optionValue>\n\n# For example\n--option @typespec/openapi3.output-file=openapi.json\n```\n\n----------------------------------------\n\nTITLE: Defining Route Paths and Query Parameters in TypeSpec\nDESCRIPTION: Demonstrates three TypeSpec approaches for handling query parameters in routes. The first incorrectly includes query parameters in the path, violating OpenAPI v3, while the next two provide the proper way using @query decorator and URI template syntax. Always separate path variables from query parameters in OpenAPI-compliant API definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/diagnostics.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/users?filter={filter}\")\\nop getUsers(filter: string): User[];\\n\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/users\")\\nop getUsers(@query filter?: string): User[];\\n\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/users{?filter}\")\\nop getUsers(filter?: string): User[];\\n\n```\n\n----------------------------------------\n\nTITLE: Declaring a Protobuf Service using @service Decorator in TypeSpec\nDESCRIPTION: This TypeSpec snippet shows the syntax for the `@TypeSpec.Protobuf.service` decorator. Applied to an `Interface`, it declares that the interface corresponds to a Protobuf `service`. The operations within the interface will be converted to RPC methods in the generated Protobuf file. It takes no parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Protobuf.service\n```\n\n----------------------------------------\n\nTITLE: Implementing the REST Client Operation in TypeScript\nDESCRIPTION: Implements the REST operation as an asynchronous TypeScript function, mapping required model fields to function arguments and optional fields to the options object. The function handles request preparation and response processing, including error propagation. Dependencies include a TestClientContext, request utilities, and error helpers; expected inputs are the context, required widget fields, and optionally age inside CreateOptions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/spread_body.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function create(\n  client: TestClientContext,\n  id: string,\n  name: string,\n  options?: CreateOptions,\n): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n    body: {\n      id: id,\n      name: name,\n      age: options?.age,\n    },\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling Unauthorized HTTP Response in TypeSpec Language\nDESCRIPTION: Declares a model representing a 401 Unauthorized HTTP response in TypeSpec. The model has a single property, 'statusCode', fixed at the value 401. It is designed for explicit use in API error response modeling to handle cases where client authentication fails. No dependencies outside TypeSpec base are needed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_38\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.UnauthorizedResponse\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Union with Variants in TypeSpec\nDESCRIPTION: This snippet shows how to declare a named union `Breed` using the `union` keyword in TypeSpec. Each variant (`Beagle`, `GermanShepherd`, `GoldenRetriever`) is assigned an explicit identifier (`beagle`, `shepherd`, `retriever`). This allows emitters to recognize the union as a named entity and apply decorators to individual options.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/unions.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nunion Breed {\n  beagle: Beagle,\n  shepherd: GermanShepherd,\n  retriever: GoldenRetriever,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining @lastLink Pagination Property in TypeSpec\nDESCRIPTION: Demonstrates the declaration and annotation of a property with the @lastLink decorator in a TypeSpec model representing a paginated response. This decorator marks the property as a link to the last page, which helps API clients navigate pagination flows. No dependencies are needed beyond TypeSpec core features.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n@lastLink\n```\n\n----------------------------------------\n\nTITLE: Checking TypeSpec File Formatting via CLI (Bash)\nDESCRIPTION: This command utilizes the `tsp format` CLI tool with the `--check` flag to verify if files matching the `**/*.tsp` pattern adhere to the configured formatting rules without modifying them. It's typically used in CI pipelines.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/formatter.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp format --check \"**/*.tsp\"\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Imports for Asset Emitter in TypeScript\nDESCRIPTION: This code snippet demonstrates changing the import path for TypeEmitter and related symbols. Users need to update their TypeScript files to import from the '@typespec/asset-emitter' package instead of the deprecated emitter-framework path. The key parameter is the module specifier; developers must ensure all references are swapped accordingly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-04-02.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n-import { TypeEmitter, ... } from \"@typespec/compiler/emitter-framework\";\n+import { TypeEmitter, ... } from \"@typespec/asset-emitter\";\n```\n\n----------------------------------------\n\nTITLE: Defining Discriminated Unions in Typespec\nDESCRIPTION: This Typespec snippet defines a service namespace with a discriminated union 'WidgetData', providing two variants, 'WidgetData0' and 'WidgetData1' distinguished by the 'kind' field. It introduces a model that spreads record properties from the union and describes service operations for GET and PUT requests. The code relies on Typespec features like '@service', '@discriminated', and model spreading, with a focus on setting the discriminator explicitly and providing documentation-through-comments. Expected use includes service contract definition with discrimination for union types and model extensibility.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/discriminated_union_spread.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n@discriminated(#{ envelope: \"none\", discriminatorPropertyName: \"kind\" })\nunion WidgetData {\n  kind0: WidgetData0,\n  kind1: WidgetData1,\n}\n\nmodel WidgetData0 {\n  kind: \"kind0\";\n  fooProp: string;\n}\n\nmodel WidgetData1 {\n  kind: \"kind1\";\n  start: utcDateTime;\n  end?: utcDateTime;\n}\n\n@doc(\"The model spread Record<WidgetData>\")\nmodel SpreadRecordForDiscriminatedUnion {\n  @doc(\"The name property\")\n  name: string;\n\n  ...Record<WidgetData>;\n}\n\n@get\nop get(): SpreadRecordForDiscriminatedUnion;\n\n@put\nop put(@body body: SpreadRecordForDiscriminatedUnion): void;\n```\n\n----------------------------------------\n\nTITLE: User API Interface for Create Operation with Logical Entity - TypeSpec - typespec\nDESCRIPTION: This snippet defines a REST API interface for user creation by referencing the logical User entity. It uses @route to set the users path and @post to declare a create method taking and returning a User. This interface is intended to leverage prior model definitions and demonstrates separating operation signatures from internal entity structure. Dependencies are consistent with TypeSpec REST modeling conventions, and the key parameter is the model spread (...User) representing the payload. Input is structured HTTP POST data; output is a User entity response.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_16\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/users\")\ninterface Users {\n  @post create(...User): User;\n}\n```\n\n----------------------------------------\n\nTITLE: Base Model with Discriminator and Polymorphic AllOf - TypeSpec\nDESCRIPTION: Defines a discriminated model hierarchy using @discriminator, with 'Pet' as the base, and each child has a unique kind property. Enables OpenAPI schemas to be generated with explicit discriminators and allOf for subtype specialization. Inputs: Decorated models. Outputs: OpenAPI v2/v3-compatible polymorphism.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_27\n\nLANGUAGE: typespec\nCODE:\n```\n@discriminator(\"kind\")\nmodel Pet {\n  name: string;\n  weight?: float32;\n}\nmodel Cat extends Pet {\n  kind: \"cat\";\n  meow?: int32;\n}\nmodel Dog extends Pet {\n  kind: \"dog\";\n  bark?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Foo Interface for Complex Array in TypeScript\nDESCRIPTION: Generates the Foo interface with myValues as an array of Bar objects, based on the TypeSpec definition. No runtime dependencies, assuming Bar is defined; input is a generated file, output is the strongly-typed TypeScript interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/arrays.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Foo {\n  myValues: Array<Bar>;\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing/Deserializing TypeSpec File Models as JSON Objects\nDESCRIPTION: Demonstrates using the `File` model where its contents are serialized or deserialized as part of a JSON payload instead of a direct file stream. The `contentType` header is explicitly set to `application/json`. Examples show downloading text content as a JSON object (`{\"contentType\":<string?>,\"filename\":<string?>,\"contents\":<string>}`) and uploading binary content (base64 encoded) within a JSON structure (`{\"contentType\":<string?>,\"filename\":<string?>,\"contents\":<base64>}`). This pattern requires careful consideration as it differs from typical file handling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_16\n\nLANGUAGE: tsp\nCODE:\n```\n// Use a File as a structured JSON object. The HTTP library will warn you that the File will be serialized as JSON,\n// so you should suppress the warning if it's really what you want instead of a binary file upload/download.\n\n// The response body is a JSON object like `{\"contentType\":<string?>,\"filename\":<string?>,\"contents\":<string>}`\n@get op downloadTextFileJson(): {\n  @header contentType: \"application/json\",\n  @body file: File<\"text/plain\", string>,\n};\n\n// The request body is a JSON object like `{\"contentType\":<string?>,\"filename\":<string?>,\"contents\":<base64>}`\n@post op uploadBinaryFileJson(\n  @header contentType: \"application/json\",\n  @body file: File<\"image/png\", bytes>,\n): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Get Operation with Reserved Words - TypeSpec - tsp\nDESCRIPTION: Defines a 'get' operation in the 'Test' namespace where parameters are named after JavaScript reserved words ('await' and 'break'). This demonstrates TypeSpec's ability to handle potentially problematic parameter names. The operation takes a required string and an optional boolean, both using reserved word identifiers, and returns nothing. Dependencies include support for TypeSpec syntax and any custom decorators or namespaces used.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/reserved_names.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n\n@get op get(await: string, break?: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Importing PlaygroundManifest (Pre-0.1.0-alpha.1) in TypeScript/JavaScript\nDESCRIPTION: Shows the previous method (before version 0.1.0-alpha.1) for importing the PlaygroundManifest using a named import. This syntax was changed due to issues encountered when loading the manifest, particularly in Vite development mode.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/playground/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PlaygroundManifest } from \\\"@typespec/playground/manifest\\\";\n```\n\n----------------------------------------\n\nTITLE: Referencing Types in Nested Namespaces in TypeSpec\nDESCRIPTION: Shows how to reference a type (`SampleModel`) located within a nested namespace structure (`Foo.Bar.Baz`). Access requires using the fully qualified name, including all parent namespaces separated by dots.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/namespaces.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel A {\n  sample: Foo.Bar.Baz.SampleModel;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Transport Serializer for Foo (Primitive Record)\nDESCRIPTION: Generated TypeScript function `jsonFooToTransportTransform` that serializes a `Foo` object (application format) into a structure suitable for transport (e.g., JSON payload). It handles null/undefined input and transforms the `myValues` property to `my_values` by calling the `jsonRecordInt32ToTransportTransform` helper function.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/record.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonFooToTransportTransform\nexport function jsonFooToTransportTransform(input_?: Foo | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    my_values: jsonRecordInt32ToTransportTransform(input_.myValues),\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Collection of Bytes (NonNull) Response - JSON\nDESCRIPTION: This GET /type/property/nullable/collections/bytes/non-null example includes a required property and a non-null array of base64-encoded byte strings, confirming handling of arrays of binary elements in non-null fashion.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_237\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": [aGVsbG8sIHdvcmxkIQ==, aGVsbG8sIHdvcmxkIQ==]}\n```\n\n----------------------------------------\n\nTITLE: Formatting Comment Spacing in TypeSpec\nDESCRIPTION: Shows the requirement to start all single-line comments (`//`) with a leading space for consistency and readability. The 'bad' example lacks the space, while the 'good' example includes it.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n//bad\n\n// good\n```\n\n----------------------------------------\n\nTITLE: Putting Default (Missing) Optional Collections of Model Properties - JSON\nDESCRIPTION: A PUT request body that omits the optional array property. Used for negative and default path contract validation, ensuring put operations function even when optional fields are missing.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_276\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining @ns Decorator in TypeSpec\nDESCRIPTION: This TypeSpec decorator, `@TypeSpec.Xml.ns`, specifies the XML namespace for an element. It can accept either a namespace URI string and an optional prefix string, or a member of an enum decorated with `@nsDeclarations`. It targets `unknown`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Xml.ns(ns: string | EnumMember, prefix?: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Combining Properties with AdditionalProperties via Model Extension - TypeSpec\nDESCRIPTION: Defines a model 'Bar' that extends Record<unknown> and adds a typed property 'bar'. This results in an OpenAPI schema with explicit properties plus allowance for additional arbitrary properties. Requires basic understanding of inheritance in TypeSpec. Input: none. Output: model supporting both structured and unstructured properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_20\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Bar extends Record<unknown> {\n  bar?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Decorators Without Arguments in TypeSpec\nDESCRIPTION: Shows how to apply a decorator (`@mark`) without any arguments to a `Dog` model. In this case, the parentheses following the decorator name can be omitted.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/decorators.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@mark\nmodel Dog {}\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Contained Items in Arrays for JSON Schema (TypeSpec)\nDESCRIPTION: Used with `@TypeSpec.JsonSchema.contains`, the `@TypeSpec.JsonSchema.maxContains` decorator specifies the maximum number of times the type defined by `@contains` can appear in an array. It targets array types (`unknown[]`) or model properties representing arrays and takes an integer `value` parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.maxContains(value: valueof int32)\n```\n\n----------------------------------------\n\nTITLE: Deserializing Transport Format to Foo Model - TypeScript - TypeScript\nDESCRIPTION: Defines the deserializer jsonFooToApplicationTransform, which reconstructs a Foo object from a generic transport payload. The function expects an object with a created_on property (string), parses it using dateDeserializer, and returns a Foo instance with a Date-typed createdOn property. Depends on the Foo interface and dateDeserializer; ensures accurate handling of incoming date strings.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/model_date_time.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonFooToApplicationTransform(item: any): Foo {\n  return {\n    createdOn: dateDeserializer(item.created_on),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Widget Model to Transport Format (TypeScript)\nDESCRIPTION: This TypeScript function `jsonWidgetToTransportTransform`, located in `src/models/internal/serializers.ts`, serializes a `Widget` object into a transport-ready format (likely JSON). It flattens the `additionalProperties` record into the root of the resulting object using the spread syntax, combining them with the fixed properties (`name`, `age`, `optional`). It depends on the `jsonRecordStringToTransportTransform` function to handle the transformation of the additional properties record.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/additional-properties/spread.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// src/models/internal/serializers.ts function jsonWidgetToTransportTransform\nexport function jsonWidgetToTransportTransform(input_?: Widget | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    ...jsonRecordStringToTransportTransform(input_.additionalProperties),\n    name: input_.name,\n    age: input_.age,\n    optional: input_.optional,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Certificate Namespace for Python SDK Generation - TypeSpec\nDESCRIPTION: This TypeSpec snippet demonstrates an alternate namespace declaration (semicolon syntax) for the Azure.KeyVault.Certificates service, followed by a service block that includes models and interface definitions. As before, it describes the structure of the models, properties, and certificate operation routes, preparing the shape of the generated SDK. The code must be placed in a .tsp file and used in conjunction with the TypeSpec toolchain.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-python/reference/package-structure.mdx#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nnamespace Azure.KeyVault.Certificates;\n\n@service({\n  title: \"Azure Key Vault Certificate Client\",\n})\nnamespace Azure.Keyvault.Certificates {\n  model Certificate {\n    id: string;\n    name: string;\n    properties: CertificateProperties;\n  }\n\n  model CertificateProperties {\n    created: utcDateTime;\n    updated: utcDateTime;\n    enabled: boolean;\n  }\n\n  @route(\"/certificates\")\n  interface CertificateOperations {\n    @get list(): Certificate[];\n    @get get(@path id: string): Certificate;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Interface for Widget Model\nDESCRIPTION: This TypeScript interface `Widget`, located in `src/models/models.ts`, represents the generated model corresponding to the TypeSpec definition. It includes the defined properties (`name`, `age`, `optional`) and an optional `additionalProperties` field of type `Record<string, string>` to capture any extra properties defined using the spread syntax in TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/additional-properties/spread.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// src/models/models.ts interface Widget\nexport interface Widget {\n  name: string;\n  age: number;\n  optional?: string;\n  additionalProperties?: Record<string, string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Marking a Scalar Type as Secret in TypeSpec\nDESCRIPTION: This snippet demonstrates applying the `@secret` decorator to a custom scalar type `Password`, which is based on `string`. This indicates that instances of `Password` should be treated as sensitive data.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_58\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@secret\nscalar Password is string;\n```\n```\n\n----------------------------------------\n\nTITLE: Wrapped Array Property Schema - OpenAPI3 YAML\nDESCRIPTION: Presents OpenAPI3 YAML for a property with wrapped array serialization. The xml block under properties.tags shows both wrapping and item naming, matching the XML output. Suitable for cases where XML output must adhere to specified nesting and naming. Inputs defined as arrays, resulting output schema uses xml wrap and names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nPet:\n  type: \"object\"\n  properties:\n    tags:\n      type: \"array\"\n      xml:\n        name: \"ItemsTags\"\n        wrapped: true\n      items:\n        type: string\n        xml:\n          name: string\n  xml:\n    name: \"XmlPet\"\n```\n\n----------------------------------------\n\nTITLE: Converting Object Literals to TypeSpec Values via Quick Fix (tsp)\nDESCRIPTION: This snippet demonstrates the output after applying a new quick fix to the preceding example. The fix recursively converts the JavaScript-like object literal (`{ ... }`) and array literal (`[ ... ]`) into TypeSpec's native value syntax using `#{ ... }` for model values and `#[ ... ]` for tuple/array values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-02-11.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@example(#{       // Note: Outer object converted to TypeSpec model value\n  a: 1,\n  b: 2,\n  c: #{         // Note: Nested object converted to TypeSpec model value\n    d: 3,\n    e: 4,\n    f: #[5, 6, 7] // Note: Nested array converted to TypeSpec tuple/array value\n  }\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Reading a Resource - TypeSpec - typespec\nDESCRIPTION: Defines a get operation for resource reading, returning the Resource or Error. No explicit input parameters; assumes surrounding type context. Useful for exposing read-only endpoints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_49\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceRead.get(): Resource | Error\n```\n\n----------------------------------------\n\nTITLE: Specifying Editable and Local Requirements for Python Test Suites - requirements\nDESCRIPTION: This snippet is a pip requirements file listing project dependencies. It includes references to a separate dev_requirements.txt for development dependencies and utilizes the '-e' flag to install multiple local modules in 'editable' mode, enabling live development and testing. Each '-e <path>' entry points to a generated or local test case directory, allowing hot reloading and modular test management. The entries collectively set up the testing environment to recognize all necessary local packages without requiring a static installation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-python/generator/test/unbranded/requirements.txt#_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\n-r ../dev_requirements.txt\n-e ../../\n\n# common test case\n-e ./generated/authentication-api-key\n-e ./generated/authentication-http-custom\n-e ./generated/authentication-oauth2\n-e ./generated/authentication-union\n-e ./generated/encode-duration\n-e ./generated/encode-numeric\n-e ./generated/parameters-basic\n-e ./generated/parameters-collection-format\n-e ./generated/parameters-path\n-e ./generated/parameters-spread\n-e ./generated/serialization-encoded-name-json\n-e ./generated/server-endpoint-not-defined\n-e ./generated/server-path-multiple\n-e ./generated/server-path-single\n-e ./generated/server-versions-versioned\n-e ./generated/server-versions-not-versioned\n-e ./generated/special-words\n-e ./generated/streaming-jsonl\n-e ./generated/typetest-array\n-e ./generated/typetest-dictionary\n-e ./generated/typetest-enum-extensible\n-e ./generated/typetest-enum-fixed\n-e ./generated/typetest-model-enumdiscriminator\n-e ./generated/typetest-model-nesteddiscriminator\n-e ./generated/typetest-model-notdiscriminated\n-e ./generated/typetest-model-singlediscriminator\n-e ./generated/typetest-model-recursive\n-e ./generated/typetest-model-usage\n-e ./generated/typetest-model-visibility\n-e ./generated/typetest-property-nullable\n-e ./generated/typetest-property-optional\n-e ./generated/typetest-property-valuetypes\n-e ./generated/typetest-property-additionalproperties\n-e ./generated/typetest-scalar\n-e ./generated/typetest-union\n-e ./generated/typetest-model-empty\n-e ./generated/headasbooleantrue\n-e ./generated/headasbooleanfalse\n-e ./generated/parameters-body-optionality\n-e ./generated/special-headers-repeatability\n-e ./generated/special-headers-conditional-request\n-e ./generated/encode-datetime\n-e ./generated/encode-bytes\n-e ./generated/payload-content-negotiation\n-e ./generated/payload-json-merge-patch\n-e ./generated/payload-pageable\n-e ./generated/payload-multipart\n-e ./generated/payload-media-type\n-e ./generated/payload-xml\n-e ./generated/routes\n-e ./generated/versioning-added\n-e ./generated/versioning-madeoptional\n-e ./generated/versioning-removed\n-e ./generated/versioning-renamedfrom\n-e ./generated/versioning-returntypechangedfrom\n-e ./generated/versioning-typechangedfrom\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenAPI v2 Collection Formats for Query Parameters in TypeSpec\nDESCRIPTION: This snippet shows how to control the serialization format (OpenAPI v2 `collectionFormat`) of array query parameters in TypeSpec. It demonstrates using the `@query` decorator, its `explode` property, and the `@encode` decorator with `ArrayEncoding` to achieve `csv`, `multi`, and `pipes` collection formats.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nop read(\n  @query csv?: string[], // equivalent to collectionFormat: csv\n  @query(#{ explode: false }) csvExplicit?: string[], // equivalent to collectionFormat: csv\n  @query(#{ explode: true }) multi?: string[], // equivalent to collectionFormat: multi\n  @query @encode(ArrayEncoding.pipeDelimited) pipes?: string[], // equivalent to collectionFormat: pipes\n): Widget | Error;\n```\n```\n\n----------------------------------------\n\nTITLE: Using Generic OkResponse<T> with Array (Old Behavior) in TypeSpec\nDESCRIPTION: Shows the previous usage of `OkResponse<T>` where `T` is an array type (`Pet[]`), indicating a 200 OK response with an array body. This template approach is deprecated.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nop list(): OkResponse<Pet[]>;\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring an Event Union with `@events` in TypeSpec\nDESCRIPTION: Provides an example of using the `@events` decorator on a `Union` named `MixedEvents`. This declares that `MixedEvents` defines a set of possible events, specifically `pingEvent` (with a string payload) and `doneEvent` (with a literal string \"done\" payload).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/events/reference/decorators.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@events\nunion MixedEvents {\n  pingEvent: string,\n  doneEvent: \"done\",\n}\n```\n\n----------------------------------------\n\nTITLE: Putting Default (Missing) Optional Collections of Bytes Properties - JSON\nDESCRIPTION: A minimal PUT request body, validating that arrays of bytes may be omitted when the property is optional. Suitable for negative and baseline contract tests.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_272\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining `@data` Decorator Syntax in TypeSpec\nDESCRIPTION: Presents the syntax for the `@TypeSpec.Events.data` decorator. It takes no parameters and targets a `ModelProperty`. This decorator marks the specific model property as the primary payload of the event. Only one property within an event structure can be marked with `@data`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/events/reference/decorators.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Events.data\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Routes for Different Request Schemas in TypeSpec\nDESCRIPTION: Illustrates using the `@sharedRoute` decorator within a namespace (`@route`) to define multiple operations that share the same path (\":process\") and HTTP method (`@post`) but accept different request body schemas. `process` accepts a `Widget`, while `process2` accepts a `CsvBody` model defining a `text/csv` content type. This corresponds to multiple `content` entries for the same path and method in the OpenAPI v3 specification.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@route(\":process\")\nnamespace Process {\n  @sharedRoute\n  @post\n  op process(...Widget): Widget | Error;\n\n  model CsvBody {\n    @header contentType: \"text/csv\";\n    @body _: string;\n  }\n  @sharedRoute\n  @post\n  op process2(...CsvBody): Widget | Error;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Test devDependencies for TypeSpec Libraries - JSON\nDESCRIPTION: This JSON snippet shows typical test-related devDependencies for TypeSpec libraries, such as @types/node and source-map-support. These assist with proper typings and debugging stack traces during test execution.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"devDependencies\": {\n  \"@types/node\": \"~18.11.9\",\n  \"source-map-support\": \"^0.5.21\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Collection of Models (NonNull) Response - JSON\nDESCRIPTION: This sample, for GET /type/property/nullable/collections/model/non-null, illustrates a required property and a non-null array of model objects. The objects contain a property key, demonstrating how lists of submodels can be supplied by the API.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_241\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"requiredProperty\\\": \\\"foo\\\",\\n  \\\"nullableProperty\\\": [{ \\\"property\\\": \\\"hello\\\" }, { \\\"property\\\": \\\"world\\\" }]\\n}\n```\n\n----------------------------------------\n\nTITLE: Compiler Warning Output for Deprecated Type Usage\nDESCRIPTION: This snippet displays the terminal output generated by the TypeSpec compiler (`tsp compile .`) when code containing a reference to a deprecated type is compiled. It highlights the specific warning message ('Deprecated: Use NewUser instead') and its location, triggered by the usage of `LegacyUser`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/directives.md#_snippet_2\n\nLANGUAGE: ansi\nCODE:\n```\n```ansi frame=\"terminal\"\n$ tsp compile .\n\nDiagnostics were reported during compilation:\n\n [\u001b[36mmain.tsp\u001b[39m: [\u001b[33m5\u001b[39m: [\u001b[33m11\u001b[39m -  [\u001b[33mwarning\u001b[39m \u001b[90m deprecated\u001b[39m: Deprecated: Use NewUser instead\n> 5 |   author: LegacyUser;\n    |           ^^^^^^^^^^\n\nFound  1 warning.\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Query Continuation Expansion with Primitive (Standard)\nDESCRIPTION: Defines a GET endpoint to test query continuation expansion (`{&param}`) with explode: false for a primitive parameter `param`. Given `\"a\"` and a fixed parameter `fixed=true`, the expected query string is `?fixed=true&param=a`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_93\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/query-continuation/standard/primitive?fixed=true{&param}\n```\n\n----------------------------------------\n\nTITLE: Defining Operation in Service Namespace for Route Resolution in TypeSpec\nDESCRIPTION: Example of an operation defined within a namespace (`Foo`) marked with `@serviceTitle`. This operation is correctly included during route resolution, resulting in the route `[\"/\"]` by default. Behavior is unchanged from previous versions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@serviceTitle(\"My Service\")\nnamespace Foo;\n\nop test(): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Incorrect Decorator Invocation via Direct Function Call (TypeScript)\nDESCRIPTION: Highlights an anti-pattern in TypeSpec where a decorator ($foo) is called directly from another decorator ($bar) by passing the context and target. This approach can cause diagnostics with incorrect location data and should be avoided. No external dependencies beyond the TypeSpec decorator context; parameters include context (DecoratorContext), target (Type), and optionally name (string).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/eslint-plugin-typespec/docs/rules/call-decorator.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction $foo(context: DecoratorContext, target: Type) {}\\n\\nfunction $bar(context: DecoratorContext, target: Type) {\\n  $foo(context, target);\\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction $foo(context: DecoratorContext, target: Type, name: string) {}\\n\\nfunction $bar(context: DecoratorContext, target: Type, name: string) {\\n  $foo(context, target, `bar.${name}`);\\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating getListOperationType Function in TypeSpec Core\nDESCRIPTION: Announces the deprecation of the `getListOperationType` function previously available in TypeSpec core. Users should migrate away from using this function. No direct replacement is mentioned in this specific note.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-07-11.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n// Deprecated function:\ngetListOperationType\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Client Emitter Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the specific dependency for the TypeSpec JavaScript HTTP client emitter (`@typespec/http-client-js`) to your project's `package.json` file. This is the first step in setting up the JavaScript client generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@typespec/http-client-js\": \"^0.38.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Stream Model - TypeSpec - Typespec\nDESCRIPTION: This snippet defines a generic 'Stream' model in TypeSpec, parameterized by 'Type', to represent a stream protocol with data described by any specified type. The model can be used as a base for more specific stream types or in scenarios where the exact underlying data type is abstracted. Requires the TypeSpec language and assumes a project setup that supports TypeSpec models. The template parameter 'Type' specifies the data type for the stream, and the model does not define any properties itself.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/streams/reference/data-types.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Streams.Stream<Type>\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm - Bash\nDESCRIPTION: Installs all project dependencies defined in the repository's manifest files using pnpm. Should be run at the root of the project folder after pnpm is installed. Requires an internet connection and proper access to package registries. The command downloads and links dependencies for all workspaces.\nSOURCE: https://github.com/microsoft/typespec/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple TypeSpec Service\nDESCRIPTION: Defines a basic TypeSpec service named `DemoService` with the title \"Widget Service\". It includes a single operation `foo` which takes no parameters and returns void. This serves as the input model for code generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/client_context.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\nop foo(): void;\n```\n\n----------------------------------------\n\nTITLE: Using the @renamedFrom Decorator in TypeSpec (tsp)\nDESCRIPTION: Shows an example of using the `@renamedFrom` decorator on an operation `newName`. It specifies that this operation was renamed from `\"oldName\"` starting in version `Versions.v2`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_9\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@renamedFrom(Versions.v2, \"oldName\")\nop newName(): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Interface Operations with Implicit Lifecycle Visibility in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines an interface `Examples` with operations for creating (`POST`), reading (`GET`), and updating (`PATCH`) an `Example` resource. It shows how TypeSpec's HTTP library implicitly uses the corresponding `Lifecycle` visibility (`Create`, `Read`, `Update`) based on the HTTP verb to determine the shape of the `Example` model used in the request body or response.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/visibility.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@route(\"/example\")\ninterface Examples {\n  /**\n   * When an operation uses the POST verb, it uses the `Create` lifecycle visibility to determine which properties\n   * are visible.\n   */\n  @post create(@body example: Example): Created<Example> | Error;\n\n  /**\n   * When an operation uses the GET verb, it uses the `Read` lifecycle visibility to determine which properties\n   * are visible.\n   */\n  @get read(@path id: string): Ok<Example> | Error;\n\n  /**\n   * When an operation uses the PATCH verb, it uses the `Update` lifecycle visibility to determine which properties\n   * are visible.\n   */\n  @patch update(@path id: string, @body example: Example): Ok<Example> | Error;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Read Interface for Resources - TypeSpec - typespec\nDESCRIPTION: Introduces an interface focused solely on resource GET operations. Parameterized by Resource and Error types for typed retrieval. Typically extended or implemented by other resource contract definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_48\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ResourceRead<Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Documentation with Markdown and Comments in TypeSpec (TSP Syntax)\nDESCRIPTION: Demonstrates a TypeSpec model with a combination of @doc decorators, Markdown formatting in documentation strings, and elaborate doc comments using block syntax. Shows examples of bold and italic Markdown, as well as embedded code blocks within doc comments. Inputs are string documentation, Markdown, and model declarations. The expected output is richly formatted documentation available to doc generation tools and IDEs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/documentation.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\n@doc(\"This is a **bold** text\")\nmodel Dog {\n  @doc(\"This is a _italic_ text\")\n  name: string;\n\n  /**\n   * This contains a bullet list\n   * - one\n   * - two\n   * and code blocks\n   *\n   * ```typescript\n   * dog.age = 5;\n   * ```\n   */\n  age: int32;\n}\n```\n\n----------------------------------------\n\nTITLE: Negotiating Content-Type Using Shared Routes (TSP)\nDESCRIPTION: Implements two models (PngImage and JpegImage) representing payloads for different response content-types. Two operations share the same /avatar endpoint but emit different content based on the Accept header ('image/png' or 'image/jpeg'). Uses @route and @sharedRoute for endpoint routing. Requires TypeSpec (TSP); models support explicit header and body field annotations. Useful for content negotiation scenarios.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/content-types.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\nmodel PngImage {\n  @header contentType: \"image/png\";\n  @body image: bytes;\n}\n\nmodel JpegImage {\n  @header contentType: \"image/jpeg\";\n  @body image: bytes;\n}\n\n@route(\"/avatar\")\n@sharedRoute\nop getAvatarAsPng(@header accept: \"image/png\"): PngImage;\n\n@route(\"/avatar\")\n@sharedRoute\nop getAvatarAsJpeg(@header accept: \"image/jpeg\"): JpegImage;\n```\n\n----------------------------------------\n\nTITLE: Converting OpenAPI3 Path Route to TypeSpec Operation (YAML/TSP)\nDESCRIPTION: Example demonstrating the conversion of an OpenAPI3 path definition (`GET /{id}`) into a TypeSpec operation (`readWidget`). The path parameter `id` is mapped using `@path`, the HTTP method is specified with `@get`, and the route with `@route`. A dedicated response model (`readWidget200ApplicationJsonResponse`) is generated for the 200 success response, referencing the `Widget` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/cli.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /{id}:\n    get:\n      operationId: readWidget\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: The request has succeeded.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Widget\"\n```\n\nLANGUAGE: tsp\nCODE:\n```\n/**\n * The request has succeeded.\n */\nmodel readWidget200ApplicationJsonResponse {\n  @statusCode statusCode: 200;\n  @bodyRoot body: Widget;\n}\n\n@route(\"/{id}\") @get op readWidget(@path id: string): readWidget200ApplicationJsonResponse;\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Deserializer for 'Pet' Model\nDESCRIPTION: Exports a TypeScript function `jsonPetToApplicationTransform` responsible for deserializing a plain JavaScript object (typically from transport) into a typed `Pet` object. It handles potential null/undefined input and maps the `id` and `name` properties from the input to the `Pet` interface structure. This function resides in `src/models/internal/serializers.ts`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_extends.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonPetToApplicationTransform\nexport function jsonPetToApplicationTransform(input_?: any): Pet {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    id: input_.id,\n    name: input_.name,\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an Optional Date Query Parameter with Default Encoding (TypeSpec)\nDESCRIPTION: Defines a TypeSpec operation `defaultEncoding` where the `utcDateTime` query parameter `value` is optional (indicated by `?`). If provided, it uses the default RFC3339 encoding. The operation is routed to `/default` and returns `NoContentResponse`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/query_date.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\n\n@route(\"/default\")\nop defaultEncoding(\n  @query\n  value?: utcDateTime,\n): NoContentResponse;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining OmitProperties Model to Exclude Specific Properties (Typespec)\nDESCRIPTION: Creates OmitProperties, a generic utility model that spreads the Source object and omits properties whose keys match the provided Keys parameter. Useful for selective property exclusion in TypeSpec model construction.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\nmodel OmitProperties<Source, Keys>\n\n```\n\n----------------------------------------\n\nTITLE: Initializing New TypeSpec Project Structure - Bash\nDESCRIPTION: Creates a new project directory and initializes a TypeSpec project in it. These commands set up the working directory and scaffold initial project files like main.tsp and tspconfig.yaml. No additional dependencies are required besides having the TypeSpec compiler installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-csharp.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir myproject\ncd myproject\n```\n\nLANGUAGE: bash\nCODE:\n```\ntsp init\n```\n\n----------------------------------------\n\nTITLE: Defining the ForbiddenResponse Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.ForbiddenResponse` model. This model represents an HTTP 403 Forbidden response, indicating that access to the requested resource is denied. It implicitly defines the `statusCode` as 403.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.ForbiddenResponse\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Class in TypeScript (Continuation Token)\nDESCRIPTION: This TypeScript code defines the `TestClient` class. It holds the client context (`#context`) initialized in the constructor. It exposes the `link` method, which acts as a high-level entry point for the user, delegating the actual operation logic to the `link` function defined in `testClientOperations.ts`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/testClient.ts class TestClient\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  link(filter: string, options?: LinkOptions) {\n    return link(this.#context, filter, options);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Combining Enums using Spread Operator in TypeSpec\nDESCRIPTION: Demonstrates how to incorporate all members from one enum into another using the spread (`...`) operator. This copies the members from the source enum (`Direction`) into the target enum (`DirectionExt`) without creating a reference. Additional members can be added to the target enum.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/enums.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nenum DirectionExt {\n  ...Direction,\n  `North East`,\n  `North West`,\n  `South East`,\n  `South West`,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using New `url` Type in TypeSpec Model\nDESCRIPTION: Shows the recommended usage of the `url` intrinsic type within a TypeSpec model definition. This replaces the deprecated `uri` type for representing URLs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Server {\n  endpoint: url;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitter Options in tspconfig.yaml\nDESCRIPTION: This YAML snippet demonstrates how to configure emitter options within the `tspconfig.yaml` file. It shows enabling `emitter1` with specific options (`option1`, `option2`) and enabling `emitter2` without specific options (implicitly using defaults or just enabling it).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n  # Enable and configure emitter1\n  emitter1:\n    option1: \"option1-value\"\n    option2: \"option1-value\"\n  # Only enable emitter2\n  emitter2: true\n```\n\n----------------------------------------\n\nTITLE: Serializing Widget Model to Transport Format - TypeScript\nDESCRIPTION: Defines function jsonWidgetToTransportTransform for converting Widget from TypeScript shape to wire format (renaming totalWeight to total_weight). Depends on the Widget model interface. Used internally before sending data to the API. Input: Widget object or null/undefined; Output: transport/wire JSON object. Returns null if input is falsy. Required for matching HTTP payload structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonWidgetToTransportTransform(input_?: Widget | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    id: input_.id,\n    total_weight: input_.totalWeight,\n    color: input_.color,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Models - TypeSpec\nDESCRIPTION: Defines nested TypeSpec models where one model includes a property referring to another. Shows basic model composition, mapping to nested XML and OpenAPI3 objects. No additional dependencies; describes the structure of referred models and object nesting.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_24\n\nLANGUAGE: TypeSpec\nCODE:\n```\nmodel Book {\n  author: Author;\n}\n\nmodel Author {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Protobuf Package using @package Decorator in TypeSpec\nDESCRIPTION: This TypeSpec snippet shows the syntax for the `@TypeSpec.Protobuf.package` decorator. Applied to a `Namespace`, it declares that the namespace corresponds to a Protobuf package. The contents will be emitted into a single Protobuf file. It accepts an optional `PackageDetails` object for further configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Protobuf.package(details?: TypeSpec.Protobuf.PackageDetails)\n```\n\n----------------------------------------\n\nTITLE: Sending Date Header Parameter (default encoding) - TypeScript\nDESCRIPTION: Implements a client operation that sends a Date header parameter to the '/default' endpoint, applying RFC7231 serialization via dateRfc7231Serializer. Depends on helpers like parse, dateRfc7231Serializer, and createRestError. Inputs are a TestClientContext, a Date, and optional configuration. It throws on non-204 responses, invokes optional onResponse callbacks, and builds HTTP headers conditionally.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_date.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function defaultEncoding(\\n  client: TestClientContext,\\n  value: Date,\\n  options?: DefaultEncodingOptions,\\n): Promise<void> {\\n  const path = parse(\"/default\").expand({});\\n  const httpRequestOptions = {\\n    headers: {\\n      value: dateRfc7231Serializer(value),\\n    },\\n  };\\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Using the @versioned Decorator in TypeSpec (tsp)\nDESCRIPTION: Shows an example of applying the `@versioned` decorator to the `MyService` namespace. It specifies that `MyService` is versioned according to the `Versions` enum, which lists `v1`, `v2`, and `v3` as the supported versions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_15\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@versioned(Versions)\nnamespace MyService;\nenum Versions {\n  v1,\n  v2,\n  v3,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating a TypeScript Interface with Array of Records\nDESCRIPTION: This TypeScript code displays the generated interface `Widget` corresponding to the TypeSpec model containing an array of records. The `id` property is typed as `Array<Record<string, number>>`, accurately reflecting the TypeSpec definition of an array whose elements are records mapping string keys to numeric values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/array-properties.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport interface Widget {\n  id: Array<Record<string, number>>;\n}\n```\n\n----------------------------------------\n\nTITLE: Enumerating API Key Location for HTTP Authentication in TypeSpec Language\nDESCRIPTION: Defines an enumeration to represent where an API key is supplied in HTTP-based authentication schemes. Supported locations include 'header', 'query', and 'cookie'. This enum is intended for use in API authentication modeling to constrain values to valid API key transmission locations. It does not require additional dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_39\n\nLANGUAGE: typespec\nCODE:\n```\nenum TypeSpec.Http.ApiKeyLocation\n```\n\n----------------------------------------\n\nTITLE: Defining a Multipart Operation with Anonymous Model Part in TypeSpec\nDESCRIPTION: This TypeSpec code defines an operation 'foo' within the 'Test' namespace. The operation expects a 'multipart/form-data' request. The request body includes a part named 'temperature', which is defined as an 'HttpPart' containing an anonymous model with a 'body' property of type 'float64' and a 'contentType' header set to 'text/plain'. The operation is expected to return a 'NoContentResponse' (HTTP 204).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/anonymous_part.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\n\nop foo(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: {\n    temperature: HttpPart<{\n      @body body: float64;\n      @header contentType: \"text/plain\";\n    }>;\n  },\n): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Defining the LocationHeader Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.LocationHeader` model. This model specifically represents the HTTP `Location` header, containing a `location` property (string/URL). It's commonly used in responses like 201 Created or 3xx redirects to indicate the URL of a resource or the status check URL for long-running operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_23\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.LocationHeader\n```\n\n----------------------------------------\n\nTITLE: Running the TypeSpec Compiler in Watch Mode (Shell)\nDESCRIPTION: Command-line instruction to execute the TypeSpec compiler (`tsp compile`) with the watch flag (`--watch`), enabling automatic recompilation on file changes. A bug fix in this release ensures that terminal coloring and error previews function correctly in watch mode.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-03-05.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntsp compile --watch\n```\n\n----------------------------------------\n\nTITLE: Defining Named Array Elements - TypeSpec\nDESCRIPTION: Defines a TypeSpec model with a named (wrapped) array property. Uses @encodedName decorators at both model and property levels to control XML element names for the wrapping and individual array items. Inputs are primitive values; outputs impact XML wrapping and OpenAPI3 schema generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_3\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@encodedName(\"application/xml\", \"XmlPet\")\nmodel Pet {\n  @encodedName(\"application/xml\", \"ItemsTags\")\n  tags: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing All Declared TypeSpec Dependencies via CLI\nDESCRIPTION: This Bash command (`tsp install`) installs all dependencies listed in the `package.json` file, which should include all required client emitters when generating clients for multiple languages.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ntsp install\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with tspd (Bash)\nDESCRIPTION: This command-line snippet shows how to use the `tspd` tool with the `--enable-experimental` flag to generate documentation. It targets the TypeSpec files in the current directory (`.`) and specifies the output directory for the generated documentation as `./docs/`. This command processes TypeSpec definitions to produce documentation for library types and emitter options.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/tspd/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntspd --enable-experimental doc . --output-dir ./docs/\n```\n\n----------------------------------------\n\nTITLE: Suppressing Specific Diagnostic with #suppress in TypeSpec\nDESCRIPTION: This TypeSpec example demonstrates using the '#suppress' directive with its two required arguments: the diagnostic code to suppress ('deprecated') and a justification message ('We are not ready to migrate yet'). This allows fine-grained control over which warnings are silenced for specific parts of the code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/directives.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Post {\n  #suppress \"deprecated\" \"We are not ready to migrate yet\"\n  author: LegacyUser;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using the @example Decorator for Model Examples in TypeSpec\nDESCRIPTION: Shows how to apply the `@example` decorator to a TypeSpec model (`Foo`) to provide a sample instance, as introduced in PR #3572. It includes examples for `utcDateTime` and `duration` types, using scalar constructor functions (`fromISO`) and encoding directives.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_33\n\nLANGUAGE: tsp\nCODE:\n```\n@example(#{ // Using the new object literal syntax\n  id: \"some\",\n  date: utcDateTime.fromISO(\"2020-01-01T00:00:00Z\"),\n  timeout: duration.fromISO(\"PT1M\"),\n})\nmodel Foo {\n  id: string;\n  date: utcDateTime;\n\n  @encode(\"seconds\", int32) timeout: duration;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Codefix to a TypeSpec Linter Diagnostic\nDESCRIPTION: This snippet shows how to attach a codefix to a diagnostic reported by a linter rule. Inside the `context.reportDiagnostic` call, a `codefixes` array is provided, containing a fix defined with `defineCodeFix`. This specific fix aims to add a 'Model' suffix to a model's name.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/linters.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\ncontext.reportDiagnostic({\n  messageId: \"models\",\n  target: model,\n  codefixes: [\n    defineCodeFix({\n      id: \"add-model-suffix\",\n      label: \"Add 'Model' suffix to model name\",\n      fix: (program) => {\n        program.update(model, {\n          name: `${model.name}Model`,\n        });\n      },\n    }),\n  ],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Explicit Query Parameter Definition\nDESCRIPTION: Defines a GET endpoint where a query parameter `param` is explicitly marked with `@query` and included in the route template's query string definition `{?param}`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_88\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/explicit{?param}\n```\n\n----------------------------------------\n\nTITLE: Explicitly Controlling PATCH Optionality with @patch - TypeSpec (tsp)\nDESCRIPTION: Demonstrates explicit disabling of effective PATCH optionality by using the @patch decorator with the implicitOptionality: false option in TypeSpec. This updated pattern ensures that all properties of the request body are not treated as optional during PATCH requests, superseding the prior undocumented behavior of using @parameterVisibility. Requires TypeSpec HTTP support, and is used to control request property optionality in PATCH operation definitions. Key parameter: implicitOptionality set to false.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-18.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\n@patch(#{ implicitOptionality: false })\nop example(@bodyRoot resource: Resource): Resource;\n```\n\n----------------------------------------\n\nTITLE: Encode Duration Property as Float64 Seconds - JSON\nDESCRIPTION: Shows request and response for a duration property encoded as a floating-point number (e.g., 35.625) representing seconds. Requires consistent handling of floating point serialization in both client and server logic. The \\\"value\\\" property is a number and precision must be retained.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": 35.625\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": 35.625\\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Query Continuation Expansion with Record (Standard)\nDESCRIPTION: Defines a GET endpoint to test query continuation expansion (`{&param}`) with explode: false for a record parameter `param`. Given `{a: 1, b: 2}` and a fixed parameter `fixed=true`, the expected query string is `?fixed=true&param=a,1,b,2`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_94\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/query-continuation/standard/record?fixed=true{&param}\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Manager in package.json (JSON)\nDESCRIPTION: Example `package.json` configuration demonstrating how to specify the package manager and version to be used by the `tsp install` command. The `packageManager` field accepts a string defining the manager (e.g., 'npm'), its version, and optionally a SHA512 checksum for integrity verification. If the checksum is omitted, the integrity check is skipped.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-18.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Use npm 11.2.0 with sha512 checksum verification\n  \"packageManager\": \"npm@11.2.0+sha512.3dc9c50ba813a3d54393155a435fe66404b72685ab0e3008f9ae9ed8d81f6104860f07ed2656dd5748c1322d95f3140fa9b19c59a6bba7750fd12285f81866da\",\n  // Use npm 11.2.0 but skip integrity check\n  \"packageManager\": \"npm@11.2.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using the `@invisible` Decorator in TypeSpec\nDESCRIPTION: This snippet demonstrates the recommended replacement for the deprecated `@visibility(\"none\")`. The `@invisible(Lifecycle)` decorator should be used instead to hide TypeSpec elements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_13\n\nLANGUAGE: tsp\nCODE:\n```\n@invisible(Lifecycle)\nexample: string;\n```\n\n----------------------------------------\n\nTITLE: Scaffolding JavaScript Server Code using hsjs-scaffold\nDESCRIPTION: This command uses `npx` to execute the `hsjs-scaffold` tool, part of the `@typespec/http-server-js` package. It reads the TypeSpec definition (`main.tsp`) and configuration (`tspconfig.yaml`) to generate the initial JavaScript/TypeScript server project structure and files in the directory specified by `emitter-output-dir`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-javascript.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx hsjs-scaffold\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Requirements with Editable Installs - Python\nDESCRIPTION: Specifies Python dependencies through a requirements file. The '-r' directive includes dependencies from '../dev_requirements.txt', and the '-e' options indicate local modules to install in editable mode, allowing for development changes without reinstalling. Dependencies must be accessible at the given relative paths, and are expected to be installable as Python packages. The file is used with pip to bootstrap a complete development environment, with all configuration lines interpreted by pip during installation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-python/generator/test/unittests/requirements.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n-r ../dev_requirements.txt\n-e ../../../generator\n-e ../unbranded/generated/special-words\n```\n\n----------------------------------------\n\nTITLE: Escaping Non-interpolated Dollar Braces in Strings - TypeSpec\nDESCRIPTION: Shows how to escape the '${' sequence in strings when interpolation is not desired, following the breaking change in TypeSpec's string handling. By prefixing the dollar sign with a backslash, you indicate that the sequence should be interpreted literally rather than as the start of a template expression. This is necessary for backwards compatibility and to prevent accidental interpolations. The input is a string containing an un-interpolated '${', and the output is a string with that fragment preserved.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-12-06.md#_snippet_1\n\nLANGUAGE: TypeSpec\nCODE:\n```\n\\\"\\\\${\\\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Implicit Status Code Change in TypeSpec (tsp)\nDESCRIPTION: Shows an example TypeSpec operation (`c1`) where the implicit HTTP status code changed from 204 (No Content) to 200 (OK) in version 0.56.0. This applies when the response only contains headers (e.g., `@header foo: string`) and no explicit body or status code is defined.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_12\n\nLANGUAGE: tsp\nCODE:\n```\nop c1(): {@header foo: string}; // status code 200 (used to be 204)\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Error Model with Default Status Code (tsp)\nDESCRIPTION: Defines a TypeSpec error model `NotFoundError` using the `@error` decorator. Although a `statusCode` property exists, it's not explicitly assigned a fixed value using `@statusCode`. In this scenario, the generated C# exception handler will default to returning an HTTP status code of 400 Bad Request.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/CHANGELOG.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@error\nmodel NotFoundError{\n  statusCode: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/xml in a TypeSpec Library (Bash)\nDESCRIPTION: This command installs the `@typespec/xml` package using npm as a peer dependency (`--save-peer`). This method is appropriate when developing a reusable TypeSpec library that itself relies on `@typespec/xml`, allowing the consuming project to manage the core dependency.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/xml\n```\n\n----------------------------------------\n\nTITLE: Testing Repeatability Headers\nDESCRIPTION: Defines a POST endpoint to test the recognition and handling of repeatability request headers: `Repeatability-Request-ID` and `Repeatability-First-Sent`. Ensures these headers are correctly processed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_119\n\nLANGUAGE: http\nCODE:\n```\npost /special-headers/repeatability/immediateSuccess\n```\n\n----------------------------------------\n\nTITLE: Deleting Extension Resource Instance - TypeSpec - typespec\nDESCRIPTION: Specifies the delete operation on ExtensionResourceInstanceOperations to remove a specific extension resource instance. Returns a ResourceDeletedResponse or Error. Resource identification is handled by the operation context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceInstanceOperations.delete(): TypeSpec.Rest.Resource.ResourceDeletedResponse | Error\n```\n\n----------------------------------------\n\nTITLE: Application Discriminator Deserialization for WidgetData in TypeScript\nDESCRIPTION: Implements a runtime discriminator function that inspects the 'kind' property to invoke the correct transformation function for each variant of the 'WidgetData' union. Handles known discriminators ('kind0' and 'kind1'), logging a warning for unknown kinds, and returns the original input as a fallback. Dependencies include the two specialized transformation functions for each variant; input must include a 'kind' property to match successfully.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/discriminated_union_spread.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonWidgetDataToApplicationDiscriminator(input_?: any): WidgetData {\n  if (!input_) {\n    return input_ as any;\n  }\n  const discriminatorValue = input_.kind;\n  if (discriminatorValue === \"kind0\") {\n    return jsonWidgetData0ToApplicationTransform(input_ as any)!;\n  }\n\n  if (discriminatorValue === \"kind1\") {\n    return jsonWidgetData1ToApplicationTransform(input_ as any)!;\n  }\n  console.warn(`Received unknown kind: ` + discriminatorValue);\n  return input_ as any;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Deprecation Programmatically using TypeSpec Compiler API in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to interact with the TypeSpec compiler API to check if a type has been marked with the '#deprecated' directive. It uses the `isDeprecated` function for a boolean check and `getDeprecationDetails` to retrieve the associated deprecation message and target.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/directives.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n```ts\nimport { getDeprecationDetails, isDeprecated } from \"@typespec/compiler\";\nconst isDeprecated = isDeprecated(program, type);\nconst details = getDeprecationDetails(program, type);\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the @madeRequired Decorator in TypeSpec\nDESCRIPTION: Defines the syntax for the `@TypeSpec.Versioning.madeRequired` decorator. This decorator targets `ModelProperty` elements and marks the API version in which a previously optional property became required. It takes a `version` parameter of type `EnumMember`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Versioning.madeRequired(version: EnumMember)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client JS Emitter with Options - YAML\nDESCRIPTION: Demonstrates an example of customizing the @typespec/http-client-js emitter in a TypeSpec configuration file. The YAML includes an \"emit\" section and an \"options\" block for emitter-specific settings. Users can specify additional emitter options such as output directory or package name within the options block to control emitted code behavior.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-js\"\noptions:\n  \"@typespec/http-client-js\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitters (New Structure) in `tspconfig.yaml`\nDESCRIPTION: Demonstrates the new, recommended structure for configuring emitters in `tspconfig.yaml`. It uses separate `emit` (a list of emitters to run) and `options` (a map of emitter-specific options) properties, aligning better with CLI arguments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/openapi3\"\n  - \"other-emitter\"\noptions:\n  @typespec/openapi3:\n    output-file: openapi3.json\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Deserializer for 'Dog' Model\nDESCRIPTION: Exports a TypeScript function `jsonDogToApplicationTransform` responsible for deserializing a plain JavaScript object (typically from transport) into a typed `Dog` object. It handles potential null/undefined input and maps the `color`, `id`, and `name` properties from the input to the `Dog` interface structure (including inherited properties). This function resides in `src/models/internal/serializers.ts`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_extends.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonDogToApplicationTransform\nexport function jsonDogToApplicationTransform(input_?: any): Dog {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    color: input_.color,\n    id: input_.id,\n    name: input_.name,\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Alias in TypeSpec\nDESCRIPTION: This snippet demonstrates the basic syntax for defining an alias in TypeSpec using the `alias` keyword. It creates an alias named `Options` which serves as a shorthand for the union type of string literals \"one\" or \"two\". Aliases simplify syntax but don't appear in the final type graph and cannot be decorated.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/alias.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nalias Options = \"one\" | \"two\";\n```\n\n----------------------------------------\n\nTITLE: Updating package.json: Migrating cadlMain to exports (JSON)\nDESCRIPTION: Demonstrates how to update the `package.json` file to replace the deprecated `cadlMain` field with the standard Node.js `exports` field. This is necessary for correctly specifying the main TypeSpec library entry point.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=json\n- \"cadlMain\": \"lib/main.tsp\",\n+ \"exports\": {\n+   \".\": {\n+     \"tsp\": \"lib/main.tsp\"\n+   }\n+ }\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor Settings via EditorConfig for TypeSpec (INI)\nDESCRIPTION: This INI configuration snippet, designed for an `.editorconfig` file, defines indentation rules for files matching the `*.tsp` pattern. It sets the indent size to 2 and enforces the use of spaces for indentation, aligning with TypeSpec formatting standards.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/formatter.md#_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[*.tsp]\nindent_size = 2\nindent_style = space\n```\n\n----------------------------------------\n\nTITLE: Using @jsonSchema Decorator in TypeSpec\nDESCRIPTION: Demonstrates the basic usage of the `@jsonSchema` decorator in TypeSpec. Applying `@jsonSchema` to a namespace indicates that types within that namespace (like the `Car` model) should be emitted as JSON Schema.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_1\n\nLANGUAGE: TypeSpec\nCODE:\n```\nimport \"@typespec/json-schema\";\n\nusing JsonSchema;\n\n@jsonSchema\nnamespace Example;\n\nmodel Car {\n  make: string;\n  modelName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/sse Library using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `@typespec/sse` library into the current project's dependencies. This library provides bindings and decorators necessary for defining Server-Sent Events interactions within TypeSpec specifications.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/sse/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/sse\n```\n\n----------------------------------------\n\nTITLE: Deleting a Resource - TypeSpec - typespec\nDESCRIPTION: Specifies a delete operation that can remove a resource instance, returning a ResourceDeletedResponse if successful or an Error otherwise. Takes no input parameters, as resource identification is expected from the context. Requires the ResourceDeletedResponse type and standard error handling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_35\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceDelete.delete(): TypeSpec.Rest.Resource.ResourceDeletedResponse | Error\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec and Emitting Java Client via Command Line\nDESCRIPTION: This command invokes the TypeSpec compiler (`tsp`) to process TypeSpec definitions located in the current directory (`.`) and generates Java HTTP client code using the specified emitter (`@typespec/http-client-java`). Requires the TypeSpec compiler and the emitter library to be installed, along with Node.js, Java 17+, and Maven.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ntsp compile . --emit=@typespec/http-client-java\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Emitter Options in TypeSpec Config - YAML\nDESCRIPTION: Illustrates extending the TypeSpec config to include custom options for the @typespec/json-schema emitter. The 'options' key allows for emitter-specific configuration, with each option set as a key-value pair under the emitter identifier. Requires the TypeSpec compiler and a config file supporting option sections. Most options, such as output directory or serialization format, must adhere to the types and constraints documented elsewhere in the file. Inputs are YAML values, and the effect is to tailor the emitter's behavior to project needs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/emitter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/json-schema\"\noptions:\n  \"@typespec/json-schema\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Multipart/Form-Data Request in TypeSpec\nDESCRIPTION: This TypeSpec code defines an operation `create` that accepts a `multipart/form-data` request. The request body, decorated with `@multipartBody`, contains two parts defined as properties of an anonymous model: `username` of type string and `avatar` of type File, both wrapped in `HttpPart`. It requires importing and using the `@typespec/http` library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/multipart.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp title=main.tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/openapi3\\\"]}\"\nimport \"@typespec/http\";\n\nusing Http;\n\nop create(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: {\n    username: HttpPart<string>;\n    avatar: HttpPart<File>;\n  },\n): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Default OpenAPI Output for safeint (int64) (YAML)\nDESCRIPTION: Shows the standard OpenAPI representation for the TypeSpec 'safeint' scalar type when the 'safeint-strategy' option is not set to 'double-int'. The default output uses 'type: integer' with 'format: int64'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-03-05.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntype: integer, format: int64\n```\n\n----------------------------------------\n\nTITLE: Executing the TypeSpec Migration Tool via Bash Command\nDESCRIPTION: This snippet demonstrates how to run the experimental TypeSpec migration tool using npx in a terminal. It requires Node.js and npx installed, along with access to @typespec/migrate on npm. Executing this command in your TypeSpec project folder automates several migration steps, such as renaming files and updating configurations. The command does not take any arguments and applies default migration behavior in the current directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/cadl-typespec-migration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @typespec/migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Protobuf Emitter Options in TypeSpec (YAML)\nDESCRIPTION: Illustrates how to provide specific options to the `@typespec/protobuf` emitter within the `tspconfig.yaml` file. Options are defined under a top-level `options` key, nested under a key matching the emitter's name. This allows customization of the emitter's behavior, such as setting output directories or controlling which types are emitted.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/emitter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/protobuf\"\noptions:\n  \"@typespec/protobuf\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Optional Path Parameter Example - TypeScript\nDESCRIPTION: Specifies an API operation supporting an optional path parameter: \\\"optional(name?: string)\\\". Presents expected requests both with and without the parameter (\\\"/optional\\\", \\\"/optional/foo\\\"). Implementations must handle both URL forms.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\noptional(name?: string)\n```\n\nLANGUAGE: text\nCODE:\n```\n/optional\n```\n\nLANGUAGE: text\nCODE:\n```\n/optional/foo\n```\n\n----------------------------------------\n\nTITLE: Getting Default (Missing) Optional PlainDate Properties - JSON\nDESCRIPTION: Shows an empty JSON response, indicating the optional plain date field is absent. Clients and servers need to ensure no default values are serialized when property is unset.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_294\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Client Emitters in tspconfig.yaml\nDESCRIPTION: This YAML configuration demonstrates how to configure multiple TypeSpec client emitters (C#, Java, Python, JS) within a single `tspconfig.yaml` file. Each emitter is listed under `emit` and has its specific options, like `emitter-output-dir`, defined under the `options` key.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-csharp\"\n  - \"@typespec/http-client-java\"\n  - \"@typespec/http-client-python\"\n  - \"@typespec/http-client-js\"\noptions:\n  \"@typespec/http-client-csharp\":\n    emitter-output-dir: \"{project-root}/clients/dotnet\"\n  \"@typespec/http-client-java\":\n    emitter-output-dir: \"{project-root}/clients/java\"\n  \"@typespec/http-client-python\":\n    emitter-output-dir: \"{project-root}/clients/python\"\n  \"@typespec/http-client-js\":\n    emitter-output-dir: \"{project-root}/clients/javascript\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Map<string, T> with Record<T> in TypeSpec\nDESCRIPTION: Demonstrates the replacement for the removed `Map<string, string>`. The equivalent and recommended type is now `Record<string>`, representing a record (object) with string values and implicit string keys.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Foo {\n  options: Record<string>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example TypeScript Emitter Generating Type Declarations\nDESCRIPTION: This TSX example demonstrates a TypeSpec emitter that generates TypeScript code. It fetches relevant TypeSpec types (using a placeholder `getInterestingTypes()` function), sets up the output structure using Alloy components (`Output`, `SourceDirectory`, `ts.SourceFile`), and utilizes the `<For>` component to iterate through the types, generating a TypeScript `<ts.TypeDeclaration>` for each within an `index.ts` source file. It also generates a basic `README.md`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-framework.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { For, Output, SourceDirectory, SourceFile } from \"@alloy-js/core\";\nimport * as ts from \"@alloy-js/typescript\";\nimport type { EmitContext } from \"@typespec/compiler\";\nimport { writeOutput } from \"@typespec/emitter-framework\";\n\nexport async function $onEmit(context: EmitContext) {\n  // get some models from the type graph\n  const types = getInterestingTypes();\n  await writeOutput(\n    <Output>\n      <SourceDirectory path=\"src\">\n        <ts.SourceFile path=\"index.ts\">\n          <For each={types}>{(type) => <ts.TypeDeclaration type={type} />}</For>\n        </ts.SourceFile>\n      </SourceDirectory>\n      <SourceFile path=\"README.md\" filetype=\"md\">\n        Hello world!\n      </SourceFile>\n    </Output>,\n    context.emitterOutputDir,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Linter Extension in TypeSpec using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a linter in a TypeSpec project by extending the @typespec/http/all ruleset. To use this, add the snippet to the tspconfig.yaml file at the root of your TypeSpec project. The \"linter\" key specifies rules for code linting, and the \"extends\" entry defines one or more rulesets to apply. The key parameter is the ruleset name to extend. Inputs are YAML configuration settings and no outputs are directly produced; the effect is realized by linter behavior during TypeSpec compilation. A valid TypeSpec environment and the referenced ruleset package (e.g., @typespec/http) should be available.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/linter.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlinter:\n  extends:\n    - \"@typespec/http/all\"\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Resource Interface for Categories - TypeSpec\nDESCRIPTION: Illustrates how to define an additional REST API interface (Categories) in TypeSpec. New interfaces like this prompt the scaffold process to add related controllers and stubs in the generated C# code. Place inside your TypeSpec source file to extend your API.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-csharp.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\"/categories\")\n@tag(\"Categories\")\ninterface Categories {\n  /** List categories */\n  @get list(): CategoryList | Error;\n  // More operations...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Resources Via Operations Interface - TypeSpec - typespec\nDESCRIPTION: Declares the list operation as part of the ResourceOperations interface, returning a paginated collection of resources or an Error. No input parameters are defined. Useful for service APIs exposing bulk resource retrieval endpoints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_47\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceOperations.list(): TypeSpec.Rest.Resource.CollectionWithNextLink<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Model Properties with Typespec - Typespec\nDESCRIPTION: Defines a model 'Widget' in the 'Test' namespace using Typespec. The 'Widget' model includes a 'name' string property and a 'subWidget' property that is itself an anonymous inline object containing 'location' and optional 'age' fields. Also includes an operation 'foo' that returns a 'Widget'. This pattern is intended for API modeling scenarios where nested objects should be strongly typed without declaring them globally. No external dependencies are required for Typespec syntax.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/inline-models.md#_snippet_0\n\nLANGUAGE: Typespec\nCODE:\n```\nnamespace Test;\nmodel Widget {\n  name: string;\n  subWidget: {\n    location: string;\n    age?: int32;\n  };\n}\nop foo(): Widget;\n```\n\n----------------------------------------\n\nTITLE: Generating Nested API Client Classes - TypeScript - typescript\nDESCRIPTION: Implements the generated TypeScript client code for the Widget Service defined in TypeSpec, featuring hierarchical DemoServiceClient and WidgetsClient classes. Relies on context and options modules for request and client initialization, and provides async methods corresponding to service operations, forwarding typed arguments and options as defined in the TypeSpec contract. Requires proper imports for context, client modules, and operation functions; expects endpoint strings and allows customization through options objects.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/nested_client.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DemoServiceClientContext,\n  DemoServiceClientOptions,\n  createDemoServiceClientContext,\n} from \\\"./api/demoServiceClientContext.js\\\";\nimport {\n  ListOptions,\n  list,\n  ReadOptions,\n  read,\n  CreateOptions,\n  create,\n  UpdateOptions,\n  update,\n  DeleteOptions,\n  delete_,\n  AnalyzeOptions,\n  analyze,\n} from \\\"./api/widgetsClient/widgetsClientOperations.js\\\";\nimport {\n  WidgetsClientContext,\n  WidgetsClientOptions,\n  createWidgetsClientContext,\n} from \\\"./api/widgetsClient/widgetsClientContext.js\\\";\n\nexport class DemoServiceClient {\n  #context: DemoServiceClientContext;\n  widgetsClient: WidgetsClient;\n  constructor(endpoint: string, options?: DemoServiceClientOptions) {\n    this.#context = createDemoServiceClientContext(endpoint, options);\n    this.widgetsClient = new WidgetsClient(endpoint, options);\n  }\n}\nexport class WidgetsClient {\n  #context: WidgetsClientContext;\n\n  constructor(endpoint: string, options?: WidgetsClientOptions) {\n    this.#context = createWidgetsClientContext(endpoint, options);\n  }\n  async list(options?: ListOptions) {\n    return list(this.#context, options);\n  }\n  async read(id: string, options?: ReadOptions) {\n    return read(this.#context, id, options);\n  }\n  async create(weight: number, color: \\\"red\\\" | \\\"blue\\\", options?: CreateOptions) {\n    return create(this.#context, weight, color, options);\n  }\n  async update(id: string, weight: number, color: \\\"red\\\" | \\\"blue\\\", options?: UpdateOptions) {\n    return update(this.#context, id, weight, color, options);\n  }\n  async delete_(id: string, options?: DeleteOptions) {\n    return delete_(this.#context, id, options);\n  }\n  async analyze(id: string, options?: AnalyzeOptions) {\n    return analyze(this.#context, id, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Azure SDK Dependency in Maven XML\nDESCRIPTION: This XML snippet demonstrates how to declare the Azure Resource Manager {{service-name}} client library dependency in a `pom.xml` file for Maven projects. Replace the placeholders `{{group-id}}`, `{{artifact-id}}`, and `{{artifact-version}}` with the actual values for the specific service library. This dependency is necessary to use the client library in a Java project managed by Maven.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-mgmt/src/main/resources/Readme.txt#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>{{group-id}}</groupId>\n    <artifactId>{{artifact-id}}</artifactId>\n    <version>{{artifact-version}}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Record Model in TypeSpec (Typespec)\nDESCRIPTION: Defines a generic Record model where all properties share the same Element type. Useful for representing map-like or dynamically keyed collections in TypeSpec. The sole Element parameter governs the type of all property values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_19\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Record<Element>\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Enumeration with the 'enum' Keyword in TypeSpec\nDESCRIPTION: Illustrates the use of the `enum` keyword in TypeSpec to define a set of named constant string values ('red', 'blue', 'green'). This is one way to represent an OpenAPI enum. Note the use of quotes around string enum values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nenum Color {\n  \"red\",\n  \"blue\",\n  \"green\",\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum Numeric Value with @minValue in TypeSpec\nDESCRIPTION: Presents @minValue usage to specify lower bounds for numeric properties and scalars, ensuring values do not fall below a threshold. Used in scenarios like age or required minimums.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_32\n\nLANGUAGE: typespec\nCODE:\n```\n@minValue(value: valueof numeric)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom OpenAPI Extensions with Decorators using TypeSpec\nDESCRIPTION: This TypeSpec snippet demonstrates the use of the @extension decorator to add custom OpenAPI extensions (such as 'x-ms-pageable') to an operation. The first parameter is the extension name, while the second is an object containing parameters relevant to the OpenAPI extension. This method can be used across TypeSpec types and operations for arbitrary OpenAPI customization.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n@extension(\"x-ms-pageable\", #{ nextLinkName: \"nextLink\" })\nop listUsers(): UserList;\n```\n\n----------------------------------------\n\nTITLE: Using the @madeRequired Decorator in TypeSpec (tsp)\nDESCRIPTION: Illustrates the usage of the `@madeRequired` decorator on the `nickname` property within the `Foo` model. It indicates that the `nickname` property, potentially optional in previous versions, became required starting from `Versions.v2`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Foo {\n  name: string;\n\n  @madeRequired(Versions.v2)\n  nickname: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ModelProperty-Containing Operation in TypeSpec - tsp\nDESCRIPTION: Defines a TypeSpec service namespace with a Request model containing a string ID and a profileImage of bytes, exposing a POST operation `foo` that takes the model property `profileImage` as an argument and returns a NoContentResponse. Dependencies include the TypeSpec language environment and any necessary decorators (`@service`, `@post`, `@route`). Requires understanding of TypeSpec's model and operation syntax. Inputs are a `profileImage` property of type bytes, returned over an HTTP endpoint `/foo`; no output content is returned (204 No Content).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/nested_property.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n# Should handle a model that has a property of type ModelProperty\\n\\n@service\\nnamespace Test;\\nmodel Request {\\n  id: string;\\n  profileImage: bytes;\\n}\\n\\n@post\\n@route(\"/foo\")\\nop foo(profileImage: Request.profileImage): NoContentResponse;\\n\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP Client JS Emitter via TypeSpec Config - YAML\nDESCRIPTION: Provides the YAML syntax for enabling the @typespec/http-client-js emitter in a TypeSpec configuration file. This entry should be placed in the project's TypeSpec config to ensure emitted code uses the HTTP client JS emitter. No additional options are set in this example; the emitter will use default behaviors.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-js\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Emitter in Config File (YAML)\nDESCRIPTION: This snippet demonstrates how to configure TypeSpec emitters within the project's configuration file (typically `tspconfig.yaml`). By listing emitter package names under the `emit` key, these emitters will be automatically invoked when `tsp compile` is run without the `--emit` flag.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http-server-js/reference/emitter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nemit:\n  - \"@typespec/http-server-js\"\n```\n```\n\n----------------------------------------\n\nTITLE: Updating @info Decorator Syntax for Simple Objects in TypeSpec\nDESCRIPTION: Shows the required syntax update for the `@info` decorator in TypeSpec version 0.66.0. Following the pattern of expecting explicit values, object literals passed to `@info` must now be prefixed with `#` (`#{...}`). This ensures the provided object is treated as raw data.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/CHANGELOG.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=\"tsp\"\n-@info({ version: \"1.0.0\" })\n+@info(#{ version: \"1.0.0\" })\n```\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/streams via NPM (bash)\nDESCRIPTION: This bash command installs the @typespec/streams library using the npm package manager. The package is a dependency for using stream bindings with the TypeSpec specification language. It must be run in a terminal within your TypeSpec project root.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/streams/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/streams\n```\n\n----------------------------------------\n\nTITLE: Defining the Generic SSEStream Model in TypeSpec\nDESCRIPTION: This snippet defines the generic `TypeSpec.SSE.SSEStream<Type>` model. It represents a stream of server-sent events, automatically setting the content type to 'text/event-stream'. The template parameter 'Type' specifies the model(s) describing the structure of the events within the stream, typically a union of different event types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/sse/reference/data-types.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.SSE.SSEStream<Type>\n```\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Serializer for 'Dog' Model\nDESCRIPTION: Exports a TypeScript function `jsonDogToTransportTransform` responsible for serializing a `Dog` object into a plain JavaScript object suitable for transport. It handles potential null/undefined input and maps the `color`, `id`, and `name` properties (including inherited ones). This function resides in `src/models/internal/serializers.ts`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_extends.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonDogToTransportTransform\nexport function jsonDogToTransportTransform(input_?: Dog | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    color: input_.color,\n    id: input_.id,\n    name: input_.name,\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Client Libraries with TypeSpec CLI\nDESCRIPTION: This Bash command (`tsp compile`) triggers the TypeSpec compiler to process the `main.tsp` file. When multiple emitters are configured in `tspconfig.yaml`, this single command will invoke all of them, generating client libraries for each specified language (e.g., C#, Java, Python, JS) in their respective output directories.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile {path to main.tsp}/main.tsp\n```\n\n----------------------------------------\n\nTITLE: Creating an Update Model using @withLifecycleUpdate in TypeSpec\nDESCRIPTION: This snippet demonstrates applying the `@withLifecycleUpdate` decorator to create a new model `DogUpdate` based on the `Dog` model. `DogUpdate` will effectively contain only properties from `Dog` that are marked with `Lifecycle.Update` visibility (or are implicitly updateable), such as `secretName` and `name` in this example.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_70\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Dog {\n  @visibility(Lifecycle.Read)\n  id: int32;\n\n  @visibility(Lifecycle.Create, Lifecycle.Update)\n  secretName: string;\n\n  name: string;\n}\n\n@withLifecycleUpdate\nmodel DogUpdate {\n  ...Dog\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Marking OpenAPI Operations as Deprecated - TypeSpec\nDESCRIPTION: Exemplifies the use of the #deprecated directive to mark TypeSpec operations as deprecated, causing the OpenAPI emitter to set the deprecated property on the operation object. Accepts a string reason; output OpenAPI docs indicate deprecation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n#deprecated \"Use getUser instead\"\\nop fetchUser(id: string): User;\n```\n\n----------------------------------------\n\nTITLE: Importing TypeSpec Playground Styles (Breaking Change)\nDESCRIPTION: This JavaScript/TypeScript import statement illustrates the required method for importing styles for the `@typespec/playground` package due to a breaking change introduced in this release. Users must now explicitly import the CSS file separately.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-01-23.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"@typespec/playground/styles.css\\\";\n```\n\n----------------------------------------\n\nTITLE: Migrating Versioned Library Dependencies Using @versionedDependency - Typespec - Typespec\nDESCRIPTION: This Typespec snippet demonstrates the former approach for specifying dependencies between versioned TypeSpec namespaces using the now-deprecated @versionedDependency decorator. It shows how versioned dependencies were managed with arrays mapping specific versions of Microsoft.Observability to versions of Azure.Core and Azure.ResourceManager. To use this, the @versionedDependency decorator and associated arrays mapping each versioned enum were required. Inputs are the decorated versions and dependency arrays; the output is a namespace with correct dependency mapping. The snippet also includes example enum and interface declarations and depends on decorators such as @armProviderNamespace, @service, @versioned, and @versionedDependency.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-02-07.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@armProviderNamespace\n@service(#{ title: \"Microsoft.Observability\" })\n@versionedDependency(\n  [\n    [Microsoft.Observability.Versions.v2021_06_13_preview, Azure.Core.Versions.v1_0_Preview_2],\n    [Microsoft.Observability.Versions.v2022_04_30_preview, Azure.Core.Versions.v1_0_Preview_2]\n  ]\n)\n@versionedDependency(\n  [\n    [\n      Microsoft.Observability.Versions.v2021_06_13_preview,\n      Azure.ResourceManager.Versions.v1_0_Preview_1\n    ],\n    [\n      Microsoft.Observability.Versions.v2022_04_30_preview,\n      Azure.ResourceManager.Versions.v1_0_Preview_1\n    ]\n  ]\n)\n@versioned(Versions)\nnamespace Microsoft.Observability;\n\ninterface Operations extends Azure.ResourceManager.Operations {}\n\nenum Versions {\n  v2021_06_13_preview: \"2021-06-13-preview\",\n  v2022_04_30_preview: \"2022-04-30-preview\",\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Spector Coverage in Azure DevOps Pipeline (YAML)\nDESCRIPTION: Defines an Azure DevOps pipeline task (`AzureCLI@2`) specifically for uploading Spector coverage results within the `azure-sdk/internal` ADO project context. It uses an inline bash script calling `tsp-spector upload-coverage` with necessary parameters like `--storageAccountName typespec`, `--containerName coverages`, `--generatorMode standard`, and other generator-specific options. This step requires an Azure subscription connection named \"Typespec Storage\".\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/using-spector.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- task: AzureCLI@2\n  displayName: Upload scenario coverage\n  inputs:\n    azureSubscription: \"Typespec Storage\"\n    scriptType: \"bash\"\n    scriptLocation: \"inlineScript\"\n    inlineScript: `tsp-spector upload-coverage --storageAccountName typespec --containerName coverages --generatorMode standard  ... FILL options fitting your generator here as described above...`\n```\n\n----------------------------------------\n\nTITLE: Defining Unnamed Parts in Multipart/Mixed Requests using Tuples in TypeSpec\nDESCRIPTION: This TypeSpec code defines a `multipart/mixed` operation where the request body is specified as a tuple (`[...]`) decorated with `@multipartBody`, instead of a model. This allows for parts without explicit names. It shows defining parts for a string, a named File (`avatar`), a custom `Address` model, and an array of `File` parts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/multipart.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Address {\n  street: string;\n  city: string;\n}\nop create(\n  @header contentType: \"multipart/mixed\",\n  @multipartBody body: [\n    HttpPart<string>,\n    HttpPart<File, #{ name: \"avatar\" }>,  // An name can also be provided this way\n    HttpPart<Address>,\n    HttpPart<File>[]\n  ],\n): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing from the CLI for TypeSpec Compile - Bash - bash\nDESCRIPTION: Shows how to activate tracing for specific areas of the TypeSpec compiler using CLI flags. Useful for debugging or auditing individual build steps. Requires tsp and an appropriate TypeSpec project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --trace import-resolution --trace projection\n\n```\n\n----------------------------------------\n\nTITLE: Running TypeSpec Playground Website using npm (Shell)\nDESCRIPTION: Provides standard npm commands to manage the TypeSpec Playground website development lifecycle. `npm start` launches the development server, `npm run preview` builds the project for production and serves it locally for preview, and `npm run build` compiles the project for production deployment.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/playground-website/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n- `npm start` to start in dev mode\n- `npm run preview` to build and preview prod mode\n- `npm run build` to build for production\n```\n\n----------------------------------------\n\nTITLE: Adding C# Client Emitter Dependency in package.json\nDESCRIPTION: This JSON snippet shows how to add the specific dependency for the TypeSpec C# HTTP client emitter (`@typespec/http-client-csharp`) to your project's `package.json` file. This is the first step in setting up the C# client generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n  \"@typespec/http-client-csharp\": \"^0.1.9-alpha.20250113.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec OpenAPI Package via npm Bash Command - Bash\nDESCRIPTION: Installs the @typespec/openapi package directly using npm. This is required for integrating TypeSpec OpenAPI features into a project. Ensure npm is installed; executing this command adds the module as a regular dependency, with no parameters needed. Output is a package installation in node_modules.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/openapi\n\n```\n\n----------------------------------------\n\nTITLE: Recommended npm Scripts for TypeSpec Library - JSONC\nDESCRIPTION: This code block defines typical npm scripts used in a TypeSpec library project's package.json. Scripts include cleaning build artifacts, building TypeScript, watching for changes, and running tests for different Node.js versions. These scripts are meant to streamline development and testing workflows.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_8\n\nLANGUAGE: jsonc\nCODE:\n```\n  \"scripts\": {\n    \"clean\": \"rimraf ./dist ./temp\",\n    \"build\": \"tsc -p .\",\n    \"watch\": \"tsc -p . --watch\",\n    \"test\": \"node --test ./dist/test/**/*.test.js\", // Node 22+\n    \"test\": \"node --test ./dist/test/\"              // Node 18, 20\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitter `output-dir` (Old Syntax) in YAML\nDESCRIPTION: Illustrates the deprecated method of configuring an emitter's output path using the `output-dir` property directly within the emitter's configuration block in `tspconfig.yaml`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nemitters:\n  my-emitter:\n    output-dir: /path/to-output-dir\n```\n\n----------------------------------------\n\nTITLE: Getting All Optional Collections of Bytes Properties - JSON\nDESCRIPTION: A response object where an optional property is a collection (array) of base64-encoded byte strings, with two entries present. Used to ensure list encoding/decoding supports array cardinality and that all elements are correctly handled by clients and servers. The format is applicable to multiple-value binary fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_269\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": [\"aGVsbG8sIHdvcmxkIQ==\", \"aGVsbG8sIHdvcmxkIQ==\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Namespaces and Operation in TypeSpec\nDESCRIPTION: Defines a dotted namespace hierarchy in TypeSpec where only the last namespace segment (Baz) contains a single operation (@get op get). The service is annotated with a title and exposes an HTTP GET operation returning a string array. Dependencies include TypeSpec compiler and proper service configuration. There are no parameters; the operation returns a list of strings, illustrating a convention for mapping service organization to client structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/dotted_namespace.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service(#{ title: \\\"TestService\\\" })\\nnamespace Foo.Bar.Baz;\\n@get op get(): string[];\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Error Model with Fixed Status Code (tsp)\nDESCRIPTION: Defines a TypeSpec error model `NotFoundError` using the `@error` decorator. The `@statusCode` decorator explicitly sets the HTTP status code to 404 when this error model is used, indicating that the corresponding C# exception will result in a 404 Not Found response.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/CHANGELOG.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@error\nmodel NotFoundError{\n  @statusCode _: 404\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Test-Spector.ps1 Script for Spector Scenarios (Shell Output)\nDESCRIPTION: Example console output demonstrating the execution of the `./eng/scripts/Test-Spector.ps1` script for the `authentication/api-key` library. It showcases the build process (`npm run build:emitter`, `dotnet build`), TypeSpec code generation using `tsp compile` without stubs, and running filtered .NET tests using `dotnet test`. This illustrates the automated testing workflow for Spector scenarios within the TypeSpec C# client generator project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-csharp/generator/docs/spector.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nC:\\repos\\typespec\\packages\\http-client-csharp\\eng\\scripts [spector-rename +0 ~1 -0 !]> .\\Test-Spector.ps1 authentication/api-key\nBuilding emitter and generator\n> npm run build:emitter\n\n> @typespec/http-client-csharp@0.1.9 build:emitter\n> tsc -p ./emitter/tsconfig.build.json\n\n> dotnet build C:\\repos\\typespec\\packages\\http-client-csharp\\eng/../generator/Microsoft.TypeSpec.Generator.ClientModel.StubLibrary/src\nMSBuild version 17.9.8+610b4d3b5 for .NET\n  Determining projects to restore...\n  All projects are up-to-date for restore.\n  Microsoft.TypeSpec.Generator.Input -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Microsoft.TypeSpec.Generator.Input\\Debug\\net8.0\\Microsoft.TypeSpec.Generator.Input.dll\n  Microsoft.TypeSpec.Generator -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Microsoft.TypeSpec.Generator\\Debug\\net8.0\\Microsoft.TypeSpec.Generator.dll\n  Microsoft.TypeSpec.Generator.ClientModel -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Microsoft.TypeSpec.Generator.ClientModel\\Debug\\net8.0\\Microsoft.TypeSpec.Generator.ClientModel.dll\n  Copying output to dist path\n  Microsoft.TypeSpec.Generator.ClientModel.StubLibrary -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Microsoft.TypeSpec.Generator.ClientModel.StubLibrary\\Debug\\net8.0\\Microsoft.TypeSpec.Generator.ClientModel.StubLibrary.dll\n  Copying output to dist path\n\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:00.90\nRegenerating authentication\\api-key\n> npx tsp compile C:\\repos\\typespec\\packages\\http-client-csharp\\node_modules\\@typespec\\http-specs\\specs\\authentication\\api-key\\main.tsp --trace @typespec/http-client-csharp --emit @typespec/http-client-csharp --option @typespec/http-client-csharp.emitter-output-dir=C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key --option @typespec/http-client-csharp.save-inputs=true\nTypeSpec compiler v0.64.0\n\ntrace @typespec/http-client-csharp.info: Checking if C:/repos/typespec/packages/http-client-csharp/generator/TestProjects/Spector/http/authentication/api-key/src/Authentication.ApiKey.csproj exists\ntrace @typespec/http-client-csharp.info: dotnet --roll-forward Major C:/repos/typespec/packages/http-client-csharp/dist/generator/Microsoft.TypeSpec.Generator.dll C:/repos/typespec/packages/http-client-csharp/generator/TestProjects/Spector/http/authentication/api-key -p ScmCodeModelGenerator\nWriting C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key\\src\\Generated\\Internal\\CodeGenTypeAttribute.cs\nWriting C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key\\src\\Generated\\Internal\\CodeGenMemberAttribute.cs\nWriting C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key\\src\\Generated\\Internal\\CodeGenSuppressAttribute.cs\nWriting C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key\\src\\Generated\\Internal\\CodeGenSerializationAttribute.cs\nWriting C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key\\src\\Generated\\Internal\\Argument.cs\nWriting C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key\\src\\Generated\\ApiKeyClient.cs\nWriting C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key\\src\\Generated\\ApiKeyClient.RestClient.cs\nWriting C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key\\src\\Generated\\ApiKeyClientOptions.cs\nWriting C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key\\src\\Generated\\Internal\\TypeFormatters.cs\nWriting C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key\\src\\Generated\\Internal\\ClientPipelineExtensions.cs\nWriting C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key\\src\\Generated\\Internal\\ErrorResult.cs\nWriting C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector\\http\\authentication\\api-key\\src\\Generated\\Internal\\ClientUriBuilder.cs\nCompilation completed successfully.\n\nTesting authentication\\api-key\n> dotnet test C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\TestProjects\\Spector.Tests\\TestProjects.Spector.Tests.csproj --filter \"FullyQualifiedName~TestProjects.Spector.Tests.Http.Authentication.ApiKey\"\n  Determining projects to restore...\n  All projects are up-to-date for restore.\n  Encode.Duration -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Encode.Duration\\Debug\\netstandard2.0\\Encode.Duration.dll\n  Client.Structure.Service.Default -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Client.Structure.Service.Default\\Debug\\netstandard2.0\\Client.Structure.Service.Default.dll\n  Parameters.CollectionFormat -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Parameters.CollectionFormat\\Debug\\netstandard2.0\\Parameters.CollectionFormat.dll\n  Payload.MediaType -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Payload.MediaType\\Debug\\netstandard2.0\\Payload.MediaType.dll\n  Parameters.Basic -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Parameters.Basic\\Debug\\netstandard2.0\\Parameters.Basic.dll\n  Client.Structure.Service.Multi.Client -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Client.Structure.Service.Multi.Client\\Debug\\netstandard2.0\\\n  Client.Structure.Service.Multi.Client.dll\n  Encode.Bytes -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Encode.Bytes\\Debug\\netstandard2.0\\Encode.Bytes.dll\n  Encode.Datetime -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Encode.Datetime\\Debug\\netstandard2.0\\Encode.Datetime.dll\n  Payload.JsonMergePatch -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Payload.JsonMergePatch\\Debug\\netstandard2.0\\Payload.JsonMergePatch.dll\n  Authentication.OAuth2 -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Authentication.OAuth2\\Debug\\netstandard2.0\\Authentication.OAuth2.dll\n  Client.Structure.Service -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Client.Structure.Service\\Debug\\netstandard2.0\\Client.Structure.Service.dll\n  Parameters.Spread -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Parameters.Spread\\Debug\\netstandard2.0\\Parameters.Spread.dll\n  Type.Array -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Type.Array\\Debug\\netstandard2.0\\Type.Array.dll\n  Payload.ContentNegotiation -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Payload.ContentNegotiation\\Debug\\netstandard2.0\\Payload.ContentNegotiation.dll\n  Encode.Numeric -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Encode.Numeric\\Debug\\netstandard2.0\\Encode.Numeric.dll\n  Authentication.Http.Custom -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Authentication.Http.Custom\\Debug\\netstandard2.0\\Authentication.Http.Custom.dll\n  Type.Enum.Fixed -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Type.Enum.Fixed\\Debug\\netstandard2.0\\Type.Enum.Fixed.dll\n  Client.Structure.Service.TwoOperationGroup -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Client.Structure.Service.TwoOperationGroup\\Debug\\netstandard2.0\\Client.Structure.Service.TwoOperationGroup.dll\n  Type.Enum.Extensible -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Type.Enum.Extensible\\Debug\\netstandard2.0\\Type.Enum.Extensible.dll\n  Parameters.BodyOptionality -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Parameters.BodyOptionality\\Debug\\netstandard2.0\\Parameters.BodyOptionality.dll\n  Authentication.Union -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Authentication.Union\\Debug\\netstandard2.0\\Authentication.Union.dll\n  Client.Structure.Service.Renamed.Operation -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Client.Structure.Service.Renamed.Operation\\Debug\\netstandard2.0\\Client.Structure.Service.Renamed.Operation.dll\n  Resiliency.SrvDriven.V2 -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Resiliency.SrvDriven.V2\\Debug\\netstandard2.0\\Resiliency.SrvDriven.V2.dll\n  Type.Model.Inheritance.EnumDiscriminator -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Type.Model.Inheritance.EnumDiscriminator\\Debug\\netstandard2.0\\Type.Model.Inheritance.EnumDiscriminator.dll\n  Serialization.EncodedName.Json -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\Serialization.EncodedName.Json\\Debug\\netstandard2.0\\Serialization.EncodedName.Json.dll\n  SpecialHeaders.Repeatability -> C:\\repos\\typespec\\packages\\http-client-csharp\\generator\\artifacts\\bin\\SpecialHeaders.Repeatability\\Debug\\netstandard2.0\\SpecialHeaders.Repeatability.dll\n```\n\n----------------------------------------\n\nTITLE: Using XML Configuration in OpenAPI3 with TypeSpec - TypeSpec\nDESCRIPTION: This snippet shows a model decorated for XML serialization via OpenAPI3 and @typespec/xml. Utilizes @encodedName for the overall model and @Xml.name for the 'tags' property, guiding code generation and OpenAPI emitters. \nDependencies: @typespec/xml, OpenAPI3 emitter. \nParameters: Model fields and encoding labels. \nInputs: N/A, Outputs: XML-configured model for OpenAPI/YAML emission. \nLimitation: Requires emitter with XML support.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-11-05.md#_snippet_6\n\nLANGUAGE: tsp\nCODE:\n```\n@encodedName(\"application/xml\", \"XmlPet\")\nmodel Pet {\n  @Xml.name(\"ItemsTags\")\n  tags: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Running Spector Dashboard Development Server Using npm Scripts - Bash\nDESCRIPTION: This snippet demonstrates how to start the Spector Dashboard development environment using npm scripts. It supports both 'npm run start' and 'npm run dev', providing flexibility depending on which script is configured in package.json. These commands require Node.js and npm to be installed and executed from the project root. Output will run the application in development mode, typically with features like hot-reloading enabled.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spec-dashboard/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n# or\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for DELETE /type/model/visibility\nDESCRIPTION: This JSON represents the expected input body for a DELETE request to the `/type/model/visibility` endpoint. It demonstrates sending a model containing properties intended for delete operations, specifically 'deleteProp'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_183\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deleteProp\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Versioning Decorators in TypeSpec\nDESCRIPTION: This TypeSpec (`tsp`) code defines a model `Widget` decorated with `@removed` starting from `Versions.v3`. It contains a property `name` decorated with `@added` starting from `Versions.v2`. This example is used to illustrate a specific scenario related to bug fix #7022 in the `@typespec/versioning` library, where version compatibility checks between removed models and added properties were previously incorrectly triggering a diagnostic.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-04-22.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@removed(Versions.v3)\nmodel Widget {\n  @added(Versions.v2)\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple TypeSpec Emitter Configuration for C# HTTP Client - YAML\nDESCRIPTION: Specifies a basic TypeSpec configuration in YAML format to emit a C# HTTP client library using the @typespec/http-client-csharp emitter. This config is placed in your TypeSpec project and is interpreted by TypeSpec tools. Only dependencies are the @typespec/http-client-csharp package and a compatible TypeSpec toolset.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-csharp/readme.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-csharp\"\n```\n\n----------------------------------------\n\nTITLE: Declaring signed 32-bit Fixed Integer Scalar (sfixed32) - TypeSpec - typespec\nDESCRIPTION: Defines a scalar type with Protobuf sfixed32 encoding (signed, 4-byte fixed width). Used for signed int32 fields that benefit from a fixed size on the wire. No dependencies. Input: signed 32-bit integer; Output: serialized sfixed32.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\nscalar TypeSpec.Protobuf.sfixed32\n```\n\n----------------------------------------\n\nTITLE: Running the TypeSpec Migration Script using npx\nDESCRIPTION: Provides the shell command `npx @typespec/migrate` to execute the migration script. This script automatically updates TypeSpec codebases to conform to syntax changes, such as replacing `model is` with `scalar extends` for intrinsic types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx @typespec/migrate\n```\n\n----------------------------------------\n\nTITLE: Deleting a Resource Instance - TypeSpec - typespec\nDESCRIPTION: Defines the operation for removing a specific resource instance. Returns a ResourceDeletedResponse or Error. No method arguments; identification handled implicitly through interface context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_39\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ResourceInstanceOperations.delete(): TypeSpec.Rest.Resource.ResourceDeletedResponse | Error\n```\n\n----------------------------------------\n\nTITLE: Example Implementation for Widget Listing - C#\nDESCRIPTION: Shows how to implement the ListAsync method for widget operations in the generated C# service. This asynchronous method returns a collection of mock Widget objects and is intended as a starting point for real data logic. Place this inside your Widgets implementation file. No external dependencies are necessary, but alignment with the generated Widget model is required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-csharp.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<Widget[]> ListAsync()\n{\n    // Replace the mock implementation with your actual database query\n    return new Widget[]\n    {\n        new Widget { Id = \"1\", Weight = 10, Color = \"red\" },\n        new Widget { Id = \"2\", Weight = 15, Color = \"blue\" }\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitters in TypeSpec Project YAML - YAML\nDESCRIPTION: Demonstrates how to specify an emitter (here, @typespec/http-client-java) in a TypeSpec project's YAML configuration file. No options are supplied; this enables basic client generation. Requires an existing TypeSpec project with a YAML config file such as typespec.yaml. The 'emit' property is an array of emitter strings, directing TypeSpec to use the listed emitter(s) on compilation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-java/reference/emitter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-java\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Remove Visibility Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@removeVisibility` decorator. This decorator removes specified visibility modifiers (like `Lifecycle.Read`) from a target model property. It accepts a variable number of `EnumMember` values representing the visibilities to remove.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_52\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@removeVisibility(...visibilities: valueof EnumMember[])\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding Base Documentation with Doc Comments (TypeSpec)\nDESCRIPTION: Illustrates the TypeSpec doc comment syntax `/** */` which, when used with `model is` or `op is` constructs, now correctly overrides the documentation inherited from the base type. This addresses a bug fix in the compiler.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-07-11.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n/** */\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Model Array Request - JSON\nDESCRIPTION: The shown JSON, for PUT /type/property/additionalProperties/spreadRecordModelArray, expects a request body where both properties are arrays of objects. The requirement ensures both fields observe the same nested structure, vital for endpoints accepting array collections of submodels.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_222\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"knownProp\\\": [{ \\\"state\\\": \\\"ok\\\" }, { \\\"state\\\": \\\"ok\\\" }],\\n  \\\"prop\\\": [{ \\\"state\\\": \\\"ok\\\" }, { \\\"state\\\": \\\"ok\\\" }]\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec REST Peer Dependency in a Library - Bash\nDESCRIPTION: Installs @typespec/rest as a peer dependency in a TypeSpec-based library project. This ensures that the library expects the consuming project to provide the dependency rather than bundling it, adhering to common npm best practices for shared libraries. Requires that both Node.js and npm are available in the environment.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/rest\n\n```\n\n----------------------------------------\n\nTITLE: Attaching Documentation Strings to Types in TypeSpec\nDESCRIPTION: Use the @doc decorator to associate CommonMark markdown documentation with a model, improving documentation generation. Accepts a doc string with optional formatting arguments, requires no dependencies, and outputs enhanced metadata for the annotated type in output documentation or tooling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@doc(\"Represent a Pet available in the PetStore\")\nmodel Pet {}\n```\n\n----------------------------------------\n\nTITLE: Example: Default XML Serialization Model with Media Type Hint in TypeSpec\nDESCRIPTION: Shows a TypeSpec model annotated with @mediaTypeHint(\"application/xml\") to indicate it should serialize as XML. Also utilizes @visibility for property visibility. Clients and toolchains may use this hint for setting response 'Content-Type' headers unless overridden.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_27\n\nLANGUAGE: tsp\nCODE:\n```\n@mediaTypeHint(\"application/xml\")\nmodel Example {\n  @visibility(Lifecycle.Read)\n  id: string;\n\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Array Property XML Serialization (TSP & XML)\nDESCRIPTION: This example compares the default XML output for an array property in a TypeSpec model to the result when @unwrapped is not used. The property 'tags' is serialized as a wrapped set of elements inside an ItemsTags wrapper. Inputs are a model definition; output is an XML serialization with explicit array wrappers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_9\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Pet {\n  tags: Tag[];\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<XmlPet>\n  <ItemsTags>\n    <XmlTag>\n      <name>string</name>\n    </XmlTag>\n  </ItemsTags>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of @stream for Server Streaming in TypeSpec\nDESCRIPTION: This TypeSpec example defines an operation `logs` that takes `LogsRequest` as input and streams `LogEvent` messages back to the client. The `@stream(StreamMode.Out)` decorator specifies server-side streaming.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n@stream(StreamMode.Out)\nop logs(...LogsRequest): LogEvent;\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Routes with URI Templates in TypeSpec (tsp)\nDESCRIPTION: Illustrates how to use the `@route` decorator in TypeSpec with an RFC-6570 URI template for defining operation paths, introduced in version 0.59.0. This example shows a path 'files' with a path expansion variable `{+path}` allowing for complex path segment definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_7\n\nLANGUAGE: tsp\nCODE:\n```\n@route(\"files{+path}\") download(path: string): void;\n```\n\n----------------------------------------\n\nTITLE: Using @TypeSpec.Http.sharedRoute Decorator Signature - Typespec\nDESCRIPTION: Presents the bare decorator invocation for TypeSpec.Http.sharedRoute, which is used for referring to the decorator in signatures or programmatic application, without direct parameters. Applies to operations with route sharing requirements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_21\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.sharedRoute\n```\n\n----------------------------------------\n\nTITLE: Expected Operation Signature for spreadCompositeRequestWithoutBody\nDESCRIPTION: Defines the expected generated operation signature for the spreadCompositeRequestWithoutBody test case. It tests spreading a model with only non-body HTTP decorators (@path, @header) and no `@body` property. No model named `CompositeRequestOnlyWithBody` should be generated.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_44\n\nLANGUAGE: plaintext\nCODE:\n```\nspreadCompositeRequestWithoutBody(name: string, testHeader: string)\n```\n\n----------------------------------------\n\nTITLE: Node.js Default Test File Patterns\nDESCRIPTION: Lists the default glob patterns used by the Node.js test runner to discover test files within a project. Files matching these patterns will be executed as tests.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n```\n**/*.test.?(c|m)js\n**/*-test.?(c|m)js\n**/*_test.?(c|m)js\n**/test-*.?(c|m)js\n**/test.?(c|m)js\n**/test/**/*.?(c|m)js\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Server Path in Visual Studio Workspace Settings (JSON)\nDESCRIPTION: This JSON snippet shows how to configure the path to the TypeSpec TSP server within a Visual Studio workspace. It uses the `typespec.tsp-server.path` key in the `.vs/VSWorkspaceSettings.json` file and supports variable interpolation like `${workspaceFolder}` to specify the location relative to the workspace root. This configuration is necessary for the extension to find the TypeSpec compiler.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/introduction/editor/vs.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```json\\n{\\n  \"typespec.tsp-server.path\": \"${workspaceFolder}/my-nested-project/node_modules/@typespec/compiler\"\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Decorator Implementations using $decorators in TypeScript\nDESCRIPTION: This TypeScript snippet shows the modern approach introduced in version 0.60.0 for associating decorator names with their implementation functions within a TypeSpec library. By exporting a `$decorators` object, developers can map fully qualified decorator names (like `\"TypeSpec.OpenAPI\".useRef`) to the functions (`$useRef`, `$oneOf`) that implement their logic. This method improves organization and discoverability.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\nexport const $decorators = {\n  \"TypeSpec.OpenAPI\": {\n    useRef: $useRef,\n    oneOf: $oneOf,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Options Interface for the Create Operation in TypeScript\nDESCRIPTION: Defines the CreateOptions interface that extends a general OperationOptions type, adding an optional 'foo' string property for the request header. Serves to configure or customize behavior for the 'create' client operation. Requires OperationOptions to be defined elsewhere. Supports optional headers; the interface has no required fields. Intended for use as the 'options' parameter in API calls.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/with_body_property.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CreateOptions extends OperationOptions {\n  foo?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing getWithParams on the TestClient Class in TypeScript\nDESCRIPTION: This TypeScript class provides a public API for 'TestClient', encapsulating creation of a client context and exposing the 'getWithParams' method. The constructor requires an endpoint and optional client options, instantiating the context. The 'getWithParams' method forwards parameters to the implementation function, passing the internal context. Prerequisites include the existence of 'TestClientContext', 'createTestClientContext', and the 'getWithParams' operation; inputs and outputs mirror those of the operation function.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/only_required.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\\n  #context: TestClientContext;\\n\\n  constructor(endpoint: string, options?: TestClientOptions) {\\n    this.#context = createTestClientContext(endpoint, options);\\n  }\\n  async getWithParams(name: string, age: number, options?: GetWithParamsOptions) {\\n    return getWithParams(this.#context, name, age, options);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AcceptedResponse Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.AcceptedResponse` model, representing an HTTP 202 Accepted response. It includes a `statusCode` property fixed to `202`, indicating the request has been accepted but processing is not complete.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.AcceptedResponse\n```\n\n----------------------------------------\n\nTITLE: Defining Update Interface for Resources - TypeSpec - typespec\nDESCRIPTION: Declares an interface for update operations on resources. Parameterized with Resource (the updatable model) and Error types. Provides an extensible base for resource update method sets.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_50\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ResourceUpdate<Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Defining Bytes Property Model and Operations in TypeSpec\nDESCRIPTION: This snippet defines a TypeSpec namespace with a model that includes a 'bytes' property. It also declares GET and PUT operations for retrieving and updating this model via HTTP routes. The snippet demonstrates how to describe models and REST API endpoints using TypeSpec annotations. Dependencies include a TypeSpec-compatible environment and knowledge of REST HTTP methods. The model expects a 'bytes' field, and the operations allow clients to get or update this model at the '/bytes' REST path.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/model_with_bytes_property.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n```tsp\n@route(\"/bytes\")\nnamespace Test;\n// Test a model with a bytes property\n@doc(\"Model with a bytes property\")\nmodel BytesProperty {\n  property: bytes;\n}\n\n@get op get(): BytesProperty;\n@put op put(@body body: BytesProperty): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring DiscriminatedOptions Model for Decorators in TypeSpec (Typespec)\nDESCRIPTION: Defines the DiscriminatedOptions model for configuring how discriminated unions are serialized or structured. It allows setting serialization method, discriminator property name, and envelope property. Useful for customizing the behavior of the @discriminated decorator in models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\nmodel DiscriminatedOptions\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Protobuf Map Representation - TypeSpec - typespec\nDESCRIPTION: Defines a generic model for Protobuf map fields, parameterized by key and value types. Ensures that only valid Protobuf key types (integral or string) and non-map value types are used. This is mapped directly to the native map type in output .proto files. No external dependencies; key and value follow Protobuf constraints. Used for modeling map fields in .proto via TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Protobuf.Map<Key, Value>\n```\n\n----------------------------------------\n\nTITLE: Defining a Protobuf Package with TypeSpec Decorators - TypeSpec\nDESCRIPTION: This snippet demonstrates how to use the @package decorator in TypeSpec to define a namespace as a Protobuf package. All entities within the namespace will be included in a generated proto file corresponding to the package. The code requires TypeSpec with the Protobuf emitter and expects all content in the namespace to be compatible with Protobuf transformation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/guide.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@package\nnamespace Test {\n// ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Java Emitter in tspconfig.yaml\nDESCRIPTION: This YAML configuration snippet demonstrates how to enable the `@typespec/http-client-java` emitter within a TypeSpec configuration file (typically `tspconfig.yaml`). When the TypeSpec compiler runs, it will use the emitters listed under the `emit` key.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nemit:\n  - \"@typespec/http-client-java\"\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Extension Resource Instances - Unified Operations - TypeSpec - typespec\nDESCRIPTION: Declares the list operation in ExtensionResourceOperations to enumerate all extension resources, returning either a CollectionWithNextLink<Resource> or Error. Enables batch resource discovery through a single interface, expecting compatible resource collection models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_20\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceOperations.list(): TypeSpec.Rest.Resource.CollectionWithNextLink<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: String Template Literal Interpolation in TypeSpec - TypeSpec\nDESCRIPTION: Demonstrates how to use string template literal interpolation in TypeSpec, a new language feature. The snippet shows an interpolated documentation string where variables like 'url' and 'location' can be embedded directly into the string using the '${' and '}' sequence. This requires TypeSpec's support for string templates, and is subject to the new behavior where unescaped '${' starts an interpolation. Inputs are variables or expressions, output is the fully interpolated string. Non-interpolated uses of '${' must be escaped.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-12-06.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n\\\"Doc for url ${url} is here: ${location}\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining Instance Operations Interface for Resources - TypeSpec - typespec\nDESCRIPTION: Introduces a template interface for instance-level operations on a given resource model. Parameterized with Resource and Error types, this interface is meant to be extended by operations for individual resource CRUD actions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_36\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ResourceInstanceOperations<Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Providing Operation Documentation and Description - TypeSpec\nDESCRIPTION: Demonstrates how to supply API operation descriptions either with documentation comments or the @doc decorator. The emitter uses this text to populate the OpenAPI operation description field. Supports both multi-line and inline documentation. No special dependencies; targets TypeSpec core and the OpenAPI emitter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n/**\\n * Retrieves a user by their unique identifier.\\n */\\nop getUser(@path id: string): User;\\n\\n@doc(\"Retrieves a user by their unique identifier.\")\\nop getUser(@path id: string): User;\n```\n\n----------------------------------------\n\nTITLE: Specifying RFC7231 Encoding for utcDateTime Property - TypeSpec - TypeSpec\nDESCRIPTION: Defines a Foo model in TypeSpec where the created_on property is explicitly annotated with @encode('rfc7231'), indicating that this field should be serialized with RFC 7231 date formatting. This directs downstream code generation (notably in serializers) to use an alternate date formatting method. No extra dependencies are specified at schema level but output serialization is affected.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/model_date_time.md#_snippet_4\n\nLANGUAGE: TypeSpec\nCODE:\n```\nmodel Foo {\n  @encode(\"rfc7231\")\n  created_on: utcDateTime;\n}\nop foo(): Foo;\n```\n\n----------------------------------------\n\nTITLE: Defining ExternalDocs Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.OpenAPI.ExternalDocs` model. This model provides a way to reference external documentation relevant to the API or specific parts like tags. It includes a required URL and an optional description.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/data-types.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.OpenAPI.ExternalDocs\n```\n```\n\n----------------------------------------\n\nTITLE: Enforcing Required Content-Type for File Upload (Multipart Form-Data) - HTTP\nDESCRIPTION: Shows a multipart/form-data POST where file content-type (application/octet-stream) is required for the file part. The request must set both content-type and filename as per API contract. Used to test server validation logic accepting only precisely described binary file uploads.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_58\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /upload HTTP/1.1\\nContent-Length: 428\\nContent-Type: multipart/form-data; boundary=abcde12345\\n\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"profileImage\\\"; filename=\\\"<any-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .jpg file…}\\n--abcde12345--\n```\n\n----------------------------------------\n\nTITLE: Defining a Scalar with Template Parameters in TypeSpec - TypeSpec\nDESCRIPTION: Illustrates how scalars in TypeSpec can be generic by introducing template parameters, which are mainly used to support decorators. The snippet uses the '@doc' decorator and defines a scalar 'Unreal' with a type parameter constrained to be a value of string. Requires knowledge of decorators and TypeSpec generics. Useful for building flexible, reusable scalar types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/scalars.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@doc(Type)\nscalar Unreal<Type extends valueof string>;\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec ESLint Plugin via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@typespec/eslint-plugin` package. The `-D` flag saves it as a development dependency in your project's `package.json` file. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/eslint-plugin-typespec/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -D @typespec/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Defining Create or Replace Resource Operations - TypeSpec\nDESCRIPTION: Applies the @createsOrReplacesResource decorator to annotate an operation that creates or replaces a resource. The parameter specifies the resource model involved. Use this on operations to clarify their semantics within the REST protocol binding.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.createsOrReplacesResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic Namespace in TypeSpec\nDESCRIPTION: Demonstrates the basic syntax for creating a namespace using the `namespace` keyword followed by a valid TypeSpec identifier and a block containing type definitions, such as a `model`. This helps organize related types and prevent naming conflicts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/namespaces.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nnamespace SampleNamespace {\n  model SampleModel {}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec and Emitting C# via CLI (Bash)\nDESCRIPTION: Demonstrates how to invoke the TypeSpec compiler (`tsp compile`) from the command line, targeting the current directory (`.`), and enabling a specific emitter (`@typespec/http-server-csharp`) using the `--emit` flag. This command processes the TypeSpec definitions and triggers the specified emitter to generate output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/docs/emitter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ntsp compile . --emit=@typespec/http-server-csharp\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring an Interface in TypeSpec\nDESCRIPTION: Demonstrates how to declare an interface using the interface keyword in TypeSpec. The SampleInterface groups two operations, foo() and bar(), with respective return types. No dependencies are required except for TypeSpec language support. Both operations illustrate the basic structure and typing of interface operations; they do not take parameters and return primitive types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/interfaces.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\ninterface SampleInterface {\n  foo(): int32;\n  bar(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Shared Routes to @sharedRoute Decorator - TypeSpec (diff)\nDESCRIPTION: This snippet demonstrates replacing the deprecated shared option in the @route decorator with the @sharedRoute decorator in TypeSpec. The diff shows how to annotate shared routes using the new recommended idiom. The @sharedRoute decorator must precede the revised @route usage. Requires the TypeSpec HTTP library supporting the @sharedRoute decorator.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-18.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n-@route(\"/doStuff\", { shared: true })\n+@sharedRoute\n+@route(\"/doStuff\")\n```\n\n----------------------------------------\n\nTITLE: Defining BasicAuth Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.BasicAuth` model for HTTP Basic Authentication. It includes properties `type` set to `TypeSpec.Http.AuthType.http` and `scheme` set to the literal string `\"Basic\"`. This represents the standard HTTP Basic authentication scheme using a base64-encoded `username:password` in the `Authorization` header.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.BasicAuth\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart Request Bodies in TypeSpec (tsp)\nDESCRIPTION: Shows how to define an operation with a multipart request body using the `@multipartBody` decorator and the `HttpPart<Type>` model in TypeSpec, added in version 0.57.0. This example defines an `upload` operation accepting a `multipart/mixed` request containing a string part `name` and an array of byte parts `avatar`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_9\n\nLANGUAGE: tsp\nCODE:\n```\nop upload(@header contentType: \"multipart/mixed\", @multipartBody body: {\n  name: HttpPart<string>;\n  avatar: HttpPart<bytes>[];\n}): void;\n```\n\n----------------------------------------\n\nTITLE: Switching from Shared Option on @route to @sharedRoute - TypeSpec Diff\nDESCRIPTION: This snippet shows how to migrate from the shared option in the @route decorator to the new @sharedRoute decorator, followed by a regular @route declaration. This approach improves clarity and modularity in route sharing logic and should be used to upgrade existing API definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n-@route(\"/doStuff\", { shared: true })\n+@sharedRoute\n+@route(\"/doStuff\")\n```\n```\n\n----------------------------------------\n\nTITLE: Installing the @typespec/http-client-csharp Package using npm - Bash\nDESCRIPTION: Installs the @typespec/http-client-csharp TypeSpec emitter package using npm. This is the first step in setting up the toolchain for generating C# HTTP client code. Requires Node.js 20 or above to be installed on the system.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-csharp/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-client-csharp\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Request Body for spreadCompositeRequestOnlyWithBody\nDESCRIPTION: Specifies the expected JSON request body for the `PUT /parameters/spread/model/composite-request-only-with-body` endpoint test case. The body corresponds to the `BodyParameter` type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Getting All Optional Float Literal Properties - JSON\nDESCRIPTION: A response including a float literal as an optional property, validating proper serialization of number values with decimals. Useful for checking numeric precision and property presence logic in implementations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_285\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": 1.25 }\n```\n\n----------------------------------------\n\nTITLE: Example: Using Page Index and Page Size Decorators in Model and Operation in TypeSpec\nDESCRIPTION: Demonstrates a model with @pageItems and an operation accepting @pageIndex and @pageSize parameters, forming a classic page-number-based pagination structure in an API endpoint.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_45\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Page<T> {\n  @pageItems items: T[];\n}\n@list op listPets(@pageIndex page: int32, @pageSize pageSize: int8): Page<Pet>;\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/events via npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the @typespec/events library using npm, enabling TypeSpec projects to use its event decorators. The only prerequisite is a Node.js and npm environment. The expected outcome is the addition of the @typespec/events package to your project's dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/events/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/events\n```\n\n----------------------------------------\n\nTITLE: Handling Multipart Form Data File Uploads/Downloads in TypeSpec\nDESCRIPTION: Demonstrates defining TypeSpec operations for multipart/form-data payloads. An upload operation (`multipartFormDataUpload`) takes fields including an array of `HttpPart<File>` using `@multipartBody`. A download operation (`multipartFormDataDownload`) returns a structure containing an array of `HttpPart<File>` within `@multipartBody`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_13\n\nLANGUAGE: tsp\nCODE:\n```\n// Upload and download files in a multipart payload\nop multipartFormDataUpload(\n  @multipartBody fields: {\n    files: HttpPart<File>[];\n  },\n): void;\n\nop multipartFormDataDownload(): {\n  @multipartBody formFields: {\n    files: HttpPart<File>[];\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring the First Widget Interface for Name Collision in TypeScript\nDESCRIPTION: This TypeScript interface represents the first 'Widget' model (kind '1'), directly corresponding to the TypeSpec definition with the same name. It highlights the system's approach to handling colliding model names. Must be used in contexts where the root-level 'Widget' is expected. No dependencies beyond TypeScript standard types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/basic.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Widget {\n  id: string;\n  kind: \"1\";\n  weight: number;\n  color: \"red\" | \"blue\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring openapi3 Emitter for JSON Output in TypeSpec\nDESCRIPTION: Specifies how to configure the `@typespec/openapi3` emitter options in a TypeSpec configuration file (typically `tspconfig.yaml` or similar) to output the OpenAPI document as JSON instead of the default YAML format. This is necessary after the January 2023 update where the default changed to `openapi.yaml`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-01-12.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\noptions:\n  @typespec/openapi3:\n     file-type: json\n```\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Spread Different Float Record - JSON\nDESCRIPTION: Demonstrates combining a string and float property from different record sources, supporting endpoints merging primitive types from heterogeneous sources.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_211\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"name\\\": \\\"abc\\\", \\\"prop\\\": 43.125 }\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Datetime (NonNull) Response - JSON\nDESCRIPTION: This GET /type/property/nullable/datetime/non-null snippet uses a required string property and a date-time formatted string for the nullable property. The value must be a valid ISO 8601 timestamp and be non-null, verifying input conformance.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_249\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": 2022-08-26T18:38:00Z}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for Type_Array_Int64Value_put Endpoint\nDESCRIPTION: This JSON snippet represents the expected request body for the PUT request to the `/type/array/int64` endpoint. The request body should be a JSON array containing 64-bit integer values, potentially represented in hexadecimal for large values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_135\n\nLANGUAGE: json\nCODE:\n```\n```json\n[0x7fffffffffffffff, -0x7fffffffffffffff]\n```\n```\n\n----------------------------------------\n\nTITLE: Putting All Optional Bytes Properties - JSON\nDESCRIPTION: Shows a PUT request payload with an optional bytes property provided and encoded as base64. This enables update operations where binary data must be sent as a field, and provides a pattern for similar payloads in API testing.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_267\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": \"aGVsbG8sIHdvcmxkIQ==\" }\n```\n\n----------------------------------------\n\nTITLE: Requesting User Input in Scaffolding Template (JSON)\nDESCRIPTION: Shows how to define the `inputs` object within a template's configuration to prompt the user for additional information during initialization. Each key in the `inputs` object represents an input parameter, specifying its `type` (e.g., 'text') and a `description` to be shown to the user.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/writing-scaffolding-template.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rest\": {\n    \"title\": \"REST API\",\n    \"description\": \"Create a new project representing a REST API\",\n    \"inputs\": {\n      \"modelName\": {\n        \"type\": \"text\",\n        \"description\": \"Name of the first model\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @TypeSpec.Http.statusCode Decorator Signature - Typespec\nDESCRIPTION: Shows the signature for the statusCode decorator, which allows developers to explicitly state the expected HTTP status code(s) for a response property in a returned model. It takes no parameters and applies only to ModelProperty targets.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_22\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.statusCode\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Is Unknown Record - JSON\nDESCRIPTION: Outlines an extensible model with a set of fixed and dynamically-typed fields, demonstrating best practice for accepting open-ended property bags in API contracts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_207\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"IsUnknownAdditionalProperties\\\",\\n  \\\"prop1\\\": 32,\\n  \\\"prop2\\\": true,\\n  \\\"prop3\\\": \\\"abc\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Building Minimal HTTP Response Objects with TypeSpec in TypeScript\nDESCRIPTION: This concise code returns an object representing an HTTP response with only a status code, the minimum requirement expected for a TypeSpec mock API handler. This is useful for scenarios where only the response status is significant for the test. No dependencies aside from the TypeSpec runtime are required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/writing-mock-apis.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Minimum requirement is the status code.\nreturn {\n  status: 200,\n};\n```\n\n----------------------------------------\n\nTITLE: Compiling with Tracing Options Using Bash CLI (Bash)\nDESCRIPTION: Demonstrates usage of the TypeSpec Compiler with the --trace flag via the Bash command line. The first command traces import-resolution events, while the second command adds the projection area as well. Requires the tsp CLI to be installed and assumes a valid TypeSpec project in the current directory. Outputs detailed diagnostics for specified areas.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/tracing.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --trace import-resolution\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Protobuf Library as Peer Dependency - Bash\nDESCRIPTION: This bash snippet demonstrates the installation of @typespec/protobuf as a peer dependency, which is a recommended approach for use within reusable TypeSpec libraries or frameworks. The command uses the --save-peer flag to ensure that the dependency is required but not duplicated at runtime, maintaining compatibility across consuming projects. It requires npm and correctly configured package.json. The outcome is a peer dependency entry for @typespec/protobuf.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/protobuf\n```\n\n----------------------------------------\n\nTITLE: Defining Read Resource Operations - TypeSpec\nDESCRIPTION: Applies the @readsResource decorator to an operation to denote read behavior for a specific resource model. The single parameter is the resource type being read. This is intended for operations that implement the RESTful GET/read pattern.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.readsResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.OpenAPI.Contact` model. This structure represents contact information for the exposed API within the OpenAPI document. It includes optional properties for the contact's name, URL, and email address.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/data-types.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.OpenAPI.Contact\n```\n```\n\n----------------------------------------\n\nTITLE: Composing Interfaces Using extends in TypeSpec\nDESCRIPTION: Shows how to define separate interfaces (A and B) and then compose them into a new interface (C) using extends. Interface C inherits operations from both A and B and adds its own operation c(). This demonstrates multiple inheritance patterns in TypeSpec interfaces, which is useful for modularity and reusability. All included operations return a string; there are no parameters or external dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/interfaces.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\ninterface A {\n  a(): string;\n}\n\ninterface B {\n  b(): string;\n}\n```\n\nLANGUAGE: typespec\nCODE:\n```\ninterface C extends A, B {\n  c(): string;\n}\n```\n\nLANGUAGE: typespec\nCODE:\n```\ninterface C {\n  a(): string;\n  b(): string;\n  c(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Null Nullable Duration Properties - JSON\nDESCRIPTION: Demonstrates a PATCH request body used to set a duration property to null. The payload is used to test backend handling of explicit null assignments within otherwise type-safe structures. Only the two properties ('requiredProperty' and 'nullableProperty') are expected.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_256\n\nLANGUAGE: json\nCODE:\n```\n{ \"requiredProperty\": \"foo\", \"nullableProperty\": null }\n```\n\n----------------------------------------\n\nTITLE: Getting All Optional Collections of Model Properties - JSON\nDESCRIPTION: A sample JSON response with an optional array property where each element is a model consisting of a 'property' key. Demonstrates how to represent arrays of typed objects. Clients must deserialize the property as an array, with each member matching the shape.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_273\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": [{ \"property\": \"hello\" }, { \"property\": \"world\" }] }\n```\n\n----------------------------------------\n\nTITLE: Serializing FileSpecificContentType to Transport Format in TypeScript\nDESCRIPTION: This serializer prepares a FileSpecificContentType object (or null) for outbound transmission, mapping its properties into a plain object for transport. It is a key part of the serialization layer, ensuring that the outgoing payload structure matches remote contract expectations. Handles null and missing input defensively and primarily outputs a plain JavaScript object suitable for HTTP transport.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file_content_type.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonFileSpecificContentTypeToTransportTransform(\n  input_?: FileSpecificContentType | null,\n): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    filename: input_.filename,\n    contentType: input_.contentType,\n    contents: input_.contents,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Error Body for Invalid OAuth2 Authentication (JSON)\nDESCRIPTION: This JSON object represents the expected error response body for the `GET /authentication/oauth2/invalid` endpoint. It indicates a 400 Bad Request status, detailing a mismatch between the expected and actual Bearer tokens.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"Expected Bearer x but got Bearer y\",\n  \"expected\": \"Bearer x\",\n  \"actual\": \"Bearer y\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Schema for Encoded Strings in TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.contentSchema` decorator specifies the JSON Schema that should be used to validate the content of a string, after decoding based on its `contentEncoding` and `contentMediaType`. It applies to string types or model properties and takes an `unknown` type `value` representing the schema.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.contentSchema(value: unknown)\n```\n\n----------------------------------------\n\nTITLE: Transforming Application File Model to Transport - TypeScript\nDESCRIPTION: Defines a serializer that converts a FileSpecificContentType object to a format suitable for transport (e.g., over HTTP). The function accepts a typed file object, checks for null/undefined, and outputs an object with filename, contentType, and contents. Dependencies: TypeScript definitions for FileSpecificContentType. Key parameters include the input file model; output is a plain object for serialization. No encoding is performed on contents.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/file.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonFileSpecificContentTypeToTransportTransform(\n  input_?: FileSpecificContentType | null,\n): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    filename: input_.filename,\n    contentType: input_.contentType,\n    contents: input_.contents,\n  }!;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Response Models to TypeSpec API Operations\nDESCRIPTION: This TypeSpec code defines a `PetStore` service with several API operations under the `/pets` route. It demonstrates using the custom response models (like `PetListResponse`, `PetResponse`, `PetCreatedResponse`, `PetErrorResponse`, `PetNotFoundResponse`, `PetNoContentResponse`, `PetUnauthorizedResponse`) defined earlier as return types for operations like `listPets`, `getPet`, `createPet`, `updatePet`, and `deletePet`. Operations can return a union of response types (e.g., `PetResponse | PetNotFoundResponse`) to represent different possible outcomes (success or specific errors). Dependencies include `@typespec/http` and `@typespec/versioning`, as well as the custom response models and associated data models (`Pet`, `Toy`, error models).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/07-custom-response-models.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\nimport \"@typespec/http\";\nimport \"@typespec/versioning\";\n\nusing Http;\nusing Versioning;\n\n@service(#{ title: \"Pet Store\" })\n@server(\"https://example.com\", \"Single server endpoint\")\n@versioned(Versions)\nnamespace PetStore;\n\nenum Versions {\n  v1: \"1.0\",\n  v2: \"2.0\",\n}\n\nmodel Pet {\n  id: int32;\n\n  @minLength(1)\n  name: string;\n\n  @minValue(0)\n  @maxValue(100)\n  age: int32;\n\n  kind: petType;\n}\n\nenum petType {\n  dog: \"dog\",\n  cat: \"cat\",\n  fish: \"fish\",\n  bird: \"bird\",\n  reptile: \"reptile\",\n}\n\n@added(Versions.v2)\nmodel Toy {\n  id: int32;\n  name: string;\n}\n\nmodel CommonParameters {\n  @header\n  requestID: string;\n\n  @query\n  locale?: string;\n\n  @header\n  clientVersion?: string;\n}\n\n// highlight-start\nmodel PetListResponse {\n  ...OkResponse;\n  ...Body<Pet[]>;\n}\n\nmodel PetResponse {\n  ...OkResponse;\n  ...Body<Pet>;\n}\n\nmodel PetCreatedResponse {\n  ...CreatedResponse;\n  ...Body<Pet>;\n}\n\nmodel PetAcceptedResponse {\n  ...AcceptedResponse;\n  ...Body<Pet>;\n}\n\nmodel PetErrorResponse {\n  ...BadRequestResponse;\n  ...Body<ValidationError>;\n}\n\nmodel PetNotFoundResponse {\n  ...NotFoundResponse;\n  ...Body<NotFoundError>;\n}\n\nmodel PetUnauthorizedResponse {\n  ...UnauthorizedResponse;\n  ...Body<UnauthorizedError>;\n}\n\nmodel PetSuccessResponse {\n  ...OkResponse;\n  ...Body<string>;\n}\n\nmodel PetNoContentResponse {\n  ...NoContentResponse;\n}\n// highlight-end\n\n@route(\"/pets\")\nnamespace Pets {\n  @get\n  // highlight-next-line\n  op listPets(...CommonParameters): PetListResponse;\n\n  @get\n  // highlight-start\n  op getPet(@path petId: int32, @header ifMatch?: string): PetResponse | PetNotFoundResponse;\n  // highlight-end\n  @useAuth(BearerAuth)\n  @post\n  // highlight-start\n  op createPet(@body pet: Pet):\n    | PetCreatedResponse\n    | PetAcceptedResponse\n    | PetErrorResponse\n    | PetUnauthorizedResponse;\n  // highlight-end\n\n  @useAuth(BearerAuth)\n  @put\n  // highlight-start\n  op updatePet(@path petId: int32, @body pet: Pet):\n    | PetResponse\n    | PetErrorResponse\n    | PetUnauthorizedResponse\n    | PetNotFoundResponse\n    | InternalServerErrorResponse;\n  // highlight-end\n\n  @useAuth(BearerAuth)\n  @delete\n  // highlight-start\n  op deletePet(@path petId: int32): PetNoContentResponse | PetUnauthorizedResponse;\n  // highlight-end\n\n  @route(\"{petId}/toys\")\n  namespace Toys {\n    @added(Versions.v2)\n    @get\n    op listToys(@path petId: int32, ...CommonParameters): {\n      @body toys: Toy[];\n    };\n\n    @added(Versions.v2)\n    @post\n    @useAuth(BearerAuth)\n    op createToy(@path petId: int32, @body toy: Toy, ...CommonParameters): {\n      @statusCode statusCode: 201;\n      @body newToy: Toy;\n    };\n\n    @added(Versions.v2)\n    @put\n    @useAuth(BearerAuth)\n    op updateToy(@path petId: int32, @path toyId: int32, @body toy: Toy, ...CommonParameters): {\n      @body updatedToy: Toy;\n    };\n\n    @added(Versions.v2)\n    @delete\n    @useAuth(BearerAuth)\n    op deleteToy(@path petId: int32, @path toyId: int32, ...CommonParameters): {\n      @statusCode statusCode: 204;\n    };\n  }\n}\n\n@error\nmodel NotFoundError {\n  code: \"NOT_FOUND\";\n  message: string;\n}\n\n@error\nmodel ValidationError {\n  code: \"VALIDATION_ERROR\";\n  message: string;\n  details: string[];\n}\n\n@error\nmodel UnauthorizedError {\n  code: \"UNAUTHORIZED\";\n  message: string;\n}\n\n@error\nmodel InternalServerError {\n  code: \"INTERNAL_SERVER_ERROR\";\n  message: string;\n}\n\nmodel InternalServerErrorResponse {\n  @statusCode statusCode: 500;\n  @body error: InternalServerError;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generated Service Interface in TypeScript\nDESCRIPTION: Provides a TypeScript code snippet demonstrating how to implement a generated service interface (`Users`). It imports the necessary types (`HttpContext`, `Users`), defines an object (`users`) conforming to the `Users<HttpContext>` interface, and implements the required `create` method. This implementation object would be passed to the router factory function (e.g., `createTodoRouter`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-js/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from \"../tsp-output/@typespec/http-server-js/helpers/router.js\";\nimport { Users } from \"../tsp-output/@typespec/http-server-js/models/all/todo/index.js\";\n\nexport const users: Users<HttpContext> = {\n  async create(ctx, user) {\n    // Implementation\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running TypeSpec Compiler in Watch Mode via --watch Flag (Bash)\nDESCRIPTION: This Bash command starts the TypeSpec compiler using the `--watch` flag. In this mode, the compiler monitors project files for changes and automatically recompiles when a file is saved. Note the known issue regarding indirectly included JS files.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --watch\n```\n\n----------------------------------------\n\nTITLE: Accessing ModelProperty Default Values in a TypeSpec Emitter - TypeScript (ts)\nDESCRIPTION: This TypeScript snippet exemplifies how an emitter can read the `default` property of a TypeSpec model property (provided as `ModelProperty`). The code retrieves the default value for a property, which can be used in documentation or server-side code generation, but should not be enforced on the client. The only dependency is the TypeSpec emitter model API; key variables are the ModelProperty instance and its `default` member. Input is a model property; output is the default value or undefined.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitters-basics.md#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nconst modelProp: ModelProperty = ...;   // the isActive ModelProperty type\nconst defaultValue = modelProp.default; // value: true\n```\n\n----------------------------------------\n\nTITLE: Defining Reusable Operation Parameters and Return Types - TypeSpec\nDESCRIPTION: Shows how to model reusable parameters (PetId) and use them in operation definitions (Pets.read) via the spread operator. Results in OpenAPI references to parameter definitions, enabling reuse and schema composition in the API contract. Inputs: TypeSpec models, operation definitions. Outputs: OpenAPI refs to parameters/components.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_35\n\nLANGUAGE: typespec\nCODE:\n```\nmodel PetId {\n  @path petId: int32;\n}\n\nnamespace Pets {\n  op read(...PetId): Pet | Error;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Resource Location Scalar - TypeSpec - typespec\nDESCRIPTION: Defines a scalar type named TypeSpec.Rest.ResourceLocation to represent a URL that points to a REST resource. This scalar can be used as a type for properties or parameters where a resource's URI is needed. No dependencies other than TypeSpec core; usage expects URIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/data-types.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nscalar TypeSpec.Rest.ResourceLocation\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Creation or Update Input Model - TypeSpec REST - typespec\nDESCRIPTION: Provides a parameterized model TypeSpec.Rest.Resource.ResourceCreateOrUpdateModel<Resource> for use in operations that can either create or update a resource. With no internal predefined properties, it sets a contract for flexible resource input scenarios. Suitable for POST or PUT API endpoints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/data-types.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Rest.Resource.ResourceCreateOrUpdateModel<Resource>\n```\n\n----------------------------------------\n\nTITLE: Defining Update Model Transformations with TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines a TypeSpec model template for creating update-specific copies of input models, including only properties marked with `Lifecycle.Update` visibility. The model can be renamed via a NameTemplate parameter using the `@friendlyName` decorator. Requires the TypeSpec type system, and expects as input a model T and an optional name template.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_21\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Update<T, NameTemplate>\n```\n\n----------------------------------------\n\nTITLE: Sending Base64Url-Encoded Bytes in Query Parameter via HTTP Request - TypeScript\nDESCRIPTION: Implements a client operation that transforms a Uint8Array into a base64Url string for use as a query parameter, constructs the endpoint path, and performs an HTTP GET request. Depends on the client's context, a URL parsing/expansion utility, a base64Url encoder, and error handling utilities (e.g., 'parse', 'encodeUint8Array', 'createRestError'). Takes 'value' as Uint8Array and optional request options; returns void on HTTP 204 response. Throws a client error for unexpected responses. Designed to match the REST contract specified in TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/query_bytes.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport async function defaultEncoding(\\n  client: TestClientContext,\\n  value: Uint8Array,\\n  options?: DefaultEncodingOptions,\\n): Promise<void> {\\n  const path = parse(\"/default{?value}\").expand({\\n    value: encodeUint8Array(value, \"base64url\")!,\\n  });\\n  const httpRequestOptions = {\\n    headers: {},\\n  };\\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Template Using Decorator With valueof Constraint - TypeSpec\nDESCRIPTION: This preferred example demonstrates a TypeSpec model template where the type parameter T uses the valueof string constraint, matching what certain decorators (e.g., @doc) now require for type safety. No warning occurs in recent TypeSpec versions. Requires TypeSpec 0.53 or later for valueof support.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-06-06.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Foo<T extends valueof string> {\n  @doc(T) // no warning\n  id: uuid;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Delete Resource Operations - TypeSpec\nDESCRIPTION: Marks an operation as supporting the deletion of a resource via the @deletesResource decorator. The resourceType parameter associates the operation with the relevant resource model. Intended for use on operations whose sole responsibility is removing existing resources.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.deletesResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Getting an Extension Resource - Read-Only Interface - TypeSpec - typespec\nDESCRIPTION: Implements the get operation in ExtensionResourceRead for retrieving an extension resource instance. Yields either the Extension model or Error, structuring a read-only access API with standard result and error types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_22\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceRead.get(): Extension | Error\n```\n\n----------------------------------------\n\nTITLE: Defining 8-bit Unsigned Integer Scalar in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Declares `uint8` scalar for values in the 0–255 range, commonly used for byte and binary data modeling. Useful for fine-grained binary protocol fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_52\n\nLANGUAGE: typespec\nCODE:\n```\nscalar uint8\n```\n\n----------------------------------------\n\nTITLE: Defining a Bytes Header with Explicit Base64 Encoding in TypeSpec\nDESCRIPTION: This TypeSpec code defines an operation `get` that accepts a required header parameter `value` of type `bytes`. It explicitly specifies `@encode(\"base64\")` to ensure base64 encoding is used for code generation and wire format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_bytes.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\n\n@route(\"/default\")\nop get(\n  @header\n  @encode(\"base64\")\n  value: bytes,\n): NoContentResponse;\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring the @externalDocs Decorator for External OpenAPI Documentation Links in TypeSpec\nDESCRIPTION: This decorator adds an `externalDocs` object to the generated OpenAPI specification for the decorated TypeSpec element. It provides a URL and an optional description pointing to external documentation. It targets any TypeSpec construct (`unknown`) and requires a `url` parameter, with an optional `description`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/README.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.externalDocs(url: valueof string, description?: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Defining Versioned Namespace with Enums in TypeSpec\nDESCRIPTION: Demonstrates the current required method for defining API versions in TypeSpec. It involves creating a string-valued enum listing the versions and referencing this enum in the `@versioned` decorator applied to the namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-07-08.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n// After\n@versioned(Versions)\nnamespace Api;\n\nenum Versions { v2021_01_12: \"2021-01-12\", v2022_01_15_preview: \"2022-01-15-preview\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple File Parts in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a RequestBody model containing an array of HttpPart<File>, supporting the uploading of multiple files in a single multipart/form-data operation. The doThing operation binds this model as the multipart body and uses a content-type header. This structure is suitable for clients or APIs that need to upload several files in one request.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file.md#_snippet_7\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\\n\\nmodel RequestBody {\\n  files: HttpPart<File>[];\\n}\\n\\nop doThing(@header contentType: \\\"multipart/form-data\\\", @multipartBody bodyParam: RequestBody): void;\n```\n\n----------------------------------------\n\nTITLE: Implementing Continuation Token Paging Operation in TypeScript\nDESCRIPTION: This TypeScript function implements the client-side logic for the `link` operation using continuation token paging. It returns a `PagedAsyncIterableIterator` that handles fetching pages. It uses helper functions `getElements` to extract items from a page and `getPagedResponse` to fetch the next page using the `nextToken` obtained from the response header.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts function link\nexport function link(\n  client: TestClientContext,\n  filter: string,\n  options?: LinkOptions,\n): PagedAsyncIterableIterator<Pet, LinkPageResponse, LinkPageSettings> {\n  function getElements(response: LinkPageResponse) {\n    return response.pets;\n  }\n  async function getPagedResponse(nextToken?: string, settings?: LinkPageSettings) {\n    const combinedOptions = { ...options, ...settings };\n\n    if (nextToken) {\n      combinedOptions.nextToken = nextToken;\n    }\n    const response = await linkSend(client, filter, combinedOptions);\n\n    return {\n      pagedResponse: await linkDeserialize(response, options),\n      nextToken: response.headers[\"next-token\"],\n    };\n  }\n  return buildPagedAsyncIterator<Pet, LinkPageResponse, LinkPageSettings>({\n    getElements,\n    getPagedResponse,\n  });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Next Link Paging Operation in TypeScript\nDESCRIPTION: This TypeScript function implements the client-side logic for the `link` operation using next link paging. It returns a `PagedAsyncIterableIterator`. The `getPagedResponse` helper function fetches subsequent pages by making a GET request directly to the `nextToken` URL (which is the `link` property from the previous response). For the initial request, it calls `linkSend`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts function link\nexport function link(\n  client: TestClientContext,\n  filter: string,\n  options?: LinkOptions,\n): PagedAsyncIterableIterator<Pet, LinkPageResponse, LinkPageSettings> {\n  function getElements(response: LinkPageResponse) {\n    return response.pets;\n  }\n  async function getPagedResponse(nextToken?: string, settings?: LinkPageSettings) {\n    let response: PathUncheckedResponse;\n    if (nextToken) {\n      response = await client.pathUnchecked(nextToken).get();\n    } else {\n      const combinedOptions = { ...options, ...settings };\n      response = await linkSend(client, filter, combinedOptions);\n    }\n    return {\n      pagedResponse: await linkDeserialize(response, options),\n      nextToken: response.body[\"link\"],\n    };\n  }\n  return buildPagedAsyncIterator<Pet, LinkPageResponse, LinkPageSettings>({\n    getElements,\n    getPagedResponse,\n  });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a File-Level Namespace in TypeSpec\nDESCRIPTION: Demonstrates how to define a default namespace for all declarations within a single TypeSpec file. This is achieved using a blockless namespace statement (e.g., `namespace SampleNamespace;`) placed at the top of the file, after any `import` statements. A file can only contain one such statement.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/namespaces.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nnamespace SampleNamespace;\n\nmodel SampleModel {}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Namespaced Model and Operation in TypeSpec\nDESCRIPTION: This snippet introduces a namespace 'Test' that encapsulates the 'TestWidget' model and an operation ('foo') returning it. It demonstrates organization of models within logical groups and supports scoped model usage. All dependencies are internal to TypeSpec and do not require external imports. Inputs are namespace-scoped; output is a strongly-typed 'TestWidget' model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/basic.md#_snippet_2\n\nLANGUAGE: TypeSpec\nCODE:\n```\nnamespace Test {\n  model TestWidget {\n    id: string;\n    weight: int32;\n    color: \"red\" | \"blue\";\n  }\n  op foo(): TestWidget;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating @extension Decorator Usage - TypeSpec TSP (Diff)\nDESCRIPTION: Demonstrates how to convert the @extension decorator from passing an object/tuple type to using a value, reflecting upcoming changes to how OpenAPI extensions are emitted. This snippet helps prevent future breakage and ensures correct value passing, as required by newer TypeSpec versions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-04.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-@extension(\"x-obj\", { foo: true })\n+@extension(\"x-obj\", #{ foo: true })\n-@extension(\"x-tuple\", [ \"foo\" ])\n+@extension(\"x-tuple\", #[ \"foo\" ])\nmodel Foo {}\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Authentication Types in TypeSpec Language\nDESCRIPTION: Declares an enum to enumerate supported authentication types in HTTP APIs, including 'http', 'apiKey', 'oauth2', 'openIdConnect', and 'noAuth'. This definition standardizes authentication strategies used in API design within TypeSpec specifications. No external package dependencies are required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_40\n\nLANGUAGE: typespec\nCODE:\n```\nenum TypeSpec.Http.AuthType\n```\n\n----------------------------------------\n\nTITLE: Defining a Route with Multiple Path Parameters in TypeSpec\nDESCRIPTION: Uses the `@route` decorator to map the `getPet` operation to `/stores/{storeId}/pets/{petId}/`. The `{storeId}` and `{petId}` segments are defined as string parameters for the operation, which returns a single `Pet` object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_8\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@route(\"/stores/{storeId}/pets/{petId}/\") op getPet(storeId: string, petId: string): Pet\n```\n\n----------------------------------------\n\nTITLE: Implementing the getWithParams Client Operation in TypeScript\nDESCRIPTION: This TypeScript async function implements the client-side HTTP call for the 'getWithParams' operation defined in TypeSpec. It constructs a path with the required 'name' and 'age' query parameters, makes a GET request, and handles responses via the options object, including invoking a user-provided onResponse handler. Dependencies include a 'TestClientContext', a path manipulation utility, and error handling helpers. Inputs are the client context, 'name', 'age', and optional operation-specific options; output is a Promise resolving to a number if status is 200 and response is JSON, otherwise it throws an error.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/only_required.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getWithParams(\\n  client: TestClientContext,\\n  name: string,\\n  age: number,\\n  options?: GetWithParamsOptions,\\n): Promise<number> {\\n  const path = parse(\"/{?name,age}\").expand({\\n    name: name,\\n    age: age,\\n  });\\n  const httpRequestOptions = {\\n    headers: {},\\n  };\\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\\n    return response.body!;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Snake Case Properties in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a model named `Foo` with two properties: `element_name` of type string and `age` of type int32. It also defines an operation `foo` that returns an instance of the `Foo` model. This defines the structure and naming convention expected on the wire.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/basic_model_wire_name.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Foo {\n  element_name: string;\n  age: int32;\n}\nop foo(): Foo;\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Union with Non-Discriminated Union 2 Response - JSON\nDESCRIPTION: For GET /type/property/additionalProperties/spreadRecordNonDiscriminatedUnion2, this snippet documents an expected JSON response using a slightly different structure for the union members, especially for the prop1 property. It validates structural integrity when alternative union combinations are present.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_225\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"abc\\\",\\n  \\\"prop1\\\": { \\\"kind\\\": \\\"kind1\\\", \\\"start\\\": \\\"2021-01-01T00:00:00Z\\\" },\\n  \\\"prop2\\\": {\\n    \\\"kind\\\": \\\"kind1\\\",\\n    \\\"start\\\": \\\"2021-01-01T00:00:00Z\\\",\\n    \\\"end\\\": \\\"2021-01-02T00:00:00Z\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Deserializer for Base Dinosaur Model (Application)\nDESCRIPTION: This TypeScript function `jsonDinosaurToApplicationTransform` deserializes data from a transport format (any) into a `Dinosaur` object for application use. It relies on an assumed `jsonDinosaurToApplicationDiscriminator` helper function to handle the polymorphic nature based on the 'kind' discriminator property before mapping the `size` and `kind` properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/inheritance_discriminator.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonDinosaurToApplicationTransform\nexport function jsonDinosaurToApplicationTransform(input_?: any): Dinosaur {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    ...jsonDinosaurToApplicationDiscriminator(input_),\n    size: input_.size,\n    kind: input_.kind,\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Bytes Property (Null) Response - JSON\nDESCRIPTION: This body for GET /type/property/nullable/bytes/null displays both the presence of a required field and an explicitly null property for bytes, enforcing that the API supports nullability of binary fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_234\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": null }\n```\n\n----------------------------------------\n\nTITLE: Putting All Optional Duration Properties - JSON\nDESCRIPTION: A PUT request body providing a valid ISO8601 duration as an optional property for update scenarios. Ensures system parses the duration string and serializes it as expected.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_283\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": \"P123DT22H14M12.011S\" }\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Service with a POST Operation Returning Void\nDESCRIPTION: This TypeSpec code defines a service named `Test`. It includes a model `Foo` with `id` and `name` properties. An operation `get` is defined using the `@post` decorator, taking the properties of `Foo` as spread parameters (`...Foo`), and returning `void`. This typically maps to an HTTP POST request expecting a 204 No Content success response.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/no_content_type.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@service\nnamespace Test;\nmodel Foo {\n  id: string;\n  name: string;\n}\n@post op get(...Foo): void;\n```\n\n----------------------------------------\n\nTITLE: Updating TypeScript Imports for TypeSpec Emitter Framework\nDESCRIPTION: This diff snippet demonstrates how to update TypeScript import statements. It replaces the import from the deprecated `@typespec/compiler/emitter-framework` path with the new `@typespec/asset-emitter` package.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\ndiff lang=ts\n-import { TypeEmitter, ... } from \"@typespec/compiler/emitter-framework\";\n+import { TypeEmitter, ... } from \"@typespec/asset-emitter\";\n```\n\n----------------------------------------\n\nTITLE: Generated OpenAPI YAML for XML-Decorated TypeSpec Model - YAML\nDESCRIPTION: This YAML snippet represents the OpenAPI output generated from the XML-decorated TypeSpec 'Pet' model. Highlights correct mapping of XML wrapping, naming, and data types per emitter requirements. \nDependencies: Generation by OpenAPI3 emitter with XML support enabled. \nInput: Emitted from preceding TypeSpec. Output: OpenAPI YAML schema. \nLimitation: Output is static and meant for illustrative purposes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-11-05.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nPet:\n  type: \"object\"\n  properties:\n    tags:\n      type: \"array\"\n      xml:\n        name: \"ItemsTags\"\n        wrapped: true\n      items:\n        type: string\n  xml:\n    name: \"XmlPet\"\n```\n\n----------------------------------------\n\nTITLE: Installing Emitter Framework Peer Dependencies using npm\nDESCRIPTION: This shell command installs the core Alloy, Alloy TypeScript components, and TypeSpec emitter framework libraries as peer dependencies using npm. Peer dependencies are required for building a TypeSpec emitter using the framework and should be added alongside other emitter dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-framework.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save-peer @alloy-js/core @alloy-js/typescript @typespec/emitter-framework\n```\n\n----------------------------------------\n\nTITLE: Declaring Updateable Properties Transformation Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@withUpdateableProperties` decorator. When applied to a model, it returns a transformed version of the model containing only properties considered 'updateable' (typically those with `Lifecycle.Update` visibility or default visibility).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_75\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@withUpdateableProperties\n```\n```\n\n----------------------------------------\n\nTITLE: Providing Model With Extensible Enum Discriminator - JSON\nDESCRIPTION: Represents a polymorphic JSON object pattern using 'kind' as an extensible discriminator. Ensures downstream code can appropriately select object types based on the discriminator value for models supporting open-ended enum options.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_160\n\nLANGUAGE: json\nCODE:\n```\n{ \"kind\": \"golden\", \"weight\": 10 }\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-Protocol Service (Protobuf & JSON Schema) in TypeSpec\nDESCRIPTION: This TypeSpec code defines a service `Kiosks` within the `KioskExample` namespace, intended for both Protobuf and HTTP protocols, while also generating JSON Schemas for its models. It imports necessary libraries (`@typespec/protobuf`, `@typespec/http`, `@typespec/json-schema`), defines models like `Kiosk` using Protobuf `@field` annotations, and outlines service operations mapped to HTTP methods. The `@JsonSchema.jsonSchema` and `@Protobuf.package` decorators on the namespace configure the multi-protocol output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/pages/multi-protocol.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp tryit=\"{\\\"emit\\\": [\\\"@typespec/protobuf\\\", \\\"@typespec/json-schema\\\"]}\"\nimport \"@typespec/protobuf\";\nimport \"@typespec/http\";\nimport \"@typespec/json-schema\";\n\nusing Protobuf;\nusing Http;\n\n@JsonSchema.jsonSchema\n@Protobuf.package({\n  name: \"kiosk\",\n})\n@TypeSpec.service\nnamespace KioskExample;\n\n// models.tsp\nmodel Kiosk {\n  @field(1) id?: int32;\n  @field(2) name: string;\n  @field(3) size: ScreenSize;\n  @field(4) location: LatLng;\n  @field(5) create_time?: int32;\n}\nmodel ScreenSize {\n  @field(1) width: int32;\n  @field(2) height: int32;\n}\n\nmodel LatLng {\n  @field(1) lat: float64;\n  @field(2) lng: float64;\n}\n\nmodel ListResponse {\n  @field(1) kiosks: Kiosk[];\n}\n\n@Protobuf.service\ninterface Kiosks {\n  @post createKiosk(...Kiosk): Kiosk;\n  @list listKiosks(): ListResponse;\n  @get getKiosk(@path @field(1) id: int32): Kiosk;\n  @delete deleteKiosk(@path @field(1) id: int32): void;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Multipart Model\nDESCRIPTION: This TypeScript code defines the `Foo` interface, representing the data structure for the multipart request body on the client side, corresponding to the TypeSpec `Foo` model. It includes properties `name` (string), `age` (number), and an optional `description` (string). This interface is likely generated from the TypeSpec definition and used in the client operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/simple_part.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Foo {\n  name: string;\n  age: number;\n  description?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic AnotherService API in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a minimal `AnotherService`. It includes a single GET operation at the `/test` endpoint which returns a `204 No Content` response. No specific data models are defined within this service block.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/test/output/rest-metadata-emitter/rest-emitter-sample-output.txt#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nservice: AnotherService\n  ops:\n    op: GET /test\n      response: 204\n  models:\n```\n\n----------------------------------------\n\nTITLE: OpenAPI YAML Output for Discriminated Union - YAML\nDESCRIPTION: Shows the resulting OpenAPI YAML schema for a discriminated union Pet. The discriminator property is set to 'kind', and each enum value maps to a corresponding subschema. Inputs: Discriminated TypeSpec unions. Outputs: oneOf schema with discriminator object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nPet:\n  oneOf:\n    - $ref: \"#/components/schemas/Cat\"\n    - $ref: \"#/components/schemas/Dog\"\n  discriminator:\n    propertyName: kind\n    mapping:\n      cat: \"#/components/schemas/Cat\"\n      dog: \"#/components/schemas/Dog\"\n```\n\n----------------------------------------\n\nTITLE: Updating Versioning API to Mutators - TypeSpec (diff, tsp)\nDESCRIPTION: This snippet demonstrates updating from the deprecated version projection API to the new mutator-based approach in TypeSpec versioning. The diff covers renaming buildVersionProjections to getVersioningMutators, changing parameter usage, and using unsafe_mutateSubgraphWithNamespace for subgraph mutation. Requires @typespec/versioning version compatible with mutator APIs. Parameters involve a program instance, a mutator, and the service type; returns a mutated namespace subgraph.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-18.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n// Step 1: Update to retrieve the mutation instead of projections\n-const versions = buildVersionProjections(program, service.type);\n+const versions = getVersioningMutators(program, service.type);\n\n// Step 2: call mutator instead of projection api\n-const projectedProgram = projectProgram(originalProgram, versionRecord.projections);\n+const subgraph = unsafe_mutateSubgraphWithNamespace(program, [mutator], service.type);\n+subgraph.type // this is the mutated service namespace\n```\n\n----------------------------------------\n\nTITLE: Validating Mock APIs with pnpm\nDESCRIPTION: Runs the `validate-mock-apis` script via `pnpm` to verify the correctness and validity of the defined mock APIs. This is a prerequisite step before using or serving the mock APIs. Requires `pnpm` and project setup.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run validate-mock-apis\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Type_Array_Float32Value_get Endpoint\nDESCRIPTION: This JSON snippet represents the expected response body for the GET request to the `/type/array/float32` endpoint. It should return a JSON array containing a single 32-bit floating-point number.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_130\n\nLANGUAGE: json\nCODE:\n```\n```json\n[43.125]\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Build in Watch Mode with pnpm - Bash\nDESCRIPTION: Runs a continuous build process that watches for file changes and automatically rebuilds TypeScript files on save. Enables efficient incremental builds during development. Must be run at the root or with the '-w' flag if not in the root workspace. Terminate the process with Ctrl+C.\nSOURCE: https://github.com/microsoft/typespec/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Client Function for Operation with Constant Header\nDESCRIPTION: This TypeScript function `foo` implements the client-side logic for the TypeSpec `foo` operation. It accepts a `TestClientContext` and optional `FooOptions`. It constructs the HTTP GET request, setting the 'accept' header to 'application/xml' by default (or using `options.accept` if provided). The function sends the request, processes the response (including calling an optional `onResponse` handler and transforming the body using `jsonFooToApplicationTransform` for successful JSON responses), and handles errors using `createRestError`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/constant-header.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport async function foo(client: TestClientContext, options?: FooOptions): Promise<Foo> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      accept: options?.accept ?? \"application/xml\",\n    },\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return jsonFooToApplicationTransform(response.body)!;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Default Values to Model Properties in TypeSpec\nDESCRIPTION: Illustrates how to assign default values to optional model properties (`answer` of type `int32` and `color` of type `string`) in TypeSpec using the `=` assignment syntax within a model definition. This translates directly to the `default` field in the corresponding OpenAPI schema.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Example {\n  answer?: int32 = 42;\n  color?: string = \"purple\";\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Discriminating and Transforming WidgetData to Transport Format in TypeScript\nDESCRIPTION: This TypeScript function implements the core logic for transforming a `WidgetData` object to its transport representation. It reads the `kind` discriminator property from the input object and calls the appropriate specific transformation function (`jsonWidgetData0ToTransportTransform` or `jsonWidgetData1ToTransportTransform`) based on the value. It handles null/undefined input and logs a warning if an unknown `kind` is encountered.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/discriminated_union.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport function jsonWidgetDataToTransportDiscriminator(input_?: WidgetData): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  const discriminatorValue = input_.kind;\n  if (discriminatorValue === \"kind0\") {\n    return jsonWidgetData0ToTransportTransform(input_ as any)!;\n  }\n\n  if (discriminatorValue === \"kind1\") {\n    return jsonWidgetData1ToTransportTransform(input_ as any)!;\n  }\n  console.warn(`Received unknown kind: ` + discriminatorValue);\n  return input_ as any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OkResponse Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.OkResponse` model, representing a successful HTTP 200 OK response. This indicates that the request has succeeded. It includes a `statusCode` property fixed to `200`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_30\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.Http.OkResponse\n```\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure Resource Manager Client in Java\nDESCRIPTION: This Java code snippet shows how to authenticate using `DefaultAzureCredentialBuilder` from the `azure-identity` library and initialize the `{{manager-class}}` for interacting with the Azure Resource Manager `{{service-name}}`. It configures the Azure profile for the public cloud (`AzureCloud.AZURE_PUBLIC_CLOUD`) and uses the obtained `TokenCredential` to authenticate the manager instance. The Azure Subscription ID is typically configured via the `AZURE_SUBSCRIPTION_ID` environment variable.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-mgmt/src/main/resources/Readme.txt#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nAzureProfile profile = new AzureProfile(AzureCloud.AZURE_PUBLIC_CLOUD);\nTokenCredential credential = new DefaultAzureCredentialBuilder()\n    .authorityHost(profile.getEnvironment().getActiveDirectoryEndpoint())\n    .build();\n{{manager-class}} manager = {{manager-class}}\n    .authenticate(credential, profile);\n```\n\n----------------------------------------\n\nTITLE: Initializing API Client Context - TypeScript\nDESCRIPTION: Implements createTestClientContext for initializing the client context with endpoint and options. Handles parameter replacement for endpoints and throws errors for missing parameters. Depends on getClient and TestClientOptions. Returns the client context used by operation functions and the main client class. Input: endpoint (string) and optionally options; Output: TestClientContext instance. Ensures required endpoint is provided.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function createTestClientContext(\n  endpoint: string,\n  options?: TestClientOptions,\n): TestClientContext {\n  const params: Record<string, any> = {\n    endpoint: endpoint,\n  };\n  const resolvedEndpoint = \"{endpoint}\".replace(/{([^}]+)}/g, (_, key) =>\n    key in params\n      ? String(params[key])\n      : (() => {\n          throw new Error(`Missing parameter: ${key}`);\n        })(),\n  );\n  return getClient(resolvedEndpoint, {\n    ...options,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Applying @TypeSpec.OpenAPI.operationId to Specify Operation ID - TypeSpec\nDESCRIPTION: Exemplifies the use of @TypeSpec.OpenAPI.operationId decorator to assign a specific operationId to an operation in the OpenAPI output. The single required parameter is a string, which labels the operation for clear referencing in generated API clients and documentation. It should be attached to individual operation declarations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/decorators.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.operationId(operationId: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Defining ConflictResponse Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.ConflictResponse` model, representing an HTTP 409 Conflict response. It includes a `statusCode` property fixed to `409`, indicating the request conflicts with the current state of the server.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.ConflictResponse\n```\n\n----------------------------------------\n\nTITLE: Defining @extension Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@extension` decorator from the `TypeSpec.JsonSchema` namespace. This decorator allows adding custom properties (like vendor extensions starting with 'x-') to the emitted JSON schema for any TypeSpec type (`unknown`). The `key` parameter is the extension name (string), and `value` is the extension's value, which can be a TypeSpec type (converted to schema) or a raw JSON value (using `valueof`, `#{}` syntax, or `Json<>` template).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.extension(key: valueof string, value: unknown | valueof unknown)\n```\n\n----------------------------------------\n\nTITLE: Defining the NoContentResponse Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.NoContentResponse` model. This represents an HTTP 204 No Content response, indicating successful processing of the request but without any content in the response body. It includes the `statusCode` fixed at `204`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_26\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.NoContentResponse\n```\n\n----------------------------------------\n\nTITLE: Defining PickProperties Model for Key-Based Selection (Typespec)\nDESCRIPTION: Provides the PickProperties model that spreads a subset of the Source object's properties, including only those whose keys are specified by the Keys template parameter. This enables fine-grained inclusion of properties in derived models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\nmodel PickProperties<Source, Keys>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a TypeScript Client Operation for Scalar Body Request\nDESCRIPTION: This TypeScript function `create` sends a POST request to the `/widgets` endpoint, corresponding to the TypeSpec definition. It takes a `client` context (`WidgetsClientContext`) and the scalar `count` (number) as input. The `count` value is directly assigned to the `body` property of the HTTP request options. It handles the response, returning void on success (204) and throwing a `RestError` otherwise.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/scalar-payload.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport async function create(\n  client: WidgetsClientContext,\n  count: number,\n  options?: CreateOptions,\n): Promise<void> {\n  const path = parse(\"/widgets\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n    body: count,\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Deprecated @projectedName Decorator to @encodedName in TypeSpec - diff\nDESCRIPTION: This code snippet demonstrates how to migrate from the deprecated @projectedName decorator to the preferred @encodedName decorator in TypeSpec. The @projectedName decorator is being replaced by @encodedName for specifying serialization names for types; users must update usages accordingly. Replace '-@projectedName(\"json\", \"exp\")' with '+@encodedName(\"application/json\", \"exp\")'; no additional dependencies are needed beyond a current TypeSpec environment.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-04-02.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-@projectedName(\"json\", \"exp\")\n+@encodedName(\"application/json\", \"exp\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Previous Page Link Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@prevLink` decorator. This decorator is used to mark a model property that holds the URL link to the previous page in a paginated collection.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_50\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@prevLink\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit OperationId for OpenAPI Operations - TypeSpec\nDESCRIPTION: Shows how to override the default OpenAPI operationId using the @operationId decorator. Accepts a string parameter specifying the desired operation identifier. No external dependencies beyond TypeSpec OpenAPI emitter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/openapi.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@operationId(\"getUserById\")\\nop getUser(id: string): User;\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 ClientCredentialTokenProvider in C#\nDESCRIPTION: This C# code provides an implementation of an AuthenticationTokenProvider supporting OAuth 2.0 client credentials grant, managing HTTP authentication and token retrieval. The class handles both synchronous and asynchronous token requests, constructing HTTP requests with Basic Auth headers and form-encoded bodies to retrieve and parse access tokens. Dependencies include System.Net.Http and System.Text.Json for HTTP operations and token parsing. Constructor parameters are the OAuth client ID and secret; GetToken methods require token request options and a cancellation token. Output is an OAuth 2.0 access token with expiration details. Must be used in environments supporting .NET HttpClient and related API surface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/docs/samples/client/csharp/oauth/readme.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ClientCredentialTokenProvider : AuthenticationTokenProvider\n{\n    private string _clientId;\n    private string _clientSecret;\n    private HttpClient _client;\n\n    public ClientCredentialTokenProvider(string clientId, string clientSecret)\n    {\n        _clientId = clientId;\n        _clientSecret = clientSecret;\n        _client = new HttpClient();\n    }\n\n    public override AccessToken GetToken(GetTokenOptions properties, CancellationToken cancellationToken)\n    {\n        return GetAccessTokenInternal(false, properties, cancellationToken).GetAwaiter().GetResult();\n    }\n\n    public override async ValueTask<AccessToken> GetTokenAsync(GetTokenOptions properties, CancellationToken cancellationToken)\n    {\n        return await GetAccessTokenInternal(true, properties, cancellationToken).ConfigureAwait(false);\n    }\n\n    public override GetTokenOptions CreateTokenOptions(IReadOnlyDictionary<string, object> properties)\n    {\n        if (properties.TryGetValue(GetTokenOptions.ScopesPropertyName, out var scopes) && scopes is string[] scopeArray &&\n            properties.TryGetValue(GetTokenOptions.TokenUrlPropertyName, out var tokenUri) && tokenUri is string tokenUriValue &&\n            properties.TryGetValue(GetTokenOptions.RefreshUrlPropertyName, out var refreshUri) && refreshUri is string refreshUriValue)\n        {\n            return new GetTokenOptions(scopeArray, new Dictionary<string, object>\n            {\n                { GetTokenOptions.TokenUrlPropertyName, tokenUriValue },\n                { GetTokenOptions.RefreshUrlPropertyName, refreshUriValue }\n            });\n        }\n        return null;\n    }\n\n    internal async ValueTask<AccessToken> GetAccessTokenInternal(bool async, GetTokenOptions properties, CancellationToken cancellationToken)\n    {\n        if (!properties.Properties.TryGetValue(\"tokenUrl\", out var tokenUri) || tokenUri is not string tokenUriValue)\n        {\n            throw new ArgumentException(\"Argument properties did not contain the expected value 'tokenUrl'.\", nameof(properties));\n        }\n        var request = new HttpRequestMessage(HttpMethod.Post, tokenUriValue);\n\n        // Add Basic Authentication header\n        var authBytes = System.Text.Encoding.ASCII.GetBytes($\"{_clientId}:{_clientSecret}\");\n        var authHeader = Convert.ToBase64String(authBytes);\n        request.Headers.Authorization = new AuthenticationHeaderValue(\"Basic\", authHeader);\n\n        // Create form content\n        var formContent = new FormUrlEncodedContent(\n        [\n            new KeyValuePair<string, string>(\"grant_type\", \"client_credentials\"),\n            new KeyValuePair<string, string>(\"scope\", string.Join(\" \", properties.Scopes.Span.ToArray()))\n        ]);\n\n        request.Content = formContent;\n\n        using HttpResponseMessage response = async ?\n            await _client.SendAsync(request) :\n            _client.SendAsync(request).GetAwaiter().GetResult();\n\n        response.EnsureSuccessStatusCode();\n\n        // Deserialize the JSON response using System.Text.Json\n        using var responseStream = await response.Content.ReadAsStreamAsync();\n        using JsonDocument jsonDoc = await JsonDocument.ParseAsync(responseStream);\n        JsonElement root = jsonDoc.RootElement;\n\n        string accessToken = root.GetProperty(\"access_token\").GetString();\n        string tokenType = root.GetProperty(\"token_type\").GetString();\n        int expiresIn = root.GetProperty(\"expires_in\").GetInt32();\n\n        // Calculate expiration and refresh times based on current UTC time\n        var now = DateTimeOffset.UtcNow;\n        DateTimeOffset expiresOn = now.AddSeconds(expiresIn);\n        DateTimeOffset refreshOn = now.AddSeconds(expiresIn * 0.85);\n\n        return new AccessToken(accessToken, tokenType, expiresOn, refreshOn);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for Type_Array_DatetimeValue_put Endpoint\nDESCRIPTION: This JSON snippet represents the expected request body for the PUT request to the `/type/array/datetime` endpoint. The request body should be a JSON array containing a single datetime string in ISO 8601 format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_127\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\"2022-08-26T18:38:00Z\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Call for Required Date Query Parameter (TypeScript)\nDESCRIPTION: This TypeScript function `defaultEncoding` implements the client-side logic for the corresponding TypeSpec operation. It accepts a `TestClientContext` and a `Date` object `value`. It constructs the request path `/default`, serializes the `value` using `dateRfc3339Serializer`, and makes a GET request. It includes basic response handling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/query_date.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/api/testClientOperations.ts function defaultEncoding\nexport async function defaultEncoding(\n  client: TestClientContext,\n  value: Date,\n  options?: DefaultEncodingOptions,\n): Promise<void> {\n  const path = parse(\"/default{?value}\").expand({\n    value: dateRfc3339Serializer(value),\n  });\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Array Model in TypeSpec (Typespec)\nDESCRIPTION: Defines a generic Array model that represents a collection of elements of any specified type. The single template parameter, Element, determines the data type for each array entry. There are no additional required properties or dependencies, and this model serves as a foundational building block for more complex data structures in TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Array<Element>\n\n```\n\n----------------------------------------\n\nTITLE: Getting All Optional Duration Properties - JSON\nDESCRIPTION: Represents a response with an optional duration property present as a valid ISO8601 duration string (e.g., 'P123DT22H14M12.011S'). This demonstrates serialization/validation patterns for optional temporal fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_281\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": \"P123DT22H14M12.011S\" }\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated `uri` Type in TypeSpec Model\nDESCRIPTION: Illustrates the use of the deprecated `uri` intrinsic type within a TypeSpec model definition. This type is being replaced by the `url` type for representing URIs/URLs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Server {\n  endpoint: uri;\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Decorator Options from format to explode - TypeSpec (diff)\nDESCRIPTION: Shows how to migrate from the deprecated format option to the explode option on @header and @query decorators in TypeSpec. This diff illustrates code changes required for HTTP header and query parameter decoration, where the explode boolean replaces the multi-value format string. Applies to scenarios where multi-valued headers or queries are needed; only one of format or explode should be present. Requires an updated TypeSpec HTTP library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-18.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-@header(#{ format: \"multi\"})\n-@query(#{ format: \"multi\"})\n+@header(#{ explode: true })\n+@query(#{ explode: true })\n```\n\n----------------------------------------\n\nTITLE: Defining Service Host (Legacy) in TypeSpec\nDESCRIPTION: Illustrates the deprecated usage of the `@serviceHost` decorator in TypeSpec. This decorator was previously applied to the root namespace to specify the domain name part of the service endpoint.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-07-08.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@serviceHost(\"example.com\")\nnamespace MyService;\n```\n\n----------------------------------------\n\nTITLE: Updating Decorator Arguments to Use Value Expressions (TSP)\nDESCRIPTION: Shows the required change from using model type expressions (like `{title: \"My service\"}`) as decorator arguments to using object value expressions (`#{title: \"My service\"}`). This change enforces the distinction between type definitions and value literals.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=\"tsp\"\n-@service({title: \"My service\"})\n+@service(#{title: \"My service\"})\n```\n```\n\n----------------------------------------\n\nTITLE: Extending Emitter Options in TypeSpec YAML Config - YAML\nDESCRIPTION: Demonstrates how to extend the YAML configuration to provide options for the @typespec/http-client-js emitter. The 'options' section maps emitter-specific options (e.g., 'option: value') for fine-tuned customization. This setup allows passing arbitrary supported options to the emitter and is required for customizing properties such as output directories or package names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-js/reference/emitter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-js\"\noptions:\n  \"@typespec/http-client-js\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Scaffolding Template Structure (JSON)\nDESCRIPTION: Illustrates the fundamental structure of a scaffolding template JSON file. The root is an object where keys represent unique template identifiers, and values are objects containing `title` and `description` for each template.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/writing-scaffolding-template.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"templateKey1\": {\n    \"title\": \"Template #1\",\n    \"description\": \"Create a project representing #1\"\n  },\n  \"templateKey2\": {\n    \"title\": \"Template #2\",\n    \"description\": \"Create a project representing #2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema Output for Record<unknown> Property - YAML\nDESCRIPTION: Shows the OpenAPI YAML output for a property 'bar' defined with TypeSpec Record<unknown>. The resulting schema is an object allowing arbitrary additional properties of any type. Input: TypeSpec model property. Output: corresponding OpenAPI schema for the property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nbar:\n  type: object\n  additionalProperties: {}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Server Endpoints in TypeSpec\nDESCRIPTION: Uses multiple `@server` decorators to define two possible base URLs for the API: `https://example1.com` (description \"E1\") and `https://example2.com` (description \"E2\").\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/cheat-sheet.md#_snippet_16\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@server(\"https://example1.com\", \"E1\") @server(\"https://example2.com\", \"E2\")\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Serializers and Utility Functions\nDESCRIPTION: This TypeScript module (`src/models/internal/serializers.ts`) provides various utility functions for data serialization and deserialization, including Base64 encoding/decoding and date handling (ISO8601, RFC7231, Unix Timestamp). It also includes the specific transform functions `jsonBarToTransportTransform` and `jsonBarToApplicationTransform` for the `Bar` model, handling conversion between the application model and the transport representation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/property_references_property.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bar } from \"../models.js\";\n\nexport function decodeBase64(value: string): Uint8Array | undefined {\n  if (!value) {\n    return value as any;\n  }\n  // Normalize Base64URL to Base64\n  const base64 = value\n    .replace(/-/g, \"+\")\n    .replace(/_/g, \"/\")\n    .padEnd(value.length + ((4 - (value.length % 4)) % 4), \"=\");\n\n  return new Uint8Array(Buffer.from(base64, \"base64\"));\n}\nexport function encodeUint8Array(\n  value: Uint8Array | undefined | null,\n  encoding: BufferEncoding,\n): string | undefined {\n  if (!value) {\n    return value as any;\n  }\n  return Buffer.from(value).toString(encoding);\n}\nexport function dateDeserializer(date?: string | null): Date {\n  if (!date) {\n    return date as any;\n  }\n\n  return new Date(date);\n}\nexport function dateRfc7231Deserializer(date?: string | null): Date {\n  if (!date) {\n    return date as any;\n  }\n\n  return new Date(date);\n}\nexport function dateRfc3339Serializer(date?: Date | null): string {\n  if (!date) {\n    return date as any;\n  }\n\n  return date.toISOString();\n}\nexport function dateRfc7231Serializer(date?: Date | null): string {\n  if (!date) {\n    return date as any;\n  }\n\n  return date.toUTCString();\n}\nexport function dateUnixTimestampSerializer(date?: Date | null): number {\n  if (!date) {\n    return date as any;\n  }\n\n  return Math.floor(date.getTime() / 1000);\n}\nexport function dateUnixTimestampDeserializer(date?: number | null): Date {\n  if (!date) {\n    return date as any;\n  }\n\n  return new Date(date * 1000);\n}\nexport function jsonBarToTransportTransform(input_?: Bar | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    address: input_.address,\n    parentId: input_.parentId,\n  }!;\n}\nexport function jsonBarToApplicationTransform(input_?: any): Bar {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    address: input_.address,\n    parentId: input_.parentId,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Compiler Path in VSWorkspaceSettings.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the TypeSpec Visual Studio extension by creating a `.vs/VSWorkspaceSettings.json` file. It shows setting the `typespec.tsp-server.path` key to specify the location of the TypeSpec compiler (`@typespec/compiler`), potentially within a nested project's `node_modules`. The `${workspaceFolder}` variable is used to represent the root directory of the Visual Studio workspace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/typespec-vs/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typespec.tsp-server.path\": \"${workspaceFolder}/my-nested-project/node_modules/@typespec/compiler\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying TypeSpec Migration Tool Command Line Help via Bash\nDESCRIPTION: This Bash command snippet shows how to access available command line options and help documentation for the TypeSpec migration tool. It is executed using npx and requires access to @typespec/migrate on npm and Node.js in the environment. The output lists possible flags and usage patterns for invoking migrations in non-standard setups, such as custom folders or missing package.json files. Use this when you want to see detailed migration options before performing an operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/cadl-typespec-migration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx @typespec/migrate --help\n```\n\n----------------------------------------\n\nTITLE: OpenAPI3 Representation with Multiple Inline Namespaces\nDESCRIPTION: This YAML snippet shows the OpenAPI3 schema for the `Book` model with property-specific namespaces. The top-level `xml` object defines the default namespace, while nested `xml` objects within `title` and `author` properties specify their respective namespaces and prefixes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nBook:\n  type: object\n  properties:\n    id:\n      type: integer\n    title:\n      type: string\n       xml:\n        prefix: \"smp\"\n        namespace: \"http://example.com/schema\"\n    author:\n      type: string\n      xml:\n        prefix: \"ns2\"\n        namespace: \"http://example.com/ns2\"\n  xml:\n    prefix: \"smp\"\n    namespace: \"http://example.com/schema\"\n```\n```\n\n----------------------------------------\n\nTITLE: Using the @removed Decorator in TypeSpec Examples\nDESCRIPTION: These TypeSpec examples show the application of the `@removed` decorator. It marks the `removedInV2` operation, the `AlsoRemovedInV2` model, and the `removedInV3` property as being removed in versions `Versions.v2` and `Versions.v3`, respectively.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_10\n\nLANGUAGE: tsp\nCODE:\n```\n@removed(Versions.v2)\nop removedInV2(): void;\n\n@removed(Versions.v2)\nmodel AlsoRemovedInV2 {}\n\nmodel Foo {\n  name: string;\n\n  @removed(Versions.v3)\n  removedInV3: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Model with Union Status Code (tsp)\nDESCRIPTION: Defines a TypeSpec model `Standard4XXResponse` where the `statusCode` property is decorated with `@statusCode` and defined as a union type (`400 | 402`). This indicates that the response can have either a 400 or 402 status code. Consequently, the generated C# model's constructor will require the specific status code to be provided upon instantiation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/CHANGELOG.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Standard4XXResponse {\n  @statusCode\n  statusCode: 400 | 402;\n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Using @defaultResponse in a Response Model - TypeSpec\nDESCRIPTION: Shows a model definition and operation using the @defaultResponse decorator which marks a response model as the default OpenAPI response. This example demonstrates practical usage: a model (PetStoreResponse) is marked as the default response, which can then be returned from an operation (listPets). No parameters are necessary, and this is often used where alternative, non-error responses are needed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/decorators.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@defaultResponse\nmodel PetStoreResponse is object;\n\nop listPets(): Pet[] | PetStoreResponse;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Compiler Path in VS Code (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to manually set the path to the TypeSpec compiler server in the Visual Studio Code settings. Required for projects where the compiler is not located at the workspace root, this setting points the extension to the compiler's node_modules location. Replace 'my-nested-project' with the correct subfolder as needed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/introduction/editor/vscode.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typespec.tsp-server.path\": \"${workspaceFolder}/my-nested-project/node_modules/@typespec/compiler\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Authenticated OpenAPI Operations - OpenAPI (YAML)\nDESCRIPTION: This YAML snippet illustrates part of the OpenAPI 3 specification generated for the deletePet operation, highlighting how Bearer authentication requirements and common parameters are rendered in the output. It shows the application of the 'security' block for the operation, references for request parameters, and the definition of the BearerAuth security scheme in the components section. Required for this output: successful TypeSpec-to-OpenAPI3 code generation. Inputs are the OpenAPI specification references and operation descriptions, outputs are a compliant OpenAPI fragment with security enforcement clearly documented.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/05-authentication.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  /pets/{petId}:\n    delete:\n      operationId: Pets_deletePet\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - $ref: \"#/components/parameters/CommonParameters.requestID\"\n        - $ref: \"#/components/parameters/CommonParameters.locale\"\n        - $ref: \"#/components/parameters/CommonParameters.clientVersion\"\n      // highlight-start\n      security:\n        - BearerAuth: []\n      // highlight-end\n      responses:\n        \"204\":\n          description: \"There is no content to send for this request, but the headers may be useful.\"\n        \"404\":\n          description: \"Not Found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\ncomponents:\n  parameters:\n    CommonParameters.clientVersion:\n      name: client-version\n      in: header\n      required: false\n      schema:\n        type: string\n    CommonParameters.locale:\n      name: locale\n      in: query\n      required: false\n      schema:\n        type: string\n    CommonParameters.requestID:\n      name: request-id\n      in: header\n      required: true\n      schema:\n        type: string\n  // highlight-start\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n  // highlight-end\n  schemas:\n    NotFoundError:\n      type: object\n      properties:\n        code:\n          type: string\n          example: \"NOT_FOUND\"\n        message:\n          type: string\n```\n\n----------------------------------------\n\nTITLE: Providing Alternative Encoded Names for Serialization in TypeSpec\nDESCRIPTION: Demonstrates @encodedName for specifying alternative field names under different mime types during serialization. Apply to model properties with specific mime type and name values; enables output customization for formats like JSON and XML. Invalid subtype usage is also shown, and errors if an unsupported mime type is given.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Certificate {\n  @encodedName(\"application/json\", \"exp\")\n  @encodedName(\"application/xml\", \"expiry\")\n  expireAt: int32;\n}\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@encodedName(\"application/merge-patch+json\", \"exp\")\n             ^ error cannot use subtype\n```\n\n----------------------------------------\n\nTITLE: Applying @TypeSpec.OpenAPI.externalDocs to Annotate External Documentation - TypeSpec\nDESCRIPTION: Demonstrates use of the @TypeSpec.OpenAPI.externalDocs decorator to provide links and descriptions for external documentation related to a type. This decorator takes a URL as a required parameter and an optional description, allowing enrichment of the OpenAPI externalDocs property. It can be used on any target to annotate where further information is available.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/decorators.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.externalDocs(url: valueof string, description?: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Defining Date Header Parameter (default encoding) - TypeSpec\nDESCRIPTION: Defines an operation that expects a Date header parameter, encoded by default as RFC3339, in the Test namespace. No explicit encoding is set; the operation is mapped to the route '/default' and expects a header value of type utcDateTime. This specification is intended to generate or constrain a client/server to handle Date headers without explicit serialization instructions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_date.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service\\nnamespace Test;\\n\\n@route(\"/default\")\\nop defaultEncoding(\\n  @header\\n  value: utcDateTime,\\n): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Application Deserializer for Bar Model\nDESCRIPTION: This TypeScript function, `jsonBarToApplicationTransform`, deserializes data (presumably from a transport format like JSON, represented here as `any`) into an instance of the `Bar` interface for application use. It maps the input object properties to the corresponding `Bar` interface properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/property_references_property.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonBarToApplicationTransform(input_?: any): Bar {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    address: input_.address,\n    parentId: input_.parentId,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Emit Text File with Custom $onEmit Handler - TypeSpec Compiler - TypeScript\nDESCRIPTION: Defines an asynchronous $onEmit function for a TypeSpec emitter, which writes a file to the output directory only if the 'noEmit' compiler option is not set. Requires '@typespec/compiler' as dependency and should be exported from the main entry point of the emitter package. Expects an EmitContext argument and utilizes emitFile and resolvePath for file emission. Outputs a file named 'hello.txt' containing static text.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitters-basics.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EmitContext, emitFile, resolvePath } from \"@typespec/compiler\";\n\nexport async function $onEmit(context: EmitContext) {\n  if (!context.program.compilerOptions.noEmit) {\n    await emitFile(context.program, {\n      path: resolvePath(context.emitterOutputDir, \"hello.txt\"),\n      content: \"Hello world\\n\",\n    });\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Model for Updateable Properties Using TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines a TypeSpec model `UpdateableProperties` with a template parameter representing all properties that can be updated from a source object. Expects a source object with spread properties; used for tracking updatable fields in models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_23\n\nLANGUAGE: typespec\nCODE:\n```\nmodel UpdateableProperties<Source>\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Example Value Using const and @example in TypeSpec (TSP)\nDESCRIPTION: This snippet shows how to declare a typed constant value and assign it as the value for an @example decorator. This promotes reuse and type safety. The const must be assigned a value compatible with the model type. No additional options are provided in this example.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/examples.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\nconst petExample: Pet = #{ name: \\\"Max\\\", age: 3 };\\n\\n@example(petExample)\\nmodel Pet {\\n  name: string;\\n  age: int32;\\n}\n```\n\n----------------------------------------\n\nTITLE: Using `@bodyIgnore` to Omit Properties from Body in TypeSpec (tsp)\nDESCRIPTION: Demonstrates the use of the `@bodyIgnore` decorator, introduced as a solution in TypeSpec 0.56.0. Applying `@bodyIgnore` to the `headers` property ensures it is completely excluded from the response body, preventing it from appearing (even as an empty object) when it only contains metadata like `@header foo: string`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_17\n\nLANGUAGE: tsp\nCODE:\n```\nop d1(): {@bodyIgnore headers: {@header foo: string}}; // body will be {}\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Exposing Interface Templates for Service Definitions in TypeSpec\nDESCRIPTION: Highlights the impact of instantiating interface templates on service definitions. The interface MyReadWrite extends ReadWrite<string>, but only fully-instantiated operations (like read()) will be included in service definitions. Operations that remain uninstantiated (e.g., write()) are omitted, which can change the generated service structure. Only TypeSpec and knowledge of service definitions are required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/interfaces.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\ninterface ReadWrite<T> {\n  read(): T;\n  write<R>(t: T): R;\n}\n\ninterface MyReadWrite extends ReadWrite<string> {} // Here, the `read()` operation is fully instantiated and will be included in a service definition. However, `write()` is not.\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Decorator Parameters in TypeSpec\nDESCRIPTION: Illustrates how to declare an optional parameter in a decorator signature by appending `?` to the parameter name. In this example, the `name` parameter of the `track` decorator is optional and expects a string value passed to it (`valueof string`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nextern dec track(target: Model | Enum, name?: valueof string);\n```\n\n----------------------------------------\n\nTITLE: Annotating Operation Example with Title and Description using @opExample in TypeSpec (TSP)\nDESCRIPTION: This snippet extends @opExample by providing a title and description for the operation's example input parameters. This metadata will enhance generated documentation, providing context to the example. Both operation signature and all example fields must match expected parameter types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/examples.md#_snippet_7\n\nLANGUAGE: tsp\nCODE:\n```\n@opExample(\\n  #{ parameters: #{ name: \\\"Max\\\", age: 3 } },\\n  #{ title: \\\"Simple write example\\\", description: \\\"Write a pet\\\" }\\n)\\nop write(name: string, age: int32): void;\n```\n\n----------------------------------------\n\nTITLE: Adding a Summary to a Model in TypeSpec\nDESCRIPTION: This snippet demonstrates applying the `@summary` decorator to the `Pet` model to provide a brief description.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_64\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@summary(\"This is a pet\")\nmodel Pet {}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Null Response Block in OpenAPI Swagger via TypeSpec - JSON\nDESCRIPTION: This JSON snippet demonstrates how an operation that returns null is currently represented in the OpenAPI/Swagger specification generated from TypeSpec using tsp compile. The responses block has only a description for the 200 response and omits any schema. This can lead to differences in validation and client expectations compared to the gRPC-generated version. No additional dependencies are required; the context is OpenAPI spec generation from TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/grpc-library-example/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n \\\"responses\\\": {\\n    \\\"200\\\": {\\n        \\\"description\\\": \\\"Null response\\\"\\n    },\\n\n```\n\n----------------------------------------\n\nTITLE: Example: Applying @pageItems, @pageIndex, and @pageSize in Paginated Model in TypeSpec\nDESCRIPTION: Shows practical use of @pageItems together with @pageIndex and @pageSize to produce a strongly-typed paginated resource response for endpoints supporting pagination.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_47\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Page<T> {\n  @pageItems items: T[];\n}\n@list op listPets(@pageIndex page: int32, @pageSize pageSize: int8): Page<Pet>;\n```\n\n----------------------------------------\n\nTITLE: Migrating from @deprecated Decorator to #deprecated Directive in TypeSpec (TSP)\nDESCRIPTION: Shows the syntax change for deprecating elements in TypeSpec. The `@deprecated(\"Message\")` decorator is replaced by the `#deprecated \"Message\"` directive. This applies to TypeSpec definitions and is part of the breaking changes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=tsp\n- @deprecated(\"Message\")\n+ #deprecated \"Message\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SDK Client Pipeline in Java\nDESCRIPTION: Defines a static inner class Configurable that provides a fluent builder API for configuring various aspects of an Azure SDK HTTP pipeline, such as the HttpClient, HTTP log options, pipeline policies, authentication scopes, retry policy or options, and polling intervals. The builder ensures required properties are validated and offers defaults if not set. The authenticate method assembles an HTTP pipeline based on configured options, sets up user-agent and telemetry headers, attaches authentication and retry handlers, and finally instantiates a service client manager class. Dependencies include Azure core and client logging/utilities. Requires types like HttpClient, HttpPipelinePolicy, RetryPolicy, RetryOptions, and TokenCredential. Inputs primarily consist of classes from the Azure SDK, with outputs being a fully constructed service API client. Default values and error handling are provided for missing or invalid configuration values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-mgmt/src/main/resources/Manager_Configurable.txt#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/**\n * The Configurable allowing configurations to be set.\n */\npublic static final class Configurable {\n    private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);\n    private static final String SDK_VERSION = \"version\";\n    private static final Map<String, String> PROPERTIES\n        = CoreUtils.getProperties(\"{{artifact-id}}.properties\");\n\n    private HttpClient httpClient;\n    private HttpLogOptions httpLogOptions;\n    private final List<HttpPipelinePolicy> policies = new ArrayList<>();\n    private final List<String> scopes = new ArrayList<>();\n    private RetryPolicy retryPolicy;\n    private RetryOptions retryOptions;\n    private Duration defaultPollInterval;\n\n    private Configurable() {\n    }\n\n    /**\n     * Sets the http client.\n     *\n     * @param httpClient the HTTP client.\n     * @return the configurable object itself.\n     */\n    public Configurable withHttpClient(HttpClient httpClient) {\n        this.httpClient = Objects.requireNonNull(httpClient, \"'httpClient' cannot be null.\");\n        return this;\n    }\n\n    /**\n     * Sets the logging options to the HTTP pipeline.\n     *\n     * @param httpLogOptions the HTTP log options.\n     * @return the configurable object itself.\n     */\n    public Configurable withLogOptions(HttpLogOptions httpLogOptions) {\n        this.httpLogOptions = Objects.requireNonNull(httpLogOptions, \"'httpLogOptions' cannot be null.\");\n        return this;\n    }\n\n    /**\n     * Adds the pipeline policy to the HTTP pipeline.\n     *\n     * @param policy the HTTP pipeline policy.\n     * @return the configurable object itself.\n     */\n    public Configurable withPolicy(HttpPipelinePolicy policy) {\n        this.policies.add(Objects.requireNonNull(policy, \"'policy' cannot be null.\"));\n        return this;\n    }\n\n    /**\n     * Adds the scope to permission sets.\n     *\n     * @param scope the scope.\n     * @return the configurable object itself.\n     */\n    public Configurable withScope(String scope) {\n        this.scopes.add(Objects.requireNonNull(scope, \"'scope' cannot be null.\"));\n        return this;\n    }\n\n    /**\n     * Sets the retry policy to the HTTP pipeline.\n     *\n     * @param retryPolicy the HTTP pipeline retry policy.\n     * @return the configurable object itself.\n     */\n    public Configurable withRetryPolicy(RetryPolicy retryPolicy) {\n        this.retryPolicy = Objects.requireNonNull(retryPolicy, \"'retryPolicy' cannot be null.\");\n        return this;\n    }\n\n    /**\n     * Sets the retry options for the HTTP pipeline retry policy.\n     * <p>\n     * This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.\n     *\n     * @param retryOptions the retry options for the HTTP pipeline retry policy.\n     * @return the configurable object itself.\n     */\n    public Configurable withRetryOptions(RetryOptions retryOptions) {\n        this.retryOptions = Objects.requireNonNull(retryOptions, \"'retryOptions' cannot be null.\");\n        return this;\n    }\n\n    /**\n     * Sets the default poll interval, used when service does not provide \"Retry-After\" header.\n     *\n     * @param defaultPollInterval the default poll interval.\n     * @return the configurable object itself.\n     */\n    public Configurable withDefaultPollInterval(Duration defaultPollInterval) {\n        this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, \"'defaultPollInterval' cannot be null.\");\n        if (this.defaultPollInterval.isNegative()) {\n            throw LOGGER.logExceptionAsError(new IllegalArgumentException(\"'defaultPollInterval' cannot be negative\"));\n        }\n        return this;\n    }\n\n    /**\n     * Creates an instance of {{service-name}} service API entry point.\n     *\n     * @param credential the credential to use.\n     * @param profile the Azure profile for client.\n     * @return the {{service-name}} service API instance.\n     */\n    public {{manager-class}} authenticate(TokenCredential credential, AzureProfile profile) {\n        Objects.requireNonNull(credential, \"'credential' cannot be null.\");\n        Objects.requireNonNull(profile, \"'profile' cannot be null.\");\n\n        String clientVersion = PROPERTIES.getOrDefault(SDK_VERSION, \"UnknownVersion\");\n\n        StringBuilder userAgentBuilder = new StringBuilder();\n        userAgentBuilder.append(\"azsdk-java\")\n            .append(\"-\")\n            .append(\"{{package-name}}\")\n            .append(\"/\")\n            .append(clientVersion);\n        if (!Configuration.getGlobalConfiguration().get(\"AZURE_TELEMETRY_DISABLED\", false)) {\n            userAgentBuilder.append(\" (\")\n                .append(Configuration.getGlobalConfiguration().get(\"java.version\"))\n                .append(\"; \")\n                .append(Configuration.getGlobalConfiguration().get(\"os.name\"))\n                .append(\"; \")\n                .append(Configuration.getGlobalConfiguration().get(\"os.version\"))\n                .append(\"; auto-generated)\");\n        } else {\n            userAgentBuilder.append(\" (auto-generated)\");\n        }\n\n        if (scopes.isEmpty()) {\n            scopes.add(profile.getEnvironment().getManagementEndpoint() + \"/.default\");\n        }\n        if (retryPolicy == null) {\n            if (retryOptions != null) {\n                retryPolicy = new RetryPolicy(retryOptions);\n            } else {\n                retryPolicy = new RetryPolicy(\"Retry-After\", ChronoUnit.SECONDS);\n            }\n        }\n        List<HttpPipelinePolicy> policies = new ArrayList<>();\n        policies.add(new UserAgentPolicy(userAgentBuilder.toString()));\n        policies.add(new AddHeadersFromContextPolicy());\n        policies.add(new RequestIdPolicy());\n        policies.addAll(\n            this.policies.stream()\n                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)\n                .collect(Collectors.toList()));\n        HttpPolicyProviders.addBeforeRetryPolicies(policies);\n        policies.add(retryPolicy);\n        policies.add(new AddDatePolicy());\n        policies.add(new BearerTokenAuthenticationPolicy(credential, scopes.toArray(new String[0])));\n        policies.addAll(\n            this.policies.stream()\n                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)\n                .collect(Collectors.toList()));\n        HttpPolicyProviders.addAfterRetryPolicies(policies);\n        policies.add(new HttpLoggingPolicy(httpLogOptions));\n        HttpPipeline httpPipeline = new HttpPipelineBuilder()\n            .httpClient(httpClient)\n            .policies(policies.toArray(new HttpPipelinePolicy[0])).build();\n        return new {{manager-class}}(httpPipeline, profile, defaultPollInterval);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec HTTP Client Python Emitter via npm (Project Spec) - Bash\nDESCRIPTION: This snippet demonstrates how to install the @typespec/http-client-python npm package directly into a TypeSpec project. It uses the standard npm install command. No specific prerequisites are required beyond Node.js and npm being installed. The command will add the emitter package as a dependency, enabling Python SDK generation functionality for the project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-python/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-client-python\n\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Serialization with Encoded Name (POST)\nDESCRIPTION: Defines a POST endpoint to test serialization of a JSON request where a property `defaultName` in the model should be serialized as `wireName` in the JSON payload. The expected request body contains `\"wireName\": true`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_103\n\nLANGUAGE: http\nCODE:\n```\npost /serialization/encoded-name/json/property\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"wireName\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec Schema Using JSON Schema Emitter - Bash\nDESCRIPTION: Demonstrates how to invoke the TypeSpec compiler from the command line to emit JSON Schema using the @typespec/json-schema emitter. Requires the TypeSpec CLI tool installed in the environment. The path to the TypeSpec project is represented as the current directory (.), and the '--emit' flag specifies the JSON Schema emitter. The output will be written to the emitter's default or configured output directory as JSON Schema files. No input arguments other than project path and emitter are required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/emitter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/json-schema\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for TypeSpec Plugin in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure ESLint to use the TypeSpec plugin. It adds `@typespec/eslint-plugin` to the `plugins` array and includes the recommended ruleset via the `extends` property. This configuration should be added to your ESLint configuration file (e.g., `.eslintrc.yaml`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/eslint-plugin-typespec/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nplugins: [\"@typespec/eslint-plugin\"],\nextends: [\"plugin:@typespec/eslint-plugin/recommended\"],\n```\n\n----------------------------------------\n\nTITLE: Removing Visibility from a Property in TypeSpec\nDESCRIPTION: This snippet demonstrates using the `@removeVisibility` decorator to remove the `Lifecycle.Read` visibility from the `secret_property` within the `Example` model. This means the property will have all other default Lifecycle visibilities but not `Read`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_53\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Example {\n  // This property will have all Lifecycle visibilities except the Read\n  // visibility, since it is removed.\n  @removeVisibility(Lifecycle.Read)\n  secret_property: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Tag Metadata with @tagMetadata in TypeSpec\nDESCRIPTION: This example demonstrates applying the `@tagMetadata` decorator to the `PetStore` namespace. It defines metadata for the tag named \"Tag Name\", including a description, an externalDocs object with a URL and description, and a custom `x-custom` extension.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/README.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n@service\n@tagMetadata(\n  \"Tag Name\",\n  #{\n    description: \"Tag description\",\n    externalDocs: #{ url: \"https://example.com\", description: \"More info.\", `x-custom`: \"string\" },\n    `x-custom`: \"string\",\n  }\n)\nnamespace PetStore {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a String Return Scenario in TypeSpec (Cadl)\nDESCRIPTION: This TypeSpec code defines a test scenario named 'get_string' within the 'String' namespace, located under the '/strings' service path. The scenario involves a GET request to the '/simple' route, which is expected to return a simple string. Decorators like `@scenario`, `@doc`, and `@scenarioDoc` provide metadata about the scenario's purpose and expected client behavior (expecting the string 'abc'). It depends on the `@typespec/spector` library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/writing-scenario-spec.md#_snippet_0\n\nLANGUAGE: cadl\nCODE:\n```\n```cadl\nimport \"@typespec/spector\";\n\n@scenarioService(\"/strings\")\nnamespace String;\n\n@scenario(\"get_string\")\n@doc(\"Support passing a simple string as JSON\")\n@scenarioDoc(\"In this scenario the Client should expect a string matching 'abc' to be returned.\")\n@get\n@route(\"/simple\")\nop returnString(): string;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Models with Decimal Types - TypeSpec\nDESCRIPTION: This snippet demonstrates how to define a TypeSpec model using the newly introduced decimal and decimal128 types, which are useful for accurate monetary or financial calculations. No external dependencies are required. It shows how to annotate model properties with decimal types. Inputs: N/A; Outputs: Declaration of the 'Foo' model with decimal and decimal128 as property types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-06-06.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Foo {\n  price: decimal;\n  shortPrice: decimal128;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Date Header Parameter (default encoding) - TypeSpec\nDESCRIPTION: Defines an operation similar to the prior, but allows the value header parameter to be optional. This enables clients to omit the Date header entirely. The same route and response pattern are used, and the header type remains utcDateTime.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_date.md#_snippet_2\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service\\nnamespace Test;\\n\\n@route(\"/default\")\\nop defaultEncoding(\\n  @header\\n  value?: utcDateTime,\\n): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Decorator Targets in TypeSpec\nDESCRIPTION: Shows how to define a decorator signature that can be applied to multiple specific TypeSpec kinds. The `track` decorator is declared to accept either a `Model` or an `Enum` as its target, specified using a union expression (`Model | Enum`). This requires importing the relevant reflection types (`using TypeSpec.Reflection;`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nusing TypeSpec.Reflection;\n\nextern dec track(target: Model | Enum);\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies and Peer Dependencies - JSONC\nDESCRIPTION: This JSONC snippet shows how to differentiate dependencies, peerDependencies, and devDependencies in package.json for a TypeSpec library. Peer dependencies are used for the TypeSpec compiler and other libraries to avoid duplicate module instances, while direct dependencies and devDependencies are used for ancillary libraries and development tools.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_11\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"dependencies\": {\n    \"yaml\": \"~2.3.1\", // This is a regular package this library/emitter will use\n  },\n  \"peerDependencies\": {\n    // These are all TypeSpec libraries this library/emitter depends on\n    \"@typespec/compiler\": \"~0.43.0\",\n    \"@typespec/http\": \"~0.43.1\",\n    \"@typespec/openapi\": \"~0.43.0\",\n  },\n  \"devDependencies\": {\n    // This TypeSpec library is only used in the tests but is not required to use this library.\n    \"@typespec/versioning\": \"~0.43.0\",\n    // TypeScript is only used during development\n    \"typescript\": \"~5.0.2\",\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Model with Status Code Range (tsp)\nDESCRIPTION: Defines a TypeSpec model `Standard5XXResponse` intended for server errors. The `statusCode` property uses `@minValue(500)` and `@maxValue(599)` decorators to specify a range. When this model is used as an error response, the generator will use the minimum value (500) as the default HTTP status code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/CHANGELOG.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Standard5XXResponse {\n  @minValue(500)\n  @maxValue(599)\n  @statusCode\n  statusCode: int32;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Route Path Segment for an Operation or Model - TypeSpec\nDESCRIPTION: Applies the @segment decorator to models, model properties, or operations to define a path segment that precedes a path parameter in REST routes. The single parameter specifies the segment to insert, enhancing route customization and clarity. Useful when route segments need to be explicitly named.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.segment(name: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Defining Create Resource Operations - TypeSpec\nDESCRIPTION: Demonstrates use of @createsResource to mark an operation as supporting resource creation. The required parameter is the resource model associated with the operation. This decorator should be placed on operations that exclusively create new resource instances.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.createsResource(resourceType: Model)\n```\n\n----------------------------------------\n\nTITLE: Defining @maxProperties Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@maxProperties` decorator from the `TypeSpec.JsonSchema` namespace. Applied to record types (`Record<unknown>`) or a `ModelProperty` representing an object, it sets the maximum number of properties the object can have. The `value` parameter takes an integer (`int32`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.maxProperties(value: valueof int32)\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Response Model with OkResponse<T> (Old Behavior) in TypeSpec\nDESCRIPTION: Illustrates a generic response model `MyResponse<T>` using the old `OkResponse<T>` template via spread syntax (`...`) to include a response body of type `T` along with other properties like headers. This approach is deprecated.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel MyResponse<T> {\n  ...OkResponse<T>;\n  @header example: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Switching Import Sources to New Emitter Framework - TypeScript\nDESCRIPTION: This code illustrates how to refactor import statements in TypeScript source files to reference the new '@typespec/asset-emitter' package instead of the deprecated '@typespec/compiler/emitter-framework' module. This is required after a breaking change separated the emitter framework into its own library. The key parameter is the import path. Input is shown as a diff: removing the old import and adding the new, expected output is correct imports. Requires TypeScript and access to the new dependency.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```diff lang=ts\\n-import { TypeEmitter, ... } from \"@typespec/compiler/emitter-framework\";\\n+import { TypeEmitter, ... } from \"@typespec/asset-emitter\";\\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Optional Body in POST Request - Test Client - TypeScript\nDESCRIPTION: Implements the 'set' operation on the client, constructing and sending a POST request to the '/set' endpoint, with an optional body. Depends on helpers such as 'parse', 'jsonBodyModelToTransportTransform', and 'createRestError'. The method takes a client context and an options parameter, serializes the model body if present, and handles HTTP response validation. Throws an error if the response does not indicate No Content (204) or an empty body, and invokes a callback if specified in the options.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/optional-request-body.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function set(client: TestClientContext, options?: SetOptions): Promise<void> {\n  const path = parse(\"/set\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n    body: jsonBodyModelToTransportTransform(options?.body),\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining shared routes using deprecated @route 'shared' option in TypeSpec (TypeSpec)\nDESCRIPTION: This snippet demonstrates the deprecated method for marking TypeSpec operations as sharing the same route by using the shared: true option in the @route decorator. This pattern is being replaced by the explicit @sharedRoute decorator. Requires: TypeSpec with legacy route sharing support. The example shows two operations (doIntStuff and doStringStuff) both routed under \"/doStuff\" using the shared flag.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-05-10.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@route(\n  \"/doStuff\",\n  {\n    shared: true,\n  }\n)\nop doIntStuff(input: int32): int32;\n\n@route(\n  \"/doStuff\",\n  {\n    shared: true,\n  }\n)\nop doStringStuff(input: string): string;\n```\n\n----------------------------------------\n\nTITLE: Defining the Old `$onEmit` Emitter Function Signature in TypeScript\nDESCRIPTION: Displays the deprecated signature for the `$onEmit` function in a TypeSpec emitter. This function previously accepted the `Program` and emitter-specific `options` as separate arguments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function $onEmit(program: Program, options: MyEmitterOptions);\n```\n\n----------------------------------------\n\nTITLE: Declaring Well-Known Protobuf Empty Model Reference - TypeSpec - typespec\nDESCRIPTION: Defines a model for the standard Protobuf Empty message (google.protobuf.Empty). Useful for operations that need to explicitly indicate absence of payload or content. TypeSpec code generation emits this as the imported message. Requires google/protobuf/empty.proto to be available.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Protobuf.WellKnown.Empty\n```\n\n----------------------------------------\n\nTITLE: Defining OptionalProperties Model for Optional Property Sets (Typespec)\nDESCRIPTION: OptionalProperties is a generic model that transforms all spread properties in the Source object into optional properties. Used for situations where a group of fields may not always be required in the data model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\nmodel OptionalProperties<Source>\n\n```\n\n----------------------------------------\n\nTITLE: Providing Title and Description with @example Decorator in TypeSpec (TSP)\nDESCRIPTION: This snippet shows how to attach human-readable metadata to examples using the options argument to @example. Title and description fields help clarify the example's context in generated documentation. Works with models that accept the example's structure. Titles and descriptions are optional string fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/examples.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n@example(#{ name: \\\"Max\\\", age: 3 }, #{ title: \\\"Pet example\\\", description: \\\"Simple pet example\\\" })\\nmodel Pet {\\n  name: string;\\n  age: int32;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Known DateTime Encodings via Enum in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Provides an enum `DateTimeKnownEncoding` specifying allowed encodings for datetime values, including RFC 3339, RFC 7231, and Unix timestamp. Useful for annotating how temporal values should be serialized or parsed. Depends on referencing RFC documentation for standard formats.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_27\n\nLANGUAGE: typespec\nCODE:\n```\nenum DateTimeKnownEncoding\n```\n\n----------------------------------------\n\nTITLE: Modeling Nested Header Metadata in Thing Model - TypeSpec - typespec\nDESCRIPTION: This TypeSpec code models a Thing entity with a nested property headers containing a @header-annotated field, specifying that example is transmitted in the HTTP headers. This demonstrates that metadata annotations can be applied within nested model properties, not just at the top level. There are no external dependencies beyond TypeSpec; the snippet relies on the @header decorator for indicating envelope location. Inputs and outputs are shaped according to the Thing model, with the example property routed into the HTTP header of requests or responses.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/operations.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Thing {\n  headers: {\n    @header example: string;\n  };\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 32-bit Unix Timestamp Scalar in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Provides `unixTimestamp32`, a scalar representing 32-bit unix timestamps with 1-second resolution. Used for time-tracking in models requiring unix epoch representations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_53\n\nLANGUAGE: typespec\nCODE:\n```\nscalar unixTimestamp32\n```\n\n----------------------------------------\n\nTITLE: Migrating Deprecated @knownValues Decorator to Named Union in TypeSpec - diff\nDESCRIPTION: This code snippet illustrates replacing the @knownValues decorator and associated enum type with a named union of string literals and variants in TypeSpec. The approach transitions from using Enum and @knownValues on scalars to representing valid values via a union including specific strings and string variants. The migration involves removing enum and decorator lines ('-enum FooKV { a, b, c}', '-@knownValues(FooKV)', '-scalar foo extends string;') and replacing them with a union type ('+union Foo { \"a\", \"b\", \"c\", string }'); this refactor only requires standard TypeSpec syntax.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-04-02.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n-enum FooKV { a, b, c}\n-@knownValues(FooKV)\n-scalar foo extends string;\n+union Foo { \"a\", \"b\", \"c\", string }\n```\n\n----------------------------------------\n\nTITLE: Defining PlainTime Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Introduces the `plainTime` scalar for representing time-only fields with no timezone, commonly used for clock times or timers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_46\n\nLANGUAGE: typespec\nCODE:\n```\nscalar plainTime\n```\n\n----------------------------------------\n\nTITLE: Storing Decorator Metadata using Context StateMap/StateSet in TypeScript\nDESCRIPTION: Implements a `$customName` decorator in TypeScript demonstrating how to attach metadata to TypeSpec types using the `DecoratorContext`. It uses `context.program.stateMap(key)` to associate the target type with the provided `name` string and `context.program.stateSet(key)` to add the target type to an indexed set, both identified by a unique state key (`StateKeys.customName`). This avoids global variables for storing state.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport type { DecoratorContext, Type } from \"@typespec/compiler\";\nimport type { StateKeys } from \"./lib.js\";\n\n// Create a unique key\nconst key = StateKeys.customName;\nexport function $customName(context: DecoratorContext, target: Type, name: string) {\n  // Keep a mapping between the target and a value.\n  context.program.stateMap(key).set(target, name);\n\n  // Keep an index of a type.\n  context.program.stateSet(key).add(target);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeScript Client Class Method for GET Operation\nDESCRIPTION: This TypeScript code snippet shows the `TestClient` class, which includes a `getWithParams` method. This method serves as the public API for the operation on the client instance, taking the `GetWithParamsOptions` and internally calling the `getWithParams` helper function with the client's context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/only_optional.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/testClient.ts class TestClient\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  async getWithParams(options?: GetWithParamsOptions) {\n    return getWithParams(this.#context, options);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using @tagMetadata Decorator with a Custom Namespace Tag - TypeSpec\nDESCRIPTION: This snippet shows how to apply @tagMetadata and @service to a namespace, supplying structured tag information including description, an external documentation link, and custom fields. The tagMetadata object supports both standard OpenAPI properties and custom extensions, making it useful for richly documenting grouped endpoints in OpenAPI.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/decorators.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n@service\n@tagMetadata(\n  \"Tag Name\",\n  #{\n    description: \"Tag description\",\n    externalDocs: #{ url: \"https://example.com\", description: \"More info.\", `x-custom`: \"string\" },\n    `x-custom`: \"string\",\n  }\n)\nnamespace PetStore {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Common Output Directory via --output-dir Flag (Bash)\nDESCRIPTION: This Bash command shows how to change the main output directory for all emitters using the `--output-dir` flag. By default, emitters output to subdirectories within `{output-dir}` (which defaults to `tsp-output`). This command sets it to `my-custom-output-dir` in the current working directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n--output-dir={cwd}/my-custom-output-dir\n```\n\n----------------------------------------\n\nTITLE: Including a JSON Part and Binary File in Multipart Form-Data - HTTP\nDESCRIPTION: Gives an example multipart/form-data POST with a JSON part for structured data (address as an object) and a file part for binary data (profileImage). Suitable for endpoints accepting complex objects and files in a single request. Content-type headers must be application/json and application/octet-stream respectively, and binary parts require filenames.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_61\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /upload HTTP/1.1\\nContent-Length: 428\\nContent-Type: multipart/form-data; boundary=abcde12345\\n\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"address\\\"\\nContent-Type: application/json\\n\\n{\\n  \\\"city\\\": \\\"X\\\"\\n}\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"profileImage\\\"; filename=\\\"<any-or-no-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .jpg file…}\\n--abcde12345--\n```\n\n----------------------------------------\n\nTITLE: Passing Parameter Arguments via CLI for TypeSpec Compile - Bash - bash\nDESCRIPTION: Illustrates invoking the TypeSpec compiler from the CLI while passing parameter arguments using the '--arg' flag. Shows how to customize compilation parameters from the command line, enabling dynamic configuration at build time. Requires a working 'tsp' command and a correctly structured tspconfig.yaml supporting the specified parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --arg \"base-dir=/path/to/base\"\n\n```\n\n----------------------------------------\n\nTITLE: Constraining TypeSpec Template Parameters\nDESCRIPTION: This TypeSpec code snippet demonstrates a new language feature allowing a template parameter (`B`) to be constrained by another template parameter (`A`) using the `extends` keyword. This enables defining relationships and constraints between generic type parameters within model templates.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-01-23.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\nmodel Foo<A, B extends A>\n```\n\n----------------------------------------\n\nTITLE: Defining GetKiosk Operation with Inline Parameter in TypeSpec\nDESCRIPTION: This TypeSpec snippet shows an alternative way to define the `GetKiosk` operation where the path parameter `id` is defined directly within the operation signature using the `@path` decorator. This results in generated Swagger where the parameter is defined inline, similar to the gRPC-generated output, but potentially makes parameter documentation less convenient within the TypeSpec definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/grpc-kiosk-example/README.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@doc(\"Get a kiosk.\")\n@get\n@route(\"kiosks/{id}\")\nop GetKiosk(@path id: int32): Kiosk | RpcStatus;\n```\n\n----------------------------------------\n\nTITLE: Declaring the @defaultResponse Decorator in TypeSpec\nDESCRIPTION: This decorator identifies a TypeSpec model that should represent the OpenAPI `default` response for an operation. It is used for responses that don't fit standard status codes or aren't necessarily errors. It targets `Model` types and takes no parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/README.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.defaultResponse\n```\n\n----------------------------------------\n\nTITLE: Migrating Versioned Library Dependencies Using @useDependency - Typespec - Typespec\nDESCRIPTION: This Typespec snippet demonstrates the updated approach for handling dependencies between versioned namespaces using the new @useDependency decorator. Each enum member representing a version is directly decorated with @useDependency, listing out its dependent versions from other libraries, here Azure.Core and Azure.ResourceManager. This eliminates the need for dependency arrays and makes the dependencies explicit at the version declaration site. Inputs are the version enum members and their dependencies, outputs are the decorated enum entries within the namespace. Requires the @useDependency decorator, @service, @versioned, and other related TypeSpec features.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-02-07.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@armProviderNamespace\n@service(#{ title: \"Microsoft.Observability\" })\n@versioned(Versions)\nnamespace Microsoft.Observability;\n\ninterface Operations extends Azure.ResourceManager.Operations {}\n\nenum Versions {\n  @useDependency(Azure.Core.Versions.v1_0_Preview_2, Azure.ResourceManager.Versions.v1_0_Preview_1)\n  v2021_06_13_preview: \"2021-06-13-preview\",\n\n  @useDependency(Azure.Core.Versions.v1_0_Preview_2, Azure.ResourceManager.Versions.v1_0_Preview_1)\n  v2022_04_30_preview: \"2022-04-30-preview\",\n}\n```\n\n----------------------------------------\n\nTITLE: Generating XML with @unwrapped String Property\nDESCRIPTION: This XML snippet shows the serialization result for the `BlobName` model when the `content` property uses `@unwrapped`. The `<content>` wrapper element is omitted, and the string value 'abcdef' becomes the direct text content of the `<BlobName>` element.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n<BlobName>\n  abcdef\n</BlobName>\n```\n\n----------------------------------------\n\nTITLE: Declaring XML Namespaces Using Enum with @ns and @nsDeclarations (TSP)\nDESCRIPTION: This code details how to use an enum decorated with @Xml.nsDeclarations to standardize namespace URIs, referencing those enums using @Xml.ns for model and property bindings. The enum defines multiple namespaces, which can be referenced to ensure consistency and central management. Inputs are enum and model definitions with decorator applications. This approach depends on the @Xml.nsDeclarations and @Xml.ns decorators in TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_6\n\nLANGUAGE: tsp\nCODE:\n```\n@Xml.nsDeclarations\nenum Namespaces {\n  ns1: \"https://example.com/ns1\",\n  ns2: \"https://example.com/ns2\",\n}\n\n@Xml.ns(Namespaces.ns1)\nmodel Foo {\n  @Xml.ns(Namespaces.ns1)\n  bar: string;\n\n  @Xml.ns(Namespaces.ns2)\n  bar: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @unwrapped Decorator on Array Property in TypeSpec\nDESCRIPTION: This TypeSpec code defines a `Pet` model where the `tags` array property is decorated with `@unwrapped`. This modification prevents the creation of the default wrapper element for the array items.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_16\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Pet {\n  @unwrapped tags: Tag[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Array Value in TypeSpec\nDESCRIPTION: This snippet demonstrates the syntax for defining an array value using `#[]` in TypeSpec. It creates a constant `points` holding an array of object values, each representing a point with `x` and `y` coordinates.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nconst points = #[#{ x: 0, y: 0 }, #{ x: 1, y: 1 }];\n```\n\n----------------------------------------\n\nTITLE: Defining URL Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines a `url` scalar, which must conform to https://url.spec.whatwg.org/. Used wherever a proper URL string field is needed in a model or operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_54\n\nLANGUAGE: typespec\nCODE:\n```\nscalar url\n```\n\n----------------------------------------\n\nTITLE: Defining OffsetDateTime Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Declares an `offsetDateTime` scalar, representing a datetime with a time zone offset. Suitable for cases requiring explicit time zone information (e.g., scheduling applications).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_44\n\nLANGUAGE: typespec\nCODE:\n```\nscalar offsetDateTime\n```\n\n----------------------------------------\n\nTITLE: Using @useDependency for a Non-Versioned Namespace in TypeSpec\nDESCRIPTION: This TypeSpec example shows how to use the `@useDependency` decorator on a namespace (`NonVersionedService`) that isn't itself versioned. It declares that this namespace depends on version `v1_1` of the `MyLib` library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_16\n\nLANGUAGE: tsp\nCODE:\n```\n@useDependency(MyLib.Versions.v1_1)\nnamespace NonVersionedService;\n```\n\n----------------------------------------\n\nTITLE: Defining Bytes Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Declares a `bytes` scalar type for representing byte arrays in TypeSpec, compatible with encoded blob data fields in resource and operation models. May be annotated with encoding strategies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_31\n\nLANGUAGE: typespec\nCODE:\n```\nscalar bytes\n```\n\n----------------------------------------\n\nTITLE: Defining the New `$onEmit` Emitter Function Signature in TypeScript\nDESCRIPTION: Shows the updated signature for the `$onEmit` function in a TypeSpec emitter. This function now accepts a single `EmitContext` object which encapsulates the program, options, and emitter output directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function $onEmit(context: EmitContext);\n```\n\n----------------------------------------\n\nTITLE: Serializing FileSpecificContentType from Raw JSON in TypeScript (Application Transform)\nDESCRIPTION: This TypeScript function converts an untyped JSON-like object to a strongly-typed FileSpecificContentType object, transferring properties such as filename, contentType, and contents. It guards against undefined or null input and is typically part of a layered deserialization process converting transport or external data into application-native data structures.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file_content_type.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonFileSpecificContentTypeToApplicationTransform(\n  input_?: any,\n): FileSpecificContentType {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    filename: input_.filename,\n    contentType: input_.contentType,\n    contents: input_.contents,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TypeScript Client Context Factory for DemoService\nDESCRIPTION: Defines the generated TypeScript factory function `createDemoServiceClientContext`. This function initializes and returns a `DemoServiceClientContext` object. It requires an `endpoint` string (as no default URL was specified in TypeSpec) and optional `DemoServiceClientOptions`. The function resolves the endpoint URL by replacing placeholders and utilizes a `getClient` helper function to instantiate the context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/client_context.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport function createDemoServiceClientContext(\n  endpoint: string,\n  options?: DemoServiceClientOptions,\n): DemoServiceClientContext {\n  const params: Record<string, any> = {\n    endpoint: endpoint,\n  };\n  const resolvedEndpoint = \"{endpoint}\".replace(/{([^}]+)}/g, (_, key) =>\n    key in params\n      ? String(params[key])\n      : (() => {\n          throw new Error(`Missing parameter: ${key}`);\n        })(),\n  );\n  return getClient(resolvedEndpoint, {\n    ...options,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Emitted Protobuf Service and Messages for Example TypeSpec Interface - Protobuf\nDESCRIPTION: This Protobuf snippet shows the emitted proto code for TypeSpec definitions of a service interface and input/output models. It includes two message declarations and the associated rpc service method. Requires proto3 and mirrors the structure of the original TypeSpec constructs for use with Protobuf-compatible systems like gRPC.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/guide.md#_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Input {\n  string exampleField = 1;\n}\n\nmessage Output {\n  uint32 parsed = 1;\n}\n\nservice Example {\n  rpc TestOperation(Input) returns (Output);\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI3 Representation of XML Attribute and Text Content\nDESCRIPTION: This YAML snippet shows the OpenAPI3 schema definition. The `language` property includes `xml: { attribute: true }` to indicate it's an XML attribute. The `content` property is defined as a regular string property; OpenAPI schema doesn't have a standard direct equivalent for `@Xml.unwrapped`, but the schema reflects its presence as a string property. Note the inconsistent title 'Book' in the original YAML example.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nBook:\n  type: object\n  properties:\n    language:\n      type: string\n      xml:\n        attribute: true\n    content:\n      type: string\n```\n```\n\n----------------------------------------\n\nTITLE: Applying @TypeSpec.OpenAPI.defaultResponse Decorator - TypeSpec\nDESCRIPTION: Demonstrates how to mark a model as the OpenAPI default response using the @TypeSpec.OpenAPI.defaultResponse decorator. This decorator applies to models and allows distinguishing non-error default responses in OpenAPI, which differs from the built-in @error decorator. No parameters are required for this decorator, and it should be applied directly above the target model declaration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.defaultResponse\n```\n\n----------------------------------------\n\nTITLE: Implementing the Client Operation Function in TypeScript\nDESCRIPTION: This TypeScript function `get` executes the HTTP GET request for the defined operation. It takes the client context (`TestClientContext`) and optional `GetOptions` as input, constructs the request path (`/`), sends the request using `client.pathUnchecked`, handles potential `onResponse` callbacks from the options, validates the response status (200) and content type (`application/json`), and returns the parsed integer body or throws a `RestError` on failure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/no_parameters.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function get(client: TestClientContext, options?: GetOptions): Promise<number> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return response.body!;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Constrain Minimum String Length with @minLength in TypeSpec\nDESCRIPTION: Utilizes the @minLength decorator to require that string types possess a minimum length. Used to enforce minimum requirements for fields like usernames or passwords in API and data schemas.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_30\n\nLANGUAGE: typespec\nCODE:\n```\n@minLength(value: valueof integer)\n```\n\n----------------------------------------\n\nTITLE: Using Friendly Names with TypeSpec Models\nDESCRIPTION: Shows how using the @friendlyName decorator on two different TypeSpec models can cause duplicate names in OpenAPI output. In this example, both Customer and User map to the OpenAPI 'User' schema. Dependencies include the TypeSpec language and OpenAPI emitter. Developers should ensure unique names when using @friendlyName to avoid naming conflicts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/diagnostics.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@friendlyName(\"User\")\\nmodel Customer {\\n  id: string;\\n}\\n\\nmodel User {\\n  id: string;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Setting TypeSpec Package Flags for New Decorator Marshalling - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to opt into the new decorator argument marshalling behavior for a TypeSpec library by setting a package flag. It shows how to use 'definePackageFlags' to configure the new marshalling logic. This is necessary for package maintainers upgrading to the new values semantics in TypeSpec decorators. Requires TypeScript, a build environment, and access to the package build process.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nexport const $flags = definePackageFlags({\n  decoratorArgMarshalling: \"new\",\n});\n```\n\n----------------------------------------\n\nTITLE: Annotating Simple Primitive Types with @example Decorator in TypeSpec (TSP)\nDESCRIPTION: This snippet demonstrates the use of the @example decorator to provide an example for a model with primitive properties in TypeSpec. The decorator takes a value that must be assignable to the model. No additional metadata is provided here. Requires TypeSpec decorators and the target model defined. The snippet illustrates expected input values for the Pet model: name as a string and age as an int32.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/examples.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@example(#{ name: \\\"Max\\\", age: 3 })\\nmodel Pet {\\n  name: string;\\n  age: int32;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Bodies with Unions Including `Http.File` in TypeSpec\nDESCRIPTION: Demonstrates a TypeSpec operation `uploadFileOrString` where the request body (`@body data`) is a union of `File | string`. Explains that in this case, `File` is treated as a structured JSON model, not a raw file body. A warning is typically issued by the TypeSpec HTTP library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n// Warning: An HTTP File in a union is serialized as a structured model\n// instead of being treated as the contents of a file...\nop uploadFileOrString(@path id: string, @body data: File | string): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Serialized Output for @discriminated Union - JSON\nDESCRIPTION: Provides an example of the serialized output for a discriminated union 'Pet'. In this case, JSON objects use a 'kind' property to identify the variant and a 'value' property with the actual data. Useful for consumers needing to understand the runtime wire format from a TypeSpec model using the @discriminated pattern. Output expects objects conforming to the TypeSpec-specified shape.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-04.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"cat\",\n  \"value\": {\n    \"name\": \"Whiskers\",\n    \"meow\": true\n  }\n},\n{\n  \"kind\": \"dog\",\n  \"value\": {\n    \"name\": \"Rex\",\n    \"bark\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multipart/Form-Data Float Endpoint with TypeSpec\nDESCRIPTION: This TypeSpec snippet specifies a REST POST endpoint expecting multipart/form-data with a floating-point (float64) value as the 'temperature' part, using content type 'text/plain'. It declares the operation, route, and type constraints for the payload structure. Dependencies include support for HTTP decorators and multipart types in TypeSpec, and the input is a structured multipart payload; no content is returned, and the endpoint enforces typing and content-type handling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/non-string-float.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Test;\n@post\n@route(\"/non-string-float\")\nop float(\n  @header contentType: \"multipart/form-data\",\n  @multipartBody body: {\n    temperature: HttpPart<{\n      @body body: float64;\n      @header contentType: \"text/plain\";\n    }>;\n  },\n): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Setting String Content Encoding for JSON Schema in TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.contentEncoding` decorator defines the encoding used for the content of a string type or a model property of type string when generating JSON Schema. It takes a single string parameter `value` specifying the encoding (e.g., 'base64').\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.contentEncoding(value: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Defining and Serializing Arrays of Complex Types - TypeSpec\nDESCRIPTION: Demonstrates creation of TypeSpec models referencing other models as array properties (e.g., tags: Tag[]). Annotations control how models and properties map to XML elements. Used to model complex, nested XML structures in serialized output. Requires referenced model definitions to be present.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_12\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@encodedName(\"application/xml\", \"XmlPet\")\nmodel Pet {\n  @Xml.unwrapped\n  tags: Tag[];\n}\n\n@encodedName(\"application/xml\", \"XmlTag\")\nmodel Tag {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Previous FQN Usage of @discriminator (Deprecated) - Typespec\nDESCRIPTION: Shows the previous way to reference the '@discriminator' decorator via fully qualified name ('@TypeSpec.Rest.disriminator'). This method is now deprecated in favor of simply '@discriminator'. Requires TypeSpec language and Rest library for backwards compatibility. Used to annotate models with discriminator field.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-10-12.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.disriminator(\"kind\")\nmodel Pet {}\n```\n\n----------------------------------------\n\nTITLE: Applying Added Version Decorator (Legacy String Literal) in TypeSpec\nDESCRIPTION: Illustrates the deprecated usage of the `@added` versioning decorator in TypeSpec, where the version was specified directly as a string literal.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-07-08.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n// Before\n@added(\"2022-01-15-preview\")\nmodel Foo {}\n```\n\n----------------------------------------\n\nTITLE: Replacing String-Based Visibilities with Lifecycle Enum - TypeSpec TSP\nDESCRIPTION: Shows how to migrate visibility decorators from string literals to the strongly-typed Lifecycle enum in TypeSpec. Requires the TypeSpec compiler with Lifecycle enum available. Input: a property decorated with @visibility using string literals. Output: refactored property with @visibility using enum values for improved type safety.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-04.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n@visibility(\"create\", \"read\")\nexample: string;\n```\n\nLANGUAGE: tsp\nCODE:\n```\n@visibility(Lifecycle.Create, Lifecycle.Read)\nexample: string;\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Enum for JSON Schema Formats\nDESCRIPTION: This TypeSpec code defines the `TypeSpec.JsonSchema.Format` enum. It enumerates well-known format strings defined by the JSON Schema specification, such as `date-time`, `email`, `uri`, and `uuid`. These formats can be used to provide more specific validation and semantic meaning to string data types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/data-types.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nenum TypeSpec.JsonSchema.Format\n```\n\n----------------------------------------\n\nTITLE: Starting and Stopping the Spector Server in a Separate Process - Bash\nDESCRIPTION: This Bash snippet shows how to start the Spector server in a background process using 'tsp server start', execute tests (placeholder), and then stop the server using 'tsp server stop'. This workflow allows for running integration or scenario tests against a live mock server spun up temporarily. Dependencies include the Spector CLI and valid TypeSpec specs at the specified path. The primary input is the specs directory; the expected result is a controlled server lifecycle for automated test pipelines.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp server start ./path/to/specs/\n... run tests ...\ntsp server stop\n```\n\n----------------------------------------\n\nTITLE: Disabling All Visibility Modifiers with @invisible - TypeSpec Typespec\nDESCRIPTION: Uses the @invisible decorator to disable all visibility modifiers for a property within a visibility class in TypeSpec. In this example, no visibilities from the Lifecycle enum are enabled for the 'invisible' property. Requires Lifecycle visibility class. Input: property with @invisible(Lifecycle); Output: property is invisible for all Lifecycle visibilities.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/visibility.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n@invisible(Lifecycle)\ninvisible: string;\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Contained Items in Arrays for JSON Schema (TypeSpec)\nDESCRIPTION: Used with `@TypeSpec.JsonSchema.contains`, the `@TypeSpec.JsonSchema.minContains` decorator specifies the minimum number of times the type defined by `@contains` must appear in an array. It targets array types (`unknown[]`) or model properties representing arrays and takes an integer `value` parameter. If only `@contains` is used, the effective minimum is 1.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.minContains(value: valueof int32)\n```\n\n----------------------------------------\n\nTITLE: Using Generic OkResponse<T> (Old Behavior) in TypeSpec\nDESCRIPTION: Illustrates the previous syntax where `OkResponse<T>` was a template used to define a 200 OK response with a body of type `T`. This template pattern is no longer used.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nop get(id: string): OkResponse<Pet>;\n```\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for Type_Array_Int32Value_put Endpoint\nDESCRIPTION: This JSON snippet represents the expected request body for the PUT request to the `/type/array/int32` endpoint. The request body should be a JSON array containing 32-bit integer values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_133\n\nLANGUAGE: json\nCODE:\n```\n```json\n[1, 2]\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Deserializer for Derived TRex Model (Application)\nDESCRIPTION: This TypeScript function `jsonTRexToApplicationTransform` specifically deserializes data from a transport format (any) into a `TRex` object. It expects the input to represent a T-Rex and maps the `kind` and `size` properties to create the strongly-typed `TRex` object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/inheritance_discriminator.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonTRexToApplicationTransform\nexport function jsonTRexToApplicationTransform(input_?: any): TRex {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    kind: input_.kind,\n    size: input_.size,\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Transforming Transport Data to WidgetData in TypeScript\nDESCRIPTION: This TypeScript function acts as an entry point for converting data received in a transport format (e.g., JSON) back into a `WidgetData` object suitable for application use. It checks for null or undefined inputs and uses the `jsonWidgetDataToApplicationDiscriminator` function to handle the conversion based on the discriminator property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/discriminated_union.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport function jsonWidgetDataToApplicationTransform(input_?: any): WidgetData {\n  if (!input_) {\n    return input_ as any;\n  }\n  return jsonWidgetDataToApplicationDiscriminator(input_);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the @typeChangedFrom Decorator in TypeSpec\nDESCRIPTION: Defines the syntax for the `@TypeSpec.Versioning.typeChangedFrom` decorator. Applied to `ModelProperty` elements, this decorator indicates a change in the property's type. It requires `version` (EnumMember) for the change version and `oldType` (unknown) for the previous type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Versioning.typeChangedFrom(version: EnumMember, oldType: unknown)\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Object and Array Values in a Decorator Call - TypeSpec Language\nDESCRIPTION: This code shows a TypeSpec decorator '@dummy' called with an object value containing both scalars and an array value. It demonstrates the in-line use of both the '#{}' object value and '#[]' array value literal syntax in a decorator argument. Useful for complex decorator configurations and showcases composability of values in TypeSpec. No external dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_11\n\nLANGUAGE: tsp\nCODE:\n```\n@dummy(#{\n  name: \"John\",\n  age: 48,\n  address: #{ city: \"London\" }\n  aliases: #[\"Bob\", \"Frank\"]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining 32-bit Integer Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines a `int32` scalar for signed 32-bit integers (range: -2,147,483,648 to 2,147,483,647), suitable for standard integer fields in models. Commonly used.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_39\n\nLANGUAGE: typespec\nCODE:\n```\nscalar int32\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Resource Collection Operation Interface - TypeSpec - typespec\nDESCRIPTION: Defines the TypeSpec.Rest.Resource.ExtensionResourceCollectionOperations interface template, parameterized by Extension, Resource, and Error types. This interface organizes collection-level operations for extension resources, standardizing the template structure and providing a base for further CRUD operation definitions. Prerequisites include TypeSpec and dependencies on Extension, Resource, and Error model types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ExtensionResourceCollectionOperations<Extension, Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Using @ns Decorator with Enum in TypeSpec\nDESCRIPTION: This TypeSpec example shows defining namespaces using an enum `Namespaces` marked with `@Xml.nsDeclarations`. The `@Xml.ns` decorator is then used on the `Foo` model and its properties, referencing members of the `Namespaces` enum (e.g., `Namespaces.ns1`) to assign the corresponding namespaces.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_11\n\nLANGUAGE: tsp\nCODE:\n```\n@Xml.nsDeclarations\nenum Namespaces {\n  ns1: \"https://example.com/ns1\",\n  ns2: \"https://example.com/ns2\",\n}\n\n@Xml.ns(Namespaces.ns1)\nmodel Foo {\n  @Xml.ns(Namespaces.ns1)\n  bar: string;\n\n  @Xml.ns(Namespaces.ns2)\n  bar: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @externalDocs to Link External Documentation to an Operation - TypeSpec\nDESCRIPTION: This example applies the @externalDocs decorator to an operation, specifying a URL and a human-readable description for the documentation. The decorator enables OpenAPI consumers to locate additional guidance outside the main service document. Both parameters (URL and description) are used; only the URL is required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/decorators.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@externalDocs(\n  \"https://example.com/detailed.md\",\n  \"Detailed information on how to use this operation\"\n)\nop listPets(): Pet[];\n```\n\n----------------------------------------\n\nTITLE: Implementing the TestClient Class Wrapper in TypeScript\nDESCRIPTION: Implements a TestClient class that encapsulates a TestClientContext and exposes a 'create' method for creating a Widget. The constructor initializes the context with an endpoint and optional configuration. The 'create' method delegates to the 'create' function, injecting the context and forwarding arguments. Depends on createTestClientContext, Widget, CreateOptions, and create. Inputs are service endpoint, configuration options, Widget model, and operation options. Output is a promise resolving on success. Intended to provide a higher-level, user-friendly client API.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/with_body_property.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  async create(widget: Widget, options?: CreateOptions) {\n    return create(this.#context, widget, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected Namespace Structure After Merging Fix in TypeSpec\nDESCRIPTION: TypeSpec code demonstrating the correct way to define nested namespaces (`MyArea`, `MyArea2`) within a blockless namespace (`MyOrg.MyProject`) to ensure models `A` and `B` reside in `MyOrg.MyProject.MyArea` and `MyOrg.MyProject.MyArea2` respectively, following the fix in PR #4050. This code achieves the behavior previously expected but not correctly implemented.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_32\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace MyOrg.MyProject;\n\nnamespace MyArea {\n  model A {}\n}\n\nnamespace MyArea2 {\n  model B {}\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Client Constructor Accepting Union Credential Type\nDESCRIPTION: This TypeScript snippet shows the constructor of the generated `TestClient`. It accepts the service endpoint and a credential object which can be either a `BearerTokenCredential` or an `ApiKeyCredential`, reflecting the multiple authentication schemes defined in the TypeSpec. It initializes the client context internally using `createTestClientContext`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/client_parameters.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(\n    endpoint: string,\n    credential: BearerTokenCredential | ApiKeyCredential,\n    options?: TestClientOptions,\n  ) {\n    this.#context = createTestClientContext(endpoint, credential, options);\n  }\n  async valid(options?: ValidOptions) {\n    return valid(this.#context, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Adding an Exclusive Max Value Constraint for Numeric Scalars in TypeSpec\nDESCRIPTION: Applies @maxValueExclusive(50) to a float64 scalar 'distance', meaning distance must be strictly less than 50. Useful in units, limits, or bounded range specifications.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_25\n\nLANGUAGE: typespec\nCODE:\n```\n@maxValueExclusive(50)\nscalar distance is float64;\n```\n\n----------------------------------------\n\nTITLE: Formatting Model Property Spacing (Incorrect) in TypeSpec\nDESCRIPTION: Illustrates the incorrect practice ('bad') of adding unnecessary blank lines between simple model properties that do not have preceding decorators or comments. This contrasts with the recommended compact layout.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_9\n\nLANGUAGE: tsp\nCODE:\n```\n// bad\nmodel Foo {\n  one: string;\n\n  two: string;\n\n  three: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the @operationId Decorator for Custom OpenAPI Operation IDs in TypeSpec\nDESCRIPTION: This decorator explicitly sets the `operationId` property in the generated OpenAPI specification for a specific TypeSpec operation. This provides a unique identifier for the operation. It targets `Operation` types and requires the desired `operationId` as a string parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/README.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.operationId(operationId: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Declaring the @madeRequired Decorator Syntax in TypeSpec\nDESCRIPTION: This snippet shows the syntax for the `@madeRequired` decorator. It targets a `ModelProperty` and accepts an `EnumMember` (`version`) signifying the version in which the property became required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Versioning.madeRequired(version: EnumMember)\n```\n\n----------------------------------------\n\nTITLE: Declaring Decorators with Namespaces in TypeSpec\nDESCRIPTION: Shows how to declare external decorator signatures in TypeSpec, including one within a specific namespace. `customName` is declared at the top level, while `tableName` is declared within the `MyLib` namespace. These declarations are intended to be linked with corresponding JavaScript implementations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"./lib.js\";\nextern dec customName(target: Type, name: StringLiteral);\n\nnamespace MyLib {\n  extern dec tableName(target: Type, name: StringLiteral);\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for PUT /type/model/inheritance/single-discriminator/model\nDESCRIPTION: This JSON represents the expected input body for a PUT request to `/type/model/inheritance/single-discriminator/model`. It demonstrates sending a polymorphic model instance ('sparrow') that uses single-level inheritance with one discriminator ('kind').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_181\n\nLANGUAGE: json\nCODE:\n```\n{ \"wingspan\": 1, \"kind\": \"sparrow\" }\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for GET /type/property/additionalProperties/extendsDifferentSpreadFloat\nDESCRIPTION: This JSON represents the expected response body for a GET request to `/type/property/additionalProperties/extendsDifferentSpreadFloat`. It showcases a model that includes known properties ('name') alongside additional properties ('prop', 'derivedProp') of type float, potentially demonstrating inheritance and spread (`...`) syntax for additional properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_190\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"abc\", \"prop\": 43.125, \"derivedProp\": 43.125 }\n```\n\n----------------------------------------\n\nTITLE: Defining AuthorizationCodeFlow Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.AuthorizationCodeFlow` model for the OAuth2 Authorization Code flow. It includes properties `type` set to `TypeSpec.Http.OAuth2FlowType.authorizationCode`, `authorizationUrl` (string), `tokenUrl` (string), an optional `refreshUrl` (string), and an optional list of `scopes` (string array) for the credential.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Http.AuthorizationCodeFlow\n```\n\n----------------------------------------\n\nTITLE: Generating Service Representations for Each Version in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how an emitter can use `buildVersionProjections` and `projectProgram` functions from the `@typespec/versioning` library to generate distinct program representations for each defined service version. It iterates through projections to get the specific state of the service at each version. Dependencies include the TypeSpec program object and the service namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Get a list of all the different version of the service and the projections\nconst projections = buildVersionProjections(program, serviceNamespace);\n\nfor (const projection of projections) {\n  const projectedProgram = projectProgram(program, projection.projections);\n  // projectedProgram now contains the representation of the service at the given version.\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling a TypeSpec Project via Docker in Bash\nDESCRIPTION: This Bash command compiles a TypeSpec project located in the current directory using the Docker container. It mounts the host's current directory to `/wd` inside the container and executes the `tsp compile .` command (implicitly, as `compile .` is passed as an argument to the container's entrypoint). This processes TypeSpec files and generates output based on project configuration. Requires Docker installed and a valid TypeSpec project in the current directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/docker/readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v \"${pwd}:/wd\" --workdir=\"/wd\" -t azsdkengsys.azurecr.io/typespec compile .\n```\n\n----------------------------------------\n\nTITLE: Resolving Route Resolution by Nesting Namespaces in TypeSpec\nDESCRIPTION: Shows the resolution for the multiple namespace scenario under the new rules. By nesting `MyLib` under the service namespace `Foo` (becoming `Foo.MyLib`), its operations are now correctly included in route resolution along with `Foo`'s operations, resulting in routes `[\"/in-service\", \"/my-lib\"]`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nimport \"@typespec/rest\";\n\nusing Http;\n\n@serviceTitle(\"My Service\")\nnamespace Foo {\n  @route(\"in-service\")\n  op test(): void;\n}\n\nnamespace Foo.MyLib {\n  @route(\"my-lib\")\n  op test(): void;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Testing JSON Deserialization with Encoded Name (GET)\nDESCRIPTION: Defines a GET endpoint to test deserialization of a JSON response where a property `defaultName` in the model is expected to map to `wireName` in the JSON payload. The expected response body contains `\"wireName\": true`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_102\n\nLANGUAGE: http\nCODE:\n```\nget /serialization/encoded-name/json/property\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"wireName\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Package Name with TypeSpec Protobuf Emitter - TypeSpec\nDESCRIPTION: This snippet shows how to specify a custom package name using the @package decorator with a PackageDetails argument. This results in a generated proto file with the desired package path and package statement. Requires TypeSpec with Protobuf emitter support and is used to organize generated Protobuf files under specific namespaces.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/guide.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@package({\n  name: \"com.example.test\",\n})\nnamespace Test {\n// ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Secret Value Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@secret` decorator. This decorator marks a string type or a model property of type string as containing a secret value that requires careful handling to prevent exposure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_57\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@secret\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Omit Properties Transformation Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@withoutOmittedProperties` decorator. When applied to a model, it returns a transformed version of the model where the specified properties (given as a string literal or a union of string literals) have been omitted.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_73\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@withoutOmittedProperties(omit: string | Union)\n```\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for GET /type/model/inheritance/single-discriminator/legacy-model\nDESCRIPTION: This JSON shows the expected response body for a GET request to `/type/model/inheritance/single-discriminator/legacy-model`. It represents receiving a polymorphic model instance ('t-rex') defined in a legacy manner, likely using a single discriminator ('kind').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_176\n\nLANGUAGE: json\nCODE:\n```\n{ \"size\": 20, \"kind\": \"t-rex\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Type Examples with @example Decorator in TypeSpec (TSP)\nDESCRIPTION: This example provides scalar type values using the @example decorator, utilizing scalar constructors like plainDate.fromISO and duration.fromISO. It demonstrates how to encode fields according to protocol requirements using @encode. Key dependencies are the scalar constructors and any custom encoding logic. Inputs are values for id (string), createdAt (utcDateTime), and timeout (duration).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/examples.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n@example(#{\\n  id: \\\"item-1\\\",\\n  createdAt: plainDate.fromISO(\\\"2020-01-01T00:00:00Z\\\"),\\n  timeout: duration.fromISO(\\\"PT1M\\\"),\\n})\\nmodel Item {\\n  id: string;\\n  createdAt: utcDateTime;\\n  @encode(\\\"seconds\\\", int32) timeout: duration;\\n}\n```\n\n----------------------------------------\n\nTITLE: Correcting Model Value Assignment in TypeSpec Models (TSP)\nDESCRIPTION: Shows the deprecated way of assigning model types as values within TypeSpec models (using `{}`) and contrasts it with the correct approach using the `#{} ` object value notation. An automatic codefix is provided.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_45\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Test {\n  // Deprecated\n  user: {name: string} = {name: \"System\"};\n  \n  // Correct\n  user: {name: string} = #{name: \"System\"};\n```\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated `@segmentSeparator` Decorator in TypeSpec REST\nDESCRIPTION: Example demonstrating the usage of the deprecated `@segmentSeparator` decorator within the `@typespec/rest` library. This decorator is replaced by `@actionSeparator` for specifying separators in auto-generated routes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n@autoRoute\nnamespace Things {\n  @action\n  @segmentSeparator(\":\")\n  @put\n  op customAction1(\n    @segment(\"things\")\n    @path\n    thingId: string,\n  ): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the API Client Context Interface - TypeScript\nDESCRIPTION: Declares TestClientContext interface extending Client. Used for typing the context object passed internally between client methods and operation functions. Dependency: base Client interface. Ensures a standard shape for interacting with HTTP layer. Output: type definition only, no runtime code. Helps keep client/operation separation clear.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TestClientContext extends Client {}\n```\n\n----------------------------------------\n\nTITLE: Initializing a TypeScript Client with OAuth2 Credentials\nDESCRIPTION: This TypeScript code defines the `TestClient` class, generated from the TypeSpec definition. Its constructor requires the service endpoint URL and an `OAuth2TokenCredential` specialized for the `ClientCredentialsFlow` as positional arguments for handling authentication. It initializes a client context (`#context`) and provides an async method `valid` to call the corresponding API operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/oauth2.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(\n    endpoint: string,\n    credential: OAuth2TokenCredential<ClientCredentialsFlow>,\n    options?: TestClientOptions,\n  ) {\n    this.#context = createTestClientContext(endpoint, credential, options);\n  }\n  async valid(options?: ValidOptions) {\n    return valid(this.#context, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines the `duration` scalar, representing time durations such as '5s' or '10h'. Useful for specifying time intervals and time-based properties across models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_34\n\nLANGUAGE: typespec\nCODE:\n```\nscalar duration\n```\n\n----------------------------------------\n\nTITLE: Using @useRef Decorator for External References in TypeSpec\nDESCRIPTION: This TypeSpec code displays the `@TypeSpec.OpenAPI.useRef` decorator. It is used on a `Model` or `ModelProperty` to specify an external reference (URI) for the type in the generated OpenAPI document. The `ref` parameter takes a string value representing the path to the external definition (e.g., `../../common.json#/components/schemas/Foo`), allowing reuse of common schemas.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi3/README.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.useRef(ref: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Defining Known Byte Encodings via Enum in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Defines the `BytesKnownEncoding` enum which enumerates recognized encoding formats for byte arrays: 'base64' and 'base64url'. Used to annotate byte array serialization strategies and requires knowing the appropriate encoding type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_26\n\nLANGUAGE: typespec\nCODE:\n```\nenum BytesKnownEncoding\n```\n\n----------------------------------------\n\nTITLE: Encode Duration Property with ISO8601 Format - JSON\nDESCRIPTION: Highlights request and response structure for duration properties encoded using the ISO8601 duration string (e.g., \\\"P40D\\\"). This format is widely supported and portable among JSON-based systems. The \\\"value\\\" property is a string and must conform to expected ISO8601 forms.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": \\\"P40D\\\"\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": \\\"P40D\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Omitting Model Properties Using the 'never' Type in TypeSpec\nDESCRIPTION: Illustrates how the `never` type can be used within a model template specialization (`Address<never>`) to indicate that a specific property (`state` in this case) should not be present in the resulting model (`UKAddress`). Emitters are responsible for interpreting this and omitting the property during code generation; the TypeSpec compiler itself does not remove `never` properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/models.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Address<TState> {\n  state: TState;\n  city: string;\n  street: string;\n}\n\nmodel UKAddress is Address<never>;\n```\n\n----------------------------------------\n\nTITLE: Configuring a Service Endpoint with Description - Typespec\nDESCRIPTION: Illustrates adding a user-friendly description to the service endpoint using the optional description argument of the @server decorator. This enhances generated documentation and clarifies endpoint usage. Requires HTTP decorators and a namespace definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/decorators.md#_snippet_17\n\nLANGUAGE: typespec\nCODE:\n```\n@service\n@server(\"https://example.com\", \"Single server endpoint\")\nnamespace PetStore;\n```\n\n----------------------------------------\n\nTITLE: Defining Stream Protocol Models with @streamOf in TypeSpec (typespec)\nDESCRIPTION: This TypeSpec snippet demonstrates how to define a model representing stream protocol data. It first defines a Message model, then applies the @streamOf decorator to the Response model to specify that Response stream data follows the Message structure. The @body decorator indicates a property containing the stream payload. Requires the @typespec/streams library and familiarity with TypeSpec decorators. The streamOf decorator targets models, taking one parameter—the stream's underlying type. The input is a model definition, and the annotated model acts as a stream interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/streams/README.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Message {\n  id: string;\n  text: string;\n}\n\n@streamOf(Message)\nmodel Response {\n  @body body: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a GET Endpoint with a Scalar Body in TypeSpec\nDESCRIPTION: Defines a `GET` operation at the `/widgets` route using TypeSpec. This `read` operation is marked with `@test` and uniquely accepts a single `int32` value (`count`) directly in the request body, specified using the `@body` decorator.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-request.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service(#{ title: \"Widget Service\" })\nnamespace DemoService;\n\n@route(\"/widgets\")\n@tag(\"Widgets\")\ninterface Widgets {\n  @test @get read(@body count: int32): void;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Transforming JSON to Application File Model - TypeScript\nDESCRIPTION: Provides a TypeScript function to map a loosely-typed JSON object to a strongly-typed FileSpecificContentType model for use within the application. It checks for null or undefined input, then creates and returns a new object containing filename, contentType, and contents properties. Requires TypeScript; key parameters are the input object and output is a typed FileSpecificContentType model. Limitation: expects compatible fields in input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/file.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonFileSpecificContentTypeToApplicationTransform(\n  input_?: any,\n): FileSpecificContentType {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    filename: input_.filename,\n    contentType: input_.contentType,\n    contents: input_.contents,\n  }!;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Example Values in TypeSpec Models (tsp)\nDESCRIPTION: This snippet shows how a complex, nested object literal, similar to JSON or JavaScript objects, can be used within the `@example` decorator in TypeSpec. This syntax serves as the input for a new quick fix feature designed to convert it into native TypeSpec value syntax.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-02-11.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@example({\n  a: 1,\n  b: 2,\n  c: {\n    d: 3,\n    e: 4,\n    f: [5, 6, 7]\n  }\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Constraining Template Parameters in TypeSpec Alias Definitions\nDESCRIPTION: Illustrates restriction of template parameters with 'extends' to enforce type safety. 'alias Foo<Type extends string> = Type;' restricts 'Type' to values assignable to string. Required dependencies: none. Input: a type; Output: the alias if constraint is satisfied, otherwise a compile-time error.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/templates.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nalias Foo<Type extends string> = Type;\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for PUT /type/model/inheritance/nested-discriminator/recursivemodel\nDESCRIPTION: This JSON is the expected input body for a PUT request to `/type/model/inheritance/nested-discriminator/recursivemodel`. It involves sending a complex polymorphic model structure with nested collections and dictionaries containing other polymorphic models, utilizing nested discriminators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_171\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"age\": 1,\n  \"kind\": \"salmon\",\n  \"partner\": {\n    \"age\": 2,\n    \"kind\": \"shark\",\n    \"sharktype\": \"saw\"\n  },\n  \"friends\": [\n    {\n      \"age\": 2,\n      \"kind\": \"salmon\",\n      \"partner\": {\n        \"age\": 3,\n        \"kind\": \"salmon\"\n      },\n      \"hate\": {\n        \"key1\": {\n          \"age\": 4,\n          \"kind\": \"salmon\"\n        },\n        \"key2\": {\n          \"age\": 2,\n          \"kind\": \"shark\",\n          \"sharktype\": \"goblin\"\n        }\n      }\n    },\n    {\n      \"age\": 3,\n      \"kind\": \"shark\",\n      \"sharktype\": \"goblin\"\n    }\n  ],\n  \"hate\": {\n    \"key3\": {\n      \"age\": 3,\n      \"kind\": \"shark\",\n      \"sharktype\": \"saw\"\n    },\n    \"key4\": {\n      \"age\": 2,\n      \"kind\": \"salmon\",\n      \"friends\": [\n        {\n          \"age\": 1,\n          \"kind\": \"salmon\"\n        },\n        {\n          \"age\": 4,\n          \"kind\": \"shark\",\n          \"sharktype\": \"goblin\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Multipart Form-Data with Binary Array Parts - HTTP\nDESCRIPTION: Shows how to send multiple binary files under the same field name in a multipart/form-data request. Each 'pictures' part contains application/octet-stream content, with a filename per RFC7578. Client must ensure unique filenames per field to remain parseable. The array structure for 'pictures' demonstrates how repeating fields are represented. Intended for endpoints expecting arrays of uploaded files.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_53\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /upload HTTP/1.1\\nContent-Length: 428\\nContent-Type: multipart/form-data; boundary=abcde12345\\n\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"id\\\"\\nContent-Type: text/plain\\n\\n123\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"pictures\\\"; filename=\\\"<any-or-no-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .png file…}\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"pictures\\\"; filename=\\\"<any-or-no-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .png file…}\\n--abcde12345--\n```\n\n----------------------------------------\n\nTITLE: Applying Custom OpenAPI Extensions with @extension in TypeSpec\nDESCRIPTION: This example shows the `@extension` decorator applied twice to the `read` operation. The first adds a simple string extension `x-custom`, and the second adds a complex object extension `x-pageable` containing pagination information.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/README.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@extension(\"x-custom\", \"My value\")\n@extension(\"x-pageable\", #{ nextLink: \"x-next-link\" })\nop read(): string;\n```\n\n----------------------------------------\n\nTITLE: Using Const Declarations with Optional Type Annotations - TypeSpec Language\nDESCRIPTION: Illustrates the use of the 'const' keyword to declare constants in TypeSpec, both with and without explicit type annotations. The first line shows implicit typing, while the second line shows explicit typing to string. Both forms are valid; the usage depends on whether type specificity is needed. No dependencies required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\nconst name = \"Bob\";\nconst name: string = \"Bob\";\n```\n\n----------------------------------------\n\nTITLE: Declaring a Decorator without valueof Constraint (Deprecated) - TypeSpec\nDESCRIPTION: This deprecated declaration demonstrates a decorator extern declaration where the parameter 'name' is constrained to string (instead of valueof string). Usage of this pattern is disallowed in newer TypeSpec versions and should be updated. Highlights transition in decorator type constraints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-06-06.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nextern dec myDecorator(target: Type, name: string);\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Request Body for spreadParameterWithInnerAlias\nDESCRIPTION: Specifies the expected JSON request body for the `POST /parameters/spread/alias/inner-alias-parameter` endpoint test case. The body contains 'name' and 'age' properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"foo\",\n  \"age\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Maximum Object Properties for JSON Schema in TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.maxProperties` decorator sets the maximum number of properties allowed for an object type (`Record<unknown>`) or a model property representing an object in the generated JSON Schema. It requires an integer `value` parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.maxProperties(value: valueof int32)\n```\n\n----------------------------------------\n\nTITLE: Defining @maxContains Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@maxContains` decorator from the `TypeSpec.JsonSchema` namespace. Used with `@contains`, it sets the maximum number of items matching the `@contains` type allowed in the array. It applies to array types (`unknown[]`) or `ModelProperty` representing an array. The `value` parameter takes an integer (`int32`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.maxContains(value: valueof int32)\n```\n\n----------------------------------------\n\nTITLE: Forcing OneOf Schemas Using the @oneOf Decorator - TypeSpec\nDESCRIPTION: Utilizes @oneOf to instruct the OpenAPI emitter to generate a oneOf schema for the Pet union instead of anyOf, enforcing mutual exclusion. Requires importing the '@typespec/openapi3' library and OpenAPI namespace. Input: Decorated TypeSpec union. Output: OpenAPI schema with oneOf array. Constraints: member schemas should be non-overlapping types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_31\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"@typespec/openapi3\";\nusing OpenAPI;\n\n@oneOf\nunion Pet {\n  cat: Cat,\n  dog: Dog,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Namespaces and Models in TypeSpec - TypeSpec - tsp\nDESCRIPTION: Demonstrates how namespaces and models should be declared in TypeSpec after a breaking change that affects how subnamespaces behave when their name matches the parent blockless namespace. Models are created within separate namespaces and the updated behavior prevents unintended namespace merging. No external dependencies are required. Inputs are namespace and model declarations; outputs are organized model-to-namespace mappings within the TypeSpec compilation context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-08-06.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace MyOrg.MyProject;\n\nnamespace MyOrg.MyProject.MyArea {\n  model A {}\n}\n\nnamespace MyArea2 {\n  model B {}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extending YAML Config With Custom Emitter Options - YAML\nDESCRIPTION: Shows how to extend the TypeSpec YAML configuration by specifying custom options for the @typespec/http-client-java emitter. The 'options' property enables emitter-specific keys and values, allowing customization such as license information or developer flags. Requires an existing emitter config and knowledge of supported option keys. Input is a YAML configuration file; output is tailored emitter behavior at compile-time.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-java/reference/emitter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-java\"\noptions:\n  \"@typespec/http-client-java\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Example: Applying @reserve Decorator to Reserve Fields in TypeSpec\nDESCRIPTION: Demonstrates applying the `@reserve` decorator to a TypeSpec model (`Example`) to reserve the field index range 8 through 15 (inclusive), the specific field index 100, and the field name \"test\". Any attempt to define a field with index 100, an index between 8 and 15, or the name \"test\" within this model will result in an emitter error.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/decorators.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n// Reserve the fields 8-15 inclusive, 100, and the field name \"test\" within a model.\n@reserve([8, 15], 100, \"test\")\nmodel Example {\n  // ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Enumerating Model Keys Dynamically - TypeSpec REST - typespec\nDESCRIPTION: Defines a parameterized model TypeSpec.Rest.Resource.KeysOf<Resource> that dynamically provides the set of keys for a given resource type. Useful for generic operations, reflection, or tooling where model key introspection is needed. Accepts a resource type but does not define specific properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/data-types.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Rest.Resource.KeysOf<Resource>\n```\n\n----------------------------------------\n\nTITLE: Serializing Dog Model to Transport Format - TypeScript\nDESCRIPTION: Implements a function to serialize a Dog object to a plain format suitable for transport, such as JSON. Accepts a Dog or null/undefined as input and returns an object with id, name, and color properties. Expects the Dog type from models and outputs a POJO with all Dog properties. Handles null/undefined gracefully and requires the Dog interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_spread.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonDogToTransportTransform(input_?: Dog | null): any {\\n  if (!input_) {\\n    return input_ as any;\\n  }\\n  return {\\n    id: input_.id,\\n    name: input_.name,\\n    color: input_.color,\\n  }!;\\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Alias for Template Instantiation in TypeSpec\nDESCRIPTION: Demonstrates creating an alias from a generic interface (ReadWrite<string>) and exposing its operations as standalone operations (op myRead, op myWrite). This approach guarantees that only the explicitly assigned and fully instantiated interface members are visible in service outputs. Requires TypeSpec and an understanding of aliases and operations. Ensures service chains only include desired, concrete operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/interfaces.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nalias MyReadWrite = ReadWrite<string>;\n\nop myRead is MyReadWrite.read;\nop myWrite is MyReadWrite.write<int32>;\n```\n\n----------------------------------------\n\nTITLE: Creating SubClient Context without Auth Pipeline in TypeScript\nDESCRIPTION: This TypeScript function `createSubClientContext` sets up the client context for `SubClient`, which requires no authentication. It accepts only the `endpoint` and optional `SubClientOptions`. After resolving the endpoint URL, it calls `getClient` to create the context, passing only the options and omitting any credential or `authSchemes` configuration, reflecting the `NoAuth` specification.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/sub_client_override.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport function createSubClientContext(\n  endpoint: string,\n  options?: SubClientOptions,\n): SubClientContext {\n  const params: Record<string, any> = {\n    endpoint: endpoint,\n  };\n  const resolvedEndpoint = \"{endpoint}\".replace(/{([^}]+)}/g, (_, key) =>\n    key in params\n      ? String(params[key])\n      : (() => {\n          throw new Error(`Missing parameter: ${key}`);\n        })(),\n  );\n  return getClient(resolvedEndpoint, {\n    ...options,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Lifecycle Update Transformation Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@withLifecycleUpdate` decorator. When applied to a model, it creates a transformed version of the model containing only properties visible during the 'Update' lifecycle phase. Nested optional models are transformed for 'CreateOrUpdate'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_69\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@withLifecycleUpdate\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring the @typeChangedFrom Decorator Syntax in TypeSpec\nDESCRIPTION: This snippet shows the syntax for the `@typeChangedFrom` decorator, used for `ModelProperty` targets. It indicates when the type of a property changed, requiring the `version` (`EnumMember`) and the `oldType`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Versioning.typeChangedFrom(version: EnumMember, oldType: unknown)\n```\n\n----------------------------------------\n\nTITLE: Putting All Optional Collections of Bytes Properties - JSON\nDESCRIPTION: Demonstrates a PUT request body for submitting a collection of base64-encoded byte arrays in an optional property. Ensures bulk/batch binary data is correctly handled and serialized as part of update operations, enforcing array structure, element format, and field naming.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_271\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": [\"aGVsbG8sIHdvcmxkIQ==\", \"aGVsbG8sIHdvcmxkIQ==\"] }\n```\n\n----------------------------------------\n\nTITLE: Updating tsconfig.json for TypeSpec Module Resolution Fix\nDESCRIPTION: This diff snippet demonstrates the required change within a `tsconfig.json` file to resolve the module resolution error shown previously. It involves updating the `moduleResolution` option from `ESNext` (or similar) to `node16` or `nodenext` to correctly resolve TypeSpec module types after the November 2023 breaking change.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-11-07.md#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- \"moduleResolution\": \"ESNext\",\n+ \"moduleResolution\": \"node16\",\n```\n\n----------------------------------------\n\nTITLE: Contextual Interpretation of Union Variant References in TypeSpec\nDESCRIPTION: This snippet shows how references to union variants are interpreted based on context and type. `Color.red` (with literal type `\"red\"`) passes the string value `\"red\"` to `@setColorValue` (expecting `valueof string`) and the literal type `\"red\"` to `@setColorType` (expecting `string`). Referencing `Color.other` (with non-literal type `string`) in a value context (`@setColorValue`) is an error because a type cannot be passed where a value is expected.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\nextern dec setColorValue(target: unknown, color: valueof string);\nextern dec setColorType(target: unknown, color: string);\n\nunion Color {\n  red: \"red\",\n  green: \"green\",\n  blue: \"blue\",\n  other: string,\n}\n\n@setColorValue(Color.red) // passes the scalar value `string(\"red\")`\n@setColorValue(Color.other) // error, trying to pass a type as a value.\n@setColorType(Color.red) // passes the string literal type `\"red\"`\nmodel A {}\n```\n\n----------------------------------------\n\nTITLE: Declaring unsigned 32-bit Fixed Integer Scalar (fixed32) - TypeSpec - typespec\nDESCRIPTION: Defines a custom scalar type mapped to the Protobuf fixed32 encoding (unsigned, 4-byte fixed width). This improves encoding efficiency when values are often large. Used for data fields that must use fixed32 wire format. No dependencies. Input: unsigned 32-bit integer; Output: serialized fixed32.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nscalar TypeSpec.Protobuf.fixed32\n```\n\n----------------------------------------\n\nTITLE: Updating @header Decorator Argument Syntax - TypeSpec TSP (Diff)\nDESCRIPTION: Shows required migration steps for updating the @header decorator usage in operation parameters, moving from object property argument passing to the new value syntax aligned with TypeSpec's patterns. This example helps users fix deprecated usage and avoid warnings.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-04.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\nop example1(\n-  @header({ name: \"ETag\" }) etag: string\n+  @header(#{ name: \"ETag\" }) etag: string\n): void;\n\nop example2(\n-  @header({ format: \"csv\" }) list: string[]\n+  @header list: string[]\n): void;\n```\n\n----------------------------------------\n\nTITLE: Defining the Foo Operation Handler - TypeScript\nDESCRIPTION: Implements the async 'foo' function that constructs the HTTP path, sets up request options, and issues a GET request using the provided client context. It integrates hooks for response processing, checks for the 204 No Content status, and throws a REST error otherwise. This function depends on utilities like 'parse', 'createRestError', and the correct type signatures for 'ClientContext', 'FooOptions', and expected promise semantics.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/global_namespace.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function foo(client: ClientContext, options?: FooOptions): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating TypeScript Module Resolution Error in Bash\nDESCRIPTION: This Bash snippet shows the error message \"Cannot find module '@typespec/compiler/testing'. Did you mean to set the 'moduleResolution' option to 'nodenext'\" which may occur if the `moduleResolution` in `tsconfig.json` is not updated to `node16` or `nodenext`. This error arises because TypeSpec packages transitioned from the legacy `typesVersions` field to the standard `types` field in `package.json` for specifying types for subpath exports.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-11-07.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCannot find module '@typespec/compiler/testing'. Did you mean to set the 'moduleResolution' option to 'nodenext'\n```\n\n----------------------------------------\n\nTITLE: Applying @TypeSpec.OpenAPI.info for OpenAPI Additional Information - TypeSpec\nDESCRIPTION: Shows how to use the @TypeSpec.OpenAPI.info decorator to supply additional OpenAPI 'info' metadata at the namespace level. The single parameter is an object of type TypeSpec.OpenAPI.AdditionalInfo. By using this decorator, supplementary information can be embedded in the OpenAPI info section, while standard fields like title and version are set via @service.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/decorators.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.info(additionalInfo: valueof TypeSpec.OpenAPI.AdditionalInfo)\n```\n\n----------------------------------------\n\nTITLE: Testing Query Continuation Expansion with Primitive (Explode)\nDESCRIPTION: Defines a GET endpoint to test query continuation expansion (`{&param*}`) with explode: true for a primitive parameter `param`. Given `\"a\"` and a fixed parameter `fixed=true`, the expected query string is `?fixed=true&param=a`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_90\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/query-continuation/explode/primitive?fixed=true{&param*}\n```\n\n----------------------------------------\n\nTITLE: Providing Model With Wrong Fixed Enum Discriminator - JSON\nDESCRIPTION: Send a model object with an unrecognized discriminator value to test how fixed-enum-constrained polymorphic systems react to unknown types, exploring fallback or rejection scenarios.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_165\n\nLANGUAGE: json\nCODE:\n```\n{ \"length\": 8, \"kind\": \"wrongKind\" }\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Non-Discriminated Union 3 Response - JSON\nDESCRIPTION: For the endpoint GET /type/property/additionalProperties/spreadRecordNonDiscriminatedUnion3, this snippet shows a response where prop1 is an array of union members. The syntax uses single quotes, which may not be fully compliant with strict JSON, but illustrates the structure needed for unioned array properties alongside other object properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_227\n\nLANGUAGE: json\nCODE:\n```\n{'name': 'abc', 'prop1': [{'kind': 'kind1', 'start': '2021-01-01T00:00:00Z'}, {'kind': 'kind1', 'start': '2021-01-01T00:00:00Z'], 'prop2': {'kind': 'kind1', 'start': '2021-01-01T00:00:00Z', 'end': '2021-01-02T00:00:00Z'}}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI3 Schema for Nested Models - YAML\nDESCRIPTION: Provides OpenAPI3 YAML for models with nested object types. Uses $ref to cross-link definitions, ensuring schema compactness and consistency. Useful for describing object hierarchies in APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_26\n\nLANGUAGE: YAML\nCODE:\n```\nBook:\n  type: object\n  properties:\n    author:\n      $ref: \"#/components/schemas/Author\"\nAuthor:\n  type: object\n  properties:\n    name:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Date Header Parameter with Explicit RFC7231 Encoding - TypeSpec\nDESCRIPTION: Declares a Test service operation where a required utcDateTime header parameter is encoded explicitly as RFC7231. Using the @encode(DateTimeKnownEncoding.rfc7231) decorator, this snippet enforces serialization to comply with the RFC7231 standard in the generated client and server code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_date.md#_snippet_6\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service\\nnamespace Test;\\n\\n@route(\"/default\")\\nop get(\\n  @header\\n  @encode(DateTimeKnownEncoding.rfc7231)\\n  value: utcDateTime,\\n): NoContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec Project with HTTP Client CSharp Emitter via CLI - Bash\nDESCRIPTION: This Bash snippet demonstrates how to build a TypeSpec project by invoking the compiler with the --emit flag to target the @typespec/http-client-csharp emitter. Requires the TypeSpec CLI (`tsp`) and the specified emitter package installed in the project. The command expects the current directory to contain the TypeSpec sources and will produce output as configured for the emitter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-csharp/reference/emitter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/http-client-csharp\n\n```\n\n----------------------------------------\n\nTITLE: Defining @minContains Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@minContains` decorator from the `TypeSpec.JsonSchema` namespace. Used with `@contains`, it sets the minimum number of items matching the `@contains` type required in the array. It applies to array types (`unknown[]`) or `ModelProperty` representing an array. The `value` parameter takes an integer (`int32`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.minContains(value: valueof int32)\n```\n\n----------------------------------------\n\nTITLE: Defining Textual File Types in TypeSpec\nDESCRIPTION: Explains how to define custom file types that are guaranteed to contain textual data in TypeSpec. Shows examples using `alias` with `Contents = string`, extending `File` with `string` as the `Contents` template argument, or extending `File` and overriding `contentType` while specifying `Contents = string`. Notes that UTF-8 encoding is generally assumed if not specified.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n// Since `Contents` is `string`, this file type can only contain text data.\nalias TextFile = File<Contents = string>;\n\n// This file type can only contain text and is guaranteed to have `contentType: \"application/yaml\"`.\nmodel YamlFile extends File<\"application/yaml\", string> {}\n\n// This file is another way to declare YamlFile by overriding the type of `contentType`\nmodel YamlFile extends File<Contents = string> {\n  contentType: \"application/yaml\";\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Simple Operation on Parameterized Server\nDESCRIPTION: Defines a simple HEAD operation `myOp` within a parameterized server configuration, demonstrating basic routing in such a setup.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_107\n\nLANGUAGE: http\nCODE:\n```\nhead /server/path/single/myOp\n```\n\n----------------------------------------\n\nTITLE: Implementing a GET Request Client with Scalar Body in TypeScript\nDESCRIPTION: Generated TypeScript client function `read` for a `GET` request to `/widgets` that includes a scalar body. It takes the client context and the `count` (number) as arguments, sets the `count` directly as the request `body`, sends the GET request using `client.pathUnchecked(path).get()`, and handles the response, specifically checking for a 204 status.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-request.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/api/widgetsClient/widgetsClientOperations.ts function read\nexport async function read(\n  client: WidgetsClientContext,\n  count: number,\n  options?: ReadOptions,\n): Promise<void> {\n  const path = parse(\"/widgets\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n    body: count,\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Spread Alias as Request Body Parameter - TypeScript\nDESCRIPTION: Documents an operation signature using a spread alias, e.g. \\\"spreadAsRequestBody(name: string)\\\". Ensures the absence of extraneous models (such as BodyParameter) and verifies that only essential properties are surfaced at the operation boundary. The associated payload is a JSON object { \\\"name\\\": \\\"foo\\\" }.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nspreadAsRequestBody(name: string)\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"name\\\": \\\"foo\\\" }\n```\n\n----------------------------------------\n\nTITLE: Importing a TypeSpec File using TypeSpec\nDESCRIPTION: Shows how to include another TypeSpec file into the current program using the import statement. Requires that the target file (e.g., ./models/foo.tsp) exists relative to the importing file. Import statements must use relative or absolute paths with a .tsp or .js extension. The imported file's declarations become available in the current compilation context. Inputs: target file path; Output: contents of the imported file integrated into the program.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/imports.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"./models/foo.tsp\";\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for GET /type/model/inheritance/single-discriminator/model\nDESCRIPTION: This JSON shows the expected response body for a GET request to `/type/model/inheritance/single-discriminator/model`. It represents receiving a polymorphic model instance ('sparrow') with single-level inheritance using one discriminator ('kind').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_178\n\nLANGUAGE: json\nCODE:\n```\n{ \"wingspan\": 1, \"kind\": \"sparrow\" }\n```\n\n----------------------------------------\n\nTITLE: Unwrapping XML Node Serialization with @unwrapped Decorator (TypeSpec)\nDESCRIPTION: This snippet shows how to apply the @TypeSpec.Xml.unwrapped decorator to a model property, preventing the creation of a wrapper node in the XML output. It is used for flattening list or string properties so their values appear directly within the parent element, rather than in a nested node. Inputs are model property declarations, outputs are flattened XML serializations. @attribute cannot be used together with @unwrapped.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Xml.unwrapped\n```\n\n----------------------------------------\n\nTITLE: Defining a Delete Transformation Model in TypeSpec (Typespec)\nDESCRIPTION: Creates a Delete transformation model that filters an input model T, retaining only properties annotated with Lifecycle.Delete visibility for delete operations. Supports optional renaming via NameTemplate and is recursive for nested models. Useful for scenarios like HTTP DELETE handling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Delete<T, NameTemplate>\n\n```\n\n----------------------------------------\n\nTITLE: Suppressing Deprecation Warning with #suppress in TypeSpec\nDESCRIPTION: This TypeSpec snippet demonstrates how to use the '#suppress' directive to prevent a specific warning from being reported by the compiler. In this case, it suppresses the warning generated by using the deprecated `LegacyUser` type for the `author` property, providing a justification.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/directives.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Post {\n  #suppress \"Use newAuthor property instead\"\n  author: LegacyUser; // no need to also suppress the deprecated diagnostic about usage of LegacyUser\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Optional Date Header Parameter (default encoding) - TypeScript\nDESCRIPTION: Defines a client function that sends an optional Date header, serializing it with dateRfc7231Serializer only if present in the options. The function checks for options.value and constructs the headers accordingly. Relies on parse, dateRfc7231Serializer, createRestError; accepts a TestClientContext and DefaultEncodingOptions. Returns void on 204, and supports onResponse hooks.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_date.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function defaultEncoding(\\n  client: TestClientContext,\\n  options?: DefaultEncodingOptions,\\n): Promise<void> {\\n  const path = parse(\"/default\").expand({});\\n  const httpRequestOptions = {\\n    headers: {\\n      ...(options?.value && { value: dateRfc7231Serializer(options.value) }),\\n    },\\n  };\\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for Stable vs. Nightly TypeSpec Dependencies\nDESCRIPTION: Illustrates how to modify the `dependencies` section of a `package.json` file to switch between stable and nightly (development) versions of TypeSpec packages. The example contrasts using tilde ranges (`~`) for stable versions with using specific development versions (e.g., `~0.31.0-dev.5`) or the `@next` tag for nightly builds. Using nightly versions often requires running `npm update --force` due to potential version incompatibilities.\nSOURCE: https://github.com/microsoft/typespec/blob/main/README.md#_snippet_7\n\nLANGUAGE: json5\nCODE:\n```\n// Stable setup\n\"dependencies\": {\n  \"@typespec/compiler\": \"~0.30.0\",\n  \"@typespec/http\": \"~0.14.0\",\n  \"@typespec/rest\": \"~0.14.0\",\n  \"@typespec/openapi\": \"~0.9.0\",\n}\n\n// Consume next version\n// In this example: compiler and openapi have changes but rest library has none\n\"dependencies\": {\n  \"@typespec/compiler\": \"~0.31.0-dev.5\",\n  \"@typespec/http\": \"~0.14.0\",\n  \"@typespec/rest\": \"~0.14.0\", // No changes to @typespec/rest library so need to stay the latest.\n  \"@typespec/openapi\": \"~0.10.0-dev.2\",\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetOptions Interface for TypeSpec Operation in TypeScript\nDESCRIPTION: Defines the GetOptions TypeScript interface used for configuring the 'get' operation. It extends OperationOptions and adds an optional 'contentType' field restricted to 'application/json'. Requires existence/import of OperationOptions base interface. No inputs other than the optional contentType are allowed, enforcing the fixed content type contract imposed by the TypeSpec spec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/constant_as_optional.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GetOptions extends OperationOptions {\n  contentType?: \"application/json\";\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New TypeSpec Project with CLI (bash)\nDESCRIPTION: Creates a new TypeSpec project from the terminal using the 'tsp' CLI tool. The command 'tsp init' interactively prompts for project settings such as template choice, project name, and required libraries (e.g., @typespec/http and @typespec/openapi3). Requires the TypeSpec CLI to be installed globally.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/introduction/installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntsp init\n\n```\n\n----------------------------------------\n\nTITLE: Resolving Encoded Names Programmatically in TypeScript\nDESCRIPTION: Shows how to programmatically retrieve the encoded name for a TypeSpec property using the `resolveEncodedName` function from the `@typespec/compiler` package in TypeScript. This function accepts a TypeSpec type (e.g., a property) and a mime type string (basic like `application/json` or full like `application/merge-patch+json`) and returns the specified encoded name, or the default property name if no encoding is defined for that mime type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/encoded-names.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { resolveEncodedName } from \"@typespec/compiler\";\n\n// Resolve the encoded name for the given property and mime type. If the property doesn't have a encoded name for the given mime type it will return the property name.\nconst encodedName = resolveEncodedName(property, \"application/json\");\n\n// You can also pass a full http mime type and `resolveEncodedName` will automatically resolve it to the base mime type.\nconst encodedName = resolveEncodedName(property, \"application/merge-patch+json\");\n```\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/http-client-java as a Peer Dependency (Bash)\nDESCRIPTION: This command uses npm to install the `@typespec/http-client-java` package as a peer dependency, typically used when developing a library that builds upon or requires this package. The `--save-peer` flag ensures it's added to the `peerDependencies` in `package.json`, indicating that the consuming project must provide this dependency. Assumes npm and Node.js are installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-java/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/http-client-java\n```\n\n----------------------------------------\n\nTITLE: Enforcing uniqueItems Constraint with TypeSpec JSON Schema Decorator\nDESCRIPTION: Using the `@TypeSpec.JsonSchema.uniqueItems` decorator on an array type (`unknown[]` or `ModelProperty`) mandates that all elements within that array must be unique. This translates directly to the `uniqueItems` keyword in the generated JSON Schema. The decorator targets array types or properties of array types and requires no parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_20\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.JsonSchema.uniqueItems\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Decimal128 Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Provides a `decimal128` scalar representing a 128-bit decimal, useful for high-precision numerical arithmetic in models. Used in domains where fixed-size decimal precision is required, e.g., financial APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_33\n\nLANGUAGE: typespec\nCODE:\n```\nscalar decimal128\n```\n\n----------------------------------------\n\nTITLE: Patching Non-Null Nullable String Properties - JSON\nDESCRIPTION: Illustrates a PATCH request containing a non-null string value for a nullable property. Useful for tests that differentiate between explicit null and valid value, requiring correct API shape and value handling. Assumes server validates string content.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_259\n\nLANGUAGE: json\nCODE:\n```\n{ \"requiredProperty\": \"foo\", \"nullableProperty\": hello}\n```\n\n----------------------------------------\n\nTITLE: Using 'valueof' for Decorator Value Parameters in TypeSpec\nDESCRIPTION: Demonstrates declaring a decorator parameter that expects a runtime value rather than a type, using the `valueof` keyword. The `tag` decorator expects a string value (`valueof string`). The examples show valid usage with a string literal and a constant, and invalid usage attempting to pass the `string` type itself.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\nextern dec tag(target: unknown, value: valueof string);\n\n// error: string is not a value\n@tag(string)\n\n// ok, a string literal can be a value\n@tag(\"widgets\")\n\n// ok, passing a value from a const\nconst tagName: string = \"widgets\";\n@tag(tagName)\n```\n\n----------------------------------------\n\nTITLE: Getting Non-Null Nullable Duration Property - JSON\nDESCRIPTION: This JSON response illustrates how a non-null ISO8601 duration value is returned for a property defined as nullable. The 'nullableProperty' is provided as a duration string (here, without quotes to match the source), and 'requiredProperty' is present. Input expects the client to handle and parse the duration format (e.g., 'P123DT22H14M12.011S'). This pattern is suitable for models where properties may or may not be present, and nullability needs to be tested. The content-type is application/json.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_253\n\nLANGUAGE: json\nCODE:\n```\n{ \"requiredProperty\": \"foo\", \"nullableProperty\": P123DT22H14M12.011S}\n```\n\n----------------------------------------\n\nTITLE: Using `@bodyRoot` for Body Source Resolution in TypeSpec (tsp)\nDESCRIPTION: Shows the usage of the `@bodyRoot` decorator in TypeSpec as introduced in version 0.56.0. Unlike `@body`, `@bodyRoot` specifies which property within a model (`_` in this case) should be treated as the source for the response body, allowing other properties (like `foo` decorated with `@header`) to be correctly interpreted as metadata.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_15\n\nLANGUAGE: tsp\nCODE:\n```\nop a1(): {@bodyRoot _: {@header foo: string, other: string} };\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Is Unknown Discriminated Record - JSON\nDESCRIPTION: Displays a discriminated object with various extension fields for use when APIs return polymorphic types distinguished by 'kind' and associated properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_209\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"kind\\\": \\\"derived\\\",\\n  \\\"name\\\": \\\"Derived\\\",\\n  \\\"index\\\": 314,\\n  \\\"age\\\": 2.71875,\\n  \\\"prop1\\\": 32,\\n  \\\"prop2\\\": true,\\n  \\\"prop3\\\": \\\"abc\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QueryOptions Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.QueryOptions` model, intended to hold configuration options for query parameters in HTTP requests. The specific properties and their functionalities are not detailed in the provided context, but it serves as a structure for applying query-related settings.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_36\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.Http.QueryOptions\n```\n```\n\n----------------------------------------\n\nTITLE: Extracting Path Segment from Resource ID with Templates in Java\nDESCRIPTION: This Java code snippet processes a resource identifier (id) and a path template to extract a parameter value specified by parameterName within curly braces. The implementation uses string splitting, list reversal, and iterator traversal to match segments in reversed order, ensuring robust parsing even with nested or empty segments. Dependencies include Java Collections (Arrays.asList, Collections.reverse), and a utility method CoreUtils.isNullOrEmpty for null/empty checks; key parameters are id (the resource string), pathTemplate (the template with placeholders), and parameterName (the name of the parameter to extract). The expected output is the matched segment from id if it conforms to the template, or null otherwise; special handling is present for the root segment and leading empty path elements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-mgmt/src/main/resources/ResourceManagerUtils_getValueFromIdByParameterName.txt#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nif (id == null || pathTemplate == null) {\n    return null;\n}\nString parameterNameParentheses = \"{\" + parameterName +  \"}\";\nList<String> idSegmentsReverted = Arrays.asList(id.split(\"/\"));\nList<String> pathSegments = Arrays.asList(pathTemplate.split(\"/\"));\nCollections.reverse(idSegmentsReverted);\nIterator<String> idItrReverted = idSegmentsReverted.iterator();\nint pathIndex = pathSegments.size();\nwhile (idItrReverted.hasNext() && pathIndex > 0) {\n    String idSegment = idItrReverted.next();\n    String pathSegment = pathSegments.get(--pathIndex);\n    if (!CoreUtils.isNullOrEmpty(idSegment) && !CoreUtils.isNullOrEmpty(pathSegment)) {\n        if (pathSegment.equalsIgnoreCase(parameterNameParentheses)) {\n            if (pathIndex == 0 || (pathIndex == 1 && pathSegments.get(0).isEmpty())) {\n                List<String> segments = new ArrayList<>();\n                segments.add(idSegment);\n                idItrReverted.forEachRemaining(segments::add);\n                Collections.reverse(segments);\n                if (!segments.isEmpty() && segments.get(0).isEmpty()) {\n                    segments.remove(0);\n                }\n                return String.join(\"/\", segments);\n            } else {\n                return idSegment;\n            }\n        }\n    }\n}\nreturn null;\n```\n\n----------------------------------------\n\nTITLE: Defining the Typed REST Client Class in TypeScript\nDESCRIPTION: Implements a TypeScript client class for the Test service, encapsulating the context setup and exposing a 'create' method that forwards arguments to the generated operation. Requires a TestClientContext and related factory and operation functions. Accepts endpoint and options on construction; the create method forwards required/optional fields to the underlying operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/spread_body.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  async create(id: string, name: string, options?: CreateOptions) {\n    return create(this.#context, id, name, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Model With Fixed Enum Discriminator Missing Discriminator - JSON\nDESCRIPTION: Omit the required 'kind' field in a model where a fixed enum discriminator is expected. Useful for verifying error or fallback logic when discriminator is not supplied.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_164\n\nLANGUAGE: json\nCODE:\n```\n{ \"length\": 10 }\n```\n\n----------------------------------------\n\nTITLE: Defining @contains Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@contains` decorator from the `TypeSpec.JsonSchema` namespace. Applied to an array type (`unknown[]`) or a `ModelProperty` representing an array, it requires the array to contain at least one instance of the type provided in the `value` parameter. Use `@minContains` and `@maxContains` for further constraints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.contains(value: unknown)\n```\n\n----------------------------------------\n\nTITLE: Expected XML Response Body for ModelWithUnwrappedArray GET Endpoint\nDESCRIPTION: Defines the expected XML response body for a GET request to the `/payload/xml/modelWithUnwrappedArray` endpoint. This structure demonstrates an unwrapped array (`colors`), where array elements are direct children of the parent, alongside a standard wrapped array (`counts`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_77\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithUnwrappedArray>\n  <colors>red</colors>\n  <colors>green</colors>\n  <colors>blue</colors>\n  <counts>\n    <int32>1</int32>\n    <int32>2</int32>\n  </counts>\n</ModelWithUnwrappedArray>\n```\n\n----------------------------------------\n\nTITLE: Refactoring Operation Return Types in TypeSpec (After) - typespec\nDESCRIPTION: Demonstrates the updated TypeSpec syntax for operation return types after the 'Page' model has been renamed to 'CollectionWithNextLink'. Requires the updated @typespec/rest library. The operation now returns 'CollectionWithNextLink<T>', where T is the item type. Input is an operation using the new model name; output is the adapted operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-09-07.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nop test(): CollectionWithNextLink<MyResource>;\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Type_Array_NullableModelValue_get Endpoint\nDESCRIPTION: This JSON snippet represents the expected response body for the GET request to the `/type/array/nullable-model` endpoint. It should return a JSON array containing model objects (each with a 'property' field) and null values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_144\n\nLANGUAGE: json\nCODE:\n```\n```json\n[{ \"property\": \"hello\" }, null, { \"property\": \"world\" }]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring C# Client Emitter in tspconfig.yaml\nDESCRIPTION: This YAML configuration snippet specifies settings for the C# client emitter (`@typespec/http-client-csharp`) within the `tspconfig.yaml` file. It defines the emitter to be used (`emit`) and sets the output directory (`emitter-output-dir`) for the generated C# client code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-csharp\"\noptions:\n  \"@typespec/http-client-csharp\":\n    emitter-output-dir: \"{project-root}/clients/dotnet\"\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Browsers for UI Testing - Bash\nDESCRIPTION: Downloads and installs browser binaries required by Playwright for automated UI testing. This optional command requires npx to be available, which is bundled with Node.js. It prepares the environment for running tests that need browser automation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Enforcing Exclusive Minimum Value with @minValueExclusive in TypeSpec\nDESCRIPTION: Shows @minValueExclusive to require numeric values to be greater than (but not equal to) a specified value. Used for open intervals or exclusive constraints.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_34\n\nLANGUAGE: typespec\nCODE:\n```\n@minValueExclusive(value: valueof numeric)\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Spread Record Model - JSON\nDESCRIPTION: Shows a JSON object where both known and open properties are complex sub-objects, demonstrating model extension and additional property merging typically found in TypeSpec or OpenAPI-based API design.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_197\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"knownProp\\\": { \\\"state\\\": \\\"ok\\\" }, \\\"prop\\\": { \\\"state\\\": \\\"ok\\\" } }\n```\n\n----------------------------------------\n\nTITLE: Getting an Extension Resource - Unified Operations - TypeSpec - typespec\nDESCRIPTION: Represents the get operation in ExtensionResourceOperations for fetching a resource instance. Returns an Extension model or Error, facilitating instance retrieval with error responses in a unified interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_16\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceOperations.get(): Extension | Error\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Spread Different Model Record - JSON\nDESCRIPTION: Presents a hybrid JSON object with a string as 'knownProp' and a model object as 'prop,' exemplifying records that spread both primitive and complex fields in a single composition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_212\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"knownProp\\\": \\\"abc\\\", \\\"prop\\\": { \\\"state\\\": \\\"ok\\\" } }\n```\n\n----------------------------------------\n\nTITLE: Defining Successful Response Block in Swagger via gRPC Definition - JSON\nDESCRIPTION: This JSON snippet displays how the Swagger generator for gRPC defines a successful (HTTP 200) response for an RPC operation. Unlike the TypeSpec example, it includes a schema with empty properties, which sets the expectation for an object payload in the response body. This distinction can affect client code generation and API documentation. It depends on protoc-gen-openapiv2 or a similar Swagger generator for gRPC proto definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/grpc-library-example/README.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n\\\"responses\\\": {\\n    \\\"200\\\": {\\n        \\\"description\\\": \\\"A successful response.\\\",\\n        \\\"schema\\\": {\\n            \\\"properties\\\": {}\\n        }\\n    },\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Azure Java Data Plane Generator Settings in YAML\nDESCRIPTION: This YAML configuration block specifies settings for the `@azure-tools/typespec-java` generator when targeting Azure data plane services. It disables ARM-specific features (`azure-arm: false`), enables generating concrete client implementations (`generate-client-as-impl: true`), sync/async clients, builders, constructor arguments for required fields, KeyCredential usage, pagination support, and sets the subpackage for implementation models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-core/src/main/resources/data-plane.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nazure-arm: false\n\nlicense-header: MICROSOFT_MIT_SMALL\n\ngenerate-client-interfaces: false\ngenerate-client-as-impl: true\ngenerate-sync-async-clients: true\ngenerate-builder-per-client: true\nsync-methods: all\nenable-sync-stack: true\nrequired-fields-as-ctor-args: true\nenable-page-size: true\nuse-key-credential: true\n\nuse-default-http-status-code-to-exception-type-mapping: true\npolling: {}\n\nmodels-subpackage: implementation.models\nclient-logger: true\n```\n\n----------------------------------------\n\nTITLE: Generating Transport Serializer for Foo (Complex Record)\nDESCRIPTION: Generated TypeScript function `jsonFooToTransportTransform` for the `Foo` model with a complex record. It serializes a `Foo` object to the transport format, transforming `myValues` to `my_values` by calling the `jsonRecordBarToTransportTransform` helper function, which handles serialization of the nested `Bar` objects within the record.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/record.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonFooToTransportTransform\nexport function jsonFooToTransportTransform(input_?: Foo | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    my_values: jsonRecordBarToTransportTransform(input_.myValues),\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated @knownValues with Union Type in TypeSpec (Diff)\nDESCRIPTION: Shows how to replace the deprecated `@knownValues` decorator and its associated enum with a TypeSpec union type that includes string literals and a base string type, achieving the same result without the decorator.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_48\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n-enum FooKV { a, b, c}\n-@knownValues(FooKV)\n-scalar foo extends string;\n+union Foo { \"a\", \"b\", \"c\", string }\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Output File for openapi3 Emitter in TypeSpec\nDESCRIPTION: Demonstrates configuring the `@typespec/openapi3` emitter in a TypeSpec configuration file to specify a custom output filename, in this case, `custom.json`. This overrides the default output file name (`openapi.yaml`) or the name implied by the `file-type` option.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-01-12.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\noptions:\n  @typespec/openapi3:\n     output-file: custom.json\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Collection of Strings (NonNull) Response - JSON\nDESCRIPTION: For GET /type/property/nullable/collections/string/non-null, this code shows a required property plus a non-null array of strings. This pattern is used often for tag lists, categories, or other string arrays in models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_245\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": [\\\"hello\\\", \\\"world\\\"] }\n```\n\n----------------------------------------\n\nTITLE: Obtaining the URL Segment of a Model - TypeSpec\nDESCRIPTION: Demonstrates use of the @segmentOf decorator to retrieve the URL segment associated with a target resource model, provided that model has both @segment and @key decorators. Intended for use on operations when needing to programmatically access segment information.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.segmentOf(type: Model)\n```\n\n----------------------------------------\n\nTITLE: Declaring Pick Properties Transformation Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@withPickedProperties` decorator. When applied to a model, it returns a transformed version of the model containing only the specified properties (given as a string literal or a union of string literals).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_74\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@withPickedProperties(pick: string | Union)\n```\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/json-schema via npm (Bash)\nDESCRIPTION: This command installs the @typespec/json-schema library using npm, making it available for use in a TypeSpec project. This is a prerequisite for using the library's features.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/json-schema\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Named Scalar Initializers in TypeSpec\nDESCRIPTION: This snippet illustrates how to declare a custom scalar (`ipv4`) with a named initializer (`fromInt`) and then use it to create a value. The `ipv4` scalar extends `string` and provides an initializer that takes a `uint32` value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/values.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nscalar ipv4 extends string {\n  init fromInt(value: uint32);\n}\n\nconst ip = ipv4.fromInt(2341230);\n```\n\n----------------------------------------\n\nTITLE: Declaring signed 64-bit Varint Scalar (sint64) - TypeSpec - typespec\nDESCRIPTION: Defines a scalar type with Protobuf sint64 encoding (signed, variable length). Optimized for negative values, this uses zigzag encoding and variable-length representation. No dependencies. Used to model signed 64-bit fields that require this wire format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\nscalar TypeSpec.Protobuf.sint64\n```\n\n----------------------------------------\n\nTITLE: Listing Extension Resource Collection Instances - TypeSpec - typespec\nDESCRIPTION: Declares the 'list' operation for ExtensionResourceCollectionOperations, which retrieves all extension resource instances. The function returns a CollectionWithNextLink<Resource> or Error, supporting paginated collections and error handling. Dependencies include the CollectionWithNextLink type and error modeling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nop TypeSpec.Rest.Resource.ExtensionResourceCollectionOperations.list(): TypeSpec.Rest.Resource.CollectionWithNextLink<Resource> | Error\n```\n\n----------------------------------------\n\nTITLE: Converting OpenAPI3 Component Parameter without Existing Schema (YAML/TSP)\nDESCRIPTION: Shows the conversion of an OpenAPI3 component parameter (`Foo.id`) where no corresponding schema exists under `#/components/schemas`. The converter creates a new TypeSpec model (`Foo`) containing the parameter (`id`) as a field, decorated with `@path` because the parameter is specified as `in: path`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/cli.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  parameters:\n    Foo.id:\n      name: id\n      in: path\n      required: true\n      schema:\n        type: string\n```\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Foo {\n  @path id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @removed and @added Decorators for Model Versioning - TypeSpec TSP\nDESCRIPTION: This snippet demonstrates how to use @removed and @added decorators on a model and its properties to indicate the model's lifecycle across different versions. The @removed decorator indicates when the overall model is no longer available, while the @added decorator shows when a property was introduced. Requires the definition of a Versions enum (e.g., Versions.v2, Versions.v3) and the TypeSpec versioning decorators. The inputs are model and property definitions, and the output is the versioned model for use in TypeSpec tooling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/CHANGELOG.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@removed(Versions.v3)\nmodel Widget {\n  @added(Versions.v2)\n   name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Client Class Exposing the Operation Method in TypeScript\nDESCRIPTION: This TypeScript code, from `src/testClient.ts`, defines the `TestClient` class. The constructor initializes the required `TestClientContext` using `createTestClientContext` with the service endpoint and options. It provides an async `get` method that accepts `id`, `name`, and `GetOptions`, and internally calls the generated standalone `get` operation function, passing the stored context and the provided arguments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/no_content_type.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  async get(id: string, name: string, options?: GetOptions) {\n    return get(this.#context, id, name, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Putting All Optional Datetime Properties - JSON\nDESCRIPTION: PUT request example for including a datetime property formatted as an ISO8601 string. Ensures the client/server can process and validate date/time fields when present.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_279\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": \"2022-08-26T18:38:00Z\" }\n```\n\n----------------------------------------\n\nTITLE: Putting All Optional Collections of Model Properties - JSON\nDESCRIPTION: A PUT request with an array of model objects as the optional property. This enforces correct handling, serialization, and update of lists of objects in data models, key for CRUD operations involving collections.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_275\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": [{ \"property\": \"hello\" }, { \"property\": \"world\" }] }\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Model Request - JSON\nDESCRIPTION: This JSON represents the request body required for PUT /type/property/additionalProperties/spreadRecordModel. Both 'knownProp' and the spread 'prop' are objects featuring a state, showcasing how the shape must preserve object nesting for proper operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_220\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"knownProp\\\": { \\\"state\\\": \\\"ok\\\" }, \\\"prop\\\": { \\\"state\\\": \\\"ok\\\" } }\n```\n\n----------------------------------------\n\nTITLE: Resolving Service and Dependency Versions in TypeScript\nDESCRIPTION: This TypeScript code shows how to use the `resolveVersions` function to determine the complete list of versions for a given service namespace and the corresponding required versions for any dependent namespaces. It requires the TypeSpec program object and the service namespace as input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/versioning/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst versions = resolveVersions(program, serviceNamespace);\n// versions now contain a list of all the version of the service namespace and what version should all the other dependencies namespace use.\n```\n\n----------------------------------------\n\nTITLE: Replacing @serviceTitle and @serviceVersion with @service Decorator - Typespec\nDESCRIPTION: Shows the transition from using '@serviceTitle' and '@serviceVersion' decorators to the consolidated '@service' decorator in TypeSpec. Provides before-and-after code for annotating a namespace with service metadata. Requires recent TypeSpec compiler supporting the new @service syntax. Parameters: service name and version. Outputs: namespace with new decorator usage.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-10-12.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n// Before\n@serviceTitle(\"Pet Store\")\n@serviceVersion(\"v1\")\nnamespace PetStore;\n\n// After\n@service(#{\"Pet Store\", version: \"v1\"})\nnamespace PetStore;\n```\n\n----------------------------------------\n\nTITLE: Scalar Initializers for Value Construction in TypeSpec - TypeSpec\nDESCRIPTION: Explains how to define an initializer for a scalar in TypeSpec, which enables construction of scalar values from other types or values. The 'ipv4' scalar extends 'string' and includes an initializer 'fromInt', allowing integers to be converted into ipv4 type values. The 'const homeIp' declaration shows actual usage of the initializer with a uint32 argument. These initializers are used at compile time and do not result in runtime code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/scalars.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nscalar ipv4 extends string {\n  init fromInt(value: uint32);\n}\n\nconst homeIp = ipv4.fromInt(2130706433);\n```\n\n----------------------------------------\n\nTITLE: Migrating Emitter Dependencies to @typespec/asset-emitter - TypeSpec package.json (json)\nDESCRIPTION: This snippet illustrates how to update the package.json dependencies to use the @typespec/asset-emitter package instead of the deprecated @typespec/compiler/emitter-framework. Ensures projects pull in the new asset emitter library for TypeSpec project compilation and emitting. Only one of the emitter frameworks should be present in dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-18.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@typespec/asset-emitter\": \"0.67.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for Type_Array_DurationValue_put Endpoint\nDESCRIPTION: This JSON snippet represents the expected request body for the PUT request to the `/type/array/duration` endpoint. The request body should be a JSON array containing a single duration string in ISO 8601 format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_129\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\"P123DT22H14M12.011S\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Server Variables with @server Decorator in TypeSpec\nDESCRIPTION: Illustrates a TypeSpec @server decorator using a non-string type for a server variable, which is not allowed. In OpenAPI, server variables are interpolated into a string-based URL, so all variables must be assignable to string. Update variable types accordingly to conform to OpenAPI server variable rules.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/diagnostics.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@server(\"{protocol}://{host}/api/{version}\", \"Custom endpoint\", {\\n  protocol: \"http\" | \"https\",\\n  host: string,\\n  version: 1, // Should be a string: \"1\"\\n})\\n\n```\n\n----------------------------------------\n\nTITLE: Declaring a TestFooWidget Interface in TypeScript\nDESCRIPTION: This TypeScript interface corresponds to the nested TypeSpec model 'TestFooWidget', reflecting the structure and types from the source model. It is intended for use wherever the generated model is referenced, typically following the namespace or module structure. No external dependencies are necessary. Fields are explicitly typed; compatibility is maintained with the original definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/basic.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TestFooWidget {\n  id: string;\n  weight: number;\n  color: \"red\" | \"blue\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a TypeSpec Emitter in tspconfig.yaml (YAML)\nDESCRIPTION: Shows the basic configuration within a `tspconfig.yaml` file to enable an emitter. The `emit` key takes a list of emitter package names. In this example, it specifies that the `@typespec/http-server-csharp` emitter should be run when the TypeSpec project is compiled.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/docs/emitter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nemit:\n  - \"@typespec/http-server-csharp\"\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring a Protobuf Service using @service Decorator in TypeSpec\nDESCRIPTION: Defines the `@TypeSpec.Protobuf.service` decorator used on a TypeSpec `Interface` to declare it as a Protobuf service. The interface's operations will be converted into RPC methods within a `service` definition in the generated Protobuf file. This decorator takes no parameters.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/decorators.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Protobuf.service\n```\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Scalar Constructors in TypeSpec\nDESCRIPTION: Example demonstrating the definition of a TypeSpec scalar (`utcDateTime`) with a custom constructor (`init fromISO(value: string)`), and its usage for initializing a model property (`minDate`) with a default value (`utcDateTime.fromISO(...)`). This syntax was introduced in PR #3022.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_42\n\nLANGUAGE: tsp\nCODE:\n```\nscalar utcDateTime {\n  init fromISO(value: string);\n}\n\nmodel DateRange {\n  minDate: utcDateTime = utcDateTime.fromISO(\"2024-02-15T18:36:03Z\");\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Returns Documentation Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@returnsDoc` decorator. This decorator attaches a documentation string specifically describing the successful return types of an operation, distinguishing them from error types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_54\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@returnsDoc(doc: valueof string)\n```\n```\n\n----------------------------------------\n\nTITLE: Escaping Identifiers with Backticks in TypeSpec\nDESCRIPTION: This TypeSpec snippet demonstrates how to use backticks (`) to escape identifiers that might otherwise conflict with reserved keywords or contain non-standard characters. In this example, an operation is named `op`, which is typically a reserved word, by enclosing it in backticks.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-03-13.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nop `op`(): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Example Usage of the @field Decorator in TypeSpec\nDESCRIPTION: This TypeSpec code defines a model `ExampleMessage` with a single string property `test`. The `@field(1)` decorator assigns the Protobuf field index 1 to this property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nmodel ExampleMessage {\n  @field(1)\n  test: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring unsigned 64-bit Fixed Integer Scalar (fixed64) - TypeSpec - typespec\nDESCRIPTION: Defines a scalar type for Protobuf fixed64 encoding (unsigned, 8-byte fixed width). Used when dealing with large uint64 values for better encoding efficiency with Protobuf. No dependencies. Field should hold unsigned 64-bit integer values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nscalar TypeSpec.Protobuf.fixed64\n```\n\n----------------------------------------\n\nTITLE: Putting Default (Missing) Optional Boolean Literal Properties - JSON\nDESCRIPTION: Shows a request body omitting optional boolean literal properties, demonstrating how clients can update resources without supplying optional fields. The empty JSON object is a valid payload in this contract.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_264\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Recommended Model Definition After @friendlyName Inheritance Change\nDESCRIPTION: Provides the suggested alternative approach after breaking change #3793. Instead of relying on implicit `@friendlyName` inheritance via `model is`, it explicitly defines a new model `Abcstring is Foo<string>` to achieve a specific type instantiation with a clear name.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_36\n\nLANGUAGE: tsp\nCODE:\n```\n// This can be changed to\nmodel Abcstring is Foo<string>;\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Bytes Property (NonNull) Response - JSON\nDESCRIPTION: For GET /type/property/nullable/bytes/non-null, this shows a required property plus a non-nullable base64-encoded string property, illustrating binary data encoding in a JSON property and how nullability is explicitly avoided in this usage.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_233\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": aGVsbG8sIHdvcmxkIQ==}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Non-Omission of Metadata Holder Properties in TypeSpec (tsp)\nDESCRIPTION: Example of a breaking change in TypeSpec 0.56.0. An operation `d1` returns a model where the `headers` property only contains a property decorated as `@header`. Previously, `headers` might have been omitted from the body, but now it remains as an empty object (`{headers: {}}`) in the response body unless explicitly ignored.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_16\n\nLANGUAGE: tsp\nCODE:\n```\nop d1(): {headers: {@header foo: string}}; // body will be {headers: {}}\n```\n\n----------------------------------------\n\nTITLE: Defining `@contentType` Decorator Syntax in TypeSpec\nDESCRIPTION: Shows the basic syntax for the `@TypeSpec.Events.contentType` decorator. It accepts a single parameter `contentType` of type `valueof string`. This decorator is applied to a `UnionVariant` or `ModelProperty` to specify the MIME content type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/events/reference/decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Events.contentType(contentType: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Initializing a TypeScript Client for TypeSpec Service Consumption\nDESCRIPTION: Defines a TypeScript class TestClient which encapsulates API calls for the given TypeSpec service, containing context initialization in the constructor and a 'get' method to invoke the API. Depends on a functioning TestClientContext, createTestClientContext factory, the get operation method, and an optional TestClientOptions for configuration. Accepts an endpoint and options at instantiation, passing them to the get method as needed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/constant_as_optional.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  async get(options?: GetOptions) {\n    return get(this.#context, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Putting All Optional Boolean Literal Properties - JSON\nDESCRIPTION: A sample JSON request body including an optional boolean property set to true, showing how clients should serialize and include such a property in update (PUT) operations. This is a standard pattern for putting full objects with all properties present.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_263\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": true }\n```\n\n----------------------------------------\n\nTITLE: Importing a Module and Defining a Generic Model in TypeSpec\nDESCRIPTION: This snippet imports functionalities from an external file ('lib.js'), declares the 'MyLib' namespace to organize code scope, and defines a generic model 'Foo' that takes a type parameter 'T'. The 'Foo' model contains a single property 't' of type 'T', enabling reusability for various data types. No additional dependencies besides 'lib.js' are required, and inputs to the model are determined by the chosen type argument when instantiating 'Foo'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/test/e2e/scenarios/invalid-lib/lib.txt#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nimport \"./lib.js\";\n\nnamespace MyLib;\n\nmodel Foo<T> {\n  t: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Enum Model for Transport - TypeScript\nDESCRIPTION: Defines the serializer function 'jsonEnumsOnlyCasesToTransportTransform' to convert an EnumsOnlyCases model to a raw transport shape for HTTP POST requests. If the input is null or undefined, it passes through as-is; otherwise, it returns a new object with 'lr' and 'ud' properties copied verbatim. This function is critical for proper model transformation and must align with the expected wire format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/union_body.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonEnumsOnlyCasesToTransportTransform(input_?: EnumsOnlyCases | null): any {\\n  if (!input_) {\\n    return input_ as any;\\n  }\\n  return {\\n    lr: input_.lr,\\n    ud: input_.ud,\\n  }!;\\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Date Header with RFC7231 Encoding - TypeScript\nDESCRIPTION: Implements a client call that sends a Date header serialized as RFC7231 via dateRfc7231Serializer, fulfilling requirements for explicit encoding. Receives TestClientContext, Date, and GetOptions. Handles optional response hooks and throws errors for any non-204 or non-empty body response.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/header_date.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function get(\\n  client: TestClientContext,\\n  value: Date,\\n  options?: GetOptions,\\n): Promise<void> {\\n  const path = parse(\"/default\").expand({});\\n  const httpRequestOptions = {\\n    headers: {\\n      value: dateRfc7231Serializer(value),\\n    },\\n  };\\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\\n\\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\\n    options?.operationOptions?.onResponse(response);\\n  }\\n  if (+response.status === 204 && !response.body) {\\n    return;\\n  }\\n  throw createRestError(response);\\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Request/Response Body for Versioning Return Type Changed Test (Text)\nDESCRIPTION: Specifies the expected plain text request body ('test') and response body ('test') for the endpoint 'post /versioning/return-type-changed-from/api-version:{version}/test', testing a change in return type using the latest signature.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_321\n\nLANGUAGE: text\nCODE:\n```\n// Expected request body\n\"test\"\n```\n\nLANGUAGE: text\nCODE:\n```\n// Expected response body\n\"test\"\n```\n\n----------------------------------------\n\nTITLE: Deserializing Transport Payload to Widget Model - TypeScript\nDESCRIPTION: Provides a TypeScript function that deserializes incoming payloads to the 'Widget' model. Known properties remain at the root, with all other fields bundled under 'additionalProperties' using 'jsonRecordUnknownToApplicationTransform'. Requires TypeScript and the Widget type/interface. Inputs: any payload (object or null/undefined). Outputs: Strongly typed 'Widget' object with explicit additional properties support.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/additional-properties/extends.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonWidgetToApplicationTransform(input_?: any): Widget {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    additionalProperties: jsonRecordUnknownToApplicationTransform(\n      (({ name, age, optional, ...rest }) => rest)(input_),\n    ),\n    name: input_.name,\n    age: input_.age,\n    optional: input_.optional,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Client Class for Get Operation - TypeScript - typescript\nDESCRIPTION: Defines the 'TestClient' class responsible for interacting with the API. Manages internal context creation and exposes a 'get' method which internally calls the standalone 'get' function. The constructor requires an API endpoint and optional client options. Ensures encapsulation and that reserved word handling is consistent across the user-facing API.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/reserved_names.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  async get(await_: string, options?: GetOptions) {\n    return get(this.#context, await_, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a TypeSpec Emitter Project using CLI - Bash\nDESCRIPTION: Sets up initial boilerplate structure for a new TypeSpec emitter using the tsp CLI and a provided template. No dependencies beyond the TypeSpec CLI are required. Expects the emitter template to be available and produces a new project scaffold in the current directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitters-basics.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp init --template emitter-ts\n\n```\n\n----------------------------------------\n\nTITLE: Migrating from @discriminator to @discriminated on Unions - TypeSpec TSP (Diff)\nDESCRIPTION: Provides a diff illustrating how to migrate from the deprecated @discriminator decorator to the new @discriminated decorator for discriminated unions in TypeSpec. The '+' and '-' lines represent changes to be made. This is a migration pattern, not standalone code; it's intended to guide refactoring in TypeSpec source files.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-04.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-@discriminator(\"type\")\n+@discriminated(#{envelope: \"none\", discriminatorPropertyName: \"type\"})\nunion Pet;\n```\n\n----------------------------------------\n\nTITLE: Hiding Properties in a Visibility Class using invisible Decorator in TypeSpec\nDESCRIPTION: Shows the application of @invisible on a model property to remove all visibility modifiers within a visibility class, hiding the property accordingly. Provides fine-grained control over property exposure in documentation or code output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Example {\n  @invisible(Lifecycle)\n  hidden_property: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitter Output with Interpolation in YAML\nDESCRIPTION: Illustrates how to configure emitter options in `tspconfig.yaml` using variable interpolation. It defines a common `output-dir` and then uses its value (`{output-dir}`) to construct the specific `emitter-output-dir` for the `@typespec/openapi3` emitter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noutput-dir: {cwd}/generated\noptions:\n  @typespec/openapi3:\n    emitter-output-dir: {output-dir}/openapi3\n```\n\n----------------------------------------\n\nTITLE: Declaring Array Values with TypeSpec - TypeSpec Language\nDESCRIPTION: Defines a constant as an array value using the new '#[]' literal syntax in TypeSpec. This snippet shows a concise way to assign an array of strings, leveraging the language update for array literal definitions. There are no dependencies, and this syntax is now preferred over standard JavaScript-like array assignment for TypeSpec constants.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\nconst users = #[\"Bob\", \"Frank\"];\n```\n\n----------------------------------------\n\nTITLE: Defining Action Separator in Auto-generated Routes - TypeSpec\nDESCRIPTION: Illustrates setting a separator string for auto-generated REST action routes using the @actionSeparator decorator. The separator ('/', ':', or '/:') is used to split the resource path from the action name in URLs. Attach this to a model, model property, or operation to control route formatting.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.actionSeparator(seperator: valueof \"/\" | \":\" | \"/:\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Return Type Visibility Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@returnTypeVisibility` decorator. This decorator is applied to an operation to declare which visibility modifiers make properties within the operation's return type visible. A property is visible if it has any of the specified visibilities.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_56\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@returnTypeVisibility(...visibilities: valueof EnumMember[])\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Augment Decorators in TypeSpec\nDESCRIPTION: Demonstrates the required syntax for augment decorator statements in TypeSpec as of the September 2023 release. This example shows how to apply the `@doc` decorator to a specific model property (`MyType.myProperty`). A semicolon is now mandatory at the end of augment decorator statements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-09-12.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n@@doc(MyType.myProperty, \"Documentation for myProperty\");\n```\n\n----------------------------------------\n\nTITLE: Serializing Model with Renamed Fields to XML - XML\nDESCRIPTION: This example shows serialization of a model where child fields have been renamed in the XML. The root element contains 'InputData' and 'OutputData' nodes, each encapsulating a 'name' and 'age.' The structure is mirrored for get and put operations and is required for schema validation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_72\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithRenamedFieldsSrc>\\n  <InputData>\\n    <name>foo</name>\\n    <age>123</age>\\n  </InputData>\\n  <OutputData>\\n    <name>bar</name>\\n    <age>456</age>\\n  </OutputData>\\n</ModelWithRenamedFieldsSrc>\n```\n\n----------------------------------------\n\nTITLE: Reporting Diagnostics from Decorators in TypeScript\nDESCRIPTION: Demonstrates how a decorator implementation (`$customName`) can report errors or warnings using a diagnostic reporting function (like `reportDiagnostic` from a library). It utilizes `context.decoratorTarget` to pinpoint the location of the decorator itself (`@customName`) and `context.getArgumentTarget(0)` to pinpoint the location of the first argument (`name`) in the TypeSpec source, enabling precise feedback to the user.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport type { DecoratorContext, Type } from \"@typespec/compiler\";\nimport type { reportDiagnostic } from \"./lib.js\";\n\nexport function $customName(context: DecoratorContext, target: Type, name: string) {\n  reportDiagnostic({\n    code: \"custom-name-invalid\",\n    target: context.decoratorTarget, // Get location of @customName decorator in TypeSpec document.\n  });\n  reportDiagnostic({\n    code: \"bad-name\",\n    target: context.getArgumentTarget(0), // Get location of {name} argument in TypeSpec document.\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Spread Model Strings - JSON\nDESCRIPTION: Demonstrates a JSON structure for APIs where the entity blends known fields with both 'prop' and 'derivedProp' as string properties, showing inheritance/spread in record definitions. No special dependencies are needed beyond basic JSON compatibility.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_195\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"id\\\": 43.125, \\\"prop\\\": \\\"abc\\\", \\\"derivedProp\\\": \\\"abc\\\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring bundleId Option for Schema Bundling in YAML\nDESCRIPTION: Presents a YAML configuration example for the TypeSpec JSON Schema emitter. Setting the `bundleId` option (e.g., to `\"my-bundle\"`) directs the emitter to consolidate all generated JSON Schemas into a single output file instead of creating separate files for each schema type. The specified `bundleId` will be used as the identifier for the bundled schema, and internal references remain relative URIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/guide.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/json-schema\"\noptions:\n  \"@typespec/json-schema\":\n    bundleId: \"my-bundle\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies and Editable Projects - Requirements File - Python\nDESCRIPTION: This snippet is a Python requirements.txt file which manages all the dependencies for a project related to Azure client generator modules. It lists package requirements using version specifiers and includes local modules via editable (-e) installs, referencing local paths relative to the requirements file location. Key parameters include the exact versions for installable dependencies and commented sections that explain grouping and project purposes. Inputs are package and path strings, with direct impacts on the pip installation context. No code execution occurs; instead, this file is used by pip to resolve dependencies and configure development environments uniformly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-python/generator/test/azure/requirements.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n-r ../dev_requirements.txt\n-e ../../\nazure-mgmt-core==1.5.0\n\n# only for azure\n-e ./generated/azure-client-generator-core-access\n-e ./generated/azure-client-generator-core-client-initialization\n-e ./generated/azure-client-generator-core-flatten-property\n-e ./generated/azure-client-generator-core-usage\n-e ./generated/azure-core-basic\n-e ./generated/azure-core-scalar\n-e ./generated/azure-core-lro-rpc\n-e ./generated/azure-core-lro-standard\n-e ./generated/azure-core-model\n-e ./generated/azure-core-traits\n-e ./generated/azure-core-page\n-e ./generated/azure-special-headers-client-request-id/\n-e ./generated/azure-example-basic\n-e ./generated/azure-resource-manager-common-properties\n-e ./generated/azure-resource-manager-operation-templates\n-e ./generated/azure-resource-manager-resources\n# -e ./generated/client-namespace\n-e ./generated/azure-payload-pageable\n-e ./generated/client-naming\n-e ./generated/client-structure-default\n-e ./generated/client-structure-multiclient\n-e ./generated/client-structure-renamedoperation\n-e ./generated/client-structure-twooperationgroup\n-e ./generated/resiliency-srv-driven1\n-e ./generated/resiliency-srv-driven2\n\n# common test case\n-e ./generated/authentication-api-key\n-e ./generated/authentication-http-custom\n-e ./generated/authentication-oauth2\n-e ./generated/authentication-union\n-e ./generated/encode-duration\n-e ./generated/encode-numeric\n-e ./generated/parameters-basic\n-e ./generated/parameters-collection-format\n-e ./generated/parameters-path\n-e ./generated/parameters-spread\n-e ./generated/serialization-encoded-name-json\n-e ./generated/server-endpoint-not-defined\n-e ./generated/server-path-multiple\n-e ./generated/server-path-single\n-e ./generated/server-versions-versioned\n-e ./generated/server-versions-not-versioned\n-e ./generated/special-words\n-e ./generated/streaming-jsonl\n-e ./generated/typetest-array\n-e ./generated/typetest-dictionary\n-e ./generated/typetest-enum-extensible\n-e ./generated/typetest-enum-fixed\n-e ./generated/typetest-model-enumdiscriminator\n-e ./generated/typetest-model-nesteddiscriminator\n-e ./generated/typetest-model-notdiscriminated\n-e ./generated/typetest-model-singlediscriminator\n-e ./generated/typetest-model-recursive\n-e ./generated/typetest-model-usage\n-e ./generated/typetest-model-visibility\n-e ./generated/typetest-property-nullable\n-e ./generated/typetest-property-optional\n-e ./generated/typetest-property-valuetypes\n-e ./generated/typetest-property-additionalproperties\n-e ./generated/typetest-scalar\n-e ./generated/typetest-union\n-e ./generated/typetest-model-empty\n-e ./generated/headasbooleantrue\n-e ./generated/headasbooleanfalse\n-e ./generated/parameters-body-optionality\n-e ./generated/special-headers-repeatability\n-e ./generated/special-headers-conditional-request\n-e ./generated/encode-datetime\n-e ./generated/encode-bytes\n-e ./generated/payload-content-negotiation\n-e ./generated/payload-json-merge-patch\n-e ./generated/payload-pageable\n-e ./generated/payload-multipart\n-e ./generated/payload-media-type\n-e ./generated/payload-xml\n-e ./generated/routes\n-e ./generated/versioning-added\n-e ./generated/versioning-madeoptional\n-e ./generated/versioning-removed\n-e ./generated/versioning-renamedfrom\n-e ./generated/versioning-returntypechangedfrom\n-e ./generated/versioning-typechangedfrom\n\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec with HTTP Server Emitter via Command Line (bash)\nDESCRIPTION: This command invokes TypeSpec's compile action in the current directory and specifies @typespec/http-server-js as the emitter using the --emit flag. It requires TypeSpec CLI to be installed globally or locally and the @typespec/http-server-js package to be available. Accepts an optional working directory and outputs generated files to the default or configured directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-js/reference/emitter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/http-server-js\n```\n\n----------------------------------------\n\nTITLE: Adding Options to TypeSpec Emitter Configuration - YAML\nDESCRIPTION: Extends the TypeSpec project configuration by adding emitter-specific options under the \"options\" map for @typespec/http-client-python. This method supports passing custom settings such as output directory, package name, or version. Only takes effect if the corresponding emitter supports the specified option keys.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-python/reference/emitter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-client-python\"\noptions:\n  \"@typespec/http-client-python\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Serializer for 'Pet' Model\nDESCRIPTION: Exports a TypeScript function `jsonPetToTransportTransform` responsible for serializing a `Pet` object into a plain JavaScript object suitable for transport. It handles potential null/undefined input and maps the `id` and `name` properties. This function resides in `src/models/internal/serializers.ts`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_extends.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonPetToTransportTransform\nexport function jsonPetToTransportTransform(input_?: Pet | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    id: input_.id,\n    name: input_.name,\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Options for TypeSpec Java Emitter in tspconfig.yaml\nDESCRIPTION: This YAML configuration demonstrates how to provide specific options to the `@typespec/http-client-java` emitter within the `tspconfig.yaml` file. The `options` key allows customization of the emitter's behavior by nesting the emitter name (`@typespec/http-client-java`) and its key-value option pairs (e.g., `option: value`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nemit:\n  - \"@typespec/http-client-java\"\noptions:\n  \"@typespec/http-client-java\":\n    option: value\n```\n```\n\n----------------------------------------\n\nTITLE: Expected Request/Response Body for Unix Timestamp Encoded Datetime Array Property (JSON)\nDESCRIPTION: This JSON structure defines the expected request and response body for the `POST /encode/datetime/property/unix-timestamp-array` endpoint. It tests operations where a model contains a 'value' property which is an array of datetimes, encoded as Unix timestamps.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": [1686566864, 1686734256]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": [1686566864, 1686734256]\n}\n```\n\n----------------------------------------\n\nTITLE: Collecting Diagnostics with Diagnostic Collector - TypeScript\nDESCRIPTION: This example demonstrates best practice for collecting, rather than directly reporting, diagnostics when writing accessor functions for TypeSpec. It uses a diagnostic collector to accumulate diagnostics that can then be returned as a tuple alongside any result, enabling downstream consumers to decide how to handle them. The collector gathers diagnostics from internal and piped calls. Key inputs are diagnostics created via `createDiagnostic`. Dependencies: `@typespec/compiler`. Outputs a tuple of result and diagnostics array.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/diagnostics.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createDiagnosticCollector, Diagnostic } from \"@typespec/compiler\";\n\nfunction getRoutes(): [Route, readonly Diagnostic] {\n  const diagnostics = createDiagnosticCollector();\n  diagnostics.add(\n    createDiagnostic(program, {\n      code: \"no-array\",\n      target: diagnosticTarget,\n    }),\n  );\n  const result = diagnostic.pipe(getParameters()); // to pipe diagnostics returned by `getParameters`\n  return diagnostics.wrap(routes);\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Dog Model for Transport in TypeScript\nDESCRIPTION: Implements a function to convert a Dog object to a transport format, spreading additional properties and explicitly serializing id, name, and color. It depends on a jsonRecordExtraFeatureToTransportTransform helper for serializing additionalProperties. The function expects an optional Dog parameter and returns an object suitable for transport (e.g., JSON), or input_ as any if falsy.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_additional_properties.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonDogToTransportTransform(input_?: Dog | null): any {\\n  if (!input_) {\\n    return input_ as any;\\n  }\\n  return {\\n    ...jsonRecordExtraFeatureToTransportTransform(input_.additionalProperties),\\n    id: input_.id,\\n    name: input_.name,\\n    color: input_.color,\\n  }!;\\n}\n```\n\n----------------------------------------\n\nTITLE: Using the @test Decorator in TypeSpec Tests with TypeScript\nDESCRIPTION: Illustrates how to use the `@test` decorator within TypeSpec code snippets during testing. The `runner.compile` method collects all types marked with `@test` into a record. The example shows marking a model (`Foo`) and a model property (`Bar.name`) with `@test`, potentially aliasing the latter (`CustomName`), and accessing these collected types from the compilation result.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst { Foo, CustomName } = await runner.compile(`\n  @test model Foo {}\n\n  model Bar {\n    @test(\"CustomName\") name: string\n  }\n`);\n\nFoo; // type of: model Foo {}\nCustomName; // type of : Bar.name\n```\n```\n\n----------------------------------------\n\nTITLE: Updating @service Decorator Argument Syntax - TypeSpec TSP (Diff)\nDESCRIPTION: Displays a diff between the old and new ways of specifying arguments to the @service decorator in TypeSpec, transitioning from object syntax to value syntax (#{...}). Part of the decorator migration to stronger typing and improved syntax consistency. Intended as a migration guideline for service definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-04.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-@service({title: \"My service\"})\n+@service(#{title: \"My service\"})\n```\n\n----------------------------------------\n\nTITLE: Configuring emitAllRefs Option in YAML\nDESCRIPTION: Shows a YAML configuration example for the TypeSpec JSON Schema emitter. Enabling the `emitAllRefs` option by setting it to `true` causes the emitter to generate separate JSON Schema files for all TypeSpec types that are referenced by JSON Schema types, even if the referenced types lack the `@jsonSchema` decorator. This promotes referenced types to top-level schema definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/guide.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/json-schema\"\noptions:\n  \"@typespec/json-schema\":\n    emitAllRefs: true\n```\n\n----------------------------------------\n\nTITLE: Configuring emitAllModels Option in YAML\nDESCRIPTION: Provides a YAML configuration example for the TypeSpec JSON Schema emitter. Setting the `emitAllModels` option to `true` instructs the emitter to generate a separate JSON Schema file for every data type defined in the TypeSpec program, regardless of whether they have the `@jsonSchema` decorator. This treats all models as top-level schema definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/guide.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/json-schema\"\noptions:\n  \"@typespec/json-schema\":\n    emitAllModels: true\n```\n\n----------------------------------------\n\nTITLE: Specifying Enum as Namespace Declaration with @nsDeclarations (TypeSpec)\nDESCRIPTION: This snippet demonstrates marking an enum as a declaration source for XML namespaces using the @TypeSpec.Xml.nsDeclarations decorator. The enum can then be referenced by models and properties to apply the correct namespace. Dependencies include the TypeSpec XML namespace decorators. Inputs are enum type definitions; no output is directly produced.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Xml.nsDeclarations\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for PUT /type/model/inheritance/nested-discriminator/model\nDESCRIPTION: This JSON represents the expected input body for a PUT request to the `/type/model/inheritance/nested-discriminator/model` endpoint. It demonstrates sending a polymorphic model instance ('shark' kind with 'goblin' sharktype) which involves multiple levels of inheritance and two discriminators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_170\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\": 1, \"kind\": \"shark\", \"sharktype\": \"goblin\" }\n```\n\n----------------------------------------\n\nTITLE: Extending Emitter Options in TypeSpec Config - YAML\nDESCRIPTION: Expands on the YAML configuration by demonstrating how to specify additional options for the @typespec/http-server-csharp emitter. Options are listed under the 'options' key and can be used to customize generation, such as output directory, formatting, and mock behavior. Replace 'option: value' with the actual desired option keys and values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-server-csharp\"\noptions:\n  \"@typespec/http-server-csharp\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Providing Model With Multiple Nested Discriminators - JSON\nDESCRIPTION: Demonstrates a complex, polymorphic model that includes both parent and nested discriminator properties. Useful for deep inheritance trees or nested type hierarchies in polymorphic model structures.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_167\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\": 1, \"kind\": \"shark\", \"sharktype\": \"goblin\" }\n```\n\n----------------------------------------\n\nTITLE: Serializing Foo Model to Transport Format in TypeScript\nDESCRIPTION: Serializes a Foo instance for transport (e.g., HTTP API response) by mapping myValues using jsonArrayInt32ToTransportTransform. Inputs are Foo instance (or null), outputs a renamed property object suitable for the API schema. Assumes presence of Foo type and jsonArrayInt32ToTransportTransform; myValues is the key parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/arrays.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonFooToTransportTransform(input_?: Foo | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    my_values: jsonArrayInt32ToTransportTransform(input_.myValues),\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Schema Emission in TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.jsonSchema` decorator marks a TypeSpec namespace or other declaration (`unknown` target) for emission as a JSON Schema. When applied to a namespace, it enables schema generation for models within it and optionally accepts a `baseUri`. When applied to other declarations, it marks that specific declaration for emission and can optionally take an `id` (though the provided signature shows only `baseUri?`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.jsonSchema(baseUri?: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Defining Object and Array Literal Values in TypeSpec\nDESCRIPTION: TypeSpec code illustrating the syntax introduced in PR #3022 for defining constant object (`#{ ... }`) and array (`#[]`) values. This example shows them used as an argument to a decorator (`@dummy`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_41\n\nLANGUAGE: tsp\nCODE:\n```\n@dummy(#{ // Object literal syntax\n  name: \"John\",\n  age: 48,\n  address: #{ city: \"London\" } // Nested object literal\n  aliases: #[\"Bob\", \"Frank\"] // Array literal syntax\n})\n```\n\n----------------------------------------\n\nTITLE: Wrapped Custom Scalar Array Property Schema - OpenAPI3 YAML\nDESCRIPTION: Shows OpenAPI3 YAML for a wrapped array of custom scalar items, including both wrapper and item XML names. Intended for code generation tools or API documentation where precise XML output is required. Inputs are arrays of custom scalar strings.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_11\n\nLANGUAGE: YAML\nCODE:\n```\nPet:\n  type: \"object\"\n  properties:\n    tags:\n      type: \"array\"\n      xml:\n        name: \"ItemsTags\"\n        wrapped: true\n      items:\n        type: string\n        xml:\n          name: ItemsName\n  xml:\n    name: \"XmlPet\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Polymorphic Model Fetch Operation with TypeScript\nDESCRIPTION: Implements an asynchronous function getModel in TypeScript that calls the getModel endpoint and returns a Fish-typed object. Utilizes a parsed path, customizable request options, and examines response headers and status codes. On application/json success, transforms the raw response body to the application-level Fish model using jsonFishToApplicationTransform; otherwise, raises a REST error. Requires TestClientContext and helper transformation functions. Designed as client-side operation logic.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/inheritance_2_discriminators.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function getModel(\n  client: TestClientContext,\n  options?: GetModelOptions,\n): Promise<Fish> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return jsonFishToApplicationTransform(response.body)!;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Error Documentation to TypeSpec Operations\nDESCRIPTION: Uses the @errorsDoc decorator to attach a documentation string about the error return types of a TypeSpec operation. The doc argument provides helpful usage or error context; the operation output union should list possible error types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-decorators.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n@errorsDoc(\"Errors doc\")\nop get(): Pet | NotFound;\n```\n\n----------------------------------------\n\nTITLE: Defining 32-bit Float Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Declares a `float32` scalar representing 32-bit floating point values, covering typical `float` ranges in many programming languages. Used where specific memory/precision trade-offs are needed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_36\n\nLANGUAGE: typespec\nCODE:\n```\nscalar float32\n```\n\n----------------------------------------\n\nTITLE: Generating a TypeScript Client Class for the API - TypeScript\nDESCRIPTION: Implements a TestClient class with a constructor accepting the endpoint and options, and a foo method that calls the generated operation function. Depends on internal helper modules (context, options, foo operation). Ensures encapsulation of context and exposes typed API method per the contract. Inputs: endpoint URL and optional options; Output: Promise of Widget model. Used by consumers to perform the HTTP operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { FooOptions, foo } from \"./api/testClientOperations.js\";\nimport {\n  TestClientContext,\n  TestClientOptions,\n  createTestClientContext,\n} from \"./api/testClientContext.js\";\n\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  async foo(options?: FooOptions) {\n    return foo(this.#context, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: XML Representation with Multiple Normalized Namespaces\nDESCRIPTION: This XML snippet shows the structure for the `Book` model defined using multiple normalized namespaces. It includes declarations for both `xmlns:smp` and `xmlns:ns2`, and the elements `<smp:title>` and `<ns2:author>` use their respective prefixes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_46\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<smp:Book xmlns:smp=\"http://example.com/schema\" xmlns:sn2=\"http://example.com/ns2\">\n  <id>0</id>\n  <smp:title>string</smp:title>\n  <ns2:author>string</ns2:author>\n</smp:Book>\n```\n```\n\n----------------------------------------\n\nTITLE: Reverting Decorator Argument Marshalling Behavior in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to revert the `decoratorArgMarshalling` behavior to the legacy mode by exporting a `$flags` constant defined using `definePackageFlags`. This is necessary if the new default behavior introduced in version 0.61.0 causes issues, although using the legacy mode is highly discouraged and planned for removal. It requires the `@typespec/compiler` package for the `definePackageFlags` function.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\nexport const $flags = definePackageFlags({\n  decoratorArgMarshalling: \"legacy\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Extension Resource CreateOrUpdate Operation Interface - TypeSpec - typespec\nDESCRIPTION: Specifies the ExtensionResourceCreateOrUpdate interface template for Extension, Resource, and Error, providing a contract for create or update operations on extension resources. Sets a groundwork for idempotent resource modification. Relies on compatible Extension, Resource, and Error type definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ExtensionResourceCreateOrUpdate<Extension, Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Defining the Widget Model Interface - TypeScript\nDESCRIPTION: Declares the Widget interface with id, totalWeight (camel-cased from total_weight), and color as a string union. Prerequisites: alignment with server-side model. Used for typing data in client code, with properties matching TypeScript conventions. No dependencies except TypeScript type system. Inputs/outputs correspond to API data payloads. Useful for ensuring compile-time safety in application code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Widget {\n  id: string;\n  totalWeight: number;\n  color: \"red\" | \"blue\";\n}\n```\n\n----------------------------------------\n\nTITLE: Expected HTTP Request for MultiPart FormData anonymousModel\nDESCRIPTION: Illustrates the expected raw HTTP POST request for the `/multipart/form-data/anonymous-model` endpoint. It shows a multipart/form-data request containing a single file part named 'profileImage' with appropriate Content-Disposition and Content-Type headers, following RFC 7578.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_51\n\nLANGUAGE: http\nCODE:\n```\nPOST /multipart/form-data/anonymous-model HTTP/1.1\nContent-Length: 428\nContent-Type: multipart/form-data; boundary=abcde12345\n\n--abcde12345\nContent-Disposition: form-data; name=\"profileImage\"; filename=\"<any-name-is-ok>\"\nContent-Type: application/octet-stream;\n\n{…file content of .jpg file…}\n--abcde12345--\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Union with Non-Discriminated Union 2 Request - JSON\nDESCRIPTION: This request body example is for the PUT endpoint /type/property/additionalProperties/spreadRecordNonDiscriminatedUnion2, illustrating acceptance of alternative union structure for prop1 and prop2. Such flexibility is essential for models that must accept more than one discriminator combination on input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_226\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"abc\\\",\\n  \\\"prop1\\\": { \\\"kind\\\": \\\"kind1\\\", \\\"start\\\": \\\"2021-01-01T00:00:00Z\\\" },\\n  \\\"prop2\\\": {\\n    \\\"kind\\\": \\\"kind1\\\",\\n    \\\"start\\\": \\\"2021-01-01T00:00:00Z\\\",\\n    \\\"end\\\": \\\"2021-01-02T00:00:00Z\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Decorators via '$decorators' Variable in TypeScript\nDESCRIPTION: Presents the recommended method for exporting multiple decorators from a library using a dedicated `$decorators` variable. This object maps namespaces (e.g., 'MyOrg.MyLib') to an object containing decorator names ('doc') and their corresponding implementation functions (`docDecoratorFn`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nexport const $decorators = {\n  // Namespace\n  \"MyOrg.MyLib\": {\n    doc: docDecoratorFn,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Running the OpenAPI 3 Emitter via TypeSpec CLI - Bash\nDESCRIPTION: Invokes the OpenAPI 3 emitter using the TypeSpec CLI with the 'compile' command. Requires that TypeSpec and @typespec/openapi3 are installed and accessible in the project environment. The main parameter is the emitter name passed to '--emit', which triggers emission into the configured output format. Input is the current directory ('.'), and output is generated OpenAPI documentation in YAML or JSON format, as determined by configuration or defaults.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/reference/emitter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/openapi3\n```\n\n----------------------------------------\n\nTITLE: Nested Namespace Declaration with Dot Notation - TypeSpec - tsp\nDESCRIPTION: Shows a fix for nested namespace declarations using dot notation within another namespace block in TypeSpec, which previously produced an error but now is supported. Demonstrates hierarchy: 'MyOrg.MyProject' containing a nested 'MyModule.MySubmodule'. Inputs are namespace definitions, outputs are allowed namespace nesting using dotted names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-08-06.md#_snippet_8\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace MyOrg.MyProject {\n  namespace MyModule.MySubmodule { // <-- this used to emit an error\n  // ...\n\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Discriminating Polymorphic Bird Serialization in TypeScript\nDESCRIPTION: This TypeScript function `jsonBirdToTransportDiscriminator` acts as a dispatcher for serializing `Bird` objects based on their 'kind' property. It takes a `Bird` instance, checks its 'kind', and delegates the serialization to the corresponding specific transformation function (e.g., `jsonSeaGullToTransportTransform` for 'seagull'). If the 'kind' is not recognized, it logs a warning and returns the input as is.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/polymorphic_single_level_inheritance.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonBirdToTransportDiscriminator(input_?: Bird): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  const discriminatorValue = input_.kind;\n  if (discriminatorValue === \"seagull\") {\n    return jsonSeaGullToTransportTransform(input_ as any)!;\n  }\n\n  if (discriminatorValue === \"sparrow\") {\n    return jsonSparrowToTransportTransform(input_ as any)!;\n  }\n\n  if (discriminatorValue === \"goose\") {\n    return jsonGooseToTransportTransform(input_ as any)!;\n  }\n\n  if (discriminatorValue === \"eagle\") {\n    return jsonEagleToTransportTransform(input_ as any)!;\n  }\n  console.warn(`Received unknown kind: ` + discriminatorValue);\n  return input_ as any;\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Request Body for spreadCompositeRequest\nDESCRIPTION: Specifies the expected JSON request body for the `PUT /parameters/spread/model/composite-request/{name}` endpoint test case. The body corresponds to the `BodyParameter` type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Development Dependencies in requirements.txt Format\nDESCRIPTION: This snippet defines Python package dependencies using the standard requirements file format for pip. It recursively includes requirements from '../../eng/scripts/ci/dev_requirements.txt' using the '-r' flag and specifies explicit versions for 'aiohttp', 'pytest-asyncio' (0.14.0), and 'requests' (2.32.2). This file is intended to be used with `pip install -r <filename>` to set up a consistent development environment.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-python/generator/test/dev_requirements.txt#_snippet_0\n\nLANGUAGE: pip requirements file\nCODE:\n```\n-r ../../eng/scripts/ci/dev_requirements.txt\naiohttp\npytest-asyncio==0.14.0\nrequests==2.32.2\n```\n\n----------------------------------------\n\nTITLE: Importing Additional TypeSpec Files via CLI - Bash - bash\nDESCRIPTION: Demonstrates providing supplemental TypeSpec file imports to the compiler through the '--import' CLI flag, either as a single file or multiple flags. Extends project inputs at compile time. Requires tsp and accessible files.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --import \"sidecar.tsp\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Service Authentication Using @useAuth - TypeSpec\nDESCRIPTION: Explains the use of @useAuth to configure authentication schemes required for operations, interfaces, or entire namespaces. Example uses a simple 'BasicAuth' security scheme, but any combination via union or array is supported. The decorator takes an authentication configuration as input, allowing either alternative or compositional authentication requirements. Requires TypeSpec Http library and appropriate authentication schemes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/README.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Http.useAuth(auth: {} | Union | {}[])\n```\n\nLANGUAGE: typespec\nCODE:\n```\n@service\n@useAuth(BasicAuth)\nnamespace PetStore;\n```\n\n----------------------------------------\n\nTITLE: Setting Emitter Options via CLI Flag (Bash)\nDESCRIPTION: This Bash snippet shows how to provide emitter options using the `--option` command-line flag when running the TypeSpec compiler. The format is `--option=<emitterName>.<optionName>=<value>`. This example sets `option1` for `emitter1`. CLI options override those in `tspconfig.yaml`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --option \"emitter1.option1=option1-value\"\n```\n\n----------------------------------------\n\nTITLE: Serializing FileWithHttpPartSpecificContentTypeRequest Objects in TypeScript\nDESCRIPTION: This serializer function transforms any given input object into a FileWithHttpPartSpecificContentTypeRequest object. It ensures proper conversion of the nested profile image part using a dedicated transformation function, handling null or missing inputs gracefully. This utility is typically used to convert loosely-typed or incoming data into a strongly-typed request form, aiding consistent data flow and validation in the application.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file_content_type.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonFileWithHttpPartSpecificContentTypeRequestToApplicationTransform(\n  input_?: any,\n): FileWithHttpPartSpecificContentTypeRequest {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    profileImage: jsonFileSpecificContentTypeToApplicationTransform(input_.profileImage),\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Visibility Modifier with @removeVisibility - TypeSpec Typespec\nDESCRIPTION: Demonstrates disabling specific visibility modifiers from a property using the @removeVisibility decorator in TypeSpec. This snippet removes the Update visibility modifier from the 'name' property. Requires the Lifecycle visibility class, and the property will retain default visibilities minus Update. Input: property definition with decorator; Output: property with Update visibility removed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/visibility.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\n@removeVisibility(Lifecycle.Update)\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Wrapped Arrays of Custom Scalars - TypeSpec\nDESCRIPTION: Extends custom scalar array modeling by wrapping the array property. @encodedName decorators are used on both the scalar and array property, controlling both the wrapper and item element names in XML. Output is used for scenarios requiring XML element renaming at multiple levels.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_9\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@encodedName(\"application/xml\", \"ItemsName\")\nscalar tag extends string;\n\n@encodedName(\"application/xml\", \"XmlPet\")\nmodel Pet {\n  @encodedName(\"application/xml\", \"ItemsTags\")\n  tags: tag[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Duplicate Model Names in Distinct Namespaces in TypeSpec\nDESCRIPTION: This snippet demonstrates defining 'Widget' models both in the root and a nested namespace ('Foo'), each with distinct fields, and an operation that returns either model. This showcases the challenge of name collision in generated code. No prerequisites are needed. The system requires namespace qualification to disambiguate identical model names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/basic.md#_snippet_6\n\nLANGUAGE: TypeSpec\nCODE:\n```\nnamespace Test {\n  namespace Foo {\n    model Widget {\n      id: string;\n      kind: \"2\";\n      weight: int32;\n      color: \"red\" | \"blue\";\n    }\n  }\n\n  model Widget {\n    id: string;\n    kind: \"1\";\n    weight: int32;\n    color: \"red\" | \"blue\";\n  }\n\n  op foo(): Widget | Foo.Widget;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Default (Missing) Optional String Properties - JSON\nDESCRIPTION: Shows a response object with no properties, verifying the safe omission of optional string fields in returned objects. Models the required flexibility for clients and APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_306\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Dependencies for Versioning - Shell\nDESCRIPTION: This shell command installs all the dependencies listed in package.json, including @typespec/versioning. This step is required before you can use the versioning decorators or compile the project with the latest libraries. No additional parameters are needed; simply run this command in your project's root directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/06-versioning.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ntsp install\\n\n```\n\n----------------------------------------\n\nTITLE: Expected Error Body for Invalid API Key Authentication (JSON)\nDESCRIPTION: This JSON object represents the expected error response body for the `GET /authentication/api-key/invalid` endpoint. It signifies an authentication failure due to an invalid API key, returning a 403 status code with a specific error code and message.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": {\n    \"code\": \"InvalidApiKey\",\n    \"message\": \"API key is invalid\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Base Bird Model for Transport in TypeScript\nDESCRIPTION: The `jsonBirdToTransportTransform` function serializes a generic `Bird` object (or any of its subtypes) into a transport format. It first calls `jsonBirdToTransportDiscriminator` to potentially get subtype-specific properties and then explicitly includes the base `kind` and `wingspan` properties. It handles null or undefined input by returning it directly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/polymorphic_single_level_inheritance.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonBirdToTransportTransform(input_?: Bird | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    ...jsonBirdToTransportDiscriminator(input_),\n    kind: input_.kind,\n    wingspan: input_.wingspan,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Default XML for a TypeSpec Model\nDESCRIPTION: This XML snippet shows the default serialization result for the `Blob` model defined previously. The `id` property is represented as a child element `<id>` within the parent `<Blob>` element.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<Blob>\n  <id>abcdef</id>\n</Blob>\n```\n\n----------------------------------------\n\nTITLE: Using @route in Non-Service Namespace (Changed Behavior) in TypeSpec\nDESCRIPTION: Demonstrates an operation in a non-service namespace (`DemoService`) explicitly annotated with `@route(\"/\")`. Previously, this might have generated a route, but with the new logic, no routes are emitted (`[]`) because it's outside the (missing) service namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nnamespace DemoService;\n\n@route(\"/\")\nop test(): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Query Expansion with Array (Standard)\nDESCRIPTION: Defines a GET endpoint to test query expansion (`{?param}`) with explode: false for an array parameter `param`. Given `[\"a\",\"b\"]`, the expected query string is `?param=a,b`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_98\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/query-expansion/standard/array{?param}\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering a TypeSpec Library Module - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to define and register a TypeSpec library using createTypeSpecLibrary from @typespec/compiler. By exporting $lib and convenience helpers for diagnostics, this module exposes its features to consumers and enables linting and emitter integration. This file is typically located at ./src/lib.ts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTypeSpecLibrary } from \"@typespec/compiler\";\n\nexport const $lib = createTypeSpecLibrary({\n  name: \"myLibrary\",\n  diagnostics: {},\n} as const);\n\n// Optional but convenient, these are meant to be used locally in your library.\nexport const { reportDiagnostic, createDiagnostic } = $lib;\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code with TypeSpec CLI\nDESCRIPTION: This Bash command (`tsp compile`) triggers the TypeSpec compiler. It processes the specified TypeSpec definition file (`main.tsp`) and invokes the configured emitters (e.g., JavaScript client emitter) to generate the client code in the designated output directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile {path to main.tsp}/main.tsp\n```\n\n----------------------------------------\n\nTITLE: Defining Dictionary of Arrays Property on Widget Interface in TypeScript\nDESCRIPTION: Defines the Widget interface in TypeScript, mapping the 'prop' property to a Record<string, Array<number>>, representing a dictionary whose values are arrays. This structure supports modeling collections of lists in TypeScript according to the generated schema. Useful for API data contracts mirroring TypeSpec definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/dictionary-properties.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Widget {\\n  prop: Record<string, Array<number>>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining State Keys for a TypeSpec Library in TypeScript\nDESCRIPTION: Shows how to define and export state keys for a TypeSpec library using `createTypeSpecLibrary`. This allows decorators within the library to reference shared state keys (like `customName`) in a structured way, improving organization and preventing key collisions. The defined keys are typically used with `stateMap` or `stateSet` in decorator implementations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/create-decorators.md#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport const $lib = createTypeSpecLibrary({\n  // ...\n  state: {\n    customName: { description: \"State for the @customName decorator\" },\n  },\n});\n\nexport const StateKeys = $lib.stateKeys;\n```\n\n----------------------------------------\n\nTITLE: Modernizing @header Decorator Usage and Array Parameter Handling - TypeSpec Diff\nDESCRIPTION: This diff contains two operation examples illustrating updated usage of the @header decorator in TypeSpec. The first example shows correct passing of decorator arguments using a model expression, while the second removes the deprecated format field for array serialization. Developers must update their code to avoid deprecated features and prepare for future compiler changes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=\"tsp\"\nop example1(\n-  @header({ name: \"ETag\" }) etag: string\n+  @header(#{ name: \"ETag\" }) etag: string \n): void;\n\nop example2(\n-  @header({ format: \"csv\" }) list: string[]\n+  @header list: string[]\n): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Local TypeSpec Java Emitter Package using npm\nDESCRIPTION: This command installs the TypeSpec Java Emitter Node.js package (`@typespec/http-client-java`) from a locally built tarball (`.tgz`) file using npm. It requires Node.js and npm to be installed, and the correct path to the generated `.tgz` file must be provided. This step follows the local build process detailed in the 'Build and Pack' section.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install [path-to-typespec-http-client-java-tgz]\n```\n\n----------------------------------------\n\nTITLE: Migrating from Deprecated @query Format Option - TypeSpec HTTP - diff\nDESCRIPTION: Illustrates how to migrate from the deprecated @query decorator model option ({format: \"form\"}) to the new pattern using an object literal (#{explode: true}) in TypeSpec HTTP definitions, addressing a deprecation warning in v0.59. Inputs are decorator attributes on a model property; outputs are TypeSpec code updated to be compatible with the new syntax. Designed for developers to quickly update their code with minimal friction.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-08-06.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- @query({format: \"form\"}) select: string[];\n+ @query(#{explode: true}) select: string[];\n\n```\n\n----------------------------------------\n\nTITLE: Chained Emitter Option Interpolation in TypeSpec Config - YAML - yaml\nDESCRIPTION: Demonstrates emitter option values referencing each other within a single emitter using variable expressions. This config supports composition, as in generating output directories based on multiple options. Emitter-specific scoping is enforced. The example assumes use of @typespec/openapi3 and requires the TypeSpec compiler with emitter plugins installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n  @typespec/openapi3:\n    emitter-output-dir: {output-dir}/{emitter-sub-folder}\n    emitter-sub-folder: bar\n\n```\n\n----------------------------------------\n\nTITLE: Naming XML Elements and Attributes with @name Decorator (TypeSpec)\nDESCRIPTION: This snippet shows how to use the @name decorator to customize the XML element or attribute name of a TypeSpec model or property. It demonstrates renaming model and properties with both @name and @encodedName. Dependencies include TypeSpec's XML decorator functions. Inputs are model and property definitions with applied decorators; outputs are renamed elements in serialized XML.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n@name(\"XmlBook\")\nmodel Book {\n  @name(\"XmlId\") id: string;\n  @encodedName(\"application/xml\", \"XmlName\") name: string;\n  content: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @extension Decorator with Raw TypeSpec Value - TypeSpec - tsp\nDESCRIPTION: Demonstrates usage of the @extension decorator with a direct TypeSpec value, allowing extension fields to be emitted as raw JSON values, a feature added in TypeSpec 0.57.0+. Required dependencies: @typespec/json-schema package. The 'Foo' model has an extension 'x-example' with a dictionary value. Key parameters are the extension name ('x-example') and the raw value (#{ foo: \"bar\" }). Outputs are JSON schema with the extension attached as a raw value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-08-06.md#_snippet_2\n\nLANGUAGE: tsp\nCODE:\n```\n@extension(\"x-example\", #{ foo: \"bar\" })\nmodel Foo {}\n\n```\n\n----------------------------------------\n\nTITLE: Switching Decorator Arguments from Format to Explode Option - TypeSpec Diff\nDESCRIPTION: This diff snippet shows how to refactor usage of the @header and @query decorators, replacing the deprecated format option with the new explode option. It guides developers to use the updated syntax for specifying complex header and query serialization behavior, improving alignment with modern HTTP API standards.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n-@header(#{ format: \"multi\"})\n-@query(#{ format: \"multi\"})\n+@header(#{ explode: true })\n+@query(#{ explode: true })\n```\n```\n\n----------------------------------------\n\nTITLE: Wrapped Complex Array Serialization - XML\nDESCRIPTION: Provides XML serialization of a wrapped array of complex types, where each item is represented as a named XML element inside the Pet wrapper. Useful for validating correct naming and structuring in XML output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_16\n\nLANGUAGE: XML\nCODE:\n```\n<XmlPet>\n  <XmlTag>\n    <name>string</name>\n  </XmlTag>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Using Interpolation in Template File (TypeSpec)\nDESCRIPTION: Provides an example of a TypeSpec file (`models.tsp`) designed to be part of a scaffolding template. It uses Handlebars-style syntax (`{{parameters.ModelName}}`) for value interpolation, allowing dynamic content generation based on user input or template configuration during the `tsp init` process.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/writing-scaffolding-template.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nmodel {{parameters.ModelName}} {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Including Libraries in Scaffolding Template (JSON)\nDESCRIPTION: Demonstrates how to use the `libraries` array within a specific template's configuration (e.g., 'rest') to list TypeSpec libraries. These specified libraries will be automatically added as dependencies in the generated project's `package.json` and imported in `main.tsp`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/writing-scaffolding-template.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rest\": {\n    \"title\": \"REST API\",\n    \"description\": \"Create a new project representing a REST API\",\n    \"libraries\": [\"/rest\", \"@typespec/openapi3\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Wrapper Names for Unwrapped Arrays - TypeSpec\nDESCRIPTION: Applies @encodedName to both a model and an unwrapped array property, customizing the XML names for both the container and items. Demonstrates advanced control of XML element naming for each structure level. Requires referenced model definition to be in scope.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_18\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@encodedName(\"application/xml\", \"XmlPet\")\nmodel Pet {\n  @encodedName(\"application/xml\", \"ItemsTag\")\n  @Xml.unwrapped\n  tags: Tag[];\n}\n\n@encodedName(\"application/xml\", \"XmlTag\")\nmodel Tag {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Java HTTP Client Library via npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install the `@typespec/http-client-java` package. This package is required to enable the generation of Java HTTP client code from TypeSpec definitions. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install @typespec/http-client-java\n```\n```\n\n----------------------------------------\n\nTITLE: Providing Duration Dictionary Payloads - JSON\nDESCRIPTION: Contains a JSON dictionary mapping keys to ISO8601 duration strings. Supports endpoints requiring serialization and validation of duration values. Keys typically correspond to field names or identifiers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_151\n\nLANGUAGE: json\nCODE:\n```\n{ \"k1\": \"P123DT22H14M12.011S\" }\n```\n\n----------------------------------------\n\nTITLE: Deserializing Transport Format to Dog Model - TypeScript\nDESCRIPTION: Implements a deserialization function that reconstructs a Dog object from a plain JavaScript object (e.g., from JSON). Takes an input object, validates its presence, and maps id, name, and color fields to a Dog type. Expects the input to conform to the Dog shape and outputs a strongly-typed Dog. Requires the Dog interface and assumes valid property names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_spread.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonDogToApplicationTransform(input_?: any): Dog {\\n  if (!input_) {\\n    return input_ as any;\\n  }\\n  return {\\n    id: input_.id,\\n    name: input_.name,\\n    color: input_.color,\\n  }!;\\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Model Dictionary Payloads - JSON\nDESCRIPTION: Specifies a dictionary object where each key maps to a nested model object, suitable for endpoints that intake or return dictionaries with complex value types. Ensures values adhere to the expected model structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_155\n\nLANGUAGE: json\nCODE:\n```\n{ \"k1\": { \"property\": \"hello\" }, \"k2\": { \"property\": \"world\" } }\n```\n\n----------------------------------------\n\nTITLE: Setting up Client Context with Bearer Credential - TypeScript - typescript\nDESCRIPTION: This TypeScript function creates the client context necessary for authenticating with the API using a bearer token. It resolves the endpoint string from parameters, throws for missing parameters, and initializes the client with the provided credential and explicit 'bearer' authentication scheme. All relevant parameters are included, and the function is intended to be used internally by client classes like TestClient. Required dependencies include getClient, error handling for missing params, and compliant TypeScript configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/bearer.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function createTestClientContext(\\n  endpoint: string,\\n  credential: BasicCredential,\\n  options?: TestClientOptions,\\n): TestClientContext {\\n  const params: Record<string, any> = {\\n    endpoint: endpoint,\\n  };\\n  const resolvedEndpoint = \\\"{endpoint}\\\".replace(/{([^}]+)}/g, (_, key) =>\\n    key in params\\n      ? String(params[key])\\n      : (() => {\\n          throw new Error(`Missing parameter: ${key}`);\\n        })(),\\n  );\\n  return getClient(resolvedEndpoint, {\\n    ...options,\\n    credential,\\n    authSchemes: [\\n      {\\n        kind: \\\"http\\\",\\n        scheme: \\\"bearer\\\",\\n      },\\n    ],\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Package Details Model - TypeSpec - typespec\nDESCRIPTION: Declares a model to hold package-level metadata for a Protobuf namespace. Used in conjunction with the @package decorator, this model can define custom options and an explicit package name. The 'name' field is optional and, if omitted, is inferred from the namespace. The 'options' field supports string, boolean, or numeric values in a record object. No runtime dependencies but relies on TypeSpec package conventions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Protobuf.PackageDetails\n```\n\n----------------------------------------\n\nTITLE: Defining Protobuf Streaming Mode Enum - TypeSpec - typespec\nDESCRIPTION: Defines an enumerated type to represent the streaming mode of a Protobuf operation (duplex, input, output, or none). Used for controlling the code generation of streaming APIs. No dependencies. The values are interpreted by code generation tools to emit the correct Protobuf streaming semantics. Expected usage in operations and service definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\nenum TypeSpec.Protobuf.StreamMode\n```\n\n----------------------------------------\n\nTITLE: Optional Explicit Body Parameter - JSON\nDESCRIPTION: Demonstrates an endpoint that accepts an explicitly optional body parameter. The request body may be either a JSON object ({ \\\"name\\\": \\\"foo\\\" }) or omitted completely, testing correct handling of optionality semantics on the wire.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"name\\\": \\\"foo\\\" }\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec Definitions via Command Line\nDESCRIPTION: Uses the TypeSpec command-line tool (`tsp`) to compile TypeSpec definitions located in the current directory (`.`). The `--emit=@typespec/http-server-js` flag specifies that the JavaScript HTTP server emitter should be used to generate output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-js/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/http-server-js\n```\n\n----------------------------------------\n\nTITLE: Declaring the @info Decorator for Additional OpenAPI Information in TypeSpec\nDESCRIPTION: This decorator adds supplementary information to the OpenAPI `info` object, complementing the `title` and `version` automatically derived from the `@service` decorator. It targets a `Namespace` and requires an `additionalInfo` parameter of type `TypeSpec.OpenAPI.AdditionalInfo`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/README.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.OpenAPI.info(additionalInfo: valueof TypeSpec.OpenAPI.AdditionalInfo)\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Serializer for Bar Model\nDESCRIPTION: Presents the generated `jsonBarToTransportTransform` serializer function for the `Bar` model in `src/models/internal/serializers.ts`. This function transforms a `Bar` instance (or null/undefined) into its transport format by mapping the `address` property. It is intended to be called by serializers of models containing `Bar` properties, like `Foo`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/basic_model.md#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonBarToTransportTransform\nexport function jsonBarToTransportTransform(input_?: Bar | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    address: input_.address,\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Returning Custom HTTP Headers in TypeSpec Mock API Responses in TypeScript\nDESCRIPTION: This code shows how to return custom HTTP headers as part of a mock API response, including using values from the incoming request headers. It requires access to the request object as provided in the TypeSpec mock API handler. Parameters include the response 'headers' object, which is a dictionary of key-value pairs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/writing-mock-apis.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Return json\nreturn {\n  status: 200,\n  headers: {\n      MyHeader: \"value-1\"\n      MyHeaderOther: req.headers.MyRequestHeader\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Suppressing Namespace-Level Diagnostic with #suppress in TypeSpec\nDESCRIPTION: This TypeSpec snippet illustrates applying the '#suppress' directive at the namespace level. It suppresses the '@typespec/http/no-service-found' warning for the operations defined within the `Lib` namespace, providing a reason for the suppression.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/directives.md#_snippet_6\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n#suppress \"@typespec/http/no-service-found\" \"standard library route\"\nnamespace Lib {\n  @route(\"/test\") op get(): string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Providing Integer Dictionary Payloads - JSON\nDESCRIPTION: Demonstrates a JSON dictionary with integer values. Fits endpoints expecting mappings from string keys to integers, which may be 32 or 64-bit as shown in later examples. Ensures integer-only values per property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_153\n\nLANGUAGE: json\nCODE:\n```\n{ \"k1\": 1, \"k2\": 2 }\n```\n\n----------------------------------------\n\nTITLE: Enabling Protobuf Emitter in TypeSpec Configuration (YAML)\nDESCRIPTION: Shows the basic configuration within a TypeSpec configuration file (e.g., `tspconfig.yaml`) to enable the `@typespec/protobuf` emitter. By adding the emitter's package name to the `emit` array, the `tsp compile` command will automatically use this emitter when run in the project directory. This is an alternative to specifying the emitter on the command line.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/emitter.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/protobuf\"\n```\n\n----------------------------------------\n\nTITLE: Defining Default Property Visibility Model in TypeSpec (Typespec)\nDESCRIPTION: Provides the DefaultKeyVisibility model to apply a uniform visibility setting across all properties of a source object. It takes a Source with spread properties and a desired Visibility value. This utility model does not define properties itself but modifies the source's behavior via visibility.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nmodel DefaultKeyVisibility<Source, Visibility>\n\n```\n\n----------------------------------------\n\nTITLE: Extending Emitter Configuration with Options in YAML (yaml)\nDESCRIPTION: This YAML example extends the emitter configuration by adding a nested options section to supply custom options for @typespec/http-server-js. Options are keyed by emitter name and may include settings such as output directory or toggling express router generation. All option values and structures must follow emitter documentation requirements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-js/reference/emitter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/http-server-js\"\noptions:\n  \"@typespec/http-server-js\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Model with Default String Property\nDESCRIPTION: This TypeSpec code defines a `BlobName` model with a single string property `content`. This illustrates the default XML serialization behavior where the string value is placed within a child element named after the property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_18\n\nLANGUAGE: tsp\nCODE:\n```\nmodel BlobName {\n  content: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Unwrapped Complex Array Schema - OpenAPI3 YAML\nDESCRIPTION: The OpenAPI3 schema for an array of model-referenced items, supporting xml name configuration and allOf references. Inputs/outputs rely on TypeSpec models and expected XML arrays of objects. Ensures compatibility with XML codegen and documentation tools.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_14\n\nLANGUAGE: YAML\nCODE:\n```\nTag:\n  type: \"object\"\n  properties:\n    name:\n      type: \"string\"\n  xml:\n    name: \"XmlTag\"\nPet:\n  type: \"object\"\n  properties:\n    tags:\n      type: \"array\"\n      items:\n        allOf:\n          - $ref: \"#/definitions/Tag\"\n        xml:\n          name: tags\n  xml:\n    name: \"XmlPet\"\n```\n\n----------------------------------------\n\nTITLE: Providing Unknown-Type Array Payloads - JSON\nDESCRIPTION: Presents a JSON array intended to represent entries of indeterminate or mixed types, including numbers, strings, and objects with nullable properties. This supports API endpoints that allow heterogeneously-typed array elements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_148\n\nLANGUAGE: json\nCODE:\n```\n[1, 'hello', 'k3': null]\n```\n\n----------------------------------------\n\nTITLE: Transforming Spread Record Discriminated Union to Transport Format in TypeScript\nDESCRIPTION: Implements a TypeScript function that serializes a 'SpreadRecordForDiscriminatedUnion' object to a transport-friendly format, spreading record properties and copying the 'name' field. This function is dependent on the helper 'jsonRecordWidgetDataToTransportTransform' and expects an input adhering to the declared interface; null or undefined input passes through. The output merges the transformed record properties with the 'name' property, and limitations include reliance on consistent structure and dependencies on the correct transformation helper.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/discriminated_union_spread.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonSpreadRecordForDiscriminatedUnionToTransportTransform(\n  input_?: SpreadRecordForDiscriminatedUnion | null,\n): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    ...jsonRecordWidgetDataToTransportTransform(input_.additionalProperties),\n    name: input_.name,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Bearer Authenticated Client - TypeScript - typescript\nDESCRIPTION: This TypeScript class represents a client for the previously defined service, ensuring the credential (expected to conform to BearerTokenCredential) is provided upon instantiation. The constructor initializes internal context with endpoint, credential, and optional client settings. The method 'valid' performs the service operation, delegating the call and passing appropriate parameters. Dependencies include 'createTestClientContext', 'TestClientContext', 'BasicCredential', and correct TypeScript build setup.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/bearer.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\\n  #context: TestClientContext;\\n\\n  constructor(endpoint: string, credential: BasicCredential, options?: TestClientOptions) {\\n    this.#context = createTestClientContext(endpoint, credential, options);\\n  }\\n  async valid(options?: ValidOptions) {\\n    return valid(this.#context, options);\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing the TestClient Class for Operation Invocation in TypeScript\nDESCRIPTION: This TypeScript class encapsulates the logic for connecting to the API endpoint and invoking the 'create' operation. It initializes the internal context in the constructor, and exposes an async 'create' method that forwards required and optional parameters to the operation function. The class depends on 'TestClientContext', 'createTestClientContext', and type definitions for request options and operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/spread_with_nested.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  async create(id: string, name: string, options?: CreateOptions) {\n    return create(this.#context, id, name, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining List Interface for Resources - TypeSpec - typespec\nDESCRIPTION: Establishes an interface to encapsulate resource listing strategies for a given resource type. Accepts Resource and Error generic parameters for flexibility, providing a contract for collections retrieval operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/interfaces.md#_snippet_40\n\nLANGUAGE: typespec\nCODE:\n```\ninterface TypeSpec.Rest.Resource.ResourceList<Resource, Error>\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Model for Raw JSON/YAML Representation\nDESCRIPTION: This TypeSpec code defines the `TypeSpec.JsonSchema.Json<Data>` model. Its purpose is to signal that the provided `Data` template argument should be emitted as raw JSON or YAML data, rather than being interpreted as a schema definition. It contains a single property `value` of type `Data`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/data-types.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.JsonSchema.Json<Data>\n```\n\n----------------------------------------\n\nTITLE: Selecting Emitters via CLI for TypeSpec - Bash - bash\nDESCRIPTION: Demonstrates activating emitters from the command line with the '--emit' option, specifying either package names or file paths and supporting multiple invocations for different emitters. Used to control generation outputs directly from the CLI. Requires tsp and valid emitter plugins or files.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit emitter1 --emit /path/to/emitter2\n\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Handling Mode in tspconfig.yaml (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to set the DateTime handling mode for the @typespec/http-server-js emitter within a tspconfig.yaml file. It specifically sets the 'datetime' option to 'temporal-polyfill', indicating that the Temporal API polyfill should be imported and used for representing DateTime and Duration types. Other possible values are 'temporal' (assumes global Temporal) and 'date-duration' (uses native Date and custom Duration).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-js/CHANGELOG.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n  @typespec/http-server-js:\n    datetime: temporal-polyfill\n```\n\n----------------------------------------\n\nTITLE: Defining the Operation Options Interface in TypeScript\nDESCRIPTION: This TypeScript interface `GetOptions` defines the optional parameters that can be passed to the `get` operation function. It extends the base `OperationOptions`, providing a way to customize the request behavior, such as adding response handlers or other standard operation configurations, even though the specific operation has no defined parameters in the TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/no_parameters.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GetOptions extends OperationOptions {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Previous Incorrect Namespace Merging Behavior in TypeSpec\nDESCRIPTION: TypeSpec code showing how, prior to the fix in PR #4050, defining a namespace `MyOrg.MyProject.MyArea` within `MyOrg.MyProject` would incorrectly place model `A` directly under `MyOrg.MyProject.MyArea`, while `MyArea2` would correctly be under `MyOrg.MyProject.MyArea2`. This behavior is now changed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_31\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace MyOrg.MyProject;\n\nnamespace MyOrg.MyProject.MyArea {\n  model A {}\n}\n\nnamespace MyArea2 {\n  model B {}\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying a Model Property in a Later API Version (v3) in TypeSpec\nDESCRIPTION: This snippet illustrates how to modify an existing model property in a new API version (`v3`). The `name` property of the `Widget` model is renamed to `description` using `@renamedFrom(Versions.v3, \"name\")` and made optional using `@madeOptional(Versions.v3)`. The TypeSpec model reflects the current state (`description?: string`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/guide.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Widget {\n  @key\n  widgetId: string;\n\n  @renamedFrom(Versions.v3, \"name\")\n  @madeOptional(Versions.v3)\n  description?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing @knownValues with Union Type in TypeSpec (TSP)\nDESCRIPTION: Illustrates replacing the deprecated `@knownValues` decorator and associated enum with a union type containing string literals and a base `string` type. This provides a more standard way to define extensible enums or known values for scalar types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=tsp\n- enum MyKnownValues {a, b}\n- @knownValues(MyKnownValues)\n- scalar Custom extends string;\n+ union Custom {\n+   \"a\", \"b\", string\n+ };\n```\n```\n\n----------------------------------------\n\nTITLE: Serializing Model with Empty Array in XML - XML\nDESCRIPTION: This XML code represents a model with an empty array, shown as an empty 'items' tag. Both the input and output should preserve the self-closing empty array structure for compatibility. There are no external dependencies. This is specifically for scenarios where array fields are required but there may be no items.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_68\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithEmptyArray>\\n  <items />\\n</ModelWithEmptyArray>\n```\n\n----------------------------------------\n\nTITLE: Starting Spector Server in Background (Bash)\nDESCRIPTION: Demonstrates the `tsp-spector server start` command, which starts the mock API server in the background as an alternative to the `serve` command. It accepts the same arguments as `serve`, allowing specification of the scenario path, port (`--port`), and coverage file location (`--coverageFile`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/using-spector.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntsp-spector server start ./path/to/scenarios # Takes the same arguments as serve\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mixing of Positional and Named Template Arguments in TypeSpec\nDESCRIPTION: Highlights an error where positional arguments follow named arguments in a template instantiation, which is disallowed. This helps clarify the ordering requirements for template arguments in TypeSpec. Input: mixed named and positional arguments; Output: parser error on positional argument.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/templates.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\n// Invalid\nalias Example3 = Test<\n  V = \"example3\",\n  unknown,\n  ^^^^^^^ Positional template arguments cannot follow named arguments in the same argument list.\n>;\n```\n\n----------------------------------------\n\nTITLE: Nested Models with Custom Property XML Names - TypeSpec\nDESCRIPTION: Customizes the XML name for a nested property in a TypeSpec model using @encodedName. Effective for aligning serialized XML with external schema constraints. Suitable for object hierarchies requiring specific tag names at certain nesting levels.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_30\n\nLANGUAGE: TypeSpec\nCODE:\n```\nmodel Book {\n  @encodedName(\"application/xml\", \"xml-author\")\n  author: Author;\n}\n\nmodel Author {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OmitDefaults Model to Exclude Default Properties (Typespec)\nDESCRIPTION: OmitDefaults is a generic model intended to represent a set of properties from a source object, omitting properties that have default values. It works by spreading the Source parameter and omitting properties with default assignments, aiding in concise TypeSpec model definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\nmodel OmitDefaults<Source>\n\n```\n\n----------------------------------------\n\nTITLE: Unwrapped Array Property XML Serialization with @unwrapped (TSP & XML)\nDESCRIPTION: This demonstrates how applying @unwrapped to an array property in a TypeSpec model causes each element to be serialized directly within the parent node, eliminating the wrapper element. The resulting XML has each 'XmlTag' as a direct child of 'XmlPet'. Dependencies include the @unwrapped decorator; cannot be combined with @attribute.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/decorators.md#_snippet_10\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Pet {\n  @unwrapped tags: Tag[];\n}\n```\n\nLANGUAGE: xml\nCODE:\n```\n<XmlPet>\n  <XmlTag>\n    <name>string</name>\n  </XmlTag>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Compiling with Multiple Trace Areas Using Bash CLI (Bash)\nDESCRIPTION: Executes the TypeSpec Compiler with tracing enabled for both import-resolution and projection areas, specified via multiple --trace flags. This command requires the tsp CLI and a valid TypeSpec project, providing additional debugging output for the requested areas. Useful for users who need visibility into multiple aspects of compilation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/tracing.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --trace import-resolution --trace projection\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Union with Non-Discriminated Union Response - JSON\nDESCRIPTION: This JSON sample represents the expected response for GET /type/property/additionalProperties/spreadRecordNonDiscriminatedUnion. It illustrates how the payload can accommodate union types as properties, depicting objects with varied required keys as allowed by the union, ensuring all fields (such as name, prop1, prop2) are present and accept their respective union shapes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_223\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"abc\\\",\\n  \\\"prop1\\\": { \\\"kind\\\": \\\"kind0\\\", \\\"fooProp\\\": \\\"abc\\\" },\\n  \\\"prop2\\\": {\\n    \\\"kind\\\": \\\"kind1\\\",\\n    \\\"start\\\": \\\"2021-01-01T00:00:00Z\\\",\\n    \\\"end\\\": \\\"2021-01-02T00:00:00Z\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining @id Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@id` decorator from the `TypeSpec.JsonSchema` namespace. Applied to any TypeSpec type (`unknown`), it sets the JSON Schema `$id` property for that type's schema definition. If a `@baseUri` is active, this ID is relative to it. The `id` parameter takes a string value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.id(id: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for PATCH /type/model/visibility\nDESCRIPTION: This JSON represents the expected input body for a PATCH request to `/type/model/visibility`. It showcases sending a model containing properties intended for update operations, specifically 'updateProp'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_185\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"updateProp\": [1, 2]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring GetWithParamsOptions for Operation in TypeScript\nDESCRIPTION: This TypeScript interface extends a base 'OperationOptions' interface to define any additional options for the 'getWithParams' function. It's used to type the optional configuration parameter of the client operation and may inherit fields such as headers, request cancellation logic, or response handlers from its base. No additional custom fields are defined here; it's a placeholder for extensibility.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/only_required.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GetWithParamsOptions extends OperationOptions {}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP GET Operation Handler - TypeScript\nDESCRIPTION: Defines foo function to perform the HTTP GET request: builds request, uses the client, processes response using jsonWidgetToApplicationTransform, and throws if the status code or content type is unexpected. Depends on TestClientContext, FooOptions, jsonWidgetToApplicationTransform, and createRestError. Takes client context and options as input and returns a Promise of Widget on success. Handles response hooks and HTTP error handling consistent with REST best practices.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function foo(client: TestClientContext, options?: FooOptions): Promise<Widget> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return jsonWidgetToApplicationTransform(response.body)!;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing Transport Data into Application Dog Model in TypeScript\nDESCRIPTION: Converts transport data back into the Dog application model. It uses a helper to extract all keys except the primary ones as additionalProperties and transforms them via jsonRecordExtraFeatureToApplicationTransform. Inputs are typically plain JavaScript objects as received from transport; output is a Dog object. Requires the Dog interface and associated transform utilities.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_additional_properties.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonDogToApplicationTransform(input_?: any): Dog {\\n  if (!input_) {\\n    return input_ as any;\\n  }\\n  return {\\n    additionalProperties: jsonRecordExtraFeatureToApplicationTransform(\\n      (({ id, name, color, ...rest }) => rest)(input_),\\n    ),\\n    id: input_.id,\\n    name: input_.name,\\n    color: input_.color,\\n  }!;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Operation at Root for Route Resolution in TypeSpec\nDESCRIPTION: Example of an operation defined at the root level (outside any namespace). Route resolution behavior for such operations remained unchanged, resulting in the route `[\"/\"]` by default.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nop test(): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Sending Multipart File Requests with Content-Type in TypeScript (API Client)\nDESCRIPTION: This TypeScript function prepares and sends an HTTP POST request to a specified endpoint, attaching a multipart body containing a file with the required content type ('image/jpg'). It constructs the required request headers and body using utility functions and handles response conditional logic. Dependencies include a HTTP client, file part descriptor helpers, and error utilities. Inputs: client, request body (including profile image), and options (including override for content-type). Output: Promise that resolves on success, exceptions thrown on error.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/file_content_type.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function imageJpegContentType(\n  client: TestClientContext,\n  body: FileWithHttpPartSpecificContentTypeRequest,\n  options?: ImageJpegContentTypeOptions,\n): Promise<void> {\n  const path = parse(\"/check-filename-and-specific-content-type-with-httppart\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      \"content-type\": options?.contentType ?? \"multipart/form-data\",\n    },\n    body: [createFilePartDescriptor(\"profileImage\", body.profileImage, \"image/jpg\")],\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying an Operation as an Action with TypeSpec REST - TypeSpec\nDESCRIPTION: Shows how to designate a TypeSpec operation as an action, optionally providing a custom name. This decorator is scoped to resource items (e.g., /pets/{petId}/my-action), and is attached to operations, requiring that the target is a TypeSpec operation. The 'name' parameter can be omitted to default to the operation's name.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/rest/README.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.Rest.action(name?: valueof string)\n```\n\n----------------------------------------\n\nTITLE: TypeSpec Protobuf Unsupported Return Type Error\nDESCRIPTION: This snippet shows an error message from the TypeSpec compiler related to the `@typespec/protobuf` library. It indicates that a method defined in `/test/main.tsp` at line 10, column 20, has an invalid return type. For Protobuf compatibility, methods must explicitly return a named Model type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/test/scenarios/type-validation/diagnostics.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/test/main.tsp:10:20 - error @typespec/protobuf/unsupported-return-type: Protobuf methods must return a named Model\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Streams Package via npm - Bash\nDESCRIPTION: This Bash snippet demonstrates how to install the @typespec/streams package using npm directly into a TypeSpec specification project. No dependencies other than npm are required. Run this command in the root directory of your TypeSpec project. Successful execution installs the package locally, making the stream extensions available to the project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/streams/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/streams\n```\n\n----------------------------------------\n\nTITLE: Encode Array of Duration Properties as Float Seconds - JSON\nDESCRIPTION: Encodes an array of durations, each as a floating-point second value. The \\\"value\\\" field is a JSON array (e.g., [35.625, 46.75]). Serialization logic must maintain all array values exactly, and clients/servers must parse arrays to corresponding sequence types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": [35.625, 46.75]\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": [35.625, 46.75]\\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input Body for JsonMergePatch updateResource\nDESCRIPTION: Specifies the expected JSON input body for the `PATCH /json-merge-patch/update/resource` endpoint. This tests updating a resource using `application/merge-patch+json`, demonstrating that `null` values should be serialized to explicitly clear fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": null,\n  \"map\": {\n    \"key\": {\n      \"description\": null\n    },\n    \"key2\": null\n  },\n  \"array\": null,\n  \"intValue\": null,\n  \"floatValue\": null,\n  \"innerModel\": null,\n  \"intArray\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Floating-Point Values to Enum Members in TypeSpec\nDESCRIPTION: Shows that enum members in TypeSpec can also be assigned floating-point numeric values using the `:` operator, allowing for non-integer numeric constants.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/enums.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nenum Hour {\n  Zero: 0,\n  Quarter: 0.25,\n  Half: 0.5,\n  ThreeQuarter: 0.75,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: OpenAPI YAML Output for anyOf Union Types - YAML\nDESCRIPTION: Displays the resulting OpenAPI YAML schema for a TypeSpec union of models, where 'Pet' uses anyOf and references each subtype. Useful for schema clients that want to allow several alternatives without restrictions. Inputs: TypeSpec union. Outputs: anyOf-based OpenAPI schema.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nPet:\n  anyOf:\n    - $ref: \"#/components/schemas/Cat\"\n    - $ref: \"#/components/schemas/Dog\"\n```\n\n----------------------------------------\n\nTITLE: Adding TypeSpec HTTP Client JS as Peer Dependency in Library - Bash\nDESCRIPTION: This snippet shows how to install @typespec/http-client-js as a peer dependency using the --save-peer option with npm. It is intended for use within library projects that expect consumers to provide @typespec/http-client-js, ensuring proper peer dependency management in package.json. Requires npm 7+ for the --save-peer flag and alters peerDependencies in the manifest.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-js/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/http-client-js\n```\n\n----------------------------------------\n\nTITLE: Explicitly Disabling PATCH Optionality in TypeSpec/HTTP\nDESCRIPTION: Shows the correct way to disable effective PATCH optionality in `@typespec/http`. Instead of relying on the deprecated `@parameterVisibility`, the `implicitOptionality: false` option should be passed explicitly to the `@patch` decorator.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_15\n\nLANGUAGE: tsp\nCODE:\n```\n@patch(#{ implicitOptionality: false })\nop example(@bodyRoot resource: Resource): Resource;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Completion for Inherited Properties in Extended Models (TypeSpec)\nDESCRIPTION: Shows an example of TypeSpec code where IDE completion (`┆`) suggests properties (`name`, `description`) inherited from the base model (`Device`) when defining the extending model (`Phone`). This feature was added in PR #3280.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_39\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Device {\n  name: string;\n  description: string;\n}\n\nmodel Phone extends Device {\n  ┆\n} | [name]\n  | [description]\n```\n\n----------------------------------------\n\nTITLE: Defining Property-Level XML Namespaces Inline in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a `Book` model with a default namespace ('smp') and overrides the namespace for the `author` property using another inline `@Xml.ns` decorator ('ns2'). The `title` property explicitly uses the default 'smp' namespace.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_39\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@Xml.ns(\"http://example.com/schema\", \"smp\")\nmodel Book {\n  id: integer;\n\n  @Xml.ns(\"http://example.com/schema\", \"smp\")\n  title: string;\n\n  @Xml.ns(\"http://example.com/ns2\", \"ns2\")\n  author: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: OpenAPI3 Representation with Multiple Normalized Namespaces\nDESCRIPTION: This YAML snippet shows the OpenAPI3 schema corresponding to the TypeSpec definition using multiple normalized namespaces. It includes the schema for `Book` with nested `xml` objects for property-specific namespaces, and a separate schema definition for the `Namespaces` enum containing both namespace URIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nBook:\n  type: object\n  properties:\n    id:\n      type: integer\n    title:\n      type: string\n       xml:\n        prefix: \"smp\"\n        namespace: \"http://example.com/schema\"\n    author:\n      type: string\n      xml:\n        prefix: \"ns2\"\n        namespace: \"http://example.com/ns2\"\n  xml:\n    prefix: \"smp\"\n    namespace: \"http://example.com/schema\"\nNamespaces:\n  type: string\n  enum:\n    - http://example.com/schema\n    - http://example.com/ns2\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Model-Level XML Namespace Inline in TypeSpec\nDESCRIPTION: This TypeSpec snippet defines a `Book` model and applies an XML namespace ('http://example.com/schema') with the prefix 'smp' to the entire model using the `@Xml.ns` decorator directly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_36\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@Xml.ns(\"http://example.com/schema\", \"smp\")\nmodel Book {\n  id: integer;\n  title: string;\n  author: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec call-decorator Rule (JSONC)\nDESCRIPTION: Demonstrates how to enable the @typespec/call-decorator linting rule with a warning level in a configuration file. The code is intended to be added to a project's linter configuration to enforce the use of context.call when invoking decorators. Requires a linter that understands JSONC and the TypeSpec ruleset; no parameters except for the rule setting are present.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/eslint-plugin-typespec/docs/rules/call-decorator.md#_snippet_0\n\nLANGUAGE: jsonc\nCODE:\n```\n{\\n  \\\"@typespec/call-decorator\\\": \\\"warn\\\",\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/http-server-js via npm\nDESCRIPTION: Installs the `@typespec/http-server-js` package using the Node Package Manager (npm). This package provides the TypeSpec emitter necessary for generating JavaScript HTTP server code.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-js/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-server-js\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/versioning in a Spec (Bash)\nDESCRIPTION: Installs the `@typespec/versioning` library as a regular dependency using npm. This command is intended for use within a specific TypeSpec project ('spec') where the versioning capabilities will be directly utilized.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install @typespec/versioning\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Default (Missing) Optional Collections of Bytes Properties - JSON\nDESCRIPTION: A JSON response with an omitted optional collection, giving an empty object. Indicates that collection properties may be fully absent when optional, to test boundary and default cases in array-handling code paths.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_270\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Collection of Strings (NonNull) Patch Request - JSON\nDESCRIPTION: This PATCH /type/property/nullable/collections/string/non-null patch body expects a non-null string collection, indicating updates or replacements of the array, with the required property as a constant.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_247\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": [\\\"hello\\\", \\\"world\\\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding `@typespec/asset-emitter` Dependency in package.json\nDESCRIPTION: This diff snippet shows how to add the `@typespec/asset-emitter` package as a dependency in a `package.json` file. This is necessary following the deprecation of the `@typespec/compiler/emitter-framework` export.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\ndiff lang=json title=package.json\n\"dependencies\": {\n+   \"@typespec/asset-emitter\": \"0.67.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum Object Properties for JSON Schema in TypeSpec\nDESCRIPTION: The `@TypeSpec.JsonSchema.minProperties` decorator sets the minimum number of properties required for an object type (`Record<unknown>`) or a model property representing an object in the generated JSON Schema. It requires an integer `value` parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/decorators.md#_snippet_11\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.minProperties(value: valueof int32)\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing in TypeSpec Configuration File (YAML)\nDESCRIPTION: Shows two ways to configure tracing in tspconfig.yaml: as a string wildcard to enable all traces, or as an array to enable specific trace areas. This requires tspconfig.yaml to be present in the project root, and affects all compilation runs that use this configuration. Accepts either a single string wildcard or an array of area names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/tracing.mdx#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntrace: *\n\ntrace:\n  - import-resolution\n  - projection\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec HTTP Server Code Generator as a Peer Dependency - Bash\nDESCRIPTION: Adds the @typespec/http-server-js package as a peer dependency in a library project using npm. This approach is recommended when developing a library that relies on the TypeSpec HTTP server generator but expects the consumer to provide the dependency. The '--save-peer' flag ensures the dependency is listed as a peer in the package's configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-js/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/http-server-js\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Encoded DateTime Values\nDESCRIPTION: Presents an example JSON payload illustrating the resulting encoded values for `utcDateTime` and `offsetDateTime` properties based on default (`rfc3339`) and custom (`rfc7231`, `unixTimestamp`) encodings defined in the preceding TypeSpec `User` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/encoding.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"createdAt\": \"2022-10-12T07:20:50.52Z\",\n  \"updatedAt\": \"2022-10-25T07:20:50.52+07:00\",\n  \"createdAtPretty\": \"Wed, 12 Oct 2022 07:20:50 GMT\",\n  \"updatedAtPretty\": \"Tue, 25 Oct 2022 00:20:50 GMT\",\n  \"createdAtUnix\": 1493938410\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Handling 200 JSON Response Returning Widget - TypeScript\nDESCRIPTION: Implements the REST GET client function for \"/widgets\" that expects a Widget in the response body. If the response is HTTP 200 and Content-Type is JSON, the body is deserialized to a Widget using jsonWidgetToApplicationTransform. Supports a user-provided onResponse callback and throws an error otherwise. Requires supporting types: WidgetsClientContext, ReadOptions, Widget, parse, and createRestError.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/basic-response.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport async function read(client: WidgetsClientContext, options?: ReadOptions): Promise<Widget> {\n  const path = parse(\"/widgets\").expand({});\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 200 && response.headers[\"content-type\"]?.includes(\"application/json\")) {\n    return jsonWidgetToApplicationTransform(response.body)!;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Deserializer for Foo Model\nDESCRIPTION: Displays the generated `jsonFooToApplicationTransform` function in `src/models/internal/serializers.ts`. This function deserializes a plain JavaScript object (received from transport, represented as `any`) back into a strongly-typed `Foo` instance by mapping the `name` and `age` properties. It handles potential null/undefined input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/basic_model.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonFooToApplicationTransform\nexport function jsonFooToApplicationTransform(input_?: any): Foo {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    name: input_.name,\n    age: input_.age,\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing Non-JSON Schema Types via $defs in JSON\nDESCRIPTION: Illustrates the JSON `$ref` syntax used by the TypeSpec JSON Schema emitter to reference non-JSON Schema types. These types are typically placed in the `$defs` section of the referencing schema, and the `$ref` uses a JSON Pointer fragment identifier (`#/$defs/{TypeNameHere}`) to point to the specific definition. This occurs when `emitAllModels` and `emitAllRefs` are false (default behavior).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/guide.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"#/$defs/{TypeNameHere}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Scalar Types for Arrays - TypeSpec\nDESCRIPTION: Declares a custom scalar extending string and uses it as an array field in a model. The @encodedName decorator applies to both scalar and model. With @Xml.unwrapped, the output array items inherit the custom type name in XML. Useful for fine-tuned XML output. Inputs/outputs relate to custom scalar types, no complex dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_6\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@encodedName(\"application/xml\", \"ItemsName\")\nscalar tag extends string;\n\n@encodedName(\"application/xml\", \"XmlPet\")\nmodel Pet {\n  @Xml.unwrapped\n  tags: tag[];\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for Type_Array_Float32Value_put Endpoint\nDESCRIPTION: This JSON snippet represents the expected request body for the PUT request to the `/type/array/float32` endpoint. The request body should be a JSON array containing a single 32-bit floating-point number.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_131\n\nLANGUAGE: json\nCODE:\n```\n```json\n[43.125]\n```\n```\n\n----------------------------------------\n\nTITLE: Illustrating Correct Directive Placement in TypeSpec\nDESCRIPTION: Shows the corrected version of the previous invalid example. The `#suppress` directive is moved from the template parameter to the model statement (`model M<T> {}`), which is a valid placement location.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_14\n\nLANGUAGE: typespec\nCODE:\n```\n#suppress example\nmodel M<T> {}\n```\n\n----------------------------------------\n\nTITLE: Importing the Typekit Access Object ($)\nDESCRIPTION: This TypeScript snippet demonstrates how to import the primary access object `$` from the experimental typekit module in `@typespec/compiler`. This `$` object serves as the entry point for accessing all core and extended typekit APIs needed for interacting with the TypeSpec compiler's type graph and metadata.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-framework.md#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { $ } from \"@typespec/compiler/experimental/typekit\";\n```\n\n----------------------------------------\n\nTITLE: Defining License Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.OpenAPI.License` model. This model specifies the license information for the exposed API within the OpenAPI document. It requires the license name and includes an optional URL linking to the license details.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/data-types.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.OpenAPI.License\n```\n```\n\n----------------------------------------\n\nTITLE: Invalid Template Argument Instantiation Example in TypeSpec\nDESCRIPTION: Demonstrates a compilation error when instantiating an alias with an argument that does not satisfy its constraint. Attempting 'alias Bar = Foo<123>;' triggers a type error. Purpose: clarify error output for incorrect template usage. Input: literal 123; Output: compilation error.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/templates.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nalias Bar = Foo<123>;\n                ^ Type '123' is not assignable to type 'TypeSpec.string'\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input Body for JsonMergePatch createResource\nDESCRIPTION: Specifies the expected JSON input body for the `PUT /json-merge-patch/create/resource` endpoint test case. This body is used to create a resource using standard JSON.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Madge\",\n  \"description\": \"desc\",\n  \"map\": {\n    \"key\": {\n      \"name\": \"InnerMadge\",\n      \"description\": \"innerDesc\"\n    }\n  },\n  \"array\": [\n    {\n      \"name\": \"InnerMadge\",\n      \"description\": \"innerDesc\"\n    }\n  ],\n  \"intValue\": 1,\n  \"floatValue\": 1.25,\n  \"innerModel\": {\n    \"name\": \"InnerMadge\",\n    \"description\": \"innerDesc\"\n  },\n  \"intArray\": [1, 2, 3]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the @useDependency Decorator in TypeSpec\nDESCRIPTION: Defines the syntax for the `@TypeSpec.Versioning.useDependency` decorator. This decorator specifies that a namespace or a specific version enum member depends on a particular version (or versions) of another versioned library. It accepts a variable number of `EnumMember` arguments representing the dependency versions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Versioning.useDependency(...versionRecords: EnumMember[])\n```\n```\n\n----------------------------------------\n\nTITLE: Expected Request/Response Body for Default (RFC3339) Encoded Datetime Property (JSON)\nDESCRIPTION: This JSON structure defines the expected request and response body for the `POST /encode/datetime/property/default` endpoint. It tests operations where a model contains a 'value' property of type datetime, using the default encoding (RFC3339).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"2022-08-26T18:38:00.000Z\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"2022-08-26T18:38:00.000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Service in TypeSpec\nDESCRIPTION: This TypeSpec code defines a service named 'Test' within its own namespace. It includes a single operation 'foo' that takes no arguments and returns void. This definition implies a server with a default endpoint configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/server/no-server.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@service\nnamespace Test;\n\nop foo(): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating from `@discriminator` to `@discriminated` in TypeSpec\nDESCRIPTION: This diff demonstrates the migration from the deprecated `@discriminator` decorator to the new `@discriminated` decorator for defining discriminated unions in TypeSpec. The new decorator allows for more explicit configuration, including specifying the discriminator property name and envelope behavior.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\ndiff lang=\"tsp\"\n-@discriminator(\"type\")\n+@discriminated(#{envelope: \"none\", discriminatorPropertyName: \"type\"})\nunion Pet;\n```\n\n----------------------------------------\n\nTITLE: Describing Resource Creation Response - TypeSpec REST - typespec\nDESCRIPTION: Specifies a typed model TypeSpec.Rest.Resource.ResourceCreatedResponse<Resource> that represents a successful response (HTTP 201) after creating a resource. Includes a status code property and a body containing the created resource instance. The resource type must be supplied as a parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/data-types.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Rest.Resource.ResourceCreatedResponse<Resource>\n```\n\n----------------------------------------\n\nTITLE: Using @path on Optional Property (Now Invalid) in TypeSpec\nDESCRIPTION: Shows a pattern that was previously allowed but is now invalid: applying the `@path` decorator to an optional property (`name?: string`) without a default value. This will cause an error diagnostic during compilation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_20\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Foo {\n  @path\n  name?: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Binding Generated Router to Node.js HTTP Server\nDESCRIPTION: Illustrates binding the generated router's `dispatch` method to the `request` event of a standard Node.js HTTP server created using the `http` module. This setup allows the router to handle incoming HTTP requests directed to the server.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-js/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = http.createServer();\n\nserver.on(\"request\", router.dispatch);\n\nserver.listen(8080, () => {\n  console.log(\"Server listening on http://localhost:8080\");\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Resource with Custom Pattern and Field Options - Protobuf\nDESCRIPTION: This protobuf snippet defines a Shelf resource in a proto message, including platform-specific annotations. Custom options specify the resource type and URI pattern for RESTful resource names. The field 'name' is marked required, with additional resource reference options. Dependencies: This requires the Google API annotations, used by tools like gRPC transcoding and client/server code generation. Inputs are Shelf creation payloads; outputs include auto-generated RESTful path representations for the Shelf resource.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/grpc-library-example/README.md#_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\n// A Shelf contains a collection of books with a theme.\\nmessage Shelf {\\n  option (google.api.resource) = {\\n    type: \\\"library-example.googleapis.com/Shelf\\\",\\n    pattern: \\\"shelves/{shelf_id}\\\"\\n  };\\n  // The resource name of the shelf.\\n  // Shelf names have the form `shelves/{shelf_id}`.\\n  // The name is ignored when creating a shelf.\\n  string name = 1 [\\n    (google.api.field_behavior) = REQUIRED,\\n    (google.api.resource_reference).type = \\\"library-example.googleapis.com/Shelf\\\"\\n  ];\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Enumerating Parent Model Keys Dynamically - TypeSpec REST - typespec\nDESCRIPTION: Declares a generic model TypeSpec.Rest.Resource.ParentKeysOf<Resource> designed to extract or expose parent key identifiers from the given resource model, supporting scenarios like hierarchical resource relationships. Similar to KeysOf but focused on parent keys. No explicit properties are defined.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/rest/reference/data-types.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpec.Rest.Resource.ParentKeysOf<Resource>\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec Project Using the HTTP Server CSharp Emitter via CLI - Bash\nDESCRIPTION: Demonstrates how to invoke the TypeSpec compiler with the @typespec/http-server-csharp emitter using the command line interface. This requires the 'tsp' CLI tool to be installed and available in the system PATH. The working directory should contain a valid TypeSpec project. The '--emit' flag specifies which emitter to apply during compilation; outputs will be written according to emitter configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/servers/http-server-csharp/reference/emitter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/http-server-csharp\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSpec Init Templates URLs in VS Code Extension (JSON)\nDESCRIPTION: This snippet demonstrates how to specify additional template sources using the \"typespec.initTemplatesUrls\" setting in VS Code's configuration file, enabling users to augment the templates available for creating TypeSpec projects. Each entry contains a \"name\" and a \"url\", where \"url\" must point to a valid JSON file that lists template details. The input format is an array of objects, each specifying a display name and a URL, and must be inserted in settings.json or relevant settings scope. Expected output is the effective extension of available TypeSpec project templates; invalid URLs or malformed entries will cause the extension to ignore those entries.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/typespec-vscode/CHANGELOG.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"typespec.initTemplatesUrls\": [\n    {\n      \"name\": \"displayName\",\n      \"url\": \"https://urlToTheFileContainsTemplates\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/http-client-csharp in a Library (Bash)\nDESCRIPTION: This command uses npm to install the `@typespec/http-client-csharp` package with the `--save-peer` flag. This is intended for use when developing a TypeSpec library that itself relies on the C# HTTP client emitter, ensuring consumers of the library provide their own compatible version.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-csharp/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/http-client-csharp\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Type_Array_DatetimeValue_get Endpoint\nDESCRIPTION: This JSON snippet represents the expected response body for the GET request to the `/type/array/datetime` endpoint. It should return a JSON array containing a single datetime string in ISO 8601 format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_126\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\"2022-08-26T18:38:00Z\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing the Client Class with GET Method in TypeScript\nDESCRIPTION: This TypeScript class `TestClient` serves as the entry point for interacting with the service. It holds the client context (`TestClientContext`) initialized in the constructor and provides a `get` method that delegates the actual operation call to the `get` function defined in `testClientOperations.ts`, passing the context and any provided options. Located in `src/testClient.ts`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/default_value_as_optional.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  async get(options?: GetOptions) {\n    return get(this.#context, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Disambiguated Widget Interface for Name Collision in TypeScript\nDESCRIPTION: This interface ('Widget_2') is generated to resolve a name collision caused by having two 'Widget' models in different namespaces. It maps the nested 'Foo.Widget' TypeSpec model to a unique TypeScript name. This ensures both models can coexist in the same file without conflicts. All fields are explicitly typed as per the TypeSpec source.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/basic.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Widget_2 {\n  id: string;\n  kind: \"2\";\n  weight: number;\n  color: \"red\" | \"blue\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Get Operation Options Interface - TypeScript - typescript\nDESCRIPTION: Declares the 'GetOptions' interface used to provide optional parameters to the 'get' operation. Extends from 'OperationOptions' and includes an optional 'break_' property to reflect the reserved parameter 'break'. Dependencies include 'OperationOptions', which must be defined elsewhere in the project. Allows for loose extension and future flexibility in options structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/reserved_names.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GetOptions extends OperationOptions {\n  break_?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Output Directory in New `$onEmit` Signature (TypeScript)\nDESCRIPTION: Code snippet demonstrating how to access the emitter output directory within the new `$onEmit` function signature in TypeScript. It uses the `emitterOutputDir` property from the `context` parameter (`EmitContext`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport function $onEmit(context: EmitContext) {\n  const outputDir = context.emitterOutputDir;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Call for Optional Date Query Parameter (TypeScript)\nDESCRIPTION: This TypeScript function `defaultEncoding` handles the optional `value` parameter defined in TypeSpec. It accepts `TestClientContext` and an optional `options` object which may contain the `value` (Date). It conditionally includes and serializes the `value` using `dateRfc3339Serializer` only if it's provided in the options when constructing the path for the GET request to `/default`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/query_date.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/api/testClientOperations.ts function defaultEncoding\nexport async function defaultEncoding(\n  client: TestClientContext,\n  options?: DefaultEncodingOptions,\n): Promise<void> {\n  const path = parse(\"/default{?value}\").expand({\n    ...(options?.value && { value: dateRfc3339Serializer(options.value) }),\n  });\n  const httpRequestOptions = {\n    headers: {},\n  };\n  const response = await client.pathUnchecked(path).get(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for a Model Containing an `Http.File` Property\nDESCRIPTION: Provides an example JSON structure representing the output of an operation that returns a model containing an `Http.File` property. Shows how the `File` property (`attachment`) is serialized inline as a JSON object with `contentType`, `filename`, and `contents` (represented as `<base64>`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"id\": \"<string>\",\n  \"attachment\": {\n    \"contentType\": \"<string?>\",\n    \"filename\": \"<string?>\",\n    \"contents\": \"<base64>\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining PlainData Utility Model in TypeSpec\nDESCRIPTION: Defines the `TypeSpec.Http.PlainData` utility model. It takes a `Data` model as a template parameter and generates a new model containing the same properties as `Data`, but without any HTTP-specific decorators like `@query`, `@header`, `@body`, or `@path`. This is useful for obtaining a representation of the data structure independent of its HTTP binding.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_35\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel TypeSpec.Http.PlainData<Data>\n```\n```\n\n----------------------------------------\n\nTITLE: Stopping the Spector Mock API Server (Bash)\nDESCRIPTION: Shows commands to stop a running `tsp-spector` server instance using `tsp-spector server stop`. The default command stops the server running on the default port. The `--port` argument is used to stop a server running on a specific custom port if it wasn't started on the default one.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/using-spector.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntsp-spector server stop             # Stop at the default port\ntsp-spector server stop --port 1234 # If started the server at another port\n```\n\n----------------------------------------\n\nTITLE: Scaffolding New Implementation Files with hsjs-scaffold (Bash)\nDESCRIPTION: Command using `npx hsjs-scaffold` to generate missing implementation files after adding new interfaces or resources in the TypeSpec definition and recompiling. This command is useful for creating necessary new files (like controller files for new resources) without overwriting existing files that might have been modified with custom business logic.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-javascript.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx hsjs-scaffold\n```\n\n----------------------------------------\n\nTITLE: Executing Migration Script - TypeSpec Migrate CLI - Bash\nDESCRIPTION: This snippet provides the bash command to run the experimental TypeSpec migration tool, which scans and updates TypeSpec or Cadl packages to replace deprecated uses such as 'zonedDateTime'. Requires: Node.js and @typespec/migrate npm package. Usage: run from the package root; updates all TypeSpec files in context. Outputs transformed source files with updated datetime type references.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-04-11.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @typespec/migrate\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Multipart Client Operation in TypeScript\nDESCRIPTION: This TypeScript function 'foo' implements the client-side logic for the corresponding TypeSpec operation. It takes a client context, the structured body payload, and optional request options. It constructs an HTTP POST request, setting the 'content-type' header (defaulting to 'multipart/form-data') and formatting the body as an array of parts suitable for multipart encoding. It sends the request using the client's 'pathUnchecked' method, handles the response (expecting a 204 status code), and throws an error for unexpected responses.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/multipart/anonymous_part.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport async function foo(\n  client: TestClientContext,\n  body: {\n    temperature: {\n      body: number;\n      contentType: \"text/plain\";\n    };\n  },\n  options?: FooOptions,\n): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      \"content-type\": options?.contentType ?? \"multipart/form-data\",\n    },\n    body: [\n      {\n        name: \"temperature\",\n        body: body.temperature.body,\n      },\n    ],\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Scalar Array Schema - OpenAPI3 YAML\nDESCRIPTION: Defines an OpenAPI3 schema for a custom string scalar array. The xml.name parameter in items matches the scalar's encoded name, configured in TypeSpec. Ensures API contract exposes the correct XML naming for each array item.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_8\n\nLANGUAGE: YAML\nCODE:\n```\nPet:\n  type: \"object\"\n  properties:\n    tags:\n      type: \"array\"\n      items:\n        type: string\n        xml:\n          name: tags\n  xml:\n    name: \"XmlPet\"\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec Project with C# Emitter - Bash\nDESCRIPTION: Shows how to invoke the TypeSpec compiler from the command line to emit C# server code using the installed @typespec/http-server-csharp emitter. This command assumes that TypeSpec (tsp) and the required emitter are installed. The command will compile the TypeSpec project in the current directory and generate server-side C# code as configured.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/http-server-csharp\n```\n\n----------------------------------------\n\nTITLE: Testing Versioned Server Operation with Default Path API Version\nDESCRIPTION: Defines a HEAD endpoint for a versioned server using a path-based `api-version` parameter with a default value ('2022-12-01-preview'). The expected URL should use this default version (e.g., '/with-path-api-version/2022-12-01-preview').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_112\n\nLANGUAGE: http\nCODE:\n```\nhead /server/versions/versioned/with-path-api-version\n```\n\n----------------------------------------\n\nTITLE: Migrating `@service` Decorator Options Syntax in TypeSpec\nDESCRIPTION: This diff shows the required syntax change for the `@service` decorator options. The options should now be passed as a TypeSpec model expression `#{}` instead of an object literal `{}`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\ndiff lang=\"tsp\"\n-@service({title: \"My service\"})\n+@service(#{title: \"My service\"})\n```\n\n----------------------------------------\n\nTITLE: Renaming Test Command to 'knock'\nDESCRIPTION: Notes the renaming of the 'server-test' command to 'knock' as part of version 0.1.0-alpha.10 features, linked to Pull Request #6543.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/CHANGELOG.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRename `server-test` command to `knock`\n```\n\n----------------------------------------\n\nTITLE: Extending package.json exports for Testing Modules - JSONC\nDESCRIPTION: This snippet extends the package.json exports field to include a testing endpoint with both default (JavaScript) and type (TypeScript) entries. By specifying exports for './testing', this allows consumers and test runners to import compiled testing utilities and types, respectively.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_15\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ...\n  \"main\": \"dist/src/index.js\",\n  \"exports\": {\n    \".\": {\n      \"default\": \"./dist/src/index.js\",\n      \"types\": \"./dist/src/index.d.ts\",\n    },\n    \"./testing\": {\n      \"default\": \"./dist/src/testing/index.js\",\n      \"types\": \"./dist/src/testing/index.d.ts\",\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Explicit @body to Control HTTP Return Types - TypeSpec\nDESCRIPTION: Provides a workaround for returning explicit body content in operations that would otherwise resolve to void. Uses the @body decorator to explicitly specify body structure, ensuring metadata or visibility modifications do not result in no body being returned. Suitable for users needing granular control over HTTP responses in TypeSpec APIs. Assumes use of the @typespec/http library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-05-07.md#_snippet_1\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop b1(): {\n  @body _: {};\n};\nop b2(): {\n  @body _: {\n    @visibility(\"none\") prop: string;\n  };\n};\nop b3(): {\n  @body _: {\n    @added(Versions.v2) prop: string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Extracting Substring After Name Match from ID String in Java\nDESCRIPTION: This Java snippet extracts the part of a string identifier that appears after a specified name segment, splitting the ID by '/'. Dependencies include java.util.Arrays and java.util.Iterator. It expects a non-null ID and a non-empty name, splitting the ID and scanning for the name (case-insensitively); if found, it returns the segment directly after, or null otherwise. It handles null input for the ID and skips empty or whitespace-only sections.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-mgmt/src/main/resources/ResourceManagerUtils_getValueFromIdByName.txt#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nif (id == null) {\\n    return null;\\n}\\nIterator<String> itr = Arrays.stream(id.split(\"/\")).iterator();\\nwhile (itr.hasNext()) {\\n    String part = itr.next();\\n    if (part != null && !part.trim().isEmpty()) {\\n        if (part.equalsIgnoreCase(name)) {\\n            if (itr.hasNext()) {\\n                return itr.next();\\n            } else {\\n                return null;\\n            }\\n        }\\n    }\\n}\\nreturn null;\n```\n\n----------------------------------------\n\nTITLE: Writing and Running Spector Attribute Tests in C#\nDESCRIPTION: Shows a C# test using the SpectorTest attribute to validate the valid API key scenario against a generated Spector stub library. The SpectorTest attribute checks if the library is stubbed and determines if the test should be ignored or executed. Requires dependencies on a SpectorTest framework, NUnit-style Assert, and access to the generated client classes. The test expects a 204 HTTP response for a valid API call.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-csharp/generator/docs/spector.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[SpectorTest]\npublic Task Valid() => Test(async (host) =>\n{\n    ClientResult response = await new ApiKeyClient(host, new ApiKeyCredential(\"valid-key\"), null).ValidAsync();\n    Assert.AreEqual(204, response.GetRawResponse().Status);\n});\n```\n\n----------------------------------------\n\nTITLE: Suppressing Deprecated Diagnostics via CLI - Bash - bash\nDESCRIPTION: Demonstrates usage of the '--ignore-deprecated' CLI flag to suppress all deprecation warnings during compilation, allowing for cleaner output when working with transitional code. Requires tsp and a valid TypeSpec project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --ignore-deprecated\n\n```\n\n----------------------------------------\n\nTITLE: Encode Duration Property as Float Seconds - JSON\nDESCRIPTION: Presents request and response using a duration property serialized as a floating-point value of seconds, equivalent to the float64 approach. No additional dependencies are needed beyond JSON support; maintain precision for the \\\"value\\\" number.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": 35.625\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": 35.625\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracing Areas in TypeSpec Projects - YAML - yaml\nDESCRIPTION: Demonstrates configuration of compile-time tracing settings both via a wildcard to trace all operations and a list to specify explicit trace areas. Useful for diagnostic or development purposes. Only requires the TypeSpec compiler.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# Trace all.\ntrace: *\n\n# or specific areas\ntrace:\n  - import-resolution\n  - projection\n\n```\n\n----------------------------------------\n\nTITLE: Defining the @streamOf Decorator Signature in TypeSpec\nDESCRIPTION: This snippet shows the signature of the `@streamOf` decorator from the `TypeSpec.Streams` namespace. It targets `Model` types and takes a single parameter `type` (of type `unknown`) which specifies the type modeling the underlying data of the stream. This decorator is used to mark a model as representing a stream protocol.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/streams/reference/decorators.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Streams.streamOf(type: unknown)\n```\n```\n\n----------------------------------------\n\nTITLE: Representing HTTP Link Header as a Scalar in TypeSpec Language\nDESCRIPTION: Defines a scalar type for representing an HTTP Link header in TypeSpec. This type can be used to annotate properties that store or transmit HTTP Link header values, ensuring semantic clarity in API design. It does not impose any structural constraints on the format of the value.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/reference/data-types.md#_snippet_42\n\nLANGUAGE: typespec\nCODE:\n```\nscalar TypeSpec.Http.LinkHeader\n```\n\n----------------------------------------\n\nTITLE: Representing Common Parameters in OpenAPI Specification (YAML)\nDESCRIPTION: This YAML snippet shows the generated OpenAPI specification for the `deletePet` operation. It illustrates how the common parameters (`requestID`, `locale`, `clientVersion`), included via the spread operator in TypeSpec, are represented. They appear as references (`$ref`) in the operation's `parameters` list, pointing to reusable definitions within the `components/parameters` section, promoting maintainability and consistency in the final API documentation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/04-common-parameters.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n#### Generated OpenAPI Specification:\n\npaths:\n  /pets/{petId}:\n    delete:\n      operationId: Pets_deletePet\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n        // highlight-start\n        - $ref: \"#/components/parameters/CommonParameters.requestID\"\n        - $ref: \"#/components/parameters/CommonParameters.locale\"\n        - $ref: \"#/components/parameters/CommonParameters.clientVersion\"\n        // highlight-end\n      responses:\n        \"204\":\n          description: \"There is no content to send for this request, but the headers may be useful.\"\n        \"404\":\n          description: \"Not Found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\ncomponents:\n  parameters:\n    // highlight-start\n    CommonParameters.clientVersion:\n      name: client-version\n      in: header\n      required: false\n      schema:\n        type: string\n    CommonParameters.locale:\n      name: locale\n      in: query\n      required: false\n      schema:\n        type: string\n    CommonParameters.requestID:\n      name: request-id\n      in: header\n      required: true\n      schema:\n        type: string\n    // highlight-end\n  schemas:\n    NotFoundError:\n      type: object\n      properties:\n        code:\n          type: string\n          example: \"NOT_FOUND\"\n        message:\n          type: string\n```\n```\n\n----------------------------------------\n\nTITLE: Defining CreateKiosk RPC Method in Protobuf\nDESCRIPTION: This Protobuf snippet defines the `CreateKiosk` remote procedure call (RPC). It specifies that the method takes a `Kiosk` message as input and returns a `Kiosk` message. The `google.api.http` option maps this RPC to an HTTP POST request on the path `/v1/kiosks`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/grpc-kiosk-example/README.md#_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\n// Create a kiosk. This enrolls the kiosk for sign display.\nrpc CreateKiosk(Kiosk) returns (Kiosk) {\n    option (google.api.http) = { post: \"/v1/kiosks\" };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Dependencies via CLI (Python Context)\nDESCRIPTION: This Bash command (`tsp install`) is used to install the TypeSpec emitters and other dependencies defined in the `package.json` file, specifically after adding the Python emitter dependency. It ensures the necessary packages are available for generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntsp install\n```\n\n----------------------------------------\n\nTITLE: Setting Specific Emitter Output Directory via --option Flag (Bash)\nDESCRIPTION: This Bash command demonstrates setting a custom output directory for a specific emitter (`@typespec/openapi3`) using the `--option` flag with the built-in `emitter-output-dir` option. This overrides the default `{output-dir}/{emitter-name}` structure for this particular emitter, directing its output to `{project-root}/openapispec`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\n--option \"@typespec/openapi3.emitter-output-dir={project-root}/openapispec\"\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Test Host and Runner in TypeScript\nDESCRIPTION: Sets up the testing infrastructure for a TypeSpec library. `createMyTestHost` initializes a test host with a virtual file system and necessary libraries (like `@typespec/rest`). `createMyTestRunner` wraps the host, simplifying test setup by automatically adding a `main.tsp` file and importing specified namespaces (`My`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { createTestHost, createTestWrapper } from \"@typespec/compiler/testing\";\nimport { RestTestLibrary } from \"@typespec/rest/testing\";\nimport { MyTestLibrary } from \"../src/testing/index.js\";\n\nexport async function createMyTestHost() {\n  return createTestHost({\n    libraries: [RestTestLibrary, MyTestLibrary], // Add other libraries you depend on in your tests\n  });\n}\nexport async function createMyTestRunner() {\n  const host = await createMyTestHost();\n  return createTestWrapper(host, { autoUsings: [\"My\"] });\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Default XML for String Property\nDESCRIPTION: This XML snippet displays the default serialization for the `BlobName` model. The string value 'abcdef' is enclosed within a `<content>` element, which is a child of the `<BlobName>` element.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<BlobName>\n  <content>\n    abcdef\n  </content>\n</BlobName>\n```\n\n----------------------------------------\n\nTITLE: Using @attribute Decorator in a TypeSpec Model\nDESCRIPTION: This TypeSpec code defines a `Blob` model where the `id` property is decorated with `@attribute`. This instructs the XML serializer to represent `id` as an attribute of the parent `Blob` element.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_4\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Blob {\n  @attribute id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @bodyIgnore to Exclude Properties from HTTP Body - TypeSpec\nDESCRIPTION: Proposes @bodyIgnore as a solution to ensure unwanted properties are excluded from the HTTP body in the response. Demonstrates the technique for accurate body shaping in response models, particularly when metadata or visibility rules would otherwise include unwanted properties. Requires @typespec/http and familiarity with property decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-05-07.md#_snippet_7\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop d1(): {\n  @bodyIgnore headers: {\n    @header foo: string;\n  };\n}; // body will be {headers: {}}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI3 Schema for Nested Wrapped Complex Arrays - YAML\nDESCRIPTION: OpenAPI3 YAML reflecting a model with a wrapper array and custom-named complex item types. Enforces both the wrapper and complex item element XML names as required in some enterprise XML schemas.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_23\n\nLANGUAGE: YAML\nCODE:\n```\nTag:\n  type: \"object\"\n  properties:\n    name:\n      type: \"string\"\n  xml:\n    name: \"XmlTag\"\nPet:\n  type: \"object\"\n  properties:\n    tags:\n      type: \"array\"\n      xml:\n        name: \"ItemsTags\"\n        wrapped: true\n      items:\n        allOf:\n          - $ref: \"#/definitions/Tag\"\n        xml:\n          name: XmlTag\n  xml:\n    name: \"XmlPet\"\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Collection of Models (Null) Response - JSON\nDESCRIPTION: This code, for GET /type/property/nullable/collections/model/null, sets the collection to null to indicate no supplied models, but still requires the non-null property 'foo' to exist, supporting client-side nullification.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_242\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": null }\n```\n\n----------------------------------------\n\nTITLE: Defining @jsonSchema Decorator Syntax (TypeSpec)\nDESCRIPTION: Specifies the syntax for the `@jsonSchema` decorator from the `TypeSpec.JsonSchema` namespace. Applying it to a namespace triggers emission for types within it, optionally setting a `baseUri`. Applying it to other declarations marks them for direct emission, optionally setting their `id` (though `@id` is preferred for that). The `baseUri` parameter is an optional string.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_12\n\nLANGUAGE: typespec\nCODE:\n```\n@TypeSpec.JsonSchema.jsonSchema(baseUri?: valueof string)\n```\n\n----------------------------------------\n\nTITLE: Testing Client Path Parameters with Multiple Server Paths\nDESCRIPTION: Defines a GET endpoint on a server with multiple path segments, including a client-level path parameter `apiVersion`. The test expects the `apiVersion` path parameter to be correctly resolved (e.g., `v1.0`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_105\n\nLANGUAGE: http\nCODE:\n```\nget /server/path/multiple/{apiVersion}\n```\n\n----------------------------------------\n\nTITLE: Representing Default Values in OpenAPI YAML\nDESCRIPTION: Shows the corresponding OpenAPI YAML snippet for properties with default values, as generated from the preceding TypeSpec example. It includes `type`, `format`, and `default` fields for the `answer` and `color` properties, demonstrating the translation from TypeSpec's default value assignment.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml title=openapi.yaml\nanswer:\n  type: integer\n  format: int32\n  default: 42\ncolor:\n  type: string\n  default: purple\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript TestClient with BasicCredential\nDESCRIPTION: This TypeScript class `TestClient` represents the client for the main service defined in TypeSpec. Its constructor requires an `endpoint` string and a `BasicCredential` object, reflecting the `@useAuth(BasicAuth)` directive. It initializes a private client context (`#context`) using the `createTestClientContext` function and provides an asynchronous method `valid` corresponding to the `valid` operation in the TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/auth/sub_client_override.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, credential: BasicCredential, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, credential, options);\n  }\n  async valid(options?: ValidOptions) {\n    return valid(this.#context, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for Type_Array_BooleanValue_put Endpoint\nDESCRIPTION: This JSON snippet represents the expected request body for the PUT request to the `/type/array/boolean` endpoint. The request body should be a JSON array containing boolean values `true` and `false`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_125\n\nLANGUAGE: json\nCODE:\n```\n```json\n[true, false]\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenAPI 3 Emitter and Custom Options in TypeSpec YAML Config - YAML\nDESCRIPTION: Extends the YAML-based TypeSpec config to not only specify the OpenAPI 3 emitter under 'emit', but also set custom options for emitter behavior. The 'options' section details extra configuration (such as file output or format customization) for '@typespec/openapi3', with key/value pairs controlling aspects like file naming or output directory. This approach is used for advanced emitter customization and adapts output for a project’s specific organizational or integration requirements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/reference/emitter.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/openapi3\"\noptions:\n  \"@typespec/openapi3\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Template Using Decorator Without valueof Constraint - TypeSpec\nDESCRIPTION: This deprecated usage example features a TypeSpec model template where the type parameter T is only constrained to string (not valueof string), while the @doc decorator expects a literal value. Recent versions will warn about missing the valueof constraint. This is included for highlighting deprecation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-06-06.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Foo<T extends string> {\n  @doc(T) // valueof constraint here will cause a warning\n  id: uuid;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Deprecated Type in TypeSpec\nDESCRIPTION: This TypeSpec snippet shows a model (`Post`) that references a deprecated type (`LegacyUser`). Using this deprecated type will typically result in a compiler warning, guiding developers towards updated alternatives.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/directives.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nmodel Post {\n  author: LegacyUser;\n  //      ^ warning: Deprecated: Use NewUser instead\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Unwrapped Complex Type Array Serialization - XML\nDESCRIPTION: Shows XML representation of a model containing an unwrapped array of complex elements (e.g., multiple <XmlTag> nodes inside <XmlPet>). Used as output for the corresponding TypeSpec code. Each array element is serialized as a full XML element.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_13\n\nLANGUAGE: XML\nCODE:\n```\n<XmlPet>\n  <XmlTag>\n    <name>string</name>\n  </XmlTag>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Entrypoints in package.json Exports (JSON)\nDESCRIPTION: This JSON snippet outlines how to configure the 'exports' field in a package.json file to specify TypeSpec entrypoints. The typespec key can be used inside export conditions to direct tooling to .tsp source files. Each subpath (e.g., './named') can have its own typespec entrypoint. Requires Node.js package.json schema and TypeSpec tooling that supports the 'typespec' field in exports.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-10-09.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"exports\": {\n  \".\": {\n    \"typespec\": \"./lib/main.tsp\",\n  },\n  \"./named\": {\n    \"typespec\": \"./lib/named.tsp\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema Output for Specific-Typed Additional Properties - YAML\nDESCRIPTION: Illustrates OpenAPI YAML output for a property Record<string>. The additionalProperties field is typed as string. Input: TypeSpec with typed Record. Output: YAML describing a string-valued property map.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nbar:\n  type: object\n  additionalProperties:\n    type: string\n```\n\n----------------------------------------\n\nTITLE: Custom Named Unwrapped Array Serialization - XML\nDESCRIPTION: Shows the XML representation of an unwrapped array of complex elements, where each item has a custom name via @encodedName. Each <ItemsTag> element represents an instance of the Tag model. Output must match TypeSpec naming.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_19\n\nLANGUAGE: XML\nCODE:\n```\n<XmlPet>\n  <ItemsTag>\n    <name>string</name>\n  </ItemsTag>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with Nullable Bytes in TypeSpec\nDESCRIPTION: Defines a REST API using TypeSpec where the model contains a nullable byte property and various operations (GET, PUT, POST) that interact with it. No runtime dependencies, but intended for use with TypeSpec tools for code generation. This schema allows required strings and optional base64-encoded byte arrays.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/encoding/bytes_nullable.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\n@service\\nnamespace Test;\\nmodel ModelWithBytes {\\n  requiredProperty: string;\\n  nullableProperty: bytes | null;\\n}\\n\\n@get op get(): ModelWithBytes;\\n@put op put(...ModelWithBytes): void;\\n@post op post(body: ModelWithBytes): void;\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a C# Server from TypeSpec Definitions - Bash\nDESCRIPTION: Runs the C# scaffolding tool to generate server code from TypeSpec definitions. The `--use-swaggerui` flag auto-enables the Swagger UI endpoint for interactive API testing, while `--overwrite` allows replacement of certain files. `npx` ensures project-local tool versions are used. Assumes you have already initialized a TypeSpec project and installed the hscs-scaffold dependency.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-csharp.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx hscs-scaffold . --use-swaggerui --overwrite\n```\n\n----------------------------------------\n\nTITLE: Testing Simple Path Expansion with Record (Standard)\nDESCRIPTION: Defines a GET endpoint to test simple path parameter expansion (explode: false) when the parameter `param` is a record. Given `{a: 1, b: 2}`, the expected path segment becomes `a,1,b,2`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_85\n\nLANGUAGE: http\nCODE:\n```\nget /routes/path/simple/standard/record{param}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of the @reserve Decorator in TypeSpec\nDESCRIPTION: This TypeSpec code demonstrates reserving fields within an `Example` model. It reserves the field index range 8 through 15 (inclusive), the single field index 100, and the field name \"test\".\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_9\n\nLANGUAGE: typespec\nCODE:\n```\n// Reserve the fields 8-15 inclusive, 100, and the field name \"test\" within a model.\n@reserve([8, 15], 100, \"test\")\nmodel Example {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Page Settings Interface in TypeScript (Continuation Token)\nDESCRIPTION: This TypeScript interface `LinkPageSettings` defines settings specifically for controlling pagination via the `byPage` method for the continuation token pattern. It includes the optional `nextToken` parameter which can be used to start iteration from a specific page.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts interface LinkPageSettings\nexport interface LinkPageSettings {\n  nextToken?: string;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Dependencies using tsp install\nDESCRIPTION: Executes the TypeSpec installation command to download and install project dependencies as defined in `package.json`. This command helps manage dependencies and contributes to reproducibility by potentially creating/updating a lock file (like `package-lock.json` when used with npm).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/reproducibility.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp install\n```\n\n----------------------------------------\n\nTITLE: Putting All Optional Int Literal Properties - JSON\nDESCRIPTION: Represents a PUT request body where the optional property is an integer literal, targeting updates or inserts. The numeric type, field, and value must be respected.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_291\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": 1 }\n```\n\n----------------------------------------\n\nTITLE: Serialization of Nested Models - XML\nDESCRIPTION: Presents XML output for nested TypeSpec models. Parent elements contain child objects as subelements, following the nesting of models. Matches the structure required by nested data types in APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_25\n\nLANGUAGE: XML\nCODE:\n```\n<Book>\n  <author>\n    <name>string</name>\n  </author>\n</Book>\n```\n\n----------------------------------------\n\nTITLE: Initializing React TypeSpec Playground with Custom Viewers in TSX\nDESCRIPTION: This snippet illustrates initializing the TypeSpec Playground in a React application by registering Monaco workers and rendering the playground using 'renderReactPlayground'. It imports manifest and viewer components, applies default styles, and uses the SwaggerUIViewer for OpenAPI3 emitter output. Required dependencies include the '@typespec/playground', the manifest, React environment, and bundled styles. The main purpose is to launch the playground UI with custom emitter viewers for enhanced API documentation display. The input is a configuration derived from 'PlaygroundManifest' with 'emitterViewers'; the output is a fully initialized playground. Proper initialization and registration are prerequisites for correct operation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/playground/README.md#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { registerMonacoDefaultWorkersForVite } from \"@typespec/playground\";\nimport PlaygroundManifest from \"@typespec/playground/manifest\";\nimport { renderReactPlayground } from \"@typespec/playground/react\";\nimport { SwaggerUIViewer } from \"@typespec/playground/react/viewers\";\n\n// Import styles\nimport \"@typespec/playground/styles.css\";\n\nregisterMonacoDefaultWorkersForVite();\n\nawait renderReactPlayground({\n  ...PlaygroundManifest,\n  emitterViewers: {\n    \"@typespec/openapi3\": [SwaggerUIViewer],\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: XML Representation of Model with Inline Namespace\nDESCRIPTION: This XML snippet shows the resulting structure for the `Book` model defined with an inline namespace. The root element `<smp:Book>` includes the namespace declaration `xmlns:smp=\"http://example.com/schema\"` and uses the 'smp' prefix.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_37\n\nLANGUAGE: xml\nCODE:\n```\n```xml\n<smp:Book xmlns:smp=\"http://example.com/schema\">\n  <id>0</id>\n  <title>string</title>\n  <author>string</author>\n</smp:Book>\n```\n```\n\n----------------------------------------\n\nTITLE: Compiling with TypeSpec CLI and Progress Indicators - ANSI Shell Output\nDESCRIPTION: Shows sample outputs from the TypeSpec CLI with progress indicators. ANSI color escape sequences denote compilation progress and status for improved user experience. Requires a terminal supporting ANSI codes and invoking 'tsp compile .'. Outputs indicate compilation steps and success/failure states.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-04.md#_snippet_2\n\nLANGUAGE: ansi\nCODE:\n```\n$ tsp compile .\nTypeSpec compiler v0.65.3\n\n\\u001b[32m✔\\u001b[0m Compiling\n\\u001b[33m⠙\\u001b[0m @typespec/openapi3\n```\n\nLANGUAGE: ansi\nCODE:\n```\n$ tsp compile .\nTypeSpec compiler v0.65.3\n\n\\u001b[32m✔\\u001b[0m Compiling\n\\u001b[32m✔\\u001b[0m @typespec/openapi3\n\nCompilation completed successfully.\n```\n\n----------------------------------------\n\nTITLE: Declaring signed 64-bit Fixed Integer Scalar (sfixed64) - TypeSpec - typespec\nDESCRIPTION: Defines a scalar type for Protobuf sfixed64 encoding (signed, 8-byte fixed width). Used for signed int64 values where constant-width encoding is required. No dependencies or parameters. Used in schema definitions for TypeSpec fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/data-types.md#_snippet_8\n\nLANGUAGE: typespec\nCODE:\n```\nscalar TypeSpec.Protobuf.sfixed64\n```\n\n----------------------------------------\n\nTITLE: Testing Versioned Server Operation with Default Query API Version\nDESCRIPTION: Defines a HEAD endpoint for a versioned server using a query-based `api-version` parameter with a default value ('2022-12-01-preview'). The expected URL should use this default version (e.g., '/with-query-api-version?api-version=2022-12-01-preview').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_113\n\nLANGUAGE: http\nCODE:\n```\nhead /server/versions/versioned/with-query-api-version\n```\n\n----------------------------------------\n\nTITLE: Combining File Arrays and Basic Fields in Multipart Form-Data - HTTP\nDESCRIPTION: Illustrates a multipart/form-data POST with complex fields: a plain value, an object (JSON), file arrays, and array of objects (JSON). 'profileImage' and 'pictures' contain binaries; 'address' and 'previousAddresses' are JSON-encoded. Demonstrates handling heterogeneous form parts with appropriate content-types. Limits: field name/frequency rules per RFC7578, required content-types for files, and uniqueness for file arrays.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_55\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /upload HTTP/1.1\\nContent-Length: 428\\nContent-Type: multipart/form-data; boundary=abcde12345\\n\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"id\\\"\\nContent-Type: text/plain\\n\\n123\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"address\\\"\\nContent-Type: application/json\\n\\n{\\n  \\\"city\\\": \\\"X\\\"\\n}\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"profileImage\\\"; filename=\\\"<any-or-no-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .jpg file…}\\n--abcde12345--\\nContent-Disposition: form-data; name=\\\"previousAddresses\\\"\\nContent-Type: application/json\\n\\n[{\\n  \\\"city\\\": \\\"Y\\\"\\n},{\\n  \\\"city\\\": \\\"Z\\\"\\n}]\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"pictures\\\"; filename=\\\"<any-or-no-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .png file…}\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"pictures\\\"; filename=\\\"<any-or-no-name-is-ok>\\\"\\nContent-Type: application/octet-stream\\n\\n{…file content of .png file…}\\n--abcde12345--\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema Output for Model Extending Record - YAML\nDESCRIPTION: Shows the OpenAPI YAML output for a model extending Record<unknown> and adding a string property 'bar'. Inputs: TypeSpec model using inheritance. Output: OpenAPI object with standard and additional properties sections.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nBar:\n  type: object\n  properties:\n    bar:\n      type: string\n  additionalProperties: {}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Interface for Bar Model\nDESCRIPTION: This TypeScript code shows the generated `Bar` interface corresponding to the TypeSpec `Bar` model. The `parentId` property, which references `Foo.id` (an `int32` in TypeSpec), is correctly typed as `number` in the generated TypeScript interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/property_references_property.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Bar {\n  address: string;\n  parentId: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Request Body for spreadAsRequestBody\nDESCRIPTION: Specifies the expected JSON request body for the `PUT /parameters/spread/model/request-body` endpoint test case. The body contains the 'name' property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Defining the @returnTypeChangedFrom Decorator in TypeSpec\nDESCRIPTION: Defines the syntax for the `@TypeSpec.Versioning.returnTypeChangedFrom` decorator. This decorator is applied to `Operation` elements to signify that the return type has changed. It takes `version` (EnumMember) indicating when the change happened and `oldType` (unknown) specifying the previous return type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/reference/decorators.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\n@TypeSpec.Versioning.returnTypeChangedFrom(version: EnumMember, oldType: unknown)\n```\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec SSE Library as a Peer Dependency (Bash)\nDESCRIPTION: This command uses npm to install the `@typespec/sse` package as a peer dependency. This method is used when developing a TypeSpec library that itself depends on or extends the functionality provided by `@typespec/sse`. The `--save-peer` flag ensures that the consuming project must also install `@typespec/sse` directly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/sse/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/sse\n```\n\n----------------------------------------\n\nTITLE: TypeSpec Protobuf Error Message\nDESCRIPTION: This is an error message from the TypeSpec compiler or a related tool, specifically the `@typespec/protobuf/anonymous-model` rule. It indicates that an anonymous model (a model defined inline without a specific name) was used within a Protobuf message definition at line 16, column 29 of the file `/test/main.tsp`. Protobuf requires all message fields to reference named types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/test/scenarios/anonymous-model/diagnostics.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/test/main.tsp:16:29 - error @typespec/protobuf/anonymous-model: anonymous models cannot be used in Protobuf messages\n```\n\n----------------------------------------\n\nTITLE: Defining 8-bit Integer Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Provides a `int8` scalar for signed 8-bit integers (range: -128 to 127), used for memory-optimized numeric properties or protocol-level modeling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_41\n\nLANGUAGE: typespec\nCODE:\n```\nscalar int8\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec HTTP Server Generator via npm - Bash\nDESCRIPTION: Demonstrates how to install the @typespec/http-server-csharp package globally or locally using npm. Installation via npm is required as a prerequisite for running the TypeSpec HTTP server emitter for C#. The command should be run in the terminal within the desired project directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-server-csharp\n```\n\n----------------------------------------\n\nTITLE: Implementing the Client Class Method in TypeScript\nDESCRIPTION: This TypeScript code defines the `TestClient` class. The constructor initializes a `TestClientContext`. The `create` method provides a high-level interface for calling the operation. It accepts the `widget` data and optional `CreateOptions`, then calls the standalone `create` function (defined previously) with the client's context and the provided arguments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/body_root_anonymous.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport class TestClient {\n  #context: TestClientContext;\n\n  constructor(endpoint: string, options?: TestClientOptions) {\n    this.#context = createTestClientContext(endpoint, options);\n  }\n  async create(\n    widget: {\n      id: string;\n      name: string;\n      age?: string;\n      foo?: string;\n    },\n    options?: CreateOptions,\n  ) {\n    return create(this.#context, widget, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Output Directory via CLI for TypeSpec - Bash - bash\nDESCRIPTION: Shows how to specify the build output directory from the CLI using the '--output-dir' option, overriding any configuration file value. Illustrates the precedence of CLI parameters in controlling compiler behavior. Requires an accessible TypeSpec project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --output-dir \"./typespec-build\"\n\n```\n\n----------------------------------------\n\nTITLE: Implementing FooClient in TypeScript\nDESCRIPTION: Defines the `FooClient` class in TypeScript, generated from the `Foo` TypeSpec namespace. It initializes a `FooClientContext` in the constructor and exposes an asynchronous `get` method that delegates the call to the imported `get` operation function, passing the context. Dependencies include functions and types from `./api/fooClientOperations.js` and `./api/fooClientContext.js`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/client/multiple_top_level_clients.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { GetOptions, get } from \"./api/fooClientOperations.js\";\nimport {\n  FooClientContext,\n  FooClientOptions,\n  createFooClientContext,\n} from \"./api/fooClientContext.js\";\n\nexport class FooClient {\n  #context: FooClientContext;\n\n  constructor(endpoint: string, options?: FooClientOptions) {\n    this.#context = createFooClientContext(endpoint, options);\n  }\n  async get(options?: GetOptions) {\n    return get(this.#context, options);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Request/Response Body for RFC7231 Encoded Datetime Property (JSON)\nDESCRIPTION: This JSON structure defines the expected request and response body for the `POST /encode/datetime/property/rfc7231` endpoint. It tests operations where a model contains a 'value' property of type datetime, encoded using RFC7231 format (HTTP-date).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"Fri, 26 Aug 2022 14:38:00 GMT\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"Fri, 26 Aug 2022 14:38:00 GMT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Null Nullable String Property - JSON\nDESCRIPTION: Used for validating that endpoints properly handle and serialize nulls for nullable string properties. The property 'nullableProperty' is set to null, making this a canonical test payload for null acceptance in contract tests.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_258\n\nLANGUAGE: json\nCODE:\n```\n{ \"requiredProperty\": \"foo\", \"nullableProperty\": null }\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Collection of Bytes (Null) Patch Request - JSON\nDESCRIPTION: This request for PATCH /type/property/nullable/collections/bytes/null demonstrates setting the bytes collection to null, while maintaining a required non-null property. Such partial update scenarios are supported for nullable collections in API models.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_240\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": null }\n```\n\n----------------------------------------\n\nTITLE: Getting Default (Missing) Optional Collections of Model Properties - JSON\nDESCRIPTION: A minimal response object omitting the array property, used for verifying proper modeling of optional arrays of models. This pattern checks if the system allows absence without error.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_274\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Generating Application Deserializer for Foo (Complex Record)\nDESCRIPTION: Generated TypeScript function `jsonFooToApplicationTransform` for the `Foo` model with a complex record. It deserializes transport data into a `Foo` object, transforming `my_values` to `myValues` by calling the `jsonRecordBarToApplicationTransform` helper function, which handles deserialization of the nested `Bar` objects within the record.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/record.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n```ts src/models/internal/serializers.ts function jsonFooToApplicationTransform\nexport function jsonFooToApplicationTransform(input_?: any): Foo {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    myValues: jsonRecordBarToApplicationTransform(input_.my_values),\n  }!;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating XML with @unwrapped Array Property\nDESCRIPTION: This XML snippet shows the serialization result for the `Pet` model when the `tags` property uses `@unwrapped`. The intermediate wrapper element (`<ItemsTags>`) is omitted, and the `<XmlTag>` elements appear directly under the parent `<XmlPet>` element.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<XmlPet>\n  <XmlTag>\n    <name>string</name>\n  </XmlTag>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Generating Default XML for Array Property\nDESCRIPTION: This XML snippet shows the default serialization for the `Pet` model's `tags` array property. By default, TypeSpec often wraps array items within a container element (like `<ItemsTags>`), and each item (`<XmlTag>`) is also represented as an element.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<XmlPet>\n  <ItemsTags>\n    <XmlTag>\n      <name>string</name>\n    </XmlTag>\n  </ItemsTags>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Configuring Protobuf Emitter Options in tspconfig.yaml\nDESCRIPTION: This YAML configuration demonstrates how to specify options for the `@typespec/protobuf` emitter. Options are nested under the emitter's name within the `options` block, allowing customization of the emitter's behavior (e.g., `option: value`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/protobuf\"\noptions:\n  \"@typespec/protobuf\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Expected Request/Response Body for Base64 Encoded Bytes Property (JSON)\nDESCRIPTION: This JSON structure defines the expected request and response body for the `POST /encode/bytes/property/base64` endpoint. It tests operations where a model contains a 'value' property of type bytes, encoded using Base64. The example shows 'test' encoded as 'dGVzdA=='.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"dGVzdA==\" // base64 encode of test\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"dGVzdA==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling Examples: Invalid Type Reference - TypeScript\nDESCRIPTION: Illustrates how invalid or unresolvable type references are handled by 'resolveTypeReference', returning [undefined, diagnostics]. Useful during development of emitters or diagnostics tooling to ensure callers respond appropriately to invalid input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitters-basics.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nprogram.resolveTypeReference(\"UnknownModel\"); // Resolve `[undefined, diagnostics]` where diagnostics is an array of diagnostic explaining why reference is invalid.\nprogram.resolveTypeReference(\"model Foo {}\"); // Resolve `[undefined, diagnostics]` where diagnostics is an array of diagnostic explaining why reference is invalid.\n\n```\n\n----------------------------------------\n\nTITLE: API Key Passed In Cookie (HTTP)\nDESCRIPTION: Presents an HTTP request using a cookie for API key delivery. Cookie: X-API-KEY=abcdef12345. Used to illustrate ApiKeyAuth’s 'cookie' location setting.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nGET /something HTTP/1.1\\nCookie: X-API-KEY=abcdef12345\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec C# Service Generator as Peer Dependency - Bash\nDESCRIPTION: This snippet shows how to add the @typespec/http-server-csharp package as a peer dependency within a library context. The --save-peer flag ensures the dependency is tracked as a peer in the package.json. This command is intended for maintainers building reusable TypeSpec libraries that should not bundle the generator directly. It requires npm and expects to be run in a library project structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/docs/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/http-server-csharp\n\n```\n\n----------------------------------------\n\nTITLE: Testing Operation in Server without Defined Endpoint\nDESCRIPTION: Defines a HEAD endpoint for a server configuration where no specific endpoint is defined for the server itself. The expected URI is relative to the base endpoint provided during testing (e.g., '<base_endpoint>/valid').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_104\n\nLANGUAGE: http\nCODE:\n```\nhead /server/endpoint/not-defined/valid\n```\n\n----------------------------------------\n\nTITLE: Protobuf Service Declaration Generated from TypeSpec Interface - Protobuf\nDESCRIPTION: This code is the emitted Protobuf definition corresponding to a TypeSpec service interface marked for Protobuf emission. It includes the proto3 syntax, package declaration, and a service with empty method definitions. Assumes usage of proto3 and serves as a base for defining gRPC services.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/guide.md#_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage example;\n\nservice Test {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Versioned Server Operation without API Version\nDESCRIPTION: Defines a HEAD endpoint for a versioned server configuration where the specific operation does not use an `api-version` parameter. The expected URL should not contain any API version (e.g., '/without-api-version').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_111\n\nLANGUAGE: http\nCODE:\n```\nhead /server/versions/versioned/without-api-version\n```\n\n----------------------------------------\n\nTITLE: Illustrating Impact of @body Decorator on HTTP Payload - TypeSpec\nDESCRIPTION: Reveals that using @body at the top level causes underlining metadata properties (including headers) to be treated as body members, potentially emitting a warning. Sample includes a header declared as a property on the body model. Appropriate for demonstrating caveats when migrating decorators in TypeSpec APIs. Warnings are generated if headers are included inside the body.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-05-07.md#_snippet_4\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop a1(): {@body _: {@header foo: string, other: string} };\n              ^ warning header in a body, it will not be included as a header.\n```\n\n----------------------------------------\n\nTITLE: Defining a TypeSpec Decorator with Value Marshalling (TSP)\nDESCRIPTION: Illustrates the definition of a TypeSpec decorator (`multipleOf`) where the `value` parameter uses `valueof numeric`. This highlights potential marshalling changes introduced with the new value system, possibly triggering deprecation warnings if the old marshalling logic was expected.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_46\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n  extern dec multipleOf(target: numeric | Reflection.ModelProperty, value: valueof numeric);\n  ```\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec CLI via npm on Node.js (bash)\nDESCRIPTION: Installs the TypeSpec command-line interface as a global npm package using Bash. Requires Node.js and npm to be installed beforehand. This command adds the 'tsp' CLI tool to your system path, enabling TypeSpec project management and compilation. The snippet is cross-platform (for bash shells), and will install the latest published version of @typespec/compiler globally.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/introduction/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @typespec/compiler\n\n```\n\n----------------------------------------\n\nTITLE: Implementing the Client Operation Function in TypeScript\nDESCRIPTION: This TypeScript function `create` implements the client-side logic for the `create` operation. It accepts the client context, the `widget` data object, and optional `CreateOptions`. It constructs the HTTP request, including setting the `foo` header if present in the `widget` object and assembling the request body. It sends the POST request, handles the response (expecting a 204 No Content), and throws an error for other statuses. Note: The body construction logic appears to incorrectly access `widget.options?.age` and `widget.options?.foo` instead of the intended `widget.age` and `widget.foo`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/body_root_anonymous.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport async function create(\n  client: TestClientContext,\n  widget: {\n    id: string;\n    name: string;\n    age?: string;\n    foo?: string;\n  },\n  options?: CreateOptions,\n): Promise<void> {\n  const path = parse(\"/\").expand({});\n  const httpRequestOptions = {\n    headers: {\n      ...(widget.foo && { foo: widget.foo }),\n    },\n    body: {\n      id: widget.id,\n      name: widget.name,\n      age: widget.options?.age,\n      foo: widget.options?.foo,\n    },\n  };\n  const response = await client.pathUnchecked(path).post(httpRequestOptions);\n\n  if (typeof options?.operationOptions?.onResponse === \"function\") {\n    options?.operationOptions?.onResponse(response);\n  }\n  if (+response.status === 204 && !response.body) {\n    return;\n  }\n  throw createRestError(response);\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for POST /type/model/inheritance/not-discriminated/valid\nDESCRIPTION: This JSON represents the expected input body for a POST request to `/type/model/inheritance/not-discriminated/valid`. It demonstrates sending a simple, non-polymorphic model instance to the service.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_173\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"abc\", \"age\": 32, \"smart\": true }\n```\n\n----------------------------------------\n\nTITLE: Examples of Resolving TypeSpec References - TypeScript\nDESCRIPTION: Provides sample usages of 'resolveTypeReference' to resolve both built-in and user-defined types by fully qualified name. Used to fetch canonical types such as 'TypeSpec.string' or custom types in namespaces. Returns the matching type if found, otherwise error diagnostics.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitters-basics.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nprogram.resolveTypeReference(\"TypeSpec.string\"); // Resolve TypeSpec string intrinsic type\nprogram.resolveTypeReference(\"MyOrg.MyLibrary.MyEnum\"); // Resolve `MyEnum` defined in `MyOrg.MyLibrary` namespace.\n\n```\n\n----------------------------------------\n\nTITLE: Transforming Transport Data to Spread Record Discriminated Union in TypeScript\nDESCRIPTION: Provides a deserialization function converting a generic transport object back into the 'SpreadRecordForDiscriminatedUnion' model. It extracts the 'name' property and reconstructs additional properties using 'jsonRecordWidgetDataToApplicationTransform'. Requires the helper function for accurate conversion and expects input to have a 'name' property; if input is falsy, it is returned unchanged. This function enforces property separation and supports flexible input structures by spreading the remainder of the input object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/discriminated_union_spread.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonSpreadRecordForDiscriminatedUnionToApplicationTransform(\n  input_?: any,\n): SpreadRecordForDiscriminatedUnion {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    additionalProperties: jsonRecordWidgetDataToApplicationTransform(\n      (({ name, ...rest }) => rest)(input_),\n    ),\n    name: input_.name,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated OpenAPI for CreateKiosk Endpoint (JSON)\nDESCRIPTION: This JSON snippet shows the OpenAPI specification generated from the gRPC `CreateKiosk` definition. It defines the POST operation for `/v1/kiosks`, including summary, operation ID, success and error responses (referencing schema definitions), and tags. Notably, it lacks a definition for the request body, which is identified as a shortcoming of the gRPC-to-OpenAPI generation process in this case.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/grpc-kiosk-example/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"post\": {\n   \"summary\": \"Create a kiosk. This enrolls the kiosk for sign display.\",\n   \"operationId\": \"Display_CreateKiosk\",\n   \"responses\": {\n       \"200\": {\n       \"description\": \"A successful response.\",\n       \"schema\": {\n           \"$ref\": \"#/definitions/kioskKiosk\"\n       }\n       },\n       \"default\": {\n       \"description\": \"An unexpected error response.\",\n       \"schema\": {\n           \"$ref\": \"#/definitions/rpcStatus\"\n       }\n       }\n   },\n   \"tags\": [\n       \"Display\"\n   ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating XML with @name Decorator in TypeSpec\nDESCRIPTION: This XML snippet shows the serialization result for the `Book` model defined with `@name` and `@encodedName`. The root element is `<XmlBook>`, and the properties `id` and `name` are serialized with their specified XML names `<XmlId>` and `<XmlName>`, respectively.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<XmlBook>\n  <XmlId>string</XmlId>\n  <XmlName>string</XmlName>\n  <content>string</content>\n</XmlBook>\n```\n\n----------------------------------------\n\nTITLE: Enumerating All Models with Semantic Walker - TypeSpec Compiler - TypeScript\nDESCRIPTION: Illustrates use of navigateProgram from '@typespec/compiler' to visit every model in a TypeSpec program. Used within a $onEmit handler to process each type during code generation or validation passes. Caller must provide a callback for each type; in this case, the 'model(m)' callback processes models as encountered. Does not filter models; filters must be applied in the callback if needed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitters-basics.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnavigateProgram(program, {\n  model(m) {\n    // emit m\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: OpenAPI YAML Output for Discriminated Models with AllOf - YAML\nDESCRIPTION: Provides the OpenAPI YAML output for a discriminated model hierarchy, showing how the discriminator and allOf relationships are materialized. Contains 'Cat', 'Dog', and 'Pet' schemas, with references and property typing as required by OpenAPI. Input: TypeSpec discriminated unions and inheritance. Output: corresponding OpenAPI openapi.yaml fragment.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nCat:\n  type: object\n  properties:\n    kind:\n      type: string\n      enum:\n        - cat\n    meow:\n      type: integer\n      format: int32\n  required:\n    - kind\n  allOf:\n    - $ref: \"#/components/schemas/Pet\"\nDog:\n  type: object\n  properties:\n    kind:\n      type: string\n      enum:\n        - dog\n    bark:\n      type: string\n  required:\n    - kind\n  allOf:\n    - $ref: \"#/components/schemas/Pet\"\nPet:\n  type: object\n  properties:\n    kind:\n      type: string\n      description: Discriminator property for Pet.\n    name:\n      type: string\n    weight:\n      type: number\n      format: float\n  discriminator:\n    propertyName: kind\n    mapping:\n      cat: \"#/components/schemas/Cat\"\n      dog: \"#/components/schemas/Dog\"\n  required:\n    - name\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeSpec with Protobuf Emitter via CLI (Bash)\nDESCRIPTION: Demonstrates how to invoke the TypeSpec compiler (`tsp`) from the command line to generate Protobuf definitions using the `@typespec/protobuf` emitter. This command compiles the TypeSpec definition in the current directory (`.`) and specifies the emitter to use via the `--emit` flag. Requires the `tsp` CLI and the emitter package to be installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/protobuf/reference/emitter.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --emit=@typespec/protobuf\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitters (Old Structure) in `tspconfig.yaml`\nDESCRIPTION: Illustrates the deprecated structure for configuring emitters in `tspconfig.yaml` using the `emitters` property. This structure combined emitter enablement and options under a single map.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nemitters:\n  \"@typespec/openapi3\":\n    output-file: openapi3.json\n  other-emitter: true\n```\n\n----------------------------------------\n\nTITLE: Disabling Emitters via --no-emit Flag (Bash)\nDESCRIPTION: This Bash command demonstrates using the `--no-emit` flag with the TypeSpec compiler (`tsp compile`). This flag prevents any emitters from running and generating output files. It also suppresses the warning message if no emitters are configured.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --no-emit\n```\n\n----------------------------------------\n\nTITLE: Installing Standalone TypeSpec CLI on Windows (PowerShell)\nDESCRIPTION: Installs the experimental standalone TypeSpec CLI on Windows by invoking a remote installation script via PowerShell. This uses 'Invoke-RestMethod' (irm) to download the script and pipes its output directly into 'Invoke-Expression' (iex). The user must have PowerShell available and Internet access. No Node.js dependency is required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/introduction/installation.mdx#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npowershell -c \"irm typespec.io/install.ps1|iex\"\n\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Spread Discriminated Record Unknown - JSON\nDESCRIPTION: Demonstrates a discriminated model with a type 'kind' and extended with both fixed and additional fields, supporting use-cases in polymorphic API responses where discrimination by type is key.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_202\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"kind\\\": \\\"derived\\\",\\n  \\\"name\\\": \\\"Derived\\\",\\n  \\\"index\\\": 314,\\n  \\\"age\\\": 2.71875,\\n  \\\"prop1\\\": 32,\\n  \\\"prop2\\\": true,\\n  \\\"prop3\\\": \\\"abc\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: OpenAPI3 Schema for Model Properties as XML Attributes - YAML\nDESCRIPTION: Maps TypeSpec's XML attribute and name annotations to OpenAPI3 YAML, under the xml.keyword on each property. Results in accurate API documentation for models using XML serialization of attributes alongside standard properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_35\n\nLANGUAGE: YAML\nCODE:\n```\nBook:\n  type: object\n  properties:\n    id:\n      type: integer\n      xml:\n        attribute: true\n    title:\n      type: string\n      xml:\n        name: \"xml-title\"\n    author:\n      type: string\n```\n\n----------------------------------------\n\nTITLE: Illustrating API Operation Flow for Pet Store\nDESCRIPTION: A textual flowchart depicting the interaction flow for each CRUD operation (list, get, create, update, delete) in the Pet Store API. It outlines the path from the client request through the API Gateway to the specific backend operation interacting with the database, and finally the response returned to the client.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/getting-started-rest/02-operations-responses.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n```\n[Client] --> [API Gateway] --> [listPets Operation] --> [Database] --> [Response: List of Pets]\n[Client] --> [API Gateway] --> [getPet Operation] --> [Database] --> [Response: Pet Details]\n[Client] --> [API Gateway] --> [createPet Operation] --> [Database] --> [Response: Created Pet]\n[Client] --> [API Gateway] --> [updatePet Operation] --> [Database] --> [Response: Updated Pet]\n[Client] --> [API Gateway] --> [deletePet Operation] --> [Database] --> [Response: Deletion Confirmation]\n```\n```\n\n----------------------------------------\n\nTITLE: Expected Request/Response Body for Unix Timestamp Encoded Datetime Property (JSON)\nDESCRIPTION: This JSON structure defines the expected request and response body for the `POST /encode/datetime/property/unix-timestamp` endpoint. It tests operations where a model contains a 'value' property of type datetime, encoded as a Unix timestamp (seconds since epoch).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": 1686566864\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": 1686566864\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Union Type in TSP\nDESCRIPTION: Specifies a TypeSpec union type that accepts only the string literals 'a', 'b', or 'c'. This is used to verify how unions are handled in the response for the 'get /type/union/strings-only' endpoint.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_309\n\nLANGUAGE: tsp\nCODE:\n```\n\"a\" | \"b\" | \"c\"\n```\n\n----------------------------------------\n\nTITLE: Using @extension Decorator with Scalar Value - TypeSpec - tsp\nDESCRIPTION: Illustrates the legacy usage of the @extension decorator where a scalar value is provided and interpreted as a type, not a raw value. Intended for backwards compatibility: to emit a JSON schema for the scalar rather than the scalar value itself. Required dependencies: @typespec/json-schema. Key parameter is the string literal passed as extension value. Outputs the extension as a JSON schema scalar.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-08-06.md#_snippet_3\n\nLANGUAGE: tsp\nCODE:\n```\n@extension(\"x-example\", \"foo\")\nmodel Foo {}\n\n```\n\n----------------------------------------\n\nTITLE: Testing a TypeSpec Linter Codefix\nDESCRIPTION: Illustrates how to test a codefix associated with a linter rule using the `RuleTester`. After setting an expectation with `tester.expect()`, the `applyCodeFix()` method is chained, specifying the codefix ID. This asserts that a single diagnostic with a matching codefix is emitted. Finally, `.toEqual()` is used to assert the expected state of the code after the fix has been applied. Proper indentation of multi-line string literals is noted as important.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/linters.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nawait tester\n  .expect(\n    `        \n    model Foo {}\n    `,\n  )\n  .applyCodeFix(\"add-model-suffix\").toEqual(`\n    model FooModel {}\n  `);\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Default (Missing) Optional Datetime Properties - JSON\nDESCRIPTION: An empty JSON response that omits the optional datetime property. Ensures that absence of this field is handled without error and does not break contract conformance.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_278\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Globally Installing TypeSpec Compiler and Extension (Dogfood) - Bash\nDESCRIPTION: Globally installs the local build of @typespec/compiler using pnpm. Also installs the VS Code TypeSpec extension if VS Code is installed. This enables using your development build of the compiler and extension by default. Run at the project root after building.\nSOURCE: https://github.com/microsoft/typespec/blob/main/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm dogfood\n```\n\n----------------------------------------\n\nTITLE: Illustrating Completion for Object Literal Properties in TypeSpec\nDESCRIPTION: Example showcasing TypeSpec IDE completion (`┆`) suggesting available properties (`age`, `address`) for an object literal (`const user: User = #{...}`) based on the `User` model definition. This completion support for object values was added in PR #3280.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_40\n\nLANGUAGE: tsp\nCODE:\n```\nmodel User {\n  name: string;\n  age: int32;\n  address: string;\n}\n\nconst user: User = #{name: \"Bob\", ┆}\n                                  | [age]\n                                  | [address]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of @stream for Bidirectional Streaming in TypeSpec\nDESCRIPTION: This TypeSpec example defines an operation `connectToMessageService` where both the client and server can stream `Message` objects. The `@stream(StreamMode.Duplex)` decorator specifies bidirectional (duplex) streaming.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_13\n\nLANGUAGE: typespec\nCODE:\n```\n@stream(StreamMode.Duplex)\nop connectToMessageService(...Message): Message;\n```\n\n----------------------------------------\n\nTITLE: Importing Experimental HTTP Typekits in TypeSpec (TypeScript)\nDESCRIPTION: This TypeScript import statement brings the experimental HTTP typekits module ('@typespec/http/experimental/typekit') into the current TypeSpec file. This enables the use of added methods on default typekits (like 'model' and 'modelProperty' for HTTP-specific checks) and introduces new typekits ('httpOperation', 'httpPart', 'httpRequest', 'httpResponse') for reflecting on HTTP operation details, parts, requests, and responses respectively.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-framework.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport \"@typespec/http/experimental/typekit\";\n```\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Payload with Property Named 'and' - JSON\nDESCRIPTION: This example JSON payload contains a property named \"name\" with a value of \"ok\". Provided for validating that the model handling code does not reject legitimate instances named 'and', which is a reserved word in some languages. It is used as input for a REST endpoint expecting models with potentially problematic property names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_121\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"ok\" }\n```\n\n----------------------------------------\n\nTITLE: Generated OpenAPI Definition for Widget Model (v1 & v2)\nDESCRIPTION: This YAML snippet shows the generated OpenAPI definition for the `Widget` model corresponding to earlier API versions (`v1` and `v2`). It reflects the original state before the modifications introduced in `v3`: the property is named `name` and is listed in the `required` array, indicating it's mandatory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/versioning/guide.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nWidget:\n  type: object\n  properties:\n    id:\n      type: string\n    name:\n      type: string\n  required:\n    - id\n    - name\n```\n\n----------------------------------------\n\nTITLE: OpenAPI YAML Output for oneOf Union Types - YAML\nDESCRIPTION: Illustrates how the @oneOf-decorated TypeSpec union is rendered in OpenAPI YAML. The schema for Pet now uses oneOf, ensuring the value must conform to exactly one of the listed schemas. Input: TypeSpec union with @oneOf. Output: YAML with oneOf clause.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/typespec-for-openapi-dev.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nPet:\n  oneOf:\n    - $ref: \"#/components/schemas/Cat\"\n    - $ref: \"#/components/schemas/Dog\"\n```\n\n----------------------------------------\n\nTITLE: Getting Default (Missing) Optional Bytes Properties - JSON\nDESCRIPTION: Demonstrates the response for omitted optional bytes property, resulting in an empty JSON object. Used for testing persistence and round-trip integrity where the property is not set.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_266\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Checking Type Transformation with MetadataInfo in TypeSpec Emitters (JavaScript)\nDESCRIPTION: Checks if a given model type undergoes any shape changes (property removal or metadata relocation) based on the specified `Visibility`. If it returns `false`, the type's structure is unchanged for that visibility context, potentially allowing for simplifications in the emitter's output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-metadata-handling.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMetadataInfo.isTransformed(Model, Visibility)\n```\n\n----------------------------------------\n\nTITLE: Using Visibility.Item Flag for Array Recursion in TypeSpec Emitters (JavaScript)\nDESCRIPTION: A flag within the `Visibility` enumeration used when recursively processing elements within an array. Applying this flag ensures that any metadata associated with the array items is included within the item payload itself, rather than being handled separately. This is particularly useful in scenarios like batch API operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-metadata-handling.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nVisibility.Item // Flag\n```\n\n----------------------------------------\n\nTITLE: Configuring Emitter `emitter-output-dir` (New Syntax) in YAML\nDESCRIPTION: Demonstrates the updated method for specifying an emitter's output directory using the `emitter-output-dir` property in `tspconfig.yaml`. This example also shows how it can leverage variable interpolation (`{output-dir}`) for referencing a common base directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nemitters:\n  my-emitter:\n    emitter-output-dir: {output-dir}/for-this-emitter\n#                        ^ can now reference the common output-dir\n```\n\n----------------------------------------\n\nTITLE: Defining the Options Interface for Create Operation in TypeScript\nDESCRIPTION: This TypeScript interface outlines the possible optional parameters for the 'create' operation. It extends 'OperationOptions', and allows optional input for 'age', 'interiorNumber', and a nested 'address'. This design enables extensibility and clean mapping of TypeSpec optional fields to TypeScript clients. The interface presumes that the Address type and OperationOptions base are defined elsewhere in the codebase.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/operation-parameters/spread_with_nested.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CreateOptions extends OperationOptions {\n  age?: string;\n  interiorNumber?: string;\n  address?: Address;\n}\n```\n\n----------------------------------------\n\nTITLE: Expected V1 Request/Response Body for Versioning Removed Model V3 (JSON)\nDESCRIPTION: Specifies the expected JSON request and response bodies for the V3 endpoint ('post /versioning/removed/api-version:v1/v3') called with API version 'v1' in the 'versioning/removed' scenario. It includes 'id' and 'enumProp', which might be removed in later versions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_315\n\nLANGUAGE: json\nCODE:\n```\n// Expected request body for path: \"/versioning/removed/api-version:v1/v3\"\n{ \"id\": \"123\", \"enumProp\": \"enumMemberV1\" }\n```\n\nLANGUAGE: json\nCODE:\n```\n// Expected response body for path: \"/versioning/removed/api-version:v1/v3\"\n{ \"id\": \"123\", \"enumProp\": \"enumMemberV1\" }\n```\n\n----------------------------------------\n\nTITLE: Adjusting tsp compile Command for Emitter Paths (Bash)\nDESCRIPTION: Shows how to adjust the `tsp compile` command due to changes in package name resolution, specifically when running from within `node_modules`. Instead of referencing an emitter by name, provide the relative path to the emitter's root directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=bash \n-tsp compile . --emit my-emitter\n+tsp compile . ../../  # path to your emitter root instead\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Options Interface in TypeScript (Next Link)\nDESCRIPTION: This TypeScript interface `LinkOptions` defines the optional parameters for the `link` operation (next link pattern). Similar to the continuation token example, this generated interface extends `OperationOptions` without adding further operation-specific optional parameters like `maxPageSize`, which are handled via `LinkPageSettings`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/http-operations/paging.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```ts src/api/testClientOperations.ts interface LinkOptions\nexport interface LinkOptions extends OperationOptions {}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding TypeSpec OpenAPI as a Peer Dependency - Bash\nDESCRIPTION: Installs the @typespec/openapi package as a peer dependency using npm. This pattern is recommended when developing a library that extends or relies on TypeSpec OpenAPI, allowing versioning flexibility. Prerequisites are npm and appropriate project permissions. The command does not accept arguments beyond the package name, and adds the dependency to the peerDependencies list in package.json.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/openapi/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/openapi\n\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Output for safeint with double-int Strategy (YAML)\nDESCRIPTION: Illustrates the resulting OpenAPI fragment for a TypeSpec 'safeint' scalar when the 'safeint-strategy' option is configured as 'double-int'. It uses 'type: integer' and 'format: double-int' as per the new strategy.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-03-05.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntype: integer, format: double-int\n```\n\n----------------------------------------\n\nTITLE: Generating a TypeScript Interface with Basic Array Properties\nDESCRIPTION: This TypeScript code shows the expected interface `Widget` generated from the preceding TypeSpec definition. It defines `id` as an `Array<string>`, `weight` as an `Array<number>`, and `color` as an `Array<\"red\" | \"blue\">`, directly corresponding to the types specified in the TypeSpec model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/array-properties.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport interface Widget {\n  id: Array<string>;\n  weight: Array<number>;\n  color: Array<\"red\" | \"blue\">;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/json-schema in a Library (Bash)\nDESCRIPTION: Installs the `@typespec/json-schema` package as a peer dependency using npm with the `--save-peer` flag. This is intended for use when creating a reusable TypeSpec library that itself utilizes or extends the functionality of `@typespec/json-schema`, allowing the final consuming project to manage the specific version.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/json-schema\n```\n\n----------------------------------------\n\nTITLE: Serializing Complex Eagle Model for Transport in TypeScript\nDESCRIPTION: The `jsonEagleToTransportTransform` function serializes an `Eagle` object, including its complex properties. It maps the basic `kind` and `wingspan`. For nested properties, it calls specific helper serializers: `jsonArrayBirdToTransportTransform` for the `friends` array, `jsonRecordBirdToTransportTransform` for the `hate` record, and `jsonBirdToTransportTransform` for the `partner` instance. Handles null or undefined input.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/polymorphic_single_level_inheritance.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonEagleToTransportTransform(input_?: Eagle | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    kind: input_.kind,\n    friends: jsonArrayBirdToTransportTransform(input_.friends),\n    hate: jsonRecordBirdToTransportTransform(input_.hate),\n    partner: jsonBirdToTransportTransform(input_.partner),\n    wingspan: input_.wingspan,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code with TypeSpec CLI (Java Context)\nDESCRIPTION: This Bash command (`tsp compile`) triggers the TypeSpec compiler to process the `main.tsp` file and invoke the configured Java client emitter, generating the Java client code in the specified output directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile {path to main.tsp}/main.tsp\n```\n\n----------------------------------------\n\nTITLE: Defining a String-Based Model (Old Syntax) in TypeSpec\nDESCRIPTION: Shows the deprecated syntax for defining a type `MyStr` based on the intrinsic `string` type using `model is string`. This pattern is replaced by the `scalar MyStr extends string;` syntax introduced with the `scalar` keyword.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nmodel MyStr is string;\n```\n\n----------------------------------------\n\nTITLE: Migrating Union Discrimination from @discriminator to @discriminated (TSP)\nDESCRIPTION: Illustrates the migration from the deprecated `@discriminator(\"type\")` decorator on unions to the `@discriminated(...)` decorator. The new decorator requires specifying the discriminator property name within an object argument.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=\"tsp\"\n-@discriminator(\"type\")\n+@discriminated(#{envelope: \"none\", discriminatorPropertyName: \"type\"})\nunion Pet;\n```\n```\n\n----------------------------------------\n\nTITLE: Providing Model With Missing Nested Discriminator - JSON\nDESCRIPTION: Returns a model that intentionally omits both parent and nested discriminator fields. Used to test complex polymorphic systems with multiple levels of required discriminators and their fallback logic.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_166\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\": 1 }\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Basic Authorization Header (HTTP)\nDESCRIPTION: Shows a properly formatted HTTP Authorization header for Basic Authentication, where the credentials are base64-encoded. Input: username and password; Output: HTTP header for client requests. Intended for documentation and demonstration only.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nAuthorization: Basic ZGVtbzpwQDU1dzByZA==\n```\n\n----------------------------------------\n\nTITLE: OpenAPI3 Schema for Nested Models with Custom Names - YAML\nDESCRIPTION: Presents OpenAPI3 schema where nested referenced objects include specific XML element names via the xml.name property, matching the @encodedName annotation in TypeSpec. Inputs/outputs use object reference and custom XML tags as required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_29\n\nLANGUAGE: YAML\nCODE:\n```\nBook:\n  type: object\n  properties:\n    author:\n      allOf:\n        - $ref: \"#/components/schemas/Author\"\n      xml:\n        name: \"author\" # Here we have to redefine this name otherwise in OpenAPI semantic the `XmlAuthor` name would be used\nAuthor:\n  type: object\n  properties:\n    name:\n      type: string\n  xml:\n    name: \"XmlAuthor\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Schema Emitter Options in tspconfig.yaml (YAML)\nDESCRIPTION: Demonstrates how to configure specific options for the `@typespec/json-schema` emitter within the TypeSpec configuration file. Options are placed under the `options` key, nested under the emitter's name.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/json-schema/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/json-schema\"\noptions:\n  \"@typespec/json-schema\":\n    option: value\n```\n\n----------------------------------------\n\nTITLE: Putting Default (Missing) Optional PlainDate Properties - JSON\nDESCRIPTION: A PUT request payload omitting the optional date property, used to test server and client logic for optional values absent in updates.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_296\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Headers for Encoded DateTime Values\nDESCRIPTION: Provides example HTTP header values demonstrating the `rfc7231` (default) and explicitly specified `rfc3339` encodings for `utcDateTime` properties defined in the preceding TypeSpec `User` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/encoding.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nCreated-At: Wed, 12 Oct 2022 07:20:50 GMT\nCreated-At-Rfc3339: 2022-10-12T07:20:50.52Z\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Java Client Generator with Maven - Bash\nDESCRIPTION: This command runs all the unit and integration tests for the Java client generator using Maven from within the packages/http-client-java/generator directory. It relies on the project's existing test framework setup, Java 17+ and Maven being installed as prerequisites. By cleaning and then testing, it ensures results are not influenced by old build artifacts. Output reports are typically generated under the target directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean test\n```\n\n----------------------------------------\n\nTITLE: Testing Microsoft TypeSpec Generator with .NET Core CLI - Shell\nDESCRIPTION: Runs the test suite for the Microsoft TypeSpec Generator project using the .NET Core CLI. This operation is performed via the \"dotnet test\" command at the root directory. Requires the .NET Core SDK 8.0.x to be installed, and that all test projects are properly set up. No parameters or switches are required for this basic test operation. Passing tests confirm the correctness of the client libraries and overall tool workflow.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-csharp/generator/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Formatting Opening Curly Brace Placement in TypeSpec Models\nDESCRIPTION: Shows the convention of placing the block opening curly brace `{` on the same line as the model definition, rather than on a new line. The 'bad' example places the brace on the next line, contrasting with the 'good' example.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n// bad\nmodel Pet \n{\n  name: string;\n}\n\n// good\nmodel Pet {\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Executing npm Scripts for TypeSpec Sample Testing and Regeneration in Bash\nDESCRIPTION: This Bash snippet lists npm commands used within the TypeSpec Samples project. 'npm run test' checks samples against snapshots, 'npm run test:ci' runs tests similarly to the continuous integration environment, 'npm run test:regen' regenerates a specific sample identified by its name, and 'npm run regen-samples' regenerates all samples. These commands are essential for maintaining and validating the TypeSpec samples.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test    # Check Samples match snapshots\nnpm run test:ci # run test same as CI\n\nnpm run test:regen -- -g \"<sample-name>\" # Regen of this name\n\nnpm run regen-samples # Regen all samples.\n```\n\n----------------------------------------\n\nTITLE: Generating Foo Model Interface in TypeScript\nDESCRIPTION: TypeScript interface for Foo, mapping from the TypeSpec definition where my_values is typed as Array<number> under the property myValues. No runtime dependencies; input is a generated TypeScript file from TypeSpec. Output is the application model, limiting myValues to numeric arrays.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/arrays.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface Foo {\n  myValues: Array<number>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/openapi3 Library via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@typespec/openapi3` package. This is a prerequisite for using the library's features, such as emitting OpenAPI 3.0 specifications from TypeSpec definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi3/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/openapi3\n```\n\n----------------------------------------\n\nTITLE: Defining TypeSpec Project Schema and Linter Config - TypeSpec - TypeSpec\nDESCRIPTION: Defines the schema for a TypeSpec project configuration file, including core options, extension mechanics, parameters, linter configuration, and emitter options. Serves as a specification for what properties a tspconfig.yaml file may declare, guiding implementers and tooling on expected structure. Requires TypeSpec language support; not executable but structurally descriptive for IDEs, validators, and documentation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel TypeSpecProjectSchema {\n  extends?: string;\n  parameters?: Record<{default: string}>\n  `environment-variables`?: Record<{default: string}>\n  `warn-as-error`?: boolean;\n  `output-dir`?: string;\n  `trace`?: string | string[];\n  imports?: string[];\n  emit?: string[];\n  `dry-run`?: boolean;\n  options?: Record<unknown>;\n  linter?: LinterConfig;\n}\n\nmodel LinterConfig {\n  extends?: RuleRef[];\n  enable?: Record<RuleRef, boolean>;\n  disable?: Record<RuleRef, string>;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining an Option with Absolute-Path Format - JSON Schema in JS\nDESCRIPTION: Shows the definition of an emitter option that expects an absolute path string and may accept null. Used within the JSON schema describing emitter options. Ensures paths are handled consistently in TypeSpec configurations, reducing ambiguity and runtime errors for path-dependent behaviors.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitters-basics.md#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"asset-dir\": { type: \"string\", format: \"absolute-path\", nullable: true },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Serializing Goose Model for Transport in TypeScript\nDESCRIPTION: This function `jsonGooseToTransportTransform` handles the serialization of a `Goose` object. It creates a transport object including the `kind` ('goose') and `wingspan` properties from the input `Goose` instance. It returns null/undefined inputs as is.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/polymorphic_single_level_inheritance.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonGooseToTransportTransform(input_?: Goose | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    kind: input_.kind,\n    wingspan: input_.wingspan,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Versioned Server Operation with Path API Version\nDESCRIPTION: Defines a HEAD endpoint for a non-versioned server using a path-based `api-version` parameter without a default value. The expected URL includes the API version provided at runtime (e.g., '/with-path-api-version/v1.0').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_109\n\nLANGUAGE: http\nCODE:\n```\nhead /server/versions/not-versioned/with-path-api-version\n```\n\n----------------------------------------\n\nTITLE: Encode Numeric Property as SafeInt String - JSON\nDESCRIPTION: Documents the use of a safe integer property serialized as a string for large numeric values, such as \\\"10000000000\\\". This avoids precision loss during transport. Both request and response bodies should treat \\\"value\\\" as a string and validate its numeric range as needed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": \\\"10000000000\\\"\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": \\\"10000000000\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Updating JsonSchema Namespace References in TypeSpec\nDESCRIPTION: Details a breaking change requiring updates to TypeSpec files using the JsonSchema emitter. The namespace has changed from `JsonSchema` to `TypeSpec.JsonSchema`. This snippet shows both the required update for `using` statements and for direct type references.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-07-11.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n// Old:\nusing JsonSchema;\n\n// New:\nusing TypeSpec.JsonSchema;\n```\n\nLANGUAGE: typespec\nCODE:\n```\n// Old reference:\nJsonSchema.[Type]\n\n// New reference:\nTypeSpec.JsonSchema.[Type]\n```\n\n----------------------------------------\n\nTITLE: Defining ExtraFeature Data Shape in TypeScript Interface\nDESCRIPTION: This TypeScript interface captures the shape of an ExtraFeature with typed fields id, name, and value as number. It is intended for use throughout your TypeScript model representations and is a prerequisite for the Dog interface that will reference it. No parameters are required; it is typically imported or referenced as a dependency.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/model_additional_properties.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ExtraFeature {\\n  id: string;\\n  name: string;\\n  value: number;\\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated @list Decorator in TypeSpec\nDESCRIPTION: Highlights the deprecation of the `@list` decorator from TypeSpec core. Specifications should be updated to use the `@listsResource` decorator from the `@typespec/http` library instead for defining list operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-07-11.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n// Deprecated:\n@list\n\n// Replacement (from @typespec/http):\n@listsResource\n```\n\n----------------------------------------\n\nTITLE: API Usage of createProgram and compile (Function Signature Change) - TypeScript\nDESCRIPTION: Compares the deprecated 'createProgram' function and previous 'compile' API order with the new 'compile' signature for TypeSpec programs. The code snippets demonstrate both older and current syntax, changing the order of parameters to favor passing 'host' before the filename. Requires TypeScript, TypeSpec library, and a valid TypeSpec host object. Accepts a filename string and a host, returns a compilation result.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-10-12.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Before\ncreateProgram(host, \"main.tsp);\n\n// After\ncompile(host, \"main.tsp\");\n```\n\n----------------------------------------\n\nTITLE: Starting the Spector Mock API Server (Bash)\nDESCRIPTION: Provides commands to run the `tsp-spector serve` tool to start a mock API server based on TypeSpec scenarios. The minimal command starts the server using scenarios from the specified path. Optional arguments allow changing the default port (`--port`) and defining the output path for the coverage file (`--coverageFile`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/using-spector.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Minimal\ntsp-spector serve ./path/to/scenarios\n\n# Change the port\ntsp-spector serve ./path/to/scenarios --port 1234\n\n# Specify where the coverage file should go\ntsp-spector serve ./path/to/scenarios --coverageFile ./path/to/spector-coverage.json\n```\n\n----------------------------------------\n\nTITLE: Deserializing Transport Data to TypeSpec Model in TypeScript\nDESCRIPTION: TypeScript function `jsonTodoItemPatchToApplicationTransform` deserializes an optional transport object (any) back into a `TodoItemPatch` object (application model). It handles null input and directly maps the `title` and `assignedTo` properties from the input object, ensuring the data conforms to the `TodoItemPatch` structure defined in TypeSpec, including handling potentially null values for referenced properties. Located in `src/models/internal/serializers.ts`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/property_references_property.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport function jsonTodoItemPatchToApplicationTransform(input_?: any): TodoItemPatch {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    title: input_.title,\n    assignedTo: input_.assignedTo,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Applying `@contentType` to an Event Variant in TypeSpec\nDESCRIPTION: Demonstrates using the `@contentType` decorator on a union variant (`message`) within an `@events` decorated union (`MixedEvents`). It sets the content type to \"application/json\" for events matching the `message` structure.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/events/reference/decorators.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\n@events\nunion MixedEvents {\n  @contentType(\"application/json\")\n  message: {\n    id: string,\n    text: string,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Styles for @typespec/playground\nDESCRIPTION: This JavaScript/TypeScript import statement illustrates the required method for including styles for the `@typespec/playground` package due to a breaking change introduced in the November 2023 release. Consuming applications must now explicitly import the CSS file separately as shown.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-11-07.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \\\"@typespec/playground/styles.css\\\";\n```\n\n----------------------------------------\n\nTITLE: Example XML Output for XML-Decorated Model Data - XML\nDESCRIPTION: This XML snippet illustrates the actual on-the-wire representation of the 'Pet' model as configured using XML-specific decorators in TypeSpec and OpenAPI3 emitter. Demonstrates element hierarchy, tag names, and array contents as they would appear in a real XML payload. \nDependencies: Follows config from TypeSpec and OpenAPI output above. \nInputs: Pet entity data. Outputs: Serialized XML. \nLimitation: Static example, not executable.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-11-05.md#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<XmlPet>\n  <ItemsTags>\n    <string>abc</string>\n    <string>def</string>\n  </ItemsTags>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Providing Model With Extensible Enum Discriminator Missing Discriminator - JSON\nDESCRIPTION: Shows a JSON model intentionally omitting the discriminator property. This tests how the system handles models missing required type information, particularly in cases where polymorphism is expected.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_161\n\nLANGUAGE: json\nCODE:\n```\n{ \"weight\": 10 }\n```\n\n----------------------------------------\n\nTITLE: Using `@invisible(Lifecycle)` as Replacement (0.66.0 Context)\nDESCRIPTION: This snippet, from the 0.66.0 release notes, shows the correct replacement (`@invisible(Lifecycle)`) for the deprecated `@visibility(\"none\")` decorator.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_22\n\nLANGUAGE: tsp\nCODE:\n```\n@invisible(Lifecycle)\nexample: string;\n```\n\n----------------------------------------\n\nTITLE: Switching Emitter Imports from Compiler to Asset Emitter - TypeScript (ts, diff)\nDESCRIPTION: Shows replacing TypeEmitter and related imports from the deprecated @typespec/compiler/emitter-framework to @typespec/asset-emitter. The diff reflects direct import source changes for emitter framework usage within a TypeSpec plugin or tool. Requires a project with @typespec/asset-emitter installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2025-03-18.md#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-import { TypeEmitter, ... } from \"@typespec/compiler/emitter-framework\";\n+import { TypeEmitter, ... } from \"@typespec/asset-emitter\";\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Transport Serializer for Bar Model\nDESCRIPTION: This TypeScript function, `jsonBarToTransportTransform`, serializes an instance of the `Bar` interface into a plain JavaScript object suitable for transport (e.g., conversion to JSON). It takes an optional `Bar` object or null as input and returns the transformed object or null/undefined.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/property_references_property.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport function jsonBarToTransportTransform(input_?: Bar | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    address: input_.address,\n    parentId: input_.parentId,\n  }!;\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Request Body for spreadParameterWithInnerModel\nDESCRIPTION: Specifies the expected JSON request body for the `POST /parameters/spread/alias/inner-model-parameter/{id}` endpoint test case. The body contains the 'name' property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Disallowed Override of Required Property with Optional Property in TypeSpec\nDESCRIPTION: TypeSpec code illustrating a breaking change (#3659). The `Child` model attempts to make the inherited required property `example` optional (`example?: string`) by overriding it, which is no longer permitted in this version of TypeSpec.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_37\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Base {\n  example: string;\n}\n\nmodel Child extends Base {\n  example?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Optional PlainTime Properties - JSON\nDESCRIPTION: A response body supplying an optional plain time property in 'HH:mm:ss' format. Used for APIs that model time-of-day without date or timezone info. Ensures correct parsing and serialization for such types.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_297\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": \"13:06:12\" }\n```\n\n----------------------------------------\n\nTITLE: Putting Default (Missing) Optional Duration Properties - JSON\nDESCRIPTION: A minimal PUT request with the optional duration property omitted, demonstrating the accepted contract for missing optional values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_284\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with a Circular Template Constraint (TypeSpec)\nDESCRIPTION: Example TypeSpec code demonstrating a circular template constraint (`T extends T`). As of this release, the compiler (@typespec/compiler) will report an error for such definitions, preventing potential issues.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-03-05.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Example<T extends T>\n```\n\n----------------------------------------\n\nTITLE: Accessing Output Directory in Old `$onEmit` Signature (TypeScript)\nDESCRIPTION: Code snippet showing how the emitter output directory was accessed within the old `$onEmit` function signature in TypeScript. It involved accessing the `\"output-dir\"` key from the `options` parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-12-07.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport function $onEmit(program: Program, options: MyEmitterOptions) {\n  const outputDir = options[\"output-dir\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Recursive Schemas in OpenAPI YAML\nDESCRIPTION: Illustrates a cyclic reference within an OpenAPI inline schema in YAML, where a schema references itself recursively via the 'next' property. Such cycles are not permitted in OpenAPI as they cannot be represented reliably. Review and refactor schema properties to remove cyclic dependencies for successful OpenAPI specification emission.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/diagnostics.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\\n  schemas:\\n    Node:\\n      type: object\\n      properties:\\n        value:\\n          type: string\\n        next:\\n          $ref: \"#/components/schemas/Node\"\\n\n```\n\n----------------------------------------\n\nTITLE: Example Request Body for String Union Property (JSON)\nDESCRIPTION: Provides an example JSON request body where the 'prop' field is set to 'b', one of the allowed values in the string union type ('a' | 'b' | 'c'). This body is expected for requests related to the '/type/union/strings-only' endpoint context.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_310\n\nLANGUAGE: json\nCODE:\n```\n{ \"prop\": \"b\" }\n```\n\n----------------------------------------\n\nTITLE: Deprecated Usage of `@parameterVisibility` for PATCH Optionality in TypeSpec\nDESCRIPTION: Illustrates the deprecated usage of `@parameterVisibility` without arguments. Previously, this was sometimes used (as an unintended side effect) to disable the default behavior where `@typespec/http` treats all properties of a PATCH request body as effectively optional. This usage is now an error.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_14\n\nLANGUAGE: tsp\nCODE:\n```\n@parameterVisibility\n@patch\nop example(@bodyRoot resource: Resource): Resource;\n```\n\n----------------------------------------\n\nTITLE: Converting Detailed OpenAPI3 Component Parameter to TypeSpec Model Field (YAML/TSP)\nDESCRIPTION: Shows how an OpenAPI3 component parameter `ProductId`, defined under `components/parameters` and located `in: path`, is converted into a field within a TypeSpec `model`. If the model `Product` doesn't exist, it's created. The `id` parameter becomes a model property decorated with `@path`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/cli.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  parameters:\n    ProductId:\n      name: id\n      in: path\n      required: true\n      schema:\n        type: string\n```\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Product {\n  @path id: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Spector Libraries with PowerShell\nDESCRIPTION: Demonstrates how to manually generate a non-stubbed Spector library for a specific http-spec project using the Generate.ps1 script. Set the -Stubbed parameter to $false to produce the full, non-stubbed version. Requires PowerShell and access to the ./eng/scripts/Generate.ps1 script located in the repository. The first parameter specifies the project path, and -Stubbed determines whether a stub or full library is generated.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-csharp/generator/docs/spector.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./eng/scripts/Generate.ps1 http/authentication/api-key -Stubbed $false\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for PUT /type/property/additionalProperties/extendsDifferentSpreadFloat\nDESCRIPTION: This JSON is the expected input body for a PUT request to `/type/property/additionalProperties/extendsDifferentSpreadFloat`. It demonstrates sending a model with known properties ('name') and additional float properties ('prop', 'derivedProp'), likely testing how the service handles receiving such structures.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_191\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"abc\", \"prop\": 43.125, \"derivedProp\": 43.125 }\n```\n\n----------------------------------------\n\nTITLE: Migrating to Explicit Multipart Body Decorator - TypeSpec Diff\nDESCRIPTION: This snippet demonstrates how to migrate from the deprecated implicit multipart body to the recommended explicit usage of @multipartBody and HttpPart<T> in TypeSpec. It highlights the changes in decorator usage for multipart operations, emphasizing the need to switch parameter types to use HttpPart for more precise type guarantees. The diff format shows which lines to remove and which to add when updating service definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http/CHANGELOG.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=tsp\nop upload(\n  @header contentType: \"multipart/form-data\",\n-  @body body: {\n+  @multipartBody body: {\n-    name: string;\n+    name: HttpPart<string>;\n-    avatar: bytes;\n+    avatar: HttpPart<bytes>;\n  }\n): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple String Literal in TypeSpec\nDESCRIPTION: Demonstrates defining a basic string literal using double quotes (`\"`) and assigning it to a TypeSpec alias named `Str`. This is used for representing fixed string values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/type-literals.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nalias Str = \"Hello World!\";\n```\n\n----------------------------------------\n\nTITLE: Defining Model With zonedDateTime Property - TypeSpec\nDESCRIPTION: This snippet shows an old TypeSpec model definition using the deprecated 'zonedDateTime' intrinsic type for a date-time property. It serves as a reference for cases before migration. Prerequisites: TypeSpec (prior to this release) supporting 'zonedDateTime'. The 'createdAt' property is expected to store a datetime value; input is any TypeSpec model reference, output is a schema containing 'createdAt: zonedDateTime'. Limitation: Not supported in newer TypeSpec releases.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-04-11.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel MyModel {\n  createdAt: zonedDateTime;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Connecting a Code Fix to Diagnostics in TypeSpec (TypeScript)\nDESCRIPTION: This snippet demonstrates how to attach code fixes to diagnostics when reporting errors. It uses the reportDiagnostic function, passing in the error code, target node, and an array of code fixes. The example creates a change identifier code fix and attaches it for the 'invalid-identifier' code, ensuring the diagnostic can offer an automated fix.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/codefixes.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nreportDiagnostic({\n  code: \"invalid-identifier\",\n  target: node,\n  codefixes: [createChangeIdentifierCodeFix(node, \"string\")],\n});\n\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing Polymorphic Models with Discriminators in TypeScript\nDESCRIPTION: Provides a utility module for handling serialization and deserialization of Fish and its subtypes, converting between application and transport representations based on discriminator properties 'kind' and 'sharktype'. Includes functions for encoding/decoding base64, handling Date fields in several formats, and recursively transforming arrays and records of Fish. Fallback logic for unknown discriminator values emits warnings. Depends on model definitions and Node.js Buffer APIs. All functions are designed for lossless, type-safe model conversions within SDKs or service clients.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/inheritance_2_discriminators.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Fish, Shark, SawShark, GoblinShark, Salmon } from \"../models.js\";\n\nexport function decodeBase64(value: string): Uint8Array | undefined {\n  if (!value) {\n    return value as any;\n  }\n  // Normalize Base64URL to Base64\n  const base64 = value\n    .replace(/-/g, \"+\")\n    .replace(/_/g, \"/\")\n    .padEnd(value.length + ((4 - (value.length % 4)) % 4), \"=\");\n\n  return new Uint8Array(Buffer.from(base64, \"base64\"));\n}\nexport function encodeUint8Array(\n  value: Uint8Array | undefined | null,\n  encoding: BufferEncoding,\n): string | undefined {\n  if (!value) {\n    return value as any;\n  }\n  return Buffer.from(value).toString(encoding);\n}\nexport function dateDeserializer(date?: string | null): Date {\n  if (!date) {\n    return date as any;\n  }\n\n  return new Date(date);\n}\nexport function dateRfc7231Deserializer(date?: string | null): Date {\n  if (!date) {\n    return date as any;\n  }\n\n  return new Date(date);\n}\nexport function dateRfc3339Serializer(date?: Date | null): string {\n  if (!date) {\n    return date as any;\n  }\n\n  return date.toISOString();\n}\nexport function dateRfc7231Serializer(date?: Date | null): string {\n  if (!date) {\n    return date as any;\n  }\n\n  return date.toUTCString();\n}\nexport function dateUnixTimestampSerializer(date?: Date | null): number {\n  if (!date) {\n    return date as any;\n  }\n\n  return Math.floor(date.getTime() / 1000);\n}\nexport function dateUnixTimestampDeserializer(date?: number | null): Date {\n  if (!date) {\n    return date as any;\n  }\n\n  return new Date(date * 1000);\n}\nexport function jsonFishToTransportDiscriminator(input_?: Fish): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  const discriminatorValue = input_.kind;\n  if (discriminatorValue === \"shark\") {\n    return jsonSharkToTransportTransform(input_ as any)!;\n  }\n\n  if (discriminatorValue === \"salmon\") {\n    return jsonSalmonToTransportTransform(input_ as any)!;\n  }\n  console.warn(`Received unknown kind: ` + discriminatorValue);\n  return input_ as any;\n}\nexport function jsonFishToTransportTransform(input_?: Fish | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    ...jsonFishToTransportDiscriminator(input_),\n    age: input_.age,\n    kind: input_.kind,\n  }!;\n}\nexport function jsonFishToApplicationDiscriminator(input_?: any): Fish {\n  if (!input_) {\n    return input_ as any;\n  }\n  const discriminatorValue = input_.kind;\n  if (discriminatorValue === \"shark\") {\n    return jsonSharkToApplicationTransform(input_ as any)!;\n  }\n\n  if (discriminatorValue === \"salmon\") {\n    return jsonSalmonToApplicationTransform(input_ as any)!;\n  }\n  console.warn(`Received unknown kind: ` + discriminatorValue);\n  return input_ as any;\n}\nexport function jsonFishToApplicationTransform(input_?: any): Fish {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    ...jsonFishToApplicationDiscriminator(input_),\n    age: input_.age,\n    kind: input_.kind,\n  }!;\n}\nexport function jsonSharkToTransportDiscriminator(input_?: Shark): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  const discriminatorValue = input_.sharktype;\n  if (discriminatorValue === \"saw\") {\n    return jsonSawSharkToTransportTransform(input_ as any)!;\n  }\n\n  if (discriminatorValue === \"goblin\") {\n    return jsonGoblinSharkToTransportTransform(input_ as any)!;\n  }\n  console.warn(`Received unknown kind: ` + discriminatorValue);\n  return input_ as any;\n}\nexport function jsonSharkToTransportTransform(input_?: Shark | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    ...jsonSharkToTransportDiscriminator(input_),\n    kind: input_.kind,\n    sharktype: input_.sharktype,\n    age: input_.age,\n  }!;\n}\nexport function jsonSharkToApplicationDiscriminator(input_?: any): Shark {\n  if (!input_) {\n    return input_ as any;\n  }\n  const discriminatorValue = input_.sharktype;\n  if (discriminatorValue === \"saw\") {\n    return jsonSawSharkToApplicationTransform(input_ as any)!;\n  }\n\n  if (discriminatorValue === \"goblin\") {\n    return jsonGoblinSharkToApplicationTransform(input_ as any)!;\n  }\n  console.warn(`Received unknown kind: ` + discriminatorValue);\n  return input_ as any;\n}\nexport function jsonSharkToApplicationTransform(input_?: any): Shark {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    ...jsonSharkToApplicationDiscriminator(input_),\n    kind: input_.kind,\n    sharktype: input_.sharktype,\n    age: input_.age,\n  }!;\n}\nexport function jsonSawSharkToTransportTransform(input_?: SawShark | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    sharktype: input_.sharktype,\n    kind: input_.kind,\n    age: input_.age,\n  }!;\n}\nexport function jsonSawSharkToApplicationTransform(input_?: any): SawShark {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    sharktype: input_.sharktype,\n    kind: input_.kind,\n    age: input_.age,\n  }!;\n}\nexport function jsonGoblinSharkToTransportTransform(input_?: GoblinShark | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    sharktype: input_.sharktype,\n    kind: input_.kind,\n    age: input_.age,\n  }!;\n}\nexport function jsonGoblinSharkToApplicationTransform(input_?: any): GoblinShark {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    sharktype: input_.sharktype,\n    kind: input_.kind,\n    age: input_.age,\n  }!;\n}\nexport function jsonSalmonToTransportTransform(input_?: Salmon | null): any {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    kind: input_.kind,\n    friends: jsonArrayFishToTransportTransform(input_.friends),\n    hate: jsonRecordFishToTransportTransform(input_.hate),\n    partner: jsonFishToTransportTransform(input_.partner),\n    age: input_.age,\n  }!;\n}\nexport function jsonSalmonToApplicationTransform(input_?: any): Salmon {\n  if (!input_) {\n    return input_ as any;\n  }\n  return {\n    kind: input_.kind,\n    friends: jsonArrayFishToApplicationTransform(input_.friends),\n    hate: jsonRecordFishToApplicationTransform(input_.hate),\n    partner: jsonFishToApplicationTransform(input_.partner),\n    age: input_.age,\n  }!;\n}\nexport function jsonArrayFishToTransportTransform(items_?: Array<Fish> | null): any {\n  if (!items_) {\n    return items_ as any;\n  }\n  const _transformedArray = [];\n\n  for (const item of items_ ?? []) {\n    const transformedItem = jsonFishToTransportTransform(item as any);\n    _transformedArray.push(transformedItem);\n  }\n\n  return _transformedArray as any;\n}\nexport function jsonArrayFishToApplicationTransform(items_?: any): Array<Fish> {\n  if (!items_) {\n    return items_ as any;\n  }\n  const _transformedArray = [];\n\n  for (const item of items_ ?? []) {\n    const transformedItem = jsonFishToApplicationTransform(item as any);\n    _transformedArray.push(transformedItem);\n  }\n\n  return _transformedArray as any;\n}\nexport function jsonRecordFishToTransportTransform(items_?: Record<string, any> | null): any {\n  if (!items_) {\n    return items_ as any;\n  }\n\n  const _transformedRecord: any = {};\n\n  for (const [key, value] of Object.entries(items_ ?? {})) {\n    const transformedItem = jsonFishToTransportTransform(value as any);\n    _transformedRecord[key] = transformedItem;\n  }\n\n  return _transformedRecord;\n}\nexport function jsonRecordFishToApplicationTransform(items_?: any): Record<string, any> {\n  if (!items_) {\n    return items_ as any;\n  }\n\n  const _transformedRecord: any = {};\n\n  for (const [key, value] of Object.entries(items_ ?? {})) {\n    const transformedItem = jsonFishToApplicationTransform(value as any);\n    _transformedRecord[key] = transformedItem;\n  }\n\n  return _transformedRecord;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetKiosk RPC Method in Protobuf\nDESCRIPTION: This Protobuf snippet defines the `GetKiosk` RPC method. It takes a `GetKioskRequest` message (containing the kiosk ID) as input and returns a `Kiosk` message. The `google.api.http` option maps this RPC to an HTTP GET request on the path `/v1/kiosks/{id}`, indicating the `id` from the request message should be used as a path parameter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/samples/specs/grpc-kiosk-example/README.md#_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\n// Get a kiosk.\nrpc GetKiosk(GetKioskRequest) returns (Kiosk) {\n    option (google.api.http) = { get: \"/v1/kiosks/{id}\" };\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Iterable Collections with Java Generics\nDESCRIPTION: Defines a private static generic Iterable wrapper that applies a mapping function to each element when iterated. On calling iterator(), it returns a new mapped IteratorImpl operating over the underlying iterable. Requires the base Iterable and a mapping function as parameters. Designed for cases where mapping is needed during iteration such as collection views.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-mgmt/src/main/resources/ResourceManagerUtils_PagedIterableImpl.txt#_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nprivate static final class IterableImpl<T, S> implements Iterable<S> {\n\n    private final Iterable<T> iterable;\n    private final Function<T, S> mapper;\n\n    private IterableImpl(Iterable<T> iterable, Function<T, S> mapper) {\n        this.iterable = iterable;\n        this.mapper = mapper;\n    }\n\n    @Override\n    public Iterator<S> iterator() {\n        return new IteratorImpl<>(iterable.iterator(), mapper);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating 'server start' Script Parameter Name\nDESCRIPTION: Documents the renaming of the script parameter for the 'server start' command from 'scenarioPath' to 'scenarioPaths' in version 0.1.0-alpha.4. This change supports specifying multiple scenario paths.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/CHANGELOG.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nUpdate `server start` script parameter - `scenarioPath` to `scenarioPaths`.\n```\n\n----------------------------------------\n\nTITLE: Declaring Main and TypeSpec Exports in package.json - JSONC\nDESCRIPTION: This JSONC code defines the \"main\" entry point and exports for a TypeSpec library in package.json, specifying TypeSpec file mappings. The 'typespec' field under each export informs the TypeSpec compiler where to find TypeSpec main files or modules, and supports wildcards or additional named exports. This configuration is necessary for proper module resolution by consumers and the TypeSpec compiler.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_3\n\nLANGUAGE: jsonc\nCODE:\n```\n  \"main\": \"dist/src/index.js\",\n  \"exports\": {\n    \".\": {\n      \"typespec\": \"./lib/main.tsp\"\n    },\n    // Additional named export are possible\n    \"./experimental\": {\n      \"typespec\": \"./lib/experimental.tsp\"\n    },\n    // Wildcard export as well\n    \"./lib/*\": {\n      \"typespec\": \"./lib/*.tsp\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Uninstalling TypeSpec Extension via CLI (Bash)\nDESCRIPTION: This bash snippet illustrates the commands to uninstall the TypeSpec Visual Studio Code extension using the CLI. Supports both standard and VS Code Insiders versions. Run these commands in a terminal with TypeSpec installed; '--insiders' targets VS Code Insiders specifically.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/introduction/editor/vscode.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp code uninstall\n\n# For VS Code insiders\ntsp code uninstall --insiders\n```\n\n----------------------------------------\n\nTITLE: Deserializing Primitive int32[] Array (Potentially Redundant) in TypeScript\nDESCRIPTION: Function to deserialize an array of primitive int32 values from transport. Reassembles the array via iteration, but since primitives require no actual transformation, this could be replaced by a direct cast or identity operation. Input is any (usually an array from wire format), output is Array<number>; serves as a placeholder when no transformation is needed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/serializers/arrays.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport function jsonArrayInt32ToApplicationTransform(items_?: any): Array<number> {\n  if (!items_) {\n    return items_ as any;\n  }\n  const _transformedArray = [];\n\n  for (const item of items_ ?? []) {\n    const transformedItem = item as any;\n    _transformedArray.push(transformedItem);\n  }\n\n  return _transformedArray as any;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a New TypeSpec Project\nDESCRIPTION: Demonstrates the command to initialize a new TypeSpec project structure using the TypeSpec CLI. Running `tsp init` starts an interactive prompt guiding the user through setting up project configuration files and potentially selecting a starting template, such as 'Generic REST API'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntsp init\n```\n\n----------------------------------------\n\nTITLE: Expected Request/Response Body for Base64URL Encoded Bytes Property (JSON)\nDESCRIPTION: This JSON structure defines the expected request and response body for the `POST /encode/bytes/property/base64url` endpoint. It tests operations where a model contains a 'value' property of type bytes, encoded using Base64URL. The example shows 'test' encoded as 'dGVzdA'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"dGVzdA\" // base64url encode of test\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"dGVzdA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Request Body for Versioning Type Changed Test (JSON)\nDESCRIPTION: Defines the expected JSON request body for the endpoint 'post /versioning/type-changed-from/api-version:{version}/test' testing a parameter type change, using the latest signature. It includes properties 'prop' and 'changedProp', and expects a query parameter 'param=\"baz\"'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_322\n\nLANGUAGE: json\nCODE:\n```\n{ \"prop\": \"foo\", \"changedProp\": \"bar\" }\n```\n\n----------------------------------------\n\nTITLE: Putting Default (Missing) Optional Float Literal Properties - JSON\nDESCRIPTION: A request body with missing optional float property, verifying default/empty updates are supported.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_288\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Using Map with Non-String Keys (Old Behavior) in TypeSpec\nDESCRIPTION: Illustrates the previous usage of `Map` with a non-string key type (`int32`). This specific usage pattern is no longer directly supported after the removal of the `Map` type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_18\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Foo {\n  options: Map<int32, string>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating XML with @attribute Decorator in TypeSpec\nDESCRIPTION: This XML snippet shows the serialization result for the `Blob` model when the `id` property uses the `@attribute` decorator. The `id` property is now an attribute of the `<Blob>` element.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Blob id=\"abcdef\">\n</Blob>\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record String Response - JSON\nDESCRIPTION: This snippet shows the expected response body for GET /type/property/additionalProperties/spreadDifferentRecordString, including a numeric 'id' and a string 'prop'. It demonstrates how additional properties that use strings are included alongside other known properties, ensuring type integrity when spreading string properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_215\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"id\\\": 43.125, \\\"prop\\\": \\\"abc\\\" }\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for POST /type/model/visibility\nDESCRIPTION: This JSON represents the expected input body for a POST request to `/type/model/visibility`. It demonstrates sending a model containing properties intended for create operations, specifically 'createProp'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_186\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"createProp\": [\"foo\", \"bar\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Request Body for Versioning Renamed Operation (JSON)\nDESCRIPTION: Defines the expected JSON request body for a potentially renamed operation ('post /versioning/renamed-from/api-version:{version}/test') under the 'versioning/renamed-from' scenario, using the latest signature. It includes a renamed property 'newProp', updated 'enumProp', and 'unionProp', along with an expected query parameter 'newQuery=bar'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_320\n\nLANGUAGE: json\nCODE:\n```\n{ \"newProp\": \"foo\", \"enumProp\": \"newEnumMember\", \"unionProp\": 10 }\n```\n\n----------------------------------------\n\nTITLE: Required Explicit Body Parameter - JSON\nDESCRIPTION: Specifies request payload for an endpoint that requires an explicit body with a specific property. The body must be provided in the form { \\\"name\\\": \\\"foo\\\" }, enforcing non-null semantics.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"name\\\": \\\"foo\\\" }\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for GET /type/model/inheritance/nested-discriminator/wrongdiscriminator\nDESCRIPTION: This JSON shows the expected response body for a GET request to `/type/model/inheritance/nested-discriminator/wrongdiscriminator`. It tests the scenario where the service returns a model with a discriminator value ('kind': 'wrongKind') that is not defined in the model hierarchy.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_169\n\nLANGUAGE: json\nCODE:\n```\n{ \"age\": 1, \"kind\": \"wrongKind\" }\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response Body for JsonMergePatch createResource\nDESCRIPTION: Specifies the expected JSON response body after successfully creating a resource via the `PUT /json-merge-patch/create/resource` endpoint.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Madge\",\n  \"description\": \"desc\",\n  \"map\": {\n    \"key\": {\n      \"name\": \"InnerMadge\",\n      \"description\": \"innerDesc\"\n    }\n  },\n  \"array\": [\n    {\n      \"name\": \"InnerMadge\",\n      \"description\": \"innerDesc\"\n    }\n  ],\n  \"intValue\": 1,\n  \"floatValue\": 1.25,\n  \"innerModel\": {\n    \"name\": \"InnerMadge\",\n    \"description\": \"innerDesc\"\n  },\n  \"intArray\": [1, 2, 3]\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Route Definition for `op is` in TypeSpec\nDESCRIPTION: This TypeSpec code illustrates an incorrect pattern where an operation (`Library.Pets.read`) is referenced using `op is`. The operation relies on a `@route` defined on its parent interface (`Library.Pets`). This container route (`/pets`) is lost during the reference, potentially leading to an incorrect or incomplete route (`/read` instead of `/pets/read`) for the `readPet` operation in the `Service.PetStore` interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/rules/op-reference-container-route.md#_snippet_1\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace Library {\n  @route(\"/pets\")\n  interface Pets {\n    @route(\"/read\") read(): string;\n  }\n}\n\n@service\nnamespace Service {\n  interface PetStore {\n    readPet is Library.Pets.read;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Empty Model Return Behaviors - TypeSpec\nDESCRIPTION: Illustrates how HTTP operation return types behave after removal of metadata or application of visibility restrictions in TypeSpec. Previously, return types such as {} would result in an empty object; now, they result in a void body. Designed to highlight a breaking change introduced in this release. Does not require external dependencies but presumes TypeSpec core and @typespec/http context. Demonstrates how visibility and versioning decorators impact model output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-05-07.md#_snippet_0\n\nLANGUAGE: TypeSpec\nCODE:\n```\nop b1(): {};\nop b2(): {\n  @visibility(\"none\") prop: string;\n};\nop b3(): {\n  @added(Versions.v2) prop: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Providing Recursive Model Dictionary Payloads - JSON\nDESCRIPTION: Illustrates a complex dictionary payload where nested model objects may contain recursive properties (i.e., objects containing child dictionaries or more nested models). This tests correct (de)serialization of recursive data structures.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_157\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"k1\": { \"property\": \"hello\", \"children\": {} },\n  \"k2\": {\n    \"property\": \"world\",\n    \"children\": { \"k2.1\": { \"property\": \"inner world\" } }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Model Array Request - JSON\nDESCRIPTION: This JSON snippet acts as the required request body for the PUT endpoint /type/property/additionalProperties/spreadDifferentRecordModelArray. The payload expects a known property along with an additional property that is an array of objects with state indicators. It demonstrates the same model shape as its counterpart GET response, aiding consistency between API requests and responses.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_214\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"knownProp\\\": \\\"abc\\\", \\\"prop\\\": [{ \\\"state\\\": \\\"ok\\\" }, { \\\"state\\\": \\\"ok\\\" }] }\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/http-client-python via npm - Bash\nDESCRIPTION: Demonstrates how to install the @typespec/http-client-python emitter package using npm on the command line. This package is required as a dependency to enable Python SDK generation from TypeSpec definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-python/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-client-python\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/xml in a TypeSpec Specification (Bash)\nDESCRIPTION: This command installs the `@typespec/xml` package using npm. It should be used when you are working directly within a TypeSpec project that defines an API specification and requires XML bindings.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/xml\n```\n\n----------------------------------------\n\nTITLE: Fixing Multiple Scenario Path Handling in manifest.json\nDESCRIPTION: Documents a fix implemented in version 0.1.0-alpha.2 concerning the correct handling of multiple scenario paths specified within the 'manifest.json' configuration file.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/CHANGELOG.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nFix the handling of multiple scenario paths in `manifest.json` file.\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Literals in TypeSpec\nDESCRIPTION: Illustrates defining boolean literals in TypeSpec using the reserved keywords `true` and `false`. These values are assigned to aliases for potential use in models or decorators.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/type-literals.md#_snippet_6\n\nLANGUAGE: typespec\nCODE:\n```\nalias InTypeSpec = true;\nalias Cheater = false;\n```\n\n----------------------------------------\n\nTITLE: Explicit Body Parameter Model Example - TypeScript\nDESCRIPTION: Defines a function signature illustrating explicit body parameter handling for a model named \\\"User\\\": \\\"spreadAsRequestBody(bodyParameter: BodyParameter)\\\". The operation expects a JSON object such as { \\\"name\\\": \\\"foo\\\" }. Ensures correct parameter binding based on model shape and supports inference of naming by consuming frameworks. The snippet is illustrative rather than executable.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nspreadAsRequestBody(bodyParameter: BodyParameter)\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"name\\\": \\\"foo\\\" }\n```\n\n----------------------------------------\n\nTITLE: Declaring a TestWidget Interface in TypeScript\nDESCRIPTION: This TypeScript interface is generated from the 'TestWidget' TypeSpec model, fully mapping properties and types. Must be included in the correct namespace or module to avoid conflicts. Requires no dependencies apart from compilation with TypeScript. Inputs are the explicit fields, output is a well-typed TestWidget interface.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/test/scenarios/models/basic.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface TestWidget {\n  id: string;\n  weight: number;\n  color: \"red\" | \"blue\";\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Models with Model Expressions - Typespec\nDESCRIPTION: Demonstrates the previously forbidden use of anonymous model expressions in 'is' and 'extends' clauses for TypeSpec models. Shows how: directly using a model expression in 'is' or 'extends' is not permitted, illustrating limitations in TypeSpec model composition. No dependencies beyond TypeSpec core syntax. Models expect a 'bar' property of type string and highlight an invalid/unsupported pattern.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-10-12.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel IsModelExpr is {bar: string} {}\n\nmodel ExtendsModelExpr extends {bar: string} {}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for Type_Array_NullableInt32Value_put Endpoint\nDESCRIPTION: This JSON snippet represents the expected request body for the PUT request to the `/type/array/nullable-int32` endpoint. The request body should be a JSON array containing 32-bit integer values and null.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_143\n\nLANGUAGE: json\nCODE:\n```\n```json\n[1, null, 3]\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies using npm install\nDESCRIPTION: Installs project dependencies using the Node Package Manager (npm) based on the `package.json` file. It generates or updates a `package-lock.json` file, which locks dependency versions for reproducible builds.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/reproducibility.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Indentation Trimming in TypeSpec Multi-line Strings\nDESCRIPTION: Shows examples within a `model` definition where leading whitespace in multi-line strings is automatically trimmed based on the indentation level of the closing `\"\"\"`. All three properties (`prop1`, `prop2`, `prop3`) will result in the same string value `\"one\\ntwo\"`. This feature helps maintain code readability.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/language-basics/type-literals.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\nmodel MultiLineContainer {\n  prop1: \"\"\"\n    one\n    two\n    \"\"\";\n\n  // Lines are indented at the same level as closing \"\"\"\"\n  prop2: \"\"\"\n    one\n    two\n    \"\"\";\n\n  prop3: \"\"\"\n    one\n    two\n    \"\"\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 16-bit Integer Scalar Type in TypeSpec (typespec, TypeSpec)\nDESCRIPTION: Declares the `int16` scalar type, representing signed 16-bit integers (range: -32,768 to 32,767). Used for memory-efficient integer fields. No dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/built-in-data-types.md#_snippet_38\n\nLANGUAGE: typespec\nCODE:\n```\nscalar int16\n```\n\n----------------------------------------\n\nTITLE: Using OkResponse and Body<T> for Non-Model Bodies in TypeSpec\nDESCRIPTION: Demonstrates the new approach for defining a 200 OK response with a non-model body (like an array `Pet[]`). It explicitly combines the non-generic `OkResponse` (for status code metadata) with `Body<T>` (for the body type definition).\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nop list(): OkResponse & Body<Pet[]>;\n```\n```\n\n----------------------------------------\n\nTITLE: Providing Model With Fixed Enum Discriminator - JSON\nDESCRIPTION: Uses a fixed enum value for the discriminator property within a JSON model. Ensures systems can map discriminators to accepted values and parse nested property structures correctly.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_163\n\nLANGUAGE: json\nCODE:\n```\n{ \"kind\": \"cobra\", \"length\": 10 }\n```\n\n----------------------------------------\n\nTITLE: Tuple Array Value Deprecation and Array Value Adoption - TypeSpec Language\nDESCRIPTION: Illustrates the deprecation of standard tuple-style array value assignment and the new preferred use of TypeSpec array value literals. In the first (deprecated) example, a standard array is used as a default value; in the second (correct) example, the new '#[]' literal is used. This transition improves type and value handling consistency. No dependencies required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_5\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Test {\n  // Deprecated\n  values: string[] = [\"a\", \"b\", \"c\"];\n\n  // Correct\n  values: string[] = #[\"a\", \"b\", \"c\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Type_Array_ModelValue_get Endpoint\nDESCRIPTION: This JSON snippet represents the expected response body for the GET request to the `/type/array/model` endpoint. It should return a JSON array containing model objects, each with a 'property' field.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_136\n\nLANGUAGE: json\nCODE:\n```\n```json\n[{ \"property\": \"hello\" }, { \"property\": \"world\" }]\n```\n```\n\n----------------------------------------\n\nTITLE: Incrementally Scaffolding New API Resources - Bash\nDESCRIPTION: Runs the scaffolding process on an updated TypeSpec file (main.tsp) to generate additional server stubs for newly added interfaces or models. This ensures new service components are created without overwriting existing implementation files. Requires that your TypeSpec project is already initialized.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-csharp.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx hscs-scaffold main.tsp\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Typekit Extensions for Reflection\nDESCRIPTION: This TypeScript import statement brings in the experimental HTTP typekit extensions from the `@typespec/http` library. This import is necessary solely for its side effects, which register the HTTP-specific typekit APIs, making them available via the `$` object for reflection on HTTP metadata within a TypeSpec emitter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/emitter-framework.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// reflect on http metadata\nimport \"@typespec/http/experimental/typekit\";\n```\n\n----------------------------------------\n\nTITLE: Putting All Optional RequiredAndOptional Properties - JSON\nDESCRIPTION: PUT request including both optional and required properties, ensuring the server receives all possible values and patterns required for full insertion/update of entities with mixed required/optional fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_303\n\nLANGUAGE: json\nCODE:\n```\n{ \"optionalProperty\": \"hello\", \"requiredProperty\": 42 }\n```\n\n----------------------------------------\n\nTITLE: Updating Global npm Installation using Shell\nDESCRIPTION: This shell command updates the globally installed Node Package Manager (npm) to the latest version. This is recommended as a primary solution for TypeSpec dependency issues because npm versions 7 and later automatically install peer dependencies, potentially resolving the 'Cannot find package' error without manual intervention.\nSOURCE: https://github.com/microsoft/typespec/blob/main/troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g npm\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Type_Array_NullableFloatValue_get Endpoint\nDESCRIPTION: This JSON snippet represents the expected response body for the GET request to the `/type/array/nullable-float` endpoint. It should return a JSON array containing floating-point numbers and null.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_140\n\nLANGUAGE: json\nCODE:\n```\n```json\n[1.25, null, 3.0]\n```\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Template Instantiation Error in TypeSpec - TypeSpec\nDESCRIPTION: This snippet demonstrates a TypeSpec model template that attempts to spread a generic type T, triggering a diagnostic error when T is not a model (here, with 'string'). It exemplifies a problematic template pattern to illustrate how diagnostics previously referred only to the template declaration without trace to the instantiation point. No external dependencies aside from the TypeSpec compiler are required.\nParameters: T is a type parameter expected to be a model. \nInputs: Invocation with string triggers the error. \nOutputs: Compiler emits an error at the template declaration. \nLimitation: Lacks contextual instantiation information in the error output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-11-05.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Spreading<T> {\n  ...T;\n  // ^ error spread-model Cannot spread properties of non-model type.\n}\n\nmodel Bar {\n  prop: Spreading<string>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the Protobuf Emitter in tspconfig.yaml\nDESCRIPTION: This YAML configuration snippet shows how to enable the `@typespec/protobuf` emitter within a `tspconfig.yaml` file. The compiler will automatically use this emitter during the build process.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nemit:\n  - \"@typespec/protobuf\"\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/protobuf via npm\nDESCRIPTION: This command installs the @typespec/protobuf package using the Node Package Manager (npm). This package provides the TypeSpec library and emitter necessary for generating Protobuf definitions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/protobuf/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/protobuf\n```\n\n----------------------------------------\n\nTITLE: Expected XML Response Body for SimpleModel GET Endpoint\nDESCRIPTION: Defines the expected XML response body for a GET request to the `/payload/xml/simpleModel` endpoint. The response represents a basic `SimpleModel` structure with `name` (string) and `age` (number) elements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_79\n\nLANGUAGE: xml\nCODE:\n```\n<SimpleModel>\n  <name>foo</name>\n  <age>123</age>\n</SimpleModel>\n```\n\n----------------------------------------\n\nTITLE: Normal Path Parameter Example - TypeScript\nDESCRIPTION: Presents an operation signature for a typical path parameter: \\\"normal(name: string)\\\". Demonstrates expected request path interpolation as /normal/foo. Proper substitution logic is required for both server routing and client path building.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nnormal(name: string)\n```\n\nLANGUAGE: text\nCODE:\n```\n/normal/foo\n```\n\n----------------------------------------\n\nTITLE: Running Emitters in Dry-Run Mode via --dry-run Flag (Bash)\nDESCRIPTION: This Bash command shows how to use the `--dry-run` flag with `tsp compile`. Compatible emitters will execute their logic and report diagnostics but will not write any files to the filesystem. This is useful for validation without generating output.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --dry-run\n```\n\n----------------------------------------\n\nTITLE: Installing Standalone TypeSpec CLI via Shell Script (bash)\nDESCRIPTION: Downloads and installs the experimental standalone TypeSpec CLI by piping a remote shell script from typespec.io into bash. Requires cURL, Bash, and a compatible Unix-like environment (macOS or Linux). This procedure does not require Node.js. The script will fetch and extract the TypeSpec binary into the user's environment, possibly modifying shell configuration files.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/introduction/installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://typespec.io/install.sh | bash\n\n```\n\n----------------------------------------\n\nTITLE: Installing Required TypeSpec Compiler Dependency - Bash\nDESCRIPTION: This snippet installs the @typespec/compiler as a peer dependency, which is necessary for TypeSpec library development. Peer dependencies ensure library consumers provide their own copy, avoiding bundling multiple versions.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-peer @typespec/compiler\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Defining a JSON File Body with Explicit Content-Type Header in TypeSpec\nDESCRIPTION: This TypeSpec snippet demonstrates an operation `download` where the body is defined as `File<Contents = string>`. However, due to the explicit `@header contentType: \"application/json\"`, TypeSpec will treat the `File` as a structured model to be serialized into JSON, rather than treating the response body as the raw file content. This pattern is explicitly warned against in the documentation. It requires the `@typespec/http` library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/files.md#_snippet_15\n\nLANGUAGE: typespec\nCODE:\n```\n// Warning: HTTP File body is serialized as a structured model in 'application/json' instead of being\n// treated as the contents of a file because an explicit Content-Type header is defined.\nop download(): {\n  @header contentType: \"application/json\";\n  @body file: File<Contents = string>;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Scalar Array Serialization - XML\nDESCRIPTION: Shows XML output for a model with an unwrapped array of custom scalar types. Each array element uses the custom scalar's XML name. Resulting XML has multiple ItemsName elements, each for an array value. Inputs must match the custom scalar definition.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/xml/guide.md#_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<XmlPet>\n  <ItemsName>abc</ItemsName>\n  <ItemsName>def</ItemsName>\n</XmlPet>\n```\n\n----------------------------------------\n\nTITLE: Providing 64-Bit Integer Dictionary Payloads - JSON\nDESCRIPTION: Represents a mapping from string keys to large integer values using hexadecimal notation. Intended for endpoints demanding full 64-bit integer support and correct handling of large numbers, including negative values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_154\n\nLANGUAGE: json\nCODE:\n```\n{ \"k1\": 0x7fffffffffffffff, \"k2\": -0x7fffffffffffffff }\n```\n\n----------------------------------------\n\nTITLE: Providing Nullable Float Dictionary Payloads - JSON\nDESCRIPTION: Shows a dictionary object mapping keys to float values or null. Supports partial or missing data in numeric fields, matching API endpoints for dictionaries with nullable numeric values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_156\n\nLANGUAGE: json\nCODE:\n```\n{ \"k1\": 1.25, \"k2\": 0.5, \"k3\": null }\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Schema Property Format Validation in YAML\nDESCRIPTION: Showcases an OpenAPI YAML schema where an invalid 'format' value is set for an integer property. OpenAPI supports specific formats for types (e.g., 'int32', 'int64' for integers). Make sure property formats adhere to allowed values; otherwise, schema validation will fail in tools and runtimes.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/openapi3/diagnostics.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\\n  schemas:\\n    User:\\n      type: object\\n      properties:\\n        id:\\n          type: string\\n        age:\\n          type: integer\\n          format: \"int\" # Invalid format\\n\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code with TypeSpec CLI (Python Context)\nDESCRIPTION: This Bash command (`tsp compile`) triggers the TypeSpec compiler to process the `main.tsp` file and invoke the configured Python client emitter, generating the Python client code in the specified output directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile {path to main.tsp}/main.tsp\n```\n\n----------------------------------------\n\nTITLE: Encode Duration Property as Int32 Seconds - JSON\nDESCRIPTION: Handles duration properties encoded as a 32-bit integer count of seconds, using a JSON number. Used where exact duration handling is needed without floating-point conversion. The \\\"value\\\" property is an integer and must be serialized/deserialized as such.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": 36\\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"value\\\": 36\\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Operation Signature for spreadAsRequestBody\nDESCRIPTION: Defines the expected generated operation signature for the spreadAsRequestBody test case. It shows spreading a named model directly as the request body parameter. No intermediate request body model named `BodyParameter` should be generated.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_36\n\nLANGUAGE: plaintext\nCODE:\n```\nspreadAsRequestBody(name: string)\n```\n\n----------------------------------------\n\nTITLE: Expected Request Body for Versioning Renamed Interface Test (JSON)\nDESCRIPTION: Specifies the expected JSON request body for the test endpoint ('post /versioning/renamed-from/api-version:{version}/interface/test') within a renamed interface ('versioning/renamed-from' scenario), using the latest signature. It includes properties 'prop', 'enumProp' (with a new value), and 'unionProp'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_319\n\nLANGUAGE: json\nCODE:\n```\n{ \"prop\": \"foo\", \"enumProp\": \"newEnumMember\", \"unionProp\": 10 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Mapped PagedIterable Logic with Generics in Java\nDESCRIPTION: Defines a private static inner class that extends PagedIterable to provide mapped transformations across paged data. This class wraps an underlying PagedIterable, applying a Function to map each element and page, and supports streaming, iteration, and paging methods via overridden methods. It requires types for input and output elements, the original paged iterable, and the mapper function. Dependencies include PagedIterable, PagedFlux, PagedResponse, and standard Java collections and streams. The class guarantees that paging and mapping are preserved across all access patterns, both single-item and page-based.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-mgmt/src/main/resources/ResourceManagerUtils_PagedIterableImpl.txt#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nprivate static final class PagedIterableImpl<T, S> extends PagedIterable<S> {\n\n    private final PagedIterable<T> pagedIterable;\n    private final Function<T, S> mapper;\n    private final Function<PagedResponse<T>, PagedResponse<S>> pageMapper;\n\n    private PagedIterableImpl(PagedIterable<T> pagedIterable, Function<T, S> mapper) {\n        super(PagedFlux.create(() -> (continuationToken, pageSize)\n            -> Flux.fromStream(pagedIterable.streamByPage().map(getPageMapper(mapper)))));\n        this.pagedIterable = pagedIterable;\n        this.mapper = mapper;\n        this.pageMapper = getPageMapper(mapper);\n    }\n\n    private static <T, S> Function<PagedResponse<T>, PagedResponse<S>> getPageMapper(Function<T, S> mapper) {\n        return page -> new PagedResponseBase<Void, S>(\n            page.getRequest(),\n            page.getStatusCode(),\n            page.getHeaders(),\n            page.getElements().stream().map(mapper).collect(Collectors.toList()),\n            page.getContinuationToken(),\n            null);\n    }\n\n    @Override\n    public Stream<S> stream() {\n        return pagedIterable.stream().map(mapper);\n    }\n\n    @Override\n    public Stream<PagedResponse<S>> streamByPage() {\n        return pagedIterable.streamByPage().map(pageMapper);\n    }\n\n    @Override\n    public Stream<PagedResponse<S>> streamByPage(String continuationToken) {\n        return pagedIterable.streamByPage(continuationToken).map(pageMapper);\n    }\n\n    @Override\n    public Stream<PagedResponse<S>> streamByPage(int preferredPageSize) {\n        return pagedIterable.streamByPage(preferredPageSize).map(pageMapper);\n    }\n\n    @Override\n    public Stream<PagedResponse<S>> streamByPage(String continuationToken, int preferredPageSize) {\n        return pagedIterable.streamByPage(continuationToken, preferredPageSize).map(pageMapper);\n    }\n\n    @Override\n    public Iterator<S> iterator() {\n        return new IteratorImpl<>(pagedIterable.iterator(), mapper);\n    }\n\n    @Override\n    public Iterable<PagedResponse<S>> iterableByPage() {\n        return new IterableImpl<>(\n            pagedIterable.iterableByPage(), pageMapper);\n    }\n\n    @Override\n    public Iterable<PagedResponse<S>> iterableByPage(String continuationToken) {\n        return new IterableImpl<>(\n            pagedIterable.iterableByPage(continuationToken), pageMapper);\n    }\n\n    @Override\n    public Iterable<PagedResponse<S>> iterableByPage(int preferredPageSize) {\n        return new IterableImpl<>(\n            pagedIterable.iterableByPage(preferredPageSize), pageMapper);\n    }\n\n    @Override\n    public Iterable<PagedResponse<S>> iterableByPage(String continuationToken, int preferredPageSize) {\n        return new IterableImpl<>(\n            pagedIterable.iterableByPage(continuationToken, preferredPageSize), pageMapper);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated String-Based `@visibility` Modifiers in TypeSpec\nDESCRIPTION: Illustrates the deprecated usage of string literals (e.g., \"create\", \"read\") within the `@visibility` decorator in TypeSpec. This approach is being replaced by using enum members like `Lifecycle.Create`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_19\n\nLANGUAGE: tsp\nCODE:\n```\n@visibility(\"create\", \"read\")\nexample: string;\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Non-Discriminated Union 3 Request - JSON\nDESCRIPTION: This body shows the expected shape for the PUT endpoint /type/property/additionalProperties/spreadRecordNonDiscriminatedUnion3. It highlights use of array-valued union members in the request, matching the format provided in the corresponding GET response, and emphasizes support for union array fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_228\n\nLANGUAGE: json\nCODE:\n```\n{'name': 'abc', 'prop1': [{'kind': 'kind1', 'start': '2021-01-01T00:00:00Z'}, {'kind': 'kind1', 'start': '2021-01-01T00:00:00Z'], 'prop2': {'kind': 'kind1', 'start': '2021-01-01T00:00:00Z', 'end': '2021-01-02T00:00:00Z'}}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Dependencies via CLI (Java Context)\nDESCRIPTION: This Bash command (`tsp install`) is used to install the TypeSpec emitters and other dependencies defined in the `package.json` file, specifically after adding the Java emitter dependency. This ensures the necessary packages are available.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/introduction.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntsp install\n```\n\n----------------------------------------\n\nTITLE: Object Value Property Completion in Const Assignment - TypeSpec Language\nDESCRIPTION: Displays property completion for object value assignments in TypeSpec. The example shows a 'User' model with three fields, then assigns a constant with an object value where property completion is triggered at the cursor. This assists users in discovering available properties and improves developer productivity. There are no dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-06-10.md#_snippet_10\n\nLANGUAGE: tsp\nCODE:\n```\nmodel User {\n  name: string;\n  age: int32;\n  address: string;\n}\n\nconst user: User = #{name: \"Bob\", ┆}\n                                  | [age]\n                                  | [address]\n```\n\n----------------------------------------\n\nTITLE: Testing Conditional Request Header: If-Unmodified-Since\nDESCRIPTION: Defines a POST endpoint to test the handling of the `If-Unmodified-Since` conditional request header. The test expects this specific header to be present with the value 'Fri, 26 Aug 2022 14:38:00 GMT'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_118\n\nLANGUAGE: http\nCODE:\n```\npost /special-headers/conditional-request/if-unmodified-since\n```\n\n----------------------------------------\n\nTITLE: Validating and Merging Spector Coverage Files (Bash)\nDESCRIPTION: Provides examples of the `tsp-spector check-coverage` command. This command validates test coverage against scenarios defined in the specified path. Options allow specifying a `spector-config.yaml` file (`--configFile`), multiple input coverage files using glob patterns (`--coverageFiles`), and the output path for the final merged coverage report (`--mergedCoverageFile`).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/using-spector.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Minimal\ntsp-spector check-coverage ./path/to/scenarios\n\n# Path to tsp-spector config file for generator\ntsp-spector check-coverage ./path/to/scenarios --configFile ./spector-config.yaml\n\n# In case where there was multiple serve instance each creating their own coverage file\ntsp-spector check-coverage ./path/to/scenarios --coverageFiles ./path/to/*-coverage.json --coverageFiles ./other/to/*-coverage.json\n\n# Specify where the merged coverage file should go\ntsp-spector check-coverage ./path/to/scenarios --mergedCoverageFile ./path/to/spector-final-coverage.json\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Plugin for TypeSpec using npm - Bash\nDESCRIPTION: This snippet shows how to install both Prettier and the Prettier plugin for TypeSpec as development dependencies using npm. Prerequisites include Node.js version 14 or above. The command adds the packages to your project's devDependencies section, allowing them to be used for formatting TypeSpec code with Prettier. Expected output is an updated package.json and installed node_modules.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/prettier-plugin-typespec/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev prettier @typespec/prettier-plugin-typespec\n```\n\n----------------------------------------\n\nTITLE: Expected Error Body for Invalid Custom HTTP Authentication (JSON)\nDESCRIPTION: This JSON string represents the expected error response body for the `GET /authentication/http/custom/invalid` endpoint. It indicates a 403 status code due to an invalid custom authentication key.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"invalid-api-key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Operation Signature for spreadCompositeRequest\nDESCRIPTION: Defines the expected generated operation signature for the spreadCompositeRequest test case. It tests spreading a model where properties use various HTTP decorators (@path, @header, @body). A `BodyParameter` model should be generated for the `@body` property, but no `CompositeRequest` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_38\n\nLANGUAGE: plaintext\nCODE:\n```\nspreadCompositeRequest(name: string, testHeader: string, bodyParameter: BodyParameter)\n```\n\n----------------------------------------\n\nTITLE: Handling Long-Running Operation Result and Detailed Error Extraction - Java\nDESCRIPTION: This snippet processes the status of a long-running operation in Java. If the operation fails, it attempts to extract detailed error information from the result, deserializes error bodies into a ManagementError object, handles fallback logic when detailed errors are not provided, and returns a ManagementException within a Reactor Mono stream. Dependencies include custom types such as ManagementError, ManagementException, HttpResponse, and SerializerAdapter, as well as the Reactor Mono API. Required parameters include the operation response object, which delivers both the operation status and any embedded error content.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-mgmt/src/main/resources/Client_getLroFinalResultOrError.txt#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nif (response.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n    String errorMessage;\n    ManagementError managementError = null;\n    HttpResponse errorResponse = null;\n    PollResult.Error lroError = response.getValue().getError();\n    if (lroError != null) {\n        errorResponse = new HttpResponseImpl(lroError.getResponseStatusCode(), lroError.getResponseHeaders(), lroError.getResponseBody());\n\n        errorMessage = response.getValue().getError().getMessage();\n        String errorBody = response.getValue().getError().getResponseBody();\n        if (errorBody != null) {\n            // try to deserialize error body to ManagementError\n            try {\n                managementError = this.getSerializerAdapter().deserialize(errorBody, ManagementError.class, SerializerEncoding.JSON);\n                if (managementError.getCode() == null || managementError.getMessage() == null) {\n                    managementError = null;\n                }\n            } catch (IOException | RuntimeException ioe) {\n                LOGGER.logThrowableAsWarning(ioe);\n            }\n        }\n    } else {\n        // fallback to default error message\n        errorMessage = \"Long running operation failed.\";\n    }\n    if (managementError == null) {\n        // fallback to default ManagementError\n        managementError = new ManagementError(response.getStatus().toString(), errorMessage);\n    }\n    return Mono.error(new ManagementException(errorMessage, errorResponse, managementError));\n} else {\n    return response.getFinalResult();\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Map with Non-String Keys using 'object' in TypeSpec\nDESCRIPTION: Shows the recommended replacement for `Map` types that used non-string keys (like `Map<int32, string>`). The generic `object` type should be used instead, acknowledging that the specific key type constraint is lost.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_19\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Foo {\n  options: object;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Model Aliasing Workaround (Now Removed) - Typespec\nDESCRIPTION: Illustrates a formerly tolerated workaround where a model expression alias is used in 'is' or 'extends' within a TypeSpec model definition. The PR referenced removes this functionality, enforcing stricter model composition. This pattern creates a ModExpr alias with property 'bar', then uses it for inheritance or inclusion in other models. Requires TypeSpec compiler supporting aliases. Outputs TypeSpec models that would now result in errors.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-10-12.md#_snippet_1\n\nLANGUAGE: typespec\nCODE:\n```\nalias ModExpr = {bar: string};\nmodel IsModelExprWAlias is ModExpr {}\n\nmodel ExtendsModelExprWAlias extends ModExpr {}\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Datetime (Null) Response - JSON\nDESCRIPTION: For GET /type/property/nullable/datetime/null, this code sets the nullable date-time property to null, supporting scenarios where the timestamp is absent or to be cleared without removing the required field.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_250\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": null }\n```\n\n----------------------------------------\n\nTITLE: Starting Spector Test Server Manually using npm\nDESCRIPTION: Executes the `spector-serve` script defined in the project's `package.json` to start the test server in the foreground. This command is used during manual workflows for running end-to-end Java tests against the spector server. Requires Node.js, npm, and the relevant project test module configuration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run spector-serve\n```\n\n----------------------------------------\n\nTITLE: Illustrating Keyword Completion ('extends', 'is') in TypeSpec\nDESCRIPTION: Showcases TypeSpec IDE completion (`┆`) suggesting the `extends` and `is` keywords in appropriate contexts, such as after a model, scalar, operation, interface, or template parameter name definition. This feature enhances developer experience and was added in PR #3443.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_43\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Dog ┆ {}\n          | [extends]\n          | [is]\n\nscalar Addresss ┆ \n                | [extends]\n\nop jump ┆ \n        | [is]\n\ninterface ResourceA ┆ {}\n                    | [extends]\n\nmodel Cat<T ┆> {}\n            | [extends]\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Request Body for spreadWithMultipleParameters\nDESCRIPTION: Specifies the expected JSON request body for the `PUT /parameters/spread/alias/multiple-parameters/{id}` endpoint test case. This tests spreading an alias with multiple required and optional parameters, which might be handled as a property bag in some languages.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requiredString\": \"foo\",\n  \"optionalInt\": 1,\n  \"requiredIntList\": [1, 2],\n  \"optionalStringList\": [\"foo\", \"bar\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Project Dependencies\nDESCRIPTION: Shows the command to install the necessary TypeSpec library dependencies for the current project. This command typically reads the `import` statements within the project's `.tsp` files (like `main.tsp`) or a `package.json` file to determine which libraries (e.g., `@typespec/http`, `@typespec/openapi3`) need to be downloaded and installed into the `node_modules` directory.\nSOURCE: https://github.com/microsoft/typespec/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntsp install\n```\n\n----------------------------------------\n\nTITLE: Testing Versioned Server Operation with Overridden Query API Version\nDESCRIPTION: Defines a HEAD endpoint for a versioned server using a query-based `api-version`. This test overrides the default version ('2022-12-01-preview') with a client-provided value ('2021-01-01-preview'). The expected URL is '/with-old-query-api-version?api-version=2021-01-01-preview'.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_114\n\nLANGUAGE: http\nCODE:\n```\nhead /server/versions/versioned/with-query-old-api-version\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing TypeScript in Project - Bash\nDESCRIPTION: This snippet installs TypeScript as a development dependency and initializes a strict TypeScript configuration via tsc. These commands are prerequisites for building TypeScript-based TypeSpec libraries.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/extending-typespec/basics.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D typescript\nnpx tsc --init --strict\n```\n\n----------------------------------------\n\nTITLE: Getting Default (Missing) Optional Duration Properties - JSON\nDESCRIPTION: A response JSON object that omits the duration property altogether, used to test correct handling of missing optionals without error. Validates robustness of model unmarshalling.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_282\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Sending JSON Payload with Property Named 'as' - JSON\nDESCRIPTION: This JSON object demonstrates sending a model with a property named 'name' set to 'ok'. It verifies that using 'as' as a model or property name does not cause conflicts with language reserved words. No dependencies; this payload is meant for endpoints handling models using reserved keywords as identifiers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_122\n\nLANGUAGE: json\nCODE:\n```\n{ \"name\": \"ok\" }\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/json-schema in a Spec (Bash)\nDESCRIPTION: Installs the `@typespec/json-schema` package as a direct dependency using npm. This is the typical command used when working within a specific TypeSpec project or specification file that requires this library for JSON Schema emission or conversion.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/json-schema/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/json-schema\n```\n\n----------------------------------------\n\nTITLE: Putting All Optional PlainTime Properties - JSON\nDESCRIPTION: Demonstrates a PUT request where the optional property is a valid plain time. This pattern ensures updates with time-of-day values are supported and validated in model updates.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_299\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": \"13:06:12\" }\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec VS Code Extension via Command Line\nDESCRIPTION: Uses the TypeSpec CLI (`tsp`) command to install the official Visual Studio Code extension for TypeSpec. This extension provides language support features like syntax highlighting, autocompletion, and diagnostics within the VS Code editor.\nSOURCE: https://github.com/microsoft/typespec/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsp code install\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Is Float Record - JSON\nDESCRIPTION: Simple example showing a model containing float fields, suitable for services modeling primitive and additional float properties in TypeSpec-generated APIs.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_203\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"id\\\": 43.125, \\\"prop\\\": 43.125 }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Indentation for Triple-Quoted String in TypeSpec\nDESCRIPTION: This snippet demonstrates an incorrectly indented triple-quoted string in TypeSpec. The lines 'one' and '  two' are indented less than the closing `\"\"\"`, violating the rule that all content lines must be at least as indented as the closing delimiter.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/standard-library/diags/triple-quote-indent.md#_snippet_0\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\nconst a = \"\"\"\none\n  two\n  \"\"\"\n```\n```\n\n----------------------------------------\n\nTITLE: Importing getDiscriminator from APIs (Before and After) - TypeScript\nDESCRIPTION: Compares import statements for the 'getDiscriminator' accessor before and after its migration from '@typespec/rest' to '@typespec/compiler'. Only the import source changes. Used to access discriminator metadata in TypeSpec. Requires TypeScript and either Rest library or compiler package depending on code version.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-10-12.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDiscriminator } from \"@typespec/rest\";\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getDiscriminator } from \"@typespec/compiler\";\n```\n\n----------------------------------------\n\nTITLE: Testing Query Continuation Expansion with Array (Standard)\nDESCRIPTION: Defines a GET endpoint to test query continuation expansion (`{&param}`) with explode: false for an array parameter `param`. Given `[\"a\",\"b\"]` and a fixed parameter `fixed=true`, the expected query string is `?fixed=true&param=a,b`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_92\n\nLANGUAGE: http\nCODE:\n```\nget /routes/query/query-continuation/standard/array?fixed=true{&param}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Compiler Globally via npm\nDESCRIPTION: This shell command installs the TypeSpec compiler CLI globally using npm, making the 'tsp' command available system-wide for use from any directory. Dependencies include a working Node.js and npm installation. The install process fetches the latest @typespec/compiler package and adds it to the global npm space. No input parameters are needed; the expected effect is to enable the main TypeSpec development workflow with VS Code integration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/typespec-vscode/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @typespec/compiler\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/http-client-csharp in a Spec (Bash)\nDESCRIPTION: This command uses npm to install the `@typespec/http-client-csharp` package as a direct dependency. It should be used when incorporating the C# HTTP client emitter directly into a TypeSpec project for code generation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/emitters/clients/http-client-csharp/reference/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-client-csharp\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Datetime (NonNull) Patch Request - JSON\nDESCRIPTION: This code, for PATCH /type/property/nullable/datetime/non-null, sends a required property and a non-null ISO 8601 formatted datetime value. Clients must use this structure to update non-nullable timestamps on a model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_251\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": 2022-08-26T18:38:00Z}\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated `@visibility(\"none\")` with `@invisible` in TypeSpec\nDESCRIPTION: This snippet shows the deprecated way of hiding a TypeSpec element using `@visibility(\"none\")`. It's part of a comparison illustrating the migration to the new `@invisible(Lifecycle)` decorator introduced to replace string-based visibility modifiers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_12\n\nLANGUAGE: tsp\nCODE:\n```\n@visibility(\"none\")\nexample: string;\n```\n\n----------------------------------------\n\nTITLE: Formatting Model Property Spacing with Decorators/Comments (Incorrect) in TypeSpec\nDESCRIPTION: Illustrates the incorrect formatting ('bad') where model properties preceded by decorators (like `@doc`) or comments are not separated by blank lines from adjacent properties, potentially reducing readability.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_11\n\nLANGUAGE: tsp\nCODE:\n```\n// bad\nmodel Foo {\n  one: string;\n  @doc(\"Foo\")\n  two: string;\n  // line comment\n  three: string;\n  /**\n   *  Block comment\n   */\n  four: string;\n  five: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Newline After TypeSpec Blocks\nDESCRIPTION: Demonstrates the practice of adding a blank newline after TypeSpec blocks, such as model definitions, for improved readability. The 'bad' example shows consecutive model definitions without a separating newline, while the 'good' example includes the recommended newline.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_3\n\nLANGUAGE: typespec\nCODE:\n```\n// bad\nmodel Pet {\n  name: string;\n}\nmodel Cat extends Pet {}\n\n// good\nmodel Pet {\n  name: string;\n}\n\nmodel Cat extends Pet {}\n```\n\n----------------------------------------\n\nTITLE: Expected Operation Signature for spreadCompositeRequestMix\nDESCRIPTION: Defines the expected generated operation signature for the spreadCompositeRequestMix test case. It tests spreading a model with non-body HTTP request decorators (@path, @header) and a regular property intended for the body. No `CompositeRequestMix` model should be generated.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_40\n\nLANGUAGE: plaintext\nCODE:\n```\nspreadCompositeRequestMix(name: string, testHeader: string, prop: string)\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for PUT /type/model/visibility/readonlyroundtrip\nDESCRIPTION: This JSON shows the expected response body for the PUT request to `/type/model/visibility/readonlyroundtrip`. It demonstrates receiving a model containing read-only properties ('optionalNullableIntList', 'optionalStringRecord') as part of a round-trip test.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_189\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"optionalNullableIntList\": [1, 2, 3],\n  \"optionalStringRecord\": { \"k1\": \"value1\", \"k2\": \"value2\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/http-client-js with npm - Bash\nDESCRIPTION: Demonstrates how to install the @typespec/http-client-js package using npm from the command line. This command requires Node.js and npm to be installed. The result is the addition of the package to the current project, making it available for TypeSpec emissions targeting JavaScript/TypeScript.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-js/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-client-js\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec C# Service Generator using NPM - Bash\nDESCRIPTION: This snippet demonstrates how to install the @typespec/http-server-csharp package in a TypeSpec specification using the npm command-line tool. It requires a working npm environment and assumes the user is within the target project directory. The command adds the generator as a direct dependency. Input is via CLI, and output is the installation of the package in the project's node_modules. No special configuration is required beyond npm itself.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-server-csharp/docs/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/http-server-csharp\n\n```\n\n----------------------------------------\n\nTITLE: Expected Operation Signature for spreadParameterWithInnerModel\nDESCRIPTION: Defines the expected generated operation signature for the spreadParameterWithInnerModel test case. It demonstrates spreading an alias containing an inner model, resulting in flattened parameters. No intermediate models (`InnerModel`, `InnerModelParameter`) should be generated.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_33\n\nLANGUAGE: plaintext\nCODE:\n```\nspreadParameterWithInnerModel(id: string, x_ms_test_header: string, name: string)\n```\n\n----------------------------------------\n\nTITLE: Importing PlaygroundManifest (Post-0.1.0-alpha.1) in TypeScript/JavaScript\nDESCRIPTION: Illustrates the corrected method (from version 0.1.0-alpha.1 onwards) for importing the PlaygroundManifest using a default import. This breaking change was introduced to fix loading issues, especially when using Vite in development mode.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/playground/CHANGELOG.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport PlaygroundManifest from \\\"@typespec/playground/manifest\\\";\n```\n\n----------------------------------------\n\nTITLE: Updating Enum.members Property from Array to Map - diff\nDESCRIPTION: Illustrates the change in the Enum class API where the 'members' property type transitions from an array of EnumMember objects to a Map keyed by strings. No external dependencies except the consuming API being upgraded. This diff highlights the shift for developers updating their code; input is the old property type, and output is the new structure, which affects how members are iterated or accessed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-09-07.md#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-members: EnumMember[];\n+members: Map<string, EnumMember>\n```\n\n----------------------------------------\n\nTITLE: Replacing Deprecated isListOperation Function in TypeSpec\nDESCRIPTION: Notes the deprecation of the `isListOperation` function from TypeSpec core. Code using this function should be updated to use the `isListOperation` function now provided by the `@typespec/http` library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-07-11.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n// Deprecated function (from TypeSpec core):\nisListOperation\n\n// Replacement function (from @typespec/http):\nisListOperation\n```\n\n----------------------------------------\n\nTITLE: Uploading Spector Coverage Reports (Bash)\nDESCRIPTION: Demonstrates the `tsp-spector upload-coverage` command used to upload scenario coverage reports. Key required arguments include `--generatorName` (specifying the generator being tested) and `--version` (specifying the generator version). An optional `--coverageFile` argument can point to the specific merged coverage file to upload (e.g., `spector-final-coverage.json`). Uploads should typically occur from the main branch to avoid overwriting the latest index.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/docs/using-spector.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Minimal\ntsp-spector upload-coverage --generatorName typescript --version=0.1.0\n\n# Specify Coverage file\ntsp-spector upload-coverage --generatorName typescript --version=0.1.0 --coverageFile ./path/to/spector-final-coverage.json\n```\n\n----------------------------------------\n\nTITLE: Migrating Unversioned Library Dependencies Using @versionedDependency - Typespec - Typespec\nDESCRIPTION: This Typespec snippet demonstrates the previous pattern for linking an unversioned namespace to a versioned dependency using @versionedDependency. The decorator is applied at the namespace level, specifying which versioned dependency, here Azure.ResourceManager.Versions.v1_0_Preview_1, should be used. This method has been deprecated in favor of @useDependency. Requires @service, @versionedDependency, and @armProviderNamespace decorators. Input is the target dependency, output is the namespace appropriately decorated.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-02-07.md#_snippet_2\n\nLANGUAGE: typespec\nCODE:\n```\n@service(#{ title: \"Microsoft.EnvelopeTest\", version: \"2021-09-21-preview\" })\n@versionedDependency(Azure.ResourceManager.Versions.v1_0_Preview_1)\n@armProviderNamespace\nnamespace Microsoft.EnvelopeTest;\n```\n\n----------------------------------------\n\nTITLE: Serializing Model with Dictionary Metadata to XML - XML\nDESCRIPTION: This snippet encodes a dictionary of metadata as nested XML elements inside a 'metadata' node, including key-value pairs such as 'Color', 'Count', and 'Enabled.' The structure supports arbitrary key/value fields so long as the schema is observed. Input/output are XML bodies following the shown structure; no additional dependencies.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_67\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithDictionary>\\n  <metadata>\\n    <Color>blue</Color>\\n    <Count>123</Count>\\n    <Enabled>false</Enabled>\\n  </metadata>\\n</ModelWithDictionary>\n```\n\n----------------------------------------\n\nTITLE: Testing Client and Operation Path Parameters with Multiple Server Paths\nDESCRIPTION: Defines a GET endpoint on a server with multiple path segments, involving both a client-level path parameter `apiVersion` and an operation-level path parameter `keyword`. The test expects both `apiVersion` (e.g., `v1.0`) and `keyword` (e.g., `test`) to be correctly resolved.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_106\n\nLANGUAGE: http\nCODE:\n```\nget /server/path/multiple/{apiVersion}\n```\n\n----------------------------------------\n\nTITLE: Running Watch Mode Tests in a Package with pnpm - Bash\nDESCRIPTION: Runs tests in a specific package in watch mode using pnpm. Allows automatic re-execution of tests on file change. Must be run from within the target package directory. The command uses scripts defined in the individual package.json.\nSOURCE: https://github.com/microsoft/typespec/blob/main/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:watch\n```\n\n----------------------------------------\n\nTITLE: Defining Versioned Namespace (Legacy String Literals) in TypeSpec\nDESCRIPTION: Shows the previous method for defining API versions in TypeSpec using the `@versioned` decorator with string literals directly. This approach is now deprecated in favor of using enums.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-07-08.md#_snippet_4\n\nLANGUAGE: typespec\nCODE:\n```\n// Before\n@versioned(\"2021-01-12\" | \"2022-01-15-preview\")\nnamespace Api;\n```\n\n----------------------------------------\n\nTITLE: Installing @typespec/xml Package\nDESCRIPTION: This command installs the @typespec/xml library using npm, making its decorators and functionality available in a TypeSpec project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/xml/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @typespec/xml\n```\n\n----------------------------------------\n\nTITLE: Linting OpenAPI YAML File Using Spectral CLI - shell\nDESCRIPTION: This snippet demonstrates running the 'spectral lint' command on the terminal to analyze an OpenAPI YAML file for compliance with OAS3 rules. It requires the Spectral CLI to be installed (typically via npm). The tested file is 'openapi.yaml', and the output lists warnings for missing or invalid required fields in the specification. Input is the OpenAPI spec file, and output is automated warnings with context lines and rule names.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/assets/tsp-samples/openapi3/interoperate/spectral.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nspectral lint openapi.yaml\n```\n\n----------------------------------------\n\nTITLE: Performing Clean Install using npm ci for Reproducibility\nDESCRIPTION: Executes a clean install of dependencies using npm, strictly adhering to the versions specified in `package-lock.json`. It's recommended for CI environments as it ensures installed dependencies precisely match the lock file and verifies consistency between `package.json` and `package-lock.json`, failing if they mismatch.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/reproducibility.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Expected XML Request Body for SimpleModel PUT Endpoint\nDESCRIPTION: Defines the expected XML payload for a PUT request to the `/payload/xml/simpleModel` endpoint. The request body contains a `SimpleModel` structure with `name` and `age` elements.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_80\n\nLANGUAGE: xml\nCODE:\n```\n<SimpleModel>\n  <name>foo</name>\n  <age>123</age>\n</SimpleModel>\n```\n\n----------------------------------------\n\nTITLE: Patching Nullable Datetime Properties - JSON\nDESCRIPTION: This JSON snippet illustrates a request body for a PATCH operation where the 'nullableProperty' is explicitly set to null and 'requiredProperty' holds a string value. The endpoint expects a property that may be null, demonstrating the use of nullable members in model definitions. Both properties must be present in the object, though 'nullableProperty' can be null or a value. No specific dependencies are required; the payload should be UTF-8 encoded application/json.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_252\n\nLANGUAGE: json\nCODE:\n```\n{ \"requiredProperty\": \"foo\", \"nullableProperty\": null }\n```\n\n----------------------------------------\n\nTITLE: Validating Filename and Image Content-Type in Multipart Form-Data (image/jpg) - HTTP\nDESCRIPTION: Depicts a multipart/form-data request requiring strict validation of the uploaded file's filename and the specific image/jpg content-type. The server will only accept parts where content-type matches image/jpg, ensuring type safety. Used for endpoints that only accept certain image file types and demand explicit filename assignment.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_56\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /upload HTTP/1.1\\nContent-Length: 428\\nContent-Type: multipart/form-data; boundary=abcde12345\\n\\n--abcde12345\\nContent-Disposition: form-data; name=\\\"profileImage\\\"; filename=\\\"hello.jpg\\\"\\nContent-Type: image/jpg\\n\\n{…file content of .jpg file…}\\n--abcde12345--\n```\n\n----------------------------------------\n\nTITLE: Expected Request/Response Body for RFC3339 Encoded Datetime Property (JSON)\nDESCRIPTION: This JSON structure defines the expected request and response body for the `POST /encode/datetime/property/rfc3339` endpoint. It tests operations where a model contains a 'value' property of type datetime, encoded using RFC3339 format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"2022-08-26T18:38:00.000Z\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"2022-08-26T18:38:00.000Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Optional Datetime Properties - JSON\nDESCRIPTION: Response showing a datetime property in ISO8601 format, supplied as an optional property. Validates serialization, deserialization of date/time values, and presence of the field in all/complete variants.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_277\n\nLANGUAGE: json\nCODE:\n```\n{ \"property\": \"2022-08-26T18:38:00Z\" }\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Type_Array_NullableInt32Value_get Endpoint\nDESCRIPTION: This JSON snippet represents the expected response body for the GET request to the `/type/array/nullable-int32` endpoint. It should return a JSON array containing 32-bit integer values and null.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_142\n\nLANGUAGE: json\nCODE:\n```\n```json\n[1, null, 3]\n```\n```\n\n----------------------------------------\n\nTITLE: Serializing Array of Models to XML - XML\nDESCRIPTION: These XML snippets show model serialization for endpoints returning or accepting arrays of 'SimpleModel' objects within a 'ModelWithArrayOfModel' wrapper. Each item lists either a 'name' and 'age' as expected. Required input is an XML body conforming to this schema, and output mirrors the same structure. No dependencies are needed but XML structure must be strictly maintained for both get and put operations.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_65\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithArrayOfModel>\\n  <items>\\n    <SimpleModel>\\n      <name>foo</name>\\n      <age>123</age>\\n    </SimpleModel>\\n    <SimpleModel>\\n      <name>bar</name>\\n      <age>456</age>\\n    </SimpleModel>\\n  </items>\\n</ModelWithArrayOfModel>\n```\n\n----------------------------------------\n\nTITLE: Getting Null Nullable Duration Property - JSON\nDESCRIPTION: Represents a JSON response where the nullableProperty is null, showing the use of nullable fields in a response object. This is used in test scenarios to verify that clients and servers correctly round-trip explicit nulls for duration properties. The request/response contract expects proper handling of required vs. nullable semantics.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_254\n\nLANGUAGE: json\nCODE:\n```\n{ \"requiredProperty\": \"foo\", \"nullableProperty\": null }\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Is Model Record - JSON\nDESCRIPTION: Shows an object with sub-object values for both known and extension properties, aiming to represent model composition with sub-objects as per extended JSON records.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_204\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"knownProp\\\": { \\\"state\\\": \\\"ok\\\" }, \\\"prop\\\": { \\\"state\\\": \\\"ok\\\" } }\n```\n\n----------------------------------------\n\nTITLE: Formatting Project Code using npm\nDESCRIPTION: Executes the `format` script defined in the `package.json` located in the `packages/http-client-java` folder. This script is used to automatically format both TypeScript and Java code within the project according to configured style guides, ensuring consistency before creating a pull request. Requires Node.js, npm, and the formatting tools configured in the project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Uninstalling TypeSpec Visual Studio Extension via Command Line (Bash)\nDESCRIPTION: This bash command demonstrates how to uninstall the TypeSpec Visual Studio extension using the TypeSpec CLI tool (`tsp`). Running `tsp vs uninstall` in the command line triggers the uninstallation process for the extension. This requires the TypeSpec CLI to be installed and available in the system's PATH.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/introduction/editor/vs.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\\ntsp vs uninstall\\n```\n```\n\n----------------------------------------\n\nTITLE: Formatting Space Inside Square Brackets for TypeSpec Aliases\nDESCRIPTION: Demonstrates the convention of *not* adding spaces immediately inside the opening and closing square brackets `[]` when defining TypeSpec aliases with array literals. The 'bad' example includes unnecessary spaces, while the 'good' example shows the correct compact format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_7\n\nLANGUAGE: typespec\nCODE:\n```\n// bad\nalias foo = [ 1, 2, 3 ];\n\n// good\nalias foo = [1, 2, 3];\n```\n\n----------------------------------------\n\nTITLE: Serializing Model with Simple Arrays to XML - XML\nDESCRIPTION: This code represents serialization of model fields as arrays in XML. The root has two array elements, 'colors' (three string children) and 'counts' (two int32 children). Inputs and outputs use this pattern to validate compliance with array serialization requirements. No external dependencies are necessary.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_73\n\nLANGUAGE: xml\nCODE:\n```\n<ModelWithSimpleArrays>\\n  <colors>\\n    <string>red</string>\\n    <string>green</string>\\n    <string>blue</string>\\n  </colors>\\n  <counts>\\n    <int32>1</int32>\\n    <int32>2</int32>\\n  </counts>\\n</ModelWithSimpleArrays>\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for PUT /type/model/inheritance/single-discriminator/recursivemodel\nDESCRIPTION: This JSON is the expected input body for a PUT request to `/type/model/inheritance/single-discriminator/recursivemodel`. It involves sending a complex structure of polymorphic models ('eagle', 'goose', 'seagull', 'sparrow') containing collection and dictionary properties that refer to other polymorphic models, using a single discriminator ('kind').\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_182\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"wingspan\": 5,\n  \"kind\": \"eagle\",\n  \"partner\": {\n    \"wingspan\": 2,\n    \"kind\": \"goose\"\n  },\n  \"friends\": [\n    {\n      \"wingspan\": 2,\n      \"kind\": \"seagull\"\n    }\n  ],\n  \"hate\": {\n    \"key3\": {\n      \"wingspan\": 1,\n      \"kind\": \"sparrow\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying base64url encoding using deprecated @format in TypeSpec (TypeSpec)\nDESCRIPTION: This snippet demonstrates the old way of specifying a bytes property as base64url-encoded using the @format decorator in a TypeSpec model. The @format decorator is now deprecated and should be replaced by @encode. Requirements: TypeSpec core features. The bar property in model Foo is decorated for base64url encoding, but this usage should be migrated to the new decorator for compatibility.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2023-05-10.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\nmodel Foo {\n  @format(\"base64url\")\n  bar: bytes;\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response Body for JsonMergePatch updateResource\nDESCRIPTION: Specifies the expected JSON response body after updating a resource via the `PATCH /json-merge-patch/update/resource` endpoint using a merge patch. The response reflects the state after applying the patch.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Madge\",\n  \"map\": {\n    \"key\": {\n      \"name\": \"InnerMadge\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expected Request/Response Body for Default (Base64) Encoded Bytes Property (JSON)\nDESCRIPTION: This JSON structure defines the expected request and response body for the `POST /encode/bytes/property/default` endpoint. It tests operations where a model contains a 'value' property of type bytes, using the default encoding (Base64). The example shows 'test' encoded as 'dGVzdA=='.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"dGVzdA==\" // base64 encode of test\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"dGVzdA==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Non-Null Nullable String Property - JSON\nDESCRIPTION: This snippet shows a JSON response where the nullable string property is populated ('hello'), corresponding to an endpoint testing non-null assignments in a nullable context. Used to ensure serialization of string values in presence of nullable contract.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_257\n\nLANGUAGE: json\nCODE:\n```\n{ \"requiredProperty\": \"foo\", \"nullableProperty\": hello}\n```\n\n----------------------------------------\n\nTITLE: Example of Deprecated String-Based Visibility Decorator (TSP)\nDESCRIPTION: Provides an example of the deprecated syntax for the `@visibility` decorator using string literals (\"create\", \"read\"). This syntax is no longer supported and must be migrated to use enum members.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_10\n\nLANGUAGE: tsp\nCODE:\n```\n```tsp\n@visibility(\"create\", \"read\")\nexample: string;\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing a New TypeSpec Project via Docker in Bash\nDESCRIPTION: This Bash command initializes a new TypeSpec project in the current directory using the Docker container. It mounts the host's current directory to `/wd` within the container and executes the `tsp init` command (implicitly, as `init` is passed as an argument to the container's entrypoint). This scaffolds the basic files and directories for a new TypeSpec project. Requires Docker installed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/docker/readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v \"${pwd}:/wd\" --workdir=\"/wd\" -t azsdkengsys.azurecr.io/typespec init\n```\n\n----------------------------------------\n\nTITLE: Running Prettier for TypeSpec Files in Project Directory - Bash\nDESCRIPTION: This bash command runs Prettier using the local project's installed binary and applies formatting to all .tsp files in the working tree. It requires prior installation of Prettier and the TypeSpec plugin, as well as Node.js 14 or above. The wildcard pattern '\\*\\*/\\*.tsp' targets every TypeSpec source file in the project, and the '--write' flag saves formatted changes to disk. The output is overwritten, consistently formatted .tsp files throughout the codebase.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/prettier-plugin-typespec/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/prettier --write '**/*.tsp'\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Is String Record - JSON\nDESCRIPTION: Presents a JSON object for an entity composed of static and open string properties as part of a REST schema, showing flexible property declaration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_206\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"name\\\": \\\"IsStringAdditionalProperties\\\", \\\"prop\\\": \\\"abc\\\" }\n```\n\n----------------------------------------\n\nTITLE: Deprecated `@parameterVisibility` Usage (0.66.0 Context)\nDESCRIPTION: This snippet, shown in the 0.66.0 release notes, highlights the deprecation of using `@parameterVisibility` without arguments. Its previous side effect of disabling PATCH optionality is discouraged.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_23\n\nLANGUAGE: tsp\nCODE:\n```\n@parameterVisibility\n@patch\nop example(@bodyRoot resource: Resource): Resource;\n```\n\n----------------------------------------\n\nTITLE: Putting Default (Missing) Optional String Properties - JSON\nDESCRIPTION: An empty object PUT request, used to ensure APIs accept and correctly process updates lacking optional string values, with clear contract distinctions between omitted and null/empty strings.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_308\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Expected Request/Response Body for Base64URL Encoded Bytes Array Property (JSON)\nDESCRIPTION: This JSON structure defines the expected request and response body for the `POST /encode/bytes/property/base64url-array` endpoint. It tests operations where a model contains a 'value' property which is an array of bytes, encoded using Base64URL. The example shows ['test', 'test'] encoded.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": [\"dGVzdA\", \"dGVzdA\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": [\"dGVzdA\", \"dGVzdA\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Nullable Collection of Strings (Null) Response - JSON\nDESCRIPTION: For GET /type/property/nullable/collections/string/null, this code validates an empty or omitted string array with null, keeping the required property populated. This supports APIs that allow full removal of such lists.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_246\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"requiredProperty\\\": \\\"foo\\\", \\\"nullableProperty\\\": null }\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Model Array Response - JSON\nDESCRIPTION: This JSON snippet defines the expected response body for the GET endpoint /type/property/additionalProperties/spreadDifferentRecordModelArray. It demonstrates a model with known and additional properties, the latter being an array of objects with a 'state' field. The response highlights how additional record model arrays are handled when included alongside other known properties.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_213\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"knownProp\\\": \\\"abc\\\", \\\"prop\\\": [{ \\\"state\\\": \\\"ok\\\" }, { \\\"state\\\": \\\"ok\\\" }] }\n```\n\n----------------------------------------\n\nTITLE: Updating @extension Decorator Syntax in TypeSpec\nDESCRIPTION: Demonstrates the syntax change introduced in version 0.66.0 for the `@extension` decorator. To retain the behavior of emitting raw data for model or tuple expressions, they must now be explicitly marked as values using the `#` prefix (`#{...}` for objects, `#[...]` for tuples). This change prepares for future updates where types passed directly might be emitted as OpenAPI schemas.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/openapi/CHANGELOG.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=\"tsp\"\n-@extension(\"x-obj\", { foo: true })\n+@extension(\"x-obj\", #{ foo: true })\n-@extension(\"x-tuple\", [ \"foo\" ])\n+@extension(\"x-tuple\", #[ \"foo\" ])\nmodel Foo {}\n```\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Properties with Spread Model Array - JSON\nDESCRIPTION: Illustrates returning a record with both explicit and additional array properties comprised of model objects, common in APIs supporting batch entity composition via arrays and additional fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_198\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"knownProp\\\": [{ \\\"state\\\": \\\"ok\\\" }, { \\\"state\\\": \\\"ok\\\" }],\\n  \\\"prop\\\": [{ \\\"state\\\": \\\"ok\\\" }, { \\\"state\\\": \\\"ok\\\" }]\\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Spread Record Float Response - JSON\nDESCRIPTION: For the GET /type/property/additionalProperties/spreadRecordFloat endpoint, this JSON describes a response featuring an 'id' and a numeric additional property 'prop'. It exemplifies how numeric extra properties are managed in models, ensuring both are serialized as numbers in the JSON body.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_217\n\nLANGUAGE: json\nCODE:\n```\n{ \\\"id\\\": 43.125, \\\"prop\\\": 43.125 }\n```\n\n----------------------------------------\n\nTITLE: Handling Identifier Conflicts with the New 'const' Keyword in TypeSpec\nDESCRIPTION: Illustrates a breaking change (#3022) where `const` becomes a reserved keyword. Using `const` directly as a property name now causes an error; the correct way to define such a property is to escape the name using backticks: `` `const`: string; ``.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_38\n\nLANGUAGE: tsp\nCODE:\n```\nmodel Test {\n  // error\n  const: string;\n\n  // correct\n  `const`: string;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for GET /type/property/additionalProperties/extendsDifferentSpreadModel\nDESCRIPTION: This JSON shows the expected response body for a GET request to `/type/property/additionalProperties/extendsDifferentSpreadModel`. It illustrates receiving a model with a known property ('knownProp') and additional properties ('prop', 'derivedProp') that are themselves complex objects (models with a 'state' property).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_192\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"knownProp\": \"abc\",\n  \"prop\": { \"state\": \"ok\" },\n  \"derivedProp\": { \"state\": \"ok\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for Type_Array_DurationValue_get Endpoint\nDESCRIPTION: This JSON snippet represents the expected response body for the GET request to the `/type/array/duration` endpoint. It should return a JSON array containing a single duration string in ISO 8601 format.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_128\n\nLANGUAGE: json\nCODE:\n```\n```json\n[\"P123DT22H14M12.011S\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Illustrating @friendlyName Behavior Before Inheritance Change in TypeSpec\nDESCRIPTION: TypeSpec code defining a generic model `Foo<T>` with a `@friendlyName` decorator and another model `Bar` using `model is Foo<string>`. This pattern is affected by the breaking change #3793 where `@friendlyName` is no longer automatically inherited via `is`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_35\n\nLANGUAGE: tsp\nCODE:\n```\n@friendlyName(\"Abc{T}\", T)\nmodel Foo<T> {}\n\nmodel Bar is Foo<string>;\n```\n\n----------------------------------------\n\nTITLE: Putting Default (Missing) Optional Int Literal Properties - JSON\nDESCRIPTION: A complete but empty JSON PUT body for omitting optional integer properties, testing specification adherence for defaulting assignments.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_292\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Example Console Output after Scaffolding\nDESCRIPTION: This shows typical console output after successfully running the `hsjs-scaffold` command. It indicates the location of the generated project, provides instructions on how to run (`npm start`) and debug (using VS Code) the server, and points out that the generated controllers need implementation.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-javascript.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n[hsjs] Project is ready to run. Use `npm start` to launch the server.\n[hsjs] A debug configuration has been created for Visual Studio Code.\n[hsjs] Try `code tsp-output/server/generated` to open the project and press F5 to start debugging.\n[hsjs] The newly-generated route controllers in 'tsp-output/server/generated/src/controllers' are ready to be implemented.\n[hsjs] Done.\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm with npm - Bash\nDESCRIPTION: Installs pnpm globally using npm. This is a prerequisite for all subsequent commands in the setup. Requires Node.js (v20 LTS recommended) to be installed first. No special parameters; after running, 'pnpm' is available system-wide.\nSOURCE: https://github.com/microsoft/typespec/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Providing Float Dictionary Payloads - JSON\nDESCRIPTION: Gives an example of a JSON object mapping keys to floating-point values. This is used for dictionary API endpoints handling float or double precision values, ensuring accurate transmission of numerical data.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_152\n\nLANGUAGE: json\nCODE:\n```\n{ \"k1\": 43.125 }\n```\n\n----------------------------------------\n\nTITLE: Using Map<string, T> (Old Behavior) in TypeSpec\nDESCRIPTION: Shows the previous usage of `Map<string, string>` to define a property `options` representing a map with string keys and string values. The `Map` type has been removed in this TypeSpec version.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_16\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nmodel Foo {\n  options: Map<string, string>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Compact Nested Namespaces in TypeSpec\nDESCRIPTION: This TypeSpec code illustrates the ability, fixed in version 0.59.0, to declare nested namespaces using a compact dot-separated form (`MyModule.MySubmodule`) directly within an outer namespace (`MyOrg.MyProject`). This simplifies namespace structuring and avoids previous erroneous compiler errors. No specific dependencies are required beyond the TypeSpec compiler itself.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_29\n\nLANGUAGE: tsp\nCODE:\n```\nnamespace MyOrg.MyProject {\n  namespace MyModule.MySubmodule { // <-- this used to emit an error\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Legacy Compiler Flags with TypeSpec (TypeScript)\nDESCRIPTION: This snippet demonstrates how to revert the TypeSpec compiler's decorator argument marshalling behavior from the new (default) method back to the legacy approach. It exports a $flags constant using the definePackageFlags function, setting decoratorArgMarshalling to 'legacy'. This is a temporary workaround for migration; using this is highly discouraged as support will be removed in future versions. Requires access to definePackageFlags and TypeScript support for module exports.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2024-10-09.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const $flags = definePackageFlags({\n  decoratorArgMarshalling: \"legacy\",\n});\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Response for GET /type/model/inheritance/single-discriminator/wrongdiscriminator\nDESCRIPTION: This JSON shows the expected response body for a GET request to `/type/model/inheritance/single-discriminator/wrongdiscriminator`. It tests receiving a model where the discriminator value ('kind': 'wrongKind') is not defined within the expected hierarchy.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_180\n\nLANGUAGE: json\nCODE:\n```\n{ \"wingspan\": 1, \"kind\": \"wrongKind\" }\n```\n\n----------------------------------------\n\nTITLE: Expected V2 Preview Request/Response Body for Versioning Removed Model V3 (JSON)\nDESCRIPTION: Specifies the expected JSON request and response bodies for the V3 endpoint ('post /versioning/removed/api-version:v2preview/v3') called with API version 'v2preview' in the 'versioning/removed' scenario. Note the absence of 'enumProp', indicating its removal in this preview version.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_316\n\nLANGUAGE: json\nCODE:\n```\n// Expected request body for path: \"/versioning/removed/api-version:v2preview/v3\"\n{ \"id\": \"123\" }\n```\n\nLANGUAGE: json\nCODE:\n```\n// Expected response body for path: \"/versioning/removed/api-version:v2preview/v3\"\n{ \"id\": \"123\" }\n```\n\n----------------------------------------\n\nTITLE: Supporting 'application/jsonl' Content Type\nDESCRIPTION: Mentions the addition of support for the 'application/jsonl' content type, treating it as binary data, implemented in version 0.1.0-alpha.9 (Pull Request #6201).\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/CHANGELOG.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nSupport `application/jsonl` as binary.\n```\n\n----------------------------------------\n\nTITLE: Installing TypeSpec Visual Studio Extension via Command Line\nDESCRIPTION: Executes a command using the TypeSpec CLI (`tsp`) to install the official Visual Studio extension for TypeSpec. This enables TypeSpec language features directly within the Visual Studio IDE.\nSOURCE: https://github.com/microsoft/typespec/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntsp vs install\n```\n\n----------------------------------------\n\nTITLE: Adding Change Description with Chronus using pnpm\nDESCRIPTION: Runs the `chronus add` command using `pnpm` from the repository root directory. This command is used to add a structured change description file, which is a required step for passing Continuous Integration (CI) checks when submitting a pull request to the TypeSpec project. Requires `pnpm` and the Chronus CLI tool to be installed and configured.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm chronus add\n```\n\n----------------------------------------\n\nTITLE: Starting the TypeSpec Website Locally with pnpm - Bash\nDESCRIPTION: Launches the TypeSpec documentation or demo website in local development mode using pnpm. Should be run from the 'packages/website' directory. Spins up a development server, typically listening on localhost, for preview and iterative editing.\nSOURCE: https://github.com/microsoft/typespec/blob/main/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Bearer Authorization Header (HTTP)\nDESCRIPTION: Displays an HTTP Authorization header for Bearer token authentication. The string <token> should be replaced by an actual authorization token. Used as a client request example.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/libraries/http/authentication.md#_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nAuthorization: Bearer <token>\n```\n\n----------------------------------------\n\nTITLE: Putting Default (Missing) Optional Datetime Properties - JSON\nDESCRIPTION: A PUT request payload where the optional datetime field is left unset (omitted). Used to test server-side defaulting and proper handling of missing optional fields.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_280\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Getting Default (Missing) Optional PlainTime Properties - JSON\nDESCRIPTION: A minimal JSON object denoting absence of the optional plain time property, important for boundary condition and null/default testing of time-only values.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_298\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Request Body for spreadCompositeRequestMix\nDESCRIPTION: Specifies the expected JSON request body for the `PUT /parameters/spread/model/composite-request-mix/{name}` endpoint test case. The body contains the 'prop' property.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{ \"prop\": \"foo\" }\n```\n\n----------------------------------------\n\nTITLE: Expected Operation Signature for spreadAsRequestParameter\nDESCRIPTION: Defines the expected generated operation signature for the spreadAsRequestParameter test case. It demonstrates spreading an alias containing path, header, and body parameters directly into the operation signature without generating an intermediate model named `RequestParameter`.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\nspreadAsRequestParameter(id: string, x_ms_test_header: string, name: string)\n```\n\n----------------------------------------\n\nTITLE: Adding Azure Java Client Library Dependency with Maven\nDESCRIPTION: This XML snippet shows how to add the Azure {{service-name}} client library as a dependency in a Java project using Maven. Replace the placeholders `{{group-id}}`, `{{artifact-id}}`, and `{{artifact-version}}` with the actual values for the library.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-core/src/main/resources/Readme_protocol.txt#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>{{group-id}}</groupId>\n    <artifactId>{{artifact-id}}</artifactId>\n    <version>{{artifact-version}}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Updating Exit Behavior for 'tsp-spector knock'\nDESCRIPTION: Details an update in version 0.1.0-alpha.10 (Pull Request #6562) where the 'tsp-spector knock' command will now exit with a failure status code if no test scenarios are executed.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nUpdates `tsp-spector knock` to exit with a failure if no scenarios are executed\n```\n\n----------------------------------------\n\nTITLE: Compiling Without Standard Library via --nostdlib Flag (Bash)\nDESCRIPTION: This Bash command uses the `--nostdlib` flag to instruct the TypeSpec compiler not to load the standard TypeSpec library during compilation. This is typically used in specific scenarios where the standard library is not needed or conflicts.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/configuration/configuration.mdx#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ntsp compile . --nostdlib\n```\n\n----------------------------------------\n\nTITLE: Triggering TypeSpec Playground Try It Build in Azure Pipelines - Bash\nDESCRIPTION: Triggers a manual build for TypeSpec Playground in Azure Pipelines by posting a special command as a comment. Only contributors can run this in PR comments on forks to initiate CI builds and preview links. Requires Azure Pipelines integration.\nSOURCE: https://github.com/microsoft/typespec/blob/main/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n/azp run typespec - pr tools\n```\n\n----------------------------------------\n\nTITLE: Expected Operation Signature for spreadCompositeRequestOnlyWithBody\nDESCRIPTION: Defines the expected generated operation signature for the spreadCompositeRequestOnlyWithBody test case. It tests spreading a model containing only a property marked with `@body`. A `BodyParameter` model should be generated, but no `CompositeRequestOnlyWithBody` model.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_42\n\nLANGUAGE: plaintext\nCODE:\n```\nspreadCompositeRequestOnlyWithBody(bodyParameter: BodyParameter)\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Input for Type_Array_NullableFloatValue_put Endpoint\nDESCRIPTION: This JSON snippet represents the expected request body for the PUT request to the `/type/array/nullable-float` endpoint. The request body should be a JSON array containing floating-point numbers and null.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/spec-summary.md#_snippet_141\n\nLANGUAGE: json\nCODE:\n```\n```json\n[1.25, null, 3.0]\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Package Version with pnpm (Bash)\nDESCRIPTION: Uses the `pnpm change version` command to increment the version number specifically for the `@typespec/http-specs` package. This is part of the release process, typically done before pushing changes to a release branch. Requires `pnpm` and is intended for package maintainers.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-specs/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm change version --only \"@typespec/http-specs\"\n```\n\n----------------------------------------\n\nTITLE: Defining Request Body Implicitly (Old Behavior) in TypeSpec\nDESCRIPTION: Shows the previous behavior where a single undecorated parameter `body: string` implicitly defined the entire request body type as `string`. This behavior changed, and the parameter now becomes a property named 'body' within the request body object.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_0\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nop create(body: string): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Scenario Path Handling\nDESCRIPTION: Notes the initial feature enablement for handling multiple scenario paths, introduced in version 0.1.0-alpha.1.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/CHANGELOG.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nEnabled handling of multiple scenario paths\n```\n\n----------------------------------------\n\nTITLE: Illustrating Completion for Constrained Template Parameters in TypeSpec\nDESCRIPTION: Shows an example of TypeSpec code where IDE completion (`┆`) suggests properties (`age`, `name`) for an object literal used as a template argument, constrained by `T extends {name: string, age: int16}`. This demonstrates the feature added in PR #3906.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/compiler/CHANGELOG.md#_snippet_30\n\nLANGUAGE: tsp\nCODE:\n```\nmodel User<T extends {name: string, age: int16}> {\n}\nalias user = User< {┆\n                    | [age]\n                    | [name]\n```\n\n----------------------------------------\n\nTITLE: Adding '--filter' Option to 'knock' Command\nDESCRIPTION: Highlights the addition of the new '--filter' command-line option to the 'knock' command in version 0.1.0-alpha.10 (Pull Request #6543), allowing users to filter executed scenarios.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/spector/CHANGELOG.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAdd new `--filter` option to `knock` command\n```\n\n----------------------------------------\n\nTITLE: Visualizing Issue Triage Workflow with Mermaid (Mermaid)\nDESCRIPTION: This Mermaid flowchart defines the workflow for triaging issues in the repository, detailing the stages from issue creation via template selection to area assignment and team involvement. It includes user and bot actions, state transitions, and visual class definitions to distinguish automation from manual steps. To render this diagram, a tool or editor that supports Mermaid syntax is required; it visually serves documentation purposes and does not interact programmatically with the repository.\nSOURCE: https://github.com/microsoft/typespec/blob/main/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    classDef bot fill:#69f\n    classDef user fill:#9c6\n\n\n    subgraph \"Legend\"\n      a([User action])\n      b[\\Automation detect\\/]:::bot\n      c[Automation action]:::bot\n      d{{state}}\n    end\n\n    subgraph \"Issue creation\"\n        select_template([User select template])\n\n        select_template --> bug_template\n        select_template --> feature_template\n        select_template --> plain\n\n        bug_template([Bug]) --> add_bug_label[🤖 add `bug` label]:::bot --> start\n        feature_template([Feature]) --> add_feature_label[\"🤖 add `feature` label\"]:::bot --> start\n        plain([Plain]) --> start\n        start{{\"✅ Issue created\"}}\n    end\n\n\n\n    subgraph \"Area triage\"\n        auto-triage[\\🤖 Detect if issue has area checkbox\\/]:::bot\n        add-needs-area[🤖 label 'needs-area']:::bot\n        auto-area-label[\"🤖 label '{area}'\"]:::bot\n        add-area-label([\"Issue is labelled with {area}\"])\n        remove-needs-area[🤖 Remove 'needs-area']:::bot\n    end\n\n    subgraph \"Team triage\"\n\n        team-triage{{Issue Labeled with Team area}}\n        team-triage -- wrong area --> remove_area([Remove area label])\n        team-triage -- correct area --> triage([Triage/add to project])\n\n    end\n\n\n\n\n    start --> auto-triage\n\n    auto-triage -- no --> add-needs-area\n    auto-triage -- yes --> auto-area-label\n\n    auto-area-label --> remove-needs-area\n\n    add-needs-area --> add-area-label\n    add-area-label --> remove-needs-area\n    remove-needs-area ---> team-triage\n    remove_area --> add-needs-area\n```\n\n----------------------------------------\n\nTITLE: Formatting Space Inside Parentheses in TypeSpec Operations\nDESCRIPTION: Shows the convention of *not* adding spaces immediately inside the opening and closing parentheses of parameter lists. The 'bad' example includes extraneous spaces, while the 'good' example adheres to the standard.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/handbook/style-guide.md#_snippet_5\n\nLANGUAGE: typespec\nCODE:\n```\n// bad\nop list( filter: string ): Pet[];\n\n// good\nop list(filter: string): Pet[];\n```\n\n----------------------------------------\n\nTITLE: Querying npm Version from Shell\nDESCRIPTION: This shell command checks if npm is available and displays its currently installed version, which verifies that Node.js and npm are installed as required dependencies for running the TypeSpec extension. The command outputs the version number of npm as a string. It should be executed in any standard command shell (bash, zsh, PowerShell, etc.). No input parameters are required.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/typespec-vscode/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm --version\n```\n\n----------------------------------------\n\nTITLE: Defining Operation in Non-Service Namespace in TypeSpec\nDESCRIPTION: Shows an operation defined within a standard namespace (`DemoService`) that is not marked as the service namespace (using `@serviceTitle`). In the new resolution logic, this emits no routes (`[]`) and generates a warning, even if defined.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/release-notes/release-2022-08-10.md#_snippet_10\n\nLANGUAGE: typespec\nCODE:\n```\n```typespec\nnamespace DemoService;\n\nop test(): void;\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating Project Directory in Bash\nDESCRIPTION: These commands first create a new directory named `myproject` using `mkdir` and then change the current working directory into the newly created `myproject` directory using `cd`. This prepares the environment for initializing a new TypeSpec project.\nSOURCE: https://github.com/microsoft/typespec/blob/main/website/src/content/docs/docs/getting-started/code-generation-javascript.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir myproject\ncd myproject\n```\n\n----------------------------------------\n\nTITLE: Example Usage Placeholder for Azure Java Client Library\nDESCRIPTION: This Java code block contains a placeholder comment `{{package-name}}.readme`. It indicates where example code demonstrating the usage of the Azure {{service-name}} client library should be inserted. The actual examples are expected to be provided separately or generated based on the package name.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-core/src/main/resources/Readme_protocol.txt#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n{{package-name}}.readme\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mapped Iterator with Java Generics\nDESCRIPTION: Implements a private static generic Iterator that applies a mapping function to each element in an underlying iterator. Supports standard Iterator operations: hasNext, next, and remove. Requires an existing Iterator and a mapping function as constructor inputs. Useful for transforming elements in any Iterable or Collection, with output matching the mapped type.\nSOURCE: https://github.com/microsoft/typespec/blob/main/packages/http-client-java/generator/http-client-generator-mgmt/src/main/resources/ResourceManagerUtils_PagedIterableImpl.txt#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nprivate static final class IteratorImpl<T, S> implements Iterator<S> {\n\n    private final Iterator<T> iterator;\n    private final Function<T, S> mapper;\n\n    private IteratorImpl(Iterator<T> iterator, Function<T, S> mapper) {\n        this.iterator = iterator;\n        this.mapper = mapper;\n    }\n\n    @Override\n    public boolean hasNext() {\n        return iterator.hasNext();\n    }\n\n    @Override\n    public S next() {\n        return mapper.apply(iterator.next());\n    }\n\n    @Override\n    public void remove() {\n        iterator.remove();\n    }\n}\n```"
  }
]