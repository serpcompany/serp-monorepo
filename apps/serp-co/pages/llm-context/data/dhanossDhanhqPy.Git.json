[
  {
    "owner": "dhan-oss",
    "repo": "dhanhq-py.git",
    "content": "TITLE: Initializing DhanHQ Client and Placing Orders in Python\nDESCRIPTION: Example of initializing the DhanHQ client, placing equity and options orders, and performing various order-related operations.\nSOURCE: https://github.com/dhan-oss/dhanhq-py.git/blob/undefined/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom dhanhq import DhanContext, dhanhq\n\ndhan_context = DhanContext(\"client_id\",\"access_token\")\ndhan = dhanhq(dhan_context)\n\n# Place an order for Equity Cash\ndhan.place_order(security_id='1333',            # HDFC Bank\n    exchange_segment=dhan.NSE,\n    transaction_type=dhan.BUY,\n    quantity=10,\n    order_type=dhan.MARKET,\n    product_type=dhan.INTRA,\n    price=0)\n    \n# Place an order for NSE Futures & Options\ndhan.place_order(security_id='52175',           # Nifty PE\n    exchange_segment=dhan.NSE_FNO,\n    transaction_type=dhan.BUY,\n    quantity=550,\n    order_type=dhan.MARKET,\n    product_type=dhan.INTRA,\n    price=0)\n  \n# Fetch all orders\ndhan.get_order_list()\n\n# Get order by id\ndhan.get_order_by_id(order_id)\n\n# Modify order\ndhan.modify_order(order_id, order_type, leg_name, quantity, price, trigger_price, disclosed_quantity, validity)\n\n# Cancel order\ndhan.cancel_order(order_id)\n\n# Get order by correlation id\ndhan.get_order_by_corelationID(corelationID)\n\n# Get Instrument List\ndhan.fetch_security_list(\"compact\")\n\n# Get positions\ndhan.get_positions()\n\n# Get holdings\ndhan.get_holdings()\n\n# Intraday Minute Data \ndhan.intraday_minute_data(security_id, exchange_segment, instrument_type, from_date, to_date)\n\n# Historical Daily Data\ndhan.historical_daily_data(security_id, exchange_segment, instrument_type, from_date, to_date)\n\n# Time Converter\ndhan.convert_to_date_time(EPOCH Date)\n\n# Get trade book\ndhan.get_trade_book(order_id)\n\n# Get trade history\ndhan.get_trade_history(from_date,to_date,page_number=0)\n\n# Get fund limits\ndhan.get_fund_limits()\n\n# Generate TPIN\ndhan.generate_tpin()\n\n# Enter TPIN in Form\ndhan.open_browser_for_tpin(isin='INE00IN01015',\n    qty=1,\n    exchange='NSE')\n\n# EDIS Status and Inquiry\ndhan.edis_inquiry()\n\n# Expiry List of Underlying\ndhan.expiry_list(\n    under_security_id=13,                       # Nifty\n    under_exchange_segment=\"IDX_I\"\n)\n\n# Option Chain\ndhan.option_chain(\n    under_security_id=13,                       # Nifty\n    under_exchange_segment=\"IDX_I\",\n    expiry=\"2024-10-31\"\n)\n\n# Market Quote Data                     # LTP - ticker_data, OHLC - ohlc_data, Full Packet - quote_data\ndhan.ohlc_data(\n    securities = {\"NSE_EQ\":[1333]}\n)\n\n# Place Forever Order (SINGLE)\ndhan.place_forever(\n    security_id=\"1333\",\n    exchange_segment= dhan.NSE,\n    transaction_type= dhan.BUY,\n    product_type=dhan.CNC,\n    quantity= 10,\n    price= 1900,\n    trigger_Price= 1950\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Order Updates with Dhan API in Python\nDESCRIPTION: This snippet demonstrates how to set up and run live order updates using the Dhan API. It creates a DhanContext, initializes an OrderUpdate client, and continuously attempts to connect to the Dhan WebSocket, with error handling and reconnection logic.\nSOURCE: https://github.com/dhan-oss/dhanhq-py.git/blob/undefined/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dhanhq import DhanContext, OrderUpdate\nimport time\n\n# Define and use your dhan_context if you haven't already done so like below:\ndhan_context = DhanContext(\"client_id\",\"access_token\")\n\ndef run_order_update():\n    order_client = OrderUpdate(dhan_context)\n    while True:\n        try:\n            order_client.connect_to_dhan_websocket_sync()\n        except Exception as e:\n            print(f\"Error connecting to Dhan WebSocket: {e}. Reconnecting in 5 seconds...\")\n            time.sleep(5)\n\nrun_order_update()\n```\n\n----------------------------------------\n\nTITLE: Using MarketFeed for Real-time Market Data in Python\nDESCRIPTION: Example of using the MarketFeed class to subscribe to real-time market data for specific instruments and handle the data stream.\nSOURCE: https://github.com/dhan-oss/dhanhq-py.git/blob/undefined/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom dhanhq import DhanContext, MarketFeed\n\n# Define and use your dhan_context if you haven't already done so like below:\ndhan_context = DhanContext(\"client_id\",\"access_token\")\n\n# Structure for subscribing is (exchange_segment, \"security_id\", subscription_type)\n\ninstruments = [(MarketFeed.NSE, \"1333\", MarketFeed.Ticker),   # Ticker - Ticker Data\n    (MarketFeed.NSE, \"1333\", MarketFeed.Quote),     # Quote - Quote Data\n    (MarketFeed.NSE, \"1333\", MarketFeed.Full),      # Full - Full Packet\n    (MarketFeed.NSE, \"11915\", MarketFeed.Ticker),\n    (MarketFeed.NSE, \"11915\", MarketFeed.Full)]\n\nversion = \"v2\"          # Mention Version and set to latest version 'v2'\n\n# In case subscription_type is left as blank, by default Ticker mode will be subscribed.\n\ntry:\n    data = MarketFeed(dhan_context, instruments, version)\n    while True:\n        data.run_forever()\n        response = data.get_data()\n        print(response)\n\nexcept Exception as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Fetching 20-Level Market Depth with Dhan API in Python\nDESCRIPTION: This code snippet shows how to retrieve 20-level market depth data using the Dhan API. It initializes a DhanContext, sets up instruments for depth retrieval, and continuously fetches data until a server disconnection is detected. Error handling is included.\nSOURCE: https://github.com/dhan-oss/dhanhq-py.git/blob/undefined/README.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom dhanhq import DhanContext, FullDepth\n\ndhan_context = DhanContext(client_id, access_token)\n\ninstruments = [(1, \"1333\"),(2,\"\")]\n\ntry:\n    response = fulldepth.FullDepth(dhan_context, instruments)\n    response.run_forever()\n    \n    while True:\n        response.get_data()\n        \n        if response.on_close:\n            print(\"Server disconnection detected. Kindly try again.\")\n            break\n\nexcept Exception as e:\n    print(e)\n```\n\n----------------------------------------\n\nTITLE: Managing MarketFeed Connections and Subscriptions in Python\nDESCRIPTION: Examples of closing MarketFeed connections, subscribing to additional instruments, and unsubscribing from active connections.\nSOURCE: https://github.com/dhan-oss/dhanhq-py.git/blob/undefined/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Close Connection\ndata.disconnect()\n\n# Subscribe instruments while connection is open\nsub_instruments = [(MarketFeed.NSE, \"14436\", MarketFeed.Ticker)]\n\ndata.subscribe_symbols(sub_instruments)\n\n# Unsubscribe instruments which are already active on connection\nunsub_instruments = [(MarketFeed.NSE, \"1333\", 16)]\n\ndata.unsubscribe_symbols(unsub_instruments)\n```\n\n----------------------------------------\n\nTITLE: Installing DhanHQ-py via pip\nDESCRIPTION: Command to install the DhanHQ-py package using pip package manager.\nSOURCE: https://github.com/dhan-oss/dhanhq-py.git/blob/undefined/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install dhanhq\n```"
  }
]