[
  {
    "owner": "kubeovn",
    "repo": "kube-ovn",
    "content": "TITLE: Preparing Kubernetes Nodes and Installing Kube-OVN with Helm\nDESCRIPTION: This snippet shows how to prepare Kubernetes nodes with proper labels and install Kube-OVN using Helm in standard or high-availability configurations. It also includes the upgrade command.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/charts/kube-ovn/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl label node -lbeta.kubernetes.io/os=linux kubernetes.io/os=linux --overwrite\n$ kubectl label node -lnode-role.kubernetes.io/control-plane  kube-ovn/role=master --overwrite\n$ kubectl label node -lovn.kubernetes.io/ovs_dp_type!=userspace ovn.kubernetes.io/ovs_dp_type=kernel  --overwrite\n\n# standard install \n$ helm install --debug kubeovn ./charts/kube-ovn --set MASTER_NODES=${Node0}\n\n# high availability install\n$ helm install --debug kubeovn ./charts/kube-ovn --set MASTER_NODES=${Node0},${Node1},${Node2}\n\n# upgrade to this version\n$ helm upgrade --debug kubeovn ./charts/kube-ovn --set MASTER_NODES=${Node0},${Node1},${Node2}\n```\n\n----------------------------------------\n\nTITLE: Installing the Kube-OVN FastPath Module\nDESCRIPTION: Loads the compiled Kube-OVN FastPath module into the kernel. This should be done on each Kubernetes node where the module is needed.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/fastpath/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninsmod kube_ovn_fastpath.ko\n```\n\n----------------------------------------\n\nTITLE: Verifying Kube-OVN FastPath Module Installation\nDESCRIPTION: Uses the dmesg command to verify successful installation of the Kube-OVN FastPath module. The output should show initialization messages for various module components.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/fastpath/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndmesg\n```\n\n----------------------------------------\n\nTITLE: Deploying and Running Network Connectivity Tests for Kube-OVN in Bash\nDESCRIPTION: This script demonstrates how to set up a test environment, deploy the test server, and run connectivity tests during Kube-OVN operations. It includes steps for initializing a Kubernetes cluster with Kube-OVN, building and deploying the test server, and executing connectivity tests against specified endpoints.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/test/server/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Deploy a kubernetes cluster with kube-ovn\nmake kind-init kind-install\n\n# Build and deploy test-server\nmake image-test\nkind load docker-image --name kube-ovn kubeovn/test:v1.13.0\nkubectl apply -f test/server/test-server.yaml\ndocker run --name kube-ovn-test -d --net=kind kubeovn/test:v1.13.0\ndocker inspect kube-ovn-test -f '{{.NetworkSettings.Networks.kind.IPAddress}}'\n\n# Run test-server analysis tool in one terminal and reload kube-ovn in another terminal\n# terminal 1 (replace 172.18.0.5/80 with the address/port you want to test)\nkubectl exec -it test-client -- ./test-server --remote-address=172.18.0.5 --remote-port=80 --output=json --duration-seconds=60\n\n# terminal 2\nkubectl ko reload\n\n# Try with different address to test different path.\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements for RPM-based OS\nDESCRIPTION: Installs the necessary kernel development packages and gcc for RPM-based operating systems. Ensures the kernel-header version matches the one used on Kubernetes nodes.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/fastpath/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyum install -y kernel-devel-$(uname -r) gcc elfutils-libelf-devel\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements for DEB-based OS\nDESCRIPTION: Installs the required Linux headers and gcc-12 for DEB-based operating systems. Ensures the Linux headers version matches the one used on Kubernetes nodes.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/fastpath/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt install linux-headers-$(uname -r) make gcc-12\n```\n\n----------------------------------------\n\nTITLE: Building the Kube-OVN FastPath Module\nDESCRIPTION: Compiles the Kube-OVN FastPath module. Users should navigate to the appropriate directory based on their kernel version before running this command.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/fastpath/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Helm Installation Parameters for Talos Linux\nDESCRIPTION: These are the specific Helm chart parameters needed when installing Kube-OVN on Talos Linux, configuring custom directories and disabling module management.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/charts/kube-ovn/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--set cni_conf.MOUNT_LOCAL_BIN_DIR=false\n--set OPENVSWITCH_DIR=/var/lib/openvswitch\n--set OVN_DIR=/var/lib/ovn\n--set DISABLE_MODULES_MANAGEMENT=true\n```\n\n----------------------------------------\n\nTITLE: Talos Linux Machine Configuration for Kube-OVN\nDESCRIPTION: This snippet shows the machine configuration needed for Talos Linux to load the openvswitch kernel module, which is required for Kube-OVN.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/charts/kube-ovn/README.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmachine:\n  kernel:\n    modules:\n    - name: openvswitch\n```\n\n----------------------------------------\n\nTITLE: Running KNB Performance Test\nDESCRIPTION: Executes a basic performance test using KNB with specified client and server nodes for a 60-second duration. The -v flag enables verbose output.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/test/performance/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./knb -v -cn {Client NodeName} -sn {Server NodeName} --duration 60  \n```\n\n----------------------------------------\n\nTITLE: Removing the Kube-OVN FastPath Module\nDESCRIPTION: Unloads the Kube-OVN FastPath module from the kernel. This can be used to remove the module when it's no longer needed or for troubleshooting.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/fastpath/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nrmmod kube_ovn_fastpath.ko\n```\n\n----------------------------------------\n\nTITLE: Installing KNB Benchmark Tool\nDESCRIPTION: Downloads the KNB benchmark suite script from GitHub and makes it executable\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/test/performance/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://raw.githubusercontent.com/InfraBuilder/k8s-bench-suite/master/knb\nchmod +x knb\n```\n\n----------------------------------------\n\nTITLE: Preferred Error Checking Style in Go\nDESCRIPTION: Shows the preferred compact style for checking errors in a single line using an if statement with initialization. This style is more concise and readable.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/CODE_STYLE.md#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif err := c.initNodeRoutes(); err != nil {\n    klog.Fatalf(\"failed to initialize node routes: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Error Handling in Go\nDESCRIPTION: Demonstrates the correct approach to error handling, where errors are logged and returned. No error should be ignored, and appropriate error messages should be provided.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/CODE_STYLE.md#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nkubeClient, err := kubernetes.NewForConfig(cfg)\nif err != nil {\n    klog.Errorf(\"init kubernetes client failed %v\", err)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Function Error Return in Go\nDESCRIPTION: Demonstrates the correct approach to error handling within functions, where errors are both logged and returned to the caller, allowing for proper propagation.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/CODE_STYLE.md#2025-04-17_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc startHandle() error {\n    if err = some(); err != nil {\n        klog.Errorf(err)\n\t\treturn err\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Variable Naming in Go\nDESCRIPTION: Demonstrates the correct camelCase naming convention for variables in Go. Variables should use camelCase rather than snake_case to maintain consistent style throughout the codebase.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/CODE_STYLE.md#2025-04-17_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar commandLine string\n```\n\n----------------------------------------\n\nTITLE: Defining Kube-OVN Roadmap in Markdown\nDESCRIPTION: This Markdown document outlines the roadmap for the Kube-OVN project, covering Network Datapath improvements, VPC Network enhancements, and User Experience upgrades. It provides a high-level overview of planned features and improvements across these key areas.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/ROADMAP.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Kube-OVN RoadMap\n\nThis document defines high level goals for Kube-OVN project. We welcome community contributors to discuss and update this Roadmap through Issues.\n\n## Network Datapath\n\nKube-OVN currently supports two network modes, Overlay and Underlay. We hope to improve the stability, performance, and compatibility with the ecosystem of these two network modes in Kubernetes.\n\n-  Improved Datapath network performance\n-  Keeping up with the latest network API features in the community\n-  Enhanced network monitoring and visualization capabilities\n-  Addition of automated test cases for various scenarios\n\n## VPC Network\n\nVPC network is a key feature of Kube-OVN, many functions have been used in production environment, and we hope to increase the maturity of these functions and improve the user experiences.\n\n-  Standardize multiple gateway solutions and provide the best egress practice\n-  Provide more VPC internal basic network capabilities and solutions, such as DNS, DHCP, LoadBalancer, etc.\n-  Simplify VPC operation complexity and provide a more comprehensive CLI\n-  Supplement automated test cases for various scenarios\n\n## User Experience\n\nImprove the user experience of Kubernetes cni, making container networking simpler, more reliable, and efficient.\n\n- Helm/Operator to automate daily operations\n- More organized metrics and grafana dashboard\n- Troubleshooting tools that can automatically find known issues\n- Integrated with other projects like kubeaz, kubekey, sealos etc.\n```\n\n----------------------------------------\n\nTITLE: Defining Apache 2.0 License Header for Kubernetes Projects\nDESCRIPTION: This snippet contains the standard Apache 2.0 license header used in Kubernetes-related projects. It specifies the terms under which the associated code can be used, modified, and distributed.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/hack/boilerplate.go.txt#2025-04-17_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n/*\nCopyright The Kubernetes Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n```\n\n----------------------------------------\n\nTITLE: Less Preferred Error Checking Style in Go\nDESCRIPTION: Shows the less preferred style of error checking where the error is assigned in a separate statement. This style is more verbose and less idiomatic in Go.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/CODE_STYLE.md#2025-04-17_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nerr := c.initNodeRoutes()\nif err != nil {\n  klog.Fatalf(\"failed to initialize node routes: %v\", err)\n}\n```\n\n----------------------------------------\n\nTITLE: Poor Variable Naming in Go\nDESCRIPTION: Shows an example of incorrect snake_case naming convention that should be avoided in the Kube-OVN codebase.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/CODE_STYLE.md#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar command_line string\n```\n\n----------------------------------------\n\nTITLE: Poor Error Handling in Go\nDESCRIPTION: Shows an anti-pattern where errors are silently ignored using the blank identifier (_), which should be avoided in the Kube-OVN codebase.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/CODE_STYLE.md#2025-04-17_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nkubeClient, _ := kubernetes.NewForConfig(cfg)\n```\n\n----------------------------------------\n\nTITLE: Poor Function Error Return in Go\nDESCRIPTION: Shows an anti-pattern where errors are logged but not returned to the caller, which prevents proper error propagation and handling up the call stack.\nSOURCE: https://github.com/kubeovn/kube-ovn/blob/master/CODE_STYLE.md#2025-04-17_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc startHandle() {\n\tif err = some(); err != nil {\n\t\tklog.Errorf(err)    \n    }\n\treturn\n}\n```"
  }
]