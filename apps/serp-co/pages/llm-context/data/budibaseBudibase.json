[
  {
    "owner": "budibase",
    "repo": "budibase",
    "content": "TITLE: Configuring and Using Budibase SDK in JavaScript\nDESCRIPTION: Demonstrates how to initialize the Budibase SDK with API credentials and perform application searches using both Promise-based and callback approaches. Shows configuration setup and basic API interaction patterns.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { configure, ApplicationsApi } from \"@budibase/sdk\"\n\n// Configure the API client\nconfigure({\n  apiKey: \"my-api-key\",\n  host: \"https://my.budibase.app\"\n})\n\n// Search for an app.\n// We can use the promisified version...\nconst res = await ApplicationsApi.applicationsSearchPost({ name: \"foo\" })\nconsole.log(\"Applications:\", res.data)\n\n// ...or the callback version\nApplicationsApi.applicationsSearchPost({ name: \"foo\" }, ((error, data) => {\n  if (error) {\n    console.error(\"Failed to search:\", error)\n  } else {\n    console.log(\"Applications:\", data.data)\n  }\n}))\n```\n\n----------------------------------------\n\nTITLE: Installing Budibase Helm Chart from Repository\nDESCRIPTION: Commands to add the Budibase Helm repository, update it, and install the Budibase chart in a new namespace.\nSOURCE: https://github.com/budibase/budibase/blob/master/charts/budibase/README.md#2025-04-22_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ helm repo add budibase https://budibase.github.io/budibase/\n$ helm repo update\n$ helm install --create-namespace --namespace budibase budibase budibase/budibase\n```\n\n----------------------------------------\n\nTITLE: Installing Budibase Helm Chart from Local Repository\nDESCRIPTION: Commands to clone the Budibase repository, navigate to the chart directory, and install the Budibase chart in a new namespace.\nSOURCE: https://github.com/budibase/budibase/blob/master/charts/budibase/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git clone git@github.com:budibase/budibase.git\n$ cd budibase/charts/budibase\n$ helm install --create-namespace --namespace budibase budibase .\n```\n\n----------------------------------------\n\nTITLE: Configuring Budibase Helm Chart for Home Cluster\nDESCRIPTION: Example YAML configuration for deploying Budibase in a home cluster using nginx ingress controller and NFS storage. Includes settings for ingress, CouchDB, and storage classes.\nSOURCE: https://github.com/budibase/budibase/blob/master/charts/budibase/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ningress:\n  enabled: true\n  className: \"nginx\"\n  hosts:\n    - host: budibase.local # set this to whatever DNS name you'd use\n      paths:\n        - backend:\n            service:\n              name: proxy-service\n              port:\n                number: 10000\n          path: /\n          pathType: Prefix\n\ncouchdb:\n  persistentVolume:\n    enabled: true\n    storageClass: \"nfs-client\"\n  adminPassword: admin\n\nservices:\n  objectStore:\n    storageClass: \"nfs-client\"\n  redis:\n    storageClass: \"nfs-client\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Conditional Handlebars Template in JavaScript\nDESCRIPTION: This example demonstrates a conditional Handlebars template using the 'gte' (greater than or equal) helper. It shows how to create branching logic within a template based on context variables.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/string-templates/README.md#2025-04-22_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\nHello I'm building a {{ #gte score \"50\" }}Great{{ else }}Bad{{ /gte }} string with Handlebars!\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Budibase\nDESCRIPTION: Yarn commands to install dependencies and build all Budibase packages.\nSOURCE: https://github.com/budibase/budibase/blob/master/docs/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Markdown HTML Renderer Implementation\nDESCRIPTION: Renderer class that converts markdown tokens into HTML output. Includes methods for rendering various markdown elements like code blocks, blockquotes, headings, lists, and inline formatting.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || \"\").match(/\\S*/)[0]\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang)\n      if (out != null && out !== code) {\n        escaped = true\n        code = out\n      }\n    }\n\n    code = code.replace(/\\n$/, \"\") + \"\\n\"\n\n    if (!lang) {\n      return (\n        \"<pre><code>\" +\n        (escaped ? code : escape(code, true)) +\n        \"</code></pre>\\n\"\n      )\n    }\n\n    return (\n      '<pre><code class=\"' +\n      this.options.langPrefix +\n      escape(lang, true) +\n      '\">'+\n      (escaped ? code : escape(code, true)) +\n      \"</code></pre>\\n\"\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Docker Build Command for Budibase Single Image\nDESCRIPTION: Alternative manual Docker build command to use if the yarn script fails, specifying architecture and disabling cache.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/single/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg TARGETARCH=amd --no-cache -t budibase:latest -f ./hosting/single/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Markdown Block Lexer Class in JavaScript\nDESCRIPTION: A class for lexing (tokenizing) markdown text blocks. It initializes with configuration options and provides methods for processing markdown into tokens with support for different rule sets (normal, pedantic, GFM).\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = []\n    this.tokens.links = Object.create(null)\n    this.options = options || defaults\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer()\n    this.tokenizer = this.options.tokenizer\n    this.tokenizer.options = this.options\n    this.tokenizer.lexer = this\n    this.inlineQueue = []\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true,\n    }\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal,\n    }\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic\n      rules.inline = inline.pedantic\n    } else if (this.options.gfm) {\n      rules.block = block.gfm\n      if (this.options.breaks) {\n        rules.inline = inline.breaks\n      } else {\n        rules.inline = inline.gfm\n      }\n    }\n    this.tokenizer.rules = rules\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline,\n    }\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options)\n    return lexer.lex(src)\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options)\n    return lexer.inlineTokens(src)\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src.replace(/\\r\\n|\\r/g, \"\\n\")\n\n    this.blockTokens(src, this.tokens)\n\n    let next\n    while ((next = this.inlineQueue.shift())) {\n      this.inlineTokens(next.src, next.tokens)\n    }\n\n    return this.tokens\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, \"    \").replace(/^ +$/gm, \"\")\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + \"    \".repeat(tabs.length)\n      })\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped\n\n    while (src) {\n      if (\n        this.options.extensions &&\n        this.options.extensions.block &&\n        this.options.extensions.block.some(extTokenizer => {\n          if ((token = extTokenizer.call({ lexer: this }, src, tokens))) {\n            src = src.substring(token.raw.length)\n            tokens.push(token)\n            return true\n          }\n          return false\n        })\n      ) {\n        continue\n      }\n\n      // newline\n      if ((token = this.tokenizer.space(src))) {\n        src = src.substring(token.raw.length)\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += \"\\n\"\n        } else {\n          tokens.push(token)\n        }\n        continue\n      }\n\n      // code\n      if ((token = this.tokenizer.code(src))) {\n        src = src.substring(token.raw.length)\n        lastToken = tokens[tokens.length - 1]\n        // An indented code block cannot interrupt a paragraph.\n        if (\n          lastToken &&\n          (lastToken.type === \"paragraph\" || lastToken.type === \"text\")\n        ) {\n          lastToken.raw += \"\\n\" + token.raw\n          lastToken.text += \"\\n\" + token.text\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text\n        } else {\n          tokens.push(token)\n        }\n        continue\n      }\n\n      // fences\n      if ((token = this.tokenizer.fences(src))) {\n        src = src.substring(token.raw.length)\n        tokens.push(token)\n        continue\n      }\n\n      // heading\n      if ((token = this.tokenizer.heading(src))) {\n        src = src.substring(token.raw.length)\n        tokens.push(token)\n        continue\n      }\n\n      // hr\n      if ((token = this.tokenizer.hr(src))) {\n        src = src.substring(token.raw.length)\n        tokens.push(token)\n        continue\n      }\n\n      // blockquote\n      if ((token = this.tokenizer.blockquote(src))) {\n        src = src.substring(token.raw.length)\n        tokens.push(token)\n        continue\n      }\n\n      // list\n      if ((token = this.tokenizer.list(src))) {\n        src = src.substring(token.raw.length)\n        tokens.push(token)\n        continue\n      }\n\n      // html\n      if ((token = this.tokenizer.html(src))) {\n        src = src.substring(token.raw.length)\n        tokens.push(token)\n        continue\n      }\n\n      // def\n      if ((token = this.tokenizer.def(src))) {\n        src = src.substring(token.raw.length)\n        lastToken = tokens[tokens.length - 1]\n        if (\n          lastToken &&\n          (lastToken.type === \"paragraph\" || lastToken.type === \"text\")\n        ) {\n          lastToken.raw += \"\\n\" + token.raw\n          lastToken.text += \"\\n\" + token.raw\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title,\n          }\n        }\n        continue\n      }\n\n      // table (gfm)\n      if ((token = this.tokenizer.table(src))) {\n        src = src.substring(token.raw.length)\n        tokens.push(token)\n        continue\n      }\n\n      // lheading\n      if ((token = this.tokenizer.lheading(src))) {\n        src = src.substring(token.raw.length)\n        tokens.push(token)\n        continue\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity\n        const tempSrc = src.slice(1)\n        let tempStart\n        this.options.extensions.startBlock.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc)\n          if (typeof tempStart === \"number\" && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart)\n          }\n        })\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1)\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1]\n        if (lastParagraphClipped && lastToken.type === \"paragraph\") {\n          lastToken.raw += \"\\n\" + token.raw\n          lastToken.text += \"\\n\" + token.text\n          this.inlineQueue.pop()\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text\n        } else {\n          tokens.push(token)\n        }\n        lastParagraphClipped = cutSrc.length !== src.length\n        src = src.substring(token.raw.length)\n        continue\n      }\n\n      // text\n      if ((token = this.tokenizer.text(src))) {\n        src = src.substring(token.raw.length)\n        lastToken = tokens[tokens.length - 1]\n        if (lastToken && lastToken.type === \"text\") {\n          lastToken.raw += \"\\n\" + token.raw\n          lastToken.text += \"\\n\" + token.text\n          this.inlineQueue.pop()\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text\n        } else {\n          tokens.push(token)\n        }\n        continue\n      }\n\n      if (src) {\n        const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0)\n        if (this.options.silent) {\n          console.error(errMsg)\n          break\n        } else {\n          throw new Error(errMsg)\n        }\n      }\n    }\n\n    this.state.top = true\n    return tokens\n  }\n\n  inline(src, tokens) {\n    this.inlineQueue.push({ src, tokens })\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src\n    let match\n    let keepPrevChar, prevChar\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links)\n      if (links.length > 0) {\n        while (\n          (match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) !=\n          null\n        ) {\n          if (\n            links.includes(match[0].slice(match[0].lastIndexOf(\"[\") + 1, -1))\n          ) {\n            maskedSrc =\n              maskedSrc.slice(0, match.index) +\n              \"[\" +\n              repeatString(\"a\", match[0].length - 2) +\n              \"]\" +\n              maskedSrc.slice(\n                this.tokenizer.rules.inline.reflinkSearch.lastIndex\n              )\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n```\n\n----------------------------------------\n\nTITLE: Building Budibase Container for Azure App Services\nDESCRIPTION: Specialized Docker build command for Azure App Service deployment, which includes Azure-specific requirements like SSH on port 2222.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/single/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --build-arg TARGETARCH=amd --build-arg TARGETBUILD=aas -t budibase:latest -f ./hosting/single/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown Lists in JavaScript\nDESCRIPTION: A comprehensive method that identifies and processes markdown list syntax. It handles ordered and unordered lists, task lists, nested list items, and maintains proper indentation rules. The method returns a structured token representing the entire list.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlist(src) {\n  let cap = this.rules.block.list.exec(src)\n  if (cap) {\n    let raw,\n      istask,\n      ischecked,\n      indent,\n      i,\n      blankLine,\n      endsWithBlankLine,\n      line,\n      nextLine,\n      rawLine,\n      itemContents,\n      endEarly\n\n    let bull = cap[1].trim()\n    const isordered = bull.length > 1\n\n    const list = {\n      type: \"list\",\n      raw: \"\",\n      ordered: isordered,\n      start: isordered ? +bull.slice(0, -1) : \"\",\n      loose: false,\n      items: [],\n    }\n\n    bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`\n\n    if (this.options.pedantic) {\n      bull = isordered ? bull : \"[*+-]\"\n    }\n\n    // Get next list item\n    const itemRegex = new RegExp(\n      `^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`\n    )\n\n    // Check if current bullet point can start a new List Item\n    while (src) {\n      endEarly = false\n      if (!(cap = itemRegex.exec(src))) {\n        break\n      }\n\n      if (this.rules.block.hr.test(src)) {\n        // End list if bullet was actually HR (possibly move into itemRegex?)\n        break\n      }\n\n      raw = cap[0]\n      src = src.substring(raw.length)\n\n      line = cap[2].split(\"\\n\", 1)[0]\n      nextLine = src.split(\"\\n\", 1)[0]\n\n      if (this.options.pedantic) {\n        indent = 2\n        itemContents = line.trimLeft()\n      } else {\n        indent = cap[2].search(/[^ ]/) // Find first non-space char\n        indent = indent > 4 ? 1 : indent // Treat indented code blocks (> 4 spaces) as having only 1 indent\n        itemContents = line.slice(indent)\n        indent += cap[1].length\n      }\n\n      blankLine = false\n\n      if (!line && /^ *$/.test(nextLine)) {\n        // Items begin with at most one blank line\n        raw += nextLine + \"\\n\"\n        src = src.substring(nextLine.length + 1)\n        endEarly = true\n      }\n\n      if (!endEarly) {\n        const nextBulletRegex = new RegExp(\n          `^ {0,${Math.min(\n            3,\n            indent - 1\n          )}}(?:[*+-]|\\\\d{1,9}[.)])((?: [^\\\\n]*)?(?:\\\\n|$))`\n        )\n        const hrRegex = new RegExp(\n          `^ {0,${Math.min(\n            3,\n            indent - 1\n          )}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`\n        )\n\n        // Check if following lines should be included in List Item\n        while (src) {\n          rawLine = src.split(\"\\n\", 1)[0]\n          line = rawLine\n\n          // Re-align to follow commonmark nesting rules\n          if (this.options.pedantic) {\n            line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, \"  \")\n          }\n\n          // End list item if found start of new bullet\n          if (nextBulletRegex.test(line)) {\n            break\n          }\n\n          // Horizontal rule found\n          if (hrRegex.test(src)) {\n            break\n          }\n\n          if (line.search(/[^ ]/) >= indent || !line.trim()) {\n            // Dedent if possible\n            itemContents += \"\\n\" + line.slice(indent)\n          } else if (!blankLine) {\n            // Until blank line, item doesn't need indentation\n            itemContents += \"\\n\" + line\n          } else {\n            // Otherwise, improper indentation ends this item\n            break\n          }\n\n          if (!blankLine && !line.trim()) {\n            // Check if current line is blank\n            blankLine = true\n          }\n\n          raw += rawLine + \"\\n\"\n          src = src.substring(rawLine.length + 1)\n        }\n      }\n\n      if (!list.loose) {\n        // If the previous item ended with a blank line, the list is loose\n        if (endsWithBlankLine) {\n          list.loose = true\n        } else if (/\\n *\\n *$/.test(raw)) {\n          endsWithBlankLine = true\n        }\n      }\n\n      // Check for task list items\n      if (this.options.gfm) {\n        istask = /^\\[[ xX]\\] /.exec(itemContents)\n        if (istask) {\n          ischecked = istask[0] !== \"[ ] \"\n          itemContents = itemContents.replace(/^\\[[ xX]\\] +/, \"\")\n        }\n      }\n\n      list.items.push({\n        type: \"list_item\",\n        raw,\n        task: !!istask,\n        checked: ischecked,\n        loose: false,\n        text: itemContents,\n      })\n\n      list.raw += raw\n    }\n\n    // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n    list.items[list.items.length - 1].raw = raw.trimRight()\n    list.items[list.items.length - 1].text = itemContents.trimRight()\n    list.raw = list.raw.trimRight()\n\n    const l = list.items.length\n\n    // Item child tokens handled here at end because we needed to have the final item to trim it first\n    for (i = 0; i < l; i++) {\n      this.lexer.state.top = false\n      list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, [])\n      const spacers = list.items[i].tokens.filter(t => t.type === \"space\")\n      const hasMultipleLineBreaks = spacers.every(t => {\n        const chars = t.raw.split(\"\")\n        let lineBreaks = 0\n        for (const char of chars) {\n          if (char === \"\\n\") {\n            lineBreaks += 1\n          }\n          if (lineBreaks > 1) {\n            return true\n          }\n        }\n\n        return false\n      })\n\n      if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n        // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n        list.loose = true\n        list.items[i].loose = true\n      }\n    }\n\n    return list\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Node.js Environment for Budibase\nDESCRIPTION: Commands to initialize the Node.js environment for Budibase, running the setup script, installing dependencies with yarn, and building the project.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/tests/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode ./hosting/scripts/setup.js\nyarn\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Walking Markdown Tokens\nDESCRIPTION: This function recursively walks through Markdown tokens, applying a callback function to each token. It handles different token types and their nested structures.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nmarked.walkTokens = function (tokens, callback) {\n  for (const token of tokens) {\n    callback.call(marked, token)\n    switch (token.type) {\n      case \"table\": {\n        for (const cell of token.header) {\n          marked.walkTokens(cell.tokens, callback)\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            marked.walkTokens(cell.tokens, callback)\n          }\n        }\n        break\n      }\n      case \"list\": {\n        marked.walkTokens(token.items, callback)\n        break\n      }\n      default: {\n        if (\n          marked.defaults.extensions &&\n          marked.defaults.extensions.childTokens &&\n          marked.defaults.extensions.childTokens[token.type]\n        ) {\n          // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function (\n            childTokens\n          ) {\n            marked.walkTokens(token[childTokens], callback)\n          })\n        } else if (token.tokens) {\n          marked.walkTokens(token.tokens, callback)\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Core Functionality in JavaScript for Budibase Backend\nDESCRIPTION: This snippet demonstrates the recommended pattern for exporting core functionality in top-level JS files of the Budibase backend module. It allows for direct importing of specific features like permissions.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/backend-core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nrequire(\"@budibase/backend-core/permissions\")\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown Tables in JavaScript\nDESCRIPTION: A method that identifies and processes markdown table syntax. It extracts header cells, alignment indicators, and row data, recursively tokenizing cell contents. The method handles different alignment styles (left, right, center) based on the delimiter row format.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntable(src) {\n  const cap = this.rules.block.table.exec(src)\n  if (cap) {\n    const item = {\n      type: \"table\",\n      header: splitCells(cap[1]).map(c => {\n        return { text: c }\n      }),\n      align: cap[2].replace(/^ *|\\| *$/g, \"\").split(/ *\\| */),\n      rows:\n        cap[3] && cap[3].trim()\n          ? cap[3].replace(/\\n[ \\t]*$/, \"\").split(\"\\n\")\n          : [],\n    }\n\n    if (item.header.length === item.align.length) {\n      item.raw = cap[0]\n\n      let l = item.align.length\n      let i, j, k, row\n      for (i = 0; i < l; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = \"right\"\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = \"center\"\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = \"left\"\n        } else {\n          item.align[i] = null\n        }\n      }\n\n      l = item.rows.length\n      for (i = 0; i < l; i++) {\n        item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n          return { text: c }\n        })\n      }\n\n      // parse child tokens inside headers and cells\n\n      // header child tokens\n      l = item.header.length\n      for (j = 0; j < l; j++) {\n        item.header[j].tokens = []\n        this.lexer.inline(item.header[j].text, item.header[j].tokens)\n      }\n\n      // cell child tokens\n      l = item.rows.length\n      for (j = 0; j < l; j++) {\n        row = item.rows[j]\n        for (k = 0; k < row.length; k++) {\n          row[k].tokens = []\n          this.lexer.inline(row[k].text, row[k].tokens)\n        }\n      }\n\n      return item\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Budibase Dependencies with Yarn\nDESCRIPTION: Command to install all necessary dependencies for the Budibase project using Yarn package manager.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/builder/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Making POST Request with JSON Payload using cURL\nDESCRIPTION: This command sends a POST request to example.com with a JSON payload in the request body. The --data-raw flag is used to specify the raw JSON data to be sent in the request.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/controllers/query/import/sources/tests/curl/data/post.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'http://example.com' \\\n  --data-raw '{ \"key\" : \"val\" }'\n```\n\n----------------------------------------\n\nTITLE: Running Budibase in Development Mode\nDESCRIPTION: Command to start a Vite development server on port 3000 for the Budibase project.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/builder/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Slugger Class for Unique ID Generation in JavaScript\nDESCRIPTION: The Slugger class provides methods to generate unique slugs (URL-friendly identifiers) from input strings. It handles duplicate slugs by appending a numeric suffix.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Slugger {\n  constructor() {\n    this.seen = {}\n  }\n\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, \"\")\n      .replace(/\\s/g, \"-\")\n  }\n\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug\n    let occurenceAccumulator = 0\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug]\n      do {\n        occurenceAccumulator++\n        slug = originalSlug + \"-\" + occurenceAccumulator\n      } while (this.seen.hasOwnProperty(slug))\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator\n      this.seen[slug] = 0\n    }\n    return slug\n  }\n\n  slug(value, options = {}) {\n    const slug = this.serialize(value)\n    return this.getNextSafeSlug(slug, options.dryrun)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New App Migration in Budibase\nDESCRIPTION: Command to generate a new app migration file in the Budibase server project. This command creates a template file where developers can implement migration logic to handle breaking changes in apps.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add-app-migration [title]\n```\n\n----------------------------------------\n\nTITLE: Markdown Slug Generator Implementation\nDESCRIPTION: Utility class for generating unique heading IDs (slugs) from markdown headings. Includes logic for sanitizing text and handling duplicate slugs.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nclass Slugger {\n  constructor() {\n    this.seen = {}\n  }\n\n  serialize(value) {\n    return (\n      value\n        .toLowerCase()\n        .trim()\n        // remove html tags\n        .replace(/<[!\\/a-z].*?>/gi, \"\")\n        // remove unwanted chars\n        .replace(\n          /[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g,\n          \"\"\n        )\n        .replace(/\\s/g, \"-\")\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Link Relationship View in CouchDB/PouchDB for Budibase\nDESCRIPTION: This map function creates a view that indexes document links between tables, allowing bidirectional navigation between related documents. It emits key-value pairs for both sides of the relationship, ensuring proper querying of linked records.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/routes/tests/data/old-app.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (doc) {\n            // everything in this must remain constant as its going to Pouch, no external variables\n            if (doc.type === \"link\") {\n                let doc1 = doc.doc1;\n                let doc2 = doc.doc2;\n                emit([doc1.tableId, doc1.rowId], {\n                    id: doc2.rowId,\n                    thisId: doc1.rowId,\n                    fieldName: doc1.fieldName,\n                });\n                // if linking to same table can't emit twice\n                if (doc1.tableId !== doc2.tableId) {\n                    emit([doc2.tableId, doc2.rowId], {\n                        id: doc1.rowId,\n                        thisId: doc2.rowId,\n                        fieldName: doc2.fieldName,\n                    });\n                }\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Parsing Blockquotes in JavaScript Markdown Lexer\nDESCRIPTION: A method that identifies blockquote syntax in markdown text and converts it into a blockquote token with the extracted text. It removes the leading '>' characters and processes the contained text recursively.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nblockquote(src) {\n  const cap = this.rules.block.blockquote.exec(src)\n  if (cap) {\n    const text = cap[0].replace(/^ *>[ \\t]?/gm, \"\")\n\n    return {\n      type: \"blockquote\",\n      raw: cap[0],\n      tokens: this.lexer.blockTokens(text, []),\n      text,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Handlebars Template in JavaScript\nDESCRIPTION: This snippet shows a simple Handlebars template that uses the 'uppercase' helper to modify a string. It demonstrates how to use context variables and string helpers in a template.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/string-templates/README.md#2025-04-22_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\nHello I'm building a {{uppercase adjective}} string with Handlebars!\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request with cURL in Shell\nDESCRIPTION: This cURL command sends a GET request to the specified URL. It demonstrates the basic usage of cURL for making HTTP requests from the command line.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/controllers/query/import/sources/tests/curl/data/path.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'http://example.com/paths/abc'\n```\n\n----------------------------------------\n\nTITLE: Installing Global Node.js Dependencies\nDESCRIPTION: Command to install global Node.js packages required for Budibase development, including yarn for package management, jest for testing, and lerna for monorepo management.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g yarn jest lerna\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with cURL\nDESCRIPTION: This cURL command sends a POST request to example.com with an empty JSON object as the payload. The --data-raw flag is used to specify the raw data to be sent in the request body.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/controllers/query/import/sources/tests/curl/data/empty-body.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST 'http://example.com' \\\n  --data-raw '{}' \n```\n\n----------------------------------------\n\nTITLE: Installing Yarn and Lerna Dependencies for Budibase\nDESCRIPTION: Command to install global NPM packages required for building Budibase, including yarn, jest, and lerna.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/single/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g yarn jest lerna\n```\n\n----------------------------------------\n\nTITLE: Making a PATCH Request with cURL and JSON Payload\nDESCRIPTION: This command demonstrates how to send a PATCH request to a REST API endpoint using cURL with a JSON payload. The example includes the URL and a simple JSON body with a key-value pair.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/controllers/query/import/sources/tests/curl/data/patch.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH 'http://example.com/paths/abc' \\\n  --data-raw '{ \"key\" : \"val\" }' \n```\n\n----------------------------------------\n\nTITLE: Running Jest Unit Tests for Budibase\nDESCRIPTION: A command to run Jest unit tests for the Budibase project. This should be executed in the root folder of the project to run all the tests.\nSOURCE: https://github.com/budibase/budibase/blob/master/docs/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Parsing Email Message with Marked\nDESCRIPTION: This snippet demonstrates the use of the Marked library to parse the 'Message' field of an email object into Markdown.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst email = trigger.row\nreturn marked(email.Message)\n```\n\n----------------------------------------\n\nTITLE: Markdown Tokenization and Parsing Logic\nDESCRIPTION: Core tokenization logic that processes markdown text by identifying and handling various markdown elements like inline tokens, escape sequences, links, and text formatting. Includes handling of special cases and extensions.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nwhile (src) {\n  if (!keepPrevChar) {\n    prevChar = \"\"\n  }\n  keepPrevChar = false\n\n  // extensions\n  if (\n    this.options.extensions &&\n    this.options.extensions.inline &&\n    this.options.extensions.inline.some(extTokenizer => {\n      if ((token = extTokenizer.call({ lexer: this }, src, tokens))) {\n        src = src.substring(token.raw.length)\n        tokens.push(token)\n        return true\n      }\n      return false\n    })\n  ) {\n    continue\n  }\n\n  // Process various token types...\n  if (src) {\n    const errMsg = \"Infinite loop on byte: \" + src.charCodeAt(0)\n    if (this.options.silent) {\n      console.error(errMsg)\n      break\n    } else {\n      throw new Error(errMsg)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Setext Headings in Markdown\nDESCRIPTION: A method that identifies setext-style headings in markdown (headings underlined with '=' for level 1 or '-' for level 2). It extracts the heading text and processes it for inline tokens.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlheading(src) {\n  const cap = this.rules.block.lheading.exec(src)\n  if (cap) {\n    const token = {\n      type: \"heading\",\n      raw: cap[0],\n      depth: cap[2].charAt(0) === \"=\" ? 1 : 2,\n      text: cap[1],\n      tokens: [],\n    }\n    this.lexer.inline(token.text, token.tokens)\n    return token\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML in JavaScript Markdown Parser\nDESCRIPTION: A method that extracts and tokenizes HTML elements within markdown content. It has special handling for pre, script, and style tags, and includes sanitization options for security. The method can either preserve the HTML or convert it to paragraph tokens.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhtml(src) {\n  const cap = this.rules.block.html.exec(src)\n  if (cap) {\n    const token = {\n      type: \"html\",\n      raw: cap[0],\n      pre:\n        !this.options.sanitizer &&\n        (cap[1] === \"pre\" || cap[1] === \"script\" || cap[1] === \"style\"),\n      text: cap[0],\n    }\n    if (this.options.sanitize) {\n      token.type = \"paragraph\"\n      token.text = this.options.sanitizer\n        ? this.options.sanitizer(cap[0])\n        : escape(cap[0])\n      token.tokens = []\n      this.lexer.inline(token.text, token.tokens)\n    }\n    return token\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Marked Function for Markdown Parsing in JavaScript\nDESCRIPTION: The 'marked' function is the main entry point for parsing markdown text. It handles input validation, applies options, and orchestrates the lexing and parsing process.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction marked(src, opt, callback) {\n  if (typeof src === \"undefined\" || src === null) {\n    throw new Error(\"marked(): input parameter is undefined or null\")\n  }\n  if (typeof src !== \"string\") {\n    throw new Error(\n      \"marked(): input parameter is of type \" +\n        Object.prototype.toString.call(src) +\n        \", string expected\"\n    )\n  }\n\n  if (typeof opt === \"function\") {\n    callback = opt\n    opt = null\n  }\n\n  opt = merge({}, marked.defaults, opt || {})\n  checkSanitizeDeprecation(opt)\n\n  if (callback) {\n    const highlight = opt.highlight\n    let tokens\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e)\n    }\n\n    const done = function (err) {\n      let out\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens)\n          }\n          out = Parser.parse(tokens, opt)\n        } catch (e) {\n          err = e\n        }\n      }\n\n      opt.highlight = highlight\n\n      return err ? callback(err) : callback(null, out)\n    }\n\n    // ... (remaining implementation)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Text Renderer Implementation\nDESCRIPTION: Simple text renderer that extracts only the textual content from markdown tokens, stripping away formatting. Used for plain text output without HTML markup.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text\n  }\n\n  em(text) {\n    return text\n  }\n\n  codespan(text) {\n    return text\n  }\n\n  del(text) {\n    return text\n  }\n\n  html(text) {\n    return text\n  }\n\n  text(text) {\n    return text\n  }\n\n  link(href, title, text) {\n    return \"\" + text\n  }\n\n  image(href, title, text) {\n    return \"\" + text\n  }\n\n  br() {\n    return \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parser Class for Markdown Token Processing in JavaScript\nDESCRIPTION: The Parser class is responsible for parsing markdown tokens and converting them into HTML output. It handles various token types and supports renderer extensions.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults\n    this.options.renderer = this.options.renderer || new Renderer()\n    this.renderer = this.options.renderer\n    this.renderer.options = this.options\n    this.textRenderer = new TextRenderer()\n    this.slugger = new Slugger()\n  }\n\n  static parse(tokens, options) {\n    const parser = new Parser(options)\n    return parser.parse(tokens)\n  }\n\n  static parseInline(tokens, options) {\n    const parser = new Parser(options)\n    return parser.parseInline(tokens)\n  }\n\n  parse(tokens, top = true) {\n    // ... (implementation details)\n  }\n\n  parseInline(tokens, renderer) {\n    // ... (implementation details)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Definition References in Markdown\nDESCRIPTION: A method that identifies and processes reference-style link definitions in markdown. It extracts the link reference tag, URL, and optional title, creating a structured token with normalized tag formatting.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ndef(src) {\n  const cap = this.rules.block.def.exec(src)\n  if (cap) {\n    if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1)\n    const tag = cap[1].toLowerCase().replace(/\\s+/g, \" \")\n    return {\n      type: \"def\",\n      tag,\n      raw: cap[0],\n      href: cap[2],\n      title: cap[3],\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Marked Library Functionality\nDESCRIPTION: This function allows the addition of extensions to the Marked library. It handles renderer, tokenizer, and walkTokens extensions, enabling customization of Markdown processing.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nmarked.use = function (...args) {\n  const opts = merge({}, ...args)\n  const extensions = marked.defaults.extensions || {\n    renderers: {},\n    childTokens: {},\n  }\n  let hasExtensions\n\n  args.forEach(pack => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true\n      pack.extensions.forEach(ext => {\n        if (!ext.name) {\n          throw new Error(\"extension name required\")\n        }\n        if (ext.renderer) {\n          // Renderer extensions\n          const prevRenderer = extensions.renderers\n            ? extensions.renderers[ext.name]\n            : null\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function (...args) {\n              let ret = ext.renderer.apply(this, args)\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args)\n              }\n              return ret\n            }\n          } else {\n            extensions.renderers[ext.name] = ext.renderer\n          }\n        }\n        if (ext.tokenizer) {\n          // Tokenizer Extensions\n          if (!ext.level || (ext.level !== \"block\" && ext.level !== \"inline\")) {\n            throw new Error(\"extension level must be 'block' or 'inline'\")\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer)\n          } else {\n            extensions[ext.level] = [ext.tokenizer]\n          }\n          if (ext.start) {\n            // Function to check for start of token\n            if (ext.level === \"block\") {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start)\n              } else {\n                extensions.startBlock = [ext.start]\n              }\n            } else if (ext.level === \"inline\") {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start)\n              } else {\n                extensions.startInline = [ext.start]\n              }\n            }\n          }\n        }\n        if (ext.childTokens) {\n          // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens\n        }\n      })\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer()\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop]\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args)\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args)\n          }\n          return ret\n        }\n      }\n      opts.renderer = renderer\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer()\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop]\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args)\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args)\n          }\n          return ret\n        }\n      }\n      opts.tokenizer = tokenizer\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens\n      opts.walkTokens = function (token) {\n        pack.walkTokens.call(this, token)\n        if (walkTokens) {\n          walkTokens.call(this, token)\n        }\n      }\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions\n    }\n\n    marked.setOptions(opts)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Email Address Mangling Function in JavaScript\nDESCRIPTION: A function that obfuscates email addresses by converting characters to HTML entities with randomized encoding, helping to protect email addresses from scrapers.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = \"\",\n    i,\n    ch\n\n  const l = text.length\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i)\n    if (Math.random() > 0.5) {\n      ch = \"x\" + ch.toString(16)\n    }\n    out += \"&#\" + ch + \";\"\n  }\n\n  return out\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Marked Library Options\nDESCRIPTION: This section defines functions for setting and retrieving options for the Marked library. It allows customization of the library's behavior.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nmarked.options = marked.setOptions = function (opt) {\n  merge(marked.defaults, opt)\n  changeDefaults(marked.defaults)\n  return marked\n}\n\nmarked.getDefaults = getDefaults\n\nmarked.defaults = defaults\n```\n\n----------------------------------------\n\nTITLE: Creating Full-Text Search Index for Row Documents in Budibase\nDESCRIPTION: This function recursively traverses document properties to create a full-text search index. It processes all row documents (prefixed with 'ro_'), handling arrays, nested objects, and different data types while normalizing text for case-insensitive searching.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/routes/tests/data/old-app.txt#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (doc) {\n        function idx(input, prev) {\n            for (let key of Object.keys(input)) {\n                let idxKey = prev != null ? `${prev}.${key}` : key;\n                idxKey = idxKey.replace(/ /g, \"_\");\n                if (Array.isArray(input[key])) {\n                    for (let val of input[key]) {\n                        if (typeof val !== \"object\") {\n                            // eslint-disable-next-line no-undef\n                            index(idxKey, val, { store: true });\n                        }\n                    }\n                }\n                else if (key === \"_id\" || key === \"_rev\" || input[key] == null) {\n                    continue;\n                }\n                if (typeof input[key] === \"string\") {\n                    // eslint-disable-next-line no-undef\n                    index(idxKey, input[key].toLowerCase(), { store: true });\n                }\n                else if (typeof input[key] !== \"object\") {\n                    // eslint-disable-next-line no-undef\n                    index(idxKey, input[key], { store: true });\n                }\n                else {\n                    idx(input[key], idxKey);\n                }\n            }\n        }\n        if (doc._id.startsWith(\"ro_\")) {\n            // eslint-disable-next-line no-undef\n            index(\"default\", doc._id);\n            idx(doc);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL in Kubernetes Environment\nDESCRIPTION: A Helm template that generates commands for retrieving the application URL based on different service configurations. Handles Ingress, NodePort, LoadBalancer, and ClusterIP service types with appropriate kubectl commands and environment variable exports.\nSOURCE: https://github.com/budibase/budibase/blob/master/charts/budibase/templates/NOTES.txt#2025-04-22_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"budibase.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"budibase.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"budibase.fullname\" . }} --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"budibase.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Indexing Screen Routes in Budibase Application\nDESCRIPTION: This map function indexes all screen documents in the database by their ID and emits their routing information. This allows the application to quickly look up screen routes for navigation purposes.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/routes/tests/data/old-app.txt#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n      if (doc._id.startsWith(\"screen_\")) {\n        emit(doc._id, {\n          id: doc._id,\n          routing: doc.routing,\n        })\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Processing Highlighted Code Blocks in Markdown\nDESCRIPTION: This snippet handles the highlighting of code blocks within Markdown text. It uses asynchronous processing to apply syntax highlighting to code tokens.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (!highlight || highlight.length < 3) {\n  return done()\n}\n\ndelete opt.highlight\n\nif (!tokens.length) return done()\n\nlet pending = 0\nmarked.walkTokens(tokens, function (token) {\n  if (token.type === \"code\") {\n    pending++\n    setTimeout(() => {\n      highlight(token.text, token.lang, function (err, code) {\n        if (err) {\n          return done(err)\n        }\n        if (code != null && code !== token.text) {\n          token.text = code\n          token.escaped = true\n        }\n\n        pending--\n        if (pending === 0) {\n          done()\n        }\n      })\n    }, 0)\n  }\n})\n\nif (pending === 0) {\n  done()\n}\n\nreturn\n```\n\n----------------------------------------\n\nTITLE: Running Budibase in Development Mode\nDESCRIPTION: Yarn command to run the Budibase server and builder in development mode with live reloading.\nSOURCE: https://github.com/budibase/budibase/blob/master/docs/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown with Error Handling\nDESCRIPTION: This function parses Markdown text into HTML, applying lexing and parsing steps. It includes error handling and reporting for issues encountered during the process.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\ntry {\n  const tokens = Lexer.lex(src, opt)\n  if (opt.walkTokens) {\n    marked.walkTokens(tokens, opt.walkTokens)\n  }\n  return Parser.parse(tokens, opt)\n} catch (e) {\n  e.message += \"\\nPlease report this to https://github.com/markedjs/marked.\"\n  if (opt.silent) {\n    return (\n      \"<p>An error occurred:</p><pre>\" +\n      escape(e.message + \"\", true) +\n      \"</pre>\"\n    )\n  }\n  throw e\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Budibase Development Mode\nDESCRIPTION: Yarn commands to set different development modes for Budibase (Self Hosted, Cloud, Cloud & Account).\nSOURCE: https://github.com/budibase/budibase/blob/master/docs/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn mode:self\nyarn mode:cloud\nyarn mode:account\n```\n\n----------------------------------------\n\nTITLE: Parsing Inline Markdown\nDESCRIPTION: This function parses inline Markdown text, applying lexing and parsing steps. It includes input validation and error handling for the parsing process.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nmarked.parseInline = function (src, opt) {\n  // throw error in case of non string input\n  if (typeof src === \"undefined\" || src === null) {\n    throw new Error(\n      \"marked.parseInline(): input parameter is undefined or null\"\n    )\n  }\n  if (typeof src !== \"string\") {\n    throw new Error(\n      \"marked.parseInline(): input parameter is of type \" +\n        Object.prototype.toString.call(src) +\n        \", string expected\"\n    )\n  }\n\n  opt = merge({}, marked.defaults, opt || {})\n  checkSanitizeDeprecation(opt)\n\n  try {\n    const tokens = Lexer.lexInline(src, opt)\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens)\n    }\n    return Parser.parseInline(tokens, opt)\n  } catch (e) {\n    e.message += \"\\nPlease report this to https://github.com/markedjs/marked.\"\n    if (opt.silent) {\n      return (\n        \"<p>An error occurred:</p><pre>\" +\n        escape(e.message + \"\", true) +\n        \"</pre>\"\n      )\n    }\n    throw e\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Budibase Dependencies with asdf\nDESCRIPTION: A bash script to install the required dependencies (NodeJS, Python, yarn) using the asdf version manager.\nSOURCE: https://github.com/budibase/budibase/blob/master/docs/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/install-contributor-dependencies.sh\n```\n\n----------------------------------------\n\nTITLE: Exposing Marked Library Components\nDESCRIPTION: This section exposes various components and functions of the Marked library, making them available for external use and configuration.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nmarked.Parser = Parser\nmarked.parser = Parser.parse\nmarked.Renderer = Renderer\nmarked.TextRenderer = TextRenderer\nmarked.Lexer = Lexer\nmarked.lexer = Lexer.lex\nmarked.Tokenizer = Tokenizer\nmarked.Slugger = Slugger\nmarked.parse = marked\n\nconst options = marked.options\nconst setOptions = marked.setOptions\nconst use = marked.use\nconst walkTokens = marked.walkTokens\nconst parseInline = marked.parseInline\nconst parse = marked\nconst parser = Parser.parse\nconst lexer = Lexer.lex\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Budibase Development Environment\nDESCRIPTION: Yarn commands to delete all created apps and reset the development environment.\nSOURCE: https://github.com/budibase/budibase/blob/master/docs/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn nuke:docker\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Making cURL Request with Budibase Headers\nDESCRIPTION: Demonstrates how to make an HTTP GET request to a Budibase endpoint using cURL with custom x-bb headers. The request includes two Budibase-specific headers for authentication/identification purposes.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/controllers/query/import/sources/tests/curl/data/headers.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'http://example.com' \\\n  -H 'x-bb-header-1: 123' \\\n  -H 'x-bb-header-2: 456' \n```\n\n----------------------------------------\n\nTITLE: Installing Oracle Instant Client on Linux\nDESCRIPTION: Bash command to install Oracle Instant Client on Linux x86-64 systems using the provided installation script\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/scripts/integrations/oracle/oracle.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo /bin/bash -e scripts/integrations/oracle/instantclient/linux/x86-64/install.sh\n```\n\n----------------------------------------\n\nTITLE: Sending DELETE Request with cURL in Bash\nDESCRIPTION: This command uses cURL to send a DELETE HTTP request to 'http://example.com'. It demonstrates how to use the -X flag to specify the HTTP method.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/controllers/query/import/sources/tests/curl/data/delete.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE 'http://example.com'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Oracle SQL Command Line\nDESCRIPTION: Docker command to connect to Oracle database using SQLPlus with system user credentials\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/scripts/integrations/oracle/oracle.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it oracle-xe sqlplus -l system/oracle@localhost/xepdb1\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request with curl\nDESCRIPTION: This command uses curl to perform an HTTP GET request to a URL with multiple query parameters. The URL contains a base domain, a path, and two query parameters with the same name but different values.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/controllers/query/import/sources/tests/curl/data/query.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://example.com/paths/abc?q1=v1&q1=v2'\n```\n\n----------------------------------------\n\nTITLE: Setting Schema Password\nDESCRIPTION: SQL commands to set the password for an Oracle schema user\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/scripts/integrations/oracle/oracle.md#2025-04-22_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ndefine USERNAME = sales\ndefine PASSWORD = sales\n\nalter user &USERNAME identified by &PASSWORD;\n```\n\n----------------------------------------\n\nTITLE: Making PUT Request with cURL\nDESCRIPTION: Demonstrates how to make a PUT request to update data at a specific endpoint using cURL. The request includes a JSON payload in the request body.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/controllers/query/import/sources/tests/curl/data/put.txt#2025-04-22_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT 'http://example.com/paths/abc' \\\n  --data-raw '{ \"key\" : \"val\" }'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Schema via SQLPlus\nDESCRIPTION: Docker command to connect to a specific schema using SQLPlus with custom credentials\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/scripts/integrations/oracle/oracle.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it oracle-xe sqlplus -l sales/sales@localhost:1521/xepdb1\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Request with cURL to example.com\nDESCRIPTION: A basic cURL command that performs a GET request to example.com. This command fetches the content of the website without any additional parameters or options.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/controllers/query/import/sources/tests/curl/data/get.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://example.com'\n```\n\n----------------------------------------\n\nTITLE: Unlocking HR Schema\nDESCRIPTION: SQL commands to unlock the HR schema account and set its password\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/scripts/integrations/oracle/oracle.md#2025-04-22_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER USER hr ACCOUNT UNLOCK;\nALTER USER hr IDENTIFIED BY hr;\n```\n\n----------------------------------------\n\nTITLE: Developing Changes in Budibase Pro Submodule\nDESCRIPTION: A series of bash commands for navigating to the pro submodule, creating a branch, making changes, and committing them. This workflow is used for developing changes in the @budibase/pro package within the Budibase monorepo.\nSOURCE: https://github.com/budibase/budibase/blob/master/docs/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# enter the pro submodule\ncd packages/pro\n# get the base branch you are working from (same as monorepo)\ngit fetch\ngit checkout master\n# create a branch, named the same as the branch in your monorepo\ngit checkout -b <some branch>\n... make changes\n# commit the changes you've made, with a message for pro\ngit commit <something>\n# within the monorepo, add the pro reference to your branch, commit it with a message like \"Update pro ref\"\ncd ../..\ngit add packages/pro\ngit commit <add the new reference to main repo>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Node Environment for Budibase Build\nDESCRIPTION: Commands to initialize the Node.js environment, install dependencies, and build the Budibase project before Docker image creation.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/single/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode ./hosting/scripts/setup.js\nyarn\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Parsing Paragraphs in Markdown\nDESCRIPTION: A method that identifies paragraph text in markdown and processes it as a paragraph token. It handles trailing newlines and processes the text content for inline tokens.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nparagraph(src) {\n  const cap = this.rules.block.paragraph.exec(src)\n  if (cap) {\n    const token = {\n      type: \"paragraph\",\n      raw: cap[0],\n      text:\n        cap[1].charAt(cap[1].length - 1) === \"\\n\"\n          ? cap[1].slice(0, -1)\n          : cap[1],\n      tokens: [],\n    }\n    this.lexer.inline(token.text, token.tokens)\n    return token\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the Budibase Single Docker Image\nDESCRIPTION: Command to build the Docker single image for Budibase using the yarn script, which handles preparation and runs the docker build command.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/single/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:docker:single\n```\n\n----------------------------------------\n\nTITLE: Parsing Escaped Characters in Markdown\nDESCRIPTION: A method that handles escaped characters in markdown text. It identifies escaped special characters and creates an escape token with the proper unescaped representation.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nescape(src) {\n  const cap = this.rules.inline.escape.exec(src)\n  if (cap) {\n    return {\n      type: \"escape\",\n      raw: cap[0],\n      text: escape(cap[1]),\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Budibase Single Container\nDESCRIPTION: Docker command to run the built Budibase image as a detached container, exposing HTTP and HTTPS ports.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/single/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 80:80 -p 443:443 --name budibase budibase:latest\n```\n\n----------------------------------------\n\nTITLE: Parsing Plain Text in Markdown\nDESCRIPTION: A method that processes plain text content in markdown that doesn't match any specific syntax. It creates a basic text token and processes the content for any inline tokens.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntext(src) {\n  const cap = this.rules.block.text.exec(src)\n  if (cap) {\n    const token = {\n      type: \"text\",\n      raw: cap[0],\n      text: cap[0],\n      tokens: [],\n    }\n    this.lexer.inline(token.text, token.tokens)\n    return token\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Budibase Container Status\nDESCRIPTION: Command to check the running status and health of the Budibase container.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/single/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker ps\n```\n\n----------------------------------------\n\nTITLE: Smartypants Text Replacement Function in JavaScript\nDESCRIPTION: Function that implements smartypants text formatting by replacing typographic elements like dashes, quotes, and ellipses with their proper Unicode representations.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return (\n    text\n      // em-dashes\n      .replace(/---/g, \"\\u2014\")\n      // en-dashes\n      .replace(/--/g, \"\\u2013\")\n      // opening singles\n      .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\")\n      // closing singles & apostrophes\n      .replace(/'/g, \"\\u2019\")\n      // opening doubles\n      .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201c\")\n      // closing doubles\n      .replace(/\"/g, \"\\u201d\")\n      // ellipses\n      .replace(/\\.{3}/g, \"\\u2026\")\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Budibase Container Logs\nDESCRIPTION: Command to view the logs from the running Budibase container for troubleshooting.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/single/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs budibase\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Definitions for Markdown Parsing in JavaScript\nDESCRIPTION: Defines regular expressions for parsing markdown elements like deleted text and plaintext content. These patterns are used to identify specific markdown syntax during tokenization.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js 16.x on Debian-based Systems\nDESCRIPTION: Commands to install Node.js 16.x using the NodeSource repository. This ensures a more recent version of Node.js (14+) required by Budibase that isn't available in base Debian repositories.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://deb.nodesource.com/setup_16.x | sudo bash -\napt install -y nodejs\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Editing Regular Expressions for GFM Markdown in JavaScript\nDESCRIPTION: Code that modifies existing regular expressions for GitHub Flavored Markdown (GFM) by replacing certain patterns and creating new regex objects for inline parsing.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/tests/largeJSExample.txt#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ninline.gfm.url = edit(inline.gfm.url, \"i\")\n  .replace(\"email\", inline.gfm._extended_email)\n  .getRegex()\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace(\"{2,}\", \"*\").getRegex(),\n  text: edit(inline.gfm.text)\n    .replace(\"\\\\b_\", \"\\\\b_| {2,}\\\\n\")\n    .replace(/\\{2,\\}/g, \"*\")\n    .getRegex(),\n})\n```\n\n----------------------------------------\n\nTITLE: Building the Budibase Docker Image\nDESCRIPTION: Command to build the Budibase Docker image with all required dependencies. This yarn script performs preparation steps and then runs the docker build command.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/tests/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:docker:dependencies\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Debian-based Systems\nDESCRIPTION: Command to install Docker from the default Debian repositories. Docker is required to build and run the Budibase container.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt install -y docker.io\n```\n\n----------------------------------------\n\nTITLE: Building Budibase DigitalOcean Snapshot with Yarn\nDESCRIPTION: Command to build the Budibase DigitalOcean snapshot using yarn. This command executes the packer build process defined in the project configuration to create a deployable image.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/digitalocean/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:digitalocean\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Debian/Ubuntu\nDESCRIPTION: Command to install Docker from the default repositories on Debian-based systems.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/single/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt install -y docker.io\n```\n\n----------------------------------------\n\nTITLE: Starting Postgres Database with Docker Compose\nDESCRIPTION: Command to initialize the Postgres database using Docker Compose from the db/ directory.\nSOURCE: https://github.com/budibase/budibase/blob/master/examples/nextjs-api-sales/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js 16.x for Budibase in Debian/Ubuntu\nDESCRIPTION: Commands to install Node.js 16.x from NodeSource repository, which is required for Budibase as the default repositories contain older versions.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/single/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sL https://deb.nodesource.com/setup_16.x | sudo bash -\napt install -y nodejs\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers.\nSOURCE: https://github.com/budibase/budibase/blob/master/examples/nextjs-api-sales/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Cloning the Budibase Repository\nDESCRIPTION: Git command to clone the Budibase repository from GitHub.\nSOURCE: https://github.com/budibase/budibase/blob/master/docs/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Budibase/budibase.git\n```\n\n----------------------------------------\n\nTITLE: Installing Budibase with Custom Configuration\nDESCRIPTION: Command to install Budibase using a custom values.yaml file for configuration.\nSOURCE: https://github.com/budibase/budibase/blob/master/charts/budibase/README.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ helm install --create-namespace --namespace budibase budibase . -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Cloning the Budibase Repository\nDESCRIPTION: Git commands to clone the Budibase repository and change into the project directory.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/single/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Budibase/budibase.git\ncd budibase\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Helm Chart\nDESCRIPTION: Command to uninstall the Budibase Helm chart from a Kubernetes cluster. The command assumes the release was named 'budibase' and installed in the 'budibase' namespace.\nSOURCE: https://github.com/budibase/budibase/blob/master/charts/budibase/README.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ helm uninstall --namespace budibase budibase\n```\n\n----------------------------------------\n\nTITLE: Cloning the Budibase Repository\nDESCRIPTION: Commands to clone the Budibase repository from GitHub and navigate into the project directory, preparing for the build process.\nSOURCE: https://github.com/budibase/budibase/blob/master/hosting/tests/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Budibase/budibase.git\ncd budibase\n```\n\n----------------------------------------\n\nTITLE: Building Budibase for Production\nDESCRIPTION: Command to build the Budibase project for production deployment.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/builder/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Markdown Pull Request Template Structure\nDESCRIPTION: Standard sections and formatting for submitting pull requests to the Budibase repository, including placeholders for description, issue links, supporting materials, and release notes.\nSOURCE: https://github.com/budibase/budibase/blob/master/pull_request_template.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Description\n_Describe the problem or feature in addition to a link to the relevant github issues._\n\n## Addresses\n- `<Enter the Link to the issue(s) this PR addresses>`\n- ...more if required\n\n## App Export\n- If possible, attach an app export file along with your request template to make QA testing easier, with minimal setup.\n\n## Screenshots\n_If a UI facing feature, a short video of the happy path, and some screenshots of the new functionality._\n\n## Launchcontrol\n\n_Add a small description in layman's terms of what this PR achieves. This will be used in the release notes._\n```\n\n----------------------------------------\n\nTITLE: Building isolated-vm Libraries for Budibase\nDESCRIPTION: Command to build isolated-vm libraries into single-file bundles without external dependencies. This command should be run whenever the source code changes to update the pre-committed bundles.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/jsRunner/bundles/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:isolated-vm-libs\n```\n\n----------------------------------------\n\nTITLE: Interactive Program Copyright Notice Template\nDESCRIPTION: Template for displaying copyright and warranty information in interactive programs\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/cli/LICENSE.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Basic Copyright Header Template for Source Files\nDESCRIPTION: Template for the basic copyright and license notice that should be included at the start of each source file\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/cli/LICENSE.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Defining Empty JSON Object in JSON\nDESCRIPTION: A representation of an empty JSON object, which can be used as a starting template for data structures or as a placeholder in JSON-based applications.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/src/api/routes/tests/data/export.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Sample GPL Copyright Header for Source Files\nDESCRIPTION: Standard copyright and license notice template to be included at the beginning of each source file of a GPL-licensed program. This notice informs users of their rights and points to the full GPL license.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/builder/LICENSE.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Terminal Program Copyright Notice Template\nDESCRIPTION: A short GPL notice template for programs with terminal interaction. This notice should be displayed when the program starts in interactive mode, providing basic copyright information and instructions for viewing warranty and redistribution details.\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/builder/LICENSE.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Creating New Oracle Schema\nDESCRIPTION: SQL commands to create a new schema named 'sales' with necessary permissions and tablespace configuration\nSOURCE: https://github.com/budibase/budibase/blob/master/packages/server/scripts/integrations/oracle/oracle.md#2025-04-22_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\ndefine USERNAME = sales\n\ncreate user &USERNAME;\n\nalter user &USERNAME\n    default tablespace users\n    temporary tablespace temp\n    quota unlimited on users;\n\ngrant create session,\n    create view,\n    create sequence,\n    create procedure,\n    create table,\n    create trigger,\n    create type,\n    create materialized view\n    to &USERNAME;\n```"
  }
]