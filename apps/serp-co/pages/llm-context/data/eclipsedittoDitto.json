[
  {
    "owner": "eclipse-ditto",
    "repo": "ditto",
    "content": "TITLE: Defining a Thing Entity in JSON for Eclipse Ditto\nDESCRIPTION: This JSON example demonstrates the structure of a Thing entity in Eclipse Ditto. It includes a thingId, policyId, definition, attributes, and features. The features section shows how to define multiple features with properties and desired properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-thing.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"the.namespace:theName\",\n  \"policyId\": \"the.namespace:thePolicyName\",\n  \"definition\": \"org.eclipse.ditto:HeatingDevice:2.1.0\",\n  \"attributes\": {\n      \"someAttr\": 32,\n      \"manufacturer\": \"ACME corp\"\n  },\n  \"features\": {\n      \"heating-no1\": {\n          \"properties\": {\n              \"connected\": true,\n              \"complexProperty\": {\n                  \"street\": \"my street\",\n                  \"house no\": 42\n              }\n          },\n          \"desiredProperties\": {\n              \"connected\": false\n          }\n      },\n      \"switchable\": {\n          \"definition\": [ \"org.eclipse.ditto:Switcher:1.0.0\" ],\n          \"properties\": {\n              \"on\": true,\n              \"lastToggled\": \"2017-11-15T18:21Z\"\n          }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic RQL Query Example\nDESCRIPTION: Example of a simple RQL query filtering for foo=\"ditto\" and bar<10 using logical AND operator.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-rql.md#2025-04-17_snippet_0\n\nLANGUAGE: rql\nCODE:\n```\nand(eq(foo,\"ditto\"),lt(bar,10))\n```\n\n----------------------------------------\n\nTITLE: Minimal Thing Representation in JSON for Eclipse Ditto API v2\nDESCRIPTION: This snippet shows the most minimalistic representation of a Thing in Eclipse Ditto API version 2. It includes only the required fields: thingId and policyId.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-overview.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"the.namespace:the-thing-id\",\n  \"policyId\": \"the.namespace:the-policy-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Thing History with RQL Filter\nDESCRIPTION: Examples showing how to use the new feature to search a thing's history with RQL filters. The first query finds when a policy was changed, while the second streams events when a temperature threshold was exceeded.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_350.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n# find out when the policy of a thing was changed:\nGET (\"Accept\": \"text/event-stream\") \n  /api/2/things/namespace:my-thing1?from-historical-revision=1&filter=exists(policyId)\n\n# stream all events when the thing's measured temperature was above a certain threshold:\nGET (\"Accept\": \"text/event-stream\") \n  /api/2/things/namespace:my-thing1?from-historical-revision=1&filter=gt(features/temperatureSensor/properties/temp,23.42)\n```\n\n----------------------------------------\n\nTITLE: Installing Eclipse Ditto using Helm\nDESCRIPTION: Command to install the Eclipse Ditto Helm chart from Docker Hub registry with a specific version. The command creates a release named 'my-ditto' in the 'ditto' namespace and waits for the deployment to complete.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm install -n ditto my-ditto oci://registry-1.docker.io/eclipse/ditto --version <version> --wait\n```\n\n----------------------------------------\n\nTITLE: Configuring Declared Acknowledgement Labels in Ditto Connection Source\nDESCRIPTION: JSON configuration for declaring allowed acknowledgement labels for a source. This example shows how to declare a custom acknowledgement label using the connection ID placeholder.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-connections.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addresses\": [\n    \"<source>\"\n  ],\n  \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n  \"declaredAcks\": [\n    \"{{connection:id}}:my-custom-ack\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: MQTT Connection with Client Certificate Authentication\nDESCRIPTION: Example configuration for an MQTT connection using TLS with client certificate authentication. Includes certificate validation, CA certificate, client certificate and private key configuration. Connects to a secure port and includes similar source and target configurations as the basic example.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"mqtt-example-connection-124\",\n  \"connectionType\": \"mqtt\",\n  \"connectionStatus\": \"open\",\n  \"failoverEnabled\": true,\n  \"uri\": \"ssl://test.mosquitto.org:8884\",\n  \"validateCertificates\": true,\n  \"ca\": \"-----BEGIN CERTIFICATE-----\\n<test.mosquitto.org certificate>\\n-----END CERTIFICATE-----\",\n  \"credentials\": {\n    \"type\": \"client-cert\",\n    \"cert\": \"-----BEGIN CERTIFICATE-----\\n<signed client certificate>\\n-----END CERTIFICATE-----\",\n    \"key\": \"-----BEGIN PRIVATE KEY-----\\n<client private key>\\n-----END PRIVATE KEY-----\"\n  },\n  \"sources\": [\n    {\n      \"addresses\": [\n        \"eclipse-ditto-sandbox/#\"\n      ],\n      \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n      \"qos\": 0,\n      \"filters\": []\n    }\n  ],\n  \"targets\": [\n    {\n      \"address\": \"eclipse-ditto-sandbox/{{ thing:id }}\",\n      \"topics\": [\n        \"_/_/things/twin/events\"\n      ],\n      \"authorizationContext\": [\"ditto:outbound-auth-subject\"],\n      \"qos\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON from String\nDESCRIPTION: Demonstrates how to parse a JsonValue from a String using the JsonFactory.readFrom() method. This method internally uses a reading buffer and eliminates the need for wrapping the reader in a BufferedReader.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nJsonValue jsonValue = JsonFactory.readFrom(string);\n```\n\n----------------------------------------\n\nTITLE: Creating a Thing using cURL in Eclipse Ditto\nDESCRIPTION: This cURL command creates a new Thing in Eclipse Ditto using basic authentication. It sets a definition and attributes for the Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/intro-hello-world.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u ditto:ditto -X POST -H 'Content-Type: application/json' -d '{\n   \"definition\": \"https://eclipse-ditto.github.io/ditto-examples/wot/models/floor-lamp-1.0.0.tm.jsonld\",\n   \"attributes\": {\n     \"manufacturer\": \"ACME\",\n     \"VIN\": \"0815666337\"\n   }\n }' 'http://localhost:8080/api/2/things'\n```\n\n----------------------------------------\n\nTITLE: Verifying Deployment Status with kubectl get pods\nDESCRIPTION: kubectl command to check the status of all deployed pods in the Kubernetes cluster, followed by an example output showing all components running successfully.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/README.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\nNAME                             READY   STATUS    RESTARTS   AGE\nmongodb-0                        1/1     Running   0          5m\npolicies-5d6798cc6-dzklx         1/1     Running   0          3m\ngateway-d9f9cbb65-4fsbk          1/1     Running   0          3m\nthings-search-768c894bd4-v4n2z   1/1     Running   0          3m\nthings-5787ffdf7f-mn2cs          1/1     Running   0          3m\nconnectivity-54b9799b8f-496f5    1/1     Running   0          3m\nswagger-b8asd6f857-651bg         1/1     Running   0          2m\nnginx-7bdb84f965-gf2lp           1/1     Running   0          1m\n```\n\n----------------------------------------\n\nTITLE: Example Thing JSON Structure\nDESCRIPTION: JSON representation of a coffee brewer thing with attributes, features, and properties that will be used in conditional request examples.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-09-23-conditional-requests.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"org.eclipse.ditto:coffeebrewer\",\n  \"policyId\": \"org.eclipse.ditto:coffeebrewer-policy\",\n  \"definition\": \"org.eclipse.ditto:coffeebrewer:0.1.0\",\n  \"attributes\": {\n    \"manufacturer\": \"ACME demo corp.\",\n    \"location\": \"Wonderland\",\n    \"serialno\": \"42\",\n    \"model\": \"Speaking coffee machine\"\n  },\n  \"features\": {\n    \"coffee-brewer\": {\n      \"definition\": [\"org.eclipse.ditto:coffeebrewer:0.1.0\"],\n      \"properties\": {\n        \"brewed-coffees\": 0\n      }\n    },\n    \"water-tank\": {\n      \"properties\": {\n        \"configuration\": {\n          \"smartMode\": true,\n          \"brewingTemp\": 87,\n          \"tempToHold\": 44.5,\n          \"timeoutSeconds\": 6000\n        },\n        \"status\": {\n          \"waterAmount\": 731,\n          \"temperature\": 44.2,\n          \"lastModified\": \"2021-09-23T07:01:56Z\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Things with RQL in Eclipse Ditto\nDESCRIPTION: Example of an RQL query to search for things located in the 'living-room', sorted by thing ID, and limited to 5 results.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-search.md#2025-04-17_snippet_0\n\nLANGUAGE: rql\nCODE:\n```\nFilter:     eq(attributes/location,\"living-room\")\nSorting:    sort(+thingId)\nPaging:     size(5),cursor(CURSOR_ID)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Enriched Change Notifications in Ditto Java Client\nDESCRIPTION: Demonstrates how to use enrichment in change notifications by specifying extra fields to be included.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\nclient.twin().startConsumption(\n   Options.Consumption.extraFields(JsonFieldSelector.newInstance(\"attributes/location\"))\n).toCompletableFuture().get(); // this will block the thread! work asynchronously whenever possible!\nclient.twin().registerForThingChanges(\"my-enriched-changes\", change -> {\n   Optional<JsonObject> extra = change.getExtra();\n   // perform custom actions, making use of the 'extra' data ..\n});\n```\n\n----------------------------------------\n\nTITLE: Issuing Acknowledgements in Ditto Java Client\nDESCRIPTION: Demonstrates how to issue custom acknowledgements in response to Thing change notifications. Shows handling of acknowledgement requests with custom status codes and error details.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nclient.twin().registerForThingChanges(\"REG1\", change -> {\n   change.handleAcknowledgementRequest(AcknowledgementLabel.of(\"my-custom-ack\"), ackHandle ->\n      ackHandle.acknowledge(HttpStatusCode.NOT_FOUND, JsonObject.newBuilder()\n         .set(\"error-detail\", \"Could not be found\")\n         .build()\n      )\n   );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Digital Twin in Ditto\nDESCRIPTION: Command to create a digital twin (Thing) in Ditto with attributes and features for temperature and humidity values.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X PUT -i -u demo5:demo -H 'Content-Type: application/json' -d '{\n    \"attributes\": {\n        \"location\": \"Germany\"\n    },\n    \"features\": {\n        \"temperature\": {\n            \"properties\": {\n                \"value\": null\n            }\n        },\n        \"humidity\": {\n            \"properties\": {\n                \"value\": null\n            }\n        }\n    }\n}' https://ditto.eclipseprojects.io/api/2/things/org.eclipse.ditto:demo-device\n```\n\n----------------------------------------\n\nTITLE: Filtering Change Notifications in Ditto Java Client\nDESCRIPTION: Shows how to apply server-side filtering to change notifications using a custom filter expression.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nclient.twin().startConsumption(\n   Options.Consumption.filter(\"gt(features/temperature/properties/value,23.0)\")\n).toCompletableFuture().get(); // this will block the thread! work asynchronously whenever possible!\nSystem.out.println(\"Subscribed for Twin events\");\nclient.twin().registerForFeaturePropertyChanges(\"my-feature-changes\", \"temperature\", \"value\", change -> {\n   // perform custom actions ..\n});\n```\n\n----------------------------------------\n\nTITLE: Example Ditto Protocol Topics\nDESCRIPTION: Valid examples of Ditto Protocol topic paths showing different combinations of namespace, entity-name, group, channel, criterion and action.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-topic.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\norg.eclipse.ditto/fancy-car-1/things/twin/commands/create\norg.eclipse.ditto/fancy-car-23/things/twin/commands/merge\norg.eclipse.ditto/fancy-car-0815/things/live/events/modified\norg.eclipse.ditto/fancy-car-23/things/twin/search\norg.eclipse.ditto/fancy-car-42/things/live/messages/hello.world\norg.eclipse.ditto/fancy-policy-1/policies/commands/create\norg.eclipse.ditto/fancy-policy-1/policies/commands/delete\norg.eclipse.ditto/fancy-policy-1/policies/announcements/subjectDeletion\n```\n\n----------------------------------------\n\nTITLE: Modifying a Thing Command in Eclipse Ditto (JSON)\nDESCRIPTION: This snippet shows the JSON structure for a command to modify a Thing in Eclipse Ditto. It includes the topic, headers, and path for the modification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifything.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing\",\n    \"policyId\": \"org.eclipse.ditto:fancy-thing\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"properties\": {\n          \"x\": 3.141,\n          \"y\": 2.718,\n          \"z\": 1.414\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Thing Only If It Doesn't Exist in Ditto HTTP API\nDESCRIPTION: HTTP PUT request with If-None-Match header to ensure a thing is created only if it doesn't already exist. This prevents accidentally overwriting existing data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPUT .../things/{thingId}\nIf-None-Match: *\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyId\": \"{policyId}\",\n  \"attributes\": {\n    \"manufacturer\": \"ACME crop\",\n    \"otherData\": 4711\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Thing with Attributes and Features in Ditto Sandbox (JSON)\nDESCRIPTION: Example JSON body for creating a Thing in the Ditto sandbox. It includes attributes and features, demonstrating the structure for defining digital twin properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/sandbox.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"someAttr\": 32,\n    \"manufacturer\": \"ACME corp\"\n  },\n  \"features\": {\n      \"heating-no1\": {\n          \"properties\": {\n              \"connected\": true,\n              \"complexProperty\": {\n                  \"street\": \"my street\",\n                  \"house no\": 42\n              }\n          }\n      },\n      \"switchable\": {\n          \"properties\": {\n              \"on\": true,\n              \"lastToggled\": \"2017-11-15T18:21Z\"\n          }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping External Messages to Ditto Protocol Format in JavaScript\nDESCRIPTION: Implementation of the mapping function for converting incoming external messages to Ditto Protocol format. This function processes incoming messages based on their content type and transforms them into Ditto Protocol messages that can be processed by the Ditto system.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Maps the passed parameters to a Ditto Protocol message.\n * @param {Object.<string, string>} headers - The headers Object containing all received header values\n * @param {string} [textPayload] - The String to be mapped\n * @param {ArrayBuffer} [bytePayload] - The bytes to be mapped as ArrayBuffer\n * @param {string} [contentType] - The received Content-Type, e.g. \"application/json\"\n * @returns {(DittoProtocolMessage|Array<DittoProtocolMessage>)} dittoProtocolMessage(s) -\n *  the mapped Ditto Protocol message,\n *  an array of Ditto Protocol messages or\n *  <code>null</code> if the message could/should not be mapped\n */\nfunction mapToDittoProtocolMsg(\n  headers,\n  textPayload,\n  bytePayload,\n  contentType\n) {\n\n  // ### Insert/adapt your mapping logic here.\n  // Use helper function Ditto.buildDittoProtocolMsg to build Ditto protocol message\n  // based on incoming payload.\n  // See https://websites.eclipseprojects.io/ditto/connectivity-mapping.html#helper-functions for details.\n  // ### example code assuming the Ditto protocol content type for incoming messages.\n  if (contentType === 'application/vnd.eclipse.ditto+json') {\n    // Message is sent as Ditto protocol text payload and can be used directly\n    return JSON.parse(textPayload);\n  } else if (contentType === 'application/octet-stream') {\n    // Message is sent as binary payload; assume Ditto protocol message (JSON).\n    try {\n      return JSON.parse(Ditto.arrayBufferToString(bytePayload));\n    } catch (e) {\n      // parsing failed (no JSON document); return null to drop the message\n      return null;\n    }\n  } else if (contentType === 'application/json') {\n    let parsedJson = JSON.parse(textPayload);\n    // the following variables would be determined from the \"parsedJson\" and from the \"headers\":\n    let namespace = \"\";\n    let name = \"\";\n    let group = \"things\";\n    let channel = \"twin\";\n    let criterion = \"commands\";\n    let action = \"modify\";\n    let path = \"/attributes\";\n    let dittoHeaders = {};\n    let value = {\n      \"a\": 1\n    };\n    return Ditto.buildDittoProtocolMsg(\n      namespace, \n      name, \n      group, \n      channel, \n      criterion, \n      action, \n      path, \n      dittoHeaders, \n      value)\n  }\n  // no mapping logic matched; return null to drop the message\n  return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying nginx Reverse Proxy\nDESCRIPTION: kubectl command to deploy the nginx reverse proxy that provides authentication and routing for Eclipse Ditto's HTTP and WebSocket APIs.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/README.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deployment/kubernetes/deploymentFiles/nginx/nginx.yaml\n```\n\n----------------------------------------\n\nTITLE: Thing Modified Event in Eclipse Ditto (JSON)\nDESCRIPTION: This snippet shows the event structure generated when a Thing is successfully modified in Eclipse Ditto. It includes the topic, headers, and the modified Thing data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifything.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing\",\n    \"policyId\": \"org.eclipse.ditto:fancy-thing\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"properties\": {\n          \"x\": 3.141,\n          \"y\": 2.718,\n          \"z\": 1.414\n        }\n      }\n    }\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Ditto Protocol Messages to External Messages Using JavaScript\nDESCRIPTION: This JavaScript function, `mapFromDittoProtocolMsg`, maps Ditto Protocol message parameters to an external message format. It takes multiple parameters including namespace, name, group, channel, criterion, and action, among others, and returns an external message or array thereof. The function relies on the `Ditto.buildExternalMsg` helper method to format the output. It is suitable for applications interfacing with Eclipse Ditto, converting Ditto message structures into external formats.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\\n * Maps the passed parameters which originated from a Ditto Protocol message to an external message.\\n * @param {string} namespace - The namespace of the entity in java package notation, e.g.: \\\"org.eclipse.ditto\\\". Or \\\"_\\\" \\n * (underscore) for connection announcements.\\n * @param {string} name - The name of the entity, e.g.: \\\"device\\\".\\n * @param {string} group - The affected group/entity: \\\"things\\\"|\\\"policies\\\"|\\\"connections\\\".\\n * @param {string} channel - The channel for the signal: \\\"twin\\\"|\\\"live\\\"|\\\"none\\\"\\n * @param {string} criterion - The criterion to apply: \\\"commands\\\"|\\\"events\\\"|\\\"search\\\"|\\\"messages\\\"|\\\"announcements\\\"|\\n * \\\"errors\\\".\\n * @param {string} action - The action to perform: \\\"create\\\"|\\\"retrieve\\\"|\\\"modify\\\"|\\\"delete\\\". Or the announcement name: \\n * \\\"opened\\\"|\\\"closed\\\"|\\\"subjectDeletion\\\". Or the subject of the message.\\n * @param {string} path - The path which is affected by the message (e.g.: \\\"/attributes\\\"), or the destination\\n * of a message (e.g.: \\\"inbox\\\"|\\\"outbox\\\").\\n * @param {Object.<string, string>} dittoHeaders - The headers Object containing all Ditto Protocol header values.\\n * @param {*} [value] - The value to apply / which was applied (e.g. in a \\\"modify\\\" action).\\n * @param {number} [status] - The status code that indicates the result of the command. When this field is set,\\n * it indicates that the Ditto Protocol Message contains a response.\\n * @param {Object} [extra] - The enriched extra fields when selected via \\\"extraFields\\\" option.\\n * @returns {(ExternalMessage|Array<ExternalMessage>)} externalMessage - The mapped external message, an array of \\n * external messages or <code>null</code> if the message could/should not be mapped.\\n */\\nfunction mapFromDittoProtocolMsg(\\n  namespace,\\n  name,\\n  group,\\n  channel,\\n  criterion,\\n  action,\\n  path,\\n  dittoHeaders,\\n  value,\\n  status,\\n  extra\\n) {\\n\\n  // ###\\n  // Insert your mapping logic here\\n  // ### example code using the Ditto protocol content type.\\n  let headers = dittoHeaders;\\n  let textPayload = JSON.stringify(Ditto.buildDittoProtocolMsg(namespace, name, group, channel, criterion, action, \\n                                                               path, dittoHeaders, value, status, extra));\\n  let bytePayload = null;\\n  let contentType = 'application/vnd.eclipse.ditto+json';\\n  return Ditto.buildExternalMsg(\\n    headers, // The external headers Object containing header values\\n    textPayload, // The external mapped String\\n    bytePayload, // The external mapped byte[]\\n    contentType // The returned Content-Type\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Digital Twins with Ditto Java Client\nDESCRIPTION: Example of creating a new thing and updating its attributes using the Ditto Java client.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nclient.twin().create(\"org.eclipse.ditto:new-thing\").handle((createdThing, throwable) -> {\n    if (createdThing != null) {\n        System.out.println(\"Created new thing: \" + createdThing);\n    } else {\n        System.out.println(\"Thing could not be created due to: \" + throwable.getMessage());\n    }\n    return client.twin().forId(thingId).putAttribute(\"first-updated-at\", OffsetDateTime.now().toString());\n}).toCompletableFuture().get(); // this will block the thread! work asynchronously whenever possible!\n```\n\n----------------------------------------\n\nTITLE: Ditto JavaScript Helper Functions for Protocol Message Handling\nDESCRIPTION: A collection of helper functions available under the 'Ditto' namespace that assist in creating and manipulating Ditto Protocol messages. Includes functions for building protocol messages, topics, external messages, and converting between various data formats.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Builds a Ditto Protocol message from the passed parameters.\n * @param {string} namespace - The namespace of the entity in java package notation, e.g.: \"org.eclipse.ditto\". Or \"_\"\n * (underscore) for connection announcements.\n * @param {string} name - The name of the entity, e.g.: \"device\".\n * @param {string} channel - The channel for the signal: \"twin\"|\"live\"|\"none\"\n * @param {string} group - The affected group/entity: \"things\"|\"policies\"|\"connections\".\n * @param {string} criterion - The criterion to apply: \"commands\"|\"events\"|\"search\"|\"messages\"|\"announcements\"|\"errors\".\n * @param {string} action - The action to perform: \"create\"|\"retrieve\"|\"modify\"|\"delete\". Or the announcement name:\n * \"opened\"|\"closed\"|\"subjectDeletion\". Or the subject of the message.\n * @param {string} path - The path which is affected by the message (e.g.: \"/attributes\"), or the destination\n * of a message (e.g.: \"inbox\"|\"outbox\").\n * @param {Object.<string, string>} dittoHeaders - The headers Object containing all Ditto Protocol header values.\n * @param {*} [value] - The value to apply / which was applied (e.g. in a \"modify\" action).\n * @param {number} [status] - The status code that indicates the result of the command. If setting a status code,\n * the Ditto Protocol Message will be interpreted as a response (e.g. content will be ignored when using 204).\n * @param {Object} [extra] - The enriched extra fields when selected via \"extraFields\" option.\n * @returns {DittoProtocolMessage} dittoProtocolMessage(s) -\n *  The mapped Ditto Protocol message or\n *  <code>null</code> if the message could/should not be mapped\n */\nfunction buildDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value, status, extra) {\n    const topic = buildTopic(namespace, name, group, channel, criterion, action);\n\n    return {\n        topic: topic,\n        path: path,\n        headers: dittoHeaders,\n        value: value,\n        status: status,\n        extra: extra,\n    };\n}\n\n/**\n * Builds a Ditto Protocol topic from the passed parameters.\n * @param {string} namespace - The namespace of the entity in java package notation, e.g.: \"org.eclipse.ditto\". Or \"_\"\n * (underscore) for connection announcements.\n * @param {string} name - The name of the entity, e.g.: \"device\".\n * @param {string} channel - The channel for the signal: \"twin\"|\"live\"|\"none\"\n * @param {string} group - The affected group/entity: \"things\"|\"policies\"|\"connections\".\n * @param {string} criterion - The criterion to apply: \"commands\"|\"events\"|\"search\"|\"messages\"|\"announcements\"|\"errors\".\n * @param {string} action - The action to perform: \"create\"|\"retrieve\"|\"modify\"|\"delete\". Or the announcement name:\n * \"opened\"|\"closed\"|\"subjectDeletion\". Or the subject of the message.\n * @returns {string} topic - the topic.\n */\nfunction buildTopic(namespace, name, group, channel, criterion, action) {\n    const topicChannel = 'none' === channel ? '' : '/' + channel;\n\n    return namespace + \"/\" + name + \"/\" + group + topicChannel + \"/\" + criterion + \"/\" + action;\n}\n\n/**\n * Builds an external message from the passed parameters.\n * @param {Object.<string, string>} headers - The external headers Object containing header values\n * @param {string} [textPayload] - The external mapped String\n * @param {ArrayBuffer} [bytePayload] - The external mapped bytes as ArrayBuffer\n * @param {string} [contentType] - The returned Content-Type\n * @returns {ExternalMessage} externalMessage - \n *  the mapped external message\n *  or <code>null</code> if the message could/should not be mapped\n */\nfunction buildExternalMsg(headers, textPayload, bytePayload, contentType) {\n\n  return {\n    headers: headers,\n    textPayload: textPayload,\n    bytePayload: bytePayload,\n    contentType: contentType,\n  };\n}\n\n/**\n * Transforms the passed ArrayBuffer to a String interpreting the content of the passed arrayBuffer as unsigned 8\n * bit integers.\n *\n * @param {ArrayBuffer} arrayBuffer the ArrayBuffer to transform to a String\n * @returns {String} the transformed String\n */\nfunction arrayBufferToString(arrayBuffer) {\n\n  return String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n}\n\n/**\n * Transforms the passed String to an ArrayBuffer using unsigned 8 bit integers.\n *\n * @param {String} string the String to transform to an ArrayBuffer\n * @returns {ArrayBuffer} the transformed ArrayBuffer\n */\nfunction stringToArrayBuffer(string) {\n\n  let buf = new ArrayBuffer(string.length);\n  let bufView = new Uint8Array(buf);\n  for (let i=0, strLen=string.length; i<strLen; i++) {\n    bufView[i] = string.charCodeAt(i);\n  }\n  return buf;\n}\n\n/**\n * Transforms the passed ArrayBuffer to a {ByteBuffer} (from bytebuffer.js library which needs to be loaded).\n *\n * @param {ArrayBuffer} arrayBuffer the ArrayBuffer to transform\n * @returns {ByteBuffer} the transformed ByteBuffer\n */\nfunction asByteBuffer(arrayBuffer) {\n    \n  let byteBuffer = new ArrayBuffer(arrayBuffer.byteLength);\n  new Uint8Array(byteBuffer).set(new Uint8Array(arrayBuffer));\n  return dcodeIO.ByteBuffer.wrap(byteBuffer);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Policy Permissions with JSON in Eclipse Ditto\nDESCRIPTION: Example JSON payload for the new Policy decision API endpoint, demonstrating how to check multiple permissions for different resources in a single request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_370.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"my_access_control_reader\": {\n    \"resource\": \"policy:/\",\n    \"entityId\": \"org.eclipse.ditto:example-policy\",\n    \"hasPermissions\": [\"READ\"]\n  },\n  \"a_full_thing_reader\": {\n    \"resource\": \"thing:/\",\n    \"entityId\": \"org.eclipse.ditto:example-thing\",\n    \"hasPermissions\": [\"READ\"]\n  },\n  \"one_allowed_to_write_attributes\": {\n    \"resource\": \"thing:/attributes\",\n    \"entityId\": \"org.eclipse.ditto:example-thing\",\n    \"hasPermissions\": [\"WRITE\"]\n  },\n  \"firmware_reader\": {\n    \"resource\": \"thing:/features/firmware\",\n    \"entityId\": \"org.eclipse.ditto:example-thing\",\n    \"hasPermissions\": [\"READ\"]\n  },\n  \"admin_allowed_to_reboot\": {\n    \"resource\": \"message:/features/admin/inbox/messages/reboot\",\n    \"entityId\": \"org.eclipse.ditto:example-thing\",\n    \"hasPermissions\": [\"WRITE\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DocumentDB Compatibility Mode for Ditto Services\nDESCRIPTION: Environment variable configuration required for enabling DocumentDB compatibility mode across all Ditto services. This setting adjusts MongoDB behaviors for DocumentDB compatibility.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-running.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMONGO_DB_DOCUMENTDB_COMPATIBILITY_MODE=true\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 HTTP Connection in JSON\nDESCRIPTION: JSON configuration for creating an HTTP connection in Eclipse Ditto using OAuth2 client credentials flow, specifying connection details, targets, and credentials.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-11-03-oauth2.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"http_oauth2\",\n  \"name\": \"http_oauth2\",\n  \"connectionType\": \"http-push\",\n  \"connectionStatus\": \"open\",\n  \"uri\": \"https://webhook.site:443\",\n  \"targets\": [\n    {\n      \"address\": \"POST:/6148b899-736f-47e6-9382-90b1d721630e\",\n      \"topics\": [\"_/_/things/twin/events\"],\n      \"authorizationContext\": [\"integration:ditto\"]\n    }\n  ],\n  \"credentials\": {\n    \"type\": \"oauth-client-credentials\",\n    \"tokenEndpoint\": \"https://webhook.site/785e80cd-e6e6-452a-be97-a59c53edb4d9\",\n    \"clientId\": \"my-client-id\",\n    \"clientSecret\": \"my-client-secret\",\n    \"requestedScopes\": \"my-scope\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Update Example for Eclipse Ditto Thing\nDESCRIPTION: Illustrates a merge update operation on a Thing using HTTP PATCH. This example adds a new attribute, updates an existing attribute, removes an attribute, modifies feature properties, and adds a new feature. The content-type must be 'application/merge-patch+json'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"location\": null,\n    \"manufacturer\": \"Bosch\",\n    \"serialNo\": \"23091861\"\n  },\n  \"features\": {\n    \"temperature\": {\n      \"properties\": {\n        \"value\": 26.89\n      }\n    },\n    \"pressure\": {\n      \"properties\": {\n        \"unit\": null\n      }\n    },\n    \"humidity\": {\n      \"properties\": {\n        \"value\": 55,\n        \"unit\": \"%\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Digital Twin Creation\nDESCRIPTION: Command to verify that the digital twin was successfully created in Ditto by retrieving its data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -i -u demo5:demo https://ditto.eclipseprojects.io/api/2/things/org.eclipse.ditto:demo-device\n```\n\n----------------------------------------\n\nTITLE: Registering for Messages in Ditto Java Client\nDESCRIPTION: Example of registering a handler for receiving messages with a specific subject on any thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_7\n\nLANGUAGE: Java\nCODE:\n```\nclient.live().startConsumption().toCompletableFuture().get(); // this will block the thread! work asynchronously whenever possible!\nSystem.out.println(\"Subscribed for live messages/commands/events\");\nclient.live().registerForMessage(\"globalMessageHandler\", \"hello.world\", message -> {\n   System.out.println(\"Received Message with subject \" +  message.getSubject());\n   message.reply()\n      .statusCode(HttpStatusCode.IM_A_TEAPOT)\n      .payload(\"Hello, I'm just a Teapot!\")\n      .send();\n});\n```\n\n----------------------------------------\n\nTITLE: ModifyThing Command with Policy Copy by ID\nDESCRIPTION: Creates a new Thing with a Policy copied from an existing Policy ID. This command only works for new Things - the _copyPolicyFrom field is ignored for existing Things.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifythingalternatives.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"_copyPolicyFrom\": \"com:acme:the_policy_id_to_copy\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature with JSON in Eclipse Ditto\nDESCRIPTION: This JSON structure is used for sending a command to modify a feature of a digital twin in Eclipse Ditto. It includes the topic for the command, a unique correlation ID header for tracing, the path to the accelerometer feature, and both the current and desired properties including coordinates and units. There are no explicit prerequisite dependencies mentioned, and the structure must adhere to JSON formatting rules.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeature.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"value\": {\n    \"properties\": {\n      \"x\": 3.141,\n      \"y\": 2.718,\n      \"z\": 1,\n      \"unit\": \"g\"\n    },\n    \"desiredProperties\": {\n      \"x\": 4,\n      \"y\": 3,\n      \"z\": 5,\n      \"unit\": \"g\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merged Thing Event Structure\nDESCRIPTION: Event structure emitted after a Thing has been merged. It includes topic, path, and value fields, with the value containing the applied JSON merge patch.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-merge.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Field     | Value                                                                                                                |\n|-----------|----------------------------------------------------------------------------------------------------------------------|\n| **topic** | `<namespace>/<thingName>/things/<channel>/events/merged`                                                             |\n| **path**  | `/`                                                                                                                  |\n| **value** | The [JSON merge patch](https://tools.ietf.org/html/rfc7396) that was applied to the Thing referenced in the `topic`. |\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Ditto Java Client\nDESCRIPTION: Demonstrates how to send a message to a specific thing using the Ditto Java client.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_8\n\nLANGUAGE: Java\nCODE:\n```\nclient.live().forId(\"org.eclipse.ditto:new-thing\")\n   .message()\n   .from()\n   .subject(\"hello.world\")\n   .payload(\"I am a Teapot\")\n   .send(String.class, (response, throwable) ->\n      System.out.println(\"Got response: \" + response.getPayload().orElse(null))\n   );\n```\n\n----------------------------------------\n\nTITLE: Wrapper for Mapping Ditto Protocol Messages Using JavaScript\nDESCRIPTION: The `mapFromDittoProtocolMsgWrapper` function in JavaScript is utilized to map a complete Ditto Protocol message by invoking the `mapFromDittoProtocolMsg` function. It extracts relevant parts of the Ditto message, like topic, namespace, and name, to perform the mapping. This function aids in managing Ditto Protocol message structures and formats for transmission to external systems.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\n/**\\n * Maps the passed Ditto Protocol message to an external message.\\n * @param {DittoProtocolMessage} dittoProtocolMsg - The Ditto Protocol message to map\\n * @returns {(ExternalMessage|Array<ExternalMessage>)} externalMessage -\\n *  The mapped external message,\\n *  an array of external messages or\\n *  <code>null</code> if the message could/should not be mapped\\n */\\nfunction mapFromDittoProtocolMsgWrapper(dittoProtocolMsg) {\\n\\n  let topic = dittoProtocolMsg.topic;\\n  let splitTopic = topic.split(\\\"/\\\");\\n\\n  let namespace = splitTopic[0];\\n  let name = splitTopic[1];\\n  let group = splitTopic[2];\\n\\n  let channel;\\n  let criterion;\\n  let action;\\n  if (hasChannel(group)) {\\n    channel = splitTopic[3];\\n    criterion = splitTopic[4];\\n    action = splitTopic[5];\\n  } else {\\n    channel = 'none';\\n    criterion = splitTopic[3];\\n    action = splitTopic[4];\\n  }\\n\\n  let path = dittoProtocolMsg.path;\\n  let dittoHeaders = dittoProtocolMsg.headers;\\n  let value = dittoProtocolMsg.value;\\n  let status = dittoProtocolMsg.status;\\n  let extra = dittoProtocolMsg.extra;\\n\\n  return mapFromDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value, status, extra);\\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Message Based on Device Connection Status via HTTP POST\nDESCRIPTION: This HTTP POST request shows how to send a message to a device only when it's connected, using the connection status feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-11-04-live-message-conditions.md#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/2/things/org.eclipse.ditto:carbon-monoxide-alarm/inbox/messages/doSomething?condition=gt(features/ConnectionStatus/properties/status/readyUntil,time:now)\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependency for Ditto Java Client\nDESCRIPTION: Maven coordinates for adding the Ditto Java client dependency to a project.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n   <groupId>org.eclipse.ditto</groupId>\n   <artifactId>ditto-client</artifactId>\n   <version>${ditto-client.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Authentication for Ditto Gateway\nDESCRIPTION: This HOCON configuration snippet adds an OpenID Connect issuer (ORY in this case) to the Ditto gateway authentication setup.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2019-08-28-openid-connect.md#2025-04-17_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\nditto.gateway.authentication {\n    oauth {\n      openid-connect-issuers = {\n        ory = \"https://localhost:9000/\"\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for MongoDB URI\nDESCRIPTION: kubectl command to create a Kubernetes secret for storing sensitive MongoDB connection information, such as a connection URI containing username and password.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic mongodb --from-literal=mongodb-uri='<mongodb_uri>' \n```\n\n----------------------------------------\n\nTITLE: Defining Thing JSON Structure in API Version 2\nDESCRIPTION: Illustrates the JSON structure of a Thing in API version 2, including thingId, policyId, definition, attributes, and features.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"{thingId}\",\n  \"policyId\": \"{policyId}\",\n  \"definition\": \"{definition}\",\n  \"attributes\": {\n  },\n  \"features\": {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Message Structure in Ditto Protocol\nDESCRIPTION: Example of a command message that initiates an operation in Eclipse Ditto. It includes the topic identifying the thing and command type, headers with correlation ID and requested acknowledgements, and a path indicating the resource to be modified.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-examples.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"a780b7b5-fdd2-4864-91fc-80df6bb0a636\",\n    \"requested-acks\": [ \"twin-persisted\",\"custom-ack\" ]\n  },\n  \"path\": \"/\"\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Configuring Ditto Java Client\nDESCRIPTION: Example of creating and configuring a Ditto client instance with authentication, messaging, and proxy settings.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nProxyConfiguration proxyConfiguration =\n    ProxyConfiguration.newBuilder()\n        .proxyHost(\"localhost\")\n        .proxyPort(3128)\n        .build();\n\nAuthenticationProvider authenticationProvider =\n    AuthenticationProviders.clientCredentials(ClientCredentialsAuthenticationConfiguration.newBuilder()\n        .clientId(\"my-oauth-client-id\")\n        .clientSecret(\"my-oauth-client-secret\")\n        .scopes(\"offline_access email\")\n        .tokenEndpoint(\"https://my-oauth-provider/oauth/token\")\n        // optionally configure a proxy server\n        .proxyConfiguration(proxyConfiguration)\n        .build());\n\nMessagingProvider messagingProvider =\n    MessagingProviders.webSocket(WebSocketMessagingConfiguration.newBuilder()\n        .endpoint(\"wss://ditto.eclipseprojects.io\")\n        // optionally configure a proxy server or a truststore containing the trusted CAs for SSL connection establishment\n        .proxyConfiguration(proxyConfiguration)\n        .trustStoreConfiguration(TrustStoreConfiguration.newBuilder()\n            .location(TRUSTSTORE_LOCATION)\n            .password(TRUSTSTORE_PASSWORD)\n            .build())\n        .build(), authenticationProvider);\n\nDisconnectedDittoClient disconnectedDittoClient = DittoClients.newInstance(messagingProvider);\n\ndisconnectedDittoClient.connect()\n    .thenAccept(this::startUsingDittoClient)\n    .exceptionally(error -> disconnectedDittoClient.destroy());\n```\n\n----------------------------------------\n\nTITLE: Creating Policies with Ditto Java Client\nDESCRIPTION: Demonstrates how to create a new policy using the Ditto Java client, including setting subjects and permissions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_10\n\nLANGUAGE: Java\nCODE:\n```\nPolicy newPolicy = Policy.newBuilder(PolicyId.of(\"org.eclipse.ditto:new-policy\"))\n   .forLabel(\"DEFAULT\")\n   .setSubject(Subject.newInstance(SubjectIssuer.newInstance(\"nginx\"), \"ditto\"))\n   .setGrantedPermissions(PoliciesResourceType.policyResource(\"/\"), \"READ\", \"WRITE\")\n   .setGrantedPermissions(PoliciesResourceType.thingResource(\"/\"), \"READ\", \"WRITE\")\n   .build();\n\nclient.policies().create(newPolicy)\n   .toCompletableFuture().get(); // this will block the thread! work asynchronously whenever possible!\n```\n\n----------------------------------------\n\nTITLE: Event Message Structure in Ditto Protocol\nDESCRIPTION: Example of an event message triggered by a command execution in Eclipse Ditto. It includes the topic identifying the thing and event type, headers with correlation ID and requested acknowledgements, the resource path, the event payload, and a revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-examples.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/thing_name_3141/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"a780b7b5-fdd2-4864-91fc-80df6bb0a636\",\n    \"requested-acks\": [ \"custom-ack\" ]\n  },\n  \"path\": \"/\",\n  \"value\": {\n    ...\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Things using Ditto Protocol Command in JSON\nDESCRIPTION: JSON structure for a RetrieveThings command that requests multiple things by their IDs. The command specifies a twin/commands/retrieve topic and includes a list of thing IDs to be retrieved.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievethings.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"_/_/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingIds\": [\n      \"org.eclipse.ditto:fancy-thing_53\",\n      \"org.eclipse.ditto:fancy-thing_58\",\n      \"org.eclipse.ditto:fancy-thing_67\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thing Data with Field Selection in Eclipse Ditto using JSON\nDESCRIPTION: This JSON command retrieves a Thing entity from Eclipse Ditto's digital twin service. It specifies the target Thing via the topic, includes a correlation ID for tracking, and uses the fields parameter to selectively retrieve only the thingId and location attribute rather than the complete Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievething-withfieldselector.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"fields\": \"thingId,attributes(location)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Ditto Protocol Content-Type\nDESCRIPTION: Defines the IANA registered content-type identifier used to identify Ditto Protocol messages in communication.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napplication/vnd.eclipse.ditto+json\n```\n\n----------------------------------------\n\nTITLE: ModifyFeaturesResponse JSON Structure\nDESCRIPTION: Demonstrates the JSON response format when features are modified in Eclipse Ditto. The response includes the command topic, correlation ID, feature path, and the modified feature values with both actual and desired properties for an accelerometer sensor.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturesresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"accelerometer\": {\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"g\"\n      },\n      \"desiredProperties\": {\n        \"x\": 4,\n        \"y\": 3,\n        \"z\": 5,\n        \"unit\": \"g\"\n      }\n    }\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Desired Feature Properties Using Ditto Java Client\nDESCRIPTION: Example code that demonstrates how to create or modify desired properties of a feature using the Ditto Java Client. The example creates an Adaptable object with a ditto-protocol message to modify the 'on' property of a lamp feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-11-11-desired-properties.md#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal Adaptable modifyFeatureDesiredProperties =\n                Adaptable.newBuilder(TopicPath.newBuilder(ThingId.of(\"com.mycompany.fb:Car:1.0.0\"))\n                        .things()\n                        .twin()\n                        .commands()\n                        .modify()\n                        .build())\n                        .withPayload(Payload.newBuilder(\n                                JsonPointer.of(\"/features/lamp/desiredProperties\"))\n                                .withValue(JsonObject.newBuilder().set(\"on\", false).build())\n                                .build()).build();\n\n        client.sendDittoProtocol(modifyFeatureDesiredProperties).whenComplete(((adaptable, throwable) -> {\n            if (throwable != null) {\n                LOGGER.error(\"Received error while sending ModifyFeatureDesiredProperties: '{}' \",\n                        throwable.toString());\n            } else {\n                LOGGER.info(\"Received response for ModifyFeatureDesiredProperties: '{}'\", adaptable);\n            }\n        }));\n```\n\n----------------------------------------\n\nTITLE: Mapping Property Update to Submodel Element Update in JavaScript\nDESCRIPTION: This function updates or creates an AAS Submodel Element when a Property in a Thing is modified in Ditto. It extracts the Feature and Property IDs from the path, determines the data type, and generates the Submodel Element structure with the updated value.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapFromDittoProtocolMsg(\n  namespace,\n  name,\n  group,\n  channel,\n  criterion,\n  action,\n  path,\n  dittoHeaders,\n  value,\n  status,\n  extra\n) {\n  let property_id = path.split('/').slice(3).join('_');\n  let feature_id = path.split('/').slice(2,3);\n  let headers = dittoHeaders;\n  let dataType = typeof value;\n  dataType = mapDataType(dataType)\n\n  function mapDataType(dataType) {\n    switch (dataType) {\n        case 'undefined':\n        return 'Undefined';\n        case 'boolean':\n        return 'boolean';\n        case 'number':\n        return 'int';\n        case 'string':\n        return 'string';\n        case 'symbol':\n        return 'Symbol';\n        case 'bigint':\n        return 'BigInt';\n        case 'object':\n        return 'string';\n        case 'function':\n        return 'Function';\n        default:\n        return 'Unknown';\n    }\n  }\n  let textPayload = JSON.stringify(\n  {\n    parent: {\n      keys: [\n        {\n          idType: 'Custom',\n          type: 'Submodel',\n          value: name+'_'+feature_id,\n          local: true\n        }\n      ]\n    },\n    idShort: property_id,\n    kind: 'Instance',\n    valueType: dataType,\n    modelType: {\n      name: 'Property'\n    },\n    value: value\n  }\n  );\n  let bytePayload = null;\n  let contentType = 'application/json';\n  return Ditto.buildExternalMsg(\n    headers, // The external headers Object containing header values\n    textPayload, // The external mapped String\n    bytePayload, // The external mapped byte[]\n    contentType // The returned Content-Type\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP 0.9.1 Target Format\nDESCRIPTION: JSON configuration for defining AMQP 0.9.1 targets including exchange/routing configuration and topic subscriptions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-amqp091.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"<exchange_name>/<routing_key>\",\n  \"topics\": [\n    \"_/_/things/twin/events\",\n    \"_/_/things/live/messages\"\n  ],\n  \"authorizationContext\": [\"ditto:outbound-auth-subject\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Things Using Reactive Streams API\nDESCRIPTION: Demonstrates how to search for things using the reactive streams Publisher API, with integration into Pekko streams.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_12\n\nLANGUAGE: Java\nCODE:\n```\nPublisher<List<Thing>> publisher = client.twin().search()\n   .publisher(queryBuilder -> queryBuilder.namespace(\"org.eclipse.ditto\")\n      .filter(\"eq(attributes/location,'kitchen')\") // apply RQL expression here\n      .options(builder -> builder.sort(s -> s.desc(\"thingId\")).size(1))\n   );\n// integrate the publisher in the reactive streams library of your choice, e.g. Pekko streams:\norg.apache.pekko.stream.javadsl.Source<Thing, NotUsed> things = org.apache.pekko.stream.javadsl.Source.fromPublisher(publisher)\n   .flatMapConcat(Source::from);\n// .. proceed working with the Pekko Source ..\n```\n\n----------------------------------------\n\nTITLE: Create Thing Command Example\nDESCRIPTION: Protocol command structure for creating a new Thing, including topic, path and value fields. The command requires appropriate READ/WRITE permissions in the Thing's Policy.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-create-or-modify.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<thingName>/things/<channel>/commands/create\",\n  \"path\": \"/\",\n  \"value\": \"<thing-json>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMaps for nginx Configuration\nDESCRIPTION: kubectl commands to create ConfigMaps for nginx configuration including the main config, CORS settings, authentication file, index page, and Swagger UI API documentation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create configmap nginx-conf --from-file=deployment/kubernetes/deploymentFiles/nginx/nginx.conf\nkubectl create configmap nginx-cors --from-file=deployment/kubernetes/deploymentFiles/nginx/nginx-cors.conf\nkubectl create configmap nginx-htpasswd --from-file=deployment/kubernetes/deploymentFiles/nginx/nginx.htpasswd\nkubectl create configmap nginx-index --from-file=deployment/kubernetes/deploymentFiles/nginx/index.html\nkubectl create configmap swagger-ui-api --from-file=$PWD/documentation/src/main/resources/openapi\n```\n\n----------------------------------------\n\nTITLE: Reading Policies with Ditto Java Client\nDESCRIPTION: Shows how to retrieve a policy using the Ditto Java client.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_9\n\nLANGUAGE: Java\nCODE:\n```\nPolicy retrievedPolicy = client.policies().retrieve(PolicyId.of(\"org.eclipse.ditto:new-policy\"))\n   .toCompletableFuture().get(); // this will block the thread! work asynchronously whenever possible!\n```\n\n----------------------------------------\n\nTITLE: Defining Subject Pattern in Policy\nDESCRIPTION: Demonstrates the pattern format for defining subjects in a policy, consisting of a subject issuer prefix and subject identifier separated by a colon.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-policy.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<subject-issuer>:<subject>\n```\n\n----------------------------------------\n\nTITLE: Initializing HTTP API Entry Point in Eclipse Ditto\nDESCRIPTION: Defines the entry point URL for Ditto's HTTP API, specifying the API version.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/<apiVersion>\n```\n\n----------------------------------------\n\nTITLE: Sending Ditto Message in Bash\nDESCRIPTION: This snippet shows how to send a message to a device using the Ditto Messages API.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-12-05-example-command-and-control.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -X POST 'https://ditto.eclipseprojects.io/api/2/things/org.eclipse.ditto:teapot/inbox/messages/brew?timeout=60' \\\n     -u demo5:demo \\\n     -H 'x-correlation-id: command-and-control' \\\n     -d '{\"targetTemperature\":85}'\n```\n\n----------------------------------------\n\nTITLE: Updating a Thing Only If It Already Exists in Ditto HTTP API\nDESCRIPTION: HTTP PUT request with If-Match header to ensure a thing is updated only if it already exists. This prevents accidentally creating a new resource when an update was intended.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPUT .../things/{thingId}\nIf-Match: *\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"manufacturer\": \"ACME crop\",\n    \"otherData\": 4711\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Ditto with Docker Compose\nDESCRIPTION: Commands to start Eclipse Ditto using Docker Compose with pre-built images from Docker Hub. This creates a complete Ditto instance with all required microservices.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd deployment/docker/\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Querying Thing with Fields Parameter in Ditto HTTP API\nDESCRIPTION: HTTP GET request to retrieve a thing with its associated policy using the fields query parameter. This demonstrates how to selectively retrieve the policy information along with the thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nGET .../things/{thingId}?fields=_policy\n```\n\n----------------------------------------\n\nTITLE: Filtering Change Notifications by Thing ID and Feature in Eclipse Ditto\nDESCRIPTION: RQL expression to filter change notifications for Things with specific IDs and feature modifications. This example filters events for Things starting with 'myThing' when the 'lamp' feature is modified.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-changenotifications.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nfilter=and(like(thingId,\"org.eclipse.ditto:myThing*\"),exists(features/lamp))\n```\n\n----------------------------------------\n\nTITLE: Expanded Thing Representation in JSON for Eclipse Ditto API v2\nDESCRIPTION: This snippet demonstrates a more complete Thing representation in Eclipse Ditto API version 2. It includes a definition, an attribute, and a feature with a property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-overview.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"the.namespace:the-thing-id\",\n  \"policyId\": \"the.namespace:the-policy-id\",\n  \"definition\": \"digitaltwin:DigitaltwinExample:1.0.0\",\n  \"attributes\": {\n    \"location\": \"Kitchen\"\n  },\n  \"features\": {\n    \"transmission\": {\n       \"properties\": {\n         \"cur_speed\": 90\n       }\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DefinitionDeleted Event Format in Eclipse Ditto\nDESCRIPTION: JSON representation of an event triggered when a thing's definition is deleted. The event includes the topic identifying the thing, correlation headers, the path indicating that the definition was deleted, and the revision number of the operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/thingdefinitiondeleted.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/definition\",\n  \"revision\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Reading WoT Thing Model / Thing Description - Java\nDESCRIPTION: This Java snippet illustrates how to read a WoT Thing Model/Thing Description (TM/TD) from a file or an HTTP endpoint. It utilizes streams to read the JSON content, demonstrates error handling, and converts the JSON string into a `ThingDescription` object for further manipulation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/wot/model/README.md#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.Optional;\nimport java.util.stream.Stream;\n\nimport org.eclipse.ditto.json.JsonFactory;\nimport org.eclipse.ditto.wot.model.ThingDescription;\n\npublic final class Tester {\n\n    public static void main(String... args) {\n\n        URL tdUrl = Tester.class.getResource(\"some-example.td.json\");\n        StringBuilder tdBuilder = new StringBuilder();\n        try (Stream<String> stream = Files.lines(Paths.get(tdUrl.toURI()), StandardCharsets.UTF_8)) {\n            stream.forEach(line -> tdBuilder.append(line).append(\"\\n\"));\n        } catch (IOException | URISyntaxException e) {\n            throw new IllegalStateException(e);\n        }\n        String tdString = tdBuilder.toString();\n        ThingDescription thingDescription = ThingDescription.fromJson(JsonFactory.newObject(tdString));\n\n        Optional<Title> title = thingDescription.getTitle();\n        // use the object model as you like ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Change Notifications by Namespaces in Eclipse Ditto\nDESCRIPTION: Example of how to filter change notifications for specific namespaces in Eclipse Ditto. This snippet demonstrates filtering for events occurring in two specific namespaces.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-changenotifications.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnamespaces=org.eclipse.ditto.one,org.eclipse.ditto.two\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP Message Connection in Ditto\nDESCRIPTION: JSON configuration for establishing an AMQP 1.0 connection to enable live message forwarding to Azure IoT Hub and receive message feedback. Includes header mappings for message correlation and routing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-03-22-azure-iot-hub-integration.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"azure-example-connection-messages\",\n  \"connectionType\": \"amqp-10\",\n  \"connectionStatus\": \"open\",\n  \"failoverEnabled\": false,\n  \"uri\": \"amqps://{{userName}}:{{encodedSasToken}}@{{hostName}}:5671\",\n  \"target\": [\n    {\"address\": \"/messages/devicebound\",\n      \"topics\": [\n        \"_/_/things/live/messages\"\n      ],\n      \"authorizationContext\": [\"ditto\"],\n      \"headerMapping\": {\n        \"message_id\": \"{{header:correlation-id}}\",\n        \"to\": \"/devices/{{ header:ditto-message-thing-id }}/messages/deviceInbound\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Count-Based Metrics in Ditto\nDESCRIPTION: Configuration snippet for setting up operator-defined custom metrics in Ditto's search service. This example defines a metric that counts devices with production dates but no installation dates across specified namespaces.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_14\n\nLANGUAGE: hocon\nCODE:\n```\nditto {\n  search {\n    operator-metrics {\n      enabled = true\n      scrape-interval = 15m\n      custom-metrics {\n        all_produced_and_not_installed_devices {\n          scrape-interval = 5m # overwrite scrape interval, run each 5 minutes\n          namespaces = [\n            \"org.eclipse.ditto.smokedetectors\"\n            \"org.eclipse.ditto.cameras\"\n          ]\n          filter = \"and(exists(attributes/production-date),not(exists(attributes/installation-date)))\"\n          tags {\n            company = \"acme-corp\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Thing with WoT Model Reference via HTTP PUT\nDESCRIPTION: HTTP request to create a new Thing with a WoT Thing Model definition URL using Ditto's REST API.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-03-03-wot-integration.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PUT -u ditto:ditto 'https://ditto.eclipseprojects.io/api/2/things/io.eclipseprojects.ditto:floor-lamp-0815' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"definition\": \"https://eclipse-ditto.github.io/ditto-examples/wot/models/floor-lamp-1.0.0.tm.jsonld\"\n}'\n```\n\n----------------------------------------\n\nTITLE: RQL Queries for Searching Tagged Attributes\nDESCRIPTION: Various RQL query examples demonstrating how to search for different types of values within the tagged attributes of a Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-search.md#2025-04-17_snippet_2\n\nLANGUAGE: rql\nCODE:\n```\neq(attributes/tags,\"high-priority\")\n-> match:       \"high-priority\" is contained\n\nne(attributes/tags,\"high-priority\")\n-> no match:    \"high-priority\" is contained, so \"ne\" will not match\n\nin(attributes/tags,\"misc\",\"something-non-matching\")\n-> match:       \"misc\" is a match\n\nlike(attributes/tags,\"*-priority\")\n-> match:       \"high-priority\" string matches\n\nne(attributes/tags,1)\n-> match:       as 1 is not part of the tags\n\ngt(attributes/tags,6)\n-> no match:    as no number > 6 is contained\n```\n\n----------------------------------------\n\nTITLE: Performing Partial Update on Thing Property\nDESCRIPTION: Demonstrates how to perform a partial update on a specific property of a Thing, reducing payload and avoiding overwrites of unrelated data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Creating a Connection with HTTP POST in Eclipse Ditto\nDESCRIPTION: This snippet shows the JSON structure for creating a new connection using an HTTP POST request to the /api/2/connections endpoint. It includes basic connection properties such as name, type, status, URI, sources, and targets.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"name\": \"\",\n   \"connectionType\": \"\",\n   \"connectionStatus\": \"\",\n   \"uri\": \"\",\n   \"sources\": [],\n   \"targets\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional PUT Request on Thing Attribute (HTTP API)\nDESCRIPTION: Demonstrates how to make a conditional PUT request to update a thing's attribute value using the HTTP API. The condition checks if the current attribute value is not equal to 42.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-conditional-requests.md#2025-04-17_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\nPUT /api/2/things/org.eclipse.ditto:foo1/attributes/value?condition=ne(attributes/value,42)\n42\n```\n\n----------------------------------------\n\nTITLE: JSON Payload Mapping Function\nDESCRIPTION: JavaScript function to map JSON device payload to Ditto Protocol message format\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapToDittoProtocolMsg(\n    headers,\n    textPayload,\n    bytePayload,\n    contentType\n) {\n    \n    if (contentType !== 'application/json') {\n        return null; // only handle messages with content-type application/json\n    }\n    \n    let jsonData = JSON.parse(textPayload);\n    \n    let value = {\n        temperature: {\n            properties: {\n                value: jsonData.temp.split(\" \")[0] // omit the unit\n            }\n        },\n        pressure: {\n            properties: {\n                value: jsonData.pres.value\n            }\n        },\n        humidity: {\n            properties: {\n                value: jsonData.hum\n            }\n        }\n    };\n\n    return Ditto.buildDittoProtocolMsg(\n        'org.eclipse.ditto', // in this example always the same\n        headers['device_id'], // Eclipse Hono sets the authenticated device_id as AMQP 1.0 header\n        'things', // we deal with a Thing\n        'twin', // we want to update the twin\n        'commands', // we want to create a command to update a twin\n        'modify', // modify the twin\n        '/features', // modify all features at once\n        headers, // pass through the headers from AMQP 1.0\n        value\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: FeatureModified Event Structure in Eclipse Ditto\nDESCRIPTION: JSON representation of a FeatureModified event in Eclipse Ditto. This event is emitted when a feature (in this case 'accelerometer') is modified. It includes the modified feature's properties and desired properties, along with metadata such as topic, headers, path, and revision.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuremodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"value\": {\n    \"properties\": {\n      \"x\": 3.141,\n      \"y\": 2.718,\n      \"z\": 1,\n      \"unit\": \"g\"\n    },\n    \"desiredProperties\": {\n      \"x\": 4,\n      \"y\": 3,\n      \"z\": 5,\n      \"unit\": \"g\"\n    }\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Thing JSON Structure in Eclipse Ditto\nDESCRIPTION: Demonstrates the JSON structure of a Thing in Eclipse Ditto, including thingId, policyId, attributes, and features with temperature and humidity properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-enrichment.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"org.eclipse.ditto:fancy-thing\",\n  \"policyId\": \"org.eclipse.ditto:fancy-thing\",\n  \"attributes\": {\n    \"location\": \"Kitchen\"\n  },\n  \"features\": {\n    \"temperature\": {\n      \"properties\": {\n        \"value\": 23.42,\n        \"unit\": \"Celcius\"\n      }\n    },\n    \"humidity\": {\n      \"properties\": {\n        \"value\": 45,\n        \"unit\": \"%\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Policy Entry Command Structure in JSON\nDESCRIPTION: Demonstrates the JSON structure for modifying a policy entry in Eclipse Ditto. The command includes topic identification, correlation headers, and specification of subjects and resources with their respective permissions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifypolicyentry.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label\",\n  \"value\": {\n    \"subjects\": {\n      \"google:the_subjectid\": {\n        \"__schemaVersion\": 2,\n        \"type\": \"yourSubjectTypeDescription\"\n      }\n    },\n    \"resources\": {\n      \"thing:/the_resource_path\": {\n        \"__schemaVersion\": 2,\n        \"grant\": [\n          \"READ\",\n          \"WRITE\"\n        ],\n        \"revoke\": []\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structured CloudEvent Format Example for Ditto\nDESCRIPTION: Demonstrates the headers and payload format for a Structured CloudEvent for Eclipse Ditto. The content type is set to application/cloudevents+json and the CloudEvents metadata is included in the JSON payload alongside the Ditto data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nheaders:\n  content-type:application/cloudevents+json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"specversion\": \"1.0\",\n  \"id\": \"3212e\",\n  \"source\": \"http:somesite.com\",\n  \"type\": \"com.site.com\",\n  \"data\": {\n    \"topic\": \"my.sensors/sensor01/things/twin/commands/modify\",\n    \"path\": \"/\",\n    \"value\": {\n      \"thingId\": \"my.sensors:sensor01\",\n      \"policyId\": \"my.test:policy\",\n      \"attributes\": {\n        \"manufacturer\": \"Well known sensors producer\",\n        \"serial number\": \"100\",\n        \"location\": \"Ground floor\"\n      },\n      \"features\": {\n        \"measurements\": {\n          \"properties\": {\n            \"temperature\": 100,\n            \"humidity\": 0\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Device Command Response in Bash\nDESCRIPTION: This snippet demonstrates how to send a command response from the simulated device back to Ditto using the Hono HTTP Adapter.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-12-05-example-command-and-control.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -X POST -u teapot@org.eclipse.ditto:teapot \\\n     -H 'Content-Type: application/json' \\\n     -H 'hono-cmd-status: 200' \\\n     -d '{\n           \"topic\": \"org.eclipse.ditto/teapot/things/live/messages/brew\",\n           \"headers\": {\n             \"content-type\": \"application/json\",\n             \"correlation-id\": \"command-and-control\"\n           },\n           \"path\": \"/inbox/messages/brew\",\n           \"value\": { \"eta\": 56},\n           \"status\": 200\n         }' \\\n     https://hono.eclipseprojects.io:8080/control/res/013command-and-controlreplies\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deeply Nested Thing Attribute with Field Selector in Eclipse Ditto\nDESCRIPTION: Demonstrates retrieving a deeply nested attribute ('attributes/complex/serialNo') of a Thing using a field selector. The response maintains the original structure but includes only the specified field.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"complex\": {\n      \"serialNo\": 4711\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Modification Response JSON Structure\nDESCRIPTION: Example JSON response message when a Thing is modified in Eclipse Ditto. Shows the complete structure including the topic, correlation ID, Thing attributes, features, and response status. The response includes both regular and desired properties for features.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifythingresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"definition\": \"org.eclipse.ditto:SomeModel:1.0.0\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"properties\": {\n          \"x\": 3.141,\n          \"y\": 2.718,\n          \"z\": 1,\n          \"unit\": \"g\"\n        },\n        \"desiredProperties\": {\n          \"x\": 4,\n          \"y\": 3,\n          \"z\": 5,\n          \"unit\": \"g\"\n        }\n      }\n    }\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Thing Definition Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the command structure for modifying a Thing's definition in Eclipse Ditto. It includes the topic, headers, and path for the modification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createthingdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifythingdefinition.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Sending Conditional Live Message via HTTP POST\nDESCRIPTION: This snippet demonstrates how to send a conditional live message using an HTTP POST request. The condition checks if the carbon monoxide level is greater than 10 ppm before sending the alarm message.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-11-04-live-message-conditions.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/2/things/org.eclipse.ditto:coffeebrewer/inbox/mesages/co-alarm?condition=gt(features/carbon-monoxide-level/properties/ppm,10)\n\nCO Level too high! Open your windows!\n```\n\n----------------------------------------\n\nTITLE: Starting Eclipse Ditto with Docker Compose\nDESCRIPTION: Command to start the Eclipse Ditto environment in detached mode using docker-compose.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/docker/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Retrieve Thing Command and Response Structure\nDESCRIPTION: Protocol specification for retrieving a complete Thing. The command includes topic and path parameters, while the response returns the Thing as a JSON object with a status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-retrieve.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<thingName>/things/<channel>/commands/retrieve\",\n  \"path\": \"/\",\n  \"fields\": \"comma,separated,field,list\"\n}\n```\n\n----------------------------------------\n\nTITLE: WoT Thing Description Response - Smart Floor Lamp\nDESCRIPTION: Complete WoT Thing Description JSON response showing the capabilities and interaction affordances of a smart floor lamp. Includes properties, actions, security definitions, and API endpoints for various operations.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration-example.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": [\n    \"https://www.w3.org/2022/wot/td/v1.1\",\n    {\n      \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\",\n      \"time\": \"http://www.w3.org/2006/time#\"\n    }\n  ],\n  \"title\": \"Floor Lamp\",\n  \"description\": \"A smart floor lamp with 3 dimmable and color changing spots, smoke detection capability and power consumption awareness.\",\n  \"version\": {\n    \"model\": \"1.0.0\",\n    \"instance\": \"1.0.0\"\n  },\n  \"id\": \"urn:io.eclipseprojects.ditto:floor-lamp-0815\",\n  \"base\": \"https://ditto.eclipseprojects.io/api/2/things/io.eclipseprojects.ditto:floor-lamp-0815\",\n  \"links\": [\n    {\n      \"rel\": \"type\",\n      \"href\": \"https://eclipse-ditto.github.io/ditto-examples/wot/models/floor-lamp-1.0.0.tm.jsonld\",\n      \"type\": \"application/tm+json\"\n    },\n    {\n      \"rel\": \"item\",\n      \"type\": \"application/td+json\",\n      \"href\": \"/features/Spot1\"\n    },\n    {\n      \"rel\": \"item\",\n      \"type\": \"application/td+json\",\n      \"href\": \"/features/Spot2\"\n    },\n    {\n      \"rel\": \"item\",\n      \"type\": \"application/td+json\",\n      \"href\": \"/features/Spot3\"\n    },\n    {\n      \"rel\": \"item\",\n      \"type\": \"application/td+json\",\n      \"href\": \"/features/ConnectionStatus\"\n    },\n    {\n      \"rel\": \"item\",\n      \"type\": \"application/td+json\",\n      \"href\": \"/features/PowerConsumptionAwareness\"\n    },\n    {\n      \"rel\": \"item\",\n      \"type\": \"application/td+json\",\n      \"href\": \"/features/SmokeDetection\"\n    },\n    {\n      \"rel\": \"item\",\n      \"type\": \"application/td+json\",\n      \"href\": \"/features/Status-LED\"\n    }\n  ],\n  \"security\": \"basic_sc\",\n  \"securityDefinitions\": {\n    \"basic_sc\": {\n      \"in\": \"header\",\n      \"scheme\": \"basic\"\n    }\n  },\n  \"support\": \"https://www.eclipse.dev/ditto/\",\n  \"created\": \"2022-02-16T11:48:22.192286Z\",\n  \"forms\": [\n    {\n      \"op\": \"readallproperties\",\n      \"href\": \"/attributes{?channel,timeout}\",\n      \"htv:methodName\": \"GET\",\n      \"contentType\": \"application/json\",\n      \"additionalResponses\": [\n        {\n          \"success\": false,\n          \"schema\": \"dittoError\"\n        }\n      ]\n    },\n    {\n      \"op\": \"readmultipleproperties\",\n      \"href\": \"/attributes{?fields,channel,timeout}\",\n      \"htv:methodName\": \"GET\",\n      \"contentType\": \"application/json\",\n      \"additionalResponses\": [\n        {\n          \"success\": false,\n          \"schema\": \"dittoError\"\n        }\n      ]\n    },\n    {\n      \"op\": \"writeallproperties\",\n      \"href\": \"/attributes{?channel,timeout,response-required}\",\n      \"htv:methodName\": \"PUT\",\n      \"contentType\": \"application/json\",\n      \"additionalResponses\": [\n        {\n          \"success\": false,\n          \"schema\": \"dittoError\"\n        }\n      ]\n    },\n    {\n      \"op\": \"writemultipleproperties\",\n      \"href\": \"/attributes{?channel,timeout,response-required}\",\n      \"htv:methodName\": \"PATCH\",\n      \"contentType\": \"application/merge-patch+json\",\n      \"additionalResponses\": [\n        {\n          \"success\": false,\n          \"schema\": \"dittoError\"\n        }\n      ]\n    },\n    {\n      \"op\": [\n        \"observeallproperties\",\n        \"unobserveallproperties\"\n      ],\n      \"href\": \"/attributes\",\n      \"htv:methodName\": \"GET\",\n      \"subprotocol\": \"sse\",\n      \"contentType\": \"text/event-stream\",\n      \"additionalResponses\": [\n        {\n          \"success\": false,\n          \"schema\": \"dittoError\"\n        }\n      ]\n    },\n    {\n      \"op\": [\n        \"subscribeallevents\",\n        \"unsubscribeallevents\"\n      ],\n      \"href\": \"/outbox/messages\",\n      \"htv:methodName\": \"GET\",\n      \"subprotocol\": \"sse\",\n      \"contentType\": \"text/event-stream\",\n      \"additionalResponses\": [\n        {\n          \"success\": false,\n          \"schema\": \"dittoError\"\n        }\n      ]\n    }\n  ],\n  \"properties\": {\n    \"manufacturer\": {\n      \"tile\": \"Manufacturer\",\n      \"type\": \"string\",\n      \"readOnly\": true,\n      \"observable\": true,\n      \"forms\": [\n        {\n          \"op\": \"readproperty\",\n          \"href\": \"/attributes/manufacturer{?channel,timeout}\",\n          \"htv:methodName\": \"GET\",\n          \"contentType\": \"application/json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        },\n        {\n          \"op\": [\n            \"observeproperty\",\n            \"unobserveproperty\"\n          ],\n          \"href\": \"/attributes/manufacturer\",\n          \"htv:methodName\": \"GET\",\n          \"subprotocol\": \"sse\",\n          \"contentType\": \"text/event-stream\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        }\n      ]\n    },\n    \"serialNo\": {\n      \"tile\": \"Serial number\",\n      \"type\": \"string\",\n      \"readOnly\": true,\n      \"observable\": true,\n      \"forms\": [\n        {\n          \"op\": \"readproperty\",\n          \"href\": \"/attributes/serialNo{?channel,timeout}\",\n          \"htv:methodName\": \"GET\",\n          \"contentType\": \"application/json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        },\n        {\n          \"op\": [\n            \"observeproperty\",\n            \"unobserveproperty\"\n          ],\n          \"href\": \"/attributes/serialNo\",\n          \"htv:methodName\": \"GET\",\n          \"subprotocol\": \"sse\",\n          \"contentType\": \"text/event-stream\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"actions\": {\n    \"switch-all-spots\": {\n      \"title\": \"Switch all spots\",\n      \"description\": \"Switches all spots (1-3) on/off based on the passed in boolean.\",\n      \"type\": \"boolean\",\n      \"forms\": [\n        {\n          \"op\": \"invokeaction\",\n          \"href\": \"/inbox/messages/switch-all-spots{?timeout,response-required}\",\n          \"htv:methodName\": \"POST\",\n          \"contentType\": \"application/json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        }\n      ]\n    },\n    \"switch-all-spots-on-for-duration\": {\n      \"title\": \"Switch all spots on for duration\",\n      \"description\": \"Switches all spots (1-3) on for a given duration, then switches back to their previous state.\",\n      \"input\": {\n        \"@type\": \"time:Duration\",\n        \"title\": \"Duration in seconds\",\n        \"type\": \"integer\",\n        \"unit\": \"time:seconds\"\n      },\n      \"forms\": [\n        {\n          \"op\": \"invokeaction\",\n          \"href\": \"/inbox/messages/switch-all-spots-on-for-duration{?timeout,response-required}\",\n          \"htv:methodName\": \"POST\",\n          \"contentType\": \"application/json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"uriVariables\": {\n    \"channel\": {\n      \"type\": \"string\",\n      \"title\": \"The Ditto channel to interact with.\",\n      \"description\": \"Defines to which channel to route the command: 'twin' (digital twin) or 'live' (the device).\",\n      \"enum\": [\n        \"twin\",\n        \"live\"\n      ],\n      \"default\": \"twin\"\n    },\n    \"timeout\": {\n      \"type\": \"integer\",\n      \"title\": \"The timeout to apply.\",\n      \"description\": \"Defines how long the backend should wait (in seconds) for completion of the request. A value of '0' applies fire and forget semantics for the command.\",\n      \"minimum\": 0,\n      \"maximum\": 60,\n      \"default\": 60\n    },\n    \"response-required\": {\n      \"type\": \"boolean\",\n      \"title\": \"If a response is required.\",\n      \"description\": \"Defines whether a response is required to the API call or not.\",\n      \"default\": true\n    },\n    \"fields\": {\n      \"type\": \"string\",\n      \"title\": \"Fields to select.\",\n      \"description\": \"Contains a comma-separated list of fields (e.g. property names) to be included in the returned JSON.\"\n    }\n  },\n  \"schemaDefinitions\": {\n    \"dittoError\": {\n      \"type\": \"object\",\n      \"title\": \"Ditto error.\",\n      \"description\": \"Provides additional information about an occurred error and how to resolve it.\",\n      \"properties\": {\n        \"description\": {\n          \"type\": \"string\",\n          \"title\": \"Error description.\",\n          \"description\": \"Contains further information about the error e.g. a hint what caused the problem and how to solve it.\"\n        },\n        \"error\": {\n          \"type\": \"string\",\n          \"title\": \"Error code identifier.\",\n          \"description\": \"The error code or identifier that uniquely identifies the error.\"\n        },\n        \"message\": {\n          \"type\": \"string\",\n          \"title\": \"Error message.\",\n          \"description\": \"The human readable message that explains what went wrong during the execution of a command/message.\"\n        },\n        \"href\": {\n          \"type\": \"string\",\n          \"title\": \"Error link.\",\n          \"description\": \"A link to further information about the error and how to fix it.\",\n          \"format\": \"uri\"\n        },\n        \"status\": {\n          \"type\": \"integer\",\n          \"title\": \"Status code.\",\n          \"description\": \"The status code of the error with HTTP status code semantics (e.g.: 4xx for user errors, 5xx for server errors).\",\n          \"minimum\": 400,\n          \"maximum\": 599\n        }\n      },\n      \"required\": [\n        \"status\",\n        \"error\",\n        \"message\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Definition with Eclipse Ditto JSON Command\nDESCRIPTION: This JSON structure represents a command to retrieve the definition of the 'accelerometer' feature from the 'fancy-thing' thing in Eclipse Ditto. It includes the topic for twin commands, a correlation ID in the headers, and the path to the specific feature definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeaturedefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Source in Eclipse Ditto\nDESCRIPTION: JSON configuration for setting up an MQTT source in Eclipse Ditto. Specifies topics to subscribe to, authorization context, and Quality of Service (QoS) level.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addresses\": [\n    \"<mqtt_topic>\",\n    \"...\"\n  ],\n  \"authorizationContext\": [\"ditto:inbound-auth-subject\", \"...\"],\n  \"qos\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Enforcement in Ditto Connection\nDESCRIPTION: JSON configuration for enforcing that a device can only send data to its associated digital twin. This example sets up enforcement based on a device_id header matching the thing ID.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-connections.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addresses\": [ \"telemetry/hono_tenant\" ],\n  \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n  \"enforcement\": {\n    \"input\": \"{{ header:device_id }}\",\n    \"filters\": [ \"{{ thing:id }}\" ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Source with Acknowledgement Processing in Eclipse Ditto\nDESCRIPTION: JSON configuration for setting up an MQTT source with acknowledgement processing, specifically for messages with QoS 1 or 2.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addresses\": [\n    \"<mqtt_topic>\",\n    \"...\"\n  ],\n  \"authorizationContext\": [\n    \"ditto:inbound-auth-subject\",\n    \"...\"\n  ],\n  \"qos\": 1,\n  \"acknowledgementRequests\": {\n    \"includes\": [],\n    \"filter\": \"fn:filter(header:mqtt.qos,'ne','0')\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Connection with Client Certificate Authentication\nDESCRIPTION: Configuration example for an HTTP connection using TLS client certificate authentication with certificate validation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-http.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection\": {\n    \"id\": \"http-example-connection-123\",\n    \"connectionType\": \"http-push\",\n    \"connectionStatus\": \"open\",\n    \"failoverEnabled\": true,\n    \"uri\": \"https://localhost:443\",\n    \"validateCertificates\": true,\n    \"ca\": \"-----BEGIN CERTIFICATE-----\\n<localhost certificate>\\n-----END CERTIFICATE-----\",\n    \"credentials\": {\n      \"type\": \"client-cert\",\n      \"cert\": \"-----BEGIN CERTIFICATE-----\\n<signed client certificate>\\n-----END CERTIFICATE-----\",\n      \"key\": \"-----BEGIN PRIVATE KEY-----\\n<client private key>\\n-----END PRIVATE KEY-----\"\n    },\n    \"specificConfig\": {\n      \"parallelism\": \"2\"\n    },\n    \"sources\": [],\n    \"targets\": [\n      {\n        \"address\": \"PUT:/api/2/some-entity/{{ thing:id }}\",\n        \"topics\": [\n          \"_/_/things/twin/events\"\n        ],\n        \"authorizationContext\": [\"ditto:outbound-auth-subject\", \"...\"],\n        \"headerMapping\": {\n          \"content-type\": \"{{ header:content-type }}\",\n          \"api-key\": \"this-is-a-secret-api-key-to-send-along\"\n         }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ModifyThing Command JSON Structure\nDESCRIPTION: Shows the complete JSON structure for a ModifyThing command in Eclipse Ditto. The command includes thing identification, policy configuration, attribute definitions, and feature specifications with both actual and desired properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifything.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"definition\": \"org.eclipse.ditto:SomeModel:1.0.0\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"properties\": {\n          \"x\": 3.141,\n          \"y\": 2.718,\n          \"z\": 1,\n          \"unit\": \"g\"\n        },\n        \"desiredProperties\": {\n          \"x\": 4,\n          \"y\": 3,\n          \"z\": 5,\n          \"unit\": \"g\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Authentication in Ditto Gateway\nDESCRIPTION: Configuration for setting up an OpenID Connect authentication provider in the Ditto gateway, including issuer and auth-subjects configuration.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_2\n\nLANGUAGE: hocon\nCODE:\n```\nditto.gateway.authentication {\n    oauth {\n      openid-connect-issuers = {\n        myprovider = {\n          issuer = \"localhost:9000\"\n          #issuers = [\n          #  \"localhost:9000/one\"\n          #  \"localhost:9000/two\"\n          #]\n          auth-subjects = [\n            \"{{ jwt:sub }}\",\n            \"{{ jwt:sub }}/{{ jwt:scp }}\",\n            \"{{ jwt:sub }}/{{ jwt:scp }}@{{ jwt:client_id }}\",\n            \"{{ jwt:sub }}/{{ jwt:scp }}@{{ jwt:non_existing }}\",\n            \"{{ jwt:roles/support }}\"\n          ]\n        }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Ditto Protocol to BaSyx AAS Registry Entry in JavaScript\nDESCRIPTION: JavaScript function that maps Eclipse Ditto protocol messages to BaSyx AAS Registry entries. This function creates a properly formatted Asset Administration Shell descriptor with endpoints, identification, and asset information based on the Ditto Thing namespace.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapFromDittoProtocolMsg(\n  namespace,\n  name,\n  group,\n  channel,\n  criterion,\n  action,\n  path,\n  dittoHeaders,\n  value,\n  status,\n  extra\n) {\n  let headers = dittoHeaders;\n  let textPayload = JSON.stringify({\n    endpoints: [\n        {\n            address: '<basyx-server-instance-url>:4001/aasServer/shells/' + namespace + '/aas',\n            type: 'http'\n        }\n    ],\n    modelType: {\n        name: 'AssetAdministrationShellDescriptor'\n    },\n    identification: {\n        idType: 'Custom',\n        id: namespace\n},\n    idShort: namespace,\n      asset: {\n          identification: {\n              idType: 'Custom',\n              id: namespace + '-asset'\n          },\n          idShort: namespace + '-asset',\n          kind: 'Instance',\n          dataSpecification: [],\n          modelType: {\n              name: 'Asset'\n          },\n          embeddedDataSpecifications: []\n      },\n      submodels: []\n  });\n  let bytePayload = null;\n  let contentType = 'application/json';\n  return Ditto.buildExternalMsg(\n    headers, // The external headers Object containing header values\n   textPayload, // The external mapped String\n   bytePayload, // The external mapped byte[]\n    contentType // The returned Content-Type\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Ditto DevOps Endpoint (Standard Kubernetes)\nDESCRIPTION: Commands to access Ditto's DevOps endpoint by extracting the devops password from Kubernetes secrets and using curl to make the request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/ditto/templates/NOTES.txt#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DEVOPS_PWD=$(kubectl --namespace {{ .Release.Namespace }} get secret {{ include \"ditto.fullname\" . }}-gateway-secret -o jsonpath=\"{.data.devops-password}\" | base64 --decode)\ncurl -i -X GET \"http://devops:${DEVOPS_PWD}@localhost:8080/devops\"\n```\n\n----------------------------------------\n\nTITLE: Optimistic Locking with If-Match in Ditto HTTP API\nDESCRIPTION: HTTP PUT request with If-Match header containing a specific revision to implement optimistic locking. This ensures the update only succeeds if no one else has modified the resource since it was last retrieved.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPUT .../things/{thingId}\nIf-Match: \"rev:2\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"manufacturer\": \"ACME corp\",\n    \"otherData\": 4711\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ditto Using Helm\nDESCRIPTION: Installs Eclipse Ditto from OCI registry with specified version and waiting for completion\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/ditto/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --dependency-update -n ditto my-ditto oci://registry-1.docker.io/eclipse/ditto --version <version> --wait\n```\n\n----------------------------------------\n\nTITLE: Modifying a Connection with HTTP PUT in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the JSON structure for modifying an existing connection using an HTTP PUT request to the /api/2/connections/{connectionId} endpoint. It shows how to update connection properties like status.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"connectionStatus\": \"\",\n   \"...\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Retrieval Response in Eclipse Ditto Protocol\nDESCRIPTION: The response format when retrieving a policy from Eclipse Ditto. The response includes the policy's entries with labels, subjects, and resources along with their permissions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrievepolicy.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"entries\": {\n      \"the_label\": {\n        \"subjects\": {\n          \"google:the_subjectid\": {\n            \"type\": \"yourSubjectTypeDescription\"\n          }\n        },\n        \"resources\": {\n          \"thing:/the_resource_path\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": [\n              \"READ\"\n            ]\n          }\n        }\n      }\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection with Multiple Mappers in Ditto\nDESCRIPTION: Example of configuring a connection with multiple payload mappers. This configuration defines a connection named 'exampleConnection' with a source that uses both the built-in 'Ditto' mapper and a custom 'ConnectionStatus' mapper.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{ \n  \"name\": \"exampleConnection\",\n  \"sources\": [{\n      \"addresses\": [\"<source>\"],\n      \"authorizationContext\": [\"ditto:inbound\"],\n      \"payloadMapping\": [\"Ditto\", \"status\"]\n    }\n  ],\n  \"mappingDefinitions\": {\n    \"status\": {\n      \"mappingEngine\": \"ConnectionStatus\",\n      \"options\": {\n        \"thingId\": \"{%raw%}{{ header:device_id }}{%endraw%}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional PUT Request on Thing Feature (HTTP API)\nDESCRIPTION: Shows how to perform a conditional PUT request to update a thing's feature property using the HTTP API. The condition checks if the lastModified timestamp is greater than a specified date.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-conditional-requests.md#2025-04-17_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT -H 'Content-Type: application/json' /api/2/things/org.eclipse.ditto:fancy-thing/features/temperature/properties/value?condition=gt(features/temperature/properties/lastModified,'2021-08-10T15:10:02.592Z') -d 19.26\n```\n\n----------------------------------------\n\nTITLE: Live Channel Condition GET Request with Timestamp (HTTP API)\nDESCRIPTION: Demonstrates a live channel condition in a GET request using a timestamp comparison. The condition checks if the last modification is before a specified date.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-conditional-requests.md#2025-04-17_snippet_6\n\nLANGUAGE: curl\nCODE:\n```\nGET .../things/{thingId}?live-channel-condition=lt(_modified,\"2021-12-24T12:23:42Z\")\n```\n\n----------------------------------------\n\nTITLE: Pipeline Manipulation Functions\nDESCRIPTION: Functions for manipulating pipeline results including deletion, replacement, splitting and joining.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-placeholders.md#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nfn:delete()\nfn:replace('foo', 'bar')\nfn:split(' ')\nfn:split(',')\nfn:join(':')\nfn:join(',')\n```\n\n----------------------------------------\n\nTITLE: Feature Properties Modify Command\nDESCRIPTION: JSON command format for modifying all Properties of a Feature. Contains topic, path and value fields with the new properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-create-or-modify.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<thingName>/things/<channel>/commands/modify\",\n  \"path\": \"/features/<featureId>/properties\",\n  \"value\": \"<properties-json>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP Telemetry Connection in Ditto\nDESCRIPTION: JSON configuration for setting up an AMQP 1.0 connection to receive telemetry data from Azure IoT Hub's built-in Event Hub endpoint. Includes enforcement to prevent device spoofing and requires specific Azure credentials.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-03-22-azure-iot-hub-integration.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"azure-example-connection-telemetry\",\n  \"connectionType\": \"amqp-10\",\n  \"connectionStatus\": \"open\",\n  \"failoverEnabled\": false,\n  \"uri\": \"amqps://{{userName}}:{{password}}@{{endpoint}}:5671\",\n  \"source\": [\n    {\n      \"addresses\": [\n        \"{{entityPath}}/ConsumerGroups/$Default/Partitions/0\",\n        \"{{entityPath}}/ConsumerGroups/$Default/Partitions/1\"\n      ],\n      \"authorizationContext\": [\"ditto\"],\n      \"enforcement\": {\n        \"input\": \"{{ header:iothub-connection-device-id }}\",\n        \"filters\": [\n          \"{{ thing:id }}\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Topics with Filtering\nDESCRIPTION: Sets up target topics with namespace and RQL filtering for events and messages.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-connections.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"<target-address>\",\n  \"topics\": [\n    \"_/_/things/twin/events?namespaces=org.eclipse.ditto&filter=gt(attributes/counter,42)\",\n    \"_/_/things/twin/events?extraFields=attributes/placement&filter=gt(attributes/placement,'Kitchen')\",\n    \"_/_/things/live/messages?namespaces=org.eclipse.ditto\"\n  ],\n  \"authorizationContext\": [\"ditto:outbound-auth-subject\", \"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Target with Acknowledgement Label\nDESCRIPTION: Sets up a target with an issued acknowledgement label for confirming successful message delivery.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-connections.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"<target>\",\n  \"topics\": [\n    \"_/_/things/twin/events\"\n  ],\n  \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n  \"issuedAcknowledgementLabel\": \"{{connection:id}}:my-custom-ack\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Index Update Throttling in Eclipse Ditto Helm Chart\nDESCRIPTION: YAML configuration for the Helm chart to enable and configure throttling of search index updates caused by policy modifications, including interval and limit settings.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_370.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# PolicyModificationCausedSearchIndexUpdateThrottling contains throttling configuration for the search Index update after a policy update\npolicyModificationCausedSearchIndexUpdateThrottling:\n  # enabled defines whether throttling should be applied for search Index update after a policy update.\n  enabled: false\n  # The time window within which the throttling limit applies.\n  interval: 1s\n  # The maximum number of updates allowed within each throttling interval.\n  limit: 100\n```\n\n----------------------------------------\n\nTITLE: Creating a Thing based on a Thing Model using Ditto HTTP API\nDESCRIPTION: This cURL command creates a new Thing instance in Eclipse Ditto based on a specified WoT Thing Model. It uses the PUT method to create a Thing with a given ID and sets its definition to the URL of the Thing Model.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration-example.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request PUT -u ditto:ditto 'https://ditto.eclipseprojects.io/api/2/things/io.eclipseprojects.ditto:floor-lamp-0815' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"definition\": \"https://eclipse-ditto.github.io/ditto-examples/wot/models/floor-lamp-1.0.0.tm.jsonld\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Generating Nginx Authentication Passwords with OpenSSL\nDESCRIPTION: Command for creating a hashed password using OpenSSL to be used in Nginx basic authentication configuration. The generated hash should be added to the nginx.htpasswd file with a username.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/docker/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl passwd -quiet\n Password: <enter password>\n Verifying - Password: <enter password>\n```\n\n----------------------------------------\n\nTITLE: Checking JSON Value Type\nDESCRIPTION: Illustrates how to check the type of a JsonValue and convert it to a Java type using methods like isString(), asString(), isArray(), and asArray(). The example demonstrates the usage of conditional statements to handle different JSON value types.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nJsonValue jsonValue = JsonFactory.newValue(\"Foo\"); \nif (jsonValue.isString()) { // yields true in this case\n    String string = jsonValue.asString();\n} else if (jsonValue.isArray())) {\n    JsonArray jsonArray = jsonValue.asArray();\n} // ...\n```\n\n----------------------------------------\n\nTITLE: Getting Value from JsonObject\nDESCRIPTION: Illustrates how to retrieve a value from a JsonObject using the getValue() method and handling the case where the key or pointer is not found. It uses filter and map operations to ensure type safety and provides a default value or throws an exception if the value is missing or not of the expected type.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nString thingId = thingJsonObject.getValue(\"thingId\")\n    .filter(JsonValue::isString)  // avoids an UnsupportedOperationException if the value of \"thingId\" is not a string\n    .map(JsonValue::asString)\n    .orElse(null);                // or another default value or throw an exception. Its up to you what to do if\n                                  // the JSON object does either not contain \"thingId\" or the value for \n                                  // \"thingId\" is not a string.\n```\n\n----------------------------------------\n\nTITLE: Delete Feature Command\nDESCRIPTION: This JSON payload represents a command to delete a feature from a thing's twin in Eclipse Ditto.  It specifies the topic, headers including a correlation ID, and the path to the feature to be deleted (e.g., \"/features/accelerometer\").  The expected outcome is the removal of the specified feature from the digital twin.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeature.md#2025-04-17_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Additional Merge Operations via Ditto Java Client\nDESCRIPTION: Java code examples showing various merge operations using the Ditto Java Client, including merging a single attribute, merging multiple attributes, and merging a feature property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-02-04-merge-feature.md#2025-04-17_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// initialize the ditto-client\nfinal DittoClient dittoClient = ... ;\n\n    // merge attribute\n    dittoClient.twin()\n        .forId(\"com.acme:coffeebrewer\")\n        .mergeAttribute(\"manufacturingYear\", \"2021\")\n        .whenComplete(...);\n        \n    // merge attributes\n    dittoClient.twin()\n        .forId(\"com.acme:coffeebrewer\")\n        .mergeAttributes(JsonObject.newBuilder().set(\"manufacturingYear\", \"2021\").build())\n        .whenComplete(...);\n    \n    // merge feature property\n    dittoClient.twin()\n        .forFeature(\"com.acme:coffeebrewer\", \"water-tank\")\n        .mergeProperty(\"configuration/smartMode\", false)\n        .whenComplete(...);\n```\n\n----------------------------------------\n\nTITLE: Extended Mapping Wrapper for Ditto Protocol Messages in JavaScript\nDESCRIPTION: A wrapper function that provides access to the complete external message during the mapping process. This function delegates to the standard mapping function but allows for more complex transformations when the original message context is needed.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Maps the passed external message to a Ditto Protocol message.\n * @param {ExternalMessage} externalMsg - The external message to map to a Ditto Protocol message\n * @returns {(DittoProtocolMessage|Array<DittoProtocolMessage>)} dittoProtocolMessage(s) -\n *  The mapped Ditto Protocol message,\n *  an array of Ditto Protocol messages or\n *  <code>null</code> if the message could/should not be mapped\n */\nfunction mapToDittoProtocolMsgWrapper(externalMsg) {\n\n  let headers = externalMsg.headers;\n  let textPayload = externalMsg.textPayload;\n  let bytePayload = externalMsg.bytePayload;\n  let contentType = externalMsg.contentType;\n\n  return mapToDittoProtocolMsg(headers, textPayload, bytePayload, contentType);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Building the Eclipse Ditto JavaScript Client SDK\nDESCRIPTION: This snippet shows the commands for installing dependencies, building the project, running linting, and executing tests for the Eclipse Ditto JavaScript client SDK.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-javascript.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpm run build\nnpm run lint\nnpm test\n# or npm run test:watch\n```\n\n----------------------------------------\n\nTITLE: Installing Ditto with Custom Configuration\nDESCRIPTION: Demonstrates how to install Ditto with custom parameters using helm command\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/ditto/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install -n ditto my-ditto oci://registry-1.docker.io/eclipse/ditto --version <version> --set swaggerui.enabled=false\n```\n\n----------------------------------------\n\nTITLE: RQL Location Filter Example\nDESCRIPTION: Example showing how to filter by a nested property 'location' under 'attributes'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-rql.md#2025-04-17_snippet_3\n\nLANGUAGE: rql\nCODE:\n```\neq(attributes/location,\"kitchen\")\n```\n\n----------------------------------------\n\nTITLE: Retrieve Thing Features Command Structure\nDESCRIPTION: Protocol specification for retrieving all features or a specific feature of a Thing. Supports retrieving feature definitions and properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-retrieve.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<thingName>/things/<channel>/commands/retrieve\",\n  \"path\": \"/features\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Desired Property JSON Response\nDESCRIPTION: Provides the response payload for a successful deletion of a feature's desired property. The response includes a topic, headers with correlation ID, specific path of the deleted property, and a 204 No Content status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeaturedesiredpropertyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Connection via Piggyback Command\nDESCRIPTION: DevOps command for testing a connection configuration without persisting it. Validates the configuration and attempts to establish a temporary connection.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:testConnection\",\n    \"connection\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Persistence in Ditto with Twin-Persisted Acknowledgment\nDESCRIPTION: Example of a Ditto Protocol message that requests confirmation of persistence in Ditto. Uses the twin-persisted acknowledgment label to ensure the change is successfully stored before acknowledging the message.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-10-23-end-2-end-acknowledgement.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/my-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"response-required\": false,\n    \"requested-acks\": [\"twin-persisted\"]\n  },\n  \"path\": \"/features/lightSwitch/properties/status\",\n  \"value\": \"on\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka 2.x Connection Configuration in JSON for Eclipse Ditto\nDESCRIPTION: This JSON configuration example demonstrates how to create a new Kafka 2.x connection in Eclipse Ditto's Connectivity service. It includes settings for connection details, authentication, topics, and message handling.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-kafka2.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection\": {\n    \"id\": \"kafka-example-connection-123\",\n    \"connectionType\": \"kafka\",\n    \"connectionStatus\": \"open\",\n    \"failoverEnabled\": true,\n    \"uri\": \"tcp://user:password@localhost:9092\",\n    \"specificConfig\": {\n      \"bootstrapServers\": \"localhost:9092,other.host:9092\",\n      \"saslMechanism\": \"plain\"\n    },\n    \"sources\": [\n      {\n        \"addresses\": [\"theTopic\"],\n        \"consumerCount\": 1,\n        \"qos\": 1,\n        \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n        \"enforcement\": {\n          \"input\": \"{%raw%}{{ header:device_id }}{%endraw%}\",\n          \"filters\": [\"{%raw%}{{ entity:id }}{%endraw%}\"]\n        },\n        \"headerMapping\": {},\n        \"payloadMapping\": [\"Ditto\"],\n        \"replyTarget\": {\n          \"enabled\": true,\n          \"address\": \"theReplyTopic\",\n          \"headerMapping\": {},\n          \"expectedResponseTypes\": [\"response\", \"error\", \"nack\"]\n        },\n        \"acknowledgementRequests\": {\n          \"includes\": []\n        },\n        \"declaredAcks\": []\n      }\n    ],\n    \"targets\": [\n      {\n        \"address\": \"topic/key\",\n        \"topics\": [\n          \"_/_/things/twin/events\",\n          \"_/_/things/live/messages\"\n        ],\n        \"authorizationContext\": [\"ditto:outbound-auth-subject\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Thing in Eclipse Ditto API - JSON\nDESCRIPTION: This JSON snippet is used to create a new Thing identified by 'org.eclipse.ditto:fancy-thing_53'. It specifies a policy ID and includes attributes such as location coordinates and feature properties for the accelerometer. The snippet must be sent to the designated API endpoint to successfully create the Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/creatething.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/create\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"definition\": \"org.eclipse.ditto:SomeModel:1.0.0\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"properties\": {\n          \"x\": 3.141,\n          \"y\": 2.718,\n          \"z\": 1,\n          \"unit\": \"g\"\n        },\n        \"desiredProperties\": {\n          \"x\": 4\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create/Modify Thing Command Example\nDESCRIPTION: Protocol command structure for creating a new Thing or modifying an existing one, including topic, path and value fields.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-create-or-modify.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<thingName>/things/<channel>/commands/modify\",\n  \"path\": \"/\",\n  \"value\": \"<thing-json>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to a Thing using JSON\nDESCRIPTION: Example JSON structure for sending a message to a Thing called 'smartcoffee'. The message uses the 'ask' subject with a simple text payload and includes the necessary headers and path format for the Ditto protocol.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-messages.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"topic\": \"org.eclipse.ditto/smartcoffee/things/live/messages/ask\",\n    \"headers\": {\n        \"content-type\": \"text/plain\",\n        \"correlation-id\": \"a-unique-string-for-this-message\"\n    },\n    \"path\": \"/inbox/messages/ask\",\n    \"value\": \"Hey, how are you?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Payload Mapping Function\nDESCRIPTION: JavaScript function to map binary device payload to Ditto Protocol message format, handling temperature, pressure and humidity values from byte array.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapToDittoProtocolMsg(\n    headers,\n    textPayload,\n    bytePayload,\n    contentType\n) {\n    \n    if (contentType !== 'application/octet-stream') {\n        return null; // only handle messages with content-type application/octet-stream\n    }\n    \n    let view = new DataView(bytePayload);\n    \n    let value = {\n        temperature: {\n            properties: {\n                // interpret the first 2 bytes (16 bit) as signed int and divide through 100.0:\n                value: view.getInt16(0) / 100.0\n            }\n        },\n        pressure: {\n            properties: {\n                // interpret the next 2 bytes (16 bit) as signed int:\n                value: view.getInt16(2)\n            }\n        },\n        humidity: {\n            properties: {\n                // interpret the next 1 bytes (8 bit) as unsigned int:\n                value: view.getUint8(4)\n            }\n        }\n    };\n\n    return Ditto.buildDittoProtocolMsg(\n        'org.eclipse.ditto',\n        headers['device_id'],\n        'things',\n        'twin',\n        'commands',\n        'modify',\n        '/features',\n        headers,\n        value\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Target Connection for Ditto in JSON\nDESCRIPTION: JSON configuration for a Ditto Kafka target connection. This connection listens for thing creation events and writes them to a configured Kafka topic, enabling confirmation of successful thing creation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/benchmark-tool/README.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"21076098-28e9-416c-8ef0-6c86b5758c27\",\n    \"name\": \"kafka-reply\",\n    \"connectionType\": \"kafka\",\n    \"connectionStatus\": \"open\",\n    \"uri\": \"tcp://192.168.16.2:19092\",\n    \"sources\": [],\n    \"targets\": [\n        {\n            \"address\": \"create-update-reply/{{ thing:id }}\",\n            \"topics\": [\n                \"_/_/things/twin/events?filter=eq(topic:action,'created')\"\n            ],\n            \"authorizationContext\": [\n                \"nginx:ditto\"\n            ],\n            \"headerMapping\": {}\n        }\n    ],\n    \"clientCount\": 1,\n    \"failoverEnabled\": true,\n    \"validateCertificates\": true,\n    \"processorPoolSize\": 1,\n    \"specificConfig\": {\n        \"saslMechanism\": \"plain\",\n        \"bootstrapServers\": \"192.168.16.2:19092, 192.168.16.3:19092, 192.168.16.4:19092\"\n    },\n    \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Source Header Mapping for AMQP Application Property\nDESCRIPTION: Configuration for mapping AMQP application property 'to' to Ditto protocol header 'reply-to'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-amqp10.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headerMapping\": {\n    \"reply-to\": \"{{ header:amqp.application.property:to }}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Payload Mapping for Azure IoT Hub\nDESCRIPTION: JavaScript function that maps Ditto protocol messages to Azure IoT Hub direct method format, setting method name, timeout, and payload values.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapFromDittoProtocolMsg(\n        namespace,\n        name,\n        group,\n        channel,\n        criterion,\n        action,\n        path,\n        dittoHeaders,\n        value,\n        status,\n        extra\n) {\n\n  let headers = dittoHeaders;\n  let payload = {\n    \"methodName\": action,\n    \"responseTimeoutInSeconds\": parseInt(dittoHeaders.timeout),\n    \"payload\": value\n  };\n  let textPayload = JSON.stringify(payload);\n  let bytePayload = null;\n  let contentType = 'application/json';\n\n  return Ditto.buildExternalMsg(\n    headers,\n    textPayload,\n    bytePayload,\n    contentType\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Nested Value with JsonPointer\nDESCRIPTION: Demonstrates how to retrieve a value from a nested JsonObject using a JsonPointer with the getValue() method. This approach simplifies the code compared to using multiple keys, as it directly targets the nested value with a single pointer.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nint subsel = thingJsonObject.getValue(\"/attributes/someAttr/subsel\")\n    .filter(JsonValue::isNumber)\n    .map(JsonValue::asInt)\n    .orElse(0);\n```\n\n----------------------------------------\n\nTITLE: Processing JSON Response from Eclipse Ditto's Permission Check\nDESCRIPTION: This JSON structure represents the response from the /checkPermissions endpoint. It maps entities to boolean values indicating whether the specified permissions are granted.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-auth-checkpermissions.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity_name\": true,\n  \"another_entity\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Function Expression Pipeline Example\nDESCRIPTION: Demonstrates the syntax for chaining multiple function expressions with placeholders using pipe syntax. Shows how to combine substring operations, default values, and string transformations.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-placeholders.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{{ thing:name | fn:substring-before('-') | fn:default('fallback') | fn:upper() }}\n```\n\n----------------------------------------\n\nTITLE: Modifying Attributes Eclipse Ditto JSON\nDESCRIPTION: This JSON snippet demonstrates how to formulate a command to modify an attribute within a digital twin, specifically changing location attributes. It uses a specific topic format for Eclipse Ditto, requiring a correlation id for command reference and specifying the path and new values for the attributes. Ensure that the JSON format is correctly followed with appropriate headers and data types.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyattribute.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"value\": {\n    \"latitude\": 44.673856,\n    \"longitude\": 8.261719\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Token Response in JSON\nDESCRIPTION: Example of a JSON response configuration for an OAuth2 token endpoint, including access token, expiration time, and scope.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-11-03-oauth2.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"ewogICJhbGciOiAiUlMyNTYiLAogICJ0eXAiOiAiSldUIgp9.ewogICJhdWQiOiBbXSwKICAiY2xpZW50X2lkIjogIm15LWNsaWVudC1pZCIsCiAgImV4cCI6IDMyNTAzNjgwMDAwLAogICJleHQiOiB7fSwKICAiaWF0IjogMCwKICAiaXNzIjogImh0dHBzOi8vbG9jYWxob3N0LyIsCiAgImp0aSI6ICI3ODVlODBjZC1lNmU2LTQ1MmEtYmU5Ny1hNTljNTNlZGI0ZDkiLAogICJuYmYiOiAwLAogICJzY3AiOiBbCiAgICAibXktc2NvcGUiCiAgXSwKICAic3ViIjogIm15LXN1YmplY3QiCn0.QUJD\",\n  \"expires_in\": 1048576,\n  \"scope\": \"my-scope\",\n  \"token_type\": \"bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure IoT Hub HTTP Connection with HMAC Signing\nDESCRIPTION: JSON configuration for setting up an HTTP connection to Azure IoT Hub with HMAC-SHA256 signing, including targets, payload mapping, and credentials.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-06-17-hmac-credentials.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\t\"id\": \"60d193e3-2639-415b-af29-0e337741141d\",\n\t\t\"name\": \"Azure IoT Hub HTTP\",\n\t\t\"connectionType\": \"http-push\",\n\t\t\"connectionStatus\": \"open\",\n\t\t\"uri\": \"https://my-hub.azure-devices.net:443\",\n\t\t\"sources\": [],\n\t\t\"targets\": [{\n\t\t\t\t\"address\": \"POST:/twins/{{ thing:id }}/methods?api-version=2018-06-30\",\n\t\t\t\t\"topics\": [\"_/_/things/live/messages\"],\n\t\t\t\t\"authorizationContext\": [\"integration:ditto\"],\n\t\t\t\t\"issuedAcknowledgementLabel\": \"live-response\",\n\t\t\t\t\"headerMapping\": {},\n\t\t\t\t\"payloadMapping\": [\"javascript\"]\n\t\t\t}\n\t\t],\n\t\t\"clientCount\": 1,\n\t\t\"failoverEnabled\": true,\n\t\t\"validateCertificates\": true,\n\t\t\"processorPoolSize\": 5,\n\t\t\"specificConfig\": {\n\t\t\t\"parallelism\": \"1\"\n\t\t},\n\t\t\"mappingDefinitions\": {\n\t\t\t\"javascript\": {\n\t\t\t\t\"mappingEngine\": \"JavaScript\",\n\t\t\t\t\"options\": {\n                    \"incomingScript\": \"function mapToDittoProtocolMsg(\\n  headers,\\n  textPayload,\\n  bytePayload,\\n  contentType\\n) {\\n\\n  if (contentType === 'application/vnd.eclipse.ditto+json') {\\n    return JSON.parse(textPayload);\\n  } else if (contentType === 'application/octet-stream') {\\n    try {\\n      return JSON.parse(Ditto.arrayBufferToString(bytePayload));\\n    } catch (e) {\\n      return null;\\n    }\\n  }\\n  return null;\\n}\\n\",\n                    \"outgoingScript\": \"function mapFromDittoProtocolMsg(\\n  namespace,\\n  name,\\n  group,\\n  channel,\\n  criterion,\\n  action,\\n  path,\\n  dittoHeaders,\\n  value,\\n  status,\\n  extra\\n) {\\n\\n  let headers = dittoHeaders;\\n  let payload = {\\n      \\\"methodName\\\": action,\\n      \\\"responseTimeoutInSeconds\\\": parseInt(dittoHeaders.timeout),\\n      \\\"payload\\\": value\\n  };\\n  let textPayload = JSON.stringify(payload);\\n  let bytePayload = null;\\n  let contentType = 'application/json';\\n\\n  return Ditto.buildExternalMsg(\\n    headers, // The external headers Object containing header values\\n    textPayload, // The external mapped String\\n    bytePayload, // The external mapped byte[]\\n    contentType // The returned Content-Type\\n  );\\n}\\n\",\n                    \"loadBytebufferJS\": \"false\",\n\t\t\t\t\t\"loadLongJS\": \"false\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"credentials\": {\n\t\t\t\"type\": \"hmac\",\n\t\t\t\"algorithm\": \"az-sasl\",\n\t\t\t\"parameters\": {\n\t\t\t\t\"sharedKeyName\": \"service\",\n\t\t\t\t\"sharedKey\": \"theKey\",\n\t\t\t\t\"endpoint\": \"my-hub.azure-devices.net\"\n\t\t\t}\n\t\t},\n\t\t\"tags\": []\n\t}\n```\n\n----------------------------------------\n\nTITLE: Reading Thing Metadata with Field Selector in Eclipse Ditto (JSON)\nDESCRIPTION: Example JSON response when retrieving a Thing with its metadata using a field selector. The response includes Thing properties along with metadata containing information like change logs and descriptions for individual fields.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-metadata.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"org.eclipse.ditto:my-lamp-1\",\n  \"policyId\": \"...\",\n  \"features\": {\n    \"lamp\": {\n      \"properties\": {\n        \"color\": {\n          \"r\": 0,\n          \"g\": 255,          \n          \"b\": 255\n        },\n        \"status\": {\n          \"on\": \"true\"\n        }\n      }\n    }\n  },\n  \"_created\": \"2022-06-01T10:00:00Z\",\n  \"_modified\": \"2022-06-09T14:30:00Z\",\n  \"_revision\": 42,\n  \"_metadata\": {\n    \"features\": {\n      \"lamp\": {\n        \"properties\": {\n          \"color\": {\n            \"r\": {\n              \"changeLog\": {\n                \"changedAt\": \"2022-08-02T04:30:07\", \n                \"changedBy\": {\n                  \"name\": \"ditto\", \n                  \"mail\": \"ditto@mail.com\"\n                }\n              }\n            },\n            \"g\": {\n              \"changeLog\": {\n                \"changedAt\": \"2022-08-02T04:30:07\",\n                \"changedBy\": {\n                  \"name\": \"ditto\",\n                  \"mail\": \"ditto@mail.com\"\n                }\n              }\n            },\n            \"b\": {\n              \"changeLog\": {\n                \"changedAt\": \"2022-08-02T04:30:07\", \n                \"changedBy\": {\n                  \"name\": \"ditto\", \n                  \"mail\": \"ditto@mail.com\"\n                }\n              }\n            },\n            \"description\": \"Color represented with RGB values\"\n          },\n          \"status\": {\n            \"on\": {\n              \"changeLog\": {\n                \"changedAt\": \"2022-08-02T04:30:07\",\n                \"changedBy\": {\n                  \"name\": \"ditto\",\n                  \"mail\": \"ditto@mail.com\"\n                }\n              }\n            },\n            \"description\": \"Status of the Lamp\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection with Mapping Conditions in Ditto\nDESCRIPTION: Example of configuring a connection with conditional payload mapping. This setup defines conditions for both incoming and outgoing messages that determine when the 'ConnectionStatus' mapping should be applied.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{ \n  \"name\": \"exampleConnection\",\n  \"sources\": [{\n      \"addresses\": [\"<source>\"],\n      \"authorizationContext\": [\"ditto:inbound\"],\n      \"payloadMapping\": [\"status\"]\n    }\n  ],\n  \"mappingDefinitions\": {\n    \"status\": {\n      \"mappingEngine\": \"ConnectionStatus\",\n      \"incomingConditions\": {\n        \"sampleCondition\": \"fn:filter(header:incoming-mapping-required,'eq','true')\"\n      },\n      \"outgoingConditions\": {\n        \"sampleCondition\": \"fn:filter(header:outgoing-mapping-required,'eq','true')\"\n      },\n      \"options\": {\n        \"thingId\": \"{%raw%}{{ header:device_id }}{%endraw%}\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyFeaturesResponse JSON Structure for Eclipse Ditto\nDESCRIPTION: This JSON structure represents a ModifyFeaturesResponse in Eclipse Ditto. It includes the topic, headers with a correlation ID, path, value, and status code. The response indicates a successful modification with a 204 status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": null,\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Thing Search Subscription in Eclipse Ditto\nDESCRIPTION: This JSON command creates a subscription to thing search results in Eclipse Ditto. It filters for things with temperature attribute equal to 32, limits results to 10 items sorted by thingId, and restricts to a specific namespace. Only attributes will be included in the results.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/generated/commands/create-subscription-command.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"_/_/things/twin/search/subscribe\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"correlation-id\": \"444dae7e-bacf-312b-bc97-8f393dadf1bd\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"filter\": \"eq(/attributes/temperature,32)\",\n    \"options\": \"size(10),sort(+thingId)\",\n    \"namespaces\": [\n      \"org.eclipse.ditto\"\n    ]\n  },\n  \"fields\": \"attributes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for Thing Properties in JSON\nDESCRIPTION: Example of setting metadata for a Thing's lamp color properties using the 'put-metadata' header. It demonstrates adding a changelog to all properties and a description to the color property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-metadata.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"key\": \"*/changeLog\",\n    \"value\": {\n      \"changedAt\": \"2022-08-02T04:30:07\",\n      \"changedBy\": {\n        \"name\":\"ditto\",\n        \"mail\":\"ditto@mail.com\"\n      }\n    }\n  },\n  {\n    \"key\": \"/features/lamp/properties/color/description\",\n    \"value\": \"Color represented with RGB values\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Specifying Content Type for Ditto Protocol Messages\nDESCRIPTION: The content type that must be specified when sending messages to Ditto in Ditto Protocol format. This content type is also included in all change notifications emitted by Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-bindings.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napplication/vnd.eclipse.ditto+json\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Thing Response in Eclipse Ditto\nDESCRIPTION: This JSON snippet models the response message structure for creating a new 'Thing' in the Eclipse Ditto framework. It includes essential attributes like 'thingId', 'policyId', and 'definition', along with nested objects for attributes, such as location and features like accelerometer properties. This JSON structure facilitates communication between the client and the Ditto framework and carries a standard HTTP status code of 201 for successful creation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/createthingresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/create\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"definition\": \"org.eclipse.ditto:SomeModel:1.0.0\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"properties\": {\n          \"x\": 3.141,\n          \"y\": 2.718,\n          \"z\": 1,\n          \"unit\": \"g\"\n        },\n        \"desiredProperties\": {\n          \"x\": 4\n        }\n      }\n    }\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Acknowledgement Requests in Ditto Connection\nDESCRIPTION: JSON configuration for setting up acknowledgement requests on a source. This example adds the 'twin-persisted' acknowledgement and a custom acknowledgement, with a filter to only request acknowledgements when the 'qos' header is not 0.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-connections.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addresses\": [\n    \"<source>\"\n  ],\n  \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n  \"headerMapping\": {\n    \"qos\": \"{{ header:qos }}\"\n  },\n  \"acknowledgementRequests\": {\n    \"includes\": [\n      \"twin-persisted\",\n      \"receiver-connection-id:my-custom-ack\"\n    ],\n    \"filter\": \"fn:filter(header:qos,'ne','0')\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Desired Property Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the structure of a command to modify a feature's desired property in Eclipse Ditto. It includes the topic, headers, and path for the modification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createdesiredproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyfeaturedesiredproperty.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Building WoT Thing Model / Thing Description via Builder API - Java\nDESCRIPTION: This Java code demonstrates how to construct a WoT Thing Model/Thing Description using a builder API. The snippet covers setting various properties of the `ThingDescription`, including context, ID, title, security definitions, and actions. The final object can be converted into a JSON string representation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/wot/model/README.md#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport static java.util.Collections.singletonList;\nimport static java.util.Collections.singletonMap;\n\nimport java.util.Arrays;\nimport java.util.Locale;\n\nimport org.eclipse.ditto.wot.model.*;\n\npublic final class TesterBuilder {\n\n    public static void main(String... args) {\n\n        ThingDescription thingDescription = ThingDescription.newBuilder()\n                .setAtContext(AtContext.newMultipleAtContext(\n                        Arrays.asList(\n                                SingleUriAtContext.W3ORG_2022_WOT_TD_V11,\n                                SinglePrefixedAtContext.of(\"ditto\",\n                                        SingleUriAtContext.of(\"https://www.eclipse.dev/ditto/ctx\"))\n                        )\n                ))\n                .setId(IRI.of(\"urn:org.eclipse.ditto:333-WoTLamp-1234\"))\n                .setTitle(Title.of(\"MyLampThing\"))\n                .setTitles(Titles.of(singletonMap(Locale.GERMAN, Title.of(\"Mein Lampen Ding\"))))\n                .setSecurityDefinitions(SecurityDefinitions.of(singletonMap(\"basic_sc\",\n                        SecurityScheme.newBasicSecurityBuilder(\"basic_sc\")\n                                .setIn(\"header\")\n                                .build()))\n                )\n                .setSecurity(Security.newSingleSecurity(\"basic_sc\"))\n                .setBase(IRI.of(\"https://ditto.eclipseprojects.io/api/2/things/org.eclipse.ditto:333-WoTLamp-1234\"))\n                .setProperties(Properties.of(singletonMap(\"status\", Property.newBuilder(\"status\")\n                        .setType(DataSchemaType.STRING)\n                        .setForms(PropertyForms.of(singletonList(PropertyFormElement.newBuilder()\n                                .setHref(IRI.of(\"/attributes/status\"))\n                                .setOp(MultiplePropertyFormElementOp.of(Arrays.asList(\n                                        SinglePropertyFormElementOp.READPROPERTY,\n                                        SinglePropertyFormElementOp.WRITEPROPERTY,\n                                        SinglePropertyFormElementOp.OBSERVEPROPERTY\n                                )))\n                                .build()\n                        )))\n                        .build()\n                )))\n                .setActions(Actions.of(singletonMap(\"toggle\", Action.newBuilder(\"toggle\")\n                        .setForms(ActionForms.of(singletonList(ActionFormElement.newBuilder()\n                                .setHref(IRI.of(\"/inbox/messages/toggle\"))\n                                .build()\n                        )))\n                        .build()\n                )))\n                .setEvents(Events.of(singletonMap(\"overheating\", Event.newBuilder(\"overheating\")\n                        .setData(StringSchema.newBuilder().build())\n                        .setForms(EventForms.of(singletonList(EventFormElement.newBuilder()\n                                .setHref(IRI.of(\"/outbox/messages/overheating\"))\n                                .setSubprotocol(\"sse\")\n                                .build()\n                        )))\n                        .build()\n                )))\n                .build();\n\n        String tdJsonString = thingDescription.toJsonString();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Humidity Sensor Digital Twin with Ditto API\nDESCRIPTION: This curl command creates a digital twin for a humidity sensor using Ditto's HTTP API. It sets up a thing with an environmentSensor feature containing a humidity property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-09-21-selective-push-notifications.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -u 'ditto:ditto' --header 'Content-Type: application/json' -d \\\n    '{\n       \"features\": {\n         \"environmentSensor\": {\n           \"properties\": { \n             \"humidity\": 0\n           }\n         }\n       }\n     }' \\\n    'http://localhost:8080/api/2/things/org.eclipse.ditto%3AHumiditySensor'\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Source Acknowledgements\nDESCRIPTION: Configuration for enabling acknowledgement processing only for MQTT messages received with QoS 1/2\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt5.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addresses\": [\n    \"<mqtt_topic>\",\n    \"...\"\n  ],\n  \"authorizationContext\": [\n    \"ditto:inbound-auth-subject\",\n    \"...\"\n  ],\n  \"qos\": 1,\n  \"acknowledgementRequests\": {\n    \"includes\": [],\n    \"filter\": \"fn:filter(header:mqtt.qos,'ne','0')\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Connections via Piggyback Command\nDESCRIPTION: DevOps command for creating a new connection configuration. The connection object needs to be specified according to the protocol-specific binding requirements.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:createConnection\",\n    \"connection\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Features with ModifyFeatures Command in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet demonstrates the structure of a ModifyFeatures command in Eclipse Ditto. It shows how to modify the 'accelerometer' feature of a thing's twin, including both current and desired properties for x, y, z coordinates and unit.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"accelerometer\": {\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"g\"\n      },\n      \"desiredProperties\": {\n        \"x\": 4,\n        \"y\": 3,\n        \"z\": 5,\n        \"unit\": \"g\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thing Attributes Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the command structure for retrieving attributes of a Thing in Eclipse Ditto. It includes the topic, headers, and path for the retrieval request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrieveattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrieveattributes.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entity at Specific Timestamp via HTTP API in Bash\nDESCRIPTION: Examples of using the HTTP API to retrieve things, policies, and connections at a specific historical timestamp by setting the 'at-historical-timestamp' header with an ISO-8601 formatted string.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-history.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Access a thing:\ncurl -u ditto:ditto 'http://localhost:8080/api/2/things/org.eclipse.ditto:thing-1' \\\n  --header 'at-historical-timestamp: 2022-10-24T03:11:15Z'\n  \n# Access a policy:\ncurl -u ditto:ditto 'http://localhost:8080/api/2/policies/org.eclipse.ditto:policy-1' \\\n  --header 'at-historical-timestamp: 2022-10-24T06:11:15Z'\n  \n# Access a connection:\ncurl -u devops:foobar 'http://localhost:8080/api/2/connections/some-connection-1' \\\n  --header 'at-historical-timestamp: 2022-10-24T07:11Z'\n```\n\n----------------------------------------\n\nTITLE: Merging a Thing via HTTP API with PATCH request\nDESCRIPTION: HTTP PATCH request to merge changes into an existing thing. The request adds a manufacturing year attribute, updates the temperature to hold, and removes the smartMode setting from the water-tank feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-02-04-merge-feature.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"manufacturingYear\": \"2020\"\n  },\n  \"features\": {\n    \"water-tank\": {\n      \"properties\": {\n        \"configuration\": {\n          \"smartMode\": null,\n          \"tempToHold\": 50\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring RetrieveThingResponse in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents a RetrieveThingResponse in Eclipse Ditto. It includes the topic, headers, path, value (containing thing details), and status. The value object contains the thing's ID, policy ID, attributes, and features.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievethingresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"properties\": {\n          \"x\": 3.141,\n          \"y\": 2.718,\n          \"z\": 1,\n          \"unit\": \"g\"\n        },\n        \"desiredProperties\": {\n          \"x\": 4,\n          \"y\": 3,\n          \"z\": 5,\n          \"unit\": \"g\"\n        }\n      }\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Features Command in Ditto Protocol (JSON)\nDESCRIPTION: This snippet shows a Ditto Protocol command for merging all features of a thing. It includes the thing ID, new feature definitions, and properties for each feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergefeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"accelerometer\": {\n      \"definition\": [\n        \"org.eclipse.ditto:accelerometer:1.0.0\"\n      ],\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"g\"\n      }\n    },\n    \"gyroscope\": {\n      \"definition\": [\n        \"org.eclipse.ditto:gyroscope:1.0.0\"\n      ],\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"degree/s\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Nested Thing Attribute with Field Selector in Eclipse Ditto\nDESCRIPTION: Shows how to use a field selector to retrieve a specific nested attribute ('attributes/manufacturer') of a Thing. The response includes only the requested attribute.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"manufacturer\": \"ACME corp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of a Feature with Definition in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates how to structure a JSON representation of a feature with a definition for a lamp. The definition array contains an identifier string in the format 'namespace:name:version' which establishes the schema type for the feature. The feature contains configuration and status properties with nested objects.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-02-08-feature-definition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"lamp\": {\n        \"definition\": [ \"com.mycompany.fb:Lamp:1.0.0\" ],\n        \"properties\": {\n            \"configuration\": {\n                \"on\": true,\n                \"location\": {\n                    \"longitude\": 34.052235,\n                    \"latitude\": -118.243683\n                }\n            },\n            \"status\": {\n                \"on\": false,\n                \"color\": {\n                    \"red\": 128,\n                    \"green\": 255,\n                    \"blue\": 0\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Thing in Eclipse Ditto using JSON\nDESCRIPTION: JSON payload to create a Thing named 'ditto:thing' with specific policy entries for request subjects and integration permissions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-06-17-hmac-credentials.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"ditto:thing\",\n  \"attributes\": {},\n  \"features\": {},\n  \"_policy\": {\n    \"entries\": {\n      \"DEFAULT\": {\n        \"subjects\": {\n          \"{{ request:subjectId }}\": {\n            \"type\": \"the creator\"\n          },\n          \"integration:ditto\": {\n            \"type\": \"the connections\"\n          }\n        },\n        \"resources\": {\n          \"policy:/\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": []\n          },\n          \"thing:/\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": []\n          },\n          \"message:/\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": []\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP PUT Request with Conditional Query Parameter\nDESCRIPTION: Example of a conditional PUT request to update a thing's feature property based on a location attribute condition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-09-23-conditional-requests.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPUT /api/2/things/org.eclipse.ditto:coffeebrewer/features/water-tank/properties/status/temperature?condition=eq(attributes/location,\"Wonderland\")\n45.5\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thing Definition Response Format in Eclipse Ditto\nDESCRIPTION: Example of a JSON response when retrieving a thing's definition in Eclipse Ditto. The response includes the topic, headers with correlation ID, path to the definition, the definition value, and HTTP status code 200 indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievethingdefinitionresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/definition\",\n  \"value\": \"digitaltwin:DigitaltwinExample:1.0.0\",\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring ModifyFeatureResponse JSON in Eclipse Ditto\nDESCRIPTION: This JSON snippet illustrates the structure of a ModifyFeatureResponse in Eclipse Ditto. It includes the topic, headers with a correlation ID, path to the modified feature, a null value indicating feature deletion, and a status code of 204 for successful modification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeatureresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"value\": null,\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Feature's Desired Property Using Merge Command in Eclipse Ditto\nDESCRIPTION: This JSON command demonstrates how to delete the desired property 'x' from the 'accelerometer' feature using Ditto's merge command. Setting the value to null triggers deletion of the specified path. The command includes the required topic, headers with content-type and correlation ID, and the specific path to the property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeaturedesiredproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Ditto URL in OpenShift\nDESCRIPTION: Commands to retrieve the Ditto URL in OpenShift environment and access the status endpoint using the extracted credentials.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/ditto/templates/NOTES.txt#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho https://$(kubectl --namespace {{ .Release.Namespace }} get route {{ include \"ditto.fullname\" . }} -o jsonpath=\"{.status.ingress[0].host}\")\n\nexport STATUS_PWD=$(kubectl --namespace {{ .Release.Namespace }} get secret {{ include \"ditto.fullname\" . }}-gateway-secret -o jsonpath=\"{.data.status-password}\" | base64 --decode)\nexport URL=https://devops:${STATUS_PWD}@$(kubectl --namespace {{ .Release.Namespace }} get route {{ include \"ditto.fullname\" . }} -o jsonpath=\"{.status.ingress[0].host}\")\ncurl -i -X GET \"$URL/status\"\n```\n\n----------------------------------------\n\nTITLE: Constructing JSON Request for Checking Permissions in Eclipse Ditto\nDESCRIPTION: This JSON structure represents the payload for a POST request to the /checkPermissions endpoint. It specifies entities, resources, and permissions to be checked.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-auth-checkpermissions.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entity_name\": {\n        \"resource\": \"thing:/features/lamp/properties/on\",\n        \"entityId\": \"org.eclipse.ditto:some-thing-1\",\n        \"hasPermissions\": [\"READ\"]\n    },\n    \"another_entity\": {\n        \"resource\": \"message:/features/lamp/inbox/messages/toggle\",\n        \"entityId\": \"org.eclipse.ditto:some-thing-2\",\n        \"hasPermissions\": [\"WRITE\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Command Handler in Java\nDESCRIPTION: Java code example showing how to handle live retrieve thing commands using the Ditto Java Client, including creating thing attributes and features, and sending back responses.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-12-20-http-live-channel.md#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nString thingId = \"org.eclipse.ditto:outdoor-sensor\";\nString featureId = \"environment-sensor\";\nAttributes attributes = Attributes.newBuilder()\n  .set(\"location\", \"outdoor in the woods\")\n  .build();\nFeature feature = ThingsModelFactory.newFeatureBuilder()\n  .properties(ThingsModelFactory.newFeaturePropertiesBuilder()\n    .set(\"temperature\", 9.2)\n    .set(\"humidity\", 56.3)\n    .build())\n  .withId(featureId)\n  .build();\n\nThing thing = ThingsModelFactory.newThingBuilder()\n  .setId(thingId)\n  .setFeature(feature)\n  .setAttributes(attributes)\n  .build();\n\n// initialize the ditto-client and startConsumption() of live commands\nDittoClient dittoClient = ... ;\n\ndittoClient.live()\n  .forId(thingId)\n  .handleRetrieveThingCommandsFunction(retrieveThingLiveCommand -> {\n      return retrieveThingLiveCommand.answer()\n                  .withResponse(response -> response.retrieved(thing));\n  });\n```\n\n----------------------------------------\n\nTITLE: Combining Filtering and Enrichment in Ditto Java Client\nDESCRIPTION: Shows how to combine filtering and enrichment in change notifications using both extra fields and a custom filter.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nclient.twin().startConsumption(\n   Options.Consumption.extraFields(JsonFieldSelector.newInstance(\"attributes/location\")),\n   Options.Consumption.filter(\"eq(attributes/location,\\\"kitchen\\\")\")\n).toCompletableFuture().get(); // this will block the thread! work asynchronously whenever possible!\n// register the callbacks...\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages via WebSocket in JavaScript\nDESCRIPTION: JavaScript code for setting up a WebSocket connection to receive messages from Ditto. This example establishes a connection, registers for message events by sending 'START-SEND-MESSAGES', and implements a callback to handle incoming messages.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-messages.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// connect to the WebSocket\nvar websocket = new WebSocket('ws://ditto:ditto@localhost:8080/ws/1');\nwebsocket.onmessage(function(message) {\n    console.log('received message data: ' +  message.data);\n});\nwebsocket.onopen(function(ws) {\n    // register for receiving messages\n    ws.send('START-SEND-MESSAGES');\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Command to Modify Feature Desired Properties in Eclipse Ditto\nDESCRIPTION: This JSON snippet demonstrates how to send a command to modify the desired properties of a feature in Eclipse Ditto. It specifies the thing ID, feature ID, and the new desired properties to be set.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifydesiredproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"value\": {\n    \"x\": 3.141,\n    \"y\": 2.718,\n    \"z\": 1,\n    \"unit\": \"g\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Policy Subject with Expiry and Announcements\nDESCRIPTION: Shows how to configure a policy subject with expiration time and announcement settings for subject deletion notifications. Includes expiry timestamp, announcement timing, and acknowledgement configurations.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-policy.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"my-subject\",\n  \"expiry\": \"2099-12-31T23:59:59Z\",\n  \"announcement\": {\n    \"beforeExpiry\": \"1h\",\n    \"whenDeleted\": true,\n    \"requestedAcks\": {\n      \"labels\": [\"my-connection:my-issued-acknowledgement\"],\n      \"timeout\": \"10s\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Policy with Subject and Resource Permissions\nDESCRIPTION: JSON command structure for creating a new policy in Eclipse Ditto. Defines a policy with a specific ID, subject with custom type, and resource path with READ/WRITE permissions. Includes correlation ID for tracking the command.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/createpolicy.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/create\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"entries\": {\n      \"the_label\": {\n        \"subjects\": {\n          \"google:the_subjectid\": {\n            \"type\": \"yourSubjectTypeDescription\"\n          }\n        },\n        \"resources\": {\n          \"thing:/the_resource_path\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": []\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Humidity Sensor Value with Ditto API\nDESCRIPTION: This curl command updates the humidity value for the humidity sensor digital twin using Ditto's HTTP API.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-09-21-selective-push-notifications.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -u 'ditto:ditto' --header 'Content-Type: application/json' -d \\\n    '55' \\\n    'http://localhost:8080/api/2/things/org.eclipse.ditto%3AHumiditySensor/features/environmentSensor/properties/humidity'\n```\n\n----------------------------------------\n\nTITLE: System Properties for Custom Aggregation Metrics\nDESCRIPTION: Example of configuring custom aggregation metrics via system properties, showing how to set up the online_status metric with group-by fields, placeholder-based tags, and filters for device status.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_17\n\nLANGUAGE: properties\nCODE:\n```\n-Dditto.search.operator-metrics.custom-aggregation-metrics.online_status.enabled=true\n-Dditto.search.operator-metrics.custom-aggregation-metrics.online_status.scrape-interval=20m\n-Dditto.search.operator-metrics.custom-aggregation-metrics.online_status.namespaces.0=org.eclipse.ditto\n-Dditto.search.operator-metrics.custom-aggregation-metrics.online_status.group-by.location=\"attributes/Info/location\"\n-Dditto.search.operator-metrics.custom-aggregation-metrics.online_status.group-by.isGateway=\"attributes/Info/gateway\"\n-Dditto.search.operator-metrics.custom-aggregation-metrics.online_status.tags.hardcoded-tag=\"hardcoded_value\"\n-Dditto.search.operator-metrics.custom-aggregation-metrics.online_status.tags.location=\"{{ group-by:location | fn:default('missing location') }}\"\n-Dditto.search.operator-metrics.custom-aggregation-metrics.online_status.tags.isGateway=\"{ group-by:isGateway }}\"\n-Dditto.search.operator-metrics.custom-aggregation-metrics.online_status.filter=gt(features/ConnectionStatus/properties/status/readyUntil/,time:now)\n```\n\n----------------------------------------\n\nTITLE: RQL Filter for Submodel Creation in Ditto\nDESCRIPTION: This JSON snippet shows an RQL filter expression used in Ditto to ensure that the 'mappingForSubmodel' payload mapping is only executed for messages that create a feature but not a property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"_/_/things/twin/events?filter=and(in(topic:action,'\"'created'\"'),not(eq(resource:path,'\"'/features'\"')),like(resource:path,'\"'/features*'\"'),not(like(resource:path,'\"'*properties*'\"')))\"\n```\n\n----------------------------------------\n\nTITLE: Received Message Example in JSON\nDESCRIPTION: Example JSON structure showing what a received message looks like via the WebSocket binding. This represents the message that would be delivered to a client subscribed to receive messages for the Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-messages.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"topic\": \"org.eclipse.ditto/smartcoffee/things/live/messages/ask\",\n    \"headers\": {\n        \"correlation-id\": \"demo-6qaal9l\",\n        \"auth-subjects\": [\"ditto\", \"nginx:ditto\"],\n        \"content-type\": \"text/plain\",\n        \"version\": 1\n    },\n    \"path\": \"/inbox/messages/ask\",\n    \"value\": \"Hey, how are you?\"\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Historical Events via SSE in Bash\nDESCRIPTION: Examples of using the Server Sent Event (SSE) API to stream historical events for things, demonstrating various options for specifying revision ranges, timestamp ranges, and fields to retrieve.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-history.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# stream complete history starting from earliest available revision of a thing:\ncurl --http2 -u ditto:ditto -H 'Accept:text/event-stream' -N \\\n  http://localhost:8080/api/2/things/org.eclipse.ditto:thing-2?from-historical-revision=0&fields=thingId,attributes,features,_revision,_modified\n\n# stream specific history range of a thing based on revisions:\ncurl --http2 -u ditto:ditto -H 'Accept:text/event-stream' -N \\\n  http://localhost:8080/api/2/things/org.eclipse.ditto:thing-2?from-historical-revision=23&to-historical-revision=42&fields=thingId,attributes,features,_revision,_modified\n\n# stream specific history range of a thing based on timestamps:\ncurl --http2 -u ditto:ditto -H 'Accept:text/event-stream' -N \\\n  http://localhost:8080/api/2/things/org.eclipse.ditto:thing-2?from-historical-timestamp=2022-10-24T11:44:36Z&to-historical-timestamp=2022-10-24T11:44:37Z&fields=thingId,attributes,features,_revision,_modified\n\n# stream specific history range, additionally selecting _context in \"fields\" which contains the historical headers:\ncurl --http2 -u ditto:ditto -H 'Accept:text/event-stream' -N \\\n  http://localhost:8080/api/2/things/org.eclipse.ditto:thing-2?from-historical-revision=0&fields=thingId,attributes,features,_revision,_modified,_context\n```\n\n----------------------------------------\n\nTITLE: Filter Configuration for Thing Creation Events in JSON\nDESCRIPTION: JSON filter configuration that triggers the mapper function only when a new Thing is created. It filters events by checking for the 'created' action on the root path resource.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"_/_/things/twin/events?filter=and(in(topic:action,\\'created\\'),eq(resource:path,\\'/\\'))\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Tunnel with Public Key Authentication in JSON\nDESCRIPTION: JSON configuration for setting up an SSH tunnel with public key authentication for a managed connection in Eclipse Ditto. It includes the connection details and SSH tunnel configuration with username, public key, and private key in PEM format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-03-31-ssh-tunneling-for-managed-connections.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"tunneled-connection\",\n  \"connectionType\": \"mqtt\",\n  \"uri\": \"tcp://mqtt.eclipseprojects.io:1883\",\n  \"sources\": [{ ... }],\n  \"sshTunnel\": {\n    \"enabled\": true,\n    \"uri\": \"ssh://ssh-host:2222\",\n    \"credentials\": {\n      \"type\": \"public-key\",\n      \"username\": \"username\",\n      \"publicKey\": \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9.....\\n-----END PUBLIC KEY-----\",\n      \"privateKey\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhki....\\n-----END PRIVATE KEY-----\"\n    },\n    \"validateHost\": true,\n    \"knownHosts\": [\"MD5:e0:3a:34:1c:68:ed:c6:bc:7c:ca:a8:67:c7:45:2b:19\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Connection Settings in JSON\nDESCRIPTION: Example JSON configuration for setting up a Hono connection in Eclipse Ditto. Includes connection ID, type, status, sources, targets, and authentication settings.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-hono.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection\": {\n    \"id\": \"connection-for-hono-example-tenant\",\n    \"connectionType\": \"hono\",\n    \"connectionStatus\": \"open\",\n    \"failoverEnabled\": true,\n    \"specificConfig\": {\n      \"honoTenantId\": \"example-tenant\"\n    },\n    \"sources\": [\n      {\n        \"addresses\": [\"event\"],\n        \"consumerCount\": 1,\n        \"qos\": 1,\n        \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n        \"enforcement\": {\n          \"input\": \"{%raw%}{{ header:device_id }}{%endraw%}\",\n          \"filters\": [\"{%raw%}{{ entity:id }}{%endraw%}\"]\n        },\n        \"headerMapping\": {},\n        \"payloadMapping\": [\"Ditto\"],\n        \"replyTarget\": {\n          \"enabled\": true,\n          \"address\": \"command\",\n          \"expectedResponseTypes\": [\"response\", \"error\", \"nack\"]\n        },\n        \"acknowledgementRequests\": {\n          \"includes\": []\n        },\n        \"declaredAcks\": []\n      }\n    ],\n    \"targets\": [\n      {\n        \"address\": \"command\",\n        \"topics\": [\n          \"_/_/things/twin/events\",\n          \"_/_/things/live/messages\"\n        ],\n        \"authorizationContext\": [\"ditto:outbound-auth-subject\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Partial Request for Thing Property\nDESCRIPTION: Shows how to retrieve a single value from a Thing using a partial request, reducing response payload and allowing direct use of the returned data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Setting Descriptions for Feature Properties in JSON\nDESCRIPTION: An example of adding descriptions to both the color and status properties of a lamp feature using the 'put-metadata' header.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-metadata.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  { \n    \"key\": \"features/lamp/properties/color/description\", \n    \"value\": \"Color represented with RGB values\"\n  },\n  { \n    \"key\": \"features/lamp/properties/status/description\", \n    \"value\": \"Status of the lamp\"\n  } \n]\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Using MongoDB Secret in Deployment\nDESCRIPTION: YAML snippet to replace the MONGO_DB_HOSTNAME environment variable with a reference to a MongoDB URI stored in a Kubernetes secret for secure deployment.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/README.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: MONGO_DB_URI    \n    valueFrom:\n      secretKeyRef:\n        name: mongodb\n        key: mongodb-uri\n```\n\n----------------------------------------\n\nTITLE: Enriching WebSocket Messages with Extra Fields in Ditto\nDESCRIPTION: Examples of how to add extra fields to WebSocket messages using the extraFields parameter. These examples show how to enrich event notifications and messages with specific Thing attributes and features.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-protocol-bindings-websocket.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nSTART-SEND-EVENTS?extraFields=attributes/counter,features/ConnectionStatus\nSTART-SEND-MESSAGES?extraFields=attributes\n```\n\n----------------------------------------\n\nTITLE: Feature Definition Modified Event Structure in JSON for Eclipse Ditto\nDESCRIPTION: Shows the JSON structure of a FeatureDefinitionModified event in Eclipse Ditto. This event is triggered when a feature definition is modified for a thing. The event includes the topic, headers with correlation ID, path to the modified feature definition, the new definition value, and the revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuredefinitionmodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"value\": [\n    \"org.eclipse.ditto:accelerometer:1.0.0\"\n  ],\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Data in Eclipse Ditto using JSON\nDESCRIPTION: This JSON structure represents a RetrieveFeatureResponse in Eclipse Ditto. It contains the response to a request for retrieving a specific feature ('accelerometer') of a thing. The response includes the actual and desired properties of the feature, along with metadata such as the topic, correlation ID, and status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeatureresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"value\": {\n    \"properties\": {\n      \"x\": 3.141,\n      \"y\": 2.718,\n      \"z\": 1,\n      \"unit\": \"g\"\n    },\n    \"desiredProperties\": {\n      \"x\": 4,\n      \"y\": 3,\n      \"z\": 5,\n      \"unit\": \"g\"\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Additional JavaScript Libraries in Ditto\nDESCRIPTION: Example showing how to load external JavaScript libraries in Ditto's JavaScript mapping engine using CommonJS module system. This shows importing a library called 'pbf' after configuring the commonJsModulePath.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nvar Pbf = require('pbf');\n```\n\n----------------------------------------\n\nTITLE: Creating a Thing in Ditto with cURL\nDESCRIPTION: cURL command to create a new Thing in Eclipse Ditto with a specific namespace, name, and policy ID. This triggers the previously configured connections that push a new AAS to the BaSyx ecosystem.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nNAMESPACE=machine\nNAME=sensor\nDEVICE_ID=$NAMESPACE:$NAME\n\ncurl -i -X PUT -u ditto:ditto -H 'Content-Type: application/json' --data '{\n  \"policyId\": \"'$POLICY_ID'\"\n}' <ditto-instance-url>/api/2/things/$DEVICE_ID\n```\n\n----------------------------------------\n\nTITLE: Validating Namespace Pattern in Java\nDESCRIPTION: Regex pattern for validating namespace format in Eclipse Ditto. The namespace must start with a letter, can contain dots, dashes, numbers and underscores with specific rules.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-namespaces-and-names.md#2025-04-17_snippet_0\n\nLANGUAGE: regex\nCODE:\n```\n(?<ns>|(?:(?:[a-zA-Z]\\w*+)(?:[.-][a-zA-Z]\\w*+)*+))\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Property Command in Eclipse Ditto\nDESCRIPTION: This JSON snippet demonstrates the command structure for modifying a single property of a feature in Eclipse Ditto. It includes the thing ID, feature ID, and the property to be modified.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Header Mapping in Ditto\nDESCRIPTION: Configures header mapping for incoming messages in a Ditto source. Maps external headers to Ditto protocol message headers using placeholders.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-connections.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addresses\": [\n    \"<source>\"\n  ],\n  \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n  \"headerMapping\": {\n    \"correlation-id\": \"{{%raw%}}{{ header:message-id }}{{%endraw%}}\",\n    \"content-type\": \"{{%raw%}}{{ header:content-type }}{{%endraw%}}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Feature Desired Properties Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the command structure for merging all desired properties of a feature. It includes the topic, path, and value to be merged.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergedesiredproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergefeaturedesiredproperties.md %}{% endcapture %} {{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Representing ThingCreated Event Structure in JSON for Eclipse Ditto\nDESCRIPTION: This JSON snippet illustrates the structure of a ThingCreated event in Eclipse Ditto. It includes the topic, headers, path, and value containing details of the created Thing such as thingId, policyId, attributes, and features. The event also includes a revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/thingcreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"properties\": {\n          \"x\": 3.141,\n          \"y\": 2.718,\n          \"z\": 1,\n          \"unit\": \"g\"\n        },\n        \"desiredProperties\": {\n          \"x\": 4,\n          \"y\": 3,\n          \"z\": 5,\n          \"unit\": \"g\"\n        }\n      }\n    }\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Certificate Verification in Ditto\nDESCRIPTION: JSON configuration for setting up server certificate verification in a Ditto connection. Includes settings for secure transport protocol, certificate validation, and trusted certificates in PEM format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-tls-certificates.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uri\": \"<secure-transport-protocol>://<host>:<port>/<path>\",\n  \"validateCertificates\": true,\n  \"ca\": \"-----BEGIN CERTIFICATE-----\\n<trusted certificate>\\n-----END CERTIFICATE-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Connection Target in JSON\nDESCRIPTION: Example JSON configuration for a Hono connection target. It specifies the target address, topics, and authorization context.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-hono.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"command\",\n  \"topics\": [\n    \"_/_/things/twin/events\",\n    \"_/_/things/live/messages\"\n  ],\n  \"authorizationContext\": [\"ditto:outbound-auth-subject\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Piggyback Command for Creating a Policy - JSON\nDESCRIPTION: This snippet provides an example of a piggyback command for creating a policy, which must include the target actor selection and headers indicating whether to aggregate responses and the intended command type.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/policy\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": true,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"policies.commands:createPolicy\",\n    \"policy\": {\n      \"policyId\": \"<insert-the-policy-id-to-create-here>\",\n      \"entries\": {\n        ...\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Search Results\nDESCRIPTION: Example of using RQL sort option to order search results by modification timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/search/things?option=sort(-_modified)\n```\n\n----------------------------------------\n\nTITLE: Fetching Thing Description for a Ditto Feature using cURL\nDESCRIPTION: This cURL command generates and fetches the Thing Description for a specific Feature of a Ditto Thing. It requires authentication and specifies the Accept header for the TD JSON format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u ditto:ditto 'http://localhost:8080/api/2/things/io.eclipsepojects.ditto:my-thing/features/my-feature-1' \\\n  --header 'Accept: application/td+json'\n```\n\n----------------------------------------\n\nTITLE: Policy Modification Protocol Schema\nDESCRIPTION: Command and response structure for modifying an existing policy or creating a new one if it doesn't exist. Requires WRITE permission on policy:/. resource.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/modify\",\n  \"path\": \"/\",\n  \"value\": \"<complete policy as JSON object>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Thing Description for a Ditto Thing using cURL\nDESCRIPTION: This cURL command generates and fetches the Thing Description for a Ditto Thing. It requires authentication and specifies the Accept header for the TD JSON format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u ditto:ditto 'http://localhost:8080/api/2/things/io.eclipsepojects.ditto:my-thing' \\\n  --header 'Accept: application/td+json'\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Target in Eclipse Ditto\nDESCRIPTION: JSON configuration for setting up an MQTT target in Eclipse Ditto. Specifies the target address, topics to subscribe to, authorization context, and QoS level.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"mqtt/topic/of/my/device/{%raw%}{{ thing:id }}{%endraw%}\",\n  \"topics\": [\n    \"_/_/things/twin/events\",\n    \"_/_/things/live/messages\"\n  ],\n  \"authorizationContext\": [\"ditto:outbound-auth-subject\", \"...\"],\n  \"qos\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying a Subject in Eclipse Ditto Policy\nDESCRIPTION: Shows the JSON command structure for modifying a subject within a specific policy. The command includes policy ID, subject ID, and the permissions to be applied to the subject.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-modifysubject.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{% include_relative generated/commands/modify/modifysubject.md %}\n```\n\n----------------------------------------\n\nTITLE: Response Message Structure in Ditto Protocol\nDESCRIPTION: Example of a success response to a command in Eclipse Ditto. It includes headers with correlation ID, the resource path, the response value (truncated in this example), and a status code indicating success (204 No Content).\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-examples.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headers\": {\n    \"correlation-id\": \"a780b7b5-fdd2-4864-91fc-80df6bb0a636\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    ...\n  },\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Thing Structure for Field Selector Example\nDESCRIPTION: Provides a more complex Thing JSON structure to demonstrate the use of field selectors in partial requests.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"{thingId}\",\n  \"policyId\": \"{policyId}\",\n  \"definition\": \"{definition}\",\n  \"attributes\": {\n    \"manufacturer\": \"ACME corp\",\n    \"complex\": {\n      \"some\": false,\n      \"serialNo\": 4711,\n      \"misc\": \"foo\"\n    }\n  },\n  \"features\": {\n    \"lamp\": {\n      \"properties\": {\n        \"on\": true,\n        \"color\": \"blue\"\n      }\n    },\n    \"infrared-lamp\": {\n      \"properties\": {\n        \"on\": false,\n        \"color\": \"red\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Thing JSON with Property Descriptions\nDESCRIPTION: The resulting Thing JSON after adding descriptions to the color and status properties. It shows how the '_metadata' field is updated with the new descriptions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-metadata.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"thingId\": \"org.eclipse.ditto:my-lamp-1\",\n    \"features\": {\n      \"lamp\": {\n        \"properties\": {\n          \"color\": {\n            \"r\": 100,\n            \"g\": 0,\n            \"b\": 255\n          },\n          \"status\": {\n            \"on\": \"true\"\n          }\n        }\n      }\n    },\n    \"_metadata\": {\n      \"features\": {\n        \"lamp\": {\n          \"properties\": {\n            \"color\": {\n              \"description\": \"Color represented with RGB values\"\n            },\n            \"status\": {\n              \"description\": \"Status of the lamp\"\n            }\n          }\n        }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Feature Creation to Submodel Creation in JavaScript\nDESCRIPTION: This function creates an AAS Submodel representation when a new Feature is added to a Thing in Ditto. It uses the Thing's name and Feature ID to generate the Submodel ID and structure.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapFromDittoProtocolMsg(\n  namespace,\n  name,\n  group,\n  channel,\n  criterion,\n  action,\n  path,\n  dittoHeaders,\n  value,\n  status,\n  extra\n) {\n  \n  let feature_id = path.split('/').slice(2);\n  let headers = dittoHeaders;\n  let textPayload = JSON.stringify(\n    {\n      parent: {\n        keys: [\n          {\n            idType: 'Custom',\n            type: 'AssetAdministrationShell',\n            value: namespace,\n            local: true\n          }\n        ]\n      },\n      identification: {\n        idType: 'Custom',\n        id: name+'_'+feature_id\n      },\n      idShort: name+'_'+feature_id,\n      kind: 'Instance',\n      dataSpecification: [],\n      modelType: {\n        name: 'Submodel'\n      },\n      embeddedDataSpecifications: [],\n      submodelElements: []\n    }\n\n  );\n  let bytePayload = null;\n  let contentType = 'application/json';\n  return Ditto.buildExternalMsg(\n    headers, // The external headers Object containing header values\n    textPayload, // The external mapped String\n    bytePayload, // The external mapped byte[]\n    contentType // The returned Content-Type\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Source in Eclipse Ditto\nDESCRIPTION: JSON configuration for a Kafka source in Eclipse Ditto, including topic subscription, QoS, authorization, enforcement, and reply target settings.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-kafka2.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addresses\": [\"theTopic\"],\n  \"consumerCount\": 1,\n  \"qos\": 1,\n  \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n  \"enforcement\": {\n    \"input\": \"{%raw%}{{ header:device_id }}{%endraw%}\",\n    \"filters\": [\"{%raw%}{{ entity:id }}{%endraw%}\"]\n  },\n  \"headerMapping\": {},\n  \"payloadMapping\": [\"Ditto\"],\n  \"replyTarget\": {\n    \"enabled\": true,\n    \"address\": \"theReplyTopic\",\n    \"headerMapping\": {},\n    \"expectedResponseTypes\": [\"response\", \"error\", \"nack\"]\n  },\n  \"acknowledgementRequests\": {\n    \"includes\": []\n  },\n  \"declaredAcks\": []\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Response for Partial Acknowledgement Timeout in Eclipse Ditto\nDESCRIPTION: Example JSON response when two acknowledgements are requested but one times out in an HTTP request to Eclipse Ditto. The response includes a successful 'twin-persisted' acknowledgement and a timed-out 'my-custom-ack' acknowledgement.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-acknowledgements.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"twin-persisted\": {\n    \"status\": 201,\n    \"payload\": {\n      \"thingId\": \"org.eclipse.ditto:thing-1\",\n      \"policyId\": \"org.eclipse.ditto:thing-1\"\n    },\n    \"headers\": {\n      \"correlation-id\": \"db878735-4957-4fd9-92dc-6f09bb12a093\",\n      \"version\": 2,\n      \"etag\": \"\\\"rev:1\\\"\",\n      \"location\": \"http://127.0.0.1:8080/api/2/things/org.eclipse.ditto:thing-1\"\n    }\n  },\n  \"my-custom-ack\": {\n    \"status\": 408,\n    \"payload\": {\n      \"status\": 408,\n      \"error\": \"acknowledgement:request.timeout\",\n      \"message\": \"The acknowledgement request reached the specified timeout of 42,000ms.\",\n      \"description\": \"Try increasing the timeout and make sure that the requested acknowledgement is sent back in time.\"\n    },\n    \"headers\": {\n      \"version\": 2,\n      \"correlation-id\": \"db878735-4957-4fd9-92dc-6f09bb12a093\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Payload Mapping in JSON for Eclipse Ditto Connection\nDESCRIPTION: This JSON snippet demonstrates how to define a custom JavaScript payload mapping and reference it in a connection source. It includes the mappingDefinitions object with a custom JavaScript mapper, and a sources array that references the custom mapping.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"mappingDefinitions\": {\n    \"customJs\": {\n      // (1)\n      \"mappingEngine\": \"JavaScript\",\n      // (2)\n      \"options\": {\n        // (3)\n        \"incomingScript\": \"..\",\n        \"outgoingScript\": \"..\"\n      }\n    }\n  },\n  \"sources\": [\n    {\n      \"addresses\": \"source\",\n      \"payloadMapping\": [\n        \"customJs\"\n      ]\n    }\n  ]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Things Attribute Not Modifiable Error Response in JSON for Eclipse Ditto\nDESCRIPTION: This JSON snippet represents an error response from Eclipse Ditto when a user attempts to modify an attribute without proper permissions. It includes the topic, headers, path, error details, and HTTP status code. The error specifically relates to insufficient permissions to modify the 'location' attribute of a Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_attribute_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"things:attribute.notmodifiable\",\n    \"message\": \" The Attribute with name '/location' on the Thing with ID 'org.eclipse.ditto:fancy-thing' could not be modified as the requester had insufficient permissions (WRITE is required).\",\n    \"description\": \"Check if the ID of your requested Thing was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thing via Piggyback Command\nDESCRIPTION: JSON payload for retrieving an existing Thing using the RetrieveThing command via piggyback. Requires thing ID specification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/thing\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": true,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"things.commands:retrieveThing\",\n    \"thingId\": \"<insert-the-thing-id-to-retrieve-here>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Multiple Things Command Structure\nDESCRIPTION: Protocol specification for retrieving multiple Things simultaneously. The command includes a thingIds array in the value field and supports field selection.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-retrieve.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/_/things/<channel>/commands/retrieve\",\n  \"path\": \"/\",\n  \"value\": {\n    \"thingIds\": []\n  },\n  \"fields\": \"comma,separated,field,list\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Thing JSON Structure\nDESCRIPTION: JSON representation of a Thing entity in Eclipse Ditto, showing its structure with attributes and features.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"org.eclipse.ditto:fancy-thing\",\n  \"policyId\": \"org.eclipse.ditto:fancy-thing\",\n  \"attributes\": {\n    \"manufacturer\": \"ACME corp\",\n    \"complex\": {\n      \"some\": false,\n      \"serialNo\": 4711\n    }\n  },\n  \"features\": {\n    \"lamp\": {\n      \"properties\": {\n        \"on\": false,\n        \"color\": \"blue\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Search Query with Namespace Filtering\nDESCRIPTION: HTTP GET request showing filtering by location with namespace restrictions\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-search.md#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET .../search/things?filter=eq(attributes/location,\"living-room\")&namespaces=org.eclipse.ditto,foo.bar\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Mapper Headers and Content Type\nDESCRIPTION: Configuration example showing how to set up outgoing content type and incoming message headers with various placeholders for message mapping.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"outgoingContentType\": \"application/octet-stream\",\n  \"incomingMessageHeaders\": {\n    \"content-type\": \"{%raw%}{{ header:content-type | fn:default('application/octet-stream') }}{%endraw%}\",\n    \"status\": \"{%raw%}{{ header:status }}{%endraw%}\",\n    \"ditto-message-subject\": \"{%raw%}{{ header:ditto-message-subject | fn:default('fallback-subject') }}{%endraw%}\",\n    \"ditto-message-direction\": \"TO\",\n    \"ditto-message-thing-id\": \"{%raw%}{{ header:ditto-message-thing-id | fn:default('ns:fallback-thing') }}{%endraw%}\",\n    \"ditto-message-feature-id\": \"{%raw%}{{ header:ditto-message-feature-id }}{%endraw%}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Accelerometer Feature in Eclipse Ditto Thing Merged Event (JSON)\nDESCRIPTION: This JSON snippet represents a Thing merged event in Eclipse Ditto. It shows the event structure when the accelerometer feature is removed from a thing. The event includes the topic, headers, path, value, revision, and timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergeddeletefeature.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"value\": null,\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional HTTP PATCH Request with Header\nDESCRIPTION: Example of a conditional PATCH request using HTTP header to update water tank temperature based on last modification time.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-09-23-conditional-requests.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH -H 'Content-Type: application/json' -H 'condition: gt(features/water-tank/properties/status/lastModified,\"2021-09-23T07:00:00Z\")' /api/2/things/org.eclipse.ditto:coffeebrewer/features/water-tank/properties/properties/temperature -d '{ temperature: 45.26, \"lastModified\": \"'\"$(date --utc +%FT%TZ)\"'\" }'\n```\n\n----------------------------------------\n\nTITLE: Setting Value with JsonFieldDefinition\nDESCRIPTION: Shows how to use a JsonFieldDefinition for setting a value in a JsonObject, ensuring that only the defined type (Integer or null in this case) can be set. The compiler provides guarantees about the allowed value types.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Create a JSON object which contains the expected key among others.\n// Use the field definition for setting the value. The compiler guarantees, that only an Integer or null can be set.\n\nJsonObject jsonObject = JsonFactory.newObjectBuilder()\n    .set(\"foo\", \"bar\")\n    .set(MY_VALUE, 42)\n    .set(\"isOn\", false)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Searching for Things in Eclipse Ditto\nDESCRIPTION: This cURL command searches for Things in Eclipse Ditto based on a specific attribute (manufacturer) value.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/intro-hello-world.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u ditto:ditto -X GET 'http://localhost:8080/api/2/search/things?filter=eq(attributes/manufacturer,\"ACME\")'\n```\n\n----------------------------------------\n\nTITLE: Manipulating JavaScript Byte Payloads with Typed Arrays\nDESCRIPTION: This snippet illustrates using JavaScript's TypedArrays to handle byte payloads. It wraps the ArrayBuffer to access individual bytes, providing a straightforward way to manipulate raw byte data using unsigned 8-bit integer views.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet bytes = new Uint8Array(bytePayload);\\nbytes[0]; // access the first byte\\nbytes[1]; // access the second byte\n```\n\n----------------------------------------\n\nTITLE: Building Local Docker Images\nDESCRIPTION: Commands to build Docker images from locally built Ditto artifacts. The script supports proxy configuration for environments that require it.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./build-images.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n./build-images.sh -p 172.17.0.1:3128\n```\n\n----------------------------------------\n\nTITLE: Configuring Polling Device Twin in Eclipse Ditto\nDESCRIPTION: JSON configuration for a device that relies on polling for sensor readings, with a polling-mode attribute set to true.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-12-22-live-channel-condition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"my.namespace:my-polling-device-1\",\n  \"policyId\": \"my.namespace:my-polling-device-1\",\n  \"attributes\": {\n    \"polling-mode\": true\n  },\n  \"features\": {\n    \"temperature\": {\n      \"properties\": {\n        \"value\": 23.42\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Connection to AWS SNS in Eclipse Ditto\nDESCRIPTION: JSON configuration for an HTTP connection to AWS SNS (Simple Notification Service). It includes credentials setup, target configuration, and JavaScript payload mapping to publish twin events as messages to an SNS topic.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"AWS SNS\",\n  \"connectionType\": \"http-push\",\n  \"connectionStatus\": \"open\",\n  \"uri\": \"https://sns.<aws-region>.amazonaws.com:443\",\n  \"credentials\": {\n    \"type\": \"hmac\",\n    \"algorithm\": \"aws4-hmac-sha256\",\n    \"parameters\": {\n      \"region\": \"<aws-region>\",\n      \"service\": \"sns\",\n      \"accessKey\": \"<aws-access-key>\",\n      \"secretKey\": \"<aws-secret-key>\"\n    }\n  },\n  \"sources\": [],\n  \"targets\": [{\n      \"address\": \"GET:/\",\n      \"topics\": [ \"_/_/things/twin/events\" ],\n      \"authorizationContext\": [ \"integration:ditto\" ],\n      \"headerMapping\": {},\n      \"payloadMapping\": [ \"javascript\" ]\n  }],\n  \"clientCount\": 1,\n  \"failoverEnabled\": true,\n  \"validateCertificates\": true,\n  \"processorPoolSize\": 5,\n  \"specificConfig\": {\n    \"parallelism\": \"1\"\n  },\n  \"mappingDefinitions\": {\n    \"javascript\": {\n      \"mappingEngine\": \"JavaScript\",\n      \"options\": {\n        \"incomingScript\": \"function mapToDittoProtocolMsg() {\\n    return undefined;\\n}\",\n        \"outgoingScript\": \"function mapFromDittoProtocolMsg(namespace,name,group,channel,criterion,action,path,dittoHeaders,value,status,extra) {\\n  let textPayload = JSON.stringify(Ditto.buildDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value, status, extra));\\n  let query = 'Action=Publish&Message=' + encodeURIComponent(textPayload) + '&Subject=ThingModified&TopicArn=<sns-topic-arn>';\\n  let headers = {\\\"http.query\\\":query};\\n  return Ditto.buildExternalMsg(headers,'',null,'text/plain');\\n}\\n\",\n        \"loadBytebufferJS\": \"false\",\n        \"loadLongJS\": \"false\"\n      }\n    }\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Acknowledgements in Ditto Java Client\nDESCRIPTION: Shows how to request both built-in (PERSISTED) and custom acknowledgements when performing a Thing operation. Includes timeout configuration and handling of acknowledgement failures.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nDittoHeaders dittoHeaders = DittoHeaders.newBuilder()\n   .acknowledgementRequest(\n      AcknowledgementRequest.of(DittoAcknowledgementLabel.PERSISTED),\n      AcknowledgementRequest.of(AcknowledgementLabel.of(\"my-custom-ack\"))\n   )\n   .timeout(\"5s\")\n   .build();\n\nclient.twin().forId(ThingId.of(\"org.eclipse.ditto:my-thing\"))\n   .putAttribute(\"counter\", 42, Options.dittoHeaders(dittoHeaders))\n   .whenComplete((aVoid, throwable) -> {\n      if (throwable instanceof AcknowledgementsFailedException) {\n         Acknowledgements acknowledgements = ((AcknowledgementsFailedException) throwable).getAcknowledgements();\n         System.out.println(\"Acknowledgements could not be fulfilled: \" + acknowledgements);\n      }   \n   });\n```\n\n----------------------------------------\n\nTITLE: Importing Policies in JSON\nDESCRIPTION: This JSON snippet shows how to import entries from other policies. It demonstrates importing explicit entries and entries that are implicitly importable from two different policies.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-policy.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyId\": \"ditto:importing-policy\",\n  \"entries\": {  ...  },\n  \"imports\": {\n    \"ditto:imported-policy\" : {\n      \"entries\": [ \"EXPLICIT\" ] \n    },\n    \"ditto:another-imported-policy\" : { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with DataViews for Byte Payloads in JavaScript\nDESCRIPTION: JavaScript's `DataView` allows for more flexible manipulation of byte data by accessing items of different sizes and types from an ArrayBuffer. This snippet demonstrates accessing 8-bit and 16-bit data types, showcasing the versatility of DataViews in handling complex byte-based operations.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet view = new DataView(bytePayload);\\nview.getInt8(0); // access a 8-bit signed integer (byte) on offset=0\\nview.getUint16(1); // access a 16-bit unsigned integer (usigned short) on offset=1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Desired Properties in Eclipse Ditto using JSON\nDESCRIPTION: This JSON object represents a command to retrieve desired properties of the 'accelerometer' feature in Eclipse Ditto. It specifies the command topic, correlation ID, feature path, and desired fields to be retrieved.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeaturedesiredproperties-selectedfields.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"fields\": \"desiredProperties/target_year_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Desired Properties Command in Eclipse Ditto\nDESCRIPTION: Command to modify the desired properties of a feature in Eclipse Ditto. It specifies the thing ID, feature ID, and the desired properties to be set.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createdesiredproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyfeaturedesiredproperties.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Merge thing command response\nDESCRIPTION: This JSON snippet represents a successful (status 204) response to a command merging data into a 'thing' resource.  The 'topic' indicates the command origin.  The 'headers' section includes a correlation ID for matching the response to the initial command. The 'path' shows the specific location within the thing's data that was targeted by the merge command.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeaturepropertyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Properties Modified Event in Eclipse Ditto\nDESCRIPTION: This snippet illustrates the event generated when feature properties are successfully modified in Eclipse Ditto. It shows the structure of the event notification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyproperties.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/featurepropertiesmodified.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Modify Policy Resource Command in Ditto Protocol\nDESCRIPTION: Example of a command to modify a specific resource in a policy entry. The command identifies the policy by ID and specifies the resource path to be modified along with the new resource definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-modifyresource.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources/thing:/the_resource_path\",\n  \"value\": {\n    \"grant\": [\n      \"READ\",\n      \"WRITE\"\n    ],\n    \"revoke\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Desired Properties Response in Eclipse Ditto\nDESCRIPTION: Response to the command for modifying feature desired properties in Eclipse Ditto. It confirms the successful modification of the desired properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createdesiredproperties.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyfeaturedesiredpropertiesresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tracked Notification with Response Required\nDESCRIPTION: Example of a Ditto Protocol message that requests notification tracking. Sets response-required to true to receive an explicit response about the delivery status, allowing the device to implement alternative notification methods if delivery fails.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-10-23-end-2-end-acknowledgement.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/my-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"response-required\": true,\n    \"requested-acks\": [\"d45d4522-142e-4057-ae87-8969343a3ddc:backend-processed\"]\n  },\n  \"path\": \"/features/alarm/properties/status\",\n  \"value\": \"on\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Feature Definition using Merge Command in Eclipse Ditto\nDESCRIPTION: This JSON snippet shows the structure of a merge command used to delete the definition of the 'accelerometer' feature in a thing. The command targets the twin representation of 'fancy-thing' and uses the null value to indicate deletion of the definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeaturedefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Message Access Policy in Ditto\nDESCRIPTION: JSON policy configuration that defines access control for message resources in Ditto. It demonstrates how to restrict and grant access to specific message topics for services and features.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/advanced-data-by-pass.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subjects\": {},\n  \"resources\": {\n    \"message:/\": {\n      \"grant\": [],\n      \"revoke\": [\"READ\", \"WRITE\"]\n    },\n    \"message:/inbox/messages/services/history\": {\n      \"grant\": [\"READ\"],\n      \"revoke\": []\n    },\n    \"message:/outbox/messages/services/history\": {\n      \"grant\": [\"WRITE\"],\n      \"revoke\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Search Subscription Command\nDESCRIPTION: Command for initiating a new search subscription in the protocol\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/protocol-examples-search.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/create-subscription-command.md %}{% endcapture %}\n```\n\n----------------------------------------\n\nTITLE: Creating Hashed Password for nginx Basic Authentication using OpenSSL\nDESCRIPTION: Command to generate a hashed password using OpenSSL tool for nginx basic authentication. The generated hash will be added to the nginx.htpasswd file with a username.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl passwd -quiet\n Password: <enter password>\n Verifying - Password: <enter password>\n```\n\n----------------------------------------\n\nTITLE: Merge Thing Command Response for a Specific Feature in Eclipse Ditto\nDESCRIPTION: A JSON response example showing the structure returned when a merge command is successfully executed on the 'accelerometer' feature. The response includes the topic, preserved correlation ID, target path, and a 204 status code indicating successful execution without returned content.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeatureresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Complex GET Search Query with Filtering and Options\nDESCRIPTION: HTTP GET request demonstrating filtering by location attribute with sorting and pagination options\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-search.md#2025-04-17_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET .../search/things?filter=eq(attributes/location,\"living-room\")&option=sort(+thingId),limit(0,5)&namespaces=org.eclipse.ditto,foo.bar\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure of Feature with Desired Properties in Eclipse Ditto\nDESCRIPTION: A fully-fledged JSON representation showing a 'lamp' feature with properties, desired properties, and feature definition. The desired properties reflect intended but not yet applied property updates.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-11-11-desired-properties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"lamp\": {\n        \"definition\": [ \"com.mycompany.fb:Lamp:1.0.0\" ],\n        \"properties\": {\n            \"configuration\": {\n                \"on\": true,\n                \"location\": {\n                    \"longitude\": 34.052235,\n                    \"latitude\": -118.243683\n                }\n            },\n            \"status\": {\n                \"on\": false,\n                \"color\": {\n                    \"red\": 128,\n                    \"green\": 255,\n                    \"blue\": 0\n                }\n            }\n        },\n        \"desiredProperties\": {\n            \"configuration\": {\n                \"on\": false\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Log Levels - JSON\nDESCRIPTION: This snippet shows how to retrieve all currently configured log levels for services using a GET request to the '/devops/logging' endpoint, which returns a JSON object containing the log levels for each service instance.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"gateway\": {\n        \"10.0.0.1\": {\n            \"type\": \"devops.responses:retrieveLoggerConfig\",\n            \"status\": 200,\n            \"serviceName\": \"gateway\",\n            \"instance\": \"10.0.0.1\",\n            \"loggerConfigs\": [{\n                \"level\": \"info\",\n                \"logger\": \"ROOT\"\n            }, {\n                \"level\": \"info\",\n                \"logger\": \"org.eclipse.ditto\"\n            }, {\n                \"level\": \"warn\",\n                \"logger\": \"org.mongodb.driver\"\n            }]\n        }\n    },\n    \"things-search\": {\n        ...\n    },\n    \"policies\": {\n        ...\n    },\n    \"things\": {\n        ...\n    },\n    \"connectivity\": {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Ditto Cluster Status\nDESCRIPTION: Commands to check the status of the Ditto cluster containers and verify the health of the Ditto services using curl.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-04-16-connecting-to-ttn-via-mqtt.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose ps\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u devops:foobar http://localhost:${DITTO_EXTERNAL_PORT}/status/health\n```\n\n----------------------------------------\n\nTITLE: Defining RetrieveThingsResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON snippet illustrates the structure of a RetrieveThingsResponse in Eclipse Ditto. It includes the topic, headers, path, value (containing thing details), and status. The thing details encompass thingId, policyId, attributes, and features with their properties and desired properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievethingsresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/_/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": [{\n      \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n      \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n      \"attributes\": {\n        \"location\": {\n          \"latitude\": 44.673856,\n          \"longitude\": 8.261719\n        }\n      },\n      \"features\": {\n        \"accelerometer\": {\n          \"properties\": {\n            \"x\": 3.141,\n            \"y\": 2.718,\n            \"z\": 1,\n            \"unit\": \"g\"\n          },\n          \"desiredProperties\": {\n            \"x\": 4,\n            \"y\": 3,\n            \"z\": 5,\n            \"unit\": \"g\"\n          }\n        }\n      }\n    }],\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Things Using Java 8 Stream API\nDESCRIPTION: Example of searching for things using the Java 8 Stream API, including filtering and sorting options.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nclient.twin().search()\n   .stream(queryBuilder -> queryBuilder.namespace(\"org.eclipse.ditto\")\n      .filter(\"eq(attributes/location,'kitchen')\") // apply RQL expression here\n      .options(builder -> builder.sort(s -> s.desc(\"thingId\")).size(1))\n   )\n   .forEach(foundThing -> System.out.println(\"Found thing: \" + foundThing));\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Properties in Eclipse Ditto JSON\nDESCRIPTION: This JSON snippet demonstrates how to construct a command for deleting properties of a specific feature ('accelerometer') in Eclipse Ditto. Dependencies include an understanding of Ditto's command topic structures and the correlation ID system, which pairs requests with responses. The primary parameters are 'topic', representing the command path, 'headers', for unique request identification, and 'path', specifying the feature's property path to delete.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeatureproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ditto with Embedded MongoDB (Persistent Storage)\nDESCRIPTION: Deploys Ditto using Helm with embedded MongoDB and persistent storage.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/azure/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade ditto ../helm/eclipse-ditto/ --namespace $k8s_namespace --set service.type=LoadBalancer,service.loadBalancerIP.enabled=true,service.loadBalancerIP.address=$ip_address,service.annotations.\"service\\.beta\\.kubernetes\\.io/azure-load-balancer-resource-group\"=$resourcegroup_name,mongodb.persistence.enabled=true,mongodb.persistence.storageClass=managed-premium-retain --wait --install\n```\n\n----------------------------------------\n\nTITLE: Implementing WoT Property Categories with Ditto Extension\nDESCRIPTION: Example showing how to define WoT property affordances with categories using the Ditto extension in a JSON-LD context. Demonstrates categorization of configuration and status properties with proper ontology references.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": [\n    \"https://www.w3.org/2022/wot/td/v1.1\",\n    {\n      \"ditto\": \"https://ditto.eclipseprojects.io/wot/ditto-extension#\",\n      \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\"\n    }\n  ],\n  ...,\n  \"properties\": {\n    \"on\": {\n      \"title\": \"On\",\n      \"type\": \"boolean\",\n      \"ditto:category\": \"configuration\"\n    },\n    \"power-consumption\": {\n      \"@type\": \"om2:Power\",\n      \"title\": \"Power consumption\",\n      \"type\": \"number\",\n      \"unit\": \"om2:kilowatt\",\n      \"ditto:category\": \"status\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Authorization with Placeholders in Ditto\nDESCRIPTION: This JSON snippet demonstrates how to configure a source's authorization subject using a placeholder. It uses the 'device_id' header from incoming messages to dynamically set the authorization subject.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-connections.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\": \"auth-subject-placeholder-example\",\n   \"sources\": [\n     {\n       \"addresses\": [ \"telemetry\" ],\n       \"authorizationContext\": [\"device:{{ header:device_id }}\"]\n     }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Secrets in OpenShift\nDESCRIPTION: Creates secrets for MongoDB passwords and URI using the 'oc create secret' command. These secrets are used for secure database access.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/openshift/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\noc create secret generic mongodb-secret -n digitaltwins --from-literal=MONGODB_PASSWORD='mongodb-secret-pw' --from-literal=MONGODB_ADMIN_PASSWORD='mongodb-admin-secret-pw' &&\noc create secret generic mongodb-uri -n digitaltwins --from-literal=mongodb-uri='mongodb://mongodb-user:mongodb-secret-pw@mongodb:27017/iot-things?ssl=false'\n```\n\n----------------------------------------\n\nTITLE: Creating Hono Device in Bash\nDESCRIPTION: This snippet demonstrates how to set up a tenant, create a device, and add device credentials in Eclipse Hono using curl commands.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-12-05-example-command-and-control.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# setup a tenant\n$ curl -X POST -i -H 'Content-Type: application/json' -d '{\"tenant-id\": \"org.eclipse.ditto\"}' https://hono.eclipseprojects.io:28080/tenant\n# create a device\n$ curl -X POST -i -H 'Content-Type: application/json' -d '{\"device-id\": \"org.eclipse.ditto:teapot\"}' https://hono.eclipseprojects.io:28080/registration/org.eclipse.ditto\n# add device credentials\n$ PWD_HASH=$(echo -n 'teapot' | openssl dgst -binary -sha512 | base64 -w 0)\n$ curl -X POST -i -H 'Content-Type: application/json' -d '{\n  \"device-id\": \"org.eclipse.ditto:teapot\",\n  \"type\": \"hashed-password\",\n  \"auth-id\": \"teapot\",\n  \"secrets\": [{\n      \"hash-function\" : \"sha-512\",\n      \"pwd-hash\": \"'$PWD_HASH'\"\n  }]\n}' https://hono.eclipseprojects.io:28080/credentials/org.eclipse.ditto\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subjects for a Policy Entry in Eclipse Ditto using JSON\nDESCRIPTION: This JSON structure represents a command to retrieve subjects for a specific policy entry label in Eclipse Ditto. It includes the topic for policy commands, correlation ID in the headers, and the path specifying the entry label for which subjects are to be retrieved.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrievesubjects.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Feature JSON with Categorized Properties\nDESCRIPTION: Example of a generated feature JSON showing how properties are grouped by their categories. Properties are organized into configuration and status groups based on their category definitions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"definition\": [\n    \"https://some.domain/some.tm.jsonld\"\n  ],\n  \"properties\": {\n    \"configuration\": {\n      \"on\": false\n    },\n    \"status\": {\n      \"power-consumption\": 0.0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing search index update for things in specific namespaces\nDESCRIPTION: Command to trigger a search index update for things in specified namespaces using a shutdown command with force-update and namespaces headers.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/user/thingsWildcardSearchRoot/searchUpdaterRoot/backgroundSyncProxy\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"force-update\": true,\n    \"namespaces\": [\"namespace1\", \"namespace2\"]\n  },\n  \"piggybackCommand\": {\n    \"type\": \"common.commands:shutdown\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Properties using JSON in Eclipse Ditto\nDESCRIPTION: This snippet defines a merge command in JSON format for updating the property 'x' of the accelerometer feature in the Eclipse Ditto project. It specifies the topic, headers, the path to the property, and the new value to be set. The use of 'application/merge-patch+json' indicates that this command is intended for partial updates.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeatureproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Merging a Single Feature Command in Eclipse Ditto\nDESCRIPTION: Command to merge a single feature of a thing in Eclipse Ditto. It includes the thing ID, feature ID, and the feature properties to be merged.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergefeature.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergefeature.md %}{% endcapture %} {{ command |\nmarkdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Entry Response in Ditto Protocol\nDESCRIPTION: This snippet demonstrates the response structure when retrieving a Policy entry. It includes the topic, headers, path, and the content of the retrieved entry.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrievepolicyentry.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/query/retrievepolicyentryresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Feature Desired Properties Deleted Event in Eclipse Ditto\nDESCRIPTION: This JSON snippet represents the event generated when desired properties of a feature are successfully deleted. It includes the revision number, timestamp, and metadata about the deleted properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletedesiredproperties.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-lamp/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/lamp/desiredProperties\",\n  \"revision\": 1,\n  \"timestamp\": \"2021-03-01T15:35:22Z\",\n  \"event\": {\n    \"featureId\": \"lamp\",\n    \"desiredProperties\": {\n      \"on\": true,\n      \"color\": {\n        \"red\": 128,\n        \"green\": 255,\n        \"blue\": 0\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Thing with Field Selector\nDESCRIPTION: Examples showing how to retrieve Thing entities in Eclipse Ditto, including standard retrieval and selective field retrieval using query parameters\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrievething.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrievething.md %}{% endcapture %}\n{{ command | markdownify }}\n\n{% capture command %}{% include_relative generated/commands/query/retrievething-withfieldselector.md %}{% endcapture %}\n{{ command | markdownify }}\n\n{% capture response %}{% include_relative generated/commands/query/retrievethingresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Sending Delete Thing Command in Eclipse Ditto\nDESCRIPTION: This command is used to delete a Thing with the ID 'org.eclipse.ditto:fancy-thing'. It includes the correlation ID for tracking the request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletething.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Header Mapping\nDESCRIPTION: Defines header mapping for outgoing messages, mapping Ditto protocol headers to external headers.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-connections.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"<target>\",\n  \"topics\": [\n    \"_/_/things/twin/events\",\n    \"_/_/things/live/messages?namespaces=org.eclipse.ditto\"\n  ],\n  \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n  \"headerMapping\": {\n    \"message-id\": \"{{%raw%}}{{ header:correlation-id }}{{%endraw%}}\",\n    \"content-type\": \"{{%raw%}}{{ header:content-type }}{{%endraw%}}\",\n    \"subject\": \"{{%raw%}}{{ topic:subject }}{{%endraw%}}\",\n    \"reply-to\": \"all-replies\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enriched Ditto Protocol Event Message\nDESCRIPTION: Demonstrates an enriched Ditto Protocol event message with additional 'extra' fields including attributes and the temperature unit.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-enrichment.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {},\n  \"path\": \"/features/temperature/properties/value\",\n  \"value\": 23.42,\n  \"revision\": 34,\n  \"extra\": {\n    \"attributes\": {\n        \"location\": \"kitchen\"\n    },\n    \"features\": {\n      \"temperature\": {\n        \"properties\": {\n          \"unit\": \"Celcius\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure IoT Hub AMQP Connection Configuration\nDESCRIPTION: JSON configuration for setting up an AMQP connection to Azure IoT Hub. Includes connection details, targets configuration, and HMAC credentials using az-sasl algorithm.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-06-17-hmac-credentials.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"8caca8c6-10d1-4886-a61f-3ea6270f9d8e\",\n  \"name\": \"Azure IoT Hub AMQP\",\n  \"connectionType\": \"amqp-10\",\n  \"connectionStatus\": \"open\",\n  \"uri\": \"amqps://my-hub.azure-devices.net:5671\",\n  \"sources\": [],\n  \"targets\": [{\n    \"address\": \"/messages/devicebound\",\n    \"topics\": [\"_/_/things/live/messages\"],\n    \"authorizationContext\": [\"integration:ditto\"],\n    \"headerMapping\": {\n      \"iothub-ack\": \"full\",\n      \"to\": \"/devices/{{thing:id}}/messages/devicebound\"\n    }\n  }\n  ],\n  \"clientCount\": 1,\n  \"failoverEnabled\": true,\n  \"validateCertificates\": true,\n  \"processorPoolSize\": 5,\n  \"credentials\": {\n    \"type\": \"hmac\",\n    \"algorithm\": \"az-sasl\",\n    \"parameters\": {\n      \"sharedKeyName\": \"service\",\n      \"sharedKey\": \"theKey\",\n      \"endpoint\": \"my-hub.azure-devices.net\"\n    }\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Enrichment and Filtering in Ditto WebSocket Protocol\nDESCRIPTION: Example of combining both enrichment and filtering features in a single WebSocket subscription. This request enriches events with attribute data while filtering for those with a counter attribute greater than 42.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-protocol-bindings-websocket.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nSTART-SEND-EVENTS?extraFields=attributes&filter=gt(attributes/counter,42)\n```\n\n----------------------------------------\n\nTITLE: Merge Thing Command Response for Feature Properties in Eclipse Ditto\nDESCRIPTION: JSON response example showing a successful merge operation at the '/features/accelerometer/properties' path. The response includes the topic, preserved correlation ID in headers, target path, and a 204 status code indicating successful completion with no content to return.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeaturepropertiesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy ID Response in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a successful response to a policy ID retrieval command in Eclipse Ditto. It includes the topic that identifies the thing, correlation headers for request tracking, the path indicating the policy ID is being retrieved, the actual policy ID value, and a 200 status code indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievepolicyidresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"value\": \"org.eclipse.ditto:the_policy_id\",\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Properties in Eclipse Ditto using JSON\nDESCRIPTION: This JSON snippet represents a command to modify the properties of a feature named 'accelerometer' in a thing's twin. It sets the x, y, and z coordinates along with the unit of measurement.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeatureproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"value\": {\n    \"x\": 3.141,\n    \"y\": 2.718,\n    \"z\": 1,\n    \"unit\": \"g\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyFeaturePropertyResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents the response to a command that modifies a feature property in Eclipse Ditto. It includes the topic, headers with a correlation ID, the path to the modified property, and a status code indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturepropertyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Connection via Piggyback Command\nDESCRIPTION: DevOps command for opening a connection. Triggers a ConnectionOpenedAnnouncement when executed.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:openConnection\",\n    \"connectionId\": \"<connectionID>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Modify Features Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the structure of a command to modify features of a thing in Eclipse Ditto. It includes the topic, headers, and path for the modification, along with the new features to be set.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyfeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"accelerometer\": {\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"g\"\n      }\n    },\n    \"gyroscope\": {\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"°/s\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Live Message with Multiple Conditions via HTTP POST\nDESCRIPTION: This HTTP POST request demonstrates sending a live alarm message with multiple conditions. It checks both the carbon monoxide level and the alarm confirmation status.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-11-04-live-message-conditions.md#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/2/things/org.eclipse.ditto:carbon-monoxide-alarm/inbox/mesages/co-alarm?condition=and(gt(features/carbon-monoxide-level/properties/ppm,10),eq(features/alarm/properties/confirmed,false))\n```\n\n----------------------------------------\n\nTITLE: Features Created Event in Eclipse Ditto\nDESCRIPTION: This snippet shows the event structure when features are created in Eclipse Ditto. It includes the topic and details of the created features.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createfeatures.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/events/featurescreated.md %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ditto Service Configuration Options\nDESCRIPTION: Command for retrieving available configuration options from a running Ditto instance using the DevOps API. This helps in identifying configurable parameters for different services.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/docker/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Substitute gateway with the service you are interested in\ncurl http://devops:foobar@localhost:8080/devops/config/gateway/?path=ditto\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thing Twin Command in Eclipse Ditto\nDESCRIPTION: A JSON structure representing the RetrieveThing command used to request a Thing's twin in Eclipse Ditto. It includes the topic with the thing ID, a correlation ID header for request tracking, and a root path.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievething.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Desired Properties Response Format in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON structure represents the response to a request for retrieving desired properties of a specific feature ('accelerometer') in Eclipse Ditto. The response includes a topic, correlation ID in headers, the path to the desired properties, the actual property values, and a status code of 200 indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeaturedesiredpropertiesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"value\": {\n    \"x\": 4,\n    \"y\": 3,\n    \"z\": 5,\n    \"unit\": \"g\"\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Target in Eclipse Ditto\nDESCRIPTION: JSON configuration for a Kafka target in Eclipse Ditto, including topic/key specification, subscription topics, and authorization context.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-kafka2.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"<kafka_topic>/<kafka_key>\",\n  \"topics\": [\n    \"_/_/things/twin/events\",\n    \"_/_/things/live/messages\"\n  ],\n  \"authorizationContext\": [\"ditto:outbound-auth-subject\"]\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Protocol Message Schema\nDESCRIPTION: JSON schema defining the structure of Ditto Protocol messages sent over WebSocket. Includes topic, headers, path and value fields.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-protocol-bindings-websocket.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<the topic>\",\n  \"headers\": {\n    \"correlation-id\": \"<a correlation-id>\",\n    \"a-header\": \"<header value>\"\n  },\n  \"path\": \"<the path>\",\n  \"value\": {\n    \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Representing AttributeModified Event in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet illustrates the structure of an AttributeModified event in Eclipse Ditto. It shows how changes to a thing's attributes are communicated, including the topic, headers, path, modified value, and revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/attributemodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"value\": {\n    \"latitude\": 44.673856,\n    \"longitude\": 8.261719\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Nested Thing Attributes with Compact Field Selector in Eclipse Ditto\nDESCRIPTION: Demonstrates a more compact way to retrieve multiple nested attributes ('attributes/complex(some,serialNo)') of a Thing using a field selector. The response is identical to the previous example.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"complex\": {\n      \"some\": false,\n      \"serialNo\": 4711\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Thing merged event at /policyId JSON structure in Eclipse Ditto\nDESCRIPTION: This JSON example shows the structure of a 'merged' event in Eclipse Ditto when a thing's policy ID is updated. The event includes the topic path, headers with content type, the specific path (/policyId), the new policy ID value, and metadata including revision number and timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergedpolicyid.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/policyId\",\n  \"value\": \"org.eclipse.ditto:the_policy_id\",\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Modify Policy ID Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the command structure for modifying the policy ID of a Thing. It includes the topic, headers, and path for the modification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifypolicyid.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"value\": \"org.eclipse.ditto:new-policy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Properties Response in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a ModifyFeaturePropertiesResponse in Eclipse Ditto. It includes the topic, headers, path, modified property values, and status code. The response indicates a successful modification of the 'accelerometer' feature properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturepropertiesresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"value\": {\n    \"x\": 3.141,\n    \"y\": 2.718,\n    \"z\": 1,\n    \"unit\": \"g\"\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Feature Properties Response in Eclipse Ditto\nDESCRIPTION: This snippet shows the response structure after merging feature properties in Eclipse Ditto. It includes the status and any relevant response data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeproperties.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/merge/mergefeaturepropertiesresponse.md %}{% endcapture %} {{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Including Modify Feature Properties Command in Markdown\nDESCRIPTION: This snippet includes the content of a Markdown file containing the modify feature properties command example.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyfeatureproperties.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: FeatureCreated Event Structure in JSON\nDESCRIPTION: Shows the JSON format of a FeatureCreated event when a new feature is added to a thing. The event includes the topic path, correlation headers, feature path, actual and desired properties, and revision number. The example demonstrates creating an accelerometer feature with x,y,z coordinates and unit measurements.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featurecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"value\": {\n    \"properties\": {\n      \"x\": 3.141,\n      \"y\": 2.718,\n      \"z\": 1,\n      \"unit\": \"g\"\n    },\n    \"desiredProperties\": {\n      \"x\": 4,\n      \"y\": 3,\n      \"z\": 5,\n      \"unit\": \"g\"\n    }\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Target Format in JSON\nDESCRIPTION: Example configuration for an HTTP target format, specifying the address format, topics to subscribe to, authorization context and header mapping.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-http.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"<http_verb>:<http_path>\",\n  \"topics\": [\n    \"_/_/things/twin/events\",\n    \"_/_/things/live/messages\"\n  ],\n  \"authorizationContext\": [\"ditto:outbound-auth-subject\"],\n  \"headerMapping\": {\n    \"content-type\": \"application/json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Policy Imports JSON Command Structure\nDESCRIPTION: Shows the JSON structure for modifying policy imports in Eclipse Ditto. The command allows specifying multiple policy references and their associated entry imports. The path '/imports' indicates this is targeting the imports section of a policy.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifyimports.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/imports\",\n  \"value\": {\n    \"org.eclipse.ditto:policy1\": { },\n    \"org.eclipse.ditto:policy2\": {\n      \"entries\": [ \"IMPORTED_ENTRY\" ]\n    },\n    \"org.eclipse.ditto:policy3\": {\n      \"entries\": [ \"YET_ANOTHER_IMPORTED_ENTRY\" ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SSE Stream Resumption Example\nDESCRIPTION: Example of SSE stream resumption using Last-Event-ID header, showing both request and response format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET http://localhost:8080/api/2/search/things?fields=thingId&option=sort(+thingId) HTTP/1.1\nAccept:        text/event-stream\nLast-Event-ID: ditto:device7152\n\nHTTTP/1.1 200 OK\nContent-Type: text/event-stream\n\ndata:{\"thingId\":\"ditto:device7153\"}\nid:ditto:device7153\n\ndata:{\"thingId\":\"ditto:device7154\"}\nid:ditto:device7154\n\ndata:{\"thingId\":\"ditto:device7155\"}\nid:ditto:device7155\n```\n\n----------------------------------------\n\nTITLE: Receiving Delete Thing Response in Eclipse Ditto\nDESCRIPTION: This is the response to a successful delete Thing command. It confirms the deletion of the Thing with the ID 'org.eclipse.ditto:fancy-thing'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletething.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entity at Specific Revision via HTTP API in Bash\nDESCRIPTION: Examples of using the HTTP API to retrieve things, policies, and connections at a specific historical revision by setting the 'at-historical-revision' header.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-history.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Access a thing:\ncurl -u ditto:ditto 'http://localhost:8080/api/2/things/org.eclipse.ditto:thing-1' \\\n  --header 'at-historical-revision: 1'\n  \n# Access a policy:\ncurl -u ditto:ditto 'http://localhost:8080/api/2/policies/org.eclipse.ditto:policy-1' \\\n  --header 'at-historical-revision: 1'\n  \n# Access a connection:\ncurl -u devops:foobar 'http://localhost:8080/api/2/connections/some-connection-1' \\\n  --header 'at-historical-revision: 1'\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyFeatureResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON snippet illustrates the structure of a ModifyFeatureResponse in Eclipse Ditto. It includes the topic, headers, path, value (with properties and desiredProperties), and status code. The response represents a successful modification of an 'accelerometer' feature with both current and desired property values.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeatureresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"value\": {\n    \"properties\": {\n      \"x\": 3.141,\n      \"y\": 2.718,\n      \"z\": 1,\n      \"unit\": \"g\"\n    },\n    \"desiredProperties\": {\n      \"x\": 4,\n      \"y\": 3,\n      \"z\": 5,\n      \"unit\": \"g\"\n    }\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Merging a Thing Command Structure\nDESCRIPTION: Command structure for merging an entire Thing using JSON merge patch format. The command contains topic, path, and value fields.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-merge.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field     | Value                                                                                                                                                              |\n|-----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------|\\n| **topic** | `<namespace>/<thingName>/things/<channel>/commands/merge`                                                                                                          |\n| **path**  | `/`                                                                                                                                                                |\n| **value** | The JSON value in [JSON merge patch](https://tools.ietf.org/html/rfc7396) format that is applied to the [Thing](basic-thing.html#thing) referenced in the `topic`. |\n```\n\n----------------------------------------\n\nTITLE: Merging Thing Attributes with Location Data in Eclipse Ditto\nDESCRIPTION: Example JSON payload for merging attributes of a Thing entity using the Eclipse Ditto API. The command updates location attributes with specific latitude and longitude coordinates using the merge patch content type.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergeattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"value\": {\n    \"location\": {\n      \"latitude\": 44.673856,\n      \"longitude\": 8.261719\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Tables for Header Interactions\nDESCRIPTION: Tables showing how response-required, requested-acks, and timeout headers interact across different APIs (HTTP, WebSocket, Connectivity) and their resulting behaviors.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-acknowledgements.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| API  | response-required | requested-acks | timeout   | Outcome |\n| ---  | ---               | ---            | ---       | ---     |\n| HTTP | false             | empty          | zero      | 202 Accepted immediately |\n| HTTP | false             | empty          | non-zero  | 202 Accepted immediately |\n| HTTP | false             | non-empty      | zero      | 400 Bad Request: timeout may not be zero if acknowledgements are requested |\n| HTTP | false             | non-empty      | non-zero  | 202 Accepted after receiving the requested acknowledgements |\n| HTTP | true              | empty          | zero      | 400 Bad Request: timeout may not be zero if response is required |\n| HTTP | true              | empty          | non-zero  | Response |\n| HTTP | true              | non-empty      | zero      | 400 Bad Request: timeout may not be zero if response is required |\n| HTTP | true              | non-empty      | non-zero  | Aggregated response and acknowledgements |\n```\n\n----------------------------------------\n\nTITLE: Thing Search Subscription Failed Message Structure\nDESCRIPTION: Defines the JSON structure for subscription failure messages in Eclipse Ditto. Shows a complete error response including subscription ID, error status code, error type, detailed message and description. The example illustrates an error case where an illegal argument was provided for subscription request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/generated/events/subscription-failed-event.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"_/_/things/twin/search/failed\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"subscriptionId\": \"24601\",\n    \"error\": {\n      \"status\": 400,\n      \"error\": \"thing-search:subscription.protocol.error\",\n      \"message\": \"Rule 3.9: While the Subscription is not cancelled, Subscription.request(long n) MUST signal onError with a java.lang.IllegalArgumentException if the argument is <= 0. The cause message SHOULD explain that non-positive request signals are illegal.\",\n      \"description\": \"The intent of this rule is to prevent faulty implementations to proceed operation without any exceptions being raised. Requesting a negative or 0 number of elements, since requests are additive, most likely to be the result of an erroneous calculation on the behalf of the Subscriber.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Search Protocol Flow in Eclipse Ditto\nDESCRIPTION: Illustration of the command flow from client to Ditto for a search query. The client sends a 'subscribe' command, followed by multiple 'request' commands and an optional 'cancel' command.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-search.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsubscribe request* cancel?\n```\n\n----------------------------------------\n\nTITLE: Conditional PUT Request with Header (HTTP API)\nDESCRIPTION: Demonstrates a conditional PUT request using an HTTP header to specify the condition. The condition checks if the lastModified timestamp is greater than a specified date.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-conditional-requests.md#2025-04-17_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X PUT -H 'Content-Type: application/json' -H 'condition: gt(features/temperature/properties/lastModified,\"2021-08-10T15:10:02.592Z\")' /api/2/things/org.eclipse.ditto:fancy-thing/features/temperature/properties/value -d 19.26\n```\n\n----------------------------------------\n\nTITLE: Querying a Specific State Value in Eclipse Ditto\nDESCRIPTION: This cURL command retrieves a specific feature property (cur_speed) of a Thing in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/intro-hello-world.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u ditto:ditto -X GET 'http://localhost:8080/api/2/things/org.eclipse.ditto:fancy-car/features/transmission/properties/cur_speed'\n```\n\n----------------------------------------\n\nTITLE: ModifyThing Command with Policy Copy by Thing Reference\nDESCRIPTION: Creates a new Thing with a Policy copied from another existing Thing's Policy. Uses a Thing reference to specify the source Policy.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifythingalternatives.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"_copyPolicyFrom\": \"{% raw %}{{ ref:things/com:acme:fancy-thing_52/policyId }}{% endraw %}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Search Query with Field Selection\nDESCRIPTION: HTTP GET request demonstrating partial response with specific field selection\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-search.md#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET .../search/things?filter=eq(attributes/location,\"living-room\")&fields=thingId,attributes/manufacturer\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure IoT Hub HTTP Connection\nDESCRIPTION: JSON configuration for establishing an HTTP connection to Azure IoT Hub for forwarding live messages as direct method calls. Includes JavaScript payload mapping for transforming Ditto protocol messages to IoT Hub direct method format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Azure IoT Hub HTTP\",\n  \"connectionType\": \"http-push\",\n  \"connectionStatus\": \"open\",\n  \"uri\": \"https://<hostname>:443\",\n  \"sources\": [],\n  \"targets\": [{\n    \"address\": \"POST:/twins/{{ thing:id }}/methods?api-version=2018-06-30\",\n    \"topics\": [\"_/_/things/live/messages\"],\n    \"authorizationContext\": [\"integration:ditto\"],\n    \"issuedAcknowledgementLabel\": \"live-response\",\n    \"headerMapping\": {},\n    \"payloadMapping\": [\"javascript\"]\n  }],\n  \"clientCount\": 1,\n  \"failoverEnabled\": true,\n  \"validateCertificates\": true,\n  \"processorPoolSize\": 5,\n  \"specificConfig\": {\n    \"parallelism\": \"1\"\n  },\n  \"mappingDefinitions\": {\n    \"javascript\": {\n      \"mappingEngine\": \"JavaScript\",\n      \"options\": {\n        \"incomingScript\": \"function mapToDittoProtocolMsg() {\\n  return undefined;\\n}\\n\",\n        \"outgoingScript\": \"function mapFromDittoProtocolMsg(\\n  namespace,\\n  name,\\n  group,\\n  channel,\\n  criterion,\\n  action,\\n  path,\\n  dittoHeaders,\\n  value,\\n  status,\\n  extra\\n) {\\n\\n  let headers = dittoHeaders;\\n  let payload = {\\n      \\\"methodName\\\": action,\\n      \\\"responseTimeoutInSeconds\\\": parseInt(dittoHeaders.timeout),\\n      \\\"payload\\\": value\\n  };\\n  let textPayload = JSON.stringify(payload);\\n  let bytePayload = null;\\n  let contentType = 'application/json';\\n\\n  return Ditto.buildExternalMsg(\\n    headers, // The external headers Object containing header values\\n    textPayload, // The external mapped String\\n    bytePayload, // The external mapped byte[]\\n    contentType // The returned Content-Type\\n  );\\n}\\n\",\n        \"loadBytebufferJS\": \"false\",\n        \"loadLongJS\": \"false\"\n      }\n    }\n  },\n  \"credentials\": {\n    \"type\": \"hmac\",\n    \"algorithm\": \"az-sasl\",\n    \"parameters\": {\n      \"sharedKeyName\": \"<shared-access-policy-name>\",\n      \"sharedKey\": \"<shared-access-key>\",\n      \"endpoint\": \"<hostname>\"\n    }\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Things Feature Not Modifiable in Eclipse Ditto\nDESCRIPTION: Example JSON response returned when a user tries to modify a Thing feature without sufficient permissions. The response includes the error code 'things:feature.notmodifiable', a descriptive message, and a suggestion for troubleshooting. The response indicates WRITE permission is required for the operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"things:feature.notmodifiable\",\n    \"message\": \"The Feature with ID 'accelerometer' on the Thing with ID 'org.eclipse.ditto:fancy-thing' could not be modified as the requester had insufficient permissions to modify it (WRITE is required).\",\n    \"description\": \"Check if the ID of the Thing and the ID of your requested Feature was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Ditto-Hono Integration with Telemetry Data in Bash\nDESCRIPTION: These curl commands demonstrate how to send different telemetry data (temperature, humidity) to Eclipse Hono HTTP adapter, which will then be processed by Ditto and update the digital twin. Each telemetry message increases the connection metrics counts.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST -i -u demo-device-auth@org.eclipse.ditto:demo-device-password -H 'Content-Type: application/json' -d '{\"temp\": 14.51}' https://hono.eclipseprojects.io:8080/telemetry\n$ curl -X POST -i -u demo-device-auth@org.eclipse.ditto:demo-device-password -H 'Content-Type: application/json' -d '{\"hum\": 52.17}'  https://hono.eclipseprojects.io:8080/telemetry\n\n$ curl -X POST -i -u demo-device-auth@org.eclipse.ditto:demo-device-password -H 'Content-Type: application/json' -d '{\"temp\": 23.07, \"hum\": 45.85}'  https://hono.eclipseprojects.io:8080/telemetry\n```\n\n----------------------------------------\n\nTITLE: ModifyPolicyResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a response to a policy modification command in Eclipse Ditto. It includes the topic, headers with correlation ID, path, policy details with entries containing subjects and resources, and status code indicating the operation result (201 Created).\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifypolicyresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"entries\": {\n      \"the_label\": {\n        \"subjects\": {\n          \"google:the_subjectid\": {\n            \"type\": \"yourSubjectTypeDescription\"\n          }\n        },\n        \"resources\": {\n          \"thing:/the_resource_path\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": []\n          }\n        }\n      }\n    }\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Ditto Thing JSON Structure\nDESCRIPTION: Example of a Thing model in Ditto showing basic structure with attributes and features.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"the.namespace:the-thing-id\",\n  \"policyId\": \"the.namespace:the-policy-id\",\n  \"attributes\": {\n    \"location\": \"kitchen\"\n  },\n  \"features\": {\n    \"transmission\": {\n       \"properties\": {\n         \"cur_speed\": 90\n       }\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FeaturePropertiesCreated Event Structure in JSON\nDESCRIPTION: Example of a FeaturePropertiesCreated event structure that gets emitted when properties are created for a feature called 'accelerometer' within a thing. The event includes topic information, headers with correlation ID, path, property values, and revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featurepropertiescreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"value\": {\n    \"x\": 3.141,\n    \"y\": 2.718,\n    \"z\": 1,\n    \"unit\": \"g\"\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Thing Merged Event Structure in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents a Thing merged event in Eclipse Ditto. It includes the topic, headers, path, merged value, revision number, and timestamp. The event specifically targets the /attributes path and merges location data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergedattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/attributes\",\n  \"value\": {\n    \"location\": {\n      \"latitude\": 44.673856,\n      \"longitude\": 8.261719\n    }\n  },\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Policy ID Created Event in Eclipse Ditto\nDESCRIPTION: This snippet illustrates the event generated when a new policy ID is created for a Thing. It includes the topic, headers, and the newly created policy ID.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifypolicyid.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"value\": \"org.eclipse.ditto:new-policy\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Merged Attributes Event Structure\nDESCRIPTION: Event structure emitted after all attributes of a Thing have been merged. It includes topic, path, and value fields with the applied JSON merge patch.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-merge.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Field     | Value                                                                                                                                  |\n|-----------|----------------------------------------------------------------------------------------------------------------------------------------|\n| **topic** | `<namespace>/<thingName>/things/<channel>/events/merged`                                                                               |\n| **path**  | `/attributes`                                                                                                                          |\n| **value** | The [JSON merge patch](https://tools.ietf.org/html/rfc7396) that was applied to the attributes of the Thing referenced in the `topic`. |\n```\n\n----------------------------------------\n\nTITLE: Event for Merged Feature Property in Eclipse Ditto\nDESCRIPTION: This snippet shows the event structure that is generated when a feature property is successfully merged. It includes details about the merged property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeproperty.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/mergedfeatureproperty.md %}{% endcapture %} {{ event |\nmarkdownify }}\n```\n\n----------------------------------------\n\nTITLE: Create/Modify Thing Response Example\nDESCRIPTION: Protocol response structure for successful Thing modification, returning status code 204 without a value field.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-create-or-modify.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<thingName>/things/<channel>/commands/modify\",\n  \"path\": \"/\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: RetrieveSubjectsResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: JSON structure representing a successful response to retrieve subjects from a policy entry in Eclipse Ditto. The response includes the policy ID in the topic, correlation ID in headers, the path to the subjects, the value containing subject entries, and a 200 status code indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrievesubjectsresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects\",\n  \"value\": {\n    \"google:the_subjectid\": {\n      \"type\": \"yourSubjectTypeDescription\"\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AMQP 0.9.1 Source Format\nDESCRIPTION: JSON configuration for defining AMQP 0.9.1 sources including queue names and authorization context.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-amqp091.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addresses\": [\n    \"<queue_name>\",\n    \"...\"\n  ],\n  \"authorizationContext\": [\"ditto:inbound-auth-subject\", \"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Attributes JSON Structure\nDESCRIPTION: This snippet represents a JSON object used to modify the attributes of a twin by specifying the command topic, headers with a correlation ID, the path of the attributes to modify, and the new values for location attributes including latitude and longitude.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"value\": {\n    \"location\": {\n      \"latitude\": 44.673856,\n      \"longitude\": 8.261719\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Ditto API with Generated Token\nDESCRIPTION: This curl command demonstrates how to use the generated JWT token to authenticate a POST request to the Ditto API for creating a new thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2019-08-28-openid-connect.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  http://localhost:8080/api/2/things \\\n  -H 'Authorization: Bearer <JWT>' \\\n  -H 'Content-Type: application/json' \\\n  -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Merging Thing Definition in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet represents a Thing merged event in Eclipse Ditto. It shows the event structure when the definition of a Thing is updated or removed. The event includes the topic, headers, path, value, revision, and timestamp of the change.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergeddeletethingdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/definition\",\n  \"value\": null,\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Subjects in Eclipse Ditto Policy Entry using JSON\nDESCRIPTION: This JSON snippet illustrates the structure of a ModifySubjects command in Eclipse Ditto. It is used to modify subjects within a specific policy entry. The command includes the policy ID, entry label, and the subject to be modified or added.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifysubjects.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects\",\n  \"value\": {\n    \"google:the_subjectid\": {\n      \"__schemaVersion\": 2,\n      \"type\": \"yourSubjectTypeDescription\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Properties for Accelerometer in JSON\nDESCRIPTION: This JSON snippet represents a merge command for updating the properties of an accelerometer 'thing' in the Eclipse Ditto framework. It specifies the target topic, headers for content type and correlation id, the path to the properties, and the values to be merged, which include x, y, z coordinates and unit of measurement. The expected input should conform to the application/merge-patch+json content type, and it outputs the updated properties of the thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeatureproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"topic\":\"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\"headers\":{\"content-type\":\"application/merge-patch+json\",\"correlation-id\":\"<command-correlation-id>\"},\"path\":\"/features/accelerometer/properties\",\"value\":{\"x\":3.141,\"y\":2.718,\"z\":1,\"unit\":\"g\"}}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Property in Eclipse Ditto using JSON\nDESCRIPTION: This JSON structure represents a ModifyFeatureProperty command in Eclipse Ditto. It is used to modify a specific property of a feature for a thing. The command targets the 'x' property of the 'accelerometer' feature, setting its value to 42.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeatureproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Feature Properties Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the structure of a command to modify feature properties in Eclipse Ditto. It includes the topic, path, and value to be updated.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyfeatureproperties.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Deleting Attributes via Merge Command in JSON\nDESCRIPTION: This JSON snippet specifies a merge command to delete attributes from a specified twin in Eclipse Ditto. It includes headers for content-type and correlation-ID, along with the specific path of '/attributes' indicating the target for deletion. The 'value' is set to null to signify the deletion of the attribute.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeleteattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Building JsonArray with Builder\nDESCRIPTION: Demonstrates how to build a JsonArray using JsonArrayBuilder, which is good practice for initially building a JsonArray or for making bigger modifications. The example also shows how to retrieve a value from the JsonArray using the get() method.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nJsonArray jsonArray = JsonFactory.newArrayBuilder()\n    .add(\"foo\")\n    .add(\"bar\")\n    .add(\"baz\")\n    .build();\n\nJsonValue bar = jsonArray.get(1).orElse(null);\n```\n\n----------------------------------------\n\nTITLE: Receiving Modify Features Response in Eclipse Ditto\nDESCRIPTION: This snippet illustrates the response structure when a modify features command is successfully executed in Eclipse Ditto. It includes the topic, headers, and status code of the response.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyfeatures.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Context in DevOps Commands\nDESCRIPTION: Example of how to specify the authorization context for DevOps Commands in Eclipse Ditto. This snippet demonstrates using a basic auth user 'ditto' with the 'nginx:' prefix.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-auth.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nnginx:ditto\n```\n```\n\n----------------------------------------\n\nTITLE: Changing Log Level for All Services - JSON\nDESCRIPTION: This snippet demonstrates how to change the log level for the logger 'org.eclipse.ditto' across all services by sending a PUT request to the '/devops/logging' endpoint with the specified payload in JSON format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"logger\": \"org.eclipse.ditto\",\n    \"level\": \"debug\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Attribute Modification Response in Ditto\nDESCRIPTION: This JSON snippet represents the response received after successfully modifying a thing attribute. It contains the topic indicating the command, headers with correlation ID, the path of the modified attribute, and a status code of 204 indicating successful modification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyattributeresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Header Mapping for MQTT in Eclipse Ditto\nDESCRIPTION: JSON configuration for mapping MQTT-specific headers to custom headers in Eclipse Ditto. Demonstrates mapping of MQTT topic and QoS value.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headerMapping\": {\n    \"topic\": \"{%raw%}{{ header:mqtt.topic }}{%endraw%}\",\n    \"the-qos\": \"{%raw%}{{ header:mqtt.qos }}{%endraw%}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Property Modified Event in Eclipse Ditto\nDESCRIPTION: This JSON snippet illustrates the event structure generated when a feature property is modified in Eclipse Ditto. It includes the thing ID, feature ID, and the modified property details.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyproperty.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": 42,\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BaSyx AAS Server Connection in Ditto using Curl\nDESCRIPTION: This curl command sends a POST request to create a new connection in Ditto to a BaSyx AAS server. It includes connection details, JavaScript mappers for data transformation, and filtering rules for message processing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -u devops:foobar -H 'Content-Type: application/json' --data-binary '{\n    \"targetActorSelection\": \"/system/sharding/connection\",\n    \"headers\": {\n      \"aggregate\": false\n    },\n    \"piggybackCommand\": {\n      \"type\": \"connectivity.commands:createConnection\",\n      \"connection\": {\n        \"id\": \"basyxserver-http-connection\",\n        \"connectionType\": \"http-push\",\n        \"connectionStatus\": \"open\",\n        \"uri\": \"<basyx-server-instance-url>:4001\",\n        \"failoverEnabled\": true,\n        \"mappingDefinitions\": {\n          \"mappingforShell\": {\n            \"mappingEngine\": \"JavaScript\",\n            \"options\": {\n              \"outgoingScript\": \"function mapFromDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value, status, extra) {\\n  let headers = dittoHeaders;\\n  let textPayload = JSON.stringify({\\n    conceptDictionary: [],\\n    identification: {\\n      idType: '\"'Custom'\"',\\n      id: namespace\\n    },\\n    idShort: namespace,\\n    dataSpecification: [],\\n    modelType: {\\n      name: '\"'AssetAdministrationShell'\"'\\n    },\\n    asset: {\\n      identification: {\\n        idType: '\"'Custom'\"',\\n        id: namespace + '\"'-asset'\"'\\n      },\\n      idShort: namespace + '\"'-asset'\"',\\n      kind: '\"'Instance'\"',\\n      dataSpecification: [],\\n      modelType: {\\n        name: '\"'Asset'\"'\\n      },\\n      embeddedDataSpecifications: []\\n    },\\n    embeddedDataSpecifications: [],\\n    views: [],\\n    submodels: []\\n  });\\n  let bytePayload = null;\\n  let contentType = '\"'application/json'\"';\\n  return Ditto.buildExternalMsg(headers, textPayload, bytePayload, contentType);}\"            \n            }\n          },\n          \"mappingforSubmodel\": {\n            \"mappingEngine\": \"JavaScript\",\n            \"options\": {\n                \"outgoingScript\": \"function mapFromDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value, status, extra) {\\n  \\n  let feature_id = path.split('\"'/'\"').slice(2);\\n  let headers = dittoHeaders;\\n  let textPayload = JSON.stringify(\\n    {\\n      parent: {\\n        keys: [\\n          {\\n            idType: '\"'Custom'\"',\\n            type: '\"'AssetAdministrationShell'\"',\\n            value: namespace,\\n            local: true\\n          }\\n        ]\\n      },\\n      identification: {\\n        idType: '\"'Custom'\"',\\n        id: name+'\"'_'\"'+feature_id\\n      },\\n      idShort: name+'\"'_'\"'+feature_id,\\n      kind: '\"'Instance'\"',\\n      dataSpecification: [],\\n      modelType: {\\n        name: '\"'Submodel'\"'\\n      },\\n      embeddedDataSpecifications: [],\\n      submodelElements: []\\n    }\\n\\n  );\\n  let bytePayload = null;\\n  let contentType = '\"'application/json'\"';\\n  return Ditto.buildExternalMsg(headers, textPayload, bytePayload, contentType);}\"\\n            }\n          },\n          \"mappingforSubmodelElement\": {\n            \"mappingEngine\": \"JavaScript\",\n            \"options\": {\n              \"outgoingScript\": \"function mapFromDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value, status, extra) {\\n  let property_id = path.split('\"'/'\"').slice(3).join('\"'_'\"');\\n  let feature_id = path.split('\"'/'\"').slice(2,3);\\n  let headers = dittoHeaders;\\n  let dataType = typeof value;\\n  dataType = mapDataType(dataType)\\n\\n  function mapDataType(dataType) {\\n    switch (dataType) {\\n        case '\"'undefined'\"':\\n        return '\"'Undefined'\"';\\n        case '\"'boolean'\"':\\n        return '\"'boolean'\"';\\n        case '\"'number'\"':\\n        return '\"'int'\"';\\n        case '\"'string'\"':\\n        return '\"'string'\"';\\n        case '\"'symbol'\"':\\n        return '\"'Symbol'\"';\\n        case '\"'bigint'\"':\\n        return '\"'BigInt'\"';\\n        case '\"'object'\"':\\n        return '\"'string'\"';\\n        case '\"'function'\"':\\n        return '\"'Function'\"';\\n        default:\\n        return '\"'Unknown'\"';\\n    }\\n  }\\n  let textPayload = JSON.stringify(\\n  {\\n    parent: {\\n      keys: [\\n        {\\n          idType: '\"'Custom'\"',\\n          type: '\"'Submodel'\"',\\n          value: name+'\"'_'\"'+feature_id,\\n          local: true\\n        }\\n      ]\\n    },\\n    idShort: property_id,\\n    kind: '\"'Instance'\"',\\n    valueType: dataType,\\n    modelType: {\\n      name: '\"'Property'\"'\\n    },\\n    value: value\\n  }\\n  );\\n  let bytePayload = null;\\n  let contentType = '\"'application/json'\"';\\n  return Ditto.buildExternalMsg(headers, textPayload, bytePayload, contentType);}\"\\n            }\n          }\n        },\n        \"sources\": [],\n        \"targets\": [\n          {\n            \"address\": \"PUT:/aasServer/shells/{%raw%}{{ thing:namespace }}{%endraw%}\",\n            \"headerMapping\": {\n              \"content-type\": \"{%raw%}{{ header:content-type }}{%endraw%}\"\n            },\n            \"authorizationContext\": [\"nginx:ditto\"],\n            \"topics\": [\n              \"_/_/things/twin/events?filter=and(in(topic:action,'\"'created'\"'),eq(resource:path,'\"'/'\"'))\"\n            ],\n            \"payloadMapping\": [\n              \"mappingforShell\"\n            ]\n          },\n          {\n            \"address\": \"PUT:/aasServer/shells/{%raw%}{{ thing:namespace }}{%endraw%}/aas/submodels/{%raw%}{{ thing:name }}{%endraw%}_{%raw%}{{ resource:path | fn:substring-after('\"'/features/'\"') }}{%endraw%}\",\n            \"headerMapping\": {\n              \"content-type\": \"{%raw%}{{ header:content-type }}{%endraw%}\"\n            },\n            \"authorizationContext\": [\"nginx:ditto\"],\n            \"topics\": [\n              \"_/_/things/twin/events?filter=and(in(topic:action,'\"'created'\"'),not(eq(resource:path,'\"'/features'\"')),like(resource:path,'\"'/features*'\"'),not(like(resource:path,'\"'*properties*'\"')))\"\n            ],\n            \"payloadMapping\": [\n              \"mappingforSubmodel\"\n            ]\n          },\n          {\n            \"address\": \"PUT:/aasServer/shells/{%raw%}{{ thing:namespace }}{%endraw%}/aas/submodels/{%raw%}{{ thing:name }}{%endraw%}_{%raw%}{{ resource:path | fn:substring-after('\"'/features/'\"') | fn:substring-before('\"'/properties'\"') }}{%endraw%}/submodel/submodelElements/properties_{%raw%}{{ resource:path | fn:substring-after('\"'/properties/'\"') | fn:replace('\"'/'\"','\"'_'\"') }}{%endraw%}\",\n            \"headerMapping\": {\n              \"content-type\": \"{%raw%}{{ header:content-type }}{%endraw%}\"\n            },\n            \"authorizationContext\": [\"nginx:ditto\"],\n            \"topics\": [\n              \"_/_/things/twin/events?filter=and(in(topic:action,'\"'modified'\"'),not(eq(resource:path,'\"'/features'\"')),like(resource:path,'\"'/features*'\"'),like(resource:path,'\"'*properties*'\"'),not(like(resource:path,'\"'*properties'\"')))\"\n            ],\n            \"payloadMapping\": [\n              \"mappingforSubmodelElement\"\n            ]\n          }\n        ]\n      }\n    }\n  }' <ditto-instance-url>/devops/piggyback/connectivity\n```\n\n----------------------------------------\n\nTITLE: Receiving Feature Details from Eclipse Ditto API - JSON\nDESCRIPTION: This JSON response structure provides detailed information about a feature, including its context, versioning, properties, actions, and required forms for interaction.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration-example.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": [\n    \"https://www.w3.org/2022/wot/td/v1.1\",\n    {\n      \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\"\n    }\n  ],\n  \"title\": \"Dimmable Colored Lamp\",\n  \"version\": {\n    \"model\": \"1.0.0\",\n    \"instance\": \"1.0.0\"\n  },\n  \"id\": \"urn:io.eclipseprojects.ditto:floor-lamp-0815/features/Spot1\",\n  \"base\": \"https://ditto.eclipseprojects.io/api/2/things/io.eclipseprojects.ditto:floor-lamp-0815/features/Spot1\",\n  \"links\": [\n    {\n      \"rel\": \"collection\",\n      \"href\": \"https://ditto.eclipseprojects.io/api/2/things/io.eclipseprojects.ditto:floor-lamp-0815\",\n      \"type\": \"application/td+json\"\n    },\n    {\n      \"rel\": \"type\",\n      \"href\": \"https://eclipse-ditto.github.io/ditto-examples/wot/models/dimmable-colored-lamp-1.0.0.tm.jsonld\",\n      \"type\": \"application/tm+json\"\n    }\n  ],\n  \"security\": \"basic_sc\",\n  \"securityDefinitions\": {\n    \"basic_sc\": {\n      \"in\": \"header\",\n      \"scheme\": \"basic\"\n    }\n  },\n  \"support\": \"https://www.eclipse.dev/ditto/\",\n  \"created\": \"2022-02-16T11:48:22.192286Z\",\n  \"forms\": [\n    {\n      \"op\": \"readallproperties\",\n      \"href\": \"/properties{?channel,timeout}\",\n      \"htv:methodName\": \"GET\",\n      \"contentType\": \"application/json\",\n      \"additionalResponses\": [\n        {\n          \"success\": false,\n          \"schema\": \"dittoError\"\n        }\n      ]\n    },\n    {\n      \"op\": \"readmultipleproperties\",\n      \"href\": \"/properties{?fields,channel,timeout}\",\n      \"htv:methodName\": \"GET\",\n      \"contentType\": \"application/json\",\n      \"additionalResponses\": [\n        {\n          \"success\": false,\n          \"schema\": \"dittoError\"\n        }\n      ]\n    },\n    {\n      \"op\": \"writeallproperties\",\n      \"href\": \"/properties{?channel,timeout,response-required}\",\n      \"htv:methodName\": \"PUT\",\n      \"contentType\": \"application/json\",\n      \"additionalResponses\": [\n        {\n          \"success\": false,\n          \"schema\": \"dittoError\"\n        }\n      ]\n    },\n    {\n      \"op\": \"writemultipleproperties\",\n      \"href\": \"/properties{?channel,timeout,response-required}\",\n      \"htv:methodName\": \"PATCH\",\n      \"contentType\": \"application/merge-patch+json\",\n      \"additionalResponses\": [\n        {\n          \"success\": false,\n          \"schema\": \"dittoError\"\n        }\n      ]\n    },\n    {\n      \"op\": [\n        \"observeallproperties\",\n        \"unobserveallproperties\"\n      ],\n      \"href\": \"/properties\",\n      \"htv:methodName\": \"GET\",\n      \"subprotocol\": \"sse\",\n      \"contentType\": \"text/event-stream\",\n      \"additionalResponses\": [\n        {\n          \"success\": false,\n          \"schema\": \"dittoError\"\n        }\n      ]\n    },\n    {\n      \"op\": [\n        \"subscribeallevents\",\n        \"unsubscribeallevents\"\n      ],\n      \"href\": \"/outbox/messages\",\n      \"htv:methodName\": \"GET\",\n      \"subprotocol\": \"sse\",\n      \"contentType\": \"text/event-stream\",\n      \"additionalResponses\": [\n        {\n          \"success\": false,\n          \"schema\": \"dittoError\"\n        }\n      ]\n    }\n  ],\n  \"properties\": {\n    \"dimmer-level\": {\n      \"@type\": \"om2:Percentage\",\n      \"title\": \"Dimmer level\",\n      \"type\": \"number\",\n      \"unit\": \"om2:percent\",\n      \"minimum\": 0.0,\n      \"maximum\": 1.0,\n      \"multipleOf\": 0.01,\n      \"observable\": true,\n      \"forms\": [\n        {\n          \"op\": \"readproperty\",\n          \"href\": \"/properties/dimmer-level{?channel,timeout}\",\n          \"htv:methodName\": \"GET\",\n          \"contentType\": \"application/json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        },\n        {\n          \"op\": \"writeproperty\",\n          \"href\": \"/properties/dimmer-level{?channel,timeout,response-required}\",\n          \"htv:methodName\": \"PUT\",\n          \"contentType\": \"application/json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        },\n        {\n          \"op\": \"writeproperty\",\n          \"href\": \"/properties/dimmer-level{?channel,timeout,response-required}\",\n          \"htv:methodName\": \"PATCH\",\n          \"contentType\": \"application/merge-patch+json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        },\n        {\n          \"op\": [\n            \"observeproperty\",\n            \"unobserveproperty\"\n          ],\n          \"href\": \"/properties/dimmer-level\",\n          \"htv:methodName\": \"GET\",\n          \"subprotocol\": \"sse\",\n          \"contentType\": \"text/event-stream\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        }\n      ]\n    },\n    \"color\": {\n      \"title\": \"Color\",\n      \"description\": \"The current color.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"r\": {\n          \"title\": \"Red\",\n          \"type\": \"integer\",\n          \"minimum\": 0,\n          \"maximum\": 255\n        },\n        \"g\": {\n          \"title\": \"Green\",\n          \"type\": \"integer\",\n          \"minimum\": 0,\n          \"maximum\": 255\n        },\n        \"b\": {\n          \"title\": \"Blue\",\n          \"type\": \"integer\",\n          \"minimum\": 0,\n          \"maximum\": 255\n        }\n      },\n      \"required\": [\n        \"r\",\n        \"g\",\n        \"b\"\n      ],\n      \"observable\": true,\n      \"forms\": [\n        {\n          \"op\": \"readproperty\",\n          \"href\": \"/properties/color{?channel,timeout}\",\n          \"htv:methodName\": \"GET\",\n          \"contentType\": \"application/json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        },\n        {\n          \"op\": \"writeproperty\",\n          \"href\": \"/properties/color{?channel,timeout,response-required}\",\n          \"htv:methodName\": \"PUT\",\n          \"contentType\": \"application/json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        },\n        {\n          \"op\": \"writeproperty\",\n          \"href\": \"/properties/color{?channel,timeout,response-required}\",\n          \"htv:methodName\": \"PATCH\",\n          \"contentType\": \"application/merge-patch+json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        },\n        {\n          \"op\": [\n            \"observeproperty\",\n            \"unobserveproperty\"\n          ],\n          \"href\": \"/properties/color\",\n          \"htv:methodName\": \"GET\",\n          \"subprotocol\": \"sse\",\n          \"contentType\": \"text/event-stream\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        }\n      ]\n    },\n    \"on\": {\n      \"title\": \"On\",\n      \"description\": \"Whether the switch is on or off.\",\n      \"type\": \"boolean\",\n      \"observable\": true,\n      \"forms\": [\n        {\n          \"op\": \"readproperty\",\n          \"href\": \"/properties/on{?channel,timeout}\",\n          \"htv:methodName\": \"GET\",\n          \"contentType\": \"application/json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        },\n        {\n          \"op\": \"writeproperty\",\n          \"href\": \"/properties/on{?channel,timeout,response-required}\",\n          \"htv:methodName\": \"PUT\",\n          \"contentType\": \"application/json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        },\n        {\n          \"op\": \"writeproperty\",\n          \"href\": \"/properties/on{?channel,timeout,response-required}\",\n          \"htv:methodName\": \"PATCH\",\n          \"contentType\": \"application/merge-patch+json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        },\n        {\n          \"op\": [\n            \"observeproperty\",\n            \"unobserveproperty\"\n          ],\n          \"href\": \"/properties/on\",\n          \"htv:methodName\": \"GET\",\n          \"subprotocol\": \"sse\",\n          \"contentType\": \"text/event-stream\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        }\n      ]\n    }\n  },\n  \"actions\": {\n    \"toggle\": {\n      \"title\": \"Toggle\",\n      \"description\": \"Toggles/inverts the current 'on' state.\",\n      \"output\": {\n        \"title\": \"New 'on' state\",\n        \"type\": \"boolean\"\n      },\n      \"forms\": [\n        {\n          \"op\": \"invokeaction\",\n          \"href\": \"/inbox/messages/toggle{?timeout,response-required}\",\n          \"htv:methodName\": \"POST\",\n          \"contentType\": \"application/json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        }\n      ]\n    },\n    \"switch-on-for-duration\": {\n      \"title\": \"Switch on for duration\",\n      \"description\": \"Switches the switchable on for a given duration, then switches back to the previous state.\",\n      \"input\": {\n        \"@type\": \"time:Duration\",\n        \"title\": \"Duration in seconds\",\n        \"type\": \"integer\",\n        \"unit\": \"time:seconds\"\n      },\n      \"forms\": [\n        {\n          \"op\": \"invokeaction\",\n          \"href\": \"/inbox/messages/switch-on-for-duration{?timeout,response-required}\",\n          \"htv:methodName\": \"POST\",\n          \"contentType\": \"application/json\",\n          \"additionalResponses\": [\n            {\n              \"success\": false,\n              \"schema\": \"dittoError\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Merged Event JSON Structure\nDESCRIPTION: Example of a Thing merged event payload showing the complete structure including topic, headers, path, value object containing thing details, revision and timestamp. The event represents merging of thing properties like thingId, policyId, definition, attributes and features at the root path.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergedthing.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"definition\": \"org.eclipse.ditto:SomeModel:1.0.0\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"definition\": [\n          \"org.eclipse.ditto:accelerometer:1.0.0\"\n        ],\n        \"properties\": {\n          \"x\": 3.141,\n          \"y\": 2.718,\n          \"z\": 1,\n          \"unit\": \"g\"\n        }\n      }\n    }\n  },\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FeaturePropertiesModified Event Structure in JSON\nDESCRIPTION: This JSON structure represents a FeaturePropertiesModified event in Eclipse Ditto. It includes the topic, correlation ID, path to the modified feature properties, the new property values, and the revision number. This event is typically used to notify subscribers about changes to specific feature properties of a thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featurepropertiesmodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"value\": {\n    \"x\": 3.141,\n    \"y\": 2.718,\n    \"z\": 1,\n    \"unit\": \"g\"\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Deleted Event in Eclipse Ditto\nDESCRIPTION: This event is published when a Thing is successfully deleted. It includes the Thing ID and revision number of the deletion.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletething.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Thing Command Response JSON Structure\nDESCRIPTION: This JSON snippet represents the structure of a command response for merging things in the Eclipse Ditto project. It includes key attributes such as 'topic', 'headers', 'path', and 'status', crucial for communication between components. The response should conform to this structure to ensure proper handling of merge operations.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeaturedesiredpropertyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Feature Definition Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the command structure for merging a feature definition in Eclipse Ditto. It includes the topic, headers, and path for the merge operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergefeaturedefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergefeaturedefinition.md %}{% endcapture %} {{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: ThingModified Event JSON Structure in Eclipse Ditto\nDESCRIPTION: JSON structure representing a ThingModified event in Eclipse Ditto. This event is published when a Thing is modified and includes the Thing's ID, policy, attributes and features information. The event message also contains metadata such as topic path, correlation ID and revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/thingmodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"properties\": {\n          \"x\": 3.141,\n          \"y\": 2.718,\n          \"z\": 1,\n          \"unit\": \"g\"\n        },\n        \"desiredProperties\": {\n          \"x\": 4,\n          \"y\": 3,\n          \"z\": 5,\n          \"unit\": \"g\"\n        }\n      }\n    }\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Feature Deletion Response in Eclipse Ditto JSON\nDESCRIPTION: This JSON snippet represents the response for a feature deletion command in Eclipse Ditto. It includes the topic indicating the command path, a correlation ID to match requests with responses, the specific feature path being deleted, and the HTTP status code indicating success. No additional dependencies are required as this is a structured message format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeatureresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific MQTT Connection Settings in Eclipse Ditto\nDESCRIPTION: JSON configuration for specifying additional MQTT client settings in Eclipse Ditto, including client ID, reconnection behavior, session cleaning, and last will message.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"mqtt-example-connection-123\",\n  \"connectionType\": \"mqtt\",\n  \"connectionStatus\": \"open\",\n  \"failoverEnabled\": true,\n  \"uri\": \"tcp://test.mosquitto.org:1883\",\n  \"specificConfig\": {\n    \"clientId\": \"my-awesome-mqtt-client-id\",\n    \"reconnectForRedelivery\": false,\n    \"cleanSession\": false,\n    \"separatePublisherClient\": false,\n    \"publisherId\": \"my-awesome-mqtt-publisher-client-id\",\n    \"reconnectForRedeliveryDelay\": \"5s\",\n    \"lastWillTopic\": \"my/last/will/topic\",\n    \"lastWillQos\": 1,\n    \"lastWillRetain\": false,\n    \"lastWillMessage\": \"my last will message\"\n  },\n  \"sources\": [\"...\"],\n  \"targets\": [\"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Example\nDESCRIPTION: Provides a JSON example demonstrating various environment configurations for the Ditto UI. It includes settings for different Ditto instances (local, IDE, sandbox) and showcases the configuration of authentication methods (Basic, Bearer, Pre-Authenticated, and OIDC) within the `authSettings` property. It also includes configurations for OpenID Connect providers.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/user-interface.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"local_ditto\": {\n    \"api_uri\": \"http://localhost:8080\",\n    \"ditto_version\": 3,\n    \"disablePolicies\": false,\n    \"disableConnections\": false,\n    \"disableOperations\": false,\n    \"authSettings\": {\n      \"main\": {\n        \"method\": \"basic\",\n        \"oidc\": {\n          \"enabled\": false\n        },\n        \"basic\": {\n          \"enabled\": true,\n          \"defaultUsernamePassword\": \"ditto:ditto\"\n        },\n        \"bearer\": {\n          \"enabled\": true\n        },\n        \"pre\": {\n          \"enabled\": false,\n          \"defaultDittoPreAuthenticatedUsername\": null\n        }\n      },\n      \"devops\": {\n        \"method\": \"basic\",\n        \"oidc\": {\n          \"enabled\": false\n        },\n        \"basic\": {\n          \"enabled\": true,\n          \"defaultUsernamePassword\": \"devops:foobar\"\n        },\n        \"bearer\": {\n          \"enabled\": true\n        }\n      },\n      \"oidc\": {\n      }\n    }\n  },\n  \"local_ditto_ide\": {\n    \"api_uri\": \"http://localhost:8080\",\n    \"ditto_version\": 3,\n    \"disablePolicies\": false,\n    \"disableConnections\": false,\n    \"disableOperations\": false,\n    \"authSettings\": {\n      \"main\": {\n        \"method\": \"pre\",\n        \"oidc\": {\n          \"enabled\": false\n        },\n        \"basic\": {\n          \"enabled\": true,\n          \"defaultUsernamePassword\": null\n        },\n        \"bearer\": {\n          \"enabled\": true\n        },\n        \"pre\": {\n          \"enabled\": false,\n          \"defaultDittoPreAuthenticatedUsername\": \"pre:ditto\"\n        }\n      },\n      \"devops\": {\n        \"method\": \"basic\",\n        \"oidc\": {\n          \"enabled\": false\n        },\n        \"basic\": {\n          \"enabled\": true,\n          \"defaultUsernamePassword\": \"devops:foobar\"\n        },\n        \"bearer\": {\n          \"enabled\": true\n        }\n      },\n      \"oidc\": {\n      }\n    }\n  },\n  \"ditto_sandbox\": {\n    \"api_uri\": \"https://ditto.eclipseprojects.io\",\n    \"ditto_version\": 3,\n    \"disablePolicies\": false,\n    \"disableConnections\": true,\n    \"disableOperations\": true,\n    \"authSettings\": {\n      \"main\": {\n        \"method\": \"basic\",\n        \"oidc\": {\n          \"enabled\": true,\n          \"defaultProvider\": \"fake\"\n        },\n        \"basic\": {\n          \"enabled\": true,\n          \"defaultUsernamePassword\": \"ditto:ditto\"\n        },\n        \"bearer\": {\n          \"enabled\": true\n        },\n        \"pre\": {\n          \"enabled\": false,\n          \"defaultDittoPreAuthenticatedUsername\": null\n        }\n      },\n      \"devops\": {\n        \"method\": \"basic\",\n        \"oidc\": {\n          \"enabled\": false,\n          \"defaultProvider\": \"fake\"\n        },\n        \"basic\": {\n          \"enabled\": false,\n          \"defaultUsernamePassword\": null\n        },\n        \"bearer\": {\n          \"enabled\": false\n        }\n      },\n      \"oidc\": {\n      }\n    }\n  },\n  \"oidc_example\": {\n    \"api_uri\": \"http://localhost:8080\",\n    \"ditto_version\": 3,\n    \"disablePolicies\": false,\n    \"disableConnections\": false,\n    \"disableOperations\": false,\n    \"authSettings\": {\n      \"main\": {\n        \"method\": \"oidc\",\n        \"oidc\": {\n          \"enabled\": true,\n          \"defaultProvider\": \"fake\",\n          \"autoSso\": true\n        },\n        \"basic\": {\n          \"enabled\": false,\n          \"defaultUsernamePassword\": null\n        },\n        \"bearer\": {\n          \"enabled\": true\n        },\n        \"pre\": {\n          \"enabled\": false,\n          \"defaultDittoPreAuthenticatedUsername\": null\n        }\n      },\n      \"devops\": {\n        \"method\": \"oidc\",\n        \"oidc\": {\n          \"enabled\": true,\n          \"defaultProvider\": \"fake\",\n          \"autoSso\": true\n        },\n        \"basic\": {\n          \"enabled\": false,\n          \"defaultUsernamePassword\": null\n        },\n        \"bearer\": {\n          \"enabled\": true\n        }\n      },\n      \"oidc\": {\n        \"providers\": {\n          \"fake\": {\n            \"displayName\": \"Fake IDP to test\", \n            \"extractBearerTokenFrom\": \"access_token\",\n            \"authority\": \"http://localhost:9900/fake\",\n            \"client_id\": \"some-client-id\",\n            \"redirect_uri\": \"http://localhost:8000\",\n            \"post_logout_redirect_uri\": \"http://localhost:8000\",\n            \"response_type\": \"code\",\n            \"scope\": \"openid\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Extension Configuration in YAML\nDESCRIPTION: Docker compose configuration showing how to mount extension files and configure the gateway service.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-extending.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nconnectivity:\n    image: docker.io/eclipse/ditto-gateway:${DITTO_VERSION:-latest}\n    ...\n    environment:\n      - TZ=Europe/Berlin\n      - JAVA_TOOL_OPTIONS=-Dlogback.configurationFile=/opt/ditto/logback.xml\n    volumes:\n      - ./gateway-extension.conf:/opt/ditto/gateway-extension.conf\n      - ./logback.xml:/opt/ditto/logback.xml\n      - ./gateway-extension.jar:/opt/ditto/extensions/gateway-extension.jar\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Command Structure in JSON\nDESCRIPTION: Shows the JSON structure for sending a policy retrieval command in Eclipse Ditto. The command includes a topic identifier for the specific policy, correlation ID in headers, and root path specification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrievepolicy.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Tunnel with Password Authentication in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure an SSH tunnel for a managed connection in Eclipse Ditto. It uses password authentication and enables host validation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-ssh-tunneling.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"tunneled-connection\",\n    \"connectionType\": \"mqtt\",\n    \"uri\": \"tcp://mqtt.eclipseprojects.io:1883\",\n    \"sources\": [{ ... }],\n    \"sshTunnel\": {\n        \"enabled\": true,\n        \"uri\": \"ssh://ssh-host:2222\",\n        \"credentials\": {\n            \"type\": \"plain\",\n            \"username\": \"username\",\n            \"password\": \"password\"\n        },\n        \"validateHost\": true,\n        \"knownHosts\": [\"MD5:e0:3a:34:1c:68:ed:c6:bc:7c:ca:a8:67:c7:45:2b:19\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thing Attribute Command JSON Structure\nDESCRIPTION: JSON command structure for retrieving a specific attribute (location) from a Thing's attributes. The command uses the twin protocol to access the digital twin's attributes, with a correlation ID for tracking the request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrieveattribute.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyAttributesResponse JSON Structure for Eclipse Ditto\nDESCRIPTION: This JSON structure represents a ModifyAttributesResponse in Eclipse Ditto. It includes fields for the topic, headers with a correlation ID, the path to the attributes, the modified attribute values, and a status code indicating the result of the modification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyattributesresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"value\": {\n    \"location\": {\n      \"latitude\": 44.673856,\n      \"longitude\": 8.261719\n    }\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Desired Property in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON structure represents a command to modify a desired property of a feature in Eclipse Ditto. It specifies the topic, correlation ID, path to the desired property, and the new value to be set.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturedesiredproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"value\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Thing via Piggyback Command\nDESCRIPTION: JSON payload for creating a new Thing using the CreateThing command via piggyback. Requires thing ID and policy ID specification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/thing\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": true,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"things.commands:createThing\",\n    \"thing\": {\n      \"thingId\": \"<insert-the-thing-id-to-create-here>\",\n      \"policyId\": \"<insert-the-policy-id-to-use-here>\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Ditto Explorer UI Docker Container\nDESCRIPTION: Commands to start the Ditto Explorer UI using Docker. It includes options for running the latest released version or the nightly build.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/user-interface.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# to start the latest released UI version:\ndocker run -p 8088:8080 eclipse/ditto-ui\n\n# or to start the latest nightly instead:\ndocker run -p 8088:8080 eclipse/ditto-ui:nightly\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subjects Response in Eclipse Ditto\nDESCRIPTION: Response example showing the subjects retrieved from a policy. The response contains the policy ID, the requested subjects for the specified label, and their configurations including the type and authorization values.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrievesubjects.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"com.acme/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects\",\n  \"value\": {\n    \"nick\": {\n      \"type\": \"yourType\"\n    },\n    \"status\": {\n      \"type\": \"yourType\",\n      \"properties\": {\n        \"all_set\": true\n      }\n    },\n    \"ditto\": {\n      \"type\": \"anotherType\",\n      \"properties\": {\n        \"custom\": 42\n      }\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Resources Not Found Error Response in Eclipse Ditto\nDESCRIPTION: JSON structure returned when resources of a policy entry cannot be found or when the requester has insufficient permissions to access them. Includes error code 404, error type, descriptive message, and troubleshooting instructions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_resources_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"policies:resources.notfound\",\n    \"message\": \"The Resources of the PolicyEntry with Label 'the_label' on the Policy with ID 'org.eclipse.ditto:the_policy_id' could not be found or requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Policy and the Label of the PolicyEntry was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Example Ditto Policy Configuration\nDESCRIPTION: JSON structure defining a Ditto policy with owner and temperature-observer entries, including permissions for executing the activateTokenIntegration action.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-01-22-policy-subject-activate-token-integration.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyId\": \"my.namespace:policy-a\",\n  \"entries\": {\n    \"owner\": {\n      \"subjects\": {\n        \"some-openid-connect-provider:some-admin-id\": {\n          \"type\": \"authenticated via OpenID connect provider <some-openid-connect-provider>\"\n        }\n      },\n      \"resources\": {\n        \"thing:/\": {\n          \"grant\": [\"READ\", \"WRITE\"],\n          \"revoke\": []\n        },\n        \"policy:/\": {\n          \"grant\": [\"READ\", \"WRITE\"],\n          \"revoke\": []\n        }\n      }\n    },\n    \"temperature-observer\": {\n      \"subjects\": {\n        \"some-openid-connect-provider:some-user-id\": {\n          \"type\": \"authenticated via OpenID connect provider <some-openid-connect-provider>\"\n        }\n      },\n      \"resources\": {\n        \"thing:/features/temperature\": {\n          \"grant\": [\"READ\"],\n          \"revoke\": []\n        },\n        \"policy:/entries/temperature-observer/actions/activateTokenIntegration\": {\n          \"grant\": [\"EXECUTE\"],\n          \"revoke\": []\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended CompletableFuture Usage in Java Tests\nDESCRIPTION: This snippet demonstrates the recommended way to use CompletableFuture in tests, using join() instead of get() to avoid InterruptedException.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0003-do-not-interrupt-threads.md#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCompletableFuture.join()\n```\n\n----------------------------------------\n\nTITLE: Deleting Thing Attributes using Eclipse Ditto Command\nDESCRIPTION: This JSON snippet defines a command to delete all attributes of a 'thing' in Eclipse Ditto. The 'topic' field specifies the event bus topic to which the command is sent. The 'headers' include a correlation ID for tracking the command, and the 'path' field specifies the target location within the thing's twin structure, in this case, '/attributes'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deleteattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying a Policy Import Command in Eclipse Ditto\nDESCRIPTION: JSON representation of a command to modify a policy import in the Ditto protocol. This command imports another policy with ID 'org.eclipse.ditto:imported-policy' into the specified policy, and can optionally provide entries to be imported.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-modifyimport.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/imports/org.eclipse.ditto:imported-policy\",\n  \"value\": {\n    \"entries\": [\n      \"new-entry\",\n      \"another-entry\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Connection Specific Settings\nDESCRIPTION: Complete example of MQTT connection configuration including specific settings like clientId, reconnection behavior, and last will settings\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt5.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"mqtt-example-connection-123\",\n  \"connectionType\": \"mqtt-5\",\n  \"connectionStatus\": \"open\",\n  \"failoverEnabled\": true,\n  \"uri\": \"tcp://test.mosquitto.org:1883\",\n  \"specificConfig\": {\n    \"clientId\": \"my-awesome-mqtt-client-id\",\n    \"reconnectForRedelivery\": false,\n    \"cleanSession\": false,\n    \"separatePublisherClient\": false,\n    \"publisherId\": \"my-awesome-mqtt-publisher-client-id\",\n    \"reconnectForRedeliveryDelay\": \"5s\",\n    \"lastWillTopic\": \"my/last/will/topic\",\n    \"lastWillQos\": 1,\n    \"lastWillRetain\": false,\n    \"lastWillMessage\": \"my last will message\"\n  },\n  \"sources\": [\"...\"],\n  \"targets\": [\"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Streamed Historical Events for Things via SSE in Bash\nDESCRIPTION: Examples of using the Server Sent Event (SSE) API to stream filtered historical events for things, demonstrating the use of RQL filters to select specific events based on feature modifications or property values.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-history.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# stream complete history starting from earliest available revision of a thing, but only those where a feature \"bamboo\" was modified:\ncurl --http2 -u ditto:ditto -H 'Accept:text/event-stream' -N \\\n  http://localhost:8080/api/2/things/org.eclipse.ditto:thing-2?from-historical-revision=0&fields=thingId,attributes,features,_revision,_modified&filter=exists(features/bamboo)\n\n# stream specific history range of a thing based on timestamps, filtering for temperature values of a sensor being greater than 50:\ncurl --http2 -u ditto:ditto -H 'Accept:text/event-stream' -N \\\n  http://localhost:8080/api/2/things/org.eclipse.ditto:thing-2?from-historical-timestamp=2022-10-24T11:44:36Z&to-historical-timestamp=2022-10-24T11:44:37Z&fields=thingId,attributes,features,_revision,_modified&filter=gt(features/temperature/properties/value,50)\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Property - JSON\nDESCRIPTION: This JSON snippet outlines the structure required to delete a feature property in the Eclipse Ditto framework. Key components include the command topic and headers for correlating requests. The 'path' indicates the specific property to be removed.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeatureproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Feature Definition Event JSON Structure\nDESCRIPTION: Shows the event payload structure when a feature definition is merged in Eclipse Ditto. The event includes the topic path targeting a specific thing's accelerometer feature, headers specifying the merge patch content type, the actual path being modified, and the new definition value array containing the feature definition identifier.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergedfeaturedefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"value\": [\n    \"org.eclipse.ditto:accelerometer:1.0.0\"\n  ],\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FeaturePropertiesDeleted Event Structure in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents a FeaturePropertiesDeleted event in Eclipse Ditto. It includes the topic, headers with a correlation ID, the path to the deleted properties, and the revision number. This event is triggered when properties of a specific feature (in this case, 'accelerometer') are deleted from a thing's twin representation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featurepropertiesdeleted.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Merged Event JSON Structure for Location Updates\nDESCRIPTION: Shows the format of a Thing merged event when updating location attributes in Eclipse Ditto. The event includes topic identification, headers specifying content type as merge-patch+json, path targeting location attributes, and the new location values with latitude and longitude coordinates.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergedattribute.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/attributes/location\",\n  \"value\": {\n    \"latitude\": 44.673856,\n    \"longitude\": 8.261719\n  },\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Policy ID Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the command structure for merging a policy ID of a thing in Eclipse Ditto. It includes the topic, path, and value for the merge operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergepolicyid.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergepolicyid.md %}{% endcapture %} {{ command |\nmarkdownify }}\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Command in Eclipse Ditto Policies\nDESCRIPTION: This snippet shows the structure of a command to create a resource in Eclipse Ditto's policy management. It includes the topic, path, and value of the resource to be created.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-createresource.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyresource.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Text Payloads\nDESCRIPTION: This JavaScript code snippet demonstrates handling of text payloads by checking for 'application/json' content-type, parsing the payload, and performing operations on the parsed JSON. The snippet highlights the ease of processing structured data when working with JSON formatted payloads.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet value;\\nif (contentType === 'application/json') {\\n  let parsedJson = JSON.parse(textPayload);\\n  value = parsedJson.number1 + parsedJson['sub-field']; // remember to access JSON keys with dashes in a JS special way\\n} else {\\n  // a script may decide to not map other content-types than application/json\\n  return null;\\n}\\n// proceed ...\n```\n\n----------------------------------------\n\nTITLE: Defining JsonFieldDefinition\nDESCRIPTION: Demonstrates how to define a JsonFieldDefinition for specifying the expected keys and value types in a JSON object. This allows for compile-time guarantees and type safety when working with JSON data, ensuring that only the specified types can be set and retrieved.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// Define the JsonFieldDefinition. In this case, state that a JSON object could contain\n// an Integer value for key \"myValue\" or null.\n\npublic static final JsonFieldDefinition<Integer> MY_VALUE = JsonFactory.newIntFieldDefinition(\"myValue\");\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Source Header Mapping\nDESCRIPTION: Example of header mapping configuration for MQTT sources including topic, QoS, correlation-id and custom properties\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt5.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headerMapping\": {\n    \"topic\": \"{{ header:mqtt.topic }}\",\n    \"the-qos\": \"{{ header:mqtt.qos }}\",\n    \"correlation-id\": \"{{ header:correlation-id }}\",\n    \"device-id\": \"{{ header:device-id-user-defined-property }}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Limited Indexed Fields in HOCON\nDESCRIPTION: This snippet demonstrates how to configure limited indexed fields for search in the thing-search.conf file. It shows how to specify which fields will be included in the search database for different namespace patterns.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_12\n\nLANGUAGE: hocon\nCODE:\n```\nditto {\n  //...\n  caching-signal-enrichment-facade-provider = org.eclipse.ditto.thingsearch.service.persistence.write.streaming.SearchIndexingSignalEnrichmentFacadeProvider\n  //...\n  search {\n    namespace-indexed-fields = [\n      {\n        namespace-pattern = \"org.eclipse.test\"\n        indexed-fields = [\n           \"attributes\",\n           \"features/info/properties\",\n           \"features/info/other\"\n        ]\n      },\n      {\n        namespace-pattern = \"org.eclipse*\"\n        indexed-fields = [\n           \"attributes\",\n           \"features/info\"\n        ]\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Merging Multiple Feature Properties with PATCH Request in Eclipse Ditto\nDESCRIPTION: This code snippet shows the JSON payload for a PATCH request to merge multiple feature properties in Eclipse Ditto. It updates the 'brewed-coffees' property of the 'coffee-brewer' feature and the 'configuration' property of the 'water-tank' feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-02-04-merge-feature.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"coffee-brewer\": {\n    \"properties\": {\n      \"brewed-coffees\": 10\n    }\n  },\n  \"water-tank\": {\n    \"properties\": {\n      \"configuration\": {\n        \"smartMode\": null,\n        \"tempToHold\": 30\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Client WebSocket Reconnection\nDESCRIPTION: Example showing how to configure the Ditto Java Client's WebSocket messaging provider with initial connection retry enabled. This configuration allows the client to retry connecting even when the first connection attempt fails.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_130.md#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nAuthenticationProvider authenticationProvider = ...;\n\nMessagingProvider messagingProvider =\n    MessagingProviders.webSocket(WebSocketMessagingConfiguration.newBuilder()\n        .endpoint(\"wss://ditto.eclipseprojects.io\")\n        .initialConnectRetryEnabled(true) // set this to true in order to enable retry on initial connection errors\n        .build(), authenticationProvider);\n\nDittoClient client = DittoClients.newInstance(messagingProvider);\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Merged Thing Response Structure\nDESCRIPTION: Response structure when a merge operation successfully merges an existing Thing. It includes topic, path, and status fields but no value field.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-merge.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      |        | Value                                                     |\n|------------|--------|-----------------------------------------------------------|\n| **topic**  |        | `<namespace>/<thingName>/things/<channel>/commands/merge` |\n| **path**   |        | `/`                                                       |\n| **status** | *code* |                                                           | \n|            | `204`  | Success - the Thing was merged successfully.              |\n```\n\n----------------------------------------\n\nTITLE: Merging Feature Properties Command in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the command structure for merging all properties of a feature in Eclipse Ditto. It includes the topic, path, and value to be merged.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergefeatureproperties.md %}{% endcapture %} {{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: FeatureDesiredPropertiesCreated Event Structure in JSON\nDESCRIPTION: This snippet shows the JSON structure of a FeatureDesiredPropertiesCreated event in Eclipse Ditto. The event is published when desired properties are created for a feature (in this case 'accelerometer') within a thing. It includes the topic, headers with correlation ID, path to the desired properties, the actual property values, and the revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuredesiredpropertiescreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"value\": {\n    \"x\": 4,\n    \"y\": 3,\n    \"z\": 5,\n    \"unit\": \"g\"\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: FeatureDesiredPropertiesDeleted Event JSON Structure\nDESCRIPTION: JSON representation of the FeatureDesiredPropertiesDeleted event in Eclipse Ditto. This event is triggered when desired properties of a feature (accelerometer in this example) are deleted from a thing. The event includes topic, headers with correlation ID, path to the deleted desired properties, and revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuredesiredpropertiesdeleted.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Attribute Response in Eclipse Ditto\nDESCRIPTION: This JSON snippet illustrates a successful response after modifying a \"location\" attribute of a thing's twin in Eclipse Ditto. The response includes the topic, headers (containing the correlation ID), the path of the modified attribute, the new attribute value (latitude and longitude), and a status code of 201.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyattributeresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"value\": {\n    \"latitude\": 44.673856,\n    \"longitude\": 8.261719\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Feature from a Thing in Eclipse Ditto\nDESCRIPTION: JSON command for retrieving a specific feature ('accelerometer') from a Thing in Eclipse Ditto. The command includes the required topic that specifies the thing ID ('fancy-thing'), command type ('retrieve'), a correlation ID in the headers for tracking, and the path to the specific feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeature.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Properties Deleted Event in Eclipse Ditto\nDESCRIPTION: This snippet shows the event structure generated when feature properties are successfully deleted in Eclipse Ditto. It includes the topic and relevant details of the deletion event.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deleteproperties.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/events/featurepropertiesdeleted.md %}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Connection in Docker Compose for Ditto\nDESCRIPTION: This YAML snippet shows how to configure MongoDB connection parameters for Ditto services using environment variables in a docker-compose file.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  - JAVA_TOOL_OPTIONS=-Dditto.gateway.authentication.devops.password=foobar\n```\n\n----------------------------------------\n\nTITLE: Connection Test Response\nDESCRIPTION: Expected JSON response from the Ditto connection test, showing a successful connection to the Hono AMQP endpoint.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"connectivity.responses:testConnection\",\n    \"status\": 200,\n    \"connectionId\": \"hono-sandbox-connection-1\",\n    \"testResult\": \"ditto-cluster=Success(successfully connected + initialized mapper)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Features Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the command structure for modifying features in Eclipse Ditto. It includes the topic, path, and value for the features to be modified.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createfeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/commands/modify/modifyfeatures.md %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Policy using Eclipse Ditto Protocol\nDESCRIPTION: Commands to retrieve a policy by its ID from Eclipse Ditto. The example shows the JSON representation of the command structure in both WebSocket and HTTP formats.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrievepolicy.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Properties in Eclipse Ditto using JSON\nDESCRIPTION: This JSON snippet represents a command to retrieve the properties of a specific feature (accelerometer) for a thing in Eclipse Ditto. It includes the topic, headers with a correlation ID, and the path to the feature properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeatureproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\"\n}\n```\n\n----------------------------------------\n\nTITLE: AMQP 1.0 Connection Configuration Example\nDESCRIPTION: Complete example of an AMQP 1.0 connection configuration including sources and targets setup.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-amqp10.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"hono-example-connection-123\",\n  \"connectionType\": \"amqp-10\",\n  \"connectionStatus\": \"open\",\n  \"failoverEnabled\": true,\n  \"uri\": \"amqps://user:password@hono.eclipse.org:5671\",\n  \"sources\": [\n    {\n      \"addresses\": [\n        \"telemetry/FOO\"\n      ],\n      \"authorizationContext\": [\"ditto:inbound-auth-subject\"]\n    }\n  ],\n  \"targets\": [\n    {\n      \"address\": \"events/twin\",\n      \"topics\": [\n        \"_/_/things/twin/events\"\n      ],\n      \"authorizationContext\": [\"ditto:outbound-auth-subject\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Thing JSON with Metadata\nDESCRIPTION: The resulting Thing JSON after applying the metadata from the previous example. It shows the structure of the '_metadata' field and how it relates to the Thing's properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-metadata.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"thingId\": \"org.eclipse.ditto:my-lamp-1\",\n    \"features\": {\n      \"lamp\": {\n        \"properties\": {\n          \"color\": {\n            \"r\": 100,\n            \"g\": 0,\n            \"b\": 255\n          },\n          \"status\": {\n            \"on\": \"true\"\n          }\n        }\n      }\n    },\n    \"_metadata\": {\n      \"features\": {\n        \"lamp\": {\n          \"properties\": {\n            \"color\": {\n              \"r\": {\n                \"changeLog\": {\n                  \"changedAt\": \"2022-08-02T04:30:07\",\n                  \"changedBy\": {\n                    \"name\": \"ditto\",\n                    \"mail\": \"ditto@mail.com\"\n                  }\n                }\n              },\n              \"g\": {\n                \"changeLog\": {\n                  \"changedAt\": \"2022-08-02T04:30:07\",\n                  \"changedBy\": {\n                    \"name\": \"ditto\",\n                    \"mail\": \"ditto@mail.com\"\n                  }\n                }\n              },\n              \"b\": {\n                \"changeLog\": {\n                  \"changedAt\": \"2022-08-02T04:30:07\",\n                  \"changedBy\": {\n                    \"name\": \"ditto\",\n                    \"mail\": \"ditto@mail.com\"\n                  }\n                }\n              },\n              \"description\": \"Color represented with RGB values\"\n            }\n          }\n        }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ModifyResourceResponse JSON Structure for Ditto Policy Resource Modification\nDESCRIPTION: JSON structure for a ModifyResourceResponse command in Eclipse Ditto that acknowledges a successful resource modification. The response includes topic, path information for the modified resource, correlation ID in headers, and returns a 204 status code indicating success with no content.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifyresourceresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources/thing:/the_resource_path\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RetrieveAttributesResponse JSON Structure for Eclipse Ditto\nDESCRIPTION: This JSON structure represents a RetrieveAttributesResponse in Eclipse Ditto. It includes the topic, headers with a correlation ID, the path to the attributes, the attribute values, and a status code. The example shows attributes for a location with latitude and longitude.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrieveattributesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"value\": {\n    \"location\": {\n      \"latitude\": 44.673856,\n      \"longitude\": 8.261719\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyPolicyEntryResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON snippet illustrates the structure of a ModifyPolicyEntryResponse in Eclipse Ditto. It includes the topic, headers with a correlation ID, the path of the modified entry, and a status code indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifypolicyentryresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Resource from a Policy Entry in Eclipse Ditto\nDESCRIPTION: This JSON command deletes a specific resource from a policy entry in Eclipse Ditto. The command includes the topic identifying the policy, correlation ID in the headers for request tracking, and the path specifying the exact resource to be deleted within the policy entry.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/deleteresource.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources/thing:/the_resource_path\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Properties Response Format in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet demonstrates the response format when retrieving feature properties from Eclipse Ditto. It includes the topic path referencing the thing ID, preserved correlation ID in headers, the specific feature path being accessed, the actual property values returned, and a HTTP 200 success status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeaturepropertiesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"value\": {\n    \"x\": 3.141,\n    \"y\": 2.718,\n    \"z\": 1,\n    \"unit\": \"g\"\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Feature Response in Eclipse Ditto\nDESCRIPTION: Response to the merge feature command in Eclipse Ditto. It typically includes the status of the operation and any relevant metadata.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergefeature.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/merge/mergefeatureresponse.md %}{% endcapture %} {{\nresponse | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Acknowledgement Requests for Kafka Source in Eclipse Ditto\nDESCRIPTION: JSON configuration to disable requesting acknowledgements for a Kafka source, used when backpressure is not required.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-kafka2.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"acknowledgementRequests\": {\n  \"includes\": [],\n  \"filter\": \"fn:delete()\"\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Response for Modify Feature Desired Properties Command in Eclipse Ditto\nDESCRIPTION: This JSON snippet shows the response received after sending a command to modify feature desired properties in Eclipse Ditto. It confirms the successful modification and includes the updated desired properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifydesiredproperties.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"value\": {\n    \"x\": 3.141,\n    \"y\": 2.718,\n    \"z\": 1,\n    \"unit\": \"g\"\n  },\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Command & Control Connection in Bash\nDESCRIPTION: This snippet shows how to set up a connection between Eclipse Ditto and Eclipse Hono for Command & Control messages using a curl command.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-12-05-example-command-and-control.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -i -u devops:devopsPw1! \\\n     -H 'Content-Type: application/json' \\\n     -d '{\n           \"targetActorSelection\": \"/system/sharding/connection\",\n           \"headers\": {\n             \"aggregate\": false\n           },\n           \"piggybackCommand\": {\n             \"type\": \"connectivity.commands:createConnection\",\n             \"connection\": {\n               \"id\": \"command-and-control-connection\",\n               \"connectionType\": \"amqp-10\",\n               \"connectionStatus\": \"open\",\n               \"uri\": \"amqp://consumer%40HONO:verysecret@hono.eclipse.org:15672\",\n               \"failoverEnabled\": true,\n               \"sources\": [{\n                   \"addresses\": [\n                     \"control/org.eclipse.ditto/replies\"\n                   ],\n                   \"authorizationContext\": [\n                     \"nginx:demo5\"\n                   ],\n                   \"headerMapping\": {\n                     \"correlation-id\": \"{{ header:correlation-id }}\",\n                     \"status\": \"{{ header:status }}\",\n                     \"content-type\": \"{{ header:content-type }}\"\n                   }\n                 }\n               ],\n               \"targets\": [{\n                   \"address\": \"control/org.eclipse.ditto/{{ thing:name }}\",\n                   \"authorizationContext\": [\n                     \"nginx:demo5\"\n                   ],\n                   \"topics\":[\"_/_/things/live/messages\"],\n                   \"headerMapping\": {\n                     \"message-id\": \"{{ header:correlation-id }}\",\n                     \"subject\": \"{{ topic:subject }}\",\n                     \"content-type\": \"application/vnd.eclipse.ditto+json\",\n                     \"reply-to\": \"control/org.eclipse.ditto/replies\"\n                   }\n                 }\n               ]\n             }\n           }\n         }' \\\n    https://ditto.eclipseprojects.io/devops/piggyback/connectivity?timeout=10s\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Properties Response in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response structure after deleting feature properties in Eclipse Ditto. It includes the status code and potential headers in the response.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deleteproperties.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/commands/modify/deletefeaturepropertiesresponse.md %}\n```\n\n----------------------------------------\n\nTITLE: Defining RetrieveFeaturePropertyResponse Structure in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents the response to a retrieve feature property command in Eclipse Ditto. It includes the topic, headers with correlation ID, path to the specific property, the property value, and the HTTP status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeaturepropertyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": 42,\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: FeatureDesiredPropertyCreated JSON Event Format in Eclipse Ditto\nDESCRIPTION: JSON structure representing the event fired when a desired property is created for a feature in Eclipse Ditto. The event includes the topic path, correlation ID in headers, the specific path to the created property, the property value, and the revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuredesiredpropertycreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"value\": 42,\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyThingDefinitionResponse JSON Structure for Eclipse Ditto\nDESCRIPTION: This JSON structure represents the response to a modify thing definition command in Eclipse Ditto. It includes the topic, correlation ID, path to the definition, new definition value, and the HTTP status code. The structure is used to confirm the successful modification of a thing's definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifythingdefinitionresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/definition\",\n  \"value\": \"digitaltwin:DigitaltwinExample:1.0.0\",\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Get a Thing using cURL\nDESCRIPTION: This snippet retrieves the entire Thing object from Eclipse Ditto using a cURL command. It sends a GET request to the Ditto API endpoint for the specific Thing ID and includes authentication credentials.  The command returns the Thing as a JSON object.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u ditto:ditto -w '\\n' <ditto-instance-url>/api/2/things/$DEVICE_ID\n```\n\n----------------------------------------\n\nTITLE: Merging All Attributes Command Structure\nDESCRIPTION: Command structure for merging all attributes of a Thing. The command specifies the path as '/attributes' and includes the JSON merge patch in the value field.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-merge.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Field     | Value                                                                                                                                                                                     |\n|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **topic** | `<namespace>/<thingName>/things/<channel>/commands/merge`                                                                                                                                 |\n| **path**  | `/attributes`                                                                                                                                                                             |\n| **value** | The JSON value in [JSON merge patch](https://tools.ietf.org/html/rfc7396) format that is applied to the [attributes](basic-thing.html#attributes) of the Thing referenced in the `topic`. |\n```\n\n----------------------------------------\n\nTITLE: Filtering Twin Lifecycle Events with RQL in Eclipse Ditto\nDESCRIPTION: Example of using RQL to filter for Thing creation and deletion events in Eclipse Ditto 2.2.0. This demonstrates the new feature of using topic and resource placeholders in RQL predicates.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_220.md#2025-04-17_snippet_0\n\nLANGUAGE: rql\nCODE:\n```\nand(in(topic:action,'created','deleted'),eq(resource:path,'/'))\n```\n\n----------------------------------------\n\nTITLE: Forcing search index update for a single thing\nDESCRIPTION: Command to trigger immediate search index update for a specific thing to resolve potential inconsistencies for that particular entity.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/user/thingsWildcardSearchRoot/searchUpdaterRoot/thingsUpdater\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"thing-search.sudo.commands:sudoUpdateThing\",\n    \"thingId\": \"<THING-ID>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Entry JSON Response Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure demonstrates the response format when retrieving a specific policy entry in Eclipse Ditto. The response includes the topic path, correlation ID in headers, the specific policy entry path, and the entry's contents including subjects and resource permissions. The status code 200 indicates successful retrieval.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrievepolicyentryresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label\",\n  \"value\": {\n    \"subjects\": {\n      \"google:the_subjectid\": {\n        \"type\": \"yourSubjectTypeDescription\"\n      }\n    },\n    \"resources\": {\n      \"thing:/the_resource_path\": {\n        \"grant\": [\n          \"READ\",\n          \"WRITE\"\n        ],\n        \"revoke\": []\n      }\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Thing Features Desired Properties Response in Eclipse Ditto\nDESCRIPTION: This JSON message represents a response to a merge command for a Thing entity in Eclipse Ditto. It shows a successful (status 204) response to a merge operation targeting the desired property 'x' of an accelerometer feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeaturedesiredpropertyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Things Policy Not Allowed Error Response in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents an error response when attempting to modify a Thing with an inline Policy in Eclipse Ditto. It includes the topic, correlation ID, error details, and HTTP status code. The error indicates that once a Thing with an inline Policy is created, it cannot be modified with another Policy.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_policy_notallowed.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 400,\n    \"error\": \"things:policy.notallowed\",\n    \"message\": \"The Thing with ID 'org.eclipse.ditto:fancy-thing' could not be modified as it contained an inline Policy\",\n    \"description\": \"Once a Thing with inline Policy is created it can't be modified with another Policy. Use the Policy resources to modify the existing Policy.\"\n  },\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HMAC Signing Credentials for HTTP Push Connection\nDESCRIPTION: JSON configuration for setting up HMAC signing credentials in a Ditto HTTP Push connection. This example shows the general structure for specifying the algorithm and its parameters.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connectionType\": \"http-push\",\n  \"uri\": \"https://...:443\",\n  \"credentials\": {\n    \"type\": \"hmac\",\n    \"algorithm\": \"<algorithm>\", // e.g.: \"az-monitor-2016-04-01\"\n    \"parameters\": {\n       // parameters of the algorithm named above.\n       ...\n    }\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Connection to AWS S3 in Eclipse Ditto\nDESCRIPTION: JSON configuration for an HTTP connection to AWS S3 (Simple Storage Service). It includes credentials setup with specific parameters for S3, target configuration, and JavaScript payload mapping to publish twin events as objects in an S3 bucket.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"AWS S3\",\n  \"connectionType\": \"http-push\",\n  \"connectionStatus\": \"open\",\n  \"uri\": \"https://<s3-bucket>.s3.<aws-region>.amazonaws.com:443\",\n  \"credentials\": {\n    \"type\": \"hmac\",\n    \"algorithm\": \"aws4-hmac-sha256\",\n    \"parameters\": {\n      \"region\": \"<aws-region>\",\n      \"service\": \"s3\",\n      \"accessKey\": \"<aws-access-key>\",\n      \"secretKey\": \"<aws-secret-key>\",\n      \"doubleEncode\": false,\n      \"canonicalHeaders\": [ \"host\", \"x-amz-date\" ],\n      \"xAmzContentSha256\": \"INCLUDED\"\n    }\n  },\n  \"sources\": [],\n  \"targets\": [{\n      \"address\": \"PUT:/\",\n      \"topics\": [ \"_/_/things/twin/events\" ],\n      \"authorizationContext\": [ \"integration:ditto\" ],\n      \"headerMapping\": {},\n      \"payloadMapping\": [\n        \"javascript\"\n      ]\n  }],\n  \"clientCount\": 1,\n  \"failoverEnabled\": true,\n  \"validateCertificates\": true,\n  \"processorPoolSize\": 5,\n  \"specificConfig\": {\n    \"parallelism\": \"1\"\n  },\n  \"mappingDefinitions\": {\n    \"javascript\": {\n      \"mappingEngine\": \"JavaScript\",\n      \"options\": {\n        \"incomingScript\": \"function mapToDittoProtocolMsg() {\\n  return undefined;\\n}\\n\",\n        \"outgoingScript\": \"function mapFromDittoProtocolMsgWrapper(msg) {\\n  let topic = msg['topic'].split('/').join(':');\\n  let headers = {\\n      'http.path': topic+':'+msg['revision']\\n  };\\n  let textPayload = JSON.stringify(msg);\\n  let bytePayload = null;\\n  let contentType = 'application/json';\\n\\n  return Ditto.buildExternalMsg(\\n    headers,\\n    textPayload,\\n    bytePayload,\\n    contentType\\n  );\\n}\\n\",\n        \"loadBytebufferJS\": \"false\",\n        \"loadLongJS\": \"false\"\n      }\n    }\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Features from Thing Twin in Eclipse Ditto using JSON Command\nDESCRIPTION: This JSON command is used to retrieve all features of a thing's twin in Eclipse Ditto. It specifies the topic, which includes the namespace and thing ID, along with the command type. The headers contain a correlation ID for tracking, and the path indicates that all features are being requested.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Thing Command in Eclipse Ditto - JSON\nDESCRIPTION: This JSON snippet is used for merging a thing's twin in Eclipse Ditto. It includes headers such as 'content-type' and 'correlation-id', and specifies a 'path' and 'value' with detailed attributes and features. Key parameters involve the 'thingId', model 'definition', and 'attributes' like 'location'. The 'features' section defines an accelerometer with properties in the payload. Dependencies include a properly configured Eclipse Ditto environment. Expected inputs are command features and attributes, while the output is the updated state of the thing's digital twin. The snippet assumes a pre-existing model and proper use of Ditto REST APIs.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergething.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing_53/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"definition\": \"org.eclipse.ditto:SomeModel:1.0.0\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"definition\": [\n          \"org.eclipse.ditto:accelerometer:1.0.0\"\n        ],\n        \"properties\": {\n          \"x\": 3.141,\n          \"y\": 2.718,\n          \"z\": 1,\n          \"unit\": \"g\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Thing Command Response for Feature Property in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet shows the response structure after executing a merge command to update a specific property 'x' of the 'accelerometer' feature. The response includes the topic, correlation ID preservation, target path, and a 204 status code indicating successful execution without content in the response body.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeaturepropertyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Tunnel with Public Key Authentication in JSON\nDESCRIPTION: This JSON snippet shows the configuration for an SSH tunnel using public key authentication. It includes placeholders for the public and private keys in PEM format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-ssh-tunneling.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"credentials\": {\n    \"type\": \"public-key\",\n    \"username\": \"username\",\n    \"publicKey\": \"-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9.....\\n-----END PUBLIC KEY-----\",\n    \"privateKey\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhki....\\n-----END PRIVATE KEY-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Target with Extra Fields\nDESCRIPTION: Configures target topics with field enrichment for events and messages.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-connections.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"<target-address>\",\n  \"topics\": [\n    \"_/_/things/twin/events?extraFields=attributes/placement\",\n    \"_/_/things/live/messages?extraFields=features/ConnectionStatus\"\n  ],\n  \"authorizationContext\": [\"ditto:outbound-auth-subject\", \"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thing Attributes Response in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response structure when retrieving attributes of a Thing in Eclipse Ditto. It includes the topic, headers, and the retrieved attributes in the payload.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrieveattributes.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/query/retrieveattributesresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Details with JSON Command in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a RetrievePolicy command in Eclipse Ditto. It specifies the topic for policy retrieval, includes a correlation ID in the headers, and defines the path and fields to be retrieved.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrievepolicy-withfieldselector.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"fields\": \"policyId,_revision\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyFeatureDesiredPropertiesResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents the response to a command that modifies the desired properties of a feature in Eclipse Ditto. It includes the topic, headers with a correlation ID, the path to the modified feature's desired properties, and a status code indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturedesiredpropertiesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Feature Desired Properties Response - JSON\nDESCRIPTION: This JSON snippet represents a successful response (status 204) after deleting the desired properties of a feature (accelerometer) from a digital twin in Eclipse Ditto.  It specifies the topic for the delete command, a correlation ID in the headers for tracking, and the path to the deleted feature's desired properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeaturedesiredpropertiesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Policy Entry in Eclipse Ditto using JSON Command\nDESCRIPTION: This JSON command structure is used to delete a specific policy entry identified by 'the_label' from a policy with ID 'the_policy_id'. The command includes the topic path for policy deletion commands and requires a correlation ID in the headers for tracking the command execution.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/deletepolicyentry.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label\"\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Creation Protocol Schema\nDESCRIPTION: Command and response structure for creating a new policy with a specified namespace and name. Requires a complete policy JSON object in the value field.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/create\",\n  \"path\": \"/\",\n  \"value\": \"<complete policy as JSON object>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating alternative list query parameter syntax in HTTP requests\nDESCRIPTION: Shows the new alternative syntax for specifying multiple values for a single query parameter in HTTP GET requests. This allows users to repeat the same parameter name instead of using array notation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_330.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /thing/my:thing-123?fields=thingId&fields=policyId&fields=attributes\n```\n\n----------------------------------------\n\nTITLE: Filtering Change Notifications by Attribute with Escaped Characters in Eclipse Ditto\nDESCRIPTION: RQL expression to filter change notifications based on an attribute value containing special characters. This example filters events where the 'manufacturer' attribute starts with 'ACME & Sons', with the '&' character properly escaped.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-changenotifications.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nfilter=like(attributes/manufacturer,\"ACME %26 Sons*\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Topic with Temperature Threshold Filter in Eclipse Ditto\nDESCRIPTION: This JSON snippet demonstrates how to configure a target topic with a filter in Ditto. It specifies a POST request to an IFTTT webhook, triggering only when the temperature value in a twin's features exceeds 25.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2019-10-17-http-connectivity.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"POST:/trigger/<your-event-name>/with/key/<your-key>\",\n  \"topics\": [\n    \"_/_/things/twin/events?filter=gt(features/temperature/properties/value,25)\"\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Provider in HOCON\nDESCRIPTION: Configuration example for a signal enrichment provider extension with custom settings including cache configuration and timeouts.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-extending.md#2025-04-17_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\nditto.extensions.signal-enrichment-provider {\n  extension-class = org.eclipse.ditto.gateway.service.endpoints.utils.DefaultGatewaySignalEnrichmentProvider\n  extension-config = {\n    ask-timeout = 10s\n\n    cache {\n      enabled = true\n      maximum-size = 20000\n      expire-after-create = 2m\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Content for Delete Thing Definition Command\nDESCRIPTION: This snippet includes a Markdown file containing the command for deleting a Thing definition in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletethingdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/deletethingdefinition.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Managing background synchronization in Ditto\nDESCRIPTION: Command template for managing background synchronization operations in Ditto's search service. Various command types can be used to control the synchronization process.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/user/thingsWildcardSearchRoot/searchUpdaterRoot/backgroundSync/singleton\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false\n  },\n  \"piggybackCommand\": {\n    \"type\": \"<COMMAND-TYPE>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attribute Response JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a response to a retrieve attribute command in Eclipse Ditto. It includes the topic, headers with correlation ID, path to the specific attribute, the attribute value, and the HTTP status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrieveattributeresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"value\": {\n    \"latitude\": 44.673856,\n    \"longitude\": 8.261719\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: FeatureDesiredPropertyDeleted Event Structure in JSON\nDESCRIPTION: This JSON object represents the structure of a FeatureDesiredPropertyDeleted event in Eclipse Ditto. It includes the topic, headers with a correlation ID, the path of the deleted desired property, and the revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuredesiredpropertydeleted.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: ModifyImportResponse JSON Structure for Eclipse Ditto Policy Imports\nDESCRIPTION: This JSON structure represents the response to a successful policy import modification in Eclipse Ditto. It includes the topic identifying the policy, correlation headers for tracing, the path to the specific import, the value containing entries that were imported, and a 201 status code indicating successful creation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifyimportresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/imports/org.eclipse.ditto:imported-policy\",\n  \"value\": {\n    \"entries\" : [ \"IMPORTED_ENTRY\" ]\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Get a Submodel Element using cURL\nDESCRIPTION: This snippet retrieves a specific Submodel Element (properties_value) from the BaSyx AAS server using a cURL command. It sends a GET request to the specified URL, which includes the server instance URL, namespace, the name of the submodel, and the element to retrieve. The expected output is a JSON representation of the submodel element.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET <basyx-server-instance-url>:4001/aasServer/shells/$NAMESPACE/aas/submodels/${NAME}_${FEATURE_ID}/submodel/submodelElements/properties_value\n```\n\n----------------------------------------\n\nTITLE: Including Feature Created Event in Markdown\nDESCRIPTION: This snippet includes the content of a markdown file containing the feature created event details.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createfeature.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/featurecreated.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Connection to BaSyx AAS Registry with cURL\nDESCRIPTION: cURL command to create a connection between Eclipse Ditto and a BaSyx AAS registry using HTTP-push. It includes the JavaScript mapping function and configures the connection to trigger on Thing creation events, pushing AAS descriptors to the registry.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -u devops:foobar -H 'Content-Type: application/json' --data-binary '{\n    \"targetActorSelection\": \"/system/sharding/connection\",\n    \"headers\": {\n      \"aggregate\": false\n    },\n    \"piggybackCommand\": {\n      \"type\": \"connectivity.commands:createConnection\",\n      \"connection\": {\n        \"id\": \"basyxregistry-http-connection\",\n        \"connectionType\": \"http-push\",\n        \"connectionStatus\": \"open\",\n        \"uri\": \"<basyx-registry-instance-url>:4000\",\n        \"failoverEnabled\": true,\n        \"mappingDefinitions\": {\n          \"mappingforShell\": {\n            \"mappingEngine\": \"JavaScript\",\n            \"options\": {\n              \"outgoingScript\": \"function mapFromDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value, status, extra) {\\n  let headers = dittoHeaders;\\n  let textPayload = JSON.stringify({\\n    endpoints: [\\n        {\\n            address: \\'<basyx-server-instance-url>:4001/aasServer/shells/\\' + namespace + \\'/aas\\',\\n            type: \\'http\\'\\n        }\\n    ],\\n    modelType: {\\n        name: \\'AssetAdministrationShellDescriptor\\'\\n    },\\n    identification: {\\n        idType: \\'Custom\\',\\n        id: namespace\\n},\\n    idShort: namespace,\\n      asset: {\\n          identification: {\\n              idType: \\'Custom\\',\\n              id: namespace + \\'-asset\\'\\n          },\\n          idShort: namespace + \\'-asset\\',\\n          kind: \\'Instance\\',\\n          dataSpecification: [],\\n          modelType: {\\n              name: \\'Asset\\'\\n          },\\n          embeddedDataSpecifications: []\\n      },\\n      submodels: []\\n  });\\n  let bytePayload = null;\\n  let contentType = \\'application/json\\';\\n  return Ditto.buildExternalMsg(headers, textPayload, bytePayload, contentType);}\"\\n            }\\n          }\\n        },\\n        \"sources\": [],\\n        \"targets\": [\\n          {\\n            \"address\": \"PUT:/registry/api/v1/registry/{%raw%}{{ thing:namespace }}{%endraw%}\",\\n            \"headerMapping\": {\\n              \"content-type\": \"{%raw%}{{ header:content-type }}{%endraw%}\"\\n            },\\n            \"authorizationContext\": [\"nginx:ditto\"],\\n            \"topics\": [\\n              \"_/_/things/twin/events?filter=and(in(topic:action,\\'created\\'),eq(resource:path,\\'/\\'))\"\\n            ],\\n            \"payloadMapping\": [\\n              \"mappingforShell\"\\n            ]\\n          }\\n        ]\\n      }\\n    }\\n  }' <ditto-instance-url>/devops/piggyback/connectivity\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for Pekko-HTTP in HOCON\nDESCRIPTION: This snippet shows how to configure the SSL trustManager in HOCON format for Pekko-HTTP, using a PEM certificate file.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2019-08-28-openid-connect.md#2025-04-17_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\nssl-config {\n  trustManager = {\n    stores = [\n      { type = \"PEM\", path = \"/path/to/cert/globalsign.crt\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Feature Model Schema Reference - JSON\nDESCRIPTION: Reference to the JSON schema definition for Features in API version 2. The schema is included via docson.html and defines the complete feature model structure.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-feature.md#2025-04-17_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include docson.html schema=\"jsonschema/feature_v2.json\" %}\n```\n\n----------------------------------------\n\nTITLE: JWT Placeholder Function Example for Filtering\nDESCRIPTION: Example showing how to extract subjects from a JSON array \"roles\" contained in a JWT that end with \"moderator\" using the new placeholder function capabilities.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_240.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{ jwt:extra/roles | fn:filter('like','*moderator') }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thing Attributes using Eclipse Ditto JSON Command\nDESCRIPTION: This JSON structure represents a RetrieveAttributes command in Eclipse Ditto. It specifies the topic for retrieving attributes of a specific thing, includes a correlation ID in the headers, and defines the path and fields to be retrieved.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrieveattributes-selectedfields.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"fields\": \"attributes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Certificate Authentication in Ditto\nDESCRIPTION: JSON configuration for setting up client certificate authentication in Ditto connections. Includes client certificate and private key configuration in PEM format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-tls-certificates.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"uri\": \"<secure-transport-protocol>://<host>:<port>/<path>\",\n  \"credentials\": {\n    \"type\": \"client-cert\",\n    \"cert\": \"-----BEGIN CERTIFICATE-----\\n<client certificate>\\n-----END CERTIFICATE-----\",\n    \"key\": \"-----BEGIN PRIVATE KEY-----\\n<client private key>\\n-----END PRIVATE KEY-----\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Swagger UI for API Documentation\nDESCRIPTION: kubectl command to deploy Swagger UI, which provides interactive API documentation for Eclipse Ditto's REST endpoints.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deployment/kubernetes/deploymentFiles/swagger/swagger.yaml\n```\n\n----------------------------------------\n\nTITLE: Copying k3s Kubeconfig to kubectl Default Location\nDESCRIPTION: Command to copy the k3s configuration file to the default kubectl configuration directory, enabling kubectl to work with the k3s cluster.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/k3s/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp /etc/rancher/k3s/k3s.yaml .kube/config\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy ID JSON Command Structure\nDESCRIPTION: JSON command structure for retrieving a policy ID. The command targets the /policyId path and requires a correlation ID in the headers. This is used to fetch the policy ID associated with a specific thing in the Ditto platform.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievepolicyid.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/policyId\"\n}\n```\n\n----------------------------------------\n\nTITLE: RetrieveFeatureDefinitionResponse JSON Example in Eclipse Ditto\nDESCRIPTION: This JSON example shows the structure of a response when retrieving a feature definition. It includes the topic identifying the thing, correlation headers for request tracking, the path to the feature definition, the definition value as an array of strings, and a 200 status code indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeaturedefinitionresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"value\": [\n    \"org.eclipse.ditto:accelerometer:1.0.0\"\n  ],\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Things Feature Not Found Error Response in JSON for Eclipse Ditto\nDESCRIPTION: This JSON snippet represents the error response returned when a requested feature is not found in Eclipse Ditto's Things API. It includes details such as the topic, headers, path, error message, and HTTP status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"things:feature.notfound\",\n    \"message\": \"The Feature with ID 'accelerometer' on the Thing with ID 'org.eclipse.ditto:fancy-thing' could not be found or the requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Thing and the ID of your requested Feature was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attribute and Feature Property with Field Selector in Eclipse Ditto\nDESCRIPTION: Shows how to retrieve both an attribute ('attributes/complex/misc') and a feature property ('features/lamp/properties/on') of a Thing using a field selector. The response includes the requested fields from different parts of the Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"complex\": {\n      \"misc\": \"foo\"\n    }\n  },\n  \"features\": {\n    \"lamp\": {\n      \"properties\": {\n        \"on\": true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for DefinitionCreated Event\nDESCRIPTION: Represents the event message generated when a thing's definition is created in Eclipse Ditto. The event includes the topic identifying the thing, correlation headers, the definition path, the new definition value, and the revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/thingdefinitioncreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/definition\",\n  \"value\": \"digitaltwin:DigitaltwinExample:1.0.0\",\n  \"revision\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Background Sync Status Check in JSON format\nDESCRIPTION: This JSON snippet represents the status of the background sync process during the reindexing of things in Ditto 3.0. It shows the progress and status of the operation as 'UP'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_300.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"label\": \"backgroundSync\", \"status\": \"UP\", \"details\": [{\"INFO\": {\"enabled\": true, \"events\": [{\"2022-08-25T02:13:07.695990296Z\": \"WOKE_UP\"}], \"progressPersisted\": \"ditto:device1234\", \"progressIndexed\": \":_\"}}]} }\n```\n\n----------------------------------------\n\nTITLE: Filtering Change Notifications by Attribute Value in Eclipse Ditto\nDESCRIPTION: RQL expression to filter change notifications based on the value of an attribute. This example filters events where the 'count' attribute is greater than 42.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-changenotifications.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfilter=gt(attributes/count,42)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Specific Message Subjects via SSE\nDESCRIPTION: HTTP endpoints for subscribing to messages with specific subjects, allowing filtered message subscriptions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/things/<thingId>/inbox/messages/<subject>\nhttp://localhost:8080/api/2/things/<thingId>/outbox/messages/<subject>\n```\n\n----------------------------------------\n\nTITLE: Querying Feature Capabilities using Eclipse Ditto API - Bash\nDESCRIPTION: This curl command queries the features of a specific Thing in the Eclipse Ditto API. It requires the user's credentials and expects a JSON response with the feature's details.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration-example.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request GET -u ditto:ditto 'https://ditto.eclipseprojects.io/api/2/things/io.eclipseprojects.ditto:floor-lamp-0815/features/Spot1' \\\n--header 'Accept: application/td+json'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Nested Thing Attributes with Field Selector in Eclipse Ditto\nDESCRIPTION: Shows how to retrieve multiple specific nested attributes ('attributes/complex/some' and 'attributes/complex/serialNo') of a Thing using a field selector. The response includes only the requested fields.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"complex\": {\n      \"some\": false,\n      \"serialNo\": 4711\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Deleted Event Structure in JSON\nDESCRIPTION: This JSON snippet shows the structure of a FeatureDeleted event in Eclipse Ditto. It includes the topic path identifying the thing, headers with correlation ID, the path to the deleted feature, and the revision number of the change.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuredeleted.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Thing Command Response - JSON Example\nDESCRIPTION: This JSON snippet illustrates the structure of a successful response (status 204) after a 'merge' command is processed against the '/features/accelerometer/desiredProperties' path of a Ditto thing.  The 'correlation-id' in the headers links the response to the original command. The topic indicates the event type and the thing involved.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeaturedesiredpropertiesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: FeatureDefinitionCreated Event JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a FeatureDefinitionCreated event in Eclipse Ditto. It shows the event structure for when a feature definition is created for a specific feature (in this case 'accelerometer') of a thing. The event includes the topic, headers with correlation ID, path to the feature definition, the definition value, and revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuredefinitioncreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"value\": [\n    \"org.eclipse.ditto:accelerometer:1.0.0\"\n  ],\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Querying BaSyx AAS Server Shells with cURL\nDESCRIPTION: cURL command to verify that the AAS was successfully created on the BaSyx AAS Server by retrieving all shells. This should show the AAS with its ID, submodels, and asset information.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET <basyx-server-instance-url>:4001/aasServer/shells\n```\n\n----------------------------------------\n\nTITLE: Including Delete Attributes Response Markdown in Jekyll\nDESCRIPTION: This snippet includes a markdown file containing the delete attributes response example for the Eclipse Ditto protocol. It uses Jekyll's include_relative directive to insert the content.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deleteattributes.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/deleteattributesresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Changing Log Level for a Specific Service - JSON\nDESCRIPTION: This snippet shows an example payload to change the log level of logger 'org.eclipse.ditto' for all instances of the gateway service to DEBUG by sending a PUT request to the '/devops/logging/gateway' endpoint.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"logger\": \"org.eclipse.ditto\",\n    \"level\": \"debug\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure IoT Hub AMQP Connection\nDESCRIPTION: JSON configuration for establishing an AMQP 1.0 connection to Azure IoT Hub for forwarding live messages as Cloud To Device (C2D) messages.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Azure IoT Hub AMQP\",\n  \"connectionType\": \"amqp-10\",\n  \"connectionStatus\": \"open\",\n  \"uri\": \"amqps://<hostname>:5671\",\n  \"sources\": [],\n  \"targets\": [{\n    \"address\": \"/messages/devicebound\",\n    \"topics\": [\"_/_/things/live/messages\"],\n    \"authorizationContext\": [\"integration:ditto\"],\n    \"headerMapping\": {\n      \"iothub-ack\": \"full\",\n      \"to\": \"/devices/{{thing:id}}/messages/devicebound\"\n    }\n  }\n  ],\n  \"clientCount\": 1,\n  \"failoverEnabled\": true,\n  \"validateCertificates\": true,\n  \"processorPoolSize\": 5,\n  \"credentials\": {\n    \"type\": \"hmac\",\n    \"algorithm\": \"az-sasl\",\n    \"parameters\": {\n      \"sharedKeyName\": \"<shared-access-policy-name>\",\n      \"sharedKey\": \"<shared-access-key>\",\n      \"endpoint\": \"<hostname>\"\n    }\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Feature Desired Properties Command Path\nDESCRIPTION: Command path format for deleting all desired properties of a Feature. Uses namespace, thing name, feature ID and channel parameters.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-delete.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<namespace>/<thingName>/things/<channel>/commands/delete\n```\n\n----------------------------------------\n\nTITLE: Alternative Ditto Startup for Limited Resources\nDESCRIPTION: A more gradual startup command for systems with limited resources, starting services sequentially with delays to ensure proper initialization.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-04-16-connecting-to-ttn-via-mqtt.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose start mongodb; sleep 30; docker-compose start policies things; sleep 60; docker-compose start concierge; sleep 60; docker-compose start things-search; sleep 60; docker-compose start connectivity; sleep 60; docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: HTTP Response for Successful Acknowledgements in Eclipse Ditto\nDESCRIPTION: Example JSON response when two acknowledgements are requested and successfully processed in an HTTP request to Eclipse Ditto. The response includes details for both 'twin-persisted' and 'my-custom-ack' acknowledgements.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-acknowledgements.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"twin-persisted\": {\n    \"status\": 201,\n    \"payload\": {\n      \"thingId\": \"org.eclipse.ditto:thing-1\",\n      \"policyId\": \"org.eclipse.ditto:thing-1\"\n    },\n    \"headers\": {\n      \"correlation-id\": \"db878735-4957-4fd9-92dc-6f09bb12a093\",\n      \"version\": 2,\n      \"etag\": \"\\\"rev:1\\\"\",\n      \"location\": \"http://127.0.0.1:8080/api/2/things/org.eclipse.ditto:thing-1\"\n    }\n  },\n  \"my-custom-ack\": {\n    \"status\": 200,\n    \"payload\": {\n      \"outcome\": \"green\"\n    },\n    \"headers\": {\n      \"version\": 2,\n      \"correlation-id\": \"db878735-4957-4fd9-92dc-6f09bb12a093\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Feature Data in Eclipse Ditto using JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a Thing merged event in Eclipse Ditto. It shows how to merge feature data, specifically an accelerometer, at the /features path. The event includes topic, headers, path, value, revision, and timestamp information.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergedfeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"accelerometer\": {\n      \"definition\": [\n        \"org.eclipse.ditto:accelerometer:1.0.0\"\n      ],\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"g\"\n      }\n    }\n  },\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Definition Command in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the command structure for modifying a feature definition in Eclipse Ditto. It includes the topic, headers, and path for the modification request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/commands/modify/modifyfeaturedefinition.md %}\n```\n\n----------------------------------------\n\nTITLE: Updating Temperature Sensor Value with Ditto API\nDESCRIPTION: This curl command updates the temperature value for the combined temperature and humidity sensor digital twin using Ditto's HTTP API.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-09-21-selective-push-notifications.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -u 'ditto:ditto' --header 'Content-Type: application/json' -d \\\n    '23' \\\n    'http://localhost:8080/api/2/things/org.eclipse.ditto%3ATemperatureAndHumiditySensor/features/environmentSensor/properties/temperature'\n```\n\n----------------------------------------\n\nTITLE: Sending Message to Thing Inbox using cURL\nDESCRIPTION: Example of sending a text message to a Thing's inbox with subject 'ask'. The request is sent to a smart coffee machine Thing with basic authentication.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-messages.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url http://localhost:8080/api/2/things/org.eclipse.ditto:smartcoffee/inbox/messages/ask \\\n  --header 'content-type: text/plain' \\\n  --header 'Authorization: Basic ZGl0dG86ZGl0dG8=' \\\n  --data 'Hey, how are you?'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Connection to Azure Monitor Data Collector API in Eclipse Ditto\nDESCRIPTION: JSON configuration for an HTTP connection to Azure Monitor Data Collector API. It includes credentials setup, target configuration to push twin events into Azure Monitor, and specific header mappings for the API.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Azure Monitor\",\n  \"connectionType\": \"http-push\",\n  \"connectionStatus\": \"open\",\n  \"uri\": \"https://<workspace-id>.ods.opinsights.azure.com:443\",\n  \"credentials\": {\n    \"type\": \"hmac\",\n    \"algorithm\": \"az-monitor-2016-04-01\",\n    \"parameters\": {\n      \"workspaceId\": \"<workspace-id>\",\n      \"sharedKey\": \"<shared-key>\"\n    }\n  },\n  \"sources\": [],\n  \"targets\": [{\n      \"address\": \"POST:/api/logs?api-version=2016-04-01\",\n      \"topics\": [ \"_/_/things/twin/events\" ],\n      \"authorizationContext\": [ \"integration:ditto\" ],\n      \"headerMapping\": {\n        \"Content-Type\": \"application/json\",\n        \"Log-Type\": \"TwinEvent\"\n      }\n  }],\n  \"clientCount\": 1,\n  \"failoverEnabled\": true,\n  \"validateCertificates\": true,\n  \"processorPoolSize\": 5,\n  \"specificConfig\": {\n    \"parallelism\": \"1\"\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Proxy for Ditto Pre-Authentication\nDESCRIPTION: This configuration snippet for Nginx sets up basic authentication and passes the authenticated username to Ditto as a pre-authenticated header.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nauth_basic                    \"Authentication required\";\nauth_basic_user_file          nginx.htpasswd;\n...\nproxy_set_header              x-ditto-pre-authenticated \"nginx:${remote_user}\";\n```\n\n----------------------------------------\n\nTITLE: Generating Thing Unavailable Error Response in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents an error message when a Thing is unavailable in Eclipse Ditto. It includes the topic, correlation ID, error details, and HTTP status code. The error specifically indicates a 503 status with a 'things:thing.unavailable' error type.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_thing_unavailable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 503,\n    \"error\": \"things:thing.unavailable\",\n    \"message\": \"The Thing with ID 'org.eclipse.ditto:fancy-thing' is not available, please try again later.\",\n    \"description\": \"The requested Thing is temporarily not available.\"\n  },\n  \"status\": 503\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Desired Property in Digital Twin Feature\nDESCRIPTION: This JSON snippet defines a command to delete the 'x' property from the 'desiredProperties' of the 'accelerometer' feature for a digital twin named 'fancy-thing'. The 'topic' specifies the event stream, 'headers' include a correlation ID for tracking, and 'path' points to the exact property to delete within the twin's structure.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeaturedesiredproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Desired Property Command in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the command structure for retrieving a desired property of a feature in Eclipse Ditto. It includes the topic, path, and other relevant fields.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrievedesiredproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrievefeaturedesiredproperty.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: POST Search Query with Form Data\nDESCRIPTION: HTTP POST request with form-urlencoded body containing filter, namespaces and options\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-search.md#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST .../search/things\nbody: filter=eq(attributes/location,\"living-room\")&namespaces=org.eclipse.ditto,foo.bar&option=sort(+thingId),limit(0,5)\n```\n\n----------------------------------------\n\nTITLE: Including Modify Feature Command in Markdown\nDESCRIPTION: This snippet includes the content of a markdown file containing the modify feature command details.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createfeature.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyfeature.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Client Interface Definition\nDESCRIPTION: Defines the new asynchronous client creation interface introduced in version 1.3.0, showing the class structure and available methods.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-10-08-asynchronous-client-creation.md#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic final class DittoClients {\n\n    public static DisconnectedDittoClient newDisconnectedInstance(MessagingProvider mp);\n}\n\npublic interface DisconnectedDittoClient {\n\n    CompletionStage<DittoClient> connect();\n\n    void destroy();\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting ACKs via WebSocket Query Parameter in Markdown\nDESCRIPTION: Example of how to declare acknowledgement labels when establishing a WebSocket connection in Eclipse Ditto. This specifies the labels for acknowledgements that the client intends to issue.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-acknowledgements.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\nGET /ws/2?declared-acks=some-connection-id:ack-label-1,my:ack-label-2\n```\n```\n\n----------------------------------------\n\nTITLE: Receiving Created Response for Policy ID Change in Eclipse Ditto\nDESCRIPTION: This snippet shows the response when a new policy ID has been created for a Thing. It includes the topic, status, and headers of the response.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifypolicyid.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"value\": \"org.eclipse.ditto:new-policy\",\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PKCS1 to PKCS8 Private Key Format Using OpenSSL\nDESCRIPTION: Command line instruction for converting a PKCS1 private key to the required PKCS8 format using OpenSSL.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-tls-certificates.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs8 -topk8 -nocrypt -in client-private.pem.key -out client-private.pem.pk8\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Thing with ETag Header in Ditto HTTP API\nDESCRIPTION: HTTP GET request to retrieve a thing, which returns an ETag header containing the revision information. This ETag can later be used for conditional operations.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nGET .../things/{thingId}\n```\n\nLANGUAGE: http\nCODE:\n```\nETag: \"rev:2\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"{thingId}\",\n  \"policyId\": \"{policyId}\",\n  \"definition\": \"{definition}\",\n  \"attributes\": {\n    \"manufacturer\": \"ACME crop\",\n    \"otherData\": 4711\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RetrieveFeatureDesiredPropertyResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a response to a command that retrieves a specific desired property of a feature in Eclipse Ditto. It includes the topic, correlation ID in headers, the path to the specific property, the property value, and a 200 status code indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeaturedesiredpropertyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"value\": 42,\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Policy Subject Command in Eclipse Ditto\nDESCRIPTION: JSON command structure for modifying a subject within a policy entry. The command targets a specific policy ID and label, updating the subject type for a given subject identifier. Requires correlation ID in headers for tracking the command.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifysubject.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects/google:the_subjectid\",\n  \"value\": {\n    \"type\": \"yourSubjectTypeDescription\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Desired Property Modified Event JSON Structure\nDESCRIPTION: Example JSON structure showing the event payload when a feature's desired property is modified. The event includes the topic path identifying the thing, correlation headers, the specific feature property path that was modified, the new value, and the revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuredesiredpropertymodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"value\": 42,\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Policy in Ditto with cURL\nDESCRIPTION: cURL command to create a policy in Eclipse Ditto that defines authorization information for Things. The policy grants READ, WRITE permissions for thing, policy, and message resources to authenticated users.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nPOLICY_ID=machine:my-policy\n\ncurl -i -X PUT -u ditto:ditto -H 'Content-Type: application/json' --data '{\n  \"entries\": {\n    \"DEFAULT\": {\n      \"subjects\": {\n        \"{%raw%}{{ request:subjectId }}{%endraw%}\": {\n           \"type\": \"Ditto user authenticated via nginx\"\n        }\n      },\n      \"resources\": {\n        \"thing:/\": {\n          \"grant\": [\"READ\", \"WRITE\"],\n          \"revoke\": []\n        },\n        \"policy:/\": {\n          \"grant\": [\"READ\", \"WRITE\"],\n          \"revoke\": []\n        },\n        \"message:/\": {\n          \"grant\": [\"READ\", \"WRITE\"],\n          \"revoke\": []\n        }\n      }\n    }\n  }\n}' <ditto-instance-url>/api/2/policies/$POLICY_ID\n```\n\n----------------------------------------\n\nTITLE: Running Ditto UI Development Server\nDESCRIPTION: Command to start the local development server for Ditto UI\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/ui/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Creating Temperature Sensor Digital Twin with Ditto API\nDESCRIPTION: This curl command creates a digital twin for a temperature sensor using Ditto's HTTP API. It sets up a thing with an environmentSensor feature containing a temperature property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-09-21-selective-push-notifications.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -u 'ditto:ditto' --header 'Content-Type: application/json' -d \\\n    '{\n       \"features\": {\n         \"environmentSensor\": {\n           \"properties\": { \n             \"temperature\": 0.0\n           }\n         }\n       }\n     }' \\\n    'http://localhost:8080/api/2/things/org.eclipse.ditto%3ATemperatureSensor'\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Content for Feature Desired Property Modified Event\nDESCRIPTION: This snippet includes the content of a markdown file containing the event generated when a feature's desired property is modified in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifydesiredproperty.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/featuredesiredpropertymodified.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Requesting Search Subscription Command\nDESCRIPTION: Command for requesting details of an existing search subscription\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/protocol-examples-search.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/request-subscription-command.md %}{% endcapture %}\n```\n\n----------------------------------------\n\nTITLE: Merge Thing Command Response\nDESCRIPTION: This JSON snippet represents the response received after sending a merge command to a Ditto thing. The command targeted the '/features/accelerometer' path. The status code 204 indicates that the merge operation was successful.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeatureresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: ModifyImportsResponse JSON structure in Eclipse Ditto\nDESCRIPTION: JSON response format after a successful policy imports modification in Eclipse Ditto. The response includes the topic path to the policy, correlation ID in headers for traceability, the specific path to imports, and a 204 status code indicating successful completion with no content returned.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifyimportsresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/imports\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Merged Event JSON Structure for Feature Desired Properties\nDESCRIPTION: Demonstrates the JSON format of a Thing merged event at the path /features/accelerometer/desiredProperties. The event includes topic identification, headers, path specification, property values for x/y/z coordinates and unit, along with revision and timestamp metadata.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergedfeaturedesiredproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"value\": {\n    \"x\": 3.141,\n    \"y\": 2.718,\n    \"z\": 1,\n    \"unit\": \"g\"\n  },\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Timeout Parameter\nDESCRIPTION: Example of sending a message with a timeout parameter set to 0 to avoid waiting for a response. Uses cURL to send a POST request to the Thing's inbox.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-messages.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url http://localhost:8080/api/2/things/org.eclipse.ditto:smartcoffee/inbox/messages/ask.question?timeout=0 \\\n  --header 'content-type: text/plain' \\\n  --header 'Authorization: Basic ZGl0dG86ZGl0dG8=' \\\n  --data 'Hey, how are you?'\n```\n\n----------------------------------------\n\nTITLE: Event for Merged Desired Property of a Feature in Eclipse Ditto\nDESCRIPTION: This snippet shows the event generated when a desired property of a feature is successfully merged. It includes details such as the thing ID, feature ID, and the merged property value.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergedesiredproperty.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"value\": 42,\n  \"revision\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Missing Desired Property in Thing Feature\nDESCRIPTION: Example JSON response when attempting to access a non-existent desired property in a Thing's Feature. The response includes error details, status code 404, and guidance for troubleshooting.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_desired_property_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"things:feature.desiredProperty.notfound\",\n    \"message\": \"The desired property with JSON Pointer '/x' of the Feature with ID 'accelerometer' on the Thing with ID 'org.eclipse.ditto:fancy-thing' does not exist or the requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Thing, the Feature ID and the key of your requested desired property was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Imports JSON Response in Eclipse Ditto\nDESCRIPTION: This JSON example demonstrates the response format when retrieving policy imports. The response includes a list of imported policies with their IDs as keys, and optionally specifies which entries from those policies are imported. This response follows Ditto's command-response pattern with status code 200 indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrieveimportsresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/imports\",\n  \"value\": {\n    \"org.eclipse.ditto:policy1\": { },\n    \"org.eclipse.ditto:policy2\": {\n      \"entries\": [ \"IMPORTED_ENTRY\" ]\n    },\n    \"org.eclipse.ditto:policy3\": {\n      \"entries\": [ \"YET_ANOTHER_IMPORTED_ENTRY\" ]\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Feature Properties Not Found in Eclipse Ditto\nDESCRIPTION: This JSON structure represents the error response when feature properties cannot be found in Eclipse Ditto. It includes the error code 'things:feature.properties.notfound', a descriptive error message, and guidance for resolving the issue. The HTTP status code 404 indicates that the requested resource was not found.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_properties_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"things:feature.properties.notfound\",\n    \"message\": \"The Properties of the Feature with ID 'accelerometer' on the Thing with ID 'org.eclipse.ditto:fancy-thing' do not exist or the requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Thing and the Feature ID was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: GET Search Query with Namespace Only\nDESCRIPTION: HTTP GET request filtering results by specified namespaces\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-search.md#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET .../search/things?namespaces=org.eclipse.ditto,foo.bar\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Response Using Liquid Template\nDESCRIPTION: Template code for including and rendering a markdown file containing the retrieve feature response format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrievefeature.md#2025-04-17_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/query/retrievefeatureresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Processing Policy Subject Response in Eclipse Ditto\nDESCRIPTION: Template for including a markdown file containing responses to policy subject modification commands in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-createsubject.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifysubjectresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Modifying a Policy with JSON Command in Eclipse Ditto\nDESCRIPTION: This JSON command structure is used to modify a policy in Eclipse Ditto. It specifies the policy ID, entries with labels, subjects, and resource permissions (grant/revoke). The command is sent to a specific topic and includes correlation ID in the headers.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifypolicy.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"entries\": {\n      \"the_label\": {\n        \"subjects\": {\n          \"google:the_subjectid\": {\n            \"type\": \"yourSubjectTypeDescription\"\n          }\n        },\n        \"resources\": {\n          \"thing:/the_resource_path\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": []\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Property Command/Response Structure\nDESCRIPTION: Command and response format for retrieving a single property of a Feature. Supports hierarchical property access using JSON Pointer notation (RFC-6901). Returns specific property as JSON with HTTP 200 status on success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-retrieve.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nCommand:\\n| Field     | Value                   |\\n|-----------|-------------------------|\\n| **topic** | `<namespace>/<thingName>/things/<channel>/commands/retrieve`     |\\n| **path**  | `/features/<featureId>/properties/<propertyPath>`     |\n```\n\n----------------------------------------\n\nTITLE: Referencing W3C Basic Geo Vocabulary in JSON-LD Context\nDESCRIPTION: This snippet demonstrates how to reference the W3C Basic Geo (WGS84 lat/long) Vocabulary in a JSON-LD context to describe geolocations.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": [\n    \"https://www.w3.org/2022/wot/td/v1.1\",\n    {\n      \"geo\": \"http://www.w3.org/2003/01/geo/wgs84_pos#\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Next Page of Search Results in Eclipse Ditto\nDESCRIPTION: JSON structure for requesting the next page of search results for things in Eclipse Ditto. It includes a subscription ID and an array of found things with their attributes. The message uses a specific topic pattern for twin search pagination.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/generated/events/subscription-has-next-event.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"_/_/things/twin/search/next\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"subscriptionId\": \"24601\",\n    \"items\": [{\n        \"thingId\": \"default:thing1\",\n        \"attributes\": {\n          \"temperature\": 35\n        }\n      },\n      {\n        \"thingId\": \"default:thing2\",\n        \"attributes\": {\n          \"temperature\": 35\n        }\n      }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AttributesDeleted Event Format in Eclipse Ditto\nDESCRIPTION: JSON format of the AttributesDeleted event that is published when all attributes of a thing are deleted. The event includes the topic identifying the thing, correlation-id in headers to track the originating command, the path indicating attributes were affected, and the revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/attributesdeleted.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: ModifyResourceResponse JSON Structure for Ditto Policy Management\nDESCRIPTION: This JSON structure represents a response to a policy resource modification operation in Eclipse Ditto. It includes the topic, correlation ID, resource path, granted/revoked permissions, and a 201 status code indicating successful creation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifyresourceresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources/thing:/the_resource_path\",\n  \"value\": {\n    \"grant\": [\n      \"READ\",\n      \"WRITE\"\n    ],\n    \"revoke\": []\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: AttributesCreated Event Structure in JSON\nDESCRIPTION: Example of an AttributesCreated event JSON structure in Eclipse Ditto. The event is triggered when attributes are created for a thing, containing metadata such as topic, headers, path, and the actual attribute values. This example shows location coordinates being created.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/attributescreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"value\": {\n    \"location\": {\n      \"latitude\": 44.673856,\n      \"longitude\": 8.261719\n    }\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Property Response in Eclipse Ditto\nDESCRIPTION: This JSON snippet shows the response structure after successfully modifying a feature property in Eclipse Ditto. It includes the status code and the modified property value.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyproperty.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": 42,\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding CompletableFuture get() Method in Java Tests\nDESCRIPTION: This snippet shows the method to avoid when working with CompletableFuture in tests, as it can throw InterruptedException.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0003-do-not-interrupt-threads.md#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nCompletableFuture.get()\n```\n\n----------------------------------------\n\nTITLE: Creating Thing ID in Ditto Sandbox (Plain Text)\nDESCRIPTION: Demonstrates the format for creating a Thing ID in the Ditto sandbox. The ID must contain a namespace in Java package notation, followed by a colon and an arbitrary string.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/sandbox.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\norg.eclipse.ditto:my-first-thing\n```\n\n----------------------------------------\n\nTITLE: Deploying Eclipse Ditto Services with Optional Version Specification\nDESCRIPTION: kubectl commands to deploy Eclipse Ditto services using either the default 'latest' tag or an alternative version like '0-SNAPSHOT' by modifying the deployment file on-the-fly.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deployment/kubernetes/deploymentFiles/ditto/\n# Start ditto services with an alternative version e.g. 0-SNAPSHOT\n# cat deployment/kubernetes/deploymentFiles/ditto/ditto-cluster.yaml | sed s/latest/0-SNAPSHOT/ | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Resources by Label in Eclipse Ditto using JSON\nDESCRIPTION: A JSON command structure for retrieving all resources within a specific policy entry label. This command targets the policies API with a specified policy ID and label, returning all resource definitions for that entry.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrieveresources.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Thing Command Response for Feature Definition in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet shows the response format when a merge operation is successfully executed on a feature's definition. The response includes the topic, headers with correlation ID, the specific path being merged ('/features/accelerometer/definition'), and a 204 status code indicating successful execution with no content returned.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeaturedefinitionresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMap for K6 Test Scripts\nDESCRIPTION: Kubernetes command to create a ConfigMap from the K6 test scripts directory. The K6 operator will use this ConfigMap as the source for test execution.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/benchmark-tool/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create configmap k6-test --from-file test/\n```\n\n----------------------------------------\n\nTITLE: Generating Features Modified Event in Eclipse Ditto\nDESCRIPTION: This snippet shows the structure of an event generated when features are successfully modified in Eclipse Ditto. It includes the topic, headers, path, and the new features that were set.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyfeatures.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"accelerometer\": {\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"g\"\n      }\n    },\n    \"gyroscope\": {\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"°/s\"\n      }\n    }\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: AttributesModified Event Structure in Eclipse Ditto\nDESCRIPTION: Example JSON structure for the AttributesModified event in Eclipse Ditto. This event is published when attributes of a thing are modified in the twin. It includes the topic, correlation ID, path, modified values, and revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/attributesmodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"value\": {\n    \"location\": {\n      \"latitude\": 44.673856,\n      \"longitude\": 8.261719\n    }\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Desired Properties Created Event in Eclipse Ditto\nDESCRIPTION: Event generated when feature desired properties are successfully created in Eclipse Ditto. It includes details of the created desired properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createdesiredproperties.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/featuredesiredpropertiescreated.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Migration Script from 0.8.0-M2 to 0.8.0-M3\nDESCRIPTION: JavaScript migration script for MongoDB to add the _thingId field to documents in the policiesBasedSearchIndex collection after upgrading from Ditto 0.8.0-M2 to 0.8.0-M3.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_080M3.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmigration_mongodb_0.8.0-M2_0.8.0-M3.js\n```\n\n----------------------------------------\n\nTITLE: Sending Message from Thing Outbox\nDESCRIPTION: Example of sending a message from a Thing's outbox using cURL. Includes a correlation ID header for message tracking.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-messages.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n  --url http://localhost:8080/api/2/things/org.eclipse.ditto:smartcoffee/outbox/messages/inform \\\n  --header 'correlation-id: an-unique-string-for-this-message' \\\n  --header 'content-type: text/plain' \\\n  --header 'Authorization: Basic ZGl0dG86ZGl0dG8=' \\\n  --data 'No one used me for half an hour now. I am going to shutdown soon.'\n```\n\n----------------------------------------\n\nTITLE: Defining Importable Policy Entries in JSON\nDESCRIPTION: This JSON snippet demonstrates how to specify different types of importable entries in a policy. It includes examples of implicit, explicit, and never importable entries.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-policy.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entries\": {\n    \"DEFAULT\": {\n      \"subjects\": { ... },\n      \"resources\": { ... }\n    },\n    \"IMPLICIT\": {\n      \"subjects\": { ... },\n      \"resources\": { ... },\n      \"importable\": \"implicit\"\n    },\n    \"EXPLICIT\": {\n      \"subjects\": { ... },\n      \"resources\": { ... },\n      \"importable\": \"explicit\"\n    },\n    \"NEVER\": {\n      \"subjects\": { ... },\n      \"resources\": { ... },\n      \"importable\": \"never\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Features Created Event JSON Structure\nDESCRIPTION: Example of a FeaturesCreated event message showing the creation of an accelerometer feature with both actual and desired properties. The event includes topic information, correlation headers, path, and feature values with revision tracking.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featurescreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"accelerometer\": {\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"g\"\n      },\n      \"desiredProperties\": {\n        \"x\": 4,\n        \"y\": 3,\n        \"z\": 5,\n        \"unit\": \"g\"\n      }\n    }\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: SubjectDeletionAnnouncement Topic and Path Structure\nDESCRIPTION: Specifies the topic path and content structure for the SubjectDeletionAnnouncement, which indicates that subjects of a policy are deleted or about to be deleted soon.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-announcement.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<namespace>/<policyName>/policies/announcements/subjectDeletion\n```\n\n----------------------------------------\n\nTITLE: Handling Deletion Error Response in Eclipse Ditto Things API (JSON)\nDESCRIPTION: This JSON structure represents an error response when attempting to delete a thing without proper permissions in Eclipse Ditto. It includes details such as the error topic, headers, path, and a detailed error message with status code 403 (Forbidden).\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_thing_notdeletable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"things:thing.notdeletable\",\n    \"message\": \"The Thing with ID 'org.eclipse.ditto:fancy-thing' could not be deleted as the requester had insufficient permissions ( WRITE on root resource is required).\",\n    \"description\": \"Check if the ID of your requested Thing was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Policy Resource using JSON Command in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a command to retrieve a specific resource within a policy entry in Eclipse Ditto. It includes the topic for policy commands, correlation ID in the headers, and the path to the specific resource being retrieved.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrieveresource.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources/thing:/the_resource_path\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ditto Protocol Topic Structure for Connections\nDESCRIPTION: Demonstrates the required format for a valid Ditto Protocol topic when addressing connections. The topic consists of five elements: an empty field, the connection ID, the 'connections' group identifier, the 'announcements' criterion, and the announcement subject.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-connections.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n_/<connectionId>/connections/announcements/<subject>\n```\n\n----------------------------------------\n\nTITLE: RQL Query Example - Case Insensitive Search\nDESCRIPTION: Example of using the new ilike operator for case-insensitive search in Ditto's RQL (Resource Query Language)\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_320.md#2025-04-17_snippet_0\n\nLANGUAGE: rql\nCODE:\n```\nilike\n```\n\n----------------------------------------\n\nTITLE: Structuring FeaturesDeleted Event in JSON for Eclipse Ditto\nDESCRIPTION: This JSON snippet represents the structure of a FeaturesDeleted event in Eclipse Ditto. It includes the topic, headers with a correlation ID, path, and revision number. This event is triggered when all features of a thing are deleted.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuresdeleted.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Local Test Execution\nDESCRIPTION: Bash command to source all environment variables needed for running the Ditto benchmark test locally. Uses the test.env file to set configuration parameters.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/benchmark-tool/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nset -a\n. test.env\n```\n\n----------------------------------------\n\nTITLE: Defining CreatePolicyResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a CreatePolicyResponse in Eclipse Ditto. It includes details such as the topic, headers, path, policy value (with ID, entries, subjects, and resources), and status code. This response is typically sent after successfully creating a new policy.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/createpolicyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/create\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"entries\": {\n      \"the_label\": {\n        \"subjects\": {\n          \"google:the_subjectid\": {\n            \"type\": \"yourSubjectTypeDescription\"\n          }\n        },\n        \"resources\": {\n          \"thing:/the_resource_path\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": []\n          }\n        }\n      }\n    }\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Feature Properties Response Structure - JSON\nDESCRIPTION: This snippet explains the JSON structure returned after executing a delete feature properties command. The JSON includes a topic to identify the command, headers to manage command correlation, a path detailing the feature's properties to be deleted, and a status code indicating successful deletion. Dependencies include having a set command structure and proper integration with the org.eclipse.ditto framework. No inputs are provided in this response, but the correlation-id must match the original command sent. The status is a fixed value indicating a successful outcome.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeaturepropertiesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Namespaces\nDESCRIPTION: Example of filtering search results by multiple namespaces.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/search/things?namespaces=org.eclipse.ditto.one,org.eclipse.test\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Thing Messages via SSE\nDESCRIPTION: HTTP endpoints for subscribing to Thing inbox/outbox messages. These endpoints allow receiving messages sent to or by a specific Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/things/<thingId>/inbox/messages\nhttp://localhost:8080/api/2/things/<thingId>/outbox/messages\n```\n\n----------------------------------------\n\nTITLE: Deleting Attribute in Eclipse Ditto Using JSON\nDESCRIPTION: The JSON snippet demonstrates how to format a command for deleting the 'location' attribute from a 'fancy-thing' twin using Eclipse Ditto. The JSON includes the MQTT topic for the command, the headers with a placeholder for correlation-id, and the path indicating which attribute to delete. Prerequisites include understanding the structure of Ditto twins and the command topic format. The path specifies the exact attribute to remove. The expected output is successful attribute deletion, given correct topic and headers.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deleteattribute.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\"\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Entry Modification Response Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a response to a modify policy entry command in Eclipse Ditto. It includes the policy ID in the topic, a correlation ID in the headers, the path to the specific policy entry, the value containing subjects and resources with their permissions, and a status code of 201 indicating successful creation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifypolicyentryresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label\",\n  \"value\": {\n    \"subjects\": {\n      \"google:the_subjectid\": {\n        \"type\": \"yourSubjectTypeDescription\"\n      }\n    },\n    \"resources\": {\n      \"thing:/the_resource_path\": {\n        \"grant\": [\n          \"READ\",\n          \"WRITE\"\n        ],\n        \"revoke\": []\n      }\n    }\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Thing with Copied Policy using Thing Reference in Eclipse Ditto - JSON\nDESCRIPTION: This JSON snippet shows how to create a new Thing with a specified ID in Eclipse Ditto by referencing and copying a Policy from an existing Thing using the Thing reference. Parameters include thingId and policyId, with _copyPolicyFrom indicating the Thing reference path. Constraints involve ensuring correct reference paths and permissions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/createthingalternatives.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/create\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"_copyPolicyFrom\": \"{% raw %}{{ ref:things/com:acme:fancy-thing_52/policyId }}{% endraw %}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Merged Event Structure for Feature Desired Property in Eclipse Ditto\nDESCRIPTION: Example JSON payload of a Thing merged event occurring specifically at the '/features/accelerometer/desiredProperties/x' path. The event shows the structure including topic, headers, path, value, revision, and timestamp fields that are sent when a feature's desired property is updated via merge operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergedfeaturedesiredproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"value\": 42,\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attribute Command Template\nDESCRIPTION: Template showing how to structure a command to retrieve a single attribute using the Eclipse Ditto protocol. The example includes placeholders for thing ID and attribute path.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrieveattribute.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrieveattribute.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Including Tag Logic HTML Snippet\nDESCRIPTION: Includes a tag logic HTML file for rendering search-related content and metadata\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_search.md#2025-04-17_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include taglogic.html %}\n```\n\n----------------------------------------\n\nTITLE: Modify Feature Properties Response in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response structure when modifying feature properties in Eclipse Ditto. It shows the expected format of a successful update.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyproperties.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyfeaturepropertiesresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Token Request HTTP\nDESCRIPTION: HTTP request made by the connection to obtain an OAuth2 access token, including headers and form-encoded body.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-11-03-oauth2.md#2025-04-17_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /785e80cd-e6e6-452a-be97-a59c53edb4d9 HTTP/1.1\nHost: webhook.site\nAccept: application/json\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials\n&client_id=my-client-id\n&client_secret=my-client-secret\n&scope=my-scope\n```\n\n----------------------------------------\n\nTITLE: AttributeDeleted Event JSON Structure\nDESCRIPTION: Shows the JSON structure of an AttributeDeleted event in Eclipse Ditto. The event indicates that a location attribute has been deleted from a Thing's attributes. Contains the topic identifying the Thing, correlation headers for tracing, the path to the deleted attribute, and the revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/attributedeleted.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Including Attribute Modified Event in Markdown\nDESCRIPTION: This snippet includes the content of a markdown file containing the event generated when an attribute is modified in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyattribute.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/attributemodified.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection Logs via Piggyback Command\nDESCRIPTION: DevOps command for retrieving the logs of a specific connection.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:retrieveConnectionLogs\",\n    \"connectionId\": \"<connectionID>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Message to Feature Inbox\nDESCRIPTION: Example of sending a message to a specific Feature (water-tank) of a Thing using cURL. Demonstrates the feature-specific message endpoint.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-messages.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl --request POST \\\n --url http://localhost:8080/api/2/things/org.eclipse.ditto:smartcoffee/features/water-tank/inbox/messages/action \\\n --header 'content-type: text/plain' \\\n --header 'Authorization: Basic ZGl0dG86ZGl0dG8=' \\\n --data 'heatUp'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Desired Property of a Feature in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates a command to delete a desired property of a feature using the Ditto Protocol. It specifies the thing ID, feature ID, and the property to be deleted.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergedesiredproperty.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Feature Properties Modification Error in Eclipse Ditto\nDESCRIPTION: This JSON represents an error response returned when a user attempts to modify properties of a feature without having the required WRITE permission. The response includes a 403 Forbidden status code, error code 'things:feature.properties.notmodifiable', and a detailed error message with troubleshooting guidance.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_properties_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"things:feature.properties.notmodifiable\",\n    \"message\": \"The Properties of the Feature with ID 'accelerometer' on the Thing with ID 'org.eclipse.ditto:fancy-thing' cannot be modified as the requester had insufficient permissions to modify it (WRITE is required).\",\n    \"description\": \"Check if the ID of the Thing and the Feature ID was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Single Policy Import Command Structure\nDESCRIPTION: Command structure for creating or modifying a single policy import, including the imported policy ID.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/modify\",\n  \"path\": \"/imports/<importedPolicyId>\",\n  \"value\": \"<policy_import_json>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subject Command Template\nDESCRIPTION: Template showing the structure of a command to retrieve a policy subject, including command path and relevant headers\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrievesubject.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/commands/query/retrievesubject.md %}\n```\n\n----------------------------------------\n\nTITLE: Cleaning up entity events and snapshots in Ditto\nDESCRIPTION: This snippet demonstrates how to send a cleanup command via piggyback to trigger removal of stale events and snapshots for a specific entity. The example targets the things service.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/thing\",\n  \"headers\": {\n    \"aggregate\": false\n  },\n  \"piggybackCommand\": {\n    \"type\": \"cleanup.sudo.commands:cleanupPersistence\",\n    \"entityId\": \"ditto:thing1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Delete Feature Property Response - JSON\nDESCRIPTION: This JSON snippet outlines the structure of the response returned after a delete operation on a feature property within the Eclipse Ditto application. It includes a topic identifier, a correlation ID for tracking, the path of the property deleted, and a status code indicating the result of the operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeaturepropertyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Caching Signal Enrichment Facade in Java\nDESCRIPTION: Specifies the Java class for implementing the caching approach to signal enrichment, which reduces remoting effort but may have a time interval where cache is out of sync.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0004-signal-enrichment.md#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\norg.eclipse.ditto.internal.models.signalenrichment.DittoCachingSignalEnrichmentFacade\n```\n\n----------------------------------------\n\nTITLE: Modifying Policy Resources in Eclipse Ditto using JSON\nDESCRIPTION: This JSON payload represents a command to modify resources within a policy entry. It specifies the topic, correlation ID, path to the resources, and the new resource value with read and write permissions for a specific resource path.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifyresources.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources\",\n  \"value\": {\n    \"thing:/the_resource_path\": {\n      \"__schemaVersion\": 2,\n      \"grant\": [\n        \"READ\",\n        \"WRITE\"\n      ],\n      \"revoke\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Delete Thing Definition Response in Eclipse Ditto - JSON\nDESCRIPTION: This snippet represents a response to a request for deleting a thing definition within Eclipse Ditto. The communication is typically done over a messaging protocol where the 'topic' key specifies the endpoint. The 'headers' contain metadata like 'correlation-id' for tracking the operation flow, and the 'status' indicates a successful deletion when it is set to 204. No payload is included as the operation is successful.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletethingdefinitionresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/definition\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Search Results with RQL\nDESCRIPTION: Example of using RQL expression to filter search results in SSE stream.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/search/things?filter=eq(attributes/counter,42)\n```\n\n----------------------------------------\n\nTITLE: Querying SSE API for Things in JavaScript\nDESCRIPTION: JavaScript code to create an EventSource for receiving SSE notifications about changes to a specific thing's lamp feature. Uses credentials and filters the events.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// the javascript must be served from the same domain as Ditto is running in order to avoid CORS problems\nlet source = new EventSource('/api/2/things?ids=org.eclipse.ditto:fancy-thing&fields=thingId,features/lamp', { withCredentials: true });\nsource.onmessage = function (event) {\n    console.log(event.data);\n};\n```\n\n----------------------------------------\n\nTITLE: Ditto ModifySubjectResponse JSON Structure\nDESCRIPTION: Example JSON response format when modifying a subject in an Eclipse Ditto policy. Includes the policy topic, correlation ID header, subject path, and subject type value with a 201 status code indicating successful creation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifysubjectresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects/google:the_subjectid\",\n  \"value\": {\n    \"type\": \"yourSubjectTypeDescription\"\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Properties with Wildcard Field Selector in Eclipse Ditto\nDESCRIPTION: Demonstrates using a wildcard field selector ('features/*/properties/on') to retrieve a specific property from all features of a Thing. The response includes the 'on' property for all features that have it.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"lamp\": {\n      \"properties\": {\n        \"on\": true\n      }\n    },\n    \"infrared-lamp\": {\n      \"properties\": {\n        \"on\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Definition Deleted Event JSON Structure\nDESCRIPTION: Example JSON payload for a FeatureDefinitionDeleted event in Eclipse Ditto. The event represents the deletion of a feature definition, specifically for an 'accelerometer' feature from a thing named 'fancy-thing'. Contains the event topic, correlation headers, path to the deleted definition, and revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuredefinitiondeleted.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Desired Property Response in Eclipse Ditto\nDESCRIPTION: This snippet shows the expected response structure when retrieving a desired property of a feature in Eclipse Ditto. It includes the response topic, status, and value of the desired property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrievedesiredproperty.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/query/retrievefeaturedesiredpropertyresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Generating Thing Not Found Error Response in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents an error response when a Thing is not found or cannot be accessed due to insufficient permissions in Eclipse Ditto. It includes details such as the topic, headers, path, error message, and HTTP status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_thing_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"things:thing.notfound\",\n    \"message\": \"The Thing with ID 'org.eclipse.ditto:fancy-thing' could not be found or requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of your requested Thing was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Resources Command in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the command structure for retrieving policy resources in Eclipse Ditto. It includes the topic, path, and headers for the retrieval request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrieveresources.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrieveresources.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Including Modify Attributes Command Template in Markdown\nDESCRIPTION: This snippet includes a markdown template for the modify attributes command in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyattributes.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Imports Command Reference\nDESCRIPTION: Jekyll template inclusion for retrieving policy imports command documentation from a generated markdown file.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrieveimports.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrieveimports.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Merging Thing Policy Identifier in Eclipse Ditto\nDESCRIPTION: A JSON command that updates the policy ID for a specific thing using a merge operation. The command includes a topic, headers with content type and correlation ID, and specifies the path and new policy ID value.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergepolicyid.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"value\": \"org.eclipse.ditto:the_policy_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Property Command in Ditto Protocol\nDESCRIPTION: Example JSON command for retrieving a specific property 'x' from the 'accelerometer' feature of a thing. The command uses the twin channel and includes required headers like correlation-id.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeatureproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Desired Properties Command in Eclipse Ditto\nDESCRIPTION: This JSON snippet represents a command to delete the desired properties of a feature named 'lamp' for a thing with ID 'org.eclipse.ditto:fancy-lamp'. The command is sent on a specific topic and includes headers for correlation and content type.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletedesiredproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-lamp/things/live/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/lamp/desiredProperties\",\n  \"command\": \"deleteFeatureDesiredProperties\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Commands with JSON Patch in Eclipse Ditto\nDESCRIPTION: This JSON message is designed to send a merge command to an Eclipse Ditto digital twin. It specifies a merge operation for the feature \\\\\"accelerometer\\\\\" on a twin identified by its path. Dependencies include the Eclipse Ditto framework and an understanding of the target twin model structure. Key parameters involve the \\\\\"path\\\\\" for locating the feature and \\\\\"value\\\\\" for the properties to merge. The expected output is an updated twin with merged features, constrained by Ditto's schema definitions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeature.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"value\": {\n    \"definition\": [\n      \"org.eclipse.ditto:accelerometer:1.0.0\"\n    ],\n    \"properties\": {\n      \"x\": 3.141,\n      \"y\": 2.718,\n      \"z\": 1,\n      \"unit\": \"g\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Thing Definition Modified Event in Markdown\nDESCRIPTION: This snippet includes the content of a Markdown file containing the event triggered when a Thing's definition is modified.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifythingdefinition.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/thingdefinitionmodified.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Modifying a Thing Response in Eclipse Ditto (JSON)\nDESCRIPTION: This snippet demonstrates the response format for a successful Thing modification in Eclipse Ditto. It includes the topic, headers, and status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifything.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Update (Ditto Protocol)\nDESCRIPTION: Illustrates how to perform a conditional update using the Ditto Protocol. The condition checks if the lastModified timestamp is greater than a specified date.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-conditional-requests.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"condition\": \"gt(features/temperature/properties/lastModified,2021-08-10T15:10:02.592Z)\" \n  },\n  \"path\": \"/features/temperature/properties/value\",\n  \"value\": 19.26\n}\n```\n\n----------------------------------------\n\nTITLE: Representing PolicyIdModified Event in JSON for Eclipse Ditto\nDESCRIPTION: This JSON snippet demonstrates the structure of a PolicyIdModified event in Eclipse Ditto. It includes the topic, headers, path, new policy ID value, and revision number. This event is triggered when the policy ID of a thing is modified.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/policyidmodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"value\": \"org.eclipse.ditto:the_policy_id\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Including Modify Feature Response in Markdown\nDESCRIPTION: This snippet includes the content of a markdown file containing the modify feature response details.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createfeature.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyfeatureresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Feature Created Event Format\nDESCRIPTION: JSON event format emitted when a new Feature is created. Contains topic, path and value fields for the newly created Feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-create-or-modify.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<thingName>/things/<channel>/events/created\",\n  \"path\": \"/features/<featureId>\",\n  \"value\": \"<feature-json>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ditto Error Schema in JSON\nDESCRIPTION: This snippet defines the schema for Ditto error responses, including properties for description, error code, message, link, and status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration-example.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n\"schemaDefinitions\": {\n  \"dittoError\": {\n    \"type\": \"object\",\n    \"title\": \"Ditto error.\",\n    \"description\": \"Provides additional information about an occurred error and how to resolve it.\",\n    \"properties\": {\n      \"description\": {\n        \"type\": \"string\",\n        \"title\": \"Error description.\",\n        \"description\": \"Contains further information about the error e.g. a hint what caused the problem and how to solve it.\"\n      },\n      \"error\": {\n        \"type\": \"string\",\n        \"title\": \"Error code identifier.\",\n        \"description\": \"The error code or identifier that uniquely identifies the error.\"\n      },\n      \"message\": {\n        \"type\": \"string\",\n        \"title\": \"Error message.\",\n        \"description\": \"The human readable message that explains what went wrong during the execution of a command/message.\"\n      },\n      \"href\": {\n        \"type\": \"string\",\n        \"title\": \"Error link.\",\n        \"description\": \"A link to further information about the error and how to fix it.\",\n        \"format\": \"uri\"\n      },\n      \"status\": {\n        \"type\": \"integer\",\n        \"title\": \"Status code.\",\n        \"description\": \"The status code of the error with HTTP status code semantics (e.g.: 4xx for user errors, 5xx for server errors).\",\n        \"minimum\": 400,\n        \"maximum\": 599\n      }\n    },\n    \"required\": [\n      \"status\",\n      \"error\",\n      \"message\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Policy with Injected Subject\nDESCRIPTION: Example of how the policy looks after executing the activateTokenIntegration action, showing the automatically injected subject with expiration timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-01-22-policy-subject-activate-token-integration.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyId\": \"my.namespace:policy-a\",\n  \"entries\": {\n    \"owner\": { },\n    \"temperature-observer\": {\n      \"subjects\": {\n        \"some-openid-connect-provider:some-user-id\": {\n          \"type\": \"authenticated via OpenID connect provider <some-openid-connect-provider>\"\n        },\n        \"integration:temperature-observer:some-specific-audience-0815\": {\n          \"type\": \"added via action <activateTokenIntegration>\",\n          \"expiry\": \"2021-06-04T10:30:33Z\"\n        }\n      },\n      \"resources\": {\n        \"thing:/features/temperature\": {\n          \"grant\": [\"READ\"],\n          \"revoke\": []\n        },\n        \"policy:/entries/temperature-observer/actions/activateTokenIntegration\": {\n          \"grant\": [\"EXECUTE\"],\n          \"revoke\": []\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Resource Permissions in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON example shows the structure of a response when retrieving permissions for a specific resource within a policy entry. It includes the topic, headers with correlation ID, path to the specific resource, and the retrieved permissions (grant/revoke values).\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrieveresourceresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources/thing:/the_resource_path\",\n  \"value\": {\n    \"grant\": [\n      \"READ\",\n      \"WRITE\"\n    ],\n    \"revoke\": []\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JavaScript Mapping for JSON Inclusion\nDESCRIPTION: The JavaScript mapping function formatted as a single-line JSON string, with escaped characters for inclusion in a JSON payload.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n\"function mapToDittoProtocolMsg(\\n    headers,\\n    textPayload,\\n    bytePayload,\\n    contentType\\n) {\\n\\n    if (contentType !== \\\"application/json\\\") {\\n        return null;\\n    }\\n\\n    var jsonData = JSON.parse(textPayload);\\n    var temperature = jsonData.temp;\\n    var humidity = jsonData.hum;\\n    \\n    var path;\\n    var value;\\n    if (temperature != null && humidity != null) {\\n        path = \\\"/features\\\";\\n        value = {\\n                temperature: {\\n                    properties: {\\n                        value: temperature\\n                    }\\n                },\\n                humidity: {\\n                    properties: {\\n                        value: humidity\\n                    }\\n                }\\n            };\\n    } else if (temperature != null) {\\n        path = \\\"/features/temperature/properties/value\\\";\\n        value = temperature;\\n    } else if (humidity != null) {\\n        path = \\\"/features/humidity/properties/value\\\";\\n        value = humidity;\\n    }\\n    \\n    if (!path || !value) {\\n        return null;\\n    }\\n\\n    return Ditto.buildDittoProtocolMsg(\\n        \\\"org.eclipse.ditto\\\",\\n        headers[\\\"device_id\\\"],\\n        \\\"things\\\",\\n        \\\"twin\\\",\\n        \\\"commands\\\",\\n        \\\"modify\\\",\\n        path,\\n        headers,\\n        value\\n    );\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Policy Imports Command in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the command structure for modifying policy imports in Eclipse Ditto. It includes the topic, headers, and path for the modification request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-modifyimports.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyimports.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Policy JSON Response Structure in Eclipse Ditto\nDESCRIPTION: This JSON example illustrates the structure of a successful policy retrieval response in Eclipse Ditto, containing the topic, correlation ID, path, full policy details with entries, subjects, resources, permissions, and a 200 status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrievepolicyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"entries\": {\n      \"the_label\": {\n        \"subjects\": {\n          \"google:the_subjectid\": {\n            \"type\": \"yourSubjectTypeDescription\"\n          }\n        },\n        \"resources\": {\n          \"thing:/the_resource_path\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": []\n          }\n        }\n      }\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Create Thing Response Example\nDESCRIPTION: Protocol response structure for a successful Thing creation, returning status code 201 and the created Thing data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-create-or-modify.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<thingName>/things/<channel>/commands/create\",\n  \"path\": \"/\",\n  \"value\": \"<created-thing-json>\",\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Live Command Request in Bash\nDESCRIPTION: Example of sending a GET request to retrieve live thing data with a specified timeout.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-12-20-http-live-channel.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET /api/2/things/org.eclipse.ditto:outdoor-sensor?channel=live&timeout=15s\n```\n\n----------------------------------------\n\nTITLE: Filtering WebSocket Events by Namespace and RQL Expression in Ditto\nDESCRIPTION: Example of how to filter WebSocket events by specifying namespace and RQL expression parameters. This example filters for events in the 'org.eclipse.ditto' namespace where an attribute 'counter' is greater than 42.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-protocol-bindings-websocket.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nSTART-SEND-EVENTS?namespaces=org.eclipse.ditto&filter=gt(attributes/counter,42)\n```\n\n----------------------------------------\n\nTITLE: AttributeCreated Event Structure in JSON\nDESCRIPTION: Example JSON payload for an AttributeCreated event in Eclipse Ditto. Shows the event structure when a new location attribute is created for a thing, including topic, headers, path, value and revision information.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/attributecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"value\": {\n    \"latitude\": 44.673856,\n    \"longitude\": 8.261719\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Uncreatable Thing in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet represents the error response returned when a Thing cannot be created in Eclipse Ditto due to a non-existent Policy. It includes details such as the error code, message, and a description for troubleshooting.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_thing_notcreatable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 400,\n    \"error\": \"things:thing.notcreatable\",\n    \"message\": \"The Thing with ID 'org.eclipse.ditto:fancy-thing' could not be created as the Policy with ID 'org.eclipse.ditto:the_policy_id' is not existing.\",\n    \"description\": \"Check if the ID of the Policy you created the Thing with is correct and that the Policy is existing.\"\n  },\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Feature Command in Eclipse Ditto\nDESCRIPTION: Command to delete a feature from a thing in Eclipse Ditto. It includes the thing ID and the feature ID to be deleted.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergefeature.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergedeletefeature.md %}{% endcapture %} {{ command |\nmarkdownify }}\n```\n\n----------------------------------------\n\nTITLE: Merged Feature Event in Eclipse Ditto\nDESCRIPTION: Event generated when a feature is successfully merged in Eclipse Ditto. It contains details about the merged feature and any changes made.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergefeature.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/mergedfeature.md %}{% endcapture %} {{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: PolicyIdCreated Event JSON Structure\nDESCRIPTION: Represents the event payload when a policy ID is created in Eclipse Ditto. Contains the topic identifying the thing, correlation headers, the path indicating the policy ID property, the new policy ID value, and the revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/policyidcreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"value\": \"org.eclipse.ditto:the_policy_id\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for ModifyPolicyEntriesResponse in Eclipse Ditto\nDESCRIPTION: This JSON structure represents the response format when policy entries are modified in Eclipse Ditto. It includes the topic with the policy ID, the preserved correlation ID in headers, the path to entries, and a 204 status code indicating successful modification with no content returned.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifypolicyentriesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Failed Event Structure\nDESCRIPTION: Defines the structure of a Failed event sent when an error occurs or when client breaches reactive-streams specification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-streaming-subscription.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<entityName>/<group>/<channel>/streaming/failed\",\n  \"path\": \"/\",\n  \"value\": \"[error-reason-object]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Thing Attributes Command Structure\nDESCRIPTION: Protocol specification for retrieving all attributes or a specific attribute of a Thing. The path parameter can target specific attributes using JSON Pointer notation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-retrieve.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<thingName>/things/<channel>/commands/retrieve\",\n  \"path\": \"/attributes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subjects Command in Eclipse Ditto\nDESCRIPTION: Command example for retrieving all subjects of a specific label in a policy. This shows the structure of a request to get subjects from the policy with ID 'com.acme:the_policy_id' and label 'the_label'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrievesubjects.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"com.acme/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response to Subject Modification in Eclipse Ditto\nDESCRIPTION: Illustrates the expected response format when a subject is successfully modified within a policy. The response confirms the successful execution of the modification command.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-modifysubject.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{% include_relative generated/commands/modify/modifysubjectresponse.md %}\n```\n\n----------------------------------------\n\nTITLE: Policy ID Modified Event in Eclipse Ditto\nDESCRIPTION: This snippet shows the event generated when an existing policy ID of a Thing is modified. It includes the topic, headers, and the updated policy ID.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifypolicyid.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"value\": \"org.eclipse.ditto:new-policy\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Including Modify Thing Definition Response in Markdown\nDESCRIPTION: This snippet includes the content of a Markdown file containing the response to a modify Thing definition command.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifythingdefinition.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifythingdefinitionresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Feature Desired Property Created Event in Eclipse Ditto\nDESCRIPTION: This snippet shows the event structure generated when a feature's desired property is created in Eclipse Ditto. It includes the topic, headers, and details of the created property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createdesiredproperty.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/featuredesiredpropertycreated.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Type for Ditto Protocol Messages in Kafka\nDESCRIPTION: Specifies the content-type to be set for Kafka messages when sending in Ditto Protocol format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-kafka2.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\napplication/vnd.eclipse.ditto+json\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Policy Modification in Eclipse Ditto\nDESCRIPTION: JSON representation of an error response when a policy modification would result in an invalid policy state. The error occurs when attempting to modify a policy in a way that would remove all PolicyEntries with WRITE permissions on the 'policy:/' resource, which is not allowed.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_policy_modificationinvalid.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"policies:policy.modificationinvalid\",\n    \"message\": \"The Policy with ID 'org.eclipse.ditto:the_policy_id' could not be modified as the resulting Policy would be invalid.\",\n    \"description\": \"There must always be at least one PolicyEntry with 'WRITE' permissions on resource 'policy:/'.\" \n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Required Information Request in Ditto Protocol (JSON)\nDESCRIPTION: This snippet shows how to send a request for immediately required information in Ditto Protocol. It's used to ask for permission to open a barrier, with a response-required flag but no specific acknowledgement requested.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-10-23-end-2-end-acknowledgement.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"topic\": \"org.eclipse.ditto/my-thing/things/live/messages/car-enter\",\n    \"headers\": {\n      \"response-required\": true,\n      \"requested-acks\": [],\n      \"content-type\": \"text/plain\",\n      \"timeout\": \"5s\"\n    },\n    \"path\": \"/outbox/messages/car-enter\",\n    \"value\": \"FN IB 1337\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown File for Delete Feature Desired Property Response\nDESCRIPTION: This snippet includes a markdown file containing the response for deleting a feature's desired property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletedesiredproperty.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/deletefeaturedesiredpropertyresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Adding License Header to Java Files\nDESCRIPTION: This snippet shows the proper license header format for Java source files in the Eclipse Ditto project. It includes copyright information, license terms, and the SPDX identifier.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n/*\n * Copyright (c) 2023 Contributors to the Eclipse Foundation\n *\n * See the NOTICE file(s) distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0\n *\n * SPDX-License-Identifier: EPL-2.0\n */\n```\n\n----------------------------------------\n\nTITLE: Modifying Policy Imports in Eclipse Ditto using JSON\nDESCRIPTION: Command structure for modifying policy imports in Eclipse Ditto. The command targets a specific policy ID and specifies which entries from another policy should be imported. Includes correlation ID for tracking and the path specifies the import target.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifyimport.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/imports/org.eclipse.ditto:imported-policy\",\n  \"value\": {\n    \"entries\" : [ \"IMPORTED_ENTRY\" ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Has Next Event\nDESCRIPTION: Event indicating additional search results are available in the subscription\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/protocol-examples-search.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/subscription-has-next-event.md %}{% endcapture %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Limited Indexed Fields via System Properties in Shell\nDESCRIPTION: This snippet shows how to configure the same limited indexed fields settings using system properties for the things-search service in a shell environment.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n-Dditto.search.namespace-indexed-fields.0.namespace-pattern=org.eclipse.test\n-Dditto.search.namespace-indexed-fields.0.indexed-fields.0=attributes\n-Dditto.search.namespace-indexed-fields.0.indexed-fields.1=features/info/properties\n-Dditto.search.namespace-indexed-fields.0.indexed-fields.2=features/info/other\n-Dditto.search.namespace-indexed-fields.1.namespace-pattern=org.eclipse*\n-Dditto.search.namespace-indexed-fields.1.indexed-fields.0=attributes\n-Dditto.search.namespace-indexed-fields.1.indexed-fields.1=features/info\n```\n\n----------------------------------------\n\nTITLE: Configuring Knative Eventing for Eclipse Ditto Cloud Events\nDESCRIPTION: YAML configuration for setting up a Knative eventing flow that normalizes payload with a Vorto converter and sends the result to Ditto's cloud events endpoint. This example demonstrates how to integrate Ditto with Knative eventing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-protocol-bindings-cloudevents.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: flows.knative.dev/v1\nkind: Sequence\nmetadata:\n name: digital-twin\nspec:\n  channelTemplate:\n    apiVersion: messaging.knative.dev/v1alpha1\n    kind: KafkaChannel\n    spec:\n      numPartitions: 1\n      replicationFactor: 1\n  steps:\n  - ref:\n      # Convert incoming payload to the Ditto format\n      apiVersion: serving.knative.dev/v1\n      kind: Service\n      name: vorto-converter\n      namespace: digital-twin\n  reply:\n    # Deliver to Ditto Cloud Events endpoint\n    uri: http://ditto:ditto@ditto-nginx.digital-twin.svc.cluster.local:8080/api/2/cloudevents\n```\n\n----------------------------------------\n\nTITLE: Policies Entry Invalid Error Response Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents the error response when a policy entry is invalid in Eclipse Ditto. It occurs when the policy entry doesn't contain any known permissions like 'READ' or 'WRITE'. The response includes status code 400, error type, message, and a descriptive explanation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_entry_invalid.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 400,\n    \"error\": \"policies:entry.invalid\",\n    \"message\": \"The Policy Entry is invalid.\",\n    \"description\": \"Policy entry does not contain any known permission like 'READ' or 'WRITE'\"\n  },\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON error response for WoT validation failure in Ditto\nDESCRIPTION: This JSON snippet shows an example error response when a Thing attribute modification fails WoT (Web of Things) model validation due to an incorrect data type.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_360.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 400,\n  \"error\": \"wot:payload.validation.error\",\n  \"message\": \"The provided payload did not conform to the specified WoT (Web of Things) model.\",\n  \"description\": \"The Thing's attribute </serial> contained validation errors, check the validation details.\",\n  \"validationDetails\": {\n    \"/attributes/serial\": [\n      \": {type=boolean found, string expected}\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merged Feature Definition Event in Eclipse Ditto\nDESCRIPTION: This snippet shows the event structure generated when a feature definition is successfully merged in Eclipse Ditto. It includes the topic and any relevant event details.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergefeaturedefinition.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/mergedfeaturedefinition.md %}{% endcapture %} {{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Thing Merged Event JSON Structure for Definition Update in Eclipse Ditto\nDESCRIPTION: Example JSON payload for a Thing merged event at /definition path. This event represents the merging of a definition value into a Thing entity. It includes the topic identifier, content-type header, path being modified, the new definition value, revision number, and timestamp of the event.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergedthingdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/definition\",\n  \"value\": \"org.eclipse.ditto:SomeModel:1.0.0\",\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP PATCH Configuration for Merge Updates\nDESCRIPTION: Defines the HTTP method and content type configuration for implementing merge updates on Things. Uses PATCH method with application/merge-patch+json content type following RFC-7396 specification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0006-merge-payload.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPATCH /\nContent-Type: application/merge-patch+json\n```\n\n----------------------------------------\n\nTITLE: Modifying Thing Definition with JSON Command in Eclipse Ditto\nDESCRIPTION: This JSON snippet represents the ModifyThingDefinition command in Eclipse Ditto. It specifies the topic, headers, path, and new value for updating a thing's definition. The command targets the twin commands of the 'fancy-thing' entity.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifythingdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/definition\",\n  \"value\": \"digitaltwin:DigitaltwinExample:1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Thing ID Mismatch\nDESCRIPTION: Shows the error response format when the Thing ID in the request body differs from the Thing ID specified in the request URL. The response includes error details, status code, and guidance for resolution.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_id_notsettable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 400,\n    \"error\": \"things:id.notsettable\",\n    \"message\": \"The Thing ID in the request body is not equal to the Thing ID in the request URL.\",\n    \"description\": \"Either delete the Thing ID from the request body or use the same Thing ID as in the request URL.\"\n  },\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection Tags via Piggyback Command\nDESCRIPTION: DevOps command for retrieving tags associated with a specific connection.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.sudo.commands:sudoRetrieveConnectionTags\",\n    \"connectionId\": \"{{connection.id}}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Swagger Client Script in HTML\nDESCRIPTION: This snippet shows how to replace the default Swagger client script with a patched version that exposes raw JSON schema models for Docson to use. It uses a direct link to the patched version on GitHub.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/docson/README.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src='https://raw2.github.com/lbovet/swagger-js/models-exposed/lib/swagger.js' type='text/javascript'></script>\n```\n\n----------------------------------------\n\nTITLE: Merge Command for Deleting Feature Properties in Eclipse Ditto\nDESCRIPTION: JSON payload for a merge command that deletes the desiredProperties of the accelerometer feature. The command uses the application/merge-patch+json content type and sets the value to null to indicate deletion.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeaturedesiredproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Definition Modify Command\nDESCRIPTION: JSON command format for modifying a Feature Definition. Specifies the topic, path and value containing the new definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-create-or-modify.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<thingName>/things/<channel>/commands/modify\",\n  \"path\": \"/features/<featureId>/definition\",\n  \"value\": \"<definition-json-array>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring ModifyPolicyResponse JSON in Eclipse Ditto\nDESCRIPTION: This JSON snippet defines the structure of a ModifyPolicyResponse in Eclipse Ditto. It includes the topic, headers with a correlation ID, path, and status code. The response indicates a successful policy modification with a 204 status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifypolicyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Events Implementation Path in Java\nDESCRIPTION: File path to the PolicyEvent interface that defines events emitted when policy entities are modified.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/architecture-services-policies.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npolicies/model/src/main/java/org/eclipse/ditto/policies/model/signals/events/PolicyEvent.java\n```\n\n----------------------------------------\n\nTITLE: Removing Feature Definition in Eclipse Ditto Thing Merged Event (JSON)\nDESCRIPTION: This JSON snippet represents a Thing merged event in Eclipse Ditto. It demonstrates removing the definition of an accelerometer feature. The event includes the topic, headers, path, value, revision, and timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergeddeletefeaturedefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"value\": null,\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Message Namespace Filtering Example - Markdown\nDESCRIPTION: Example showing how to filter messages by namespaces when subscribing for messages in Ditto\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-messages.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnamespaces=org.eclipse.ditto.one,org.eclipse.ditto.two\n```\n\n----------------------------------------\n\nTITLE: Configure queryReadConcern for ditto things-search\nDESCRIPTION: This update changes the default read concern for MongoDB to 'local' to prevent failures in single instance setups. It includes a hint to configure differently for replicated MongoDB environments.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_332.md#2025-04-17_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Property Retrieval Template\nDESCRIPTION: Markdown template files for feature property retrieval commands and responses using Eclipse Ditto protocol.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrieveproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrievefeatureproperty.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/query/retrievefeaturepropertyresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Tunnel with Basic Authentication in JSON\nDESCRIPTION: JSON configuration for setting up an SSH tunnel with basic authentication for a managed connection in Eclipse Ditto. It includes the connection name, type, URI, and SSH tunnel configuration with username/password credentials.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-03-31-ssh-tunneling-for-managed-connections.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"tunneled-connection\",\n  \"connectionType\": \"mqtt\",\n  \"uri\": \"tcp://mqtt.eclipseprojects.io:1883\",\n  \"sources\": [{ ... }],\n  \"sshTunnel\": {\n    \"enabled\": true,\n    \"uri\": \"ssh://ssh-host:2222\",\n    \"credentials\": {\n      \"type\": \"plain\",\n      \"username\": \"username\",\n      \"password\": \"password\"\n    },\n    \"validateHost\": true,\n    \"knownHosts\": [\"MD5:e0:3a:34:1c:68:ed:c6:bc:7c:ca:a8:67:c7:45:2b:19\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Too Many Modifying Requests on Ditto Policy\nDESCRIPTION: JSON error response when a policy has too many concurrent modification requests. The response includes a 429 status code with error details explaining that the policy has reached its concurrent modification limit and suggesting to throttle requests or restructure the policy.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_policy_toomanymodifyingrequests.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 429,\n    \"error\": \"policies:policy.toomanymodifyingrequests\",\n    \"message\": \"Too many modifying requests are already outstanding to the Policy with ID 'org.eclipse.ditto:the_policy_id'.\",\n    \"description\": \"Throttle your modifying requests to the Policy or re-structure your Policy in multiple Policies if you really need so many concurrent modifications.\"\n  },\n  \"status\": 429\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Message Responses in JavaScript\nDESCRIPTION: JavaScript function that constructs a response message for an original incoming message. This helper function transforms an inbox message to an outbox response by preserving the topic and correlation-id, while adding payload and status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-messages.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTextResponse = function(originalMessage, payload, statusCode) {\n    var topic = originalMessage.topic;\n    var correlationId = originalMessage.headers[\"correlation-id\"];\n    var outboxPath = originalMessage.path.replace(\"inbox\", \"outbox\");\n    \n    return {\n      \"topic\": topic,\n      \"headers\": {\n          \"correlation-id\": correlationId,\n          \"content-type\": \"text/plain\"\n      },\n      \"path\": outboxPath,\n      \"status\": statusCode,\n      \"value\": payload\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Merging Thing Definition in Eclipse Ditto\nDESCRIPTION: JSON command for updating a thing's definition with a specific model version. Uses merge-patch+json content type to partially update the thing's definition attribute.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergethingdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto\\/fancy-thing\\/things\\/twin\\/commands\\/merge\",\n  \"headers\": {\n    \"content-type\": \"application\\/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"\\/definition\",\n  \"value\": \"org.eclipse.ditto:SomeModel:1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding License Header to XML Files\nDESCRIPTION: This snippet demonstrates the correct license header format for XML files in the Eclipse Ditto project. It includes copyright information, license terms, and the SPDX identifier, formatted as an XML comment.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!--\n  ~ Copyright (c) 2023 Contributors to the Eclipse Foundation\n  ~\n  ~ See the NOTICE file(s) distributed with this work for additional\n  ~ information regarding copyright ownership.\n  ~\n  ~ This program and the accompanying materials are made available under the\n  ~ terms of the Eclipse Public License 2.0 which is available at\n  ~ http://www.eclipse.org/legal/epl-2.0\n  ~\n  ~ SPDX-License-Identifier: EPL-2.0\n  -->\n```\n\n----------------------------------------\n\nTITLE: ModifySubjectResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON format represents the response to a policy subject modification command in Eclipse Ditto. It includes the topic path referencing the policy ID, correlation headers for tracing, the specific path to the modified subject, and a 204 status code indicating successful modification with no content returned.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifysubjectresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects/google:the_subjectid\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Including Modify Feature Definition Response in Markdown\nDESCRIPTION: This snippet includes the content of a markdown file containing the response for modifying a feature definition in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifydefinition.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyfeaturedefinitionresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Validating Entity Name Pattern in Java\nDESCRIPTION: Regex pattern for validating entity names in Eclipse Ditto. Names cannot be empty, contain slashes, or control characters.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-namespaces-and-names.md#2025-04-17_snippet_1\n\nLANGUAGE: regex\nCODE:\n```\n(?<name>[^\\x00-\\x1F\\x7F-\\xFF/]++)\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Client Credentials for HTTP Push Connection in JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure OAuth2 client credentials for an HTTP push connection in Eclipse Ditto. It includes settings for the connection ID, type, status, URI, and OAuth2 specific credentials such as token endpoint, client ID, secret, and requested scopes.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-http.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection\": {\n    \"id\": \"http-example-connection-124\",\n    \"connectionType\": \"http-push\",\n    \"connectionStatus\": \"open\",\n    \"uri\": \"https://localhost:443/event-publication\",\n    \"credentials\": {\n      \"type\": \"oauth-client-credentials\",\n      \"tokenEndpoint\": \"https://localhost:443/oauth2/token\",\n      \"clientId\": \"my-client-id\",\n      \"clientSecret\": \"my-client-secret\",\n      \"requestedScopes\": \"user-scope-1 role-scope-2\"\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Connection URI Password Encoding in Ditto 3.0\nDESCRIPTION: This snippet highlights the new requirement for single URL encoding of passwords in connection URIs after the fix in Ditto 3.0, replacing the previous necessity for double encoding. Users are advised to migrate their existing connections accordingly.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_300.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nssl://user:double+url-encoded-password@hostname:8884\n```\n\n----------------------------------------\n\nTITLE: Merge Thing Command for Accelerometer Desired Properties\nDESCRIPTION: This JSON payload represents a command to merge properties into the `/features/accelerometer/desiredProperties` path of a digital twin. It specifies the topic, content type, correlation ID, target path, and the values to be merged, including x, y, z coordinates and a unit.  The `content-type` header indicates that a merge patch is used.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeaturedesiredproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"value\": {\n    \"x\": 3.141,\n    \"y\": 2.718,\n    \"z\": 1,\n    \"unit\": \"g\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of WoT Validation Error for Model Evolution in JSON\nDESCRIPTION: Error response when updating a Thing's definition to a newer version that requires additional features not present in the Thing. The validation details indicate which features defined in the model are missing from the Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 400,\n  \"error\": \"wot:payload.validation.error\",\n  \"message\": \"The provided payload did not conform to the specified WoT (Web of Things) model.\",\n  \"description\": \"Attempting to update the Thing with missing in the model defined features: [coffeeMaker]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Features Response in Ditto Protocol (JSON)\nDESCRIPTION: This snippet demonstrates the response to a successful merge features command in Ditto Protocol. It includes the thing ID and HTTP status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergefeatures.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyFeatureDesiredPropertyResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a response to a command that modifies a desired property of a feature in Eclipse Ditto. It includes the topic, headers with correlation ID, path to the modified property, and a status code indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturedesiredpropertyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards to Read Multiple Metadata Fields in Eclipse Ditto (JSON)\nDESCRIPTION: Example JSON response when using wildcards with the 'get-metadata' header to retrieve metadata for multiple properties matching a pattern. This demonstrates how to retrieve description metadata for all properties within a feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-metadata.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"lamp\": {\n      \"properties\": {\n        \"color\": {\n          \"description\": \"Color represented with RGB values\"\n        },\n        \"status\": {\n          \"description\": \"Status of the lamp\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thing Definition in Eclipse Ditto using JSON\nDESCRIPTION: This JSON structure represents a command to retrieve the definition of a thing in Eclipse Ditto. It specifies the topic for the twin commands, includes a correlation ID in the headers, and targets the definition path.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievethingdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/definition\"\n}\n```\n\n----------------------------------------\n\nTITLE: SSE Notification JSON for Thing Update\nDESCRIPTION: JSON structure of an SSE notification when a Thing's lamp feature property is updated, showing only the changed part.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"org.eclipse.ditto:fancy-thing\",\n  \"features\": {\n    \"lamp\": {\n      \"properties\": {\n        \"on\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Policy Subject Command in Eclipse Ditto\nDESCRIPTION: Template for including a markdown file containing commands to modify policy subjects in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-createsubject.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifysubject.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Setting MQTT 5 Receive Maximum in Ditto\nDESCRIPTION: This configuration snippet demonstrates how to set the Receive Maximum value for MQTT 5 connections in Ditto. This value determines the number of unacknowledged incoming messages the client accepts from the broker for QoS 1 or 2.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-07-12-reactive-mqtt.md#2025-04-17_snippet_1\n\nLANGUAGE: config\nCODE:\n```\nconnectivity.conf\n\n…\nreceive-maximum-client = 65535\nreceive-maximum-client = ${?CONNECTIVITY_MQTT_CLIENT_RECEIVE_MAXIMUM}\n…\n```\n\n----------------------------------------\n\nTITLE: Defining Merge Command Response in JSON\nDESCRIPTION: This JSON snippet represents the structure of a merge command response for a thing in Eclipse Ditto. It includes a topic identifier, headers for correlation, the path to the feature being merged, and a HTTP status code indicating the result of the command. The key parameters allow for maintaining command correlation through 'correlation-id' while describing the operational context with the 'status' field.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeaturedefinitionresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Desired Properties JSON Command\nDESCRIPTION: Command message structure for retrieving the desired properties of a feature named 'accelerometer' from a thing called 'fancy-thing'. The command uses the twin protocol channel and includes a correlation ID for request tracking.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeaturedesiredproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Desired Property Command/Response Structure\nDESCRIPTION: Command and response format for retrieving a single desired property of a Feature. Supports hierarchical property access using JSON Pointer notation (RFC-6901). Returns specific desired property as JSON with HTTP 200 status on success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-retrieve.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nCommand:\\n| Field     | Value                   |\\n|-----------|-------------------------|\\n| **topic** | `<namespace>/<thingName>/things/<channel>/commands/retrieve`     |\\n| **path**  | `/features/<featureId>/desiredProperties/<desiredPropertyPath>`     |\n```\n\n----------------------------------------\n\nTITLE: Including Modify Attribute Command in Markdown\nDESCRIPTION: This snippet includes the content of a markdown file containing the command to modify an attribute in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyattribute.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyattribute.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Referencing W3C Time Ontology in JSON-LD Context\nDESCRIPTION: This snippet shows how to reference the W3C Time Ontology in a JSON-LD context to describe time-related data such as durations and timestamps.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": [\n    \"https://www.w3.org/2022/wot/td/v1.1\",\n    {\n      \"time\": \"http://www.w3.org/2006/time#\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Subject Retrieval Response Template\nDESCRIPTION: Template showing the expected response format when retrieving a policy subject\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrievesubject.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/commands/query/retrievesubjectresponse.md %}\n```\n\n----------------------------------------\n\nTITLE: Updating Teapot Status with Ditto API\nDESCRIPTION: This curl command updates the status of the teapot digital twin by adding a 'status' feature with a 'message' property using Ditto's HTTP API.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-09-21-selective-push-notifications.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -u 'ditto:ditto' --header 'Content-Type: application/json' -d \\\n    '{\n       \"properties\": {\n         \"message\": \"I\\'m a teapot\"\n       }\n     }' \\\n    'http://localhost:8080/api/2/things/org.eclipse.ditto%3ATeapot/features/status'\n```\n\n----------------------------------------\n\nTITLE: Error Response for Empty Feature Definition in Eclipse Ditto\nDESCRIPTION: The JSON error response returned when a feature definition is empty in Eclipse Ditto. The error indicates that a feature definition must contain at least one element, although it can be set to null or deleted completely. The response includes a 400 status code and descriptive error details.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_definition_empty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 400,\n    \"error\": \"things:feature.definition.empty\",\n    \"message\": \"Feature Definition must not be empty!\",\n    \"description\": \"A Feature Definition must contain at least one element. It can however also be set to null or deleted completely.\"\n  },\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Feature-specific Message in JSON\nDESCRIPTION: Example JSON structure for sending a message to a specific Feature (water-tank) of a Thing. This demonstrates how to address a Feature using the proper path format in the Ditto protocol.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-messages.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"topic\": \"org.eclipse.ditto/smartcoffee/things/live/messages/heatUp\",\n    \"headers\": {\n        \"content-type\": \"text/plain\",\n        \"correlation-id\": \"a-unique-string-for-this-message\"\n    },\n    \"path\": \"/features/water-tank/inbox/messages/heatUp\",\n    \"value\": \"47\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Connectivity Service Settings\nDESCRIPTION: HOCON configuration example for Hono connectivity service settings including base URI, credentials, SASL mechanism, and certificate validation options.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-hono.md#2025-04-17_snippet_3\n\nLANGUAGE: hocon\nCODE:\n```\nditto {\n  connection {\n    hono {\n      base-uri = \"tcp://localhost:9092\"\n      username = \"honoUsername\"\n      password = \"honoPassword\"\n      sasl-mechanism = \"PLAIN\"\n      bootstrap-servers = \"localhost:9092\"\n      validateCertificates = true,\n      ca = \"-----BEGIN CERTIFICATE-----\\n<trusted certificate>\\n-----END CERTIFICATE-----\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Swagger UI for Docson Integration\nDESCRIPTION: This CSS snippet adjusts the layout of Swagger UI elements to better accommodate Docson-generated documentation. It increases the maximum width of the wrapper and adjusts the width of text areas.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/docson/README.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    .swagger-ui-wrap {\n        max-width: 1200px;\n    }\n    .swagger-ui-wrap .body-textarea {\n        width: 200px;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteSubjectResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: JSON structure representing a DeleteSubjectResponse message in Eclipse Ditto. This response indicates successful deletion of a subject from a specific policy entry with HTTP status 204 (No Content). It includes the topic path, correlation ID in headers, and the path to the deleted subject.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/deletesubjectresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects/google:the_subjectid\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Snippet for Delete Thing Definition Command\nDESCRIPTION: This snippet includes a Markdown file containing the command for deleting a thing definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergethingdefinition.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergedeletethingdefinition.md %}{% endcapture %} {{\ncommand | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Resetting Connection Metrics via Piggyback Command\nDESCRIPTION: DevOps command for resetting all metrics of a connection back to zero.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:resetConnectionMetrics\",\n    \"connectionId\": \"<connectionID>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Settings in HOCON for Connectivity Extension\nDESCRIPTION: This HOCON configuration snippet shows how to set up OAuth2 related settings in the connectivity-extension.conf file. It includes options for maximum clock skew and HTTPS enforcement for token endpoints, which can also be overridden by environment variables.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-http.md#2025-04-17_snippet_4\n\nLANGUAGE: hocon\nCODE:\n```\nditto {\n  connectivity {\n    connection {\n      http-push {\n        oauth2 {\n          # Maximum clock skew of OAuth2 token endpoints.\n          # Access tokens are refreshed this long before expiration.\n          max-clock-skew = 60s\n          max-clock-skew = ${?CONNECTIVITY_HTTP_OAUTH2_MAX_CLOCK_SKEW}\n\n          # Whether to enforce HTTPS for OAuth2 token endpoints.\n          # Should be `true` for production environments\n          # in order not to transmit client secrets in plain text.\n          enforce-https = true\n          enforce-https = ${?CONNECTIVITY_HTTP_OAUTH2_ENFORCE_HTTPS}\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DefinitionModified Event Structure in Eclipse Ditto\nDESCRIPTION: JSON structure for a DefinitionModified event in Eclipse Ditto. This event is sent when a thing's definition is updated. It includes the topic, headers with correlation ID, the path to the modified element, the new definition value, and the revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/thingdefinitionmodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/definition\",\n  \"value\": \"digitaltwin:DigitaltwinExample:1.0.0\",\n  \"revision\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unmodifiable Thing in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet shows the structure of an error response when a user attempts to modify a Thing without having the necessary WRITE permissions. It includes details such as the topic, correlation ID, error code, and a descriptive message.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_thing_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"things:thing.notmodifiable\",\n    \"message\": \"The Thing with ID 'org.eclipse.ditto:fancy-thing' could not be modified as the requester had insufficient permissions (WRITE is required).\",\n    \"description\": \"Check if the ID of your requested Thing was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Property Response in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response structure when modifying a feature property in Eclipse Ditto. It includes the topic, headers, and status of the modification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createproperty.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/commands/modify/modifyfeaturepropertyresponse.md %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Import Command in Eclipse Ditto\nDESCRIPTION: JSON command for retrieving information about a specific imported policy. The command includes the topic referencing the policy ID, a correlation ID in the headers for tracking the request, and a path specifying the imported policy to retrieve.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrieveimport.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/imports/org.eclipse.ditto:the_imported_policy_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Feature Messages via SSE\nDESCRIPTION: HTTP endpoints for subscribing to Feature-specific inbox/outbox messages on a Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/things/<thingId>/features/<featureId>/inbox/messages\nhttp://localhost:8080/api/2/things/<thingId>/features/<featureId>/outbox/messages\n```\n\n----------------------------------------\n\nTITLE: Subject Deletion Announcement JSON Structure\nDESCRIPTION: Example JSON payload for a subject deletion announcement in Eclipse Ditto. The message includes the topic path, correlation ID, and details about which subjects will be deleted and when. The deleteAt timestamp specifies when the deletion will occur, and subjectIds array contains the list of subjects to be deleted.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/announcements/subjectDeletion.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/announcements/subjectDeletion\",\n  \"headers\": {\n    \"correlation-id\": \"<some-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"deleteAt\": \"2021-03-03T16:05:55Z\",\n    \"subjectIds\": [\n      \"integration:some-label:my-aud-1\",\n      \"integration:some-label:my-aud-2\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Desired Feature Property in Eclipse Ditto\nDESCRIPTION: JSON command structure for retrieving a specific desired property ('x') from the 'accelerometer' feature of a thing. The command uses the twin commands pathway and requires a correlation ID in the headers.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeaturedesiredproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Search Endpoint\nDESCRIPTION: Base URL endpoint for searching things in Ditto\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-search.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/search/things\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Definition in Eclipse Ditto JSON\nDESCRIPTION: This JSON configuration sends a command to delete a feature definition for an IoT device within the Eclipse Ditto framework. The main prerequisite is a correctly configured Ditto environment. The key parameters include 'topic', which specifies the Ditto topic for command routing, and 'path', which indicates the feature path to be deleted. The headers section includes 'correlation-id' for request tracking. This setup is used within IoT systems to manage device feature configurations.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeaturedefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for RetrieveFeaturesResponse in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a response to a features retrieval request in Eclipse Ditto. It includes the topic referencing the original command, correlation ID in headers, the path to the features, the actual feature values with properties and desired properties, and a 200 status code indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeaturesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"accelerometer\": {\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"g\"\n      },\n      \"desiredProperties\": {\n        \"x\": 4,\n        \"y\": 3,\n        \"z\": 5,\n        \"unit\": \"g\"\n      }\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: POST Search Count Query\nDESCRIPTION: HTTP POST request for counting things with form-urlencoded filter\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-search.md#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST .../search/things/count\nbody: filter=eq(attributes/location,\"living-room\")\n```\n\n----------------------------------------\n\nTITLE: Defining Thing Merged Event Structure in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents a Thing merged event in Eclipse Ditto. It shows the event details for updating the 'x' property of an accelerometer feature. The event includes the topic, headers, path, value, revision, and timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergedfeatureproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": 42,\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThingCommands in Java\nDESCRIPTION: ThingCommands are used for communication with the Things service. This snippet shows the file path to the ThingCommand interface, which should be implemented for creating commands processed by the service.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/architecture-services-things.md#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\norg.eclipse.ditto.things.model.signals.commands.ThingCommand\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Snippet for Merge Thing Definition Command\nDESCRIPTION: This snippet includes a Markdown file containing the command for merging a thing definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergethingdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergethingdefinition.md %}{% endcapture %} {{ command\n| markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Single Resource Modification Schema\nDESCRIPTION: Protocol schema for creating or modifying a single resource within a policy entry. Requires resource path identification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/modify\",\n  \"path\": \"/entries/<label>/resources/<resource>\",\n  \"value\": \"<resource as JSON>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unmodifiable Feature Property in JSON\nDESCRIPTION: This JSON snippet represents an error response when a user tries to modify a feature property without the necessary WRITE permission. It includes details such as the error code, message, and a description to help troubleshoot the issue.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_property_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"things:feature.property.notmodifiable\",\n    \"message\": \"The Property with JSON Pointer '/x' of the Feature with ID 'accelerometer' on the Thing with ID 'org.eclipse.ditto:fancy-thing' could not be modified as the requester had insufficient permissions to modify it (WRITE is required).\",\n    \"description\": \"Check if the ID of the Thing, the Feature ID and the key of your requested property was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Including Merge Attribute Response Template\nDESCRIPTION: Includes and renders the markdown template for the merge attribute response documentation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeattribute.md#2025-04-17_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/merge/mergeattributeresponse.md %}{% endcapture %} {{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Receiving Command Response via Ditto Message API (HTTP)\nDESCRIPTION: This snippet shows the HTTP response received at the Ditto Message API after sending a command. It includes headers and a JSON payload with an 'eta' value.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-12-05-example-command-and-control.md#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\ncorrelation-id: command-and-control\nmessage-id: command-and-control\nstatus: 200\nContent-Type: application/json\nContent-Length: 10\n\n{\"eta\":56}\n```\n\n----------------------------------------\n\nTITLE: Resulting Thing JSON with Metadata on All Leaves\nDESCRIPTION: The resulting Thing JSON after applying metadata to all JSON leaves. It demonstrates how the '*/{key}' syntax affects all properties, adding a changelog to each leaf node.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-metadata.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"org.eclipse.ditto:my-lamp-1\",\n  \"features\": {\n    \"lamp\": {\n      \"properties\": {\n        \"color\": {\n          \"r\": 100,\n          \"g\": 0,\n          \"b\": 255\n        },\n        \"status\": {\n          \"on\": \"true\"\n        }\n      }\n    }\n  },\n  \"_metadata\": {\n    \"features\": {\n      \"lamp\": {\n        \"properties\": {\n          \"color\": {\n            \"r\": {\n              \"changeLog\": {\n                \"changedAt\": \"2022-08-02T04:30:07\",\n                \"changedBy\": {\n                  \"name\": \"ditto\",\n                  \"mail\": \"ditto@mail.com\"\n                }\n              }\n            },\n            \"g\": {\n              \"changeLog\": {\n                \"changedAt\": \"2022-08-02T04:30:07\",\n                \"changedBy\": {\n                  \"name\": \"ditto\",\n                  \"mail\": \"ditto@mail.com\"\n                }\n              }\n            },\n            \"b\": {\n              \"changeLog\": {\n                \"changedAt\": \"2022-08-02T04:30:07\",\n                \"changedBy\": {\n                  \"name\": \"ditto\",\n                  \"mail\": \"ditto@mail.com\"\n                }\n              }\n            },\n            \"status\": {\n              \"on\": {\n                \"changeLog\": {\n                  \"changedAt\": \"2022-08-02T04:30:07\", \n                  \"changedBy\": {\n                    \"name\": \"ditto\", \n                    \"mail\": \"ditto@mail.com\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Consumer Throttling in Ditto\nDESCRIPTION: This snippet shows how to configure throttling for MQTT consumers in Ditto's connectivity.conf file. It allows setting the throttling interval and message limit to enable backpressure for inbound MQTT publishes.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-07-12-reactive-mqtt.md#2025-04-17_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nconnectivity.conf\n\n…\nthrottling {\n  enabled = true \n  enabled = ${?MQTT_CONSUMER_THROTTLING_ENABLED}\n\n  # Interval at which the consumer is throttled. Must be > 0s.\n  interval = 1s\n  interval = ${?MQTT_CONSUMER_THROTTLING_INTERVAL}\n\n  # The maximum number of messages the consumer is allowed to receive\n  # within the configured throttling interval e.g. 100 msgs/s.\n  # Must be > 0.\n  limit = 100\n  limit = ${?MQTT_CONSUMER_THROTTLING_LIMIT}\n}\n…\n```\n\n----------------------------------------\n\nTITLE: MQTT 5 Connection with Client Certificate Authentication\nDESCRIPTION: Example configuration for MQTT connection using TLS with client certificate authentication. Includes certificate validation, CA certificate, client certificate and private key configuration.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt5.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"mqtt-example-connection-124\",\n  \"connectionType\": \"mqtt-5\",\n  \"connectionStatus\": \"open\",\n  \"failoverEnabled\": true,\n  \"uri\": \"ssl://test.mosquitto.org:8884\",\n  \"validateCertificates\": true,\n  \"ca\": \"-----BEGIN CERTIFICATE-----\\n<test.mosquitto.org certificate>\\n-----END CERTIFICATE-----\",\n  \"credentials\": {\n    \"type\": \"client-cert\",\n    \"cert\": \"-----BEGIN CERTIFICATE-----\\n<signed client certificate>\\n-----END CERTIFICATE-----\",\n    \"key\": \"-----BEGIN PRIVATE KEY-----\\n<client private key>\\n-----END PRIVATE KEY-----\"\n  },\n  \"sources\": [\n    {\n      \"addresses\": [\n        \"eclipse-ditto-sandbox/#\"\n      ],\n      \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n      \"qos\": 0,\n      \"filters\": []\n    }\n  ],\n  \"targets\": [\n    {\n      \"address\": \"eclipse-ditto-sandbox/{{ thing:id }}\",\n      \"topics\": [\n        \"_/_/things/twin/events\"\n      ],\n      \"authorizationContext\": [\"ditto:outbound-auth-subject\"],\n      \"qos\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Features using Merge Command in Ditto Protocol (JSON)\nDESCRIPTION: This snippet demonstrates how to delete all features of a thing using a merge command in Ditto Protocol. It sets the features to null, effectively removing them.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergefeatures.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Thing Attributes Response Structure in JSON\nDESCRIPTION: Shows the response format when merging attributes for a thing in Eclipse Ditto. The response includes the topic, correlation ID header, path targeting attributes, and a 204 status code indicating successful completion.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeleteattributesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Subject from a Policy Entry in Eclipse Ditto\nDESCRIPTION: This JSON snippet represents the DeleteSubject command in Eclipse Ditto. It specifies the topic for policy commands, includes a correlation ID in the headers, and provides the path to the specific subject to be deleted from a policy entry.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/deletesubject.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects/google:the_subjectid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating ID Token with ORY Hydra Client\nDESCRIPTION: This bash command uses the created OAuth client to generate an ID Token, which will be used for authenticating with the Ditto API.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2019-08-28-openid-connect.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it \\\n  --network hydraguide \\\n  -p 9010:9010 \\\n  oryd/hydra:v1.0.0 \\\n  token user --skip-tls-verify \\\n    --port 9010 \\\n    --auth-url https://localhost:9000/oauth2/auth \\\n    --token-url https://ory-hydra-example--hydra:4444/oauth2/token \\\n    --client-id eclipse-ditto \\\n    --client-secret some-secret \\\n    --scope openid\n```\n\n----------------------------------------\n\nTITLE: Setting AMQP 0.9.1 Content Type Header\nDESCRIPTION: Specifies the required content-type header value for AMQP 0.9.1 messages when using Ditto Protocol.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-amqp091.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napplication/vnd.eclipse.ditto+json\n```\n\n----------------------------------------\n\nTITLE: Policy Unavailable Error Response Structure in JSON\nDESCRIPTION: Demonstrates the error response format when a policy cannot be accessed. The response includes the topic, correlation ID, error code, status code 503, and descriptive error messages. This structure is used to communicate temporary unavailability of policy resources.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_policy_unavailable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 503,\n    \"error\": \"policies:policy.unavailable\",\n    \"message\": \"The Policy with ID 'org.eclipse.ditto:the_policy_id' is not available, please try again later.\",\n    \"description\": \"The requested Policy is temporarily not available.\"\n  },\n  \"status\": 503\n}\n```\n\n----------------------------------------\n\nTITLE: Thing JSON Response\nDESCRIPTION: This JSON snippet represents the expected response when retrieving a Thing from Eclipse Ditto. It shows the `thingId`, `policyId`, and the `features` object, which includes the `temperature` feature with its `value` property set to 46.  This confirms a successful update.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\"thingId\":\"machine:sensor\",\"policyId\":\"machine:my-policy\",\"features\":{\"temperature\":{\"properties\":{\"value\":46}}}}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unauthorized Policy ID Modification in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet represents the error response when a user attempts to modify the Policy ID of a Thing without the required WRITE permissions. It includes details such as the error code, message, and a description to help users understand and resolve the issue.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_policyId_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"things:policyId.notmodifiable\",\n    \"message\": \"The Policy ID of the Thing with ID 'org.eclipse.ditto:fancy-thing' could not be modified as the requester had insufficient permissions (WRITE is required).\",\n    \"description\": \"Check if the ID of your requested Thing was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Including Modify Attributes Response Template in Markdown\nDESCRIPTION: This snippet includes a markdown template for the response to a modify attributes command in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyattributes.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyattributesresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unauthorized Feature Definition Modification in Eclipse Ditto\nDESCRIPTION: JSON error response returned when a user attempts to modify a Feature Definition without having the required WRITE permissions. The response includes the error code, HTTP status code 403 (Forbidden), a detailed error message, and a suggested resolution.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_definition_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"things:feature.definition.notmodifiable\",\n    \"message\": \"The Definition of the Feature with ID 'accelerometer' on the Thing with ID 'org.eclipse.ditto:fancy-thing' cannot be modified as the requester had insufficient permissions to modify it (WRITE is required).\",\n    \"description\": \"Check if the ID of the Thing and the Feature ID was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Entry with Eclipse Ditto JSON Command\nDESCRIPTION: Shows the JSON command format for retrieving a specific policy entry identified by 'the_label' from a policy with ID 'the_policy_id'. The command includes required headers with correlation ID and specifies the path to the desired policy entry.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrievepolicyentry.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label\"\n}\n```\n\n----------------------------------------\n\nTITLE: Describing API Response Structure for Retrieving Policy Import in Markdown\nDESCRIPTION: This snippet outlines the response structure for retrieving a single policy import. It specifies the topic, path, value format, and possible status codes for the API response.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-retrieve.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      |        | Value                                                                                                                                           |\n|------------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------|\n| **topic**  |        | `<namespace>/<policyName>/policies/commands/retrieve`                                                                                           |\n| **path**   |        | `/imports/<importedPolicyId>`                                                                                                                   |\n| **value**  |        | The policy import of the policy as JSON object, see [Policy representation (JSON)](protocol-specification-policies.html#policy-representation). |\n| **status** | _code_ |                                                                                                                                                  |\n|            | `200`  | Success.                                                                                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Target Header Mapping for AMQP Application Property\nDESCRIPTION: Configuration for mapping Ditto protocol header 'reply-to' to an AMQP application property 'to'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-amqp10.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headerMapping\": {\n    \"amqp.application.property:to\": \"{{ header:reply-to }}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteResourceResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON snippet demonstrates the structure of a DeleteResourceResponse message used when a resource is successfully deleted from a policy entry in Eclipse Ditto. It includes the topic path identifying the policy, correlation headers for request tracking, the specific path to the deleted resource, and a 204 status code indicating successful deletion without content return.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/deleteresourceresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources/thing:/the_resource_path\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Subject Modification Protocol Schema\nDESCRIPTION: Command structure for modifying all subjects within a policy entry. Updates all subjects in a single operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/modify\",\n  \"path\": \"/entries/<label>/subjects\",\n  \"value\": \"<subjects as JSON>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Snippet for Merged Thing Definition Event\nDESCRIPTION: This snippet includes a Markdown file containing the event for a merged thing definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergethingdefinition.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/mergedthingdefinition.md %}{% endcapture %} {{ event |\nmarkdownify }}\n```\n\n----------------------------------------\n\nTITLE: Modify All Policy Imports Command Structure\nDESCRIPTION: Command structure for modifying all imports of a policy, specifying the topic and path for the operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/modify\",\n  \"path\": \"/imports\",\n  \"value\": \"<policy_imports_json>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Feature Definition Response in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response structure after merging a feature definition in Eclipse Ditto. It includes the status and any relevant headers.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergefeaturedefinition.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/merge/mergefeaturedefinitionresponse.md %}{% endcapture %} {{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Log Levels of a Specific Service - JSON\nDESCRIPTION: This snippet illustrates how to retrieve all currently configured log levels for a specific service (gateway) by sending a GET request to the '/devops/logging/gateway' endpoint, which returns a JSON object with logging details.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"1\": {\n        \"type\": \"devops.responses:retrieveLoggerConfig\",\n        \"status\": 200,\n        \"serviceName\": \"gateway\",\n        \"instance\": 1,\n        \"loggerConfigs\": [{\n            \"level\": \"info\",\n            \"logger\": \"ROOT\"\n        }, {\n            \"level\": \"info\",\n            \"logger\": \"org.eclipse.ditto\"\n        }, {\n            \"level\": \"warn\",\n            \"logger\": \"org.mongodb.driver\"\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Thing JSON Structure\nDESCRIPTION: Example JSON response showing the generated Thing structure with features and properties based on the WoT Thing Model.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-03-03-wot-integration.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"io.eclipseprojects.ditto:floor-lamp-0815\",\n  \"policyId\": \"io.eclipseprojects.ditto:floor-lamp-0815\",\n  \"definition\": \"https://eclipse-ditto.github.io/ditto-examples/wot/models/floor-lamp-1.0.0.tm.jsonld\",\n  \"attributes\": {\n    \"manufacturer\": \"\",\n    \"serialNo\": \"\"\n  },\n  \"features\": {\n    \"Spot1\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/dimmable-colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/switchable-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"dimmer-level\": 0.0,\n        \"color\": {\n          \"r\": 0,\n          \"g\": 0,\n          \"b\": 0\n        },\n        \"on\": false\n      }\n    },\n    \"Spot2\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/dimmable-colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/switchable-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"dimmer-level\": 0.0,\n        \"color\": {\n          \"r\": 0,\n          \"g\": 0,\n          \"b\": 0\n        },\n        \"on\": false\n      }\n    },\n    \"Spot3\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/dimmable-colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/switchable-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"dimmer-level\": 0.0,\n        \"color\": {\n          \"r\": 0,\n          \"g\": 0,\n          \"b\": 0\n        },\n        \"on\": false\n      }\n    },\n    \"ConnectionStatus\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/connection-status-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"readySince\": \"\",\n        \"readyUntil\": \"\"\n      }\n    },\n    \"PowerConsumptionAwareness\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/power-consumption-aware-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"reportPowerConsumption\": {}\n      }\n    },\n    \"SmokeDetection\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/smoke-detector-1.0.0.tm.jsonld\"\n      ]\n    },\n    \"Status-LED\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/switchable-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"color\": {\n          \"r\": 0,\n          \"g\": 0,\n          \"b\": 0\n        },\n        \"on\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Ditto Protocol Message to AAS Creation in JavaScript\nDESCRIPTION: This function creates an Asset Administration Shell (AAS) representation when a new Thing is created in Ditto. It uses the Thing's namespace as the AAS ID and generates a basic AAS structure.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapFromDittoProtocolMsg(\n  namespace,\n  name,\n  group,\n  channel,\n  criterion,\n  action,\n  path,\n  dittoHeaders,\n  value,\n  status,\n  extra\n) {\n  let headers = dittoHeaders;\n  let textPayload = JSON.stringify({\n    conceptDictionary: [],\n    identification: {\n      idType: 'Custom',\n      id: namespace\n    },\n    idShort: namespace,\n    dataSpecification: [],\n    modelType: {\n      name: 'AssetAdministrationShell'\n    },\n    asset: {\n      identification: {\n        idType: 'Custom',\n        id: namespace + '-asset'\n      },\n      idShort: namespace + '-asset',\n      kind: 'Instance',\n      dataSpecification: [],\n      modelType: {\n        name: 'Asset'\n      },\n      embeddedDataSpecifications: []\n    },\n    embeddedDataSpecifications: [],\n    views: [],\n    submodels: []\n  });\n  let bytePayload = null;\n  let contentType = 'application/json';\n  return Ditto.buildExternalMsg(\n    headers, // The external headers Object containing header values\n    textPayload, // The external mapped String\n    bytePayload, // The external mapped byte[]\n    contentType // The returned Content-Type\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Import Retrieval Response in Eclipse Ditto Protocol\nDESCRIPTION: Response message structure for a successful policy import retrieval. The response includes details about the imported policy including its ID and entries, along with metadata like the revision number and timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrieveimport.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/imports/my_imported_policy_id\",\n  \"value\": {\n    \"importedPolicyId\": \"my_imported_policy_id\",\n    \"entries\": {\n      \"the_label\": {\n        \"subjects\": {\n          \"ditto:subject\": {\n            \"type\": \"the_type\"\n          }\n        },\n        \"resources\": {\n          \"policy:/\": {\n            \"grant\": [\n              \"READ\",\n              \"WRITE\"\n            ],\n            \"revoke\": []\n          }\n        }\n      }\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Merged Features Event in Ditto Protocol (JSON)\nDESCRIPTION: This snippet shows the event generated when features are successfully merged in Ditto Protocol. It includes the thing ID, revision number, and timestamp of the change.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergefeatures.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"accelerometer\": {\n      \"definition\": [\n        \"org.eclipse.ditto:accelerometer:1.0.0\"\n      ],\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"g\"\n      }\n    },\n    \"gyroscope\": {\n      \"definition\": [\n        \"org.eclipse.ditto:gyroscope:1.0.0\"\n      ],\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"degree/s\"\n      }\n    }\n  },\n  \"revision\": 42,\n  \"timestamp\": \"2021-03-01T15:33:48Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Attributes Not Found Error Response in Eclipse Ditto\nDESCRIPTION: Shows the standard error response format when Thing attributes cannot be found or accessed. The response includes the topic, correlation ID, error details, and HTTP status code 404.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_attributes_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"things:attributes.notfound\",\n    \"message\": \"The Attributes of the Thing with ID 'org.eclipse.ditto:fancy-thing' could not be found or the requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Thing was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Content for Modify Feature Desired Property Command\nDESCRIPTION: This snippet includes the content of a markdown file containing the command to modify a feature's desired property in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifydesiredproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyfeaturedesiredproperty.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Basic MQTT Connection Configuration Example\nDESCRIPTION: Example configuration for creating a new MQTT connection to test.mosquitto.org. Includes connection ID, type, status, URI, sources for subscribing to topics, and targets for publishing messages. Uses QoS 0 for both publishing and subscribing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"mqtt-example-connection-123\",\n  \"connectionType\": \"mqtt\",\n  \"connectionStatus\": \"open\",\n  \"failoverEnabled\": true,\n  \"uri\": \"tcp://test.mosquitto.org:1883\",\n  \"sources\": [\n    {\n      \"addresses\": [\n        \"eclipse-ditto-sandbox/#\"\n      ],\n      \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n      \"qos\": 0,\n      \"filters\": []\n    }\n  ],\n  \"targets\": [\n    {\n      \"address\": \"eclipse-ditto-sandbox/{{ thing:id }}\",\n      \"topics\": [\n        \"_/_/things/twin/events\"\n      ],\n      \"authorizationContext\": [\"ditto:outbound-auth-subject\"],\n      \"qos\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Modify Feature Definition Command in Markdown\nDESCRIPTION: This snippet includes the content of a markdown file containing the command for modifying a feature definition in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifydefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyfeaturedefinition.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Handling Policy Entry Not Found Error in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON structure represents the error response when a policy entry is not found or the requester has insufficient permissions in Eclipse Ditto. It includes details such as the topic, headers, path, error message, and HTTP status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_entry_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"policies:entry.notfound\",\n    \"message\": \"The PolicyEntry with Label 'the_label' on the Policy with ID 'org.eclipse.ditto:the_policy_id' could not be found or requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Policy and the Label of your requested PolicyEntry was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Response Pattern from Ditto to Client\nDESCRIPTION: Illustration of the event flow from Ditto to client in response to search commands. Ditto sends a 'created' event, followed by multiple 'next' events containing search results, and ends with either a 'complete' or 'failed' event.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-search.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncreated next* (complete | failed)?\n```\n\n----------------------------------------\n\nTITLE: Policy Announcement Topic Path Structure\nDESCRIPTION: Defines the structure of the topic path for policy announcements. The topic path contains the namespace, policy name, and announcement name without a channel element.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-announcement.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<namespace>/<policyName>/policies/announcements/<announcement-name>\n```\n\n----------------------------------------\n\nTITLE: Stream Complete Message\nDESCRIPTION: Protocol message indicating the completion of the event stream.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-history.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/thing-2/things/twin/streaming/complete\",\n  \"path\": \"/\",\n  \"headers\": {},\n  \"value\": {\n    \"subscriptionId\": \"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment and Auth Settings Types in TypeScript\nDESCRIPTION: This snippet defines TypeScript types for the 'Environment' and related authentication settings necessary for configuring the Ditto UI. It includes definitions for API URI, version, and various options to enable or disable UI components.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/ui/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Environment = {\n    /** The Ditto API URI to use, without the `/api/2` part */\n    api_uri: string,\n    /** The Ditto main version, either `2` or `3` */\n    ditto_version: number,\n    /** Whether to hide the \"Policies\" tab */\n    disablePolicies?: boolean,\n    /** Whether to hide the \"Connections\" tab */\n    disableConnections?: boolean,\n    /** Whether to hide the \"Operations\" tab */\n    disableOperations?: boolean,\n    /** The authorization settings for the UI */\n    authSettings?: AuthSettings,\n    /** A comma separated list of namespaces to perform Thing searches in */\n    searchNamespaces?: string,\n    /** Holds templates for well known (feature) messages */\n    messageTemplates?: any,\n    /** Contains a list of fields to be shown as additional columns in the Things search result table */\n    fieldList?: FieldListItem[],\n    /** Contains well known filters which should be suggested when typing in the Things search field */\n    filterList?: string[],\n    /** Holds a list of \"pinned\" things */\n    pinnedThings?: string[],\n    /** Holds a list of recently opened Policies in the \"Policy\" tab */\n    recentPolicyIds?: string[],\n}\n\ntype AuthSettings = {\n    /** Contains the settings for the 'main' user authentication, accessing things+policies */\n    main: MainAuthSettings,\n    /** Contains the settings for the 'devops' user authentication, accessing connections+operations */\n    devops: CommonAuthSettings,\n    /** The shared OpenID Connect (OIDC) provider configuration with the provider as key and the configuration as value */\n    oidc: Record<string, OidcProviderConfiguration>\n}\n\n// Additional type definitions follow...\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Properties with Merge Command in Ditto Protocol (JSON)\nDESCRIPTION: This JSON payload demonstrates a Ditto Protocol message that performs a merge operation to delete the properties of the 'accelerometer' feature. The command targets the '/features/accelerometer/properties' path and sets its value to null, which effectively removes the properties. The message includes headers specifying the content type as 'application/merge-patch+json' and a correlation ID for tracking.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeatureproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Policies Subjects Not Found Error Response in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents an error response when policy subjects are not found or cannot be accessed due to insufficient permissions in Eclipse Ditto. It includes details such as the topic, correlation ID, error code, and a descriptive message.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_subjects_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"policies:subjects.notfound\",\n    \"message\": \"The Subjects of the PolicyEntry with Label 'the_label' on the Policy with ID 'org.eclipse.ditto:the_policy_id' could not be found or requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Policy and the Label of the PolicyEntry was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Features Command JSON\nDESCRIPTION: This JSON snippet is used to send a command to delete features from a twin in Eclipse Ditto. The command requires specifying the topic and including a correlation ID in the headers. The path indicates where the deletion is intended within the twin. This is typically used in the context of managing digital twins within IoT frameworks.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Thing Attributes in Eclipse Ditto\nDESCRIPTION: This command uses the Ditto protocol to merge (partially update) the location attribute of a Thing. It specifies the path '/attributes/location' and provides latitude and longitude values to be updated while preserving other attributes.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergeattribute.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"value\": {\n    \"latitude\": 44.673856,\n    \"longitude\": 8.261719\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Content for Modify Feature Command\nDESCRIPTION: This snippet includes the Markdown content for the modify feature command from an external file.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyfeature.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyfeature.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Target Format\nDESCRIPTION: JSON configuration for setting up an MQTT target with topic, authorization context and QoS settings\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt5.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"mqtt/topic/of/my/device/{{ thing:id }}\",\n  \"topics\": [\n    \"_/_/things/twin/events\",\n    \"_/_/things/live/messages\"\n  ],\n  \"authorizationContext\": [\"ditto:outbound-auth-subject\", \"...\"],\n  \"qos\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Merging JSON Patch Commands in Eclipse Ditto\nDESCRIPTION: This JSON snippet demonstrates how to structure a merge-patch command in Eclipse Ditto. The command targets the accelerometer properties at the /features path. Dependencies include Eclipse Ditto and the definition of the accelerometer. The patch updates the x, y, and z properties with specific float values, and includes a correlation ID for tracking the command. Inputs expect a JSON object, and outputs result in an updated state if successful.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"accelerometer\": {\n      \"definition\": [\n        \"org.eclipse.ditto:accelerometer:1.0.0\"\n      ],\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"g\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Merged Event JSON Structure\nDESCRIPTION: Example of a Ditto protocol message representing a merged event for deleting a desired property. The event shows the removal of the 'x' property from the accelerometer feature's desired properties, indicated by the null value. Includes standard Ditto event fields like topic, headers, path, revision, and timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergeddeletefeaturedesiredproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"value\": null,\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Search Subscription Command\nDESCRIPTION: Command for terminating an active search subscription\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/protocol-examples-search.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/cancel-subscription-command.md %}{% endcapture %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection Metrics via Piggyback Command\nDESCRIPTION: DevOps command for retrieving metrics data for a specific connection.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:retrieveConnectionMetrics\",\n    \"connectionId\": \"<connectionID>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Thing Definitions in API Version 2\nDESCRIPTION: Demonstrates how to use the /things/{thingId}/migrateDefinition endpoint to migrate a thing definition with a new model, including optional migration of attributes and features.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingDefinitionUrl\": \"https://models.example.com/thing-definition-1.0.0.tm.jsonld\",\n  \"migrationPayload\": {\n    \"attributes\": {\n      \"manufacturer\": \"New Corp\",\n      \"location\": \"Berlin, main floor\"\n    },\n    \"features\": {\n      \"thermostat\": {\n        \"properties\": {\n          \"status\": {\n            \"temperature\": {\n              \"value\": 23.5, \n              \"unit\": \"DEGREE_CELSIUS\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"patchConditions\": {\n    \"thing:/features/thermostat\": \"not(exists(/features/thermostat))\"\n  },\n  \"initializeMissingPropertiesFromDefaults\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Thing Twin Command JSON\nDESCRIPTION: This JSON payload is used to send a delete command to Eclipse Ditto to delete a specific thing's twin. The `topic` specifies the command's routing, the `headers` include a correlation ID for tracking, and the `path` indicates the root level operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletething.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Merged Event with Null Value at /features Path in Eclipse Ditto\nDESCRIPTION: This JSON snippet demonstrates a Thing merged event in Eclipse Ditto where the value at /features path is set to null, effectively removing all features. The event includes the topic, content-type header, path specification, null value, revision number, and timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergeddeletefeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features\",\n  \"value\": null,\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merged Feature Properties Event in Eclipse Ditto\nDESCRIPTION: This snippet illustrates the event structure generated when feature properties are successfully merged in Eclipse Ditto. It includes details about the merged properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeproperties.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/mergedfeatureproperties.md %}{% endcapture %} {{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Example TTN MQTT Message\nDESCRIPTION: Sample JSON message received from the TTN MQTT broker containing device telemetry data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-04-16-connecting-to-ttn-via-mqtt.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app_id\": \"iot-campus-be12\",\n  \"dev_id\": \"node0\",\n  \"hardware_serial\": \"70B3D5499A2D3954\",\n  \"port\": 2,\n  \"counter\": 9449,\n  \"payload_raw\": \"B2cA6AhoKwpzJ8oEAwH4\",\n  \"payload_fields\": {\n    \"analog_out_4\": 5.04,\n    \"barometric_pressure_10\": 1018.6,\n    \"relative_humidity_8\": 21.5,\n    \"temperature_7\": 23.2\n  },\n  \"metadata\": {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Desired Properties Command in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the command structure for deleting desired properties of a feature. It includes the necessary path and value information.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergedesiredproperties.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergedeletefeaturedesiredproperties.md %}{% endcapture %} {{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Configuring MQTT Source Format\nDESCRIPTION: JSON configuration for setting up an MQTT source with topic subscriptions, authorization context and QoS settings\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt5.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addresses\": [\n    \"<mqtt_topic>\",\n    \"...\"\n  ],\n  \"authorizationContext\": [\"ditto:inbound-auth-subject\", \"...\"],\n  \"qos\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Next Event Structure\nDESCRIPTION: Defines the structure of a Next event that contains one item of the results from a streaming subscription.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-streaming-subscription.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<entityName>/<group>/<channel>/streaming/next\",\n  \"path\": \"/\",\n  \"value\": \"[result-item-object]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Live Command Response JSON Structure\nDESCRIPTION: Example JSON response structure showing the retrieved thing data including attributes and feature properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-12-20-http-live-channel.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"org.eclipse.ditto:outdoor-sensor\",\n  \"_namespace\": \"org.eclipse.ditto\",\n  \"attributes\": {\n    \"location\": \"outdoor in the woods\"\n  },\n  \"features\": {\n    \"environment-sensor\": {\n      \"properties\": {\n        \"temperature\": 9.2,\n        \"humidity\": 56.3\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ditto Protocol Conditional Request\nDESCRIPTION: JSON message structure for a conditional request using the Ditto protocol to modify water tank temperature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-09-23-conditional-requests.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/coffeebrewer/things/twin/commands/modify\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"condition\": \"gt(features/water-tank/properties/status/lastModified,\\\"2021-09-23T07:00:00Z\\\")\"\n  },\n  \"path\": \"/features/water-tank/properties/status/temperature\",\n  \"value\": 45.26\n}\n```\n\n----------------------------------------\n\nTITLE: Response Message Example in JSON\nDESCRIPTION: Example JSON structure showing a completed response message that would be sent back to the original message sender. Includes the same correlation-id as the original message and a status code of 418.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-messages.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"topic\": \"org.eclipse.ditto/smartcoffee/things/live/messages/ask\",\n    \"headers\": {\n        \"correlation-id\": \"demo-6qaal9l\",\n        \"auth-subjects\": [\"ditto\", \"nginx:ditto\"],\n        \"content-type\": \"text/plain\",\n        \"version\": 1\n    },\n    \"path\": \"/inbox/messages/ask\",\n    \"status\": 418,\n    \"value\": \"I don't know since i am only a coffee machine\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Weak Acknowledgement Format in Ditto Protocol JSON\nDESCRIPTION: This example shows the JSON structure of a weak acknowledgement in Ditto protocol. It includes the topic identifying the source, headers with the weak-ack flag, path, value with a description of why it was issued automatically, and a 200 OK status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-11-16-weak-acknowledgements.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"com.acme/xdk_53/things/twin/acks/my-mqtt-connection:my-mqtt-topic\",\n  \"headers\": {\n    \"ditto-weak-ack\": true\n  },\n  \"path\": \"/\",\n  \"value\": \"Acknowledgement was issued automatically, because the subscriber is not authorized to receive the signal.\",\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: C2D Message Example\nDESCRIPTION: Example JSON payload for a Cloud to Device message sent through Azure IoT Hub\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-06-17-hmac-credentials.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hello\": \"from Ditto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Feature Using Merge Command in Eclipse Ditto\nDESCRIPTION: JSON command example for deleting the 'accelerometer' feature from a Ditto thing using the merge command. The command uses a null value to indicate deletion and includes required headers for content type and correlation ID.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeature.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Merged Single Attribute Response Structure\nDESCRIPTION: Response structure after successfully merging a single attribute of a Thing. It includes topic, path, and status fields.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-merge.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      |        | Value                                                     |\n|------------|--------|-----------------------------------------------------------|\n| **topic**  |        | `<namespace>/<thingName>/things/<channel>/commands/merge` |\n| **path**   |        | `/attributes/<attributePath>`                             |\n| **status** | _code_ |                                                           | \n|            | `204`  | Success - The attribute was merged successfully.          |\n```\n\n----------------------------------------\n\nTITLE: Deleting Policy Import in Eclipse Ditto using JSON\nDESCRIPTION: This JSON structure represents the DeleteImport command used to remove a policy import in Eclipse Ditto. It specifies the topic for the command, includes a correlation ID in the headers, and defines the path to the specific import to be deleted.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/deleteimport.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/import/org.eclipse.ditto:the_imported_policy_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection Details via Piggyback Command\nDESCRIPTION: DevOps command for retrieving details of a specific connection using its connectionId.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:retrieveConnection\",\n    \"connectionId\": \"<connectionID>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Merged Event JSON Structure for Desired Properties\nDESCRIPTION: Shows the format of a Thing merged event at path /features/accelerometer/desiredProperties. The event includes topic, headers, path, value, revision and timestamp fields, with content-type specified as application/merge-patch+json.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergeddeletefeaturedesiredproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"value\": null,\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Single Policy Entry Modification Schema\nDESCRIPTION: Protocol schema for creating or modifying a single policy entry identified by a label. Creates new entry if label doesn't exist, updates if it does.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/modify\",\n  \"path\": \"/entries/<label>\",\n  \"value\": \"<policy entry as JSON>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Connection Targets with Header Mapping - JSON\nDESCRIPTION: This JSON snippet demonstrates how to update connection targets with explicit header mapping to maintain specific content types after the default content-type header mapping was removed. It showcases the structure for defining targetActorSelection, headers, and piggybackCommand with a createConnection type, including detailed header mappings for content-type, correlation-id, and reply-to.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_200.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"targetActorSelection\": \"/system/sharding/connection\",\n    \"headers\": {\n        \"aggregate\": false\n    },\n    \"piggybackCommand\": {\n        \"type\": \"connectivity.commands:createConnection\",\n            \"connection\": {\n              \"targets\":[{\n                \"headerMapping\": {\n                  \"content-type\": \"{%raw%}{{header:content-type}}{%endraw%}\",\n                  \"correlation-id\": \"{%raw%}{{header:correlation-id}}{%endraw%}\",\n                  \"reply-to\": \"{%raw%}{{header:reply-to}}{%endraw%}\"\n                },\n                // ...\n              }]\n              // ...\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Change Notifications in Ditto Java Client\nDESCRIPTION: Demonstrates how to subscribe to change notifications for things and register a callback for handling changes.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-java.md#2025-04-17_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\nclient.twin().startConsumption().toCompletableFuture().get(); // this will block the thread! work asynchronously whenever possible!\nSystem.out.println(\"Subscribed for Twin events\");\nclient.twin().registerForThingChanges(\"my-changes\", change -> {\n   if (change.getAction() == ChangeAction.CREATED) {\n       System.out.println(\"An existing Thing was modified: \" + change.getThing());\n       // perform custom actions ..\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Ditto Thing Structure\nDESCRIPTION: Target Thing structure in Eclipse Ditto showing how device values are mapped to features.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"the.namespace:the-thing-id\",\n  \"policyId\": \"the.namespace:the-policy-id\",\n  \"features\": {\n    \"temperature\": {\n       \"properties\": {\n         \"value\": 23.42\n       }\n     },\n    \"pressure\": {\n       \"properties\": {\n         \"value\": 760\n       }\n     },\n    \"humidity\": {\n       \"properties\": {\n         \"value\": 78\n       }\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Thing Object in JSON\nDESCRIPTION: A JSON representation of an example thing object that will be used to demonstrate the merge functionality. The thing contains a thing ID, policy ID, definition, attributes, and features including a coffee-brewer and water-tank.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-02-04-merge-feature.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"com.acme:coffeebrewer\",\n  \"policyId\": \"com.acme:coffeebrewer-policy\",\n  \"definition\": \"com.acme:coffeebrewer:0.1.0\",\n  \"attributes\": {\n    \"manufacturer\": \"ACME demo corp.\",\n    \"location\": \"Berlin, main floor\",\n    \"serialno\": \"42\",\n    \"model\": \"Speaking coffee machine\"\n  },\n  \"features\": {\n    \"coffee-brewer\": {\n      \"definition\": [\"com.acme:coffeebrewer:0.1.0\"],\n      \"properties\": {\n        \"brewed-coffees\": 0\n      }\n    },\n    \"water-tank\": {\n      \"properties\": {\n        \"configuration\": {\n          \"smartMode\": true,\n          \"brewingTemp\": 87,\n          \"tempToHold\": 44,\n          \"timeoutSeconds\": 6000\n        },\n        \"status\": {\n          \"waterAmount\": 731,\n          \"temperature\": 44\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merged Feature Desired Properties Event in Eclipse Ditto\nDESCRIPTION: This snippet shows the event structure generated when feature desired properties are successfully merged. It includes details about the changes made.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergedesiredproperties.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/mergedfeaturedesiredproperties.md %}{% endcapture %} {{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Creating Thing with Policy in JSON\nDESCRIPTION: JSON payload for creating a thing in Eclipse Ditto with a policy granting read access to the connection's subject, triggering a thing-created event.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-11-03-oauth2.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_policy\": {\n    \"entries\": {\n      \"DEFAULT\": {\n        \"subjects\": {\n          \"{{ request:subjectId }}\": {\n            \"type\": \"the creator\"\n          },\n          \"integration:ditto\": {\n            \"type\": \"the connection\"\n          }\n        },\n        \"resources\": {\n          \"policy:/\": {\n            \"grant\": [\"READ\", \"WRITE\"],\n            \"revoke\": []\n          },\n          \"thing:/\": {\n            \"grant\": [\"READ\", \"WRITE\"],\n            \"revoke\": []\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Properties using Merge Command in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates how to use the merge command to delete feature properties in Eclipse Ditto. It includes the command structure for this operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeproperties.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergedeletefeatureproperties.md %}{% endcapture %} {{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic MQTT 5 Connection in Ditto\nDESCRIPTION: Example configuration for creating a new MQTT connection with source and target specifications. Includes connection ID, type, status settings and topic configurations for publishing and subscribing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-mqtt5.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"mqtt-example-connection-12\",\n  \"connectionType\": \"mqtt-5\",\n  \"connectionStatus\": \"open\",\n  \"failoverEnabled\": true,\n  \"uri\": \"tcp://test.mosquitto.org:1883\",\n  \"sources\": [\n    {\n      \"addresses\": [\n        \"eclipse-ditto-sandbox/#\"\n      ],\n      \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n      \"qos\": 0,\n      \"filters\": []\n    }\n  ],\n  \"targets\": [\n    {\n      \"address\": \"eclipse-ditto-sandbox/{{ thing:id }}\",\n      \"topics\": [\n        \"_/_/things/twin/events\"\n      ],\n      \"authorizationContext\": [\"ditto:outbound-auth-subject\"],\n      \"qos\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Single Policy Resource Response Structure\nDESCRIPTION: Response structure for modifying a single policy resource, including topic, path and status code information.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/modify\",\n  \"path\": \"/entries/<label>/resources/<resource>\",\n  \"value\": \"<policy_resource_json>\",\n  \"status\": {\n    \"code\": \"201|204\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Negative Acknowledgment Response from Ditto\nDESCRIPTION: Example of a negative acknowledgment response sent back to the device when notification delivery fails. Contains error details and status code from the failed delivery attempt to the backend application.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-10-23-end-2-end-acknowledgement.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/my-thing/things/twin/acks/d45d4522-142e-4057-ae87-8969343a3ddc:backend-processed\",\n  \"headers\": {\n    \"response-required\": false,\n    \"requested-acks\": [\"d45d4522-142e-4057-ae87-8969343a3ddc:backend-processed\"],\n    \"timeout\": \"30s\",\n    \"content-type\": \"application/json\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"errorCode\": \"notification.smartphone.failed\",\n    \"message\": \"Could not notify smartphone.\"\n  },\n  \"status\": 424\n}\n```\n\n----------------------------------------\n\nTITLE: ConnectionStatus Feature Example\nDESCRIPTION: Example showing the structure of a ConnectionStatus feature after mapping.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"eclipse:ditto\",\n  \"features\": {\n    \"ConnectionStatus\": {\n      \"definition\": [ \"org.eclipse.ditto:ConnectionStatus:1.0.0\" ],\n      \"properties\": {\n        \"status\": {\n          \"readySince\": \"2019-10-29T14:16:18Z\",\n          \"readyUntil\": \"2019-10-29T14:21:18Z\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring System Properties for Custom Metrics\nDESCRIPTION: Example of how to configure the same custom metrics via system properties instead of a configuration file. This shows the property format for defining namespaces, filters, and tags.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_15\n\nLANGUAGE: properties\nCODE:\n```\n-Dditto.search.operator-metrics.custom-metrics.all_produced_and_not_installed_devices.enabled=true\n-Dditto.search.operator-metrics.custom-metrics.all_produced_and_not_installed_devices.scrape-interval=5m\n-Dditto.search.operator-metrics.custom-metrics.all_produced_and_not_installed_devices.namespaces.0=org.eclipse.ditto.smokedetectors\n-Dditto.search.operator-metrics.custom-metrics.all_produced_and_not_installed_devices.namespaces.1=org.eclipse.ditto.cameras\n-Dditto.search.operator-metrics.custom-metrics.all_produced_and_not_installed_devices.filter=and(exists(attributes/production-date),not(exists(attributes/installation-date)))\n-Dditto.search.operator-metrics.custom-metrics.all_produced_and_not_installed_devices.tags.company=acme-corp\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Content for Modify Feature Desired Property Response\nDESCRIPTION: This snippet includes the content of a markdown file containing the response to the command for modifying a feature's desired property in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifydesiredproperty.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyfeaturedesiredpropertyresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown File for Modify Policy Entry Command in Jekyll/Liquid\nDESCRIPTION: This snippet uses Liquid templating to include an external markdown file containing the command for modifying a policy entry. The included content is then processed through the markdownify filter.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-modifypolicyentry.md#2025-04-17_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifypolicyentry.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Entity Creation Configuration Schema\nDESCRIPTION: Configuration schema for restricting entity creation in Ditto, defining grant and revoke rules.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_8\n\nLANGUAGE: hocon\nCODE:\n```\nditto.entity-creation {\n   # this default entry allows every authenticated \"auth-subject\" to create any \"resource-type\" in any \"namespace\":\n  grant = [\n    {\n      resource-types = [\n//        \"policy\"\n//        \"thing\"\n      ]\n      namespaces = [\n//        \"org.eclipse.ditto*\"\n      ]\n      auth-subjects = [\n//        \"pre:ditto-*\"\n      ]\n    }\n  ]\n  revoke = [\n    # same as \"grant\", but rejecting requests which already passed \"grant\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Live Command with Query Parameters in Bash\nDESCRIPTION: Example of sending a GET request to retrieve thing data using the live channel specified as query parameter with a custom timeout.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-12-20-http-live-channel.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET /api/2/things/org.eclipse.ditto:coffeebrewer?channel=live&timeout=30s'\n```\n\n----------------------------------------\n\nTITLE: Specifying Merge Command Response in JSON\nDESCRIPTION: This JSON snippet defines a command response for merging properties at a specified path in Eclipse Ditto. The response includes details such as the MQTT topic, headers with a correlation ID for tracking the command, the path indicating the target feature, and an HTTP status code indicating successful completion. The snippet is used in contexts where properties of device features, like an accelerometer, need to be merged, without requiring specific prerequisites besides the Eclipse Ditto framework.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeaturepropertiesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Limits for Connectivity Service\nDESCRIPTION: Example of setting CPU and memory limits for the Connectivity service using helm upgrade command\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/ditto/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade -n ditto eclipse-ditto . --install --set connectivity.resources.limits.cpu=0.25 --set connectivity.resources.limits.memory=512Mi\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Connections via Piggyback Command\nDESCRIPTION: DevOps command for modifying an existing connection configuration. Requires the connection to be created first.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:modifyConnection\",\n    \"connection\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Thing with Copied Policy using Policy ID in Eclipse Ditto - JSON\nDESCRIPTION: This JSON snippet demonstrates how to create a new Thing in Eclipse Ditto with a unique ID by copying an existing Policy using its Policy ID. The command includes necessary headers and specifies parameters like thingId and policyId, along with _copyPolicyFrom indicating the source Policy ID. Ensure appropriate permissions and existence of the source Policy.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/createthingalternatives.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/create\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"org.eclipse.ditto:fancy-thing_53\",\n    \"policyId\": \"org.eclipse.ditto:the_policy_id\",\n    \"_copyPolicyFrom\": \"com:acme:the_policy_id_to_copy\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Attributes Response in Eclipse Ditto Protocol\nDESCRIPTION: This snippet shows the response structure for a successful attribute modification in Eclipse Ditto. It includes the topic, headers, and status code of the response.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createattributes.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyattributesresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Resource Modification Protocol Schema\nDESCRIPTION: Command structure for modifying all resources within a policy entry. Updates multiple resources in a single operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/modify\",\n  \"path\": \"/entries/<label>/resources\",\n  \"value\": \"<resources as JSON>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Extension Configuration in HOCON\nDESCRIPTION: Minimal configuration example for specifying an extension implementation without custom config.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-extending.md#2025-04-17_snippet_2\n\nLANGUAGE: hocon\nCODE:\n```\nditto.extensions.signal-enrichment-provider = org.eclipse.ditto.gateway.service.endpoints.utils.DefaultGatewaySignalEnrichmentProvider\n```\n\n----------------------------------------\n\nTITLE: Stopping Eclipse Ditto Docker Environment\nDESCRIPTION: Command to stop and remove all containers defined in the docker-compose.yml file.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/docker/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: Normalized Mapper Example\nDESCRIPTION: Examples of input and output for the Normalized mapper showing transformation of modified events.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"thing/id/things/twin/events/modified\",\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"path\": \"/features/sensors/properties/temperature/indoor/value\",\n  \"value\": 42\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"thing:id\",\n  \"features\": {\n    \"sensors\": {\n      \"properties\": {\n        \"temperature\": {\n          \"indoor\": {\n            \"value\": 42\n          }\n        }\n      }\n    }\n  },\n  \"_context\": {\n    \"topic\": \"thing/id/things/twin/events/modified\",\n    \"path\": \"/features/sensors/properties/temperature/indoor/value\",\n    \"value\": 42,\n    \"headers\": {\n      \"content-type\": \"application/json\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Thing with Tagged Attributes in JSON\nDESCRIPTION: JSON representation of a Thing with various tagged attributes, including strings, numbers, booleans, and nested objects.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-search.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"org.eclipse.ditto:tagged-thing-1\",\n  \"policyId\": \"org.eclipse.ditto:tagged-thing-1\",\n  \"attributes\": {\n    \"tags\": [\n      \"misc\",\n      \"no-due-date\",\n      \"high-priority\",\n      2,\n      3,\n      5,\n      false,\n      {\n        \"room\": \"kitchen\",\n        \"floor\": 2\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Feature Desired Properties Response in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response structure after merging desired properties of a feature. It includes the status and any relevant headers.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergedesiredproperties.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/merge/mergefeaturedesiredpropertiesresponse.md %}{% endcapture %} {{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Merging Accelerometer Desired Property X Value\nDESCRIPTION: Sends a merge command to update the x property of accelerometer's desired properties with a value of 42. Uses content-type application/merge-patch+json for partial updates.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeaturedesiredproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"value\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: Merging a Feature Property Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the command structure for merging a single property of a feature. It includes the topic, path, and value to be merged.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergefeatureproperty.md %}{% endcapture %} {{ command\n| markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hono Connection Source in JSON\nDESCRIPTION: Example JSON configuration for a Hono connection source. It specifies the source addresses, consumer count, QoS, authorization context, enforcement, and reply target settings.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-hono.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"addresses\": [\"event\"],\n  \"consumerCount\": 1,\n  \"qos\": 1,\n  \"authorizationContext\": [\"ditto:inbound-auth-subject\"],\n  \"enforcement\": {\n    \"input\": \"{{ header:device_id }}\",\n    \"filters\": [\"{{ entity:id }}\"]\n  },\n  \"headerMapping\": {},\n  \"payloadMapping\": [\"Ditto\"],\n  \"replyTarget\": {\n    \"enabled\": true,\n    \"address\": \"command\",\n    \"expectedResponseTypes\": [\"response\", \"error\", \"nack\"]\n  },\n  \"acknowledgementRequests\": {\n    \"includes\": []\n  },\n  \"declaredAcks\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to a Claim Message in Eclipse Ditto\nDESCRIPTION: Example JSON structure for responding to a Claim Message in Eclipse Ditto after verifying the claim request. This response with status 204 indicates the claim was successful and access has been granted to the Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-messages.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"topic\": \"org.eclipse.ditto/smartcoffee/things/live/messages/claim\",\n    \"headers\": {\n        \"content-type\": \"text/plain\",\n        \"correlation-id\": \"a-unique-string-for-this-claim-message\"\n    },\n    \"path\": \"/inbox/messages/claim\",\n    \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Placeholder Example in YAML\nDESCRIPTION: Example showing the placeholder syntax for connection ID in target issued acknowledgement labels, demonstrating allowed spaces inside curly brackets.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_337.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{ connection:id }}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Not Found Attribute\nDESCRIPTION: Example of a 404 error response when an attribute cannot be found on a thing. Shows the standard error structure with status code, error identifier, message and description.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-errors.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 404,\n  \"error\": \"things:attribute.notfound\",\n  \"message\": \"The attribute with key 'unknown-key' on the thing with ID 'org.eclipse.ditto:my-thing' could not be found or the requester had insufficient permissions to access it.\",\n  \"description\": \"Check if the ID of the thing and the key of your requested attribute was correct and you have sufficient permissions.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Aggregation Metrics in HOCON (New Format for 3.7.3)\nDESCRIPTION: Updated configuration format for custom aggregation metrics in Eclipse Ditto 3.7.3. This new format removes the filters object and uses a single filter property for each metric.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_373.md#2025-04-17_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\ncustom-aggregation-metrics {\n    online {\n        namespaces = []\n        filter = \"gt(features/ConnectionStatus/properties/status/readyUntil/,time:now)\"\n        group-by {}\n        tags {\n            \"health\" = \"good\"\n        }\n    }\n    offline {\n        namespaces = []\n        filter = \"lt(features/ConnectionStatus/properties/status/readyUntil/,time:now)\"\n        group-by {}\n        tags {\n            \"health\" = \"bad\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyFeaturePropertiesResponse JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON snippet outlines the structure of a ModifyFeaturePropertiesResponse in Eclipse Ditto. It includes the topic, headers with a correlation ID, the path to the modified feature properties, and a status code indicating the result of the modification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturepropertiesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Define Environment Type\nDESCRIPTION: Defines the TypeScript type for the Ditto UI environment configuration. It specifies properties for API URI, Ditto version, UI visibility settings, authentication settings (AuthSettings), search namespaces, message templates, field lists, filter lists, pinned things, and recently opened policy IDs.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/user-interface.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Environment = {\n    /** The Ditto API URI to use, without the `/api/2` part */\n    api_uri: string,\n    /** The Ditto main version, either `2` or `3` */\n    ditto_version: number,\n    /** Whether to hide the \"Policies\" tab */\n    disablePolicies?: boolean,\n    /** Whether to hide the \"Connections\" tab */\n    disableConnections?: boolean,\n    /** Whether to hide the \"Operations\" tab */\n    disableOperations?: boolean,\n    /** The authorization settings for the UI */\n    authSettings?: AuthSettings,\n    /** A comma separated list of namespaces to perform Thing searches in */\n    searchNamespaces?: string,\n    /** Holds templates for well known (feature) messages */\n    messageTemplates?: any,\n    /** Contains a list of fields to be shown as additional columns in the Things search result table */\n    fieldList?: FieldListItem[],\n    /** Contains well known filters which should be suggested when typing in the Things search field */\n    filterList?: string[],\n    /** Holds a list of \"pinned\" things */\n    pinnedThings?: string[],\n    /** Holds a list of recently opened Policies in the \"Policy\" tab */\n    recentPolicyIds?: string[],\n}\n\ntype AuthSettings = {\n    /** Contains the settings for the 'main' user authentication, accessing things+policies */\n    main: MainAuthSettings,\n    /** Contains the settings for the 'devops' user authentication, accessing connections+operations */\n    devops: CommonAuthSettings,\n    /** The shared OpenID Connect (OIDC) provider configuration with the provider as key and the configuration as value */\n    oidc: Record<string, OidcProviderConfiguration>\n}\n\ntype CommonAuthSettings = {\n    /** The authentication method to apply */\n    method: AuthMethod,\n    /** Authentication settings for SSO (OIDC) based authentication */\n    oidc: OidcAuthSettings,\n    /** Authentication settings for Bearer authentication (manually providing a Bearer token to the UI) */\n    bearer: BearerAuthSettings\n    /** Authentication settings for Basic authentication */\n    basic: BasicAuthSettings,\n}\n\ntype MainAuthSettings = CommonAuthSettings & {\n    /** Authentication settings for Pre-Authenticated authentication */\n    pre: PreAuthSettings\n}\n\ntype OidcProviderConfiguration = UserManagerSettings /* from 'oidc-client-ts' */ & {\n    /** The name used in the drop-down list of available OIDC providers */\n    displayName: string,\n    /** Configures the field to use as 'Bearer' token from the response of the OIDC provider's /token endpoint, e.g. either \"access_token\" or \"id_token\" */\n    extractBearerTokenFrom: string\n}\n\nexport enum AuthMethod {\n    oidc='oidc',\n    basic='basic',\n    bearer='bearer',\n    pre='pre'\n}\n\nexport type OidcAuthSettings = {\n    /** Whether the SSO (via OIDC) section should be enabled in the Authorize popup */\n    enabled: boolean,\n    /** The default OIDC provider to pre-configure - must match a key in \"AuthSettings.oidc\" */\n    defaultProvider: string | null,\n    /** Whether to automatically start SSO when the Authorize popup model loads */\n    autoSso: boolean,\n    /** The actually chosen OIDC provider (which can be changed by the user in the frontend) - must match a key in \"AuthSettings.oidc\" */\n    provider?: string\n}\n\ntype BasicAuthSettings = {\n    /** Whether the Basic Auth section should be enabled in the Authorize popup */\n    enabled: boolean,\n    /** The default username and password to pre-configure */\n    defaultUsernamePassword: string | null\n}\n\ntype BearerAuthSettings = {\n    /** Whether the Bearer Auth section should be enabled in the Authorize popup */\n    enabled: boolean\n}\n\ntype PreAuthSettings = {\n    /** Whether the Pre-Authenticated section should be enabled in the Authorize popup */\n    enabled: boolean,\n    /** The pre-authenticated username to pre-configure */\n    defaultDittoPreAuthenticatedUsername: string | null,\n    /** The cached pre-authenticated username */\n    dittoPreAuthenticatedUsername?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Java Client Conditional Request Implementation\nDESCRIPTION: Example code showing how to perform a conditional update using the Ditto Java Client with condition options.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-09-23-conditional-requests.md#2025-04-17_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nString thingId = \"org.eclipse.ditto:coffeebrewer\";\nString featureId = \"water-tank\";\nFeature feature = ThingsModelFactory.newFeatureBuilder()\n        .properties(ThingsModelFactory.newFeaturePropertiesBuilder()\n            .set(\"status\", JsonFactory.newObjectBuilder()\n                .set(\"temperature\", 45.2)\n                .set(\"lastModified\", Instant.now())\n                .build())\n            .build())\n        .withId(featureId)\n        .build();\n\nThing thing = ThingsModelFactory.newThingBuilder()\n        .setId(thingId)\n        .setFeature(feature)\n        .build();\n\n// initialize the ditto-client\nDittoClient dittoClient = ... ;\n\ndittoClient.twin().update(thing, Options.condition(\"gt(features/water-tank/properties/status/lastModified,'2021-09-23T07:00:00Z')\"))\n        .whenComplete((adaptable, throwable) -> {\n            if (throwable != null) {\n                LOGGER.error(\"Received error while sending conditional update: '{}' \", throwable.toString());\n            } else {\n                LOGGER.info(\"Received response for conditional update: '{}'\", adaptable);\n            }\n        });\n```\n\n----------------------------------------\n\nTITLE: Resetting Connection Logs via Piggyback Command\nDESCRIPTION: DevOps command for clearing all stored logs of a specific connection.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:resetConnectionLogs\",\n    \"connectionId\": \"<connectionID>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Thing Response in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a response received after a successful delete operation on a \"thing\" in Eclipse Ditto. The 'topic' indicates the command that triggered the response, 'headers' contain the 'correlation-id' for tracking, 'path' shows the resource path, and 'status' confirms the successful deletion with a 204 status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletethingresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Modified Event Format\nDESCRIPTION: JSON event format emitted when an existing Feature is modified. Contains topic, path and value fields for tracking Feature changes.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-create-or-modify.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<thingName>/things/<channel>/events/modified\",\n  \"path\": \"/features/<featureId>\",\n  \"value\": \"<feature-json>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dynamic API Endpoints with Thing Example\nDESCRIPTION: Shows a more complex Thing JSON structure to illustrate how dynamic API endpoints are automatically created based on the Thing's content.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"{thingId}\",\n  \"policyId\": \"{policyId}\",\n  \"definition\": \"{definition}\",\n  \"attributes\": {\n    \"manufacturer\": \"ACME corp\",\n    \"complex\": {\n      \"some\": false,\n      \"serialNo\": 4711\n    }\n  },\n  \"features\": {\n    \"lamp\": {\n      \"properties\": {\n        \"on\": false,\n        \"color\": \"blue\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection-Aware Device Twin in Eclipse Ditto\nDESCRIPTION: JSON configuration showing a connection-aware device with ConnectionStatus feature that tracks device readiness through timestamps.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-12-22-live-channel-condition.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"my.namespace:my-connection-aware-device-1\",\n  \"policyId\": \"my.namespace:my-connection-aware-device-1\",\n  \"features\": {\n    \"ConnectionStatus\": {\n      \"definition\": [ \"org.eclipse.ditto:ConnectionStatus:1.0.0\" ],\n      \"properties\": {\n        \"status\": {\n          \"readySince\": \"2021-12-22T14:16:18Z\",\n          \"readyUntil\": \"9999-12-31T23:59:59Z\"\n        }\n      }\n    },\n    \"temperature\": {\n      \"properties\": {\n        \"value\": 23.42\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific State Value in Eclipse Ditto\nDESCRIPTION: This cURL command updates a specific feature property (cur_speed) of a Thing in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/intro-hello-world.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u ditto:ditto -X PUT -H 'Content-Type: application/json' -d '77' 'http://localhost:8080/api/2/things/org.eclipse.ditto:fancy-car/features/transmission/properties/cur_speed'\n```\n\n----------------------------------------\n\nTITLE: Default Ditto Protocol Event Message\nDESCRIPTION: Shows the structure of a default Ditto Protocol event message when a temperature value is modified, without any enrichment.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-enrichment.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {},\n  \"path\": \"/features/temperature/properties/value\",\n  \"value\": 23.42,\n  \"revision\": 34\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Folder Definition\nDESCRIPTION: Defines the folder where this content is located. This is likely used for organizing the documentation files.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_wot.md#2025-04-17_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n\"folder: tags\"\n```\n\n----------------------------------------\n\nTITLE: Including Merged Attributes Event in Markdown\nDESCRIPTION: This snippet includes the content of a separate Markdown file containing the merged attributes event example.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeattributes.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/mergedattributes.md %}{% endcapture %} {{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Original Attribute Pattern Index Document\nDESCRIPTION: Example of the index document using the attribute pattern before migration, showing flattened array structure.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0008-wildcard-search-index.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_id\": \"ditto:device\",\n  \"d\": [\n    {\n      \"k\": \"thingId\",\n      \"v\": \"ditto:device\",\n      \"g\": [\"issuer:authorization-subject\"]\n    },\n    {\n      \"k\": \"/attributes/location/latitude\",\n      \"v\": 44.673856,\n      \"g\": [\"issuer:authorization-subject\"]\n    },\n    {\n      \"k\": \"/attributes/location/latitude\",\n      \"v\": 44.673856,\n      \"g\": [\"issuer:authorization-subject\"]\n    },\n    {\n      \"k\": \"/features/accelerometer/definition\",\n      \"v\": \"ditto:accelerometer:1.2.3\",\n      \"g\": [\"issuer:authorization-subject\"]\n    },\n    {\n      \"k\": \"/features/accelerometer/properties/x\",\n      \"v\": 3.141,\n      \"g\": [\"issuer:authorization-subject\"]\n    }\n  ],\n  \"s\": {\n    \"thingId\": \"ditto:device\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"definition\": [\n          \"ditto:accelerometer:1.2.3\"\n        ],\n        \"properties\": {\n          \"x\": 3.141\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging a Single Desired Property of a Feature in Eclipse Ditto\nDESCRIPTION: This snippet shows a command to merge a single desired property of a feature using the Ditto Protocol. It specifies the thing ID, feature ID, and the property to be merged.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergedesiredproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"value\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: ImplicitThingCreation Mapper Template\nDESCRIPTION: Configuration template for the ImplicitThingCreation mapper showing thing creation options and command headers setup.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thing\": {\n    \"thingId\": \"{%raw%}{{ header:device_id }}{%endraw%}\",\n    \"attributes\": {\n      \"CreatedBy\": \"ImplicitThingCreation\"\n    }\n  },\n  \"commandHeaders\": {\n    \"If-None-Match\": \"*\",\n    \"correlation-id\": \"{%raw%}{{ header:correlation-id }}{%endraw%}\"\n  },\n  \"allowPolicyLockout\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using Thing JSON Placeholder in HTTP Connection Address\nDESCRIPTION: Example of accessing thing attributes in an outbound HTTP connection address using the new thing-json placeholder to dynamically include longitude and latitude values from the thing's attributes.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_340.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"address\": \"GET:/weather?longitude={{thing-json:attributes/location/lon}}&latitude={{thing-json:attributes/location/lat}}\"\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration Diff\nDESCRIPTION: This code snippet shows the difference between the Ditto UI's default environment configuration file (environmentTemplates.json) in versions 3.5 and 3.6. It highlights the changes in the structure and available options for configuring environments, particularly related to authentication settings (mainAuth, devopsAuth, bearer) which were refactored under authSettings.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_360.md#2025-04-17_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n--- a/ui/modules/environments/environmentTemplates.json\t(revision c87f6fd08fc8e22d06e8a73031c0e0ef44e40288)\n+++ b/ui/modules/environments/environmentTemplates.json\t(date 1727856776632)\n@@ -2,36 +2,182 @@\n   \"local_ditto\": {\n     \"api_uri\": \"http://localhost:8080\",\n     \"ditto_version\": 3,\n-    \"bearer\": null,\n-    \"bearerDevOps\": null,\n-    \"defaultUsernamePassword\": \"ditto:ditto\",\n-    \"defaultDittoPreAuthenticatedUsername\": null,\n-    \"defaultUsernamePasswordDevOps\": \"devops:foobar\",\n-    \"mainAuth\": \"basic\",\n-    \"devopsAuth\": \"basic\"\n+    \"disablePolicies\": false,\n+    \"disableConnections\": false,\n+    \"disableOperations\": false,\n+    \"authSettings\": {\n+      \"main\": {\n+        \"method\": \"basic\",\n+        \"oidc\": {\n+          \"enabled\": false\n+        },\n+        \"basic\": {\n+          \"enabled\": true,\n+          \"defaultUsernamePassword\": \"ditto:ditto\"\n+        },\n+        \"bearer\": {\n+          \"enabled\": true\n+        },\n+        \"pre\": {\n+          \"enabled\": false,\n+          \"defaultDittoPreAuthenticatedUsername\": null\n+        }\n+      },\n+      \"devops\": {\n+        \"method\": \"basic\",\n+        \"oidc\": {\n+          \"enabled\": false\n+        },\n+        \"basic\": {\n+          \"enabled\": true,\n+          \"defaultUsernamePassword\": \"devops:foobar\"\n+        },\n+        \"bearer\": {\n+          \"enabled\": true\n+        }\n+      },\n+      \"oidc\": {\n+      }\n+    }\n   },\n   \"local_ditto_ide\": {\n     \"api_uri\": \"http://localhost:8080\",\n     \"ditto_version\": 3,\n-    \"bearer\": null,\n-    \"bearerDevOps\": null,\n-    \"defaultUsernamePassword\": null,\n-    \"defaultDittoPreAuthenticatedUsername\": \"pre:ditto\",\n-    \"defaultUsernamePasswordDevOps\": \"devops:foobar\",\n-    \"mainAuth\": \"pre\",\n-    \"devopsAuth\": \"basic\"\n+    \"disablePolicies\": false,\n+    \"disableConnections\": false,\n+    \"disableOperations\": false,\n+    \"authSettings\": {\n+      \"main\": {\n+        \"method\": \"pre\",\n+        \"oidc\": {\n+          \"enabled\": false\n+        },\n+        \"basic\": {\n+          \"enabled\": true,\n+          \"defaultUsernamePassword\": null\n+        },\n+        \"bearer\": {\n+          \"enabled\": true\n+        },\n+        \"pre\": {\n+          \"enabled\": false,\n+          \"defaultDittoPreAuthenticatedUsername\": \"pre:ditto\"\n+        }\n+      },\n+      \"devops\": {\n+        \"method\": \"basic\",\n+        \"oidc\": {\n+          \"enabled\": false\n+        },\n+        \"basic\": {\n+          \"enabled\": true,\n+          \"defaultUsernamePassword\": \"devops:foobar\"\n+        },\n+        \"bearer\": {\n+          \"enabled\": true\n+        }\n+      },\n+      \"oidc\": {\n+      }\n+    }\n   },\n   \"ditto_sandbox\": {\n     \"api_uri\": \"https://ditto.eclipseprojects.io\",\n     \"ditto_version\": 3,\n-    \"bearer\": null,\n-    \"bearerDevOps\": null,\n-    \"defaultUsernamePassword\": \"ditto:ditto\",\n-    \"defaultDittoPreAuthenticatedUsername\": null,\n-    \"defaultUsernamePasswordDevOps\": null,\n-    \"mainAuth\": \"basic\",\n-    \"devopsAuth\": null,\n+    \"disablePolicies\": false,\n     \"disableConnections\": true,\n-    \"disableOperations\": true  \n+    \"disableOperations\": true,\n+    \"authSettings\": {\n+      \"main\": {\n+        \"method\": \"basic\",\n+        \"oidc\": {\n+          \"enabled\": true,\n+          \"defaultProvider\": \"fake\"\n+        },\n+        \"basic\": {\n+          \"enabled\": true,\n+          \"defaultUsernamePassword\": \"ditto:ditto\"\n+        },\n+        \"bearer\": {\n+          \"enabled\": true\n+        },\n+        \"pre\": {\n+          \"enabled\": false,\n+          \"defaultDittoPreAuthenticatedUsername\": null\n+        }\n+      },\n+      \"devops\": {\n+        \"method\": \"basic\",\n+        \"oidc\": {\n+          \"enabled\": false,\n+          \"defaultProvider\": null\n+        },\n+        \"basic\": {\n+          \"enabled\": false,\n+          \"defaultUsernamePassword\": null\n+        },\n+        \"bearer\": {\n+          \"enabled\": false\n+        }\n+      },\n+      \"oidc\": {\n+      }\n+    }\n+  },\n+  \"oidc_example\": {\n+    \"api_uri\": \"http://localhost:8080\",\n+    \"ditto_version\": 3,\n+    \"disablePolicies\": false,\n+    \"disableConnections\": false,\n+    \"disableOperations\": false,\n+    \"authSettings\": {\n+      \"main\": {\n+        \"method\": \"oidc\",\n+        \"oidc\": {\n+          \"enabled\": true,\n+          \"defaultProvider\": \"fake\",\n+          \"autoSso\": true\n+        },\n+        \"basic\": {\n+          \"enabled\": false,\n+          \"defaultUsernamePassword\": null\n+        },\n+        \"bearer\": {\n+          \"enabled\": true\n+        },\n+        \"pre\": {\n+          \"enabled\": false,\n+          \"defaultDittoPreAuthenticatedUsername\": null\n+        }\n+      },\n+      \"devops\": {\n+        \"method\": \"oidc\",\n+        \"oidc\": {\n+          \"enabled\": true,\n+          \"defaultProvider\": \"fake\",\n+          \"autoSso\": true\n+        },\n+        \"basic\": {\n+          \"enabled\": false,\n+          \"defaultUsernamePassword\": null\n+        },\n+        \"bearer\": {\n+          \"enabled\": true\n+        }\n+      },\n+      \"oidc\": {\n+        \"providers\": {\n+          \"fake\": {\n+            \"displayName\": \"Fake IDP to test\",\n+            \"extractBearerTokenFrom\": \"access_token\",\n+            \"authority\": \"http://localhost:9900/fake\",\n+            \"client_id\": \"some-client-id\",\n+            \"redirect_uri\": \"http://localhost:8000\",\n+            \"response_type\": \"code\",\n+            \"scope\": \"openid\"\n+          }\n+        }\n+      }\n+    }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Things Attributes Not Modifiable Error Response\nDESCRIPTION: Example JSON error response when a request to modify Thing attributes fails due to insufficient permissions. The response includes the error status code 403, error type, detailed message explaining the permission issue, and guidance for resolution.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_attributes_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"things:attributes.notmodifiable\",\n    \"message\": \"The Attributes on the Thing with ID 'org.eclipse.ditto:fancy-thing' could not be modified as the requester had insufficient permissions (WRITE is required).\",\n    \"description\": \"Check if the ID of your requested Thing was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Generating AES Key via Shell Command\nDESCRIPTION: Shell command for generating a base64url-encoded 256-bit random key.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ openssl rand 32 | basenc --base64url\n```\n\n----------------------------------------\n\nTITLE: Background Cleanup Configuration\nDESCRIPTION: HOCON configuration for background cleanup settings including retention duration, quiet period, intervals, and cleanup credits.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_27\n\nLANGUAGE: hocon\nCODE:\n```\ncleanup {\n  enabled = true\n  enabled = ${?CLEANUP_ENABLED}\n\n  history-retention-duration = 3d\n  history-retention-duration = ${?CLEANUP_HISTORY_RETENTION_DURATION}\n\n  quiet-period = 5m\n  quiet-period = ${?CLEANUP_QUIET_PERIOD}\n\n  interval = 3s\n  interval = ${?CLEANUP_INTERVAL}\n\n  timer-threshold = 150ms\n  timer-threshold = ${?CLEANUP_TIMER_THRESHOLD}\n\n  credits-per-batch = 3\n  credits-per-batch = ${?CLEANUP_CREDITS_PER_BATCH}\n\n  reads-per-query = 100\n  reads-per-query = ${?CLEANUP_READS_PER_QUERY}\n\n  writes-per-credit = 100\n  writes-per-credit = ${?CLEANUP_WRITES_PER_CREDIT}\n\n  delete-final-deleted-snapshot = false\n  delete-final-deleted-snapshot = ${?CLEANUP_DELETE_FINAL_DELETED_SNAPSHOT}\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Accelerometer Properties in Eclipse Ditto Thing\nDESCRIPTION: This JSON snippet represents a Thing merged event in Eclipse Ditto. It updates the properties of an accelerometer feature, including x, y, z coordinates and the unit of measurement. The event includes metadata such as the topic, headers, path, revision, and timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergedfeatureproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"value\": {\n    \"x\": 3.141,\n    \"y\": 2.718,\n    \"z\": 1,\n    \"unit\": \"g\"\n  },\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Policy JSON Schema Reference\nDESCRIPTION: References the JSON schema that defines the structure and format of a Policy representation in the Ditto Protocol.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{% include docson.html schema=\"jsonschema/policy.json\" %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Entry Command in Ditto Protocol\nDESCRIPTION: This snippet shows the command structure for retrieving a specific Policy entry. It includes the topic, headers, and path for the request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrievepolicyentry.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrievepolicyentry.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Publishing Telemetry Data via Hono HTTP Adapter\nDESCRIPTION: Commands to publish telemetry data (temperature and humidity) to Hono using the HTTP adapter with basic authentication.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST -i -u demo-device-auth@org.eclipse.ditto:demo-device-password -H 'Content-Type: application/json' -d '{\"temp\": 23.07}' https://hono.eclipseprojects.io:8080/telemetry\n$ curl -X POST -i -u demo-device-auth@org.eclipse.ditto:demo-device-password -H 'Content-Type: application/json' -d '{\"hum\": 45.85}'  https://hono.eclipseprojects.io:8080/telemetry\n```\n\n----------------------------------------\n\nTITLE: Deleting Features with Merge Command in Eclipse Ditto\nDESCRIPTION: This JSON example shows how to delete all features from a thing using the merge command. The request uses 'application/merge-patch+json' content type with a path targeting '/features' and a null value to indicate deletion. The command is addressed to a specific thing ID within the twin persistence.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Structure Example in JSON\nDESCRIPTION: Example JWT structure showing various claims including subject, issuer, expiration, audience, scopes and custom roles in the 'extra' field.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-placeholders.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"u123456789\",\n  \"iss\": \"https://<the-issuer-domain>/\",\n  \"exp\": 1490922820,\n  \"iat\": 1490886820,\n  \"email\": \"john.doe@eclipse.org\",\n  \"aud\": \"client-id-0815\",\n  \"scopes\": \"openid email\",\n  \"extra\": {\n    \"roles\": [\n      \"administrator\",\n      \"super-moderator\",\n      \"moderator\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Creation System Properties Configuration\nDESCRIPTION: Example of configuring entity creation restrictions using system properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n-Dditto.entity-creation.grant.0.auth-subjects.0=pre:admin\n-Dditto.entity-creation.grant.0.auth-subjects.1=integration:some-connection\n```\n\n----------------------------------------\n\nTITLE: Modifying Policy Resource Permissions in Eclipse Ditto\nDESCRIPTION: JSON command structure for modifying resource permissions within a policy entry. The command allows setting grant and revoke permissions for a specific resource path, using the policy's topic channel for modifications.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifyresource.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources/thing:/the_resource_path\",\n  \"value\": {\n    \"grant\": [\n      \"READ\",\n      \"WRITE\"\n    ],\n    \"revoke\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Policy Imports Response Reference\nDESCRIPTION: Jekyll template inclusion for retrieving policy imports response documentation from a generated markdown file.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrieveimports.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/query/retrieveimportsresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: GET Search Count Query\nDESCRIPTION: HTTP GET request for counting things filtered by location\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-search.md#2025-04-17_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET .../search/things/count?filter=eq(attributes/location,\"living-room\")\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Definition Command in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the command structure for deleting a feature definition using the Eclipse Ditto protocol. It includes the topic, headers, and path for the deletion operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletedefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/deletefeaturedefinition.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Delete Single Feature Property Command Path\nDESCRIPTION: Command path format for deleting a specific property of a Feature. Includes namespace, thing name, feature ID, and property path parameters.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-delete.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n/features/<featureId>/properties/<propertyPath>\n```\n\n----------------------------------------\n\nTITLE: Failed Acknowledgement Message in Ditto Protocol\nDESCRIPTION: Example of a failed acknowledgement (NACK) in Eclipse Ditto with status 400. It includes the topic, headers with correlation ID, the resource path, an error message as the value, and a status code indicating an error.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-examples.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/thing_name_3141/things/twin/acks/custom-ack\",\n  \"headers\": {\n    \"correlation-id\": \"a780b7b5-fdd2-4864-91fc-80df6bb0a636\"\n  },\n  \"path\": \"/\",\n  \"value\": \"You better try harder\",\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Device JSON Payload Example\nDESCRIPTION: Example JSON payload structure sent by a device containing temperature, humidity and pressure readings.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"temp\": \"23.42 °C\",\n  \"hum\": 78,\n  \"pres\": {\n    \"value\": 760,\n    \"unit\": \"mmHg\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Merge Attributes Command in Markdown\nDESCRIPTION: This snippet includes the content of a separate Markdown file containing the merge attributes command example.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergeattributes.md %}{% endcapture %} {{ command |\nmarkdownify }}\n```\n\n----------------------------------------\n\nTITLE: Creating Teapot Digital Twin with Ditto API\nDESCRIPTION: This curl command creates a digital twin for a teapot using Ditto's HTTP API. It sets up an empty thing without any features or properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-09-21-selective-push-notifications.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -u 'ditto:ditto' --header 'Content-Type: application/json' -d \\\n    '{}' \\\n    'http://localhost:8080/api/2/things/org.eclipse.ditto%3ATeapot'\n```\n\n----------------------------------------\n\nTITLE: Merging a Feature Property via Ditto Protocol\nDESCRIPTION: A Ditto protocol merge command that updates just a single feature property. The command sets the brewed-coffees property value to 42 in the coffee-brewer feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-02-04-merge-feature.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"com.acme/coffeebrewer/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/coffee-brewer/properties/brewed-coffees\",\n  \"value\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: UpdateTwinWithLiveResponse Mapper Configuration\nDESCRIPTION: Example configuration for UpdateTwinWithLiveResponse mapper showing headers and metadata configuration for merge operations.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dittoHeadersForMerge\": {\n    \"if-match\": \"*\",\n    \"response-required\": false,\n    \"put-metadata\": [\n      {\"key\":\"*/updated-by\",\"value\":\"{%raw%}{{ request:subjectId }}{%endraw%}\"},\n      {\"key\":\"*/updated-via\",\"value\":\"device-live-response\"},\n      {\"key\":\"*/update-hint\",\"value\":\"{%raw%}{{ header:some-custom-hint }}{%endraw%}\"},\n      {\"key\":\"*/updated-at\",\"value\":\"{%raw%}{{ time:now }}{%endraw%}\"}\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RQL Parser Package Path\nDESCRIPTION: File path to the RQL (Resource Query Language) parser AST implementation in the Ditto codebase. This component handles transformation of RQL search queries into Java domain models.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/architecture-services-things-search.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrql/model/src/main/java/org/eclipse/ditto/rql/model/predicates/ast\n```\n\n----------------------------------------\n\nTITLE: Thing Definition Created Event in Eclipse Ditto\nDESCRIPTION: This snippet shows the structure of the event that is emitted when a Thing's definition is created in Eclipse Ditto. It includes the topic, headers, and value of the created definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createthingdefinition.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/thingdefinitioncreated.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Old OpenID Connect Issuer Configuration - Configuration\nDESCRIPTION: This snippet shows the old configuration format for defining OpenID Connect issuers in the Gateway service. It illustrates the previous approach of using a simple key-string pair within the oauth.openid-connect-issuers map.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_200.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\noauth = {\n  openid-connect-issuers = {\n    someissuer = \"https://example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Missing Feature Desired Properties in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON structure represents the error response when desired properties of a Feature are not found in the Eclipse Ditto platform. It includes a 404 status code, error type identifier, detailed message explaining the issue, and a description suggesting how to resolve it.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_desired_properties_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"things:feature.desiredProperties.notfound\",\n    \"message\": \"The desired properties of the Feature with ID 'accelerometer' on the Thing with ID 'org.eclipse.ditto:fancy-thing' do not exist or the requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Thing and the Feature ID was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Health Check Configuration in HOCON\nDESCRIPTION: Example of customizing gateway health check configuration by modifying expected cluster roles.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-extending.md#2025-04-17_snippet_4\n\nLANGUAGE: hocon\nCODE:\n```\nditto.gateway.health-check.cluster-roles = {\n  expected = [\n    \"policies\",\n    \"things\",\n    \"search\",\n    \"gateway\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Single Desired Property Command Path\nDESCRIPTION: Command path format for deleting a specific desired property of a Feature. Uses namespace, thing name, feature ID and desired property path parameters.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-delete.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n/features/<featureId>/desiredProperties/<desiredPropertyPath>\n```\n\n----------------------------------------\n\nTITLE: Thing Merged Event JSON Structure - Attribute Deletion\nDESCRIPTION: Example of a Ditto Thing merged event JSON payload showing the deletion of a location attribute. The null value indicates the attribute is being removed, and the event includes metadata like revision number and timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergeddeleteattribute.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/attributes/location\",\n  \"value\": null,\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect Provider in Ditto\nDESCRIPTION: Configuration snippet for setting up a custom OpenID Connect provider in Ditto's gateway authentication settings.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-01-22-policy-subject-activate-token-integration.md#2025-04-17_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\nditto.gateway.authentication {\n  oauth {\n    openid-connect-issuers = {\n      some-openid-connect-provider = \"https://some-openid-connect-provider.com\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HMAC Algorithms in Ditto Connectivity Configuration\nDESCRIPTION: HOCON configuration for specifying HMAC algorithm implementations in Ditto's connectivity.conf file. This includes pre-defined algorithms and allows for custom implementations.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_1\n\nLANGUAGE: hocon\nCODE:\n```\nditto.connectivity.connection {\n  http-push.hmac-algorithms = {\n\n    aws4-hmac-sha256 =\n      \"org.eclipse.ditto.connectivity.service.messaging.httppush.AwsRequestSigningFactory\"\n\n    az-monitor-2016-04-01 =\n      \"org.eclipse.ditto.connectivity.service.messaging.httppush.AzMonitorRequestSigningFactory\"\n\n    az-sasl =\n      \"org.eclipse.ditto.connectivity.service.messaging.signing.AzSaslSigningFactory\"\n\n    // my-own-request-signing-algorithm =\n    //   \"my.package.MyOwnImplementationOfHttpRequestSigningFactory\"\n  }\n  amqp10.hmac-algorithms = {\n\n    az-sasl =\n      \"org.eclipse.ditto.connectivity.service.messaging.signing.AzSaslSigningFactory\"\n\n    // my-own-connection-signing-algorithm =\n    //   \"my.package.MyOwnImplementationOfAmqpConnectionSigningFactory\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Cleanup Coordinator Configuration\nDESCRIPTION: JSON payload for modifying the configuration of the background cleanup coordinator, including the ability to set the last processed PID.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/user/<SERVICE_NAME>Root/persistenceCleanup\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"common.commands:modifyConfig\",\n    \"config\": {\n      \"quiet-period\": \"240d\",\n      \"last-pid\": \"thing:namespace:PID-lower-bound\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Historical Headers Configuration\nDESCRIPTION: HOCON configuration for specifying which headers should be persisted with historical events.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-history.md#2025-04-17_snippet_10\n\nLANGUAGE: hocon\nCODE:\n```\nevent {\n  # define the DittoHeaders to persist when persisting events to the journal\n  # those can e.g. be retrieved as additional \"audit log\" information when accessing a historical policy revision\n  historical-headers-to-persist = [\n    #\"ditto-originator\"  # who (user-subject/connection-pre-auth-subject) issued the event\n    #\"correlation-id\"\n  ]\n  historical-headers-to-persist = ${?POLICY_EVENT_HISTORICAL_HEADERS_TO_PERSIST}\n}\n```\n\n----------------------------------------\n\nTITLE: RQL Queries for Nested Objects in Tagged Attributes\nDESCRIPTION: RQL query examples showing how to search for values within nested objects contained in the tagged attributes of a Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-search.md#2025-04-17_snippet_3\n\nLANGUAGE: rql\nCODE:\n```\nexists(attributes/tags/room)\n-> match:       array contains one object having a key \"room\"\n\neq(attributes/tags/room,\"kitchen\")\n-> match:       array contains one object with \"room\"=\"kitchen\"\n\nge(attributes/tags/floor,2)\n-> match:       array contains one object where floor is >= 2\n```\n\n----------------------------------------\n\nTITLE: Including Feature Retrieval Response Documentation\nDESCRIPTION: Includes a markdown file containing the response documentation for retrieving features\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrievefeatures.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/query/retrievefeaturesresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Things Service System Properties\nDESCRIPTION: Example of setting Java system properties for the Things service in Ditto\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/ditto/README.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nthings:\n  # ...\n  systemProps:\n    - \"-Dpekko-contrib-mongodb-persistence-things-journal.overrides.journal-collection=another_fancy_name\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Ditto via Port Forwarding (Standard Kubernetes)\nDESCRIPTION: Commands to set up port forwarding and access Ditto's status endpoint using kubectl. Extracts the status password from Kubernetes secrets and uses curl to make the request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/ditto/templates/NOTES.txt#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --namespace {{ .Release.Namespace }} port-forward svc/{{ include \"ditto.fullname\" . }}-nginx 8080:8080\n\nexport STATUS_PWD=$(kubectl --namespace {{ .Release.Namespace }} get secret {{ include \"ditto.fullname\" . }}-gateway-secret -o jsonpath=\"{.data.status-password}\" | base64 --decode)\ncurl -i -X GET \"http://devops:${STATUS_PWD}@localhost:8080/status\"\n```\n\n----------------------------------------\n\nTITLE: Deploying StatefulSet MongoDB with Persistent Volume\nDESCRIPTION: Set of kubectl commands to deploy a stateful MongoDB with persistent storage. Requires the /data/db/ directory to exist before execution. Creates a storage class, persistent volume, and MongoDB statefulset.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deployment/kubernetes/deploymentFiles/mongodb-statefulset/storage-class.yaml\nenvsubst < deployment/kubernetes/deploymentFiles/mongodb-statefulset/persistent-volume.yaml | kubectl apply -f -\nkubectl apply -f deployment/kubernetes/deploymentFiles/mongodb-statefulset/mongodb-statefulset.yaml\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Content for Thing Definition Deleted Event\nDESCRIPTION: This snippet includes a Markdown file containing the event triggered when a Thing definition is deleted in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletethingdefinition.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/thingdefinitiondeleted.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Service Principal for AKS\nDESCRIPTION: Creates a service principal for AKS and extracts the necessary credentials.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/azure/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nservice_principal=`az ad sp create-for-rbac --name http://dittoServicePrincipal --skip-assignment --output tsv`\napp_id_principal=`echo $service_principal|cut -f1 -d ' '`\npassword_principal=`echo $service_principal|cut -f4 -d ' '`\nobject_id_principal=`az ad sp show --id $app_id_principal --query objectId --output tsv`\n```\n\n----------------------------------------\n\nTITLE: Receiving Modified Response for Policy ID Change in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response when the policy ID of a Thing has been successfully modified. It includes the topic, status, and headers of the response.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifypolicyid.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"value\": \"org.eclipse.ditto:new-policy\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Connection via Piggyback Command\nDESCRIPTION: DevOps command for gracefully closing a connection. Triggers a ConnectionClosedAnnouncement when executed.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:closeConnection\",\n    \"connectionId\": \"<connectionID>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including External Markdown Content in Jekyll\nDESCRIPTION: This snippet demonstrates how to include external Markdown content in a Jekyll-based site using Liquid templating. It captures the content of external files and applies Markdown processing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrievedesiredproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrievefeaturedesiredproperties.md %}{% endcapture %}\n{{ command | markdownify }}\n\n{% capture response %}{% include_relative generated/commands/query/retrievefeaturedesiredpropertiesresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Aggregation Metrics in HOCON (Previous Format)\nDESCRIPTION: Example of the previous configuration format for custom aggregation metrics in Eclipse Ditto 3.7.2 and earlier. This format is no longer valid in 3.7.3 and needs to be migrated.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_373.md#2025-04-17_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\ncustom-aggregation-metrics {\n    online_status {\n        namespaces = []\n        filters {\n            online_filter {\n                filter = \"gt(features/ConnectionStatus/properties/status/readyUntil,time:now)\"\n                inline-placeholder-values  {\n                    \"health\" = \"good\"\n                }\n            }\n            offline_filter {\n                filter = \"lt(features/ConnectionStatus/properties/status/readyUntil,time:now)\"\n                inline-placeholder-values = {\n                    \"health\" = \"bad\"\n                }\n            }\n        }\n        group-by {...}\n        tags {\n            \"health\" = \"{{ inline:health }}\"\n        }\n        \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Existing Thing ID in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet represents the error response when attempting to create a Thing with an ID that already exists in Eclipse Ditto. It includes details such as the error code, message, and a suggested resolution.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_thing_conflict.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 409,\n    \"error\": \"things:thing.conflict\",\n    \"message\": \"The Thing with ID 'org.eclipse.ditto:fancy-thing' already exists\",\n    \"description\": \"Choose another Thing ID\"\n  },\n  \"status\": 409\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Creation Response in Eclipse Ditto Policies\nDESCRIPTION: This snippet demonstrates the expected response format after creating a resource in Eclipse Ditto's policy management. It includes the status and potential error information.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-createresource.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyresourceresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Adding Credentials to Nginx Authentication File\nDESCRIPTION: Example format for adding a username and hashed password to the nginx.htpasswd file used for basic authentication to protect the Ditto API endpoints.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/docker/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nditto:A6BgmB8IEtPTs\n```\n\n----------------------------------------\n\nTITLE: Updating High Temperature Sensor Value with Ditto API\nDESCRIPTION: This curl command updates the temperature value for the temperature sensor digital twin to a very high value using Ditto's HTTP API, simulating a fire condition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-09-21-selective-push-notifications.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -u 'ditto:ditto' --header 'Content-Type: application/json' -d \\\n    '120' \\\n    'http://localhost:8080/api/2/things/org.eclipse.ditto%3ATemperatureSensor/features/environmentSensor/properties/temperature'\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Property Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the command structure for modifying a feature property in Eclipse Ditto. It includes the topic, headers, and path for the modification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/commands/modify/modifyfeatureproperty.md %}\n```\n\n----------------------------------------\n\nTITLE: Setting OpenID Connect Configuration via System Properties\nDESCRIPTION: Example of configuring OpenID Connect issuer and auth-subjects using Java system properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n-Dditto.gateway.authentication.oauth.openid-connect-issuers.myprovider.issuer=localhost:9000\n-Dditto.gateway.authentication.oauth.openid-connect-issuers.myprovider.auth-subjects.0='{{ jwt:sub }}/{{ jwt:scp }}'\n```\n\n----------------------------------------\n\nTITLE: Error Response for Missing Features in Eclipse Ditto JSON Format\nDESCRIPTION: Shows the standard error response format when Features are not found on a Thing or when the requester lacks permissions. Includes the error topic, correlation ID, status code 404, and detailed error messages with description for troubleshooting.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_features_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"things:features.notfound\",\n    \"message\": \"The Features on the Thing with ID 'org.eclipse.ditto:fancy-thing' do not exist or the requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Thing was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Direct HTTP Invocation of Eclipse Ditto Cloud Events Endpoint\nDESCRIPTION: An example HTTP POST request to directly access the Cloud Events endpoint in Eclipse Ditto. This request demonstrates the required headers and payload format for sending events to Ditto using the Cloud Events HTTP protocol binding.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-protocol-bindings-cloudevents.md#2025-04-17_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/2/cloudevents HTTP/1.1\nce-specversion: 1.0\nce-type: my.ditto.event\nce-time: 2020-11-24T14:35:00Z\nce-id: f7b197fe-2e59-11eb-a8f4-d45d6455d2cc\nce-source: /my/source\nce-dataschema: ditto:some-schema\nContent-Type: application/json; charset=utf-8\n\n{\n    ... Ditto Protocol JSON ...\n}\n```\n\n----------------------------------------\n\nTITLE: FeaturesModified Event JSON Structure\nDESCRIPTION: JSON structure of the FeaturesModified event in Eclipse Ditto. This event is triggered when the features of a Thing are modified. The example shows a modified accelerometer feature with both properties and desired properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuresmodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"accelerometer\": {\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1,\n        \"unit\": \"g\"\n      },\n      \"desiredProperties\": {\n        \"x\": 4,\n        \"y\": 3,\n        \"z\": 5,\n        \"unit\": \"g\"\n      }\n    }\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Event Stream Demand\nDESCRIPTION: Protocol message for requesting a specific number of events to be streamed, using the subscription ID.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-history.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/thing-2/things/twin/streaming/request\",\n  \"path\": \"/\",\n  \"headers\": {},\n  \"value\": {\n    \"subscriptionId\": \"0\",\n    \"demand\": 25\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint for Switch-On Duration in JSON\nDESCRIPTION: This snippet defines an API endpoint for a 'switch-on-for-duration' action, specifying the HTTP method, content type, and possible responses.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration-example.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"href\": \"/inbox/messages/switch-on-for-duration{?timeout,response-required}\",\n  \"htv:methodName\": \"POST\",\n  \"contentType\": \"application/json\",\n  \"additionalResponses\": [\n    {\n      \"success\": false,\n      \"schema\": \"dittoError\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Include Command Template\nDESCRIPTION: Template code to include generated markdown file containing delete feature property command documentation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deleteproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: jekyll\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/deletefeatureproperty.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Creating AMQP Connection with Payload Mapping in Eclipse Ditto\nDESCRIPTION: A curl command to create an AMQP connection between Eclipse Hono and Ditto, including the JavaScript payload mapping function.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST -i -u devops:devopsPw1! -H 'Content-Type: application/json' -d '{\n    \"targetActorSelection\": \"/system/sharding/connection\",\n    \"headers\": {\n        \"aggregate\": false\n    },\n    \"piggybackCommand\": {\n        \"type\": \"connectivity.commands:createConnection\",\n        \"connection\": {\n            \"id\": \"hono-sandbox-connection-1\",\n            \"connectionType\": \"amqp-10\",\n            \"connectionStatus\": \"open\",\n            \"uri\": \"amqp://consumer%40HONO:verysecret@hono.eclipse.org:15672\",\n            \"failoverEnabled\": true,\n            \"sources\": [{\n                \"addresses\": [\n                    \"telemetry/org.eclipse.ditto\",\n                    \"event/org.eclipse.ditto\"\n                ],\n                \"authorizationContext\": [\"nginx:demo5\"]\n            }],\n            \"mappingContext\": {\n                \"mappingEngine\": \"JavaScript\",\n                \"options\": {\n                    \"incomingScript\": \"function mapToDittoProtocolMsg(\\n    headers,\\n    textPayload,\\n    bytePayload,\\n    contentType\\n) {\\n\\n    if (contentType !== \\\"application/json\\\") {\\n        return null;\\n    }\\n\\n    var jsonData = JSON.parse(textPayload);\\n    var temperature = jsonData.temp;\\n    var humidity = jsonData.hum;\\n    \\n    var path;\\n    var value;\\n    if (temperature != null && humidity != null) {\\n        path = \\\"/features\\\";\\n        value = {\\n                temperature: {\\n                    properties: {\\n                        value: temperature\\n                    }\\n                },\\n                humidity: {\\n                    properties: {\\n                        value: humidity\\n                    }\\n                }\\n            };\\n    } else if (temperature != null) {\\n        path = \\\"/features/temperature/properties/value\\\";\\n        value = temperature;\\n    } else if (humidity != null) {\\n        path = \\\"/features/humidity/properties/value\\\";\\n        value = humidity;\\n    }\\n    \\n    if (!path || !value) {\\n        return null;\\n    }\\n\\n    return Ditto.buildDittoProtocolMsg(\\n        \\\"org.eclipse.ditto\\\",\\n        headers[\\\"device_id\\\"],\\n        \\\"things\\\",\\n        \\\"twin\\\",\\n        \\\"commands\\\",\\n        \\\"modify\\\",\\n        path,\\n        headers,\\n        value\\n    );\\n}\"\n                }\n            }\n        }\n    }\n}' https://ditto.eclipseprojects.io/devops/piggyback/connectivity?timeout=8s\n```\n\n----------------------------------------\n\nTITLE: Stream Next Event Message\nDESCRIPTION: Protocol message format for receiving the next event in the stream.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-history.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/thing-2/things/twin/streaming/next\",\n  \"path\": \"/\",\n  \"headers\": {},\n  \"value\": {\n    \"subscriptionId\": \"0\",\n    \"item\": {\n      \n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Creation Response\nDESCRIPTION: Response message confirming the creation of a streaming subscription with a subscription ID.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-history.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/thing-2/things/twin/streaming/created\",\n  \"path\": \"/\",\n  \"headers\": {},\n  \"value\": {\n    \"subscriptionId\": \"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Delete Attributes Command Markdown in Jekyll\nDESCRIPTION: This snippet includes a markdown file containing the delete attributes command example for the Eclipse Ditto protocol. It uses Jekyll's include_relative directive to insert the content.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deleteattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/deleteattributes.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Thing Merged Event for Removing Feature Property in Eclipse Ditto\nDESCRIPTION: JSON payload example that demonstrates a Thing merged event which sets the 'x' property to null, effectively removing it from the 'accelerometer' feature. The event uses the 'application/merge-patch+json' content type and includes revision and timestamp information.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergeddeletefeatureproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": null,\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Definition using JSON in Eclipse Ditto\nDESCRIPTION: This JSON snippet demonstrates the structure of a ModifyFeatureDefinition command in Eclipse Ditto. It specifies the topic, headers, path, and value for updating the definition of an 'accelerometer' feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturedefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"value\": [\n    \"org.eclipse.ditto:accelerometer:1.0.0\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Connection IDs via Piggyback Command\nDESCRIPTION: DevOps command for retrieving the IDs of all existing connections.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/user/connectivityRoot/connectionIdsRetrieval\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:retrieveAllConnectionIds\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Cloud Events Endpoint in Eclipse Ditto\nDESCRIPTION: The URL for accessing the Cloud Events endpoint in Eclipse Ditto. This endpoint allows streaming data into your Ditto instance using the Cloud Events specification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-protocol-bindings-cloudevents.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/cloudevents\n```\n\n----------------------------------------\n\nTITLE: Jekyll Template Include Responses\nDESCRIPTION: Template code that includes and renders markdown content for thing definition retrieval responses\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrievethingdefinition.md#2025-04-17_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/query/retrievethingdefinitionresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Searching Things within Specific Namespaces with HTTP API\nDESCRIPTION: Example of using the namespaces query parameter in the HTTP search API to restrict search results to Things within specific namespaces (john and mark in this case). Namespace restriction improves search query performance.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_020M1.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\n/search/things?namespaces=john,mark\n```\n\n----------------------------------------\n\nTITLE: Policy Subjects Not Modifiable Error Response in JSON\nDESCRIPTION: Example error response when a user attempts to modify policy subjects without having sufficient permissions. The response includes the error code, status code 403 (Forbidden), a descriptive message, and a suggestion for resolving the issue.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_subjects_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"policies:subjects.notmodifiable\",\n    \"message\": \"The Subjects of the PolicyEntry with Label 'the_label' on the Policy with ID 'org.eclipse.ditto:the_policy_id' could not be modified as the requester had insufficient permissions.\",\n    \"description\": \"Check if the ID of the Policy and the PolicyEntry's Label of your requested Subjects was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Including Modify Policy Response Documentation in Markdown\nDESCRIPTION: This snippet includes the content of a Markdown file containing the documentation for the modify policy response in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-modifypolicy.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifypolicyresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Configuring japicmp-maven-plugin for Binary Compatibility Check in XML\nDESCRIPTION: Shows the Maven configuration for the japicmp-maven-plugin, which is used to enforce semantic versioning through binary compatibility checks in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0005-semantic-versioning.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<plugin>\n  <groupId>com.github.siom79.japicmp</groupId>\n  <artifactId>japicmp-maven-plugin</artifactId>\n</plugin>\n```\n\n----------------------------------------\n\nTITLE: SubscriptionCreated Event Structure in JSON for Eclipse Ditto\nDESCRIPTION: This JSON represents the structure of a SubscriptionCreated event in Eclipse Ditto. The event is sent when a new subscription is created in the things/twin/search system, containing a unique subscriptionId.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/generated/events/subscription-created-event.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"_/_/things/twin/search/created\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"correlation-id\": \"444dae7e-bacf-312b-bc97-8f393dadf1bd\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"subscriptionId\": \"24601\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Policies Not Found Error Response in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON structure represents the error response when a policy with a specific ID cannot be found or the requester has insufficient permissions to access it. The response includes a 404 status code, an error identifier, descriptive message, and suggested resolution.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_policy_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"policies:policy.notfound\",\n    \"message\": \"The Policy with ID 'org.eclipse.ditto:the_policy_id' could not be found or requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of your requested Policy was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Policy Entry Command\nDESCRIPTION: Protocol command for removing a specific policy entry from a policy in Eclipse Ditto\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-deletepolicyentry.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/deletepolicyentry.md %}{% endcapture %}{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Policy Model Links in Java\nDESCRIPTION: Core file paths for the Policy model implementation in Eclipse Ditto's codebase. Includes paths to the base policy model classes.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/architecture-services-policies.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npolicies/model/src/main/java/org/eclipse/ditto/policies/model\n```\n\n----------------------------------------\n\nTITLE: Including Modify Policy Command Documentation in Markdown\nDESCRIPTION: This snippet includes the content of a Markdown file containing the documentation for the modify policy command in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-modifypolicy.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifypolicy.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Payload Mapping for AWS S3 in Eclipse Ditto\nDESCRIPTION: JavaScript function for outgoing payload mapping in the AWS S3 connection. It computes the path string and sets it via the special header 'http.path' to create distinct objects for each event in the S3 bucket.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapFromDittoProtocolMsgWrapper(msg) {\n  let topic = msg['topic'].split('/').join(':');\n  let headers = {\n      'http.path': topic + ':' + msg['revision']\n  };\n  let textPayload = JSON.stringify(msg);\n  let bytePayload = null;\n  let contentType = 'application/json';\n\n  return Ditto.buildExternalMsg(\n    headers,\n    textPayload,\n    bytePayload,\n    contentType\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronous Client Creation (Pre-1.3.0)\nDESCRIPTION: Shows the old blocking approach to create a Ditto client that connects immediately to the backend during initialization.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-10-08-asynchronous-client-creation.md#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// create a client object and block until it connects to the Ditto back-end.\nfinal DittoClient client = DittoClients.newInstance(messagingProvider);\n```\n\n----------------------------------------\n\nTITLE: Conditional Request via Ditto Protocol\nDESCRIPTION: This JSON snippet demonstrates how to send a conditional request using the Ditto protocol, specifying the condition in the headers.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-11-04-live-message-conditions.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/carbon-monoxide-alarm/things/live/messages/co-alarm\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"condition\": \"eq(features/alarm/properties/confirmed,false)\"\n  },\n  \"path\": \"/outbox/messages/co-alarm\",\n  \"value\": \"CO Level to high! Open your windows!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Desired Properties with Eclipse Ditto Command\nDESCRIPTION: This JSON snippet defines a command to delete the desired properties of the 'accelerometer' feature in the 'fancy-thing' digital twin. The 'path' specifies the location of the desired properties to be deleted.  The 'topic' indicates the Ditto topic to which the command should be sent, and the 'correlation-id' in the 'headers' is used to track the command's execution.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeaturedesiredproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\"\n}\n```\n\n----------------------------------------\n\nTITLE: FindBugs JSR-305 Implementation Dependency\nDESCRIPTION: Maven dependency configuration for including the FindBugs implementation of JSR-305 annotations with a minimum version of 3.0.1\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/utils/jsr305/README.md#2025-04-17_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.google.code.findbugs</groupId>\n    <artifactId>jsr305</artifactId>\n    <version>3.0.1</version>\n    <scope>provided</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Modifying Policy ID in Eclipse Ditto - JSON Command\nDESCRIPTION: JSON command structure for modifying a thing's policy ID in Eclipse Ditto. The command uses the things/twin/commands/modify endpoint and requires a correlation ID in the headers. The new policy ID is specified in the value field.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifypolicyid.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"value\": \"org.eclipse.ditto:the_policy_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection IDs by Tag via Piggyback Command\nDESCRIPTION: DevOps command for retrieving connection IDs filtered by a specific tag value.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/user/connectivityRoot/connectionIdsRetrieval\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.sudo.commands:sudoRetrieveConnectionIdsByTag\",\n    \"tag\": \"someTagValue\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update a Thing property using cURL\nDESCRIPTION: This snippet demonstrates how to update a property of a Thing in Eclipse Ditto using a cURL command. It sends a PUT request with the new value (46) to the Ditto API endpoint for the specific feature and property. Authentication credentials and content type are specified.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -X PUT -u ditto:ditto -H \"content-type: application/json\" --data-binary '46' <ditto-instance-url>/api/2/things/$DEVICE_ID/features/$FEATURE_ID/properties/value\n```\n\n----------------------------------------\n\nTITLE: Filtering Change Notifications for Thing Creation and Deletion in Eclipse Ditto\nDESCRIPTION: RQL expression to filter change notifications specifically for Thing creation and deletion events. This example uses topic and resource path placeholders to identify these specific events.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-changenotifications.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nfilter=and(in(topic:action,'created','deleted'),eq(resource:path,'/'))\n```\n\n----------------------------------------\n\nTITLE: Example: Subscribing to Feature Ping Messages\nDESCRIPTION: Example endpoint showing how to subscribe to 'ping' messages from a specific Feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/things/org.eclipse.ditto:thing-1/features/Pinger/outbox/messages/ping\n```\n\n----------------------------------------\n\nTITLE: Including Markdown File for Feature Desired Property Deleted Event\nDESCRIPTION: This snippet includes a markdown file containing the event for when a feature's desired property is deleted.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletedesiredproperty.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/featuredesiredpropertydeleted.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Desired Properties in Eclipse Ditto using JSON\nDESCRIPTION: This JSON snippet represents a ModifyFeatureDesiredProperties command in Eclipse Ditto. It is used to update the desired properties of a specific feature ('accelerometer') for a thing ('fancy-thing'). The command includes a topic, headers with a correlation ID, the path to the feature's desired properties, and the new values to be set.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturedesiredproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"value\": {\n    \"x\": 4,\n    \"y\": 3,\n    \"z\": 5,\n    \"unit\": \"g\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Desired Property Response in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response structure when modifying a feature's desired property in Eclipse Ditto. It includes the topic, headers, and status of the modification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createdesiredproperty.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyfeaturedesiredpropertyresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Merged Policy ID Event in Eclipse Ditto\nDESCRIPTION: This snippet shows the event structure generated when a policy ID is successfully merged in Eclipse Ditto. It includes the topic and the details of the merged policy ID.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergepolicyid.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/mergedpolicyid.md %}{% endcapture %} {{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Responding with Feature Definition Not Found Error in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet demonstrates the structure of an error response when a feature definition is not found or cannot be accessed in Eclipse Ditto. It includes the topic, headers, path, error details, and HTTP status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_definition_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"things:feature.definition.notfound\",\n    \"message\": \"The Definition of the Feature with ID 'accelerometer' on the Thing with ID 'org.eclipse.ditto:fancy-thing' does not exist or the requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Thing and the Feature ID was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Example Direct Method Payload\nDESCRIPTION: Sample JSON payload for an Azure IoT Hub direct method call with input parameters.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"input1\": \"someInput\",\n    \"input2\": \"anotherInput\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Specific Metadata Using Headers in Eclipse Ditto (JSON)\nDESCRIPTION: Example JSON response from the 'ditto-metadata' header when retrieving specific metadata using the 'get-metadata' header with a targeted path. This shows how to access metadata for a specific feature property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-metadata.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"features\": {\n    \"lamp\": {\n      \"properties\": {\n        \"color\": {\n          \"r\": {\n            \"changeLog\": {\n              \"changedAt\": \"2022-08-02T04:30:07\",\n              \"changedBy\": {\n                \"name\": \"ditto\",\n                \"mail\": \"ditto@mail.com\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregated Acknowledgements Topic Format\nDESCRIPTION: Topic format for aggregated acknowledgements containing multiple single acknowledgements in their payload.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-acks.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n<namespace>/<thingName>/things/<channel>/acks\n```\n\n----------------------------------------\n\nTITLE: Example JWT Claims\nDESCRIPTION: Sample JWT claims structure showing required fields for token-based subject activation including issuer, subject, expiration and audience.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-01-22-policy-subject-activate-token-integration.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iss\": \"https://some-openid-connect-provider.com\",\n  \"sub\": \"some-user-id\",\n  \"exp\": 1622802633,\n  \"aud\": \"some-specific-audience-0815\"\n}\n```\n\n----------------------------------------\n\nTITLE: Liquid Template Usage in Jekyll for Connection Documentation\nDESCRIPTION: Jekyll/Liquid template code that includes and processes connection opened announcement documentation from a generated markdown file.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/connections/protocol-examples-connections-announcement-opened.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/announcements/openedConnection.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Ditto Service in Minikube\nDESCRIPTION: Command to access the deployed Ditto service in Minikube. This opens the Ditto service in the default browser.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/minikube/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nminikube service ditto\n```\n\n----------------------------------------\n\nTITLE: Monitoring Docker Resource Consumption\nDESCRIPTION: Command to check the resource usage of Docker containers, helpful for determining if more memory or CPU resources are needed.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/docker/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker stats\n```\n\n----------------------------------------\n\nTITLE: Configuring IFTTT Webhook JSON Payload in Eclipse Ditto\nDESCRIPTION: This JSON snippet shows the expected payload structure for an IFTTT webhook. It includes three customizable value fields that can be mapped from Ditto Protocol data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2019-10-17-http-connectivity.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value1\": \"...\",\n  \"value2\": \"...\",\n  \"value3\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: FeaturePropertyCreated Event JSON Structure\nDESCRIPTION: Example JSON payload for a FeaturePropertyCreated event in Eclipse Ditto. Shows the event structure when a new property 'x' is created for the 'accelerometer' feature with a value of 42. Includes topic, headers with correlation ID, path to the created property, the property value, and revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featurepropertycreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/created\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": 42,\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Feature Definition Response in JSON\nDESCRIPTION: This JSON snippet illustrates a successful response from Eclipse Ditto after a feature definition has been modified.  The `status` code 204 indicates success, and the `path` specifies the location of the modified feature definition. The `correlation-id` links this response to the original command.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturedefinitionresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection Status via Piggyback Command\nDESCRIPTION: DevOps command for retrieving the current status of a connection, showing if it's enabled/disabled and successfully established.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:retrieveConnectionStatus\",\n    \"connectionId\": \"<connectionID>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Blog Post Header\nDESCRIPTION: YAML front matter configuration for the blog post defining metadata like title, author, and layout settings.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-09-28-release-announcement-300.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Announcing Eclipse Ditto Release 3.0.0\"\npublished: true\npermalink: 2022-09-28-release-announcement-300.html\nlayout: post\nauthor: thomas_jaeckle\ntags: [blog]\nhide_sidebar: true\nsidebar: false\ntoc: false\n---\n```\n\n----------------------------------------\n\nTITLE: Resulting Thing after HTTP PATCH merge\nDESCRIPTION: The JSON representation of the thing after the merge operation has been performed. The manufacturingYear attribute has been added, tempToHold was updated to 50, and smartMode was removed from the water-tank configuration.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-02-04-merge-feature.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"com.acme:coffeebrewer\",\n  \"policyId\": \"com.acme:coffeebrewer-policy\",\n  \"definition\": \"com.acme:coffeebrewer:0.1.0\",\n  \"attributes\": {\n    \"manufacturer\": \"ACME demo corp.\",\n    \"manufacturingYear\": \"2020\",\n    \"location\": \"Berlin, main floor\",\n    \"serialno\": \"42\",\n    \"model\": \"Speaking coffee machine\"\n  },\n  \"features\": {\n    \"coffee-brewer\": {\n      \"definition\": [\"com.acme:coffeebrewer:0.1.0\"],\n      \"properties\": {\n        \"brewed-coffees\": 0\n      }\n    },\n    \"water-tank\": {\n      \"properties\": {\n        \"configuration\": {\n          \"brewingTemp\": 87,\n          \"tempToHold\": 50,\n          \"timeoutSeconds\": 6000\n        },\n        \"status\": {\n          \"waterAmount\": 731,\n          \"temperature\": 44\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Complete Event\nDESCRIPTION: Event signaling the completion of a search subscription\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/protocol-examples-search.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/subscription-complete-event.md %}{% endcapture %}\n```\n\n----------------------------------------\n\nTITLE: Creating Combined Temperature and Humidity Sensor Digital Twin with Ditto API\nDESCRIPTION: This curl command creates a digital twin for a combined temperature and humidity sensor using Ditto's HTTP API. It sets up a thing with an environmentSensor feature containing both temperature and humidity properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-09-21-selective-push-notifications.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT -u 'ditto:ditto' --header 'Content-Type: application/json' -d \\\n    '{\n       \"features\": {\n         \"environmentSensor\": {\n           \"properties\": {\n             \"temperature\": 0.0,\n             \"humidity\": 0\n           }\n         }\n       }\n     }' \\\n    'http://localhost:8080/api/2/things/org.eclipse.ditto%3ATemperatureAndHumiditySensor'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Feature Property Using Merge Command in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates how to use a merge command to delete a feature property. It includes the necessary command structure for property deletion.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeproperty.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergedeletefeatureproperty.md %}{% endcapture %} {{\ncommand | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Desired Property Response in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents the response to a command that modifies a desired property of a feature in Eclipse Ditto. It includes the topic, headers with correlation ID, the path to the modified property, the new value, and the status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturedesiredpropertyresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"value\": 42,\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ditto with Azure Cosmos DB\nDESCRIPTION: Deploys Ditto using Helm with Azure Cosmos DB as the persistence layer and disables the search feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/azure/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade ditto ../helm/eclipse-ditto/ --namespace $k8s_namespace --set search.enabled=false,mongodb.embedded.enabled=false,mongodb.apps.connectivity.uri=mongodb://$cosmos_account_name:$cosmos_mongodb_primary_master_key@$cosmos_account_name.documents.azure.com:10255/connectivity\\?ssl=true\\&replicaSet=globaldb\\&maxIdleTimeMS=120000,mongodb.apps.connectivity.ssl=true,mongodb.apps.things.uri=mongodb://$cosmos_account_name:$cosmos_mongodb_primary_master_key@$cosmos_account_name.documents.azure.com:10255/things\\?ssl=true\\&replicaSet=globaldb\\&maxIdleTimeMS=120000,mongodb.apps.things.ssl=true,mongodb.apps.policies.uri=mongodb://$cosmos_account_name:$cosmos_mongodb_primary_master_key@$cosmos_account_name.documents.azure.com:10255/policies\\?ssl=true\\&replicaSet=globaldb\\&maxIdleTimeMS=120000,mongodb.apps.policies.ssl=true,service.type=LoadBalancer,service.loadBalancerIP.enabled=true,service.loadBalancerIP.address=$ip_address,service.annotations.\"service\\.beta\\.kubernetes\\.io/azure-load-balancer-resource-group\"=$resourcegroup_name --wait --install --timeout 600\n```\n\n----------------------------------------\n\nTITLE: Timeout Acknowledgement Message in Ditto Protocol\nDESCRIPTION: Example of a timeout acknowledgement in Eclipse Ditto with status 408. It includes the topic, headers with correlation ID, the resource path, a detailed error value containing status, error code, message, and description, and a status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-examples.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/thing_name_3141/things/twin/acks/custom-ack\",\n  \"headers\": {\n    \"correlation-id\": \"a780b7b5-fdd2-4864-91fc-80df6bb0a636\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 408,\n    \"error\": \"acknowledgement:request.timeout\",\n    \"message\": \"The acknowledgement request reached the specified timeout of 1,337ms.\",\n    \"description\": \"Try increasing the timeout and make sure that the requested acknowledgement is sent back in time.\"\n  },\n  \"status\": 408\n}\n```\n\n----------------------------------------\n\nTITLE: Search Count Endpoint\nDESCRIPTION: Base URL endpoint for counting search results\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-search.md#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/search/things/count\n```\n\n----------------------------------------\n\nTITLE: Event Publishing HTTP Request\nDESCRIPTION: HTTP request made by the connection to publish a thing-created event, using the obtained OAuth2 access token for authentication.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-11-03-oauth2.md#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /6148b899-736f-47e6-9382-90b1d721630e HTTP/1.1\nHost: webhook.site\nContent-Type: application/vnd.eclipse.ditto+json\nAuthorization: Bearer ewogICJhbGciOiAiUlMyNTYiLAogICJ0eXAiOiAiSldUIgp9.ewogICJhdWQiOiBbXSwKICAiY2xpZW50X2lkIjogIm15LWNsaWVudC1pZCIsCiAgImV4cCI6IDMyNTAzNjgwMDAwLAogICJleHQiOiB7fSwKICAiaWF0IjogMCwKICAiaXNzIjogImh0dHBzOi8vbG9jYWxob3N0LyIsCiAgImp0aSI6ICI3ODVlODBjZC1lNmU2LTQ1MmEtYmU5Ny1hNTljNTNlZGI0ZDkiLAogICJuYmYiOiAwLAogICJzY3AiOiBbCiAgICAibXktc2NvcGUiCiAgXSwKICAic3ViIjogIm15LXN1YmplY3QiCn0.QUJD\n\n{\n  \"topic\": \"<namespace>/<name>/things/twin/events/created\",\n  \"headers\": {},\n  \"path\": \"/\",\n  \"value\": {\n    \"policyId\": \"<policy-id>\"\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Device Credentials in Hono\nDESCRIPTION: Command to add hashed-password credentials for the device in Hono, allowing it to authenticate when sending telemetry data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ PWD_HASH=$(echo -n 'demo-device-password' | openssl dgst -binary -sha512 | base64 -w 0)\n$ curl -X POST -i -H 'Content-Type: application/json' -d '{\n  \"device-id\": \"demo-device\",\n  \"type\": \"hashed-password\",\n  \"auth-id\": \"demo-device-auth\",\n  \"secrets\": [{\n      \"hash-function\" : \"sha-512\",\n      \"pwd-hash\": \"'$PWD_HASH'\"\n  }]\n}' https://hono.eclipseprojects.io:28080/credentials/org.eclipse.ditto\n```\n\n----------------------------------------\n\nTITLE: Policy Resources Not Modifiable Error Response in JSON\nDESCRIPTION: This JSON represents an error response when a user attempts to modify policy resources without sufficient permissions. The response includes the error code, message details, and a suggestion to check both the policy ID and entry label correctness, as well as user permissions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_resources_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"policies:resources.notmodifiable\",\n    \"message\": \"The Resources of the PolicyEntry with Label 'the_label' on the Policy with ID 'org.eclipse.ditto:the_policy_id' could not be modified as the requester had insufficient permissions.\",\n    \"description\": \"Check if the ID of the Policy and the PolicyEntry's Label of your requested Resources was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Entries using Markdown\nDESCRIPTION: This snippet includes a command that retrieves policy entries in Eclipse Ditto using a relative markdown file. It utilizes the Liquid templating features to capture and render commands that are dynamically included.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrievepolicyentries.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrievepolicyentries.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Signaling Device Availability in Bash\nDESCRIPTION: This snippet demonstrates how to signal the availability of a device to receive commands using the Hono HTTP Adapter.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-12-05-example-command-and-control.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -i -u teapot@org.eclipse.ditto:teapot -H 'hono-ttd: 60' -H 'Content-Type: application/json' \\\n     -d '{\n           \"topic\": \"org.eclipse.ditto/teapot/things/twin/commands/modify\",\n           \"path\": \"/features/water/properties/temperature\",\n           \"value\": 23\n         }' \\\n     https://hono.eclipseprojects.io:8080/telemetry\n```\n\n----------------------------------------\n\nTITLE: Configuring Ditto Services via ConfigMap in Helm Chart\nDESCRIPTION: Enhancement to the Ditto Helm Chart allowing configuration of Ditto services through a ConfigMap instead of system properties. This addresses potential issues with command line argument length limitations when many options are configured.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_362.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nPR #2051 introduces that Ditto services are configured not via\n\"System properties\", but with a config file, mounted from a k8s `ConfigMap`.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Thing Merged Event for Accelerometer Feature in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of a Thing merged event for the accelerometer feature in Eclipse Ditto. It includes the event topic, headers, path, merged value, revision, and timestamp. The merged value contains the feature's definition and properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergedfeature.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"value\": {\n    \"definition\": [\n      \"org.eclipse.ditto:accelerometer:1.0.0\"\n    ],\n    \"properties\": {\n      \"x\": 3.141,\n      \"y\": 2.718,\n      \"z\": 1,\n      \"unit\": \"g\"\n    }\n  },\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration Mappings in OpenShift\nDESCRIPTION: Creates ConfigMaps for nginx configuration files using the 'oc create configmap' command. These configurations are used to set up the nginx reverse proxy.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/openshift/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\noc create configmap nginx-conf --from-file=nginx/nginx.conf &&\noc create configmap nginx-cors --from-file=nginx/nginx-cors.conf &&\noc create configmap nginx-htpasswd --from-file=nginx/nginx.htpasswd &&\noc create configmap nginx-index --from-file=nginx/index.html\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Property Response Structure in Eclipse Ditto\nDESCRIPTION: Represents the response structure when modifying a feature property in Eclipse Ditto. Contains the topic path identifying the thing, correlation headers for request tracking, the specific feature property path being modified, the new value, and a status code indicating successful creation (201).\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturepropertyresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": 42,\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing search index update for all things in Ditto\nDESCRIPTION: Command to trigger a search index update for all things by sending a shutdown command with force-update header. The next background sync iteration will update the search index for all things.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/user/thingsWildcardSearchRoot/searchUpdaterRoot/backgroundSyncProxy\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"force-update\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"common.commands:shutdown\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting OpenSSL Key from PKCS1 to PKCS8 Format\nDESCRIPTION: Bash command to convert a standard OpenSSL key in PKCS1 format to the PKCS8 format accepted by Eclipse Ditto for SSH tunneling configuration.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-03-31-ssh-tunneling-for-managed-connections.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopenssl pkcs8 -topk8 -nocrypt -in client-private.pem.key -out client-private.pem.pk8\n```\n\n----------------------------------------\n\nTITLE: Target Header Mapping for AMQP Message Annotation\nDESCRIPTION: Configuration for mapping Ditto protocol header 'reply-to' to an AMQP message annotation 'to'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-amqp10.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headerMapping\": {\n    \"amqp.message.annotation:to\": \"{{ header:reply-to }}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing SAREF Ontology in JSON-LD Context\nDESCRIPTION: This snippet shows how to reference the SAREF ontology in a JSON-LD context to describe 'assets' in the context of Web of Things.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": [\n    \"https://www.w3.org/2022/wot/td/v1.1\",\n    {\n      \"saref\": \"https://w3id.org/saref#\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Including Modify Thing Definition Command in Markdown\nDESCRIPTION: This snippet includes the content of a Markdown file containing the command to modify a Thing's definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifythingdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifythingdefinition.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Release Announcement Header in Markdown\nDESCRIPTION: Jekyll blog post front matter containing metadata about the release announcement post, including title, publication status, layout and author information.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2019-12-12-release-announcement-100.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Announcing Eclipse Ditto Release 1.0.0\"\npublished: true\npermalink: 2019-12-12-release-announcement-100.html\nlayout: post\nauthor: thomas_jaeckle\ntags: [blog]\nhide_sidebar: true\nsidebar: false\ntoc: false\n---\n```\n\n----------------------------------------\n\nTITLE: Response to Merging a Single Desired Property of a Feature in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response to a successful merge operation of a desired property. It includes the thing ID and indicates the successful status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergedesiredproperty.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties/x\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: SSE Search API Endpoint\nDESCRIPTION: Base endpoint for streaming search results using SSE.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/search/things\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Policy Import with Eclipse Ditto Protocol\nDESCRIPTION: Command message structure to retrieve a specific policy import. The command includes the policy ID and import name that identifies which import to retrieve from the policy management system.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrieveimport.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/imports/my_imported_policy_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Endpoint URL\nDESCRIPTION: The base WebSocket endpoint URL for connecting to Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-protocol-bindings-websocket.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nws://localhost:8080/ws/2\n```\n\n----------------------------------------\n\nTITLE: FeaturePropertyDeleted Event JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON example illustrates the structure of a FeaturePropertyDeleted event in Eclipse Ditto. The event represents the deletion of a property 'x' from the 'accelerometer' feature of a thing. It includes the topic path, correlation ID in headers, the specific path to the deleted property, and the revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featurepropertydeleted.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Subject-Issuer Prefixing\nDESCRIPTION: This JSON snippet demonstrates how the configured subject-issuer is used to prefix the value of the \"sub\" claim in the authentication process.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2019-08-28-openid-connect.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subjects\": {\n    \"ory:foo@bar.com\": {\n    \"type\": \"generated\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fix wrong config path for pulling devops and status password\nDESCRIPTION: This bugfix corrects the configuration paths for 'devopsPassword' and 'statusPassword' in the 'values.yaml'. Previously located at incorrect levels, this change ensures that passed passwords are used correctly instead of being regenerated.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_332.md#2025-04-17_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Displaying Ditto Error Response for Insufficient Permissions on Feature Desired Properties in JSON\nDESCRIPTION: This JSON snippet shows the structure of an error response from Eclipse Ditto when a user attempts to modify the desired properties of a feature without the required WRITE permission. It includes details such as the error code, message, and description for troubleshooting.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_desired_properties_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"things:feature.desiredProperties.notmodifiable\",\n    \"message\": \"The desired properties of the Feature with ID 'accelerometer' on the Thing with ID 'org.eclipse.ditto:fancy-thing' cannot be modified as the requester had insufficient permissions to modify it (WRITE is required).\",\n    \"description\": \"Check if the ID of the Thing and the Feature ID was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown File for Delete Feature Desired Property Command\nDESCRIPTION: This snippet includes a markdown file containing the command for deleting a feature's desired property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletedesiredproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/deletefeaturedesiredproperty.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Release Details in Markdown Format\nDESCRIPTION: Blog post content detailing the release announcement of Eclipse Ditto 3.4.0, including changelog, improvements, and artifact locations\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2023-10-17-release-announcement-340.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Announcing Eclipse Ditto Release 3.4.0\"\npublished: true\npermalink: 2023-10-17-release-announcement-340.html\nlayout: post\nauthor: thomas_jaeckle\ntags: [blog]\nhide_sidebar: true\nsidebar: false\ntoc: false\n---\n```\n\n----------------------------------------\n\nTITLE: Deploying Simple MongoDB Container without Persistence\nDESCRIPTION: kubectl command to deploy a basic MongoDB instance without persistence using a pre-defined YAML configuration file.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deployment/kubernetes/deploymentFiles/mongodb/mongodb.yaml\n```\n\n----------------------------------------\n\nTITLE: Merging Configurations - JSON\nDESCRIPTION: This JSON snippet defines the structure for a merge command regarding the accelerometer's configuration in Eclipse Ditto. It includes metadata such as the topic and headers needed for the command, particularly focusing on the content type and correlation ID, along with the path and the value array representing the accelerometer dependency.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeaturedefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"value\": [\n    \"org.eclipse.ditto:accelerometer:1.0.0\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Definition JSON Response in Eclipse Ditto\nDESCRIPTION: This JSON snippet represents the response to a ModifyFeatureDefinition command in Eclipse Ditto. It includes the topic, headers with correlation ID, path to the modified feature, the new definition value, and the response status.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturedefinitionresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"value\": [\n    \"org.eclipse.ditto:accelerometer:1.0.0\"\n  ],\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Desired Properties Response in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents a response to a command that modifies the desired properties of a feature in Eclipse Ditto. It includes the topic, headers, path, modified value, and status code of the operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyfeaturedesiredpropertiesresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"value\": {\n    \"x\": 4,\n    \"y\": 5,\n    \"z\": 5,\n    \"unit\": \"g\"\n  },\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Aggregation-Based Metrics in Ditto\nDESCRIPTION: Configuration for custom aggregation metrics that support grouping by thing properties. This example creates metrics for online things, grouping by location and gateway status, with both hardcoded and dynamic tag values.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_16\n\nLANGUAGE: hocon\nCODE:\n```\nditto {\n  search {\n    operator-metrics {\n      enabled = true\n      scrape-interval = 30m\n      custom-metrics {\n        ...\n      }\n      custom-aggregation-metrics {\n        online_things {\n          enabled = true\n          scrape-interval = 20m # override scrape interval, run every 20 minutes\n          namespaces = [\n            \"org.eclipse.ditto\"\n          ]\n          group-by {\n            \"location\" = \"attributes/Info/location\"\n            \"isGateway\" = \"attributes/Info/gateway\"\n          }\n          tags {\n            \"hardcoded-tag\" = \"hardcoded_value\"\n            \"location\" = \"{{ group-by:location | fn:default('missing location') }}\"\n            \"isGateway\" = \"{{ group-by:isGateway }}\"\n          }\n          filter = \"gt(features/ConnectionStatus/properties/status/readyUntil,time:now)\"\n        }\n        offline_things {\n         ...\n            filter = \"lt(features/ConnectionStatus/properties/status/readyUntil,time:now)\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Ditto Documentation with Maven\nDESCRIPTION: Command to build the Eclipse Ditto documentation site using Maven with a specific profile.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -Pbuild-documentation\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyResourcesResponse JSON Structure for Eclipse Ditto\nDESCRIPTION: This JSON structure represents a ModifyResourcesResponse in Eclipse Ditto. It includes the topic, headers with a correlation ID, the path to the modified resources, and a status code indicating success (204).\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifyresourcesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Response example for blocking a namespace in Ditto\nDESCRIPTION: Example response when a namespace is successfully blocked across all members of the Ditto cluster.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"namespaces.responses:blockNamespace\",\n  \"status\": 200,\n  \"namespace\": \"namespaceToBlock\",\n  \"resourceType\": \"namespaces\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Desired Properties Response in Eclipse Ditto\nDESCRIPTION: This JSON snippet shows the response to a successful deletion of desired properties for a feature. It includes the status code, the affected path, and relevant headers such as correlation ID and response required flag.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletedesiredproperties.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-lamp/things/live/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/lamp/desiredProperties\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency for Ditto WoT Model\nDESCRIPTION: Maven dependency configuration for including the Ditto WoT model Java module in external projects.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-03-03-wot-integration.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.eclipse.ditto</groupId>\n    <artifactId>ditto-wot-model</artifactId>\n    <version>${ditto.version}</version> <!-- the ditto-wot-model is available since \"ditto.version\" 2.4.0 -->\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Conditional Request Using Ditto Java Client\nDESCRIPTION: This Java code snippet shows how to send a conditional live message using the Ditto Java Client. It demonstrates setting the condition and handling the response or error.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-11-04-live-message-conditions.md#2025-04-17_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nString thingId = \"org.eclipse.ditto:carbon-monoxide-alarm\";\n\n// initialize the ditto-client\nDittoClient dittoClient = ... ;\n\ndittoClient.live().message(Options.condition(\"eq(features/alarm/properties/confirmed,false)\"))\n        .from(thingId)\n        .subject(\"co-alarm\")\n        .payload(\"CO Level to high! Open your windows!\")\n        .send(String.class, (response, throwable) -> {\n    if (throwable != null) {\n        LOGGER.error(\"Received error while sending conditional update: '{}' \", throwable.toString());\n    } else {\n        LOGGER.info(\"Received response for conditional update: '{}'\", response);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Command Response in JSON\nDESCRIPTION: This JSON snippet represents a response to a merge command within the Eclipse Ditto framework. It includes a topic specifying the command type and a correlation ID preserved from the original command, describing the endpoint and status for the response. There are no dependencies other than requiring an understanding of the Eclipse Ditto API structure. The status field indicates a successful operation with a 204 code. This structure requires correct integration with other system components handling such JSON responses.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergeattributesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Ditto Response Pattern for Streaming Subscription\nDESCRIPTION: The sequence of events that Ditto sends to clients in response to subscription requests. A created event is always sent first, followed by zero or more next events, and optionally ending with a complete or failed event.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-streaming-subscription.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncreated next* (complete | failed)?\n```\n\n----------------------------------------\n\nTITLE: Modifying Attributes Command in Eclipse Ditto Protocol\nDESCRIPTION: This snippet demonstrates the command structure for modifying attributes in Eclipse Ditto. It includes the topic, headers, and payload for the attribute modification request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/modifyattributes.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Generating MD5 Fingerprint for SSH Host Validation\nDESCRIPTION: Bash command to generate a valid MD5 fingerprint from a public key file for use in host validation when setting up SSH tunneling in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-03-31-ssh-tunneling-for-managed-connections.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nssh-keygen -lf id_rsa.pub -E md5\n```\n\n----------------------------------------\n\nTITLE: Querying BaSyx AAS Registry with cURL\nDESCRIPTION: cURL command to verify that the AAS reference was successfully registered in the BaSyx AAS Registry. The response should include the AAS descriptor with endpoint information.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET <basyx-registry-instance-url>:4000/registry/api/v1/registry\n```\n\n----------------------------------------\n\nTITLE: Generating Hashed Password for nginx Basic Authentication\nDESCRIPTION: Uses openssl to generate a hashed password for nginx basic authentication. The generated hash should be appended to the nginx.htpasswd file with the corresponding username.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/openshift/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl passwd -quiet\n Password: <enter password>\n Verifying - Password: <enter password>\n```\n\n----------------------------------------\n\nTITLE: Testing Ditto Deployment\nDESCRIPTION: Performs a quick health check on the deployed Ditto instance.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/azure/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u ditto:ditto http://$public_fqdn:8080/health\n```\n\n----------------------------------------\n\nTITLE: Policy Not Modifiable Error Response\nDESCRIPTION: Error response payload returned when a policy modification is rejected due to insufficient permissions. The response includes the policy ID, error code, status code 403, and helpful messages for troubleshooting.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_policy_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"policies:policy.notmodifiable\",\n    \"message\": \"The Policy with ID 'org.eclipse.ditto:the_policy_id' could not be modified as the requester had insufficient permissions.\",\n    \"description\": \"Check if the ID of your requested Policy was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Including Feature Retrieval Command Documentation\nDESCRIPTION: Includes a markdown file containing the command documentation for retrieving features\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrievefeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrievefeatures.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Basic Auth Users using kubectl\nDESCRIPTION: This bash command shows how to create a Kubernetes secret named 'ditto-basic-auth' containing username and password pairs for two users (ditto and jane) using the kubectl command-line tool.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_354.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic ditto-basic-auth --from-literal ditto=ditto --from-literal jane=janesPw\n```\n\n----------------------------------------\n\nTITLE: Feature Definition Deleted Event in Eclipse Ditto\nDESCRIPTION: This snippet illustrates the event structure generated when a feature definition is successfully deleted in Eclipse Ditto. It includes the topic and relevant event details.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletedefinition.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/featuredefinitiondeleted.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-defined Extra Fields in HOCON\nDESCRIPTION: This snippet shows how to configure pre-defined extra fields for events and messages in the things.conf file. It demonstrates setting up extra fields for specific namespaces and conditions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_11\n\nLANGUAGE: hocon\nCODE:\n```\nditto {\n  things {\n    thing {\n      event {\n        pre-defined-extra-fields = [\n          {\n            namespaces = []\n            condition = \"exists(definition)\"\n            extra-fields = [\n              \"definition\"\n            ]\n          },\n          {\n            namespaces = [\n              \"org.eclipse.ditto.lamps\"\n            ]\n            extra-fields = [\n              \"attributes/manufacturer\",\n              \"attributes/serial\"\n            ]\n          }\n        ]\n      }\n\n      message {\n        pre-defined-extra-fields = [\n          {\n            namespaces = []\n            condition = \"exists(definition)\"\n            extra-fields = [\n              \"definition\"\n            ]\n          }\n        ]\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Entity Size Limits in Ditto\nDESCRIPTION: Configuration file path defining the maximum size limits for Things, Policies, and Message payloads in Eclipse Ditto\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_080M2.md#2025-04-17_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\nditto-limits.conf\n```\n\n----------------------------------------\n\nTITLE: Blocking messages to a namespace in Ditto\nDESCRIPTION: Command to block all messages sent to actors belonging to a specific namespace, which is the first step in the namespace data erasure process.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/distributedPubSubMediator\",\n  \"headers\": {\n    \"aggregate\": false\n  },\n  \"piggybackCommand\": {\n    \"type\": \"namespaces.commands:blockNamespace\",\n    \"namespace\": \"namespaceToBlock\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Services with Environment Variables\nDESCRIPTION: YAML configuration example showing how to pass system properties to Ditto services using the JAVA_TOOL_OPTIONS environment variable in docker-compose.yml.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/docker/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n...\n# Alternative approach for configuration of the service\nenvironment:\n  - JAVA_TOOL_OPTIONS=-Dditto.gateway.authentication.devops.password=foobar\n```\n\n----------------------------------------\n\nTITLE: Helm Chart JWT Authentication Configuration\nDESCRIPTION: Configuration for enabling pre-authentication in Ditto Helm chart when jwtOnly is set to false\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_335.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njwtOnly: false\n```\n\n----------------------------------------\n\nTITLE: Search Subscription Complete Message Structure\nDESCRIPTION: JSON message format sent when a search subscription is completed. Contains the topic path for things/twin/search/complete, headers with content type, and the subscription ID in the value payload.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/generated/events/subscription-complete-event.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"_/_/things/twin/search/complete\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"subscriptionId\": \"24601\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Runtime Configuration - JSON\nDESCRIPTION: This snippet demonstrates how to retrieve runtime configurations for a service instance by sending a GET request to the '/devops/config/gateway/1?path=ditto' endpoint, which returns the service instance's specific configuration in JSON format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"common.responses:retrieveConfig\",\n  \"status\": 200,\n  \"config\": {\n    \"cluster\": {\n      \"number-of-shards\": 20\n    },\n    \"gateway\": {\n      \"authentication\": {\n        \"devops\": {\n          \"password\": \"foobar\",\n          \"secured\": false\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merged Single Attribute Event Structure\nDESCRIPTION: Event structure emitted after a single attribute of a Thing has been merged. It includes topic, path, and value fields with the applied JSON merge patch.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-merge.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n| Field     | Value                                                                                                                                                      |\n|-----------|------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **topic** | `<namespace>/<thingName>/things/<channel>/events/merged`                                                                                                   |\n| **path**  | `/attributes/<attributePath>`                                                                                                                              |\n| **value** | The [JSON merge patch](https://tools.ietf.org/html/rfc7396) that was applied to the attribute identified by `path` of the Thing referenced in the `topic`. |\n```\n\n----------------------------------------\n\nTITLE: Defining Merge Command Response in JSON\nDESCRIPTION: This snippet represents a JSON structure for a merge command response in the Eclipse Ditto system. It includes a topic identifier for the command, headers for correlation, a specific path, and a status code indicating successful processing. This structure is essential for communication between services within the Eclipse Ditto framework.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergefeaturesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: ModifyImportResponse JSON Structure for Eclipse Ditto Policy Imports\nDESCRIPTION: This JSON structure represents a response to a policy import modification command in Eclipse Ditto. It includes the topic path identifying the policy, correlation ID header for request tracking, the specific path to the modified import, and a 204 status code indicating successful modification with no content returned.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifyimportresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/imports/org.eclipse.ditto:imported-policy\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Announcement Topic Structure\nDESCRIPTION: Defines the standard topic path structure for connection announcements. The path contains an underscore as namespace and includes the connection ID and announcement name.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-connections-announcement.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n_/<connectionId>/connections/announcements/<announcement-name>\n```\n\n----------------------------------------\n\nTITLE: Feature Definition Created Event in Eclipse Ditto\nDESCRIPTION: This snippet illustrates the event structure when a feature definition is created in Eclipse Ditto. It includes the topic, headers, and value of the newly created definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createdefinition.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/events/featuredefinitioncreated.md %}\n```\n\n----------------------------------------\n\nTITLE: New OpenID Connect Issuer Configuration - Configuration\nDESCRIPTION: This snippet demonstrates the new configuration format for OpenID Connect issuers, supporting arbitrary claims for authorization subjects. It highlights the use of key-object pairs within the oauth.openid-connect-issuers map, where each issuer is defined as an object containing the 'issuer' field.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_200.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\noauth = {\n  openid-connect-issuers = {\n    someissuer = {\n      issuer = \"https://example.com\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response to Policy Import Modification in Eclipse Ditto\nDESCRIPTION: JSON representation of a successful response to a policy import modification command. The response confirms the import was modified and includes status code 204 (No Content) to indicate success without returning a body.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-modifyimport.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/imports/org.eclipse.ditto:imported-policy\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Get a Submodel using cURL\nDESCRIPTION: This snippet shows how to retrieve a Submodel from the BaSyx AAS server using a cURL command. It sends a GET request to the specified URL, which includes the server instance URL, namespace, and the name of the submodel to retrieve. The expected output is a JSON representation of the submodel.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET <basyx-server-instance-url>:4001/aasServer/shells/$NAMESPACE/aas/submodels/${NAME}_${FEATURE_ID}/submodel\n```\n\n----------------------------------------\n\nTITLE: Response example for cleanup operation in Ditto\nDESCRIPTION: Example response from the cleanup operation showing a successful execution with status 200.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"cleanup.sudo.responses:cleanupPersistence\",\n  \"status\": 200,\n  \"entityId\": \"thing:ditto:thing1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Single Acknowledgement Topic Format\nDESCRIPTION: Topic format for an acknowledgement addressing a specific acknowledgement label in the Ditto protocol.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-acks.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<namespace>/<thingName>/things/<channel>/acks/<ack-label>\n```\n\n----------------------------------------\n\nTITLE: Generating Policy Resource Not Found Error Response in JSON\nDESCRIPTION: This JSON object represents an error response when a policy resource is not found or cannot be accessed. It includes details such as the topic, headers, path, error status, message, and description to help diagnose and resolve the issue.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_resource_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"policies:resource.notfound\",\n    \"message\": \"The Resource '/the_resource_path' of the PolicyEntry with Label 'the_label' on the Policy with ID 'org.eclipse.ditto:the_policy_id' could not be found or requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Policy, the Label of the PolicyEntry and the path of your requested Resource was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Feature Definition Response in Eclipse Ditto\nDESCRIPTION: This snippet shows the response structure after deleting a feature definition in Eclipse Ditto. It includes the status code and headers of the response.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletedefinition.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/deletefeaturedefinitionresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Compose\nDESCRIPTION: Commands to download and install Docker Compose on a Linux system. It uses curl to download the binary and sets the appropriate permissions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-04-16-connecting-to-ttn-via-mqtt.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n----------------------------------------\n\nTITLE: Including Merged Attribute Event Template\nDESCRIPTION: Includes and renders the markdown template for the merged attribute event documentation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeattribute.md#2025-04-17_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\n{% capture event %}{% include_relative generated/events/mergedattribute.md %}{% endcapture %} {{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Extension in Java\nDESCRIPTION: Basic constructor for implementing a Ditto extension that requires ActorSystem and Config parameters.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-extending.md#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic CustomExtension(final ActorSystem actorSystem, final Config config) {}\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Client with ORY Hydra using Docker\nDESCRIPTION: This bash command creates an OAuth client in ORY Hydra, setting up necessary parameters for authentication with Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2019-08-28-openid-connect.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it \\\n  -e HYDRA_ADMIN_URL=https://ory-hydra-example--hydra:4445 \\\n  --network hydraguide \\\n  oryd/hydra:v1.0.0 \\\n  clients create --skip-tls-verify \\\n    --id eclipse-ditto \\\n    --secret some-secret \\\n    --grant-types authorization_code,refresh_token,client_credentials,implicit \\\n    --response-types token,code,id_token \\\n    --scope openid,offline \\\n    --callbacks http://127.0.0.1:9010/callback\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Payload Structures for Device Messages\nDESCRIPTION: Examples of JSON payloads sent by devices via MQTT, containing temperature and humidity data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"temp\": 23.42,\n  \"hum\": 44.42\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"temp\": 23.42\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hum\": 44.42\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Compose Logs\nDESCRIPTION: Command to follow the logs of all Ditto microservices started with Docker Compose, useful for monitoring the startup process and troubleshooting.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose logs -f\n```\n\n----------------------------------------\n\nTITLE: Original Thing Document Structure in MongoDB\nDESCRIPTION: Example of the original Thing document structure before implementing wildcard indexing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0008-wildcard-search-index.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"ditto:device\",\n  \"attributes\": {\n    \"location\": {\n      \"latitude\": 44.673856,\n      \"longitude\": 8.261719\n    }\n  },\n  \"features\": {\n    \"accelerometer\": {\n      \"definition\": [\n        \"ditto:accelerometer:1.2.3\"\n      ],\n      \"properties\": {\n        \"x\": 3.141\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Search Option in Eclipse Ditto\nDESCRIPTION: This JSON structure represents the error response returned when at least one provided search option is invalid. It includes the error topic, correlation ID, HTTP status code (400), and a descriptive error message. The error code 'thing-search:search.option.invalid' specifically indicates issues with search parameters.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/generated/exceptions/thing-search_search_option_invalid.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"_/_/things/search/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 400,\n    \"error\": \"thing-search:search.option.invalid\",\n    \"description\": \"At least one provided option is invalid.\"\n  },\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyAttributesResponse Structure in JSON for Eclipse Ditto\nDESCRIPTION: This JSON snippet illustrates the structure of a ModifyAttributesResponse in Eclipse Ditto. It includes fields for the topic, headers with a correlation ID, path, value, and status code. The response indicates a successful modification with a 204 status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifyattributesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"value\": null,\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Ditto Protocol Topic Structure for Policies\nDESCRIPTION: Defines the format for a valid topic addressing a Policy, consisting of five elements that specify the namespace, policy name, group, criterion, and action.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<namespace>/<policyName>/policies/commands/<action>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to MQTT Topic for Command Reception (Bash)\nDESCRIPTION: This bash command uses mosquitto_sub to subscribe to the MQTT topic 'control/+/+/req/#' at the Hono MQTT Adapter. This allows for receiving commands via MQTT.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-12-05-example-command-and-control.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ mosquitto_sub -d -h hono.eclipse.org -p 8883 -v -u 'teapot@org.eclipse.ditto' -P teapot -t 'control/+/+/req/#'\n```\n\n----------------------------------------\n\nTITLE: Sending a Claim Message Request in Eclipse Ditto\nDESCRIPTION: Example JSON structure for sending a Claim Message to a Thing in Eclipse Ditto. The message uses the special subject 'claim' and includes a payload containing a secret that will be verified by the receiver to potentially grant access.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-messages.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"topic\": \"org.eclipse.ditto/smartcoffee/things/live/messages/claim\",\n    \"headers\": {\n        \"content-type\": \"text/plain\",\n        \"correlation-id\": \"a-unique-string-for-this-claim-message\"\n    },\n    \"path\": \"/inbox/messages/claim\",\n    \"value\": \"some-claiming-secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Entry\nDESCRIPTION: Release notes detailing the OSGi compatibility fix for Ditto JSON, involving the separation of CBOR serialization into a separate module to resolve Jackson dependency issues.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_121.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### [Ditto JSON is not OSGi compatible due to missing imports](https://github.com/eclipse-ditto/ditto/issues/790)\n\nThe OSGi bundle `ditto-json` was not compatible to be run in OSGi environments as imports of 3rd party libraries\nwere used which were not defined in the `Import-Package` of the bundle.\n\nThe 3rd party libraries (`jackson-core` and `jackson-dataformat-cbor`) were declared on \"provided\" scope previously \nwhich made problems in the OSGi environment.\n\nInstead, the bugfix splitted up the CBOR serialization into a separate module `ditto-json-cbor` in order to prevent the\njackson dependencies to be required at all in `ditto-json` (and as a result also in the `ditto-client`).\n```\n\n----------------------------------------\n\nTITLE: Shutting down all actors in a Ditto namespace\nDESCRIPTION: Command to request all actors in a namespace to shut down, which is the second step in the namespace data erasure process. The reason type must be 'purge-namespace'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/distributedPubSubMediator\",\n  \"piggybackCommand\": {\n    \"type\": \"common.commands:shutdown\",\n    \"reason\": {\n      \"type\": \"purge-namespace\",\n      \"details\": \"namespaceToShutdown\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Feature Properties Created Event in Markdown\nDESCRIPTION: This snippet includes the content of a Markdown file containing the feature properties created event example.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createproperties.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/featurepropertiescreated.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Generating Policy Subject ID Invalid Error Response in JSON for Eclipse Ditto\nDESCRIPTION: This JSON object represents an error response when an invalid subject ID is provided in a policy operation. It includes the topic, headers, path, error details, and HTTP status code. The error specifies that the subject ID must contain an issuer prefix separated by a colon.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_subjectid_invalid.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 400,\n    \"error\": \"policies:subjectid.invalid\",\n    \"message\": \"Subject ID 'invalid subject' is not valid!\",\n    \"description\": \"It must contain an issuer as prefix separated by a colon ':' from the actual subject\"\n  },\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Too Many Modifying Requests in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet shows the structure of an error response when too many modifying requests are made to a Thing in Eclipse Ditto. It includes details such as the error topic, headers, error code, status, and a descriptive message suggesting how to resolve the issue.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_thing_toomanymodifyingrequests.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 429,\n    \"error\": \"things:thing.toomanymodifyingrequests\",\n    \"message\": \"Too many modifying requests are already outstanding to the Thing with ID 'org.eclipse.ditto:fancy-thing'.\",\n    \"description\": \"Throttle your modifying requests to the Thing or re-structure your Thing in multiple Things if you really need so many concurrent modifications.\"\n  },\n  \"status\": 429\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Modules for Eclipse Ditto\nDESCRIPTION: Lists the modules considered as API for Eclipse Ditto, which are subject to semantic versioning rules. Changes to these modules must adhere to versioning guidelines.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0005-semantic-versioning.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nditto-json\nditto-base-model\nditto-messages-model\nditto-jwt-model\nditto-rql-model\nditto-rql-query\nditto-rql-parser\nditto-rql-search-option-parser\nditto-policies-model\nditto-things-model\nditto-thingsearch-model\nditto-connectivity-model\nditto-placeholders\nditto-protocol\nditto-utils-jsr305\n```\n\n----------------------------------------\n\nTITLE: Including Modify Attribute Response in Markdown\nDESCRIPTION: This snippet includes the content of a markdown file containing the response to a modify attribute command in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyattribute.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyattributeresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Default Value Function\nDESCRIPTION: Provides fallback values when pipeline expressions resolve to empty. Supports both literal strings and placeholder references.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-placeholders.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nfn:default('fallback')\nfn:default(\"fallback\")\nfn:default(thing:id)\n```\n\n----------------------------------------\n\nTITLE: RQL Sort Expression\nDESCRIPTION: Shows the structure for sorting results with multiple sort options using ascending and descending orders.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-rql.md#2025-04-17_snippet_4\n\nLANGUAGE: rql\nCODE:\n```\nsort(-attributes/location,+thingId)\n```\n\n----------------------------------------\n\nTITLE: Example Ditto Protocol Message\nDESCRIPTION: Resulting Ditto Protocol message after transformation from TTN payload, showing the digital twin structure.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-04-16-connecting-to-ttn-via-mqtt.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/node0/things/twin/commands/modify\",\n  \"path\": \"/\",\n  \"value\": {\n    \"attributes\": {\n      \"hardwareSerial\": \"70B3D5499A2D3954\",\n      \"ttnCounter\": 9449\n    },\n    \"features\": {\n      \"temperature\": {\n         \"properties\": {\n          \"value\": 23.2\n        }\n      },\n      \"pressure\": {\n        \"properties\": {\n          \"value\": 1018.6\n        }\n      },\n      \"humidity\": {\n        \"properties\": {\n          \"value\": 21.5\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ditto Devops Password in Bash\nDESCRIPTION: This bash command retrieves the Ditto devops password from a Kubernetes secret and stores it as an environment variable. It assumes Ditto is deployed in a namespace called 'ditto'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport DEVOPS_PWD=$(kubectl --namespace ditto get secret my-ditto-gateway-secret -o jsonpath=\"{.data.devops-password}\" | base64 --decode)\n```\n\n----------------------------------------\n\nTITLE: Single Subject Modification Schema\nDESCRIPTION: Protocol schema for creating or modifying a single subject within a policy entry. Requires subject ID and label identification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/modify\",\n  \"path\": \"/entries/<label>/subjects/<subjectId>\",\n  \"value\": \"<subject as JSON>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Single Attribute Command Structure\nDESCRIPTION: Command structure for merging a specific attribute of a Thing identified by attributePath. JSON Pointer notation can be used to reference hierarchical attributes.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-merge.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Field     | Value                                                                                                                                                                                                          |\n|-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **topic** | `<namespace>/<thingName>/things/<channel>/commands/merge`                                                                                                                                                      |\n| **path**  | `/attributes/<attributePath>`                                                                                                                                                                                  |\n| **value** | The JSON value in [JSON merge patch](https://tools.ietf.org/html/rfc7396) format that is applied to the [attribute](basic-thing.html#attributes) identified by `path`  of the Thing referenced in the `topic`. |\n```\n\n----------------------------------------\n\nTITLE: Defining DeletePolicyResponse JSON Structure for Eclipse Ditto\nDESCRIPTION: This JSON snippet defines the structure of a DeletePolicyResponse in Eclipse Ditto. It includes the topic for policy deletion, correlation ID in headers, root path, and a 204 status code indicating successful deletion without content.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/deletepolicyresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteImportResponse Structure in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents a DeleteImportResponse in Eclipse Ditto. It includes the topic, headers with a correlation ID, the path of the deleted import, and a status code. The response indicates a successful deletion with a 204 status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/deleteimportresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/import/org.eclipse.ditto:the_imported_policy_id\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Content-type for AMQP 1.0 Messages\nDESCRIPTION: Defines the required content-type header value for AMQP 1.0 messages using Ditto Protocol.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-amqp10.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napplication/vnd.eclipse.ditto+json\n```\n\n----------------------------------------\n\nTITLE: Modifying Feature Definition Response in Eclipse Ditto\nDESCRIPTION: This snippet shows the response structure after modifying a feature definition in Eclipse Ditto. It includes the topic, headers, and status of the modification operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createdefinition.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/commands/modify/modifyfeaturedefinitionresponse.md %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Hono Tenant via HTTP API\nDESCRIPTION: Command to create a new tenant in Hono using cURL with the tenant ID 'org.eclipse.ditto'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST -i -H 'Content-Type: application/json' -d '{\"tenant-id\": \"org.eclipse.ditto\"}' https://hono.eclipseprojects.io:28080/tenant\n```\n\n----------------------------------------\n\nTITLE: Building Ditto UI for Production\nDESCRIPTION: Command to create a production build of the Ditto UI application\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/ui/readme.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Updating Third-Party License Information Using Maven in Bash\nDESCRIPTION: This script uses Maven to update the NOTICE-THIRD-PARTY.md file with current third-party licensing details. It requires Maven and access to the project's root directory. The script's main command is 'mvn generate-resources -Pgenerate-third-party-licenses', which updates the notice file based on the current dependencies.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/legal/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../ # switch to ditto/ root dir\n$ mvn generate-resources -Pgenerate-third-party-licenses\n```\n\n----------------------------------------\n\nTITLE: Example Reduced JSON Object\nDESCRIPTION: This is an example of the JSON object resulting from the get() method. It demonstrates the structure when retrieving the 'subsel' value using the JsonPointer approach.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"attributes\": {\n        \"someAttr\": {\n            \"subsel\": 42\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Delete Attribute Command Template\nDESCRIPTION: Includes and renders the markdown template for the merge delete attribute command documentation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeattribute.md#2025-04-17_snippet_3\n\nLANGUAGE: liquid\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergedeleteattribute.md %}{% endcapture %} {{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Creating Things with Environment Variables in Bash\nDESCRIPTION: Environment variable configuration required for creating things during benchmark tests. These variables ensure that both things and necessary Ditto connections are created before any test scenarios run.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/benchmark-tool/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCREATE_THINGS=1\nCREATE_DITTO_CONNECTIONS=1\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message for Undeletable Policy ID in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet shows the structure of an error response when attempting to delete a Thing's Policy ID in Eclipse Ditto. It includes details such as the topic, headers, path, error code, message, and a description of how to resolve the issue.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_policyId_notdeletable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"response-required\": false,\n    \"content-type\": \"application/json\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 400,\n    \"error\": \"things:policyId.notdeletable\",\n    \"message\": \"The Policy ID of a Thing cannot be deleted.\",\n    \"description\": \"Remove Policy ID entry from the request body and retry the request.\"\n  },\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Including Feature Definition Modified Event in Markdown\nDESCRIPTION: This snippet includes the content of a markdown file containing the event triggered when a feature definition is modified in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifydefinition.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/featuredefinitionmodified.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Policy Entry Deletion Response\nDESCRIPTION: Response structure for successfully deleting a policy entry in Eclipse Ditto\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-deletepolicyentry.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/deletepolicyentryresponse.md %}{% endcapture %}{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: RQL Query Property Structure\nDESCRIPTION: Defines the basic structure for RQL query properties, which can be URL-encoded strings.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-rql.md#2025-04-17_snippet_1\n\nLANGUAGE: rql\nCODE:\n```\n<property> = url-encoded-string\n```\n\n----------------------------------------\n\nTITLE: Successful Acknowledgement Message in Ditto Protocol\nDESCRIPTION: Example of a successfully fulfilled acknowledgement (ACK) in Eclipse Ditto with status 202. It includes the topic identifying the thing and acknowledgement type, headers with correlation ID, the resource path, and a status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-examples.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/thing_name_3141/things/twin/acks/custom-ack\",\n  \"headers\": {\n    \"correlation-id\": \"a780b7b5-fdd2-4864-91fc-80df6bb0a636\"\n  },\n  \"path\": \"/\",\n  \"status\": 202\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating over JsonArray\nDESCRIPTION: Shows how to iterate over the values of a JsonArray using both traditional for loops and the java.util.Stream API.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nJsonArray jsonArray = JsonFactory.newArray(\"[\\\"foo\\\", \\\"bar\\\", \\\"baz\\\"]\");\n\nfor (JsonValue jsonValue : jsonArray) {\n    // ...\n}\n\njsonArray.stream().//... work with the Stream<JsonValue>\n```\n\n----------------------------------------\n\nTITLE: Ditto Release Notes Markdown Configuration\nDESCRIPTION: Metadata configuration for release notes documentation, including publication details and version information\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_335.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Release notes 3.3.5\ntags: [release_notes]\npublished: true\nkeywords: release notes, announcements, changelog\nsummary: \"Version 3.3.5 of Eclipse Ditto, released on 21.07.2023\"\npermalink: release_notes_335.html\n---\n```\n\n----------------------------------------\n\nTITLE: Deleting Thing Event - Protocol Format\nDESCRIPTION: Event format specification for Thing deletion, showing the topic structure and path.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-delete.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Field     | Value                   |\n|-----------|-------------------------|\n| **topic** | `<namespace>/<thingName>/things/<channel>/events/deleted`     |\n| **path**  | `/`     |\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Policy ID Error Response in Eclipse Ditto\nDESCRIPTION: This JSON represents the error response sent when an invalid policy ID is provided in Eclipse Ditto. The response includes a 400 status code, an error code 'policies:id.invalid', error message, description, and a reference link to the documentation about namespaced entity ID notation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_id_invalid.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 400,\n    \"error\": \"policies:id.invalid\",\n    \"message\": \"Policy ID 'invalid id' is not valid!\",\n    \"description\": \"It must conform to the namespaced entity ID notation (see Ditto documentation)\",\n    \"href\": \"https://www.eclipse.dev/ditto/basic-namespaces-and-names.html#namespaced-id\"\n  },\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Enrichment with Dynamic Feature ID\nDESCRIPTION: Demonstrates how to use the new wildcard/placeholder feature to enrich all feature definitions of modified features when publishing events.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_240.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nextraFields=features/{{feature:id}}/definition\n```\n\n----------------------------------------\n\nTITLE: Sample Device Payload JSON\nDESCRIPTION: Example of raw device payload showing temperature value and timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"val\": \"23.42 °C\",\n  \"ts\": 1523946112727\n}\n```\n\n----------------------------------------\n\nTITLE: Installing k3s on Linux\nDESCRIPTION: Command to download and install k3s using a shell script. This sets up the lightweight Kubernetes distribution required to run Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/k3s/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sfL https://get.k3s.io | sh -\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value with JsonFieldDefinition\nDESCRIPTION: Illustrates how to retrieve a value from a JsonObject using a JsonFieldDefinition. The getValueOrThrow() method throws a JsonMissingFieldException if the object does not contain the specified key. The example demonstrates the compiler's knowledge of the value type, allowing for direct assignment.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n// Retrieve the Integer value from the JSON object, throw a JsonMissingFieldException if the object\n// does not contain \"myValue\". Because of the field definition the compiler knows the value type of \"myValue\" and \n// we can just directly assign it.\n\nint myValue = jsonObject.getValueOrThrow(MY_VALUE); // A NullPointerException would be thrown if the value was null.\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for Eclipse Ditto WoT Model - XML\nDESCRIPTION: This snippet shows how to add the Eclipse Ditto WoT model as a dependency in a Maven `pom.xml` file. The Maven configuration includes the required group ID, artifact ID, and versioning. By adding this dependency, several transitive dependencies will also be included to support the WoT model functionalities.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/wot/model/README.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>org.eclipse.ditto</groupId>\n    <artifactId>ditto-wot-model</artifactId>\n    <version>${ditto.version}</version> <!-- the ditto-wot-model is available since \"ditto.version\" 2.4.0 -->\n</dependency>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>org.eclipse.ditto</groupId>\n        <artifactId>ditto-json</artifactId>\n        <version>${ditto.version}</version>\n    </dependency>\n    <dependency>\n        <groupId>org.eclipse.ditto</groupId>\n        <artifactId>ditto-base-model</artifactId>\n        <version>${ditto.version}</version>\n    </dependency>\n\n    <dependency>\n        <groupId>com.eclipsesource.minimal-json</groupId>\n        <artifactId>minimal-json</artifactId>\n        <version>0.9.5</version>\n    </dependency>\n    <dependency>\n        <groupId>org.atteo.classindex</groupId>\n        <artifactId>classindex</artifactId>\n        <version>3.11</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Fix blocking Pekko dispatcher thread on WoT skeleton creation\nDESCRIPTION: This bugfix addresses a deadlock issue caused by the blocking of the Pekko dispatcher thread during the creation of new twins based on a WoT ThingModel. The solution involves executing WoT operations asynchronously to avoid these deadlock situations.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_332.md#2025-04-17_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Including Merge Delete Attributes Command in Markdown\nDESCRIPTION: This snippet includes the content of a separate Markdown file containing the merge delete attributes command example.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeattributes.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergedeleteattributes.md %}{% endcapture %} {{ command\n| markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Applying Pod Reader Role in OpenShift\nDESCRIPTION: Applies the pod reader role YAML file, which is necessary for pods to access the Kubernetes API and build the pekko cluster.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/openshift/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd <DITTO_PATH>\noc apply -f pod-reader-role.yaml\n```\n\n----------------------------------------\n\nTITLE: Policies Resource Not Modifiable Error Response Format - JSON\nDESCRIPTION: Demonstrates the JSON error response structure returned when a policy resource modification is denied. The response includes error details like status code 403, error type, descriptive message about the failed operation, and guidance for resolution.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_resource_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"policies:resource.notmodifiable\",\n    \"message\": \"The Resource '/the_resource_path' of the PolicyEntry with Label 'the_label' on the Policy with ID 'org.eclipse.ditto:the_policy_id' could not be modified as the requester had insufficient permissions.\",\n    \"description\": \"Check if the ID of the Policy, the Label of the PolicyEntry and the path of your requested Resource was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Merged Event JSON Structure\nDESCRIPTION: Example of a Thing merged event showing the deletion of accelerometer properties. The event uses the merge-patch content type and includes metadata like revision and timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergeddeletefeatureproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"value\": null,\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: RQL Query Value Structure\nDESCRIPTION: Defines the supported value types in RQL queries including numbers, strings, placeholders, and boolean values.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-rql.md#2025-04-17_snippet_2\n\nLANGUAGE: rql\nCODE:\n```\n<value> = <number>, <string>, <placeholder>, true, false, null\n<number> = <double>, <integer>\n<string> = \"url-encoded-string\", 'url-encoded-string'\n<placeholder> = time:now, time:now_epoch_millis\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Eclipse Ditto JavaScript Client SDK Build\nDESCRIPTION: This snippet provides commands for troubleshooting build issues by cleaning dependencies and rebuilding the project from scratch.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/client-sdk-javascript.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run clean\n# by hand delete node_modules in the root folder, or use a tool like rm, rimraf, etc.\nnpm install\nnpm run build\n# ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attribute Response Template\nDESCRIPTION: Template showing the expected response format when retrieving a single attribute. The response includes the requested attribute value.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrieveattribute.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/query/retrieveattributeresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Fix nginx worker_processes setting in Helm Chart\nDESCRIPTION: This modification configures the 'dittoui' nginx to use a single worker process as it serves only static content. The Helm chart's 'values.yaml' is updated to allow specifying the number of worker processes, defaulting to 4 if not set.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_332.md#2025-04-17_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Link Reference in Markdown\nDESCRIPTION: Markdown link reference for merged pull requests in the release notes\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_030M1.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[merged pull requests](https://github.com/eclipse-ditto/ditto/pulls?q=is%3Apr+milestone%3A0.3.0-M1+)\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Content for Modify Feature Response\nDESCRIPTION: This snippet includes the Markdown content for the modify feature response from an external file.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyfeature.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyfeatureresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Piggyback Command for Retrieving a Policy - JSON\nDESCRIPTION: This snippet demonstrates the structure of a piggyback command used to retrieve a policy by specifying the target actor selection, headers, and the command type for retrieving the policy by ID.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/policy\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": true,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"policies.commands:retrievePolicy\",\n    \"policyId\": \"<insert-the-policy-id-to-retrieve-here>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Basic Auth Users in YAML\nDESCRIPTION: This YAML snippet demonstrates how to create a Kubernetes secret containing usernames and passwords for basic authentication in Ditto. It shows the format for storing multiple user credentials.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_354.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# existingSecret contains the name of existing secret containing user and password\n#  format: ${user}:${password}, where secret key is ${user} and value is ${password}\n#  example creating secret for users ditto and jane:\n#    kubectl create secret generic ditto-basic-auth --from-literal ditto=ditto --from-literal jane=janesPw\n```\n\n----------------------------------------\n\nTITLE: Defining Merge Command Response in JSON\nDESCRIPTION: This JSON snippet represents the structure of a response for a merge command in Eclipse Ditto, detailing the topic, headers, path, and status. It is crucial for handling command responses consistently within the framework.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeaturesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: String Filtering Function\nDESCRIPTION: Filters pipeline results based on RQL conditions. Supports equality checks, existence checks, and pattern matching.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-placeholders.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nfn:filter('like','allowlist1|foobar|include')\nfn:filter(header:response-required,'eq','true')\nfn:filter(header:response-required,'exists')\nfn:filter(header:response-required,'exists','false')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Entries with JSON Command in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a command to retrieve policy entries in Eclipse Ditto. It specifies the topic for policy commands, includes a correlation ID in the headers, and sets the path to '/entries' for retrieving all policy entries.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrievepolicyentries.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Minikube and Verifying Status\nDESCRIPTION: Commands to start Minikube and check its status. This is a prerequisite step before deploying Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/minikube/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nminikube start \n\n# verify minikube is started\nminikube status\n```\n\n----------------------------------------\n\nTITLE: Reducing JsonObject with JsonPointer\nDESCRIPTION: Illustrates how to use the get() method to reduce a JsonObject while maintaining the pointer hierarchy. The example shows how to retrieve a nested value with a JsonPointer, resulting in a JsonObject that contains the pointed value within the original hierarchy.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nJsonObject subsel = thingJsonObject.get(\"/attributes/someAttr/subsel\");\n```\n\n----------------------------------------\n\nTITLE: Transforming JsonObject to JsonObjectBuilder\nDESCRIPTION: Illustrates how to transform a JsonObject into a JsonObjectBuilder for more efficient modifications, avoiding unnecessary object creation for each modification. Two methods are shown: direct transformation and using JsonFactory for transformation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nJsonObject jsonObject = ...\n\n// option 1: direct transformation\nJsonObjectBuilder jsonObjectBuilder = jsonObject.toBuilder(); \n\n// option 2: using JsonFactory for transformation\nJsonObjectBuilder anotherJsonObjectBuilder = JsonFactory.newObjectBuilder(jsonObject);\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Integration Subject in HOCON\nDESCRIPTION: This snippet shows how to configure the token integration subject in the gateway-extension.conf file for Eclipse Ditto. It demonstrates setting the subject pattern and using an environment variable for configuration.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-policy.md#2025-04-17_snippet_2\n\nLANGUAGE: hocon\nCODE:\n```\nditto.gateway.authentication.oauth.token-integration-subject =\n  \"my-token-integration-issuer:{{policy-entry:label}}:{{jwt:sub}}\"\n\nditto.gateway.authentication.oauth.token-integration-subject =\n  ${?OAUTH_TOKEN_INTEGRATION_SUBJECT}\n```\n\n----------------------------------------\n\nTITLE: Include taglogic.html using Liquid\nDESCRIPTION: This snippet includes the content of the `taglogic.html` file using the Liquid template engine's `include` tag.  It's likely used to dynamically insert shared logic or content related to tag processing into the current page. No dependencies are explicitly listed, but `taglogic.html` must exist and contain valid HTML or Liquid code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_release_notes.md#2025-04-17_snippet_0\n\nLANGUAGE: Liquid\nCODE:\n```\n{% include taglogic.html %}\n```\n\n----------------------------------------\n\nTITLE: New Wildcard Index Document Structure\nDESCRIPTION: Example of the new index document structure using MongoDB's wildcard index feature, showing reduced document size.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0008-wildcard-search-index.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_id\": \"ditto:device\",\n  \"t\": {\n    \"thingId\": \"ditto:device\",\n    \"attributes\": {\n      \"location\": {\n        \"latitude\": 44.673856,\n        \"longitude\": 8.261719\n      }\n    },\n    \"features\": {\n      \"accelerometer\": {\n        \"definition\": [ \"ditto:accelerometer:1.2.3\" ],\n        \"properties\": {\n          \"x\": 3.141\n        }\n      }\n    }\n  },\n  \"p\": {\n    \"·g\": [ \"issuer:authorization-subject\" ]\n  },\n  \"f\": [\n    {\n      \"id\": \"accelerometer\",\n      \"definition\": [ \"ditto:accelerometer:1.2.3\" ],\n      \"properties\": {\n        \"x\": 3.141\n      },\n      \"p\": {\n        \"·g\": [ \"issuer:authorization-subject\" ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Policies Policy Conflict Error Response JSON Structure\nDESCRIPTION: The JSON structure of an error message when a policy conflict occurs. This is returned with HTTP status 409 when attempting to create a policy with an ID that already exists in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_policy_conflict.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 409,\n    \"error\": \"policies:policy.conflict\",\n    \"message\": \"The Policy with ID 'org.eclipse.ditto:the_policy_id' already exists\",\n    \"description\": \"Choose another Policy ID\"\n  },\n  \"status\": 409\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Merged Event JSON Structure\nDESCRIPTION: Example JSON payload showing the structure of a Thing merged event at /attributes path. Contains the topic indicating the thing ID, content-type header for merge patch, null value indicating attribute deletion, and event metadata including revision and timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/mergeddeleteattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/attributes\",\n  \"value\": null,\n  \"revision\": 42,\n  \"timestamp\": \"2021-01-18T09:42:12Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Temperature Property in a WoT Thing Model\nDESCRIPTION: This JSON snippet demonstrates how to define a 'currentTemperature' property in a WoT Thing Model. It includes semantic annotations using ontologies, data type specifications, and unit information.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"currentTemperature\": {\n      \"@type\": \"om2:CelsiusTemperature\",\n      \"title\": \"Current temperature\",\n      \"description\": \"The last or current measured temperature in '°C'.\",\n      \"type\": \"number\",\n      \"unit\": \"om2:degreeCelsius\",\n      \"minimum\": -273.15\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Cleanup Coordinator State\nDESCRIPTION: JSON payload for retrieving the current state of the background cleanup coordinator.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/user/<SERVICE_NAME>Root/persistenceCleanup\",\n  \"headers\": {},\n  \"piggybackCommand\": {\n    \"type\": \"status.commands:retrieveHealth\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Merge Attribute Command Template\nDESCRIPTION: Includes and renders the markdown template for the merge attribute command documentation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeattribute.md#2025-04-17_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergeattribute.md %}{% endcapture %} {{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Versions in Markdown Table\nDESCRIPTION: This snippet shows a markdown table listing the supported versions of Eclipse Ditto for security updates. It indicates that versions 3.7.x and 3.6.x are supported, while versions below 3.6.0 are not.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/SECURITY.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Supported          |\n|---------| ------------------ |\n| 3.7.x   | :white_check_mark: |\n| 3.6.x   | :white_check_mark: |\n| < 3.6.0 | :x:                |\n```\n\n----------------------------------------\n\nTITLE: Including Tag Logic Component in Jekyll\nDESCRIPTION: This Liquid snippet includes a tag logic component, likely used to generate a list of pages or posts tagged as 'advanced' in the Eclipse Ditto documentation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_advanced.md#2025-04-17_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% include taglogic.html %}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Snippet for Merge Thing Definition Response\nDESCRIPTION: This snippet includes a Markdown file containing the response for merging a thing definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergethingdefinition.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/merge/mergethingdefinitionresponse.md %}{% endcapture %} {{\nresponse | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Markdown Header Definition\nDESCRIPTION: Frontmatter metadata defining the release notes page properties including title, tags, keywords and summary\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_140.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Release notes 1.4.0\ntags: [release_notes]\npublished: true\nkeywords: release notes, announcements, changelog\nsummary: \"Version 1.4.0 of Eclipse Ditto, released on 28.10.2020\"\npermalink: release_notes_140.html\n---\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value with Optional Handling\nDESCRIPTION: Demonstrates how to retrieve a value from a JsonObject using a JsonFieldDefinition and handling the case where the object does not contain the specified key. The getValue() method returns a java.util.Optional, allowing for custom handling of missing values.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// Retrieve the Integer value from the JSON object but decide by ourselves what to do if the object does not \n// contain \"myValue\".\n\nint myValueOrDefault = jsonObject.getValue(MY_VALUE).orElse(23); // getValue() returns a java.util.Optional\n```\n\n----------------------------------------\n\nTITLE: Deploying K6 Test Resource in Kubernetes\nDESCRIPTION: Kubernetes command to create the custom K6 test resource that will execute the benchmark test. This initiates the test execution in the Kubernetes cluster.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/benchmark-tool/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create -f k6-ditto-benchmark-test.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating and Modifying JsonObject\nDESCRIPTION: Shows how to create JsonObject instances using JsonFactory.newObject() and modify them using methods like set(). The modification methods return a new object, reflecting the changes, and the initial JsonObject remains immutable. The example demonstrates simple modifications and the creation of a new object disjoint from the initial one.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nJsonObject initialJsonObject = JsonFactory.newObject(\"{\\\"fnord\\\": 5}\");\n\n// newJsonObject is a new object which is completely disjoint from initialJsonObject\nJsonObject newJsonObject = initialJsonObject.set(\"isFnord\", true);  // contains \"fnord\" and \"isFnord\"\n```\n\n----------------------------------------\n\nTITLE: Setting Values with JsonPointer\nDESCRIPTION: Demonstrates how to use JsonPointer to set values in a JsonObject, creating a hierarchy of JsonObjects in one step. The example shows two equivalent ways of creating a nested JsonObject structure, with the JsonPointer approach being more readable and less error-prone.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nJsonObject o1 = JsonFactory.newObjectBuilder()\n    .set(\"/foo/bar/baz\", \"someValue\")\n    .build();\n\nJsonObject o2 = JsonFactory.newObjectBuilder()\n    .set(\"foo\", JsonFactory.newObjectBuilder()\n        .set(\"bar\", JsonFactory.newObjectBuilder()\n            .set(\"baz\", \"someValue\")\n            .build())\n        .build())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration for Ditto JSR-305 Utils\nDESCRIPTION: Maven dependency configuration for including the Ditto JSR-305 utility module in a project with a provided scope\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/utils/jsr305/README.md#2025-04-17_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>org.eclipse.ditto</groupId>\n    <artifactId>ditto-utils-jsr305</artifactId>\n    <version>VERSION</version>\n    <scope>provided</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Including Docson Swagger Integration in HTML\nDESCRIPTION: This code snippet demonstrates how to include the Docson Swagger integration script in the Swagger UI index.html file. It should be placed after other script tags to properly integrate Docson with Swagger UI.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/docson/README.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src='/path-to-docson/docson-swagger.js' type='text/javascript'></script>\n```\n\n----------------------------------------\n\nTITLE: Building OpenAPI Documentation with NPM\nDESCRIPTION: Commands for navigating to the sources directory and running the build process for OpenAPI documentation using npm scripts.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/openapi/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n// go to sources\n$ cd sources\n\n// run build\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring System Properties for Ditto 3.4.0 Migration\nDESCRIPTION: Java system properties to configure Ditto services (Policies, Things, Connectivity) to use the old index name 'akka_persistence_metadata_pid' instead of the new 'pekko_persistence_metadata_pid' index. This is an alternative to dropping the old indexes.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_340.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* -Dpekko-contrib-mongodb-persistence-policies-journal.overrides.metadata-index=akka_persistence_metadata_pid\n* -Dpekko-contrib-mongodb-persistence-policies-journal-read.overrides.metadata-index=akka_persistence_metadata_pid\n```\n\nLANGUAGE: markdown\nCODE:\n```\n* -Dpekko-contrib-mongodb-persistence-things-journal.overrides.metadata-index=akka_persistence_metadata_pid\n* -Dpekko-contrib-mongodb-persistence-things-journal-read.overrides.metadata-index=akka_persistence_metadata_pid\n```\n\nLANGUAGE: markdown\nCODE:\n```\n* -Dpekko-contrib-mongodb-persistence-connection-journal.overrides.metadata-index=akka_persistence_metadata_pid\n* -Dpekko-contrib-mongodb-persistence-connection-journal-read.overrides.metadata-index=akka_persistence_metadata_pid\n* -Dpekko-contrib-mongodb-persistence-connection-remember-journal.overrides.metadata-index=akka_persistence_metadata_pid\n```\n\n----------------------------------------\n\nTITLE: Response to Thing Definition Creation in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response structure when a Thing's definition is successfully created in Eclipse Ditto. It includes the topic, headers, and status code of the response.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createthingdefinition.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifythingdefinitionresponsecreated.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thing Description - Ditto HTTP API Request\nDESCRIPTION: cURL command to retrieve the WoT Thing Description of a specific Thing using Ditto's HTTP API. Requires basic authentication and specifies the Accept header for TD JSON format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration-example.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request GET -u ditto:ditto 'https://ditto.eclipseprojects.io/api/2/things/io.eclipseprojects.ditto:floor-lamp-0815' \\\n--header 'Accept: application/td+json'\n```\n\n----------------------------------------\n\nTITLE: Conditional Request with HTTP Query Parameter\nDESCRIPTION: This example shows how to send a conditional request using an HTTP query parameter to specify the condition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-11-04-live-message-conditions.md#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/2/things/org.eclipse.ditto:carbon-monoxide-alarm/outbox/messages/co-alarm?condition=eq(features/alarm/properties/confirmed,false)\nContent-Type: application/json\n\nCO Level too high! Open your windows!\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Ditto Release\nDESCRIPTION: Removes all Kubernetes components associated with the Ditto release\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/ditto/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall -n ditto my-ditto\n```\n\n----------------------------------------\n\nTITLE: Including Tag Logic in Jekyll Template for Architecture Topics\nDESCRIPTION: This Liquid template snippet includes a Jekyll include file named 'taglogic.html' to generate a list of content tagged with 'architecture'. It's used to dynamically create a page that aggregates all architecture-related documentation in the Eclipse Ditto project.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_architecture.md#2025-04-17_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% include taglogic.html %}\n```\n\n----------------------------------------\n\nTITLE: YAML Tag Name Definition\nDESCRIPTION: Defines the tag name associated with the content. This likely used for categorization and filtering of content.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_wot.md#2025-04-17_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\n\"tagName: wot\"\n```\n\n----------------------------------------\n\nTITLE: Merge Thing Command Response JSON\nDESCRIPTION: This JSON snippet represents a successful response to a merge thing command at the /policyId.  It includes the topic indicating the command type, headers containing the preserved correlation ID, the targeted path, and a status code of 204 indicating success with no content.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergepolicyidresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: ThingMerged Event Emitted After Feature Property Merge in Eclipse Ditto\nDESCRIPTION: This code snippet demonstrates the ThingMerged event that is emitted after merging multiple feature properties in Eclipse Ditto. It includes the topic, headers, path, merged value, revision, and timestamp of the operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-02-04-merge-feature.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"com.acme/coffeebrewer/things/twin/events/merged\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"coffee-brewer\": {\n      \"properties\": {\n        \"brewed-coffees\": 10\n      }\n    },\n    \"water-tank\": {\n      \"properties\": {\n        \"configuration\": {\n          \"smartMode\": null,\n          \"tempToHold\": 30\n        }\n      }\n    }\n  },\n  \"revision\": 42,\n  \"timestamp\": \"2021-02-04T09:42:39Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Thing Command in Eclipse Ditto - JSON\nDESCRIPTION: This JSON snippet demonstrates how to construct a merge command for deleting a thing's definition in Eclipse Ditto. It establishes the topic for the command and includes necessary headers like content-type and correlation-id. The path specifies the part of the JSON object to update, and setting the value to null intends to delete this section. This command is crucial for managing updates and deletions in the things' twins model.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletethingdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/definition\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Resources Response JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a RetrieveResourcesResponse in Eclipse Ditto's policy API. It shows the response when retrieving resources for a specific label ('the_label') in a policy, including the resource path and associated permissions (grant/revoke).\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrieveresourcesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources\",\n  \"value\": {\n    \"thing:/the_resource_path\": {\n      \"grant\": [\n        \"READ\",\n        \"WRITE\"\n      ],\n      \"revoke\": []\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Applying JsonFieldSelector in Java\nDESCRIPTION: Java code showing how to create and apply a JsonFieldSelector to extract specific fields from the source JSON object.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nJsonFieldSelector fieldSelector = JsonFactory.newFieldSelector(\"foo(bar/baz,yo),thingId\");\n\nJsonObject targetJsonObject = sourceJsonObject.get(fieldSelector);\n```\n\n----------------------------------------\n\nTITLE: Embedding Docson Widget in HTML\nDESCRIPTION: This snippet shows how to include the Docson widget on a webpage to display schema documentation. It requires specifying the path to the Docson widget script and the schema to be documented.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/docson/README.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"http://somewhere/path-to-docson/widget.js\" data-schema=\"/path-to-schema\">\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Round-Trip Signal Enrichment Facade in Java\nDESCRIPTION: Specifies the Java class for implementing the round-trip approach to signal enrichment, which guarantees up-to-date data and policy application.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0004-signal-enrichment.md#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\norg.eclipse.ditto.internal.models.signalenrichment.ByRoundTripSignalEnrichmentFacade\n```\n\n----------------------------------------\n\nTITLE: Connection Configuration Field\nDESCRIPTION: JSON field name used in AMQP and MQTT connection sources to declare acknowledgement labels\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_140.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndeclaredAcks\n```\n\n----------------------------------------\n\nTITLE: Configuring Akka Frame Size in Ditto\nDESCRIPTION: Configuration file path specifying the maximum frame size settings for Ditto's Akka cluster communication\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_080M2.md#2025-04-17_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nditto-akka-config.conf#L93\n```\n\n----------------------------------------\n\nTITLE: Query Parameter Example for WebSocket Connections\nDESCRIPTION: Example showing the declared-acks query parameter format for WebSocket connections to declare acknowledgement labels\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_140.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ndeclared-acks\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Content for Delete Thing Definition Response\nDESCRIPTION: This snippet includes a Markdown file containing the response for deleting a Thing definition in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletethingdefinition.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/deletethingdefinitionresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Subscription Failed Event\nDESCRIPTION: Event indicating an error or failure in the search subscription process\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/protocol-examples-search.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/subscription-failed-event.md %}{% endcapture %}\n```\n\n----------------------------------------\n\nTITLE: Validating Namespaced ID Pattern in Java\nDESCRIPTION: Regex pattern for validating complete namespaced IDs in Eclipse Ditto. Combines namespace and name patterns with a colon separator, with a maximum length of 256 characters.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-namespaces-and-names.md#2025-04-17_snippet_2\n\nLANGUAGE: regex\nCODE:\n```\n(?<ns>|(?:(?:[a-zA-Z]\\w*+)(?:[.-][a-zA-Z]\\w*+)*+)):(?<name>[^\\x00-\\x1F\\x7F-\\xFF/]++)\n```\n\n----------------------------------------\n\nTITLE: Opening Minikube Dashboard\nDESCRIPTION: Command to open the Minikube dashboard. This provides a web-based UI for managing the Kubernetes cluster.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/minikube/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nminikube dashboard\n```\n\n----------------------------------------\n\nTITLE: Setting File Ownership for k3s Configuration\nDESCRIPTION: Command to change the owner of the k3s configuration file to make it accessible to the current user without sudo permissions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/k3s/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown <groupId>:<userId> /etc/rancher/k3s/k3s.yaml\n```\n\n----------------------------------------\n\nTITLE: Using Docson JavaScript API\nDESCRIPTION: This JavaScript snippet demonstrates how to use Docson's JavaScript API to generate documentation. It takes an element to host the documentation, a schema (as URI, path, or string), and an optional JSON pointer to a sub-schema.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/docson/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocson.doc(element, schema, ref)\n```\n\n----------------------------------------\n\nTITLE: Submodel JSON Response\nDESCRIPTION: This JSON snippet represents the expected response when retrieving a Submodel from the BaSyx AAS server. It includes information about the parent, identification, idShort, kind, data specification, model type, embedded data specifications, and submodel elements of the Submodel.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\"parent\":{\"keys\":[{\"idType\":\"Custom\",\"type\":\"AssetAdministrationShell\",\"value\":\"machine\",\"local\":true}]},\n```\n\nLANGUAGE: json\nCODE:\n```\n\"identification\":{\"idType\":\"Custom\",\"id\":\"sensor_temperature\"},\n```\n\nLANGUAGE: json\nCODE:\n```\n\"idShort\":\"sensor_temperature\",\"kind\":\"Instance\",\"dataSpecification\":[],\n```\n\nLANGUAGE: json\nCODE:\n```\n\"modelType\":{\"name\":\"Submodel\"},\"embeddedDataSpecifications\":[],\n```\n\nLANGUAGE: json\nCODE:\n```\n\"submodelElements\":[]}\n```\n\n----------------------------------------\n\nTITLE: Adding User Credentials to nginx.htpasswd File Format\nDESCRIPTION: Example format for adding a user and their hashed password to the nginx.htpasswd file for basic authentication in the nginx reverse proxy.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nditto:A6BgmB8IEtPTs\n```\n\n----------------------------------------\n\nTITLE: Example JSON Object\nDESCRIPTION: This is an example JSON object used as a starting point for demonstrating how to use the getter methods of a JsonObject. The object contains a thingId and attributes with nested sub-objects.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"thingId\": \"myThing\",\n    \"attributes\": {\n        \"someAttr\": {\n            \"subsel\": 42\n        },\n        \"anotherAttr\": \"baz\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Settings Type Definitions in TypeScript\nDESCRIPTION: This snippet expands on the authentication settings types, defining how main and devops users' authentication mechanisms are structured, including support for different authentication methods and settings.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/ui/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype CommonAuthSettings = {\n    /** The authentication method to apply */\n    method: AuthMethod,\n    /** Authentication settings for SSO (OIDC) based authentication */\n    oidc: OidcAuthSettings,\n    /** Authentication settings for Bearer authentication (manually providing a Bearer token to the UI) */\n    bearer: BearerAuthSettings,\n    /** Authentication settings for Basic authentication */\n    basic: BasicAuthSettings,\n}\n\ntype MainAuthSettings = CommonAuthSettings & {\n    /** Authentication settings for Pre-Authenticated authentication */\n    pre: PreAuthSettings\n}\n\n// Other related types continue...\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Release Notes\nDESCRIPTION: YAML front matter configuration for the release notes page, specifying metadata such as title, tags, keywords, and permalink.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_363.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Release notes 3.6.3\ntags: [release_notes]\npublished: true\nkeywords: release notes, announcements, changelog\nsummary: \"Version 3.6.3 of Eclipse Ditto, released on 27.11.2024\"\npermalink: release_notes_363.html\n---\n```\n\n----------------------------------------\n\nTITLE: Erasing all data in a Ditto namespace from persistence\nDESCRIPTION: Command to erase all data for a namespace from the persistence storage, which is the third step in the namespace data erasure process.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/distributedPubSubMediator\",\n  \"headers\": {\n    \"aggregate\": true,\n    \"is-group-topic\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"namespaces.commands:purgeNamespace\",\n    \"namespace\": \"namespaceToPurge\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RetrieveImportResponse JSON Structure\nDESCRIPTION: This JSON structure represents a RetrieveImportResponse message in Eclipse Ditto's API. It contains the topic, correlation ID, path to the imported policy, the value with imported entries, and a 200 status code indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrieveimportresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/imports/org.eclipse.ditto:the_imported_policy_id\",\n  \"value\": {\n    \"entries\" : [\"IMPORTED_ENTRY\"]\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Command Response via MQTT (Bash/JSON)\nDESCRIPTION: This bash command uses mosquitto_pub to publish a command response on the MQTT topic 'control///res/013command-and-controlreplies/200'. The message includes a JSON payload with topic, headers, path, value, and status information.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-12-05-example-command-and-control.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmosquitto_pub -d -h hono.eclipse.org -p 8883 -u 'teapot@org.eclipse.ditto' -P teapot \\\n              -t control///res/013command-and-controlreplies/200 \\\n              -m '{\n                    \"topic\": \"org.eclipse.ditto/teapot/things/live/messages/brew\",\n                    \"headers\": {\n                      \"content-type\": \"application/json\",\n                      \"correlation-id\": \"command-and-control\"\n                    },\n                    \"path\": \"/inbox/messages/brew\",\n                    \"value\": {\n                      \"eta\": 58\n                    },\n                    \"status\": 200\n                  }'\n```\n\n----------------------------------------\n\nTITLE: Source JSON Object Example\nDESCRIPTION: Example of an initial JSON object containing nested fields that will be filtered using JsonFieldSelector.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"thingId\": \"0x1337\",\n    \"foo\": {\n         \"bar\": {\n             \"baz\": 23,\n             \"oogle\": \"boogle\"\n         },\n         \"yo\": 10\n    },\n    \"isOn\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User Entry to nginx.htpasswd File\nDESCRIPTION: Example of how to add a user entry to the nginx.htpasswd file. The format is username:hashed_password.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/openshift/README.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nditto:A6BgmB8IEtPTs\n```\n\n----------------------------------------\n\nTITLE: Requesting Items from a Things Search Subscription in Ditto\nDESCRIPTION: JSON payload for requesting items from a subscription in Eclipse Ditto's twin/search API. The request includes a subscription ID ('24601') and specifies a demand of 3 items to be returned. The topic path indicates this is for the things twin search functionality.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/generated/commands/request-subscription-command.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"_/_/things/twin/search/request\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"subscriptionId\": \"24601\",\n    \"demand\": 3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Resources Response in Eclipse Ditto\nDESCRIPTION: This snippet shows the expected response structure when retrieving policy resources in Eclipse Ditto. It includes the response status, headers, and the retrieved resource data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrieveresources.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/query/retrieveresourcesresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Hostname Configuration in Docker Compose\nDESCRIPTION: An important migration note for Ditto 1.5.0 where MongoDB hostname configuration must be explicitly set using the MONGO_DB_HOSTNAME environment variable, as the default hostname was changed to 'localhost'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_150.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDue to the [consolidation of config files](https://github.com/eclipse-ditto/ditto/pull/888), it is now **required to configure\nthe MongoDB `hostname` explicitly** as the default hostname was changed to `localhost`.<br/>\nPreviously, this hostname was automatically set to `mongodb` (which is the hostname of the MongoDB when e.g. the \n`docker-compose.yaml` deployment is used) in Docker based environments.\n\nThis now has to be manually done via the environment variable `MONGO_DB_HOSTNAME`.\n\nThe default `docker-compose.yaml` was also adjusted accordingly: \n[docker-compose.yml](https://github.com/eclipse-ditto/ditto/blob/master/deployment/docker/docker-compose.yml)\n```\n\n----------------------------------------\n\nTITLE: Authorization Subject Format\nDESCRIPTION: JSON structure showing the format of generated authorization subjects for OpenID Connect authentication.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subjects\": {\n    \"<provider>:<auth-subject-0>\": {\n      \"type\": \"generated\"\n    },\n    \"<provider>:<auth-subject-n>\": {\n      \"type\": \"generated\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Created Thing Response Structure\nDESCRIPTION: Response structure when a merge operation results in creating a new Thing. It includes topic, path, value, and status fields.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-merge.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      |        | Value                                                                                                                    |\n|------------|--------|--------------------------------------------------------------------------------------------------------------------------|\n| **topic**  |        | `<namespace>/<thingName>/things/<channel>/commands/create`                                                               |\n| **path**   |        | `/`                                                                                                                      |\n| **value**  |        | The created Thing as JSON object, see [Ditto protocol payload (JSON)](protocol-specification.html#dittoProtocolPayload). |\n| **status** | _code_ |\n|            | `201`  | Success - the Thing was created successfully.                                                                            |\n```\n\n----------------------------------------\n\nTITLE: Merging Thing Command in Eclipse Ditto\nDESCRIPTION: The purpose of this JSON snippet is to define the response structure for a merge command on a thing's twin within Eclipse Ditto. It includes a topic indicating the target resource, headers for maintaining command context via a correlation ID, and a path indicating the command's target. The status 204 signifies that the command was processed successfully without returning content. No external dependencies are required.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergethingresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing_53/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Entries JSON Response in Eclipse Ditto\nDESCRIPTION: Example JSON response for a policy entries retrieval operation in Eclipse Ditto. The response includes policy entries with their respective subjects and resources, showing permissions granted and revoked for specific paths. The structure contains policy labels, subject details, and resource permissions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrievepolicyentriesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries\",\n  \"value\": {\n    \"another_label\": {\n      \"subjects\": {\n        \"google:the_subjectid\": {\n          \"type\": \"yourSubjectTypeDescription\"\n        }\n      },\n      \"resources\": {\n        \"thing:/the_resource_path\": {\n          \"grant\": [\n            \"READ\",\n            \"WRITE\"\n          ],\n          \"revoke\": []\n        }\n      }\n    },\n    \"the_label\": {\n      \"subjects\": {\n        \"google:the_subjectid\": {\n          \"type\": \"yourSubjectTypeDescription\"\n        }\n      },\n      \"resources\": {\n        \"thing:/the_resource_path\": {\n          \"grant\": [\n            \"READ\",\n            \"WRITE\"\n          ],\n          \"revoke\": []\n        }\n      }\n    }\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Kubectl Node Status\nDESCRIPTION: Sample output of the kubectl get nodes command showing a successful k3s installation with one node that has control-plane and master roles.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/k3s/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\nNAME              STATUS   ROLES                  AGE     VERSION\n<your-hostname>   Ready    control-plane,master   5h21m   v1.20.2+k3s1\n```\n\n----------------------------------------\n\nTITLE: New RQL Case-Insensitive Search Operator\nDESCRIPTION: Introduction of a new RQL operator 'ilike' for performing case-insensitive searches in Ditto\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2023-03-08-release-announcement-320.md#2025-04-17_snippet_0\n\nLANGUAGE: rql\nCODE:\n```\nilike\n```\n\n----------------------------------------\n\nTITLE: Checking Ditto Health Status\nDESCRIPTION: curl command to verify if Ditto is running properly by accessing its health endpoint using devops credentials.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/k3s/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u devops --request GET localhost:30080/status/health\n```\n\n----------------------------------------\n\nTITLE: Example Thing JSON Structure\nDESCRIPTION: This JSON snippet shows the structure of a sample thing used in the examples. It includes attributes, features for carbon monoxide level and alarm, and a connection status.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-11-04-live-message-conditions.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"org.eclipse.ditto:carbon-monoxide-alarm\",\n  \"policyId\": \"org.eclipse.ditto:carbon-monoxide-alarm\",\n  \"attributes\": {\n    \"manufacturer\": \"ACME demo corp.\",\n    \"location\": \"Wonderland\",\n    \"serialno\": \"42\"\n  },\n  \"features\": {\n    \"carbon-monoxide-level\": {\n      \"properties\": {\n        \"ppm,\": 2\n      }\n    },\n    \"alarm\": {\n      \"properties\": {\n        \"lastTriggered\": \"2021-09-23T07:01:56Z\",\n        \"confirmed\": false\n      }\n    }\n  },\n  \"ConnectionStatus\": {\n    \"definition\": [\n      \"org.eclipse.ditto:ConnectionStatus:1.0.0\"\n    ],\n    \"properties\": {\n      \"status\": {\n        \"readySince\": \"2022-11-04T14:35:02.643Z\",\n        \"readyUntil\": \"2022-11-04T16:35:03.643Z\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merged Attributes Response Structure\nDESCRIPTION: Response structure after successfully merging all attributes of a Thing. It includes topic, path, and status fields.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-merge.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      |        | Value                                                     |\n|------------|--------|-----------------------------------------------------------|\n| **topic**  |        | `<namespace>/<thingName>/things/<channel>/commands/merge` |\n| **path**   |        | `/attributes`                                             |\n| **status** | _code_ |                                                           | \n|            | `204`  | Success - attributes were merged successfully.            |\n```\n\n----------------------------------------\n\nTITLE: String Encoding Functions\nDESCRIPTION: Functions for URL and Base64 encoding/decoding of strings.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-placeholders.md#2025-04-17_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nfn:url-encode()\nfn:url-decode()\nfn:base64-encode()\nfn:base64-decode()\n```\n\n----------------------------------------\n\nTITLE: Installing Jekyll Dependencies on Unix\nDESCRIPTION: Commands to install required dependencies and gems for Jekyll on Unix systems, including support for proxy configuration.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential ruby-dev libcurl3 zlib1g-dev\nsudo gem install [--http-proxy http://localhost:3128] jekyll\nsudo gem install [--http-proxy http://localhost:3128] jekyll-sitemap\nsudo gem install [--http-proxy http://localhost:3128] html-proofer\n```\n\n----------------------------------------\n\nTITLE: Cancelling Subscription Using Eclipse Ditto in JSON\nDESCRIPTION: This JSON snippet is used to cancel a subscription in the Eclipse Ditto platform. It specifies a subscription ID under specific topic paths and headers, employing a content type of application/json. The key parameter is the \\\"subscriptionId\\\", which identifies the subscription to be cancelled. The input is a JSON object, and the output is a server response confirming the cancellation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/generated/commands/cancel-subscription-command.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"topic\": \"_/_/things/twin/search/cancel\", \"headers\": {\"content-type\": \"application/json\"}, \"path\": \"/\", \"value\": {\"subscriptionId\": \"24601\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Things Service Environment Variables\nDESCRIPTION: Example of configuring environment variables for the Things service in Ditto\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/ditto/README.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nthings:\n  # ...\n  extraEnv:\n    - name: LOG_INCOMING_MESSAGES\n      value: \"false\"\n```\n\n----------------------------------------\n\nTITLE: Generating Invalid Thing ID Error Response in JSON for Eclipse Ditto\nDESCRIPTION: This JSON snippet represents the error response structure when an invalid Thing ID is provided in Eclipse Ditto. It includes the topic, headers, path, error details, and HTTP status code. The error provides information about the invalid ID and directs users to the documentation for correct formatting.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_id_invalid.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 400,\n    \"error\": \"things:id.invalid\",\n    \"message\": \"Thing ID 'invalid id' is not valid!\",\n    \"description\": \"It must conform to the namespaced entity ID notation (see Ditto documentation)\",\n    \"url\": \"https://www.eclipse.dev/ditto/basic-namespaces-and-names.html#namespaced-id\"\n  },\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMap for MMock Configuration\nDESCRIPTION: Kubernetes command to create a ConfigMap from Monster Mock configuration files. This ConfigMap will be used by the MMock instance in the Kubernetes cluster.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/benchmark-tool/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create configmap mmock-config --from-file mmock/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Imports Command in JSON for Eclipse Ditto\nDESCRIPTION: JSON command structure for retrieving imports from a policy in Eclipse Ditto. The command includes the topic with policy ID, required headers with correlation ID, and the path specifying the imports resource.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrieveimports.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/imports\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Confirmation with Custom Acknowledgment Label\nDESCRIPTION: Example of a Ditto Protocol message that requests confirmation that a backend application received the notification. Uses a custom acknowledgment label from an HTTP connection and includes a timeout parameter.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-10-23-end-2-end-acknowledgement.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/my-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"response-required\": false,\n    \"requested-acks\": [\"d45d4522-142e-4057-ae87-8969343a3ddc:backend-processed\"],\n    \"timeout\": \"30s\"\n  },\n  \"path\": \"/features/alarm/properties/status\",\n  \"value\": \"on\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Sidebar Definition\nDESCRIPTION: Specifies the sidebar to be used for this HTML page. It refers to 'ditto_sidebar', suggesting a common sidebar configuration for the Ditto project documentation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_wot.md#2025-04-17_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n\"sidebar: ditto_sidebar\"\n```\n\n----------------------------------------\n\nTITLE: Running Ditto Benchmark Test with xk6-kafka Locally\nDESCRIPTION: Command to execute the Ditto benchmark test locally using the xk6-kafka binary. This runs the k6 test script against a local Ditto installation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/benchmark-tool/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n${xk6-kakfa-bin} run test/k6-test.js\n```\n\n----------------------------------------\n\nTITLE: Including Ditto SVG Image in Markdown\nDESCRIPTION: This snippet demonstrates how to include the Ditto SVG image in a markdown file using a custom Jekyll include directive.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-02-07-milestone-announcement-020-M1.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include image.html file=\"ditto.svg\" alt=\"Ditto\" max-width=500 %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fire and Forget with Ditto Protocol\nDESCRIPTION: Example of a Ditto Protocol message configured for fire and forget semantics, where the device doesn't need confirmation of persistence or delivery. Uses empty requested-acks array and response-required set to false.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-10-23-end-2-end-acknowledgement.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/my-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"response-required\": false,\n    \"requested-acks\": []\n  },\n  \"path\": \"/features/lightSwitch/properties/status\",\n  \"value\": \"on\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Thing Response - Protocol Format\nDESCRIPTION: Response format specification for Thing deletion, including topic structure and status codes.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-delete.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Field      |        | Value                    |\n|------------|--------|---------------------------|\n| **topic**  |        | `<namespace>/<thingName>/things/<channel>/commands/delete` |\n| **path**   |        | `/`                      |\n| **status** | _code_ |                          | \n|            | `204`  | Success - the Thing was deleted successfully.       |\n```\n\n----------------------------------------\n\nTITLE: Verifying k3s Node Status\nDESCRIPTION: Command to check that kubectl is properly configured and the k3s node is running.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/k3s/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Preparing Kubernetes Environment for Ditto\nDESCRIPTION: Creates a namespace for Ditto and updates Helm dependencies.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/azure/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nk8s_namespace=dittons\nkubectl create namespace $k8s_namespace\nhelm dependency update ../helm/eclipse-ditto/\n```\n\n----------------------------------------\n\nTITLE: Including Modify Feature Properties Response in Markdown\nDESCRIPTION: This snippet includes the content of a Markdown file containing the modify feature properties response example.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createproperties.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyfeaturepropertiesresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Configuration of WoT Thing Model Validation in HOCON\nDESCRIPTION: Example of dynamic configuration for Thing Model validation in Ditto using HOCON format. This configuration allows overriding validation behavior based on specific patterns in headers, Thing definitions, and Feature definitions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_13\n\nLANGUAGE: hocon\nCODE:\n```\nthings {\n  wot {\n    tm-model-validation {\n      enabled = true\n\n      dynamic-configuration = [\n        {\n          validation-context {\n            // all 3 \"patterns\" conditions have to match (AND)\n            ditto-headers-patterns = [      // if any (OR) of the contained headers block match\n              {\n                // inside the object, all patterns have to match (AND)\n                ditto-originator = \"^pre:ditto$\"\n              }\n            ]\n            thing-definition-patterns = [   // if any (OR) of the contained patterns match\n              \"^https://eclipse-ditto.github.io/ditto-examples/wot/models/floor-lamp-1.0.0.tm.jsonld$\"\n            ]\n            feature-definition-patterns = [ // if any (OR) of the contained patterns match\n            ]\n          }\n          // if the validation-context \"matches\" a processed API call, apply the following overrides:\n          config-overrides {\n            // enabled = false // we could deactivate the complete WoT Thing Model validation with this config\n            thing {\n              // disable some aspects of Thing validation\n              enforce {\n                attributes = false\n              }\n              forbid {\n                thing-description-deletion = false\n              }\n            }\n            feature {\n              // disable some aspects of Feature validation\n              enforce {\n                properties = false\n              }\n              forbid {\n                feature-description-deletion = false\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Persisted Events via Ditto Protocol\nDESCRIPTION: Protocol message for initiating a subscription to historical events of a thing, specifying revision range from 1 to 10.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-history.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/thing-2/things/twin/streaming/subscribeForPersistedEvents\",\n  \"path\": \"/\",\n  \"headers\": {},\n  \"value\": {\n    \"fromHistoricalRevision\": 1,\n    \"toHistoricalRevision\": 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Payload Mapper for Message Encoding\nDESCRIPTION: JavaScript function to map Ditto protocol messages to byte-encoded payloads for compatibility with the Azure IoT device client. Converts JSON messages to octet-stream format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-03-22-azure-iot-hub-integration.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapFromDittoProtocolMsg(\n  namespace,\n  name,\n  group,\n  channel,\n  criterion,\n  action,\n  path,\n  dittoHeaders,\n  value,\n  status,\n  extra\n) {\n\n  let headers = dittoHeaders;\n  let textPayload = null;\n  let bytePayload = Ditto.stringToArrayBuffer(Ditto.buildDittoProtocolMsg(namespace, name, group, channel, criterion, action, path, dittoHeaders, value).toString());\n  let contentType = 'application/octet-stream';\n\n  return Ditto.buildExternalMsg(\n    headers,\n    textPayload,\n    bytePayload,\n    contentType\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: String Case Functions\nDESCRIPTION: Functions for converting string case to uppercase or lowercase.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-placeholders.md#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nfn:lower()\nfn:upper()\n```\n\n----------------------------------------\n\nTITLE: Modify Single Policy Import Response Structure\nDESCRIPTION: Response structure for creating or modifying a single policy import, including status codes for creation and update scenarios.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/modify\",\n  \"path\": \"/imports/<importedPolicyId>\",\n  \"value\": \"<policy_import_json>\",\n  \"status\": {\n    \"code\": \"201|204\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown for Feature Deleted Event\nDESCRIPTION: This snippet includes a Markdown file containing the event generated when a feature is deleted in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletefeature.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/featuredeleted.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Example Status After Completion of Background Sync\nDESCRIPTION: This JSON snippet shows the status of the background sync process after it has completed, confirming that the reindexing has successfully finished.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_300.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"label\": \"backgroundSync\", \"status\": \"UP\", \"details\": [{\"INFO\": {\"enabled\": true, \"events\": [{\"2022-08-25T02:13:07.695990296Z\": \"WOKE_UP\"},{\"2022-08-25T02:05:07.679251051Z\": \"Stream terminated. Result=<Done> Error=<null>\"}], \"progressPersisted\": \":_\", \"progressIndexed\": \":_\"}}]} }\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes ConfigMap for Test Environment Variables\nDESCRIPTION: Kubernetes command to create a ConfigMap from the test.env file containing environment variables. These variables configure the behavior of the benchmark test.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/benchmark-tool/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create configmap k6-ditto-benchmark --from-env-file test.env\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Namespace for Ditto\nDESCRIPTION: Creates a new namespace called 'ditto' in Kubernetes cluster for Ditto deployment\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/ditto/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create namespace ditto\n```\n\n----------------------------------------\n\nTITLE: Jekyll Include Event Template\nDESCRIPTION: Template code to include generated markdown file containing feature property deleted event documentation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deleteproperty.md#2025-04-17_snippet_2\n\nLANGUAGE: jekyll\nCODE:\n```\n{% capture event %}{% include_relative generated/events/featurepropertydeleted.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Example of WoT Validation Error for Missing Non-Optional Properties in JSON\nDESCRIPTION: Error response when attempting to update all feature properties without providing values for non-optional properties. The validation details list all the missing required properties that must be provided.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 400,\n  \"error\": \"wot:payload.validation.error\",\n  \"message\": \"The provided payload did not conform to the specified WoT (Web of Things) model.\",\n  \"description\": \"Required JSON fields were missing from the Feature <sensor>'s properties\",\n  \"validationDetails\": {\n    \"/features/sensor/properties/value\": [\n      \"Feature <sensor>'s property <value> is non optional and must be provided\"\n    ],\n    \"/features/sensor/properties/updatedAt\": [\n      \"Feature <sensor>'s property <updatedAt> is non optional and must be provided\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Non-deletable Thing ID\nDESCRIPTION: Shows the JSON structure of an error response when attempting to delete a Thing ID. The response includes the error code 'things:id.notdeletable' with HTTP status 400, indicating that Thing IDs cannot be deleted from the system.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_id_notdeletable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"response-required\": false,\n    \"content-type\": \"application/json\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 400,\n    \"error\": \"things:id.notdeletable\",\n    \"message\": \"The Thing ID of a Thing cannot be deleted.\",\n    \"description\": \"Remove the Thing ID entry from the request body and retry the request.\"\n  },\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Ditto Search Failed Event Structure\nDESCRIPTION: JSON schema reference for the payload of a failed search event. The payload contains the reason for the failure.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-search.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% include docson.html schema=\"jsonschema/protocol-search-failed-payload.json\" %}\n```\n\n----------------------------------------\n\nTITLE: Query Cleanup Coordinator Configuration\nDESCRIPTION: JSON payload for retrieving the current configuration of the background cleanup coordinator.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/user/<SERVICE_NAME>Root/persistenceCleanup\",\n  \"headers\": {},\n  \"piggybackCommand\": {\n    \"type\": \"common.commands:retrieveConfig\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining URI Variables for Ditto API in JSON\nDESCRIPTION: This snippet defines URI variables for the Ditto API, including channel selection, timeout settings, response requirements, and field selection.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration-example.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"uriVariables\": {\n  \"channel\": {\n    \"type\": \"string\",\n    \"title\": \"The Ditto channel to interact with.\",\n    \"description\": \"Defines to which channel to route the command: 'twin' (digital twin) or 'live' (the device).\",\n    \"enum\": [\n      \"twin\",\n      \"live\"\n    ],\n    \"default\": \"twin\"\n  },\n  \"timeout\": {\n    \"type\": \"integer\",\n    \"title\": \"The timeout to apply.\",\n    \"description\": \"Defines how long the backend should wait (in seconds) for completion of the request. A value of '0' applies fire and forget semantics for the command.\",\n    \"minimum\": 0,\n    \"maximum\": 60,\n    \"default\": 60\n  },\n  \"response-required\": {\n    \"type\": \"boolean\",\n    \"title\": \"If a response is required.\",\n    \"description\": \"Defines whether a response is required to the API call or not.\",\n    \"default\": true\n  },\n  \"fields\": {\n    \"type\": \"string\",\n    \"title\": \"Fields to select.\",\n    \"description\": \"Contains a comma-separated list of fields (e.g. property names) to be included in the returned JSON.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Deployment\nDESCRIPTION: Command to stop and remove Docker containers used for the Ditto deployment.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-04-16-connecting-to-ttn-via-mqtt.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose down\n```\n\n----------------------------------------\n\nTITLE: HTML Permalink Definition\nDESCRIPTION: Defines the permanent URL for this HTML page. This ensures that the page can always be accessed at the same address.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_wot.md#2025-04-17_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n\"permalink: tag_wot.html\"\n```\n\n----------------------------------------\n\nTITLE: Simple Entity Creation Grant Configuration\nDESCRIPTION: Minimal configuration to allow all entity creation access.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_9\n\nLANGUAGE: hocon\nCODE:\n```\nditto.entity-creation {\n  grant = [{}]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Ditto with Maven\nDESCRIPTION: Commands to build the Ditto project from source using Maven. The first command runs a full build including tests, while the second command skips tests for faster builds.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install\n```\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -DskipTests\n```\n\n----------------------------------------\n\nTITLE: Starting Ditto Cluster with Docker Compose\nDESCRIPTION: Commands to change directory, set the external port for Ditto, and start the Ditto cluster using Docker Compose in detached mode.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-04-16-connecting-to-ttn-via-mqtt.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ditto/deployment/docker/\nexport DITTO_EXTERNAL_PORT=80\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Azure IoT Hub Direct Method Format\nDESCRIPTION: Example JSON structure for Azure IoT Hub direct method calls showing the required format with method name, timeout, and payload.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"methodName\": \"reboot\",\n    \"responseTimeoutInSeconds\": 200,\n    \"payload\": {\n        \"input1\": \"someInput\",\n        \"input2\": \"anotherInput\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of WoT Validation Error for Missing Required Properties in JSON\nDESCRIPTION: Error response when required fields of a WoT property object are missing. The validation details point to the specific property path and list all the required properties that were not found.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 400,\n  \"error\": \"wot:payload.validation.error\",\n  \"message\": \"The provided payload did not conform to the specified WoT (Web of Things) model.\",\n  \"description\": \"The Feature <connectivity>'s property </status> contained validation errors, check the validation details.\",\n  \"validationDetails\": {\n    \"/features/connectivity/properties/status\": [\n      \": {required=[required property 'updatedAt' not found, required property 'message' not found]}\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Source Header Mapping for AMQP Message Annotation\nDESCRIPTION: Configuration for mapping AMQP message annotation 'to' to Ditto protocol header 'reply-to'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-amqp10.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headerMapping\": {\n    \"reply-to\": \"{{ header:amqp.message.annotation:to }}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Subscribing to Smoke Alarm Messages\nDESCRIPTION: Example endpoint showing how to subscribe to 'smoke-alarm' messages from a specific Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/things/org.eclipse.ditto:thing-1/outbox/messages/smoke-alarm\n```\n\n----------------------------------------\n\nTITLE: JavaScript Payload Mapping for AWS SNS in Eclipse Ditto\nDESCRIPTION: JavaScript function for outgoing payload mapping in the AWS SNS connection. It computes the query string and sets it via the special header 'http.query' for AWS SNS HTTP API compatibility.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapFromDittoProtocolMsg(namespace,name,group,channel,criterion,\n                                 action,path,dittoHeaders,value,status,extra) {\n  let textPayload = JSON.stringify(Ditto.buildDittoProtocolMsg(namespace, name,\n      group, channel, criterion, action, path, dittoHeaders, value, status, extra));\n  let query = 'Action=Publish&Message=' + encodeURIComponent(textPayload) +\n      '&Subject=ThingModified&TopicArn=<sns-topic-arn>';\n  let headers = { \"http.query\": query };\n  return Ditto.buildExternalMsg(headers, '', null, 'text/plain');\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unmodifiable Desired Property in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON snippet shows the structure of an error response when a user tries to modify a desired property of a feature in a Thing without the necessary WRITE permissions. It includes details such as the error code, message, and a description of the issue.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_desired_property_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"things:feature.desiredProperty.notmodifiable\",\n    \"message\": \"The desired property with JSON Pointer '/x' of the Feature with ID 'accelerometer' on the Thing with ID 'org.eclipse.ditto:fancy-thing' could not be modified as the requester had insufficient permissions to modify it (WRITE is required).\",\n    \"description\": \"Check if the ID of the Thing, the Feature ID and the key of your requested desired property was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Generating AES Key for Connection Encryption\nDESCRIPTION: Java code example for generating a 256-bit AES symmetric key for connection field encryption.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n        javax.crypto.KeyGenerator keyGen=KeyGenerator.getInstance(\"AES\");\n        keyGen.init(256);\n        javax.crypto.SecretKey aes256SymetricKey = keyGen.generateKey();\n```\n\n----------------------------------------\n\nTITLE: Defining Merge Command Response in JSON\nDESCRIPTION: This snippet provides the JSON structure for a command response related to merging actions in Eclipse Ditto. It includes a correlation ID in the headers, specifies the command's topic, and indicates a successful operation with a 204 status code. The expected input is a valid merge command issued to a defined thing, and the output is the JSON formatted response.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletethingdefinitionresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/definition\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Thing Definition Response - JSON\nDESCRIPTION: This JSON snippet represents a successful response (status 204) to a command that merges data into the /definition section of a thing's twin in Eclipse Ditto. The response includes a topic indicating the command type and target thing, headers containing a correlation ID for matching the response to the original command, and the path to the merged section.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergethingdefinitionresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/definition\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling WoT Integration in Eclipse Ditto via Environment Variable\nDESCRIPTION: This snippet shows how to disable the WoT integration feature in Eclipse Ditto by setting an environment variable. This should be configured for all Ditto services if WoT integration is not desired.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDITTO_DEVOPS_FEATURE_WOT_INTEGRATION_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Thing Response Message\nDESCRIPTION: Example response message from the smart coffee machine Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-messages.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nI do not know, since i am only a coffee machine.\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Service Bus HTTP Connection\nDESCRIPTION: JSON configuration for establishing an HTTP connection to Azure Service Bus for forwarding live messages to a queue.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-hmac-signing.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"00000000-0000-0000-0000-000000000000\",\n  \"name\": \"Azure Service Bus HTTP\",\n  \"connectionType\": \"http-push\",\n  \"connectionStatus\": \"open\",\n  \"uri\": \"https://<hostname>:443\",\n  \"sources\": [],\n  \"targets\": [{\n    \"address\": \"POST:/<queue-name>/messages\",\n    \"topics\": [\"_/_/things/live/messages\"],\n    \"authorizationContext\": [\"integration:ditto\"],\n    \"issuedAcknowledgementLabel\": \"live-response\",\n    \"headerMapping\": {}\n  }\n  ],\n  \"clientCount\": 1,\n  \"failoverEnabled\": true,\n  \"validateCertificates\": true,\n  \"processorPoolSize\": 5,\n  \"specificConfig\": {\n    \"parallelism\": \"1\"\n  },\n  \"credentials\": {\n    \"type\": \"hmac\",\n    \"algorithm\": \"az-sasl\",\n    \"parameters\": {\n      \"sharedKeyName\": \"<shared-access-policy-name>\",\n      \"sharedKey\": \"<base64-encoded-shared-key>\",\n      \"endpoint\": \"https://<hostname>/<queue-name>\"\n    }\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ThingDeleted Event Structure in JSON for Eclipse Ditto\nDESCRIPTION: This JSON snippet illustrates the structure of a ThingDeleted event in Eclipse Ditto. It includes the topic, headers with a correlation ID, path, and revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/thingdeleted.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/deleted\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Nested Value with Keys\nDESCRIPTION: Shows how to retrieve a value from a nested JsonObject using a chain of getValue() calls with keys. This approach requires multiple filter and map operations to navigate the hierarchy and handle potential missing values or type mismatches.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nint subsel = thingJsonObject.getValue(\"attributes\")\n    .filter(JsonValue::isObject)\n    .map(JsonValue::asObject)\n    .flatMap(attributesJsonObject -> attributesJsonObject.getValue(\"someAttr\"))\n    .filter(JsonValue::isObject)\n    .map(JsonValue::asObject)\n    .flatMap(someAttrJsonObject -> someAttrJsonObject.getValue(\"subsel\"))\n    .filter(JsonValue::isNumber)\n    .map(JsonValue::asInt)\n    .orElse(0);\n```\n\n----------------------------------------\n\nTITLE: String Substring Functions\nDESCRIPTION: Functions for extracting substrings before or after a given delimiter.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-placeholders.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nfn:substring-before(':')\nfn:substring-before(\":\")\nfn:substring-after(':')\nfn:substring-after(\":\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Things Features Not Modifiable Error Response in JSON\nDESCRIPTION: This JSON snippet shows the structure of an error response when a user tries to modify features of a Thing without the required WRITE permission. It includes details such as the error code, status, message, and a description for troubleshooting.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_features_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"things:features.notmodifiable\",\n    \"message\": \"The Features on the Thing with ID 'org.eclipse.ditto:fancy-thing' cannot be modified as requester had insufficient permissions to modify it (WRITE is required).\",\n    \"description\": \"Check if the ID of the Thing was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Filter for Fire Alarm App\nDESCRIPTION: This command configures a WebSocket filter for the fire alarm application. It filters for events where the temperature property in the environmentSensor feature exceeds 90 degrees.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-09-21-selective-push-notifications.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nSTART-SEND-EVENTS?filter=gt(features/environmentSensor/properties/temperature,90)\n```\n\n----------------------------------------\n\nTITLE: Policy Entry Not Modifiable Error Response in JSON\nDESCRIPTION: Standard error response format when a policy entry modification is rejected due to insufficient permissions. The response includes error details, status code, and guidance for resolution.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_entry_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"policies:entry.notmodifiable\",\n    \"message\": \"The PolicyEntry with Label 'the_label' on the Policy with ID 'org.eclipse.ditto:the_policy_id' could not be modified as the requester had insufficient permissions.\",\n    \"description\": \"Check if the ID of the Policy and the Label of your requested PolicyEntry was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: RQL Filter Translation Example - Wildcard Feature\nDESCRIPTION: Example of translated RQL filter for querying properties across all features with authorization checks.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0008-wildcard-search-index.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"f\": {\n  \"$elemMatch\": {\n    \"$and\": [\n      { \"properties.x\": { \"$gt\": 3 } },\n      { \"p.properties.x.·r\": { \"$nin\": [ \"request:subject\" ] } },\n      { \"$or\": [\n        { \"p.properties.x.·g\": { \"$in\": [ \"request:subject\" ] } },\n        { \"$and\": [\n          { \"p.properties.·r\": { \"$nin\": [ \"request:subject\" ] } },\n          { \"$or\": [\n            { \"p.properties.·g\": { \"$in\": [ \"request:subject\" ] } },\n            { \"$and\": [\n              { \"p.id.·r\": { \"$nin\": [ \"request:subject\" ] } },\n              { \"$or\": [\n                {  \"p.id.·g\": { \"$in\": [ \"request:subject\" ] } },\n                { \"$and\": [\n                  { \"p.features.·r\": { \"$nin\": [ \"request:subject\" ] } },\n                  { \"$or\": [\n                    { \"p.features.·g\": { \"$in\": [ \"request:subject\" ] } },\n                    { \"$and\": [\n                      { \"p.·r\": { \"$nin\": [ \"request:subject\" ] } },\n                      { \"$or\": [\n                        { \"p.·g\": { \"$in\": [ \"request:subject\" ] } }\n                      ]}\n                    ]}\n                  ]}\n                ]}\n              ]}\n            ]}\n          ]}\n        ]}\n      ]}\n    ]}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FeatureDesiredPropertiesModified Event JSON Structure\nDESCRIPTION: This JSON example represents the structure of a FeatureDesiredPropertiesModified event in Eclipse Ditto. The event indicates that the desired properties of the 'accelerometer' feature of a thing named 'fancy-thing' have been modified. The event includes the updated values for x, y, z coordinates and the unit.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featuredesiredpropertiesmodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"value\": {\n    \"x\": 4,\n    \"y\": 3,\n    \"z\": 5,\n    \"unit\": \"g\"\n  },\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Property Using Merge Command in Eclipse Ditto\nDESCRIPTION: This JSON payload demonstrates how to use the merge command to delete a specific property ('x') from the 'accelerometer' feature's properties. The command uses null as the value to indicate deletion and includes required headers and path specification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeatureproperty.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Adding @since Javadoc Annotation for New API in Java\nDESCRIPTION: Demonstrates how to add the @since annotation in Javadoc when introducing new public API in Eclipse Ditto. This helps track when new features were added.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0005-semantic-versioning.md#2025-04-17_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n/**\n * Returns the extra information which enriches the actual value of this change.\n * \n * @return the extra data or an empty Optional.\n * @since 1.1.0\n */\nOptional<JsonObject> getExtra();\n```\n\n----------------------------------------\n\nTITLE: Defining DeletePolicyEntryResponse Structure in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents the response to a delete policy entry command in Eclipse Ditto. It includes the topic, headers with a correlation ID, the path of the deleted entry, and a status code indicating successful deletion.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/deletepolicyentryresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Filter for Thermostat App\nDESCRIPTION: This command configures a WebSocket filter for the thermostat application. It filters for change events on twins that have either temperature or humidity properties in their environmentSensor feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-09-21-selective-push-notifications.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSTART-SEND-EVENTS?filter=or(exists(features/environmentSensor/properties/temperature),exists(features/environmentSensor/properties/humidity))\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Policy Entry Modification in Eclipse Ditto\nDESCRIPTION: JSON structure of the error response when a policy entry modification would result in an invalid policy. The error occurs with status code 403 (Forbidden) when attempting to modify a policy in a way that would remove all entries with 'WRITE' permissions on resource 'policy:/'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_entry_modificationinvalid.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"policies:entry.modificationinvalid\",\n    \"message\": \"The PolicyEntry with Label 'the_label' on the Policy with ID 'org.eclipse.ditto:the_policy_id' could not be modified as the resulting Policy would be invalid.\",\n    \"description\": \"There must always be at least one PolicyEntry with 'WRITE' permissions on resource 'policy:/'.\" \n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Request with HTTP Header\nDESCRIPTION: This example demonstrates how to send a conditional request using an HTTP header to specify the condition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2022-11-04-live-message-conditions.md#2025-04-17_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /api/2/things/org.eclipse.ditto:carbon-monoxide-alarm/outbox/messages/co-alarm\nContent-Type: application/json\ncondition: eq(features/alarm/properties/confirmed,false)\n\nCO Level too high! Open your windows!\n```\n\n----------------------------------------\n\nTITLE: Including Merge Attributes Response in Markdown\nDESCRIPTION: This snippet includes the content of a separate Markdown file containing the merge attributes response example.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeattributes.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/merge/mergeattributesresponse.md %}{% endcapture %} {{\nresponse | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection Metrics with curl in Bash\nDESCRIPTION: This command retrieves connection metrics for a specific connection by sending a POST request to the Ditto devops piggyback API. It targets the connection actor and uses the retrieveConnectionMetrics command.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST -i -u devops:devopsPw1! -H 'Content-Type: application/json' -d '{\n    \"targetActorSelection\": \"/system/sharding/connection\",\n    \"headers\": {\n        \"aggregate\": false\n    },\n    \"piggybackCommand\": {\n        \"type\": \"connectivity.commands:retrieveConnectionMetrics\",\n        \"connectionId\": \"hono-sandbox-connection-1\"\n    }\n}' https://ditto.eclipseprojects.io/devops/piggyback/connectivity?timeout=8s\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unauthorized Policy Subject Modification in Eclipse Ditto\nDESCRIPTION: This JSON example shows the error response format when a user attempts to modify a Subject within a Policy but lacks the required permissions. The response includes the error code, status code 403 (Forbidden), details about the specific subject that couldn't be modified, and guidance for resolving the issue.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_subject_notmodifiable.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 403,\n    \"error\": \"policies:subject.notmodifiable\",\n    \"message\": \"The Subject with ID 'google:the_subjectid' of the PolicyEntry with Label 'the_label' on the Policy with ID 'org.eclipse.ditto:the_policy_id' could not be modified as the requester had insufficient permissions.\",\n    \"description\": \"Check if the ID of the Policy, the Label of the PolicyEntry and ID of your requested Subject was correct and you have sufficient permissions.\"\n  },\n  \"status\": 403\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Jekyll Documentation Locally\nDESCRIPTION: Commands to install bundle dependencies and start local Jekyll server with monitoring at http://localhost:4000.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd src/main/resources\nbundle install\nbundle exec jekyll serve --verbose --unpublished\n```\n\n----------------------------------------\n\nTITLE: Modifying JsonArray with Builder\nDESCRIPTION: Illustrates how to modify an existing JsonArray using JsonArrayBuilder. The example shows how to set a value at a specific index and remove a value at a specific index, resulting in a new JsonArray object.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nJsonArray initialJsonArray = JsonFactory.newArray(\"[\\\"foo\\\", \\\"bar\\\", \\\"baz\\\"]\");\n\nJsonArray newJsonArray = JsonFactory.newArrayBuilder(initialJsonArray)   // or initialJsonArray.toBuilder()\n    .set(2, \"fnord\")\n    .remove(1)\n    .build();\n\n// newJsonArray looks like [\"foo\", \"fnord\"]\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Merging Thing Attributes Location\nDESCRIPTION: Shows the response format when merging thing attributes specifically for the location path. The response includes the topic, correlation ID header, target path, and a 204 status code indicating successful execution.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergeattributeresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Definition Response Format\nDESCRIPTION: Demonstrates the expected response format when retrieving a feature definition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrievedefinition.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/commands/query/retrievefeaturedefinitionresponse.md %}\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Device Data in Hono\nDESCRIPTION: Examples of JSON payloads that a device might send via MQTT to Hono, containing temperature and humidity sensor data in various formats.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"temp\": 23.42,\n  \"hum\": 44.42\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"temp\": 23.42\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hum\": 44.42\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Policy Subject Not Found in Eclipse Ditto\nDESCRIPTION: JSON structure returned when a policy subject cannot be found or when the requester has insufficient permissions. The response includes a 404 status code, error type, descriptive message, and troubleshooting guidance.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/exceptions/policies_subject_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"policies:subject.notfound\",\n    \"message\": \"The Subject with ID 'google:the_subjectid' of the PolicyEntry with Label 'the_label' on the Policy with ID 'org.eclipse.ditto:the_policy_id' could not be found or requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Policy, the Label of the PolicyEntry and ID of your requested Subject was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Entries Page in YAML for Eclipse Ditto\nDESCRIPTION: This YAML configuration sets up the blog entries page for Eclipse Ditto documentation. It specifies the page title, tag for blog entries, search exclusion, permalink structure, sidebar to use, and the folder where tag-related content is stored.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_blog.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Blog entries\"\ntagName: blog\nsearch: exclude\npermalink: tag_blog.html\nsidebar: ditto_sidebar\nfolder: tags\n---\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Desired Properties Command/Response Structure\nDESCRIPTION: Command and response format for retrieving all desired properties of a Feature. Uses namespace, thingName, and featureId as path parameters. Returns desired properties as JSON with HTTP 200 status on success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-retrieve.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nCommand:\\n| Field     | Value                   |\\n|-----------|-------------------------|\\n| **topic** | `<namespace>/<thingName>/things/<channel>/commands/retrieve`     |\\n| **path**  | `/features/<featureId>/desiredProperties`     |\n```\n\n----------------------------------------\n\nTITLE: Conditional Update (Ditto Java Client)\nDESCRIPTION: Demonstrates how to perform a conditional update using the Ditto Java Client. The condition checks if the lastModified timestamp is greater than a specified date.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-conditional-requests.md#2025-04-17_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal Option<String> option =\n        Options.condition(\"gt(features/temperature/properties/lastModified,\\\"2021-08-10T15:10:02.592Z\\\")\");\n        \nclient.twin().forFeature(ThingId.of(\"org.eclipse.ditto:fancy-thing\"), \"temperature\")\n        .putProperty(\"value\", 42, option)\n        .whenComplete((ununsed, throwable) -> {\n            if (throwable != null) {\n                System.out.println(\"Property update was not successfull: \" + throwable.getMessage());\n            } else {\n                System.out.println(\"Updating the property was successful.\");\n            }\n        });\n```\n\n----------------------------------------\n\nTITLE: Generating Error Response for Missing Feature Property in Eclipse Ditto (JSON)\nDESCRIPTION: This JSON structure represents an error response when a requested feature property is not found in a Thing. It includes the topic, headers, path, error details, and HTTP status code. The error provides information about the missing property, its location, and suggestions for troubleshooting.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_feature_property_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"things:feature.property.notfound\",\n    \"message\": \"The Property with JSON Pointer '/x' of the Feature with ID 'accelerometer' on the Thing with ID 'org.eclipse.ditto:fancy-thing' does not exist or the requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the Thing, the Feature ID and the key of your requested property was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Thing Attributes with Field Selector in Eclipse Ditto\nDESCRIPTION: Demonstrates using a field selector to retrieve only the 'attributes' of a Thing. The response includes the entire 'attributes' object with nested properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"manufacturer\": \"ACME corp\",\n    \"complex\": {\n      \"some\": false,\n      \"serialNo\": 4711,\n      \"misc\": \"foo\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binary Payload Example\nDESCRIPTION: Example of binary payload representation from constrained devices.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n0x08BD\n```\n\n----------------------------------------\n\nTITLE: Filtered Event Subscription\nDESCRIPTION: Protocol message for subscribing to historical events with a filter condition.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-history.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/thing-2/things/twin/streaming/subscribeForPersistedEvents\",\n  \"path\": \"/\",\n  \"headers\": {},\n  \"value\": {\n    \"fromHistoricalRevision\": 1,\n    \"toHistoricalRevision\": 10,\n    \"filter\": \"exists(features/bamboo)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionClosedAnnouncement Structure in JSON\nDESCRIPTION: This JSON structure represents a ConnectionClosedAnnouncement in Eclipse Ditto. It includes the topic, headers with content-type, path, and a value object containing the closedAt timestamp.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/connections/generated/announcements/closedConnection.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"_/the_connection_id/connections/announcements/closed\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"closedAt\": \"2021-03-03T16:05:55Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Ditto DevOps Endpoint in OpenShift\nDESCRIPTION: Commands to access Ditto's DevOps endpoint in OpenShift environment by extracting credentials and making authenticated requests.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/ditto/templates/NOTES.txt#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport DEVOPS_PWD=$(kubectl --namespace {{ .Release.Namespace }} get secret {{ include \"ditto.fullname\" . }}-gateway-secret -o jsonpath=\"{.data.devops-password}\" | base64 --decode)\nexport URL=https://devops:${DEVOPS_PWD}@$(kubectl --namespace {{ .Release.Namespace }} get route {{ include \"ditto.fullname\" . }} -o jsonpath=\"{.status.ingress[0].host}\")\ncurl -i -X GET \"$URL/devops\"\n```\n\n----------------------------------------\n\nTITLE: Including Attributes Deleted Event Markdown in Jekyll\nDESCRIPTION: This snippet includes a markdown file containing the attributes deleted event example for the Eclipse Ditto protocol. It uses Jekyll's include_relative directive to insert the content.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deleteattributes.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/attributesdeleted.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Example\nDESCRIPTION: Example of sending a JWT token for authentication via WebSocket protocol message.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-protocol-bindings-websocket.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nJWT-TOKEN?jwtToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Addresses with Placeholders in Ditto\nDESCRIPTION: This JSON snippet shows how to configure target addresses using placeholders. It demonstrates sending live commands and events to a target address that includes the thing's namespace.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-connections.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\": \"target-placeholder-example\",\n   \"targets\": [\n     {\n       \"addresses\": [ \"live/{{ thing:namespace }}\" ],\n       \"authorizationContext\": [\"ditto:auth-subject\"],\n       \"topics\": [ \"_/_/things/live/events\", \"_/_/things/live/commands\" ]\n     }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Merge Thing Attributes Response - JSON\nDESCRIPTION: This JSON snippet represents the response to a 'merge' command targeting the '/attributes/location' path of a Ditto thing. It includes the topic, headers containing a correlation ID, the affected path, and a status code of 204, indicating a successful merge.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeleteattributeresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Ditto Repository\nDESCRIPTION: Git command to clone the Eclipse Ditto repository, which contains the necessary Docker Compose files and resources for running Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-04-16-connecting-to-ttn-via-mqtt.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth 1 https://github.com/eclipse-ditto/ditto.git\n```\n\n----------------------------------------\n\nTITLE: Attributes Created Event in Eclipse Ditto Protocol\nDESCRIPTION: This snippet illustrates the event structure generated when attributes are successfully created in Eclipse Ditto. It includes the topic, headers, and payload of the event.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createattributes.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/attributescreated.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Merging Policy ID Response in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response structure for a successful merge operation of a policy ID in Eclipse Ditto. It includes the HTTP status and response body.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergepolicyid.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/merge/mergepolicyidresponse.md %}{% endcapture %} {{\nresponse | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Configuring kubectl and Deploying Helm\nDESCRIPTION: Sets up kubectl to use the new AKS cluster and deploys Helm with the necessary RBAC configuration.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/azure/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naz aks get-credentials --resource-group $resourcegroup_name --name $aks_cluster_name\nkubectl apply -f helm-rbac.yaml\nhelm init --service-account tiller\n```\n\n----------------------------------------\n\nTITLE: Submodel Element JSON Response\nDESCRIPTION: This JSON snippet represents the expected response when retrieving a Submodel Element from the BaSyx AAS server. It includes information about the parent, idShort, kind, valueType, modelType, and the value of the Submodel Element (properties_value), which is set to 46.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\"parent\":{\"keys\":[{\"idType\":\"Custom\",\"type\":\"Submodel\",\"value\":\"sensor_temperature\",\"local\":true}]},\n```\n\nLANGUAGE: json\nCODE:\n```\n\"idShort\":\"properties_value\",\"kind\":\"Instance\",\"valueType\":\"int\",\"modelType\":{\"name\":\"Property\"},\"value\":46}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Collections for Things-Search Service\nDESCRIPTION: MongoDB collection structure used by the Things-Search service for maintaining search indexes and synchronization status. The service creates two collections: 'search' for the main search index, and 'searchSync' for tracking indexing progress.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/architecture-services-things-search.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* search: The search index.\n* searchSync: A single-document capped collection containing the instant until which Thing events are indexed for sure.\n```\n\n----------------------------------------\n\nTITLE: Merge Thing Command Response for Feature Desired Properties in Eclipse Ditto\nDESCRIPTION: This JSON response indicates a successful merge operation on the desired properties of the accelerometer feature. The response includes the topic path, preserved correlation ID, the specific path that was merged, and a 204 status code indicating success with no content returned.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeletefeaturedesiredpropertiesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Policy Imports Response in Eclipse Ditto\nDESCRIPTION: This snippet shows the expected response structure when modifying policy imports in Eclipse Ditto. It includes the response topic, headers, and status.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-modifyimports.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifyimportsresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Initializing Host Path for Ditto Log Files\nDESCRIPTION: kubectl command to initialize a hostPath for accessing Ditto log files when DITTO_LOGGING_FILE_APPENDER is set to 'true'.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/kubernetes/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f deployment/kubernetes/deploymentFiles/ditto/ditto-log-files.yaml\n```\n\n----------------------------------------\n\nTITLE: Create a Feature for a Thing using cURL\nDESCRIPTION: This snippet demonstrates how to create a feature for a Thing in Eclipse Ditto using a cURL command. It sets the `FEATURE_ID` variable and then uses `curl` to send a PUT request to the Ditto API, creating a feature with a `value` property. The command includes authentication credentials and content type specification.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nFEATURE_ID=temperature\n\ncurl -X PUT -u ditto:ditto -H 'Content-Type: application/json' --data-binary '{ \n  \"properties\": {\n    \"value\": null\n  }\n}' <ditto-instance-url>/api/2/things/$DEVICE_ID/features/$FEATURE_ID\n```\n\n----------------------------------------\n\nTITLE: Policy Commands Implementation Path in Java\nDESCRIPTION: File path to the PolicyCommand interface that defines commands processed by the Policies service.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/architecture-services-policies.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npolicies/model/src/main/java/org/eclipse/ditto/policies/model/signals/commands/PolicyCommand.java\n```\n\n----------------------------------------\n\nTITLE: Defining Delete Attributes Response JSON Structure\nDESCRIPTION: This snippet defines a JSON object representing the response structure for the delete attributes command in the Eclipse Ditto project. It includes the topic, correlation ID in headers, the path of the attributes, and the HTTP status code indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deleteattributesresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Event Structure\nDESCRIPTION: Defines the structure of a Complete event sent when all items of the results are delivered to the client.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-streaming-subscription.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<entityName>/<group>/<channel>/streaming/complete\",\n  \"path\": \"/\",\n  \"value\": \"[subscription-id-object]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown for Delete Feature Response\nDESCRIPTION: This snippet includes a Markdown file containing the response to a delete feature command in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletefeature.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/deletefeatureresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: RQL Filter for Thing Creation in Ditto\nDESCRIPTION: This JSON snippet shows an RQL filter expression used in Ditto to ensure that the 'mappingforShell' payload mapping is only executed for messages that create a Thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2024-02-27-integrating-ditto-aas-basyx.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n_/_/things/twin/events?filter=and(in(topic:action,'\"'created'\"'),eq(resource:path,'\"'/'\"'))\n```\n\n----------------------------------------\n\nTITLE: Delete Attribute Response - JSON\nDESCRIPTION: This JSON snippet represents a successful response (status code 204) to a delete attribute command in Eclipse Ditto. The 'topic' indicates the command type and target thing. The 'path' specifies the attribute that was deleted.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deleteattributeresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Policy using JSON Command in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a DeletePolicy command in Eclipse Ditto. It specifies the topic for policy deletion, includes a correlation ID in the headers, and uses an empty path to indicate the entire policy should be deleted.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/deletepolicy.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Attributes Modified Event Template in Markdown\nDESCRIPTION: This snippet includes a markdown template for the attributes modified event in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyattributes.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/attributesmodified.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Creating Ditto Digital Twin in Bash\nDESCRIPTION: This snippet demonstrates how to create a digital twin in Eclipse Ditto using a curl command. The twin is associated with the previously created policy.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-12-05-example-command-and-control.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# create thing in Ditto\n$ curl -X PUT -i -u demo5:demo -H 'Content-Type: application/json' -d '{\n    \"policyId\": \"org.eclipse.ditto:teapot-policy\",\n    \"features\": {\n      \"water\": {\n        \"properties\": {\n          \"temperature\": 20\n        }\n      }\n    }\n}' https://ditto.eclipseprojects.io/api/2/things/org.eclipse.ditto:teapot\n```\n\n----------------------------------------\n\nTITLE: Including Markdown File for Modify Policy Entry Response in Jekyll/Liquid\nDESCRIPTION: This snippet uses Liquid templating to include an external markdown file containing the response for modifying a policy entry. The included content is then processed through the markdownify filter.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-modifypolicyentry.md#2025-04-17_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/modifypolicyentryresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Policy Entries Response using Markdown\nDESCRIPTION: This snippet captures and renders the response for retrieving policy entries in Eclipse Ditto. Similar to the command snippet, it uses Liquid to dynamically include a markdown file that contains the response structure.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrievepolicyentries.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/query/retrievepolicyentriesresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Things-Search Commands Package Path\nDESCRIPTION: File path to the commands and command responses processed by the Things-Search service.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/architecture-services-things-search.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nthingsearch/model/src/main/java/org/eclipse/ditto/thingsearch/model/signals/commands\n```\n\n----------------------------------------\n\nTITLE: Publishing Telemetry Data via MQTT\nDESCRIPTION: Commands to publish telemetry data (temperature and humidity) to Hono using the MQTT protocol with authentication.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ mosquitto_pub -u 'demo-device-auth@org.eclipse.ditto' -P demo-device-password -t telemetry -m '{\"temp\": 23.07}'\n$ mosquitto_pub -u 'demo-device-auth@org.eclipse.ditto' -P demo-device-password -t telemetry -m '{\"hum\": 45.85}'\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Policy ID Configuration\nDESCRIPTION: Shows the error response structure when attempting to modify a Thing with both an inline Policy containing an ID and a separate Policy ID specification. The error indicates that only one approach should be used - either reference an existing Policy via policyId or create an inline Policy without an ID.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_policyId_notallowed.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 400,\n    \"error\": \"things:policyId.notallowed\",\n    \"message\": \"The Thing with ID 'org.eclipse.ditto:fancy-thing' could not be modified as it contained an inline Policy with an ID or a Policy ID and a Policy\",\n    \"description\": \"If you want to use an existing Policy, specify it as 'policyId' in the Thing JSON. If you want to create a Thing with inline Policy, no Policy ID is allowed as it will be created with the Thing ID.\"\n  },\n  \"status\": 400\n}\n```\n\n----------------------------------------\n\nTITLE: Including Policy Error Response Markdown Files\nDESCRIPTION: This snippet demonstrates the inclusion of multiple markdown files containing policy error response examples using Jekyll's include directive and markdownify filter.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-errorresponses.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture policy_id_invalid %}{% include_relative generated/exceptions/policies_id_invalid.md %}{% endcapture %}\n{{ policy_id_invalid | markdownify }}\n\n{% capture policies_policy_conflict %}{% include_relative generated/exceptions/policies_policy_conflict.md %}{% endcapture %}\n{{ policies_policy_conflict | markdownify }}\n\n{% capture policies_policy_modificationinvalid %}{% include_relative generated/exceptions/policies_policy_modificationinvalid.md %}{% endcapture %}\n{{ policies_policy_modificationinvalid | markdownify }}\n\n{% capture policies_policy_notfound %}{% include_relative generated/exceptions/policies_policy_notfound.md %}{% endcapture %}\n{{ policies_policy_notfound | markdownify }}\n\n{% capture policies_policy_notmodifiable %}{% include_relative generated/exceptions/policies_policy_notmodifiable.md %}{% endcapture %}\n{{ policies_policy_notmodifiable | markdownify }}\n\n{% capture policies_policy_toomanymodifyingrequests %}{% include_relative generated/exceptions/policies_policy_toomanymodifyingrequests.md %}{% endcapture %}\n{{ policies_policy_toomanymodifyingrequests | markdownify }}\n\n{% capture policies_policy_unavailable %}{% include_relative generated/exceptions/policies_policy_unavailable.md %}{% endcapture %}\n{{ policies_policy_unavailable | markdownify }}\n\n{% capture policies_entry_invalid %}{% include_relative generated/exceptions/policies_entry_invalid.md %}{% endcapture %}\n{{ policies_entry_invalid | markdownify }}\n\n{% capture policies_entry_modificationinvalid %}{% include_relative generated/exceptions/policies_entry_modificationinvalid.md %}{% endcapture %}\n{{ policies_entry_modificationinvalid | markdownify }}\n\n{% capture policies_entry_notfound %}{% include_relative generated/exceptions/policies_entry_notfound.md %}{% endcapture %}\n{{ policies_entry_notfound | markdownify }}\n\n{% capture policies_entry_notmodifiable %}{% include_relative generated/exceptions/policies_entry_notmodifiable.md %}{% endcapture %}\n{{ policies_entry_notmodifiable | markdownify }}\n\n{% capture policies_subjects_notfound %}{% include_relative generated/exceptions/policies_subjects_notfound.md %}{% endcapture %}\n{{ policies_subjects_notfound | markdownify }}\n\n{% capture policies_subjects_notmodifiable %}{% include_relative generated/exceptions/policies_subjects_notmodifiable.md %}{% endcapture %}\n{{ policies_subjects_notmodifiable | markdownify }}\n\n{% capture policies_subject_notfound %}{% include_relative generated/exceptions/policies_subject_notfound.md %}{% endcapture %}\n{{ policies_subject_notfound | markdownify }}\n\n{% capture policies_subject_notmodifiable %}{% include_relative generated/exceptions/policies_subject_notmodifiable.md %}{% endcapture %}\n{{ policies_subject_notmodifiable | markdownify }}\n\n{% capture policies_subjectid_invalid %}{% include_relative generated/exceptions/policies_subjectid_invalid.md %}{% endcapture %}\n{{ policies_subjectid_invalid | markdownify }}\n\n{% capture policies_resources_notfound %}{% include_relative generated/exceptions/policies_resources_notfound.md %}{% endcapture %}\n{{ policies_resources_notfound | markdownify }}\n\n{% capture policies_resources_notmodifiable %}{% include_relative generated/exceptions/policies_resources_notmodifiable.md %}{% endcapture %}\n{{ policies_resources_notmodifiable | markdownify }}\n\n{% capture policies_resource_notfound %}{% include_relative generated/exceptions/policies_resource_notfound.md %}{% endcapture %}\n{{ policies_resource_notfound | markdownify }}\n\n{% capture policies_resource_notmodifiable %}{% include_relative generated/exceptions/policies_resource_notmodifiable.md %}{% endcapture %}\n{{ policies_resource_notmodifiable | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Subscription Created Event\nDESCRIPTION: Event signaling the successful creation of a search subscription\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/search/protocol-examples-search.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/subscription-created-event.md %}{% endcapture %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Ditto Logo in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to include an image of the Ditto logo in the blog post. It specifies the file path, alt text, and maximum width for the image.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2017-12-18-milestone-announcement-010-M1.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include image.html file=\"ditto.svg\" alt=\"Ditto\" max-width=500 %}\n```\n\n----------------------------------------\n\nTITLE: Including ConnectionClosedAnnouncement Example in Markdown\nDESCRIPTION: This snippet includes the content of a Markdown file containing the ConnectionClosedAnnouncement example. It uses Liquid templating to include the file and then applies Markdown formatting.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/connections/protocol-examples-connections-announcement-closed.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/announcements/closedConnection.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Thing Model in Java\nDESCRIPTION: The Thing model is defined in Java classes within the org.eclipse.ditto.things.model package. This snippet shows the file path to access these model classes.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/architecture-services-things.md#2025-04-17_snippet_0\n\nLANGUAGE: java\nCODE:\n```\norg.eclipse.ditto.things.model\n```\n\n----------------------------------------\n\nTITLE: Java Compilation Bugfix - Model Modules\nDESCRIPTION: Bug fix addressing Java version compatibility issues where rql-parser and thingssearch-parser modules were accidentally compiled with Java 11 instead of Java 8, causing compatibility issues with Ditto client in Java 8 environments.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_115.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* rql-parser\\n* thingssearch-parser\n```\n\n----------------------------------------\n\nTITLE: Page Not Found YAML Front Matter\nDESCRIPTION: YAML front matter configuration for a 404 error page that sets the page title and excludes it from search results.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/404.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Page Not Found\"\nsearch: exclude\n---\n```\n\n----------------------------------------\n\nTITLE: Registering a Device in Hono\nDESCRIPTION: Command to register a new device in Hono with the device ID 'demo-device' under the previously created tenant.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST -i -H 'Content-Type: application/json' -d '{\"device-id\": \"demo-device\"}' https://hono.eclipseprojects.io:28080/registration/org.eclipse.ditto\n```\n\n----------------------------------------\n\nTITLE: Unblocking messages to a Ditto namespace\nDESCRIPTION: Command to stop blocking messages to a namespace, which is the final step in the namespace data erasure process, allowing the namespace to be reused later.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/distributedPubSubMediator\",\n  \"headers\": {\n    \"aggregate\": false\n  },\n  \"piggybackCommand\": {\n    \"type\": \"namespaces.commands:unblockNamespace\",\n    \"namespace\": \"namespaceToUnblock\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating HTML Documentation\nDESCRIPTION: Command to validate HTML documentation for dead links and other issues using htmlproofer.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nhtmlproofer --assume-extension --allow-hash-href --disable-external --ignore-urls \"/http-api-doc.html.*/\",\"http://localhost:4000/feed.xml\",\"http://www.ontology-of-units-of-measure.org/page/om-2\" src/main/resources/_site/\n```\n\n----------------------------------------\n\nTITLE: Connection Metrics Response Format in JSON\nDESCRIPTION: This is the JSON response format returned when retrieving connection metrics. It includes detailed inbound and outbound metrics for message consumption, mapping, enforcement, dispatching, and publishing, with counters for different time windows.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"connectivity.responses:retrieveConnectionMetrics\",\n  \"status\": 200,\n  \"connectionId\": \"hono-sandbox-connection-1\",\n  \"containsFailures\": false,\n  \"connectionMetrics\": {\n    \"inbound\": {\n      \"consumed\": {\n        \"success\": {\n          \"PT1M\": 2,\n          \"PT1H\": 2,\n          \"PT24H\": 2,\n          \"lastMessageAt\": \"2019-02-06T09:37:28.416Z\"\n        },\n        \"failure\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        }\n      },\n      \"mapped\": {\n        \"success\": {\n          \"PT1M\": 2,\n          \"PT1H\": 2,\n          \"PT24H\": 2,\n          \"lastMessageAt\": \"2019-02-06T09:37:28.422Z\"\n        },\n        \"failure\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        }\n      },\n      \"dropped\": {\n        \"success\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        },\n        \"failure\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        }\n      },\n      \"enforced\": {\n        \"success\": {\n          \"PT1M\": 2,\n          \"PT1H\": 2,\n          \"PT24H\": 2,\n          \"lastMessageAt\": \"2019-02-06T09:37:28.422Z\"\n        },\n        \"failure\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        }\n      }\n    },\n    \"outbound\": {\n      \"dispatched\": {\n        \"success\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        },\n        \"failure\": {\n          \"PT1M\": 2,\n          \"PT1H\": 2,\n          \"PT24H\": 2,\n          \"lastMessageAt\": \"2019-02-06T09:37:28.439Z\"\n        }\n      },\n      \"filtered\": {\n        \"success\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        },\n        \"failure\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        }\n      },\n      \"mapped\": {\n        \"success\": {\n          \"PT1M\": 2,\n          \"PT1H\": 2,\n          \"PT24H\": 2,\n          \"lastMessageAt\": \"2019-02-06T09:37:28.443Z\"\n        },\n        \"failure\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        }\n      },\n      \"dropped\": {\n        \"success\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        },\n        \"failure\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        }\n      },\n      \"published\": {\n        \"success\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        },\n        \"failure\": {\n          \"PT1M\": 0,\n          \"PT1H\": 0,\n          \"PT24H\": 0,\n          \"lastMessageAt\": null\n        }\n      }\n    }\n  },\n  \"sourceMetrics\": {\n    \"addressMetrics\": {\n      \"event/org.eclipse.ditto\": {\n        \"consumed\": {\n          \"success\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          },\n          \"failure\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          }\n        },\n        \"mapped\": {\n          \"success\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          },\n          \"failure\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          }\n        },\n        \"dropped\": {\n          \"success\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          },\n          \"failure\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          }\n        },\n        \"enforced\": {\n          \"success\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          },\n          \"failure\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          }\n        }\n      },\n      \"telemetry/org.eclipse.ditto\": {\n        \"consumed\": {\n          \"success\": {\n            \"PT1M\": 2,\n            \"PT1H\": 2,\n            \"PT24H\": 2,\n            \"lastMessageAt\": \"2019-02-06T09:37:28.416Z\"\n          },\n          \"failure\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          }\n        },\n        \"mapped\": {\n          \"success\": {\n            \"PT1M\": 2,\n            \"PT1H\": 2,\n            \"PT24H\": 2,\n            \"lastMessageAt\": \"2019-02-06T09:37:28.422Z\"\n          },\n          \"failure\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          }\n        },\n        \"dropped\": {\n          \"success\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          },\n          \"failure\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          }\n        },\n        \"enforced\": {\n          \"success\": {\n            \"PT1M\": 2,\n            \"PT1H\": 2,\n            \"PT24H\": 2,\n            \"lastMessageAt\": \"2019-02-06T09:37:28.422Z\"\n          },\n          \"failure\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          }\n        }\n      }\n    }\n  },\n  \"targetMetrics\": {\n    \"addressMetrics\": {\n      \"_responses\": {\n        \"dispatched\": {\n          \"success\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          },\n          \"failure\": {\n            \"PT1M\": 2,\n            \"PT1H\": 2,\n            \"PT24H\": 2,\n            \"lastMessageAt\": \"2019-02-06T09:37:28.439Z\"\n          }\n        },\n        \"filtered\": {\n          \"success\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          },\n          \"failure\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          }\n        },\n        \"mapped\": {\n          \"success\": {\n            \"PT1M\": 2,\n            \"PT1H\": 2,\n            \"PT24H\": 2,\n            \"lastMessageAt\": \"2019-02-06T09:37:28.443Z\"\n          },\n          \"failure\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          }\n        },\n        \"dropped\": {\n          \"success\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          },\n          \"failure\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          }\n        },\n        \"published\": {\n          \"success\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          },\n          \"failure\": {\n            \"PT1M\": 0,\n            \"PT1H\": 0,\n            \"PT24H\": 0,\n            \"lastMessageAt\": null\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response example for unblocking a namespace in Ditto\nDESCRIPTION: Example response when a namespace is successfully unblocked across all members of the Ditto cluster.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"namespaces.responses:unblockNamespace\",\n  \"status\": 200,\n  \"namespace\": \"namespaceToUnblock\",\n  \"resourceType\": \"namespaces\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zlib Dependency\nDESCRIPTION: Command to install zlib development package if html-proofer installation fails.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install zlib1g-dev\n```\n\n----------------------------------------\n\nTITLE: Referencing QUDT.org Ontology in JSON-LD Context\nDESCRIPTION: This snippet shows how to reference the QUDT.org ontology in a JSON-LD context to describe units of measurement.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": [\n    \"https://www.w3.org/2022/wot/td/v1.1\",\n    {\n      \"qudt\": \"http://qudt.org/schema/qudt/\",\n      \"unit\": \"http://qudt.org/vocab/unit/\",\n      \"quantitykind\": \"http://qudt.org/vocab/quantitykind/\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ThingEvents in Java\nDESCRIPTION: ThingEvents represent modifications to entities managed by the Things service. This snippet shows the file path to the ThingEvent interface, which should be implemented for creating events emitted when entities are modified.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/architecture-services-things.md#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\norg.eclipse.ditto.things.model.signals.events.ThingEvent\n```\n\n----------------------------------------\n\nTITLE: Starting nginx Reverse Proxy in OpenShift\nDESCRIPTION: Applies the nginx YAML configuration to start the nginx reverse proxy in OpenShift.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/openshift/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\noc apply -f nginx/nginx.yaml\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Thing ID\nDESCRIPTION: Example of a 400 error response when an invalid thing ID is provided. Includes a hyperlink reference to documentation for additional guidance.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-errors.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 400,\n  \"error\": \"messages:id.invalid\",\n  \"message\": \"Thing ID 'foobar2000' is not valid!\",\n  \"description\": \"It must conform to the namespaced entity ID notation (see Ditto documentation)\",\n  \"href\": \"https://www.eclipse.dev/ditto/basic-namespaces-and-names.html#namespaced-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: non-english-content\nDESCRIPTION: non-english-content\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/legal/3rd-party-dependencies/compile.txt#2025-04-17_snippet_0\n\nLANGUAGE: non-english-content\nCODE:\n```\nnon-english-content\n```\n\n----------------------------------------\n\nTITLE: Service Bus Message Example\nDESCRIPTION: Example JSON payload for a message sent to Azure Service Bus\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-06-17-hmac-credentials.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Hello\": \"from Ditto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting MongoDB in OpenShift\nDESCRIPTION: Applies the MongoDB YAML configuration to start the MongoDB instance in OpenShift.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/openshift/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\noc apply -f mongodb/mongodb.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deployment Outputs\nDESCRIPTION: Extracts important information from the deployment outputs, such as cluster name, IP address, and Cosmos DB credentials.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/azure/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naks_cluster_name=`az group deployment show --name DittoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.aksClusterName.value -o tsv`\nip_address=`az group deployment show --name DittoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.publicIPAddress.value -o tsv`\ncosmos_mongodb_primary_master_key=`az group deployment show --name DittoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.cosmosPrimaryMasterKey.value -o tsv`\ncosmos_account_name=`az group deployment show --name DittoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.cosmosAccountName.value -o tsv`\npublic_fqdn=`az group deployment show --name DittoBasicInfrastructure --resource-group $resourcegroup_name --query properties.outputs.publicIPFQDN.value -o tsv`\n```\n\n----------------------------------------\n\nTITLE: Starting Ditto Services in OpenShift\nDESCRIPTION: Applies the Ditto cluster YAML configuration to start Ditto services in OpenShift. Includes an alternative command to start with a specific version.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/openshift/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\noc apply -f ditto/ditto-cluster.yaml\n# Start ditto services with an alternative version e.g. 0-SNAPSHOT\n# cat openshift/ditto/ditto-cluster.yaml | sed s/latest/0-SNAPSHOT/ | oc apply -f -\n```\n\n----------------------------------------\n\nTITLE: Resulting Filtered JSON Object\nDESCRIPTION: The resulting JSON object after applying the field selector, containing only the selected fields while maintaining the specified structure.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/json/README.md#2025-04-17_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"foo\": {\n       \"bar\": {\n          \"baz\": 23\n       },\n       \"yo\": 10\n    },\n    \"thingId\": \"0x1337\"\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Service Bus HTTP Connection Configuration\nDESCRIPTION: JSON configuration for setting up an HTTP push connection to Azure Service Bus. Includes connection details, targets configuration, and HMAC credentials using az-sasl algorithm.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-06-17-hmac-credentials.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"adec2846-4d11-4e0a-b456-d8bfc2192fc6\",\n  \"name\": \"Azure Service Bus HTTP\",\n  \"connectionType\": \"http-push\",\n  \"connectionStatus\": \"open\",\n  \"uri\": \"https://my-bus.servicebus.windows.net:443\",\n  \"sources\": [],\n  \"targets\": [{\n    \"address\": \"POST:/my-queue/messages\",\n    \"topics\": [\"_/_/things/live/messages\"],\n    \"authorizationContext\": [\"integration:ditto\"],\n    \"issuedAcknowledgementLabel\": \"live-response\",\n    \"headerMapping\": {}\n  }\n  ],\n  \"clientCount\": 1,\n  \"failoverEnabled\": true,\n  \"validateCertificates\": true,\n  \"processorPoolSize\": 5,\n  \"specificConfig\": {\n    \"parallelism\": \"1\"\n  },\n  \"credentials\": {\n    \"type\": \"hmac\",\n    \"algorithm\": \"az-sasl\",\n    \"parameters\": {\n      \"sharedKeyName\": \"RootManageSharedAccessKey\",\n      \"sharedKey\": \"dGhlS2V5\",\n      \"endpoint\": \"https://my-bus.servicebus.windows.net/my-queue\"\n    }\n  },\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Event for Modified Feature Desired Properties in Eclipse Ditto\nDESCRIPTION: This JSON snippet represents the event generated when feature desired properties are modified in Eclipse Ditto. It includes details about the modification, such as the thing ID, feature ID, and the new desired properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifydesiredproperties.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/desiredProperties\",\n  \"value\": {\n    \"x\": 3.141,\n    \"y\": 2.718,\n    \"z\": 1,\n    \"unit\": \"g\"\n  },\n  \"revision\": 42\n}\n```\n\n----------------------------------------\n\nTITLE: RQL Filter Translation Example - Single Feature\nDESCRIPTION: Example of translated RQL filter for querying a specific feature property with authorization checks.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/architecture/DADR-0008-wildcard-search-index.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"$and\": [\n  { \"t.features.accelerometer.properties.x\": { \"$gt\": 3 } },\n  { \"$and\": [\n    { \"p.features.accelerometer.properties.x.·r\": { \"$nin\": [ \"request:subject\" ] } },\n    { \"$or\": [\n      { \"p.features.accelerometer.properties.x.·g\": { \"$in\": [ \"request:subject\" ] } },\n      { \"$and\": [\n        { \"p.features.accelerometer.properties.·r\": { \"$nin\": [ \"request:subject\" ] } },\n        { \"$or\": [\n          { \"p.features.accelerometer.properties.·g\": { \"$in\": [ \"request:subject\" ] } },\n          { \"$and\": [\n            { \"p.features.accelerometer.·r\": { \"$nin\": [ \"request:subject\" ] } },\n            { \"$or\": [\n              { \"p.features.accelerometer.·g\": { \"$in\": [ \"request:subject\" ] } },\n              { \"$and\": [\n                { \"p.features.·r\": { \"$nin\": [ \"request:subject\" ] } },\n                { \"$or\": [\n                  { \"p.features.·g\": { \"$in\": [ \"request:subject\" ] } },\n                  { \"$and\": [\n                    { \"p.·r\": { \"$nin\": [ \"request:subject\" ] } },\n                    { \"$or\": [\n                      { \"p.·g\": { \"$in\": [ \"request:subject\" ] } }\n                    ]}\n                  ]}\n                ]}\n              ]}\n            ]}\n          ]}\n        ]}\n      ]}\n    ]}\n  ]}\n]}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Include Response Template\nDESCRIPTION: Template code to include generated markdown file containing delete feature property response documentation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deleteproperty.md#2025-04-17_snippet_1\n\nLANGUAGE: jekyll\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/modify/deletefeaturepropertyresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown Content for Feature Modified Event\nDESCRIPTION: This snippet includes the Markdown content for the feature modified event from an external file.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifyfeature.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture event %}{% include_relative generated/events/featuremodified.md %}{% endcapture %}\n{{ event | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Including Markdown for Delete Feature Command\nDESCRIPTION: This snippet includes a Markdown file containing the command for deleting a feature in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deletefeature.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/modify/deletefeature.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Command Using Liquid Template\nDESCRIPTION: Template code for including and rendering a markdown file containing the retrieve feature command format.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrievefeature.md#2025-04-17_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrievefeature.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Modify Thing Definition Response Format in JSON\nDESCRIPTION: JSON response structure returned after modifying a thing's definition. Contains topic path for the twin command, correlation headers for request tracking, the modified definition path, and a 204 status code indicating successful modification with no content returned.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifythingdefinitionresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/definition\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Connection via Piggyback Command\nDESCRIPTION: DevOps command for deleting an existing connection using its connectionId.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:deleteConnection\",\n    \"connectionId\": \"<connectionID>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing ByteBuffer.js for JavaScript Byte Manipulation\nDESCRIPTION: This snippet showcases the use of ByteBuffer.js for buffered byte manipulations in JavaScript. It converts ArrayBuffer to base64 and back, reads integers and UTF-8 strings, and demonstrates buffer offset handling, facilitating advanced byte-manipulation tasks in JavaScript environments.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet byteBuf = Ditto.asByteBuffer(bytePayload);\\nlet numberFromBytes = parseInt(byteBuf.toHex(), 16);\\n\\nlet base64encoded = byteBuf.toBase64();\\nlet buf = dcodeIO.ByteBuffer.fromBase64(base64encoded);\\n\\nbuf.readInt(); // read a 32bit signed integer + advances the offset in the buffer\\nbuf.readUTF8String(4); // read 4 characters of UTF-8 encoded string + advances the offset in the buffer\\nbuf.remaining(); // gets the number of remaining readable bytes in the buffer\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Reply Target in Ditto\nDESCRIPTION: Defines a reply target for publishing responses to incoming commands, using the reply-to header for routing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-connections.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headerMapping\": {\n    \"reply-to\": \"{{%raw%}}{{ header:reply-to }}{{%endraw%}}\"\n  },\n  \"replyTarget\": {\n    \"enabled\": true,\n    \"address\": \"{{%raw%}}{{ header:reply-to }}{{%endraw%}}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Java Message Mapper Implementation\nDESCRIPTION: Example implementation of a custom Java-based message mapper for Eclipse Ditto extending AbstractMessageMapper.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_26\n\nLANGUAGE: java\nCODE:\n```\npublic final class FooMapper extends AbstractMessageMapper {\n\n    private static final String MAPPER_ALIAS = \"Foo\";\n\n    public FooMapper(ActorSystem actorSystem, Config config) {\n        super(actorSystem, config);\n    }\n\n    private FooMapper(AbstractMessageMapper copyFromMapper) {\n        super(copyFromMapper);\n    }\n\n    @Override\n    public String getAlias() {\n        return MAPPER_ALIAS;\n    }\n\n    @Override\n    public boolean isConfigurationMandatory() {\n        return false;\n    }\n\n    @Override\n    public MessageMapper createNewMapperInstance() {\n        return new FooMapper(this);\n    }\n\n    @Override\n    public List<Adaptable> map(ExternalMessage externalMessage) {\n        // TODO implement mapping inbound messages consumed via \"sources\" to DittoProtocol adaptables\n        return null;\n    }\n\n    @Override\n    public DittoHeaders getAdditionalInboundHeaders(ExternalMessage externalMessage) {\n        return DittoHeaders.empty();\n    }\n\n    @Override\n    public List<ExternalMessage> map(Adaptable adaptable) {\n        // TODO implement mapping DittoProtocol adaptables to outbound messages published via \"targets\"\n        return null;\n    }\n\n    @Override\n    private void doConfigure(Connection connection, MappingConfig mappingConfig,\n            MessageMapperConfiguration configuration) {\n        // extract configuration if needed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modify Policy Resource Command Response in Ditto Protocol\nDESCRIPTION: Example of a successful response to a modify policy resource command. The response confirms the modification was completed and includes the correlation ID from the original command.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-modifyresource.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/resources/thing:/the_resource_path\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Created Event Structure\nDESCRIPTION: Defines the structure of a Created event response sent after subscribing for persisted events. Contains subscription ID for subsequent commands.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-streaming-subscription.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<entityName>/<group>/<channel>/streaming/created\",\n  \"path\": \"/\",\n  \"value\": \"[subscription-id-object]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of WoT Validation Error for Invalid Attribute Datatype in JSON\nDESCRIPTION: Sample error response when providing a wrong datatype for a Thing attribute according to the WoT model. Shows the validation details structure that points to the exact issue with the attribute's value.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": 400,\n  \"error\": \"wot:payload.validation.error\",\n  \"message\": \"The provided payload did not conform to the specified WoT (Web of Things) model.\",\n  \"description\": \"The Thing's attribute </serial> contained validation errors, check the validation details.\",\n  \"validationDetails\": {\n    \"/attributes/serial\": [\n      \": {type=boolean found, string expected}\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Direct Method on Azure IoT Hub Device\nDESCRIPTION: JSON payload for invoking a direct method 'getDeviceLog' on an Azure IoT Hub device through Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-06-17-hmac-credentials.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service\": \"my-microservice\",\n  \"amount\": 9000\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionOpenedAnnouncement JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a ConnectionOpenedAnnouncement in Eclipse Ditto. It includes the connection ID in the topic, specifies the content type in the headers, and provides the opening timestamp in the value object.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/connections/generated/announcements/openedConnection.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"_/the_connection_id/connections/announcements/opened\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"openedAt\": \"2021-03-03T16:05:55Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Producer Settings in HOCON\nDESCRIPTION: This snippet shows the updated Kafka producer configuration in HOCON format. It includes settings for connection idle time, reconnect backoff, acknowledgments, retries, and various timeouts.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_210.md#2025-04-17_snippet_0\n\nLANGUAGE: hocon\nCODE:\n```\nditto.connectivity.connection {\n  kafka {\n    consumer {\n\n    }\n\n    producer {\n      connections.max.idle.ms = 540000\n      reconnect.backoff.max.ms = 10000\n      reconnect.backoff.ms = 500\n      acks = \"1\"\n      retries = 0\n      request.timeout.ms = 10000\n      delivery.timeout.ms = 10000\n      max.block.ms = 10000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Definition Response in Eclipse Ditto\nDESCRIPTION: JSON response indicating successful deletion of a feature definition with a 204 No Content status. Includes topic, headers, and path information for the deleted feature.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/deletefeaturedefinitionresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/delete\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/definition\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on Debian/Ubuntu\nDESCRIPTION: Commands to install Docker on a Debian or Ubuntu based Linux distribution using the apt package manager. It also starts the Docker service and adds the current user to the docker group.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-04-16-connecting-to-ttn-via-mqtt.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install docker.io\nsudo service docker start\nsudo usermod -a -G docker <your-username>\n```\n\n----------------------------------------\n\nTITLE: Policy Subjects Modification Response Format in JSON\nDESCRIPTION: Demonstrates the response format when policy subjects are successfully modified. The response includes the policy topic, correlation ID, path to modified subjects, and a 204 status code indicating successful modification with no content returned.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifysubjectsresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ditto Policy for Digital Twin in Bash\nDESCRIPTION: This snippet shows how to create a policy in Eclipse Ditto using a curl command. The policy defines access rights for the digital twin.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-12-05-example-command-and-control.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# create policy in Ditto\n$ curl -X PUT -i -u demo5:demo -H 'Content-Type: application/json' -d '{\n   \"policyId\": \"org.eclipse.ditto:teapot-policy\",\n   \"entries\": {\n       \"DEMO\": {\n           \"subjects\": {\n              \"nginx:demo5\": {\n                  \"type\": \"basic auth user and user used in connection's authorizationContext\"\n              }\n           },\n           \"resources\": {\n               \"thing:/\": {\n                   \"grant\": [\"READ\", \"WRITE\"],\n                   \"revoke\": []\n               },\n               \"policy:/\": {\n                   \"grant\": [\"READ\", \"WRITE\"],\n                   \"revoke\": []\n               },\n               \"message:/\": {\n                   \"grant\": [\"READ\", \"WRITE\"],\n                   \"revoke\": []\n               }\n           }\n       }\n   }\n}' https://ditto.eclipseprojects.io/api/2/policies/org.eclipse.ditto:teapot-policy\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Policy with Field Selector in Eclipse Ditto Protocol\nDESCRIPTION: Commands to retrieve specific fields of a policy using a field selector. The field selector allows requesting only parts of the policy, in this case only entries with subject IDs matching \"nginx:*\".\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/protocol-examples-policies-retrievepolicy.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects?ids=like(nginx:*)\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Connection Configuration\nDESCRIPTION: Complete example of creating a new HTTP connection with custom configuration including parallelism, targets, and header mapping.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-http.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection\": {\n    \"id\": \"http-example-connection-123\",\n    \"connectionType\": \"http-push\",\n    \"connectionStatus\": \"open\",\n    \"failoverEnabled\": true,\n    \"uri\": \"http://user:password@localhost:80\",\n    \"specificConfig\": {\n      \"parallelism\": \"2\"\n    },\n    \"sources\": [],\n    \"targets\": [\n      {\n        \"address\": \"PUT:/api/2/some-entity/{{ thing:id }}\",\n        \"topics\": [\n          \"_/_/things/twin/events\"\n        ],\n        \"authorizationContext\": [\"ditto:outbound-auth-subject\", \"...\"],\n        \"headerMapping\": {\n          \"content-type\": \"{{ header:content-type }}\",\n          \"api-key\": \"this-is-a-secret-api-key-to-send-along\"\n         }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing OM 2 Units of Measure in JSON-LD Context\nDESCRIPTION: This snippet demonstrates how to reference the OM 2: Units of Measure ontology in a JSON-LD context as an alternative for describing units of measurement.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"@context\": [\n    \"https://www.w3.org/2022/wot/td/v1.1\",\n    {\n      \"om2\": \"http://www.ontology-of-units-of-measure.org/resource/om-2/\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Policy Entries in Eclipse Ditto using JSON Command\nDESCRIPTION: This JSON payload represents a ModifyPolicyEntries command to update policy entries in Eclipse Ditto. The command targets a specific policy ID with a correlation ID for tracking. It defines multiple policy entries with subjects and resources, including grant/revoke permissions for different resource paths.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/modify/modifypolicyentries.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries\",\n  \"value\": {\n    \"another_label\": {\n      \"__schemaVersion\": 2,\n      \"subjects\": {\n        \"google:the_subjectid\": {\n          \"__schemaVersion\": 2,\n          \"type\": \"yourSubjectTypeDescription\"\n        }\n      },\n      \"resources\": {\n        \"thing:/the_resource_path\": {\n          \"__schemaVersion\": 2,\n          \"grant\": [\n            \"READ\",\n            \"WRITE\"\n          ],\n          \"revoke\": []\n        }\n      }\n    },\n    \"the_label\": {\n      \"__schemaVersion\": 2,\n      \"subjects\": {\n        \"google:the_subjectid\": {\n          \"__schemaVersion\": 2,\n          \"type\": \"yourSubjectTypeDescription\"\n        }\n      },\n      \"resources\": {\n        \"thing:/the_resource_path\": {\n          \"__schemaVersion\": 2,\n          \"grant\": [\n            \"READ\",\n            \"WRITE\"\n          ],\n          \"revoke\": []\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Liquid Template for Feature Properties Documentation\nDESCRIPTION: Jekyll/Liquid template code that includes and renders markdown content for retrieving feature properties command and response documentation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrieveproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrievefeatureproperties.md %}{% endcapture %}\n{{ command | markdownify }}\n\n{% capture response %}{% include_relative generated/commands/query/retrievefeaturepropertiesresponse.md %}{% endcapture %}\n{{ response | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subject Information in Eclipse Ditto Policy Commands (JSON)\nDESCRIPTION: JSON structure representing a successful response to a subject retrieval command in Eclipse Ditto policies. It includes the policy topic path, correlation ID in headers, the specific path to the subject, the subject's value containing type information, and a 200 status code indicating success.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrievesubjectresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects/google:the_subjectid\",\n  \"value\": {\n    \"type\": \"yourSubjectTypeDescription\"\n  },\n  \"status\": 200\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Long Running Live Message in Ditto Protocol (JSON)\nDESCRIPTION: This snippet demonstrates how to send a long-running live message in Ditto Protocol. It's used to request firmware download information with a response-required flag and live-response acknowledgement.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-10-23-end-2-end-acknowledgement.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"topic\": \"org.eclipse.ditto/my-thing/things/live/messages/firmware\",\n    \"headers\": {\n      \"response-required\": true,\n      \"requested-acks\": [\"live-response\"],\n      \"content-type\": \"text/plain\",\n      \"timeout\": \"5s\"\n    },\n    \"path\": \"/outbox/messages/firmware\",\n    \"value\": \"firmware.url.query\"\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing ModifyPolicyIdResponse JSON for Eclipse Ditto\nDESCRIPTION: This JSON snippet represents the response to a command that modifies the policy ID of a Thing in Eclipse Ditto. It includes the topic, headers with a correlation ID, the modified path, the new policy ID value, and a status code of 201 indicating successful creation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifypolicyidresponsecreated.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"value\": \"org.eclipse.ditto:the_policy_id\",\n  \"status\": 201\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Properties Command in Eclipse Ditto\nDESCRIPTION: This snippet shows the command structure for deleting feature properties in Eclipse Ditto. It includes the topic, headers, and path for the deletion operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-deleteproperties.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/commands/modify/deletefeatureproperties.md %}\n```\n\n----------------------------------------\n\nTITLE: Reactive Streams Signal Pattern for Ditto Streaming Subscription\nDESCRIPTION: Diagram showing the interaction pattern between client and Ditto during a streaming subscription sequence. The client initiates with subscribe, followed by multiple requests and an optional cancel command.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-streaming-subscription.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsubscribe request* cancel?\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Eclipse Ditto Helm deployment\nDESCRIPTION: Command to uninstall and delete the 'my-ditto' deployment created with Helm. This removes all the Kubernetes resources associated with the Ditto deployment.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/helm/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm uninstall my-ditto\n```\n\n----------------------------------------\n\nTITLE: Field Projection in Search Results\nDESCRIPTION: Example of retrieving specific fields in search results using the fields parameter.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/search/things?fields=thingId,attributes\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Definition Command Format\nDESCRIPTION: Shows the structure and format of a command to retrieve a feature definition using Eclipse Ditto's protocol.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrievedefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/commands/query/retrievefeaturedefinition.md %}\n```\n\n----------------------------------------\n\nTITLE: Testing Connection Between Ditto and Hono\nDESCRIPTION: Command to test the connection between Ditto and Hono using the Ditto DevOps API, configuring AMQP 1.0 connectivity.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST -i -u devops:devopsPw1! -H 'Content-Type: application/json' -d '{\n    \"targetActorSelection\": \"/system/sharding/connection\",\n    \"headers\": {\n        \"aggregate\": false\n    },\n    \"piggybackCommand\": {\n        \"type\": \"connectivity.commands:testConnection\",\n        \"connection\": {\n            \"id\": \"hono-sandbox-connection-1\",\n            \"connectionType\": \"amqp-10\",\n            \"connectionStatus\": \"open\",\n            \"uri\": \"amqp://consumer%40HONO:verysecret@hono.eclipse.org:15672\",\n            \"failoverEnabled\": true,\n            \"sources\": [{\n                \"addresses\": [\n                    \"telemetry/org.eclipse.ditto\",\n                    \"event/org.eclipse.ditto\"\n                ],\n                \"authorizationContext\": [\"nginx:demo5\"]\n            }]\n        }\n    }\n}' https://ditto.eclipseprojects.io/devops/piggyback/connectivity?timeout=8s\n```\n\n----------------------------------------\n\nTITLE: Modifying Features Response in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response structure after modifying features in Eclipse Ditto. It includes the topic and status of the modification operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createfeatures.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/commands/modify/modifyfeaturesresponse.md %}\n```\n\n----------------------------------------\n\nTITLE: Response Message from a Thing using JSON\nDESCRIPTION: Example JSON structure for a response message from a Thing. This shows how a smart coffee machine might respond to an incoming message, including the corresponding correlation-id and a HTTP-like status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-messages.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"topic\": \"org.eclipse.ditto/smartcoffee/things/live/messages/ask\",\n    \"headers\": {\n        \"correlation-id\": \"a-unique-string-for-this-message\",\n        \"auth-subjects\": [\"ditto\", \"nginx:ditto\"],\n        \"content-type\": \"text/plain\",\n        \"version\": 1,\n    },\n    \"path\": \"/inbox/messages/ask\",\n    \"value\": \"I do not know, since i am only a coffee machine.\",\n    \"status\": 418\n}\n```\n\n----------------------------------------\n\nTITLE: Gateway Health Check Configuration in HOCON\nDESCRIPTION: Default gateway configuration example showing health check settings and cluster role configuration.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-extending.md#2025-04-17_snippet_3\n\nLANGUAGE: hocon\nCODE:\n```\nditto {\n  gateway {\n    health-check {\n      cluster-roles = {\n        enabled = true\n        enabled = ${?HEALTH_CHECK_ROLES_ENABLED}\n\n        expected = [\n          \"policies\",\n          \"things\",\n          \"search\",\n          \"gateway\",\n          \"connectivity\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Policy JSON Object in Eclipse Ditto\nDESCRIPTION: This JSON example defines a complete Policy document for an IoT Thing with different access levels. It includes owner permissions with full access, observer permissions with read-only access to specific features, and privacy restrictions to prevent certain users from accessing sensitive data.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-policy.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyId\": \"my.namespace:policy-a\",\n  \"entries\": {\n    \"owner\": {\n      \"subjects\": {\n        \"nginx:ditto\": {\n          \"type\": \"nginx basic auth user\"\n        }\n      },\n      \"resources\": {\n        \"thing:/\": {\n          \"grant\": [\"READ\", \"WRITE\"],\n          \"revoke\": []\n        },\n        \"policy:/\": {\n          \"grant\": [\"READ\", \"WRITE\"],\n          \"revoke\": []\n        },\n        \"message:/\": {\n          \"grant\": [\"READ\", \"WRITE\"],\n          \"revoke\": []\n        }\n      }\n    },\n    \"observer\": {\n      \"subjects\": {\n        \"nginx:observer-client\": {\n          \"type\": \"technical client\"\n        },\n        \"nginx:some-users\": {\n          \"type\": \"a group of users\"\n        }\n      },\n      \"resources\": {\n        \"thing:/features/featureX\": {\n          \"grant\": [\"READ\"],\n          \"revoke\": []\n        },\n        \"thing:/features/featureY\": {\n          \"grant\": [\"READ\"],\n          \"revoke\": []\n        }\n      }\n    },\n    \"private\": {\n      \"subjects\": {\n        \"nginx:some-users\": {\n          \"type\": \"a group of users\"\n        },\n        \"resources\": {\n          \"thing:/features/featureX/properties/location/city\": {\n            \"grant\": [],\n            \"revoke\": [\"READ\"]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Subject from a Policy Entry in Eclipse Ditto\nDESCRIPTION: This JSON command retrieves a specific subject from a policy entry. It specifies the policy ID, entry label, and subject ID in the path. The command is sent to the policies command topic with a correlation ID for tracking the request.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/policies/generated/commands/query/retrievesubject.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/the_policy_id/policies/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/entries/the_label/subjects/google:the_subjectid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying an Existing Thing in Eclipse Ditto\nDESCRIPTION: These cURL commands demonstrate how to query an existing Thing by its ID in Eclipse Ditto, with options for prettier output using jq or Python.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/intro-hello-world.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u ditto:ditto -X GET 'http://localhost:8080/api/2/things/org.eclipse.ditto:fancy-car'\n\n# if you have jq installed, that's how to get a prettier response:\ncurl -u ditto:ditto -X GET 'http://localhost:8080/api/2/things/org.eclipse.ditto:fancy-car' | jq\n\n# if you have python installed, that's how to get a prettier response:\ncurl -u ditto:ditto -X GET 'http://localhost:8080/api/2/things/org.eclipse.ditto:fancy-car' | python -m json.tool\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Front Matter for Advanced Topics Page\nDESCRIPTION: This snippet defines the Jekyll front matter for an advanced topics page in the Eclipse Ditto documentation. It sets the title, tag, search exclusion, permalink, sidebar, and folder properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_advanced.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Advanced topics\"\ntagName: advanced\nsearch: exclude\npermalink: tag_advanced.html\nsidebar: ditto_sidebar\nfolder: tags\n---\n```\n\n----------------------------------------\n\nTITLE: Deleting Thing Commands and Events - Protocol Format\nDESCRIPTION: Command and event topic format specification for deleting a Thing. The format includes namespace and thingName parameters with the command/event paths.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-things-delete.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field     | Value                   |\n|-----------|-------------------------|\n| **topic** | `<namespace>/<thingName>/things/<channel>/commands/delete`     |\n| **path**  | `/`     |\n```\n\n----------------------------------------\n\nTITLE: Executing JMH benchmarks with Maven\nDESCRIPTION: This snippet demonstrates how to execute JMH benchmarks using Maven. It first cleans and packages the project and then executes the generated benchmark JAR file. The second command generates a CSV file with the benchmark results.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/policies/model/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean package\n\njava -jar target/ditto-model-policies-enforcers-<version>-benchmark.jar\n\njava -jar target/ditto-model-policies-enforcers-<version>-benchmark.jar -rf csv\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Attribute Not Found Error in Eclipse Ditto Things API\nDESCRIPTION: This JSON structure represents the error response when an attribute is not found in the Eclipse Ditto Things API. It includes details such as the topic, headers, path, error message, and HTTP status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/exceptions/things_attribute_notfound.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/errors\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"status\": 404,\n    \"error\": \"things:attribute.notfound\",\n    \"message\": \"The attribute with key '/location' on the thing with ID 'org.eclipse.ditto:fancy-thing' could not be found or the requester had insufficient permissions to access it.\",\n    \"description\": \"Check if the ID of the thing and the key of your requested attribute was correct and you have sufficient permissions.\"\n  },\n  \"status\": 404\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka Source Connection for Ditto in JSON\nDESCRIPTION: JSON configuration for a Ditto Kafka source connection with implicit thing creation capabilities. This connection reads from a configured topic and uses payload mapping to create things based on incoming messages.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/benchmark-tool/README.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"4cd191cc-aabb-4965-a1b4-dfe8ae8674bc\",\n    \"name\": \"kafka-source\",\n    \"connectionType\": \"kafka\",\n    \"connectionStatus\": \"open\",\n    \"uri\": \"tcp://192.168.16.2:19092\",\n    \"sources\": [\n        {\n            \"addresses\": [\n                \"create-update\"\n            ],\n            \"consumerCount\": 1,\n            \"qos\": 0,\n            \"authorizationContext\": [\n                \"nginx:ditto\"\n            ],\n            \"enforcement\": {\n                \"input\": \"{{ header:device_id }}\",\n                \"filters\": [\n                    \"{{ entity:id }}\"\n                ]\n            },\n            \"headerMapping\": {},\n            \"payloadMapping\": [\n                \"implicitThingCreation\",\n                \"ditto\"\n            ],\n            \"replyTarget\": {\n                \"enabled\": false\n            }\n        }\n    ],\n    \"targets\": [],\n    \"clientCount\": 1,\n    \"failoverEnabled\": true,\n    \"validateCertificates\": true,\n    \"processorPoolSize\": 1,\n    \"specificConfig\": {\n        \"saslMechanism\": \"plain\",\n        \"bootstrapServers\": \"192.168.16.2:19092, 192.168.16.3:19092, 192.168.16.4:19092\"\n    },\n    \"mappingDefinitions\": {\n        \"ditto\": {\n            \"mappingEngine\": \"Ditto\",\n            \"options\": {\n                \"thingId\": \"{{ header:device_id }}\"\n            },\n            \"incomingConditions\": {\n                \"sampleCondition\": \"fn:filter(header:ditto_message,'exists')\"\n            }\n        },\n        \"implicitThingCreation\": {\n            \"mappingEngine\": \"ImplicitThingCreation\",\n            \"options\": {\n                \"thing\": {\n                    \"thingId\": \"{{ header:device_id }}\",\n                    \"_policy\": {\n                        \"entries\": {\n                            \"DEVICE\": {\n                                \"subjects\": {\n                                    \"nginx:ditto\": {\n                                        \"type\": \"does-not-matter\"\n                                    }\n                                },\n                                \"resources\": {\n                                    \"policy:/\": {\n                                        \"revoke\": [],\n                                        \"grant\": [\n                                            \"READ\",\n                                            \"WRITE\"\n                                        ]\n                                    },\n                                    \"thing:/\": {\n                                        \"revoke\": [],\n                                        \"grant\": [\n                                            \"READ\",\n                                            \"WRITE\"\n                                        ]\n                                    },\n                                    \"message:/\": {\n                                        \"revoke\": [],\n                                        \"grant\": [\n                                            \"READ\",\n                                            \"WRITE\"\n                                        ]\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"definition\": \"org.eclipse.ditto:coffeebrewer:0.1.0\",\n                    \"attributes\": {\n                        \"location\": \"test location\",\n                        \"model\": \"Speaking coffee machine\"\n                    },\n                    \"features\": {\n                        \"coffee-brewer\": {\n                            \"properties\": {\n                                \"brewed-coffees\": 0\n                            }\n                        }\n                    }\n                }\n            },\n            \"incomingConditions\": {\n                \"behindGateway\": \"fn:filter(header:create_thing, 'exists')\"\n            }\n        }\n    },\n    \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Old MongoDB Indexes for Ditto 3.4.0 Migration\nDESCRIPTION: MongoDB shell commands to drop old indexes named 'akka_persistence_metadata_pid' from various collections before upgrading to Ditto 3.4.0. This is necessary to avoid conflicts with the new 'pekko_persistence_metadata_pid' index.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_340.md#2025-04-17_snippet_1\n\nLANGUAGE: mongodb\nCODE:\n```\ndb.policies_metadata.dropIndex(\"akka_persistence_metadata_pid\")\ndb.things_metadata.dropIndex(\"akka_persistence_metadata_pid\")\ndb.connection_metadata.dropIndex(\"akka_persistence_metadata_pid\")\ndb.connection_remember_metadata.dropIndex(\"akka_persistence_metadata_pid\")\n```\n\n----------------------------------------\n\nTITLE: YAML Search Exclusion Setting\nDESCRIPTION: Excludes this page from the global search results. This might be used for pages that are not meant to be directly accessed through search.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_wot.md#2025-04-17_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\n\"search: exclude\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Header Mapping for Kafka in Eclipse Ditto\nDESCRIPTION: JSON configuration for mapping Kafka-specific headers to custom headers in Eclipse Ditto.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-kafka2.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headerMapping\": {\n    \"the-topic\": \"{%raw%}{{ header:kafka.topic }}{%endraw%}\",\n    \"the-key\": \"{%raw%}{{ header:kafka.key }}{%endraw%}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Environment JSON Configuration\nDESCRIPTION: This snippet provides an example of a JSON file structure representing a configuration for different environments utilized by the Ditto UI. It includes various settings for DEV, local testing, and OIDC configuration.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/ui/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"local_ditto\": {\n    \"api_uri\": \"http://localhost:8080\",\n    \"ditto_version\": 3,\n    \"disablePolicies\": false,\n    \"disableConnections\": false,\n    \"disableOperations\": false,\n    \"authSettings\": {\n      \"main\": {\n        \"method\": \"basic\",\n        \"oidc\": {\n          \"enabled\": false\n        },\n        \"basic\": {\n          \"enabled\": true,\n          \"defaultUsernamePassword\": \"ditto:ditto\"\n        },\n        \"bearer\": {\n          \"enabled\": true\n        },\n        \"pre\": {\n          \"enabled\": false,\n          \"defaultDittoPreAuthenticatedUsername\": null\n        }\n      },\n      \"devops\": {\n        \"method\": \"basic\",\n        \"oidc\": {\n          \"enabled\": false\n        },\n        \"basic\": {\n          \"enabled\": true,\n          \"defaultUsernamePassword\": \"devops:foobar\"\n        },\n        \"bearer\": {\n          \"enabled\": true\n        }\n      },\n      \"oidc\": {\n      }\n    }\n  },\n  \"local_ditto_ide\": {\n    \"api_uri\": \"http://localhost:8080\",\n    \"ditto_version\": 3,\n    \"disablePolicies\": false,\n    \"disableConnections\": false,\n    \"disableOperations\": false,\n    \"authSettings\": {\n      \"main\": {\n        \"method\": \"pre\",\n        \"oidc\": {\n          \"enabled\": false\n        },\n        \"basic\": {\n          \"enabled\": true,\n          \"defaultUsernamePassword\": null\n        },\n        \"bearer\": {\n          \"enabled\": true\n        },\n        \"pre\": {\n          \"enabled\": false,\n          \"defaultDittoPreAuthenticatedUsername\": \"pre:ditto\"\n        }\n      },\n      \"devops\": {\n        \"method\": \"basic\",\n        \"oidc\": {\n          \"enabled\": false\n        },\n        \"basic\": {\n          \"enabled\": true,\n          \"defaultUsernamePassword\": \"devops:foobar\"\n        },\n        \"bearer\": {\n          \"enabled\": true\n        }\n      },\n      \"oidc\": {\n      }\n    }\n  },\n  \"ditto_sandbox\": {\n   // Additional environments continue...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Merging a Thing via Ditto Protocol\nDESCRIPTION: A Ditto protocol merge command that performs the same changes as the HTTP PATCH example. The command uses a content-type header of application/merge-patch+json and merges at the root path.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-02-04-merge-feature.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"com.acme/coffeebrewer/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"com.acme:coffeebrewer\",\n    \"attributes\": {\n      \"manufacturingYear\": \"2020\"\n    },\n    \"features\": {\n      \"water-tank\": {\n        \"properties\": {\n          \"configuration\": {\n            \"smartMode\": null,\n            \"tempToHold\": 50\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Resource Group\nDESCRIPTION: Creates a resource group in Azure to contain the AKS cluster and related resources.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/azure/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nresourcegroup_name=armtest\naz group create --name $resourcegroup_name --location \"westeurope\"\n```\n\n----------------------------------------\n\nTITLE: Policy Entry Modification Protocol Schema\nDESCRIPTION: Command structure for modifying policy entries within an existing policy. Allows updating multiple entries in a single operation.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/modify\",\n  \"path\": \"/entries\",\n  \"value\": \"<policy entries as JSON>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Thing Modification Commands in Eclipse Ditto (JSON)\nDESCRIPTION: This snippet provides alternative command structures for modifying specific aspects of a Thing in Eclipse Ditto, such as attributes, features, or individual properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-modifything.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes\",\n  \"value\": {\n    \"location\": {\n      \"latitude\": 44.673856,\n      \"longitude\": 8.261719\n    }\n  }\n}\n\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"value\": {\n    \"latitude\": 44.673856,\n    \"longitude\": 8.261719\n  }\n}\n\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features\",\n  \"value\": {\n    \"accelerometer\": {\n      \"properties\": {\n        \"x\": 3.141,\n        \"y\": 2.718,\n        \"z\": 1.414\n      }\n    }\n  }\n}\n\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer\",\n  \"value\": {\n    \"properties\": {\n      \"x\": 3.141,\n      \"y\": 2.718,\n      \"z\": 1.414\n    }\n  }\n}\n\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": 3.141\n}\n```\n\n----------------------------------------\n\nTITLE: Liquid Template Inclusion\nDESCRIPTION: Includes the 'taglogic.html' template using the Liquid templating engine. This likely inserts dynamic content or logic related to tags into the page.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_wot.md#2025-04-17_snippet_6\n\nLANGUAGE: Liquid\nCODE:\n```\n\"{% include taglogic.html %}\"\n```\n\n----------------------------------------\n\nTITLE: Searching for Things by Feature Definition in Ditto 3.0.0\nDESCRIPTION: Example of using the new search capability to find things with a specific feature definition. This demonstrates the ability to search within JSON arrays and feature definitions.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_300.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfilter=like(features/*/definition,\"your-model-namespace:lamp:1.*\")\n```\n\n----------------------------------------\n\nTITLE: TTN to Ditto Protocol Mapping Script\nDESCRIPTION: JavaScript function that maps TTN payload data to Ditto Protocol messages. Transforms device telemetry data into the digital twin representation including attributes and features.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-04-16-connecting-to-ttn-via-mqtt.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapToDittoProtocolMsg(\n  headers,\n  textPayload,\n  bytePayload,\n  contentType\n) {\n\n  let ttnJson = JSON.parse(textPayload);          \n  let deviceId = ttnJson['dev_id'];               \n  let payloadFields = ttnJson['payload_fields'];  \n  \n  let attributesObj = {                           \n    hardwareSerial: ttnJson['hardware_serial'],\n    ttnCounter: ttnJson['counter']\n  };\n  \n  let featuresObj = {                             \n    temperature: {\n      properties: {\n        value: payloadFields['temperature_7']\n      }\n    },\n    pressure: {\n      properties: {\n        value: payloadFields['barometric_pressure_10']\n      }\n    },\n    humidity: {\n      properties: {\n        value: payloadFields['relative_humidity_8']\n      }\n    }\n  };\n  \n  let thing = {                                   \n    attributes: attributesObj,\n    features: featuresObj\n  };\n  \n  let dittoHeaders = {\n    'response-required': false,     \n    'If-Match': '*'                 \n  };\n\n  return Ditto.buildDittoProtocolMsg(\n    'org.eclipse.ditto.ttn.demo',   \n    deviceId,                       \n    'things',\n    'twin',\n    'commands',\n    'modify',\n    '/',\n    dittoHeaders,\n    thing\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Eclipse Ditto Logs\nDESCRIPTION: Command to follow the logs of all services started with docker-compose, useful for monitoring and troubleshooting.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/docker/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose logs -f\n```\n\n----------------------------------------\n\nTITLE: FeaturePropertyModified Event JSON Structure in Eclipse Ditto\nDESCRIPTION: This is the JSON structure for a FeaturePropertyModified event in Eclipse Ditto. It includes the topic, headers with correlation ID, the path to the modified property, the new value, and the revision number.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/events/featurepropertymodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/events/modified\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties/x\",\n  \"value\": 42,\n  \"revision\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Support for ingress controller in Ditto Helm Chart\nDESCRIPTION: This enhancement allows the Ditto Helm chart to deploy an nginx-based Ingress controller if configured. The deployment of the Ingress controller is disabled by default to maintain a simpler setup.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_332.md#2025-04-17_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Transformed Direct Method Payload for Azure IoT Hub\nDESCRIPTION: Resulting JSON payload after transformation by the connection's payload mapping, ready to be sent as a direct method to Azure IoT Hub.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-06-17-hmac-credentials.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"methodName\": \"getDeviceLog\",\n  \"responseTimeoutInSeconds\": 5,\n  \"payload\": {\n    \"service\": \"my-microservice\",\n    \"amount\": 9000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Feature Properties in Eclipse Ditto JSON Protocol\nDESCRIPTION: JSON example of a RetrieveFeatureProperties command used to retrieve properties of a specific feature (accelerometer) from a digital twin. The command includes a topic, correlation ID, path to the feature properties, and an optional fields parameter to filter for specific properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievefeatureproperties-selectedfields.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/features/accelerometer/properties\",\n  \"fields\": \"properties/target_year_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Thing Attribute Using Merge Command in Eclipse Ditto\nDESCRIPTION: JSON payload for a merge command that deletes the 'location' attribute from a thing's attributes. The command uses the content-type 'application/merge-patch+json' and sets the value to null to indicate deletion.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/merge/mergedeleteattribute.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/merge\",\n  \"headers\": {\n    \"content-type\": \"application/merge-patch+json\",\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes/location\",\n  \"value\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata for All JSON Leaves in Thing Properties\nDESCRIPTION: An example of using the special syntax '*/{key}' to set metadata for all JSON leaves in a Thing's properties. This adds a changelog to all affected properties.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-metadata.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"key\": \"*/changeLog\",\n    \"value\": {\n      \"changedAt\": \"2022-08-02T04:30:07\",\n      \"changedBy\": {\n        \"name\":\"ditto\",\n        \"mail\":\"ditto@mail.com\"\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Modify All Policy Imports Response Structure\nDESCRIPTION: Response structure for modifying all policy imports, including status code for successful update.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol-specification-policies-create-or-modify.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"<namespace>/<policyName>/policies/commands/modify\",\n  \"path\": \"/imports\",\n  \"status\": {\n    \"code\": \"204\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Property Created Event in Eclipse Ditto\nDESCRIPTION: This snippet shows the event structure when a feature property is created in Eclipse Ditto. It includes the topic, headers, and details of the created property.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-createproperty.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% include_relative generated/events/featurepropertycreated.md %}\n```\n\n----------------------------------------\n\nTITLE: Binary CloudEvent Format Example for Ditto\nDESCRIPTION: Shows the headers and payload format for a Binary CloudEvent that would be sent to Eclipse Ditto. The headers contain the required CloudEvents metadata fields, while the payload contains a Ditto command to modify a thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-mapping.md#2025-04-17_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n  headers:\n      ce-specversion:1.0\n      ce-id:some-id\n      ce-type:some-type\n      ce-source:generic-producer\n      content-type:application/vnd.eclipse.ditto+json\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"my.sensors/sensor01/things/twin/commands/modify\",\n  \"path\": \"/\",\n  \"value\": {\n    \"thingId\": \"my.sensors:sensor01\",\n    \"policyId\": \"my.test:policy\",\n    \"attributes\": {\n      \"manufacturer\": \"Well known sensors producer\",\n      \"serial number\": \"100\",\n      \"location\": \"Ground floor\"\n    },\n    \"features\": {\n      \"measurements\": {\n        \"properties\": {\n          \"temperature\": 100,\n          \"humidity\": 0\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Specific Feature Message Subjects\nDESCRIPTION: HTTP endpoints for subscribing to Feature messages with specific subjects.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-sse.md#2025-04-17_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:8080/api/2/things/<thingId>/features/<featureId>/inbox/messages/<subject>\nhttp://localhost:8080/api/2/things/<thingId>/features/<featureId>/outbox/messages/<subject>\n```\n\n----------------------------------------\n\nTITLE: Merging a Thing via Ditto Java Client\nDESCRIPTION: Java code example demonstrating how to merge a thing using the Ditto Java Client. The example creates a thing with a new attribute and modified feature, then sends a merge command to update the existing thing.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-02-04-merge-feature.md#2025-04-17_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfinal String THING_ID = \"com.acme:coffeebrewer\";\nfinal String FEATURE_ID = \"water-tank\";\nfinal JsonPointer ATTRIBUTE_KEY = JsonFactory.newPointer(\"manufacturingYear\");\nfinal String ATTRIBUTE_VALUE = \"2020\";\nfinal Feature FEATURE = ThingsModelFactory.newFeatureBuilder()\n        .withId(FEATURE_ID)\n        .properties(ThingsModelFactory.newFeaturePropertiesBuilder()\n                        .set(\"smartMode\", false)\n                        .set(\"tempToHold\", 50)\n                        .build())\n        .build();\n\nfinal Thing THING = ThingsModelFactory.newThingBuilder()\n        .setId(THING_ID)\n        .setAttribute(ATTRIBUTE_KEY_NEW, JsonFactory.newValue(ATTRIBUTE_VALUE))\n        .setFeature(FEATURE)\n        .build();\n\n// initialize the ditto-client\nfinal DittoClient dittoClient = ... ;\n\ndittoClient.twin().merge(THING_ID, THING)\n        .whenComplete(((adaptable, throwable) -> {\n            if (throwable != null) {\n                LOGGER.error(\"Received error while sending MergeThing: '{}' \", throwable.toString());\n            } else {\n                LOGGER.info(\"Received response for MergeThing: '{}'\", adaptable);\n            }\n        }));\n```\n\n----------------------------------------\n\nTITLE: Jekyll Template Include Commands\nDESCRIPTION: Template code that includes and renders markdown content for thing definition retrieval commands\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-retrievethingdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/query/retrievethingdefinition.md %}{% endcapture %}\n{{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Things with Field Selection in Eclipse Ditto\nDESCRIPTION: JSON command for retrieving multiple specific things by their IDs from Eclipse Ditto's twin persistence. The command includes a list of thing IDs to retrieve and uses field selection to limit the response to only include specific fields (thingId and location attributes).\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievethings-withfieldselector.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"_/_/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"value\": {\n    \"thingIds\": [\n      \"org.eclipse.ditto:fancy-thing_53\",\n      \"org.eclipse.ditto:fancy-thing_58\",\n      \"org.eclipse.ditto:fancy-thing_67\"\n    ]\n  },\n  \"fields\": \"thingId,attributes(location)\"\n}\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Configuration for OIDC\nDESCRIPTION: Configuration for adding SSL certificates when using OIDC providers with self-signed certificates.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_5\n\nLANGUAGE: hocon\nCODE:\n```\nssl-config {\n  trustManager = {\n    stores = [\n      { type = \"PEM\", path = \"/path/to/cert/globalsign.crt\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Title Definition\nDESCRIPTION: Defines the title of the HTML page. This is used for display in the browser tab and search engine results.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_wot.md#2025-04-17_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"title: \\\"WoT (Web of Things) topics\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Definition using Merge Command in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates how to delete a feature definition using the merge command in Eclipse Ditto. It includes the necessary command structure and path.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergefeaturedefinition.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture command %}{% include_relative generated/commands/merge/mergedeletefeaturedefinition.md %}{% endcapture %} {{ command | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Live Channel Condition GET Request (HTTP API)\nDESCRIPTION: Shows how to use a live channel condition in a GET request to retrieve thing data. The condition checks if a specific attribute is set to true.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-conditional-requests.md#2025-04-17_snippet_5\n\nLANGUAGE: curl\nCODE:\n```\nGET .../things/{thingId}?live-channel-condition=eq(attributes/useLiveChannel,true)\n```\n\n----------------------------------------\n\nTITLE: Deploying AKS Cluster using ARM Template\nDESCRIPTION: Deploys the AKS cluster and related infrastructure using an Azure Resource Manager (ARM) template.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/deployment/azure/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nunique_solution_prefix=myprefix\naz group deployment create --name DittoBasicInfrastructure --resource-group $resourcegroup_name --template-file arm/dittoInfrastructureDeployment.json --parameters uniqueSolutionPrefix=$unique_solution_prefix servicePrincipalObjectId=$object_id_principal servicePrincipalClientId=$app_id_principal servicePrincipalClientSecret=$password_principal\n```\n\n----------------------------------------\n\nTITLE: Creating a Digital Twin JSON Structure in Eclipse Ditto\nDESCRIPTION: This JSON structure represents a digital twin for a floor lamp in Eclipse Ditto. It includes metadata (attributes), state data (features), and a definition linking to a Web of Things (WoT) Thing Model.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/intro-hello-world.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"io.eclipseprojects.ditto:floor-lamp-0815\",\n  \"policyId\": \"io.eclipseprojects.ditto:floor-lamp-0815\",\n  \"definition\": \"https://eclipse-ditto.github.io/ditto-examples/wot/models/floor-lamp-1.0.0.tm.jsonld\",\n  \"attributes\": {\n    \"manufacturer\": \"\",\n    \"serialNo\": \"\"\n  },\n  \"features\": {\n    \"Spot1\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/dimmable-colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/switchable-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"dimmer-level\": 0,\n        \"color\": {\n          \"r\": 0,\n          \"g\": 0,\n          \"b\": 0\n        },\n        \"on\": false\n      }\n    },\n    \"Spot2\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/dimmable-colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/switchable-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"dimmer-level\": 0,\n        \"color\": {\n          \"r\": 0,\n          \"g\": 0,\n          \"b\": 0\n        },\n        \"on\": false\n      }\n    },\n    \"Spot3\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/dimmable-colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/switchable-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"dimmer-level\": 0,\n        \"color\": {\n          \"r\": 0,\n          \"g\": 0,\n          \"b\": 0\n        },\n        \"on\": false\n      }\n    },\n    \"ConnectionStatus\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/connection-status-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"readySince\": \"\",\n        \"readyUntil\": \"\"\n      }\n    },\n    \"PowerConsumptionAwareness\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/power-consumption-aware-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"reportPowerConsumption\": {}\n      }\n    },\n    \"SmokeDetection\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/smoke-detector-1.0.0.tm.jsonld\"\n      ]\n    },\n    \"Status-LED\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/switchable-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"color\": {\n          \"r\": 0,\n          \"g\": 0,\n          \"b\": 0\n        },\n        \"on\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Migration Script for Ditto 1.0.0\nDESCRIPTION: This script migrates Thing and Policy events and snapshots from suffixed collections to consolidated journals. It copies data from collection-per-namespace format to a single journal for each entity type, which is required when upgrading to Ditto 1.0.0.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/release_notes_100.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmigration_mongodb_1.0.0.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Reply Target with Response Types\nDESCRIPTION: Configures a reply target with header mapping and expected response types including success, error, and negative acknowledgements.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-connections.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"replyTarget\": {\n    \"enabled\": true,\n    \"address\": \"{{%raw%}}{{ header:reply-to }}{{%endraw%}}\",\n    \"headerMapping\": {\n      \"correlation-id\": \"{{%raw%}}{{ header:correlation-id }}{{%endraw%}}\"\n    },\n    \"expectedResponseTypes\": [\n      \"response\",\n      \"error\",\n      \"nack\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Client Usage Example\nDESCRIPTION: Demonstrates how to use the new asynchronous client creation interface with proper error handling and resource cleanup.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2020-10-08-asynchronous-client-creation.md#2025-04-17_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal DisconnectedDittoClient disconnectedClient =\n    DittoClients.newDisconnectedInstance(messagingProvider);\n\ndisconnectedClient.connect()\n    .thenAccept(this::startUsingDittoClient)\n    .exceptionally(exception -> {\n        this.handleConnectionFailure(exception);\n        disconnectedClient.destroy();\n        return null;\n    });\n```\n\n----------------------------------------\n\nTITLE: Sending Live Command with HTTP Header in Bash\nDESCRIPTION: Example of sending a GET request to retrieve thing data using the live channel specified in HTTP header with a custom timeout.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-12-20-http-live-channel.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET -H 'channel: live' -H 'timeout: 30s' /api/2/things/org.eclipse.ditto:coffeebrewer'\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript Payload Mapping for Ditto Protocol\nDESCRIPTION: A JavaScript function that maps incoming JSON payloads to Ditto Protocol messages, handling temperature and humidity data from devices.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2018-05-02-connecting-ditto-hono.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction mapToDittoProtocolMsg(\n    headers,\n    textPayload,\n    bytePayload,\n    contentType\n) {\n\n    if (contentType !== \"application/json\") {\n        return null; // only handle messages with content-type application/json\n    }\n\n    var jsonData = JSON.parse(textPayload);\n    var temperature = jsonData.temp;\n    var humidity = jsonData.hum;\n    \n    var path;\n    var value;\n    if (temperature != null && humidity != null) {\n        path = \"/features\";\n        value = {\n            temperature: {\n                properties: {\n                    value: temperature\n                }\n            },\n            humidity: {\n                properties: {\n                    value: humidity\n                }\n            }\n        };\n    } else if (temperature != null) {\n        path = \"/features/temperature/properties/value\";\n        value = temperature;\n    } else if (humidity != null) {\n        path = \"/features/humidity/properties/value\";\n        value = humidity;\n    }\n    \n    if (!path || !value) {\n        return null;\n    }\n\n    return Ditto.buildDittoProtocolMsg(\n        \"org.eclipse.ditto\",     // the namespace we use\n        headers[\"device_id\"],    // Hono sets the authenticated device-id in this header\n        \"things\",                // it is a Thing entity we want to update\n        \"twin\",                  // we want to update the twin\n        \"commands\",\n        \"modify\",                // command = modify\n        path,\n        headers,                 // copy all headers as Ditto headers\n        value\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Response to Merging a Feature Property in Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the response structure after merging a feature property. It typically includes status and other relevant information.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/protocol-examples-mergeproperty.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% capture response %}{% include_relative generated/commands/merge/mergefeaturepropertyresponse.md %}{% endcapture %} {{\nresponse | markdownify }}\n```\n\n----------------------------------------\n\nTITLE: Response example for erasing namespace data in Ditto\nDESCRIPTION: Example response from the data purge operation showing results for different resource types that have been successfully purged.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-operating.md#2025-04-17_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"?\": {\n    \"?\": {\n      \"type\": \"namespaces.responses:purgeNamespace\",\n      \"status\": 200,\n      \"namespace\": \"namespaceToPurge\",\n      \"resourceType\": \"thing\",\n      \"successful\": true\n    },\n    \"?1\": {\n      \"type\": \"namespaces.responses:purgeNamespace\",\n      \"status\": 200,\n      \"namespace\": \"namespaceToPurge\",\n      \"resourceType\": \"policy\",\n      \"successful\": true\n    },\n    \"?2\": {\n      \"type\": \"namespaces.responses:purgeNamespace\",\n      \"status\": 200,\n      \"namespace\": \"namespaceToPurge\",\n      \"resourceType\": \"thing-search\",\n      \"successful\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up K6 Test Resources in Kubernetes\nDESCRIPTION: Kubernetes commands to clean up test resources after completion. These commands delete the K6 TestRun custom resource and associated pods.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/benchmark-tool/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete -f k6-ditto-benchmark-test.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyPolicyIdResponse Structure in JSON for Eclipse Ditto\nDESCRIPTION: This JSON structure represents a ModifyPolicyIdResponse in the Eclipse Ditto project. It includes a topic for a 'fancy-thing', headers with a correlation ID, a path pointing to the policyId, and a status code of 204 indicating a successful modification with no content returned.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifypolicyidresponsemodified.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/policyId\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Policy JSON Structure in API Version 2\nDESCRIPTION: Illustrates the JSON structure of a Policy in API version 2, including policyId, entries, subjects, and resources.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/httpapi-concepts.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policyId\": \"{policyId}\",\n  \"entries\": {\n    \"{entryLabel-1}\": {\n      \"subjects\": {\n        \"{subjectId1}\": {\n        }\n      },\n      \"resources\": {\n        \"{resource1}\": {\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ditto UI Unit Tests\nDESCRIPTION: Command to execute the unit test suite for Ditto UI\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/ui/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyThingResponse JSON Structure for Eclipse Ditto\nDESCRIPTION: This JSON snippet represents the structure of a ModifyThingResponse in Eclipse Ditto. It includes the topic, headers with a correlation ID, path, and status code. The response indicates a successful modification with a 204 status code.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/modify/modifythingresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/modify\",\n  \"headers\": {\n    \"correlation-id\": \"<preserved-command-correlation-id>\"\n  },\n  \"path\": \"/\",\n  \"status\": 204\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional HTTP PATCH Request with Query Parameter\nDESCRIPTION: Example of a conditional PATCH request using query parameter to update water tank temperature based on last modification time.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/_posts/2021-09-23-conditional-requests.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH -H 'Content-Type: application/json' /api/2/things/org.eclipse.ditto:coffeebrewer/features/water-tank/properties/status/temperature?condition=gt(features/water-tank/properties/status/lastModified,\"2021-09-23T07:00:00Z\") -d '{ temperature: 45.26, \"lastModified\": \"'\"$(date --utc +%FT%TZ)\"'\" }'\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Thing Creation based on Thing Model\nDESCRIPTION: This JSON snippet shows the response received after creating a Thing based on the floor-lamp Thing Model. It includes the Thing's ID, policy ID, definition, attributes, and features as defined in the Thing Model.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/basic-wot-integration-example.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"thingId\": \"io.eclipseprojects.ditto:floor-lamp-0815\",\n  \"policyId\": \"io.eclipseprojects.ditto:floor-lamp-0815\",\n  \"definition\": \"https://eclipse-ditto.github.io/ditto-examples/wot/models/floor-lamp-1.0.0.tm.jsonld\",\n  \"attributes\": {\n    \"manufacturer\": \"\",\n    \"serialNo\": \"\"\n  },\n  \"features\": {\n    \"Spot1\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/dimmable-colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/switchable-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"dimmer-level\": 0.0,\n        \"color\": {\n          \"r\": 0,\n          \"g\": 0,\n          \"b\": 0\n        },\n        \"on\": false\n      }\n    },\n    \"Spot2\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/dimmable-colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/switchable-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"dimmer-level\": 0.0,\n        \"color\": {\n          \"r\": 0,\n          \"g\": 0,\n          \"b\": 0\n        },\n        \"on\": false\n      }\n    },\n    \"Spot3\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/dimmable-colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/switchable-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"dimmer-level\": 0.0,\n        \"color\": {\n          \"r\": 0,\n          \"g\": 0,\n          \"b\": 0\n        },\n        \"on\": false\n      }\n    },\n    \"ConnectionStatus\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/connection-status-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"readySince\": \"\",\n        \"readyUntil\": \"\"\n      }\n    },\n    \"PowerConsumptionAwareness\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/power-consumption-aware-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"reportPowerConsumption\": {}\n      }\n    },\n    \"SmokeDetection\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/smoke-detector-1.0.0.tm.jsonld\"\n      ]\n    },\n    \"Status-LED\": {\n      \"definition\": [\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/colored-lamp-1.0.0.tm.jsonld\",\n        \"https://eclipse-ditto.github.io/ditto-examples/wot/models/switchable-1.0.0.tm.jsonld\"\n      ],\n      \"properties\": {\n        \"color\": {\n          \"r\": 0,\n          \"g\": 0,\n          \"b\": 0\n        },\n        \"on\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Thing Attributes JSON Command Structure\nDESCRIPTION: JSON command structure for retrieving all attributes of a Thing in Eclipse Ditto. The command uses the twin/commands/retrieve endpoint and requires a correlation-id in the headers. The path specifies that attributes are being retrieved.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrieveattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/attributes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RetrieveThing Command Structure in JSON for Eclipse Ditto\nDESCRIPTION: This snippet demonstrates the JSON structure for a RetrieveThing command in Eclipse Ditto. It includes the topic, which specifies the command type and target, headers with a correlation ID, and an empty path indicating the entire thing is to be retrieved.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/protocol/examples/things/generated/commands/query/retrievething-withsnapshotrevision.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"topic\": \"org.eclipse.ditto/fancy-thing/things/twin/commands/retrieve\",\n  \"headers\": {\n    \"correlation-id\": \"<command-correlation-id>\"\n  },\n  \"path\": \"/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Eclipse Ditto with Maven and Docker\nDESCRIPTION: This snippet shows the commands to build Eclipse Ditto using Maven and create Docker images. It requires JDK 21, Apache Maven 3.9 or higher, and a running Docker daemon (version 18.06 CE or later).\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/installation-building.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install\nsh build-images.sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Connection Logs via Piggyback Command\nDESCRIPTION: DevOps command for enabling logging for a specific connection.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-manage-connections-piggyback.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"targetActorSelection\": \"/system/sharding/connection\",\n  \"headers\": {\n    \"aggregate\": false,\n    \"is-group-topic\": false,\n    \"ditto-sudo\": true\n  },\n  \"piggybackCommand\": {\n    \"type\": \"connectivity.commands:enableConnectionLogs\",\n    \"connectionId\": \"<connectionID>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Tag Logic\nDESCRIPTION: This snippet includes the content of the `taglogic.html` file into the current page.  This allows re-use of common tag logic across multiple tag definitions.  No specific parameters are passed, assuming `taglogic.html` relies on variables defined elsewhere on the page.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/tags/tag_news.md#2025-04-17_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n{% include taglogic.html %}\n```\n\n----------------------------------------\n\nTITLE: Complete AMQP 0.9.1 Connection Configuration\nDESCRIPTION: Full JSON configuration example for establishing an AMQP 0.9.1 connection including sources and targets.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/documentation/src/main/resources/pages/ditto/connectivity-protocol-bindings-amqp091.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection\": {\n    \"id\": \"rabbit-example-connection-123\",\n    \"connectionType\": \"amqp-091\",\n    \"connectionStatus\": \"open\",\n    \"failoverEnabled\": true,\n    \"uri\": \"amqp://user:password@localhost:5672/vhost\",\n    \"sources\": [\n      {\n        \"addresses\": [\n          \"queueName\"\n        ],\n        \"authorizationContext\": [\"ditto:inbound-auth-subject\", \"...\"]\n      }\n    ],\n    \"targets\": [\n      {\n        \"address\": \"exchangeName/routingKey\",\n        \"topics\": [\n          \"_/_/things/twin/events\",\n          \"_/_/things/live/messages\"\n        ],\n        \"authorizationContext\": [\"ditto:outbound-auth-subject\", \"...\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Ditto with Local Images\nDESCRIPTION: Commands to start Ditto using locally built Docker images. This includes copying environment configuration and starting the containers with Docker Compose.\nSOURCE: https://github.com/eclipse-ditto/ditto/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../deployment/docker/\n# the \"dev.env\" file contains the SNAPSHOT number of Ditto, copy it to \".env\" so that docker compose uses it:\ncp dev.env .env\ndocker-compose up -d\n```"
  }
]